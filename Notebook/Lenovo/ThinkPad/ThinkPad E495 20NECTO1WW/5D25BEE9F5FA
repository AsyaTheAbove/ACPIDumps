
Intel ACPI Component Architecture
ACPI Binary Table Extraction Utility version 20200925
Copyright (c) 2000 - 2020 Intel Corporation


 Signature  Length    Version Oem       Oem         Oem         Compiler Compiler
                              Id        TableId     RevisionId  Name     Revision
 _________  __________  ____  ________  __________  __________  _______  __________

 01)  SSDT  0x00000924  0x01  "LENOVO"  "WmiTable"  0x00000001  "INTL"   0x20120711
 02)  MCFG  0x0000003C  0x01  "LENOVO"  "TP-R11  "  0x00001100  "PTEC"   0x00000002
 03)  APIC  0x00000138  0x02  "LENOVO"  "TP-R11  "  0x00001100  "PTEC"   0x00000002
 04)  CRAT  0x00000810  0x01  "LENOVO"  "TP-R11  "  0x00001100  "PTEC"   0x00000002
 05)  SSDT  0x00005419  0x02  "LENOVO"  "TP-R11  "  0x00000002  "MSFT"   0x02000002
 06)  TPM2  0x00000034  0x03  "LENOVO"  "TP-R11  "  0x00001100  "PTEC"   0x00000002
 07)  VFCT  0x0000D484  0x01  "LENOVO"  "TP-R11  "  0x00001100  "PTEC"   0x00000002
 08)  BATB  0x0000004A  0x02  "LENOVO"  "TP-R11  "  0x00001100  "PTEC"   0x00000002
 09)  CDIT  0x00000029  0x01  "LENOVO"  "TP-R11  "  0x00001100  "PTEC"   0x00000002
 10)  UEFI  0x000000B2  0x01  "LENOVO"  "TP-R11  "  0x00001100  "PTEC"   0x00000002
 11)  IVRS  0x0000013E  0x02  "LENOVO"  "TP-R11  "  0x00001100  "PTEC"   0x00000002
 12)  DSDT  0x0000C558  0x01  "LENOVO"  "TP-R11  "  0x00001100  "INTL"   0x20120711
 13)  SSDT  0x00001134  0x01  "LENOVO"  "TP-R11  "  0x00000001  "INTL"   0x20120711
 14)  SBST  0x00000030  0x01  "LENOVO"  "TP-R11  "  0x00001100  "PTEC"   0x00000002
 15)  WSMT  0x00000028  0x01  "LENOVO"  "TP-R11  "  0x00001100  "PTEC"   0x00000002
 16)  SSDT  0x0000119C  0x01  "LENOVO"  "TP-R11  "  0x00000001  "AMD "   0x00000001
 17)  SSDT  0x00000651  0x02  "LENOVO"  "Tpm2Tabl"  0x00001000  "INTL"   0x20120711
 18)  FACP  0x0000010C  0x05  "LENOVO"  "TP-R11  "  0x00001100  "PTEC"   0x00000002
 19)  FPDT  0x00000034  0x01  "LENOVO"  "TP-R11  "  0x00001100  "PTEC"   0x00000002
 20)  SSDT  0x00000B59  0x01  "LENOVO"  "UsbCTabl"  0x00000001  "INTL"   0x20120711
 21)  MSDM  0x00000055  0x03  "LENOVO"  "TP-R11  "  0x00001100  "PTEC"   0x00000002
 22)  SSDT  0x00001DCC  0x01  "LENOVO"  "TP-R11  "  0x00000001  "INTL"   0x20120711
 23)  HPET  0x00000038  0x01  "LENOVO"  "TP-R11  "  0x00001100  "PTEC"   0x00000002
 24)  SSDT  0x00000C5D  0x01  "LENOVO"  "TP-R11  "  0x00000001  "INTL"   0x20120711
 25)  FACS  0x00000040  0x01
 26)  BGRT  0x00000038  0x01  "LENOVO"  "TP-R11  "  0x00001100  "PTEC"   0x00000002

Found 26 ACPI tables in acpidump

APIC
----
[000h 0000   4]                    Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004   4]                 Table Length : 00000138
[008h 0008   1]                     Revision : 02
[009h 0009   1]                     Checksum : C8
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "TP-R11  "
[018h 0024   4]                 Oem Revision : 00001100
[01Ch 0028   4]              Asl Compiler ID : "PTEC"
[020h 0032   4]        Asl Compiler Revision : 00000002

[024h 0036   4]           Local Apic Address : FEE00000
[028h 0040   4]        Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044   1]                Subtable Type : 00 [Processor Local APIC]
[02Dh 0045   1]                       Length : 08
[02Eh 0046   1]                 Processor ID : 00
[02Fh 0047   1]                Local Apic ID : 00
[030h 0048   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[034h 0052   1]                Subtable Type : 00 [Processor Local APIC]
[035h 0053   1]                       Length : 08
[036h 0054   1]                 Processor ID : 01
[037h 0055   1]                Local Apic ID : 01
[038h 0056   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[03Ch 0060   1]                Subtable Type : 00 [Processor Local APIC]
[03Dh 0061   1]                       Length : 08
[03Eh 0062   1]                 Processor ID : 02
[03Fh 0063   1]                Local Apic ID : 02
[040h 0064   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[044h 0068   1]                Subtable Type : 00 [Processor Local APIC]
[045h 0069   1]                       Length : 08
[046h 0070   1]                 Processor ID : 03
[047h 0071   1]                Local Apic ID : 03
[048h 0072   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[04Ch 0076   1]                Subtable Type : 00 [Processor Local APIC]
[04Dh 0077   1]                       Length : 08
[04Eh 0078   1]                 Processor ID : 04
[04Fh 0079   1]                Local Apic ID : 04
[050h 0080   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[054h 0084   1]                Subtable Type : 00 [Processor Local APIC]
[055h 0085   1]                       Length : 08
[056h 0086   1]                 Processor ID : 05
[057h 0087   1]                Local Apic ID : 05
[058h 0088   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[05Ch 0092   1]                Subtable Type : 00 [Processor Local APIC]
[05Dh 0093   1]                       Length : 08
[05Eh 0094   1]                 Processor ID : 06
[05Fh 0095   1]                Local Apic ID : 06
[060h 0096   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[064h 0100   1]                Subtable Type : 00 [Processor Local APIC]
[065h 0101   1]                       Length : 08
[066h 0102   1]                 Processor ID : 07
[067h 0103   1]                Local Apic ID : 07
[068h 0104   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[06Ch 0108   1]                Subtable Type : 00 [Processor Local APIC]
[06Dh 0109   1]                       Length : 08
[06Eh 0110   1]                 Processor ID : 08
[06Fh 0111   1]                Local Apic ID : 08
[070h 0112   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[074h 0116   1]                Subtable Type : 00 [Processor Local APIC]
[075h 0117   1]                       Length : 08
[076h 0118   1]                 Processor ID : 09
[077h 0119   1]                Local Apic ID : 09
[078h 0120   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[07Ch 0124   1]                Subtable Type : 00 [Processor Local APIC]
[07Dh 0125   1]                       Length : 08
[07Eh 0126   1]                 Processor ID : 0A
[07Fh 0127   1]                Local Apic ID : 0A
[080h 0128   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[084h 0132   1]                Subtable Type : 00 [Processor Local APIC]
[085h 0133   1]                       Length : 08
[086h 0134   1]                 Processor ID : 0B
[087h 0135   1]                Local Apic ID : 0B
[088h 0136   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[08Ch 0140   1]                Subtable Type : 00 [Processor Local APIC]
[08Dh 0141   1]                       Length : 08
[08Eh 0142   1]                 Processor ID : 0C
[08Fh 0143   1]                Local Apic ID : 0C
[090h 0144   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[094h 0148   1]                Subtable Type : 00 [Processor Local APIC]
[095h 0149   1]                       Length : 08
[096h 0150   1]                 Processor ID : 0D
[097h 0151   1]                Local Apic ID : 0D
[098h 0152   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[09Ch 0156   1]                Subtable Type : 00 [Processor Local APIC]
[09Dh 0157   1]                       Length : 08
[09Eh 0158   1]                 Processor ID : 0E
[09Fh 0159   1]                Local Apic ID : 0E
[0A0h 0160   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0A4h 0164   1]                Subtable Type : 00 [Processor Local APIC]
[0A5h 0165   1]                       Length : 08
[0A6h 0166   1]                 Processor ID : 0F
[0A7h 0167   1]                Local Apic ID : 0F
[0A8h 0168   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0ACh 0172   1]                Subtable Type : 01 [I/O APIC]
[0ADh 0173   1]                       Length : 0C
[0AEh 0174   1]                  I/O Apic ID : 20
[0AFh 0175   1]                     Reserved : 00
[0B0h 0176   4]                      Address : FEC00000
[0B4h 0180   4]                    Interrupt : 00000000

[0B8h 0184   1]                Subtable Type : 01 [I/O APIC]
[0B9h 0185   1]                       Length : 0C
[0BAh 0186   1]                  I/O Apic ID : 21
[0BBh 0187   1]                     Reserved : 00
[0BCh 0188   4]                      Address : FEC01000
[0C0h 0192   4]                    Interrupt : 00000018

[0C4h 0196   1]                Subtable Type : 02 [Interrupt Source Override]
[0C5h 0197   1]                       Length : 0A
[0C6h 0198   1]                          Bus : 00
[0C7h 0199   1]                       Source : 00
[0C8h 0200   4]                    Interrupt : 00000002
[0CCh 0204   2]        Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0

[0CEh 0206   1]                Subtable Type : 02 [Interrupt Source Override]
[0CFh 0207   1]                       Length : 0A
[0D0h 0208   1]                          Bus : 00
[0D1h 0209   1]                       Source : 09
[0D2h 0210   4]                    Interrupt : 00000009
[0D6h 0214   2]        Flags (decoded below) : 000F
                                    Polarity : 3
                                Trigger Mode : 3

[0D8h 0216   1]                Subtable Type : 04 [Local APIC NMI]
[0D9h 0217   1]                       Length : 06
[0DAh 0218   1]                 Processor ID : 00
[0DBh 0219   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0DDh 0221   1]         Interrupt Input LINT : 01

[0DEh 0222   1]                Subtable Type : 04 [Local APIC NMI]
[0DFh 0223   1]                       Length : 06
[0E0h 0224   1]                 Processor ID : 01
[0E1h 0225   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0E3h 0227   1]         Interrupt Input LINT : 01

[0E4h 0228   1]                Subtable Type : 04 [Local APIC NMI]
[0E5h 0229   1]                       Length : 06
[0E6h 0230   1]                 Processor ID : 02
[0E7h 0231   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0E9h 0233   1]         Interrupt Input LINT : 01

[0EAh 0234   1]                Subtable Type : 04 [Local APIC NMI]
[0EBh 0235   1]                       Length : 06
[0ECh 0236   1]                 Processor ID : 03
[0EDh 0237   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0EFh 0239   1]         Interrupt Input LINT : 01

[0F0h 0240   1]                Subtable Type : 04 [Local APIC NMI]
[0F1h 0241   1]                       Length : 06
[0F2h 0242   1]                 Processor ID : 04
[0F3h 0243   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0F5h 0245   1]         Interrupt Input LINT : 01

[0F6h 0246   1]                Subtable Type : 04 [Local APIC NMI]
[0F7h 0247   1]                       Length : 06
[0F8h 0248   1]                 Processor ID : 05
[0F9h 0249   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0FBh 0251   1]         Interrupt Input LINT : 01

[0FCh 0252   1]                Subtable Type : 04 [Local APIC NMI]
[0FDh 0253   1]                       Length : 06
[0FEh 0254   1]                 Processor ID : 06
[0FFh 0255   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[101h 0257   1]         Interrupt Input LINT : 01

[102h 0258   1]                Subtable Type : 04 [Local APIC NMI]
[103h 0259   1]                       Length : 06
[104h 0260   1]                 Processor ID : 07
[105h 0261   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[107h 0263   1]         Interrupt Input LINT : 01

[108h 0264   1]                Subtable Type : 04 [Local APIC NMI]
[109h 0265   1]                       Length : 06
[10Ah 0266   1]                 Processor ID : 08
[10Bh 0267   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[10Dh 0269   1]         Interrupt Input LINT : 01

[10Eh 0270   1]                Subtable Type : 04 [Local APIC NMI]
[10Fh 0271   1]                       Length : 06
[110h 0272   1]                 Processor ID : 09
[111h 0273   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[113h 0275   1]         Interrupt Input LINT : 01

[114h 0276   1]                Subtable Type : 04 [Local APIC NMI]
[115h 0277   1]                       Length : 06
[116h 0278   1]                 Processor ID : 0A
[117h 0279   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[119h 0281   1]         Interrupt Input LINT : 01

[11Ah 0282   1]                Subtable Type : 04 [Local APIC NMI]
[11Bh 0283   1]                       Length : 06
[11Ch 0284   1]                 Processor ID : 0B
[11Dh 0285   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[11Fh 0287   1]         Interrupt Input LINT : 01

[120h 0288   1]                Subtable Type : 04 [Local APIC NMI]
[121h 0289   1]                       Length : 06
[122h 0290   1]                 Processor ID : 0C
[123h 0291   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[125h 0293   1]         Interrupt Input LINT : 01

[126h 0294   1]                Subtable Type : 04 [Local APIC NMI]
[127h 0295   1]                       Length : 06
[128h 0296   1]                 Processor ID : 0D
[129h 0297   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[12Bh 0299   1]         Interrupt Input LINT : 01

[12Ch 0300   1]                Subtable Type : 04 [Local APIC NMI]
[12Dh 0301   1]                       Length : 06
[12Eh 0302   1]                 Processor ID : 0E
[12Fh 0303   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[131h 0305   1]         Interrupt Input LINT : 01

[132h 0306   1]                Subtable Type : 04 [Local APIC NMI]
[133h 0307   1]                       Length : 06
[134h 0308   1]                 Processor ID : 0F
[135h 0309   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[137h 0311   1]         Interrupt Input LINT : 01

Raw Table Data: Length 312 (0x138)

    0000: 41 50 49 43 38 01 00 00 02 C8 4C 45 4E 4F 56 4F  // APIC8.....LENOVO
    0010: 54 50 2D 52 31 31 20 20 00 11 00 00 50 54 45 43  // TP-R11  ....PTEC
    0020: 02 00 00 00 00 00 E0 FE 01 00 00 00 00 08 00 00  // ................
    0030: 01 00 00 00 00 08 01 01 01 00 00 00 00 08 02 02  // ................
    0040: 01 00 00 00 00 08 03 03 01 00 00 00 00 08 04 04  // ................
    0050: 01 00 00 00 00 08 05 05 01 00 00 00 00 08 06 06  // ................
    0060: 01 00 00 00 00 08 07 07 01 00 00 00 00 08 08 08  // ................
    0070: 00 00 00 00 00 08 09 09 00 00 00 00 00 08 0A 0A  // ................
    0080: 00 00 00 00 00 08 0B 0B 00 00 00 00 00 08 0C 0C  // ................
    0090: 00 00 00 00 00 08 0D 0D 00 00 00 00 00 08 0E 0E  // ................
    00A0: 00 00 00 00 00 08 0F 0F 00 00 00 00 01 0C 20 00  // .............. .
    00B0: 00 00 C0 FE 00 00 00 00 01 0C 21 00 00 10 C0 FE  // ..........!.....
    00C0: 18 00 00 00 02 0A 00 00 02 00 00 00 00 00 02 0A  // ................
    00D0: 00 09 09 00 00 00 0F 00 04 06 00 05 00 01 04 06  // ................
    00E0: 01 05 00 01 04 06 02 05 00 01 04 06 03 05 00 01  // ................
    00F0: 04 06 04 05 00 01 04 06 05 05 00 01 04 06 06 05  // ................
    0100: 00 01 04 06 07 05 00 01 04 06 08 05 00 01 04 06  // ................
    0110: 09 05 00 01 04 06 0A 05 00 01 04 06 0B 05 00 01  // ................
    0120: 04 06 0C 05 00 01 04 06 0D 05 00 01 04 06 0E 05  // ................
    0130: 00 01 04 06 0F 05 00 01                          // ........


BATB
----
[000h 0000   4]                    Signature : "BATB"    
[004h 0004   4]                 Table Length : 0000004A
[008h 0008   1]                     Revision : 02
[009h 0009   1]                     Checksum : D2
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "TP-R11  "
[018h 0024   4]                 Oem Revision : 00001100
[01Ch 0028   4]              Asl Compiler ID : "PTEC"
[020h 0032   4]        Asl Compiler Revision : 00000002


**** Unknown ACPI table signature [BATB]


Raw Table Data: Length 74 (0x4A)

    0000: 42 41 54 42 4A 00 00 00 02 D2 4C 45 4E 4F 56 4F  // BATBJ.....LENOVO
    0010: 54 50 2D 52 31 31 20 20 00 11 00 00 50 54 45 43  // TP-R11  ....PTEC
    0020: 02 00 00 00 E8 63 95 D2 E1 CF 41 4D 8E 54 DA 43  // .....c....AM.T.C
    0030: 22 FE DE 5C 36 00 00 50 D7 BB 00 00 00 00 00 00  // "..\6..P........
    0040: D5 BB 00 00 00 00 00 00 01 00                    // ..........


BGRT
----
[000h 0000   4]                    Signature : "BGRT"    [Boot Graphics Resource Table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : F3
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "TP-R11  "
[018h 0024   4]                 Oem Revision : 00001100
[01Ch 0028   4]              Asl Compiler ID : "PTEC"
[020h 0032   4]        Asl Compiler Revision : 00000002

[024h 0036   2]                      Version : 0001
[026h 0038   1]       Status (decoded below) : 01
                                   Displayed : 1
                          Orientation Offset : 0
[027h 0039   1]                   Image Type : 00
[028h 0040   8]                Image Address : 00000000B5505018
[030h 0048   4]                Image OffsetX : 00000240
[034h 0052   4]                Image OffsetY : 0000011C

Raw Table Data: Length 56 (0x38)

    0000: 42 47 52 54 38 00 00 00 01 F3 4C 45 4E 4F 56 4F  // BGRT8.....LENOVO
    0010: 54 50 2D 52 31 31 20 20 00 11 00 00 50 54 45 43  // TP-R11  ....PTEC
    0020: 02 00 00 00 01 00 01 00 18 50 50 B5 00 00 00 00  // .........PP.....
    0030: 40 02 00 00 1C 01 00 00                          // @.......


CDIT
----
[000h 0000   4]                    Signature : "CDIT"    
[004h 0004   4]                 Table Length : 00000029
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : D0
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "TP-R11  "
[018h 0024   4]                 Oem Revision : 00001100
[01Ch 0028   4]              Asl Compiler ID : "PTEC"
[020h 0032   4]        Asl Compiler Revision : 00000002


**** Unknown ACPI table signature [CDIT]


Raw Table Data: Length 41 (0x29)

    0000: 43 44 49 54 29 00 00 00 01 D0 4C 45 4E 4F 56 4F  // CDIT).....LENOVO
    0010: 54 50 2D 52 31 31 20 20 00 11 00 00 50 54 45 43  // TP-R11  ....PTEC
    0020: 02 00 00 00 01 00 00 00 0A                       // .........


CRAT
----
[000h 0000   4]                    Signature : "CRAT"    
[004h 0004   4]                 Table Length : 00000810
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 41
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "TP-R11  "
[018h 0024   4]                 Oem Revision : 00001100
[01Ch 0028   4]              Asl Compiler ID : "PTEC"
[020h 0032   4]        Asl Compiler Revision : 00000002


**** Unknown ACPI table signature [CRAT]


Raw Table Data: Length 2064 (0x810)

    0000: 43 52 41 54 10 08 00 00 01 41 4C 45 4E 4F 56 4F  // CRAT.....ALENOVO
    0010: 54 50 2D 52 31 31 20 20 00 11 00 00 50 54 45 43  // TP-R11  ....PTEC
    0020: 02 00 00 00 21 00 00 00 01 00 00 00 00 00 00 00  // ....!...........
    0030: 00 28 00 00 1D 00 00 00 00 00 00 00 00 00 00 00  // .(..............
    0040: 08 00 2C 00 28 00 00 00 00 00 40 00 40 01 00 00  // ..,.(.....@.@...
    0050: 01 0B 04 20 00 00 00 00 01 28 00 00 01 00 00 00  // ... .....(......
    0060: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0A 00  // ................
    0070: 00 00 00 00 40 00 00 00 00 00 00 00 00 00 00 00  // ....@...........
    0080: 01 28 00 00 01 00 00 00 00 00 00 00 00 00 10 00  // .(..............
    0090: 00 00 00 00 00 00 F0 BF 00 00 00 00 40 00 00 00  // ............@...
    00A0: 00 00 00 00 00 00 00 00 01 28 00 00 01 00 00 00  // .........(......
    00B0: 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 40  // ...............@
    00C0: 03 00 00 00 40 00 00 00 00 00 00 00 00 00 00 00  // ....@...........
    00D0: 02 40 00 00 0B 00 00 00 00 00 00 00 03 00 00 00  // .@..............
    00E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00F0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0100: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0110: 02 40 00 00 0D 00 00 00 00 00 00 00 03 00 00 00  // .@..............
    0120: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0130: 00 00 00 00 00 00 00 00 00 00 00 00 40 00 00 00  // ............@...
    0140: 01 01 40 00 04 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0150: 02 40 00 00 0F 00 00 00 00 00 00 00 03 00 00 00  // .@..............
    0160: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0170: 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00  // ................
    0180: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0190: 02 40 00 00 0F 00 00 00 00 00 00 00 FF 00 00 00  // .@..............
    01A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    01B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 10 00 00  // ................
    01C0: 03 01 40 00 10 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    01D0: 02 40 00 00 0B 00 00 00 02 00 00 00 0C 00 00 00  // .@..............
    01E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    01F0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0200: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0210: 02 40 00 00 0D 00 00 00 02 00 00 00 0C 00 00 00  // .@..............
    0220: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0230: 00 00 00 00 00 00 00 00 00 00 00 00 40 00 00 00  // ............@...
    0240: 01 01 40 00 04 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0250: 02 40 00 00 0F 00 00 00 02 00 00 00 0C 00 00 00  // .@..............
    0260: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0270: 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00  // ................
    0280: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0290: 02 40 00 00 0B 00 00 00 04 00 00 00 30 00 00 00  // .@..........0...
    02A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    02B0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    02C0: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    02D0: 02 40 00 00 0D 00 00 00 04 00 00 00 30 00 00 00  // .@..........0...
    02E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    02F0: 00 00 00 00 00 00 00 00 00 00 00 00 40 00 00 00  // ............@...
    0300: 01 01 40 00 04 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0310: 02 40 00 00 0F 00 00 00 04 00 00 00 30 00 00 00  // .@..........0...
    0320: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0330: 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00  // ................
    0340: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0350: 02 40 00 00 0B 00 00 00 06 00 00 00 C0 00 00 00  // .@..............
    0360: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0370: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0380: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0390: 02 40 00 00 0D 00 00 00 06 00 00 00 C0 00 00 00  // .@..............
    03A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    03B0: 00 00 00 00 00 00 00 00 00 00 00 00 40 00 00 00  // ............@...
    03C0: 01 01 40 00 04 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    03D0: 02 40 00 00 0F 00 00 00 06 00 00 00 C0 00 00 00  // .@..............
    03E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    03F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00  // ................
    0400: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0410: 03 40 00 00 0B 00 00 00 00 00 00 00 03 00 00 00  // .@..............
    0420: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0430: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0440: FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00 00 00  // .@...@...@......
    0450: 03 40 00 00 0D 00 00 00 00 00 00 00 03 00 00 00  // .@..............
    0460: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0470: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0480: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    0490: 03 40 00 00 AB 00 00 00 00 00 00 00 03 00 00 00  // .@..............
    04A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    04B0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    04C0: 02 06 00 00 08 06 00 00 00 40 00 00 00 00 00 00  // .........@......
    04D0: 03 40 00 00 AD 00 00 00 00 00 00 00 03 00 00 00  // .@..............
    04E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    04F0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0500: 00 00 08 04 00 00 08 04 00 00 00 00 00 00 00 00  // ................
    0510: 03 40 00 00 0B 00 00 00 02 00 00 00 0C 00 00 00  // .@..............
    0520: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0530: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0540: FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00 00 00  // .@...@...@......
    0550: 03 40 00 00 0D 00 00 00 02 00 00 00 0C 00 00 00  // .@..............
    0560: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0570: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0580: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    0590: 03 40 00 00 AB 00 00 00 02 00 00 00 0C 00 00 00  // .@..............
    05A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    05B0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    05C0: 02 06 00 00 08 06 00 00 00 40 00 00 00 00 00 00  // .........@......
    05D0: 03 40 00 00 AD 00 00 00 02 00 00 00 0C 00 00 00  // .@..............
    05E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    05F0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0600: 00 00 08 04 00 00 08 04 00 00 00 00 00 00 00 00  // ................
    0610: 03 40 00 00 0B 00 00 00 04 00 00 00 30 00 00 00  // .@..........0...
    0620: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0630: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0640: FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00 00 00  // .@...@...@......
    0650: 03 40 00 00 0D 00 00 00 04 00 00 00 30 00 00 00  // .@..........0...
    0660: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0670: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0680: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    0690: 03 40 00 00 AB 00 00 00 04 00 00 00 30 00 00 00  // .@..........0...
    06A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    06B0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    06C0: 02 06 00 00 08 06 00 00 00 40 00 00 00 00 00 00  // .........@......
    06D0: 03 40 00 00 AD 00 00 00 04 00 00 00 30 00 00 00  // .@..........0...
    06E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    06F0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0700: 00 00 08 04 00 00 08 04 00 00 00 00 00 00 00 00  // ................
    0710: 03 40 00 00 0B 00 00 00 06 00 00 00 C0 00 00 00  // .@..............
    0720: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0730: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0740: FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00 00 00  // .@...@...@......
    0750: 03 40 00 00 0D 00 00 00 06 00 00 00 C0 00 00 00  // .@..............
    0760: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0770: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0780: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    0790: 03 40 00 00 AB 00 00 00 06 00 00 00 C0 00 00 00  // .@..............
    07A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    07B0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    07C0: 02 06 00 00 08 06 00 00 00 40 00 00 00 00 00 00  // .........@......
    07D0: 03 40 00 00 AD 00 00 00 06 00 00 00 C0 00 00 00  // .@..............
    07E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    07F0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0800: 00 00 08 04 00 00 08 04 00 00 00 00 00 00 00 00  // ................


DSDT
----
DefinitionBlock ("", "DSDT", 1, "LENOVO", "TP-R11  ", 0x00001100)
{
    /*
     * iASL Warning: There were 5 external control methods found during
     * disassembly, but only 0 were resolved (5 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_SB_.APTS, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.AWAK, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.TPM_.PTS_, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (AFN4, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (ALIB, MethodObj)    // Warning: Unknown method, guessing 2 arguments

    OperationRegion (SYST, SystemMemory, 0xBDD7AC98, 0x00000001)
    Field (SYST, AnyAcc, Lock, Preserve)
    {
        RV2,    8
    }

    Name (MACA, "_AUXMAX_#XXXXXXXXXXXX#")
    Name (WOLD, "_S5WOL_#00EF1700000000#")
    Method (DPIO, 2, NotSerialized)
    {
        If (!Arg0)
        {
            Return (0x00)
        }

        If ((Arg0 > 0xF0))
        {
            Return (0x00)
        }

        If ((Arg0 > 0xB4))
        {
            If (Arg1)
            {
                Return (0x02)
            }
            Else
            {
                Return (0x01)
            }
        }

        If ((Arg0 > 0x78))
        {
            Return (0x03)
        }

        Return (0x04)
    }

    Method (DUDM, 2, NotSerialized)
    {
        If (!Arg1)
        {
            Return (0xFF)
        }

        If ((Arg0 > 0x5A))
        {
            Return (0x00)
        }

        If ((Arg0 > 0x3C))
        {
            Return (0x01)
        }

        If ((Arg0 > 0x2D))
        {
            Return (0x02)
        }

        If ((Arg0 > 0x1E))
        {
            Return (0x03)
        }

        If ((Arg0 > 0x14))
        {
            Return (0x04)
        }

        Return (0x05)
    }

    Method (DMDM, 2, NotSerialized)
    {
        If (Arg1)
        {
            Return (0x00)
        }

        If (!Arg0)
        {
            Return (0x00)
        }

        If ((Arg0 > 0x96))
        {
            Return (0x01)
        }

        If ((Arg0 > 0x78))
        {
            Return (0x02)
        }

        Return (0x03)
    }

    Method (UUDM, 2, NotSerialized)
    {
        If (!(Arg0 & 0x04))
        {
            Return (0x00)
        }

        If ((Arg1 & 0x20))
        {
            Return (0x14)
        }

        If ((Arg1 & 0x10))
        {
            Return (0x1E)
        }

        If ((Arg1 & 0x08))
        {
            Return (0x2D)
        }

        If ((Arg1 & 0x04))
        {
            Return (0x3C)
        }

        If ((Arg1 & 0x02))
        {
            Return (0x5A)
        }

        If ((Arg1 & 0x01))
        {
            Return (0x78)
        }

        Return (0x00)
    }

    Method (UMDM, 4, NotSerialized)
    {
        If (!(Arg0 & 0x02))
        {
            Return (0x00)
        }

        If ((Arg1 & 0x04))
        {
            Return (Arg3)
        }

        If ((Arg1 & 0x02))
        {
            If ((Arg3 <= 0x78))
            {
                Return (0xB4)
            }
            Else
            {
                Return (Arg3)
            }
        }

        If ((Arg2 & 0x04))
        {
            If ((Arg3 <= 0xB4))
            {
                Return (0xF0)
            }
            Else
            {
                Return (Arg3)
            }
        }

        Return (0x00)
    }

    Method (UPIO, 4, NotSerialized)
    {
        If (!(Arg0 & 0x02))
        {
            If ((Arg2 == 0x02))
            {
                Return (0xF0)
            }
            Else
            {
                Return (0x0384)
            }
        }

        If ((Arg1 & 0x02))
        {
            Return (Arg3)
        }

        If ((Arg1 & 0x01))
        {
            If ((Arg3 <= 0x78))
            {
                Return (0xB4)
            }
            Else
            {
                Return (Arg3)
            }
        }

        If ((Arg2 == 0x02))
        {
            Return (0xF0)
        }
        Else
        {
            Return (0x0384)
        }
    }

    Method (FDMA, 2, NotSerialized)
    {
        If ((Arg1 != 0xFF))
        {
            Return ((Arg1 | 0x40))
        }

        If ((Arg0 >= 0x03))
        {
            Return (((Arg0 - 0x02) | 0x20))
        }

        If (Arg0)
        {
            Return (0x12)
        }

        Return (0x00)
    }

    Method (FPIO, 1, NotSerialized)
    {
        If ((Arg0 >= 0x03))
        {
            Return ((Arg0 | 0x08))
        }

        If ((Arg0 == 0x01))
        {
            Return (0x01)
        }

        Return (0x00)
    }

    Name (SPS, 0x00)
    Name (OSIF, 0x00)
    Name (WNTF, 0x00)
    Name (WXPF, 0x00)
    Name (WVIS, 0x00)
    Name (WIN7, 0x00)
    Name (WIN8, 0x00)
    Name (WSPV, 0x00)
    Name (LNUX, 0x00)
    Name (H8DR, 0x00)
    Name (MEMX, 0x00)
    Name (ACST, 0x00)
    Name (FMBL, 0x01)
    Name (FDTP, 0x02)
    Name (FUPS, 0x03)
    Name (FNID, 0x00)
    Name (RRBF, 0x00)
    Name (NBCF, 0x00)
    OperationRegion (MNVS, SystemMemory, 0xBDC37018, 0x1000)
    Field (MNVS, DWordAcc, NoLock, Preserve)
    {
        Offset (0xD00), 
        GAPA,   32, 
        GAPL,   32, 
        DCKI,   32, 
        DCKS,   32, 
        VCDL,   1, 
        VCDC,   1, 
        VCDT,   1, 
        VCDD,   1, 
            ,   1, 
        VCSS,   1, 
        VCDB,   1, 
        VCIN,   1, 
        VVPO,   8, 
        BNTN,   8, 
        BRLV,   8, 
        CDFL,   8, 
        CDAH,   8, 
        PMOD,   2, 
        PDIR,   1, 
        PDMA,   1, 
        Offset (0xD17), 
        LFDC,   1, 
        Offset (0xD18), 
        C2NA,   1, 
        C3NA,   1, 
        C4NA,   1, 
        C6NA,   1, 
        C7NA,   1, 
        Offset (0xD19), 
        Offset (0xD1A), 
            ,   2, 
            ,   1, 
        NHPS,   1, 
        NPMS,   1, 
        Offset (0xD1B), 
        UOPT,   8, 
        BTID,   32, 
        DPP0,   1, 
        DPP1,   1, 
        DPP2,   1, 
        DPP3,   1, 
        DPP4,   1, 
        DPP5,   1, 
        Offset (0xD21), 
        Offset (0xD22), 
        TCRT,   16, 
        TPSV,   16, 
        TTC1,   16, 
        TTC2,   16, 
        TTSP,   16, 
        SRAH,   8, 
        SRHE,   8, 
        SRE1,   8, 
        SRE2,   8, 
        SRE3,   8, 
        SRE4,   8, 
        SRE5,   8, 
        SRE6,   8, 
        SRU1,   8, 
        SRU2,   8, 
        SRU3,   8, 
        SRU7,   8, 
        SRU4,   8, 
        SRU5,   8, 
        SRU8,   8, 
        SRPB,   8, 
        SRLP,   8, 
        SRSA,   8, 
        SRSM,   8, 
        CWAC,   1, 
        CWAS,   1, 
        CWUE,   1, 
        CWUS,   1, 
        Offset (0xD40), 
        CWAP,   16, 
        CWAT,   16, 
        DBGC,   1, 
        Offset (0xD45), 
        FS1L,   16, 
        FS1M,   16, 
        FS1H,   16, 
        FS2L,   16, 
        FS2M,   16, 
        FS2H,   16, 
        FS3L,   16, 
        FS3M,   16, 
        FS3H,   16, 
        TATC,   1, 
            ,   6, 
        TATL,   1, 
        TATW,   8, 
        TNFT,   4, 
        TNTT,   4, 
        TDFA,   4, 
        TDTA,   4, 
        TDFD,   4, 
        TDTD,   4, 
        TCFA,   4, 
        TCTA,   4, 
        TCFD,   4, 
        TCTD,   4, 
        TSFT,   4, 
        TSTT,   4, 
        TIT0,   8, 
        TCR0,   16, 
        TPS0,   16, 
        TIT1,   8, 
        TCR1,   16, 
        TPS1,   16, 
        TIT2,   8, 
        TCR2,   16, 
        TPS2,   16, 
        TIF0,   8, 
        TIF1,   8, 
        TIF2,   8, 
        Offset (0xD78), 
        BTHI,   1, 
        Offset (0xD79), 
        HDIR,   1, 
        HDEH,   1, 
        HDSP,   1, 
        HDPP,   1, 
        HDUB,   1, 
        HDMC,   1, 
        NFCF,   1, 
        Offset (0xD7A), 
        TPME,   8, 
        BIDE,   4, 
        IDET,   4, 
            ,   1, 
            ,   1, 
        Offset (0xD7D), 
        DTS0,   8, 
        Offset (0xD7F), 
        DT00,   1, 
        DT01,   1, 
        DT02,   1, 
        DT03,   1, 
        Offset (0xD80), 
        LIDB,   1, 
        C4WR,   1, 
        C4AC,   1, 
        ODDX,   1, 
        CMPR,   1, 
        ILNF,   1, 
        PLUX,   1, 
        Offset (0xD81), 
        Offset (0xD8A), 
        WLAC,   8, 
        WIWK,   1, 
        Offset (0xD8C), 
            ,   4, 
            ,   1, 
        IDMM,   1, 
        Offset (0xD8D), 
            ,   3, 
            ,   1, 
            ,   1, 
            ,   1, 
        Offset (0xD8E), 
        Offset (0xD8F), 
            ,   4, 
        Offset (0xD90), 
        Offset (0xD91), 
        SWGP,   8, 
        IPMS,   8, 
        IPMB,   120, 
        IPMR,   24, 
        IPMO,   24, 
        IPMA,   8, 
        VIGD,   1, 
        VDSC,   1, 
        VMSH,   1, 
            ,   1, 
        VDSP,   1, 
        Offset (0xDAA), 
        Offset (0xDAD), 
        ASFT,   8, 
        PL1L,   8, 
        PL1M,   8, 
        CHKC,   32, 
        CHKE,   32, 
        ATRB,   32, 
        Offset (0xDBD), 
        PPCR,   8, 
        TPCR,   5, 
        Offset (0xDBF), 
        Offset (0xDCE), 
        CTPR,   8, 
        PPCA,   8, 
        TPCA,   5, 
        Offset (0xDD1), 
        BFWB,   296, 
        OSPX,   1, 
        OSC4,   1, 
        CPPX,   1, 
        Offset (0xDF7), 
        SPEN,   1, 
        SCRM,   1, 
            ,   1, 
        ETAU,   1, 
        IHBC,   1, 
        APMD,   1, 
        APMF,   1, 
        Offset (0xDF8), 
        FTPS,   8, 
        HIST,   8, 
        LPST,   8, 
        LWST,   8, 
        Offset (0xDFF), 
        Offset (0xE00), 
        Offset (0xE20), 
        HPET,   32, 
        PKLI,   16, 
        VLCX,   16, 
        VNIT,   8, 
        VBD0,   8, 
        VBDT,   128, 
        VBPL,   16, 
        VBPH,   16, 
        VBML,   8, 
        VBMH,   8, 
        VEDI,   1024, 
        PDCI,   16, 
        ISCG,   32, 
        ISSP,   1, 
        ISWK,   2, 
        ISFS,   3, 
        Offset (0xEC7), 
        SHA1,   160, 
        Offset (0xEDC), 
        LWCP,   1, 
        LWEN,   1, 
        IOCP,   1, 
        IOEN,   1, 
        IOST,   1, 
        Offset (0xEDD), 
        USBR,   1, 
        Offset (0xEDE), 
        Offset (0xEDF), 
        Offset (0xEE1), 
        BT2T,   1, 
        Offset (0xEE2), 
        TPPP,   8, 
        TPPC,   8, 
        CTPC,   8, 
        FNWK,   8, 
        Offset (0xEE7), 
        XHCC,   8, 
        FCAP,   16, 
        VSTD,   1, 
        VCQL,   1, 
        VTIO,   1, 
        VMYH,   1, 
        VSTP,   1, 
        VCQH,   1, 
        VDCC,   1, 
        VSFN,   1, 
        VDMC,   1, 
        VFHP,   1, 
        VIFC,   1, 
        VMMC,   1, 
        VMSC,   1, 
        VPSC,   1, 
        VCSC,   1, 
        Offset (0xEEC), 
        CICF,   4, 
        CICM,   4, 
        MYHC,   8, 
        MMCC,   8, 
        PT1D,   15, 
        Offset (0xEF1), 
        PT2D,   15, 
        Offset (0xEF3), 
        PT0D,   15, 
        Offset (0xEF5), 
        DVS0,   1, 
        DVS1,   1, 
        DVS2,   1, 
        DVS3,   1, 
        Offset (0xEF7), 
        DSTD,   15, 
        Offset (0xEF9), 
        DCQL,   15, 
        Offset (0xEFB), 
        DTIO,   15, 
        Offset (0xEFD), 
        DMYH,   15, 
        Offset (0xEFF), 
        DPST,   15, 
        Offset (0xF01), 
        DCQH,   15, 
        Offset (0xF03), 
        DDCC,   15, 
        Offset (0xF05), 
        DSFN,   15, 
        Offset (0xF07), 
        DDMC,   15, 
        Offset (0xF09), 
        DFHP,   15, 
        Offset (0xF0B), 
        DIFC,   15, 
        Offset (0xF0D), 
        DMMC,   15, 
        Offset (0xF0F), 
        DMSC,   15, 
        Offset (0xF11), 
        DPSC,   15, 
        Offset (0xF13), 
        DCSC,   15, 
        Offset (0xF15), 
        SMYH,   4, 
        SMMC,   4, 
        SPSC,   4, 
        Offset (0xF17), 
        STDV,   8, 
        SCRB,   8, 
        PMOF,   8, 
        EGPE,   8, 
        MMOP,   16, 
        MMCO,   16, 
        MMPE,   16, 
        MMQU,   16, 
        PSM1,   16, 
        PSM2,   16, 
        PSM3,   16, 
        PSM4,   16, 
        PSM5,   16, 
        PSM6,   16, 
        PSM7,   16, 
        PSM8,   16, 
        VEDX,   1024, 
        Offset (0xFB4)
    }

    Field (MNVS, ByteAcc, NoLock, Preserve)
    {
        Offset (0xB00), 
        WITM,   8, 
        WSEL,   8, 
        WLS0,   8, 
        WLS1,   8, 
        WLS2,   8, 
        WLS3,   8, 
        WLS4,   8, 
        WLS5,   8, 
        WLS6,   8, 
        WLS7,   8, 
        WLS8,   8, 
        WLS9,   8, 
        WLSA,   8, 
        WLSB,   8, 
        WLSC,   8, 
        WLSD,   8, 
        WENC,   8, 
        WKBD,   8, 
        WPTY,   8, 
        WPAS,   1032, 
        WPNW,   1032, 
        WSPM,   8, 
        WSPS,   8, 
        WSMN,   8, 
        WSMX,   8, 
        WSEN,   8, 
        WSKB,   8, 
        WASB,   8, 
        WASI,   16, 
        WASD,   8, 
        WASS,   32
    }

    Field (MNVS, ByteAcc, NoLock, Preserve)
    {
        Offset (0xA00), 
        DBGB,   1024
    }

    OperationRegion (SMI0, SystemIO, 0xB2, 0x01)
    Field (SMI0, ByteAcc, NoLock, Preserve)
    {
        APMC,   8
    }

    Field (MNVS, AnyAcc, NoLock, Preserve)
    {
        Offset (0xFC0), 
        CMD,    8, 
        ERR,    32, 
        PAR0,   32, 
        PAR1,   32, 
        PAR2,   32, 
        PAR3,   32
    }

    Mutex (MSMI, 0x00)
    Method (SMI, 5, Serialized)
    {
        Acquire (MSMI, 0xFFFF)
        CMD = Arg0
        ERR = 0x01
        PAR0 = Arg1
        PAR1 = Arg2
        PAR2 = Arg3
        PAR3 = Arg4
        APMC = 0xF5
        While ((ERR == 0x01))
        {
            Sleep (0x01)
            APMC = 0xF5
        }

        Local0 = PAR0 /* \PAR0 */
        Release (MSMI)
        Return (Local0)
    }

    Method (RPCI, 1, NotSerialized)
    {
        Return (SMI (0x00, 0x00, Arg0, 0x00, 0x00))
    }

    Method (WPCI, 2, NotSerialized)
    {
        SMI (0x00, 0x01, Arg0, Arg1, 0x00)
    }

    Method (MPCI, 3, NotSerialized)
    {
        SMI (0x00, 0x02, Arg0, Arg1, Arg2)
    }

    Method (RBEC, 1, NotSerialized)
    {
        Return (SMI (0x00, 0x03, Arg0, 0x00, 0x00))
    }

    Method (WBEC, 2, NotSerialized)
    {
        SMI (0x00, 0x04, Arg0, Arg1, 0x00)
    }

    Method (MBEC, 3, NotSerialized)
    {
        SMI (0x00, 0x05, Arg0, Arg1, Arg2)
    }

    Method (RISA, 1, NotSerialized)
    {
        Return (SMI (0x00, 0x06, Arg0, 0x00, 0x00))
    }

    Method (WISA, 2, NotSerialized)
    {
        SMI (0x00, 0x07, Arg0, Arg1, 0x00)
    }

    Method (MISA, 3, NotSerialized)
    {
        SMI (0x00, 0x08, Arg0, Arg1, Arg2)
    }

    Method (VEXP, 0, NotSerialized)
    {
        SMI (0x01, 0x00, 0x00, 0x00, 0x00)
    }

    Method (VUPS, 1, NotSerialized)
    {
        SMI (0x01, 0x01, Arg0, 0x00, 0x00)
    }

    Method (VSDS, 2, NotSerialized)
    {
        SMI (0x01, 0x02, Arg0, Arg1, 0x00)
    }

    Method (VDDC, 0, NotSerialized)
    {
        SMI (0x01, 0x03, 0x00, 0x00, 0x00)
    }

    Method (VVPD, 1, NotSerialized)
    {
        SMI (0x01, 0x04, Arg0, 0x00, 0x00)
    }

    Method (VNRS, 1, NotSerialized)
    {
        SMI (0x01, 0x05, Arg0, 0x00, 0x00)
    }

    Method (GLPW, 0, NotSerialized)
    {
        Return (SMI (0x01, 0x06, 0x00, 0x00, 0x00))
    }

    Method (VSLD, 1, NotSerialized)
    {
        SMI (0x01, 0x07, Arg0, 0x00, 0x00)
    }

    Method (VEVT, 1, NotSerialized)
    {
        Return (SMI (0x01, 0x08, Arg0, 0x00, 0x00))
    }

    Method (VTHR, 0, NotSerialized)
    {
        Return (SMI (0x01, 0x09, 0x00, 0x00, 0x00))
    }

    Method (VBRC, 1, NotSerialized)
    {
        SMI (0x01, 0x0A, Arg0, 0x00, 0x00)
    }

    Method (VBRG, 0, NotSerialized)
    {
        Return (SMI (0x01, 0x0E, 0x00, 0x00, 0x00))
    }

    Method (VCMS, 2, NotSerialized)
    {
        Return (SMI (0x01, 0x0B, Arg0, Arg1, 0x00))
    }

    Method (VBTD, 0, NotSerialized)
    {
        Return (SMI (0x01, 0x0F, 0x00, 0x00, 0x00))
    }

    Method (VDYN, 2, NotSerialized)
    {
        Return (SMI (0x01, 0x11, Arg0, Arg1, 0x00))
    }

    Method (SDPS, 2, NotSerialized)
    {
        Return (SMI (0x01, 0x12, Arg0, Arg1, 0x00))
    }

    Method (SCMS, 1, NotSerialized)
    {
        Return (SMI (0x02, Arg0, 0x00, 0x00, 0x00))
    }

    Method (BHDP, 2, NotSerialized)
    {
        Return (SMI (0x03, 0x00, Arg0, Arg1, 0x00))
    }

    Method (STEP, 1, NotSerialized)
    {
        SMI (0x04, Arg0, 0x00, 0x00, 0x00)
    }

    Method (SLTP, 0, NotSerialized)
    {
        SMI (0x05, 0x00, 0x00, 0x00, 0x00)
    }

    Method (CBRI, 0, NotSerialized)
    {
        SMI (0x05, 0x01, 0x00, 0x00, 0x00)
    }

    Method (BCHK, 0, NotSerialized)
    {
        Return (SMI (0x05, 0x04, 0x00, 0x00, 0x00))
    }

    Method (BYRS, 0, NotSerialized)
    {
        SMI (0x05, 0x05, 0x00, 0x00, 0x00)
    }

    Method (LCHK, 1, NotSerialized)
    {
        Return (SMI (0x05, 0x06, Arg0, 0x00, 0x00))
    }

    Method (BLTH, 1, NotSerialized)
    {
        Return (SMI (0x06, Arg0, 0x00, 0x00, 0x00))
    }

    Method (PRSM, 2, NotSerialized)
    {
        Return (SMI (0x07, 0x00, Arg0, Arg1, 0x00))
    }

    Method (ISOC, 1, NotSerialized)
    {
        Return (SMI (0x07, 0x03, Arg0, 0x00, 0x00))
    }

    Method (EZRC, 1, NotSerialized)
    {
        Return (SMI (0x07, 0x04, Arg0, 0x00, 0x00))
    }

    Method (WGSV, 1, NotSerialized)
    {
        Return (SMI (0x09, Arg0, 0x00, 0x00, 0x00))
    }

    Method (TSDL, 0, NotSerialized)
    {
        Return (SMI (0x0A, 0x03, 0x00, 0x00, 0x00))
    }

    Method (FLPF, 1, NotSerialized)
    {
        Return (SMI (0x0A, 0x04, Arg0, 0x00, 0x00))
    }

    Method (CSUM, 1, NotSerialized)
    {
        Return (SMI (0x0E, Arg0, 0x00, 0x00, 0x00))
    }

    Method (NVSS, 1, NotSerialized)
    {
        Return (SMI (0x0F, Arg0, 0x00, 0x00, 0x00))
    }

    Method (WMIS, 2, NotSerialized)
    {
        Return (SMI (0x10, Arg0, Arg1, 0x00, 0x00))
    }

    Method (AWON, 1, NotSerialized)
    {
        Return (SMI (0x12, Arg0, 0x00, 0x00, 0x00))
    }

    Method (PMON, 2, NotSerialized)
    {
        Local0 = SizeOf (Arg0)
        Name (TSTR, Buffer (Local0) {})
        TSTR = Arg0
        DBGB = TSTR /* \PMON.TSTR */
        SMI (0x11, Arg1, 0x00, 0x00, 0x00)
    }

    Method (UAWS, 1, NotSerialized)
    {
        Return (SMI (0x13, Arg0, 0x00, 0x00, 0x00))
    }

    Method (BFWC, 1, NotSerialized)
    {
        Return (SMI (0x14, 0x00, Arg0, 0x00, 0x00))
    }

    Method (BFWP, 0, NotSerialized)
    {
        Return (SMI (0x14, 0x01, 0x00, 0x00, 0x00))
    }

    Method (BFWL, 0, NotSerialized)
    {
        SMI (0x14, 0x02, 0x00, 0x00, 0x00)
    }

    Method (BFWG, 1, NotSerialized)
    {
        SMI (0x14, 0x03, Arg0, 0x00, 0x00)
    }

    Method (BDMC, 1, NotSerialized)
    {
        SMI (0x14, 0x04, Arg0, 0x00, 0x00)
    }

    Method (PSIF, 2, NotSerialized)
    {
        Return (SMI (0x14, 0x05, Arg0, Arg1, 0x00))
    }

    Method (FNSC, 2, NotSerialized)
    {
        Return (SMI (0x14, 0x06, Arg0, Arg1, 0x00))
    }

    Method (AUDC, 2, NotSerialized)
    {
        Return (SMI (0x14, 0x07, Arg0, Arg1, 0x00))
    }

    Method (SYBC, 2, NotSerialized)
    {
        Return (SMI (0x14, 0x08, Arg0, Arg1, 0x00))
    }

    Method (KBLS, 2, NotSerialized)
    {
        Return (SMI (0x14, 0x09, Arg0, Arg1, 0x00))
    }

    Method (FPCI, 2, NotSerialized)
    {
        Return (SMI (0x14, 0x0A, Arg0, Arg1, 0x00))
    }

    Method (UBIS, 1, NotSerialized)
    {
        Return (SMI (0x15, 0x00, Arg0, 0x00, 0x00))
    }

    Method (DIEH, 1, NotSerialized)
    {
        Return (SMI (0x16, 0x00, Arg0, 0x00, 0x00))
    }

    Method (OUTP, 2, NotSerialized)
    {
        SMI (0x17, Arg0, Arg1, 0x00, 0x00)
    }

    Method (SREQ, 3, NotSerialized)
    {
        SMI (0x18, (Arg0 & 0xFF), (Arg1 & 0xFF), (Arg2 & 
            0xFF), 0x00)
    }

    Method (SPMS, 1, NotSerialized)
    {
        SMI (0x19, (Arg0 & 0xFF), 0x00, 0x00, 0x00)
    }

    Method (WMEM, 5, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, 0x04)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VARR,   32
        }

        Local1 = VARR /* \WMEM.VARR */
        Local5 = 0x7FFFFFFF
        Local5 |= 0x80000000
        Local2 = (Arg2 + Arg3)
        Local2 = (0x20 - Local2)
        Local2 = (((Local5 << Local2) & Local5) >> Local2)
        Local2 = ((Local2 >> Arg2) << Arg2)
        Local3 = (Arg4 << Arg2)
        Local4 = ((Local1 & (Local5 ^ Local2)) | Local3)
        VARR = Local4
    }

    Method (WFIO, 2, Serialized)
    {
        Local0 = (Arg0 << 0x02)
        WMEM (0xFED81500, Local0, 0x16, 0x01, Arg1)
    }

    Scope (_PR)
    {
        Processor (C000, 0x00, 0x00000410, 0x06) {}
        Processor (C001, 0x01, 0x00000410, 0x06) {}
        Processor (C002, 0x02, 0x00000410, 0x06) {}
        Processor (C003, 0x03, 0x00000410, 0x06) {}
        Processor (C004, 0x04, 0x00000410, 0x06) {}
        Processor (C005, 0x05, 0x00000410, 0x06) {}
        Processor (C006, 0x06, 0x00000410, 0x06) {}
        Processor (C007, 0x07, 0x00000410, 0x06) {}
    }

    Name (_S0, Package (0x04)  // _S0_: S0 System State
    {
        0x00, 
        0x00, 
        0x00, 
        0x00
    })
    Name (_S3, Package (0x04)  // _S3_: S3 System State
    {
        0x03, 
        0x03, 
        0x00, 
        0x00
    })
    Name (_S4, Package (0x04)  // _S4_: S4 System State
    {
        0x04, 
        0x04, 
        0x00, 
        0x00
    })
    Name (_S5, Package (0x04)  // _S5_: S5 System State
    {
        0x05, 
        0x05, 
        0x00, 
        0x00
    })
    Name (TZFG, 0x00)
    OperationRegion (DBG0, SystemIO, 0x80, 0x01)
    Field (DBG0, ByteAcc, NoLock, Preserve)
    {
        IO80,   8
    }

    OperationRegion (DEB2, SystemIO, 0x80, 0x02)
    Field (DEB2, WordAcc, NoLock, Preserve)
    {
        P80H,   16
    }

    OperationRegion (PMIO, SystemIO, 0x0CD6, 0x02)
    Field (PMIO, ByteAcc, NoLock, Preserve)
    {
        PIDX,   8, 
        PDAT,   8
    }

    OperationRegion (P01, SystemIO, 0x0401, 0x01)
    Field (P01, ByteAcc, NoLock, Preserve)
    {
        PST1,   8
    }

    Name (LINX, 0x00)
    Name (OSSP, 0x00)
    Name (OSTB, Ones)
    Name (TPOS, Zero)
    Method (OSTP, 0, NotSerialized)
    {
        If ((OSTB == Ones))
        {
            If (CondRefOf (\_OSI, Local0))
            {
                OSTB = 0x00
                TPOS = 0x00
                If (_OSI ("Windows 2001"))
                {
                    OSTB = 0x08
                    TPOS = 0x08
                }

                If (_OSI ("Windows 2001.1"))
                {
                    OSTB = 0x20
                    TPOS = 0x20
                }

                If (_OSI ("Windows 2001 SP1"))
                {
                    OSTB = 0x10
                    TPOS = 0x10
                }

                If (_OSI ("Windows 2001 SP2"))
                {
                    OSTB = 0x11
                    TPOS = 0x11
                }

                If (_OSI ("Windows 2001 SP3"))
                {
                    OSTB = 0x12
                    TPOS = 0x12
                }

                If (_OSI ("Windows 2006"))
                {
                    OSTB = 0x40
                    TPOS = 0x40
                }

                If (_OSI ("Windows 2006 SP1"))
                {
                    OSSP = 0x01
                    OSTB = 0x40
                    TPOS = 0x40
                }

                If (_OSI ("Windows 2009"))
                {
                    OSSP = 0x01
                    OSTB = 0x50
                    TPOS = 0x50
                }

                If (_OSI ("Windows 2012"))
                {
                    OSSP = 0x01
                    OSTB = 0x60
                    TPOS = 0x60
                }

                If (_OSI ("Windows 2013"))
                {
                    OSSP = 0x01
                    OSTB = 0x70
                    TPOS = 0x70
                }

                If (_OSI ("Windows 2015"))
                {
                    OSSP = 0x01
                    WIN8 = 0x01
                    OSTB = 0x70
                    TPOS = 0x70
                }

                If (_OSI ("Windows 2016"))
                {
                    OSSP = 0x01
                    WIN8 = 0x01
                    OSTB = 0x70
                    TPOS = 0x70
                }

                If (_OSI ("Linux"))
                {
                    LINX = 0x01
                    OSTB = 0x80
                    TPOS = 0x80
                }
            }
            ElseIf (CondRefOf (\_OS, Local0))
            {
                If (SEQL (_OS, "Microsoft Windows"))
                {
                    OSTB = 0x01
                    TPOS = 0x01
                }
                ElseIf (SEQL (_OS, "Microsoft WindowsME: Millennium Edition"))
                {
                    OSTB = 0x02
                    TPOS = 0x02
                }
                ElseIf (SEQL (_OS, "Microsoft Windows NT"))
                {
                    OSTB = 0x04
                    TPOS = 0x04
                }
                Else
                {
                    OSTB = 0x00
                    TPOS = 0x00
                }
            }
            Else
            {
                OSTB = 0x00
                TPOS = 0x00
            }

            If ((TPOS == 0x80)) {}
        }

        Return (OSTB) /* \OSTB */
    }

    Method (SEQL, 2, Serialized)
    {
        Local0 = SizeOf (Arg0)
        Local1 = SizeOf (Arg1)
        If ((Local0 != Local1))
        {
            Return (Zero)
        }

        Name (BUF0, Buffer (Local0) {})
        BUF0 = Arg0
        Name (BUF1, Buffer (Local0) {})
        BUF1 = Arg1
        Local2 = Zero
        While ((Local2 < Local0))
        {
            Local3 = DerefOf (BUF0 [Local2])
            Local4 = DerefOf (BUF1 [Local2])
            If ((Local3 != Local4))
            {
                Return (Zero)
            }

            Local2++
        }

        Return (One)
    }

    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        P80H = Arg0
        \_SB.PCI0.SMB.PEWD = 0x01
        \_SB.PCI0.SMB.P2IS = 0x01
        \_SB.PCI0.SMB.P2WS = 0x01
        If (CondRefOf (\_SB.TPM.PTS))
        {
            \_SB.TPM.PTS (Arg0)
        }

        If ((Arg0 == 0x04)) {}
        If ((Arg0 == 0x03))
        {
            \_SB.PCI0.SMB.RSTU = Zero
        }

        \_SB.PCI0.SMB.CLPS = 0x01
        \_SB.PCI0.SMB.SLPS = 0x01
        \_SB.PCI0.SMB.PEWS = \_SB.PCI0.SMB.PEWS
        \_SB.APTS (Arg0)
        Local0 = 0x01
        If ((Arg0 == SPS))
        {
            Local0 = 0x00
        }

        If (((Arg0 == 0x00) || (Arg0 >= 0x06)))
        {
            Local0 = 0x00
        }

        If (Local0)
        {
            SPS = Arg0
            \_SB.PCI0.LPC0.EC0.HKEY.MHKE (0x00)
            If (\_SB.PCI0.LPC0.EC0.KBLT)
            {
                SCMS (0x0D)
            }

            If ((Arg0 == 0x01))
            {
                FNID = \_SB.PCI0.LPC0.EC0.HFNI
                \_SB.PCI0.LPC0.EC0.HFNI = 0x00
                \_SB.PCI0.LPC0.EC0.HFSP = 0x00
            }

            If ((Arg0 == 0x03))
            {
                \_SB.PCI0.LPC0.EC0.S3ST = 0x00
                \_SB.PCI0.LPC0.EC0.S3ST = 0x01
                SLTP ()
                ACST = \_SB.PCI0.LPC0.EC0.AC._PSR ()
                If ((FNWK == 0x01))
                {
                    If (H8DR)
                    {
                        \_SB.PCI0.LPC0.EC0.HWFN = 0x00
                    }
                    Else
                    {
                        MBEC (0x32, 0xEF, 0x00)
                    }
                }
            }

            If ((Arg0 == 0x04))
            {
                \_SB.PCI0.LPC0.EC0.S4ST = 0x00
                \_SB.PCI0.LPC0.EC0.S4ST = 0x01
                \_SB.SLPB._PSW (0x00)
                SLTP ()
                AWON (0x04)
            }

            If ((Arg0 == 0x05))
            {
                \_SB.PCI0.LPC0.EC0.S5ST = 0x00
                \_SB.PCI0.LPC0.EC0.S5ST = 0x01
                SLTP ()
                AWON (0x05)
            }

            If ((Arg0 >= 0x04))
            {
                \_SB.PCI0.LPC0.EC0.HWLB = 0x00
            }
            Else
            {
                \_SB.PCI0.LPC0.EC0.HWLB = 0x01
            }

            If ((Arg0 >= 0x03))
            {
                \_SB.PCI0.LPC0.EC0.HCMU = 0x01
            }

            If ((Arg0 != 0x05)) {}
            \_SB.PCI0.LPC0.EC0.HKEY.WGPS (Arg0)
        }
    }

    OperationRegion (XMOS, SystemIO, 0x72, 0x02)
    Field (XMOS, ByteAcc, Lock, Preserve)
    {
        XIDX,   8, 
        XDAT,   8
    }

    IndexField (XIDX, XDAT, ByteAcc, Lock, Preserve)
    {
        Offset (0xAE), 
        WKSR,   8
    }

    Name (WAKI, Package (0x02)
    {
        0x00, 
        0x00
    })
    Method (_WAK, 1, NotSerialized)  // _WAK: Wake
    {
        P80H = (Arg0 << 0x04)
        If ((Arg0 == 0x03))
        {
            Sleep (0x01F4)
            \_SB.PCI0.SMB.RSTU = One
        }

        \_SB.PCI0.SMB.PEWS = \_SB.PCI0.SMB.PEWS
        \_SB.PCI0.SMB.PWDE = 0x01
        \_SB.PCI0.SMB.PEWD = Zero
        \_SB.PCI0.SMB.P2IS = 0x01
        \_SB.PCI0.SMB.P2WS = 0x01
        \_SB.AWAK (Arg0)
        If ((Arg0 == 0x03))
        {
            If (GPIC)
            {
                \_SB.PCI0.LPC0.DSPI ()
            }

            If ((WKSR == 0x61))
            {
                Notify (\_SB.PWRB, 0x02) // Device Wake
            }
            ElseIf ((WKSR == 0x68))
            {
                Notify (\_SB.PWRB, 0x02) // Device Wake
            }
            ElseIf ((WKSR == 0x6B))
            {
                Notify (\_SB.PWRB, 0x02) // Device Wake
            }
            ElseIf ((\_SB.PCI0.GP17.XHC0.PMES == 0x01))
            {
                WKSR = 0x64
            }
        }

        If ((Arg0 == 0x04))
        {
            If (GPIC)
            {
                \_SB.PCI0.LPC0.DSPI ()
            }

            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        If (((Arg0 == 0x00) || (Arg0 >= 0x05)))
        {
            Return (WAKI) /* \WAKI */
        }

        SPS = 0x00
        \_SB.PCI0.LPC0.EC0.ACOS = 0x01
        \_SB.PCI0.LPC0.EC0.HCMU = 0x00
        \_SB.PCI0.LPC0.EC0.HUBS = 0x00
        \_SB.PCI0.LPC0.EC0.EVNT (0x01)
        \_SB.PCI0.LPC0.EC0.HKEY.MHKE (0x01)
        \_SB.PCI0.LPC0.EC0.FNST ()
        SCMS (0x0D)
        LIDB = 0x00
        If ((Arg0 == 0x01))
        {
            FNID = \_SB.PCI0.LPC0.EC0.HFNI
        }

        If ((Arg0 == 0x03))
        {
            NVSS (0x00)
            IOEN = 0x00
            IOST = 0x00
            VCMS (0x01, \_SB.LID._LID ())
            AWON (0x00)
            \_SB.PCI0.LPC0.EC0.S3RM = 0x00
            \_SB.PCI0.LPC0.EC0.S3RM = 0x01
        }

        If ((Arg0 == 0x04))
        {
            NVSS (0x00)
            \_SB.PCI0.LPC0.EC0.HSPA = 0x00
            IOEN = 0x00
            IOST = 0x00
            \_SB.PCI0.LPC0.EC0.S4RM = 0x00
            \_SB.PCI0.LPC0.EC0.S4RM = 0x01
        }

        \_SB.PCI0.LPC0.EC0.BATW (Arg0)
        \_SB.PCI0.LPC0.EC0.HKEY.WGWK (Arg0)
        VSLD (\_SB.LID._LID ())
        If ((Arg0 < 0x04))
        {
            If (((RRBF & 0x02) || (\_SB.PCI0.LPC0.EC0.HWAC & 0x02)))
            {
                Local0 = (Arg0 << 0x08)
                Local0 = (0x2013 | Local0)
                \_SB.PCI0.LPC0.EC0.HKEY.MHKQ (Local0)
            }
        }

        If ((Arg0 == 0x04))
        {
            Local0 = 0x00
            Local1 = CSUM (0x00)
            If ((Local1 != CHKC))
            {
                Local0 = 0x01
                CHKC = Local1
            }

            Local1 = CSUM (0x01)
            If ((Local1 != CHKE))
            {
                Local0 = 0x01
                CHKE = Local1
            }

            If (Local0)
            {
                Notify (_SB, 0x00) // Bus Check
            }
        }

        If (((Arg0 == 0x03) || (Arg0 == 0x04)))
        {
            If (\_SB.PCI0.LPC0.EC0.HMUT)
            {
                WFIO (0x5A, 0x00)
            }
            Else
            {
                WFIO (0x5A, 0x01)
            }

            If (\_SB.PCI0.LPC0.EC0.HFNE)
            {
                If ((0x00 == \_SB.PCI0.LPC0.EC0.HFNS))
                {
                    WFIO (0x15, 0x01)
                }
                Else
                {
                    WFIO (0x15, 0x00)
                }
            }
            ElseIf (\_SB.PCI0.LPC0.EC0.FNKC)
            {
                WFIO (0x15, 0x00)
            }
            Else
            {
                WFIO (0x15, 0x01)
            }

            If (\_SB.PCI0.LPC0.EC0.NULS)
            {
                WFIO (0x59, 0x00)
            }
            Else
            {
                WFIO (0x59, 0x01)
            }

            \_SB.PCI0.LPC0.EC0.HKEY.DYTC (0x000F0001)
        }

        RRBF = Zero
        \_SB.PCI0.LPC0.EC0.AC.ACDC = 0xFF
        Notify (\_SB.PCI0.LPC0.EC0.AC, 0x80) // Status Change
        Notify (\_SB.PCI0, 0x00) // Bus Check
        Return (WAKI) /* \WAKI */
    }

    Scope (_SI)
    {
        Method (_SST, 1, NotSerialized)  // _SST: System Status
        {
            If ((Arg0 == 0x00))
            {
                \_SB.PCI0.LPC0.EC0.LED (0x00, 0x00)
                \_SB.PCI0.LPC0.EC0.LED (0x0A, 0x00)
                \_SB.PCI0.LPC0.EC0.LED (0x07, 0x00)
            }

            If ((Arg0 == 0x01))
            {
                If ((SPS || WNTF))
                {
                    \_SB.PCI0.LPC0.EC0.BEEP (0x05)
                }

                \_SB.PCI0.LPC0.EC0.LED (0x00, 0x80)
                \_SB.PCI0.LPC0.EC0.LED (0x0A, 0x80)
                \_SB.PCI0.LPC0.EC0.LED (0x07, 0x00)
            }

            If ((Arg0 == 0x02))
            {
                \_SB.PCI0.LPC0.EC0.LED (0x00, 0x80)
                \_SB.PCI0.LPC0.EC0.LED (0x0A, 0x80)
                \_SB.PCI0.LPC0.EC0.LED (0x07, 0xC0)
            }

            If ((Arg0 == 0x03))
            {
                If ((SPS > 0x03))
                {
                    \_SB.PCI0.LPC0.EC0.BEEP (0x07)
                }
                ElseIf ((SPS == 0x03))
                {
                    \_SB.PCI0.LPC0.EC0.BEEP (0x03)
                }
                Else
                {
                    \_SB.PCI0.LPC0.EC0.BEEP (0x04)
                }

                If ((SPS == 0x03)) {}
                Else
                {
                    \_SB.PCI0.LPC0.EC0.LED (0x00, 0x80)
                    \_SB.PCI0.LPC0.EC0.LED (0x0A, 0x80)
                }

                \_SB.PCI0.LPC0.EC0.LED (0x00, 0xC0)
                Stall (0x64)
                \_SB.PCI0.LPC0.EC0.LED (0x0A, 0xC0)
            }

            If ((Arg0 == 0x04))
            {
                \_SB.PCI0.LPC0.EC0.BEEP (0x03)
                \_SB.PCI0.LPC0.EC0.LED (0x07, 0xC0)
                \_SB.PCI0.LPC0.EC0.LED (0x00, 0xC0)
                \_SB.PCI0.LPC0.EC0.LED (0x0A, 0xC0)
                \_SB.PCI0.LPC0.EC0.HLCL = 0xC0
                Sleep (0x64)
                Local0 = (0x0A | 0xC0)
                \_SB.PCI0.LPC0.EC0.HLCL = Local0
            }
        }
    }

    Name (GPIC, 0x00)
    Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        GPIC = Arg0
        If (Arg0)
        {
            \_SB.PCI0.LPC0.DSPI ()
            \_SB.PCI0.B0FN ()
        }
    }

    Scope (_SB)
    {
        Device (PWRB)
        {
            Name (_HID, EisaId ("PNP0C0C") /* Power Button Device */)  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0B)
            }
        }

        Device (PCI0)
        {
            Name (_ADR, 0x00)  // _ADR: Address
            Name (_UID, 0x01)  // _UID: Unique ID
            Name (_BBN, 0x00)  // _BBN: BIOS Bus Number
            Name (AMHP, 0x00)
            Name (VGPU, 0x00010000)
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (SUPP, 0x00)
            Name (CTRL, 0x00)
            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                CreateDWordField (Arg3, 0x00, CDW1)
                CreateDWordField (Arg3, 0x04, CDW2)
                CreateDWordField (Arg3, 0x08, CDW3)
                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    SUPP = CDW2 /* \_SB_.PCI0._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.PCI0._OSC.CDW3 */
                    If (((SUPP & 0x16) != 0x16))
                    {
                        CTRL &= 0x1E
                    }

                    CTRL &= 0x1D
                    If (~(CDW1 & 0x01))
                    {
                        If ((CTRL & 0x01)) {}
                        If ((CTRL & 0x04)) {}
                        If ((CTRL & 0x10)) {}
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.PCI0.CTRL */
                    Return (Arg3)
                }
                Else
                {
                    CDW1 |= 0x04
                    Return (Arg3)
                }
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                OSTP ()
            }

            OperationRegion (BAR0, PCI_Config, 0xF8, 0x08)
            Field (BAR0, DWordAcc, NoLock, Preserve)
            {
                BINX,   32, 
                BDAT,   32
            }

            Mutex (MUTE, 0x00)
            Method (B0FN, 0, NotSerialized)
            {
                Acquire (MUTE, 0xFFFF)
                BINX = Zero
                Local0 = BDAT /* \_SB_.PCI0.BDAT */
                Local0 &= 0xFFFFFFEF
                BDAT = Local0
                Release (MUTE)
            }

            OperationRegion (NBMS, PCI_Config, 0x60, 0x08)
            Field (NBMS, DWordAcc, NoLock, Preserve)
            {
                MIDX,   32, 
                MIDR,   32
            }

            OperationRegion (NBXP, PCI_Config, 0xE0, 0x08)
            Field (NBXP, DWordAcc, NoLock, Preserve)
            {
                NBXI,   32, 
                NBXD,   32
            }

            Mutex (NBMM, 0x00)
            Mutex (NBXM, 0x00)
            Method (NBMR, 1, NotSerialized)
            {
                Acquire (NBMM, 0xFFFF)
                Local0 = (Arg0 & 0x7F)
                MIDX = Local0
                Local0 = MIDR /* \_SB_.PCI0.MIDR */
                MIDX = 0x7F
                Release (NBMM)
                Return (Local0)
            }

            Method (NBMW, 2, NotSerialized)
            {
                Acquire (NBMM, 0xFFFF)
                Local0 = (Arg0 & 0x7F)
                Local0 |= 0x80
                MIDX = Local0
                MIDR = Arg1
                MIDX = Local0 &= 0x7F
                Release (NBMM)
            }

            Method (NBXR, 1, NotSerialized)
            {
                Acquire (NBXM, 0xFFFF)
                NBXI = Arg0
                Local0 = NBXD /* \_SB_.PCI0.NBXD */
                NBXI = 0x00
                Release (NBXM)
                Return (Local0)
            }

            Method (NBXW, 2, NotSerialized)
            {
                Acquire (NBXM, 0xFFFF)
                NBXI = Arg0
                NBXD = Arg1
                NBXI = 0x00
                Release (NBXM)
            }

            Method (GFXM, 0, NotSerialized)
            {
                Local0 = NBMR (0x08)
                Local0 >>= 0x08
                Local0 &= 0x0F
                Return (Local0)
            }

            Method (GPPM, 0, NotSerialized)
            {
                Local0 = NBMR (0x67)
                Local0 &= 0x0F
                Return (Local0)
            }

            Method (GPPX, 0, NotSerialized)
            {
                Local0 = NBMR (0x2D)
                Local0 >>= 0x07
                Local0 &= 0x0F
                Return (Local0)
            }

            Method (XPTR, 2, NotSerialized)
            {
                If ((Arg0 < 0x02))
                {
                    Return (0x00)
                }

                If (((Arg0 > 0x0A) || (Arg0 == 0x08)))
                {
                    Return (0x00)
                }
                Else
                {
                    Local0 = GPPM ()
                    Local1 = GPPX ()
                    If ((Arg0 == 0x0A))
                    {
                        If (((Local0 == 0x03) && (Local1 == 0x03)))
                        {
                            Local0 = 0x20
                            Local2 = NBMR (0x2D)
                            If (Arg1)
                            {
                                Local2 &= ~Local0
                            }
                            Else
                            {
                                Local2 |= Local0
                            }

                            NBMW (0x2D, Local2)
                            Return (Ones)
                        }
                        Else
                        {
                            Return (0x00)
                        }
                    }

                    If ((Arg0 == 0x09))
                    {
                        If (((Local0 >= 0x02) && (Local1 >= 0x02)))
                        {
                            Local0 = 0x10
                            Local2 = NBMR (0x2D)
                            If (Arg1)
                            {
                                Local2 &= ~Local0
                            }
                            Else
                            {
                                Local2 |= Local0
                            }

                            NBMW (0x2D, Local2)
                            Return (Ones)
                        }
                        Else
                        {
                            Return (0x00)
                        }
                    }

                    Local0 = 0x01
                    If ((Arg0 < 0x04))
                    {
                        Local1 = (Arg0 + 0x02)
                    }
                    Else
                    {
                        Local1 = (Arg0 + 0x11)
                    }

                    Local0 <<= Local1
                    Local2 = NBMR (0x08)
                    If (Arg1)
                    {
                        Local2 &= ~Local0
                    }
                    Else
                    {
                        Local2 |= Local0
                    }

                    NBMW (0x08, Local2)
                    Return (Ones)
                }
            }

            OperationRegion (K8ST, SystemMemory, 0xBDC2CF18, 0x00000048)
            Field (K8ST, AnyAcc, NoLock, Preserve)
            {
                C0_0,   16, 
                C2_0,   16, 
                C4_0,   16, 
                C6_0,   16, 
                C8_0,   16, 
                CA_0,   16, 
                CC_0,   16, 
                CE_0,   16, 
                D0_0,   16, 
                D2_0,   16, 
                D4_0,   16, 
                D6_0,   16, 
                D8_0,   16, 
                DA_0,   16, 
                DC_0,   16, 
                DE_0,   16, 
                E0_0,   16, 
                E2_0,   16, 
                E4_0,   16, 
                E6_0,   16, 
                E8_0,   16, 
                EA_0,   16, 
                EC_0,   16, 
                EE_0,   16, 
                F0_0,   16, 
                F2_0,   16, 
                F4_0,   16, 
                F6_0,   16, 
                F8_0,   16, 
                FA_0,   16, 
                FC_0,   16, 
                FE_0,   16, 
                TOML,   32, 
                TOMH,   32
            }

            Name (RSRC, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, SubDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0100,             // Length
                    0x00,, )
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000A0000,         // Range Minimum
                    0x000BFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C0000,         // Range Minimum
                    0x000C1FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, _Y00, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C2000,         // Range Minimum
                    0x000C3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, _Y01, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C4000,         // Range Minimum
                    0x000C5FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, _Y02, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C6000,         // Range Minimum
                    0x000C7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, _Y03, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C8000,         // Range Minimum
                    0x000C9FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, _Y04, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000CA000,         // Range Minimum
                    0x000CBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, _Y05, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000CC000,         // Range Minimum
                    0x000CDFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, _Y06, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000CE000,         // Range Minimum
                    0x000CFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, _Y07, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D0000,         // Range Minimum
                    0x000D1FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, _Y08, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D2000,         // Range Minimum
                    0x000D3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, _Y09, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D4000,         // Range Minimum
                    0x000D5FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, _Y0A, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D6000,         // Range Minimum
                    0x000D7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, _Y0B, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D8000,         // Range Minimum
                    0x000D9FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, _Y0C, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000DA000,         // Range Minimum
                    0x000DBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, _Y0D, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000DC000,         // Range Minimum
                    0x000DDFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, _Y0E, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000DE000,         // Range Minimum
                    0x000DFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, _Y0F, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E0000,         // Range Minimum
                    0x000E1FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, _Y10, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E2000,         // Range Minimum
                    0x000E3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, _Y11, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E4000,         // Range Minimum
                    0x000E5FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, _Y12, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E6000,         // Range Minimum
                    0x000E7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, _Y13, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E8000,         // Range Minimum
                    0x000E9FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, _Y14, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000EA000,         // Range Minimum
                    0x000EBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, _Y15, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000EC000,         // Range Minimum
                    0x000EDFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, _Y16, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000EE000,         // Range Minimum
                    0x000EFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, _Y17, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    0x00,, _Y18, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0xFC000000,         // Range Minimum
                    0xFDFFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x02000000,         // Length
                    0x00,, _Y19, AddressRangeMemory, TypeStatic)
                IO (Decode16,
                    0x0CF8,             // Range Minimum
                    0x0CF8,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0CF7,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0CF8,             // Length
                    0x00,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0D00,             // Range Minimum
                    0xFFFF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0xF300,             // Length
                    0x00,, , TypeStatic, DenseTranslation)
            })
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                CreateBitField (RSRC, \_SB.PCI0._Y00._RW, C0RW)  // _RW_: Read-Write Status
                CreateDWordField (RSRC, \_SB.PCI0._Y00._LEN, C0LN)  // _LEN: Length
                C0RW = One
                C0LN = 0x2000
                If ((C0_0 & 0x1818))
                {
                    C0LN = 0x00
                }

                CreateBitField (RSRC, \_SB.PCI0._Y01._RW, C2RW)  // _RW_: Read-Write Status
                CreateDWordField (RSRC, \_SB.PCI0._Y01._LEN, C2LN)  // _LEN: Length
                C2RW = One
                C2LN = 0x2000
                If ((C2_0 & 0x1818))
                {
                    C2LN = 0x00
                }

                CreateBitField (RSRC, \_SB.PCI0._Y02._RW, C4RW)  // _RW_: Read-Write Status
                CreateDWordField (RSRC, \_SB.PCI0._Y02._LEN, C4LN)  // _LEN: Length
                C4RW = One
                C4LN = 0x2000
                If ((C4_0 & 0x1818))
                {
                    C4LN = 0x00
                }

                CreateBitField (RSRC, \_SB.PCI0._Y03._RW, C6RW)  // _RW_: Read-Write Status
                CreateDWordField (RSRC, \_SB.PCI0._Y03._LEN, C6LN)  // _LEN: Length
                C6RW = One
                C6LN = 0x2000
                If ((C6_0 & 0x1818))
                {
                    C6LN = 0x00
                }

                CreateBitField (RSRC, \_SB.PCI0._Y04._RW, C8RW)  // _RW_: Read-Write Status
                CreateDWordField (RSRC, \_SB.PCI0._Y04._LEN, C8LN)  // _LEN: Length
                C8RW = One
                C8LN = 0x2000
                If ((C8_0 & 0x1818))
                {
                    C8LN = 0x00
                }

                CreateBitField (RSRC, \_SB.PCI0._Y05._RW, CARW)  // _RW_: Read-Write Status
                CreateDWordField (RSRC, \_SB.PCI0._Y05._LEN, CALN)  // _LEN: Length
                CARW = One
                CALN = 0x2000
                If ((CA_0 & 0x1818))
                {
                    CALN = 0x00
                }

                CreateBitField (RSRC, \_SB.PCI0._Y06._RW, CCRW)  // _RW_: Read-Write Status
                CreateDWordField (RSRC, \_SB.PCI0._Y06._LEN, CCLN)  // _LEN: Length
                CCRW = One
                CCLN = 0x2000
                If ((CC_0 & 0x1818))
                {
                    CCLN = 0x00
                }

                CreateBitField (RSRC, \_SB.PCI0._Y07._RW, CERW)  // _RW_: Read-Write Status
                CreateDWordField (RSRC, \_SB.PCI0._Y07._LEN, CELN)  // _LEN: Length
                CERW = One
                CELN = 0x2000
                If ((CE_0 & 0x1818))
                {
                    CELN = 0x00
                }

                CreateBitField (RSRC, \_SB.PCI0._Y08._RW, D0RW)  // _RW_: Read-Write Status
                CreateDWordField (RSRC, \_SB.PCI0._Y08._LEN, D0LN)  // _LEN: Length
                D0RW = One
                D0LN = 0x2000
                If ((D0_0 & 0x1818))
                {
                    D0LN = 0x00
                }

                CreateBitField (RSRC, \_SB.PCI0._Y09._RW, D2RW)  // _RW_: Read-Write Status
                CreateDWordField (RSRC, \_SB.PCI0._Y09._LEN, D2LN)  // _LEN: Length
                D2RW = One
                D2LN = 0x2000
                If ((D2_0 & 0x1818))
                {
                    D2LN = 0x00
                }

                CreateBitField (RSRC, \_SB.PCI0._Y0A._RW, D4RW)  // _RW_: Read-Write Status
                CreateDWordField (RSRC, \_SB.PCI0._Y0A._LEN, D4LN)  // _LEN: Length
                D4RW = One
                D4LN = 0x2000
                If ((D4_0 & 0x1818))
                {
                    D4LN = 0x00
                }

                CreateBitField (RSRC, \_SB.PCI0._Y0B._RW, D6RW)  // _RW_: Read-Write Status
                CreateDWordField (RSRC, \_SB.PCI0._Y0B._LEN, D6LN)  // _LEN: Length
                D6RW = One
                D6LN = 0x2000
                If ((D6_0 & 0x1818))
                {
                    D6LN = 0x00
                }

                CreateBitField (RSRC, \_SB.PCI0._Y0C._RW, D8RW)  // _RW_: Read-Write Status
                CreateDWordField (RSRC, \_SB.PCI0._Y0C._LEN, D8LN)  // _LEN: Length
                D8RW = One
                D8LN = 0x2000
                If ((D8_0 & 0x1818))
                {
                    D8LN = 0x00
                }

                CreateBitField (RSRC, \_SB.PCI0._Y0D._RW, DARW)  // _RW_: Read-Write Status
                CreateDWordField (RSRC, \_SB.PCI0._Y0D._LEN, DALN)  // _LEN: Length
                DARW = One
                DALN = 0x2000
                If ((DA_0 & 0x1818))
                {
                    DALN = 0x00
                }

                CreateBitField (RSRC, \_SB.PCI0._Y0E._RW, DCRW)  // _RW_: Read-Write Status
                CreateDWordField (RSRC, \_SB.PCI0._Y0E._LEN, DCLN)  // _LEN: Length
                DCRW = One
                DCLN = 0x2000
                If ((DC_0 & 0x1818))
                {
                    DCLN = 0x00
                }

                CreateBitField (RSRC, \_SB.PCI0._Y0F._RW, DERW)  // _RW_: Read-Write Status
                CreateDWordField (RSRC, \_SB.PCI0._Y0F._LEN, DELN)  // _LEN: Length
                DERW = One
                DELN = 0x2000
                If ((DE_0 & 0x1818))
                {
                    DELN = 0x00
                }

                CreateBitField (RSRC, \_SB.PCI0._Y10._RW, E0RW)  // _RW_: Read-Write Status
                CreateDWordField (RSRC, \_SB.PCI0._Y10._LEN, E0LN)  // _LEN: Length
                E0RW = One
                E0LN = 0x2000
                If ((E0_0 & 0x1818))
                {
                    E0LN = 0x00
                }

                CreateBitField (RSRC, \_SB.PCI0._Y11._RW, E2RW)  // _RW_: Read-Write Status
                CreateDWordField (RSRC, \_SB.PCI0._Y11._LEN, E2LN)  // _LEN: Length
                E2RW = One
                E2LN = 0x2000
                If ((E2_0 & 0x1818))
                {
                    E2LN = 0x00
                }

                CreateBitField (RSRC, \_SB.PCI0._Y12._RW, E4RW)  // _RW_: Read-Write Status
                CreateDWordField (RSRC, \_SB.PCI0._Y12._LEN, E4LN)  // _LEN: Length
                E4RW = One
                E4LN = 0x2000
                If ((E4_0 & 0x1818))
                {
                    E4LN = 0x00
                }

                CreateBitField (RSRC, \_SB.PCI0._Y13._RW, E6RW)  // _RW_: Read-Write Status
                CreateDWordField (RSRC, \_SB.PCI0._Y13._LEN, E6LN)  // _LEN: Length
                E6RW = One
                E6LN = 0x2000
                If ((E6_0 & 0x1818))
                {
                    E6LN = 0x00
                }

                CreateBitField (RSRC, \_SB.PCI0._Y14._RW, E8RW)  // _RW_: Read-Write Status
                CreateDWordField (RSRC, \_SB.PCI0._Y14._LEN, E8LN)  // _LEN: Length
                E8RW = One
                E8LN = 0x2000
                If ((E8_0 & 0x1818))
                {
                    E8LN = 0x00
                }

                CreateBitField (RSRC, \_SB.PCI0._Y15._RW, EARW)  // _RW_: Read-Write Status
                CreateDWordField (RSRC, \_SB.PCI0._Y15._LEN, EALN)  // _LEN: Length
                EARW = One
                EALN = 0x2000
                If ((EA_0 & 0x1818))
                {
                    EALN = 0x00
                }

                CreateBitField (RSRC, \_SB.PCI0._Y16._RW, ECRW)  // _RW_: Read-Write Status
                CreateDWordField (RSRC, \_SB.PCI0._Y16._LEN, ECLN)  // _LEN: Length
                ECRW = One
                ECLN = 0x2000
                If ((EC_0 & 0x1818))
                {
                    ECLN = 0x00
                }

                CreateBitField (RSRC, \_SB.PCI0._Y17._RW, EERW)  // _RW_: Read-Write Status
                CreateDWordField (RSRC, \_SB.PCI0._Y17._LEN, EELN)  // _LEN: Length
                EERW = One
                EELN = 0x2000
                If ((EE_0 & 0x1818))
                {
                    EELN = 0x00
                }

                CreateDWordField (RSRC, \_SB.PCI0._Y18._MIN, BT1S)  // _MIN: Minimum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y18._MAX, BT1M)  // _MAX: Maximum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y18._LEN, BT1L)  // _LEN: Length
                CreateDWordField (RSRC, \_SB.PCI0._Y19._MIN, BT2S)  // _MIN: Minimum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y19._MAX, BT2M)  // _MAX: Maximum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y19._LEN, BT2L)  // _LEN: Length
                Local0 = 0xF8000000
                BT1S = TOML /* \_SB_.PCI0.TOML */
                BT1M = (Local0 - 0x01)
                BT1L = (Local0 - TOML) /* \_SB_.PCI0.TOML */
                Return (RSRC) /* \_SB_.PCI0.RSRC */
            }

            Device (MEMR)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (MEM1, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x0F50,             // Range Minimum
                        0x0F50,             // Range Maximum
                        0x01,               // Alignment
                        0x02,               // Length
                        )
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y1A)
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y1B)
                    Memory32Fixed (ReadWrite,
                        0xF8000000,         // Address Base
                        0x04000000,         // Address Length
                        )
                })
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    CreateDWordField (MEM1, \_SB.PCI0.MEMR._Y1A._BAS, MB01)  // _BAS: Base Address
                    CreateDWordField (MEM1, \_SB.PCI0.MEMR._Y1A._LEN, ML01)  // _LEN: Length
                    CreateDWordField (MEM1, \_SB.PCI0.MEMR._Y1B._BAS, MB02)  // _BAS: Base Address
                    CreateDWordField (MEM1, \_SB.PCI0.MEMR._Y1B._LEN, ML02)  // _LEN: Length
                    If (GPIC)
                    {
                        MB01 = 0xFEC00000
                        MB02 = 0xFEE00000
                        ML01 = 0x2000
                        ML02 = 0x1000
                    }

                    Return (MEM1) /* \_SB_.PCI0.MEMR.MEM1 */
                }
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (GPIC)
                {
                    Return (Package (0x0A)
                    {
                        Package (0x04)
                        {
                            0x0001FFFF, 
                            0x00, 
                            0x00, 
                            0x28
                        }, 

                        Package (0x04)
                        {
                            0x0001FFFF, 
                            0x01, 
                            0x00, 
                            0x29
                        }, 

                        Package (0x04)
                        {
                            0x0001FFFF, 
                            0x02, 
                            0x00, 
                            0x2A
                        }, 

                        Package (0x04)
                        {
                            0x0001FFFF, 
                            0x03, 
                            0x00, 
                            0x2B
                        }, 

                        Package (0x04)
                        {
                            0x0008FFFF, 
                            0x00, 
                            0x00, 
                            0x2B
                        }, 

                        Package (0x04)
                        {
                            0x0008FFFF, 
                            0x01, 
                            0x00, 
                            0x24
                        }, 

                        Package (0x04)
                        {
                            0x0014FFFF, 
                            0x00, 
                            0x00, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x0014FFFF, 
                            0x01, 
                            0x00, 
                            0x11
                        }, 

                        Package (0x04)
                        {
                            0x0014FFFF, 
                            0x02, 
                            0x00, 
                            0x12
                        }, 

                        Package (0x04)
                        {
                            0x0014FFFF, 
                            0x03, 
                            0x00, 
                            0x13
                        }
                    })
                }
                Else
                {
                    Return (Package (0x0A)
                    {
                        Package (0x04)
                        {
                            0x0001FFFF, 
                            0x00, 
                            ^LPC0.LNKA, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0001FFFF, 
                            0x01, 
                            ^LPC0.LNKB, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0001FFFF, 
                            0x02, 
                            ^LPC0.LNKC, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0001FFFF, 
                            0x03, 
                            ^LPC0.LNKD, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0008FFFF, 
                            0x00, 
                            ^LPC0.LNKD, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0008FFFF, 
                            0x01, 
                            ^LPC0.LNKE, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0014FFFF, 
                            0x00, 
                            ^LPC0.LNKA, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0014FFFF, 
                            0x01, 
                            ^LPC0.LNKB, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0014FFFF, 
                            0x02, 
                            ^LPC0.LNKC, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0014FFFF, 
                            0x03, 
                            ^LPC0.LNKD, 
                            0x00
                        }
                    })
                }
            }

            OperationRegion (BAR1, PCI_Config, 0x14, 0x04)
            Field (BAR1, ByteAcc, NoLock, Preserve)
            {
                NBBA,   32
            }

            Device (GPP0)
            {
                Name (_ADR, 0x00010001)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x08, 
                    0x03
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (GPIC)
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                0x00, 
                                0x18
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                0x00, 
                                0x19
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                0x00, 
                                0x1A
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                0x00, 
                                0x1B
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                ^^LPC0.LNKA, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                ^^LPC0.LNKB, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                ^^LPC0.LNKC, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                ^^LPC0.LNKD, 
                                0x00
                            }
                        })
                    }
                }
            }

            Device (GPP1)
            {
                Name (_ADR, 0x00010002)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x08, 
                    0x03
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (GPIC)
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                0x00, 
                                0x1C
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                0x00, 
                                0x1D
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                0x00, 
                                0x1E
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                0x00, 
                                0x1F
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                ^^LPC0.LNKE, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                ^^LPC0.LNKF, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                ^^LPC0.LNKG, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                ^^LPC0.LNKH, 
                                0x00
                            }
                        })
                    }
                }
            }

            Device (GPP2)
            {
                Name (_ADR, 0x00010003)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x08, 
                    0x03
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (GPIC)
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                0x00, 
                                0x20
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                0x00, 
                                0x21
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                0x00, 
                                0x22
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                0x00, 
                                0x23
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                ^^LPC0.LNKA, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                ^^LPC0.LNKB, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                ^^LPC0.LNKC, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                ^^LPC0.LNKD, 
                                0x00
                            }
                        })
                    }
                }
            }

            Device (GPP3)
            {
                Name (_ADR, 0x00010004)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x08, 
                    0x03
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (GPIC)
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                0x00, 
                                0x24
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                0x00, 
                                0x25
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                0x00, 
                                0x26
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                0x00, 
                                0x27
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                ^^LPC0.LNKE, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                ^^LPC0.LNKF, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                ^^LPC0.LNKG, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                ^^LPC0.LNKH, 
                                0x00
                            }
                        })
                    }
                }
            }

            Device (GPP4)
            {
                Name (_ADR, 0x00010005)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x08, 
                    0x03
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (GPIC)
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                0x00, 
                                0x28
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                0x00, 
                                0x29
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                0x00, 
                                0x2A
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                0x00, 
                                0x2B
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                ^^LPC0.LNKA, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                ^^LPC0.LNKB, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                ^^LPC0.LNKC, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                ^^LPC0.LNKD, 
                                0x00
                            }
                        })
                    }
                }
            }

            Device (GPP5)
            {
                Name (_ADR, 0x00010006)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x08, 
                    0x03
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (GPIC)
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                0x00, 
                                0x2C
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                0x00, 
                                0x2D
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                0x00, 
                                0x2E
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                0x00, 
                                0x2F
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                ^^LPC0.LNKE, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                ^^LPC0.LNKF, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                ^^LPC0.LNKG, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                ^^LPC0.LNKH, 
                                0x00
                            }
                        })
                    }
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    OperationRegion (RPXX, PCI_Config, 0x00, 0x10)
                    Field (RPXX, AnyAcc, NoLock, Preserve)
                    {
                        VDID,   32
                    }

                    Method (WRDD, 0, Serialized)
                    {
                        If ((VDID == 0x25268086))
                        {
                            Return (Package (0x03)
                            {
                                0x00, 
                                Package (0x02)
                                {
                                    0x07, 
                                    0x4150
                                }
                            })
                        }
                    }

                    Method (WRDS, 0, Serialized)
                    {
                        If ((VDID == 0x25268086))
                        {
                            Return (Package (0x03)
                            {
                                0x00, 
                                Package (0x0C)
                                {
                                    0x07, 
                                    0x01, 
                                    0x78, 
                                    0x6C, 
                                    0x6C, 
                                    0x6C, 
                                    0x6C, 
                                    0x78, 
                                    0x6C, 
                                    0x6C, 
                                    0x6C, 
                                    0x6C
                                }
                            })
                        }
                    }

                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (Zero)
                    }
                }
            }

            Device (GPP6)
            {
                Name (_ADR, 0x00010007)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x08, 
                    0x03
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (GPIC)
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                0x00, 
                                0x30
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                0x00, 
                                0x31
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                0x00, 
                                0x32
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                0x00, 
                                0x33
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                ^^LPC0.LNKA, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                ^^LPC0.LNKB, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                ^^LPC0.LNKC, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                ^^LPC0.LNKD, 
                                0x00
                            }
                        })
                    }
                }
            }

            Device (GP17)
            {
                Name (_ADR, 0x00080001)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x19, 
                    0x03
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (GPIC)
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                0x00, 
                                0x34
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                0x00, 
                                0x35
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                0x00, 
                                0x36
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                0x00, 
                                0x37
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                ^^LPC0.LNKE, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                ^^LPC0.LNKF, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                ^^LPC0.LNKG, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                ^^LPC0.LNKH, 
                                0x00
                            }
                        })
                    }
                }

                Device (VGA)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (AF7E, 0x80000001)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0F)
                    }

                    Name (DOSA, 0x00)
                    Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
                    {
                        DOSA = Arg0
                    }

                    Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
                    {
                        Return (Package (0x05)
                        {
                            0x00010100, 
                            0x00010110, 
                            0x0200, 
                            0x00010210, 
                            0x00010220
                        })
                    }

                    Device (LCD)
                    {
                        Method (_ADR, 0, NotSerialized)  // _ADR: Address
                        {
                            Return (0x0110)
                        }

                        Name (BRLV, Buffer (0x11)
                        {
                            /* 0000 */  0x52, 0x22, 0x02, 0x08, 0x0E, 0x16, 0x1C, 0x22,  // R"....."
                            /* 0008 */  0x2A, 0x30, 0x36, 0x3E, 0x44, 0x4B, 0x52, 0x58,  // *06>DKRX
                            /* 0010 */  0x64                                             // d
                        })
                        Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
                        {
                            If ((AF7E == 0x80000001))
                            {
                                Return (^^^^LPC0.EC0.BRTW) /* \_SB_.PCI0.LPC0.EC0_.BRTW */
                            }
                            Else
                            {
                                Return (BRLV) /* \_SB_.PCI0.GP17.VGA_.LCD_.BRLV */
                            }
                        }

                        Method (_BCM, 1, NotSerialized)  // _BCM: Brightness Control Method
                        {
                            If ((AF7E == 0x80000001))
                            {
                                Local0 = Match (^^^^LPC0.EC0.BRTW, MEQ, Arg0, MTR, 0x00, 0x02)
                                Local1 = (Local0 - 0x02)
                                \BRLV = Local1
                                SCMS (0x16)
                            }
                        }

                        Method (_DDC, 1, NotSerialized)  // _DDC: Display Data Current
                        {
                            If ((Arg0 == 0x01))
                            {
                                Return (VEDI) /* \VEDI */
                            }
                            ElseIf ((Arg0 == 0x02))
                            {
                                Return (VEDI) /* \VEDI */
                            }

                            Return (0x00)
                        }
                    }
                }

                Device (PSP)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                }

                Device (ACP)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                }

                Device (AZAL)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                }

                Device (MP2C)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                }

                Device (XHC0)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    OperationRegion (PMOP, PCI_Config, 0x50, 0x08)
                    Field (PMOP, DWordAcc, NoLock, Preserve)
                    {
                        Offset (0x01), 
                        Offset (0x02), 
                            ,   3, 
                            ,   1, 
                            ,   1, 
                            ,   1, 
                            ,   3, 
                            ,   1, 
                            ,   1, 
                        Offset (0x04), 
                        PSTA,   2, 
                            ,   1, 
                            ,   1, 
                            ,   3, 
                        Offset (0x05), 
                            ,   4, 
                            ,   2, 
                        PMES,   1, 
                            ,   2
                    }

                    Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                    {
                        Return (0x00)
                    }

                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x19, 
                        0x03
                    })
                    Device (RHUB)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (UPCN, Package (0x04)
                        {
                            0x00, 
                            0x00, 
                            0x00, 
                            0x00
                        })
                        Name (UPC4, Package (0x04)
                        {
                            0xFF, 
                            0x09, 
                            0x00, 
                            0x00
                        })
                        Name (UPC3, Package (0x04)
                        {
                            0xFF, 
                            0x03, 
                            0x00, 
                            0x00
                        })
                        Name (UPCP, Package (0x04)
                        {
                            0xFF, 
                            0xFF, 
                            0x00, 
                            0x00
                        })
                        Name (PLDN, Package (0x01)
                        {
                            Buffer (0x10)
                            {
                                /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                            }
                        })
                        Name (PLD1, Package (0x01)
                        {
                            Buffer (0x10)
                            {
                                /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0008 */  0x69, 0x0C, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00   // i.......
                            }
                        })
                        Name (PLD2, Package (0x01)
                        {
                            Buffer (0x10)
                            {
                                /* 0000 */  0x01, 0xC6, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00,  // ..r.....
                                /* 0008 */  0x69, 0x0C, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00   // i.......
                            }
                        })
                        Name (PLD3, Package (0x01)
                        {
                            Buffer (0x10)
                            {
                                /* 0000 */  0x01, 0xC6, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00,  // ..r.....
                                /* 0008 */  0x71, 0x0C, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00   // q.......
                            }
                        })
                        Name (PLD4, Package (0x01)
                        {
                            Buffer (0x10)
                            {
                                /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0008 */  0x71, 0x0C, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00   // q.......
                            }
                        })
                        Name (PLDC, Package (0x01)
                        {
                            Buffer (0x14)
                            {
                                /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0008 */  0x24, 0x01, 0x80, 0x03, 0x00, 0x00, 0x00, 0x00,  // $.......
                                /* 0010 */  0x88, 0xFF, 0xB8, 0xFF                           // ....
                            }
                        })
                        Name (PLDW, Package (0x01)
                        {
                            Buffer (0x10)
                            {
                                /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0008 */  0xE0, 0x1E, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00   // ........
                            }
                        })
                        Device (PRT1)
                        {
                            Name (_ADR, 0x01)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (UPC4) /* \_SB_.PCI0.GP17.XHC0.RHUB.UPC4 */
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (PLD1) /* \_SB_.PCI0.GP17.XHC0.RHUB.PLD1 */
                            }
                        }

                        Device (PRT2)
                        {
                            Name (_ADR, 0x02)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (UPC3) /* \_SB_.PCI0.GP17.XHC0.RHUB.UPC3 */
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (PLD2) /* \_SB_.PCI0.GP17.XHC0.RHUB.PLD2 */
                            }
                        }

                        Device (PRT3)
                        {
                            Name (_ADR, 0x03)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (UPC3) /* \_SB_.PCI0.GP17.XHC0.RHUB.UPC3 */
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (PLD3) /* \_SB_.PCI0.GP17.XHC0.RHUB.PLD3 */
                            }
                        }

                        Device (PRT4)
                        {
                            Name (_ADR, 0x04)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (UPCP) /* \_SB_.PCI0.GP17.XHC0.RHUB.UPCP */
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (PLD4) /* \_SB_.PCI0.GP17.XHC0.RHUB.PLD4 */
                            }
                        }

                        Device (PRT5)
                        {
                            Name (_ADR, 0x05)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (UPCP) /* \_SB_.PCI0.GP17.XHC0.RHUB.UPCP */
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (PLDW) /* \_SB_.PCI0.GP17.XHC0.RHUB.PLDW */
                            }

                            Device (WLAN)
                            {
                                Name (_ADR, 0x05)  // _ADR: Address
                                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                {
                                    Return (PLDW) /* \_SB_.PCI0.GP17.XHC0.RHUB.PLDW */
                                }

                                Method (_STA, 0, NotSerialized)  // _STA: Status
                                {
                                    Return (0x0F)
                                }
                            }

                            Method (_STA, 0, NotSerialized)  // _STA: Status
                            {
                                If (RV2)
                                {
                                    Return (0x0F)
                                }
                                Else
                                {
                                    Return (0x00)
                                }
                            }
                        }

                        Device (PRT6)
                        {
                            Name (_ADR, 0x06)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (UPCP) /* \_SB_.PCI0.GP17.XHC0.RHUB.UPCP */
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (PLDC) /* \_SB_.PCI0.GP17.XHC0.RHUB.PLDC */
                            }

                            Device (CAMA)
                            {
                                Name (_ADR, 0x06)  // _ADR: Address
                                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                {
                                    Return (PLDC) /* \_SB_.PCI0.GP17.XHC0.RHUB.PLDC */
                                }

                                Method (_STA, 0, NotSerialized)  // _STA: Status
                                {
                                    Return (0x0F)
                                }
                            }

                            Method (_STA, 0, NotSerialized)  // _STA: Status
                            {
                                If (RV2)
                                {
                                    Return (0x0F)
                                }
                                Else
                                {
                                    Return (0x00)
                                }
                            }
                        }

                        Device (HS01)
                        {
                            Method (_ADR, 0, NotSerialized)  // _ADR: Address
                            {
                                If (RV2)
                                {
                                    Return (0x07)
                                }
                                Else
                                {
                                    Return (0x05)
                                }
                            }

                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (UPC4) /* \_SB_.PCI0.GP17.XHC0.RHUB.UPC4 */
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (PLD1) /* \_SB_.PCI0.GP17.XHC0.RHUB.PLD1 */
                            }
                        }

                        Device (HS02)
                        {
                            Method (_ADR, 0, NotSerialized)  // _ADR: Address
                            {
                                If (RV2)
                                {
                                    Return (0x08)
                                }
                                Else
                                {
                                    Return (0x06)
                                }
                            }

                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (UPC3) /* \_SB_.PCI0.GP17.XHC0.RHUB.UPC3 */
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (PLD2) /* \_SB_.PCI0.GP17.XHC0.RHUB.PLD2 */
                            }
                        }

                        Device (HS03)
                        {
                            Method (_ADR, 0, NotSerialized)  // _ADR: Address
                            {
                                If (RV2)
                                {
                                    Return (0x09)
                                }
                                Else
                                {
                                    Return (0x07)
                                }
                            }

                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (UPC3) /* \_SB_.PCI0.GP17.XHC0.RHUB.UPC3 */
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (PLD3) /* \_SB_.PCI0.GP17.XHC0.RHUB.PLD3 */
                            }
                        }

                        Device (HS04)
                        {
                            Method (_ADR, 0, NotSerialized)  // _ADR: Address
                            {
                                If (RV2)
                                {
                                    Return (0x0A)
                                }
                                Else
                                {
                                    Return (0x08)
                                }
                            }

                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (UPCN) /* \_SB_.PCI0.GP17.XHC0.RHUB.UPCN */
                            }
                        }
                    }
                }

                Device (XHC1)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                    {
                        Return (0x00)
                    }

                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x19, 
                        0x03
                    })
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (RV2)
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Return (0x0F)
                        }
                    }

                    Device (RHUB)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (UPCN, Package (0x04)
                        {
                            0x00, 
                            0x00, 
                            0x00, 
                            0x00
                        })
                        Name (UPCP, Package (0x04)
                        {
                            0xFF, 
                            0xFF, 
                            0x00, 
                            0x00
                        })
                        Name (PLDC, Package (0x01)
                        {
                            Buffer (0x14)
                            {
                                /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0008 */  0x24, 0x01, 0x80, 0x03, 0x00, 0x00, 0x00, 0x00,  // $.......
                                /* 0010 */  0x88, 0xFF, 0xB8, 0xFF                           // ....
                            }
                        })
                        Name (PLDW, Package (0x01)
                        {
                            Buffer (0x10)
                            {
                                /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0008 */  0xE0, 0x1E, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00   // ........
                            }
                        })
                        Device (PRT1)
                        {
                            Name (_ADR, 0x01)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (UPCP) /* \_SB_.PCI0.GP17.XHC1.RHUB.UPCP */
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (PLDW) /* \_SB_.PCI0.GP17.XHC1.RHUB.PLDW */
                            }

                            Device (WLAN)
                            {
                                Name (_ADR, 0x01)  // _ADR: Address
                                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                {
                                    Return (PLDW) /* \_SB_.PCI0.GP17.XHC1.RHUB.PLDW */
                                }

                                Method (_STA, 0, NotSerialized)  // _STA: Status
                                {
                                    Return (0x0F)
                                }
                            }
                        }

                        Device (PRT2)
                        {
                            Name (_ADR, 0x02)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (UPCP) /* \_SB_.PCI0.GP17.XHC1.RHUB.UPCP */
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (PLDC) /* \_SB_.PCI0.GP17.XHC1.RHUB.PLDC */
                            }

                            Device (CAMA)
                            {
                                Name (_ADR, 0x02)  // _ADR: Address
                                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                {
                                    Return (PLDC) /* \_SB_.PCI0.GP17.XHC1.RHUB.PLDC */
                                }

                                Method (_STA, 0, NotSerialized)  // _STA: Status
                                {
                                    Return (0x0F)
                                }
                            }
                        }

                        Device (PRT3)
                        {
                            Name (_ADR, 0x03)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (UPCN) /* \_SB_.PCI0.GP17.XHC1.RHUB.UPCN */
                            }
                        }
                    }
                }
            }

            Device (GP18)
            {
                Name (_ADR, 0x00080002)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x08, 
                    0x03
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (GPIC)
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                0x00, 
                                0x36
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                0x00, 
                                0x37
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                0x00, 
                                0x34
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                0x00, 
                                0x35
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                ^^LPC0.LNKG, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                ^^LPC0.LNKH, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                ^^LPC0.LNKE, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                ^^LPC0.LNKF, 
                                0x00
                            }
                        })
                    }
                }

                Device (SATA)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                }
            }

            Device (SMB)
            {
                Name (_ADR, 0x00140000)  // _ADR: Address
                OperationRegion (SBRV, PCI_Config, 0x08, 0x0100)
                Field (SBRV, AnyAcc, NoLock, Preserve)
                {
                    RVID,   8, 
                    Offset (0x5A), 
                    I1F,    1, 
                    I12F,   1, 
                    Offset (0x7A), 
                        ,   2, 
                    G31O,   1, 
                    Offset (0xD9), 
                        ,   6, 
                    ACIR,   1
                }

                OperationRegion (PMIO, SystemIO, 0x0CD6, 0x02)
                Field (PMIO, ByteAcc, NoLock, Preserve)
                {
                    INPM,   8, 
                    DAPM,   8
                }

                IndexField (INPM, DAPM, ByteAcc, NoLock, Preserve)
                {
                    HPAD,   32, 
                    Offset (0x60), 
                    P1EB,   16
                }

                OperationRegion (ERMG, SystemMemory, 0xFED81500, 0x03FF)
                Field (ERMG, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x0B), 
                        ,   4, 
                    P2IS,   1, 
                    P2WS,   1, 
                    Offset (0x18), 
                    Offset (0x1A), 
                    GE10,   1, 
                    Offset (0x1C), 
                    Offset (0x1E), 
                    GE11,   1, 
                    Offset (0x40), 
                    Offset (0x42), 
                    GE12,   1, 
                    Offset (0x46), 
                    GS17,   1, 
                        ,   5, 
                    GV17,   1, 
                    GE17,   1, 
                    Offset (0x108), 
                    Offset (0x10A), 
                    P33I,   1, 
                    Offset (0x10C), 
                    Offset (0x10E), 
                    P37I,   1, 
                    Offset (0x118), 
                    Offset (0x11A), 
                    P3BI,   1, 
                    Offset (0x11C), 
                    Offset (0x11E), 
                    P40I,   1, 
                    Offset (0x150), 
                        ,   22, 
                    P0CO,   1, 
                    Offset (0x154), 
                        ,   22, 
                    P0DO,   1, 
                    Offset (0x20C), 
                    Offset (0x20E), 
                    BOID,   1
                }

                OperationRegion (ERMM, SystemMemory, 0xFED80000, 0x1000)
                Field (ERMM, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x200), 
                        ,   1, 
                    E01S,   1, 
                        ,   3, 
                    E05S,   1, 
                        ,   9, 
                    E15S,   1, 
                    E16S,   1, 
                        ,   5, 
                    E22S,   1, 
                    Offset (0x204), 
                        ,   1, 
                    E01E,   1, 
                        ,   3, 
                    E05E,   1, 
                        ,   9, 
                    E15E,   1, 
                    E16E,   1, 
                        ,   5, 
                    E22E,   1, 
                    Offset (0x208), 
                        ,   1, 
                    E01C,   1, 
                        ,   3, 
                    E05C,   1, 
                        ,   4, 
                    E10C,   1, 
                        ,   4, 
                    E15C,   1, 
                    E16C,   1, 
                        ,   4, 
                    E21C,   1, 
                    E22C,   1, 
                        ,   3, 
                    E26C,   1, 
                    Offset (0x20C), 
                        ,   1, 
                    E01L,   1, 
                        ,   3, 
                    E05L,   1, 
                        ,   9, 
                    E15L,   1, 
                    E16L,   1, 
                        ,   5, 
                    E22L,   1, 
                    Offset (0x288), 
                        ,   1, 
                    CLPS,   1, 
                    Offset (0x299), 
                        ,   7, 
                    G15A,   1, 
                    Offset (0x2AC), 
                        ,   6, 
                    SRBT,   2, 
                    Offset (0x2B0), 
                        ,   2, 
                    SLPS,   2, 
                    Offset (0x2B2), 
                        ,   4, 
                    SPBT,   2, 
                    Offset (0x362), 
                        ,   6, 
                    MT3A,   1, 
                    Offset (0x377), 
                    EPNM,   1, 
                    DPPF,   1, 
                    Offset (0x3BB), 
                        ,   6, 
                    PWDE,   1, 
                    Offset (0x3BE), 
                        ,   5, 
                    ALLS,   1, 
                    Offset (0x3C8), 
                        ,   2, 
                    TFTE,   1, 
                    Offset (0x3DF), 
                    BLNK,   2, 
                    Offset (0x3F0), 
                    PHYD,   1, 
                        ,   1, 
                    RSTU,   1, 
                    US5R,   1, 
                    Offset (0x400), 
                    F0CT,   8, 
                    F0MS,   8, 
                    F0FQ,   8, 
                    F0LD,   8, 
                    F0MD,   8, 
                    F0MP,   8, 
                    LT0L,   8, 
                    LT0H,   8, 
                    MT0L,   8, 
                    MT0H,   8, 
                    HT0L,   8, 
                    HT0H,   8, 
                    LRG0,   8, 
                    LHC0,   8, 
                    Offset (0x410), 
                    F1CT,   8, 
                    F1MS,   8, 
                    F1FQ,   8, 
                    F1LD,   8, 
                    F1MD,   8, 
                    F1MP,   8, 
                    LT1L,   8, 
                    LT1H,   8, 
                    MT1L,   8, 
                    MT1H,   8, 
                    HT1L,   8, 
                    HT1H,   8, 
                    LRG1,   8, 
                    LHC1,   8, 
                    Offset (0x420), 
                    F2CT,   8, 
                    F2MS,   8, 
                    F2FQ,   8, 
                    F2LD,   8, 
                    F2MD,   8, 
                    F2MP,   8, 
                    LT2L,   8, 
                    LT2H,   8, 
                    MT2L,   8, 
                    MT2H,   8, 
                    HT2L,   8, 
                    HT2H,   8, 
                    LRG2,   8, 
                    LHC2,   8, 
                    Offset (0x430), 
                    F3CT,   8, 
                    F3MS,   8, 
                    F3FQ,   8, 
                    F3LD,   8, 
                    F3MD,   8, 
                    F3MP,   8, 
                    LT3L,   8, 
                    LT3H,   8, 
                    MT3L,   8, 
                    MT3H,   8, 
                    HT3L,   8, 
                    HT3H,   8, 
                    LRG3,   8, 
                    LHC3,   8, 
                    Offset (0x700), 
                    SEC,    8, 
                    Offset (0x702), 
                    MIN,    8, 
                    Offset (0xD01), 
                    MX01,   8, 
                    Offset (0xD07), 
                    MX07,   8, 
                    Offset (0xD0E), 
                    MX14,   8, 
                    MX15,   8, 
                    MX16,   8, 
                    Offset (0xD15), 
                    MX21,   8, 
                    MX22,   8, 
                    MX23,   8, 
                    Offset (0xD1B), 
                    MX27,   8, 
                    MX28,   8, 
                    Offset (0xD20), 
                    MX32,   8, 
                    MX33,   8, 
                    MX34,   8, 
                    Offset (0xD29), 
                    MX41,   8, 
                    Offset (0xD2C), 
                    MX44,   8, 
                    Offset (0xD33), 
                    MX51,   8, 
                    Offset (0xD35), 
                    MX53,   8, 
                    Offset (0xD39), 
                    MX57,   8, 
                    MX58,   8, 
                    MX59,   8, 
                    Offset (0xD42), 
                    MX66,   8, 
                    Offset (0xD66), 
                    M102,   8, 
                    Offset (0xD6C), 
                    M108,   8, 
                    Offset (0xDAA), 
                    M170,   8, 
                    Offset (0xDAF), 
                    M175,   8, 
                    M176,   8, 
                    Offset (0xDB4), 
                    M180,   8, 
                    M181,   8, 
                    M182,   8, 
                    Offset (0xDC5), 
                    M197,   8, 
                    Offset (0xDC7), 
                    M199,   8, 
                    M200,   8, 
                    Offset (0xE00), 
                    MS00,   8, 
                    MS01,   8, 
                    MS02,   8, 
                    MS03,   8, 
                    MS04,   8, 
                    Offset (0xE40), 
                    MS40,   8, 
                    Offset (0xE81), 
                        ,   2, 
                    ECES,   1
                }

                OperationRegion (P1E0, SystemIO, P1EB, 0x04)
                Field (P1E0, ByteAcc, NoLock, Preserve)
                {
                        ,   14, 
                    PEWS,   1, 
                    WSTA,   1, 
                        ,   14, 
                    PEWD,   1
                }

                Method (TRMD, 0, NotSerialized)
                {
                    TFTE = Zero
                }

                Method (HTCD, 0, NotSerialized)
                {
                }

                OperationRegion (ABIO, SystemIO, 0x0CD8, 0x08)
                Field (ABIO, DWordAcc, NoLock, Preserve)
                {
                    INAB,   32, 
                    DAAB,   32
                }

                Method (RDAB, 1, NotSerialized)
                {
                    INAB = Arg0
                    Return (DAAB) /* \_SB_.PCI0.SMB_.DAAB */
                }

                Method (WTAB, 2, NotSerialized)
                {
                    INAB = Arg0
                    DAAB = Arg1
                }

                Method (RWAB, 3, NotSerialized)
                {
                    Local0 = (RDAB (Arg0) & Arg1)
                    Local1 = (Local0 | Arg2)
                    WTAB (Arg0, Local1)
                }

                Method (CABR, 3, NotSerialized)
                {
                    Local0 = (Arg0 << 0x05)
                    Local1 = (Local0 + Arg1)
                    Local2 = (Local1 << 0x18)
                    Local3 = (Local2 + Arg2)
                    Return (Local3)
                }
            }

            Device (SDIO)
            {
                Name (_ADR, 0x00140007)  // _ADR: Address
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (RBUF, ResourceTemplate ()
                    {
                        GpioInt (Level, ActiveLow, ExclusiveAndWake, PullUp, 0x0000,
                            "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0019
                            }
                    })
                    Return (RBUF) /* \_SB_.PCI0.SDIO._CRS.RBUF */
                }

                Device (WLAN)
                {
                    Name (_ADR, One)  // _ADR: Address
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0F)
                    }

                    Method (_INI, 0, NotSerialized)  // _INI: Initialize
                    {
                    }
                }
            }

            Device (LPC0)
            {
                Name (_ADR, 0x00140003)  // _ADR: Address
                OperationRegion (PIRQ, SystemIO, 0x0C00, 0x02)
                Field (PIRQ, ByteAcc, NoLock, Preserve)
                {
                    PIID,   8, 
                    PIDA,   8
                }

                IndexField (PIID, PIDA, ByteAcc, NoLock, Preserve)
                {
                    PIRA,   8, 
                    PIRB,   8, 
                    PIRC,   8, 
                    PIRD,   8, 
                    PIRE,   8, 
                    PIRF,   8, 
                    PIRG,   8, 
                    PIRH,   8, 
                    Offset (0x0C), 
                    SIRA,   8, 
                    SIRB,   8, 
                    SIRC,   8, 
                    SIRD,   8, 
                    PIRS,   8, 
                    Offset (0x13), 
                    HDAD,   8, 
                    Offset (0x17), 
                    SDCL,   8, 
                    Offset (0x1A), 
                    SDIO,   8, 
                    Offset (0x30), 
                    USB1,   8, 
                    Offset (0x34), 
                    USB3,   8, 
                    Offset (0x41), 
                    SATA,   8, 
                    Offset (0x62), 
                    GIOC,   8, 
                    Offset (0x70), 
                    I2C0,   8, 
                    I2C1,   8, 
                    I2C2,   8, 
                    I2C3,   8, 
                    URT0,   8, 
                    URT1,   8
                }

                Name (IPRS, ResourceTemplate ()
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {3,4,5,7,10,11,12,14,15}
                })
                Name (UPRS, ResourceTemplate ()
                {
                    IRQ (Level, ActiveLow, Exclusive, )
                        {3,4,5,7}
                })
                OperationRegion (KBDD, SystemIO, 0x64, 0x01)
                Field (KBDD, ByteAcc, NoLock, Preserve)
                {
                    PD64,   8
                }

                Method (DSPI, 0, NotSerialized)
                {
                    INTA (0x1F)
                    INTB (0x1F)
                    INTC (0x1F)
                    INTD (0x1F)
                    Local1 = PD64 /* \_SB_.PCI0.LPC0.PD64 */
                    PIRE = 0x1F
                    PIRF = 0x1F
                    PIRG = 0x1F
                    PIRH = 0x1F
                }

                Method (INTA, 1, NotSerialized)
                {
                    PIRA = Arg0
                    If (GPIC)
                    {
                        HDAD = Arg0
                        SDCL = Arg0
                    }
                }

                Method (INTB, 1, NotSerialized)
                {
                    PIRB = Arg0
                }

                Method (INTC, 1, NotSerialized)
                {
                    PIRC = Arg0
                    If (GPIC)
                    {
                        USB1 = Arg0
                        USB3 = Arg0
                    }
                }

                Method (INTD, 1, NotSerialized)
                {
                    PIRD = Arg0
                    If (GPIC)
                    {
                        SATA = Arg0
                    }
                }

                Device (LNKA)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x01)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (PIRA)
                        {
                            Return (0x0B)
                        }
                        Else
                        {
                            Return (0x09)
                        }
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        Return (IPRS) /* \_SB_.PCI0.LPC0.IPRS */
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        INTA (0x1F)
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Local0 = IPRS /* \_SB_.PCI0.LPC0.IPRS */
                        CreateWordField (Local0, 0x01, IRQ0)
                        IRQ0 = (0x01 << PIRA) /* \_SB_.PCI0.LPC0.PIRA */
                        Return (Local0)
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, 0x01, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        INTA (Local0)
                    }
                }

                Device (LNKB)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x02)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (PIRB)
                        {
                            Return (0x0B)
                        }
                        Else
                        {
                            Return (0x09)
                        }
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        Return (IPRS) /* \_SB_.PCI0.LPC0.IPRS */
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        INTB (0x1F)
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Local0 = IPRS /* \_SB_.PCI0.LPC0.IPRS */
                        CreateWordField (Local0, 0x01, IRQ0)
                        IRQ0 = (0x01 << PIRB) /* \_SB_.PCI0.LPC0.PIRB */
                        Return (Local0)
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, 0x01, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        INTB (Local0)
                    }
                }

                Device (LNKC)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x03)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (PIRC)
                        {
                            Return (0x0B)
                        }
                        Else
                        {
                            Return (0x09)
                        }
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        Return (IPRS) /* \_SB_.PCI0.LPC0.IPRS */
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        INTC (0x1F)
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Local0 = IPRS /* \_SB_.PCI0.LPC0.IPRS */
                        CreateWordField (Local0, 0x01, IRQ0)
                        IRQ0 = (0x01 << PIRC) /* \_SB_.PCI0.LPC0.PIRC */
                        Return (Local0)
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, 0x01, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        INTC (Local0)
                    }
                }

                Device (LNKD)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x04)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (PIRD)
                        {
                            Return (0x0B)
                        }
                        Else
                        {
                            Return (0x09)
                        }
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        Return (IPRS) /* \_SB_.PCI0.LPC0.IPRS */
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        INTD (0x1F)
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Local0 = IPRS /* \_SB_.PCI0.LPC0.IPRS */
                        CreateWordField (Local0, 0x01, IRQ0)
                        IRQ0 = (0x01 << PIRD) /* \_SB_.PCI0.LPC0.PIRD */
                        Return (Local0)
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, 0x01, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        INTD (Local0)
                    }
                }

                Device (LNKE)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x05)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (PIRE)
                        {
                            Return (0x0B)
                        }
                        Else
                        {
                            Return (0x09)
                        }
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        Return (IPRS) /* \_SB_.PCI0.LPC0.IPRS */
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        PIRE = 0x1F
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Local0 = IPRS /* \_SB_.PCI0.LPC0.IPRS */
                        CreateWordField (Local0, 0x01, IRQ0)
                        IRQ0 = (0x01 << PIRE) /* \_SB_.PCI0.LPC0.PIRE */
                        Return (Local0)
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, 0x01, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        PIRE = Local0
                    }
                }

                Device (LNKF)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x06)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (PIRF)
                        {
                            Return (0x0B)
                        }
                        Else
                        {
                            Return (0x09)
                        }
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        Return (IPRS) /* \_SB_.PCI0.LPC0.IPRS */
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        PIRF = 0x1F
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Local0 = IPRS /* \_SB_.PCI0.LPC0.IPRS */
                        CreateWordField (Local0, 0x01, IRQ0)
                        IRQ0 = (0x01 << PIRF) /* \_SB_.PCI0.LPC0.PIRF */
                        Return (Local0)
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, 0x01, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        PIRF = Local0
                    }
                }

                Device (LNKG)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x07)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (PIRG)
                        {
                            Return (0x0B)
                        }
                        Else
                        {
                            Return (0x09)
                        }
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        Return (IPRS) /* \_SB_.PCI0.LPC0.IPRS */
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        PIRG = 0x1F
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Local0 = IPRS /* \_SB_.PCI0.LPC0.IPRS */
                        CreateWordField (Local0, 0x01, IRQ0)
                        IRQ0 = (0x01 << PIRG) /* \_SB_.PCI0.LPC0.PIRG */
                        Return (Local0)
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, 0x01, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        PIRG = Local0
                    }
                }

                Device (LNKH)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x08)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (PIRH)
                        {
                            Return (0x0B)
                        }
                        Else
                        {
                            Return (0x09)
                        }
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        Return (IPRS) /* \_SB_.PCI0.LPC0.IPRS */
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        PIRH = 0x1F
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Local0 = IPRS /* \_SB_.PCI0.LPC0.IPRS */
                        CreateWordField (Local0, 0x01, IRQ0)
                        IRQ0 = (0x01 << PIRH) /* \_SB_.PCI0.LPC0.PIRH */
                        Return (Local0)
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, 0x01, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        PIRH = Local0
                    }
                }

                OperationRegion (LPCR, PCI_Config, 0x04, 0x42)
                Field (LPCR, ByteAcc, NoLock, Preserve)
                {
                    PCMD,   2, 
                    Offset (0x40), 
                    CMA0,   1, 
                    CMA1,   1, 
                    CMA2,   1, 
                    CMA3,   1, 
                    CMA4,   1, 
                    CMA5,   1, 
                    CMA6,   1, 
                    CMA7,   1, 
                    CMB0,   1, 
                    CMB1,   1, 
                    CMB2,   1, 
                    CMB3,   1, 
                    CMB4,   1, 
                    CMB5,   1, 
                    CMB6,   1, 
                    CMB7,   1
                }

                Device (DMAC)
                {
                    Name (_HID, EisaId ("PNP0200") /* PC-class DMA Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                        IO (Decode16,
                            0x0081,             // Range Minimum
                            0x0081,             // Range Maximum
                            0x01,               // Alignment
                            0x0F,               // Length
                            )
                        IO (Decode16,
                            0x00C0,             // Range Minimum
                            0x00C0,             // Range Maximum
                            0x01,               // Alignment
                            0x1F,               // Length
                            )
                        IO (Decode16,
                            0x040B,             // Range Minimum
                            0x040B,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x04D6,             // Range Minimum
                            0x04D6,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        DMA (Compatibility, NotBusMaster, Transfer8_16, )
                            {4}
                    })
                }

                Device (MATH)
                {
                    Name (_HID, EisaId ("PNP0C04") /* x87-compatible Floating Point Processing Unit */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x00F0,             // Range Minimum
                            0x00F0,             // Range Maximum
                            0x01,               // Alignment
                            0x0F,               // Length
                            )
                        IRQ (Edge, ActiveHigh, Exclusive, )
                            {13}
                    })
                }

                Device (PIC)
                {
                    Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0020,             // Range Minimum
                            0x0020,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A0,             // Range Minimum
                            0x00A0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IRQ (Edge, ActiveHigh, Exclusive, )
                            {2}
                    })
                }

                Device (RTC)
                {
                    Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
                    Name (BUF0, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                    })
                    Name (BUF1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {8}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        If (((^^^SMB.HPAD & 0x40) == 0x40))
                        {
                            Return (BUF0) /* \_SB_.PCI0.LPC0.RTC_.BUF0 */
                        }

                        Return (BUF1) /* \_SB_.PCI0.LPC0.RTC_.BUF1 */
                    }
                }

                Device (SPKR)
                {
                    Name (_HID, EisaId ("PNP0800") /* Microsoft Sound System Compatible Device */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0061,             // Range Minimum
                            0x0061,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                    })
                }

                Device (TIME)
                {
                    Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                        IRQ (Edge, ActiveHigh, Exclusive, )
                            {0}
                    })
                }

                Device (SYSR)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0022,             // Range Minimum
                            0x0022,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x002E,             // Range Minimum
                            0x002E,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0072,             // Range Minimum
                            0x0072,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0080,             // Range Minimum
                            0x0080,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0092,             // Range Minimum
                            0x0092,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00B0,             // Range Minimum
                            0x00B0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00B2,             // Range Minimum
                            0x00B2,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00B8,             // Range Minimum
                            0x00B8,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00BC,             // Range Minimum
                            0x00BC,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00F0,             // Range Minimum
                            0x00F0,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x04D0,             // Range Minimum
                            0x04D0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0530,             // Range Minimum
                            0x0530,             // Range Maximum
                            0x01,               // Alignment
                            0x08,               // Length
                            )
                        IO (Decode16,
                            0x0400,             // Range Minimum
                            0x0400,             // Range Maximum
                            0x01,               // Alignment
                            0x28,               // Length
                            )
                        IO (Decode16,
                            0x0430,             // Range Minimum
                            0x0430,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0440,             // Range Minimum
                            0x0440,             // Range Maximum
                            0x01,               // Alignment
                            0x08,               // Length
                            )
                        IO (Decode16,
                            0x0B00,             // Range Minimum
                            0x0B00,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                        IO (Decode16,
                            0x0B20,             // Range Minimum
                            0x0B20,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                        IO (Decode16,
                            0x0C00,             // Range Minimum
                            0x0C00,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0C14,             // Range Minimum
                            0x0C14,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0C50,             // Range Minimum
                            0x0C50,             // Range Maximum
                            0x01,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0CD0,             // Range Minimum
                            0x0CD0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0CD2,             // Range Minimum
                            0x0CD2,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0CD4,             // Range Minimum
                            0x0CD4,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0CD6,             // Range Minimum
                            0x0CD6,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0CD8,             // Range Minimum
                            0x0CD8,             // Range Maximum
                            0x01,               // Alignment
                            0x08,               // Length
                            )
                        IO (Decode16,
                            0x0CF9,             // Range Minimum
                            0x0CF9,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                            0x0000,             // Granularity
                            0x8100,             // Range Minimum
                            0x81FF,             // Range Maximum
                            0x0000,             // Translation Offset
                            0x0100,             // Length
                            ,, , TypeStatic, DenseTranslation)
                        WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                            0x0000,             // Granularity
                            0x8200,             // Range Minimum
                            0x82FF,             // Range Maximum
                            0x0000,             // Translation Offset
                            0x0100,             // Length
                            ,, , TypeStatic, DenseTranslation)
                    })
                }

                OperationRegion (LPCS, PCI_Config, 0xA0, 0x04)
                Field (LPCS, DWordAcc, NoLock, Preserve)
                {
                    SPBA,   32
                }

                Device (MEM)
                {
                    Name (_HID, EisaId ("PNP0C01") /* System Board */)  // _HID: Hardware ID
                    Name (MSRC, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadOnly,
                            0x000E0000,         // Address Base
                            0x00020000,         // Address Length
                            )
                        Memory32Fixed (ReadOnly,
                            0xFF000000,         // Address Base
                            0x01000000,         // Address Length
                            )
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y1C)
                        Memory32Fixed (ReadWrite,
                            0xFEC10000,         // Address Base
                            0x00000020,         // Address Length
                            _Y1D)
                        Memory32Fixed (ReadOnly,
                            0xFED00000,         // Address Base
                            0x00000400,         // Address Length
                            )
                        Memory32Fixed (ReadWrite,
                            0xFED61000,         // Address Base
                            0x00000400,         // Address Length
                            )
                        Memory32Fixed (ReadWrite,
                            0xFED80000,         // Address Base
                            0x00001000,         // Address Length
                            )
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (MSRC, \_SB.PCI0.LPC0.MEM._Y1C._BAS, BARX)  // _BAS: Base Address
                        CreateDWordField (MSRC, \_SB.PCI0.LPC0.MEM._Y1C._LEN, GALN)  // _LEN: Length
                        CreateDWordField (MSRC, \_SB.PCI0.LPC0.MEM._Y1D._BAS, MB01)  // _BAS: Base Address
                        CreateDWordField (MSRC, \_SB.PCI0.LPC0.MEM._Y1D._LEN, ML01)  // _LEN: Length
                        Local0 = SPBA /* \_SB_.PCI0.LPC0.SPBA */
                        MB01 = (Local0 & 0xFFFFFFE0)
                        Local0 = NBBA /* \_SB_.PCI0.NBBA */
                        If (Local0)
                        {
                            GALN = 0x1000
                            BARX = (Local0 & 0xFFFFFFF0)
                        }

                        Return (MSRC) /* \_SB_.PCI0.LPC0.MEM_.MSRC */
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0F)
                    }
                }

                Device (KBD)
                {
                    Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                    {
                        If (WIN8)
                        {
                            Return (0x7100AE30)
                        }

                        Return (0x0303D041)
                    }

                    Name (_CID, EisaId ("PNP0303") /* IBM Enhanced Keyboard (101/102-key, PS/2 Mouse) */)  // _CID: Compatible ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IRQ (Edge, ActiveHigh, Exclusive, )
                            {1}
                    })
                }

                Device (MOU)
                {
                    Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                    {
                        If ((^^^SMB.BOID == 0x01))
                        {
                            Return (0x5D20AE30)
                        }
                        Else
                        {
                            Return (0x5C20AE30)
                        }
                    }

                    Name (_CID, EisaId ("PNP0F13") /* PS/2 Mouse */)  // _CID: Compatible ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IRQNoFlags ()
                            {12}
                    })
                }

                Device (EC0)
                {
                    Name (_HID, EisaId ("PNP0C09") /* Embedded Controller Device */)  // _HID: Hardware ID
                    Name (_UID, 0x00)  // _UID: Unique ID
                    Name (_GPE, 0x03)  // _GPE: General Purpose Events
                    Method (_REG, 2, NotSerialized)  // _REG: Region Availability
                    {
                        If ((Arg0 == 0x03))
                        {
                            H8DR = Arg1
                        }
                    }

                    OperationRegion (ECOR, EmbeddedControl, 0x00, 0x0100)
                    Field (ECOR, ByteAcc, NoLock, Preserve)
                    {
                        HDBM,   1, 
                            ,   1, 
                            ,   1, 
                        HFNE,   1, 
                            ,   1, 
                            ,   1, 
                        HLDM,   1, 
                        Offset (0x01), 
                        BBLS,   1, 
                        BTCM,   1, 
                            ,   1, 
                            ,   1, 
                            ,   1, 
                        HBPR,   1, 
                        BTPC,   1, 
                        Offset (0x02), 
                        HDUE,   1, 
                            ,   4, 
                        SNLK,   1, 
                        Offset (0x03), 
                            ,   5, 
                        HAUM,   2, 
                        Offset (0x05), 
                        HSPA,   1, 
                        Offset (0x06), 
                        HSUN,   8, 
                        HSRP,   8, 
                        Offset (0x0C), 
                        HLCL,   8, 
                            ,   4, 
                        CALM,   1, 
                        Offset (0x0E), 
                        HFNS,   2, 
                        Offset (0x0F), 
                            ,   6, 
                        NULS,   1, 
                        Offset (0x10), 
                        HAM0,   8, 
                        HAM1,   8, 
                        HAM2,   8, 
                        HAM3,   8, 
                        HAM4,   8, 
                        HAM5,   8, 
                        HAM6,   8, 
                        HAM7,   8, 
                        HAM8,   8, 
                        HAM9,   8, 
                        HAMA,   8, 
                        HAMB,   8, 
                        HAMC,   8, 
                        HAMD,   8, 
                        HAME,   8, 
                        HAMF,   8, 
                        Offset (0x23), 
                        HANT,   8, 
                        Offset (0x26), 
                            ,   2, 
                        HANA,   2, 
                        Offset (0x27), 
                        Offset (0x28), 
                            ,   1, 
                        SKEM,   1, 
                        Offset (0x29), 
                        Offset (0x2A), 
                        HATR,   8, 
                        HT0H,   8, 
                        HT0L,   8, 
                        HT1H,   8, 
                        HT1L,   8, 
                        HFSP,   8, 
                            ,   6, 
                        HMUT,   1, 
                        Offset (0x31), 
                            ,   2, 
                        HUWB,   1, 
                            ,   3, 
                        VPON,   1, 
                        VRST,   1, 
                        HWPM,   1, 
                        HWLB,   1, 
                        HWLO,   1, 
                        HWDK,   1, 
                        HWFN,   1, 
                        HWBT,   1, 
                        HWRI,   1, 
                        HWBU,   1, 
                        HWLU,   1, 
                        Offset (0x34), 
                            ,   3, 
                        PIBS,   1, 
                            ,   3, 
                        HPLO,   1, 
                        Offset (0x36), 
                        HWAC,   16, 
                        HB0S,   7, 
                        HB0A,   1, 
                        HB1S,   7, 
                        HB1A,   1, 
                        HCMU,   1, 
                            ,   2, 
                        OVRQ,   1, 
                        DCBD,   1, 
                        DCWL,   1, 
                        DCWW,   1, 
                        HB1I,   1, 
                            ,   1, 
                        KBLT,   1, 
                        BTPW,   1, 
                        FNKC,   1, 
                        HUBS,   1, 
                        BDPW,   1, 
                        BDDT,   1, 
                        HUBB,   1, 
                        Offset (0x46), 
                            ,   1, 
                        BTWK,   1, 
                        HPLD,   1, 
                            ,   1, 
                        HPAC,   1, 
                        BTST,   1, 
                        PSST,   1, 
                        Offset (0x47), 
                        HPBU,   1, 
                            ,   1, 
                        HBID,   1, 
                            ,   3, 
                        HBCS,   1, 
                        HPNF,   1, 
                            ,   1, 
                        GSTS,   1, 
                            ,   2, 
                        HLBU,   1, 
                        DOCD,   1, 
                        HCBL,   1, 
                        Offset (0x49), 
                        SLUL,   1, 
                            ,   1, 
                        ACAT,   1, 
                            ,   4, 
                        ELNK,   1, 
                        FPSU,   1, 
                        Offset (0x4B), 
                        Offset (0x4C), 
                        HTMH,   8, 
                        HTML,   8, 
                        HWAK,   16, 
                        HMPR,   8, 
                            ,   7, 
                        HMDN,   1, 
                        Offset (0x78), 
                        TMP0,   8, 
                        TMP3,   8, 
                        Offset (0x7B), 
                        GTMP,   1, 
                        Offset (0x80), 
                        Offset (0x81), 
                        HIID,   8, 
                        Offset (0x83), 
                        HFNI,   8, 
                        HSPD,   16, 
                        Offset (0x88), 
                        TSL0,   7, 
                        TSR0,   1, 
                        TSL1,   7, 
                        TSR1,   1, 
                        TSL2,   7, 
                        TSR2,   1, 
                        TSL3,   7, 
                        TSR3,   1, 
                        GPUT,   1, 
                        Offset (0x8D), 
                        HDAA,   3, 
                        HDAB,   3, 
                        HDAC,   2, 
                        Offset (0xB0), 
                        HDEN,   32, 
                        HDEP,   32, 
                        HDEM,   8, 
                        HDES,   8, 
                        Offset (0xC8), 
                        ATMX,   8, 
                        HWAT,   8, 
                        Offset (0xCC), 
                        PWMH,   8, 
                        PWML,   8, 
                        Offset (0xED), 
                            ,   4, 
                        HDDD,   1
                    }

                    Method (_INI, 0, NotSerialized)  // _INI: Initialize
                    {
                        If (H8DR)
                        {
                            HSPA = 0x00
                        }
                        Else
                        {
                            MBEC (0x05, 0xFE, 0x00)
                        }

                        ^HKEY.WGIN ()
                    }

                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0062,             // Range Minimum
                            0x0062,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0066,             // Range Minimum
                            0x0066,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                    })
                    Method (LED, 2, NotSerialized)
                    {
                        Local0 = (Arg0 | Arg1)
                        If (H8DR)
                        {
                            HLCL = Local0
                        }
                        Else
                        {
                            WBEC (0x0C, Local0)
                        }
                    }

                    Name (BAON, 0x00)
                    Name (WBON, 0x00)
                    Method (BEEP, 1, NotSerialized)
                    {
                        If ((Arg0 == 0x05))
                        {
                            WBON = 0x00
                        }

                        Local2 = WBON /* \_SB_.PCI0.LPC0.EC0_.WBON */
                        If (BAON)
                        {
                            If ((Arg0 == 0x00))
                            {
                                BAON = 0x00
                                If (WBON)
                                {
                                    Local0 = 0x03
                                    Local1 = 0x08
                                }
                                Else
                                {
                                    Local0 = 0x00
                                    Local1 = 0x00
                                }
                            }
                            Else
                            {
                                Local0 = 0xFF
                                Local1 = 0xFF
                                If ((Arg0 == 0x11))
                                {
                                    WBON = 0x00
                                }

                                If ((Arg0 == 0x10))
                                {
                                    WBON = 0x01
                                }
                            }
                        }
                        Else
                        {
                            Local0 = Arg0
                            Local1 = 0xFF
                            If ((Arg0 == 0x0F))
                            {
                                Local0 = Arg0
                                Local1 = 0x08
                                BAON = 0x01
                            }

                            If ((Arg0 == 0x11))
                            {
                                Local0 = 0x00
                                Local1 = 0x00
                                WBON = 0x00
                            }

                            If ((Arg0 == 0x10))
                            {
                                Local0 = 0x03
                                Local1 = 0x08
                                WBON = 0x01
                            }
                        }

                        If ((Arg0 == 0x03))
                        {
                            WBON = 0x00
                            If (Local2)
                            {
                                Local0 = 0x07
                                If (((SPS == 0x03) || (SPS == 0x04)))
                                {
                                    Local2 = 0x00
                                    Local0 = 0xFF
                                    Local1 = 0xFF
                                }
                            }
                        }

                        If ((Arg0 == 0x07))
                        {
                            If (Local2)
                            {
                                Local2 = 0x00
                                Local0 = 0xFF
                                Local1 = 0xFF
                            }
                        }

                        If (H8DR)
                        {
                            If ((Local2 && !WBON))
                            {
                                HSRP = 0x00
                                HSUN = 0x00
                                Sleep (0x64)
                            }

                            If ((Local1 != 0xFF))
                            {
                                HSRP = Local1
                            }

                            If ((Local0 != 0xFF))
                            {
                                HSUN = Local0
                            }
                        }
                        Else
                        {
                            If ((Local2 && !WBON))
                            {
                                WBEC (0x07, 0x00)
                                WBEC (0x06, 0x00)
                                Sleep (0x64)
                            }

                            If ((Local1 != 0xFF))
                            {
                                WBEC (0x07, Local1)
                            }

                            If ((Local0 != 0xFF))
                            {
                                WBEC (0x06, Local0)
                            }
                        }

                        If ((Arg0 == 0x03)) {}
                        If ((Arg0 == 0x07))
                        {
                            Sleep (0x01F4)
                        }
                    }

                    Method (EVNT, 1, NotSerialized)
                    {
                        If (H8DR)
                        {
                            If (Arg0)
                            {
                                HAM5 |= 0x04
                            }
                            Else
                            {
                                HAM5 &= 0xFB
                            }
                        }
                        ElseIf (Arg0)
                        {
                            MBEC (0x15, 0xFF, 0x04)
                        }
                        Else
                        {
                            MBEC (0x15, 0xFB, 0x00)
                        }
                    }

                    Method (CHKS, 0, NotSerialized)
                    {
                        Local0 = 0x03E8
                        While (HMPR)
                        {
                            Sleep (0x01)
                            Local0--
                            If (!Local0)
                            {
                                Return (0x8080)
                            }
                        }

                        If (HMDN)
                        {
                            Return (Zero)
                        }

                        Return (0x8081)
                    }

                    Method (LPMD, 0, NotSerialized)
                    {
                        Local0 = 0x00
                        Local1 = 0x00
                        Local2 = 0x00
                        Return (Local0)
                    }

                    Method (CLPM, 0, NotSerialized)
                    {
                    }

                    Mutex (MCPU, 0x00)
                    Method (_Q1F, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        If (^HKEY.MHKK (0x01, 0x00020000))
                        {
                            If ((PKLI & 0x0C00))
                            {
                                ^HKEY.MHKQ (0x1012)
                            }
                        }

                        SCMS (0x0E)
                    }

                    Method (_Q16, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        If (^HKEY.MHKK (0x01, 0x40))
                        {
                            ^HKEY.MHKQ (0x1007)
                        }
                    }

                    Method (_Q1C, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        If (^HKEY.MHKK (0x01, 0x01000000))
                        {
                            ^HKEY.MHKQ (0x1019)
                        }
                    }

                    Method (_Q1D, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        If (^HKEY.MHKK (0x01, 0x02000000))
                        {
                            ^HKEY.MHKQ (0x101A)
                        }
                    }

                    Method (_Q13, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        If (^HKEY.DHKC)
                        {
                            ^HKEY.MHKQ (0x1004)
                        }
                        Else
                        {
                            Notify (SLPB, 0x80) // Status Change
                        }
                    }

                    Method (_Q66, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        If (^HKEY.MHKK (0x01, 0x10000000))
                        {
                            ^HKEY.MHKQ (0x101D)
                        }
                    }

                    Method (_Q64, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        If (^HKEY.MHKK (0x01, 0x10))
                        {
                            ^HKEY.MHKQ (0x1005)
                        }
                    }

                    Method (_Q60, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        If (^HKEY.MHKK (0x03, 0x00080000))
                        {
                            ^HKEY.MHKQ (0x1314)
                        }
                    }

                    Method (_Q61, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        If (^HKEY.MHKK (0x03, 0x00100000))
                        {
                            ^HKEY.MHKQ (0x1315)
                        }
                    }

                    Method (_Q62, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        If (^HKEY.MHKK (0x03, 0x00010000))
                        {
                            ^HKEY.MHKQ (0x1311)
                        }
                    }

                    Method (_Q65, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        If (^HKEY.MHKK (0x03, 0x00020000))
                        {
                            ^HKEY.MHKQ (0x1312)
                        }
                    }

                    Method (_Q94, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        If (^HKEY.MHKK (0x03, 0x00040000))
                        {
                            ^HKEY.MHKQ (0x1313)
                        }
                    }

                    Method (_Q26, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        SCMS (0x12)
                        Sleep (0x01F4)
                        Notify (AC, 0x80) // Status Change
                        If (WXPF)
                        {
                            Acquire (MCPU, 0xFFFF)
                        }

                        If (WXPF)
                        {
                            Sleep (0x64)
                        }

                        If (WXPF)
                        {
                            Release (MCPU)
                        }

                        ^HKEY.MHKQ (0x6040)
                    }

                    Method (_Q27, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        SCMS (0x12)
                        Sleep (0x01F4)
                        Notify (AC, 0x80) // Status Change
                        If (WXPF)
                        {
                            Acquire (MCPU, 0xFFFF)
                        }

                        If (WXPF)
                        {
                            Sleep (0x64)
                        }

                        If (WXPF)
                        {
                            Release (MCPU)
                        }

                        ^HKEY.MHKQ (0x6040)
                    }

                    Method (_Q2A, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        VCMS (0x01, ^^^^LID._LID ())
                        LED (0x00, 0x80)
                        If ((ILNF == 0x00))
                        {
                            If (IOST)
                            {
                                If (!ISOC (0x00))
                                {
                                    IOST = 0x00
                                    ^HKEY.MHKQ (0x60D0)
                                }
                            }

                            ^HKEY.MHKQ (0x5002)
                            If ((PLUX == 0x00))
                            {
                                Notify (LID, 0x80) // Status Change
                            }
                        }
                    }

                    Method (_Q2B, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        SCMS (0x0D)
                        LED (0x00, 0x00)
                        VCMS (0x01, ^^^^LID._LID ())
                        If ((ILNF == 0x00))
                        {
                            If ((IOEN && !IOST))
                            {
                                If (!ISOC (0x01))
                                {
                                    IOST = 0x01
                                    ^HKEY.MHKQ (0x60D0)
                                }
                            }

                            ^HKEY.MHKQ (0x5001)
                            If ((PLUX == 0x00))
                            {
                                Notify (LID, 0x80) // Status Change
                            }
                        }
                    }

                    Method (_Q3D, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                    }

                    Method (_Q48, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                    }

                    Method (_Q49, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                    }

                    Method (_Q7F, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Fatal (0x01, 0x80010000, 0x26D8)
                    }

                    Method (_Q46, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        ^HKEY.MHKQ (0x6012)
                    }

                    Method (_Q3B, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        If ((WLAC == 0x02)) {}
                        ElseIf ((ELNK && (WLAC == 0x01)))
                        {
                            DCWL = 0x00
                        }
                        Else
                        {
                            DCWL = 0x01
                        }
                    }

                    Method (_Q2F, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        BFCC ()
                    }

                    Method (_Q86, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x86
                        ^HKEY.DYTC (0x001F4001)
                    }

                    Method (_Q87, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x87
                        ^HKEY.DYTC (0x000F4001)
                    }

                    Method (_Q8B, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x8B
                        LGBF = 0x01
                        ^HKEY.DYTC (0x001F0001)
                    }

                    Method (_Q8C, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x8C
                        LGBF = 0x00
                        ^HKEY.DYTC (0x001F0001)
                    }

                    Method (_Q22, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        If (HB0A)
                        {
                            Notify (BAT0, 0x80) // Status Change
                        }
                    }

                    Method (_Q4A, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Notify (BAT0, 0x81) // Information Change
                    }

                    Method (_Q4B, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Notify (BAT0, 0x80) // Status Change
                    }

                    Method (_Q24, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Notify (BAT0, 0x80) // Status Change
                    }

                    Method (BFCC, 0, NotSerialized)
                    {
                        If (^BAT0.B0ST)
                        {
                            Notify (BAT0, 0x81) // Information Change
                        }
                    }

                    Method (BATW, 1, NotSerialized)
                    {
                        If (BT2T) {}
                    }

                    Field (ECOR, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0xA0), 
                        SBRC,   16, 
                        SBFC,   16, 
                        SBAE,   16, 
                        SBRS,   16, 
                        SBAC,   16, 
                        SBVO,   16, 
                        SBAF,   16, 
                        SBBS,   16
                    }

                    Field (ECOR, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0xA0), 
                        SBBM,   16, 
                        SBMD,   16, 
                        SBCC,   16
                    }

                    Field (ECOR, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0xA0), 
                        SBDC,   16, 
                        SBDV,   16, 
                        SBOM,   16, 
                        SBSI,   16, 
                        SBDT,   16, 
                        SBSN,   16
                    }

                    Field (ECOR, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0xA0), 
                        SBCH,   32
                    }

                    Field (ECOR, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0xA0), 
                        SBMN,   128
                    }

                    Field (ECOR, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0xA0), 
                        SBDN,   128
                    }

                    Mutex (BATM, 0x00)
                    Method (GBIF, 3, NotSerialized)
                    {
                        Acquire (BATM, 0xFFFF)
                        If (Arg2)
                        {
                            HIID = (Arg0 | 0x01)
                            Local7 = SBBM /* \_SB_.PCI0.LPC0.EC0_.SBBM */
                            Local7 >>= 0x0F
                            Arg1 [0x00] = (Local7 ^ 0x01)
                            HIID = Arg0
                            If (Local7)
                            {
                                Local1 = (SBFC * 0x0A)
                            }
                            Else
                            {
                                Local1 = SBFC /* \_SB_.PCI0.LPC0.EC0_.SBFC */
                            }

                            Arg1 [0x02] = Local1
                            HIID = (Arg0 | 0x02)
                            If (Local7)
                            {
                                Local0 = (SBDC * 0x0A)
                            }
                            Else
                            {
                                Local0 = SBDC /* \_SB_.PCI0.LPC0.EC0_.SBDC */
                            }

                            Arg1 [0x01] = Local0
                            Divide (Local1, 0x14, Local2, Arg1 [0x05])
                            If (Local7)
                            {
                                Arg1 [0x06] = 0xC8
                            }
                            ElseIf (SBDV)
                            {
                                Divide (0x00030D40, SBDV, Local2, Arg1 [0x06])
                            }
                            Else
                            {
                                Arg1 [0x06] = 0x00
                            }

                            Arg1 [0x04] = SBDV /* \_SB_.PCI0.LPC0.EC0_.SBDV */
                            Local0 = SBSN /* \_SB_.PCI0.LPC0.EC0_.SBSN */
                            Name (SERN, Buffer (0x06)
                            {
                                "     "
                            })
                            Local2 = 0x04
                            While (Local0)
                            {
                                Divide (Local0, 0x0A, Local1, Local0)
                                SERN [Local2] = (Local1 + 0x30)
                                Local2--
                            }

                            Arg1 [0x0A] = SERN /* \_SB_.PCI0.LPC0.EC0_.GBIF.SERN */
                            HIID = (Arg0 | 0x06)
                            Arg1 [0x09] = SBDN /* \_SB_.PCI0.LPC0.EC0_.SBDN */
                            HIID = (Arg0 | 0x04)
                            Name (BTYP, Buffer (0x05)
                            {
                                 0x00, 0x00, 0x00, 0x00, 0x00                     // .....
                            })
                            BTYP = SBCH /* \_SB_.PCI0.LPC0.EC0_.SBCH */
                            Arg1 [0x0B] = BTYP /* \_SB_.PCI0.LPC0.EC0_.GBIF.BTYP */
                            HIID = (Arg0 | 0x05)
                            Arg1 [0x0C] = SBMN /* \_SB_.PCI0.LPC0.EC0_.SBMN */
                        }
                        Else
                        {
                            Arg1 [0x01] = 0xFFFFFFFF
                            Arg1 [0x05] = 0x00
                            Arg1 [0x06] = 0x00
                            Arg1 [0x02] = 0xFFFFFFFF
                        }

                        Release (BATM)
                        Return (Arg1)
                    }

                    Method (GBIX, 3, NotSerialized)
                    {
                        Acquire (BATM, 0xFFFF)
                        If (Arg2)
                        {
                            HIID = (Arg0 | 0x01)
                            Local7 = SBCC /* \_SB_.PCI0.LPC0.EC0_.SBCC */
                            Arg1 [0x08] = Local7
                            Local7 = SBBM /* \_SB_.PCI0.LPC0.EC0_.SBBM */
                            Local7 >>= 0x0F
                            Arg1 [0x01] = (Local7 ^ 0x01)
                            HIID = Arg0
                            If (Local7)
                            {
                                Local1 = (SBFC * 0x0A)
                            }
                            Else
                            {
                                Local1 = SBFC /* \_SB_.PCI0.LPC0.EC0_.SBFC */
                            }

                            Arg1 [0x03] = Local1
                            HIID = (Arg0 | 0x02)
                            If (Local7)
                            {
                                Local0 = (SBDC * 0x0A)
                            }
                            Else
                            {
                                Local0 = SBDC /* \_SB_.PCI0.LPC0.EC0_.SBDC */
                            }

                            Arg1 [0x02] = Local0
                            Divide (Local1, 0x14, Local2, Arg1 [0x06])
                            If (Local7)
                            {
                                Arg1 [0x07] = 0xC8
                            }
                            ElseIf (SBDV)
                            {
                                Divide (0x00030D40, SBDV, Local2, Arg1 [0x07])
                            }
                            Else
                            {
                                Arg1 [0x07] = 0x00
                            }

                            Arg1 [0x05] = SBDV /* \_SB_.PCI0.LPC0.EC0_.SBDV */
                            Local0 = SBSN /* \_SB_.PCI0.LPC0.EC0_.SBSN */
                            Name (SERN, Buffer (0x06)
                            {
                                "     "
                            })
                            Local2 = 0x04
                            While (Local0)
                            {
                                Divide (Local0, 0x0A, Local1, Local0)
                                SERN [Local2] = (Local1 + 0x30)
                                Local2--
                            }

                            Arg1 [0x11] = SERN /* \_SB_.PCI0.LPC0.EC0_.GBIX.SERN */
                            HIID = (Arg0 | 0x06)
                            Arg1 [0x10] = SBDN /* \_SB_.PCI0.LPC0.EC0_.SBDN */
                            HIID = (Arg0 | 0x04)
                            Name (BTYP, Buffer (0x05)
                            {
                                 0x00, 0x00, 0x00, 0x00, 0x00                     // .....
                            })
                            BTYP = SBCH /* \_SB_.PCI0.LPC0.EC0_.SBCH */
                            Arg1 [0x12] = BTYP /* \_SB_.PCI0.LPC0.EC0_.GBIX.BTYP */
                            HIID = (Arg0 | 0x05)
                            Arg1 [0x13] = SBMN /* \_SB_.PCI0.LPC0.EC0_.SBMN */
                        }
                        Else
                        {
                            Arg1 [0x02] = 0xFFFFFFFF
                            Arg1 [0x06] = 0x00
                            Arg1 [0x07] = 0x00
                            Arg1 [0x03] = 0xFFFFFFFF
                        }

                        Release (BATM)
                        Return (Arg1)
                    }

                    Method (GBST, 4, NotSerialized)
                    {
                        Acquire (BATM, 0xFFFF)
                        If ((Arg1 & 0x20))
                        {
                            Local0 = 0x02
                        }
                        ElseIf ((Arg1 & 0x40))
                        {
                            Local0 = 0x01
                        }
                        Else
                        {
                            Local0 = 0x00
                        }

                        If ((Arg1 & 0x07)) {}
                        Else
                        {
                            Local0 |= 0x04
                        }

                        If (((Arg1 & 0x07) == 0x07))
                        {
                            Local0 = 0x04
                            Local1 = 0x00
                            Local2 = 0x00
                            Local3 = 0x00
                        }
                        Else
                        {
                            HIID = Arg0
                            Local3 = SBVO /* \_SB_.PCI0.LPC0.EC0_.SBVO */
                            If (Arg2)
                            {
                                Local2 = (SBRC * 0x0A)
                            }
                            Else
                            {
                                Local2 = SBRC /* \_SB_.PCI0.LPC0.EC0_.SBRC */
                            }

                            Local1 = SBAC /* \_SB_.PCI0.LPC0.EC0_.SBAC */
                            If ((Local1 >= 0x8000))
                            {
                                If ((Local0 & 0x01))
                                {
                                    Local1 = (0x00010000 - Local1)
                                }
                                Else
                                {
                                    Local1 = 0x00
                                }
                            }
                            ElseIf (!(Local0 & 0x02))
                            {
                                Local1 = 0x00
                            }

                            If (Arg2)
                            {
                                Local1 *= Local3
                                Divide (Local1, 0x03E8, Local7, Local1)
                            }
                        }

                        Arg3 [0x00] = Local0
                        Arg3 [0x01] = Local1
                        Arg3 [0x02] = Local2
                        Arg3 [0x03] = Local3
                        Release (BATM)
                        Return (Arg3)
                    }

                    Method (AJTP, 3, NotSerialized)
                    {
                        Local0 = Arg1
                        Acquire (BATM, 0xFFFF)
                        HIID = Arg0
                        Local1 = SBRC /* \_SB_.PCI0.LPC0.EC0_.SBRC */
                        Release (BATM)
                        If ((Arg0 == 0x00))
                        {
                            Local2 = HB0S /* \_SB_.PCI0.LPC0.EC0_.HB0S */
                        }
                        Else
                        {
                            Local2 = HB1S /* \_SB_.PCI0.LPC0.EC0_.HB1S */
                        }

                        If ((Local2 & 0x20))
                        {
                            If ((Arg2 > 0x00))
                            {
                                Local0 += 0x01
                            }

                            If ((Local0 <= Local1))
                            {
                                Local0 = (Local1 + 0x01)
                            }
                        }
                        ElseIf ((Local2 & 0x40))
                        {
                            If ((Local0 >= Local1))
                            {
                                Local0 = (Local1 - 0x01)
                            }
                        }

                        Return (Local0)
                    }

                    Device (BAT0)
                    {
                        Name (_HID, EisaId ("PNP0C0A") /* Control Method Battery */)  // _HID: Hardware ID
                        Name (_UID, 0x00)  // _UID: Unique ID
                        Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
                        {
                            _SB
                        })
                        Name (B0ST, 0x00)
                        Name (BT0I, Package (0x0D)
                        {
                            0x00, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0x01, 
                            0x2A30, 
                            0x00, 
                            0x00, 
                            0x01, 
                            0x01, 
                            "", 
                            "", 
                            "", 
                            ""
                        })
                        Name (BX0I, Package (0x15)
                        {
                            0x01, 
                            0x00, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0x01, 
                            0xFFFFFFFF, 
                            0x00, 
                            0x00, 
                            0xFFFFFFFF, 
                            0x00017318, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0x03E8, 
                            0x01F4, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            "", 
                            "", 
                            "", 
                            "", 
                            0x00
                        })
                        Name (BT0P, Package (0x04) {})
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If (H8DR)
                            {
                                B0ST = HB0A /* \_SB_.PCI0.LPC0.EC0_.HB0A */
                            }
                            ElseIf ((RBEC (0x38) & 0x80))
                            {
                                B0ST = 0x01
                            }
                            Else
                            {
                                B0ST = 0x00
                            }

                            If (B0ST)
                            {
                                Return (0x1F)
                            }
                            Else
                            {
                                Return (0x0F)
                            }
                        }

                        Method (_BIF, 0, NotSerialized)  // _BIF: Battery Information
                        {
                            Local7 = 0x00
                            Local6 = 0x0A
                            While ((!Local7 && Local6))
                            {
                                If (HB0A)
                                {
                                    If (((HB0S & 0x07) == 0x07))
                                    {
                                        Sleep (0x03E8)
                                        Local6--
                                    }
                                    Else
                                    {
                                        Local7 = 0x01
                                    }
                                }
                                Else
                                {
                                    Local6 = 0x00
                                }
                            }

                            GBIX (0x00, BX0I, Local7)
                            BT0I [0x00] = DerefOf (BX0I [0x01])
                            BT0I [0x01] = DerefOf (BX0I [0x02])
                            BT0I [0x02] = DerefOf (BX0I [0x03])
                            BT0I [0x03] = DerefOf (BX0I [0x04])
                            BT0I [0x04] = DerefOf (BX0I [0x05])
                            BT0I [0x05] = DerefOf (BX0I [0x06])
                            BT0I [0x06] = DerefOf (BX0I [0x07])
                            BT0I [0x07] = DerefOf (BX0I [0x0E])
                            BT0I [0x08] = DerefOf (BX0I [0x0F])
                            BT0I [0x09] = DerefOf (BX0I [0x10])
                            BT0I [0x0A] = DerefOf (BX0I [0x11])
                            BT0I [0x0B] = DerefOf (BX0I [0x12])
                            BT0I [0x0C] = DerefOf (BX0I [0x13])
                            Return (BT0I) /* \_SB_.PCI0.LPC0.EC0_.BAT0.BT0I */
                        }

                        Method (_BIX, 0, NotSerialized)  // _BIX: Battery Information Extended
                        {
                            Local7 = 0x00
                            Local6 = 0x0A
                            While ((!Local7 && Local6))
                            {
                                If (HB0A)
                                {
                                    If (((HB0S & 0x07) == 0x07))
                                    {
                                        Sleep (0x03E8)
                                        Local6--
                                    }
                                    Else
                                    {
                                        Local7 = 0x01
                                    }
                                }
                                Else
                                {
                                    Local6 = 0x00
                                }
                            }

                            Return (GBIX (0x00, BX0I, Local7))
                        }

                        Method (_BST, 0, NotSerialized)  // _BST: Battery Status
                        {
                            Local0 = (DerefOf (BX0I [0x01]) ^ 0x01)
                            Return (GBST (0x00, HB0S, Local0, BT0P))
                        }
                    }

                    Device (AC)
                    {
                        Name (_HID, "ACPI0003" /* Power Source Device */)  // _HID: Hardware ID
                        Name (_UID, 0x00)  // _UID: Unique ID
                        Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
                        {
                            _SB
                        })
                        Name (XX00, Buffer (0x03) {})
                        Name (ACDC, 0xFF)
                        Method (_PSR, 0, NotSerialized)  // _PSR: Power Source
                        {
                            If (H8DR)
                            {
                                Local0 = HPAC /* \_SB_.PCI0.LPC0.EC0_.HPAC */
                            }
                            ElseIf ((RBEC (0x46) & 0x10))
                            {
                                Local0 = 0x01
                            }
                            Else
                            {
                                Local0 = 0x00
                            }

                            If (((Local0 != ACDC) || (ACDC == 0xFF)))
                            {
                                CreateWordField (XX00, 0x00, SSZE)
                                CreateByteField (XX00, 0x02, ACST)
                                SSZE = 0x03
                                ACDC = Local0
                                If (ACDC)
                                {
                                    AFN4 (0x01)
                                    ACST = 0x00
                                }
                                Else
                                {
                                    AFN4 (0x02)
                                    ACST = 0x01
                                }

                                ALIB (0x01, XX00)
                            }

                            Return (Local0)
                        }

                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }
                    }

                    Device (HKEY)
                    {
                        Name (_HID, EisaId ("LEN0268"))  // _HID: Hardware ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Method (_INI, 0, NotSerialized)  // _INI: Initialize
                        {
                            DYTC (0x000F0001)
                        }

                        Method (MHKV, 0, NotSerialized)
                        {
                            Return (0x0200)
                        }

                        Name (DHKC, 0x00)
                        Name (DHKB, 0x01)
                        Name (DHKH, 0x00)
                        Name (DHKW, 0x00)
                        Name (DHKS, 0x00)
                        Name (DHKD, 0x00)
                        Name (DHKN, 0x0808)
                        Name (DHKE, 0x00)
                        Name (DHKF, 0x001F0000)
                        Name (DHKT, 0x00)
                        Name (DHWW, 0x00)
                        Mutex (XDHK, 0x00)
                        Method (MHKA, 1, NotSerialized)
                        {
                            If ((Arg0 == 0x00))
                            {
                                Return (0x03)
                            }
                            ElseIf ((Arg0 == 0x01))
                            {
                                Return (0xFFFFFFFB)
                            }
                            ElseIf ((Arg0 == 0x02))
                            {
                                Return (0x00)
                            }
                            ElseIf ((Arg0 == 0x03))
                            {
                                Return (0x001F0000)
                            }
                            Else
                            {
                                Return (0x00)
                            }
                        }

                        Method (MHKN, 1, NotSerialized)
                        {
                            If ((Arg0 == 0x00))
                            {
                                Return (0x03)
                            }
                            ElseIf ((Arg0 == 0x01))
                            {
                                Return (DHKN) /* \_SB_.PCI0.LPC0.EC0_.HKEY.DHKN */
                            }
                            ElseIf ((Arg0 == 0x02))
                            {
                                Return (DHKE) /* \_SB_.PCI0.LPC0.EC0_.HKEY.DHKE */
                            }
                            ElseIf ((Arg0 == 0x03))
                            {
                                Return (DHKF) /* \_SB_.PCI0.LPC0.EC0_.HKEY.DHKF */
                            }
                            Else
                            {
                                Return (0x00)
                            }
                        }

                        Method (MHKK, 2, NotSerialized)
                        {
                            If ((Arg0 == 0x00))
                            {
                                Return (0x03)
                            }
                            ElseIf (DHKC)
                            {
                                If ((Arg0 == 0x01))
                                {
                                    Return ((DHKN & Arg1))
                                }
                                ElseIf ((Arg0 == 0x02))
                                {
                                    Return ((DHKE & Arg1))
                                }
                                ElseIf ((Arg0 == 0x03))
                                {
                                    Return ((DHKF & Arg1))
                                }
                                Else
                                {
                                    Return (0x00)
                                }
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Method (MHKM, 2, NotSerialized)
                        {
                            Acquire (XDHK, 0xFFFF)
                            If ((Arg0 > 0x60))
                            {
                                Noop
                            }
                            ElseIf ((Arg0 <= 0x20))
                            {
                                Local0 = (One << Arg0--)
                                If ((Local0 & 0xFFFFFFFB))
                                {
                                    If (Arg1)
                                    {
                                        DHKN |= Local0 /* \_SB_.PCI0.LPC0.EC0_.HKEY.DHKN */
                                    }
                                    Else
                                    {
                                        DHKN &= (Local0 ^ 0xFFFFFFFF)
                                    }
                                }
                                Else
                                {
                                    Noop
                                }
                            }
                            ElseIf ((Arg0 <= 0x40))
                            {
                                Noop
                            }
                            ElseIf ((Arg0 <= 0x60))
                            {
                                Arg0 -= 0x40
                                Local0 = (One << Arg0--)
                                If ((Local0 & 0x001F0000))
                                {
                                    If (Arg1)
                                    {
                                        DHKF |= Local0 /* \_SB_.PCI0.LPC0.EC0_.HKEY.DHKF */
                                    }
                                    Else
                                    {
                                        DHKF &= (Local0 ^ 0xFFFFFFFF)
                                    }
                                }
                                Else
                                {
                                    Noop
                                }
                            }

                            Release (XDHK)
                        }

                        Method (MHKS, 0, NotSerialized)
                        {
                            Notify (SLPB, 0x80) // Status Change
                        }

                        Method (MHKC, 1, NotSerialized)
                        {
                            DHKC = Arg0
                        }

                        Method (MHKP, 0, NotSerialized)
                        {
                            Acquire (XDHK, 0xFFFF)
                            If (DHWW)
                            {
                                Local1 = DHWW /* \_SB_.PCI0.LPC0.EC0_.HKEY.DHWW */
                                DHWW = Zero
                            }
                            ElseIf (DHKW)
                            {
                                Local1 = DHKW /* \_SB_.PCI0.LPC0.EC0_.HKEY.DHKW */
                                DHKW = Zero
                            }
                            ElseIf (DHKD)
                            {
                                Local1 = DHKD /* \_SB_.PCI0.LPC0.EC0_.HKEY.DHKD */
                                DHKD = Zero
                            }
                            ElseIf (DHKS)
                            {
                                Local1 = DHKS /* \_SB_.PCI0.LPC0.EC0_.HKEY.DHKS */
                                DHKS = Zero
                            }
                            ElseIf (DHKT)
                            {
                                Local1 = DHKT /* \_SB_.PCI0.LPC0.EC0_.HKEY.DHKT */
                                DHKT = Zero
                            }
                            Else
                            {
                                Local1 = DHKH /* \_SB_.PCI0.LPC0.EC0_.HKEY.DHKH */
                                DHKH = Zero
                            }

                            Release (XDHK)
                            Return (Local1)
                        }

                        Method (MHKE, 1, Serialized)
                        {
                            DHKB = Arg0
                            Acquire (XDHK, 0xFFFF)
                            DHKH = Zero
                            DHKW = Zero
                            DHKS = Zero
                            DHKD = Zero
                            DHKT = Zero
                            DHWW = Zero
                            Release (XDHK)
                        }

                        Method (MHKQ, 1, Serialized)
                        {
                            If (DHKB)
                            {
                                If (DHKC)
                                {
                                    Acquire (XDHK, 0xFFFF)
                                    If ((Arg0 < 0x1000)) {}
                                    ElseIf ((Arg0 < 0x2000))
                                    {
                                        DHKH = Arg0
                                    }
                                    ElseIf ((Arg0 < 0x3000))
                                    {
                                        DHKW = Arg0
                                    }
                                    ElseIf ((Arg0 < 0x4000))
                                    {
                                        DHKS = Arg0
                                    }
                                    ElseIf ((Arg0 < 0x5000))
                                    {
                                        DHKD = Arg0
                                    }
                                    ElseIf ((Arg0 < 0x6000))
                                    {
                                        DHKH = Arg0
                                    }
                                    ElseIf ((Arg0 < 0x7000))
                                    {
                                        DHKT = Arg0
                                    }
                                    ElseIf ((Arg0 < 0x8000))
                                    {
                                        DHWW = Arg0
                                    }
                                    Else
                                    {
                                    }

                                    Release (XDHK)
                                    Notify (HKEY, 0x80) // Status Change
                                }
                                ElseIf ((Arg0 == 0x1004))
                                {
                                    Notify (SLPB, 0x80) // Status Change
                                }
                            }
                        }

                        Method (MHKB, 1, NotSerialized)
                        {
                            If ((Arg0 == 0x00))
                            {
                                BEEP (0x11)
                                LIDB = 0x00
                            }
                            ElseIf ((Arg0 == 0x01))
                            {
                                BEEP (0x10)
                                LIDB = 0x01
                            }
                            Else
                            {
                            }
                        }

                        Method (MHKD, 0, NotSerialized)
                        {
                            If ((PLUX == 0x00)) {}
                        }

                        Method (MHQC, 1, NotSerialized)
                        {
                            If (WNTF)
                            {
                                If ((Arg0 == 0x00))
                                {
                                    Return (CWAC) /* \CWAC */
                                }
                                ElseIf ((Arg0 == 0x01))
                                {
                                    Return (CWAP) /* \CWAP */
                                }
                                ElseIf ((Arg0 == 0x02))
                                {
                                    Return (CWAT) /* \CWAT */
                                }
                                Else
                                {
                                    Noop
                                }
                            }
                            Else
                            {
                                Noop
                            }

                            Return (0x00)
                        }

                        Method (MHGC, 0, NotSerialized)
                        {
                            If (WNTF)
                            {
                                Acquire (XDHK, 0xFFFF)
                                If (CKC4 (0x00))
                                {
                                    Local0 = 0x03
                                }
                                Else
                                {
                                    Local0 = 0x04
                                }

                                Release (XDHK)
                                Return (Local0)
                            }
                            Else
                            {
                                Noop
                            }

                            Return (0x00)
                        }

                        Method (MHSC, 1, NotSerialized)
                        {
                        }

                        Method (CKC4, 1, NotSerialized)
                        {
                            Local0 = 0x00
                            If (C4WR)
                            {
                                If (!C4AC)
                                {
                                    Local0 |= 0x01
                                }
                            }

                            If (C4NA)
                            {
                                Local0 |= 0x02
                            }

                            If ((CWAC && CWAS))
                            {
                                Local0 |= 0x04
                            }

                            Local0 &= ~Arg0
                            Return (Local0)
                        }

                        Method (MHQE, 0, NotSerialized)
                        {
                            Return (0x00)
                        }

                        Method (MHGE, 0, NotSerialized)
                        {
                            If ((C4WR && C4AC))
                            {
                                Return (0x04)
                            }

                            Return (0x03)
                        }

                        Method (MHSE, 1, NotSerialized)
                        {
                        }

                        Method (UAWO, 1, NotSerialized)
                        {
                            Return (UAWS (Arg0))
                        }

                        Method (MLCG, 1, NotSerialized)
                        {
                            Local0 = KBLS (0x00, 0x00)
                            Return (Local0)
                        }

                        Method (MLCS, 1, NotSerialized)
                        {
                            Local0 = KBLS (0x01, Arg0)
                            If (!(Local0 & 0x80000000))
                            {
                                If ((Arg0 & 0x00010000))
                                {
                                    MHKQ (0x6001)
                                }
                                ElseIf (MHKK (0x01, 0x00020000))
                                {
                                    MHKQ (0x1012)
                                }
                            }

                            Return (Local0)
                        }

                        Method (DSSG, 1, NotSerialized)
                        {
                            Local0 = (0x0400 | PDCI) /* \PDCI */
                            Return (Local0)
                        }

                        Method (DSSS, 1, NotSerialized)
                        {
                            PDCI |= Arg0
                        }

                        Method (SBSG, 1, NotSerialized)
                        {
                            Return (SYBC (0x00, 0x00))
                        }

                        Method (SBSS, 1, NotSerialized)
                        {
                            Return (SYBC (0x01, Arg0))
                        }

                        Method (PBLG, 1, NotSerialized)
                        {
                            Local0 = BRLV /* \BRLV */
                            Local1 = (Local0 | 0x0F00)
                            Return (Local1)
                        }

                        Method (PBLS, 1, NotSerialized)
                        {
                            BRLV = Arg0
                            If (VIGD) {}
                            Else
                            {
                                VBRC (BRLV)
                            }

                            If (!NBCF)
                            {
                                MHKQ (0x6050)
                            }

                            Return (0x00)
                        }

                        Method (PMSG, 1, NotSerialized)
                        {
                            Local0 = PRSM (0x00, 0x00)
                            Return (Local0)
                        }

                        Method (PMSS, 1, NotSerialized)
                        {
                            PRSM (0x01, Arg0)
                            Return (0x00)
                        }

                        Method (ISSG, 1, NotSerialized)
                        {
                            Local0 = ISSP /* \ISSP */
                            If (ISSP)
                            {
                                Local0 |= 0x01000000
                                Local0 |= (ISFS << 0x19)
                            }

                            Local0 |= (ISCG & 0x30)
                            Return (Local0)
                        }

                        Method (ISSS, 1, NotSerialized)
                        {
                            ISCG = Arg0
                            Return (0x00)
                        }

                        Method (FFSG, 1, NotSerialized)
                        {
                            Return (0x00)
                        }

                        Method (FFSS, 1, NotSerialized)
                        {
                            Return (0x80000000)
                        }

                        Method (GMKS, 0, NotSerialized)
                        {
                            If (HFNE) {}
                            ElseIf ((0x01 & FNKC))
                            {
                                WFIO (0x15, 0x00)
                            }
                            Else
                            {
                                WFIO (0x15, 0x01)
                            }

                            Return (FNSC (0x02, 0x00))
                        }

                        Method (SMKS, 1, NotSerialized)
                        {
                            If (HFNE) {}
                            ElseIf ((Arg0 & 0x01))
                            {
                                WFIO (0x15, 0x00)
                            }
                            Else
                            {
                                WFIO (0x15, 0x01)
                            }

                            Local0 = FNSC (0x03, (Arg0 & 0x00010001))
                            MHKQ (0x6060)
                            Return (Local0)
                        }

                        Method (GSKL, 1, NotSerialized)
                        {
                            Return (FNSC (0x04, (Arg0 & 0x0F000000)))
                        }

                        Method (SSKL, 1, NotSerialized)
                        {
                            Return (FNSC (0x05, (Arg0 & 0x0F00FFFF)))
                        }

                        Method (INSG, 1, NotSerialized)
                        {
                            Local0 = IOEN /* \IOEN */
                            Local0 |= (IOST << 0x07)
                            Local0 |= (IOCP << 0x08)
                            Local0 |= 0x10000000
                            Return (Local0)
                        }

                        Method (INSS, 1, NotSerialized)
                        {
                            If ((Arg0 & 0x10000000))
                            {
                                If (IOCP)
                                {
                                    Local0 = ((Arg0 & 0x80) >> 0x07)
                                    If (!EZRC (Local0))
                                    {
                                        IOST = Local0
                                    }
                                }

                                Return (0x00)
                            }

                            If ((IOCP && (Arg0 & 0x01)))
                            {
                                IOEN = 0x01
                            }
                            Else
                            {
                                IOEN = 0x00
                                If (IOST)
                                {
                                    If (!ISOC (0x00))
                                    {
                                        IOST = 0x00
                                    }
                                }
                            }

                            Return (0x00)
                        }
                    }

                    Scope (HKEY)
                    {
                        Name (INDV, 0x00)
                        Method (MHQI, 0, NotSerialized)
                        {
                            Return (0x00)
                        }

                        Method (MHGI, 1, NotSerialized)
                        {
                            Name (RETB, Buffer (0x10) {})
                            CreateByteField (RETB, 0x00, MHGS)
                            Local0 = (0x01 << Arg0)
                            If ((INDV & Local0))
                            {
                                If ((Arg0 == 0x00))
                                {
                                    CreateField (RETB, 0x08, 0x78, BRBU)
                                    BRBU = IPMB /* \IPMB */
                                    MHGS = 0x10
                                }
                                ElseIf ((Arg0 == 0x01))
                                {
                                    CreateField (RETB, 0x08, 0x18, RRBU)
                                    RRBU = IPMR /* \IPMR */
                                    MHGS = 0x04
                                }
                                ElseIf ((Arg0 == 0x08))
                                {
                                    CreateField (RETB, 0x10, 0x18, ODBU)
                                    CreateByteField (RETB, 0x01, MHGZ)
                                    ODBU = IPMO /* \IPMO */
                                    MHGS = 0x05
                                }
                                ElseIf ((Arg0 == 0x09))
                                {
                                    CreateField (RETB, 0x10, 0x08, AUBU)
                                    AUBU = IPMA /* \IPMA */
                                    RETB [0x01] = 0x01
                                    MHGS = 0x03
                                }
                                ElseIf ((Arg0 == 0x02))
                                {
                                    Local1 = VDYN (0x00, 0x00)
                                    RETB [0x02] = (Local1 & 0x0F)
                                    Local1 >>= 0x04
                                    RETB [0x01] = (Local1 & 0x0F)
                                    MHGS = 0x03
                                }
                            }

                            Return (RETB) /* \_SB_.PCI0.LPC0.EC0_.HKEY.MHGI.RETB */
                        }

                        Method (MHSI, 2, NotSerialized)
                        {
                            Local0 = (0x01 << Arg0)
                            If ((INDV & Local0))
                            {
                                If ((Arg0 == 0x08))
                                {
                                    If (Arg1)
                                    {
                                        If (H8DR)
                                        {
                                            Local1 = HPBU /* \_SB_.PCI0.LPC0.EC0_.HPBU */
                                        }
                                        Else
                                        {
                                            Local1 = (RBEC (0x47) & 0x01)
                                        }
                                    }
                                }
                                ElseIf ((Arg0 == 0x02))
                                {
                                    VDYN (0x01, Arg1)
                                }
                            }
                        }
                    }

                    Scope (\_SB.PCI0.LPC0.EC0)
                    {
                        Method (_Q6A, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                        {
                            If (HDMC)
                            {
                                Noop
                            }
                            ElseIf (^HKEY.MHKK (0x01, 0x04000000))
                            {
                                ^HKEY.MHKQ (0x101B)
                            }
                        }
                    }

                    Scope (HKEY)
                    {
                        Method (MMTG, 0, NotSerialized)
                        {
                            Local0 = 0x0101
                            If (HDMC)
                            {
                                Local0 |= 0x00010000
                            }

                            Return (Local0)
                        }

                        Method (MMTS, 1, NotSerialized)
                        {
                            If (HDMC)
                            {
                                Noop
                            }
                            ElseIf ((Arg0 == 0x02))
                            {
                                WFIO (0x8E, 0x00)
                            }
                            ElseIf ((Arg0 == 0x03)) {}
                            Else
                            {
                                WFIO (0x8E, 0x01)
                            }
                        }
                    }

                    Scope (HKEY)
                    {
                        Method (PWMC, 0, NotSerialized)
                        {
                            Return (0x00)
                        }

                        Method (PWMG, 0, NotSerialized)
                        {
                            Local0 = PWMH /* \_SB_.PCI0.LPC0.EC0_.PWMH */
                            Local0 <<= 0x08
                            Local0 |= PWML /* \_SB_.PCI0.LPC0.EC0_.PWML */
                            Return (Local0)
                        }
                    }

                    Scope (\_SB.PCI0.LPC0.EC0)
                    {
                        Method (_Q3F, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                        {
                            ^HKEY.MHKQ (0x6000)
                            If (NULS)
                            {
                                WFIO (0x59, 0x00)
                            }
                            Else
                            {
                                WFIO (0x59, 0x01)
                            }
                        }

                        Method (_Q74, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                        {
                            ^HKEY.MHKQ (0x6060)
                        }
                    }

                    Scope (HKEY)
                    {
                    }

                    Scope (\_SB.PCI0.LPC0.EC0)
                    {
                        Name (BTBF, Buffer (0x0100)
                        {
                             0x00                                             // .
                        })
                        OperationRegion (MMEC, SystemMemory, 0xFE000E00, 0x0200)
                        Field (MMEC, AnyAcc, Lock, Preserve)
                        {
                            TWBT,   2048, 
                            T2BT,   2048
                        }

                        Method (BTIF, 0, NotSerialized)
                        {
                            BTBF = TWBT /* \_SB_.PCI0.LPC0.EC0_.TWBT */
                            Return (BTBF) /* \_SB_.PCI0.LPC0.EC0_.BTBF */
                        }
                    }

                    Scope (HKEY)
                    {
                        Method (SBIG, 1, NotSerialized)
                        {
                            Return (BTIF ())
                        }
                    }

                    OperationRegion (ECMM, SystemMemory, 0xFE000000, 0x1000)
                    Field (ECMM, AnyAcc, Lock, Preserve)
                    {
                        Offset (0x1BF), 
                            ,   7, 
                        ACOS,   1, 
                        Offset (0x1E6), 
                        PCVL,   8, 
                        Offset (0x204), 
                            ,   5, 
                        ADSL,   1, 
                        Offset (0x2D4), 
                        TPET,   8, 
                        Offset (0x2D9), 
                        S3ST,   1, 
                        S3RM,   1, 
                        S4ST,   1, 
                        S4RM,   1, 
                        S5ST,   1, 
                        S5RM,   1, 
                        Offset (0x2DA), 
                        Offset (0x2DC), 
                        NPST,   5, 
                        Offset (0x2E4), 
                        CPUJ,   3, 
                        CPNM,   3, 
                        GATY,   2, 
                        Offset (0x2F6), 
                        SDID,   8, 
                        SDDD,   8, 
                        Offset (0x35F), 
                        DGFQ,   8, 
                        Offset (0x37C), 
                            ,   1, 
                        ASBF,   1, 
                        Offset (0x3EA), 
                        OSML,   8, 
                        OSMH,   8, 
                        Offset (0x3F9), 
                        BDID,   8, 
                        Offset (0x48B), 
                        CPID,   8, 
                        Offset (0x4A0), 
                        AATL,   1, 
                        AACL,   1, 
                        AAST,   1, 
                        AARW,   1, 
                        AAEN,   1, 
                        AAEW,   1, 
                        Offset (0x4A7), 
                        OSTT,   8, 
                        OSST,   8, 
                        THLT,   8, 
                        TCNL,   8, 
                        MODE,   1, 
                            ,   2, 
                        INIT,   1, 
                        FAN1,   1, 
                        FAN2,   1, 
                        FANT,   1, 
                        SKNM,   1, 
                        SDTM,   8, 
                        FSSN,   4, 
                        FANU,   4, 
                            ,   6, 
                        SWTO,   1, 
                        TTHR,   1, 
                        TTHM,   1, 
                        THTL,   1, 
                            ,   2, 
                        Offset (0x4B0), 
                        CTMP,   8, 
                        CTML,   8, 
                        SKTA,   8, 
                        SKTB,   8, 
                        SKTC,   8, 
                        Offset (0x4B6), 
                        NTMP,   8, 
                        Offset (0x4B8), 
                        Offset (0x5AF), 
                            ,   6, 
                        LGBF,   1, 
                        BTLF,   1
                    }
                }
            }
        }

        Method (SDRT, 0, NotSerialized)
        {
            ^PCI0.SDIO.WLAN._INI ()
        }

        Device (LID)
        {
            Name (_HID, EisaId ("PNP0C0D") /* Lid Device */)  // _HID: Hardware ID
            Method (_LID, 0, NotSerialized)  // _LID: Lid Status
            {
                If (H8DR)
                {
                    Return (^^PCI0.LPC0.EC0.HPLD) /* \_SB_.PCI0.LPC0.EC0_.HPLD */
                }
                ElseIf ((RBEC (0x46) & 0x04))
                {
                    Return (0x01)
                }
                Else
                {
                    Return (0x00)
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (LWCP)
                {
                    Return (Package (0x02)
                    {
                        0x08, 
                        0x04
                    })
                }
                Else
                {
                    Return (Package (0x02)
                    {
                        0x08, 
                        0x03
                    })
                }
            }

            Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
            {
                If (H8DR)
                {
                    If (Arg0)
                    {
                        ^^PCI0.LPC0.EC0.HWLO = 0x01
                    }
                    Else
                    {
                        ^^PCI0.LPC0.EC0.HWLO = 0x00
                    }
                }
                ElseIf (Arg0)
                {
                    MBEC (0x32, 0xFF, 0x04)
                }
                Else
                {
                    MBEC (0x32, 0xFB, 0x00)
                }

                If (LWCP)
                {
                    If (Arg0)
                    {
                        LWEN = 0x01
                    }
                    Else
                    {
                        LWEN = 0x00
                    }
                }
            }
        }

        Device (SLPB)
        {
            Name (_HID, EisaId ("PNP0C0E") /* Sleep Button Device */)  // _HID: Hardware ID
            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (Package (0x02)
                {
                    0x08, 
                    0x03
                })
            }

            Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
            {
                If (H8DR)
                {
                    If (Arg0)
                    {
                        ^^PCI0.LPC0.EC0.HWFN = 0x01
                    }
                    Else
                    {
                        ^^PCI0.LPC0.EC0.HWFN = 0x00
                    }
                }
                ElseIf (Arg0)
                {
                    MBEC (0x32, 0xFF, 0x10)
                }
                Else
                {
                    MBEC (0x32, 0xEF, 0x00)
                }
            }
        }

        Scope (PCI0.LPC0.EC0)
        {
            Method (_Q43, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                If ((^HKEY.DHKC == 0x00))
                {
                    HMUT = 0x00
                    WFIO (0x5A, 0x01)
                }

                SCMS (0x18)
            }

            Method (SAUM, 1, NotSerialized)
            {
                If ((Arg0 > 0x03))
                {
                    Noop
                }
                ElseIf (H8DR)
                {
                    HAUM = Arg0
                }
                Else
                {
                    MBEC (0x03, 0x9F, (Arg0 << 0x05))
                }
            }
        }

        Scope (PCI0.LPC0.EC0.HKEY)
        {
            Method (GSMS, 1, NotSerialized)
            {
                Return (AUDC (0x00, 0x00))
            }

            Method (SSMS, 1, NotSerialized)
            {
                If ((Arg0 == 0x00))
                {
                    WFIO (0x5A, 0x01)
                }
                Else
                {
                    WFIO (0x5A, 0x00)
                }

                Return (AUDC (0x01, (Arg0 & 0x01)))
            }

            Method (SHDA, 1, NotSerialized)
            {
                Return (AUDC (0x02, (Arg0 & 0x01)))
            }
        }

        Scope (PCI0.LPC0.EC0)
        {
            Name (BRTW, Package (0x12)
            {
                0x64, 
                0x64, 
                0x05, 
                0x0A, 
                0x14, 
                0x19, 
                0x1E, 
                0x23, 
                0x28, 
                0x2D, 
                0x32, 
                0x37, 
                0x3C, 
                0x41, 
                0x46, 
                0x50, 
                0x5A, 
                0x64
            })
            Name (BRTB, Package (0x04)
            {
                Package (0x16)
                {
                    0x14, 
                    0x04, 
                    0x04, 
                    0x07, 
                    0x09, 
                    0x0C, 
                    0x10, 
                    0x15, 
                    0x1C, 
                    0x25, 
                    0x32, 
                    0x40, 
                    0x50, 
                    0x64, 
                    0x82, 
                    0xA5, 
                    0xCD, 
                    0xFF, 
                    0xDC, 
                    0xDC, 
                    0x04, 
                    0x04
                }, 

                Package (0x16)
                {
                    0x19, 
                    0x03, 
                    0x03, 
                    0x06, 
                    0x0B, 
                    0x0F, 
                    0x17, 
                    0x21, 
                    0x2E, 
                    0x3A, 
                    0x43, 
                    0x50, 
                    0x5F, 
                    0x78, 
                    0x95, 
                    0xC1, 
                    0xDC, 
                    0xFF, 
                    0xDC, 
                    0xDC, 
                    0x03, 
                    0x03
                }, 

                Package (0x16)
                {
                    0x1E, 
                    0x03, 
                    0x03, 
                    0x05, 
                    0x08, 
                    0x0A, 
                    0x0D, 
                    0x0F, 
                    0x12, 
                    0x19, 
                    0x22, 
                    0x2E, 
                    0x3E, 
                    0x54, 
                    0x6E, 
                    0x93, 
                    0xC1, 
                    0xFF, 
                    0xDC, 
                    0xDC, 
                    0x03, 
                    0x03
                }, 

                Package (0x16)
                {
                    0x00, 
                    0x04, 
                    0x04, 
                    0x07, 
                    0x09, 
                    0x0C, 
                    0x10, 
                    0x15, 
                    0x1C, 
                    0x25, 
                    0x32, 
                    0x40, 
                    0x50, 
                    0x64, 
                    0x82, 
                    0xA5, 
                    0xCD, 
                    0xFF, 
                    0xDC, 
                    0xDC, 
                    0x04, 
                    0x04
                }
            })
            Method (_Q14, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                If (^HKEY.MHKK (0x01, 0x8000))
                {
                    ^HKEY.MHKQ (0x1010)
                }

                Notify (^^^GP17.VGA.LCD, 0x86) // Device-Specific
            }

            Method (_Q15, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                If (^HKEY.MHKK (0x01, 0x00010000))
                {
                    ^HKEY.MHKQ (0x1011)
                }

                Notify (^^^GP17.VGA.LCD, 0x87) // Device-Specific
            }

            Method (BFRQ, 0, NotSerialized)
            {
                Local0 = 0x80000100
                Local1 = DerefOf (DerefOf (BRTB [BNTN]) [0x13])
                Local0 |= (Local1 << 0x09)
                Local1 = DerefOf (DerefOf (BRTB [BNTN]) [0x15])
                Local0 |= Local1
                Return (Local0)
            }
        }

        Scope (PCI0.LPC0.EC0)
        {
            Method (_Q19, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                If (^HKEY.MHKK (0x01, 0x00800000))
                {
                    ^HKEY.MHKQ (0x1018)
                }

                SCMS (0x03)
            }
        }

        Scope (PCI0.LPC0.EC0)
        {
            Method (_Q63, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                If (^HKEY.MHKK (0x01, 0x00080000))
                {
                    ^HKEY.MHKQ (0x1014)
                }

                SCMS (0x0B)
            }
        }

        Scope (PCI0.LPC0.EC0)
        {
            Method (_Q70, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                FNST ()
            }

            Method (_Q72, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                FNST ()
            }

            Method (_Q73, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                FNST ()
            }

            Method (FNST, 0, NotSerialized)
            {
                If (H8DR)
                {
                    Local0 = HFNS /* \_SB_.PCI0.LPC0.EC0_.HFNS */
                    Local1 = HFNE /* \_SB_.PCI0.LPC0.EC0_.HFNE */
                }
                Else
                {
                    Local0 = (RBEC (0x0E) & 0x03)
                    Local1 = (RBEC (0x00) & 0x08)
                }

                If (Local1)
                {
                    If ((Local0 == 0x00))
                    {
                        WFIO (0x15, 0x01)
                        SCMS (0x11)
                    }

                    If ((Local0 == 0x01))
                    {
                        WFIO (0x15, 0x00)
                        SCMS (0x0F)
                    }

                    If ((Local0 == 0x02))
                    {
                        WFIO (0x15, 0x00)
                        SCMS (0x10)
                    }

                    ^HKEY.MHKQ (0x6005)
                }
            }
        }

        Scope (PCI0.LPC0.EC0.HKEY)
        {
            Method (GHSL, 1, NotSerialized)
            {
                Return (FNSC (0x00, 0x00))
            }

            Method (SHSL, 1, NotSerialized)
            {
                Return (FNSC (0x01, (Arg0 & 0x00010001)))
            }
        }

        Scope (PCI0.LPC0.EC0.HKEY)
        {
            Name (WGFL, 0x00)
            Method (WSIF, 0, NotSerialized)
            {
                Return (0x00)
            }

            Method (WLSW, 0, NotSerialized)
            {
                Return (0x10010001)
            }

            Method (GWAN, 0, NotSerialized)
            {
                Local0 = 0x00
                If ((WGFL & 0x01))
                {
                    Local0 |= 0x01
                }

                If ((WGFL & 0x08))
                {
                    Return (Local0)
                }

                If (WPWS ())
                {
                    Local0 |= 0x02
                }

                Local0 |= 0x04
                Return (Local0)
            }

            Method (SWAN, 1, NotSerialized)
            {
                If ((Arg0 & 0x02))
                {
                    WPWC (0x01)
                }
                Else
                {
                    WPWC (0x00)
                }
            }

            Method (GBDC, 0, NotSerialized)
            {
                Local0 = 0x00
                If ((WGFL & 0x10))
                {
                    Local0 |= 0x01
                }

                If ((WGFL & 0x80))
                {
                    Return (Local0)
                }

                If (BPWS ())
                {
                    Local0 |= 0x02
                }

                Local0 |= 0x04
                Return (Local0)
            }

            Method (SBDC, 1, NotSerialized)
            {
                If ((Arg0 & 0x02))
                {
                    BPWC (0x01)
                }
                Else
                {
                    BPWC (0x00)
                }
            }

            Method (WPWS, 0, NotSerialized)
            {
                If (H8DR)
                {
                    Local0 = DCWW /* \_SB_.PCI0.LPC0.EC0_.DCWW */
                }
                Else
                {
                    Local0 = ((RBEC (0x3A) & 0x40) >> 0x06)
                }

                Return (Local0)
            }

            Method (WPWC, 1, NotSerialized)
            {
                If ((Arg0 && ((WGFL & 0x01) && !(WGFL & 0x08
                    ))))
                {
                    If (H8DR)
                    {
                        DCWW = One
                    }
                    Else
                    {
                        MBEC (0x3A, 0xFF, 0x40)
                    }

                    WGFL |= 0x02
                }
                Else
                {
                    If (H8DR)
                    {
                        DCWW = Zero
                    }
                    Else
                    {
                        MBEC (0x3A, 0xBF, 0x00)
                    }

                    WGFL &= 0xFFFFFFFD
                }
            }

            Method (BPWS, 0, NotSerialized)
            {
                If (H8DR)
                {
                    Local0 = DCBD /* \_SB_.PCI0.LPC0.EC0_.DCBD */
                }
                Else
                {
                    Local0 = ((RBEC (0x3A) & 0x10) >> 0x04)
                }

                Return (Local0)
            }

            Method (BPWC, 1, NotSerialized)
            {
                If ((Arg0 && ((WGFL & 0x10) && !(WGFL & 0x80
                    ))))
                {
                    If (H8DR)
                    {
                        DCBD = One
                    }
                    Else
                    {
                        MBEC (0x3A, 0xFF, 0x10)
                    }

                    WGFL |= 0x20
                }
                Else
                {
                    If (H8DR)
                    {
                        DCBD = Zero
                    }
                    Else
                    {
                        MBEC (0x3A, 0xEF, 0x00)
                    }

                    WGFL &= 0xFFFFFFDF
                }
            }

            Method (WGIN, 0, NotSerialized)
            {
                WGFL = 0x00
                WGFL = WGSV (0x01)
                If (WIN8)
                {
                    If ((WGFL && 0x10))
                    {
                        BPWC (0x01)
                    }
                }

                If (WPWS ())
                {
                    WGFL |= 0x02
                }

                If (BPWS ())
                {
                    WGFL |= 0x20
                }
            }

            Method (WGPS, 1, NotSerialized)
            {
                If ((Arg0 >= 0x04))
                {
                    BLTH (0x05)
                }
            }

            Method (WGWK, 1, NotSerialized)
            {
                Noop
            }
        }

        Scope (PCI0.LPC0.EC0)
        {
            Method (_Q41, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                ^HKEY.MHKQ (0x7000)
            }
        }

        Device (WMI1)
        {
            Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, 0x01)  // _UID: Unique ID
            Name (_WDG, Buffer (0xB4)
            {
                /* 0000 */  0x0E, 0x23, 0xF5, 0x51, 0x77, 0x96, 0xCD, 0x46,  // .#.Qw..F
                /* 0008 */  0xA1, 0xCF, 0xC0, 0xB2, 0x3E, 0xE3, 0x4D, 0xB7,  // ....>.M.
                /* 0010 */  0x41, 0x30, 0x50, 0x05, 0x64, 0x9A, 0x47, 0x98,  // A0P.d.G.
                /* 0018 */  0xF5, 0x33, 0x33, 0x4E, 0xA7, 0x07, 0x8E, 0x25,  // .33N...%
                /* 0020 */  0x1E, 0xBB, 0xC3, 0xA1, 0x41, 0x31, 0x01, 0x06,  // ....A1..
                /* 0028 */  0xEF, 0x54, 0x4B, 0x6A, 0xED, 0xA5, 0x33, 0x4D,  // .TKj..3M
                /* 0030 */  0x94, 0x55, 0xB0, 0xD9, 0xB4, 0x8D, 0xF4, 0xB3,  // .U......
                /* 0038 */  0x41, 0x32, 0x01, 0x06, 0xB6, 0xEB, 0xF1, 0x74,  // A2.....t
                /* 0040 */  0x7A, 0x92, 0x7D, 0x4C, 0x95, 0xDF, 0x69, 0x8E,  // z.}L..i.
                /* 0048 */  0x21, 0xE8, 0x0E, 0xB5, 0x41, 0x33, 0x01, 0x06,  // !...A3..
                /* 0050 */  0xFF, 0x04, 0xEF, 0x7E, 0x28, 0x43, 0x7C, 0x44,  // ...~(C|D
                /* 0058 */  0xB5, 0xBB, 0xD4, 0x49, 0x92, 0x5D, 0x53, 0x8D,  // ...I.]S.
                /* 0060 */  0x41, 0x34, 0x01, 0x06, 0x9E, 0x15, 0xDB, 0x8A,  // A4......
                /* 0068 */  0x32, 0x1E, 0x5C, 0x45, 0xBC, 0x93, 0x30, 0x8A,  // 2.\E..0.
                /* 0070 */  0x7E, 0xD9, 0x82, 0x46, 0x41, 0x35, 0x01, 0x01,  // ~..FA5..
                /* 0078 */  0xFD, 0xD9, 0x51, 0x26, 0x1C, 0x91, 0x69, 0x4B,  // ..Q&..iK
                /* 0080 */  0xB9, 0x4E, 0xD0, 0xDE, 0xD5, 0x96, 0x3B, 0xD7,  // .N....;.
                /* 0088 */  0x41, 0x36, 0x01, 0x06, 0x1A, 0x65, 0x64, 0x73,  // A6...eds
                /* 0090 */  0x2F, 0x13, 0xE7, 0x4F, 0xAD, 0xAA, 0x40, 0xC6,  // /..O..@.
                /* 0098 */  0xC7, 0xEE, 0x2E, 0x3B, 0x41, 0x37, 0x01, 0x06,  // ...;A7..
                /* 00A0 */  0x21, 0x12, 0x90, 0x05, 0x66, 0xD5, 0xD1, 0x11,  // !...f...
                /* 00A8 */  0xB2, 0xF0, 0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10,  // ......).
                /* 00B0 */  0x42, 0x41, 0x01, 0x00                           // BA..
            })
            Name (RETN, Package (0x05)
            {
                "Success", 
                "Not Supported", 
                "Invalid Parameter", 
                "Access Denied", 
                "System Busy"
            })
            Name (ITEM, Package (0x6A)
            {
                Package (0x02)
                {
                    0x0E, 
                    "WakeOnLAN"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "EthernetLANOptionROM"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "USBBIOSSupport"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "AlwaysOnUSB"
                }, 

                Package (0x02)
                {
                    0x01, 
                    "TrackPoint"
                }, 

                Package (0x02)
                {
                    0x01, 
                    "TouchPad"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "FnSticky"
                }, 

                Package (0x02)
                {
                    0x04, 
                    "ThinkPadNumLock"
                }, 

                Package (0x02)
                {
                    0x0C, 
                    "PowerOnNumLock"
                }, 

                Package (0x02)
                {
                    0x05, 
                    "BootDisplayDevice"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "SpeedStep"
                }, 

                Package (0x02)
                {
                    0x09, 
                    "AdaptiveThermalManagementAC"
                }, 

                Package (0x02)
                {
                    0x09, 
                    "AdaptiveThermalManagementBattery"
                }, 

                Package (0x02)
                {
                    0x06, 
                    "CDROMSpeed"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "CPUPowerManagement"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "PowerControlBeep"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "LowBatteryAlarm"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "PasswordBeep"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "KeyboardBeep"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "ExtendedMemoryTest"
                }, 

                Package (0x02)
                {
                    0x07, 
                    "SATAControllerMode"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "CoreMultiProcessing"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "VirtualizationTechnology"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "LockBIOSSetting"
                }, 

                Package (0x02)
                {
                    0x0B, 
                    "MinimumPasswordLength"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "BIOSPasswordAtUnattendedBoot"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "FingerprintPredesktopAuthentication"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "Reserved"
                }, 

                Package (0x02)
                {
                    0x03, 
                    "FingerprintSecurityMode"
                }, 

                Package (0x02)
                {
                    0x02, 
                    "SecurityChip"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "BIOSUpdateByEndUsers"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "DataExecutionPrevention"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "EthernetLANAccess"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "WirelessLANAccess"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "WirelessWANAccess"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "BluetoothAccess"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "WirelessUSBAccess"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "ModemAccess"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "USBPortAccess"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "IEEE1394Access"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "ExpressCardAccess"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "PCIExpressSlotAccess"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "UltrabayAccess"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "MemoryCardSlotAccess"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "SmartCardSlotAccess"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "IntegratedCameraAccess"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "MicrophoneAccess"
                }, 

                Package (0x02)
                {
                    0x0A, 
                    "BootMode"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "StartupOptionKeys"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "BootDeviceListF12Option"
                }, 

                Package (0x02)
                {
                    0x64, 
                    "BootOrder"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "WiMAXAccess"
                }, 

                Package (0x02)
                {
                    0x0D, 
                    "GraphicsDevice"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "TXTFeature"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "VTdFeature"
                }, 

                Package (0x02)
                {
                    0x0F, 
                    "AMTControl"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "FingerprintPasswordAuthentication"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "FingerprintReaderAccess"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "OsDetectionForSwitchableGraphics"
                }, 

                Package (0x02)
                {
                    0x0F, 
                    "ComputraceModuleActivation"
                }, 

                Package (0x02)
                {
                    0x01, 
                    "PCIExpressPowerManagement"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "Reserved"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "eSATAPortAccess"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "HardwarePasswordManager"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "HyperThreadingTechnology"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "FnCtrlKeySwap"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "BIOSPasswordAtReboot"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "OnByAcAttach"
                }, 

                Package (0x02)
                {
                    0x64, 
                    "NetworkBoot"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "BootOrderLock"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "Reserved"
                }, 

                Package (0x02)
                {
                    0x11, 
                    "ExpressCardSpeed"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "RapidStartTechnology"
                }, 

                Package (0x02)
                {
                    0x12, 
                    "KeyboardIllumination"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "IPv4NetworkStack"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "IPv6NetworkStack"
                }, 

                Package (0x02)
                {
                    0x13, 
                    "UefiPxeBootPriority"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "Reserved"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "PhysicalPresenceForTpmClear"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "SecureRollBackPrevention"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "SecureBoot"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "NfcAccess"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "BottomCoverTamperDetected"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "PasswordCountExceededError"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "BIOSPasswordAtBootDeviceList"
                }, 

                Package (0x02)
                {
                    0x14, 
                    "TotalGraphicsMemory"
                }, 

                Package (0x02)
                {
                    0x15, 
                    "BootTimeExtension"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "FnKeyAsPrimary"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "WiGig"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "BIOSPasswordAtPowerOn"
                }, 

                Package (0x02)
                {
                    0x16, 
                    "SGXControl"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "Reserved"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "InternalStorageTamper"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "WirelessAutoDisconnection"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "Reserved"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "USBKeyProvisioning"
                }, 

                Package (0x02)
                {
                    0x1B, 
                    "MACAddressPassThrough"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "ThunderboltAccess"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "WindowsUEFIFirmwareUpdate"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "WakeOnLANDock"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "WakeByThunderbolt"
                }, 

                Package (0x02)
                {
                    0x17, 
                    "ThunderboltSecurityLevel"
                }, 

                Package (0x02)
                {
                    0x1A, 
                    "PreBootForThunderboltDevice"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "PreBootForThunderboltUSBDevice"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "DeviceGuard"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "DashEnabled"
                }
            })
            Name (VSEL, Package (0x1C)
            {
                Package (0x02)
                {
                    "Disable", 
                    "Enable"
                }, 

                Package (0x02)
                {
                    "Disable", 
                    "Automatic"
                }, 

                Package (0x04)
                {
                    "Active", 
                    "Inactive", 
                    "Disable", 
                    "Enable"
                }, 

                Package (0x02)
                {
                    "Normal", 
                    "High"
                }, 

                Package (0x02)
                {
                    "Independent", 
                    "Synchronized"
                }, 

                Package (0x02)
                {
                    "LCD", 
                    "ExternalDisplay"
                }, 

                Package (0x03)
                {
                    "High", 
                    "Normal", 
                    "Silent"
                }, 

                Package (0x02)
                {
                    "Compatibility", 
                    "AHCI"
                }, 

                Package (0x02)
                {
                    "External", 
                    "InternalOnly"
                }, 

                Package (0x02)
                {
                    "MaximizePerformance", 
                    "Balanced"
                }, 

                Package (0x02)
                {
                    "Quick", 
                    "Diagnostics"
                }, 

                Package (0x0A)
                {
                    "Disable", 
                    "4", 
                    "5", 
                    "6", 
                    "7", 
                    "8", 
                    "9", 
                    "10", 
                    "11", 
                    "12"
                }, 

                Package (0x03)
                {
                    "Auto", 
                    "On", 
                    "Off"
                }, 

                Package (0x03)
                {
                    "IntegratedGfx", 
                    "DiscreteGfx", 
                    "SwitchableGfx"
                }, 

                Package (0x04)
                {
                    "Disable", 
                    "ACOnly", 
                    "ACandBattery", 
                    "Enable"
                }, 

                Package (0x03)
                {
                    "Disable", 
                    "Enable", 
                    "Disable"
                }, 

                Package (0x02)
                {
                    "HDMI", 
                    "USBTypeC"
                }, 

                Package (0x02)
                {
                    "Generation1", 
                    "Automatic"
                }, 

                Package (0x03)
                {
                    "ThinkLightOnly", 
                    "BacklightOnly", 
                    "Both"
                }, 

                Package (0x02)
                {
                    "IPv6First", 
                    "IPv4First"
                }, 

                Package (0x02)
                {
                    "256MB", 
                    "512MB"
                }, 

                Package (0x0B)
                {
                    "Disable", 
                    "1", 
                    "2", 
                    "3", 
                    "", 
                    "5", 
                    "", 
                    "", 
                    "", 
                    "", 
                    "10"
                }, 

                Package (0x03)
                {
                    "Disable", 
                    "Enable", 
                    "SoftwareControl"
                }, 

                Package (0x04)
                {
                    "NoSecurity", 
                    "UserAuthorization", 
                    "SecureConnect", 
                    "DisplayPortandUSB"
                }, 

                Package (0x02)
                {
                    "Disable", 
                    "Auto"
                }, 

                Package (0x03)
                {
                    "Enable", 
                    "", 
                    "Disable"
                }, 

                Package (0x03)
                {
                    "Disable", 
                    "Enable", 
                    "Pre-BootACL"
                }, 

                Package (0x03)
                {
                    "Disable", 
                    "Enable", 
                    "Second"
                }
            })
            Name (VLST, Package (0x11)
            {
                "HDD0", 
                "HDD1", 
                "HDD2", 
                "HDD3", 
                "HDD4", 
                "PCILAN", 
                "ATAPICD0", 
                "ATAPICD1", 
                "ATAPICD2", 
                "USBFDD", 
                "USBCD", 
                "USBHDD", 
                "OtherHDD", 
                "OtherCD", 
                "NVMe0", 
                "NVMe1", 
                "NODEV"
            })
            Name (PENC, Package (0x02)
            {
                "ascii", 
                "scancode"
            })
            Name (PKBD, Package (0x03)
            {
                "us", 
                "fr", 
                "gr"
            })
            Name (PTYP, Package (0x08)
            {
                "pap", 
                "pop", 
                "uhdp1", 
                "mhdp1", 
                "uhdp2", 
                "mhdp2", 
                "uhdp3", 
                "mhdp3"
            })
            Mutex (MWMI, 0x00)
            Name (PCFG, Buffer (0x18) {})
            Name (IBUF, Buffer (0x0100) {})
            Name (ILEN, 0x00)
            Name (PSTR, Buffer (0x81) {})
            Method (WQA0, 1, NotSerialized)
            {
                Acquire (MWMI, 0xFFFF)
                If ((WMIS (0x00, Arg0) != 0x00))
                {
                    Release (MWMI)
                    Return ("")
                }

                Local0 = DerefOf (ITEM [WITM])
                Local1 = DerefOf (Local0 [0x00])
                Local2 = DerefOf (Local0 [0x01])
                If ((Local1 < 0x64))
                {
                    Concatenate (Local2, ",", Local6)
                    Local3 = DerefOf (VSEL [Local1])
                    Concatenate (Local6, DerefOf (Local3 [WSEL]), Local7)
                }
                Else
                {
                    Local3 = SizeOf (VLST)
                    If ((WLS0 <= Local3))
                    {
                        Concatenate (Local2, ",", Local7)
                        Concatenate (Local7, DerefOf (VLST [WLS0]), Local2)
                    }

                    If ((WLS1 <= Local3))
                    {
                        Concatenate (Local2, ":", Local7)
                        Concatenate (Local7, DerefOf (VLST [WLS1]), Local2)
                    }

                    If ((WLS2 <= Local3))
                    {
                        Concatenate (Local2, ":", Local7)
                        Concatenate (Local7, DerefOf (VLST [WLS2]), Local2)
                    }

                    If ((WLS3 <= Local3))
                    {
                        Concatenate (Local2, ":", Local7)
                        Concatenate (Local7, DerefOf (VLST [WLS3]), Local2)
                    }

                    If ((WLS4 <= Local3))
                    {
                        Concatenate (Local2, ":", Local7)
                        Concatenate (Local7, DerefOf (VLST [WLS4]), Local2)
                    }

                    If ((WLS5 <= Local3))
                    {
                        Concatenate (Local2, ":", Local7)
                        Concatenate (Local7, DerefOf (VLST [WLS5]), Local2)
                    }

                    If ((WLS6 <= Local3))
                    {
                        Concatenate (Local2, ":", Local7)
                        Concatenate (Local7, DerefOf (VLST [WLS6]), Local2)
                    }

                    If ((WLS7 <= Local3))
                    {
                        Concatenate (Local2, ":", Local7)
                        Concatenate (Local7, DerefOf (VLST [WLS7]), Local2)
                    }

                    If ((WLS8 <= Local3))
                    {
                        Concatenate (Local2, ":", Local7)
                        Concatenate (Local7, DerefOf (VLST [WLS8]), Local2)
                    }

                    If ((WLS9 <= Local3))
                    {
                        Concatenate (Local2, ":", Local7)
                        Concatenate (Local7, DerefOf (VLST [WLS9]), Local2)
                    }

                    If ((WLSA <= Local3))
                    {
                        Concatenate (Local2, ":", Local7)
                        Concatenate (Local7, DerefOf (VLST [WLSA]), Local2)
                    }

                    If ((WLSB <= Local3))
                    {
                        Concatenate (Local2, ":", Local7)
                        Concatenate (Local7, DerefOf (VLST [WLSB]), Local2)
                    }

                    If ((WLSC <= Local3))
                    {
                        Concatenate (Local2, ":", Local7)
                        Concatenate (Local7, DerefOf (VLST [WLSC]), Local2)
                    }

                    If ((WLSD <= Local3))
                    {
                        Concatenate (Local2, ":", Local7)
                        Concatenate (Local7, DerefOf (VLST [WLSD]), Local2)
                    }

                    Local7 = Local2
                }

                Release (MWMI)
                Return (Local7)
            }

            Method (WMA1, 3, NotSerialized)
            {
                Acquire (MWMI, 0xFFFF)
                If ((SizeOf (Arg2) == 0x00))
                {
                    Local0 = 0x02
                }
                Else
                {
                    Local0 = CARG (Arg2)
                    If ((Local0 == 0x00))
                    {
                        Local0 = WSET (ITEM, VSEL)
                        If ((Local0 == 0x00))
                        {
                            Local0 = WMIS (0x01, 0x00)
                        }
                    }
                }

                Release (MWMI)
                Return (DerefOf (RETN [Local0]))
            }

            Method (WMA2, 3, NotSerialized)
            {
                Acquire (MWMI, 0xFFFF)
                Local0 = CARG (Arg2)
                If ((Local0 == 0x00))
                {
                    If ((ILEN != 0x00))
                    {
                        Local0 = CPAS (IBUF, 0x00)
                    }

                    If ((Local0 == 0x00))
                    {
                        Local0 = WMIS (0x02, 0x00)
                    }
                }

                Release (MWMI)
                Return (DerefOf (RETN [Local0]))
            }

            Method (WMA3, 3, NotSerialized)
            {
                Acquire (MWMI, 0xFFFF)
                Local0 = CARG (Arg2)
                If ((Local0 == 0x00))
                {
                    If ((ILEN != 0x00))
                    {
                        Local0 = CPAS (IBUF, 0x00)
                    }

                    If ((Local0 == 0x00))
                    {
                        Local0 = WMIS (0x03, 0x00)
                    }
                }

                Release (MWMI)
                Return (DerefOf (RETN [Local0]))
            }

            Method (WMA4, 3, NotSerialized)
            {
                Acquire (MWMI, 0xFFFF)
                Local0 = CARG (Arg2)
                If ((Local0 == 0x00))
                {
                    If ((ILEN != 0x00))
                    {
                        Local0 = CPAS (IBUF, 0x00)
                    }

                    If ((Local0 == 0x00))
                    {
                        Local0 = WMIS (0x04, 0x00)
                    }
                }

                Release (MWMI)
                Return (DerefOf (RETN [Local0]))
            }

            Method (WQA5, 1, NotSerialized)
            {
                Acquire (MWMI, 0xFFFF)
                Local0 = WMIS (0x05, 0x00)
                PCFG [0x00] = WSPM /* \WSPM */
                PCFG [0x04] = WSPS /* \WSPS */
                PCFG [0x08] = WSMN /* \WSMN */
                PCFG [0x0C] = WSMX /* \WSMX */
                PCFG [0x10] = WSEN /* \WSEN */
                PCFG [0x14] = WSKB /* \WSKB */
                Release (MWMI)
                Return (PCFG) /* \_SB_.WMI1.PCFG */
            }

            Method (WMA6, 3, NotSerialized)
            {
                Acquire (MWMI, 0xFFFF)
                If ((SizeOf (Arg2) == 0x00))
                {
                    Local0 = 0x02
                }
                Else
                {
                    Local0 = CARG (Arg2)
                    If ((Local0 == 0x00))
                    {
                        If ((ILEN != 0x00))
                        {
                            Local0 = SPAS (IBUF)
                        }

                        If ((Local0 == 0x00))
                        {
                            Local0 = WMIS (0x06, 0x00)
                        }
                    }
                }

                Release (MWMI)
                Return (DerefOf (RETN [Local0]))
            }

            Method (WMA7, 3, NotSerialized)
            {
                If ((SizeOf (Arg2) == 0x00))
                {
                    Return ("")
                }

                Local0 = CARG (Arg2)
                If ((Local0 == 0x00))
                {
                    Local1 = GITM (IBUF, ITEM)
                    If ((Local1 == Ones))
                    {
                        Return ("")
                    }

                    Local0 = DerefOf (ITEM [Local1])
                    Local1 = DerefOf (Local0 [0x00])
                    If ((Local1 < 0x64))
                    {
                        Local3 = DerefOf (VSEL [Local1])
                        Local2 = DerefOf (Local3 [0x00])
                        Local4 = SizeOf (Local3)
                        Local5 = 0x01
                        While ((Local5 < Local4))
                        {
                            Local6 = DerefOf (Local3 [Local5])
                            If ((SizeOf (Local6) != 0x00))
                            {
                                Concatenate (Local2, ",", Local7)
                                Concatenate (Local7, Local6, Local2)
                            }

                            Local5++
                        }
                    }
                    Else
                    {
                        Local2 = DerefOf (VLST [0x00])
                        Local4 = SizeOf (VLST)
                        Local5 = 0x01
                        While ((Local5 < Local4))
                        {
                            Local6 = DerefOf (VLST [Local5])
                            Concatenate (Local2, ",", Local7)
                            Concatenate (Local7, Local6, Local2)
                            Local5++
                        }
                    }
                }

                Return (Local2)
            }

            Method (CARG, 1, NotSerialized)
            {
                Local0 = SizeOf (Arg0)
                If ((Local0 == 0x00))
                {
                    IBUF = 0x00
                    ILEN = 0x00
                    Return (0x00)
                }

                If ((ObjectType (Arg0) != 0x02))
                {
                    Return (0x02)
                }

                If ((Local0 >= 0xFF))
                {
                    Return (0x02)
                }

                IBUF = Arg0
                Local0--
                Local1 = DerefOf (IBUF [Local0])
                If (((Local1 == 0x3B) || (Local1 == 0x2A)))
                {
                    IBUF [Local0] = 0x00
                    ILEN = Local0
                }
                Else
                {
                    ILEN = SizeOf (Arg0)
                }

                Return (0x00)
            }

            Method (SCMP, 3, NotSerialized)
            {
                Local0 = SizeOf (Arg0)
                If ((Local0 == 0x00))
                {
                    Return (0x00)
                }

                Local0++
                Name (STR1, Buffer (Local0) {})
                STR1 = Arg0
                Local0--
                Local1 = 0x00
                Local2 = Arg2
                While ((Local1 < Local0))
                {
                    Local3 = DerefOf (STR1 [Local1])
                    Local4 = DerefOf (Arg1 [Local2])
                    If ((Local3 != Local4))
                    {
                        Return (0x00)
                    }

                    Local1++
                    Local2++
                }

                Local4 = DerefOf (Arg1 [Local2])
                If ((Local4 == 0x00))
                {
                    Return (0x01)
                }

                If (((Local4 == 0x2C) || (Local4 == 0x3A)))
                {
                    Return (0x01)
                }

                Return (0x00)
            }

            Method (GITM, 2, NotSerialized)
            {
                Local0 = 0x00
                Local1 = SizeOf (Arg1)
                While ((Local0 < Local1))
                {
                    Local3 = DerefOf (DerefOf (Arg1 [Local0]) [0x01])
                    If (SCMP (Local3, Arg0, 0x00))
                    {
                        Return (Local0)
                    }

                    Local0++
                }

                Return (Ones)
            }

            Method (GSEL, 3, NotSerialized)
            {
                Local0 = 0x00
                Local1 = SizeOf (Arg0)
                While ((Local0 < Local1))
                {
                    Local2 = DerefOf (Arg0 [Local0])
                    If (SCMP (Local2, Arg1, Arg2))
                    {
                        Return (Local0)
                    }

                    Local0++
                }

                Return (Ones)
            }

            Method (SLEN, 2, NotSerialized)
            {
                Local0 = DerefOf (Arg0 [Arg1])
                Return (SizeOf (Local0))
            }

            Method (CLRP, 0, NotSerialized)
            {
                WPAS = 0x00
                WPNW = 0x00
            }

            Method (GPAS, 2, NotSerialized)
            {
                Local0 = Arg1
                Local1 = 0x00
                While ((Local1 <= 0x80))
                {
                    Local2 = DerefOf (Arg0 [Local0])
                    If (((Local2 == 0x2C) || (Local2 == 0x00)))
                    {
                        PSTR [Local1] = 0x00
                        Return (Local1)
                    }

                    PSTR [Local1] = Local2
                    Local0++
                    Local1++
                }

                PSTR [Local1] = 0x00
                Return (Ones)
            }

            Method (CPAS, 2, NotSerialized)
            {
                CLRP ()
                Local0 = Arg1
                Local1 = GPAS (Arg0, Local0)
                If ((Local1 == Ones))
                {
                    Return (0x02)
                }

                If ((Local1 == 0x00))
                {
                    Return (0x02)
                }

                WPAS = PSTR /* \_SB_.WMI1.PSTR */
                Local0 += Local1
                Local0++
                Local6 = GSEL (PENC, Arg0, Local0)
                If ((Local6 == Ones))
                {
                    Return (0x02)
                }

                WENC = Local6
                If ((Local6 == 0x00))
                {
                    Local0 += SLEN (PENC, 0x00)
                    If ((DerefOf (Arg0 [Local0]) != 0x2C))
                    {
                        Return (0x02)
                    }

                    Local0++
                    Local6 = GSEL (PKBD, Arg0, Local0)
                    If ((Local6 == Ones))
                    {
                        Return (0x02)
                    }

                    WKBD = Local6
                }

                Return (0x00)
            }

            Method (SPAS, 1, NotSerialized)
            {
                CLRP ()
                Local6 = GSEL (PTYP, Arg0, 0x00)
                If ((Local6 == Ones))
                {
                    Return (0x02)
                }

                WPTY = Local6
                Local0 = SLEN (PTYP, Local6)
                If ((DerefOf (Arg0 [Local0]) != 0x2C))
                {
                    Return (0x02)
                }

                Local0++
                Local1 = GPAS (Arg0, Local0)
                If (((Local1 == Ones) || (Local1 == 0x00)))
                {
                    Return (0x02)
                }

                WPAS = PSTR /* \_SB_.WMI1.PSTR */
                Local0 += Local1
                If ((DerefOf (Arg0 [Local0]) != 0x2C))
                {
                    Return (0x02)
                }

                Local0++
                Local1 = GPAS (Arg0, Local0)
                If ((Local1 == Ones))
                {
                    Return (0x02)
                }

                If ((Local1 == 0x00))
                {
                    PSTR = 0x00
                }

                WPNW = PSTR /* \_SB_.WMI1.PSTR */
                Local0 += Local1
                Local0++
                Local6 = GSEL (PENC, Arg0, Local0)
                If ((Local6 == Ones))
                {
                    Return (0x02)
                }

                WENC = Local6
                If ((Local6 == 0x00))
                {
                    Local0 += SLEN (PENC, 0x00)
                    If ((DerefOf (Arg0 [Local0]) != 0x2C))
                    {
                        Return (0x02)
                    }

                    Local0++
                    Local6 = GSEL (PKBD, Arg0, Local0)
                    If ((Local6 == Ones))
                    {
                        Return (0x02)
                    }

                    WKBD = Local6
                }

                Return (0x00)
            }

            Method (WSET, 2, NotSerialized)
            {
                Local0 = ILEN /* \_SB_.WMI1.ILEN */
                Local0++
                Local1 = GITM (IBUF, Arg0)
                If ((Local1 == Ones))
                {
                    Return (0x02)
                }

                WITM = Local1
                Local3 = DerefOf (Arg0 [Local1])
                Local4 = DerefOf (Local3 [0x01])
                Local2 = SizeOf (Local4)
                Local2++
                Local4 = DerefOf (Local3 [0x00])
                If ((Local4 < 0x64))
                {
                    Local5 = DerefOf (Arg1 [Local4])
                    Local6 = GSEL (Local5, IBUF, Local2)
                    If ((Local6 == Ones))
                    {
                        Return (0x02)
                    }

                    WSEL = Local6
                    Local2 += SLEN (Local5, Local6)
                    Local4 = DerefOf (IBUF [Local2])
                }
                Else
                {
                    WLS0 = 0x3F
                    WLS1 = 0x3F
                    WLS2 = 0x3F
                    WLS3 = 0x3F
                    WLS4 = 0x3F
                    WLS5 = 0x3F
                    WLS6 = 0x3F
                    WLS7 = 0x3F
                    WLS8 = 0x3F
                    WLS9 = 0x3F
                    WLSA = 0x3F
                    WLSB = 0x3F
                    WLSC = 0x3F
                    WLSD = 0x3F
                    Local6 = GSEL (VLST, IBUF, Local2)
                    If ((Local6 == Ones))
                    {
                        Return (0x02)
                    }

                    WLS0 = Local6
                    Local2 += SLEN (VLST, Local6)
                    Local4 = DerefOf (IBUF [Local2])
                    If (((Local2 < Local0) && (Local4 == 0x3A)))
                    {
                        Local2++
                        Local6 = GSEL (VLST, IBUF, Local2)
                        If ((Local6 == Ones))
                        {
                            Return (0x02)
                        }

                        WLS1 = Local6
                        Local2 += SLEN (VLST, Local6)
                        Local4 = DerefOf (IBUF [Local2])
                    }

                    If (((Local2 < Local0) && (Local4 == 0x3A)))
                    {
                        Local2++
                        Local6 = GSEL (VLST, IBUF, Local2)
                        If ((Local6 == Ones))
                        {
                            Return (0x02)
                        }

                        WLS2 = Local6
                        Local2 += SLEN (VLST, Local6)
                        Local4 = DerefOf (IBUF [Local2])
                    }

                    If (((Local2 < Local0) && (Local4 == 0x3A)))
                    {
                        Local2++
                        Local6 = GSEL (VLST, IBUF, Local2)
                        If ((Local6 == Ones))
                        {
                            Return (0x02)
                        }

                        WLS3 = Local6
                        Local2 += SLEN (VLST, Local6)
                        Local4 = DerefOf (IBUF [Local2])
                    }

                    If (((Local2 < Local0) && (Local4 == 0x3A)))
                    {
                        Local2++
                        Local6 = GSEL (VLST, IBUF, Local2)
                        If ((Local6 == Ones))
                        {
                            Return (0x02)
                        }

                        WLS4 = Local6
                        Local2 += SLEN (VLST, Local6)
                        Local4 = DerefOf (IBUF [Local2])
                    }

                    If (((Local2 < Local0) && (Local4 == 0x3A)))
                    {
                        Local2++
                        Local6 = GSEL (VLST, IBUF, Local2)
                        If ((Local6 == Ones))
                        {
                            Return (0x02)
                        }

                        WLS5 = Local6
                        Local2 += SLEN (VLST, Local6)
                        Local4 = DerefOf (IBUF [Local2])
                    }

                    If (((Local2 < Local0) && (Local4 == 0x3A)))
                    {
                        Local2++
                        Local6 = GSEL (VLST, IBUF, Local2)
                        If ((Local6 == Ones))
                        {
                            Return (0x02)
                        }

                        WLS6 = Local6
                        Local2 += SLEN (VLST, Local6)
                        Local4 = DerefOf (IBUF [Local2])
                    }

                    If (((Local2 < Local0) && (Local4 == 0x3A)))
                    {
                        Local2++
                        Local6 = GSEL (VLST, IBUF, Local2)
                        If ((Local6 == Ones))
                        {
                            Return (0x02)
                        }

                        WLS7 = Local6
                        Local2 += SLEN (VLST, Local6)
                        Local4 = DerefOf (IBUF [Local2])
                    }

                    If (((Local2 < Local0) && (Local4 == 0x3A)))
                    {
                        Local2++
                        Local6 = GSEL (VLST, IBUF, Local2)
                        If ((Local6 == Ones))
                        {
                            Return (0x02)
                        }

                        WLS8 = Local6
                        Local2 += SLEN (VLST, Local6)
                        Local4 = DerefOf (IBUF [Local2])
                    }

                    If (((Local2 < Local0) && (Local4 == 0x3A)))
                    {
                        Local2++
                        Local6 = GSEL (VLST, IBUF, Local2)
                        If ((Local6 == Ones))
                        {
                            Return (0x02)
                        }

                        WLS9 = Local6
                        Local2 += SLEN (VLST, Local6)
                        Local4 = DerefOf (IBUF [Local2])
                    }

                    If (((Local2 < Local0) && (Local4 == 0x3A)))
                    {
                        Local2++
                        Local6 = GSEL (VLST, IBUF, Local2)
                        If ((Local6 == Ones))
                        {
                            Return (0x02)
                        }

                        WLSA = Local6
                        Local2 += SLEN (VLST, Local6)
                        Local4 = DerefOf (IBUF [Local2])
                    }

                    If (((Local2 < Local0) && (Local4 == 0x3A)))
                    {
                        Local2++
                        Local6 = GSEL (VLST, IBUF, Local2)
                        If ((Local6 == Ones))
                        {
                            Return (0x02)
                        }

                        WLSB = Local6
                        Local2 += SLEN (VLST, Local6)
                        Local4 = DerefOf (IBUF [Local2])
                    }

                    If (((Local2 < Local0) && (Local4 == 0x3A)))
                    {
                        Local2++
                        Local6 = GSEL (VLST, IBUF, Local2)
                        If ((Local6 == Ones))
                        {
                            Return (0x02)
                        }

                        WLSC = Local6
                        Local2 += SLEN (VLST, Local6)
                        Local4 = DerefOf (IBUF [Local2])
                    }

                    If (((Local2 < Local0) && (Local4 == 0x3A)))
                    {
                        Local2++
                        Local6 = GSEL (VLST, IBUF, Local2)
                        If ((Local6 == Ones))
                        {
                            Return (0x02)
                        }

                        WLSD = Local6
                        Local2 += SLEN (VLST, Local6)
                        Local4 = DerefOf (IBUF [Local2])
                    }
                }

                If (((Local4 == 0x2C) && (Local2 < Local0)))
                {
                    Local2++
                    Local0 = CPAS (IBUF, Local2)
                    If ((Local0 != 0x00))
                    {
                        Return (Local0)
                    }
                }

                Return (0x00)
            }

            Name (WQBA, Buffer (0x089D)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0x8D, 0x08, 0x00, 0x00, 0xF2, 0x36, 0x00, 0x00,  // .....6..
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0xA8, 0xC9, 0x9A, 0x00, 0x01, 0x06, 0x18, 0x42,  // .......B
                /* 0020 */  0x10, 0x13, 0x10, 0x0A, 0x0D, 0x21, 0x02, 0x0B,  // .....!..
                /* 0028 */  0x83, 0x50, 0x4C, 0x18, 0x14, 0xA0, 0x45, 0x41,  // .PL...EA
                /* 0030 */  0xC8, 0x05, 0x14, 0x95, 0x02, 0x21, 0xC3, 0x02,  // .....!..
                /* 0038 */  0x14, 0x0B, 0x70, 0x2E, 0x40, 0xBA, 0x00, 0xE5,  // ..p.@...
                /* 0040 */  0x28, 0x72, 0x0C, 0x22, 0x02, 0xF7, 0xEF, 0x0F,  // (r."....
                /* 0048 */  0x31, 0x0E, 0x88, 0x14, 0x40, 0x48, 0x26, 0x84,  // 1...@H&.
                /* 0050 */  0x44, 0x00, 0x53, 0x21, 0x70, 0x84, 0xA0, 0x5F,  // D.S!p.._
                /* 0058 */  0x01, 0x08, 0x1D, 0xA2, 0xC9, 0xA0, 0x00, 0xA7,  // ........
                /* 0060 */  0x08, 0x82, 0xB4, 0x65, 0x01, 0xBA, 0x05, 0xF8,  // ...e....
                /* 0068 */  0x16, 0xA0, 0x1D, 0x42, 0x68, 0x15, 0x0A, 0x30,  // ...Bh..0
                /* 0070 */  0x29, 0xC0, 0x27, 0x98, 0x2C, 0x0A, 0x90, 0x0D,  // ).'.,...
                /* 0078 */  0x26, 0xDB, 0x70, 0x64, 0x18, 0x4C, 0xE4, 0x18,  // &.pd.L..
                /* 0080 */  0x50, 0x62, 0xC6, 0x80, 0xD2, 0x39, 0x05, 0xD9,  // Pb...9..
                /* 0088 */  0x04, 0x16, 0x74, 0xA1, 0x28, 0x9A, 0x46, 0x94,  // ..t.(.F.
                /* 0090 */  0x04, 0x07, 0x75, 0x0C, 0x11, 0x82, 0x97, 0x2B,  // ..u....+
                /* 0098 */  0x40, 0xF2, 0x04, 0xA4, 0x79, 0x5E, 0xB2, 0x3E,  // @...y^.>
                /* 00A0 */  0x08, 0x0D, 0x81, 0x8D, 0x80, 0x47, 0x91, 0x00,  // .....G..
                /* 00A8 */  0xC2, 0x62, 0x2C, 0x53, 0xE2, 0x61, 0x50, 0x1E,  // .b,S.aP.
                /* 00B0 */  0x40, 0x24, 0x67, 0xA8, 0x28, 0x60, 0x7B, 0x9D,  // @$g.(`{.
                /* 00B8 */  0x88, 0x86, 0x75, 0x9C, 0x4C, 0x12, 0x1C, 0x6A,  // ..u.L..j
                /* 00C0 */  0x94, 0x96, 0x28, 0xC0, 0xFC, 0xC8, 0x34, 0x91,  // ..(...4.
                /* 00C8 */  0x63, 0x6B, 0x7A, 0xC4, 0x82, 0x64, 0xD2, 0x86,  // ckz..d..
                /* 00D0 */  0x82, 0x1A, 0xBA, 0xA7, 0x75, 0x52, 0x9E, 0x68,  // ....uR.h
                /* 00D8 */  0xC4, 0x83, 0x32, 0x4C, 0x02, 0x8F, 0x82, 0xA1,  // ..2L....
                /* 00E0 */  0x71, 0x82, 0xB2, 0x20, 0xE4, 0x60, 0xA0, 0x28,  // q.. .`.(
                /* 00E8 */  0xC0, 0x93, 0xF0, 0x1C, 0x8B, 0x17, 0x20, 0x7C,  // ...... |
                /* 00F0 */  0xC6, 0xE4, 0x28, 0x10, 0x23, 0x81, 0x8F, 0x04,  // ..(.#...
                /* 00F8 */  0x1E, 0xCD, 0x31, 0x63, 0x81, 0xC2, 0x05, 0x3C,  // ..1c...<
                /* 0100 */  0x9F, 0x63, 0x88, 0x1C, 0xF7, 0x50, 0x63, 0x1C,  // .c...Pc.
                /* 0108 */  0x45, 0xE4, 0x04, 0xEF, 0x00, 0x51, 0x8C, 0x56,  // E....Q.V
                /* 0110 */  0xD0, 0xBC, 0x85, 0x18, 0x2C, 0x9A, 0xC1, 0x7A,  // ....,..z
                /* 0118 */  0x06, 0x27, 0x83, 0x4E, 0xF0, 0xFF, 0x3F, 0x02,  // .'.N..?.
                /* 0120 */  0x2E, 0x03, 0x42, 0x1E, 0x05, 0x58, 0x1D, 0x94,  // ..B..X..
                /* 0128 */  0xA6, 0x61, 0x82, 0xEE, 0x05, 0xBC, 0x1A, 0x1A,  // .a......
                /* 0130 */  0x13, 0xA0, 0x11, 0x43, 0xCA, 0x04, 0x38, 0xBB,  // ...C..8.
                /* 0138 */  0x2F, 0x68, 0x46, 0x6D, 0x09, 0x30, 0x27, 0x40,  // /hFm.0'@
                /* 0140 */  0x9B, 0x00, 0x6F, 0x08, 0x42, 0x39, 0xCF, 0x28,  // ..o.B9.(
                /* 0148 */  0xC7, 0x72, 0x8A, 0x51, 0x1E, 0x06, 0x62, 0xBE,  // .r.Q..b.
                /* 0150 */  0x0C, 0x04, 0x8D, 0x12, 0x23, 0xE6, 0xB9, 0xC4,  // ....#...
                /* 0158 */  0x35, 0x6C, 0x84, 0x18, 0x21, 0x4F, 0x21, 0x50,  // 5l..!O!P
                /* 0160 */  0xDC, 0xF6, 0x07, 0x41, 0x06, 0x8D, 0x1B, 0xBD,  // ...A....
                /* 0168 */  0x4F, 0x0B, 0x67, 0x75, 0x02, 0x47, 0xFF, 0xA4,  // O.gu.G..
                /* 0170 */  0x60, 0x02, 0x4F, 0xF9, 0xC0, 0x9E, 0x0D, 0x4E,  // `.O....N
                /* 0178 */  0xE0, 0x58, 0xA3, 0xC6, 0x38, 0x95, 0x04, 0x8E,  // .X..8...
                /* 0180 */  0xFD, 0x80, 0x90, 0x06, 0x10, 0x45, 0x82, 0x47,  // .....E.G
                /* 0188 */  0x9D, 0x16, 0x7C, 0x2E, 0xF0, 0xD0, 0x0E, 0xDA,  // ..|.....
                /* 0190 */  0x73, 0x3C, 0x81, 0x20, 0x87, 0x70, 0x04, 0x4F,  // s<. .p.O
                /* 0198 */  0x0C, 0x0F, 0x04, 0x1E, 0x03, 0xBB, 0x29, 0xF8,  // ......).
                /* 01A0 */  0x08, 0xE0, 0x13, 0x02, 0xDE, 0x35, 0xA0, 0xAE,  // .....5..
                /* 01A8 */  0x06, 0x0F, 0x06, 0x6C, 0xD0, 0xE1, 0x30, 0xE3,  // ...l..0.
                /* 01B0 */  0xF5, 0xF0, 0xC3, 0x9D, 0xC0, 0x49, 0x3E, 0x60,  // .....I>`
                /* 01B8 */  0xF0, 0xC3, 0x86, 0x07, 0x87, 0x9B, 0xE7, 0xC9,  // ........
                /* 01C0 */  0x1C, 0x59, 0xA9, 0x02, 0xCC, 0x1E, 0x0E, 0x74,  // .Y.....t
                /* 01C8 */  0x90, 0xF0, 0x69, 0x83, 0x9D, 0x01, 0x30, 0xF2,  // ..i...0.
                /* 01D0 */  0x07, 0x81, 0x1A, 0x99, 0xA1, 0x3D, 0xEE, 0x97,  // .....=..
                /* 01D8 */  0x0E, 0x43, 0x3E, 0x27, 0x1C, 0x16, 0x13, 0x7B,  // .C>'...{
                /* 01E0 */  0xEA, 0xA0, 0xE3, 0x01, 0xFF, 0x65, 0xE4, 0x39,  // .....e.9
                /* 01E8 */  0xC3, 0xD3, 0xF7, 0x7C, 0x4D, 0x30, 0xEC, 0xC0,  // ...|M0..
                /* 01F0 */  0xD1, 0x03, 0x31, 0xF4, 0xC3, 0xC6, 0x61, 0x9C,  // ..1...a.
                /* 01F8 */  0x86, 0xEF, 0x1F, 0x3E, 0x2F, 0xC0, 0x38, 0x05,  // ...>/.8.
                /* 0200 */  0x78, 0xE4, 0xFE, 0xFF, 0x1F, 0x52, 0x7C, 0x9A,  // x....R|.
                /* 0208 */  0xE0, 0x47, 0x0B, 0x9F, 0x26, 0xD8, 0xF5, 0xE0,  // .G..&...
                /* 0210 */  0x34, 0x9E, 0x03, 0x3C, 0x9C, 0xB3, 0xF2, 0x61,  // 4..<...a
                /* 0218 */  0x02, 0x6C, 0xF7, 0x13, 0x36, 0xA2, 0x77, 0x0B,  // .l..6.w.
                /* 0220 */  0x8F, 0x06, 0x7B, 0x0A, 0x00, 0xDF, 0xF9, 0x05,  // ..{.....
                /* 0228 */  0x9C, 0x77, 0x0D, 0x36, 0x58, 0x18, 0xE7, 0x17,  // .w.6X...
                /* 0230 */  0xE0, 0x71, 0x42, 0xF0, 0x10, 0xF8, 0x41, 0xC2,  // .qB...A.
                /* 0238 */  0x43, 0xE0, 0x03, 0x78, 0xFE, 0x38, 0x43, 0x2B,  // C..x.8C+
                /* 0240 */  0x9D, 0x17, 0x72, 0x60, 0xF0, 0xCE, 0x39, 0x30,  // ..r`..90
                /* 0248 */  0x46, 0xC1, 0xF3, 0x3C, 0x36, 0x4C, 0xA0, 0x20,  // F..<6L. 
                /* 0250 */  0xAF, 0x01, 0x85, 0x7A, 0x16, 0x50, 0x18, 0x9F,  // ...z.P..
                /* 0258 */  0x6A, 0x80, 0xD7, 0xFF, 0xFF, 0x54, 0x03, 0x5C,  // j....T.\
                /* 0260 */  0x0E, 0x07, 0xB8, 0x93, 0x03, 0xDC, 0x7B, 0x01,  // ......{.
                /* 0268 */  0xBB, 0x38, 0x3C, 0xD7, 0xC0, 0x15, 0x7D, 0xAE,  // .8<...}.
                /* 0270 */  0x81, 0x7A, 0x6F, 0x29, 0x6E, 0x8C, 0xBA, 0xC6,  // .zo)n...
                /* 0278 */  0x04, 0x79, 0x14, 0x78, 0xA4, 0x89, 0xF2, 0x3C,  // .y.x...<
                /* 0280 */  0xF3, 0x2E, 0x13, 0xE1, 0xD9, 0xC6, 0xD7, 0x1A,  // ........
                /* 0288 */  0x4F, 0x21, 0x8E, 0xAF, 0x35, 0x46, 0x7C, 0x99,  // O!..5F|.
                /* 0290 */  0x78, 0xB7, 0x31, 0xEE, 0xC1, 0x3D, 0xD6, 0x3C,  // x.1..=.<
                /* 0298 */  0xE4, 0x18, 0xE4, 0x68, 0x22, 0xBC, 0x18, 0x04,  // ...h"...
                /* 02A0 */  0x7C, 0xBC, 0xF1, 0xB1, 0x06, 0xBC, 0x62, 0x5E,  // |.....b^
                /* 02A8 */  0x28, 0xB2, 0x70, 0xAC, 0x01, 0x34, 0xFE, 0xFF,  // (.p..4..
                /* 02B0 */  0x8F, 0x35, 0xC0, 0x0D, 0xEB, 0x01, 0x05, 0x7C,  // .5.....|
                /* 02B8 */  0x47, 0x06, 0x76, 0x43, 0x81, 0x77, 0x42, 0x01,  // G.vC.wB.
                /* 02C0 */  0xFC, 0x24, 0x7E, 0x01, 0xE8, 0xC8, 0xE1, 0xB4,  // .$~.....
                /* 02C8 */  0x20, 0xB2, 0xF1, 0x06, 0xF0, 0x29, 0x80, 0xAA,  //  ....)..
                /* 02D0 */  0x01, 0xD2, 0x34, 0x61, 0x13, 0x4C, 0x4F, 0x2E,  // ..4a.LO.
                /* 02D8 */  0x78, 0x1F, 0x09, 0x9C, 0x9B, 0x44, 0xC9, 0x87,  // x....D..
                /* 02E0 */  0x45, 0xE1, 0x9C, 0xF5, 0x20, 0x42, 0x41, 0x0C,  // E... BA.
                /* 02E8 */  0xE8, 0x20, 0xC7, 0x09, 0xF4, 0x19, 0xC5, 0x07,  // . ......
                /* 02F0 */  0x91, 0x13, 0x7D, 0x22, 0xF4, 0xA0, 0x3C, 0x8C,  // ..}"..<.
                /* 02F8 */  0x77, 0x14, 0x76, 0x02, 0xF1, 0x61, 0xC2, 0x63,  // w.v..a.c
                /* 0300 */  0xF7, 0x31, 0x81, 0xFF, 0x63, 0x3C, 0x1B, 0xA3,  // .1..c<..
                /* 0308 */  0x5B, 0x0D, 0x86, 0xFE, 0xFF, 0xE7, 0x14, 0x0E,  // [.......
                /* 0310 */  0xE6, 0x83, 0x08, 0x27, 0xA8, 0xEB, 0x26, 0x01,  // ...'..&.
                /* 0318 */  0x32, 0x7D, 0x47, 0x05, 0x50, 0x00, 0xF9, 0x5E,  // 2}G.P..^
                /* 0320 */  0xE0, 0x73, 0xC0, 0xB3, 0x01, 0x1B, 0xC3, 0xA3,  // .s......
                /* 0328 */  0x80, 0xD1, 0x8C, 0xCE, 0xC3, 0x4F, 0x16, 0x15,  // .....O..
                /* 0330 */  0x77, 0xB2, 0x14, 0xC4, 0x93, 0x75, 0x94, 0xC9,  // w....u..
                /* 0338 */  0xA2, 0x67, 0xE2, 0x7B, 0x85, 0x67, 0xF4, 0xA6,  // .g.{.g..
                /* 0340 */  0xE5, 0x39, 0x7A, 0xC2, 0xBE, 0x87, 0xC0, 0x3A,  // .9z....:
                /* 0348 */  0x0C, 0x84, 0x7C, 0x30, 0xF0, 0x34, 0x0C, 0xE7,  // ..|0.4..
                /* 0350 */  0xC9, 0x72, 0x38, 0x4F, 0x96, 0x8F, 0xC5, 0xD7,  // .r8O....
                /* 0358 */  0x10, 0xF0, 0x09, 0x9C, 0x2D, 0xC8, 0xE1, 0x31,  // ....-..1
                /* 0360 */  0xB1, 0x46, 0x45, 0xAF, 0x42, 0x1E, 0x1E, 0xBF,  // .FE.B...
                /* 0368 */  0x1C, 0x78, 0x3E, 0xCF, 0x08, 0x47, 0xF9, 0x24,  // .x>..G.$
                /* 0370 */  0x81, 0xC3, 0x78, 0x26, 0xF1, 0x10, 0x7D, 0x2B,  // ..x&..}+
                /* 0378 */  0x82, 0x35, 0x91, 0x93, 0xF6, 0x6D, 0xE1, 0x64,  // .5...m.d
                /* 0380 */  0x83, 0xBE, 0x9E, 0x61, 0x6E, 0x45, 0xB0, 0xFF,  // ...anE..
                /* 0388 */  0xFF, 0xB7, 0x22, 0x38, 0x17, 0x34, 0x98, 0x99,  // .."8.4..
                /* 0390 */  0xEE, 0x55, 0xA8, 0x58, 0xF7, 0x2A, 0x40, 0xEC,  // .U.X.*@.
                /* 0398 */  0xB0, 0x5E, 0x7B, 0x7C, 0xB0, 0x82, 0x7B, 0xAF,  // .^{|..{.
                /* 03A0 */  0x82, 0x7B, 0xA9, 0x7A, 0x56, 0x38, 0xC6, 0xF0,  // .{.zV8..
                /* 03A8 */  0x0F, 0x53, 0x31, 0x4E, 0xE9, 0xB5, 0xD3, 0x40,  // .S1N...@
                /* 03B0 */  0x61, 0xA2, 0xC4, 0x7B, 0xAF, 0xF2, 0x18, 0xDF,  // a..{....
                /* 03B8 */  0xAB, 0xD8, 0x15, 0x2A, 0x4C, 0xAC, 0x97, 0x2B,  // ...*L..+
                /* 03C0 */  0xA3, 0xBE, 0x4E, 0x84, 0x0B, 0x14, 0x24, 0xD2,  // ..N...$.
                /* 03C8 */  0xAB, 0x55, 0x94, 0xC8, 0xF1, 0x0D, 0xF9, 0x5E,  // .U.....^
                /* 03D0 */  0x05, 0x5E, 0x39, 0xF7, 0x2A, 0x90, 0xFD, 0xFF,  // .^9.*...
                /* 03D8 */  0xEF, 0x55, 0x80, 0x79, 0xB4, 0xF7, 0x2A, 0x30,  // .U.y..*0
                /* 03E0 */  0x5E, 0x1B, 0xD8, 0x0D, 0x09, 0x16, 0xD0, 0x8B,  // ^.......
                /* 03E8 */  0x15, 0x60, 0x28, 0xF3, 0xC5, 0x8A, 0xE6, 0xBD,  // .`(.....
                /* 03F0 */  0x58, 0x21, 0xFE, 0xFF, 0xE7, 0x12, 0xA6, 0xE7,  // X!......
                /* 03F8 */  0x62, 0x45, 0xE6, 0x09, 0xFF, 0x66, 0x05, 0x70,  // bE...f.p
                /* 0400 */  0xFA, 0xFF, 0x7F, 0xB3, 0x02, 0x8C, 0xDD, 0x8B,  // ........
                /* 0408 */  0x30, 0x47, 0x2B, 0x78, 0x29, 0x6F, 0x56, 0x34,  // 0G+x)oV4
                /* 0410 */  0xCE, 0x32, 0x14, 0x70, 0x41, 0x14, 0xC6, 0x37,  // .2.pA..7
                /* 0418 */  0x2B, 0xC0, 0xD1, 0x75, 0x05, 0x37, 0x64, 0xB8,  // +..u.7d.
                /* 0420 */  0x60, 0x51, 0x82, 0xF9, 0x10, 0xE2, 0xE9, 0x1C,  // `Q......
                /* 0428 */  0xF1, 0x43, 0xC2, 0x4B, 0xC0, 0x63, 0x8E, 0x07,  // .C.K.c..
                /* 0430 */  0xFC, 0x40, 0xE0, 0xCB, 0x15, 0x98, 0xFE, 0xFF,  // .@......
                /* 0438 */  0x04, 0x3E, 0xF9, 0x9E, 0xE5, 0xDB, 0xD4, 0x7B,  // .>.....{
                /* 0440 */  0x2F, 0x3F, 0x60, 0xBD, 0x57, 0xF9, 0xF0, 0x1B,  // /?`.W...
                /* 0448 */  0xEB, 0x9D, 0xE1, 0xE5, 0xCA, 0x23, 0x89, 0x72,  // .....#.r
                /* 0450 */  0x12, 0xA1, 0x7C, 0xB7, 0x7A, 0xAF, 0x32, 0x4A,  // ..|.z.2J
                /* 0458 */  0xC4, 0x17, 0x62, 0x9F, 0x82, 0x0D, 0x6D, 0x94,  // ..b...m.
                /* 0460 */  0xA7, 0x8A, 0xE8, 0xC6, 0x7B, 0xB9, 0x02, 0xAF,  // ....{...
                /* 0468 */  0xA4, 0xCB, 0x15, 0x40, 0x93, 0xE1, 0xBF, 0x5C,  // ...@...\
                /* 0470 */  0x81, 0xEF, 0xE6, 0x80, 0xBD, 0x26, 0xC1, 0xF9,  // .....&..
                /* 0478 */  0xFF, 0x5F, 0x93, 0xF8, 0xF5, 0x0A, 0xF0, 0x93,  // ._......
                /* 0480 */  0xFD, 0x7A, 0x45, 0x73, 0x5F, 0xAF, 0x50, 0xA2,  // .zEs_.P.
                /* 0488 */  0x20, 0xA4, 0x08, 0x48, 0x33, 0x05, 0xCF, 0xFD,  //  ..H3...
                /* 0490 */  0x0A, 0xE0, 0xC4, 0xFF, 0xFF, 0x7E, 0x05, 0x58,  // .....~.X
                /* 0498 */  0x0E, 0x77, 0xBF, 0x02, 0x7A, 0xB7, 0x23, 0xF0,  // .w..z.#.
                /* 04A0 */  0xA2, 0xBC, 0x1D, 0x61, 0xAF, 0x58, 0xF8, 0x8C,  // ...a.X..
                /* 04A8 */  0x57, 0x2C, 0x1A, 0x66, 0x25, 0x8A, 0xB7, 0x26,  // W,.f%..&
                /* 04B0 */  0x0A, 0xE3, 0x2B, 0x16, 0x30, 0xF9, 0xFF, 0x5F,  // ..+.0.._
                /* 04B8 */  0xB1, 0x80, 0xD9, 0x41, 0x14, 0x37, 0x6A, 0xB8,  // ...A.7j.
                /* 04C0 */  0x17, 0x27, 0xDF, 0x7A, 0x3C, 0xDF, 0x88, 0xBE,  // .'.z<...
                /* 04C8 */  0xC3, 0x60, 0x4E, 0x58, 0x30, 0x6E, 0x58, 0xF0,  // .`NX0nX.
                /* 04D0 */  0x87, 0xF4, 0x30, 0xEC, 0x93, 0xC4, 0x3B, 0x96,  // ..0...;.
                /* 04D8 */  0x8F, 0x56, 0x06, 0x79, 0x03, 0x7E, 0xB2, 0x7A,  // .V.y.~.z
                /* 04E0 */  0xB0, 0x8A, 0x62, 0x84, 0x80, 0xC7, 0xF3, 0x2E,  // ..b.....
                /* 04E8 */  0xEC, 0xA3, 0xD5, 0x9B, 0x96, 0x51, 0x62, 0xC7,  // .....Qb.
                /* 04F0 */  0xF2, 0x85, 0xEA, 0x59, 0xCB, 0xD7, 0x2C, 0x43,  // ...Y..,C
                /* 04F8 */  0xC4, 0x7D, 0x20, 0xF6, 0x0D, 0x0B, 0xB0, 0xFD,  // .} .....
                /* 0500 */  0xFF, 0xBF, 0x61, 0x01, 0x8E, 0x2E, 0x0E, 0xFC,  // ..a.....
                /* 0508 */  0xE0, 0x80, 0xBD, 0x61, 0x01, 0x3E, 0x67, 0x0A,  // ...a.>g.
                /* 0510 */  0x9E, 0x1B, 0x16, 0xB0, 0xF9, 0xFF, 0xDF, 0xB0,  // ........
                /* 0518 */  0x00, 0xFE, 0xFF, 0xFF, 0x6F, 0x58, 0xC0, 0xE1,  // ....oX..
                /* 0520 */  0x76, 0x85, 0xBD, 0x65, 0x61, 0x6F, 0x2F, 0x64,  // v..eao/d
                /* 0528 */  0x15, 0x34, 0xD4, 0x4A, 0x14, 0xFC, 0x7B, 0x65,  // .4.J..{e
                /* 0530 */  0x18, 0x7A, 0xC3, 0x02, 0x1C, 0x8D, 0xDB, 0xA3,  // .z......
                /* 0538 */  0x06, 0xC7, 0xD9, 0xE0, 0x49, 0x02, 0x73, 0xAE,  // ....I.s.
                /* 0540 */  0xC6, 0xCD, 0xE6, 0xE0, 0x02, 0x47, 0xE8, 0x1D,  // .....G..
                /* 0548 */  0x54, 0x73, 0x67, 0x97, 0x14, 0x18, 0xB7, 0x2C,  // Tsg....,
                /* 0550 */  0xB8, 0x97, 0xAA, 0x87, 0x86, 0x28, 0x07, 0xF1,  // .....(..
                /* 0558 */  0x2A, 0xFC, 0x60, 0xF5, 0x28, 0x75, 0x64, 0x8F,  // *.`.(ud.
                /* 0560 */  0x57, 0x4F, 0xC3, 0x3E, 0x66, 0xF9, 0x96, 0x65,  // WO.>f..e
                /* 0568 */  0xA8, 0x08, 0x6F, 0x59, 0xEC, 0x0C, 0x11, 0x2F,  // ..oY.../
                /* 0570 */  0x56, 0x94, 0x10, 0xEF, 0x15, 0xA1, 0x7D, 0xE7,  // V.....}.
                /* 0578 */  0x32, 0xF8, 0xA3, 0xB1, 0x51, 0x83, 0xBE, 0x1C,  // 2...Q...
                /* 0580 */  0xBF, 0x65, 0xC1, 0xFB, 0xFF, 0xDF, 0xB2, 0xE0,  // .e......
                /* 0588 */  0x8B, 0xFC, 0xAB, 0xE8, 0x44, 0xE0, 0x5B, 0x16,  // ....D.[.
                /* 0590 */  0xC0, 0x8F, 0x60, 0x10, 0x72, 0x32, 0x70, 0xF4,  // ..`.r2p.
                /* 0598 */  0x79, 0x01, 0x3F, 0x80, 0x87, 0x11, 0x0F, 0x89,  // y.?.....
                /* 05A0 */  0x05, 0x18, 0x38, 0xBD, 0x2F, 0xF9, 0x4C, 0xC1,  // ..8./.L.
                /* 05A8 */  0x0F, 0x18, 0x3E, 0x53, 0xB0, 0xEB, 0x41, 0xF4,  // ..>S..A.
                /* 05B0 */  0xC7, 0x00, 0x9F, 0x4B, 0x30, 0x83, 0x03, 0xFF,  // ...K0...
                /* 05B8 */  0xB5, 0xE2, 0xD0, 0x3D, 0x8A, 0xD7, 0x07, 0x13,  // ...=....
                /* 05C0 */  0x78, 0x70, 0xFC, 0xFF, 0x3F, 0x38, 0xB8, 0x77,  // xp..?8.w
                /* 05C8 */  0x86, 0x23, 0xF2, 0x1D, 0xC6, 0x83, 0x03, 0xDB,  // .#......
                /* 05D0 */  0x41, 0x00, 0x38, 0x0C, 0x0E, 0x1F, 0x6A, 0x70,  // A.8...jp
                /* 05D8 */  0xE8, 0xF1, 0x18, 0x38, 0xA4, 0xCF, 0x63, 0xEC,  // ...8..c.
                /* 05E0 */  0xC2, 0xF0, 0x90, 0xE3, 0xA1, 0x81, 0x0D, 0xD0,  // ........
                /* 05E8 */  0x43, 0x03, 0x96, 0x93, 0x78, 0x0A, 0x39, 0x34,  // C...x.94
                /* 05F0 */  0x30, 0x4B, 0x18, 0x1A, 0x50, 0x8A, 0x37, 0x34,  // 0K..P.74
                /* 05F8 */  0xFA, 0xFF, 0x1F, 0x1A, 0x1F, 0x92, 0x0F, 0x0B,  // ........
                /* 0600 */  0x31, 0x9F, 0x72, 0x22, 0xBC, 0x2F, 0xF8, 0x04,  // 1.r"./..
                /* 0608 */  0xC5, 0xD0, 0x5F, 0x53, 0x7C, 0xBB, 0xF0, 0x4D,  // .._S|..M
                /* 0610 */  0x10, 0x37, 0x3E, 0x70, 0x5D, 0x3A, 0x3D, 0x3E,  // .7>p]:=>
                /* 0618 */  0xE0, 0x73, 0xE4, 0xF2, 0xF8, 0x70, 0x47, 0x27,  // .s...pG'
                /* 0620 */  0x8F, 0x0F, 0x86, 0xCB, 0xAB, 0x0C, 0x39, 0x9A,  // ......9.
                /* 0628 */  0xF8, 0x68, 0xC5, 0x86, 0x07, 0xB6, 0x9B, 0x9E,  // .h......
                /* 0630 */  0x87, 0x07, 0x7C, 0xAE, 0x9B, 0x60, 0xBC, 0x42,  // ..|..`.B
                /* 0638 */  0xF2, 0x6B, 0x09, 0x8C, 0x13, 0x14, 0xFE, 0xBA,  // .k......
                /* 0640 */  0x09, 0xDE, 0xFF, 0xFF, 0x75, 0x13, 0x78, 0x8E,  // ....u.x.
                /* 0648 */  0x82, 0x6B, 0xBD, 0x64, 0xD3, 0x20, 0xAF, 0x1C,  // .k.d. ..
                /* 0650 */  0xC5, 0x7A, 0x11, 0x50, 0x18, 0x9F, 0xD9, 0x00,  // .z.P....
                /* 0658 */  0x47, 0x63, 0x7D, 0x66, 0x03, 0xCB, 0xBD, 0x80,  // Gc}f....
                /* 0660 */  0xDD, 0xD8, 0xE0, 0x9E, 0xD6, 0x60, 0xDF, 0x1D,  // .....`..
                /* 0668 */  0x1E, 0xCE, 0x1E, 0xD3, 0x1E, 0xD5, 0x1E, 0xD0,  // ........
                /* 0670 */  0x7C, 0xC4, 0x8E, 0xF1, 0x96, 0x16, 0x24, 0x4E,  // |.....$N
                /* 0678 */  0x84, 0xD7, 0x81, 0xA7, 0x35, 0x5F, 0x32, 0xE2,  // ....5_2.
                /* 0680 */  0x05, 0x7A, 0x5A, 0x33, 0x46, 0x9C, 0x97, 0x36,  // .zZ3F..6
                /* 0688 */  0x23, 0xBE, 0x52, 0x84, 0x78, 0x58, 0xF3, 0xC9,  // #.R.xX..
                /* 0690 */  0xCD, 0x78, 0x0F, 0x13, 0xE1, 0xC2, 0xBC, 0xB0,  // .x......
                /* 0698 */  0x3D, 0xAD, 0x81, 0xE3, 0xFF, 0x7F, 0x5A, 0x83,  // =.....Z.
                /* 06A0 */  0x23, 0xE7, 0x8A, 0x0D, 0xD0, 0xE4, 0xA2, 0x8F,  // #.......
                /* 06A8 */  0x3B, 0xA4, 0x80, 0xE5, 0xDA, 0xC0, 0x6E, 0x29,  // ;.....n)
                /* 06B0 */  0xF0, 0x2E, 0xD8, 0xC0, 0xF9, 0xFF, 0x7F, 0x44,  // .......D
                /* 06B8 */  0x01, 0x5F, 0x96, 0x0B, 0x36, 0xCD, 0x71, 0xC1,  // ._..6.q.
                /* 06C0 */  0x46, 0x71, 0x58, 0x0D, 0x90, 0xE6, 0x09, 0xFF,  // FqX.....
                /* 06C8 */  0x7A, 0x0D, 0xFE, 0x49, 0xF8, 0x7A, 0x0D, 0xD8,  // z..I.z..
                /* 06D0 */  0xBE, 0xC5, 0xE2, 0xAE, 0xD7, 0xC0, 0xEA, 0xFF,  // ........
                /* 06D8 */  0x7F, 0xBD, 0x06, 0x96, 0x82, 0x47, 0x4A, 0xEF,  // .....GJ.
                /* 06E0 */  0xD4, 0xE0, 0xBA, 0x69, 0xE3, 0x41, 0xDF, 0xB4,  // ...i.A..
                /* 06E8 */  0x61, 0x0A, 0xBE, 0x45, 0xD1, 0x28, 0xE4, 0x8A,  // a..E.(..
                /* 06F0 */  0xB6, 0x10, 0x0A, 0xE3, 0x5B, 0x14, 0xE0, 0x08,  // ....[...
                /* 06F8 */  0xFB, 0x2D, 0x0A, 0x2C, 0x17, 0xA7, 0xB7, 0x28,  // .-.,...(
                /* 0700 */  0xFC, 0x0C, 0x3C, 0x68, 0xDF, 0x75, 0x18, 0xA6,  // ..<h.u..
                /* 0708 */  0xEF, 0xD0, 0xF0, 0x4F, 0x4D, 0xCF, 0x4D, 0x0F,  // ...OM.M.
                /* 0710 */  0x4E, 0x0F, 0xCD, 0x3E, 0x48, 0xF9, 0x70, 0xF0,  // N..>H.p.
                /* 0718 */  0xFC, 0xF4, 0xFF, 0x8F, 0xF1, 0x5E, 0xE7, 0x9B,  // .....^..
                /* 0720 */  0xD4, 0x6B, 0x94, 0x2F, 0x30, 0xC7, 0x10, 0x31,  // .k./0..1
                /* 0728 */  0xCA, 0xCB, 0xB4, 0x21, 0xE2, 0xF9, 0xD4, 0xE4,  // ...!....
                /* 0730 */  0xB3, 0x42, 0xDC, 0x10, 0x0F, 0xD1, 0x46, 0x88,  // .B....F.
                /* 0738 */  0xFA, 0x3C, 0xED, 0x09, 0xBD, 0x46, 0x81, 0x57,  // .<...F.W
                /* 0740 */  0xD0, 0x35, 0x0A, 0xA0, 0xC9, 0xFD, 0x08, 0x77,  // .5.....w
                /* 0748 */  0x8D, 0x02, 0xCB, 0xBD, 0x81, 0x9D, 0x87, 0xF8,  // ........
                /* 0750 */  0x95, 0xC8, 0xD7, 0x06, 0x18, 0xF7, 0x28, 0x38,  // ......(8
                /* 0758 */  0xFF, 0xFF, 0x7B, 0x14, 0x60, 0x23, 0xCC, 0x3D,  // ..{.`#.=
                /* 0760 */  0x8A, 0x06, 0xB9, 0x47, 0xA1, 0x4E, 0x26, 0xBE,  // ...G.N&.
                /* 0768 */  0xD4, 0x79, 0xA2, 0xE0, 0x08, 0x7F, 0x91, 0x42,  // .y.....B
                /* 0770 */  0xC5, 0x26, 0x51, 0xE8, 0xC3, 0x10, 0x2A, 0xE6,  // .&Q...*.
                /* 0778 */  0x61, 0x84, 0x82, 0x18, 0xD0, 0x19, 0x4E, 0x14,  // a.....N.
                /* 0780 */  0x68, 0x15, 0x27, 0x0A, 0x72, 0x8B, 0xF1, 0xA4,  // h.'.r...
                /* 0788 */  0x1E, 0xA3, 0x00, 0x5F, 0xCB, 0xF4, 0x50, 0x79,  // ..._..Py
                /* 0790 */  0xE4, 0xA1, 0x52, 0x10, 0x0F, 0xD5, 0x71, 0x86,  // ..R...q.
                /* 0798 */  0x8A, 0x9E, 0xA4, 0xE7, 0x8F, 0xF9, 0xFF, 0x1F,  // ........
                /* 07A0 */  0x1C, 0xB0, 0x07, 0x29, 0x80, 0x17, 0x0A, 0x6D,  // ...)...m
                /* 07A8 */  0xFA, 0xD4, 0x68, 0xD4, 0xAA, 0x41, 0x99, 0x1A,  // ..h..A..
                /* 07B0 */  0x65, 0x1A, 0xD4, 0xEA, 0x53, 0xA9, 0x31, 0x63,  // e...S.1c
                /* 07B8 */  0xE7, 0x50, 0x4B, 0x3B, 0x4B, 0x50, 0x31, 0x8B,  // .PK;KP1.
                /* 07C0 */  0xD1, 0x68, 0x1C, 0x05, 0x84, 0xCA, 0xFE, 0x9B,  // .h......
                /* 07C8 */  0x0B, 0xC4, 0x21, 0x9F, 0x3A, 0x02, 0x74, 0xB0,  // ..!.:.t.
                /* 07D0 */  0x17, 0x95, 0x80, 0x2C, 0x6B, 0x6D, 0x02, 0x71,  // ...,km.q
                /* 07D8 */  0x7C, 0x13, 0x10, 0x8D, 0x80, 0x48, 0xCB, 0x63,  // |....H.c
                /* 07E0 */  0x42, 0x40, 0xCE, 0x0D, 0x22, 0x20, 0xAB, 0x58,  // B@.." .X
                /* 07E8 */  0x93, 0x80, 0xAC, 0xF9, 0x01, 0x23, 0x70, 0xEB,  // .....#p.
                /* 07F0 */  0xD4, 0x01, 0xC4, 0x52, 0x82, 0xD0, 0x44, 0x0B,  // ...R..D.
                /* 07F8 */  0x17, 0xA8, 0xE3, 0x81, 0x68, 0x30, 0x84, 0x46,  // ....h0.F
                /* 0800 */  0x40, 0x0E, 0x46, 0x21, 0x20, 0xCB, 0xF8, 0x74,  // @.F! ..t
                /* 0808 */  0x0B, 0xDC, 0x02, 0xAC, 0x00, 0x31, 0xF9, 0x20,  // .....1. 
                /* 0810 */  0x54, 0xB0, 0x17, 0x50, 0xA6, 0x1E, 0x44, 0x40,  // T..P..D@
                /* 0818 */  0x56, 0xBA, 0x56, 0x01, 0x59, 0x37, 0x88, 0x80,  // V.V.Y7..
                /* 0820 */  0xFE, 0xFF, 0x2F, 0x83, 0x32, 0x03, 0xCE, 0x32,  // ../.2..2
                /* 0828 */  0xBA, 0x01, 0x62, 0x0A, 0x1F, 0x0A, 0x02, 0xB1,  // ..b.....
                /* 0830 */  0x26, 0x3D, 0xA0, 0x4C, 0x20, 0x88, 0xAE, 0x1C,  // &=.L ...
                /* 0838 */  0xC4, 0x0F, 0x10, 0x93, 0x06, 0x22, 0x20, 0xC7,  // ....." .
                /* 0840 */  0x39, 0x98, 0x08, 0xDC, 0x71, 0x14, 0x01, 0x52,  // 9...q..R
                /* 0848 */  0x47, 0xC3, 0xA5, 0x20, 0x54, 0xFC, 0xF3, 0x44,  // G.. T..D
                /* 0850 */  0x20, 0x16, 0x64, 0x09, 0x8C, 0x82, 0xD0, 0x08,  //  .d.....
                /* 0858 */  0x9A, 0x40, 0x98, 0x3C, 0x4F, 0x20, 0x2C, 0xD4,  // .@.<O ,.
                /* 0860 */  0x9F, 0x5C, 0xA7, 0x15, 0xA2, 0x6A, 0x88, 0xD4,  // .\...j..
                /* 0868 */  0x15, 0x08, 0x0B, 0xFC, 0x30, 0xD0, 0x60, 0x9C,  // ....0.`.
                /* 0870 */  0x1E, 0x44, 0x40, 0x4E, 0xFA, 0xA7, 0x0A, 0x44,  // .D@N...D
                /* 0878 */  0x72, 0x83, 0x08, 0xC8, 0xF9, 0x9F, 0x22, 0x02,  // r.....".
                /* 0880 */  0x77, 0xEA, 0xD7, 0x84, 0x86, 0x4F, 0xBE, 0x58,  // w....O.X
                /* 0888 */  0x41, 0x88, 0xB8, 0x87, 0x55, 0x50, 0xA2, 0x14,  // A...UP..
                /* 0890 */  0x44, 0x40, 0x56, 0xF6, 0xB4, 0x12, 0x90, 0x75,  // D@V....u
                /* 0898 */  0x82, 0x08, 0xC8, 0xFF, 0x7F                     // .....
            })
        }

        Device (WMI2)
        {
            Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Name (_WDG, Buffer (0x64)
            {
                /* 0000 */  0xF1, 0x24, 0xB4, 0xFC, 0x5A, 0x07, 0x0E, 0x4E,  // .$..Z..N
                /* 0008 */  0xBF, 0xC4, 0x62, 0xF3, 0xE7, 0x17, 0x71, 0xFA,  // ..b...q.
                /* 0010 */  0x41, 0x37, 0x01, 0x01, 0xE3, 0x5E, 0xBE, 0xE2,  // A7...^..
                /* 0018 */  0xDA, 0x42, 0xDB, 0x49, 0x83, 0x78, 0x1F, 0x52,  // .B.I.x.R
                /* 0020 */  0x47, 0x38, 0x82, 0x02, 0x41, 0x38, 0x01, 0x02,  // G8..A8..
                /* 0028 */  0x9A, 0x01, 0x30, 0x74, 0xE9, 0xDC, 0x48, 0x45,  // ..0t..HE
                /* 0030 */  0xBA, 0xB0, 0x9F, 0xDE, 0x09, 0x35, 0xCA, 0xFF,  // .....5..
                /* 0038 */  0x41, 0x39, 0x0A, 0x05, 0x03, 0x70, 0xF4, 0x7F,  // A9...p..
                /* 0040 */  0x6C, 0x3B, 0x5E, 0x4E, 0xA2, 0x27, 0xE9, 0x79,  // l;^N.'.y
                /* 0048 */  0x82, 0x4A, 0x85, 0xD1, 0x41, 0x41, 0x01, 0x06,  // .J..AA..
                /* 0050 */  0x21, 0x12, 0x90, 0x05, 0x66, 0xD5, 0xD1, 0x11,  // !...f...
                /* 0058 */  0xB2, 0xF0, 0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10,  // ......).
                /* 0060 */  0x42, 0x42, 0x01, 0x00                           // BB..
            })
            Name (PREL, Buffer (0x08)
            {
                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
            })
            Method (WQA7, 1, NotSerialized)
            {
                Acquire (^^WMI1.MWMI, 0xFFFF)
                WMIS (0x07, 0x00)
                PREL [0x00] = WLS0 /* \WLS0 */
                PREL [0x01] = WLS1 /* \WLS1 */
                PREL [0x02] = WLS2 /* \WLS2 */
                PREL [0x03] = WLS3 /* \WLS3 */
                PREL [0x04] = WLS4 /* \WLS4 */
                PREL [0x05] = WLS5 /* \WLS5 */
                PREL [0x06] = WLS6 /* \WLS6 */
                PREL [0x07] = WLS7 /* \WLS7 */
                Release (^^WMI1.MWMI)
                Return (PREL) /* \_SB_.WMI2.PREL */
            }

            Method (WMA8, 3, NotSerialized)
            {
                CreateByteField (Arg2, 0x00, PRE0)
                CreateByteField (Arg2, 0x01, PRE1)
                CreateByteField (Arg2, 0x02, PRE2)
                CreateByteField (Arg2, 0x03, PRE3)
                CreateByteField (Arg2, 0x04, PRE4)
                CreateByteField (Arg2, 0x05, PRE5)
                CreateByteField (Arg2, 0x06, PRE6)
                CreateByteField (Arg2, 0x07, PRE7)
                Acquire (^^WMI1.MWMI, 0xFFFF)
                WLS0 = PRE0 /* \_SB_.WMI2.WMA8.PRE0 */
                WLS1 = PRE1 /* \_SB_.WMI2.WMA8.PRE1 */
                WLS2 = PRE2 /* \_SB_.WMI2.WMA8.PRE2 */
                WLS3 = PRE3 /* \_SB_.WMI2.WMA8.PRE3 */
                WLS4 = PRE4 /* \_SB_.WMI2.WMA8.PRE4 */
                WLS5 = PRE5 /* \_SB_.WMI2.WMA8.PRE5 */
                WLS6 = PRE6 /* \_SB_.WMI2.WMA8.PRE6 */
                WLS7 = PRE7 /* \_SB_.WMI2.WMA8.PRE7 */
                WMIS (0x08, 0x00)
                Release (^^WMI1.MWMI)
            }

            Name (ITEM, Package (0x07)
            {
                Package (0x02)
                {
                    0x00, 
                    "InhibitEnteringThinkPadSetup"
                }, 

                Package (0x02)
                {
                    0x03, 
                    "MTMSerialConcatenation"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "SwapProductName"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "ComputraceMsgDisable"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "CpuDebugEnable"
                }, 

                Package (0x02)
                {
                    0x00, 
                    "PasswordAfterBootDeviceList"
                }, 

                Package (0x02)
                {
                    0x02, 
                    "SpecialCharForPassword"
                }
            })
            Name (VSEL, Package (0x04)
            {
                Package (0x02)
                {
                    "Disable", 
                    "Enable"
                }, 

                Package (0x02)
                {
                    "Off", 
                    "On"
                }, 

                Package (0x05)
                {
                    "Disable", 
                    "409", 
                    "411", 
                    "412", 
                    "809"
                }, 

                Package (0x06)
                {
                    "Disable", 
                    "Enable", 
                    "Default", 
                    "MTMSN", 
                    "1SMTMSN", 
                    "MTSN"
                }
            })
            Method (WQA9, 1, NotSerialized)
            {
                Acquire (^^WMI1.MWMI, 0xFFFF)
                If ((WMIS (0x09, Arg0) != 0x00))
                {
                    Release (^^WMI1.MWMI)
                    Return ("")
                }

                Local0 = DerefOf (ITEM [WITM])
                Local1 = DerefOf (Local0 [0x00])
                Local2 = DerefOf (Local0 [0x01])
                Concatenate (Local2, ",", Local6)
                Local3 = DerefOf (VSEL [Local1])
                Concatenate (Local6, DerefOf (Local3 [WSEL]), Local7)
                Release (^^WMI1.MWMI)
                Return (Local7)
            }

            Method (WMAA, 3, NotSerialized)
            {
                Acquire (^^WMI1.MWMI, 0xFFFF)
                If ((SizeOf (Arg2) == 0x00))
                {
                    Local0 = 0x02
                }
                Else
                {
                    Local0 = ^^WMI1.CARG (Arg2)
                    If ((Local0 == 0x00))
                    {
                        Local0 = ^^WMI1.WSET (ITEM, VSEL)
                        If ((Local0 == 0x00))
                        {
                            Local0 = WMIS (0x0A, 0x00)
                        }
                    }
                }

                Release (^^WMI1.MWMI)
                Return (DerefOf (^^WMI1.RETN [Local0]))
            }

            Name (WQBB, Buffer (0x0538)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0x28, 0x05, 0x00, 0x00, 0xAE, 0x18, 0x00, 0x00,  // (.......
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0x98, 0xDE, 0x8B, 0x00, 0x01, 0x06, 0x18, 0x42,  // .......B
                /* 0020 */  0x10, 0x0D, 0x10, 0x8A, 0x0D, 0x21, 0x02, 0x0B,  // .....!..
                /* 0028 */  0x83, 0x50, 0x50, 0x18, 0x14, 0xA0, 0x45, 0x41,  // .PP...EA
                /* 0030 */  0xC8, 0x05, 0x14, 0x95, 0x02, 0x21, 0xC3, 0x02,  // .....!..
                /* 0038 */  0x14, 0x0B, 0x70, 0x2E, 0x40, 0xBA, 0x00, 0xE5,  // ..p.@...
                /* 0040 */  0x28, 0x72, 0x0C, 0x22, 0x02, 0xF7, 0xEF, 0x0F,  // (r."....
                /* 0048 */  0x31, 0x10, 0x88, 0x14, 0x40, 0x48, 0x28, 0x84,  // 1...@H(.
                /* 0050 */  0x44, 0x00, 0x53, 0x21, 0x70, 0x84, 0xA0, 0x5F,  // D.S!p.._
                /* 0058 */  0x01, 0x08, 0x1D, 0x0A, 0x90, 0x29, 0xC0, 0xA0,  // .....)..
                /* 0060 */  0x00, 0xA7, 0x08, 0x22, 0x88, 0xD2, 0xB2, 0x00,  // ..."....
                /* 0068 */  0xDD, 0x02, 0x7C, 0x0B, 0xD0, 0x0E, 0x21, 0xB4,  // ..|...!.
                /* 0070 */  0xC8, 0x95, 0x0A, 0xB0, 0x08, 0x25, 0x9F, 0x80,  // .....%..
                /* 0078 */  0x92, 0x88, 0x22, 0xD9, 0x78, 0xB2, 0x8D, 0x48,  // ..".x..H
                /* 0080 */  0xE6, 0x61, 0x91, 0x83, 0x40, 0x89, 0x19, 0x04,  // .a..@...
                /* 0088 */  0x4A, 0x27, 0xAE, 0x6C, 0xE2, 0x6A, 0x10, 0x07,  // J'.l.j..
                /* 0090 */  0x10, 0xE5, 0x3C, 0xA2, 0x24, 0x38, 0xAA, 0x83,  // ..<.$8..
                /* 0098 */  0x88, 0x10, 0xBB, 0x5C, 0x01, 0x92, 0x07, 0x20,  // ...\... 
                /* 00A0 */  0xCD, 0x13, 0x93, 0xF5, 0x39, 0x68, 0x64, 0x6C,  // ....9hdl
                /* 00A8 */  0x04, 0x3C, 0x98, 0x04, 0x10, 0x16, 0x65, 0x9D,  // .<....e.
                /* 00B0 */  0x8A, 0x02, 0x83, 0xF2, 0x00, 0x22, 0x39, 0x63,  // ....."9c
                /* 00B8 */  0x45, 0x01, 0xDB, 0xEB, 0x44, 0x64, 0x72, 0xA0,  // E...Ddr.
                /* 00C0 */  0x54, 0x12, 0x1C, 0x6A, 0x98, 0x9E, 0x5A, 0xF3,  // T..j..Z.
                /* 00C8 */  0x13, 0xD3, 0x44, 0x4E, 0xAD, 0xE9, 0x21, 0x0B,  // ..DN..!.
                /* 00D0 */  0x92, 0x49, 0x1B, 0x0A, 0x6A, 0xEC, 0x9E, 0xD6,  // .I..j...
                /* 00D8 */  0x49, 0x79, 0xA6, 0x11, 0x0F, 0xCA, 0x30, 0x09,  // Iy....0.
                /* 00E0 */  0x3C, 0x0A, 0x86, 0xC6, 0x09, 0xCA, 0x82, 0x90,  // <.......
                /* 00E8 */  0x83, 0x81, 0xA2, 0x00, 0x4F, 0xC2, 0x73, 0x2C,  // ....O.s,
                /* 00F0 */  0x5E, 0x80, 0xF0, 0x11, 0x93, 0xB3, 0x40, 0x8C,  // ^.....@.
                /* 00F8 */  0x04, 0x3E, 0x13, 0x78, 0xE4, 0xC7, 0x8C, 0x1D,  // .>.x....
                /* 0100 */  0x51, 0xB8, 0x80, 0xE7, 0x73, 0x0C, 0x91, 0xE3,  // Q...s...
                /* 0108 */  0x1E, 0x6A, 0x8C, 0xA3, 0x88, 0x7C, 0x38, 0x0C,  // .j...|8.
                /* 0110 */  0xED, 0x74, 0xE3, 0x1C, 0xD8, 0xE9, 0x14, 0x04,  // .t......
                /* 0118 */  0x2E, 0x90, 0x60, 0x3D, 0xCF, 0x59, 0x20, 0xFF,  // ..`=.Y .
                /* 0120 */  0xFF, 0x18, 0x07, 0xC1, 0xF0, 0x8E, 0x01, 0x23,  // .......#
                /* 0128 */  0x03, 0x42, 0x1E, 0x05, 0x58, 0x1D, 0x96, 0x26,  // .B..X..&
                /* 0130 */  0x91, 0xC0, 0xEE, 0x05, 0x68, 0xBC, 0x04, 0x48,  // ....h..H
                /* 0138 */  0xE1, 0x20, 0xA5, 0x0C, 0x42, 0x30, 0x8D, 0x09,  // . ..B0..
                /* 0140 */  0xB0, 0x75, 0x68, 0x90, 0x37, 0x01, 0xD6, 0xAE,  // .uh.7...
                /* 0148 */  0x02, 0x42, 0x89, 0x74, 0x02, 0x71, 0x42, 0x44,  // .B.t.qBD
                /* 0150 */  0x89, 0x18, 0xD4, 0x40, 0x51, 0x6A, 0x43, 0x15,  // ...@QjC.
                /* 0158 */  0x4C, 0x67, 0xC3, 0x13, 0x66, 0xDC, 0x10, 0x31,  // Lg..f..1
                /* 0160 */  0x0C, 0x14, 0xB7, 0xFD, 0x41, 0x90, 0x61, 0xE3,  // ....A.a.
                /* 0168 */  0xC6, 0xEF, 0x41, 0x9D, 0xD6, 0xD9, 0x1D, 0xD3,  // ..A.....
                /* 0170 */  0xAB, 0x82, 0x09, 0x3C, 0xE9, 0x37, 0x84, 0xA7,  // ...<.7..
                /* 0178 */  0x83, 0xA3, 0x38, 0xDA, 0xA8, 0x31, 0x9A, 0x23,  // ..8..1.#
                /* 0180 */  0x65, 0xAB, 0xD6, 0xB9, 0xC2, 0x91, 0xE0, 0x51,  // e......Q
                /* 0188 */  0xE7, 0x05, 0x9F, 0x0C, 0x3C, 0xB4, 0xC3, 0xF6,  // ....<...
                /* 0190 */  0x60, 0xCF, 0xD2, 0x43, 0x38, 0x82, 0x67, 0x86,  // `..C8.g.
                /* 0198 */  0x47, 0x02, 0x8F, 0x81, 0xDD, 0x15, 0x7C, 0x08,  // G.....|.
                /* 01A0 */  0xF0, 0x19, 0x01, 0xEF, 0x1A, 0x50, 0x97, 0x83,  // .....P..
                /* 01A8 */  0x47, 0x03, 0x36, 0xE9, 0x70, 0x98, 0xF1, 0x7A,  // G.6.p..z
                /* 01B0 */  0xEE, 0x9E, 0xBA, 0xCF, 0x18, 0xFC, 0xBC, 0xE1,  // ........
                /* 01B8 */  0xC1, 0xE1, 0x46, 0x7A, 0x32, 0x47, 0x56, 0xAA,  // ..Fz2GV.
                /* 01C0 */  0x00, 0xB3, 0xD7, 0x00, 0x1D, 0x25, 0x7C, 0xE0,  // .....%|.
                /* 01C8 */  0x60, 0x77, 0x81, 0xA7, 0x00, 0x13, 0x58, 0xFE,  // `w....X.
                /* 01D0 */  0x20, 0x50, 0x23, 0x33, 0xB4, 0xC7, 0xFB, 0xDE,  //  P#3....
                /* 01D8 */  0x61, 0xC8, 0x27, 0x85, 0xC3, 0x62, 0x62, 0x0F,  // a.'..bb.
                /* 01E0 */  0x1E, 0x74, 0x3C, 0xE0, 0xBF, 0x8F, 0x3C, 0x69,  // .t<...<i
                /* 01E8 */  0x78, 0xFA, 0x9E, 0xAF, 0x09, 0x06, 0x86, 0x90,  // x.......
                /* 01F0 */  0x95, 0xF1, 0xA0, 0x06, 0x62, 0xE8, 0x57, 0x85,  // ....b.W.
                /* 01F8 */  0xC3, 0x38, 0x0D, 0x9F, 0x40, 0x7C, 0x0E, 0x08,  // .8..@|..
                /* 0200 */  0x12, 0xE3, 0x98, 0x3C, 0x38, 0xFF, 0xFF, 0x09,  // ...<8...
                /* 0208 */  0x1C, 0x6B, 0xE4, 0xF4, 0x9C, 0xE2, 0xF3, 0x04,  // .k......
                /* 0210 */  0x3F, 0x5C, 0xF8, 0x3C, 0xC1, 0x4E, 0x0C, 0xA7,  // ?\.<.N..
                /* 0218 */  0xF1, 0x1C, 0xE0, 0xE1, 0x9C, 0x95, 0x8F, 0x13,  // ........
                /* 0220 */  0xC0, 0x02, 0xE2, 0x75, 0x82, 0x0F, 0x14, 0x3E,  // ...u...>
                /* 0228 */  0xEC, 0xA1, 0x79, 0x14, 0x2F, 0x11, 0x6F, 0x0F,  // ..y./.o.
                /* 0230 */  0x26, 0x88, 0xF6, 0x10, 0x03, 0xC6, 0x19, 0xE1,  // &.......
                /* 0238 */  0xCE, 0x1B, 0x70, 0x4E, 0x31, 0xC0, 0x03, 0xEA,  // ..pN1...
                /* 0240 */  0x10, 0x30, 0x87, 0x09, 0x0F, 0x81, 0x0F, 0xE0,  // .0......
                /* 0248 */  0x19, 0xE4, 0x1C, 0x7D, 0xCC, 0x39, 0x33, 0xDC,  // ...}.93.
                /* 0250 */  0x71, 0x07, 0x6C, 0xC3, 0xE0, 0x91, 0x2D, 0x80,  // q.l...-.
                /* 0258 */  0xB0, 0x38, 0x4F, 0x02, 0x05, 0x7C, 0x1B, 0x50,  // .8O..|.P
                /* 0260 */  0x18, 0x1F, 0x6E, 0xC0, 0xFB, 0xFF, 0x3F, 0xDC,  // ..n...?.
                /* 0268 */  0x00, 0xD7, 0xF3, 0x01, 0xEE, 0xF8, 0x00, 0xF7,  // ........
                /* 0270 */  0x62, 0xC1, 0x0E, 0x0F, 0x8F, 0x37, 0xC0, 0x60,  // b....7.`
                /* 0278 */  0x48, 0x8F, 0x34, 0x6F, 0x35, 0x31, 0x5E, 0x6D,  // H.4o51^m
                /* 0280 */  0x42, 0x44, 0x78, 0xA8, 0x79, 0xB7, 0x31, 0x52,  // BDx.y.1R
                /* 0288 */  0xBC, 0xC7, 0x1B, 0x76, 0x8D, 0x39, 0x8B, 0x07,  // ...v.9..
                /* 0290 */  0x90, 0x28, 0xC5, 0xA1, 0xE9, 0x62, 0x13, 0x23,  // .(...b.#
                /* 0298 */  0xCA, 0x9B, 0x8D, 0x61, 0xDF, 0x74, 0x0C, 0x14,  // ...a.t..
                /* 02A0 */  0x2A, 0x52, 0x84, 0x30, 0x2F, 0x16, 0x21, 0x1E,  // *R.0/.!.
                /* 02A8 */  0x6F, 0xC0, 0x2C, 0xE9, 0xA5, 0xA2, 0xCF, 0x81,  // o.,.....
                /* 02B0 */  0x8F, 0x37, 0x80, 0x97, 0xFF, 0xFF, 0xF1, 0x06,  // .7......
                /* 02B8 */  0xF0, 0x30, 0x0C, 0x1F, 0x53, 0xC0, 0x76, 0x73,  // .0..S.vs
                /* 02C0 */  0x60, 0xF7, 0x14, 0xF8, 0xE7, 0x14, 0xC0, 0x91,  // `.......
                /* 02C8 */  0x90, 0x47, 0x80, 0x0E, 0x1E, 0x16, 0x01, 0x22,  // .G....."
                /* 02D0 */  0x1B, 0xCF, 0x00, 0x9F, 0x89, 0xA8, 0x40, 0x2A,  // ......@*
                /* 02D8 */  0xCD, 0x14, 0x2C, 0xE3, 0x14, 0xAC, 0x4E, 0x88,  // ..,...N.
                /* 02E0 */  0x5C, 0x06, 0x85, 0x44, 0x40, 0x68, 0x64, 0x86,  // \..D@hd.
                /* 02E8 */  0xF3, 0x21, 0xD1, 0x60, 0x06, 0xF1, 0xF9, 0xC0,  // .!.`....
                /* 02F0 */  0x67, 0x0A, 0x9F, 0x9C, 0xF8, 0xFF, 0xFF, 0xE4,  // g.......
                /* 02F8 */  0x04, 0x9E, 0x83, 0xC9, 0x43, 0x05, 0x2C, 0x44,  // ....C.,D
                /* 0300 */  0x9F, 0x16, 0x38, 0x9C, 0xCF, 0x2C, 0x1C, 0xCE,  // ..8..,..
                /* 0308 */  0x47, 0x12, 0x7E, 0x80, 0xE4, 0x47, 0x25, 0x70,  // G.~..G%p
                /* 0310 */  0x09, 0x3C, 0x34, 0x80, 0x02, 0xC8, 0xF7, 0x03,  // .<4.....
                /* 0318 */  0x9F, 0x03, 0x9E, 0x11, 0xD8, 0x1C, 0x1E, 0x09,  // ........
                /* 0320 */  0x7C, 0x20, 0x60, 0xF0, 0x3C, 0xDA, 0xA8, 0xE8,  // | `.<...
                /* 0328 */  0xD1, 0xC6, 0xC3, 0xE3, 0x47, 0x06, 0xCF, 0xE7,  // ....G...
                /* 0330 */  0x81, 0xE0, 0x28, 0x1F, 0x09, 0x70, 0x18, 0xEF,  // ..(..p..
                /* 0338 */  0x17, 0x1E, 0xA2, 0x4F, 0x39, 0xB0, 0x26, 0x72,  // ...O9.&r
                /* 0340 */  0xD4, 0x16, 0x7D, 0x22, 0x10, 0xE8, 0x33, 0x17,  // ..}"..3.
                /* 0348 */  0xE6, 0x94, 0x03, 0x9C, 0x82, 0x8F, 0x1E, 0x15,  // ........
                /* 0350 */  0xF5, 0x40, 0x0A, 0xDA, 0x93, 0x82, 0xCF, 0x0A,  // .@......
                /* 0358 */  0x3E, 0x7C, 0xC1, 0xFF, 0xFF, 0x1F, 0xBE, 0xE0,  // >|......
                /* 0360 */  0xCC, 0xEB, 0x65, 0xCD, 0x07, 0x8E, 0x38, 0x67,  // ..e...8g
                /* 0368 */  0x71, 0xBA, 0xEF, 0x16, 0xF8, 0x13, 0x29, 0x30,  // q.....)0
                /* 0370 */  0x0B, 0x72, 0x22, 0x45, 0xC1, 0xF8, 0x44, 0x0A,  // .r"E..D.
                /* 0378 */  0xD8, 0xBC, 0x05, 0x60, 0xAF, 0x0B, 0x4F, 0x22,  // ...`..O"
                /* 0380 */  0x30, 0xCE, 0x11, 0xCF, 0x58, 0x30, 0x0F, 0x55,  // 0...X0.U
                /* 0388 */  0xA7, 0xF8, 0x52, 0xF5, 0xC6, 0x10, 0xE1, 0xC9,  // ..R.....
                /* 0390 */  0xEA, 0x35, 0xEA, 0x01, 0xCB, 0x60, 0x2F, 0x02,  // .5...`/.
                /* 0398 */  0x86, 0x79, 0xC5, 0xF2, 0xE9, 0x2A, 0xC4, 0x03,  // .y...*..
                /* 03A0 */  0x96, 0xCF, 0x5A, 0xD1, 0x42, 0x84, 0x8C, 0x12,  // ..Z.B...
                /* 03A8 */  0xEC, 0x15, 0xEB, 0x55, 0xC6, 0x47, 0x2A, 0x83,  // ...U.G*.
                /* 03B0 */  0x07, 0x0C, 0x1B, 0x2D, 0x52, 0x84, 0x47, 0x2C,  // ...-R.G,
                /* 03B8 */  0xFC, 0xFF, 0xFF, 0x88, 0x05, 0x1E, 0x09, 0x07,  // ........
                /* 03C0 */  0x52, 0x80, 0x2A, 0x03, 0xC7, 0x1D, 0x48, 0x81,  // R.*...H.
                /* 03C8 */  0xFD, 0x69, 0x02, 0x7F, 0xBD, 0xF0, 0x78, 0xB0,  // .i....x.
                /* 03D0 */  0xFF, 0xFF, 0x73, 0x00, 0xF8, 0x0E, 0x31, 0xC0,  // ..s...1.
                /* 03D8 */  0x60, 0xC0, 0x30, 0x0E, 0x31, 0xC0, 0x43, 0xF0,  // `.0.1.C.
                /* 03E0 */  0xC9, 0x0C, 0xF4, 0xC7, 0x1D, 0xF8, 0xE3, 0xE0,  // ........
                /* 03E8 */  0x19, 0x9F, 0x1C, 0x26, 0x50, 0x98, 0x13, 0x29,  // ...&P..)
                /* 03F0 */  0x0A, 0xC6, 0x27, 0x52, 0xC0, 0xD9, 0xFF, 0xFF,  // ..'R....
                /* 03F8 */  0x70, 0x05, 0x86, 0xE3, 0x0D, 0xF8, 0x6F, 0x33,  // p.....o3
                /* 0400 */  0x3E, 0x84, 0xFA, 0x7C, 0xE3, 0x0B, 0xA9, 0x21,  // >..|...!
                /* 0408 */  0x5E, 0x6C, 0xDE, 0xD4, 0x5E, 0x09, 0x5E, 0xDF,  // ^l..^.^.
                /* 0410 */  0xD9, 0xB5, 0xE6, 0xF5, 0xDD, 0xA7, 0x82, 0x27,  // .......'
                /* 0418 */  0xD1, 0x08, 0x21, 0xA3, 0xBC, 0xE4, 0x18, 0x24,  // ..!....$
                /* 0420 */  0xC4, 0xEB, 0xA8, 0x01, 0x83, 0x05, 0x89, 0x78,  // .......x
                /* 0428 */  0x0A, 0x4F, 0x3B, 0x8F, 0x37, 0xE0, 0x15, 0x75,  // .O;.7..u
                /* 0430 */  0x20, 0x05, 0xE8, 0xF1, 0xFF, 0x3F, 0x90, 0x02,  //  ....?..
                /* 0438 */  0x83, 0x7B, 0x0A, 0xEC, 0x73, 0x0A, 0xE0, 0x29,  // .{..s..)
                /* 0440 */  0xF9, 0x89, 0x94, 0xA6, 0x3E, 0x91, 0xA2, 0x15,  // ....>...
                /* 0448 */  0x01, 0x69, 0xAA, 0x60, 0x21, 0x98, 0xFE, 0x44,  // .i.`!..D
                /* 0450 */  0x4A, 0x0F, 0x06, 0xCE, 0x4D, 0xA2, 0xE4, 0x43,  // J...M..C
                /* 0458 */  0xA3, 0x70, 0xCE, 0x7A, 0x20, 0xA1, 0x20, 0x06,  // .p.z . .
                /* 0460 */  0x74, 0x90, 0x43, 0x05, 0xFA, 0xAC, 0xE2, 0x03,  // t.C.....
                /* 0468 */  0xC9, 0x81, 0x3C, 0x22, 0x7A, 0x58, 0x3E, 0x54,  // ..<"zX>T
                /* 0470 */  0xFA, 0xAE, 0xE2, 0x73, 0x88, 0x8F, 0x14, 0x1E,  // ...s....
                /* 0478 */  0xBF, 0x0F, 0x0B, 0xFC, 0x3F, 0xE3, 0xE3, 0x28,  // ....?..(
                /* 0480 */  0x03, 0xAF, 0xE6, 0xBC, 0x82, 0x02, 0xF3, 0x69,  // .......i
                /* 0488 */  0x14, 0xA3, 0xEB, 0x3E, 0x01, 0x92, 0xFF, 0xFF,  // ...>....
                /* 0490 */  0xFC, 0xB8, 0xBE, 0xC3, 0x28, 0xC8, 0xD1, 0x79,  // ....(..y
                /* 0498 */  0xF8, 0xC9, 0xA2, 0xE2, 0x4E, 0x96, 0x82, 0x78,  // ....N..x
                /* 04A0 */  0xB2, 0x8E, 0x32, 0x59, 0xF4, 0x4C, 0x7C, 0xBB,  // ..2Y.L|.
                /* 04A8 */  0xF0, 0x8C, 0xDE, 0xBB, 0x7C, 0x83, 0x65, 0x37,  // ....|.e7
                /* 04B0 */  0x59, 0x78, 0x97, 0x81, 0x90, 0x8F, 0x06, 0xBE,  // Yx......
                /* 04B8 */  0xC9, 0xC2, 0x1D, 0x8B, 0x2F, 0x23, 0xE0, 0xBB,  // ..../#..
                /* 04C0 */  0xC9, 0x02, 0x5E, 0x47, 0xE3, 0xB3, 0x05, 0x3B,  // ..^G...;
                /* 04C8 */  0x85, 0xF8, 0xBA, 0x06, 0x4B, 0xA1, 0x4D, 0x9F,  // ....K.M.
                /* 04D0 */  0x1A, 0x8D, 0x5A, 0xFD, 0xFF, 0x1B, 0x94, 0xA9,  // ..Z.....
                /* 04D8 */  0x51, 0xA6, 0x41, 0xAD, 0x3E, 0x95, 0x1A, 0x33,  // Q.A.>..3
                /* 04E0 */  0x76, 0xA1, 0xB0, 0xB8, 0x0B, 0x06, 0x95, 0xB4,  // v.......
                /* 04E8 */  0x2C, 0x8D, 0xCB, 0x81, 0x40, 0x68, 0x80, 0x5B,  // ,...@h.[
                /* 04F0 */  0xA9, 0x40, 0x1C, 0xFA, 0x0B, 0xA4, 0x53, 0x02,  // .@....S.
                /* 04F8 */  0xF9, 0x6A, 0x09, 0xC8, 0x62, 0x57, 0x25, 0x10,  // .j..bW%.
                /* 0500 */  0xCB, 0x54, 0x01, 0xD1, 0xC8, 0xDD, 0xC2, 0x20,  // .T..... 
                /* 0508 */  0x02, 0x72, 0xBC, 0x4F, 0x8D, 0x40, 0x1D, 0x49,  // .r.O.@.I
                /* 0510 */  0x07, 0x10, 0x13, 0xE4, 0x63, 0xAC, 0xF4, 0x25,  // ....c..%
                /* 0518 */  0x20, 0x10, 0xCB, 0xA6, 0x15, 0xA0, 0xE5, 0x3A,  //  ......:
                /* 0520 */  0x01, 0x62, 0x61, 0x41, 0x68, 0xC0, 0x5F, 0xB5,  // .baAh._.
                /* 0528 */  0x86, 0xE0, 0xB4, 0x20, 0x02, 0x72, 0x32, 0x2D,  // ... .r2-
                /* 0530 */  0x40, 0x2C, 0x27, 0x88, 0x80, 0xFC, 0xFF, 0x07   // @,'.....
            })
        }

        Device (WMI3)
        {
            Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Name (_WDG, /**** Is ResourceTemplate, but EndTag not at buffer end ****/ Buffer (0x3C)
            {
                /* 0000 */  0x79, 0x36, 0x4D, 0x8F, 0x9E, 0x74, 0x79, 0x44,  // y6M..tyD
                /* 0008 */  0x9B, 0x16, 0xC6, 0x26, 0x01, 0xFD, 0x25, 0xF0,  // ...&..%.
                /* 0010 */  0x41, 0x42, 0x01, 0x02, 0x69, 0xE8, 0xD2, 0x85,  // AB..i...
                /* 0018 */  0x5A, 0x36, 0xCE, 0x4A, 0xA4, 0xD3, 0xCD, 0x69,  // Z6.J...i
                /* 0020 */  0x2B, 0x16, 0x98, 0xA0, 0x41, 0x43, 0x01, 0x02,  // +...AC..
                /* 0028 */  0x21, 0x12, 0x90, 0x05, 0x66, 0xD5, 0xD1, 0x11,  // !...f...
                /* 0030 */  0xB2, 0xF0, 0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10,  // ......).
                /* 0038 */  0x42, 0x43, 0x01, 0x00                           // BC..
            })
            Method (WMAB, 3, NotSerialized)
            {
                CreateByteField (Arg2, 0x00, ASS0)
                CreateWordField (Arg2, 0x01, ASS1)
                CreateByteField (Arg2, 0x03, ASS2)
                Acquire (^^WMI1.MWMI, 0xFFFF)
                WASB = ASS0 /* \_SB_.WMI3.WMAB.ASS0 */
                WASI = ASS1 /* \_SB_.WMI3.WMAB.ASS1 */
                WASD = ASS2 /* \_SB_.WMI3.WMAB.ASS2 */
                WMIS (0x0B, 0x00)
                Local0 = WASS /* \WASS */
                Release (^^WMI1.MWMI)
                Return (Local0)
            }

            Method (WMAC, 3, NotSerialized)
            {
                CreateByteField (Arg2, 0x00, ASS0)
                CreateWordField (Arg2, 0x01, ASS1)
                Acquire (^^WMI1.MWMI, 0xFFFF)
                WASB = ASS0 /* \_SB_.WMI3.WMAC.ASS0 */
                WASI = ASS1 /* \_SB_.WMI3.WMAC.ASS1 */
                WMIS (0x0C, Arg1)
                Local0 = WASS /* \WASS */
                Release (^^WMI1.MWMI)
                Return (Local0)
            }

            Name (WQBC, Buffer (0x040A)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0xFA, 0x03, 0x00, 0x00, 0x32, 0x12, 0x00, 0x00,  // ....2...
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0x98, 0xC3, 0x88, 0x00, 0x01, 0x06, 0x18, 0x42,  // .......B
                /* 0020 */  0x10, 0x07, 0x10, 0x8A, 0x0D, 0x21, 0x02, 0x0B,  // .....!..
                /* 0028 */  0x83, 0x50, 0x50, 0x18, 0x14, 0xA0, 0x45, 0x41,  // .PP...EA
                /* 0030 */  0xC8, 0x05, 0x14, 0x95, 0x02, 0x21, 0xC3, 0x02,  // .....!..
                /* 0038 */  0x14, 0x0B, 0x70, 0x2E, 0x40, 0xBA, 0x00, 0xE5,  // ..p.@...
                /* 0040 */  0x28, 0x72, 0x0C, 0x22, 0x02, 0xF7, 0xEF, 0x0F,  // (r."....
                /* 0048 */  0x31, 0x10, 0x88, 0x14, 0x40, 0x48, 0x28, 0x84,  // 1...@H(.
                /* 0050 */  0x44, 0x00, 0x53, 0x21, 0x70, 0x84, 0xA0, 0x5F,  // D.S!p.._
                /* 0058 */  0x01, 0x08, 0x1D, 0x0A, 0x90, 0x29, 0xC0, 0xA0,  // .....)..
                /* 0060 */  0x00, 0xA7, 0x08, 0x22, 0x88, 0xD2, 0xB2, 0x00,  // ..."....
                /* 0068 */  0xDD, 0x02, 0x7C, 0x0B, 0xD0, 0x0E, 0x21, 0xB4,  // ..|...!.
                /* 0070 */  0x58, 0x07, 0x11, 0x21, 0xD2, 0x31, 0x34, 0x29,  // X..!.14)
                /* 0078 */  0x40, 0xA2, 0x00, 0x8B, 0x02, 0x64, 0xC3, 0xC8,  // @....d..
                /* 0080 */  0x36, 0x22, 0x99, 0x87, 0x45, 0x0E, 0x02, 0x25,  // 6"..E..%
                /* 0088 */  0x66, 0x10, 0x28, 0x9D, 0xE0, 0xB2, 0x89, 0xAB,  // f.(.....
                /* 0090 */  0x41, 0x9C, 0x4C, 0x94, 0xF3, 0x88, 0x92, 0xE0,  // A.L.....
                /* 0098 */  0xA8, 0x0E, 0x22, 0x42, 0xEC, 0x72, 0x05, 0x48,  // .."B.r.H
                /* 00A0 */  0x1E, 0x80, 0x34, 0x4F, 0x4C, 0xD6, 0xE7, 0xA0,  // ..4OL...
                /* 00A8 */  0x91, 0xB1, 0x11, 0xF0, 0x94, 0x1A, 0x40, 0x58,  // ......@X
                /* 00B0 */  0xA0, 0x75, 0x2A, 0xE0, 0x7A, 0x0D, 0x43, 0x3D,  // .u*.z.C=
                /* 00B8 */  0x80, 0x48, 0xCE, 0x58, 0x51, 0xC0, 0xF6, 0x3A,  // .H.XQ..:
                /* 00C0 */  0x11, 0x8D, 0xEA, 0x40, 0x99, 0x24, 0x38, 0xD4,  // ...@.$8.
                /* 00C8 */  0x30, 0x3D, 0xB5, 0xE6, 0x27, 0xA6, 0x89, 0x9C,  // 0=..'...
                /* 00D0 */  0x5A, 0xD3, 0x43, 0x16, 0x24, 0x93, 0x36, 0x14,  // Z.C.$.6.
                /* 00D8 */  0xD4, 0xD8, 0x3D, 0xAD, 0x93, 0xF2, 0x4C, 0x23,  // ..=...L#
                /* 00E0 */  0x1E, 0x94, 0x61, 0x12, 0x78, 0x14, 0x0C, 0x8D,  // ..a.x...
                /* 00E8 */  0x13, 0x94, 0x75, 0x22, 0xA0, 0x03, 0xE5, 0x80,  // ..u"....
                /* 00F0 */  0x27, 0xE1, 0x39, 0x16, 0x2F, 0x40, 0xF8, 0x88,  // '.9./@..
                /* 00F8 */  0xC9, 0xB4, 0x4D, 0xE0, 0x33, 0x81, 0x87, 0x79,  // ..M.3..y
                /* 0100 */  0xCC, 0xD8, 0x11, 0x85, 0x0B, 0x78, 0x3E, 0xC7,  // .....x>.
                /* 0108 */  0x10, 0x39, 0xEE, 0xA1, 0xC6, 0x38, 0x8A, 0xC8,  // .9...8..
                /* 0110 */  0x47, 0x60, 0x24, 0x03, 0xC5, 0x2B, 0x08, 0x89,  // G`$..+..
                /* 0118 */  0x80, 0xF8, 0x76, 0x70, 0x70, 0x91, 0xFC, 0xFF,  // ..vpp...
                /* 0120 */  0x47, 0x89, 0x11, 0x2A, 0xC6, 0xDB, 0x00, 0x6E,  // G..*...n
                /* 0128 */  0x5E, 0x09, 0x8A, 0x1E, 0x07, 0x4A, 0x06, 0x84,  // ^....J..
                /* 0130 */  0x3C, 0x0A, 0xB0, 0x7A, 0x28, 0x20, 0x04, 0x16,  // <..z( ..
                /* 0138 */  0x27, 0x40, 0xE3, 0x38, 0x05, 0xD3, 0x99, 0x00,  // '@.8....
                /* 0140 */  0x6D, 0x02, 0xBC, 0x09, 0x30, 0x27, 0xC0, 0x16,  // m...0'..
                /* 0148 */  0x86, 0x80, 0x82, 0x9C, 0x59, 0x94, 0x20, 0x11,  // ....Y. .
                /* 0150 */  0x42, 0x31, 0x88, 0x0A, 0x05, 0x18, 0x43, 0x14,  // B1....C.
                /* 0158 */  0xCA, 0x3B, 0x41, 0x8C, 0xCA, 0x20, 0x74, 0x82,  // .;A.. t.
                /* 0160 */  0x08, 0x14, 0x3D, 0x78, 0x98, 0xD6, 0x40, 0x74,  // ..=x..@t
                /* 0168 */  0x89, 0xF0, 0xC8, 0xB1, 0x47, 0x00, 0x9F, 0x19,  // ....G...
                /* 0170 */  0xCE, 0xE9, 0x04, 0x1F, 0x01, 0xDE, 0x16, 0x4C,  // .......L
                /* 0178 */  0xE0, 0x79, 0xBF, 0x24, 0x1C, 0x6A, 0xD8, 0x03,  // .y.$.j..
                /* 0180 */  0x8E, 0x1A, 0xE3, 0x28, 0x12, 0x58, 0xD0, 0x33,  // ...(.X.3
                /* 0188 */  0x42, 0x16, 0x40, 0x14, 0x09, 0x1E, 0x75, 0x64,  // B.@...ud
                /* 0190 */  0xF0, 0xE1, 0xC0, 0x23, 0x3B, 0x72, 0xCF, 0xF0,  // ...#;r..
                /* 0198 */  0x04, 0x82, 0x1C, 0xC2, 0x11, 0x3C, 0x36, 0x3C,  // .....<6<
                /* 01A0 */  0x15, 0x78, 0x0C, 0xEC, 0xBA, 0xE0, 0x73, 0x80,  // .x....s.
                /* 01A8 */  0x8F, 0x09, 0x78, 0xD7, 0x80, 0x9A, 0xF3, 0xD3,  // ..x.....
                /* 01B0 */  0x01, 0x9B, 0x72, 0x38, 0xCC, 0x70, 0x3D, 0xFD,  // ..r8.p=.
                /* 01B8 */  0x70, 0x27, 0x70, 0xD2, 0x06, 0x64, 0xB3, 0xF3,  // p'p..d..
                /* 01C0 */  0xE0, 0x70, 0xE3, 0x3C, 0x99, 0x23, 0x2B, 0x55,  // .p.<.#+U
                /* 01C8 */  0x80, 0xD9, 0x13, 0x82, 0x4E, 0x13, 0x3E, 0x73,  // ....N.>s
                /* 01D0 */  0xB0, 0xBB, 0xC0, 0xF9, 0xF4, 0x0C, 0x49, 0xE4,  // ......I.
                /* 01D8 */  0x0F, 0x02, 0x35, 0x32, 0x43, 0xFB, 0x2C, 0xF0,  // ..52C.,.
                /* 01E0 */  0xEA, 0x61, 0xC8, 0x87, 0x85, 0xC3, 0x62, 0x62,  // .a....bb
                /* 01E8 */  0xCF, 0x1E, 0x74, 0x3C, 0xE0, 0x3F, 0x25, 0x3C,  // ..t<.?%<
                /* 01F0 */  0x6C, 0x78, 0xFA, 0x9E, 0xAF, 0x09, 0xA2, 0x3D,  // lx.....=
                /* 01F8 */  0x8F, 0x80, 0xE1, 0xFF, 0x7F, 0x1E, 0x81, 0x39,  // .......9
                /* 0200 */  0x9C, 0x07, 0x84, 0x27, 0x07, 0x76, 0x80, 0xC0,  // ...'.v..
                /* 0208 */  0x1C, 0x48, 0x80, 0xC9, 0xF9, 0x02, 0x77, 0x28,  // .H....w(
                /* 0210 */  0xF0, 0x10, 0xF8, 0x00, 0x1E, 0x25, 0xCE, 0xD1,  // .....%..
                /* 0218 */  0x4A, 0x67, 0x86, 0x3C, 0xB9, 0x80, 0x2D, 0xFB,  // Jg.<..-.
                /* 0220 */  0x1B, 0x40, 0x07, 0x0F, 0xE7, 0x06, 0x91, 0x8D,  // .@......
                /* 0228 */  0x57, 0x80, 0x09, 0x74, 0x38, 0xB1, 0x1E, 0x20,  // W..t8.. 
                /* 0230 */  0x4D, 0x14, 0x0C, 0x04, 0xD3, 0xD3, 0x6B, 0x00,  // M.....k.
                /* 0238 */  0x3E, 0x15, 0x38, 0x37, 0x89, 0x92, 0x0F, 0x8C,  // >.87....
                /* 0240 */  0xC2, 0x39, 0xEB, 0x79, 0x84, 0x82, 0x18, 0xD0,  // .9.y....
                /* 0248 */  0x41, 0x20, 0xE4, 0xE4, 0xA0, 0x80, 0x3A, 0xAA,  // A ....:.
                /* 0250 */  0xF8, 0x3C, 0x72, 0xAA, 0x0F, 0x3D, 0x9E, 0x94,  // .<r..=..
                /* 0258 */  0x47, 0xE1, 0xAB, 0x8A, 0x0F, 0x21, 0x3E, 0x4F,  // G....!>O
                /* 0260 */  0x78, 0xF4, 0x3E, 0x29, 0xF0, 0xEF, 0x8C, 0xAF,  // x.>)....
                /* 0268 */  0x0E, 0x46, 0xB7, 0x9A, 0xE3, 0x0A, 0x0A, 0xCC,  // .F......
                /* 0270 */  0x67, 0x11, 0x4E, 0x50, 0xD7, 0x6D, 0x01, 0xFA,  // g.NP.m..
                /* 0278 */  0x29, 0xE0, 0x08, 0x3C, 0x94, 0x77, 0x92, 0xC7,  // )..<.w..
                /* 0280 */  0x90, 0x04, 0xF5, 0x9D, 0x16, 0x40, 0x01, 0xE4,  // .....@..
                /* 0288 */  0x9B, 0x81, 0x4F, 0x02, 0x21, 0xFE, 0xFF, 0x4F,  // ..O.!..O
                /* 0290 */  0x07, 0x1E, 0xC3, 0xC3, 0x80, 0xD1, 0x8C, 0xCE,  // ........
                /* 0298 */  0xC3, 0x4F, 0x16, 0x15, 0x77, 0xB2, 0x14, 0xC4,  // .O..w...
                /* 02A0 */  0x93, 0x75, 0x94, 0xC9, 0xA2, 0x67, 0xE2, 0xAB,  // .u...g..
                /* 02A8 */  0x85, 0x27, 0x74, 0x4A, 0x41, 0xCE, 0xD1, 0x13,  // .'tJA...
                /* 02B0 */  0xF6, 0x55, 0x04, 0xD6, 0xF9, 0x20, 0xE4, 0x8B,  // .U... ..
                /* 02B8 */  0x81, 0xA7, 0x61, 0x38, 0x4F, 0x96, 0xC3, 0x79,  // ..a8O..y
                /* 02C0 */  0xB2, 0x7C, 0x2C, 0xBE, 0x6A, 0xC0, 0x1F, 0x2D,  // .|,.j..-
                /* 02C8 */  0x96, 0xA0, 0xC0, 0xD9, 0x82, 0x1C, 0x1E, 0x13,  // ........
                /* 02D0 */  0x6F, 0x54, 0xF4, 0x46, 0xE4, 0xE1, 0xF1, 0xCB,  // oT.F....
                /* 02D8 */  0x81, 0xE7, 0xF3, 0x8C, 0x70, 0x94, 0x6F, 0x12,  // ....p.o.
                /* 02E0 */  0x38, 0x8C, 0xC7, 0x12, 0x0F, 0xD1, 0x97, 0x23,  // 8......#
                /* 02E8 */  0x58, 0x13, 0x39, 0x69, 0xDF, 0x16, 0x4E, 0x36,  // X.9i..N6
                /* 02F0 */  0xE8, 0x4B, 0x10, 0xBB, 0x1C, 0x01, 0xBF, 0x88,  // .K......
                /* 02F8 */  0x26, 0x86, 0xC1, 0x22, 0x2D, 0x45, 0x11, 0x17,  // &.."-E..
                /* 0300 */  0x45, 0x61, 0x7C, 0xC5, 0x82, 0xFD, 0xFF, 0xBF,  // Ea|.....
                /* 0308 */  0x62, 0x01, 0x16, 0x04, 0x0F, 0x1B, 0x34, 0x87,  // b.....4.
                /* 0310 */  0x83, 0x97, 0x1E, 0x36, 0x6B, 0x38, 0x07, 0x99,  // ...6k8..
                /* 0318 */  0xD3, 0xF1, 0x48, 0x4E, 0x1B, 0xC6, 0x1D, 0x0B,  // ..HN....
                /* 0320 */  0xFE, 0x9D, 0xEA, 0xA9, 0xCA, 0xD3, 0x8A, 0xF2,  // ........
                /* 0328 */  0x64, 0xF5, 0x7A, 0xE5, 0x63, 0x96, 0xA1, 0xCE,  // d.z.c...
                /* 0330 */  0xE0, 0x1D, 0xCB, 0xB7, 0x3C, 0x4F, 0x21, 0x4A,  // ....<O!J
                /* 0338 */  0x9C, 0x97, 0x2D, 0x76, 0xC7, 0x32, 0x48, 0x50,  // ..-v.2HP
                /* 0340 */  0x23, 0x3F, 0x68, 0x31, 0x94, 0xE0, 0xF1, 0xDE,  // #?h1....
                /* 0348 */  0xB1, 0x00, 0x6F, 0xFF, 0xFF, 0x3B, 0x16, 0x60,  // ..o..;.`
                /* 0350 */  0xFC, 0x04, 0xC1, 0x09, 0x7C, 0xC7, 0x02, 0x1C,  // ....|...
                /* 0358 */  0xC5, 0x7E, 0x37, 0xE8, 0x4A, 0x45, 0xEE, 0x58,  // .~7.JE.X
                /* 0360 */  0x28, 0x0E, 0xAB, 0xB9, 0x63, 0x41, 0x9C, 0x28,  // (...cA.(
                /* 0368 */  0xE6, 0x8A, 0x05, 0x86, 0xFF, 0xFF, 0x15, 0x0B,  // ........
                /* 0370 */  0xE0, 0x75, 0xC0, 0x2B, 0x16, 0x68, 0xFE, 0xFF,  // .u.+.h..
                /* 0378 */  0x57, 0x2C, 0xF0, 0x5E, 0x8E, 0x80, 0xDF, 0x09,  // W,.^....
                /* 0380 */  0xD1, 0x77, 0x0D, 0x7E, 0x9A, 0xB6, 0xA2, 0xBB,  // .w.~....
                /* 0388 */  0x06, 0x94, 0x19, 0xBE, 0x07, 0xF9, 0xB0, 0x13,  // ........
                /* 0390 */  0x2C, 0xD2, 0xA3, 0x8D, 0x6F, 0x49, 0xE1, 0x7C,  // ,...oI.|
                /* 0398 */  0xDB, 0x00, 0xD8, 0xF2, 0xFF, 0xBF, 0x6D, 0x00,  // ......m.
                /* 03A0 */  0x4C, 0x19, 0xBF, 0x6F, 0x1B, 0xC0, 0x4F, 0xA1,  // L..o..O.
                /* 03A8 */  0x4D, 0x9F, 0x1A, 0x8D, 0x5A, 0x35, 0x28, 0x53,  // M...Z5(S
                /* 03B0 */  0xA3, 0x4C, 0x83, 0x5A, 0x7D, 0x2A, 0x35, 0x66,  // .L.Z}*5f
                /* 03B8 */  0x4C, 0xC9, 0xC1, 0xCE, 0x77, 0x0C, 0x2A, 0x6C,  // L...w.*l
                /* 03C0 */  0x65, 0x1A, 0x9A, 0x63, 0x81, 0xD0, 0x10, 0xC7,  // e..c....
                /* 03C8 */  0x26, 0x19, 0x01, 0x51, 0x22, 0x10, 0x01, 0x59,  // &..Q"..Y
                /* 03D0 */  0xFD, 0x6F, 0x42, 0x40, 0xCE, 0x02, 0x22, 0x20,  // .oB@.." 
                /* 03D8 */  0x2B, 0x58, 0x9A, 0xC0, 0x9D, 0xFF, 0xD8, 0x28,  // +X.....(
                /* 03E0 */  0x40, 0xA2, 0x02, 0x84, 0x29, 0x7D, 0x93, 0x09,  // @...)}..
                /* 03E8 */  0xD4, 0xB2, 0x41, 0x04, 0xF4, 0xFF, 0x3F, 0x42,  // ..A...?B
                /* 03F0 */  0xD9, 0x00, 0x62, 0x82, 0x41, 0x04, 0x64, 0x91,  // ..b.A.d.
                /* 03F8 */  0x3E, 0x80, 0x98, 0x62, 0x10, 0x01, 0x59, 0xDD,  // >..b..Y.
                /* 0400 */  0xA3, 0x40, 0x40, 0xD6, 0x0A, 0x22, 0x20, 0xFF,  // .@@.." .
                /* 0408 */  0xFF, 0x01                                       // ..
            })
        }

        Scope (PCI0.LPC0.EC0.HKEY)
        {
            Mutex (BFWM, 0x00)
            Method (MHCF, 1, NotSerialized)
            {
                Local0 = BFWC (Arg0)
                Return (Local0)
            }

            Method (MHPF, 1, NotSerialized)
            {
                Name (RETB, Buffer (0x25) {})
                Acquire (BFWM, 0xFFFF)
                If ((SizeOf (Arg0) <= 0x25))
                {
                    BFWB = Arg0
                    CHKS ()
                    If (BFWP ())
                    {
                        CHKS ()
                        BFWL ()
                    }

                    RETB = BFWB /* \BFWB */
                }

                Release (BFWM)
                Return (RETB) /* \_SB_.PCI0.LPC0.EC0_.HKEY.MHPF.RETB */
            }

            Method (MHIF, 1, NotSerialized)
            {
                Name (RETB, Buffer (0x0A) {})
                Acquire (BFWM, 0xFFFF)
                BFWG (Arg0)
                RETB = BFWB /* \BFWB */
                Release (BFWM)
                Return (RETB) /* \_SB_.PCI0.LPC0.EC0_.HKEY.MHIF.RETB */
            }

            Method (MHDM, 1, NotSerialized)
            {
                BDMC (Arg0)
            }
        }

        Scope (PCI0.LPC0.EC0.HKEY)
        {
            Method (PSSG, 1, NotSerialized)
            {
                Return (PSIF (0x00, 0x00))
            }

            Method (PSSS, 1, NotSerialized)
            {
                Return (PSIF (0x01, Arg0))
            }

            Method (PSBS, 1, NotSerialized)
            {
                Return (PSIF (0x02, Arg0))
            }

            Method (BICG, 1, NotSerialized)
            {
                Return (PSIF (0x03, Arg0))
            }

            Method (BICS, 1, NotSerialized)
            {
                Return (PSIF (0x04, Arg0))
            }

            Method (BCTG, 1, NotSerialized)
            {
                Return (PSIF (0x05, Arg0))
            }

            Method (BCCS, 1, NotSerialized)
            {
                Return (PSIF (0x06, Arg0))
            }

            Method (BCSG, 1, NotSerialized)
            {
                Return (PSIF (0x07, Arg0))
            }

            Method (BCSS, 1, NotSerialized)
            {
                Return (PSIF (0x08, Arg0))
            }

            Method (BDSG, 1, NotSerialized)
            {
                Return (PSIF (0x09, Arg0))
            }

            Method (BDSS, 1, NotSerialized)
            {
                Return (PSIF (0x0A, Arg0))
            }
        }

        Scope (PCI0.LPC0.EC0.HKEY)
        {
            Method (GILN, 0, NotSerialized)
            {
                Return ((0x02 | ILNF))
            }

            Method (SILN, 1, NotSerialized)
            {
                If ((0x01 == Arg0))
                {
                    ILNF = 0x01
                    BBLS = 0x00
                    Return (0x00)
                }
                ElseIf ((0x02 == Arg0))
                {
                    ILNF = 0x00
                    BBLS = 0x01
                    Return (0x00)
                }
                Else
                {
                    Return (0x01)
                }
            }

            Method (GLSI, 0, NotSerialized)
            {
                If (H8DR)
                {
                    Return ((0x02 + HPLD))
                }
                ElseIf ((RBEC (0x46) & 0x04))
                {
                    Return (0x03)
                }
                Else
                {
                    Return (0x02)
                }
            }
        }

        Scope (PCI0.LPC0.EC0.HKEY)
        {
            Method (GDLN, 0, NotSerialized)
            {
                Return ((0x02 | PLUX))
            }

            Method (SDLN, 1, NotSerialized)
            {
                If ((0x01 == Arg0))
                {
                    PLUX = 0x01
                    Return (0x00)
                }
                ElseIf ((0x02 == Arg0))
                {
                    PLUX = 0x00
                    Return (0x00)
                }
                Else
                {
                    Return (0x01)
                }
            }
        }

        Scope (PCI0.LPC0.EC0.HKEY)
        {
            Method (FPSW, 1, Serialized)
            {
                Switch ((Arg0 & 0xFFFF))
                {
                    Case (0x0100)
                    {
                        Local0 = GLFP ()
                        FPSU = Local0
                        Local1 = (Local0 <<= 0x01 | 0x01)
                        Return (Local1)
                    }
                    Case (0x0101)
                    {
                        Local0 = (Arg0 >> 0x10)
                        SLFP (Local0)
                        Return (0x00)
                    }
                    Default
                    {
                        Return (0x80000000)
                    }

                }

                Return (0x00)
            }

            Method (GLFP, 0, NotSerialized)
            {
                If ((FPCI (0x00, 0x00) == 0x01))
                {
                    Return (0x01)
                }
                Else
                {
                    Return (0x00)
                }
            }

            Method (SLFP, 1, NotSerialized)
            {
                If ((Arg0 == 0x01))
                {
                    FPSU = 0x01
                    FPCI (0x01, 0x01)
                }
                Else
                {
                    FPSU = 0x00
                    FPCI (0x01, 0x00)
                }
            }
        }
    }

    Scope (\)
    {
        Name (HPDT, Package (0x09)
        {
            "LEGACYHP", 
            0x80000000, 
            0x80000000, 
            "NATIVEHP", 
            0x80000000, 
            0x80000000, 
            "THERMALX", 
            0x80000000, 
            0x80000000
        })
        Name (DDB0, 0x00)
        Name (DDB1, 0x00)
        Name (DDB2, 0x00)
    }

    Scope (_GPE)
    {
        Method (_L08, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.GPP0, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP1, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP2, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP3, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP4, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP5, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP6, 0x02) // Device Wake
            Notify (\_SB.PCI0.GP17, 0x02) // Device Wake
            Notify (\_SB.PCI0.GP18, 0x02) // Device Wake
            Local0 = \_SB.PCI0.LPC0.EC0.HWAK
            RRBF = Local0
            If ((Local0 & 0x01)) {}
            If ((Local0 & 0x02)) {}
            If ((Local0 & 0x04))
            {
                Notify (\_SB.LID, 0x02) // Device Wake
            }

            If ((Local0 & 0x08))
            {
                Notify (\_SB.SLPB, 0x02) // Device Wake
            }

            If ((Local0 & 0x10))
            {
                Notify (\_SB.SLPB, 0x02) // Device Wake
            }

            If ((Local0 & 0x80))
            {
                Notify (\_SB.SLPB, 0x02) // Device Wake
            }

            \_SB.PCI0.LPC0.EC0.HWAK = 0x00
        }

        Method (_L19, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.GP17.XHC0, 0x02) // Device Wake
            If ((RV2 == 0x00))
            {
                Notify (\_SB.PCI0.GP17.XHC1, 0x02) // Device Wake
            }
        }
    }

    OperationRegion (DBGW, SystemIO, 0x80, 0x02)
    Field (DBGW, WordAcc, NoLock, Preserve)
    {
        P80W,   16
    }

    OperationRegion (DBGD, SystemIO, 0x80, 0x04)
    Field (DBGD, DWordAcc, NoLock, Preserve)
    {
        P80D,   32
    }

    Name (TSOS, 0x75)
    If (CondRefOf (\_OSI))
    {
        If (_OSI ("Windows 2009"))
        {
            TSOS = 0x50
        }

        If (_OSI ("Windows 2015"))
        {
            TSOS = 0x70
        }
    }

    Scope (_SB)
    {
        OperationRegion (SMIC, SystemMemory, 0xFED80000, 0x00800000)
        Field (SMIC, ByteAcc, NoLock, Preserve)
        {
            Offset (0x36A), 
            SMIB,   8
        }

        OperationRegion (SSMI, SystemIO, SMIB, 0x02)
        Field (SSMI, AnyAcc, NoLock, Preserve)
        {
            SMIW,   16
        }

        OperationRegion (ECMC, SystemIO, 0x72, 0x02)
        Field (ECMC, AnyAcc, NoLock, Preserve)
        {
            ECMI,   8, 
            ECMD,   8
        }

        IndexField (ECMI, ECMD, ByteAcc, NoLock, Preserve)
        {
            Offset (0x08), 
            FRTB,   32
        }

        OperationRegion (FRTP, SystemMemory, FRTB, 0x0100)
        Field (FRTP, AnyAcc, NoLock, Preserve)
        {
            PEBA,   32, 
            SPIE,   1, 
            P80E,   1, 
                ,   2, 
            NI2C,   1, 
            IC0E,   1, 
            IC1E,   1, 
            IC2E,   1, 
            IC3E,   1, 
            IC4E,   1, 
            IC5E,   1, 
            UT0E,   1, 
            UT1E,   1, 
                ,   1, 
                ,   1, 
            ST_E,   1, 
            UT2E,   1, 
                ,   1, 
            EMMD,   2, 
                ,   3, 
            XHCE,   1, 
                ,   1, 
                ,   1, 
            UT3E,   1, 
            ESPI,   1, 
            EMME,   1, 
            Offset (0x08), 
            PCEF,   1, 
                ,   4, 
            IC0D,   1, 
            IC1D,   1, 
            IC2D,   1, 
            IC3D,   1, 
            IC4D,   1, 
            IC5D,   1, 
            UT0D,   1, 
            UT1D,   1, 
                ,   1, 
                ,   1, 
            ST_D,   1, 
            UT2D,   1, 
                ,   1, 
            EHCD,   1, 
                ,   4, 
            XHCD,   1, 
            SD_D,   1, 
                ,   1, 
            UT3D,   1, 
                ,   1, 
            EMD3,   1, 
                ,   2, 
            S03D,   1, 
            FW00,   16, 
            FW01,   32, 
            FW02,   16, 
            FW03,   32, 
            SDS0,   8, 
            SDS1,   8, 
            CZFG,   1, 
            Offset (0x20), 
            SD10,   32, 
            EH10,   32, 
            XH10,   32, 
            STBA,   32
        }

        OperationRegion (FCFG, SystemMemory, PEBA, 0x01000000)
        Field (FCFG, DWordAcc, NoLock, Preserve)
        {
            Offset (0xA3044), 
            IPDE,   32, 
            IMPE,   32, 
            Offset (0xA306C), 
            RAR2,   32, 
            Offset (0xA3078), 
                ,   2, 
            LDQ0,   1, 
            Offset (0xA30CB), 
                ,   7, 
            AUSS,   1, 
            Offset (0xA30D0), 
                ,   13, 
            LCLK,   2
        }

        OperationRegion (IOMX, SystemMemory, 0xFED80D00, 0x0100)
        Field (IOMX, AnyAcc, NoLock, Preserve)
        {
            Offset (0x15), 
            IM15,   8, 
            IM16,   8, 
            IM17,   8, 
            Offset (0x1F), 
            IM1F,   8, 
            IM20,   8, 
            Offset (0x44), 
            IM44,   8, 
            Offset (0x46), 
            IM46,   8, 
            Offset (0x4A), 
            IM4A,   8, 
            IM4B,   8, 
            Offset (0x57), 
            IM57,   8, 
            IM58,   8, 
            Offset (0x68), 
            IM68,   8, 
            IM69,   8, 
            IM6A,   8, 
            IM6B,   8, 
            Offset (0x6D), 
            IM6D,   8
        }

        OperationRegion (FMIS, SystemMemory, 0xFED80E00, 0x0100)
        Field (FMIS, AnyAcc, NoLock, Preserve)
        {
            Offset (0x40), 
                ,   13, 
            I24M,   1
        }

        OperationRegion (FGIO, SystemMemory, 0xFED81500, 0x0300)
        Field (FGIO, AnyAcc, NoLock, Preserve)
        {
            Offset (0xA8), 
                ,   22, 
            O042,   1, 
            Offset (0x164), 
                ,   22, 
            O089,   1
        }

        OperationRegion (FACR, SystemMemory, 0xFED81E00, 0x0100)
        Field (FACR, AnyAcc, NoLock, Preserve)
        {
            Offset (0x62), 
            AMTD,   2, 
            Offset (0x80), 
                ,   28, 
            RD28,   1, 
                ,   1, 
            RQTY,   1, 
            Offset (0x84), 
                ,   28, 
            SD28,   1, 
                ,   1, 
            Offset (0xA0), 
            PG1A,   1
        }

        OperationRegion (EMMX, SystemMemory, 0xFEDD5800, 0x0130)
        Field (EMMX, AnyAcc, NoLock, Preserve)
        {
            Offset (0xD0), 
                ,   17, 
            FC18,   1, 
            FC33,   1, 
                ,   7, 
            CD_T,   1, 
            WP_T,   1
        }

        OperationRegion (EMMB, SystemMemory, 0xFEDD5800, 0x0130)
        Field (EMMB, AnyAcc, NoLock, Preserve)
        {
            Offset (0xA4), 
            E0A4,   32, 
            E0A8,   32, 
            Offset (0xB0), 
            E0B0,   32, 
            Offset (0xD0), 
            E0D0,   32, 
            Offset (0x116), 
            E116,   32
        }

        OperationRegion (SPIM, SystemMemory, 0xFEC10000, 0x0100)
        Field (SPIM, AnyAcc, NoLock, Preserve)
        {
            Offset (0x1D), 
            ASCE,   2, 
            Offset (0x22), 
            SSSC,   16, 
            Offset (0xFC), 
            STRN,   1, 
                ,   2, 
            BOWS,   1, 
            DOWS,   1
        }

        Mutex (ASSM, 0x00)
        Name (SVBF, Buffer (0x0100)
        {
             0x00                                             // .
        })
        CreateDWordField (SVBF, 0x00, S0A4)
        CreateDWordField (SVBF, 0x04, S0A8)
        CreateDWordField (SVBF, 0x08, S0B0)
        CreateDWordField (SVBF, 0x0C, S0D0)
        CreateDWordField (SVBF, 0x10, S116)
        CreateWordField (SVBF, 0x14, RG22)
        CreateDWordField (SVBF, 0x18, SAR2)
        Method (SECR, 0, Serialized)
        {
            S116 = E116 /* \_SB_.E116 */
            RQTY = Zero
            RD28 = One
            Local0 = SD28 /* \_SB_.SD28 */
            While (Local0)
            {
                Local0 = SD28 /* \_SB_.SD28 */
            }
        }

        Method (RECR, 0, Serialized)
        {
            E116 = S116 /* \_SB_.S116 */
        }

        OperationRegion (LUIE, SystemMemory, 0xFEDC0020, 0x04)
        Field (LUIE, AnyAcc, NoLock, Preserve)
        {
            IER0,   1, 
            IER1,   1, 
            IER2,   1, 
            IER3,   1, 
            UOL0,   1, 
            UOL1,   1, 
            UOL2,   1, 
            UOL3,   1, 
            WUR0,   2, 
            WUR1,   2, 
            WUR2,   2, 
            WUR3,   2
        }

        Method (FRUI, 1, Serialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (IUA0) /* \_SB_.IUA0 */
            }

            If ((Arg0 == 0x01))
            {
                Return (IUA1) /* \_SB_.IUA1 */
            }

            If ((Arg0 == 0x02))
            {
                Return (IUA2) /* \_SB_.IUA2 */
            }

            If ((Arg0 == 0x03))
            {
                Return (IUA3) /* \_SB_.IUA3 */
            }

            Return (Zero)
        }

        Method (OP80, 1, Serialized)
        {
            If (P80E)
            {
                P80D = Arg0
            }
        }

        Method (SRAD, 2, Serialized)
        {
            Local1 = (Arg1 << 0x05)
            Local1 += 0xB000AF80
            Local1 += Arg0
            OP80 (Local1)
            Local0 = (Arg0 << 0x01)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            ADIS = One
            ADSR = Zero
            Stall (Arg1)
            ADSR = One
            ADIS = Zero
            Stall (Arg1)
        }

        Method (DSAD, 2, Serialized)
        {
            Local1 = (Arg1 << 0x05)
            Local1 += 0xB000AF80
            Local1 += Arg0
            OP80 (Local1)
            Local0 = (Arg0 << 0x01)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            If ((Arg1 != ADTD))
            {
                If ((Arg1 == 0x00))
                {
                    ADTD = 0x00
                    ADPD = One
                    Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    While ((Local0 != 0x07))
                    {
                        Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    }
                }

                If ((Arg1 == 0x03))
                {
                    ADPD = Zero
                    Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    While ((Local0 != 0x00))
                    {
                        Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    }

                    ADTD = 0x03
                }
            }
        }

        Method (HSAD, 2, Serialized)
        {
            Local0 = (Arg0 << 0x01)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            If ((Arg1 != ADTD))
            {
                If ((Arg1 == 0x00))
                {
                    ADTD = 0x00
                    ADPD = One
                    Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    While ((Local0 != 0x07))
                    {
                        Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    }

                    RQTY = One
                    RD28 = One
                    Local0 = SD28 /* \_SB_.SD28 */
                    While (!Local0)
                    {
                        Local0 = SD28 /* \_SB_.SD28 */
                    }
                }

                If ((Arg1 == 0x03))
                {
                    RQTY = Zero
                    RD28 = One
                    Local0 = SD28 /* \_SB_.SD28 */
                    While (Local0)
                    {
                        Local0 = SD28 /* \_SB_.SD28 */
                    }

                    ADPD = Zero
                    Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    While ((Local0 != 0x00))
                    {
                        Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    }

                    ADTD = 0x03
                }
            }
        }

        OperationRegion (FPIC, SystemIO, 0x0C00, 0x02)
        Field (FPIC, AnyAcc, NoLock, Preserve)
        {
            FPII,   8, 
            FPID,   8
        }

        IndexField (FPII, FPID, ByteAcc, NoLock, Preserve)
        {
            Offset (0xF4), 
            IUA0,   8, 
            IUA1,   8, 
            Offset (0xF8), 
            IUA2,   8, 
            IUA3,   8
        }

        Device (SPI1)
        {
            Name (_HID, "AMDI0060")  // _HID: Hardware ID
            Name (_UID, 0x00)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (SPIE)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (0x00)
                }
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0xFEC10000,         // Address Base
                        0x00000100,         // Address Length
                        )
                })
                Return (RBUF) /* \_SB_.SPI1._CRS.RBUF */
            }

            Method (ASSC, 2, Serialized)
            {
                Acquire (ASSM, 0xFFFF)
                Local0 = Arg1
                Switch (ToInteger (Arg0))
                {
                    Case (0x03)
                    {
                        DOWS = One
                        STRN = One
                        While ((BOWS && STRN))
                        {
                            If (Arg1)
                            {
                                Stall (0x01)
                                Local0 -= One
                                If ((Local0 == Zero))
                                {
                                    Break
                                }
                            }
                        }

                        SAR2 = RAR2 /* \_SB_.RAR2 */
                        RAR2 = Zero
                        ASCE = 0x02
                        RG22 = SSSC /* \_SB_.SSSC */
                    }
                    Case (0x04)
                    {
                        SSSC = RG22 /* \_SB_.RG22 */
                        ASCE = Zero
                        RAR2 = SAR2 /* \_SB_.SAR2 */
                        Local0 = One
                        DOWS = Zero
                    }

                }

                Release (ASSM)
                Return (Local0)
            }
        }

        Device (GPIO)
        {
            Name (_HID, "AMDI0030")  // _HID: Hardware ID
            Name (_CID, "AMDI0030")  // _CID: Compatible ID
            Name (_UID, 0x00)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
                    {
                        0x00000007,
                    }
                    Memory32Fixed (ReadWrite,
                        0xFED81500,         // Address Base
                        0x00000400,         // Address Length
                        )
                })
                Return (RBUF) /* \_SB_.GPIO._CRS.RBUF */
            }

            Method (RST, 0, NotSerialized)
            {
                Notify (GPIO, 0x00) // Bus Check
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (0x00)
                }
            }
        }
    }

    Scope (_SB.PCI0.GP17.VGA)
    {
        Device (CAMF)
        {
            Name (_ADR, 0x1000)  // _ADR: Address
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((O042 == One))
                {
                    Return (0x0F)
                }

                Return (0x0B)
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                O042 = One
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                O042 = Zero
            }
        }

        Device (CAMR)
        {
            Name (_ADR, 0x2000)  // _ADR: Address
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((O089 == One))
                {
                    Return (0x0F)
                }

                Return (0x0B)
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                O089 = One
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                O089 = Zero
            }
        }

        Method (RCPU, 0, NotSerialized)
        {
            O089 = One
        }

        Method (RCPD, 0, NotSerialized)
        {
            O089 = Zero
        }

        Method (FCPU, 0, NotSerialized)
        {
            O042 = One
        }

        Method (FCPD, 0, NotSerialized)
        {
            O042 = Zero
        }

        Method (ICLE, 0, NotSerialized)
        {
            I24M = Zero
        }

        Method (ICLD, 0, NotSerialized)
        {
            I24M = One
        }
    }

    Scope (_SB.PCI0)
    {
        Device (SMB1)
        {
            Name (_HID, "SMB0001")  // _HID: Hardware ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x0B20,             // Range Minimum
                    0x0B20,             // Range Maximum
                    0x20,               // Alignment
                    0x20,               // Length
                    )
                IRQ (Level, ActiveLow, Shared, )
                    {7}
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }
        }
    }

    Scope (_SB.PCI0.LPC0.EC0.HKEY)
    {
        Name (SPL0, 0x2EE0)
        Name (FPP0, 0x32C8)
        Name (SPP0, 0x32C8)
        Name (TCL0, 0x46)
        Name (STC0, 0x32)
        Name (SPL1, 0x3A98)
        Name (FPP1, 0x61A8)
        Name (SPP1, 0x61A8)
        Name (TCL1, 0x50)
        Name (STC1, 0x32)
        Name (SPL2, 0x61A8)
        Name (FPP2, 0x7530)
        Name (SPP2, 0x61A8)
        Name (TCL2, 0x5A)
        Name (STC2, 0xC8)
        Name (SPL3, 0x61A8)
        Name (FPP3, 0x7530)
        Name (SPP3, 0x61A8)
        Name (TCL3, 0x5A)
        Name (STC3, 0xC8)
        Name (SPL4, 0x61A8)
        Name (FPP4, 0x7530)
        Name (SPP4, 0x61A8)
        Name (TCL4, 0x5A)
        Name (STC4, 0xC8)
        Name (SPL5, 0x3A98)
        Name (FPP5, 0x7530)
        Name (SPP5, 0x61A8)
        Name (TCL5, 0x50)
        Name (STC5, 0x32)
        Name (SPL6, 0x55F0)
        Name (FPP6, 0x61A8)
        Name (SPP6, 0x61A8)
        Name (TCL6, 0x5A)
        Name (STC6, 0xC8)
        Name (TCL7, 0x46)
        Name (STC7, 0x32)
        Name (SPL7, 0x2EE0)
        Name (FPP7, 0x2EE0)
        Name (SPP7, 0x2EE0)
        Method (DYTC, 1, Serialized)
        {
            Local0 = Arg0
            Local1 = 0x00
            Name (XX11, Buffer (0x07) {})
            Name (TSCB, 0x0F)
            Name (TSCC, 0x0F)
            CreateWordField (XX11, 0x00, SSZE)
            CreateByteField (XX11, 0x02, SMUF)
            CreateDWordField (XX11, 0x03, SMUD)
            SSZE = 0x07
            Switch (ToInteger ((Local0 & 0x01FF)))
            {
                Case (0x00)
                {
                    Local1 = 0x0100
                    Local1 |= 0x40000000
                    Local1 |= 0x00020000
                    Local1 |= 0x01
                }
                Case (0x01)
                {
                    Local2 = ((Local0 >> 0x0C) & 0x0F)
                    Local3 = ((Local0 >> 0x10) & 0x0F)
                    Local4 = ((Local0 >> 0x14) & 0x01)
                    Switch (Local2)
                    {
                        Case (0x01)
                        {
                            If ((Local3 != 0x0F))
                            {
                                Local1 = (0x05 << 0x01)
                                Return (Local1)
                            }

                            If ((Local4 == 0x00))
                            {
                                If ((0x01 == VCQL))
                                {
                                    VCQL = 0x00
                                }
                            }
                            Else
                            {
                                VCQL = 0x01
                            }
                        }
                        Case (0x04)
                        {
                            If ((Local3 != 0x0F))
                            {
                                Local1 = (0x05 << 0x01)
                                Return (Local1)
                            }

                            If ((Local4 == 0x00))
                            {
                                VSTP = 0x00
                            }
                            Else
                            {
                                VSTP = 0x01
                            }
                        }
                        Case (0x0B)
                        {
                            Switch (Local3)
                            {
                                Case (0x01)
                                {
                                    If ((Local4 != 0x01))
                                    {
                                        Local1 = (0x05 << 0x01)
                                        Return (Local1)
                                    }
                                }
                                Case (0x02)
                                {
                                    If ((Local4 != 0x01))
                                    {
                                        Local1 = (0x05 << 0x01)
                                        Return (Local1)
                                    }
                                }
                                Case (0x0F)
                                {
                                    If ((Local4 != 0x00))
                                    {
                                        Local1 = (0x05 << 0x01)
                                        Return (Local1)
                                    }
                                }
                                Default
                                {
                                    Local1 = (0x05 << 0x01)
                                    Return (Local1)
                                }

                            }

                            If ((Local4 == 0x00))
                            {
                                VMMC = 0x00
                                SMMC = 0x00
                            }
                            Else
                            {
                                VMMC = 0x01
                                SMMC = Local3
                            }
                        }
                        Case (0x0D)
                        {
                            If (((Local3 <= 0x08) && (Local3 >= 0x01)))
                            {
                                If ((Local4 != 0x01))
                                {
                                    Local1 = (0x05 << 0x01)
                                    Return (Local1)
                                }
                            }
                            ElseIf ((Local3 == 0x0F))
                            {
                                If ((Local4 != 0x00))
                                {
                                    Local1 = (0x05 << 0x01)
                                    Return (Local1)
                                }
                            }
                            Else
                            {
                                Local1 = (0x05 << 0x01)
                                Return (Local1)
                            }

                            If ((Local4 == 0x00))
                            {
                                VPSC = 0x00
                                SPSC = 0x00
                            }
                            Else
                            {
                                VPSC = 0x01
                                SPSC = Local3
                            }
                        }
                        Case (0x00)
                        {
                            If ((Local3 != 0x0F))
                            {
                                Local1 = (0x05 << 0x01)
                                Return (Local1)
                            }
                        }
                        Default
                        {
                            Local1 = (0x01 << 0x01)
                            Return (Local1)
                        }

                    }

                    If ((VCQL == 0x01))
                    {
                        CICF = 0x01
                        OSML = 0x01
                        SMUF = 0x05
                        If ((LGBF == 0x01))
                        {
                            SMUD = SPL7 /* \_SB_.PCI0.LPC0.EC0_.HKEY.SPL7 */
                        }
                        Else
                        {
                            SMUD = SPL0 /* \_SB_.PCI0.LPC0.EC0_.HKEY.SPL0 */
                        }

                        ALIB (0x0C, XX11)
                        SMUF = 0x06
                        If ((LGBF == 0x01))
                        {
                            SMUD = FPP7 /* \_SB_.PCI0.LPC0.EC0_.HKEY.FPP7 */
                        }
                        Else
                        {
                            SMUD = FPP0 /* \_SB_.PCI0.LPC0.EC0_.HKEY.FPP0 */
                        }

                        ALIB (0x0C, XX11)
                        SMUF = 0x07
                        If ((LGBF == 0x01))
                        {
                            SMUD = SPP7 /* \_SB_.PCI0.LPC0.EC0_.HKEY.SPP7 */
                        }
                        Else
                        {
                            SMUD = SPP0 /* \_SB_.PCI0.LPC0.EC0_.HKEY.SPP0 */
                        }

                        ALIB (0x0C, XX11)
                        SMUF = 0x03
                        If ((VSTP == 0x01))
                        {
                            SMUD = TCL7 /* \_SB_.PCI0.LPC0.EC0_.HKEY.TCL7 */
                        }
                        Else
                        {
                            SMUD = TCL0 /* \_SB_.PCI0.LPC0.EC0_.HKEY.TCL0 */
                        }

                        ALIB (0x0C, XX11)
                        SMUF = 0x01
                        If ((VSTP == 0x01))
                        {
                            SMUD = STC7 /* \_SB_.PCI0.LPC0.EC0_.HKEY.STC7 */
                        }
                        Else
                        {
                            SMUD = STC0 /* \_SB_.PCI0.LPC0.EC0_.HKEY.STC0 */
                        }

                        ALIB (0x0C, XX11)
                    }
                    ElseIf ((VPSC == 0x01))
                    {
                        CICF = 0x0D
                        Local7 = SPSC /* \SPSC */
                        Switch (Local7)
                        {
                            Case (0x08)
                            {
                                OSML = 0x40
                                SMUF = 0x05
                                If ((LGBF == 0x01))
                                {
                                    SMUD = SPL7 /* \_SB_.PCI0.LPC0.EC0_.HKEY.SPL7 */
                                }
                                Else
                                {
                                    SMUD = SPL3 /* \_SB_.PCI0.LPC0.EC0_.HKEY.SPL3 */
                                }

                                ALIB (0x0C, XX11)
                                SMUF = 0x06
                                If ((LGBF == 0x01))
                                {
                                    SMUD = FPP7 /* \_SB_.PCI0.LPC0.EC0_.HKEY.FPP7 */
                                }
                                Else
                                {
                                    SMUD = FPP3 /* \_SB_.PCI0.LPC0.EC0_.HKEY.FPP3 */
                                }

                                ALIB (0x0C, XX11)
                                SMUF = 0x07
                                If ((LGBF == 0x01))
                                {
                                    SMUD = SPP7 /* \_SB_.PCI0.LPC0.EC0_.HKEY.SPP7 */
                                }
                                Else
                                {
                                    SMUD = SPP3 /* \_SB_.PCI0.LPC0.EC0_.HKEY.SPP3 */
                                }

                                ALIB (0x0C, XX11)
                                SMUF = 0x03
                                If ((VSTP == 0x01))
                                {
                                    SMUD = TCL7 /* \_SB_.PCI0.LPC0.EC0_.HKEY.TCL7 */
                                }
                                Else
                                {
                                    SMUD = TCL3 /* \_SB_.PCI0.LPC0.EC0_.HKEY.TCL3 */
                                }

                                ALIB (0x0C, XX11)
                                SMUF = 0x01
                                If ((VSTP == 0x01))
                                {
                                    SMUD = STC7 /* \_SB_.PCI0.LPC0.EC0_.HKEY.STC7 */
                                }
                                Else
                                {
                                    SMUD = STC3 /* \_SB_.PCI0.LPC0.EC0_.HKEY.STC3 */
                                }

                                ALIB (0x0C, XX11)
                            }
                            Case (0x02)
                            {
                                OSML = 0x10
                                SMUF = 0x05
                                If ((LGBF == 0x01))
                                {
                                    SMUD = SPL7 /* \_SB_.PCI0.LPC0.EC0_.HKEY.SPL7 */
                                }
                                Else
                                {
                                    SMUD = SPL5 /* \_SB_.PCI0.LPC0.EC0_.HKEY.SPL5 */
                                }

                                ALIB (0x0C, XX11)
                                SMUF = 0x06
                                If ((LGBF == 0x01))
                                {
                                    SMUD = FPP7 /* \_SB_.PCI0.LPC0.EC0_.HKEY.FPP7 */
                                }
                                Else
                                {
                                    SMUD = FPP5 /* \_SB_.PCI0.LPC0.EC0_.HKEY.FPP5 */
                                }

                                ALIB (0x0C, XX11)
                                SMUF = 0x07
                                If ((LGBF == 0x01))
                                {
                                    SMUD = SPP7 /* \_SB_.PCI0.LPC0.EC0_.HKEY.SPP7 */
                                }
                                Else
                                {
                                    SMUD = SPP5 /* \_SB_.PCI0.LPC0.EC0_.HKEY.SPP5 */
                                }

                                ALIB (0x0C, XX11)
                                SMUF = 0x03
                                If ((VSTP == 0x01))
                                {
                                    SMUD = TCL7 /* \_SB_.PCI0.LPC0.EC0_.HKEY.TCL7 */
                                }
                                Else
                                {
                                    SMUD = TCL5 /* \_SB_.PCI0.LPC0.EC0_.HKEY.TCL5 */
                                }

                                ALIB (0x0C, XX11)
                                SMUF = 0x01
                                If ((VSTP == 0x01))
                                {
                                    SMUD = STC7 /* \_SB_.PCI0.LPC0.EC0_.HKEY.STC7 */
                                }
                                Else
                                {
                                    SMUD = STC5 /* \_SB_.PCI0.LPC0.EC0_.HKEY.STC5 */
                                }

                                ALIB (0x0C, XX11)
                            }
                            Case (0x07)
                            {
                                OSML = 0x20
                                SMUF = 0x05
                                If ((LGBF == 0x01))
                                {
                                    SMUD = SPL7 /* \_SB_.PCI0.LPC0.EC0_.HKEY.SPL7 */
                                }
                                Else
                                {
                                    SMUD = SPL4 /* \_SB_.PCI0.LPC0.EC0_.HKEY.SPL4 */
                                }

                                ALIB (0x0C, XX11)
                                SMUF = 0x06
                                If ((LGBF == 0x01))
                                {
                                    SMUD = FPP7 /* \_SB_.PCI0.LPC0.EC0_.HKEY.FPP7 */
                                }
                                Else
                                {
                                    SMUD = FPP4 /* \_SB_.PCI0.LPC0.EC0_.HKEY.FPP4 */
                                }

                                ALIB (0x0C, XX11)
                                SMUF = 0x07
                                If ((LGBF == 0x01))
                                {
                                    SMUD = SPP7 /* \_SB_.PCI0.LPC0.EC0_.HKEY.SPP7 */
                                }
                                Else
                                {
                                    SMUD = SPP4 /* \_SB_.PCI0.LPC0.EC0_.HKEY.SPP4 */
                                }

                                ALIB (0x0C, XX11)
                                SMUF = 0x03
                                If ((VSTP == 0x01))
                                {
                                    SMUD = TCL7 /* \_SB_.PCI0.LPC0.EC0_.HKEY.TCL7 */
                                }
                                Else
                                {
                                    SMUD = TCL4 /* \_SB_.PCI0.LPC0.EC0_.HKEY.TCL4 */
                                }

                                ALIB (0x0C, XX11)
                                SMUF = 0x01
                                If ((VSTP == 0x01))
                                {
                                    SMUD = STC7 /* \_SB_.PCI0.LPC0.EC0_.HKEY.STC7 */
                                }
                                Else
                                {
                                    SMUD = STC4 /* \_SB_.PCI0.LPC0.EC0_.HKEY.STC4 */
                                }

                                ALIB (0x0C, XX11)
                            }
                            Default
                            {
                            }

                        }
                    }
                    ElseIf ((VMMC == 0x01))
                    {
                        CICF = 0x0B
                        If ((SMMC == 0x00)) {}
                        ElseIf ((SMMC == 0x01))
                        {
                            OSML = 0x04
                            SMUF = 0x05
                            If ((LGBF == 0x01))
                            {
                                SMUD = SPL7 /* \_SB_.PCI0.LPC0.EC0_.HKEY.SPL7 */
                            }
                            Else
                            {
                                SMUD = SPL1 /* \_SB_.PCI0.LPC0.EC0_.HKEY.SPL1 */
                            }

                            ALIB (0x0C, XX11)
                            SMUF = 0x06
                            If ((LGBF == 0x01))
                            {
                                SMUD = FPP7 /* \_SB_.PCI0.LPC0.EC0_.HKEY.FPP7 */
                            }
                            Else
                            {
                                SMUD = FPP1 /* \_SB_.PCI0.LPC0.EC0_.HKEY.FPP1 */
                            }

                            ALIB (0x0C, XX11)
                            SMUF = 0x07
                            If ((LGBF == 0x01))
                            {
                                SMUD = SPP7 /* \_SB_.PCI0.LPC0.EC0_.HKEY.SPP7 */
                            }
                            Else
                            {
                                SMUD = SPP1 /* \_SB_.PCI0.LPC0.EC0_.HKEY.SPP1 */
                            }

                            ALIB (0x0C, XX11)
                            SMUF = 0x03
                            If ((VSTP == 0x01))
                            {
                                SMUD = TCL7 /* \_SB_.PCI0.LPC0.EC0_.HKEY.TCL7 */
                            }
                            Else
                            {
                                SMUD = TCL1 /* \_SB_.PCI0.LPC0.EC0_.HKEY.TCL1 */
                            }

                            ALIB (0x0C, XX11)
                            SMUF = 0x01
                            If ((VSTP == 0x01))
                            {
                                SMUD = STC7 /* \_SB_.PCI0.LPC0.EC0_.HKEY.STC7 */
                            }
                            Else
                            {
                                SMUD = STC1 /* \_SB_.PCI0.LPC0.EC0_.HKEY.STC1 */
                            }

                            ALIB (0x0C, XX11)
                        }
                        ElseIf ((SMMC == 0x02))
                        {
                            OSML = 0x08
                            SMUF = 0x05
                            If ((LGBF == 0x01))
                            {
                                SMUD = SPL7 /* \_SB_.PCI0.LPC0.EC0_.HKEY.SPL7 */
                            }
                            Else
                            {
                                SMUD = SPL2 /* \_SB_.PCI0.LPC0.EC0_.HKEY.SPL2 */
                            }

                            ALIB (0x0C, XX11)
                            SMUF = 0x06
                            If ((LGBF == 0x01))
                            {
                                SMUD = FPP7 /* \_SB_.PCI0.LPC0.EC0_.HKEY.FPP7 */
                            }
                            Else
                            {
                                SMUD = FPP2 /* \_SB_.PCI0.LPC0.EC0_.HKEY.FPP2 */
                            }

                            ALIB (0x0C, XX11)
                            SMUF = 0x07
                            If ((LGBF == 0x01))
                            {
                                SMUD = SPP7 /* \_SB_.PCI0.LPC0.EC0_.HKEY.SPP7 */
                            }
                            Else
                            {
                                SMUD = SPP2 /* \_SB_.PCI0.LPC0.EC0_.HKEY.SPP2 */
                            }

                            ALIB (0x0C, XX11)
                            SMUF = 0x03
                            If ((VSTP == 0x01))
                            {
                                SMUD = TCL7 /* \_SB_.PCI0.LPC0.EC0_.HKEY.TCL7 */
                            }
                            Else
                            {
                                SMUD = TCL2 /* \_SB_.PCI0.LPC0.EC0_.HKEY.TCL2 */
                            }

                            ALIB (0x0C, XX11)
                            SMUF = 0x01
                            If ((VSTP == 0x01))
                            {
                                SMUD = STC7 /* \_SB_.PCI0.LPC0.EC0_.HKEY.STC7 */
                            }
                            Else
                            {
                                SMUD = STC2 /* \_SB_.PCI0.LPC0.EC0_.HKEY.STC2 */
                            }

                            ALIB (0x0C, XX11)
                        }
                        ElseIf ((SMMC == 0x03)) {}
                    }
                    Else
                    {
                        CICF = 0x00
                        OSML = 0x02
                        SMUF = 0x05
                        If ((LGBF == 0x01))
                        {
                            SMUD = SPL7 /* \_SB_.PCI0.LPC0.EC0_.HKEY.SPL7 */
                        }
                        Else
                        {
                            SMUD = SPL6 /* \_SB_.PCI0.LPC0.EC0_.HKEY.SPL6 */
                        }

                        ALIB (0x0C, XX11)
                        SMUF = 0x06
                        If ((LGBF == 0x01))
                        {
                            SMUD = FPP7 /* \_SB_.PCI0.LPC0.EC0_.HKEY.FPP7 */
                        }
                        Else
                        {
                            SMUD = FPP6 /* \_SB_.PCI0.LPC0.EC0_.HKEY.FPP6 */
                        }

                        ALIB (0x0C, XX11)
                        SMUF = 0x07
                        If ((LGBF == 0x01))
                        {
                            SMUD = SPP7 /* \_SB_.PCI0.LPC0.EC0_.HKEY.SPP7 */
                        }
                        Else
                        {
                            SMUD = SPP6 /* \_SB_.PCI0.LPC0.EC0_.HKEY.SPP6 */
                        }

                        ALIB (0x0C, XX11)
                        SMUF = 0x03
                        If ((VSTP == 0x01))
                        {
                            SMUD = TCL7 /* \_SB_.PCI0.LPC0.EC0_.HKEY.TCL7 */
                        }
                        Else
                        {
                            SMUD = TCL6 /* \_SB_.PCI0.LPC0.EC0_.HKEY.TCL6 */
                        }

                        ALIB (0x0C, XX11)
                        SMUF = 0x01
                        If ((VSTP == 0x01))
                        {
                            SMUD = STC7 /* \_SB_.PCI0.LPC0.EC0_.HKEY.STC7 */
                        }
                        Else
                        {
                            SMUD = STC6 /* \_SB_.PCI0.LPC0.EC0_.HKEY.STC6 */
                        }

                        ALIB (0x0C, XX11)
                    }

                    Local5 = VSTD /* \VSTD */
                    Local5 |= (VCQL << 0x01)
                    Local5 |= (VSTP << 0x04)
                    Local5 |= (VMMC << 0x0B)
                    Local5 |= (VPSC << 0x0D)
                    Local1 = (CICF << 0x08)
                    If ((CICF == 0x03))
                    {
                        CICM = SMYH /* \SMYH */
                    }
                    ElseIf ((CICF == 0x0B))
                    {
                        CICM = SMMC /* \SMMC */
                    }
                    ElseIf ((CICF == 0x0D))
                    {
                        CICM = SPSC /* \SPSC */
                    }
                    Else
                    {
                        CICM = 0x0F
                    }

                    Local1 |= (CICM << 0x0C)
                    Local1 |= (Local5 << 0x10)
                    Local1 |= 0x01
                    If (DHKC)
                    {
                        MHKQ (0x6032)
                    }
                }
                Case (0x02)
                {
                    Local5 = VSTD /* \VSTD */
                    Local5 |= (VCQL << 0x01)
                    Local5 |= (VSTP << 0x04)
                    Local5 |= (VMMC << 0x0B)
                    Local5 |= (VPSC << 0x0D)
                    Local1 = (CICF << 0x08)
                    If ((CICF == 0x03))
                    {
                        CICM = SMYH /* \SMYH */
                    }
                    ElseIf ((CICF == 0x0B))
                    {
                        CICM = SMMC /* \SMMC */
                    }
                    ElseIf ((CICF == 0x0D))
                    {
                        CICM = SPSC /* \SPSC */
                    }
                    Else
                    {
                        CICM = 0x0F
                    }

                    Local1 |= (CICM << 0x0C)
                    Local1 |= (Local5 << 0x10)
                    Local1 |= 0x01
                }
                Case (0x03)
                {
                    Local1 = (FCAP << 0x10)
                    Local1 |= 0x01
                }
                Case (0x04)
                {
                    Local1 = (MYHC << 0x10)
                    Local1 |= 0x01
                }
                Case (0x06)
                {
                    Local2 = ((Local0 >> 0x09) & 0x0F)
                    If ((Local2 != 0x01))
                    {
                        Local1 = (MMCC << 0x10)
                    }
                    Else
                    {
                        Local1 = 0x0200
                    }

                    Local1 |= 0x01
                }
                Case (0x05)
                {
                    If (0xFFFFFFFF)
                    {
                        Local1 = 0x0500
                        Local1 |= 0x10E00000
                    }

                    Local1 |= 0x01
                }
                Case (0x0100)
                {
                    Local1 = 0x10010000
                    Local1 |= 0x01
                }
                Case (0x01FF)
                {
                    VCQL = 0x00
                    VTIO = 0x00
                    VMYH = 0x00
                    VSTP = 0x00
                    VCQH = 0x00
                    VDCC = 0x00
                    VSFN = 0x00
                    VDMC = 0x00
                    VFHP = 0x00
                    VIFC = 0x00
                    VMMC = 0x00
                    VMSC = 0x00
                    VPSC = 0x00
                    VCSC = 0x00
                    SMYH = 0x00
                    SMMC = 0x00
                    SPSC = 0x00
                    CICF = 0x00
                    CICM = 0x0F
                    Local5 = VSTD /* \VSTD */
                    Local5 |= (VCQL << 0x01)
                    Local5 |= (VSTP << 0x04)
                    Local5 |= (VMMC << 0x0B)
                    Local5 |= (VPSC << 0x0D)
                    Local1 = (CICF << 0x08)
                    Local1 |= (CICM << 0x0C)
                    Local1 |= (Local5 << 0x10)
                    Local1 |= 0x01
                }
                Default
                {
                    Local1 = (0x02 << 0x01)
                }

            }

            Return (Local1)
        }
    }

    Scope (_SB.PCI0.LPC0.EC0)
    {
        Method (ATMC, 0, NotSerialized)
        {
            If ((WNTF && TATC))
            {
                If (HPAC)
                {
                    Local0 = TCFA /* \TCFA */
                    Local1 = TCTA /* \TCTA */
                    Local2 = ((Local1 << 0x04) | Local0)
                    Local3 = (Local2 ^ ATMX) /* \_SB_.PCI0.LPC0.EC0_.ATMX */
                    ATMX = Local2
                    If ((TCTA == 0x00))
                    {
                        TCRT = TCR0 /* \TCR0 */
                        TPSV = TPS0 /* \TPS0 */
                    }
                    ElseIf ((TCTA == 0x01))
                    {
                        TCRT = TCR1 /* \TCR1 */
                        TPSV = TPS1 /* \TPS1 */
                    }
                    Else
                    {
                    }
                }
                Else
                {
                    Local0 = TCFD /* \TCFD */
                    Local1 = TCTD /* \TCTD */
                    Local2 = ((Local1 << 0x04) | Local0)
                    Local3 = (Local2 ^ ATMX) /* \_SB_.PCI0.LPC0.EC0_.ATMX */
                    ATMX = Local2
                    If ((TCTD == 0x00))
                    {
                        TCRT = TCR0 /* \TCR0 */
                        TPSV = TPS0 /* \TPS0 */
                    }
                    ElseIf ((TCTD == 0x01))
                    {
                        TCRT = TCR1 /* \TCR1 */
                        TPSV = TPS1 /* \TPS1 */
                    }
                    Else
                    {
                    }
                }

                If (Local3)
                {
                    If (^HKEY.DHKC)
                    {
                        ^HKEY.MHKQ (0x6030)
                    }
                }
            }
        }
    }

    Scope (_SB.PCI0.LPC0.EC0)
    {
        Device (ITSD)
        {
            Name (_HID, EisaId ("LEN0100"))  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }
        }
    }

    Scope (_SB.PCI0.LPC0.EC0)
    {
        Method (_Q40, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If (H8DR)
            {
                Local1 = TSL2 /* \_SB_.PCI0.LPC0.EC0_.TSL2 */
                Local2 = TSL1 /* \_SB_.PCI0.LPC0.EC0_.TSL1 */
            }
            Else
            {
                Local1 = (RBEC (0x8A) & 0x7F)
                Local2 = (RBEC (0x89) & 0x7F)
            }

            If ((Local2 & 0x76))
            {
                ^HKEY.DYTC (0x001F4001)
            }
            Else
            {
                ^HKEY.DYTC (0x000F4001)
            }

            If ((^HKEY.DHKC && Local1))
            {
                ^HKEY.MHKQ (0x6022)
            }

            If (!VIGD)
            {
                VTHR ()
            }
        }
    }
}



FACP
----
[000h 0000   4]                    Signature : "FACP"    [Fixed ACPI Description Table (FADT)]
[004h 0004   4]                 Table Length : 0000010C
[008h 0008   1]                     Revision : 05
[009h 0009   1]                     Checksum : 8B
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "TP-R11  "
[018h 0024   4]                 Oem Revision : 00001100
[01Ch 0028   4]              Asl Compiler ID : "PTEC"
[020h 0032   4]        Asl Compiler Revision : 00000002

[024h 0036   4]                 FACS Address : BDC1C000
[028h 0040   4]                 DSDT Address : B9092000
[02Ch 0044   1]                        Model : 01
[02Dh 0045   1]                   PM Profile : 02 [Mobile]
[02Eh 0046   2]                SCI Interrupt : 0009
[030h 0048   4]             SMI Command Port : 000000B2
[034h 0052   1]            ACPI Enable Value : A0
[035h 0053   1]           ACPI Disable Value : A1
[036h 0054   1]               S4BIOS Command : 00
[037h 0055   1]              P-State Control : 00
[038h 0056   4]     PM1A Event Block Address : 00000400
[03Ch 0060   4]     PM1B Event Block Address : 00000000
[040h 0064   4]   PM1A Control Block Address : 00000404
[044h 0068   4]   PM1B Control Block Address : 00000000
[048h 0072   4]    PM2 Control Block Address : 00000000
[04Ch 0076   4]       PM Timer Block Address : 00000408
[050h 0080   4]           GPE0 Block Address : 00000420
[054h 0084   4]           GPE1 Block Address : 00000000
[058h 0088   1]       PM1 Event Block Length : 04
[059h 0089   1]     PM1 Control Block Length : 02
[05Ah 0090   1]     PM2 Control Block Length : 00
[05Bh 0091   1]        PM Timer Block Length : 04
[05Ch 0092   1]            GPE0 Block Length : 08
[05Dh 0093   1]            GPE1 Block Length : 00
[05Eh 0094   1]             GPE1 Base Offset : 00
[05Fh 0095   1]                 _CST Support : 00
[060h 0096   2]                   C2 Latency : 0065
[062h 0098   2]                   C3 Latency : 03E9
[064h 0100   2]               CPU Cache Size : 0000
[066h 0102   2]           Cache Flush Stride : 0000
[068h 0104   1]            Duty Cycle Offset : 01
[069h 0105   1]             Duty Cycle Width : 00
[06Ah 0106   1]          RTC Day Alarm Index : 0D
[06Bh 0107   1]        RTC Month Alarm Index : 00
[06Ch 0108   1]            RTC Century Index : 32
[06Dh 0109   2]   Boot Flags (decoded below) : 0013
               Legacy Devices Supported (V2) : 1
            8042 Present on ports 60/64 (V2) : 1
                        VGA Not Present (V4) : 0
                      MSI Not Supported (V4) : 0
                PCIe ASPM Not Supported (V4) : 1
                   CMOS RTC Not Present (V5) : 0
[06Fh 0111   1]                     Reserved : 00
[070h 0112   4]        Flags (decoded below) : 0000C5AD
      WBINVD instruction is operational (V1) : 1
              WBINVD flushes all caches (V1) : 0
                    All CPUs support C1 (V1) : 1
                  C2 works on MP system (V1) : 1
            Control Method Power Button (V1) : 0
            Control Method Sleep Button (V1) : 1
        RTC wake not in fixed reg space (V1) : 0
            RTC can wake system from S4 (V1) : 1
                        32-bit PM Timer (V1) : 1
                      Docking Supported (V1) : 0
               Reset Register Supported (V2) : 1
                            Sealed Case (V3) : 0
                    Headless - No Video (V3) : 0
        Use native instr after SLP_TYPx (V3) : 0
              PCIEXP_WAK Bits Supported (V4) : 1
                     Use Platform Timer (V4) : 1
               RTC_STS valid on S4 wake (V4) : 0
                Remote Power-on capable (V4) : 0
                 Use APIC Cluster Model (V4) : 0
     Use APIC Physical Destination Mode (V4) : 0
                       Hardware Reduced (V5) : 0
                      Low Power S0 Idle (V5) : 0

[074h 0116  12]               Reset Register : [Generic Address Structure]
[074h 0116   1]                     Space ID : 01 [SystemIO]
[075h 0117   1]                    Bit Width : 08
[076h 0118   1]                   Bit Offset : 00
[077h 0119   1]         Encoded Access Width : 01 [Byte Access:8]
[078h 0120   8]                      Address : 0000000000000CF9

[080h 0128   1]         Value to cause reset : 06
[081h 0129   2]    ARM Flags (decoded below) : 0000
                              PSCI Compliant : 0
                       Must use HVC for PSCI : 0

[083h 0131   1]          FADT Minor Revision : 00
[084h 0132   8]                 FACS Address : 0000000000000000
[08Ch 0140   8]                 DSDT Address : 00000000B9092000
[094h 0148  12]             PM1A Event Block : [Generic Address Structure]
[094h 0148   1]                     Space ID : 01 [SystemIO]
[095h 0149   1]                    Bit Width : 20
[096h 0150   1]                   Bit Offset : 00
[097h 0151   1]         Encoded Access Width : 02 [Word Access:16]
[098h 0152   8]                      Address : 0000000000000400

[0A0h 0160  12]             PM1B Event Block : [Generic Address Structure]
[0A0h 0160   1]                     Space ID : 01 [SystemIO]
[0A1h 0161   1]                    Bit Width : 00
[0A2h 0162   1]                   Bit Offset : 00
[0A3h 0163   1]         Encoded Access Width : 02 [Word Access:16]
[0A4h 0164   8]                      Address : 0000000000000000

[0ACh 0172  12]           PM1A Control Block : [Generic Address Structure]
[0ACh 0172   1]                     Space ID : 01 [SystemIO]
[0ADh 0173   1]                    Bit Width : 10
[0AEh 0174   1]                   Bit Offset : 00
[0AFh 0175   1]         Encoded Access Width : 02 [Word Access:16]
[0B0h 0176   8]                      Address : 0000000000000404

[0B8h 0184  12]           PM1B Control Block : [Generic Address Structure]
[0B8h 0184   1]                     Space ID : 01 [SystemIO]
[0B9h 0185   1]                    Bit Width : 00
[0BAh 0186   1]                   Bit Offset : 00
[0BBh 0187   1]         Encoded Access Width : 02 [Word Access:16]
[0BCh 0188   8]                      Address : 0000000000000000

[0C4h 0196  12]            PM2 Control Block : [Generic Address Structure]
[0C4h 0196   1]                     Space ID : 01 [SystemIO]
[0C5h 0197   1]                    Bit Width : 00
[0C6h 0198   1]                   Bit Offset : 00
[0C7h 0199   1]         Encoded Access Width : 01 [Byte Access:8]
[0C8h 0200   8]                      Address : 0000000000000000

[0D0h 0208  12]               PM Timer Block : [Generic Address Structure]
[0D0h 0208   1]                     Space ID : 01 [SystemIO]
[0D1h 0209   1]                    Bit Width : 20
[0D2h 0210   1]                   Bit Offset : 00
[0D3h 0211   1]         Encoded Access Width : 03 [DWord Access:32]
[0D4h 0212   8]                      Address : 0000000000000408

[0DCh 0220  12]                   GPE0 Block : [Generic Address Structure]
[0DCh 0220   1]                     Space ID : 01 [SystemIO]
[0DDh 0221   1]                    Bit Width : 40
[0DEh 0222   1]                   Bit Offset : 00
[0DFh 0223   1]         Encoded Access Width : 03 [DWord Access:32]
[0E0h 0224   8]                      Address : 0000000000000420

[0E8h 0232  12]                   GPE1 Block : [Generic Address Structure]
[0E8h 0232   1]                     Space ID : 01 [SystemIO]
[0E9h 0233   1]                    Bit Width : 00
[0EAh 0234   1]                   Bit Offset : 00
[0EBh 0235   1]         Encoded Access Width : 03 [DWord Access:32]
[0ECh 0236   8]                      Address : 0000000000000000


[0F4h 0244  12]       Sleep Control Register : [Generic Address Structure]
[0F4h 0244   1]                     Space ID : 01 [SystemIO]
[0F5h 0245   1]                    Bit Width : 08
[0F6h 0246   1]                   Bit Offset : 00
[0F7h 0247   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0F8h 0248   8]                      Address : 0000000000000000

[100h 0256  12]        Sleep Status Register : [Generic Address Structure]
[100h 0256   1]                     Space ID : 01 [SystemIO]
[101h 0257   1]                    Bit Width : 08
[102h 0258   1]                   Bit Offset : 00
[103h 0259   1]         Encoded Access Width : 00 [Undefined/Legacy]
[104h 0260   8]                      Address : 0000000000000000

/**** ACPI table terminates in the middle of a data structure! (dump table) */

Raw Table Data: Length 268 (0x10C)

    0000: 46 41 43 50 0C 01 00 00 05 8B 4C 45 4E 4F 56 4F  // FACP......LENOVO
    0010: 54 50 2D 52 31 31 20 20 00 11 00 00 50 54 45 43  // TP-R11  ....PTEC
    0020: 02 00 00 00 00 C0 C1 BD 00 20 09 B9 01 02 09 00  // ......... ......
    0030: B2 00 00 00 A0 A1 00 00 00 04 00 00 00 00 00 00  // ................
    0040: 04 04 00 00 00 00 00 00 00 00 00 00 08 04 00 00  // ................
    0050: 20 04 00 00 00 00 00 00 04 02 00 04 08 00 00 00  //  ...............
    0060: 65 00 E9 03 00 00 00 00 01 00 0D 00 32 13 00 00  // e...........2...
    0070: AD C5 00 00 01 08 00 01 F9 0C 00 00 00 00 00 00  // ................
    0080: 06 00 00 00 00 00 00 00 00 00 00 00 00 20 09 B9  // ............. ..
    0090: 00 00 00 00 01 20 00 02 00 04 00 00 00 00 00 00  // ..... ..........
    00A0: 01 00 00 02 00 00 00 00 00 00 00 00 01 10 00 02  // ................
    00B0: 04 04 00 00 00 00 00 00 01 00 00 02 00 00 00 00  // ................
    00C0: 00 00 00 00 01 00 00 01 00 00 00 00 00 00 00 00  // ................
    00D0: 01 20 00 03 08 04 00 00 00 00 00 00 01 40 00 03  // . ...........@..
    00E0: 20 04 00 00 00 00 00 00 01 00 00 03 00 00 00 00  //  ...............
    00F0: 00 00 00 00 01 08 00 00 00 00 00 00 00 00 00 00  // ................
    0100: 01 08 00 00 00 00 00 00 00 00 00 00              // ............


FACS
----
[000h 0000   4]                    Signature : "FACS"
[004h 0004   4]                       Length : 00000040
[008h 0008   4]           Hardware Signature : 000027DA
[00Ch 0012   4]    32 Firmware Waking Vector : 00000000
[010h 0016   4]                  Global Lock : 00000000
[014h 0020   4]        Flags (decoded below) : 00000000
                      S4BIOS Support Present : 0
                  64-bit Wake Supported (V2) : 0
[018h 0024   8]    64 Firmware Waking Vector : 0000000000000000
[020h 0032   1]                      Version : 01
[021h 0033   3]                     Reserved : 000000
[024h 0036   4]    OspmFlags (decoded below) : 00000000
               64-bit Wake Env Required (V2) : 0

Raw Table Data: Length 64 (0x40)

    0000: 46 41 43 53 40 00 00 00 DA 27 00 00 00 00 00 00  // FACS@....'......
    0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0020: 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


FPDT
----
[000h 0000   4]                    Signature : "FPDT"    [Firmware Performance Data Table]
[004h 0004   4]                 Table Length : 00000034
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 54
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "TP-R11  "
[018h 0024   4]                 Oem Revision : 00001100
[01Ch 0028   4]              Asl Compiler ID : "PTEC"
[020h 0032   4]        Asl Compiler Revision : 00000002


[024h 0036   2]                Subtable Type : 0000
[026h 0038   1]                       Length : 10
[027h 0039   1]                     Revision : 01
[028h 0040   4]                     Reserved : 00000000
[02Ch 0044   8]     FPDT Boot Record Address : 00000000BBD6D000

Raw Table Data: Length 52 (0x34)

    0000: 46 50 44 54 34 00 00 00 01 54 4C 45 4E 4F 56 4F  // FPDT4....TLENOVO
    0010: 54 50 2D 52 31 31 20 20 00 11 00 00 50 54 45 43  // TP-R11  ....PTEC
    0020: 02 00 00 00 00 00 10 01 00 00 00 00 00 D0 D6 BB  // ................
    0030: 00 00 00 00                                      // ....


HPET
----
[000h 0000   4]                    Signature : "HPET"    [High Precision Event Timer table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : AB
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "TP-R11  "
[018h 0024   4]                 Oem Revision : 00001100
[01Ch 0028   4]              Asl Compiler ID : "PTEC"
[020h 0032   4]        Asl Compiler Revision : 00000002

[024h 0036   4]            Hardware Block ID : 43538210

[028h 0040  12]         Timer Block Register : [Generic Address Structure]
[028h 0040   1]                     Space ID : 00 [SystemMemory]
[029h 0041   1]                    Bit Width : 08
[02Ah 0042   1]                   Bit Offset : 00
[02Bh 0043   1]         Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044   8]                      Address : 00000000FED00000

[034h 0052   1]              Sequence Number : 02
[035h 0053   2]          Minimum Clock Ticks : 0014
[037h 0055   1]        Flags (decoded below) : 00
                             4K Page Protect : 0
                            64K Page Protect : 0

Raw Table Data: Length 56 (0x38)

    0000: 48 50 45 54 38 00 00 00 01 AB 4C 45 4E 4F 56 4F  // HPET8.....LENOVO
    0010: 54 50 2D 52 31 31 20 20 00 11 00 00 50 54 45 43  // TP-R11  ....PTEC
    0020: 02 00 00 00 10 82 53 43 00 08 00 00 00 00 D0 FE  // ......SC........
    0030: 00 00 00 00 02 14 00 00                          // ........


IVRS
----
[000h 0000   4]                    Signature : "IVRS"    [I/O Virtualization Reporting Structure]
[004h 0004   4]                 Table Length : 0000013E
[008h 0008   1]                     Revision : 02
[009h 0009   1]                     Checksum : E1
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "TP-R11  "
[018h 0024   4]                 Oem Revision : 00001100
[01Ch 0028   4]              Asl Compiler ID : "PTEC"
[020h 0032   4]        Asl Compiler Revision : 00000002

[024h 0036   4]          Virtualization Info : 00203041
[028h 0040   8]                     Reserved : 0000000000000000

[030h 0048   1]                Subtable Type : 10 [Hardware Definition Block]
[031h 0049   1]                        Flags : B0
[032h 0050   2]                       Length : 0048
[034h 0052   2]                     DeviceId : 0002

[036h 0054   2]            Capability Offset : 0040
[038h 0056   8]                 Base Address : 00000000FD100000
[040h 0064   2]            PCI Segment Group : 0000
[042h 0066   2]          Virtualization Info : 0000
[044h 0068   4]            Feature Reporting : 80048F6E

[048h 0072   1]                   Entry Type : 03
[049h 0073   2]                    Device ID : 0008
[04Bh 0075   1]                 Data Setting : 00

[04Ch 0076   1]                   Entry Type : 04
[04Dh 0077   2]                    Device ID : FFFE
[04Fh 0079   1]                 Data Setting : 00

[050h 0080   1]                   Entry Type : 43
[051h 0081   2]                    Device ID : FF00
[053h 0083   1]                 Data Setting : 00
[054h 0084   1]                     Reserved : 00
[055h 0085   2]        Source Used Device ID : 00A4
[057h 0087   1]                     Reserved : 00

[058h 0088   1]                   Entry Type : 04
[059h 0089   2]                    Device ID : FFFF
[05Bh 0091   1]                 Data Setting : 00

[05Ch 0092   1]                   Entry Type : 00
[05Dh 0093   2]                    Device ID : 0000
[05Fh 0095   1]                 Data Setting : 00

[060h 0096   1]                   Entry Type : 48
[061h 0097   2]                    Device ID : 0000
[063h 0099   1]                 Data Setting : 00
[064h 0100   1]                       Handle : 00
[065h 0101   2]        Source Used Device ID : 00A0
[067h 0103   1]                      Variety : 02

[068h 0104   1]                   Entry Type : 48
[069h 0105   2]                    Device ID : 0000
[06Bh 0107   1]                 Data Setting : D7
[06Ch 0108   1]                       Handle : 20
[06Dh 0109   2]        Source Used Device ID : 00A0
[06Fh 0111   1]                      Variety : 01

[070h 0112   1]                   Entry Type : 48
[071h 0113   2]                    Device ID : 0000
[073h 0115   1]                 Data Setting : 00
[074h 0116   1]                       Handle : 21
[075h 0117   2]        Source Used Device ID : 0001
[077h 0119   1]                      Variety : 01

[078h 0120   1]                Subtable Type : 11 [Hardware Definition Block]
[079h 0121   1]                        Flags : B0
[07Ah 0122   2]                       Length : 0058
[07Ch 0124   2]                     DeviceId : 0002

[07Eh 0126   2]            Capability Offset : 0040
[080h 0128   8]                 Base Address : 00000000FD100000
[088h 0136   2]            PCI Segment Group : 0000
[08Ah 0138   2]          Virtualization Info : 0000
[08Ch 0140   4]                   Attributes : 00040200
[090h 0144   8]                    EFR Image : 004F77EF22294ADA
[098h 0152   8]                     Reserved : 0000000000000000

[0A0h 0160   1]                   Entry Type : 03
[0A1h 0161   2]                    Device ID : 0008
[0A3h 0163   1]                 Data Setting : 00

[0A4h 0164   1]                   Entry Type : 04
[0A5h 0165   2]                    Device ID : FFFE
[0A7h 0167   1]                 Data Setting : 00

[0A8h 0168   1]                   Entry Type : 43
[0A9h 0169   2]                    Device ID : FF00
[0ABh 0171   1]                 Data Setting : 00
[0ACh 0172   1]                     Reserved : 00
[0ADh 0173   2]        Source Used Device ID : 00A4
[0AFh 0175   1]                     Reserved : 00

[0B0h 0176   1]                   Entry Type : 04
[0B1h 0177   2]                    Device ID : FFFF
[0B3h 0179   1]                 Data Setting : 00

[0B4h 0180   1]                   Entry Type : 00
[0B5h 0181   2]                    Device ID : 0000
[0B7h 0183   1]                 Data Setting : 00

[0B8h 0184   1]                   Entry Type : 48
[0B9h 0185   2]                    Device ID : 0000
[0BBh 0187   1]                 Data Setting : 00
[0BCh 0188   1]                       Handle : 00
[0BDh 0189   2]        Source Used Device ID : 00A0
[0BFh 0191   1]                      Variety : 02

[0C0h 0192   1]                   Entry Type : 48
[0C1h 0193   2]                    Device ID : 0000
[0C3h 0195   1]                 Data Setting : D7
[0C4h 0196   1]                       Handle : 20
[0C5h 0197   2]        Source Used Device ID : 00A0
[0C7h 0199   1]                      Variety : 01

[0C8h 0200   1]                   Entry Type : 48
[0C9h 0201   2]                    Device ID : 0000
[0CBh 0203   1]                 Data Setting : 00
[0CCh 0204   1]                       Handle : 21
[0CDh 0205   2]        Source Used Device ID : 0001
[0CFh 0207   1]                      Variety : 01

[0D0h 0208   1]                Subtable Type : 40 [Unknown Subtable Type]
[0D1h 0209   1]                        Flags : B0
[0D2h 0210   2]                       Length : 006E
[0D4h 0212   2]                     DeviceId : 0002

**** Unknown IVRS subtable type 0x40

Raw Table Data: Length 318 (0x13E)

    0000: 49 56 52 53 3E 01 00 00 02 E1 4C 45 4E 4F 56 4F  // IVRS>.....LENOVO
    0010: 54 50 2D 52 31 31 20 20 00 11 00 00 50 54 45 43  // TP-R11  ....PTEC
    0020: 02 00 00 00 41 30 20 00 00 00 00 00 00 00 00 00  // ....A0 .........
    0030: 10 B0 48 00 02 00 40 00 00 00 10 FD 00 00 00 00  // ..H...@.........
    0040: 00 00 00 00 6E 8F 04 80 03 08 00 00 04 FE FF 00  // ....n...........
    0050: 43 00 FF 00 00 A4 00 00 04 FF FF 00 00 00 00 00  // C...............
    0060: 48 00 00 00 00 A0 00 02 48 00 00 D7 20 A0 00 01  // H.......H... ...
    0070: 48 00 00 00 21 01 00 01 11 B0 58 00 02 00 40 00  // H...!.....X...@.
    0080: 00 00 10 FD 00 00 00 00 00 00 00 00 00 02 04 00  // ................
    0090: DA 4A 29 22 EF 77 4F 00 00 00 00 00 00 00 00 00  // .J)".wO.........
    00A0: 03 08 00 00 04 FE FF 00 43 00 FF 00 00 A4 00 00  // ........C.......
    00B0: 04 FF FF 00 00 00 00 00 48 00 00 00 00 A0 00 02  // ........H.......
    00C0: 48 00 00 D7 20 A0 00 01 48 00 00 00 21 01 00 01  // H... ...H...!...
    00D0: 40 B0 6E 00 02 00 40 00 00 00 10 FD 00 00 00 00  // @.n...@.........
    00E0: 00 00 00 00 00 02 04 00 DA 4A 29 22 EF 77 4F 00  // .........J)".wO.
    00F0: 00 00 00 00 00 00 00 00 03 08 00 00 04 FE FF 00  // ................
    0100: 43 00 FF 00 00 A4 00 00 04 FF FF 00 00 00 00 00  // C...............
    0110: 48 00 00 00 00 A0 00 02 48 00 00 D7 20 A0 00 01  // H.......H... ...
    0120: 48 00 00 00 21 01 00 01 F0 99 00 F7 50 4E 50 44  // H...!.......PNPD
    0130: 30 30 34 30 00 00 00 00 00 00 00 00 00 00        // 0040..........


MCFG
----
[000h 0000   4]                    Signature : "MCFG"    [Memory Mapped Configuration table]
[004h 0004   4]                 Table Length : 0000003C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 98
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "TP-R11  "
[018h 0024   4]                 Oem Revision : 00001100
[01Ch 0028   4]              Asl Compiler ID : "PTEC"
[020h 0032   4]        Asl Compiler Revision : 00000002

[024h 0036   8]                     Reserved : 0000000000000000

[02Ch 0044   8]                 Base Address : 00000000F8000000
[034h 0052   2]         Segment Group Number : 0000
[036h 0054   1]             Start Bus Number : 00
[037h 0055   1]               End Bus Number : 3F
[038h 0056   4]                     Reserved : 00000000

Raw Table Data: Length 60 (0x3C)

    0000: 4D 43 46 47 3C 00 00 00 01 98 4C 45 4E 4F 56 4F  // MCFG<.....LENOVO
    0010: 54 50 2D 52 31 31 20 20 00 11 00 00 50 54 45 43  // TP-R11  ....PTEC
    0020: 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 F8  // ................
    0030: 00 00 00 00 00 00 00 3F 00 00 00 00              // .......?....


MSDM
----
[000h 0000   4]                    Signature : "MSDM"    [Microsoft Data Management table]
[004h 0004   4]                 Table Length : 00000055
[008h 0008   1]                     Revision : 03
[009h 0009   1]                     Checksum : 19
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "TP-R11  "
[018h 0024   4]                 Oem Revision : 00001100
[01Ch 0028   4]              Asl Compiler ID : "PTEC"
[020h 0032   4]        Asl Compiler Revision : 00000002

[024h 0036  49] Software Licensing Structure : \
    01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 \
    1D 00 00 00 44 38 39 59 34 2D 4B 38 4E 39 32 2D \
    4D 52 33 4D 57 2D 38 47 36 38 50 2D 50 39 58 51 \
    51 

Raw Table Data: Length 85 (0x55)

    0000: 4D 53 44 4D 55 00 00 00 03 19 4C 45 4E 4F 56 4F  // MSDMU.....LENOVO
    0010: 54 50 2D 52 31 31 20 20 00 11 00 00 50 54 45 43  // TP-R11  ....PTEC
    0020: 02 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00  // ................
    0030: 00 00 00 00 1D 00 00 00 44 38 39 59 34 2D 4B 38  // ........D89Y4-K8
    0040: 4E 39 32 2D 4D 52 33 4D 57 2D 38 47 36 38 50 2D  // N92-MR3MW-8G68P-
    0050: 50 39 58 51 51                                   // P9XQQ


SBST
----
[000h 0000   4]                    Signature : "SBST"    [Smart Battery Specification Table]
[004h 0004   4]                 Table Length : 00000030
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : BC
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "TP-R11  "
[018h 0024   4]                 Oem Revision : 00001100
[01Ch 0028   4]              Asl Compiler ID : "PTEC"
[020h 0032   4]        Asl Compiler Revision : 00000002

[024h 0036   4]                Warning Level : 00000000
[028h 0040   4]                    Low Level : 00000000
[02Ch 0044   4]               Critical Level : 00000000

Raw Table Data: Length 48 (0x30)

    0000: 53 42 53 54 30 00 00 00 01 BC 4C 45 4E 4F 56 4F  // SBST0.....LENOVO
    0010: 54 50 2D 52 31 31 20 20 00 11 00 00 50 54 45 43  // TP-R11  ....PTEC
    0020: 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


SSDT1
-----
DefinitionBlock ("", "SSDT", 1, "LENOVO", "WmiTable", 0x00000001)
{
    Scope (\_SB)
    {
        Device (WMI6)
        {
            Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "LWMI")  // _UID: Unique ID
            Name (_WDG, Buffer (0x3C)
            {
                /* 0000 */  0x12, 0x57, 0x7D, 0xE8, 0x6D, 0xFD, 0x84, 0x48,  // .W}.m..H
                /* 0008 */  0xB8, 0x33, 0x46, 0xD6, 0x75, 0x9A, 0xD6, 0xBC,  // .3F.u...
                /* 0010 */  0x45, 0x45, 0x01, 0x02, 0x4E, 0xD2, 0x16, 0x2D,  // EE..N..-
                /* 0018 */  0x8D, 0xF8, 0xD3, 0x46, 0x8A, 0x9E, 0x69, 0x3F,  // ...F..i?
                /* 0020 */  0xDF, 0xCD, 0xB9, 0x8B, 0x45, 0x42, 0x01, 0x02,  // ....EB..
                /* 0028 */  0x21, 0x12, 0x90, 0x05, 0x66, 0xD5, 0xD1, 0x11,  // !...f...
                /* 0030 */  0xB2, 0xF0, 0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10,  // ......).
                /* 0038 */  0x46, 0x45, 0x01, 0x00                           // FE..
            })
            OperationRegion (SMIP, SystemIO, 0xB2, 0x01)
            Field (SMIP, ByteAcc, NoLock, Preserve)
            {
                IOB2,   8
            }

            OperationRegion (LNVS, SystemMemory, 0xBDC1F000, 0x0120)
            Field (LNVS, AnyAcc, NoLock, Preserve)
            {
                SGNT,   32, 
                MCMD,   32, 
                SCMD,   32, 
                RCDE,   32, 
                DAT1,   32, 
                DAT2,   32, 
                DAT3,   32, 
                DAT4,   32, 
                BDAT,   2048
            }

            Mutex (MSMI, 0x00)
            Name (LBUF, Package (0x05)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00, 
                0x00
            })
            Method (LSMI, 6, Serialized)
            {
                Acquire (MSMI, 0xFFFF)
                MCMD = Arg0
                RCDE = 0x00
                SCMD = Arg1
                DAT1 = Arg2
                DAT2 = Arg3
                DAT3 = Arg4
                DAT4 = Arg5
                IOB2 = 0xCE
                LBUF [0x00] = RCDE /* \_SB_.WMI6.RCDE */
                LBUF [0x01] = DAT1 /* \_SB_.WMI6.DAT1 */
                LBUF [0x02] = DAT2 /* \_SB_.WMI6.DAT2 */
                LBUF [0x03] = DAT3 /* \_SB_.WMI6.DAT3 */
                LBUF [0x04] = DAT3 /* \_SB_.WMI6.DAT3 */
                Release (MSMI)
                Return (LBUF) /* \_SB_.WMI6.LBUF */
            }

            Method (WMEE, 3, NotSerialized)
            {
                CreateByteField (Arg2, 0x00, TDA1)
                CreateByteField (Arg2, 0x01, TDA2)
                CreateByteField (Arg2, 0x02, TDA3)
                Arg1--
                LSMI (0x01, Arg1, TDA1, TDA2, TDA3, 0x00)
                Return (DAT1) /* \_SB_.WMI6.DAT1 */
            }

            Method (WMEB, 3, NotSerialized)
            {
                If ((Arg1 == 0x01))
                {
                    Return (BDAT) /* \_SB_.WMI6.BDAT */
                }
                ElseIf ((Arg1 == 0x02))
                {
                    BDAT = Arg2
                }
            }

            Name (WQFE, Buffer (0x072C)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0x1C, 0x07, 0x00, 0x00, 0xE6, 0x1E, 0x00, 0x00,  // ........
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0x98, 0xD6, 0x8E, 0x00, 0x01, 0x06, 0x18, 0x42,  // .......B
                /* 0020 */  0x10, 0x09, 0x10, 0x0A, 0x0C, 0x21, 0x02, 0x0B,  // .....!..
                /* 0028 */  0x83, 0x50, 0x44, 0x18, 0x14, 0xA0, 0x45, 0x41,  // .PD...EA
                /* 0030 */  0xC8, 0x05, 0x14, 0x95, 0x02, 0x21, 0xC3, 0x02,  // .....!..
                /* 0038 */  0x14, 0x0B, 0x70, 0x2E, 0x40, 0xBA, 0x00, 0xE5,  // ..p.@...
                /* 0040 */  0x28, 0x72, 0x0C, 0x22, 0x02, 0xF7, 0xEF, 0x0F,  // (r."....
                /* 0048 */  0x31, 0x0A, 0x88, 0x14, 0x40, 0x48, 0x22, 0x84,  // 1...@H".
                /* 0050 */  0x44, 0x00, 0x53, 0x21, 0x70, 0x84, 0xA0, 0x5F,  // D.S!p.._
                /* 0058 */  0x01, 0x08, 0x1D, 0x0A, 0x90, 0x29, 0xC0, 0xA0,  // .....)..
                /* 0060 */  0x00, 0xA7, 0x08, 0x22, 0x88, 0x52, 0x23, 0x90,  // ...".R#.
                /* 0068 */  0xA0, 0x7A, 0x15, 0x60, 0x5B, 0x80, 0x69, 0x24,  // .z.`[.i$
                /* 0070 */  0x59, 0x9E, 0x83, 0xB4, 0xA3, 0x68, 0x10, 0x51,  // Y....h.Q
                /* 0078 */  0x12, 0x58, 0xE4, 0x08, 0x50, 0x62, 0x46, 0x80,  // .X..PbF.
                /* 0080 */  0xD2, 0x39, 0x01, 0xD9, 0x14, 0x60, 0x11, 0x59,  // .9...`.Y
                /* 0088 */  0x42, 0x51, 0x34, 0x81, 0x28, 0x09, 0xA2, 0xF7,  // BQ4.(...
                /* 0090 */  0x8D, 0xA0, 0x21, 0x95, 0x2B, 0x40, 0x32, 0xBE,  // ..!.+@2.
                /* 0098 */  0x34, 0xCF, 0x4A, 0xD6, 0x05, 0xC8, 0x1E, 0x16,  // 4.J.....
                /* 00A0 */  0x1D, 0x01, 0x4F, 0x6B, 0x04, 0x84, 0x45, 0x59,  // ..Ok..EY
                /* 00A8 */  0xA4, 0x22, 0x39, 0x80, 0xC1, 0x78, 0x00, 0x91,  // ."9..x..
                /* 00B0 */  0x9C, 0x81, 0xA2, 0x80, 0x3D, 0xAA, 0x13, 0x69,  // ....=..i
                /* 00B8 */  0x72, 0x94, 0x54, 0x12, 0x1C, 0x6A, 0x8C, 0x1E,  // r.T..j..
                /* 00C0 */  0x67, 0xF3, 0x02, 0x74, 0x4F, 0x44, 0xB3, 0xF3,  // g..tOD..
                /* 00C8 */  0xD8, 0x42, 0x32, 0x69, 0x43, 0x41, 0x0D, 0xDC,  // .B2iCA..
                /* 00D0 */  0xD3, 0x3A, 0x29, 0xCF, 0xD1, 0x83, 0x32, 0x4C,  // .:)...2L
                /* 00D8 */  0x02, 0x8F, 0x82, 0xA1, 0x71, 0x82, 0xB2, 0x20,  // ....q.. 
                /* 00E0 */  0xB4, 0x23, 0x3A, 0x50, 0x32, 0x64, 0x36, 0xC7,  // .#:P2d6.
                /* 00E8 */  0xE2, 0x05, 0x08, 0x87, 0xD6, 0x44, 0x1E, 0x04,  // .....D..
                /* 00F0 */  0x0E, 0x99, 0x1D, 0x08, 0x8C, 0x7D, 0xCC, 0xD8,  // .....}..
                /* 00F8 */  0x11, 0x85, 0x0B, 0x78, 0x3E, 0xC7, 0x10, 0x39,  // ...x>..9
                /* 0100 */  0xEE, 0xA1, 0xC6, 0x38, 0x8A, 0xC8, 0x4F, 0x01,  // ...8..O.
                /* 0108 */  0x5C, 0xD0, 0x0C, 0x84, 0x10, 0xBA, 0x52, 0x01,  // \.....R.
                /* 0110 */  0x3E, 0x47, 0x23, 0x9C, 0x53, 0x8F, 0x13, 0xA6,  // >G#.S...
                /* 0118 */  0xD6, 0xF9, 0x68, 0xEE, 0x8C, 0xE0, 0xFF, 0x5F,  // ..h...._
                /* 0120 */  0xF4, 0x20, 0x50, 0x32, 0x20, 0xE4, 0x51, 0x80,  // . P2 .Q.
                /* 0128 */  0x55, 0x3C, 0xDD, 0x0E, 0x4C, 0x10, 0xB1, 0x38,  // U<..L..8
                /* 0130 */  0x01, 0xDE, 0x60, 0x64, 0x0D, 0x43, 0xC6, 0x04,  // ..`d.C..
                /* 0138 */  0x28, 0x13, 0x60, 0x6B, 0x14, 0xC2, 0xA9, 0x0D,  // (.`k....
                /* 0140 */  0x42, 0x28, 0x87, 0x1A, 0x2E, 0x42, 0x8C, 0x28,  // B(...B.(
                /* 0148 */  0x15, 0x82, 0xC8, 0x19, 0x82, 0xA0, 0x0C, 0x67,  // .......g
                /* 0150 */  0x88, 0xB8, 0x91, 0x9B, 0xBB, 0x14, 0x08, 0xC6,  // ........
                /* 0158 */  0x78, 0xA7, 0x92, 0xC0, 0xC3, 0xC6, 0x8D, 0xDF,  // x.......
                /* 0160 */  0x03, 0x3B, 0xB4, 0xB3, 0x3B, 0xFE, 0xE7, 0x82,  // .;..;...
                /* 0168 */  0xE3, 0x64, 0xF3, 0x3A, 0xAE, 0xA7, 0x83, 0x37,  // .d.:...7
                /* 0170 */  0x89, 0xA3, 0x8D, 0x1A, 0x23, 0x7E, 0x50, 0xF2,  // ....#~P.
                /* 0178 */  0x80, 0x90, 0x05, 0x10, 0x45, 0x82, 0x47, 0x9D,  // ....E.G.
                /* 0180 */  0x17, 0x7C, 0x32, 0xF0, 0xC8, 0x0E, 0xDB, 0x83,  // .|2.....
                /* 0188 */  0x3D, 0x81, 0x20, 0x8F, 0x0E, 0x3E, 0x33, 0x3C,  // =. ..>3<
                /* 0190 */  0x12, 0x78, 0x0C, 0xEC, 0xAE, 0xE0, 0x43, 0x80,  // .x....C.
                /* 0198 */  0xCF, 0x08, 0x78, 0xD7, 0x80, 0xBA, 0x1C, 0x3C,  // ..x....<
                /* 01A0 */  0x1A, 0xB0, 0x31, 0x87, 0xC3, 0x0C, 0xD7, 0x07,  // ..1.....
                /* 01A8 */  0x80, 0x70, 0x27, 0xF0, 0x64, 0xF0, 0x80, 0xC1,  // .p'.d...
                /* 01B0 */  0x0F, 0x1B, 0x1E, 0x1C, 0x6E, 0x86, 0x27, 0x73,  // ....n.'s
                /* 01B8 */  0x64, 0xA5, 0x0A, 0x30, 0x7B, 0x07, 0xD0, 0xF4,  // d..0{...
                /* 01C0 */  0x7D, 0xDA, 0x60, 0x77, 0x81, 0xF3, 0xE9, 0x19,  // }.`w....
                /* 01C8 */  0x92, 0xC8, 0x1F, 0x04, 0x6A, 0x64, 0x86, 0xF6,  // ....jd..
                /* 01D0 */  0x84, 0x5F, 0x3A, 0x0C, 0xF9, 0xA4, 0x70, 0x58,  // ._:...pX
                /* 01D8 */  0x4C, 0xEC, 0xA9, 0x83, 0x8E, 0x07, 0xFC, 0x97,  // L.......
                /* 01E0 */  0x91, 0x27, 0x0D, 0x4F, 0xDF, 0xF3, 0xF5, 0xA9,  // .'.O....
                /* 01E8 */  0x01, 0x7B, 0x12, 0x81, 0x3F, 0x80, 0xD8, 0x8F,  // .{..?...
                /* 01F0 */  0x0E, 0xAF, 0x13, 0x9E, 0xFB, 0xA3, 0x84, 0xFF,  // ........
                /* 01F8 */  0xFF, 0x87, 0x11, 0xE0, 0x36, 0x2C, 0xDC, 0x99,  // ....6,..
                /* 0200 */  0xC0, 0x43, 0xE0, 0x03, 0x78, 0x92, 0x38, 0x45,  // .C..x.8E
                /* 0208 */  0x5F, 0x29, 0x4E, 0x0C, 0x77, 0x64, 0x01, 0x83,  // _)N.wd..
                /* 0210 */  0x22, 0x1D, 0x87, 0x06, 0x96, 0xF1, 0x05, 0x20,  // "...... 
                /* 0218 */  0x1B, 0x2F, 0x00, 0x0F, 0x8C, 0x2A, 0x01, 0xD2,  // ./...*..
                /* 0220 */  0x30, 0x71, 0xC3, 0x78, 0x08, 0xC0, 0xA4, 0x7F,  // 0q.x....
                /* 0228 */  0x7D, 0xE8, 0xF8, 0xE1, 0xE3, 0x80, 0x73, 0x93,  // }.....s.
                /* 0230 */  0x28, 0xF9, 0x90, 0x28, 0x9C, 0xB3, 0x9E, 0x42,  // (..(...B
                /* 0238 */  0x28, 0x88, 0x01, 0x1D, 0x04, 0x42, 0x4E, 0x4E,  // (....BNN
                /* 0240 */  0x08, 0xA8, 0x03, 0x8A, 0x47, 0x71, 0x0A, 0xCF,  // ....Gq..
                /* 0248 */  0x39, 0x3E, 0x47, 0x78, 0x96, 0x2F, 0x28, 0xEC,  // 9>Gx./(.
                /* 0250 */  0xF4, 0xE1, 0x83, 0x84, 0xC7, 0xE3, 0x23, 0x02,  // ......#.
                /* 0258 */  0xD7, 0x00, 0xA1, 0x3B, 0x83, 0xD1, 0xAD, 0xE6,  // ...;....
                /* 0260 */  0x90, 0x82, 0x02, 0xF3, 0x21, 0x84, 0x13, 0xD4,  // ....!...
                /* 0268 */  0x75, 0x4D, 0x80, 0x3E, 0xFE, 0x23, 0xF0, 0x50,  // uM.>.#.P
                /* 0270 */  0xDE, 0x41, 0xDE, 0x45, 0x12, 0xD4, 0x77, 0x4C,  // .A.E..wL
                /* 0278 */  0x00, 0x05, 0x90, 0xEF, 0x04, 0x1E, 0xED, 0x73,  // .......s
                /* 0280 */  0x01, 0x1B, 0xC3, 0x63, 0x80, 0xD1, 0x8C, 0xCE,  // ...c....
                /* 0288 */  0xC3, 0x4F, 0x16, 0x15, 0x77, 0xB2, 0x14, 0xC4,  // .O..w...
                /* 0290 */  0x93, 0xF5, 0xCD, 0xE8, 0xFF, 0x7F, 0xB2, 0xD8,  // ........
                /* 0298 */  0x99, 0xF8, 0x4E, 0xE1, 0x09, 0x9D, 0x52, 0x90,  // ..N...R.
                /* 02A0 */  0x73, 0xF4, 0x84, 0x7D, 0x07, 0x81, 0x75, 0x15,  // s..}..u.
                /* 02A8 */  0x08, 0xF9, 0xA8, 0xE0, 0x69, 0x18, 0xCE, 0x93,  // ....i...
                /* 02B0 */  0xE5, 0x70, 0x9E, 0x2C, 0x1F, 0x8B, 0xEF, 0x18,  // .p.,....
                /* 02B8 */  0xF0, 0x47, 0x8B, 0x25, 0x28, 0x70, 0xB6, 0x20,  // .G.%(p. 
                /* 02C0 */  0x87, 0xC7, 0x04, 0x1A, 0x15, 0xBD, 0x07, 0x79,  // .......y
                /* 02C8 */  0x78, 0xFC, 0x72, 0xE0, 0xF9, 0x3C, 0x23, 0x1C,  // x.r..<#.
                /* 02D0 */  0xE5, 0xFB, 0x87, 0x4F, 0x09, 0x9E, 0x8E, 0x31,  // ...O...1
                /* 02D8 */  0x9E, 0x1D, 0x3C, 0x44, 0x5F, 0x89, 0x60, 0x4D,  // ..<D_.`M
                /* 02E0 */  0xE4, 0xA4, 0x7D, 0x5B, 0x38, 0xD9, 0xA0, 0xF1,  // ..}[8...
                /* 02E8 */  0xC3, 0x7A, 0x98, 0x1E, 0x1A, 0xEE, 0x4A, 0x04,  // .z....J.
                /* 02F0 */  0xF7, 0x4E, 0xC1, 0xCF, 0x44, 0x58, 0x82, 0x29,  // .N..DX.)
                /* 02F8 */  0x6F, 0x18, 0xD0, 0xC7, 0x73, 0x0A, 0x9E, 0x97,  // o...s...
                /* 0300 */  0x6F, 0x18, 0xC0, 0xED, 0xFF, 0x7F, 0xC3, 0x00,  // o.......
                /* 0308 */  0xF8, 0x79, 0xDE, 0xF2, 0x0D, 0x03, 0x78, 0x8D,  // .y....x.
                /* 0310 */  0xDF, 0xFF, 0xFF, 0x83, 0x21, 0xEE, 0x86, 0x01,  // ....!...
                /* 0318 */  0xF7, 0x4E, 0x81, 0x39, 0x62, 0xE0, 0x09, 0xE6,  // .N.9b...
                /* 0320 */  0xBC, 0x62, 0xA0, 0x4E, 0x00, 0xD6, 0x72, 0xC5,  // .b.N..r.
                /* 0328 */  0x40, 0xDF, 0x95, 0x4E, 0xE0, 0xD4, 0x1E, 0xD6,  // @..N....
                /* 0330 */  0x7C, 0x21, 0x7B, 0x2A, 0x02, 0xF8, 0xF8, 0xFF,  // |!{*....
                /* 0338 */  0xBF, 0x63, 0x00, 0x26, 0x21, 0x7D, 0xC7, 0x00,  // .c.&!}..
                /* 0340 */  0xCF, 0xA5, 0x02, 0x77, 0xC8, 0xC0, 0xA7, 0xBD,  // ...w....
                /* 0348 */  0x63, 0xA0, 0x38, 0xAC, 0xE6, 0x1E, 0x07, 0xED,  // c.8.....
                /* 0350 */  0x9A, 0xF9, 0x94, 0x81, 0xB9, 0x64, 0x00, 0xE6,  // .....d..
                /* 0358 */  0xFE, 0xFF, 0x97, 0x0C, 0x80, 0x3F, 0xB1, 0x2E,  // .....?..
                /* 0360 */  0x19, 0x40, 0xED, 0x4C, 0xEE, 0x39, 0xBD, 0xC9,  // .@.L.9..
                /* 0368 */  0x81, 0x1B, 0xE7, 0xCD, 0x02, 0x97, 0xF8, 0x9A,  // ........
                /* 0370 */  0x81, 0x3A, 0x63, 0x5B, 0x0F, 0x90, 0xFE, 0xFF,  // .:c[....
                /* 0378 */  0x97, 0x39, 0x58, 0xD8, 0xB8, 0x7B, 0x06, 0xC0,  // .9X..{..
                /* 0380 */  0xEE, 0xFF, 0xFF, 0x3D, 0x03, 0x76, 0xB0, 0x7B,  // ...=.v.{
                /* 0388 */  0x06, 0x50, 0xBB, 0x22, 0xFB, 0x8E, 0x0F, 0x9E,  // .P."....
                /* 0390 */  0xFB, 0x1C, 0xBC, 0x83, 0x06, 0xF6, 0xEE, 0xA1,  // ........
                /* 0398 */  0xE5, 0x50, 0xF9, 0xAB, 0x97, 0x30, 0x18, 0xD4,  // .P...0..
                /* 03A0 */  0x15, 0xC4, 0xE7, 0x01, 0xFC, 0x28, 0x0E, 0xE0,  // .....(..
                /* 03A8 */  0x94, 0x8E, 0x8E, 0xDD, 0xEB, 0xC1, 0x19, 0x6E,  // .......n
                /* 03B0 */  0x7C, 0xA0, 0x39, 0x06, 0x9C, 0x6D, 0x98, 0x68,  // |.9..m.h
                /* 03B8 */  0xC7, 0x16, 0xEE, 0x20, 0x8E, 0x22, 0x4A, 0x18,  // ... ."J.
                /* 03C0 */  0x86, 0xE7, 0x03, 0xBE, 0xAF, 0x07, 0x46, 0xF2,  // ......F.
                /* 03C8 */  0xBC, 0x3D, 0x50, 0x1F, 0xC1, 0x19, 0x96, 0x27,  // .=P....'
                /* 03D0 */  0xEB, 0x19, 0x30, 0xAC, 0x18, 0xA1, 0x42, 0x62,  // ..0...Bb
                /* 03D8 */  0x2E, 0x21, 0x1E, 0xAD, 0x31, 0xDE, 0xE7, 0x03,  // .!..1...
                /* 03E0 */  0xF9, 0xC0, 0x70, 0x02, 0x2F, 0x04, 0x46, 0x09,  // ..p./.F.
                /* 03E8 */  0x6E, 0x5C, 0xA3, 0xB2, 0x31, 0x9D, 0x0D, 0x6E,  // n\..1..n
                /* 03F0 */  0x60, 0x26, 0x88, 0x73, 0x78, 0x98, 0xFB, 0xFC,  // `&.sx...
                /* 03F8 */  0xFF, 0x3F, 0xC1, 0x09, 0xBC, 0x3F, 0xF8, 0xEE,  // .?...?..
                /* 0400 */  0xCD, 0xDC, 0x9F, 0x19, 0x74, 0x09, 0x88, 0xF0,  // ....t...
                /* 0408 */  0xE8, 0x70, 0xA6, 0xCF, 0xE4, 0xB5, 0x61, 0xC8,  // .p....a.
                /* 0410 */  0x96, 0x00, 0x71, 0x87, 0x01, 0x61, 0x35, 0x86,  // ..q..a5.
                /* 0418 */  0x22, 0x88, 0x08, 0x41, 0xA3, 0x18, 0x2C, 0x42,  // "..A..,B
                /* 0420 */  0xA8, 0x78, 0x46, 0x3D, 0xE7, 0x20, 0x51, 0x1F,  // .xF=. Q.
                /* 0428 */  0x27, 0x82, 0x44, 0x6B, 0x6D, 0xE0, 0x3A, 0x51,  // '.Dkm.:Q
                /* 0430 */  0x18, 0xA5, 0xFD, 0x41, 0x90, 0x68, 0xE7, 0x01,  // ...A.h..
                /* 0438 */  0xFD, 0x08, 0x2C, 0x09, 0x44, 0x46, 0xAE, 0x33,  // ..,.DF.3
                /* 0440 */  0xF4, 0x4C, 0xE1, 0xE1, 0x78, 0x26, 0xCD, 0x5F,  // .L..x&._
                /* 0448 */  0x12, 0xC8, 0xA8, 0x2C, 0x01, 0x50, 0x37, 0x15,  // ...,.P7.
                /* 0450 */  0x8B, 0x3A, 0x3F, 0xA0, 0xAE, 0x2F, 0x3E, 0x3F,  // .:?../>?
                /* 0458 */  0xB0, 0x6B, 0xC0, 0x01, 0x9E, 0xBA, 0xCF, 0xC3,  // .k......
                /* 0460 */  0x98, 0x2D, 0xF8, 0x8C, 0xC0, 0xC7, 0xE0, 0xC3,  // .-......
                /* 0468 */  0x88, 0x2F, 0xEB, 0xFC, 0x90, 0x60, 0x40, 0xBC,  // ./...`@.
                /* 0470 */  0xF7, 0x33, 0x30, 0x0A, 0xD0, 0xB7, 0x20, 0xF0,  // .30... .
                /* 0478 */  0x4C, 0xF1, 0x24, 0x8F, 0xF3, 0x1C, 0x2A, 0x1E,  // L.$...*.
                /* 0480 */  0x1B, 0xE2, 0x4A, 0xC0, 0xC7, 0x72, 0x54, 0xEC,  // ..J..rT.
                /* 0488 */  0x78, 0x02, 0xE3, 0xEC, 0x70, 0xDA, 0xC5, 0x3E,  // x...p..>
                /* 0490 */  0x4F, 0xE8, 0x99, 0xC3, 0xC7, 0x13, 0x70, 0x9C,  // O.....p.
                /* 0498 */  0x04, 0x9E, 0x4E, 0xC0, 0x82, 0xFD, 0xB8, 0x80,  // ..N.....
                /* 04A0 */  0xBB, 0x00, 0x1C, 0xC0, 0x31, 0x45, 0x78, 0x09,  // ....1Ex.
                /* 04A8 */  0x62, 0x22, 0x47, 0x89, 0x1E, 0x00, 0xD7, 0x79,  // b"G....y
                /* 04B0 */  0x50, 0xA1, 0x03, 0x78, 0x57, 0xF1, 0x1C, 0x0E,  // P..xW...
                /* 04B8 */  0xC7, 0x87, 0x25, 0x9F, 0x1C, 0x7C, 0xCA, 0xF8,  // ..%..|..
                /* 04C0 */  0xFF, 0xBF, 0x4B, 0xB0, 0x41, 0x9C, 0xC2, 0x63,  // ..K.A..c
                /* 04C8 */  0xC3, 0x2B, 0x8D, 0x47, 0x80, 0x09, 0xE8, 0xE1,  // .+.G....
                /* 04D0 */  0x08, 0x4E, 0x87, 0xA8, 0x60, 0x0B, 0xA5, 0x30,  // .N..`..0
                /* 04D8 */  0xE6, 0xF2, 0x19, 0x04, 0xEE, 0x35, 0xCA, 0x70,  // .....5.p
                /* 04E0 */  0x7C, 0x88, 0x3E, 0x07, 0x1C, 0xFF, 0x91, 0xBE,  // |.>.....
                /* 04E8 */  0x2F, 0x79, 0xAC, 0xC7, 0xF7, 0x30, 0x02, 0xE3,  // /y...0..
                /* 04F0 */  0xA8, 0xE0, 0x69, 0x9D, 0x94, 0xB5, 0x1F, 0x29,  // ..i....)
                /* 04F8 */  0xC8, 0x1C, 0xD9, 0x28, 0x38, 0x1A, 0x3F, 0xC6,  // ...(8.?.
                /* 0500 */  0xC0, 0x9B, 0xE3, 0x53, 0xC9, 0xCB, 0xC1, 0x13,  // ...S....
                /* 0508 */  0x8D, 0x0F, 0x1A, 0x3E, 0xFC, 0xF0, 0x61, 0x3E,  // ...>..a>
                /* 0510 */  0x28, 0x80, 0xE5, 0x1A, 0xF0, 0xA6, 0x71, 0xD2,  // (.....q.
                /* 0518 */  0x4F, 0x31, 0x30, 0xC0, 0xA2, 0x04, 0xEB, 0x12,  // O10.....
                /* 0520 */  0x46, 0xB3, 0x7F, 0xEB, 0xB1, 0xD6, 0x29, 0x69,  // F.....)i
                /* 0528 */  0xFA, 0xEC, 0x7A, 0xC5, 0x0E, 0x20, 0x38, 0x8F,  // ..z.. 8.
                /* 0530 */  0x77, 0x48, 0x9D, 0x8D, 0xF8, 0xE1, 0x21, 0xC8,  // wH....!.
                /* 0538 */  0xF3, 0xC6, 0xCB, 0x43, 0x8C, 0x28, 0x47, 0x1A,  // ...C.(G.
                /* 0540 */  0xF8, 0xC1, 0xE3, 0x40, 0x9E, 0x13, 0x22, 0x04,  // ...@..".
                /* 0548 */  0x8A, 0x12, 0x28, 0x98, 0xEF, 0x1D, 0x2F, 0x21,  // ..(.../!
                /* 0550 */  0x3E, 0x12, 0xBC, 0x7B, 0xC4, 0x33, 0x52, 0x90,  // >..{.3R.
                /* 0558 */  0x48, 0x21, 0x83, 0x1D, 0x92, 0x31, 0x4E, 0x27,  // H!...1N'
                /* 0560 */  0x50, 0xBC, 0x18, 0x09, 0x7C, 0xAA, 0x01, 0xA7,  // P...|...
                /* 0568 */  0x90, 0x47, 0x95, 0x8E, 0x41, 0x3E, 0x8A, 0x1A,  // .G..A>..
                /* 0570 */  0x9E, 0x1F, 0x19, 0x7C, 0x38, 0xF0, 0xC8, 0x8E,  // ...|8...
                /* 0578 */  0xDC, 0xA7, 0x0B, 0x83, 0x1C, 0xC2, 0x11, 0x3C,  // .......<
                /* 0580 */  0x36, 0x3C, 0x15, 0xF8, 0xFF, 0x3F, 0x06, 0x76,  // 6<...?.v
                /* 0588 */  0x5D, 0xF0, 0xC1, 0x0A, 0xCE, 0x55, 0x22, 0xE0,  // ]....U".
                /* 0590 */  0xFB, 0xC1, 0x53, 0x08, 0xAC, 0xD3, 0x08, 0xFE,  // ..S.....
                /* 0598 */  0x64, 0x05, 0x7F, 0x3C, 0x3E, 0x10, 0x78, 0x3E,  // d..<>.x>
                /* 05A0 */  0xCF, 0x17, 0x8F, 0x45, 0x64, 0x10, 0xA8, 0xE3,  // ...Ed...
                /* 05A8 */  0x17, 0x1F, 0xF6, 0x69, 0xBD, 0x17, 0xF8, 0xB0,  // ...i....
                /* 05B0 */  0x70, 0x58, 0xEC, 0x08, 0xE2, 0x93, 0x98, 0xC7,  // pX......
                /* 05B8 */  0x03, 0xFE, 0x03, 0xCA, 0xC3, 0x86, 0xA7, 0xEF,  // ........
                /* 05C0 */  0xF9, 0xFA, 0x38, 0x85, 0x3D, 0x8B, 0xC0, 0x3B,  // ..8.=..;
                /* 05C8 */  0x37, 0x30, 0xA8, 0x17, 0x29, 0xCC, 0x91, 0x86,  // 70..)...
                /* 05D0 */  0xE3, 0x3D, 0x59, 0xF8, 0x6E, 0xE1, 0x23, 0x80,  // .=Y.n.#.
                /* 05D8 */  0x09, 0x7C, 0x1E, 0x01, 0x1E, 0xC3, 0xC2, 0x9D,  // .|......
                /* 05E0 */  0x09, 0x3C, 0x04, 0x3E, 0x80, 0x27, 0x89, 0x53,  // .<.>.'.S
                /* 05E8 */  0xF4, 0x95, 0xE2, 0xC4, 0x70, 0x23, 0xC3, 0x9C,  // ....p#..
                /* 05F0 */  0x39, 0xD8, 0xB0, 0x60, 0xC4, 0x7F, 0x25, 0xE8,  // 9..`..%.
                /* 05F8 */  0x00, 0xE0, 0xE8, 0xAF, 0x0E, 0x5D, 0x17, 0xF9,  // .....]..
                /* 0600 */  0x61, 0xC4, 0xE2, 0x80, 0x34, 0x4C, 0xF6, 0xFF,  // a...4L..
                /* 0608 */  0x1F, 0xA6, 0xCF, 0x8F, 0xFC, 0x68, 0xC4, 0x0E,  // .....h..
                /* 0610 */  0x20, 0x86, 0xB0, 0x18, 0x0A, 0x49, 0x81, 0xD0,  //  ....I..
                /* 0618 */  0x71, 0x8F, 0x9F, 0xF8, 0x0C, 0x66, 0x10, 0x8F,  // q....f..
                /* 0620 */  0xC2, 0xE7, 0x36, 0xDB, 0x38, 0xEE, 0x41, 0x8F,  // ..6.8.A.
                /* 0628 */  0x71, 0xDC, 0x03, 0xF5, 0x40, 0xD9, 0x31, 0x01,  // q...@.1.
                /* 0630 */  0xF6, 0x10, 0x5E, 0x13, 0xAA, 0x1E, 0x8D, 0x6E,  // ..^....n
                /* 0638 */  0x0F, 0x56, 0x77, 0xEF, 0x81, 0x7C, 0xEA, 0x03,  // .Vw..|..
                /* 0640 */  0x26, 0xA1, 0x4E, 0x7D, 0x40, 0xED, 0x20, 0xE0,  // &.N}@. .
                /* 0648 */  0x33, 0x04, 0xFE, 0xB2, 0x0A, 0x86, 0x2B, 0x02,  // 3.....+.
                /* 0650 */  0x06, 0xE6, 0xC9, 0x82, 0xBF, 0x0C, 0xD8, 0x69,  // .......i
                /* 0658 */  0x81, 0x0F, 0xC1, 0x02, 0x4F, 0x0B, 0xC8, 0x4B,  // ....O..K
                /* 0660 */  0x20, 0xFF, 0xFF, 0x1F, 0x1D, 0x98, 0xA8, 0xE3,  //  .......
                /* 0668 */  0x02, 0x4A, 0x0E, 0x85, 0xCE, 0x0B, 0x3E, 0x2E,  // .J....>.
                /* 0670 */  0xF0, 0xF8, 0x60, 0x14, 0xC4, 0xC7, 0x05, 0x47,  // ..`....G
                /* 0678 */  0x3B, 0x2E, 0xA0, 0x2F, 0xAA, 0xF0, 0xCE, 0x0B,  // ;../....
                /* 0680 */  0xF0, 0x2E, 0xAA, 0xEC, 0xBC, 0x00, 0x58, 0xBB,  // ......X.
                /* 0688 */  0x2B, 0x03, 0xB7, 0x73, 0x80, 0x8F, 0x75, 0xE0,  // +..s..u.
                /* 0690 */  0x39, 0x74, 0xE2, 0xEE, 0x0B, 0xD0, 0xC0, 0xDA,  // 9t......
                /* 0698 */  0xF4, 0xA9, 0xD1, 0xA8, 0x55, 0x83, 0x32, 0x35,  // ....U.25
                /* 06A0 */  0xCA, 0x34, 0xA8, 0xD5, 0xA7, 0x52, 0x63, 0xC6,  // .4...Rc.
                /* 06A8 */  0xFC, 0x0C, 0xCF, 0x47, 0x05, 0x2A, 0x66, 0x51,  // ...G.*fQ
                /* 06B0 */  0x1A, 0x95, 0xA3, 0x38, 0xF8, 0xFF, 0x83, 0x30,  // ...8...0
                /* 06B8 */  0xA9, 0xAF, 0x27, 0x19, 0x01, 0x91, 0x6E, 0x10,  // ..'...n.
                /* 06C0 */  0x01, 0x59, 0xE3, 0x9B, 0x50, 0x40, 0x56, 0x0C,  // .Y..P@V.
                /* 06C8 */  0x22, 0x20, 0xAB, 0x59, 0x95, 0x80, 0x2C, 0x0D,  // " .Y..,.
                /* 06D0 */  0x44, 0x40, 0x96, 0x61, 0x02, 0x88, 0x89, 0x02,  // D@.a....
                /* 06D8 */  0x11, 0x90, 0x43, 0xAB, 0x00, 0x62, 0x0A, 0x56,  // ..C..b.V
                /* 06E0 */  0x2D, 0x20, 0xA7, 0x05, 0x11, 0x90, 0xB3, 0x03,  // - ......
                /* 06E8 */  0xD1, 0x74, 0x8F, 0x07, 0x01, 0x39, 0x2A, 0x88,  // .t...9*.
                /* 06F0 */  0x80, 0x1C, 0x4B, 0x07, 0x10, 0x0B, 0x09, 0x22,  // ..K...."
                /* 06F8 */  0x20, 0x87, 0x79, 0x15, 0x08, 0xC8, 0xC9, 0x40,  //  .y....@
                /* 0700 */  0x04, 0xE4, 0x14, 0x34, 0x02, 0x72, 0x26, 0x0A,  // ...4.r&.
                /* 0708 */  0x01, 0x59, 0xAF, 0x15, 0x10, 0xA6, 0x54, 0xCB,  // .Y....T.
                /* 0710 */  0x00, 0x99, 0xCA, 0x75, 0x0B, 0xC8, 0x19, 0x41,  // ...u...A
                /* 0718 */  0x68, 0x82, 0xBF, 0xB3, 0x80, 0x9D, 0x07, 0x44,  // h......D
                /* 0720 */  0x40, 0xD6, 0xFF, 0x8C, 0x10, 0x90, 0xD3, 0x80,  // @.......
                /* 0728 */  0x08, 0xC8, 0xFF, 0x7F                           // ....
            })
        }
    }
}



SSDT2
-----
DefinitionBlock ("", "SSDT", 2, "LENOVO", "TP-R11  ", 0x00000002)
{
    Scope (\_SB)
    {
        Name (AGRB, 0xF8000000)
        Name (ADBG, Buffer (0x0100) {})
        Name (ADAT, Buffer (0x0520)
        {
            /* 0000 */  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0020 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x08,  // ........
            /* 0028 */  0x0F, 0x00, 0x03, 0x00, 0x00, 0x01, 0x01, 0x00,  // ........
            /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0038 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x04, 0x07, 0x01,  // ........
            /* 0040 */  0x03, 0x01, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0048 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x04,  // ........
            /* 0050 */  0x04, 0xFF, 0xFF, 0x02, 0x00, 0x01, 0x02, 0x00,  // ........
            /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0060 */  0x00, 0x00, 0x00, 0x05, 0x05, 0xFF, 0xFF, 0x03,  // ........
            /* 0068 */  0x00, 0x01, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0070 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0078 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0080 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0088 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0090 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0098 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 00A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00A8 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 00B0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0100 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0108 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0110 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0118 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0120 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0128 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0130 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0138 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0140 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0148 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0150 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0158 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0160 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0168 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0170 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0178 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0180 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0188 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0190 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0198 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0200 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0208 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0210 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0218 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0220 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0228 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0230 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0238 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0240 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0248 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0250 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0258 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0260 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0268 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0270 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0278 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0280 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0288 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0290 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0298 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0300 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0308 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0310 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0318 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0320 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0328 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0330 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0338 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0340 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0348 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0350 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0358 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0360 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0368 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0370 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0378 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0380 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0388 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0390 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0398 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0400 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0408 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0410 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0418 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0420 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0428 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0430 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0438 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0440 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0448 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0450 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0458 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0460 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0468 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0470 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0478 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0480 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0488 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0490 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0498 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0500 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0508 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0510 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0518 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
        })
        Method (ALIB, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                CreateWordField (Arg1, 0x00, A014)
                CreateWordField (Arg1, 0x02, A015)
                CreateDWordField (Arg1, 0x04, A016)
                Local0 = Buffer (0x0100) {}
                CreateWordField (Local0, 0x00, A017)
                A017 = A014 /* \_SB_.ALIB.A014 */
                CreateWordField (Local0, 0x02, A018)
                A018 = A015 /* \_SB_.ALIB.A015 */
                CreateDWordField (Local0, 0x04, A019)
                A019 = A016 /* \_SB_.ALIB.A016 */
                A019 &= ~0x0F
                If ((DerefOf (\_SB.ADAT [0x00]) > 0x00))
                {
                    Local1 = 0x0F
                }
                Else
                {
                    Local1 = 0x01
                }

                A019 |= Local1
                Return (Local0)
            }

            If ((Arg0 == 0x01))
            {
                Local0 = DerefOf (Arg1 [0x02])
                Return (A020 (Local0))
            }

            If ((Arg0 == 0x02))
            {
                Local0 = Buffer (0x0100)
                    {
                         0x03, 0x00, 0x00                                 // ...
                    }
                Return (Local0)
            }

            If ((Arg0 == 0x03))
            {
                Local0 = Buffer (0x0100)
                    {
                         0x03, 0x00, 0x00                                 // ...
                    }
                Return (Local0)
            }

            If ((Arg0 == 0x06))
            {
                Local0 = DerefOf (Arg1 [0x04])
                Local1 = DerefOf (Arg1 [0x02])
                Return (A023 (Local0, Local1))
            }

            If ((Arg0 == 0x0A))
            {
                Local0 = DerefOf (Arg1 [0x02])
                Return (A024 (Local0))
            }

            If ((Arg0 == 0x0B))
            {
                Local0 = DerefOf (Arg1 [0x02])
                Local1 = DerefOf (Arg1 [0x03])
                Local2 = DerefOf (Arg1 [0x04])
                Local2 |= (DerefOf (Arg1 [0x05]) << 0x08)
                Local2 |= (DerefOf (Arg1 [0x06]) << 0x10)
                Local2 |= (DerefOf (Arg1 [0x07]) << 0x18)
                Local3 = DerefOf (Arg1 [0x08])
                Local3 |= (DerefOf (Arg1 [0x09]) << 0x08)
                Local3 |= (DerefOf (Arg1 [0x0A]) << 0x10)
                Local3 |= (DerefOf (Arg1 [0x0B]) << 0x18)
                Local4 = DerefOf (Arg1 [0x0C])
                Local4 |= (DerefOf (Arg1 [0x0D]) << 0x08)
                Local4 |= (DerefOf (Arg1 [0x0E]) << 0x10)
                Local4 |= (DerefOf (Arg1 [0x0F]) << 0x18)
                Return (A025 (Local0, Local1, Local2, Local3, Local4))
            }

            If ((Arg0 == 0x0C))
            {
                A026 (Arg1)
            }

            If ((Arg0 == 0x10))
            {
                Local7 = Buffer (0x18) {}
                CreateDWordField (Local7, 0x00, A027)
                CreateDWordField (Local7, 0x04, A028)
                CreateDWordField (Local7, 0x08, A029)
                CreateDWordField (Local7, 0x0C, A030)
                CreateDWordField (Local7, 0x10, A031)
                CreateDWordField (Local7, 0x14, A032)
                A027 = 0x00
                A028 = 0x00
                A029 = 0x00
                A030 = 0x00
                A031 = 0x00
                A032 = 0x00
                A012 (0x51, Local7)
            }

            If ((Arg0 == 0x11))
            {
                Local6 = Buffer (0x18) {}
                CreateDWordField (Local6, 0x00, A006)
                CreateDWordField (Local6, 0x04, A007)
                CreateDWordField (Local6, 0x08, A008)
                CreateDWordField (Local6, 0x0C, A009)
                CreateDWordField (Local6, 0x10, A010)
                CreateDWordField (Local6, 0x14, A011)
                A006 = 0x00
                A007 = 0x00
                A008 = 0x00
                A009 = 0x00
                A010 = 0x00
                A011 = 0x00
                A012 (0x52, Local6)
            }

            Return (0x00)
        }

        Method (A023, 2, NotSerialized)
        {
            Local0 = 0x00
            While ((Local0 < 0x07))
            {
                Local1 = A084 (Local0, Arg1)
                If ((Local1 == 0x01))
                {
                    Local2 = A085 (Local0, Arg0)
                    Break
                }

                Local0++
            }

            Local7 = Buffer (0x0A) {}
            CreateWordField (Local7, 0x00, A017)
            CreateByteField (Local7, 0x02, A034)
            CreateByteField (Local7, 0x03, A086)
            A017 = 0x04
            A034 = 0x00
            If ((Local2 == 0x00))
            {
                A086 = 0x00
            }
            Else
            {
                A086 = 0x01
            }

            Return (Local7)
        }

        Method (A084, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A079 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A079 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A079 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A079 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A079 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A079 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A079 (Arg1))
            }
        }

        Method (A085, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A080 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A080 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A080 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A080 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A080 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A080 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A080 (Arg1))
            }
        }

        Name (AD00, 0x00)
        Name (DK00, 0x00)
        Method (A020, 1, NotSerialized)
        {
            AD00 = Arg0
            A005 ()
        }

        Method (A024, 1, NotSerialized)
        {
            DK00 = Arg0
        }

        Method (A025, 5, NotSerialized)
        {
        }

        Name (AP01, 0x00)
        Name (AP02, 0x00)
        Name (AP03, 0x00)
        Name (AP05, 0x00)
        Name (AP0B, 0xFF)
        Name (AP10, 0x00)
        Method (A033, 1, NotSerialized)
        {
            Local7 = Buffer (0x0100) {}
            CreateWordField (Local7, 0x00, A017)
            A017 = 0x03
            CreateByteField (Local7, 0x02, A034)
            A034 = 0x01
            If ((DerefOf (\_SB.ADAT [0x00]) == 0x01))
            {
                A034 = 0x02
                Return (Local7)
            }

            If ((DerefOf (\_SB.ADAT [0x00]) == 0x00))
            {
                A034 = 0x01
                Return (Local7)
            }

            A035 (Arg0)
            If ((AP05 != 0x01))
            {
                Return (Local7)
            }

            A036 ()
            A034 = 0x02
            Return (Local7)
        }

        Method (A037, 0, NotSerialized)
        {
            If ((DerefOf (\_SB.ADAT [0x00]) <= 0x01))
            {
                Return (0x00)
            }

            If ((AP05 != 0x01))
            {
                Return (0x00)
            }

            A036 ()
        }

        Method (A038, 1, NotSerialized)
        {
            If ((Arg0 == 0x03))
            {
                AP01 = 0x00
            }
        }

        Method (A039, 1, NotSerialized)
        {
            AP10 = 0x01
        }

        Method (A040, 1, NotSerialized)
        {
            AP05 = Arg0
            If ((DerefOf (\_SB.ADAT [0x00]) <= 0x01))
            {
                Return (0x00)
            }

            Local1 = AP0B /* \_SB_.AP0B */
            If ((AP05 == 0x00))
            {
                Local0 = 0x00
                While ((Local0 < 0x07))
                {
                    A041 (Local0)
                    Local0++
                }

                AP0B = 0x00
            }

            A036 ()
            AP0B = Local1
            Local7 = Buffer (0x0100) {}
            Local7 [0x00] = 0x03
            Local7 [0x01] = 0x00
            Local7 [0x02] = 0x00
            Return (Local7)
        }

        Method (A042, 0, NotSerialized)
        {
            If ((AP0B != 0xFF))
            {
                Return (AP0B) /* \_SB_.AP0B */
            }

            Return (AD00) /* \_SB_.AD00 */
        }

        Method (A035, 1, NotSerialized)
        {
            CreateWordField (Arg0, 0x02, AP06)
            CreateWordField (Arg0, 0x04, AP07)
            CreateWordField (Arg0, 0x06, AP08)
            CreateByteField (Arg0, 0x08, AP09)
            CreateByteField (Arg0, 0x09, AP0A)
            Local0 = 0x00
            While ((Local0 < 0x07))
            {
                If ((A043 (Local0, AP06) == 0x01))
                {
                    If (((AP07 & AP08) == 0x01))
                    {
                        Local1 = A044 (Local0)
                        A045 (Local0, Local1)
                    }
                    Else
                    {
                        A045 (Local0, AP0A)
                    }

                    Break
                }

                Local0++
            }
        }

        Method (A046, 0, NotSerialized)
        {
            AP02 = 0x01
            Local0 = 0x00
            While ((Local0 < 0x07))
            {
                Local1 = A047 (Local0)
                If ((Local1 > AP02))
                {
                    AP02 = Local1
                }

                Local0++
            }
        }

        Method (A048, 0, NotSerialized)
        {
            AP03 = 0x00
            Local0 = 0x00
            While ((Local0 < 0x07))
            {
                Local1 = A049 (Local0)
                If ((Local1 > AP03))
                {
                    AP03 = Local1
                }

                Local0++
            }
        }

        Method (A036, 0, NotSerialized)
        {
            A048 ()
            A046 ()
            If ((AP02 != AP01))
            {
                A013 (AP02, AP01)
            }

            If ((AP02 > AP01))
            {
                AP01 = AP02 /* \_SB_.AP02 */
            }

            Local0 = 0x00
            While ((Local0 < 0x07))
            {
                Local1 = A047 (Local0)
                Local2 = A050 (Local0)
                If ((Local1 != Local2))
                {
                    A051 (Local0, Local1)
                }
                ElseIf ((AP10 == 0x01))
                {
                    A051 (Local0, Local1)
                }

                Local0++
            }

            If ((AP02 < AP01))
            {
                AP01 = AP02 /* \_SB_.AP02 */
            }
            ElseIf ((AP10 == 0x01))
            {
                AP01 = AP02 /* \_SB_.AP02 */
            }

            AP10 = 0x00
        }

        Method (A051, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A052 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A052 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A052 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A052 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A052 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A052 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A052 (Arg1))
            }
        }

        Method (A050, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A053 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A053 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A053 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A053 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A053 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A053 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A053 ())
            }
        }

        Method (A047, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A054 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A054 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A054 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A054 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A054 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A054 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A054 ())
            }
        }

        Method (A049, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A055 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A055 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A055 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A055 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A055 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A055 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A055 ())
            }
        }

        Method (A044, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A056 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A056 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A056 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A056 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A056 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A056 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A056 ())
            }
        }

        Method (A045, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A057 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A057 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A057 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A057 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A057 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A057 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A057 (Arg1))
            }
        }

        Method (A043, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A058 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A058 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A058 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A058 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A058 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A058 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A058 (Arg1))
            }
        }

        Method (A041, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A059 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A059 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A059 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A059 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A059 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A059 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A059 ())
            }
        }

        OperationRegion (A111, SystemMemory, AGRB, 0x1000)
        Field (A111, DWordAcc, Lock, Preserve)
        {
            Offset (0xB8), 
            A112,   32
        }

        BankField (A111, A112, 0x03B10528, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A109,   32
        }

        BankField (A111, A112, 0x03B10564, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A103,   32
        }

        BankField (A111, A112, 0x03B10998, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A071,   32
        }

        BankField (A111, A112, 0x03B1099C, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A104,   32
        }

        BankField (A111, A112, 0x03B109A0, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A105,   32
        }

        BankField (A111, A112, 0x03B109A4, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A106,   32
        }

        BankField (A111, A112, 0x03B109A8, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A107,   32
        }

        BankField (A111, A112, 0x03B109AC, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A108,   32
        }

        BankField (A111, A112, 0x13B00084, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A089,   32
        }

        BankField (A111, A112, 0x11140280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A090,   32
        }

        BankField (A111, A112, 0x11141280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A091,   32
        }

        BankField (A111, A112, 0x11142280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A092,   32
        }

        BankField (A111, A112, 0x11143280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A093,   32
        }

        BankField (A111, A112, 0x11144280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A094,   32
        }

        BankField (A111, A112, 0x11145280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A095,   32
        }

        BankField (A111, A112, 0x11146280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A096,   32
        }

        Method (A087, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A067 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A067 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A067 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A067 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A067 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A067 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A067 (Arg1))
            }
        }

        Method (A088, 2, NotSerialized)
        {
            If ((Arg1 == 0x01))
            {
                If ((Arg0 == 0x00))
                {
                    Local0 = 0x00090300
                }

                If ((Arg0 == 0x01))
                {
                    Local0 = 0x000A0300
                }

                If ((Arg0 == 0x02))
                {
                    Local0 = 0x000B0300
                }

                If ((Arg0 == 0x03))
                {
                    Local0 = 0x000C0300
                }

                If ((Arg0 == 0x04))
                {
                    Local0 = 0x000D0300
                }

                If ((Arg0 == 0x05))
                {
                    Local0 = 0x000E0300
                }

                If ((Arg0 == 0x06))
                {
                    Local0 = 0x000F0300
                }

                Local1 = A089 /* \_SB_.A089 */
                Local1 &= 0xFF00FCFF
                A089 = (Local0 | Local1)
                Local1 = A089 /* \_SB_.A089 */
                A089 = (0xFFFFFDFF & Local1)
            }
            ElseIf ((Arg1 == 0x00))
            {
                If ((Arg0 == 0x00))
                {
                    Local1 = A090 /* \_SB_.A090 */
                    A090 = (0x00400000 | Local1)
                    Local1 = A090 /* \_SB_.A090 */
                    A090 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x01))
                {
                    Local1 = A091 /* \_SB_.A091 */
                    A091 = (0x00400000 | Local1)
                    Local1 = A091 /* \_SB_.A091 */
                    A091 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x02))
                {
                    Local1 = A092 /* \_SB_.A092 */
                    A092 = (0x00400000 | Local1)
                    Local1 = A092 /* \_SB_.A092 */
                    A092 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x03))
                {
                    Local1 = A093 /* \_SB_.A093 */
                    A093 = (0x00400000 | Local1)
                    Local1 = A093 /* \_SB_.A093 */
                    A093 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x04))
                {
                    Local1 = A094 /* \_SB_.A094 */
                    A094 = (0x00400000 | Local1)
                    Local1 = A094 /* \_SB_.A094 */
                    A094 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x05))
                {
                    Local1 = A095 /* \_SB_.A095 */
                    A095 = (0x00400000 | Local1)
                    Local1 = A095 /* \_SB_.A095 */
                    A095 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x06))
                {
                    Local1 = A096 /* \_SB_.A096 */
                    A096 = (0x00400000 | Local1)
                    Local1 = A096 /* \_SB_.A096 */
                    A096 = (0xFFBFFFFF & Local1)
                }
            }
        }

        Method (A004, 2, NotSerialized)
        {
            Local0 = 0x00
            While ((Local0 < 0x07))
            {
                Local1 = A087 (Local0, Arg1)
                If ((Local1 == 0x01))
                {
                    A088 (Local0, Arg1)
                    Break
                }

                Local0++
            }
        }

        Method (A012, 2, Serialized)
        {
            CreateDWordField (Arg1, 0x00, A097)
            CreateDWordField (Arg1, 0x04, A098)
            CreateDWordField (Arg1, 0x08, A099)
            CreateDWordField (Arg1, 0x0C, A100)
            CreateDWordField (Arg1, 0x10, A101)
            CreateDWordField (Arg1, 0x14, A102)
            A103 = 0x00
            While ((A103 != 0x00)) {}
            A071 = A097 /* \_SB_.A012.A097 */
            A104 = A098 /* \_SB_.A012.A098 */
            A105 = A099 /* \_SB_.A012.A099 */
            A106 = A100 /* \_SB_.A012.A100 */
            A107 = A101 /* \_SB_.A012.A101 */
            A108 = A102 /* \_SB_.A012.A102 */
            A109 = Arg0
            While ((A103 == 0x00)) {}
        }

        Method (A082, 5, NotSerialized)
        {
            Local7 = Buffer (0x18) {}
            CreateDWordField (Local7, 0x00, A006)
            CreateDWordField (Local7, 0x04, A007)
            CreateDWordField (Local7, 0x08, A008)
            CreateDWordField (Local7, 0x0C, A009)
            CreateDWordField (Local7, 0x10, A010)
            CreateDWordField (Local7, 0x14, A011)
            A006 = Arg0
            A007 = Arg1
            A008 = Arg2
            A009 = Arg3
            A012 (0x0A, Local7)
        }

        Method (A026, 1, Serialized)
        {
            CreateWordField (Arg0, 0x00, A110)
            Local7 = Buffer (0x18) {}
            CreateDWordField (Local7, 0x00, A006)
            CreateDWordField (Local7, 0x04, A007)
            CreateDWordField (Local7, 0x08, A008)
            CreateDWordField (Local7, 0x0C, A009)
            CreateDWordField (Local7, 0x10, A010)
            CreateDWordField (Local7, 0x14, A011)
            Local0 = 0x02
            While ((Local0 < A110))
            {
                Local1 = DerefOf (Arg0 [Local0])
                Local0++
                Local2 = DerefOf (Arg0 [Local0])
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x08)
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x10)
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x18)
                Local0++
                A006 = 0x00
                A007 = 0x00
                A008 = 0x00
                A009 = 0x00
                A010 = 0x00
                A011 = 0x00
                If ((Local1 == 0x01))
                {
                    A006 = Local2
                    A012 (0x1E, Local7)
                }

                If ((Local1 == 0x03))
                {
                    A006 = Local2
                    A012 (0x1F, Local7)
                }

                If ((Local1 == 0x05))
                {
                    A006 = Local2
                    A012 (0x1A, Local7)
                }

                If ((Local1 == 0x06))
                {
                    A006 = Local2
                    A012 (0x1B, Local7)
                }

                If ((Local1 == 0x07))
                {
                    A006 = Local2
                    A012 (0x1C, Local7)
                }

                If ((Local1 == 0x08))
                {
                    A006 = Local2
                    A012 (0x1D, Local7)
                }

                If ((Local1 == 0x09))
                {
                    A006 = Local2
                    A012 (0x26, Local7)
                }

                If ((Local1 == 0x0A))
                {
                    A006 = Local2
                    A012 (0x27, Local7)
                }

                If ((Local1 == 0x0B))
                {
                    A006 = Local2
                    A012 (0x20, Local7)
                }

                If ((Local1 == 0x0C))
                {
                    A006 = Local2
                    A012 (0x22, Local7)
                }

                If ((Local1 == 0x0D))
                {
                    A006 = Local2
                    A012 (0x24, Local7)
                }

                If ((Local1 == 0x0F))
                {
                    A006 = Local2
                    A012 (0x25, Local7)
                }

                If ((DerefOf (\_SB.ADAT [0x08]) == 0x01))
                {
                    If ((Local1 == 0x10))
                    {
                        If ((Local2 == 0x00))
                        {
                            A012 (0x2B, Local7)
                        }
                        Else
                        {
                            A012 (0x2A, Local7)
                        }
                    }
                }
            }
        }

        Device (AWR0)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, 0x90)  // _UID: Unique ID
            Device (ABR0)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x80)  // _UID: Unique ID
                Name (AB12, 0x20)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A072, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A072, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A065,   8, 
                    A066,   8, 
                    Offset (0x68), 
                    A073,   2, 
                        ,   2, 
                    A074,   1, 
                    A075,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A076,   1, 
                    Offset (0x88), 
                    A077,   4, 
                        ,   1, 
                    A078,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A060, 0, NotSerialized)
                {
                    Local0 = A042 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR0.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR0.AB0E */
                    }
                }

                Method (A055, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A061, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR0.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A054, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR0.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR0.AB0E */
                    }

                    Local0 = A061 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR0.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A060 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A053, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR0.AB02 */
                }

                Method (A056, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR0.AB00 */
                }

                Method (A052, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A062 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A063 (0x00)
                    Name (A064, 0x00)
                    A063 (0x01)
                }

                Method (A057, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A058, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A065) && (Local0 <= A066)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A067, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A059, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A062, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A068, 0, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A069 (Local0, 0x00)
                    Local2 = A069 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A069 (0x00, Local0)
                                    Local5 = 0x00
                                    If (((Local4 && 0x09) == 0x00))
                                    {
                                        If (((Local4 && 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A069 (0x00, Local0)
                                        }

                                        A070 (0x34, Local3, 0x00)
                                        Local6 = A071 /* \_SB_.A071 */
                                        If ((Local6 == 0x01))
                                        {
                                            A070 (0x28, (Local4 & 0xFFFFFFF0), 0x00)
                                            A070 (0x29, Local5, 0x00)
                                            A070 (0x05, 0x00, (0x01 << 0x0A))
                                            A070 (0x2A, 0x00, 0x00)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A083, 2, NotSerialized)
                {
                    If ((A069 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A069 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A069 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A063, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A069 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A069 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A083 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A069 (Local0, (Local1 + 0x10))
                                A081 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A081 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A081, 3, Serialized)
                {
                    Local0 = (AGRB + (A065 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A069, 2, Serialized)
                {
                    Local0 = (AGRB + (A065 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR0.A069.ADRR */
                }

                Method (A079, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A067 (Arg0))
                }

                Method (A080, 1, NotSerialized)
                {
                    Name (A064, 0x00)
                    Local2 = 0x00
                    A064 = A073 /* \_SB_.AWR0.ABR0.A073 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A074 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A063 (0x00)
                        Local0 = A069 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A081 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A069 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A081 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A074 = 0x01
                        Local0 = 0x05
                    }

                    A073 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A082 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A069 (0x00, 0x00)
                            A082 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A073 = A064 /* \_SB_.AWR0.ABR0.A080.A064 */
                    If ((A064 != 0x00))
                    {
                        A063 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR1)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x81)  // _UID: Unique ID
                Name (AB12, 0x34)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A072, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A072, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A065,   8, 
                    A066,   8, 
                    Offset (0x68), 
                    A073,   2, 
                        ,   2, 
                    A074,   1, 
                    A075,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A076,   1, 
                    Offset (0x88), 
                    A077,   4, 
                        ,   1, 
                    A078,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A060, 0, NotSerialized)
                {
                    Local0 = A042 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR1.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR1.AB0E */
                    }
                }

                Method (A055, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A061, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR1.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A054, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR1.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR1.AB0E */
                    }

                    Local0 = A061 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR1.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A060 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A053, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR1.AB02 */
                }

                Method (A056, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR1.AB00 */
                }

                Method (A052, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A062 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A063 (0x00)
                    Name (A064, 0x00)
                    A063 (0x01)
                }

                Method (A057, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A058, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A065) && (Local0 <= A066)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A067, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A059, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A062, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A068, 0, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A069 (Local0, 0x00)
                    Local2 = A069 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A069 (0x00, Local0)
                                    Local5 = 0x00
                                    If (((Local4 && 0x09) == 0x00))
                                    {
                                        If (((Local4 && 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A069 (0x00, Local0)
                                        }

                                        A070 (0x34, Local3, 0x00)
                                        Local6 = A071 /* \_SB_.A071 */
                                        If ((Local6 == 0x01))
                                        {
                                            A070 (0x28, (Local4 & 0xFFFFFFF0), 0x00)
                                            A070 (0x29, Local5, 0x00)
                                            A070 (0x05, 0x00, (0x01 << 0x0A))
                                            A070 (0x2A, 0x00, 0x00)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A083, 2, NotSerialized)
                {
                    If ((A069 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A069 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A069 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A063, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A069 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A069 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A083 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A069 (Local0, (Local1 + 0x10))
                                A081 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A081 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A081, 3, Serialized)
                {
                    Local0 = (AGRB + (A065 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A069, 2, Serialized)
                {
                    Local0 = (AGRB + (A065 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR1.A069.ADRR */
                }

                Method (A079, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A067 (Arg0))
                }

                Method (A080, 1, NotSerialized)
                {
                    Name (A064, 0x00)
                    Local2 = 0x00
                    A064 = A073 /* \_SB_.AWR0.ABR1.A073 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A074 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A063 (0x00)
                        Local0 = A069 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A081 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A069 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A081 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A074 = 0x01
                        Local0 = 0x05
                    }

                    A073 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A082 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A069 (0x00, 0x00)
                            A082 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A073 = A064 /* \_SB_.AWR0.ABR1.A080.A064 */
                    If ((A064 != 0x00))
                    {
                        A063 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR2)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x82)  // _UID: Unique ID
                Name (AB12, 0x48)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A072, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A072, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A065,   8, 
                    A066,   8, 
                    Offset (0x68), 
                    A073,   2, 
                        ,   2, 
                    A074,   1, 
                    A075,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A076,   1, 
                    Offset (0x88), 
                    A077,   4, 
                        ,   1, 
                    A078,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A060, 0, NotSerialized)
                {
                    Local0 = A042 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR2.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR2.AB0E */
                    }
                }

                Method (A055, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A061, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR2.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A054, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR2.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR2.AB0E */
                    }

                    Local0 = A061 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR2.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A060 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A053, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR2.AB02 */
                }

                Method (A056, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR2.AB00 */
                }

                Method (A052, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A062 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A063 (0x00)
                    Name (A064, 0x00)
                    A063 (0x01)
                }

                Method (A057, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A058, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A065) && (Local0 <= A066)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A067, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A059, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A062, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A068, 0, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A069 (Local0, 0x00)
                    Local2 = A069 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A069 (0x00, Local0)
                                    Local5 = 0x00
                                    If (((Local4 && 0x09) == 0x00))
                                    {
                                        If (((Local4 && 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A069 (0x00, Local0)
                                        }

                                        A070 (0x34, Local3, 0x00)
                                        Local6 = A071 /* \_SB_.A071 */
                                        If ((Local6 == 0x01))
                                        {
                                            A070 (0x28, (Local4 & 0xFFFFFFF0), 0x00)
                                            A070 (0x29, Local5, 0x00)
                                            A070 (0x05, 0x00, (0x01 << 0x0A))
                                            A070 (0x2A, 0x00, 0x00)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A083, 2, NotSerialized)
                {
                    If ((A069 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A069 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A069 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A063, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A069 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A069 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A083 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A069 (Local0, (Local1 + 0x10))
                                A081 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A081 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A081, 3, Serialized)
                {
                    Local0 = (AGRB + (A065 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A069, 2, Serialized)
                {
                    Local0 = (AGRB + (A065 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR2.A069.ADRR */
                }

                Method (A079, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A067 (Arg0))
                }

                Method (A080, 1, NotSerialized)
                {
                    Name (A064, 0x00)
                    Local2 = 0x00
                    A064 = A073 /* \_SB_.AWR0.ABR2.A073 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A074 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A063 (0x00)
                        Local0 = A069 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A081 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A069 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A081 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A074 = 0x01
                        Local0 = 0x05
                    }

                    A073 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A082 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A069 (0x00, 0x00)
                            A082 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A073 = A064 /* \_SB_.AWR0.ABR2.A080.A064 */
                    If ((A064 != 0x00))
                    {
                        A063 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR3)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x83)  // _UID: Unique ID
                Name (AB12, 0x5C)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A072, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A072, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A065,   8, 
                    A066,   8, 
                    Offset (0x68), 
                    A073,   2, 
                        ,   2, 
                    A074,   1, 
                    A075,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A076,   1, 
                    Offset (0x88), 
                    A077,   4, 
                        ,   1, 
                    A078,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A060, 0, NotSerialized)
                {
                    Local0 = A042 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR3.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR3.AB0E */
                    }
                }

                Method (A055, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A061, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR3.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A054, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR3.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR3.AB0E */
                    }

                    Local0 = A061 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR3.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A060 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A053, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR3.AB02 */
                }

                Method (A056, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR3.AB00 */
                }

                Method (A052, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A062 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A063 (0x00)
                    Name (A064, 0x00)
                    A063 (0x01)
                }

                Method (A057, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A058, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A065) && (Local0 <= A066)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A067, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A059, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A062, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A068, 0, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A069 (Local0, 0x00)
                    Local2 = A069 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A069 (0x00, Local0)
                                    Local5 = 0x00
                                    If (((Local4 && 0x09) == 0x00))
                                    {
                                        If (((Local4 && 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A069 (0x00, Local0)
                                        }

                                        A070 (0x34, Local3, 0x00)
                                        Local6 = A071 /* \_SB_.A071 */
                                        If ((Local6 == 0x01))
                                        {
                                            A070 (0x28, (Local4 & 0xFFFFFFF0), 0x00)
                                            A070 (0x29, Local5, 0x00)
                                            A070 (0x05, 0x00, (0x01 << 0x0A))
                                            A070 (0x2A, 0x00, 0x00)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A083, 2, NotSerialized)
                {
                    If ((A069 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A069 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A069 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A063, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A069 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A069 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A083 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A069 (Local0, (Local1 + 0x10))
                                A081 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A081 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A081, 3, Serialized)
                {
                    Local0 = (AGRB + (A065 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A069, 2, Serialized)
                {
                    Local0 = (AGRB + (A065 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR3.A069.ADRR */
                }

                Method (A079, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A067 (Arg0))
                }

                Method (A080, 1, NotSerialized)
                {
                    Name (A064, 0x00)
                    Local2 = 0x00
                    A064 = A073 /* \_SB_.AWR0.ABR3.A073 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A074 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A063 (0x00)
                        Local0 = A069 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A081 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A069 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A081 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A074 = 0x01
                        Local0 = 0x05
                    }

                    A073 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A082 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A069 (0x00, 0x00)
                            A082 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A073 = A064 /* \_SB_.AWR0.ABR3.A080.A064 */
                    If ((A064 != 0x00))
                    {
                        A063 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR4)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x84)  // _UID: Unique ID
                Name (AB12, 0x70)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A072, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A072, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A065,   8, 
                    A066,   8, 
                    Offset (0x68), 
                    A073,   2, 
                        ,   2, 
                    A074,   1, 
                    A075,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A076,   1, 
                    Offset (0x88), 
                    A077,   4, 
                        ,   1, 
                    A078,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A060, 0, NotSerialized)
                {
                    Local0 = A042 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR4.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR4.AB0E */
                    }
                }

                Method (A055, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A061, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR4.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A054, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR4.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR4.AB0E */
                    }

                    Local0 = A061 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR4.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A060 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A053, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR4.AB02 */
                }

                Method (A056, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR4.AB00 */
                }

                Method (A052, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A062 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A063 (0x00)
                    Name (A064, 0x00)
                    A063 (0x01)
                }

                Method (A057, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A058, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A065) && (Local0 <= A066)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A067, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A059, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A062, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A068, 0, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A069 (Local0, 0x00)
                    Local2 = A069 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A069 (0x00, Local0)
                                    Local5 = 0x00
                                    If (((Local4 && 0x09) == 0x00))
                                    {
                                        If (((Local4 && 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A069 (0x00, Local0)
                                        }

                                        A070 (0x34, Local3, 0x00)
                                        Local6 = A071 /* \_SB_.A071 */
                                        If ((Local6 == 0x01))
                                        {
                                            A070 (0x28, (Local4 & 0xFFFFFFF0), 0x00)
                                            A070 (0x29, Local5, 0x00)
                                            A070 (0x05, 0x00, (0x01 << 0x0A))
                                            A070 (0x2A, 0x00, 0x00)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A083, 2, NotSerialized)
                {
                    If ((A069 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A069 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A069 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A063, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A069 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A069 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A083 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A069 (Local0, (Local1 + 0x10))
                                A081 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A081 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A081, 3, Serialized)
                {
                    Local0 = (AGRB + (A065 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A069, 2, Serialized)
                {
                    Local0 = (AGRB + (A065 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR4.A069.ADRR */
                }

                Method (A079, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A067 (Arg0))
                }

                Method (A080, 1, NotSerialized)
                {
                    Name (A064, 0x00)
                    Local2 = 0x00
                    A064 = A073 /* \_SB_.AWR0.ABR4.A073 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A074 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A063 (0x00)
                        Local0 = A069 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A081 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A069 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A081 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A074 = 0x01
                        Local0 = 0x05
                    }

                    A073 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A082 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A069 (0x00, 0x00)
                            A082 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A073 = A064 /* \_SB_.AWR0.ABR4.A080.A064 */
                    If ((A064 != 0x00))
                    {
                        A063 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR5)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x85)  // _UID: Unique ID
                Name (AB12, 0x84)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A072, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A072, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A065,   8, 
                    A066,   8, 
                    Offset (0x68), 
                    A073,   2, 
                        ,   2, 
                    A074,   1, 
                    A075,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A076,   1, 
                    Offset (0x88), 
                    A077,   4, 
                        ,   1, 
                    A078,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A060, 0, NotSerialized)
                {
                    Local0 = A042 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR5.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR5.AB0E */
                    }
                }

                Method (A055, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A061, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR5.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A054, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR5.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR5.AB0E */
                    }

                    Local0 = A061 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR5.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A060 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A053, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR5.AB02 */
                }

                Method (A056, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR5.AB00 */
                }

                Method (A052, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A062 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A063 (0x00)
                    Name (A064, 0x00)
                    A063 (0x01)
                }

                Method (A057, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A058, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A065) && (Local0 <= A066)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A067, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A059, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A062, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A068, 0, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A069 (Local0, 0x00)
                    Local2 = A069 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A069 (0x00, Local0)
                                    Local5 = 0x00
                                    If (((Local4 && 0x09) == 0x00))
                                    {
                                        If (((Local4 && 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A069 (0x00, Local0)
                                        }

                                        A070 (0x34, Local3, 0x00)
                                        Local6 = A071 /* \_SB_.A071 */
                                        If ((Local6 == 0x01))
                                        {
                                            A070 (0x28, (Local4 & 0xFFFFFFF0), 0x00)
                                            A070 (0x29, Local5, 0x00)
                                            A070 (0x05, 0x00, (0x01 << 0x0A))
                                            A070 (0x2A, 0x00, 0x00)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A083, 2, NotSerialized)
                {
                    If ((A069 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A069 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A069 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A063, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A069 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A069 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A083 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A069 (Local0, (Local1 + 0x10))
                                A081 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A081 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A081, 3, Serialized)
                {
                    Local0 = (AGRB + (A065 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A069, 2, Serialized)
                {
                    Local0 = (AGRB + (A065 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR5.A069.ADRR */
                }

                Method (A079, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A067 (Arg0))
                }

                Method (A080, 1, NotSerialized)
                {
                    Name (A064, 0x00)
                    Local2 = 0x00
                    A064 = A073 /* \_SB_.AWR0.ABR5.A073 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A074 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A063 (0x00)
                        Local0 = A069 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A081 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A069 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A081 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A074 = 0x01
                        Local0 = 0x05
                    }

                    A073 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A082 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A069 (0x00, 0x00)
                            A082 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A073 = A064 /* \_SB_.AWR0.ABR5.A080.A064 */
                    If ((A064 != 0x00))
                    {
                        A063 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR6)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x86)  // _UID: Unique ID
                Name (AB12, 0x98)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A072, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A072, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A065,   8, 
                    A066,   8, 
                    Offset (0x68), 
                    A073,   2, 
                        ,   2, 
                    A074,   1, 
                    A075,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A076,   1, 
                    Offset (0x88), 
                    A077,   4, 
                        ,   1, 
                    A078,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A060, 0, NotSerialized)
                {
                    Local0 = A042 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR6.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR6.AB0E */
                    }
                }

                Method (A055, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A061, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR6.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A054, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR6.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR6.AB0E */
                    }

                    Local0 = A061 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR6.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A060 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A053, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR6.AB02 */
                }

                Method (A056, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR6.AB00 */
                }

                Method (A052, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A062 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A063 (0x00)
                    Name (A064, 0x00)
                    A063 (0x01)
                }

                Method (A057, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A058, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A065) && (Local0 <= A066)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A067, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A059, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A062, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A068, 0, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A069 (Local0, 0x00)
                    Local2 = A069 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A069 (0x00, Local0)
                                    Local5 = 0x00
                                    If (((Local4 && 0x09) == 0x00))
                                    {
                                        If (((Local4 && 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A069 (0x00, Local0)
                                        }

                                        A070 (0x34, Local3, 0x00)
                                        Local6 = A071 /* \_SB_.A071 */
                                        If ((Local6 == 0x01))
                                        {
                                            A070 (0x28, (Local4 & 0xFFFFFFF0), 0x00)
                                            A070 (0x29, Local5, 0x00)
                                            A070 (0x05, 0x00, (0x01 << 0x0A))
                                            A070 (0x2A, 0x00, 0x00)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A083, 2, NotSerialized)
                {
                    If ((A069 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A069 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A069 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A063, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A069 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A069 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A083 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A069 (Local0, (Local1 + 0x10))
                                A081 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A081 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A081, 3, Serialized)
                {
                    Local0 = (AGRB + (A065 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A069, 2, Serialized)
                {
                    Local0 = (AGRB + (A065 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR6.A069.ADRR */
                }

                Method (A079, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A067 (Arg0))
                }

                Method (A080, 1, NotSerialized)
                {
                    Name (A064, 0x00)
                    Local2 = 0x00
                    A064 = A073 /* \_SB_.AWR0.ABR6.A073 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A074 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A063 (0x00)
                        Local0 = A069 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A081 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A069 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A081 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A074 = 0x01
                        Local0 = 0x05
                    }

                    A073 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A082 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A069 (0x00, 0x00)
                            A082 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A073 = A064 /* \_SB_.AWR0.ABR6.A080.A064 */
                    If ((A064 != 0x00))
                    {
                        A063 (0x01)
                    }

                    Return (Local2)
                }
            }
        }

        Method (A003, 0, Serialized)
        {
            If ((DerefOf (\_SB.ADAT [0x08]) == 0x01))
            {
                Local0 = 0x00
                While ((Local0 < 0x07))
                {
                    A113 (Local0)
                    Local0++
                }
            }
        }

        Method (A070, 3, NotSerialized)
        {
            Local7 = Buffer (0x18) {}
            CreateDWordField (Local7, 0x00, A006)
            CreateDWordField (Local7, 0x04, A007)
            CreateDWordField (Local7, 0x08, A008)
            CreateDWordField (Local7, 0x0C, A009)
            CreateDWordField (Local7, 0x10, A010)
            CreateDWordField (Local7, 0x14, A011)
            A006 = Arg1
            A007 = Arg2
            A012 (Arg0, Local7)
        }

        Method (A113, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A068 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A068 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A068 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A068 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A068 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A068 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A068 ())
            }
        }

        Name (A001, 0x01)
        Name (A002, 0x00)
        Method (APTS, 1, NotSerialized)
        {
            If ((Arg0 == 0x03)) {}
        }

        Method (AWAK, 1, NotSerialized)
        {
            A003 ()
            If ((Arg0 == 0x03)) {}
        }

        Method (APPM, 1, NotSerialized)
        {
            Local0 = DerefOf (Arg0 [0x04])
            Local1 = DerefOf (Arg0 [0x02])
            A004 (Local0, Local1)
        }

        Method (A005, 0, NotSerialized)
        {
            Local7 = Buffer (0x18) {}
            CreateDWordField (Local7, 0x00, A006)
            CreateDWordField (Local7, 0x04, A007)
            CreateDWordField (Local7, 0x08, A008)
            CreateDWordField (Local7, 0x0C, A009)
            CreateDWordField (Local7, 0x10, A010)
            CreateDWordField (Local7, 0x14, A011)
            A006 = 0x00
            A007 = 0x00
            A008 = 0x00
            A009 = 0x00
            A010 = 0x00
            A011 = 0x00
            If ((AD00 == 0x00))
            {
                A012 (0x18, Local7)
            }
            Else
            {
                A012 (0x19, Local7)
            }
        }

        Method (A013, 2, NotSerialized)
        {
        }
    }
}



SSDT3
-----
DefinitionBlock ("", "SSDT", 1, "LENOVO", "TP-R11  ", 0x00000001)
{
    /*
     * iASL Warning: There were 19 external control methods found during
     * disassembly, but only 0 were resolved (19 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_SB_.ALIB, IntObj)
    External (_SB_.LID_._LID, IntObj)
    External (_SB_.PCI0.GP17.VGA_, DeviceObj)
    External (M000, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (M012, MethodObj)    // Warning: Unknown method, guessing 5 arguments
    External (M013, MethodObj)    // Warning: Unknown method, guessing 3 arguments
    External (M019, MethodObj)    // Warning: Unknown method, guessing 3 arguments
    External (M020, MethodObj)    // Warning: Unknown method, guessing 5 arguments
    External (M021, MethodObj)    // Warning: Unknown method, guessing 3 arguments
    External (M023, MethodObj)    // Warning: Unknown method, guessing 3 arguments
    External (M024, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (M025, UnknownObj)
    External (M026, MethodObj)    // Warning: Unknown method, guessing 3 arguments
    External (M043, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (M049, IntObj)
    External (M084, UnknownObj)
    External (M090, IntObj)
    External (M091, IntObj)
    External (M093, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (M094, MethodObj)    // Warning: Unknown method, guessing 3 arguments
    External (M095, MethodObj)    // Warning: Unknown method, guessing 4 arguments
    External (M097, MethodObj)    // Warning: Unknown method, guessing 7 arguments
    External (M098, IntObj)
    External (M099, IntObj)
    External (M101, IntObj)
    External (M102, IntObj)
    External (M103, IntObj)
    External (M104, IntObj)
    External (M111, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (M112, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (M113, MethodObj)    // Warning: Unknown method, guessing 4 arguments
    External (M131, IntObj)
    External (M133, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (M232, MethodObj)    // Warning: Unknown method, guessing 7 arguments

    Scope (\_SB)
    {
        Name (MACO, 0x00)
    }

    Scope (\_SB.PCI0.GP17.VGA)
    {
        Name (M189, Buffer (0x0100) {})
        Name (M190, 0xFFFFFFFF)
        Name (M191, 0xFFFFFFFF)
        Method (ATPX, 2, Serialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (PX00 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (PX01 ())
            }

            If ((Arg0 == 0x02))
            {
                PX02 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
            }

            If ((Arg0 == 0x03))
            {
                PX03 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
            }

            If ((Arg0 == 0x04))
            {
                PX04 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
            }

            If ((Arg0 == 0x08))
            {
                Return (PX08 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (PX09 ())
            }

            If ((Arg0 == 0x0A))
            {
                PX10 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
            }

            If ((Arg0 == 0x0B))
            {
                PX11 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
            }

            CreateWordField (M189, 0x00, M157)
            CreateWordField (M189, 0x02, M158)
            CreateDWordField (M189, 0x04, M160)
            M157 = 0x00
            M158 = 0x00
            M160 = 0x00
            Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
        }

        Method (PX00, 0, NotSerialized)
        {
            CreateWordField (M189, 0x00, M157)
            CreateWordField (M189, 0x02, M158)
            CreateDWordField (M189, 0x04, M160)
            M157 = 0x08
            M158 = 0x01
            M160 = M098 /* External reference */
            If (M098)
            {
                Local5 = 0x7FFFFFFF
                Local5 |= 0x80000000
                Store (M019 (M095 (M094 (M093 (0x2C, Local0), Store (M019 (M095 (M094 (
                    Local1 = (M093 (0x01, Zero) + 0x2C), If ((Local0 != Local5))
                                                {
                                                    M190 = Local0
                                                }, If ((Local1 != Local5))
                                                {
                                                    M191 = Local1
                                                }), Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */)))))
            }
        }

        Method (PX01, 0, NotSerialized)
        {
            CreateWordField (M189, 0x00, M157)
            CreateDWordField (M189, 0x02, M161)
            CreateDWordField (M189, 0x06, M162)
            M157 = 0x0A
            M161 = 0x0003FC80
            M162 = M099 /* External reference */
            Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
        }

        Method (PX02, 1, NotSerialized)
        {
            CreateWordField (M189, 0x00, M157)
            CreateByteField (M189, 0x02, M192)
            M157 = 0x03
            M192 = (Arg0 & 0x01)
            Local7 = Buffer (0x05) {}
            CreateWordField (Local7, 0x00, M197)
            CreateField (Local7, 0x10, 0x03, M200)
            CreateField (Local7, 0x13, 0x05, M199)
            CreateByteField (Local7, 0x03, M198)
            CreateByteField (Local7, 0x04, M201)
            M197 = 0x05
            M198 = 0x00
            M199 = M091 /* External reference */
            M200 = M090 /* External reference */
            Name (HPOK, 0x00)
            M133 (0x11, Local0) = M049 /* External reference */
            Store (M113 (Local0, Local6, M023 (0x00, M091, M090), If ((M192 && Local6))
                    {
                        M000 (0x86)
                        M112 (Local0, 0x00)
                        M111 (Local0, 0x01)
                        Sleep (0x20)
                        M112 (Local0, 0x02)
                        M112 (Local0, 0x01)
                        M000 (0x87)
                        HPOK = 0x00
                        Sleep (0x14)
                        M201 = 0x01
                        0x06 = \_SB.ALIB /* External reference */
                        Local7
                        Local6
                        Local2 = 0x00
                        While ((Local2 < 0x0F))
                        {
                            M023 (0x00, M091, M090)
                            Local4 = 0x01
                            Local5 = 0xC8
                            While ((Local4 && Local5))
                            {
                                0xA5 = M021 (0x00, M091, M090)
                                Local0
                                Local0 &= 0x7F
                                If (((Local0 >= 0x10) && (Local0 != 0x7F)))
                                {
                                    Local4 = 0x00
                                }
                                Else
                                {
                                    Sleep (0x05)
                                    Local5--
                                }
                            }

                            If (!Local4)
                            {
                                M090 = M024 (0x00, M091)
                                Local5
                                If (Local5)
                                {
                                    M026 (0x00, M091, M090)
                                    Sleep (0x05)
                                    Local2++
                                }
                                Else
                                {
                                    Local0 = 0x00
                                    If ((M025 == 0x00))
                                    {
                                        M091
                                        M090
                                        Ones
                                        Local0 = 0x01
                                    }

                                    If (Local0)
                                    {
                                        M111 (M049, M133 (0x17, 0x01))
                                        M111 (M049, M133 (0x18, 0x01))
                                        HPOK = 0x01
                                        Local2 = 0x10
                                    }
                                    Else
                                    {
                                        HPOK = 0x00
                                        Local2 = 0x10
                                    }
                                }
                            }
                            Else
                            {
                                Local2 = 0x10
                            }
                        }

                        If (!HPOK)
                        {
                            M000 (0x88)
                            Store (M019 (M095 (M094 (M093 (0x00, Local1), Sleep (0x0A), Local4 = 0x01), 
                                Local5 = 0x05, While ((Local4 && Local5))
                                        {
                                            0xA5 = M021 (0x00, M091, M090)
                                            Local0
                                            Local0 &= 0x7F
                                            If (((Local0 <= 0x04) || (Local0 == 0x1F)))
                                            {
                                                Local4 = 0x00
                                            }
                                            Else
                                            {
                                                Store (M019 (M095 (M094 (M093 (0x00, Local0), Sleep (0x05), Local5--), 
                                                    M201 = 0x00, \_SB.ALIB, 0x06), Local7, If ((M097 (0x00, 0x54 = M019 (
                                                    0x00, M091, M090), Local0, M020 (0x00, M091, M090, 0x54, (Local0 & 0xFFFF7FFC)), 
                                                    M232 (M097 (0x00, 0x10, M020 (0x00, M091, M090, 0x54, (Local0 & 0xFFFF7FFF)), 
                                                    M000 (0x89), Else
                                                                                {
                                                                                    M000 (0x8A)
                                                                                    M201 = 0x00
                                                                                    \_SB.ALIB
                                                                                    0x06
                                                                                    Local7
                                                                                    M000 (0x8B)
                                                                                    M111 (M049, M133 (0x17, 0x00))
                                                                                    M111 (M049, M133 (0x18, 0x00))
                                                                                    M112 (Local0, 0x00)
                                                                                    Sleep (0x0A)
                                                                                    M111 (Local0, 0x00)
                                                                                    M023 (0x00, M091, M090)
                                                                                    Store (M019 (M095 (M094 (M093 (0x00, Local1), Sleep (0x0A), Local4 = 0x01), 
                                                                                        Local5 = 0x05, While ((Local4 && Local5))
                                                                                                {
                                                                                                    0xA5 = M021 (0x00, M091, M090)
                                                                                                    Local0
                                                                                                    Local0 &= 0x7F
                                                                                                    If (((Local0 <= 0x04) || (Local0 == 0x1F)))
                                                                                                    {
                                                                                                        Local4 = 0x00
                                                                                                    }
                                                                                                    Else
                                                                                                    {
                                                                                                        Store (M019 (M095 (M094 (M093 (0x00, Local1), Sleep (0x05), Local5--), 
                                                                                                            HPOK = 0x02, M000 (0x8C), If (HPOK)
                                                                                                                    {
                                                                                                                        Local5 = 0x7FFFFFFF
                                                                                                                        Local5 |= 0x80000000
                                                                                                                        0x54 = M019 (0x00, M091, M090)
                                                                                                                        Local1
                                                                                                                        M020 (0x00, M091, M090, 0x54, (Local1 & 0xFFFF7FFC))
                                                                                                                        Store (M019 (M095 (M094 (M093 (0x00, Local0), If (((HPOK == 0x01) && 
                                                                                                                            (Local0 != Local5)))
                                                                                                                                        {
                                                                                                                                            M020 (M095 (M094 (M093 (0x4C, M190), Sleep (0x0A), If ((M191 != 
                                                                                                                                                Local5))
                                                                                                                                                        {
                                                                                                                                                            M020 (M095 (M094 (M191 = (M093 (0x01, Zero) + 0x4C), Sleep (0x0A), M020 (
                                                                                                                                                                0x00, M091, M090, 0x54, (Local1 & 0xFFFF7FFF)))))
                                                                                                                                                        })))
                                                                                                                                        })))
                                                                                                                    }))
                                                                                                    }
                                                                                                }))
                                                                                }))) != )) {})
                                            }
                                        }))
                        }
                    })
        }

        Method (PX03, 1, NotSerialized)
        {
            CreateWordField (M189, 0x00, M157)
            CreateWordField (M189, 0x02, M195)
            M157 = 0x04
            M195 = (Arg0 & 0x01)
            If (M195)
            {
                M111 (M049, M133 (0x17, 0x01))
            }
            Else
            {
                M111 (M049, M133 (0x17, 0x00))
            }
        }

        Method (PX04, 1, NotSerialized)
        {
            CreateWordField (M189, 0x00, M157)
            CreateWordField (M189, 0x02, M196)
            M157 = 0x04
            M196 = (Arg0 & 0x01)
            If (M196)
            {
                M111 (M049, M133 (0x18, 0x01))
            }
            Else
            {
                M111 (M049, M133 (0x18, 0x00))
            }
        }

        Method (PX08, 0, NotSerialized)
        {
            CreateWordField (M189, 0x00, M193)
            CreateWordField (M189, 0x02, M157)
            M133 (0x19, Local0) = M049 /* External reference */
            M193 = Local0
            M157 = 0x05
            Local0 *= M157 /* \_SB_.PCI0.GP17.VGA_.PX08.M157 */
            Local1 = 0x00
            While ((Local1 < Local0))
            {
                M133 ((0x1A + Local1), Local2) = M049 /* External reference */
                M189 [(0x04 + Local1)] = Local2
                Local1++
            }

            Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
        }

        Method (PX09, 0, NotSerialized)
        {
            CreateWordField (M189, 0x00, M193)
            CreateWordField (M189, 0x02, M157)
            M133 (0x7E, Local0) = M049 /* External reference */
            M193 = Local0
            M157 = 0x03
            Local0 *= M157 /* \_SB_.PCI0.GP17.VGA_.PX09.M157 */
            Local1 = 0x00
            While ((Local1 < Local0))
            {
                M133 ((0x7F + Local1), Local2) = M049 /* External reference */
                M189 [(0x04 + Local1)] = Local2
                Local1++
            }

            Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
        }

        Method (PX10, 1, NotSerialized)
        {
            CreateWordField (M189, 0x00, M157)
            CreateByteField (M189, 0x02, M192)
            M157 = 0x03
            M192 = (Arg0 & 0x01)
            \_SB.MACO = (Arg0 & 0x01)
        }

        Method (PX11, 1, NotSerialized)
        {
            CreateWordField (M189, 0x00, M157)
            CreateByteField (M189, 0x02, M162)
            M157 = 0x03
            M162 = (Arg0 & 0x01)
            Local2 = M162 /* \_SB_.PCI0.GP17.VGA_.PX11.M162 */
            Local0 = M131 /* External reference */
            If (Local0)
            {
                M131 = M049 /* External reference */
                0x10
                Local0
                M131 = M049 /* External reference */
                0x11
                Local1
                Local1 = (M084 + ((Local0 * 0x0100) + Local1))
                M012 (Local1, 0x0E, 0x00, 0x08, Local2)
            }
        }

        Name (ATIB, Buffer (0x0100) {})
        Method (ATIF, 2, Serialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (AF00 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (AF01 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (AF02 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (AF03 (DerefOf (Arg1 [0x02]), DerefOf (Arg1 [0x04])))
            }

            If ((Arg0 == 0x04))
            {
                Return (AF04 ())
            }

            If ((Arg0 == 0x0F))
            {
                Return (AF15 ())
            }

            If ((Arg0 == 0x10))
            {
                Return (AF16 (DerefOf (Arg1 [0x02])))
            }
            Else
            {
                CreateWordField (ATIB, 0x00, M157)
                CreateWordField (ATIB, 0x02, M158)
                CreateDWordField (ATIB, 0x04, M159)
                CreateDWordField (ATIB, 0x08, M160)
                M157 = 0x00
                M158 = 0x00
                M159 = 0x00
                M160 = 0x00
                Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
            }
        }

        Method (AF00, 0, NotSerialized)
        {
            CreateWordField (ATIB, 0x00, M157)
            CreateWordField (ATIB, 0x02, M158)
            CreateDWordField (ATIB, 0x04, M159)
            CreateDWordField (ATIB, 0x08, M160)
            M157 = 0x0C
            M158 = 0x01
            M159 = M101 /* External reference */
            If (!CondRefOf (\_SB.LID._LID))
            {
                M102 &= 0xFFFFFFF7
            }

            M160 = M102 /* External reference */
            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AF01, 0, NotSerialized)
        {
            CreateWordField (ATIB, 0x00, M157)
            CreateDWordField (ATIB, 0x02, M161)
            CreateDWordField (ATIB, 0x06, M162)
            CreateByteField (ATIB, 0x0A, M163)
            Local0 = (M103 & 0xFF000000)
            Local1 = (M103 & 0x03)
            If ((Local1 == 0x02))
            {
                M157 = 0x0B
                M161 = 0x03
                M162 = Local1
                M163 = Local0
            }
            Else
            {
                M157 = 0x0A
                M161 = 0x03
                M162 = M103 /* External reference */
            }

            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Name (M164, Buffer (0x04)
        {
             0x00, 0x00, 0x00, 0x00                           // ....
        })
        Name (M210, 0x00)
        Name (M211, 0x00)
        Name (M212, 0x00)
        Name (M213, 0x00)
        Name (M214, 0x00)
        Name (M215, 0x00)
        Name (M303, 0x00)
        Name (M304, 0x00)
        Name (SSDM, 0x0A)
        Name (SCDY, 0x00)
        Method (AF02, 0, NotSerialized)
        {
            CreateBitField (M164, 0x00, M165)
            CreateBitField (M164, 0x01, M166)
            CreateBitField (M164, 0x02, M167)
            CreateBitField (M164, 0x03, M168)
            CreateBitField (M164, 0x04, M169)
            CreateBitField (M164, 0x05, M170)
            CreateBitField (M164, 0x06, M171)
            CreateBitField (M164, 0x07, M172)
            CreateBitField (M164, 0x08, M173)
            CreateBitField (M164, 0x0C, M300)
            CreateWordField (ATIB, 0x00, M157)
            CreateDWordField (ATIB, 0x02, M174)
            CreateByteField (ATIB, 0x06, M175)
            CreateByteField (ATIB, 0x07, M176)
            CreateByteField (ATIB, 0x08, M177)
            CreateByteField (ATIB, 0x09, M178)
            CreateByteField (ATIB, 0x0A, M179)
            CreateByteField (ATIB, 0x0B, M180)
            CreateByteField (ATIB, 0x0C, M181)
            CreateByteField (ATIB, 0x0D, M301)
            CreateDWordField (ATIB, 0x0E, M302)
            M157 = 0x0D
            M174 = M164 /* \_SB_.PCI0.GP17.VGA_.M164 */
            If (M165)
            {
                M165 = Zero
            }

            If (M166)
            {
                M175 = M210 /* \_SB_.PCI0.GP17.VGA_.M210 */
                M210 = Zero
                M166 = Zero
            }

            If (M167)
            {
                M176 = M211 /* \_SB_.PCI0.GP17.VGA_.M211 */
                M177 = M212 /* \_SB_.PCI0.GP17.VGA_.M212 */
                M211 = Zero
                M212 = Zero
                M167 = Zero
            }

            If (M168)
            {
                M178 = M213 /* \_SB_.PCI0.GP17.VGA_.M213 */
                M179 = M214 /* \_SB_.PCI0.GP17.VGA_.M214 */
                M213 = Zero
                M214 = Zero
                M168 = Zero
            }

            If (M169)
            {
                M180 = M215 /* \_SB_.PCI0.GP17.VGA_.M215 */
                M169 = Zero
            }

            If (M171)
            {
                M171 = Zero
            }

            If (M172)
            {
                M172 = Zero
            }

            If (M173)
            {
                M173 = Zero
            }

            If (M300)
            {
                M301 = M303 /* \_SB_.PCI0.GP17.VGA_.M303 */
                M302 = M304 /* \_SB_.PCI0.GP17.VGA_.M304 */
                M303 = Zero
                M304 = Zero
                M300 = Zero
            }

            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AF03, 2, NotSerialized)
        {
            CreateWordField (ATIB, 0x00, M157)
            CreateWordField (ATIB, 0x02, M182)
            CreateWordField (ATIB, 0x04, M183)
            M182 = Arg0
            M183 = Arg1
            Name (M184, 0x06)
            Name (M185, 0x06)
            Name (M186, Buffer (0x14)
            {
                 0x00                                             // .
            })
            Name (M187, 0x00)
            M133 (0xBF, M187) = M049 /* External reference */
            Local1 = 0x00
            While ((Local1 < M187))
            {
                M133 ((0xC0 + Local1), Local2) = M049 /* External reference */
                M186 [Local1] = Local2
                Local1++
            }

            Local1 = M182 /* \_SB_.PCI0.GP17.VGA_.AF03.M182 */
            Local1 &= 0x8B
            Local2 = M183 /* \_SB_.PCI0.GP17.VGA_.AF03.M183 */
            If (CondRefOf (\_SB.LID._LID))
            {
                Local0 = \_SB.LID._LID /* External reference */
                Local2 &= 0xFFFFFFFE
                Local2 |= Local0
            }

            Local0 = Zero
            While ((Local0 < M187))
            {
                Local3 = DerefOf (M186 [Local0])
                If ((Local3 == Local1))
                {
                    M185 = Local0
                    Local0 = M187 /* \_SB_.PCI0.GP17.VGA_.AF03.M187 */
                }
                Else
                {
                    Local0++
                }
            }

            Local0 = M185 /* \_SB_.PCI0.GP17.VGA_.AF03.M185 */
            While ((Local0 < M187))
            {
                Local0++
                If ((Local0 == M187))
                {
                    Local0 = 0x00
                }

                Local3 = DerefOf (M186 [Local0])
                If (((Local3 & Local2) == Local3))
                {
                    M184 = Local0
                    Local0 = M187 /* \_SB_.PCI0.GP17.VGA_.AF03.M187 */
                }
            }

            If ((M184 == M187))
            {
                M182 = Zero
            }
            Else
            {
                Local0 = M184 /* \_SB_.PCI0.GP17.VGA_.AF03.M184 */
                Local3 = DerefOf (M186 [Local0])
                M182 &= 0xFFFFFFF4
                M182 |= Local3
            }

            M157 = 0x04
            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AF04, 0, NotSerialized)
        {
            CreateWordField (ATIB, 0x00, M157)
            CreateByteField (ATIB, 0x02, M188)
            M157 = 0x03
            Local1 = 0x00
            If (CondRefOf (\_SB.LID._LID))
            {
                Local0 = \_SB.LID._LID /* External reference */
                Local1 = (Local0 ^ 0x01)
            }

            M188 = Local1
            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AF15, 0, NotSerialized)
        {
            ATIB = M104 /* External reference */
            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AF16, 1, NotSerialized)
        {
            If (Local0)
                {
                    Local1 = 0x00
                    While ((Local1 < Local0))
                    {
                        M133 ((0xD4 + Local1), Local2) = M049 /* External reference */
                        ATIB [Local1] = Local2
                        Local1++
                    }
                } = M013 (M133 (0xD4, 0x00), 0x10, Local0)
            Else
            {
                0x00 = M043 (0x00, Arg0)
                Local3
                If ((ObjectType (Local3) == 0x03))
                {
                    ATIB = Local3
                }
                Else
                {
                    ATIB [0x00] = 0x05
                    ATIB [0x01] = 0x00
                    ATIB [0x02] = 0x00
                    ATIB [0x03] = 0x00
                    ATIB [0x04] = 0x02
                }
            }

            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AFN0, 0, Serialized)
        {
            If ((M101 & 0x01))
            {
                CreateBitField (M164, 0x00, M165)
                M165 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN1, 1, Serialized)
        {
            If ((M101 & 0x02))
            {
                Local0 = Arg0
                M210 = Local0
                CreateBitField (M164, 0x01, M166)
                M166 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN2, 2, Serialized)
        {
            If ((M101 & 0x04))
            {
                Local0 = Arg0
                M212 = Local0
                Local0 = Arg1
                M211 = Local0 &= 0x03
                CreateBitField (M164, 0x02, M167)
                M167 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN3, 2, Serialized)
        {
            If ((M101 & 0x08))
            {
                Local0 = Arg0
                M214 = Local0
                Local0 = Arg1
                M213 = Local0 &= 0x03
                CreateBitField (M164, 0x03, M168)
                M168 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN4, 1, Serialized)
        {
            If ((M101 & 0x10))
            {
                Local0 = Arg0
                Local1 = M215 /* \_SB_.PCI0.GP17.VGA_.M215 */
                M215 = Local0
                If ((Local0 == Local1)) {}
                Else
                {
                    CreateBitField (M164, 0x04, M169)
                    M169 = One
                    Notify (VGA, 0x81) // Information Change
                }
            }
        }

        Method (AFN5, 0, Serialized)
        {
            If ((M101 & 0x20))
            {
                CreateBitField (M164, 0x05, M170)
                M170 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN6, 0, Serialized)
        {
            If ((M101 & 0x40))
            {
                CreateBitField (M164, 0x06, M171)
                M171 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN7, 1, Serialized)
        {
            If ((M101 & 0x80))
            {
                CreateBitField (M164, 0x07, M172)
                M172 = One
                CreateByteField (ATIB, 0x0C, M181)
                M181 = Arg0
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN8, 0, Serialized)
        {
            If ((M101 & 0x0100))
            {
                CreateBitField (M164, 0x08, M173)
                M173 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFNC, 2, Serialized)
        {
            If ((M101 & 0x1000))
            {
                Local0 = (Arg0 & 0x03)
                M303 = Local0
                Local0 = (Arg1 & 0xFFFFFFFF)
                M304 = Local0
                CreateBitField (M164, 0x0C, M300)
                M300 = One
                Notify (VGA, 0x81) // Information Change
            }
        }
    }
}



SSDT4
-----
DefinitionBlock ("", "SSDT", 1, "LENOVO", "TP-R11  ", 0x00000001)
{
    External (_PR_.C000, DeviceObj)
    External (_PR_.C001, DeviceObj)
    External (_PR_.C002, DeviceObj)
    External (_PR_.C003, DeviceObj)
    External (_PR_.C004, DeviceObj)
    External (_PR_.C005, DeviceObj)
    External (_PR_.C006, DeviceObj)
    External (_PR_.C007, DeviceObj)

    Scope (\_PR.C000)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000834, 
                0x000009FF, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000834, 
                0x000009FF, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C000.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
    }

    Scope (\_PR.C001)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000834, 
                0x000009FF, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000834, 
                0x000009FF, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C001.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
    }

    Scope (\_PR.C002)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000834, 
                0x000009FF, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000834, 
                0x000009FF, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C002.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
    }

    Scope (\_PR.C003)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000834, 
                0x000009FF, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000834, 
                0x000009FF, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C003.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
    }

    Scope (\_PR.C004)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000834, 
                0x000009FF, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000834, 
                0x000009FF, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C004.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
    }

    Scope (\_PR.C005)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000834, 
                0x000009FF, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000834, 
                0x000009FF, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C005.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
    }

    Scope (\_PR.C006)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000834, 
                0x000009FF, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000834, 
                0x000009FF, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C006.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
    }

    Scope (\_PR.C007)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000834, 
                0x000009FF, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000834, 
                0x000009FF, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C007.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
    }
}



SSDT5
-----
DefinitionBlock ("", "SSDT", 2, "LENOVO", "Tpm2Tabl", 0x00001000)
{
    Scope (\_SB)
    {
        Device (TPM)
        {
            Name (_HID, "STM7308")  // _HID: Hardware ID
            Noop
            Name (_CID, "MSFT0101" /* TPM 2.0 Security Device */)  // _CID: Compatible ID
            Name (_STR, Unicode ("TPM 2.0 Device"))  // _STR: Description String
            OperationRegion (SMIP, SystemIO, 0xB2, 0x01)
            Field (SMIP, ByteAcc, NoLock, Preserve)
            {
                IOB2,   8
            }

            OperationRegion (TPMR, SystemMemory, 0xFED40000, 0x5000)
            Field (TPMR, AnyAcc, NoLock, Preserve)
            {
                ACC0,   8, 
                Offset (0x08), 
                INTE,   32, 
                INTV,   8, 
                Offset (0x10), 
                INTS,   32, 
                INTF,   32, 
                STS0,   32, 
                Offset (0x24), 
                FIFO,   32, 
                Offset (0x30), 
                TID0,   32
            }

            OperationRegion (TNVS, SystemMemory, 0xBDC2A000, 0x2F)
            Field (TNVS, AnyAcc, NoLock, Preserve)
            {
                PPIN,   8, 
                PPIP,   32, 
                PPRP,   32, 
                PPRQ,   32, 
                PPRM,   32, 
                LPPR,   32, 
                FRET,   32, 
                MCIN,   8, 
                MCIP,   32, 
                MORD,   32, 
                MRET,   32, 
                UCRQ,   32, 
                IRQN,   32, 
                SFRB,   8
            }

            Name (RESS, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0xFED40000,         // Address Base
                    0x00005000,         // Address Length
                    )
                Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
                {
                    0x00000000,
                }
            })
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Noop
            Name (RESL, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0xFED40000,         // Address Base
                    0x00005000,         // Address Length
                    )
                Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
                {
                    0x00000001,
                    0x00000002,
                    0x00000003,
                    0x00000004,
                    0x00000005,
                    0x00000006,
                    0x00000007,
                    0x00000008,
                    0x00000009,
                    0x0000000A,
                    0x0000000B,
                    0x0000000C,
                    0x0000000D,
                    0x0000000E,
                    0x0000000F,
                }
            })
            Name (RES0, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0xFED40000,         // Address Base
                    0x00005000,         // Address Length
                    )
                GpioInt (Edge, ActiveLow, Exclusive, PullDefault, 0x0000,
                    "\\_SB.GPIO", 0x00, ResourceConsumer, _Y00,
                    )
                    {   // Pin list
                        0x0000
                    }
            })
            Name (RES1, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0xFED40000,         // Address Base
                    0x00005000,         // Address Length
                    )
            })
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                If ((IRQN == 0x00))
                {
                    Return (RES1) /* \_SB_.TPM_.RES1 */
                }
                Else
                {
                    CreateWordField (RES0, 0x23, LIRQ)
                    LIRQ = IRQN /* \_SB_.TPM_.IRQN */
                    Return (RES0) /* \_SB_.TPM_.RES0 */
                }
            }

            Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
            {
                If ((IRQN == 0x00))
                {
                    Return (0x00)
                }

                CreateWordField (Arg0, 0x23, IRQ0)
                CreateWordField (RES0, 0x23, LIRQ)
                LIRQ = IRQ0 /* \_SB_.TPM_._SRS.IRQ0 */
                IRQN = IRQ0 /* \_SB_.TPM_._SRS.IRQ0 */
                CreateBitField (Arg0, 0x98, ITRG)
                CreateBitField (RES0, \_SB.TPM._Y00._MOD, LTRG)  // _MOD: Mode
                LTRG = ITRG /* \_SB_.TPM_._SRS.ITRG */
                CreateBitField (Arg0, 0x99, ILVL)
                CreateBitField (RES0, \_SB.TPM._Y00._POL, LLVL)  // _POL: Polarity
                LLVL = ILVL /* \_SB_.TPM_._SRS.ILVL */
                If ((((TID0 & 0x0F) == 0x00) || ((TID0 & 0x0F
                    ) == 0x0F)))
                {
                    If ((IRQ0 < 0x10))
                    {
                        INTV = (IRQ0 & 0x0F)
                    }

                    If ((ITRG == 0x01))
                    {
                        INTE |= 0x10
                    }
                    Else
                    {
                        INTE &= 0xFFFFFFEF
                    }

                    If ((ILVL == 0x00))
                    {
                        INTE |= 0x08
                    }
                    Else
                    {
                        INTE &= 0xFFFFFFF7
                    }
                }
            }

            Method (_PRS, 0, Serialized)  // _PRS: Possible Resource Settings
            {
                If ((IRQN == 0x00))
                {
                    Return (RES1) /* \_SB_.TPM_.RES1 */
                }
                ElseIf ((SFRB == 0x00))
                {
                    Return (RESL) /* \_SB_.TPM_.RESL */
                }
                Else
                {
                    Return (RESS) /* \_SB_.TPM_.RESS */
                }
            }

            Method (PTS, 1, Serialized)
            {
                If (((Arg0 < 0x06) && (Arg0 > 0x03)))
                {
                    If (!(MORD & 0x10))
                    {
                        MCIP = 0x02
                        IOB2 = MCIN /* \_SB_.TPM_.MCIN */
                    }
                }

                Return (0x00)
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((ACC0 == 0xFF))
                {
                    Return (0x00)
                }

                Return (0x0F)
            }

            Method (HINF, 3, Serialized)
            {
                Switch (ToInteger (Arg1))
                {
                    Case (0x00)
                    {
                        Return (Buffer (0x01)
                        {
                             0x03                                             // .
                        })
                    }
                    Case (0x01)
                    {
                        Name (TPMV, Package (0x02)
                        {
                            0x01, 
                            Package (0x02)
                            {
                                0x02, 
                                0x00
                            }
                        })
                        If ((_STA () == 0x00))
                        {
                            Return (Package (0x01)
                            {
                                0x00
                            })
                        }

                        Return (TPMV) /* \_SB_.TPM_.HINF.TPMV */
                    }
                    Default
                    {
                        BreakPoint
                    }

                }

                Return (Buffer (0x01)
                {
                     0x00                                             // .
                })
            }

            Name (TPM2, Package (0x02)
            {
                Zero, 
                Zero
            })
            Name (TPM3, Package (0x03)
            {
                Zero, 
                Zero, 
                Zero
            })
            Method (TPPI, 3, Serialized)
            {
                Switch (ToInteger (Arg1))
                {
                    Case (0x00)
                    {
                        Return (Buffer (0x02)
                        {
                             0xFF, 0x01                                       // ..
                        })
                    }
                    Case (0x01)
                    {
                        Return ("1.3")
                    }
                    Case (0x02)
                    {
                        PPRQ = DerefOf (Arg2 [0x00])
                        PPRM = 0x00
                        PPIP = 0x02
                        IOB2 = PPIN /* \_SB_.TPM_.PPIN */
                        Return (FRET) /* \_SB_.TPM_.FRET */
                    }
                    Case (0x03)
                    {
                        TPM2 [0x01] = PPRQ /* \_SB_.TPM_.PPRQ */
                        Return (TPM2) /* \_SB_.TPM_.TPM2 */
                    }
                    Case (0x04)
                    {
                        Return (0x02)
                    }
                    Case (0x05)
                    {
                        PPIP = 0x05
                        IOB2 = PPIN /* \_SB_.TPM_.PPIN */
                        TPM3 [0x01] = LPPR /* \_SB_.TPM_.LPPR */
                        TPM3 [0x02] = PPRP /* \_SB_.TPM_.PPRP */
                        Return (TPM3) /* \_SB_.TPM_.TPM3 */
                    }
                    Case (0x06)
                    {
                        Return (0x03)
                    }
                    Case (0x07)
                    {
                        PPIP = 0x07
                        PPRQ = DerefOf (Arg2 [0x00])
                        PPRM = 0x00
                        If ((PPRQ == 0x17))
                        {
                            PPRM = DerefOf (Arg2 [0x01])
                        }

                        IOB2 = PPIN /* \_SB_.TPM_.PPIN */
                        Return (FRET) /* \_SB_.TPM_.FRET */
                    }
                    Case (0x08)
                    {
                        PPIP = 0x08
                        UCRQ = DerefOf (Arg2 [0x00])
                        IOB2 = PPIN /* \_SB_.TPM_.PPIN */
                        Return (FRET) /* \_SB_.TPM_.FRET */
                    }
                    Default
                    {
                        BreakPoint
                    }

                }

                Return (0x01)
            }

            Method (TMCI, 3, Serialized)
            {
                Switch (ToInteger (Arg1))
                {
                    Case (0x00)
                    {
                        Return (Buffer (0x01)
                        {
                             0x03                                             // .
                        })
                    }
                    Case (0x01)
                    {
                        MORD = DerefOf (Arg2 [0x00])
                        MCIP = 0x01
                        IOB2 = MCIN /* \_SB_.TPM_.MCIN */
                        Return (MRET) /* \_SB_.TPM_.MRET */
                    }
                    Default
                    {
                        BreakPoint
                    }

                }

                Return (0x01)
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("cf8e16a5-c1e8-4e25-b712-4f54a96702c8") /* Unknown UUID */))
                {
                    Return (HINF (Arg1, Arg2, Arg3))
                }

                If ((Arg0 == ToUUID ("3dddfaa6-361b-4eb4-a424-8d10089d1653") /* Physical Presence Interface */))
                {
                    Return (TPPI (Arg1, Arg2, Arg3))
                }

                If ((Arg0 == ToUUID ("376054ed-cc13-4675-901c-4756d7f2d45d") /* Unknown UUID */))
                {
                    Return (TMCI (Arg1, Arg2, Arg3))
                }

                Return (Buffer (0x01)
                {
                     0x00                                             // .
                })
            }
        }
    }
}



SSDT6
-----
DefinitionBlock ("", "SSDT", 1, "LENOVO", "UsbCTabl", 0x00000001)
{
    /*
     * iASL Warning: There was 1 external control method found during
     * disassembly, but only 0 were resolved (1 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_SB_.PCI0.LPC0.EC0_, DeviceObj)
    External (_SB_.PCI0.LPC0.EC0_.CHKS, MethodObj)    // Warning: Unknown method, guessing 0 arguments

    Scope (\_SB.PCI0.LPC0.EC0)
    {
        Method (_Q4F, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            \_SB.UBTC.NTFY ()
        }
    }

    Scope (\_SB)
    {
        Device (UBTC)
        {
            Name (_HID, EisaId ("USBC000"))  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0CA0"))  // _CID: Compatible ID
            Name (_UID, Zero)  // _UID: Unique ID
            Name (_DDN, "USB Type C")  // _DDN: DOS Device Name
            Name (_ADR, Zero)  // _ADR: Address
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                Sleep (0x03E8)
                Sleep (0x64)
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                Sleep (0x03E8)
                Sleep (0x64)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0xBDC36000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                Return (RBUF) /* \_SB_.UBTC._CRS.RBUF */
            }

            Device (CR01)
            {
                Name (_ADR, 0x00)  // _ADR: Address
                Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                {
                    Return (Package (0x04)
                    {
                        0xFF, 
                        0x09, 
                        0x00, 
                        0x00
                    })
                }

                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    Return (Package (0x01)
                    {
                        Buffer (0x10)
                        {
                            /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x51, 0x0C, 0x00, 0x02, 0x01, 0x00, 0x00, 0x00   // Q.......
                        }
                    })
                }
            }

            OperationRegion (USBC, SystemMemory, 0xBDC36000, 0x30)
            Field (USBC, ByteAcc, Lock, Preserve)
            {
                VER1,   8, 
                VER2,   8, 
                RSV1,   8, 
                RSV2,   8, 
                CCI0,   8, 
                CCI1,   8, 
                CCI2,   8, 
                CCI3,   8, 
                CTL0,   8, 
                CTL1,   8, 
                CTL2,   8, 
                CTL3,   8, 
                CTL4,   8, 
                CTL5,   8, 
                CTL6,   8, 
                CTL7,   8, 
                MGI0,   8, 
                MGI1,   8, 
                MGI2,   8, 
                MGI3,   8, 
                MGI4,   8, 
                MGI5,   8, 
                MGI6,   8, 
                MGI7,   8, 
                MGI8,   8, 
                MGI9,   8, 
                MGIA,   8, 
                MGIB,   8, 
                MGIC,   8, 
                MGID,   8, 
                MGIE,   8, 
                MGIF,   8, 
                MGO0,   8, 
                MGO1,   8, 
                MGO2,   8, 
                MGO3,   8, 
                MGO4,   8, 
                MGO5,   8, 
                MGO6,   8, 
                MGO7,   8, 
                MGO8,   8, 
                MGO9,   8, 
                MGOA,   8, 
                MGOB,   8, 
                MGOC,   8, 
                MGOD,   8, 
                MGOE,   8, 
                MGOF,   8
            }

            OperationRegion (DBG0, SystemIO, 0x80, 0x01)
            Field (DBG0, ByteAcc, NoLock, Preserve)
            {
                IO80,   8
            }

            Method (NTFY, 0, Serialized)
            {
                IO80 = 0x4F
                ECRD ()
                Sleep (0x01)
                Notify (\_SB.UBTC, 0x80) // Status Change
            }

            OperationRegion (H5FA, SystemMemory, 0xFE0005FA, 0x01)
            Field (H5FA, AnyAcc, Lock, Preserve)
            {
                HNTF,   8
            }

            OperationRegion (ECSM, SystemMemory, 0xFE000A50, 0x30)
            Field (ECSM, AnyAcc, Lock, Preserve)
            {
                HMPR,   8, 
                    ,   7, 
                HMDN,   1, 
                HADD,   8, 
                HCMD,   8, 
                HD00,   8, 
                HD01,   8, 
                HD02,   8, 
                HD03,   8, 
                HD04,   8, 
                HD05,   8, 
                HD06,   8, 
                HD07,   8, 
                HD08,   8, 
                HD09,   8, 
                HD0A,   8, 
                HD0B,   8, 
                HD0C,   8, 
                HD0D,   8, 
                HD0E,   8, 
                HD0F,   8, 
                Offset (0x24), 
                HCNT,   8
            }

            Method (CHKM, 0, NotSerialized)
            {
                Local0 = 0x03E8
                While (HMPR)
                {
                    Sleep (0x01)
                    Local0--
                    If (!Local0)
                    {
                        Return (0x8080)
                    }
                }

                If (HMDN)
                {
                    Return (Zero)
                }

                Return (0x8081)
            }

            OperationRegion (ECSI, EmbeddedControl, 0x00, 0x0100)
            Field (ECSI, ByteAcc, NoLock, Preserve)
            {
                Offset (0x50), 
                EMPR,   8, 
                    ,   7, 
                EMDN,   1, 
                EADD,   8, 
                ECMD,   8, 
                ED00,   8, 
                ED01,   8, 
                ED02,   8, 
                ED03,   8, 
                ED04,   8, 
                ED05,   8, 
                ED06,   8, 
                ED07,   8, 
                ED08,   8, 
                ED09,   8, 
                ED0A,   8, 
                ED0B,   8, 
                ED0C,   8, 
                ED0D,   8, 
                ED0E,   8, 
                ED0F,   8, 
                Offset (0x74), 
                ECNT,   8
            }

            Name (RSTC, 0x00)
            Mutex (UBSY, 0x00)
            Method (ECWR, 0, Serialized)
            {
                Acquire (UBSY, 0xFFFF)
                If ((CTL0 == 0x01))
                {
                    RSTC = 0x01
                    IO80 = 0xB8
                    \_SB.PCI0.LPC0.EC0.CHKS ()
                    EADD = 0x02
                    Sleep (0x01)
                    ECMD = 0x06
                    Sleep (0x01)
                    ED00 = MGO0 /* \_SB_.UBTC.MGO0 */
                    Sleep (0x01)
                    ED01 = MGO1 /* \_SB_.UBTC.MGO1 */
                    Sleep (0x01)
                    ED02 = MGO2 /* \_SB_.UBTC.MGO2 */
                    Sleep (0x01)
                    ED03 = MGO3 /* \_SB_.UBTC.MGO3 */
                    Sleep (0x01)
                    ED04 = MGO4 /* \_SB_.UBTC.MGO4 */
                    Sleep (0x01)
                    ED05 = MGO5 /* \_SB_.UBTC.MGO5 */
                    Sleep (0x01)
                    ED06 = MGO6 /* \_SB_.UBTC.MGO6 */
                    Sleep (0x01)
                    ED07 = MGO7 /* \_SB_.UBTC.MGO7 */
                    Sleep (0x01)
                    ED08 = MGO8 /* \_SB_.UBTC.MGO8 */
                    Sleep (0x01)
                    ED09 = MGO9 /* \_SB_.UBTC.MGO9 */
                    Sleep (0x01)
                    ED0A = MGOA /* \_SB_.UBTC.MGOA */
                    Sleep (0x01)
                    ED0B = MGOB /* \_SB_.UBTC.MGOB */
                    Sleep (0x01)
                    ED0C = MGOC /* \_SB_.UBTC.MGOC */
                    Sleep (0x01)
                    ED0D = MGOD /* \_SB_.UBTC.MGOD */
                    Sleep (0x01)
                    ED0E = MGOE /* \_SB_.UBTC.MGOE */
                    Sleep (0x01)
                    ED0F = MGOF /* \_SB_.UBTC.MGOF */
                    Sleep (0x01)
                    ECNT = 0x10
                    Sleep (0x01)
                    EMPR = 0x0A
                    Sleep (0x01)
                    \_SB.PCI0.LPC0.EC0.CHKS ()
                    EADD = 0x02
                    Sleep (0x01)
                    ECMD = 0x04
                    Sleep (0x01)
                    ED00 = CTL0 /* \_SB_.UBTC.CTL0 */
                    Sleep (0x01)
                    ED01 = CTL1 /* \_SB_.UBTC.CTL1 */
                    Sleep (0x01)
                    ED02 = CTL2 /* \_SB_.UBTC.CTL2 */
                    Sleep (0x01)
                    ED03 = CTL3 /* \_SB_.UBTC.CTL3 */
                    Sleep (0x01)
                    ED04 = CTL4 /* \_SB_.UBTC.CTL4 */
                    Sleep (0x01)
                    ED05 = CTL5 /* \_SB_.UBTC.CTL5 */
                    Sleep (0x01)
                    ED06 = CTL6 /* \_SB_.UBTC.CTL6 */
                    Sleep (0x01)
                    ED07 = CTL7 /* \_SB_.UBTC.CTL7 */
                    Sleep (0x01)
                    ECNT = 0x08
                    Sleep (0x01)
                    EMPR = 0x0A
                    Sleep (0x01)
                    \_SB.PCI0.LPC0.EC0.CHKS ()
                    IO80 = 0xB9
                    Release (UBSY)
                    Return (Zero)
                }

                CHKM ()
                HADD = 0x02
                Sleep (0x01)
                HCMD = 0x06
                Sleep (0x01)
                HD00 = MGO0 /* \_SB_.UBTC.MGO0 */
                Sleep (0x01)
                HD01 = MGO1 /* \_SB_.UBTC.MGO1 */
                Sleep (0x01)
                HD02 = MGO2 /* \_SB_.UBTC.MGO2 */
                Sleep (0x01)
                HD03 = MGO3 /* \_SB_.UBTC.MGO3 */
                Sleep (0x01)
                HD04 = MGO4 /* \_SB_.UBTC.MGO4 */
                Sleep (0x01)
                HD05 = MGO5 /* \_SB_.UBTC.MGO5 */
                Sleep (0x01)
                HD06 = MGO6 /* \_SB_.UBTC.MGO6 */
                Sleep (0x01)
                HD07 = MGO7 /* \_SB_.UBTC.MGO7 */
                Sleep (0x01)
                HD08 = MGO8 /* \_SB_.UBTC.MGO8 */
                Sleep (0x01)
                HD09 = MGO9 /* \_SB_.UBTC.MGO9 */
                Sleep (0x01)
                HD0A = MGOA /* \_SB_.UBTC.MGOA */
                Sleep (0x01)
                HD0B = MGOB /* \_SB_.UBTC.MGOB */
                Sleep (0x01)
                HD0C = MGOC /* \_SB_.UBTC.MGOC */
                Sleep (0x01)
                HD0D = MGOD /* \_SB_.UBTC.MGOD */
                Sleep (0x01)
                HD0E = MGOE /* \_SB_.UBTC.MGOE */
                Sleep (0x01)
                HD0F = MGOF /* \_SB_.UBTC.MGOF */
                Sleep (0x01)
                HCNT = 0x10
                Sleep (0x01)
                HMPR = 0x0A
                Sleep (0x01)
                HNTF = 0x08
                Sleep (0x01)
                CHKM ()
                HADD = 0x02
                Sleep (0x01)
                HCMD = 0x04
                Sleep (0x01)
                HD00 = CTL0 /* \_SB_.UBTC.CTL0 */
                Sleep (0x01)
                HD01 = CTL1 /* \_SB_.UBTC.CTL1 */
                Sleep (0x01)
                HD02 = CTL2 /* \_SB_.UBTC.CTL2 */
                Sleep (0x01)
                HD03 = CTL3 /* \_SB_.UBTC.CTL3 */
                Sleep (0x01)
                HD04 = CTL4 /* \_SB_.UBTC.CTL4 */
                Sleep (0x01)
                HD05 = CTL5 /* \_SB_.UBTC.CTL5 */
                Sleep (0x01)
                HD06 = CTL6 /* \_SB_.UBTC.CTL6 */
                Sleep (0x01)
                HD07 = CTL7 /* \_SB_.UBTC.CTL7 */
                Sleep (0x01)
                HCNT = 0x08
                Sleep (0x01)
                HMPR = 0x0A
                Sleep (0x01)
                HNTF = 0x08
                Sleep (0x01)
                CHKM ()
                Release (UBSY)
            }

            Method (ECRD, 0, Serialized)
            {
                Acquire (UBSY, 0xFFFF)
                If ((RSTC == 0x01))
                {
                    RSTC = 0x00
                    IO80 = 0xBA
                    \_SB.PCI0.LPC0.EC0.CHKS ()
                    EADD = 0x02
                    Sleep (0x01)
                    ECMD = 0x05
                    Sleep (0x01)
                    ECNT = 0x10
                    Sleep (0x01)
                    EMPR = 0x0B
                    Sleep (0x01)
                    \_SB.PCI0.LPC0.EC0.CHKS ()
                    MGI0 = ED00 /* \_SB_.UBTC.ED00 */
                    Sleep (0x01)
                    MGI1 = ED01 /* \_SB_.UBTC.ED01 */
                    Sleep (0x01)
                    MGI2 = ED02 /* \_SB_.UBTC.ED02 */
                    Sleep (0x01)
                    MGI3 = ED03 /* \_SB_.UBTC.ED03 */
                    Sleep (0x01)
                    MGI4 = ED04 /* \_SB_.UBTC.ED04 */
                    Sleep (0x01)
                    MGI5 = ED05 /* \_SB_.UBTC.ED05 */
                    Sleep (0x01)
                    MGI6 = ED06 /* \_SB_.UBTC.ED06 */
                    Sleep (0x01)
                    MGI7 = ED07 /* \_SB_.UBTC.ED07 */
                    Sleep (0x01)
                    MGI8 = ED08 /* \_SB_.UBTC.ED08 */
                    Sleep (0x01)
                    MGI9 = ED09 /* \_SB_.UBTC.ED09 */
                    Sleep (0x01)
                    MGIA = ED0A /* \_SB_.UBTC.ED0A */
                    Sleep (0x01)
                    MGIB = ED0B /* \_SB_.UBTC.ED0B */
                    Sleep (0x01)
                    MGIC = ED0C /* \_SB_.UBTC.ED0C */
                    Sleep (0x01)
                    MGID = ED0D /* \_SB_.UBTC.ED0D */
                    Sleep (0x01)
                    MGIE = ED0E /* \_SB_.UBTC.ED0E */
                    Sleep (0x01)
                    MGIF = ED0F /* \_SB_.UBTC.ED0F */
                    \_SB.PCI0.LPC0.EC0.CHKS ()
                    EADD = 0x02
                    Sleep (0x01)
                    ECMD = 0x03
                    Sleep (0x01)
                    ECNT = 0x04
                    Sleep (0x01)
                    EMPR = 0x0B
                    Sleep (0x01)
                    \_SB.PCI0.LPC0.EC0.CHKS ()
                    CCI0 = ED00 /* \_SB_.UBTC.ED00 */
                    Sleep (0x01)
                    CCI1 = ED01 /* \_SB_.UBTC.ED01 */
                    Sleep (0x01)
                    CCI2 = ED02 /* \_SB_.UBTC.ED02 */
                    Sleep (0x01)
                    CCI3 = ED03 /* \_SB_.UBTC.ED03 */
                    IO80 = 0xBB
                    Release (UBSY)
                    Return (Zero)
                }

                CHKM ()
                HADD = 0x02
                Sleep (0x01)
                HCMD = 0x05
                Sleep (0x01)
                HCNT = 0x10
                Sleep (0x01)
                HMPR = 0x0B
                Sleep (0x01)
                HNTF = 0x07
                Sleep (0x01)
                CHKM ()
                MGI0 = HD00 /* \_SB_.UBTC.HD00 */
                Sleep (0x01)
                MGI1 = HD01 /* \_SB_.UBTC.HD01 */
                Sleep (0x01)
                MGI2 = HD02 /* \_SB_.UBTC.HD02 */
                Sleep (0x01)
                MGI3 = HD03 /* \_SB_.UBTC.HD03 */
                Sleep (0x01)
                MGI4 = HD04 /* \_SB_.UBTC.HD04 */
                Sleep (0x01)
                MGI5 = HD05 /* \_SB_.UBTC.HD05 */
                Sleep (0x01)
                MGI6 = HD06 /* \_SB_.UBTC.HD06 */
                Sleep (0x01)
                MGI7 = HD07 /* \_SB_.UBTC.HD07 */
                Sleep (0x01)
                MGI8 = HD08 /* \_SB_.UBTC.HD08 */
                Sleep (0x01)
                MGI9 = HD09 /* \_SB_.UBTC.HD09 */
                Sleep (0x01)
                MGIA = HD0A /* \_SB_.UBTC.HD0A */
                Sleep (0x01)
                MGIB = HD0B /* \_SB_.UBTC.HD0B */
                Sleep (0x01)
                MGIC = HD0C /* \_SB_.UBTC.HD0C */
                Sleep (0x01)
                MGID = HD0D /* \_SB_.UBTC.HD0D */
                Sleep (0x01)
                MGIE = HD0E /* \_SB_.UBTC.HD0E */
                Sleep (0x01)
                MGIF = HD0F /* \_SB_.UBTC.HD0F */
                CHKM ()
                HADD = 0x02
                Sleep (0x01)
                HCMD = 0x03
                Sleep (0x01)
                HCNT = 0x04
                Sleep (0x01)
                HMPR = 0x0B
                Sleep (0x01)
                HNTF = 0x07
                Sleep (0x01)
                CHKM ()
                CCI0 = HD00 /* \_SB_.UBTC.HD00 */
                Sleep (0x01)
                CCI1 = HD01 /* \_SB_.UBTC.HD01 */
                Sleep (0x01)
                CCI2 = HD02 /* \_SB_.UBTC.HD02 */
                Sleep (0x01)
                CCI3 = HD03 /* \_SB_.UBTC.HD03 */
                Release (UBSY)
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("6f8398c2-7ca4-11e4-ad36-631042b5008f") /* Unknown UUID */))
                {
                    If ((ToInteger (Arg2) == 0x00))
                    {
                        Return (Buffer (0x01)
                        {
                             0x0F                                             // .
                        })
                    }
                    ElseIf ((ToInteger (Arg2) == 0x01))
                    {
                        IO80 = 0xA8
                        ECWR ()
                        IO80 = 0xA9
                    }
                    ElseIf ((ToInteger (Arg2) == 0x02))
                    {
                        IO80 = 0xAA
                        ECRD ()
                        IO80 = 0xAB
                    }
                    Else
                    {
                        Return (0x00)
                    }
                }

                Return (0x00)
            }
        }
    }
}



SSDT7
-----
DefinitionBlock ("", "SSDT", 1, "LENOVO", "TP-R11  ", 0x00000001)
{
    /*
     * iASL Warning: There were 9 external control methods found during
     * disassembly, but only 0 were resolved (9 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_SB_.ALIB, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (_SB_.M263, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.M264, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.M284, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.GP18.SATA.TPTS, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.GP18.SATA.TWAK, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.SATA.TPTS, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.SATA.TWAK, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (M038, IntObj)
    External (M039, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (MOEM, IntObj)

    OperationRegion (CPNV, SystemMemory, 0xBDD69018, 0x000100C9)
    Field (CPNV, AnyAcc, Lock, Preserve)
    {
        M082,   32, 
        M083,   32, 
        M084,   32, 
        M085,   8, 
        M221,   8, 
        M086,   16, 
        M229,   8, 
        M231,   16, 
        M235,   8, 
        M233,   32, 
            ,   1, 
            ,   2, 
            ,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
        Offset (0x19), 
        M087,   1, 
            ,   1, 
        Offset (0x1C), 
        M088,   16, 
        M089,   16, 
        M090,   3, 
        M091,   5, 
        M092,   8, 
        M093,   3, 
        M094,   5, 
        M095,   8, 
        M096,   8, 
        M097,   8, 
        M098,   32, 
        M099,   32, 
        M100,   32, 
        M101,   32, 
        M102,   32, 
        M103,   32, 
        M104,   224, 
        M105,   32, 
        M106,   32768, 
        M378,   32768, 
        M379,   32768, 
        M380,   32768, 
        M381,   32768, 
        M382,   32768, 
        M383,   32768, 
        M384,   32768, 
        M385,   32768, 
        M386,   32768, 
        M387,   32768, 
        M388,   32768, 
        M389,   32768, 
        M390,   32768, 
        M391,   32768, 
        M392,   32768, 
        M107,   64, 
        M320,   32, 
        M321,   32, 
        M322,   32, 
        M323,   32, 
        M324,   32, 
        M325,   32, 
        M326,   32, 
        M327,   16, 
        M328,   8, 
        M128,   32, 
        M108,   32, 
        M109,   32, 
        M110,   32, 
        M122,   32, 
        M131,   32, 
        M132,   32, 
        M133,   32, 
        M134,   32, 
        M135,   32, 
        M136,   32, 
        M220,   32, 
        M226,   32, 
        M251,   32, 
        M310,   32, 
        M280,   32, 
        M290,   32
    }

    Method (M000, 1, Serialized)
    {
        Name (M285, Buffer (0x04)
        {
             0x01, 0x03, 0x80, 0x00                           // ....
        })
        CreateByteField (M285, 0x00, M286)
        CreateByteField (M285, 0x01, M287)
        CreateWordField (M285, 0x02, M288)
        If ((ToInteger (M286) == 0x01))
        {
            Local0 = (Arg0 + 0xB0000C00)
            Local1 = ToInteger (M288)
            If ((ToInteger (M287) == 0x03))
            {
                OperationRegion (VARM, SystemIO, Local1, 0x04)
                Field (VARM, DWordAcc, NoLock, Preserve)
                {
                    VARR,   32
                }

                VARR = Local0
            }
            ElseIf ((ToInteger (M287) == 0x02))
            {
                OperationRegion (VARN, SystemIO, Local1, 0x02)
                Field (VARN, WordAcc, NoLock, Preserve)
                {
                    VARS,   16
                }

                VARS = (Local0 & 0xFFFF)
            }
            ElseIf ((ToInteger (M287) == 0x01))
            {
                OperationRegion (VARO, SystemIO, Local1, 0x01)
                Field (VARO, ByteAcc, NoLock, Preserve)
                {
                    VART,   8
                }

                VART = (Local0 & 0xFF)
            }
        }
    }

    Method (M019, 4, Serialized)
    {
        Return (M017 (Arg0, Arg1, Arg2, Arg3, 0x00, 0x20))
    }

    Method (M020, 5, Serialized)
    {
        M018 (Arg0, Arg1, Arg2, Arg3, 0x00, 0x20, Arg4)
    }

    Mutex (M253, 0x00)
    Method (M249, 3, Serialized)
    {
        If (((Arg0 == 0x00) && (Arg1 == 0x00)))
        {
            Local0 = 0x00
        }
        Else
        {
            Local0 = M252 (Arg0, Arg1)
        }

        If ((Local0 == 0xFFFFFFFF))
        {
            Return (0xFFFFFFFF)
        }

        Local0 = (M083 + (Local0 << 0x14))
        Local0 += 0xB8
        Acquire (M253, 0xFFFF)
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg2, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local1 = VAR1 /* \M249.VAR1 */
        Local2 = VAR2 /* \M249.VAR2 */
        VAR1 = Local1
        Release (M253)
        Return (Local2)
    }

    Method (M250, 4, Serialized)
    {
        If (((Arg0 == 0x00) && (Arg1 == 0x00)))
        {
            Local0 = 0x00
        }
        Else
        {
            Local0 = M252 (Arg0, Arg1)
        }

        If ((Local0 != 0xFFFFFFFF))
        {
            Local0 = (M083 + (Local0 << 0x14))
            Local0 += 0xB8
            Acquire (M253, 0xFFFF)
            OperationRegion (VARM, SystemMemory, Local0, 0x08)
            Field (VARM, DWordAcc, NoLock, Preserve)
            {
                VAR1,   32
            }

            BankField (VARM, VAR1, Arg2, DWordAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                VAR2,   32
            }

            Local1 = VAR1 /* \M250.VAR1 */
            VAR2 = Arg3
            VAR1 = Local1
            Release (M253)
        }
    }

    Method (M021, 4, Serialized)
    {
        Local0 = (M083 + (Arg0 << 0x14))
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Local0 += 0xE0
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local0 = VAR2 /* \M021.VAR2 */
        Return (Local0)
    }

    Method (M022, 5, Serialized)
    {
        Local0 = (M083 + (Arg0 << 0x14))
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Local0 += 0xE0
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        VAR2 = Arg4
    }

    Method (M023, 3, Serialized)
    {
        M018 (Arg0, Arg1, Arg2, 0x70, 0x03, 0x01, 0x00)
        M018 (Arg0, Arg1, Arg2, 0x70, 0x13, 0x01, 0x01)
    }

    Method (M024, 3, Serialized)
    {
        Local0 = M019 (Arg0, Arg1, Arg2, 0x0128)
        If ((Local0 & 0x00020000))
        {
            Return (Ones)
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (M026, 3, Serialized)
    {
        Local0 = M021 (Arg0, Arg1, Arg2, 0xA2)
        Local0 &= 0xFFFFFFF8
        Local1 = (Local0 >> 0x04)
        Local1 &= 0x07
        Local0 |= Local1
        Local0 |= 0x0100
        M022 (Arg0, Arg1, Arg2, 0xA2, Local0)
    }

    Method (M025, 3, Serialized)
    {
        Local0 = M019 (Arg0, Arg1, Arg2, 0x68)
        Local0 &= 0xFFFFFFDF
        M020 (Arg0, Arg1, Arg2, 0x68, Local0)
        Local0 |= 0x20
        M020 (Arg0, Arg1, Arg2, 0x68, Local0)
        Local1 = 0x64
        Local2 = 0x01
        While ((Local1 && Local2))
        {
            Sleep (0x01)
            Local3 = M019 (Arg0, Arg1, Arg2, 0x68)
            If ((Local3 & 0x08000000))
            {
                Local1--
            }
            Else
            {
                Local2 = 0x00
            }
        }

        Local0 &= 0xFFFFFFDF
        M020 (Arg0, Arg1, Arg2, 0x68, Local0)
        If (!Local2)
        {
            Return (Ones)
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (M009, 1, Serialized)
    {
        Local0 = (Arg0 >> 0x08)
        Local1 = (Arg0 & 0xFF)
        Local2 = 0x00
        If ((Local0 == 0x00))
        {
            If ((M085 >= 0x02))
            {
                Local2 = M011 ((M084 + 0x1502), (Local1 * 0x04), 0x00, 
                    0x01)
            }
            Else
            {
                Local2 = M011 ((M084 + 0x0100), Local1, 0x07, 0x01)
            }
        }
        ElseIf ((Local0 == 0x01))
        {
            Local1 = M038 /* External reference */
            Local2
        }
        ElseIf ((Local0 == 0x02))
        {
            (Local1 + 0x08) = M038 /* External reference */
            Local2
        }

        Return (Local2)
    }

    Method (M010, 2, Serialized)
    {
        Local0 = (Arg0 >> 0x08)
        Local1 = (Arg0 & 0xFF)
        If ((Local0 == 0x00))
        {
            If ((M085 >= 0x02))
            {
                M012 ((M084 + 0x1502), (Local1 * 0x04), 0x06, 0x02, (
                    0x02 | Arg1))
            }
            Else
            {
                M012 ((M084 + 0x0100), Local1, 0x06, 0x01, Arg1)
                M012 ((M084 + 0x0100), Local1, 0x05, 0x01, 0x00)
            }
        }
        ElseIf ((Local0 == 0x01))
        {
            M039 (Local1, Arg1)
        }
        ElseIf ((Local0 == 0x02))
        {
            M039 ((Local1 + 0x08), Arg1)
        }
    }

    Name (M037, Buffer (0x17)
    {
        /* 0000 */  0x7E, 0x81, 0x03, 0x16, 0x04, 0x15, 0x0E, 0x05,  // ~.......
        /* 0008 */  0x02, 0x20, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // . ......
        /* 0010 */  0x17, 0x19, 0x0B, 0x01, 0x0F, 0x0D, 0x09         // .......
    })
    Name (M227, Buffer (0x18)
    {
        /* 0000 */  0x41, 0x42, 0x03, 0x16, 0x04, 0x15, 0x0E, 0x05,  // AB......
        /* 0008 */  0x02, 0x44, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // .D......
        /* 0010 */  0x17, 0x45, 0x0B, 0x01, 0x0F, 0x0D, 0x09, 0x08   // .E......
    })
    Name (M329, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x4C, 0x10, 0x11, 0x12, 0x18,  // .V.L....
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Name (M330, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // .V......
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Method (M029, 1, Serialized)
    {
        If ((M085 == 0x02))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M037 [Arg0]) * 
                0x04), 0x00, 0x01))
        }
        ElseIf ((M085 >= 0x09))
        {
            If ((M085 >= 0x0B))
            {
                Return (M011 ((M084 + 0x1502), (DerefOf (M329 [Arg0]) * 
                    0x04), 0x00, 0x01))
            }
            Else
            {
                Return (M011 ((M084 + 0x1502), (DerefOf (M330 [Arg0]) * 
                    0x04), 0x00, 0x01))
            }
        }
        ElseIf ((M085 == 0x08))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M329 [Arg0]) * 
                0x04), 0x00, 0x01))
        }
        ElseIf ((M085 >= 0x03))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M227 [Arg0]) * 
                0x04), 0x00, 0x01))
        }
        Else
        {
            Return (M011 ((M084 + 0x0160), Arg0, 0x07, 0x01))
        }
    }

    Method (M031, 1, Serialized)
    {
        Local0 = M011 ((M084 + 0x0240), Arg0, 0x00, 0x05)
        Return (M011 ((M084 + 0x0208), (Local0 / 0x08), (Local0 & 
            0x07), 0x01))
    }

    Method (M032, 2, Serialized)
    {
        Local0 = M011 ((M084 + 0x0240), Arg0, 0x00, 0x05)
        M012 ((M084 + 0x0208), (Local0 / 0x08), (Local0 & 0x07
            ), 0x01, Arg1)
    }

    Method (M013, 4, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, 0x04)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VARR,   32
        }

        Local1 = VARR /* \M013.VARR */
        Local5 = 0x7FFFFFFF
        Local5 |= 0x80000000
        Local2 = ((Local1 >> Arg2) & (Local5 >> (0x20 - Arg3)
            ))
        Return (Local2)
    }

    Method (M014, 5, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, 0x04)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VARR,   32
        }

        Local1 = VARR /* \M014.VARR */
        Local5 = 0x7FFFFFFF
        Local5 |= 0x80000000
        Local2 = (Arg2 + Arg3)
        Local2 = (0x20 - Local2)
        Local2 = (((Local5 << Local2) & Local5) >> Local2)
        Local2 = ((Local2 >> Arg2) << Arg2)
        Local3 = (Arg4 << Arg2)
        Local4 = ((Local1 & (Local5 ^ Local2)) | Local3)
        VARR = Local4
    }

    Method (M011, 4, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, 0x01)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            VARR,   8
        }

        Local1 = VARR /* \M011.VARR */
        Local2 = ((Local1 >> Arg2) & (0xFF >> (0x08 - Arg3)
            ))
        Return (Local2)
    }

    Method (M012, 5, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, 0x01)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            VARR,   8
        }

        Local1 = VARR /* \M012.VARR */
        Local2 = (Arg2 + Arg3)
        Local2 = (0x08 - Local2)
        Local2 = (((0xFF << Local2) & 0xFF) >> Local2)
        Local2 = ((Local2 >> Arg2) << Arg2)
        Local3 = (Arg4 << Arg2)
        Local4 = ((Local1 & (0xFF ^ Local2)) | Local3)
        VARR = Local4
    }

    Method (M017, 6, Serialized)
    {
        Local0 = M083 /* \M083 */
        Local1 = (M083 >> 0x14)
        Local2 = (Local1 & 0x0F00)
        Local2 += 0x0100
        If (((Local1 + Arg0) >= Local2))
        {
            Local3 = 0x7FFFFFFF
            Local3 |= 0x80000000
            Local4 = ((Local3 >> Arg4) & (Local3 >> (0x20 - Arg5)
                ))
            Return (Local4)
        }

        Local0 += (Arg0 << 0x14)
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Return (M013 (Local0, Arg3, Arg4, Arg5))
    }

    Method (M018, 7, Serialized)
    {
        Local0 = M083 /* \M083 */
        Local1 = (M083 >> 0x14)
        Local2 = (Local1 & 0x0F00)
        Local2 += 0x0100
        If (((Local1 + Arg0) < Local2))
        {
            Local0 += (Arg0 << 0x14)
            Local0 += (Arg1 << 0x0F)
            Local0 += (Arg2 << 0x0C)
            If ((M013 (Local0, 0x00, 0x00, 0x20) != 0xFFFFFFFF))
            {
                M014 (Local0, Arg3, Arg4, Arg5, Arg6)
            }
        }
    }

    Method (M265, 3, Serialized)
    {
        Local0 = 0x00
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, 0x00, 0x08)
        While ((Local1 != 0x00))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, 0x00, 0x08)
            If (((Local2 == 0x00) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                Local3 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x0C), 0x12, 0x01)
                Local4 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x10), 0x08, 0x01)
                If (((Local3 == 0x01) && (Local4 == 0x01)))
                {
                    Local0 = 0x01
                }

                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x01), 0x00, 0x08)
        }

        Return (Local0)
    }

    Method (M033, 3, Serialized)
    {
        Local0 = 0x00
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, 0x00, 0x08)
        While ((Local1 != 0x00))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, 0x00, 0x08)
            If (((Local2 == 0x00) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                Local0 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x0C), 0x0A, 0x02)
                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x01), 0x00, 0x08)
        }

        Return (Local0)
    }

    Method (M027, 3, Serialized)
    {
        Local0 = 0x00
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, 0x00, 0x08)
        While ((Local1 != 0x00))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, 0x00, 0x08)
            If (((Local2 == 0x00) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                Local0 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x10), 0x00, 0x02)
                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x01), 0x00, 0x08)
        }

        Return (Local0)
    }

    Method (M028, 4, Serialized)
    {
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, 0x00, 0x08)
        While (((Local1 != 0x00) && (Local1 < 0xFF)))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, 0x00, 0x08)
            If (((Local2 == 0x00) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                M018 (Arg0, Arg1, Arg2, (Local1 + 0x10), 0x00, 0x02, Arg3)
                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x01), 0x00, 0x08)
        }
    }

    Method (M034, 1, Serialized)
    {
        Return (M011 ((M084 + 0x0700), Arg0, 0x00, 0x08))
    }

    Method (M015, 1, Serialized)
    {
        Return (M011 ((M084 + 0x0400), Arg0, 0x00, 0x08))
    }

    Method (M016, 2, Serialized)
    {
        M012 ((M084 + 0x0400), Arg0, 0x00, 0x08, Arg1)
    }

    Method (M035, 1, Serialized)
    {
        Return (M011 (M084, Arg0, 0x00, 0x08))
    }

    Method (M036, 2, Serialized)
    {
        M012 (M084, Arg0, 0x00, 0x08, Arg1)
    }

    Method (M001, 2, Serialized)
    {
        Local0 = 0x00
        If ((Arg0 == 0x15))
        {
            Local0 = 0x01
        }

        Return (Local0)
    }

    Method (M003, 3, Serialized)
    {
        Local0 = (Arg0 << 0x05)
        Local1 = (Local0 + Arg1)
        Local2 = (Local1 << 0x18)
        Local3 = (Local2 + Arg2)
        Return (Local3)
    }

    Method (M004, 1, Serialized)
    {
        OperationRegion (VARM, SystemIO, 0x0CD8, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg0, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local0 = VAR2 /* \M004.VAR2 */
        Return (Local0)
    }

    Method (M005, 2, Serialized)
    {
        OperationRegion (VARM, SystemIO, 0x0CD8, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg0, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        VAR2 = Arg1
    }

    Method (M006, 3, Serialized)
    {
        Local0 = (M004 (Arg0) & Arg1)
        Local1 = (Local0 | Arg2)
        M005 (Arg0, Local1)
    }

    Method (M002, 2, Serialized)
    {
        If ((Arg0 == 0x00))
        {
            If ((Arg1 == 0x00))
            {
                M006 (M003 (0x06, 0x00, 0xC0), 0xFFFFEFFF, 0x00)
                M006 (M003 (0x01, 0x00, 0x65), 0xFFFFFEFE, 0x00)
            }

            If ((Arg1 == 0x01))
            {
                M006 (M003 (0x06, 0x00, 0xC0), 0xFFFFDFFF, 0x00)
                M006 (M003 (0x01, 0x00, 0x65), 0xFFFFFDFD, 0x00)
            }

            If ((Arg1 == 0x02))
            {
                M006 (M003 (0x06, 0x00, 0xC0), 0xFFFFBFFF, 0x00)
                M006 (M003 (0x01, 0x00, 0x65), 0xFFFFFBFB, 0x00)
            }

            If ((Arg1 == 0x03))
            {
                M006 (M003 (0x06, 0x00, 0xC0), 0xFFFF7FFF, 0x00)
                M006 (M003 (0x01, 0x00, 0x65), 0xFFFFF7F7, 0x00)
            }

            Sleep (0x01)
        }

        If ((Arg0 == 0x01))
        {
            If ((Arg1 == 0x00))
            {
                M006 (M003 (0x06, 0x00, 0xC0), 0xFFFFEFFF, 0x1000)
                M006 (M003 (0x01, 0x00, 0x65), 0xFFFFFEFE, 0x0101)
            }

            If ((Arg1 == 0x01))
            {
                M006 (M003 (0x06, 0x00, 0xC0), 0xFFFFDFFF, 0x2000)
                M006 (M003 (0x01, 0x00, 0x65), 0xFFFFFDFD, 0x0202)
            }

            If ((Arg1 == 0x02))
            {
                M006 (M003 (0x06, 0x00, 0xC0), 0xFFFFBFFF, 0x4000)
                M006 (M003 (0x01, 0x00, 0x65), 0xFFFFFBFB, 0x0404)
            }

            If ((Arg1 == 0x03))
            {
                M006 (M003 (0x06, 0x00, 0xC0), 0xFFFF7FFF, 0x8000)
                M006 (M003 (0x01, 0x00, 0x65), 0xFFFFF7F7, 0x0808)
            }

            Sleep (0x01)
        }

        If ((Arg0 == 0x00))
        {
            M008 (Arg1)
            Local0 = M004 (M003 (0x03, Arg1, 0xA5))
            Local0 &= 0xFF
            Local1 = 0x01F4
            While (((Local1 > 0x00) && (Local0 != 0x10)))
            {
                Local0 = M004 (M003 (0x03, Arg1, 0xA5))
                Local0 &= 0xFF
                Local1--
                Sleep (0x01)
            }

            If ((Local0 != 0x10))
            {
                M007 (Arg1)
            }
        }
    }

    Method (M008, 1, Serialized)
    {
        Local0 = M019 (0x00, 0x15, Arg0, 0x88)
        Local1 = ((Local0 & 0xFFFFFFF0) | 0x02)
        M020 (0x00, 0x15, Arg0, 0x88, Local1)
        M006 (M003 (0x03, Arg0, 0xA4), 0xFFFFFFFE, 0x01)
        M006 (M003 (0x03, Arg0, 0xA2), 0xFFFFDFFF, 0x2000)
        M006 (M003 (0x03, Arg0, 0xC0), 0xFFFF7FFF, 0x8000)
        M006 (M003 (0x03, Arg0, 0xA4), 0xDFFFFFFF, 0x20000000)
        Sleep (0x01)
    }

    Method (M007, 1, Serialized)
    {
        Local0 = M019 (0x00, 0x15, Arg0, 0x88)
        Local1 = ((Local0 & 0xFFFFFFF0) | 0x01)
        M020 (0x00, 0x15, Arg0, 0x88, Local1)
        M006 (M003 (0x03, Arg0, 0xA4), 0xFFFFFFFE, 0x00)
        M006 (M003 (0x03, Arg0, 0xA2), 0xFFFFDFFF, 0x2000)
        Sleep (0x01)
    }

    Method (M111, 2, Serialized)
    {
        If ((Arg0 != 0x00))
        {
            Local0 = M110 /* \M110 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = 0x00
                Local2 = M013 ((Local0 + Local1), 0x00, 0x00, 0x08)
                While (((Local2 != 0xFF) && (Local2 != 0x00)))
                {
                    Local3 = M013 ((Local0 + Local1), 0x01, 0x00, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        Local3 = M013 ((Local0 + Local1), 0x07, 0x00, 0x08)
                        If ((Local3 != 0x00))
                        {
                            Local4 = M013 ((Local0 + Local1), 0x02, 0x00, 0x08)
                            If ((Local4 == 0x00))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, 0x00, 0x10)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                M010 (Local5, Local6)
                            }

                            If ((Local4 == 0x01))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, 0x00, 0x10)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                While ((M009 (Local5) != Local6)) {}
                            }

                            If ((Local4 == 0x02))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, 0x00, 0x20)
                                Sleep (((Local5 + 0x03E7) / 0x03E8))
                            }
                        }
                    }

                    Local1 += 0x08
                    Local2 = M013 ((Local0 + Local1), 0x00, 0x00, 0x08)
                }
            }
        }
    }

    Method (M228, 1, Serialized)
    {
        If ((Arg0 > 0x03))
        {
            Local0 = M110 /* \M110 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = 0x00
                Local2 = M013 ((Local0 + Local1), 0x00, 0x00, 0x08)
                While (((Local2 != 0xFF) && (Local2 != 0x00)))
                {
                    Local3 = M013 ((Local0 + Local1), 0x07, 0x00, 0x08)
                    If ((Local3 == Arg0))
                    {
                        Local4 = M013 ((Local0 + Local1), 0x02, 0x00, 0x08)
                        If ((Local4 == 0x00))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, 0x00, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            M010 (Local5, Local6)
                        }

                        If ((Local4 == 0x01))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, 0x00, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            While ((M009 (Local5) != Local6)) {}
                        }

                        If ((Local4 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, 0x00, 0x20)
                            Sleep (((Local5 + 0x03E7) / 0x03E8))
                        }
                    }

                    Local1 += 0x08
                    Local2 = M013 ((Local0 + Local1), 0x00, 0x00, 0x08)
                }
            }
        }
    }

    Method (M219, 2, Serialized)
    {
        If ((Arg0 != 0x00))
        {
            Local0 = M221 /* \M221 */
            If ((Local0 & 0x02))
            {
                Local0 = M220 /* \M220 */
                If (Local0)
                {
                    Local0 += 0x10
                    Local1 = 0x00
                    Local2 = 0x01
                    While ((Local2 != 0xFF))
                    {
                        Local2 = M013 ((Local0 + Local1), 0x00, 0x00, 0x08)
                        Local3 = M013 ((Local0 + Local1), 0x01, 0x00, 0x08)
                        Local4 = M013 ((Local0 + Local1), 0x04, 0x00, 0x08)
                        Local5 = M013 ((Local0 + Local1), 0x07, 0x00, 0x08)
                        If ((Local4 == Arg0))
                        {
                            If (((Local2 < 0x0A) && (Local5 & 0x80)))
                            {
                                If ((Arg1 == 0x00))
                                {
                                    If ((M085 >= 0x04))
                                    {
                                        M012 ((M084 + 0x0E00), 0x00, (Local2 * 0x02), 0x02, 0x00)
                                    }
                                    Else
                                    {
                                        M012 ((M084 + 0x0E00), (Local2 / 0x02), ((Local2 & 
                                            0x01) * 0x04), 0x04, 0x00)
                                    }
                                }
                                ElseIf ((Local5 & 0x04))
                                {
                                    If ((Arg1 == 0x01))
                                    {
                                        If ((M085 >= 0x04))
                                        {
                                            M012 ((M084 + 0x0E00), 0x00, (Local2 * 0x02), 0x02, 0x03)
                                        }
                                        Else
                                        {
                                            M012 ((M084 + 0x0E00), (Local2 / 0x02), ((Local2 & 
                                                0x01) * 0x04), 0x04, 0x0F)
                                        }
                                    }

                                    If ((Arg1 == 0x02))
                                    {
                                        Local6 = M017 (0x00, M013 ((Local0 + Local1), 0x05, 0x00, 0x08), 
                                            M013 ((Local0 + Local1), 0x06, 0x00, 0x08), 0x19, 0x00, 0x08)
                                        If ((M265 (Local6, 0x00, 0x00) == 0x01))
                                        {
                                            If ((M085 >= 0x04))
                                            {
                                                M012 ((M084 + 0x0E00), 0x00, (Local2 * 0x02), 0x02, 0x01)
                                            }
                                            Else
                                            {
                                                M012 ((M084 + 0x0E00), (Local2 / 0x02), ((Local2 & 
                                                    0x01) * 0x04), 0x04, Local3)
                                            }
                                        }
                                    }
                                }
                                ElseIf ((M085 >= 0x04))
                                {
                                    M012 ((M084 + 0x0E00), 0x00, (Local2 * 0x02), 0x02, 0x03)
                                }
                                Else
                                {
                                    M012 ((M084 + 0x0E00), (Local2 / 0x02), ((Local2 & 
                                        0x01) * 0x04), 0x04, Local3)
                                }

                                Local2 = 0xFF
                            }
                        }

                        Local1 += 0x0C
                    }
                }
            }
        }
    }

    Method (M112, 2, Serialized)
    {
        If ((Arg0 != 0x00))
        {
            Local0 = M109 /* \M109 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = 0x00
                Local2 = 0x01
                While (((Local2 != 0xFF) && (Local2 != 0x00)))
                {
                    Local2 = M013 ((Local0 + Local1), 0x00, 0x00, 0x08)
                    Local3 = M013 ((Local0 + Local1), 0x01, 0x00, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        If ((Local3 < 0x02))
                        {
                            Local4 = M013 ((Local0 + Local1), 0x02, 0x00, 0x08)
                            If ((Local4 == 0x00))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, 0x00, 0x10)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                M010 (Local5, Local6)
                            }
                        }

                        If ((Local3 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, 0x00, 0x20)
                            Sleep (((Local5 + 0x03E7) / 0x03E8))
                        }
                    }

                    Local1 += 0x08
                }
            }
        }
    }

    Method (M275, 2, Serialized)
    {
        Local7 = 0x00
        If ((Arg0 != 0x00))
        {
            Local0 = M109 /* \M109 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = 0x00
                Local2 = 0x01
                While (((Local2 != 0xFF) && (Local2 != 0x00)))
                {
                    Local2 = M013 ((Local0 + Local1), 0x00, 0x00, 0x08)
                    Local3 = M013 ((Local0 + Local1), 0x01, 0x00, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        If ((Local3 < 0x02))
                        {
                            Local4 = M013 ((Local0 + Local1), 0x02, 0x00, 0x08)
                            If ((Local4 == 0x00))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, 0x00, 0x10)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                If ((M009 (Local5) == Local6))
                                {
                                    Local7 = 0x01
                                }
                            }
                        }
                    }

                    Local1 += 0x08
                }
            }
        }

        Return (Local7)
    }

    Method (M113, 1, Serialized)
    {
        If ((Arg0 != 0x00))
        {
            Local0 = M108 /* \M108 */
            Local7 = 0x01
            If (Local0)
            {
                Local0 += 0x10
                Local1 = 0x00
                Local2 = 0x01
                While (((Local2 != 0xFF) && (Local2 != 0x00)))
                {
                    Local2 = M013 ((Local0 + Local1), 0x00, 0x00, 0x08)
                    If ((Local2 == Arg0))
                    {
                        Local2 = 0xFF
                        Local3 = M013 ((Local0 + Local1), 0x01, 0x00, 0x08)
                        If ((Local3 == 0x00))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, 0x00, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, 0x00, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                        }

                        If ((Local3 == 0x01))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, 0x00, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, 0x00, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x05, 0x00, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x07, 0x00, 0x08)
                            Local7 &= (M009 (Local5) == Local6)
                        }

                        If ((Local3 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, 0x00, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, 0x00, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x05, 0x00, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x07, 0x00, 0x08)
                            Local7 &= (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x08, 0x00, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x0A, 0x00, 0x08)
                            Local7 &= (M009 (Local5) == Local6)
                        }

                        If ((Local3 == 0x03))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, 0x00, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, 0x00, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x05, 0x00, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x07, 0x00, 0x08)
                            Local7 |= (M009 (Local5) == Local6)
                        }

                        If ((Local3 == 0x04))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, 0x00, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, 0x00, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x05, 0x00, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x07, 0x00, 0x08)
                            Local7 |= (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x08, 0x00, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x0A, 0x00, 0x08)
                            Local7 |= (M009 (Local5) == Local6)
                        }
                    }
                    Else
                    {
                        Local1 += 0x0B
                    }
                }
            }
        }
        Else
        {
            Local7 = 0x00
        }

        If (Local7)
        {
            Local7 = 0x01
        }

        Return (Local7)
    }

    Method (M114, 4, Serialized)
    {
        Local7 = 0x00
        If (!M001 (Arg0, Arg1))
        {
            Name (M115, Buffer (0x05) {})
            CreateWordField (M115, 0x00, M116)
            CreateField (M115, 0x10, 0x03, M117)
            CreateField (M115, 0x13, 0x05, M118)
            CreateByteField (M115, 0x03, M119)
            CreateByteField (M115, 0x04, M120)
            M116 = 0x05
            M119 = 0x00
            M118 = Arg0
            M117 = Arg1
            If ((Arg2 == 0x00))
            {
                If ((Arg3 != 0x01))
                {
                    M120 = 0x00
                    \_SB.ALIB (0x06, M115)
                }
            }
            Else
            {
                If ((Arg3 != 0x01))
                {
                    M120 = 0x01
                    \_SB.ALIB (0x06, M115)
                }

                Local0 = M017 (0x00, Arg0, Arg1, 0x19, 0x00, 0x08)
                If (((Local0 != 0x00) && (Local0 != 0xFF)))
                {
                    Local1 = M019 (Local0, 0x00, 0x00, 0x00)
                    Local2 = 0x7FFFFFFF
                    Local2 |= 0x80000000
                    If (((Local1 != 0x00) && (Local1 != Local2)))
                    {
                        Local7 = 0x01
                    }
                }
            }
        }
        ElseIf ((Arg2 == 0x00))
        {
            M002 (0x01, Arg1)
        }
        Else
        {
            M002 (0x00, Arg1)
            Local0 = M017 (0x00, Arg0, Arg1, 0x19, 0x00, 0x08)
            If (((Local0 != 0x00) && (Local0 != 0xFF)))
            {
                Local1 = M019 (Local0, 0x00, 0x00, 0x00)
                Local2 = 0x7FFFFFFF
                Local2 |= 0x80000000
                If (((Local1 != 0x00) && (Local1 != Local2)))
                {
                    Local7 = 0x01
                }
            }
        }

        Return (Local7)
    }

    Method (M252, 2, Serialized)
    {
        If ((M085 >= 0x08))
        {
            Local0 = M251 /* \M251 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = 0x00
                Local2 = 0x00
                While ((Local2 != 0xFF))
                {
                    Local2 = M011 ((Local0 + Local1), 0x00, 0x00, 0x08)
                    Local3 = M011 ((Local0 + Local1), 0x01, 0x00, 0x08)
                    Local4 = M011 ((Local0 + Local1), 0x02, 0x00, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        Return (Local4)
                    }

                    Local1 += 0x03
                }
            }
        }

        Return (0xFFFFFFFF)
    }

    Name (M046, Zero)
    Name (M047, Ones)
    Method (M045, 0, Serialized)
    {
        Local0 = 0x00
        If ((M047 == Ones))
        {
            M047 = 0x00
            M046 = 0x00
            If (CondRefOf (\_OSI))
            {
                If (\_OSI ("Windows 2012"))
                {
                    M046 = 0x01
                }

                If (\_OSI ("Windows 2013"))
                {
                    M046 = 0x01
                }

                If (\_OSI ("Windows 2015"))
                {
                    M046 = 0x01
                }

                If (\_OSI ("Windows 2016"))
                {
                    M046 = 0x01
                }

                If (\_OSI ("Windows 2017"))
                {
                    M046 = 0x01
                }
            }
        }

        If ((M046 == 0x01))
        {
            Local0 = 0x01
        }

        Return (Local0)
    }

    Method (M049, 2, Serialized)
    {
        Local0 = 0x00
        If ((Arg0 != 0x00))
        {
            Local0 = M011 (Arg0, Arg1, 0x00, 0x08)
        }

        Return (Local0)
    }

    Mutex (M230, 0x00)
    Method (M232, 3, Serialized)
    {
        Local0 = Arg0
        Local1 = Arg1
        Local2 = Arg2
        Acquire (M230, 0xFFFF)
        Local0 = Arg0
        OperationRegion (VARM, SystemIO, M231, 0x02)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            VAR1,   8, 
            VAR2,   8
        }

        VAR2 = Local1
        VAR1 = Local0
        Sleep (Local2)
        Release (M230)
    }

    Method (M043, 3, Serialized)
    {
        If (CondRefOf (MOEM))
        {
            Return (MOEM) /* External reference */
            Arg0
            Arg1
            Arg2
        }
        Else
        {
            Return (0x00)
        }
    }

    Method (MLIB, 2, Serialized)
    {
        Switch (ToInteger (Arg0))
        {
            Case (0x00)
            {
                Local0 = DerefOf (Arg1 [0x02])
                Switch (ToInteger (Local0))
                {
                    Case (0x03)
                    {
                        M228 (0x04)
                        M228 (0x05)
                    }
                    Case (0x04)
                    {
                        M228 (0x04)
                        M228 (0x06)
                    }
                    Case (0x03)
                    {
                        M228 (0x04)
                        M228 (0x07)
                    }

                }
            }

        }
    }

    Method (M248, 1, Serialized)
    {
        If ((M085 == 0x08))
        {
            If ((Arg0 == 0x00))
            {
                Return (M017 (0x00, 0x07, 0x01, 0x19, 0x00, 0x08))
            }
            Else
            {
                Return (M017 (0x00, 0x08, 0x01, 0x19, 0x00, 0x08))
            }
        }
        ElseIf ((M085 >= 0x0B))
        {
            If ((Arg0 == 0x00))
            {
                Return (M017 (0x00, 0x07, 0x01, 0x19, 0x00, 0x08))
            }
            Else
            {
                Return (M017 (0x00, 0x08, Arg0, 0x19, 0x00, 0x08))
            }
        }
        ElseIf ((M085 >= 0x09))
        {
            If ((Arg0 == 0x00))
            {
                Return (M017 (0x00, 0x08, 0x01, 0x19, 0x00, 0x08))
            }
            Else
            {
                Return (M017 (0x00, 0x08, 0x02, 0x19, 0x00, 0x08))
            }
        }
        Else
        {
            Return (0x00)
        }
    }

    Method (MPTS, 1, NotSerialized)
    {
        Local0 = M049 (M128, 0x67)
        If (((Local0 & 0x03) == 0x03))
        {
            If ((M085 >= 0x08))
            {
                \_SB.PCI0.GP18.SATA.TPTS (Arg0)
            }
            Else
            {
                \_SB.PCI0.SATA.TPTS (Arg0)
            }
        }

        If ((M226 != 0x00))
        {
            \_SB.M263 (Arg0)
        }
    }

    Method (MWAK, 1, NotSerialized)
    {
        Local0 = M049 (M128, 0x67)
        If (((Local0 & 0x03) == 0x03))
        {
            If ((M085 >= 0x08))
            {
                \_SB.PCI0.GP18.SATA.TWAK (Arg0)
            }
            Else
            {
                \_SB.PCI0.SATA.TWAK (Arg0)
            }
        }

        If ((M226 != 0x00))
        {
            \_SB.M264 (Arg0)
        }

        If ((M280 != 0x00))
        {
            \_SB.M284 (Arg0)
        }
    }
}



SSDT8
-----
DefinitionBlock ("", "SSDT", 1, "LENOVO", "TP-R11  ", 0x00000001)
{
    /*
     * iASL Warning: There were 32 external control methods found during
     * disassembly, but only 0 were resolved (32 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_SB_.ALIB, IntObj)
    External (_SB_.PCI0.GP17.VGA_, DeviceObj)
    External (_SB_.PCI0.GP17.VGA_.AFN0, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GP17.VGA_.AFN1, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.GP17.VGA_.AFN2, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (_SB_.PCI0.GP17.VGA_.AFN3, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (_SB_.PCI0.GP17.VGA_.AFN4, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.GP17.VGA_.AFN5, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GP17.VGA_.AFN6, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GP17.VGA_.AFN7, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.GP17.VGA_.AFNC, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (_SB_.PCI0.GPP1.SWUS.SWDS.VGA_.AFN0, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GPP1.SWUS.SWDS.VGA_.AFN1, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.GPP1.SWUS.SWDS.VGA_.AFN2, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (_SB_.PCI0.GPP1.SWUS.SWDS.VGA_.AFN3, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (_SB_.PCI0.GPP1.SWUS.SWDS.VGA_.AFN4, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.GPP1.SWUS.SWDS.VGA_.AFN5, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GPP1.SWUS.SWDS.VGA_.AFN6, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GPP1.SWUS.SWDS.VGA_.AFN7, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.GPP1.SWUS.SWDS.VGA_.AFN8, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GPP1.SWUS.SWDS.VGA_.AFNC, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (_SB_.PCI0.GPP1.VGA_.AFN0, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GPP1.VGA_.AFN1, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.GPP1.VGA_.AFN2, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (_SB_.PCI0.GPP1.VGA_.AFN3, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (_SB_.PCI0.GPP1.VGA_.AFN4, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.GPP1.VGA_.AFN5, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GPP1.VGA_.AFN6, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GPP1.VGA_.AFN7, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.GPP1.VGA_.AFN8, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GPP1.VGA_.AFNC, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (M049, IntObj)
    External (M087, UnknownObj)
    External (M100, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (M105, IntObj)
    External (M106, IntObj)
    External (M113, IntObj)
    External (M133, UnknownObj)
    External (M232, MethodObj)    // Warning: Unknown method, guessing 3 arguments
    External (M233, IntObj)
    External (M235, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (M378, IntObj)
    External (M379, IntObj)
    External (M380, IntObj)
    External (M381, IntObj)
    External (M382, IntObj)
    External (M383, IntObj)
    External (M384, IntObj)
    External (M385, IntObj)
    External (M386, IntObj)
    External (M387, IntObj)
    External (M388, IntObj)
    External (M389, IntObj)
    External (M390, IntObj)
    External (M391, IntObj)
    External (M392, IntObj)

    Scope (\_SB.PCI0.GP17.VGA)
    {
        Name (M207, Buffer (0xFF) {})
        Name (M208, Buffer (0x03) {})
        Name (M204, 0x01)
        Method (ATCS, 2, Serialized)
        {
            If ((Arg0 == 0x00))
            {
                ATC0 ()
            }

            If ((Arg0 == 0x01))
            {
                ATC1 ()
            }

            If ((Arg0 == 0x02))
            {
                ATC2 (Arg1)
            }

            If ((Arg0 == 0x03))
            {
                ATC3 ()
            }

            If ((Arg0 == 0x04))
            {
                ATC4 (Arg1)
            }

            If ((Arg0 == 0x06))
            {
                ATC6 (Arg1)
            }

            If ((Arg0 == 0x07))
            {
                ATC7 (Arg1)
            }

            Return (M207) /* \_SB_.PCI0.GP17.VGA_.M207 */
        }

        Method (ATC0, 0, NotSerialized)
        {
            CreateWordField (M207, 0x00, M157)
            CreateWordField (M207, 0x02, M158)
            CreateDWordField (M207, 0x04, M160)
            M157 = 0x08
            M158 = 0x01
            M160 = 0x6F
            0x00 = \_SB.ALIB /* External reference */
            M207
            M207
        }

        Method (ATC1, 0, Serialized)
        {
            CreateWordField (M207, 0x00, M157)
            CreateDWordField (M207, 0x02, M161)
            CreateDWordField (M207, 0x06, M162)
            CreateField (M207, 0x30, 0x01, M203)
            M157 = 0x0A
            M161 = 0x01
            0x15 = M100 (M162, M133 = M049 /* External reference */)
            Local0
            If ((Local0 & 0x80))
            {
                M204 = (Local0 & 0x01)
            }
            ElseIf ((Local0 & 0x7F))
            {
                Local0 = M113 /* External reference */
                M204
            }

            M203 = M204 /* \_SB_.PCI0.GP17.VGA_.M204 */
        }

        Method (ATC2, 1, Serialized)
        {
            CreateWordField (M207, 0x00, M157)
            CreateByteField (M207, 0x02, M205)
            M157 = 0x03
            M205 = 0x01
            0x02 = \_SB.ALIB /* External reference */
            Arg0
            M207
        }

        Method (ATC3, 0, Serialized)
        {
            CreateWordField (M207, 0x00, M157)
            CreateByteField (M207, 0x02, M205)
            CreateWordField (M208, 0x00, M197)
            CreateByteField (M208, 0x02, M206)
            M157 = 0x03
            M205 = 0x01
            M197 = 0x03
            M206 = 0x01
            0x03 = \_SB.ALIB /* External reference */
            M208
            M207
        }

        Method (ATC4, 1, Serialized)
        {
            CreateWordField (M207, 0x00, M157)
            CreateByteField (M207, 0x02, M209)
            M157 = 0x03
            M209 = 0x01
            0x04 = \_SB.ALIB /* External reference */
            Arg0
            M207
        }

        Method (ATC6, 1, Serialized)
        {
            CreateWordField (M207, 0x00, M157)
            CreateDWordField (M207, 0x02, M234)
            M157 = 0x06
            M234 = M233 /* External reference */
        }

        Method (ATC7, 1, Serialized)
        {
            M232 (M235 (0x00, 0x01))
        }

        Method (XTRM, 2, Serialized)
        {
            If ((M105 == 0x00))
            {
                Return (Buffer (0x01)
                {
                     0x00                                             // .
                })
            }

            Local4 = M105 /* External reference */
            If ((Local4 > 0x00010000))
            {
                Local4 = 0x00010000
            }

            Local5 = Arg0
            Local6 = Arg1
            If ((Local6 > 0x1000))
            {
                Local6 = 0x1000
            }

            If ((Local5 > Local4))
            {
                Return (Buffer (Local6)
                {
                     0x00                                             // .
                })
            }

            If ((((Local5 & 0x0FFF) + Local6) > 0x1000))
            {
                Local6 = (0x1000 - (Local5 & 0x0FFF))
            }

            Name (M202, Buffer (0x1000)
            {
                 0x00                                             // .
            })
            If (((Local5 & 0xF000) == 0x00))
            {
                M202 = M106 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x1000))
            {
                M202 = M378 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x2000))
            {
                M202 = M379 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x3000))
            {
                M202 = M380 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x4000))
            {
                M202 = M381 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x5000))
            {
                M202 = M382 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x6000))
            {
                M202 = M383 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x7000))
            {
                M202 = M384 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x8000))
            {
                M202 = M385 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x9000))
            {
                M202 = M386 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0xA000))
            {
                M202 = M387 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0xB000))
            {
                M202 = M388 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0xC000))
            {
                M202 = M389 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0xD000))
            {
                M202 = M390 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0xE000))
            {
                M202 = M391 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0xF000))
            {
                M202 = M392 /* External reference */
            }

            If (((Local5 + Local6) <= Local4))
            {
                If ((Local6 == 0x1000))
                {
                    Return (M202) /* \_SB_.PCI0.GP17.VGA_.XTRM.M202 */
                }
            }
            Else
            {
                Local6 = (Local4 - Local5)
            }

            Name (M393, Buffer (Local6)
            {
                 0x00                                             // .
            })
            CreateField (M202, ((Local5 & 0x0FFF) * 0x08), (Local6 * 0x08
                ), M394)
            M393 = M394 /* \_SB_.PCI0.GP17.VGA_.XTRM.M394 */
            Return (M393) /* \_SB_.PCI0.GP17.VGA_.XTRM.M393 */
        }
    }

    Method (AFN0, 0, Serialized)
    {
        If ((M087 == 0x00))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN0))
            {
                \_SB.PCI0.GP17.VGA.AFN0 ()
            }
        }

        If ((M087 == 0x01))
        {
            If (CondRefOf (\_SB.PCI0.GPP1.VGA.AFN0))
            {
                \_SB.PCI0.GPP1.VGA.AFN0 ()
            }

            If (CondRefOf (\_SB.PCI0.GPP1.SWUS.SWDS.VGA.AFN0))
            {
                \_SB.PCI0.GPP1.SWUS.SWDS.VGA.AFN0 ()
            }
        }
    }

    Method (AFN1, 1, Serialized)
    {
        If ((M087 == 0x00))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN1))
            {
                \_SB.PCI0.GP17.VGA.AFN1 (Arg0)
            }
        }

        If ((M087 == 0x01))
        {
            If (CondRefOf (\_SB.PCI0.GPP1.VGA.AFN1))
            {
                \_SB.PCI0.GPP1.VGA.AFN1 (Arg0)
            }

            If (CondRefOf (\_SB.PCI0.GPP1.SWUS.SWDS.VGA.AFN1))
            {
                \_SB.PCI0.GPP1.SWUS.SWDS.VGA.AFN1 (Arg0)
            }
        }
    }

    Method (AFN2, 2, Serialized)
    {
        If ((M087 == 0x00))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN2))
            {
                \_SB.PCI0.GP17.VGA.AFN2 (Arg0, Arg1)
            }
        }

        If ((M087 == 0x01))
        {
            If (CondRefOf (\_SB.PCI0.GPP1.VGA.AFN2))
            {
                \_SB.PCI0.GPP1.VGA.AFN2 (Arg0, Arg1)
            }

            If (CondRefOf (\_SB.PCI0.GPP1.SWUS.SWDS.VGA.AFN2))
            {
                \_SB.PCI0.GPP1.SWUS.SWDS.VGA.AFN2 (Arg0, Arg1)
            }
        }
    }

    Method (AFN3, 2, Serialized)
    {
        If ((M087 == 0x00))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN3))
            {
                \_SB.PCI0.GP17.VGA.AFN3 (Arg0, Arg1)
            }
        }

        If ((M087 == 0x01))
        {
            If (CondRefOf (\_SB.PCI0.GPP1.VGA.AFN3))
            {
                \_SB.PCI0.GPP1.VGA.AFN3 (Arg0, Arg1)
            }

            If (CondRefOf (\_SB.PCI0.GPP1.SWUS.SWDS.VGA.AFN3))
            {
                \_SB.PCI0.GPP1.SWUS.SWDS.VGA.AFN3 (Arg0, Arg1)
            }
        }
    }

    Method (AFN4, 1, Serialized)
    {
        If ((M087 == 0x00))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN4))
            {
                \_SB.PCI0.GP17.VGA.AFN4 (Arg0)
            }
        }

        If ((M087 == 0x01))
        {
            If (CondRefOf (\_SB.PCI0.GPP1.VGA.AFN4))
            {
                \_SB.PCI0.GPP1.VGA.AFN4 (Arg0)
            }

            If (CondRefOf (\_SB.PCI0.GPP1.SWUS.SWDS.VGA.AFN4))
            {
                \_SB.PCI0.GPP1.SWUS.SWDS.VGA.AFN4 (Arg0)
            }
        }
    }

    Method (AFN5, 0, Serialized)
    {
        If ((M087 == 0x00))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN5))
            {
                \_SB.PCI0.GP17.VGA.AFN5 ()
            }
        }

        If ((M087 == 0x01))
        {
            If (CondRefOf (\_SB.PCI0.GPP1.VGA.AFN5))
            {
                \_SB.PCI0.GPP1.VGA.AFN5 ()
            }

            If (CondRefOf (\_SB.PCI0.GPP1.SWUS.SWDS.VGA.AFN5))
            {
                \_SB.PCI0.GPP1.SWUS.SWDS.VGA.AFN5 ()
            }
        }
    }

    Method (AFN6, 0, Serialized)
    {
        If ((M087 == 0x00))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN6))
            {
                \_SB.PCI0.GP17.VGA.AFN6 ()
            }
        }

        If ((M087 == 0x01))
        {
            If (CondRefOf (\_SB.PCI0.GPP1.VGA.AFN6))
            {
                \_SB.PCI0.GPP1.VGA.AFN6 ()
            }

            If (CondRefOf (\_SB.PCI0.GPP1.SWUS.SWDS.VGA.AFN6))
            {
                \_SB.PCI0.GPP1.SWUS.SWDS.VGA.AFN6 ()
            }
        }
    }

    Method (AFN7, 1, Serialized)
    {
        If ((M087 == 0x00))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN7))
            {
                \_SB.PCI0.GP17.VGA.AFN7 (Arg0)
            }
        }

        If ((M087 == 0x01))
        {
            If (CondRefOf (\_SB.PCI0.GPP1.VGA.AFN7))
            {
                \_SB.PCI0.GPP1.VGA.AFN7 (Arg0)
            }

            If (CondRefOf (\_SB.PCI0.GPP1.SWUS.SWDS.VGA.AFN7))
            {
                \_SB.PCI0.GPP1.SWUS.SWDS.VGA.AFN7 (Arg0)
            }
        }
    }

    Method (AFN8, 0, Serialized)
    {
        If (CondRefOf (\_SB.PCI0.GPP1.VGA.AFN8))
        {
            \_SB.PCI0.GPP1.VGA.AFN8 ()
        }

        If (CondRefOf (\_SB.PCI0.GPP1.SWUS.SWDS.VGA.AFN8))
        {
            \_SB.PCI0.GPP1.SWUS.SWDS.VGA.AFN8 ()
        }
    }

    Method (AFNC, 2, Serialized)
    {
        If ((M087 == 0x00))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFNC))
            {
                \_SB.PCI0.GP17.VGA.AFNC (Arg0, Arg1)
            }
        }

        If ((M087 == 0x01))
        {
            If (CondRefOf (\_SB.PCI0.GPP1.VGA.AFNC))
            {
                \_SB.PCI0.GPP1.VGA.AFNC (Arg0, Arg1)
            }

            If (CondRefOf (\_SB.PCI0.GPP1.SWUS.SWDS.VGA.AFNC))
            {
                \_SB.PCI0.GPP1.SWUS.SWDS.VGA.AFNC (Arg0, Arg1)
            }
        }
    }
}



TPM2
----
[000h 0000   4]                    Signature : "TPM2"    [Trusted Platform Module hardware interface table]
[004h 0004   4]                 Table Length : 00000034
[008h 0008   1]                     Revision : 03
[009h 0009   1]                     Checksum : C9
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "TP-R11  "
[018h 0024   4]                 Oem Revision : 00001100
[01Ch 0028   4]              Asl Compiler ID : "PTEC"
[020h 0032   4]        Asl Compiler Revision : 00000002

[024h 0036   4]                     Reserved : 00000000
[028h 0040   8]              Control Address : 0000000000000000
[030h 0048   4]                 Start Method : 00000006

Raw Table Data: Length 52 (0x34)

    0000: 54 50 4D 32 34 00 00 00 03 C9 4C 45 4E 4F 56 4F  // TPM24.....LENOVO
    0010: 54 50 2D 52 31 31 20 20 00 11 00 00 50 54 45 43  // TP-R11  ....PTEC
    0020: 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 06 00 00 00                                      // ....


UEFI
----
[000h 0000   4]                    Signature : "UEFI"    [UEFI Boot Optimization Table]
[004h 0004   4]                 Table Length : 000000B2
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 09
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "TP-R11  "
[018h 0024   4]                 Oem Revision : 00001100
[01Ch 0028   4]              Asl Compiler ID : "PTEC"
[020h 0032   4]        Asl Compiler Revision : 00000002

[024h 0036  16]              UUID Identifier : 0D9FB197-CEFC-4E91-ACB1-2535D9E5A844
[034h 0052   2]                  Data Offset : 0036

Raw Table Data: Length 178 (0xB2)

    0000: 55 45 46 49 B2 00 00 00 01 09 4C 45 4E 4F 56 4F  // UEFI......LENOVO
    0010: 54 50 2D 52 31 31 20 20 00 11 00 00 50 54 45 43  // TP-R11  ....PTEC
    0020: 02 00 00 00 97 B1 9F 0D FC CE 91 4E AC B1 25 35  // ...........N..%5
    0030: D9 E5 A8 44 36 00 06 00 00 00 10 00 00 00 D1 00  // ...D6...........
    0040: 00 00 11 00 00 00 12 00 00 00 20 00 00 00 E9 00  // .......... .....
    0050: 00 00 03 25 05 FF F9 1A EB 4A 83 C4 C2 D4 CE B1  // ...%.....J......
    0060: 0C A3 16 29 EA 81 A0 F9 15 41 83 85 1A 86 4E 2F  // ...).....A....N/
    0070: 30 9C E5 C3 71 51 DD C7 15 44 AF FB AA EC D7 65  // 0...qQ...D.....e
    0080: FE 15 05 9E E1 EE 9A 07 17 4D 8F 46 CF 81 12 60  // .........M.F...`
    0090: DB 26 66 73 5E 52 29 84 65 4B B1 77 3B 79 04 DD  // .&fs^R).eK.w;y..
    00A0: BF 85 58 DC AF D8 22 6E F8 42 99 66 36 FF 78 8C  // ..X..."n.B.f6.x.
    00B0: 9C AF                                            // ..


VFCT
----
[000h 0000   4]                    Signature : "VFCT"    
[004h 0004   4]                 Table Length : 0000D484
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : EE
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "TP-R11  "
[018h 0024   4]                 Oem Revision : 00001100
[01Ch 0028   4]              Asl Compiler ID : "PTEC"
[020h 0032   4]        Asl Compiler Revision : 00000002


**** Unknown ACPI table signature [VFCT]


Raw Table Data: Length 54404 (0xD484)

    0000: 56 46 43 54 84 D4 00 00 01 EE 4C 45 4E 4F 56 4F  // VFCT......LENOVO
    0010: 54 50 2D 52 31 31 20 20 00 11 00 00 50 54 45 43  // TP-R11  ....PTEC
    0020: 02 00 00 00 32 9B A3 5D BD C6 CF 49 95 A6 E8 E4  // ....2..]...I....
    0030: 2E CD 79 A7 4C 00 00 00 00 00 00 00 00 00 00 00  // ..y.L...........
    0040: 00 00 00 00 00 00 00 00 00 00 00 00 05 00 00 00  // ................
    0050: 00 00 00 00 00 00 00 00 02 10 D8 15 00 00 00 00  // ................
    0060: 01 00 00 00 00 D4 00 00 55 AA 6A E9 FF 01 00 00  // ........U.j.....
    0070: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0080: B0 01 00 00 00 00 49 42 4D 14 1C 90 00 00 00 00  // ......IBM.......
    0090: 00 00 00 00 00 00 00 04 20 37 36 31 32 39 35 35  // ........ 7612955
    00A0: 32 30 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // 20..............
    00B0: 88 01 00 00 00 00 00 00 31 31 2F 30 35 2F 31 38  // ........11/05/18
    00C0: 2C 30 35 3A 32 37 3A 32 38 00 00 00 E9 ED 02 00  // ,05:27:28.......
    00D0: E9 F7 02 00 00 00 70 00 31 31 33 2D 50 49 43 41  // ......p.113-PICA
    00E0: 53 53 4F 2D 31 31 34 00 52 41 56 45 4E 00 50 43  // SSO-114.RAVEN.PC
    00F0: 49 5F 45 58 50 52 45 53 53 00 30 00 0D 0A 50 49  // I_EXPRESS.0...PI
    0100: 43 41 53 53 4F 20 47 65 6E 65 72 69 63 20 56 42  // CASSO Generic VB
    0110: 49 4F 53 20 20 20 20 20 20 20 20 20 20 20 20 20  // IOS             
    0120: 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20  //                 
    0130: 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20  //                 
    0140: 20 20 20 20 20 20 20 20 20 20 0D 0A 00 0D 0A 20  //           ..... 
    0150: 0D 0A 00 28 43 29 20 31 39 38 38 2D 32 30 31 30  // ...(C) 1988-2010
    0160: 2C 20 41 64 76 61 6E 63 65 64 20 4D 69 63 72 6F  // , Advanced Micro
    0170: 20 44 65 76 69 63 65 73 2C 20 49 6E 63 2E 00 41  //  Devices, Inc..A
    0180: 54 4F 4D 42 49 4F 53 42 4B 2D 41 4D 44 20 56 45  // TOMBIOSBK-AMD VE
    0190: 52 30 31 36 2E 30 30 32 2E 30 30 30 2E 30 31 30  // R016.002.000.010
    01A0: 2E 30 30 30 30 30 30 00 50 69 63 61 73 73 6F 47  // .000000.PicassoG
    01B0: 65 6E 65 72 00 31 37 30 32 32 30 35 31 00 34 33  // ener.17022051.43
    01C0: 34 30 34 31 20 20 00 20 20 20 20 20 20 20 20 00  // 4041  .        .
    01D0: 41 4D 44 5F 50 49 43 41 53 53 4F 5F 47 45 4E 45  // AMD_PICASSO_GENE
    01E0: 52 49 43 5C 63 6F 6E 66 69 67 2E 68 00 00 00 90  // RIC\config.h....
    01F0: 28 00 02 02 41 54 4F 4D 00 C0 FF 02 40 01 D5 01  // (...ATOM....@...
    0200: 94 00 32 03 00 00 00 00 02 10 02 10 B0 01 68 93  // ..2...........h.
    0210: 0E 94 00 00 00 00 00 00 50 43 49 52 02 10 D8 15  // ........PCIR....
    0220: 00 00 18 00 00 00 00 03 6A 00 02 10 00 80 00 00  // ........j.......
    0230: 41 4D 44 20 41 54 4F 4D 42 49 4F 53 00 2B 95 93  // AMD ATOMBIOS.+..
    0240: F5 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0250: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0260: 00 00 00 00 00 00 00 00 00 00 00 00 00 1E 06 66  // ...............f
    0270: 50 66 51 66 52 66 53 66 55 66 56 66 57 0E 1F A3  // PfQfRfSfUfVfW...
    0280: 14 00 8C 0E 08 00 B2 20 E8 2B 2F 0B C0 75 14 A2  // ....... .+/..u..
    0290: 02 00 66 5F 66 5E 66 5D 66 5B 66 5A 66 59 66 58  // ..f_f^f]f[fZfYfX
    02A0: 07 1F CB E8 45 30 E8 17 2E 32 D2 8D 3E 88 01 89  // ....E0...2..>...
    02B0: 55 16 E8 3C 11 E8 FF 10 E8 56 12 E8 AD 02 E8 60  // U..<.....V.....`
    02C0: 28 0B C0 74 0C E8 39 00 E8 0D 56 E8 FB 10 E8 5C  // (..t..9...V....\
    02D0: 56 E8 A9 00 B4 80 E8 11 2E 8A C7 66 C1 E0 10 8A  // V..........f....
    02E0: E3 B0 20 66 A3 1C 90 E8 AC 02 E8 0E 11 E8 20 30  // .. f.......... 0
    02F0: 66 5F 66 5E 66 5D 66 5B 66 5A 66 59 66 58 07 1F  // f_f^f]f[fZfYfX..
    0300: CB 2E 8B 1E 08 00 83 3E 11 03 00 75 04 89 1E 0F  // .......>...u....
    0310: 03 1E 2E 8E 1E 07 03 9C FA 66 C7 06 08 01 65 F0  // .........f....e.
    0320: 00 F0 C7 06 40 00 32 03 89 1E 42 00 C7 06 B4 01  // ....@.2...B.....
    0330: 32 03 89 1E B6 01 C7 06 7C 00 FE 5D 89 1E 7E 00  // 2.......|..]..~.
    0340: C7 06 0C 01 11 62 89 1E 0E 01 C7 06 A8 04 36 58  // .....b........6X
    0350: 89 1E AA 04 2E 8E 1E 0F 03 8B C3 A3 38 58 A3 48  // ............8X.H
    0360: 58 A3 5A 58 9D 1F C3 50 4D 49 44 32 03 5C 48 00  // X.ZX...PMID2.\H.
    0370: 00 00 A0 00 B0 00 B8 00 C0 00 00 00 00 BB 00 00  // ................
    0380: E8 61 10 66 C1 E8 10 A3 B6 01 BB 0B 00 E8 54 10  // .a.f..........T.
    0390: 8D 3E 88 01 66 89 45 18 C3 00 E8 4E 2F 80 FC A0  // .>..f.E....N/...
    03A0: 75 05 E8 3D 00 EB 11 80 FC 4F 75 05 E8 3B 44 EB  // u..=.....Ou..;D.
    03B0: 07 E8 90 49 EB 02 B4 01 E8 55 2F CF E8 2C 2F E8  // ...I.....U/..,/.
    03C0: 20 00 EB 02 B4 01 E8 47 2F CB E8 1E 2F 80 FC 4F  //  ......G/.../..O
    03D0: 75 05 E8 15 44 EB 07 E8 6A 49 EB 02 B4 01 E8 2F  // u...D...jI...../
    03E0: 2F CB 1E 06 66 50 66 51 66 52 66 53 66 55 66 56  // /...fPfQfRfSfUfV
    03F0: 66 57 0E 1F 3C 04 75 29 2E A1 1A 00 66 C1 E0 10  // fW..<.u)....f...
    0400: 2E A1 18 00 8D 36 95 00 8A 3C 80 EF 30 B3 02 8B  // .....6...<..0...
    0410: EC 89 5E 0C 89 46 04 66 C1 E8 10 89 46 00 E9 28  // ..^..F.f....F..(
    0420: 01 3C 05 75 18 E8 C2 2C E8 95 2C 2E A1 08 00 8B  // .<.u...,..,.....
    0430: EC 89 56 10 89 46 00 89 5E 04 E9 0C 01 3C 06 75  // ..V..F..^....<.u
    0440: 32 E8 88 0F 66 D1 E0 8B EC 89 46 14 BB 02 00 E8  // 2...f.....F.....
    0450: 92 0F 88 46 18 E8 7C 0F 66 89 46 0C BB 09 00 E8  // ...F..|.f.F.....
    0460: 82 0F 33 C0 66 89 46 00 2E 8B 16 B6 01 89 56 10  // ..3.f.F.......V.
    0470: E9 D6 00 3C 0B 75 24 0A DB 75 11 B9 80 00 BB 02  // ...<.u$..u......
    0480: 00 8B EC 89 5E 0C 89 4E 14 E9 BD 00 8A C7 E8 D0  // ....^..N........
    0490: 00 E8 34 01 0F 84 A9 00 E9 AE 00 3C 17 75 1D E8  // ..4........<.u..
    04A0: 2E 12 74 06 E8 8B 0D E8 16 17 E8 EE 09 E8 FA 0E  // ..t.............
    04B0: 33 C9 8B C8 8B EC 89 4E 14 E9 8D 00 3C 18 75 45  // 3......N....<.uE
    04C0: 0A FF 75 10 E8 B5 11 8B EC 89 46 0C E8 3B 0A 89  // ..u.......F..;..
    04D0: 4E 10 EB 75 E8 F9 11 75 68 BB 00 1C E8 C8 2D 66  // N..u...uh.....-f
    04E0: 0B C0 74 5D 23 C9 74 59 E8 CD 11 BE 00 1C E8 20  // ..t]#.tY....... 
    04F0: 0F 74 4E BE 00 1C B0 40 E8 6F 0F E8 7E 11 8B EC  // .tN....@.o..~...
    0500: 89 46 0C EB 44 3C 82 75 1A 80 FB 05 75 15 0A FF  // .F..D<.u....u...
    0510: 75 0A E8 C2 10 8B EC 89 46 14 EB 2D E8 8F 10 74  // u.......F..-...t
    0520: 18 EB 26 3C 8E 75 12 80 FF 01 74 08 80 FF 02 75  // ..&<.u....t....u
    0530: 08 80 C1 02 E8 E8 10 EB 10 8B EC C6 46 19 02 EB  // ............F...
    0540: 0F 8B EC C6 46 19 01 EB 07 32 E4 8B EC 88 66 19  // ....F....2....f.
    0550: 66 5F 66 5E 66 5D 66 5B 66 5A 66 59 66 58 07 1F  // f_f^f]f[fZfYfX..
    0560: C3 51 8A C8 B8 01 00 D3 E0 59 C3 E8 C8 2D C3 0C  // .Q.......Y...-..
    0570: 01 C3 50 51 B0 B6 E6 43 B0 33 E6 42 B0 05 E6 42  // ..PQ...C.3.B...B
    0580: E4 61 8A E0 0C 03 E6 61 8A C4 B9 C8 00 E8 FA 28  // .a.....a.......(
    0590: E6 61 59 58 C3 00 1E 56 0E 1F 80 3E 02 00 80 76  // .aYX...V...>...v
    05A0: 05 C6 06 02 00 80 8A 0E 02 00 C1 E1 09 FC C6 06  // ................
    05B0: 21 00 00 33 F6 32 E4 AC 02 E0 E2 FB F6 D4 FE C4  // !..3.2..........
    05C0: 88 26 21 00 5E 1F C3 00 57 0B C0 75 0F E8 2A 0C  // .&!.^...W..u..*.
    05D0: 74 25 E8 24 00 F6 C3 04 74 F3 EB 11 8B C8 E8 40  // t%.$....t......@
    05E0: 25 23 C1 74 12 E8 11 00 F6 C3 04 74 0A 5F 8D 5C  // %#.t.......t._.\
    05F0: 28 E8 4C 06 0B F6 C3 5F C3 50 E8 DF 0B E8 92 24  // (.L...._.P.....$
    0600: E8 A0 24 0A C9 74 69 0A ED 74 10 8A CD B5 02 E8  // ..$..ti..t......
    0610: FB 27 B1 02 8D 9C 48 01 E8 30 2C E8 76 02 F6 C3  // .'....H..0,.v...
    0620: 04 74 08 E8 F2 0C E8 03 23 74 45 8D 5C 28 E8 69  // .t......#tE.\(.i
    0630: 00 56 83 C6 08 E8 CF 22 5E 80 FD 02 75 11 51 E8  // .V....."^...u.Q.
    0640: 0E 18 59 80 FB 00 75 4D 51 B5 08 E8 E8 05 59 8A  // ..Y...uMQ.....Y.
    0650: DD 33 C9 E8 FF 16 0A C0 75 3B E8 37 02 8A EB 8D  // .3......u;.7....
    0660: 5C 28 80 CD 02 E8 3B 00 74 03 80 CD 04 E8 C6 05  // \(....;.t.......
    0670: 8D 9C A6 00 E8 30 2C 0A C0 74 1A 56 83 C6 08 E8  // .....0,..t.V....
    0680: 85 22 5E 8A DD B9 80 00 E8 CA 16 E8 D8 04 74 05  // ."^...........t.
    0690: 33 C9 E8 A1 05 E8 FC 01 58 C3 51 B9 49 00 E8 98  // 3.......X.Q.I...
    06A0: 27 59 C3 51 E8 1A 00 75 14 E8 B9 01 3C 01 75 0D  // 'Y.Q...u....<.u.
    06B0: B9 20 00 E8 27 00 75 05 80 C9 01 EB 02 33 C9 59  // . ..'.u......3.Y
    06C0: C3 53 E8 E2 2B 66 3D 00 FF FF FF 75 0E 83 C3 04  // .S..+f=....u....
    06D0: E8 D4 2B 66 3D FF FF FF 00 75 00 5B C3 50 52 32  // ..+f=....u.[.PR2
    06E0: D2 E8 C3 2B 02 D0 02 D4 66 C1 E8 10 02 D0 02 D4  // ...+....f.......
    06F0: 83 C3 04 E2 EC 0A D2 5A 58 C3 E8 DF 0A 8D 9C 4C  // .......ZX......L
    0700: 01 E8 39 01 E8 8D 01 B5 13 F6 C3 08 75 0C E8 07  // ..9.........u...
    0710: 0C 8A EA 80 FD 13 75 02 B5 03 66 50 8D 9C B8 02  // ......u...fP....
    0720: 66 33 C0 8A C5 E8 DF 2A 66 58 A9 C8 0E 74 55 E8  // f3.....*fX...tU.
    0730: 62 01 F6 C3 08 74 0F E8 0F 05 8D 5C 28 E8 04 01  // b....t.....\(...
    0740: 75 04 E8 72 00 C3 B5 02 E8 23 01 E8 46 01 F6 C3  // u..r.....#..F...
    0750: 04 74 21 8D 5C 28 E8 49 01 E8 94 03 74 05 B5 03  // .t!.\(.I....t...
    0760: E8 0B 01 E8 68 04 E8 21 01 80 FD 00 75 48 B5 02  // ....h..!....uH..
    0770: E8 0D 01 C3 8D 9C 68 01 B8 00 55 E8 5B 11 B5 02  // ......h...U.[...
    0780: E8 FD 00 C3 A9 02 00 74 2D B5 04 E8 E0 00 E8 03  // .......t-.......
    0790: 01 F6 C3 08 74 03 E8 B0 04 8D 9C 68 01 56 E8 CD  // ....t......h.V..
    07A0: 28 8B F7 E8 68 04 5E E8 6A 28 E8 D3 00 8D 5C 28  // (...h.^.j(....\(
    07B0: E8 8A 28 E8 18 04 C3 B5 01 E8 B2 00 B5 02 E8 BF  // ..(.............
    07C0: 00 E8 D0 00 F6 C3 04 75 10 8D 9C 68 01 B8 00 55  // .......u...h...U
    07D0: E8 06 11 B5 02 E8 17 00 C3 E8 C6 00 B5 02 8D 5C  // ...............\
    07E0: 28 E8 6E 00 75 02 B5 01 E8 04 00 E8 E0 03 C3 8D  // (.n.u...........
    07F0: 9C B4 02 B1 02 E8 53 2A B5 02 E8 83 00 C3 8D 9C  // ......S*........
    0800: 4C 01 E8 38 00 E8 8C 00 F6 C3 04 74 23 8D 5C 28  // L..8.......t#.\(
    0810: E8 8F 00 E8 58 28 8D 9C 68 01 06 0E 07 B9 07 00  // ....X(..h.......
    0820: E8 50 26 07 E8 63 00 E8 EE 0A 8D 5C 28 E8 49 28  // .P&..c.....\(.I(
    0830: 8D 5C 28 E8 E7 27 B8 02 00 E8 BE FE C3 B9 61 00  // .\(..'........a.
    0840: E8 F6 25 C3 53 81 C3 05 01 E8 5B 2A 24 06 3C 02  // ..%.S.....[*$.<.
    0850: 5B C3 E8 10 00 3D 01 04 75 0A 53 83 C3 18 E8 46  // [....=..u.S....F
    0860: 2A 5B A8 01 C3 53 83 C3 12 E8 3B 2A 5B C3 8D 9C  // *[...S....;*[...
    0870: B4 02 32 C9 E8 D4 29 C3 8D 9C B4 02 E8 28 2A C3  // ..2...)......(*.
    0880: 8D 9C B4 02 B1 01 E8 C2 29 C3 8D 9C B4 02 B1 01  // ........).......
    0890: E8 D0 29 C3 66 50 8D 9C 48 01 E8 0A 2A 8A D8 66  // ..).fP..H...*..f
    08A0: 58 C3 55 57 51 B9 08 00 BD 00 00 BB 08 00 2B D9  // X.UWQ.........+.
    08B0: D1 E3 8D 58 4E E8 EF 29 E8 E3 01 E2 EE 8D 5C 4B  // ...XN..)......\K
    08C0: E8 E4 29 B9 03 00 8B D0 BF 1A 09 85 55 06 74 17  // ..).........U.t.
    08D0: 66 8B 05 8D 9A F4 01 E8 2D 29 8B 45 04 8D 9A F8  // f.......-).E....
    08E0: 01 E8 3B 29 83 C5 08 83 C7 08 E2 DF 8D 7C 5E B9  // ..;).........|^.
    08F0: 04 00 33 ED 8B DF E8 AE 29 0B C0 74 09 E8 5D 01  // ..3.....)..t..].
    0900: E8 97 00 83 C5 1C 83 C7 12 E2 E9 55 32 ED E8 6F  // ...........U2..o
    0910: FF 8D 5C 28 E8 4E FF 3D 01 04 75 10 83 C3 14 E8  // ..\(.N.=..u.....
    0920: 85 29 24 70 C0 E8 04 8A E8 E8 54 FF 5D 8D 9C A6  // .)$p......T.]...
    0930: 00 E8 73 29 0A C0 74 46 8D 9C A8 00 E8 68 29 3C  // ..s)..tF.....h)<
    0940: 02 75 3B 66 C1 E8 10 3C 04 72 33 8D 9C A8 00 32  // .u;f...<.r3....2
    0950: E4 03 D8 8B FB B9 04 00 8B DF E8 4A 29 0B C0 74  // ...........J)..t
    0960: 15 E8 F9 00 A9 80 00 75 0D E8 2E 00 83 C5 1C 55  // .......u.......U
    0970: 58 83 F8 70 73 08 83 C7 12 49 0B C9 75 DA 59 5F  // X..ps....I..u.Y_
    0980: 5D C3 20 03 58 02 3C 00 01 00 00 04 00 03 3C 00  // ]. .X.<.......<.
    0990: 00 08 80 02 E0 01 3C 00 20 00 51 8D 1D E8 07 29  // ......<. .Q....)
    09A0: 8D 9A 68 01 E8 78 28 8D 5D 02 E8 FA 28 8D 9A 6A  // ..h..x(.]...(..j
    09B0: 01 E8 89 00 8D 5D 05 E8 ED 28 8D 9A 6E 01 E8 7C  // .....]...(..n..|
    09C0: 00 8D 5D 08 E8 E0 28 8B C8 8A DC 66 C1 C8 10 8A  // ..]...(....f....
    09D0: D0 80 E2 0F 8A F0 C0 EE 04 8A EC C0 ED 06 8A FC  // ................
    09E0: C0 EF 04 80 E7 03 80 E4 0F C0 E4 04 0A D4 80 E2  // ................
    09F0: 3F 80 E4 C0 C0 EC 02 0A F4 8B C3 8D 9A 74 01 E8  // ?............t..
    0A00: 1D 28 8D 9A 72 01 8B C1 E8 14 28 8D 9A 76 01 33  // .(..r.....(..v.3
    0A10: C0 8A C6 E8 09 28 8D 9A 78 01 33 C0 8A C2 E8 FE  // .....(..x.3.....
    0A20: 27 8D 5D 0C E8 80 28 8D 9A 7A 01 E8 0F 00 8D 5D  // '.]...(..z.....]
    0A30: 0F E8 73 28 8D 9A 7E 01 E8 E4 27 59 C3 8B C8 8A  // ..s(..~...'Y....
    0A40: D4 66 C1 C8 10 8A F0 80 E6 0F 8A E8 C0 ED 04 8B  // .f..............
    0A50: C1 E8 CB 27 83 C3 02 8B C2 E8 C3 27 C3 8D 5D 11  // ...'.......'..].
    0A60: E8 44 28 8A E0 BA 06 00 C0 E8 07 74 03 80 CA 80  // .D(........t....
    0A70: 8A C4 C0 E8 03 24 03 3C 02 75 03 80 CA 40 3C 03  // .....$.<.u...@<.
    0A80: 75 12 8A C4 D0 E8 A8 01 74 03 80 E2 FD A8 02 74  // u.......t......t
    0A90: 03 80 E2 FB 8B C2 8D 9A 80 01 E8 82 27 C3 3C 01  // ............'.<.
    0AA0: 74 3D 8B D0 0F B6 C6 24 3F 04 3C 8D 9A F8 01 E8  // t=.....$?.<.....
    0AB0: 6D 27 0F B6 C2 83 C0 1F C1 E0 03 8D 9A F4 01 E8  // m'..............
    0AC0: 5D 27 0F B6 DE C1 EB 06 C1 E3 02 2E F7 A7 7A 0A  // ]'............z.
    0AD0: 2E F7 B7 78 0A 8D 9A F6 01 E8 43 27 83 C5 08 C3  // ...x......C'....
    0AE0: 10 00 0A 00 04 00 03 00 05 00 04 00 10 00 09 00  // ................
    0AF0: 8D 9C A6 00 E8 B0 27 0A C0 74 1F 8D 9C A8 00 51  // ......'..t.....Q
    0B00: B1 03 E8 18 00 59 0B DB 74 10 E8 9A 27 32 C0 66  // .....Y..t...'2.f
    0B10: 3D 00 03 0C 00 75 03 0B DB C3 33 DB C3 66 50 52  // =....u....3..fPR
    0B20: E8 84 27 3C 02 75 39 80 FC 03 72 34 66 C1 E8 10  // ..'<.u9...r4f...
    0B30: 32 E4 3C 04 76 2A 03 C3 8B D0 83 C3 04 3B DA 73  // 2.<.v*.......;.s
    0B40: 1F E8 63 27 8A E0 80 E4 E0 C0 EC 05 24 1F 38 CC  // ..c'........$.8.
    0B50: 74 08 32 E4 FE C0 03 D8 EB E3 0B DB 5A 66 58 C3  // t.2.........ZfX.
    0B60: 33 DB 5A 66 58 C3 51 8D 9C A6 00 E8 39 27 0A C0  // 3.ZfX.Q.....9'..
    0B70: 74 1B 8D 9C A8 00 B1 12 E8 18 00 74 10 E8 27 27  // t..........t..''
    0B80: 66 C1 E0 10 80 E4 07 75 04 B0 01 EB 02 32 C0 0A  // f......u.....2..
    0B90: C0 59 C3 66 50 52 E8 0E 27 3C 70 75 2B 66 C1 E8  // .Y.fPR..'<pu+f..
    0BA0: 10 32 E4 83 C3 05 03 C3 8B D0 3B DA 73 1A E8 F6  // .2........;.s...
    0BB0: 26 38 C8 74 0D 66 C1 E8 10 32 E4 83 C0 03 03 D8  // &8.t.f...2......
    0BC0: EB E8 0B DB 5A 66 58 C3 33 DB 5A 66 58 C3 57 66  // ....ZfX.3.ZfX.Wf
    0BD0: 51 8D 9C 68 01 8B FB 8B DF E8 3D 00 0B C9 74 0B  // Q..h......=...t.
    0BE0: 66 8B D1 E8 A1 0F 83 C7 1C EB EC 66 59 5F C3 50  // f..........fY_.P
    0BF0: 53 51 B9 07 00 53 8B DA E8 AC 26 83 F8 00 5B 74  // SQ...S....&...[t
    0C00: 09 66 C1 E3 10 8B DA E8 44 22 59 5B 58 C3 51 53  // .f......D"Y[X.QS
    0C10: B9 07 00 E8 51 22 5B 59 C3 66 50 53 83 C3 06 E8  // ....Q"[Y.fPS....
    0C20: 85 26 5B 8B C8 66 C1 E1 10 53 83 C3 02 E8 77 26  // .&[..f...S....w&
    0C30: 8B C8 5B 66 58 C3 8D 9C 48 01 32 C9 E8 0C 26 C3  // ..[fX...H.2...&.
    0C40: 57 B9 20 00 E8 2C 22 5F C3 E8 83 01 66 8B CA 66  // W. ..,"_....f..f
    0C50: 52 E8 C4 06 E8 D5 1C 66 5A 74 10 E8 3A 06 B3 00  // R......fZt..:...
    0C60: E8 82 19 66 3B CA 73 03 66 8B D1 8D 9C D0 03 E8  // ...f;.s.f.......
    0C70: 35 26 0B C0 75 44 8D 9C 54 02 66 B8 48 3F 00 00  // 5&..uD..T.f.H?..
    0C80: E8 84 25 B5 01 66 81 FA 78 69 00 00 72 25 83 C3  // ..%..f..xi..r%..
    0C90: 04 66 B8 78 69 00 00 E8 6D 25 B5 02 66 81 FA F0  // .f.xi...m%..f...
    0CA0: D2 00 00 72 0E 83 C3 04 66 B8 F0 D2 00 00 E8 56  // ...r....f......V
    0CB0: 25 B5 03 B1 03 E8 CF 01 EB 45 66 B9 08 00 00 00  // %........Ef.....
    0CC0: 66 33 D2 53 8D 9C 54 02 8B D3 5B E8 D9 25 0B C0  // f3.S..T...[..%..
    0CD0: 74 22 66 25 FF FF 00 00 66 D1 E0 53 8B DA E8 26  // t"f%....f..S...&
    0CE0: 25 5B 66 C1 CA 10 FE C2 66 C1 CA 10 83 C2 04 83  // %[f.....f.......
    0CF0: C3 02 E2 D7 66 C1 CA 10 8A EA B1 03 E8 88 01 E8  // ....f...........
    0D00: 38 06 A8 01 74 3F 8D 9C AE 03 E8 9A 25 3C 00 74  // 8...t?......%<.t
    0D10: 34 E8 CF 05 8A EB E8 5C 01 32 ED E8 63 01 E8 A2  // 4......\.2..c...
    0D20: 05 8D 9C BB 02 E8 7F 25 33 C9 8A C8 E8 28 01 66  // .......%3....(.f
    0D30: 3B C2 74 0E 51 E8 43 01 FE C5 E8 44 01 59 E2 EC  // ;.t.Q.C....D.Y..
    0D40: EB 03 B3 00 C3 8D 9C BB 02 E8 5B 25 FE C8 8A E8  // ..........[%....
    0D50: E8 2E 01 8D 9C 40 03 B9 00 00 E8 EE 24 E8 C2 02  // .....@......$...
    0D60: E8 D2 00 E8 0F 01 66 52 E8 AD 05 E8 BE 1B 66 5A  // ......fR......fZ
    0D70: 75 04 B3 00 EB 58 E8 F6 00 80 FD 01 77 07 E8 FA  // u....X......w...
    0D80: 00 0A ED 74 47 E8 1E 03 E8 32 11 80 FB 00 75 1D  // ...tG....2....u.
    0D90: E8 A7 05 A8 01 74 07 B1 0D E8 2B 19 EB 30 B5 01  // .....t....+..0..
    0DA0: E8 9E 05 E8 2F 0F B5 00 E8 96 05 EB 21 E8 BF 00  // ..../.......!...
    0DB0: 80 FD 01 76 07 D0 ED E8 BB 00 EB BA E8 76 00 E8  // ...v.........v..
    0DC0: B3 00 E8 B6 00 FE CD E8 B7 00 EB AA B3 08 C3 8D  // ................
    0DD0: 9C 29 01 E8 D1 24 66 33 D2 8A D0 66 B8 8C 0A 00  // .)...$f3...f....
    0DE0: 00 66 F7 E2 E8 31 05 E8 42 1B 75 3D 66 50 8D 9C  // .f...1..B.u=fP..
    0DF0: 28 01 E8 B2 24 3C 14 66 58 72 2E 66 50 8D 9C D0  // (...$<.fXr.fP...
    0E00: 03 E8 A3 24 0B C0 66 58 74 1F B9 08 00 8D 9C D0  // ...$..fXt.......
    0E10: 03 8B C1 D1 E0 03 D8 E8 8D 24 0B C0 75 02 E2 ED  // .........$..u...
    0E20: 66 25 FF FF 00 00 66 D1 E0 66 0B C0 75 03 B8 48  // f%....f..f..u..H
    0E30: 3F 66 8B D0 C3 8D 9C 2A 01 E8 6B 24 24 0F 8A E8  // ?f.....*..k$$...
    0E40: 0A ED 75 02 B5 01 C3 B5 00 8D 9C 31 01 E8 57 24  // ..u........1..W$
    0E50: A8 01 74 02 B5 01 C3 53 51 E8 1F 00 32 E4 8A C5  // ..t....SQ...2...
    0E60: C1 E0 02 59 8D 9C 54 02 03 D8 E8 3A 24 5B C3 B1  // ...Y..T....:$[..
    0E70: 02 E8 1D 00 C3 B1 02 E8 0D 00 C3 B1 01 E8 11 00  // ................
    0E80: C3 B1 01 E8 01 00 C3 53 8D 9C B8 02 E8 BC 23 5B  // .......S......#[
    0E90: C3 53 8D 9C B8 02 E8 CA 23 5B C3 33 C9 E8 63 20  // .S......#[.3..c 
    0EA0: 75 3C 66 BA 37 F1 FF FF 66 33 C0 E8 E3 04 33 C0  // u<f.7...f3....3.
    0EB0: E8 47 03 74 1C A9 C8 0E 74 F6 E8 3C F7 F6 C3 04  // .G.t....t..<....
    0EC0: 75 05 F6 C3 18 74 E9 E8 30 00 50 E8 2C F8 58 EB  // u....t..0.P.,.X.
    0ED0: DF E8 1C 00 75 08 E8 31 00 8B C1 E8 1C F8 C3 8D  // ....u..1........
    0EE0: 5D 28 66 C1 E3 10 8D 5C 28 B9 49 00 E8 5F 1F C3  // ](f....\(.I.._..
    0EF0: 66 50 E8 B5 04 8B C8 66 58 C3 66 52 66 BA FF FF  // fP.....fX.fRf...
    0F00: FF FF 33 D0 E8 8A 04 66 5A C3 50 53 52 E8 E0 FF  // ..3....fZ.PSR...
    0F10: 75 09 33 C0 E8 E3 02 8B C8 EB 10 83 F9 02 74 0B  // u.3...........t.
    0F20: E8 2C 08 80 FB 01 75 03 83 E1 FD 5A 5B 58 C3 56  // .,....u....Z[X.V
    0F30: 66 33 C0 66 BA 00 F0 FF FF E8 4F 07 66 C1 E6 10  // f3.f......O.f...
    0F40: E8 C4 02 0B C0 74 03 E8 1C 00 E8 2F 07 5E C3 66  // .....t...../.^.f
    0F50: 52 66 8B D0 E8 CA 15 8D 9C 1C 03 E8 49 23 8A C2  // Rf..........I#..
    0F60: E8 A4 22 66 5A C3 50 51 E8 71 02 50 32 C0 E8 00  // .."fZ.PQ.q.P2...
    0F70: 04 E8 CC 01 E8 98 00 8D 9C 40 03 E8 29 23 38 E8  // .........@..)#8.
    0F80: 74 0A 8A C5 E8 80 22 B0 02 E8 E5 03 58 E8 CA 00  // t.....".....X...
    0F90: E8 A8 00 E8 8C 00 8D 9C 4C 01 E8 0A 23 8B C8 8B  // ........L...#...
    0FA0: D3 8D 9C 00 03 E8 FF 22 3B C1 74 05 B0 02 E8 C0  // .......";.t.....
    0FB0: 03 E8 3B FC 8D 9C 00 03 E8 43 15 8D 9C D8 02 E8  // ..;......C......
    0FC0: 45 22 E8 8A FF 66 C1 CE 10 8B FE 66 C1 CE 10 E8  // E"...f.....f....
    0FD0: 95 00 E8 D1 00 E8 24 03 8A E9 8D 9C DC 02 32 C9  // ......$.......2.
    0FE0: E8 68 22 E8 0D 03 66 25 FF 0F 00 00 59 58 66 BA  // .h"...f%....YXf.
    0FF0: FF FF FF FF 33 D0 E8 92 06 33 D2 C3 53 66 50 8D  // ....3....3..SfP.
    1000: 9C D4 02 E8 A1 22 8A C4 E8 FC 21 66 58 5B C3 53  // ....."....!fX[.S
    1010: 66 50 8D 9C D4 02 E8 8E 22 8A E0 E8 E9 21 66 58  // fP......"....!fX
    1020: 5B C3 E8 73 02 E8 2E 02 8A DD E8 7F 16 8A E9 8D  // [..s............
    1030: 9C 3C 03 32 C9 E8 13 22 0B DB C3 83 EC 08 8B EC  // .<.2..."........
    1040: E8 55 02 E8 10 02 E8 05 16 8D 9C 4C 03 E8 57 22  // .U.........L..W"
    1050: 8A 46 00 E8 B1 21 83 C4 08 C3 8D 9C D4 02 E8 46  // .F...!.........F
    1060: 22 32 C0 E8 A1 21 C3 E8 0A 00 8D 9C D0 02 32 C9  // "2...!........2.
    1070: E8 D8 21 C3 B5 00 8D 1D E8 2C 22 66 8B D0 8D 9C  // ..!......,"f....
    1080: 02 03 E8 22 22 0B C0 74 1C 51 8B C8 8D 9C 06 03  // ...""..t.Q......
    1090: E8 14 22 66 C1 E0 10 8B C1 59 66 3B C2 75 04 B5  // .."f.....Yf;.u..
    10A0: 00 EB 02 B5 02 C3 E8 2B 02 8D 9C 40 03 B1 03 E8  // .......+...@....
    10B0: 99 21 E8 D5 F7 8D 9C 40 03 B1 02 E8 8D 21 E8 95  // .!.....@.....!..
    10C0: 01 80 FD 00 75 14 E8 A6 FD E8 8E 02 E8 88 FD 66  // ....u..........f
    10D0: 8B D0 E8 77 02 E8 8E 02 EB 21 E8 4A 02 E8 6C 02  // ...w.....!.J..l.
    10E0: E8 73 01 80 FD 02 B5 04 75 0B 81 FA 74 40 76 05  // .s......u...t@v.
    10F0: B5 08 66 D1 EA E8 6E 02 E8 5F 02 E8 2B 00 C3 66  // ..f...n.._..+..f
    1100: 52 52 32 ED 83 C1 02 B8 06 00 F7 E1 66 33 C9 8B  // RR2.........f3..
    1110: C8 5A 51 66 8B C2 8A CF 66 F7 E1 66 C1 E0 03 59  // .ZQf....f..f...Y
    1120: 66 F7 F1 66 8B C8 66 5A C3 B5 00 E8 EA 01 E8 F7  // f..f..fZ........
    1130: 17 75 03 E8 11 FD 8D 9C 48 03 32 C9 E8 0C 21 C3  // .u......H.2...!.
    1140: 53 E8 5F 01 66 C1 E2 10 E8 4D 01 8D 9C B8 02 E8  // S._.f....M......
    1150: 55 21 8A E8 8D 9C B4 02 E8 4C 21 8A C8 E8 A6 14  // U!.......L!.....
    1160: 8A EB 5B C3 57 53 53 E8 D6 FF E8 2B 01 5B E8 0B  // ..[.WSS....+.[..
    1170: 15 74 66 80 FD 00 75 29 53 E8 DB FC 66 8B D0 E8  // .tf...u)S...f...
    1180: 08 F7 8A CD 51 E8 E7 FC 8A FD 59 E8 71 FF 5B E8  // ....Q.....Y.q.[.
    1190: 15 21 66 25 FF FF 00 00 66 3B C8 73 39 32 DB EB  // .!f%....f;.s92..
    11A0: 38 80 FD 02 75 16 E8 6F 01 E8 8D 17 74 28 8D 1F  // 8...u..o....t(..
    11B0: E8 F4 20 3D 74 40 76 1E 32 DB EB 1D 80 FD 03 75  // .. =t@v.2......u
    11C0: 15 53 E8 D3 00 B3 03 E8 1B 14 5B E8 D9 20 3B C2  // .S........[.. ;.
    11D0: 76 04 32 DB EB 03 80 CB 01 5B 5F C3 53 8B F0 E8  // v.2......[_.S...
    11E0: 3F 19 23 F0 74 09 8B C6 E8 DE 17 8B F3 0B DB 5B  // ?.#.t..........[
    11F0: C3 51 E8 15 FD E8 0F 00 59 C3 51 50 E8 22 19 8B  // .Q......Y.QP."..
    1200: C8 58 E8 02 00 59 C3 57 53 E8 EC 1A 0B C0 74 09  // .X...Y.WS.....t.
    1210: 8B 1D 83 C7 02 3B C3 75 F7 8B 1D 83 FB FF 74 0B  // .....;.u......t.
    1220: 83 C7 02 85 D9 74 F2 8B C3 EB 02 33 C0 0B C0 5B  // .....t.....3...[
    1230: 5F C3 33 C0 E8 C3 FF 74 13 E8 A0 FF 8B DE B9 FB  // _.3....t........
    1240: 00 E8 F5 1B 83 C6 08 E8 87 18 EB E8 BB F0 16 B8  // ................
    1250: 5A A5 E8 CA 1F C3 53 66 50 8D 9C 40 03 E8 47 20  // Z.....SfP..@..G 
    1260: 8A E8 66 58 5B C3 8D 9C 69 03 E8 3A 20 C3 8D 9C  // ..fX[...i..: ...
    1270: 64 03 E8 32 20 0B C0 C3 53 66 50 8D 9C D4 02 E8  // d..2 ...SfP.....
    1280: 25 20 8A C8 66 58 5B C3 53 66 50 8D 9C D5 02 E8  // % ..fX[.SfP.....
    1290: 15 20 8A C8 66 58 5B C3 53 8D 5C 14 E8 08 20 8B  // . ..fX[.S.\... .
    12A0: D0 5B C3 53 66 50 8D 5C 16 E8 FB 1F 8B D0 66 58  // .[.SfP.\......fX
    12B0: 5B C3 53 66 50 8D 9C 50 03 E8 EB 1F 66 8B D0 66  // [.SfP..P....f..f
    12C0: 58 5B C3 53 66 50 8D 9C 54 03 E8 DA 1F 66 8B D0  // X[.SfP..T....f..
    12D0: 66 58 5B C3 53 66 50 8D 5C 10 E8 CA 1F 8B C8 66  // fX[.SfP.\......f
    12E0: 58 5B C3 66 50 53 8D 9C 41 03 E8 BA 1F 5B 8A D8  // X[.fPS..A....[..
    12F0: 66 58 C3 53 8D 5C 08 E8 AD 1F 5B C3 53 50 8D 9C  // fX.S.\....[.SP..
    1300: 4C 03 E8 A2 1F 8A C8 58 5B C3 53 50 8D 9C 4D 03  // L......X[.SP..M.
    1310: E8 94 1F 8A C8 58 5B C3 53 66 50 8D 5C 0C E8 86  // .....X[.SfP.\...
    1320: 1F 8B D0 66 58 5B C3 53 66 50 8D 9C 00 03 E8 76  // ...fX[.SfP.....v
    1330: 1F 66 33 D2 8B D0 66 58 5B C3 8D 5C 04 E8 67 1F  // .f3...fX[..\..g.
    1340: C3 51 8D 5C 04 32 C9 E8 01 1F 59 C3 8D 9C 50 03  // .Q.\.2....Y...P.
    1350: E8 54 1F 66 8B C2 E8 AE 1E C3 53 8D 9C 40 03 B1  // .T.f......S..@..
    1360: 01 E8 E7 1E 5B C3 8D 9C 54 03 66 8B C2 E8 97 1E  // ....[...T.f.....
    1370: C3 53 51 8A E8 E8 C2 FF 24 FD 0A E8 E8 C2 FF 59  // .SQ.....$......Y
    1380: 5B C3 66 50 8D 9C D8 02 E8 1C 1F 66 8B D0 66 58  // [.fP.......f..fX
    1390: C3 53 66 50 51 66 8B C8 BB 00 00 E8 0C 16 23 C2  // .SfPQf........#.
    13A0: 0B C1 E8 0E 16 59 66 58 5B C3 BB 00 00 E8 FA 15  // .....YfX[.......
    13B0: 66 25 CA 0E 00 00 C3 E8 3D 1A E8 B5 19 E8 93 19  // f%......=.......
    13C0: 75 06 E8 6E 17 E8 97 19 C3 B0 01 C3 55 B3 01 E8  // u..n........U...
    13D0: C8 1C 5D C3 66 53 66 BB 04 00 00 00 E8 05 00 33  // ..].fSf........3
    13E0: C0 66 5B C3 55 66 C1 E3 10 BB 00 00 E8 AB 1C 5D  // .f[.Uf.........]
    13F0: C3 E8 FC 1A BB 0A 00 E8 B9 15 C3 BB 0A 00 E8 A9  // ................
    1400: 15 66 8B C8 E8 E9 1A BB 0A 00 66 2B C1 E8 A3 15  // .f........f+....
    1410: C3 E8 29 00 0B C9 74 22 E8 14 FB E8 2E 07 66 51  // ..)...t"......fQ
    1420: 66 8B C8 BB 07 00 E8 81 15 66 25 00 FE 00 00 66  // f........f%....f
    1430: 0B C1 E8 7E 15 66 59 0C 01 C3 32 C0 C3 E8 68 02  // ...~.fY...2...h.
    1440: 0B C9 75 06 E8 C3 FA E8 6E 02 51 E8 BC FA 66 C1  // ..u.....n.Q...f.
    1450: E6 10 33 C0 E8 9A FD 74 09 E8 13 03 75 F6 33 C8  // ..3....t....u.3.
    1460: EB F2 58 23 C8 66 C1 EE 10 C3 A8 10 75 63 E8 ED  // ..X#.f......uc..
    1470: 06 66 C1 E6 10 33 C0 E8 80 FD 74 35 E8 5D FD 50  // .f...3....t5.].P
    1480: 51 8B C8 E8 F6 01 85 C1 59 58 74 0D 50 E8 AA FE  // Q.......YXt.P...
    1490: 24 03 3C 03 58 75 E0 EB 0C 50 E8 9D FE A8 01 58  // $.<.Xu...P.....X
    14A0: 74 D5 E8 6A FB 50 E8 D7 07 58 B5 00 E8 92 FE EB  // t..j.P...X......
    14B0: C6 E8 C8 01 E8 25 FD E8 31 01 B1 00 E8 4B 07 66  // .....%..1....K.f
    14C0: C1 EE 10 E8 91 06 A8 20 75 42 A8 40 75 03 E8 07  // ....... uB.@u...
    14D0: 0E E8 78 06 0A C0 75 07 32 C9 B5 01 E8 AA 0E E8  // ..x...u.2.......
    14E0: 9A 01 E8 F7 FC E8 30 FE E8 41 14 75 14 E8 5F 02  // ......0..A.u.._.
    14F0: 0A DB 74 0D E8 18 FB E8 86 07 B5 00 E8 42 FE EB  // ..t..........B..
    1500: 08 E8 63 07 B5 01 E8 38 FE E8 E3 00 C3 E8 11 16  // ..c....8........
    1510: C3 E8 1E FD E8 A9 06 33 C9 E8 9C 01 66 33 D2 66  // .......3....f3.f
    1520: 33 C0 E8 6C FE E8 4F 00 B1 FF E8 81 00 33 C0 E8  // 3..l..O......3..
    1530: C8 FC 74 0A E8 A5 FC 50 E8 CF 07 58 EB F1 32 C9  // ..t....P...X..2.
    1540: E8 C1 01 E8 DB 15 0B C0 C3 E8 E6 FC E8 71 06 66  // .............q.f
    1550: 33 C0 66 BA 00 F0 FF FF E8 30 01 51 B1 01 E8 89  // 3.f......0.Q....
    1560: 01 59 33 C0 E8 93 FC 74 0A E8 70 FC 50 E8 65 07  // .Y3....t..p.P.e.
    1570: 58 EB F1 E8 9F 0D C3 B8 02 00 E8 5F FC 74 2E B1  // X.........._.t..
    1580: 07 E8 E4 11 B8 02 00 E8 6F F0 F6 C3 04 75 12 E8  // ........o....u..
    1590: DC 1A 83 3D 00 75 0A E8 87 15 83 E0 FD E8 8A 15  // ...=.u..........
    15A0: C3 66 B8 02 00 00 00 E8 E7 FD E8 51 F2 C3 E8 0B  // .f.........Q....
    15B0: 14 74 23 38 E1 76 04 8A CC EB 06 38 C1 73 02 8A  // .t#8.v.....8.s..
    15C0: C8 BB 02 00 E8 E3 13 8A E1 E8 E7 13 B1 04 E8 97  // ................
    15D0: 11 0C 01 C3 0C 01 C3 51 E8 E1 13 74 0C 8A CC BB  // .......Q...t....
    15E0: 02 00 E8 C5 13 8A C4 8A E1 59 C3 E8 FE 05 C3 E8  // .........Y......
    15F0: 09 06 C3 E8 0D 19 75 18 E8 81 00 E8 DE FB 80 F9  // ......u.........
    1600: 01 75 0E 51 E8 60 06 B5 01 E8 35 FD 59 E8 DF FF  // .u.Q.`....5.Y...
    1610: C3 E8 D7 FF 51 E8 BD 06 B5 00 E8 24 FD 59 C3 B8  // ....Q......$.Y..
    1620: 02 00 E8 B7 FB 74 03 E8 3E 11 C3 E8 BD 04 3B C1  // .....t..>.....;.
    1630: 7C 3A 8B C1 E8 FD 04 E8 B5 0E 8B C8 51 E8 2D 05  // |:..........Q.-.
    1640: E8 F1 04 59 E8 A8 0E 3B C8 72 02 8B C1 8D 5C 04  // ...Y...;.r....\.
    1650: E8 CC 1B 32 C9 B5 0F E8 F3 0C E8 D3 17 FE C1 38  // ...2...........8
    1660: C1 72 F2 8D 5C 04 E8 3E 1C 0B C0 C3 33 C0 C3 BB  // .r..\..>....3...
    1670: 00 18 33 C0 8A C2 C1 E0 02 03 D8 C3 53 BB 03 00  // ..3.........S...
    1680: E8 27 13 66 25 FF 0F 00 00 5B C3 53 66 50 66 51  // .'.f%....[.SfPfQ
    1690: 66 8B C8 BB 03 00 E8 11 13 66 23 C2 66 0B C1 E8  // f........f#.f...
    16A0: 11 13 66 59 66 58 5B C3 66 50 BB 05 00 E8 FA 12  // ..fYfX[.fP......
    16B0: 25 FF 0F 8B C8 66 58 C3 E8 66 14 23 C8 66 50 BB  // %....fX..f.#.fP.
    16C0: 05 00 E8 E5 12 25 00 F0 0B C1 E8 E6 12 66 58 C3  // .....%.......fX.
    16D0: 66 50 53 BB 06 00 E8 D1 12 A8 10 75 09 BB F0 16  // fPS........u....
    16E0: E8 C4 1B 3D 5A A5 5B 66 58 C3 66 50 53 BB 06 00  // ...=Z.[fX.fPS...
    16F0: E8 B7 12 80 F1 01 C0 E1 04 24 EF 0A C1 E8 B3 12  // .........$......
    1700: 5B 66 58 C3 53 66 50 BB F8 16 E8 9A 1B 8A C1 E8  // [fX.SfP.........
    1710: F5 1A 66 58 5B C3 53 BB F8 16 E8 8A 1B 83 E0 01  // ..fX[.S.........
    1720: 5B C3 53 66 50 BB 07 00 E8 7F 12 F6 C4 01 66 58  // [.SfP.........fX
    1730: B0 06 74 02 B0 08 5B C3 53 BB 07 00 E8 6B 12 80  // ..t...[.S....k..
    1740: E4 FE 80 FD 06 74 03 80 CC 01 E8 66 12 5B C3 66  // .....t.....f.[.f
    1750: 50 BB 06 00 E8 53 12 24 40 C0 E8 06 8A D8 66 58  // P....S.$@.....fX
    1760: C3 B3 81 E8 29 19 75 04 83 C8 01 C3 33 C0 C3 50  // ....).u.....3..P
    1770: 66 51 E8 67 FA 83 EC 04 8B EC 66 33 C0 66 89 46  // fQ.g......f3.f.F
    1780: 00 33 D2 8D BC 68 01 8D 1D E8 1B 1B 0B C0 74 22  // .3...h........t"
    1790: 8B DF B0 00 E8 12 01 74 14 8B DF E8 7B F4 66 8B  // .......t....{.f.
    17A0: 46 00 66 3B C8 72 06 8B D7 66 89 4E 00 83 C7 1C  // F.f;.r...f.N....
    17B0: EB D5 0B D2 74 0A 8D 9C 4C 01 E8 32 F4 E9 88 00  // ....t...L..2....
    17C0: 66 33 C0 66 89 46 00 8D BC F4 01 33 D2 8D 1D E8  // f3.f.F.....3....
    17D0: D5 1A 0B C0 74 58 66 50 E8 9D F0 3C 01 66 58 74  // ....tXfP...<.fXt
    17E0: 05 3D 40 06 73 43 66 52 66 8B D0 8D 5D 04 E8 B6  // .=@.sCfRf...]...
    17F0: 1A E8 5D 00 8B CA 66 5A 74 2F 56 8D 9C 4C 01 8B  // ..]...fZt/V..L..
    1800: F1 E8 0A F4 5E B0 00 E8 9F 00 74 1D 8D 1D E8 96  // ....^.....t.....
    1810: 1A 8B D9 8B 47 06 66 C1 E0 10 8B 47 02 66 3B 46  // ....G.f....G.f;F
    1820: 00 72 06 8B D1 66 89 46 00 83 C7 08 EB 9F 0B D2  // .r...f.F........
    1830: 74 16 56 8D 9C 4C 01 8B F2 E8 D2 F3 5E 53 8D 9C  // t.V..L......^S..
    1840: 62 01 33 C0 E8 D8 19 5B 83 C4 04 0B D2 66 59 58  // b.3....[.....fYX
    1850: C3 57 53 51 E8 C8 14 3B 55 02 75 18 66 C1 CA 10  // .WSQ...;U.u.f...
    1860: 8B DA 66 C1 CA 10 3B 5D 06 75 09 0A C0 74 0E 3A  // ..f...;].u...t.:
    1870: 45 1B 74 09 83 C7 1C E2 DE 33 D2 EB 02 8B D7 0B  // E.t......3......
    1880: D2 59 5B 5F C3 51 66 52 E8 94 14 3A 65 1A 75 09  // .Y[_.QfR...:e.u.
    1890: 0A C0 74 0E 3A 45 1B 74 09 83 C7 1C E2 ED 33 FF  // ..t.:E.t......3.
    18A0: EB 00 0B FF 66 5A 59 C3 C3 66 51 66 52 53 53 66  // ....fZY..fQfRSSf
    18B0: C1 CE 10 8B DE 66 C1 CE 10 E8 EB 19 5B 66 8B D0  // .....f......[f..
    18C0: E8 56 F3 3B CA 72 0A 66 3B CA 72 05 E8 95 F8 75  // .V.;.r.f;.r....u
    18D0: 02 32 C0 5B 66 5A 66 59 C3 56 57 E8 A7 FF 8B F7  // .2.[fZfY.VW.....
    18E0: E8 2B F3 5F 5E C3 66 50 53 66 51 52 57 56 51 8B  // .+._^.fPSfQRWVQ.
    18F0: DE B9 08 00 E8 42 15 59 8D 5C 08 8B C1 66 C1 E0  // .....B.Y.\...f..
    1900: 10 8A C2 E8 01 19 F6 C2 03 75 24 8B C1 24 7F BF  // .........u$..$..
    1910: C9 19 80 3D FF 0F 84 0F 01 3A 05 75 0D 66 8B 45  // ...=.....:.u.f.E
    1920: 01 66 B9 00 05 02 00 E9 96 00 83 C7 05 EB E3 F6  // .f..............
    1930: C2 01 74 25 8B C1 E8 70 01 0F 84 EB 00 33 C9 8A  // ..t%...p.....3..
    1940: CC 8A D0 0A C0 75 12 8D 5C 08 66 25 FF FF 00 00  // .....u..\.f%....
    1950: 66 C1 E0 08 E8 B0 18 EB B2 8A E1 8A CA 80 E1 0C  // f...............
    1960: C0 E9 02 80 E2 F0 C0 EA 04 8A EA 80 FC 70 72 2A  // .............pr*
    1970: 80 FC 75 73 25 80 EC 70 8A C4 32 E4 50 E8 30 02  // ..us%..p..2.P.0.
    1980: 8B D8 58 38 D8 72 05 33 C0 E9 9C 00 E8 28 02 E8  // ..X8.r.3.....(..
    1990: 15 19 0B C0 0F 84 90 00 EB 1B 32 C0 E8 E6 FE 0F  // ..........2.....
    19A0: 84 85 00 8D 5C 16 8B 05 E8 74 18 8B 45 06 66 C1  // ....\....t..E.f.
    19B0: E0 10 8B 45 02 50 E8 36 0B 66 C1 E1 10 8B C8 58  // ...E.P.6.f.....X
    19C0: 8D 1C E8 42 18 66 50 8D 5C 04 66 8B C1 E8 37 18  // ...B.fP.\.f...7.
    19D0: 66 58 66 C1 E8 10 66 81 E1 FF FF 00 00 66 F7 E1  // fXf...f......f..
    19E0: 66 50 8D 5C 06 E8 BF 18 8B C8 66 58 66 D3 E0 66  // fP.\......fXf..f
    19F0: C1 E8 10 40 8D 5C 14 E8 25 18 BF 29 1A 83 F9 01  // ...@.\..%..)....
    1A00: 74 11 BF 31 1A 81 F9 01 01 74 08 BF 39 1A 83 F9  // t..1.....t..9...
    1A10: 02 75 15 8D 5C 0C 66 8B 05 E8 EB 17 8D 5C 10 66  // .u..\.f......\.f
    1A20: 8B 45 04 E8 E1 17 0B DB 5E 5F 5A 66 59 5B 66 58  // .E......^_ZfY[fX
    1A30: C3 00 40 01 90 01 01 40 01 90 01 02 80 02 90 01  // ..@....@........
    1A40: 03 80 02 90 01 04 40 01 90 01 05 40 01 90 01 06  // ......@....@....
    1A50: 80 02 90 01 07 D0 02 5E 01 0D 40 01 90 01 0E 80  // .......^..@.....
    1A60: 02 90 01 0F 80 02 5E 01 10 80 02 5E 01 11 80 02  // ......^....^....
    1A70: E0 01 12 80 02 E0 01 13 80 02 90 01 23 20 04 90  // ............# ..
    1A80: 01 32 20 04 B0 02 33 20 04 C0 02 62 80 02 E0 01  // .2 ...3 ...b....
    1A90: FF 05 0A 05 05 05 00 00 00 05 0B 06 05 05 00 00  // ................
    1AA0: 00 08 10 08 08 08 00 00 00 56 E8 58 15 80 E4 01  // .........V.X....
    1AB0: 3B 04 74 09 83 C6 04 E2 F7 33 C0 EB 05 8B 44 02  // ;.t......3....D.
    1AC0: 0B C0 5E C3 57 53 50 E8 3B 15 83 E9 0A E8 E0 00  // ..^.WSP.;.......
    1AD0: 83 F8 05 76 03 B8 05 00 D1 E0 03 C8 FB A5 83 C6  // ...v............
    1AE0: 02 E2 FA B8 FF FF AB 58 5B 5F C3 66 53 51 66 52  // .......X[_.fSQfR
    1AF0: E8 41 00 E8 77 00 66 C1 E8 10 66 0F B7 D8 66 B8  // .A..w.f...f...f.
    1B00: 00 00 00 03 66 D3 E8 66 33 D2 66 F7 F3 E8 DF 09  // ....f..f3.f.....
    1B10: 66 5A 59 66 5B C3 53 66 50 BB 07 00 E8 8B 0E 0A  // fZYf[.SfP.......
    1B20: C0 66 58 5B C3 53 66 50 BB 07 00 E8 7C 0E A8 01  // .fX[.SfP....|...
    1B30: 66 58 5B C3 53 66 50 8D 5C 06 E8 6A 17 8A C8 66  // fX[.SfP.\..j...f
    1B40: 58 5B C3 51 B9 08 00 E8 04 13 59 C3 53 8D 5C 08  // X[.Q......Y.S.\.
    1B50: E8 54 17 24 03 5B C3 8D 5C 09 E8 4A 17 C3 51 53  // .T.$.[..\..J..QS
    1B60: B1 01 8A E8 8D 5C 08 E8 E1 16 5B 59 C3 53 8D 1C  // .....\....[Y.S..
    1B70: E8 34 17 5B C3 53 8D 5C 04 E8 2B 17 5B C3 53 8D  // .4.[.S.\..+.[.S.
    1B80: 5C 16 E8 22 17 5B C3 53 66 52 33 C0 E8 C2 FC 66  // \..".[.SfR3....f
    1B90: 5A 75 1B E8 34 00 74 16 E8 15 00 40 83 F8 05 73  // Zu..4.t....@...s
    1BA0: 0D E8 63 16 48 E8 0F 00 66 8B C2 E8 59 16 5B C3  // ..c.H...f...Y.[.
    1BB0: BB 00 1E E8 F1 16 C3 BB 08 1E C1 E0 03 03 D8 C3  // ................
    1BC0: BB 00 1E B9 32 00 E8 70 12 C3 51 E8 E2 FF 0B C0  // ....2..p..Q.....
    1BD0: 74 12 8B C8 BB 08 1E E8 CD 16 66 3B C2 74 07 83  // t.........f;.t..
    1BE0: C3 08 E2 F3 0B DB 59 C3 C3 00 C3 00 BB 20 DF E8  // ......Y...... ..
    1BF0: 63 36 E8 83 F6 B5 01 E8 D3 07 C3 BB 00 DF E8 54  // c6.............T
    1C00: 36 E8 74 F6 B5 00 E8 C4 07 C3 80 F9 00 75 0A E8  // 6.t..........u..
    1C10: 24 12 8A C8 B5 02 E8 0B 09 0B F6 74 2E E8 58 F6  // $..........t..X.
    1C20: B5 01 51 E8 AE 07 59 E8 B1 07 56 33 F6 B5 00 E8  // ..Q...Y...V3....
    1C30: 1B 07 5E B5 01 E8 C4 F6 E8 E9 08 E8 A6 09 E8 37  // ..^............7
    1C40: F6 8D 9C 00 03 E8 9A 07 E8 E3 07 66 C1 CE 10 B5  // ...........f....
    1C50: 01 E8 F9 06 E8 00 FF A8 40 75 07 32 C0 B5 01 E8  // ........@u.2....
    1C60: 6C 08 66 C1 CE 10 C3 E8 0E F6 B5 01 E8 39 07 B5  // l.f..........9..
    1C70: 00 E8 67 07 E8 CA 07 B1 0F E8 4B 0A E8 26 00 C3  // ..g.......K..&..
    1C80: E8 52 00 E8 02 F6 B5 00 E8 1D 07 B5 00 E8 4B 07  // .R............K.
    1C90: E8 77 F6 E8 A0 11 38 C1 74 0A 80 F9 0B 74 05 B5  // .w....8.t....t..
    1CA0: 03 E8 80 08 C3 B1 10 E8 1D 0A E8 A9 F5 80 FD 00  // ................
    1CB0: 74 06 B1 01 E8 B1 0A C3 E8 94 05 80 FD 01 75 07  // t.............u.
    1CC0: B5 02 E8 C3 05 EB 03 E8 F3 01 B1 0D E8 F8 09 B1  // ................
    1CD0: 03 E8 54 00 C3 E8 CB F5 0B D2 74 05 B1 00 E8 24  // ..T.......t....$
    1CE0: 0A B1 02 E8 42 00 E8 51 F6 A8 01 74 12 E8 66 F5  // ....B..Q...t..f.
    1CF0: 80 FD 00 75 0A B1 0C E8 CD 09 B0 02 E8 91 04 B1  // ...u............
    1D00: 00 E8 64 0A B1 0D E8 1F 00 C3 B1 07 E8 59 0A E8  // ..d..........Y..
    1D10: 91 F5 0B D2 75 0C E8 FF F5 E8 0C 0C 75 09 E8 FF  // ....u.......u...
    1D20: 0A C3 B1 07 E8 DE 09 C3 E8 ED F5 E8 FA 0B 75 24  // ..............u$
    1D30: 51 E8 34 0A 59 80 F9 0C 75 1A 33 D2 56 83 C6 08  // Q.4.Y...u.3.V...
    1D40: E8 23 0C 5E 0A C0 75 0C B9 0A 00 E8 3C 11 42 83  // .#.^..u.....<.B.
    1D50: FA 1E 75 E8 C3 80 FB 01 0F 84 C5 00 E8 93 05 66  // ..u............f
    1D60: C1 E1 10 8D 9C 35 01 E8 3D 15 A8 01 74 05 51 E8  // .....5..=...t.Q.
    1D70: 2B 04 59 E8 5E F5 B0 04 E8 8A 05 66 BA 50 01 40  // +.Y.^......f.P.@
    1D80: 50 E8 64 05 E8 D9 0A 75 7E 66 BA 50 01 50 4F 8D  // P.d....u~f.P.PO.
    1D90: 9C 2D 01 E8 11 15 24 06 3C 02 75 02 B6 02 B0 05  // .-....$.<.u.....
    1DA0: E8 62 05 E8 42 05 8D 5C 28 03 D8 E8 B2 0A 75 57  // .b..B..\(.....uW
    1DB0: 0A FF 75 09 B0 0A E8 4C 05 32 DB EB 4A 51 33 C9  // ..u....L.2..JQ3.
    1DC0: 8A CF E8 23 05 03 C8 E8 28 05 59 B0 07 E8 35 05  // ...#....(.Y...5.
    1DD0: 66 BA 50 01 10 30 33 DB E8 85 0A 74 0F 51 8A EB  // f.P..03....t.Q..
    1DE0: 8D 9C 44 01 B1 02 E8 62 14 59 EB 61 E8 F9 04 66  // ..D....b.Y.a...f
    1DF0: C1 C9 10 2B C1 66 C1 C1 10 3D 80 00 0F 82 76 FF  // ...+.f...=....v.
    1E00: B0 08 E8 00 05 EB 43 51 8A EB 8D 9C 44 01 B1 02  // ......CQ....D...
    1E10: E8 38 14 59 66 BA 50 01 10 30 33 DB E8 41 0A EB  // .8.Yf.P..03..A..
    1E20: 2C 8D 5C 28 03 D9 53 8A E9 B1 32 51 5F E8 A4 F4  // ,.\(..S...2Q_...
    1E30: 8A E9 B1 A0 BA 00 80 E8 FB 09 80 FF 01 5B 74 0A  // .............[t.
    1E40: B1 A2 E8 F0 09 80 FF 01 75 03 B0 00 C3 B0 01 C3  // ........u.......
    1E50: 51 B1 0C E8 D2 FE 59 B0 01 E8 A9 04 56 83 C6 08  // Q.....Y.....V...
    1E60: E8 03 0B 5E 0A C0 75 04 B3 10 EB 3F B0 02 E8 94  // ...^..u....?....
    1E70: 04 E8 38 00 74 11 B0 03 E8 8A 04 B0 01 E8 10 03  // ..8.t...........
    1E80: 75 29 E8 27 00 75 24 66 BA 0C 00 90 43 8D 9C 30  // u).'.u$f....C..0
    1E90: 01 E8 CC 09 66 BA 20 00 90 41 8D 9C 34 01 E8 BF  // ....f. ..A..4...
    1EA0: 09 E8 AB 03 B0 09 E8 5C 04 33 DB C3 E8 25 F4 66  // .......\.3...%.f
    1EB0: BA 00 00 90 47 8D 9C 28 01 E8 A4 09 C3 B1 0C E8  // ....G..(........
    1EC0: 66 FE B1 00 E8 A1 08 B1 01 E8 9C 08 8D 9C AC 03  // f...............
    1ED0: 66 B8 00 00 00 00 E8 2E 13 B0 01 E8 B2 02 74 0A  // f.............t.
    1EE0: B5 04 E8 B9 03 B3 08 E9 3F 01 B1 08 E8 D8 07 E8  // ........?.......
    1EF0: D2 02 B1 09 E8 D0 07 E8 C5 01 8D 9C B8 03 66 33  // ..............f3
    1F00: C0 E8 03 13 E8 60 01 B9 90 01 E8 72 0F B0 01 E8  // .....`.....r....
    1F10: 63 02 B5 02 E8 7B 03 E8 74 01 E8 8D 03 E8 E0 01  // c....{..t.......
    1F20: B5 03 E8 6D 03 33 C9 E8 00 01 F6 C5 01 75 34 B5  // ...m.3.......u4.
    1F30: 02 E8 5E 03 E8 20 01 F6 C5 04 74 08 B5 01 E8 5D  // ..^.. ....t....]
    1F40: 03 E9 CC 00 8A FD 80 E7 03 E8 E8 00 80 E3 03 38  // ...............8
    1F50: FB 75 0D E8 4C 01 75 08 B5 02 E8 41 03 E9 B0 00  // .u..L.u....A....
    1F60: E8 67 01 FE C1 E8 7B F3 38 D9 75 BB 8D 9C AC 03  // .g....{.8.u.....
    1F70: E8 34 13 3C 03 74 05 E8 ED 00 EB 9B 8D 9C B0 03  // .4.<.t..........
    1F80: 66 33 C0 E8 81 12 8D 9C 2A 01 E8 1A 13 A8 40 74  // f3......*.....@t
    1F90: 0C B1 13 E8 31 07 B0 03 E8 DA 01 EB 0A B1 0A E8  // ....1...........
    1FA0: 25 07 B0 02 E8 CE 01 B5 04 E8 E6 02 E8 DF 00 E8  // %...............
    1FB0: F8 02 E8 4B 01 B5 05 E8 D8 02 33 C9 E8 6B 00 80  // ...K......3..k..
    1FC0: FD 07 75 05 E8 86 00 75 2E 51 B5 04 E8 C3 02 59  // ..u....u.Q.....Y
    1FD0: F6 C5 01 75 07 B5 03 E8 C4 02 EB 34 E8 78 00 8A  // ...u.......4.x..
    1FE0: D5 E8 E6 00 E8 70 00 38 EA 75 0C E8 B4 00 75 07  // .....p.8.u....u.
    1FF0: B5 02 E8 A9 02 EB 19 FE C1 E8 E7 F2 38 D9 75 BC  // ............8.u.
    2000: 8D 9C AC 03 E8 A0 12 3C 04 75 05 E8 59 00 EB 9C  // .......<.u..Y...
    2010: B0 00 E8 60 01 B1 0B E8 AD 06 8D 9C AD 03 E8 86  // ...`............
    2020: 12 B3 00 0A C0 74 02 B3 08 C3 8D 9C C0 03 E8 0F  // .....t..........
    2030: 00 8A E8 C3 53 8D 9C C4 03 E8 04 00 5B 8A D8 C3  // ....S.......[...
    2040: 51 E8 63 12 C0 E1 02 D3 E8 24 0F 59 C3 8D 9C C2  // Q.c......$.Y....
    2050: 03 E8 53 12 A8 01 C3 8D 9C B8 03 E8 05 12 C3 8D  // ..S.............
    2060: 9C B8 03 E8 E5 11 C3 33 C9 33 D2 E8 E9 FF 38 D5  // .......3.3....8.
    2070: 76 02 8A D5 FE C1 E8 6A F2 38 D9 72 EE 33 C9 8A  // v......j.8.r.3..
    2080: EA 8D 9C 5C 03 E8 C3 11 B1 0B E8 DB 06 C3 E8 43  // ...\...........C
    2090: F2 8D 9C B8 03 E8 0F 12 66 BA 03 01 80 83 E8 BF  // ........f.......
    20A0: 07 C3 51 53 8D 9C B0 03 E8 B8 11 FE C5 E8 9B 11  // ..QS............
    20B0: 80 FD 06 72 07 B5 02 E8 E4 01 33 C9 5B 59 C3 66  // ...r......3.[Y.f
    20C0: 33 C0 8D 9C B0 03 E8 3E 11 C3 32 ED E8 65 FF 80  // 3......>..2..e..
    20D0: E3 0C C0 EB 02 B7 03 2A FB C0 E3 03 8A EB 80 FB  // .......*........
    20E0: 18 72 03 80 CD 20 E8 4B FF 80 E3 03 38 FB 72 02  // .r... .K....8.r.
    20F0: 8A DF 80 FB 03 75 03 80 CD 04 0A EB E8 60 FF C3  // .....u.......`..
    2100: E8 D1 F1 8D 9C C0 03 66 BA 02 02 90 45 E8 50 07  // .......f....E.P.
    2110: C3 E8 C0 F1 66 BA 00 01 90 42 8D 9C B4 03 E8 3F  // ....f....B.....?
    2120: 07 E8 B0 F1 66 BA 03 01 90 45 8D 9C B8 03 E8 2F  // ....f....E...../
    2130: 07 E8 E4 F1 E8 F5 07 75 3B E8 98 F1 66 BA 0A 01  // .......u;...f...
    2140: 90 40 8D 9C BF 03 E8 17 07 8D 9C 28 01 E8 57 11  // .@.........(..W.
    2150: 3C 14 72 20 E8 7D F1 66 BA 10 00 90 4F 8D 9C D0  // <.r .}.f....O...
    2160: 03 E8 FC 06 E8 6D F1 66 BA 15 01 90 40 8D 9C CC  // .....m.f....@...
    2170: 03 E8 EC 06 C3 E8 5C F1 66 BA 02 01 80 50 E8 DF  // ......\.f....P..
    2180: 06 C3 E8 3E F1 8B C2 66 33 D2 B9 8C 0A F7 F1 C3  // ...>...f3.......
    2190: E8 41 F1 66 BA 00 06 80 50 E8 C4 06 C3 E8 34 F1  // .A.f....P.....4.
    21A0: 66 BA 11 01 80 50 B0 04 E8 B5 06 C3 E8 25 F1 66  // f....P.......%.f
    21B0: BA 00 06 90 40 8D 9C C8 03 E8 A4 06 8D 9C C8 03  // ....@...........
    21C0: E8 E4 10 C3 E8 BB FF E8 19 F1 8A E3 80 CC 80 50  // ...............P
    21D0: E8 01 F1 58 66 BA 00 01 80 61 E8 83 06 33 C9 E8  // ...Xf....a...3..
    21E0: 8C F0 0B C0 74 02 B5 10 8D 9C BC 03 E8 5C 10 8A  // ....t........\..
    21F0: C5 E8 E0 F0 66 BA 07 01 80 50 E8 63 06 E8 18 F1  // ....f....P.c....
    2200: E8 29 07 75 49 8D 9C 48 03 E8 9B 10 0A C0 74 0E  // .).uI..H......t.
    2210: E8 C1 F0 66 BA 0A 01 80 50 B0 01 E8 42 06 8D 9C  // ...f....P...B...
    2220: 28 01 E8 82 10 3C 14 72 25 8D 9C 29 01 E8 77 10  // (....<.r%..)..w.
    2230: 0A C0 75 1A E8 44 EC 32 C9 8D 9C CC 03 E8 0B 10  // ..u..D.2........
    2240: 8A C5 E8 8F F0 66 BA 15 01 80 50 E8 12 06 C3 8D  // .....f....P.....
    2250: 9C B4 03 B9 0E 00 E8 E0 0B E8 B5 FE E8 A1 FE E8  // ................
    2260: 4A FF 3C 01 75 1C E8 E4 FD 74 17 33 C9 E8 BA FD  // J.<.u....t.3....
    2270: 80 FD 07 75 0D FE C1 E8 69 F0 38 D9 75 EF B5 01  // ...u....i.8.u...
    2280: EB 02 B5 00 E8 01 00 C3 8D 9C AC 03 B1 02 E8 BA  // ................
    2290: 0F C3 51 8D 9C AC 03 32 C9 E8 AF 0F 59 C3 51 8D  // ..Q....2....Y.Q.
    22A0: 9C AC 03 B1 01 E8 A3 0F 59 C3 8D 9C 32 01 E8 F6  // ........Y...2...
    22B0: 0F 24 07 75 15 B9 64 00 8D 9C AC 03 E8 E8 0F 3C  // .$.u..d........<
    22C0: 02 74 03 B9 90 01 E8 B6 0B C3 32 E4 B1 04 33 D2  // .t........2...3.
    22D0: F6 E1 8B C8 E8 B3 0B C3 51 8D 5C 14 E8 C8 0F 66  // ........Q.\....f
    22E0: C1 E0 10 E8 A4 01 59 C3 53 8D 9C 44 01 E8 B7 0F  // ......Y.S..D....
    22F0: 5B C3 53 66 50 8D 9C 44 01 E8 AB 0F 8B C1 E8 06  // [.SfP..D........
    2300: 0F 66 58 5B C3 53 51 8D 9C 44 01 8A E8 B1 03 E8  // .fX[.SQ..D......
    2310: 39 0F 59 5B C3 33 C9 E8 16 0B 38 C1 73 05 B5 00  // 9.Y[.3....8.s...
    2320: E8 8C 00 B5 00 E8 80 00 FE C1 E8 06 0B 38 C1 72  // .............8.r
    2330: E6 B1 14 8A E9 E8 FE 0A 38 C1 74 05 B5 03 E8 E3  // ........8.t.....
    2340: 01 FE C1 E8 E7 0A 04 14 38 C1 76 E7 C3 83 EC 0C  // ........8.v.....
    2350: 8B EC 0B F6 74 1E E8 14 F8 66 C1 C8 10 66 89 46  // ....t....f...f.F
    2360: 00 8D 5C 04 E8 40 0F 66 89 46 04 8D 5C 08 E8 36  // ..\..@.f.F..\..6
    2370: 0F 88 46 0A 89 4E 08 8C D0 66 C1 E0 10 8B C4 BB  // ..F..N...f......
    2380: 2B 00 E8 AD 09 83 C4 0C C3 83 EC 04 8B EC B0 02  // +...............
    2390: 88 46 01 88 4E 00 8C D0 66 C1 E0 10 8B C4 BB 25  // .F..N...f......%
    23A0: 00 E8 8E 09 83 C4 04 C3 BB 23 00 E8 08 00 C3 BB  // .........#......
    23B0: 17 00 E8 01 00 C3 83 EC 04 8B EC 89 4E 00 8C D0  // ............N...
    23C0: 66 C1 E0 10 8B C4 E8 69 09 83 C4 04 C3 BB 22 00  // f......i......".
    23D0: E8 E3 FF C3 BB 27 00 E8 DC FF C3 BB 2C 00 E8 D5  // .....'......,...
    23E0: FF C3 E8 C2 0E 66 A9 00 00 FF FF 74 40 83 EC 18  // .....f.....t@...
    23F0: 8B EC 55 51 B9 04 00 83 C3 02 E8 AA 0E 66 89 46  // ..UQ.........f.F
    2400: 00 83 C5 04 83 C3 04 E2 F1 83 C3 04 E8 98 0E 66  // ...............f
    2410: C1 C8 10 66 89 46 00 59 5D 88 4E 14 8C D0 66 C1  // ...f.F.Y].N...f.
    2420: E0 10 8B C4 BB 31 00 E8 08 09 83 C4 18 C3 E8 47  // .....1.........G
    2430: EE 8D 9C D0 02 E8 6F 0E 8A E8 BB 21 00 E8 76 FF  // ......o....!..v.
    2440: C3 8D 9C 3C 03 E8 5F 0E 8A F8 E8 09 EE 8A DD 53  // ...<.._........S
    2450: 8D 9C 42 03 E8 50 0E 8A E8 5B E8 1B EE E8 B8 EE  // ..B..P...[......
    2460: E8 C9 04 75 02 B3 01 83 EC 04 8B EC 88 4E 00 88  // ...u.........N..
    2470: 7E 01 88 5E 02 88 6E 03 8C D0 66 C1 E0 10 8B C4  // ~..^..n...f.....
    2480: BB 2A 00 E8 AC 08 83 C4 04 C3 83 EC 10 8B EC 66  // .*.............f
    2490: 3D F0 FF FF 03 76 06 66 B8 F0 FF FF 03 66 8B C8  // =....v.f.....f..
    24A0: 66 33 C0 66 89 46 04 66 89 46 00 66 89 46 08 66  // f3.f.F.f.F.f.F.f
    24B0: B8 00 00 00 D0 66 0B C1 66 89 46 0C 8C D0 66 C1  // .....f..f.F...f.
    24C0: E0 10 8B C4 BB 35 00 E8 68 08 83 C4 10 C3 83 EC  // .....5..h.......
    24D0: 08 8B EC 89 4E 00 66 89 56 02 89 5E 06 8C D0 66  // ....N.f.V..^...f
    24E0: C1 E0 10 8B C4 BB 2D 00 E8 47 08 83 C4 08 C3 3D  // ......-..G.....=
    24F0: C0 7F 76 04 B8 C0 7F C3 83 C0 3F 24 C0 C3 51 E8  // ..v.......?$..Q.
    2500: A5 0D 66 33 D2 B9 0A 00 F7 F1 8B C8 E8 98 0D 03  // ..f3............
    2510: C1 66 25 FF FF 00 00 59 3D 10 27 73 03 B8 10 27  // .f%....Y=.'s...'
    2520: C3 32 D2 C3 80 FD 02 75 19 E8 56 EE 66 BB 00 08  // .2.....u..V.f...
    2530: 00 00 E8 8E 00 66 33 D2 66 BB 01 08 00 00 E8 82  // .....f3.f.......
    2540: 00 C3 80 FD 03 75 10 66 33 C0 8A C1 66 33 D2 66  // .....u.f3...f3.f
    2550: BB FF 00 00 00 EB 36 51 33 D2 E8 F9 EC 8A D5 66  // ......6Q3......f
    2560: C1 E2 10 E8 32 ED 8A F2 8A D1 66 8B C2 66 0D 00  // ....2.....f..f..
    2570: 00 00 80 E8 6D ED 80 FB 04 76 06 66 0D 00 00 00  // ....m....v.f....
    2580: 08 E8 A3 ED E8 F1 EC 66 33 DB 8A D9 59 83 EC 10  // .......f3...Y...
    2590: 8B EC 66 89 46 04 66 89 5E 08 66 8B C2 66 33 D2  // ..f.F.f.^.f..f3.
    25A0: 66 BB 64 00 00 00 66 F7 E3 66 89 46 00 BB 0C 00  // f.d...f..f.F....
    25B0: 8C D0 66 C1 E0 10 8B C4 E8 77 07 8B EC B3 01 83  // ..f......w......
    25C0: C4 10 C3 83 EC 10 8B EC 66 89 56 00 66 89 5E 04  // ........f.V.f.^.
    25D0: BB 2E 00 8C D0 66 C1 E0 10 8B C4 E8 54 07 B3 01  // .....f......T...
    25E0: 83 C4 10 C3 C3 53 51 66 50 B9 68 74 80 FB 03 74  // .....SQfP.ht...t
    25F0: 0B B9 A0 8C 80 FB 00 75 03 B9 78 69 66 33 D2 8B  // .......u..xif3..
    2600: D1 66 58 59 5B C3 66 52 B3 00 66 F7 C2 00 00 FF  // .fXY[.fR..f.....
    2610: FF 75 1A 80 FD 13 74 15 80 FD 14 74 10 B3 01 80  // .u....t....t....
    2620: FD 0E 74 09 B3 03 80 F9 03 74 02 B3 02 66 5A C3  // ..t......t...fZ.
    2630: B5 11 80 FA 23 74 07 80 FA 22 74 02 B5 00 C3 B5  // ....#t..."t.....
    2640: 02 80 FA 23 74 07 80 FA 22 74 02 B3 01 C3 32 C9  // ...#t..."t....2.
    2650: 80 FD 00 75 08 C7 46 00 0B 01 B1 01 C3 50 33 C0  // ...u..F......P3.
    2660: E8 9E 01 04 14 89 46 00 58 B1 01 C3 C3 8B DA B7  // ......F.X.......
    2670: 22 80 FE 21 74 02 B7 21 C3 0C 01 C3 E8 28 0C 66  // "..!t..!.....(.f
    2680: C1 E8 10 0B C0 74 1C 53 83 C3 06 E8 19 0C 5B 3D  // .....t.S......[=
    2690: E0 01 72 0F 53 83 C3 18 E8 0C 0C 5B A8 80 75 03  // ..r.S......[..u.
    26A0: 0C 01 C3 32 C0 C3 B5 0C C3 B5 02 C3 50 E8 51 01  // ...2........P.Q.
    26B0: B1 03 0A C0 74 04 B1 08 02 C8 58 C3 80 FA 22 75  // ....t.....X..."u
    26C0: 05 C7 46 00 78 69 C3 E8 1A 01 80 FD FF 74 35 83  // ..F.xi.......t5.
    26D0: EC 0C 8B EC 88 4E 01 88 6E 00 80 F9 0F 75 05 E8  // .....N..n....u..
    26E0: 4F 00 EB 0F 80 F9 10 75 0A 8D 9C 48 03 E8 B7 0B  // O......u...H....
    26F0: 88 46 02 8C D0 66 C1 E0 10 8B C4 BB 04 00 E8 31  // .F...f.........1
    2700: 06 83 C4 0C C3 83 EC 10 8B EC 88 4E 01 E8 93 EB  // ...........N....
    2710: 81 E2 00 07 FE CE C0 E6 04 88 76 00 E8 12 00 8C  // ..........v.....
    2720: D0 66 C1 E0 10 8B C4 BB 32 00 E8 05 06 83 C4 10  // .f......2.......
    2730: C3 66 53 E8 8D EB 66 8B C2 66 33 D2 66 BB 8C 0A  // .fS...f..f3.f...
    2740: 00 00 66 F7 F3 66 5B 8A E8 88 6E 09 8D 9C 40 03  // ..f..f[...n...@.
    2750: E8 54 0B 88 46 02 88 66 03 66 C1 E8 10 88 46 08  // .T..F..f.f....F.
    2760: E8 4F EB 66 89 56 04 C3 83 EC 20 8B EC 80 F9 04  // .O.f.V.... .....
    2770: 75 0A 88 4E 01 32 C0 88 46 00 EB 56 E8 19 EB E8  // u..N.2..F..V....
    2780: 7F 00 88 46 00 88 4E 01 E8 8D EB 88 56 0A 80 F9  // ...F..N.....V...
    2790: 01 74 18 80 F9 0B 75 3A 8D 9C 5C 03 E8 08 0B 88  // .t....u:..\.....
    27A0: 46 02 E8 0D EB 66 89 56 04 EB 27 E8 26 EB 88 6E  // F....f.V..'.&..n
    27B0: 08 E8 FE EA 66 89 56 04 E8 28 EB 88 5E 03 E8 95  // ....f.V..(..^...
    27C0: EA 88 6E 02 51 E8 1C 00 8A CD B0 01 D2 E0 59 88  // ..n.Q.........Y.
    27D0: 46 09 8C D0 66 C1 E0 10 8B C4 BB 4C 00 E8 52 05  // F...f......L..R.
    27E0: 83 C4 20 C3 8D 9C 3C 03 E8 BC 0A 32 ED 3C 03 74  // .. ...<....2.<.t
    27F0: 0C 3C 09 72 09 3C 0E 77 05 2C 08 8A E8 C3 B5 FF  // .<.r.<.w.,......
    2800: C3 52 32 C0 80 EE 21 80 FA 1E 74 10 B0 02 80 FA  // .R2...!...t.....
    2810: 20 74 09 B0 04 80 FA 21 74 02 B0 06 02 C6 5A C3  //  t.....!t.....Z.
    2820: 83 EC 08 8C D0 66 C1 E0 10 8B C4 BB 4B 00 E8 01  // .....f......K...
    2830: 05 83 C4 08 C3 83 EC 08 8B EC 89 7E 00 89 5E 02  // ...........~..^.
    2840: 89 56 04 89 4E 06 8C D0 66 C1 E0 10 8B C4 BB 36  // .V..N...f......6
    2850: 00 E8 DE 04 8B EC 8B 5E 02 8A 7E 01 83 C4 08 C3  // .......^..~.....
    2860: 56 33 F6 66 F7 C2 00 00 80 00 75 0A 50 33 C0 8A  // V3.f......u.P3..
    2870: C6 8B F0 32 F6 58 53 BB 04 1F E8 8A 09 66 8B C2  // ...2.XS......f..
    2880: BB 00 1F E8 81 09 5B 66 F7 C2 00 00 10 00 75 02  // ......[f......u.
    2890: 33 DB 8B D3 66 C1 E2 10 BA 00 1F 83 EC 08 8B EC  // 3...f...........
    28A0: 66 89 56 00 88 4E 04 8A C5 FE C8 88 46 07 C6 46  // f.V..N......F..F
    28B0: 05 00 C6 46 06 00 8C D0 66 C1 E0 10 8B C4 BB 4E  // ...F....f......N
    28C0: 00 E8 6E 04 8B EC 8A 5E 05 8A 7E 06 83 C4 08 0A  // ..n....^..~.....
    28D0: DB 74 32 51 B9 90 01 80 FB 20 74 05 80 FB 80 75  // .t2Q..... t....u
    28E0: 13 B9 0A 00 8B C6 0A C0 74 0A B9 90 01 3C 01 74  // ........t....<.t
    28F0: 03 B9 E8 03 E8 88 05 59 8B C6 FE C4 8B F0 80 FC  // .......Y........
    2900: 06 76 98 0A DB 5E C3 8D 5C 04 E8 9A 09 8B D0 B5  // .v...^..\.......
    2910: 02 E8 14 00 74 11 B5 01 80 FA 13 75 0A E8 61 00  // ....t......u..a.
    2920: 80 FA 13 75 02 B5 02 C3 80 FA 14 C3 E8 F9 FF 74  // ...u...........t
    2930: 03 80 FA 0E C3 80 FA 05 C3 80 FA 02 74 03 80 FA  // ............t...
    2940: 04 C3 80 FA 01 74 03 80 FA 02 C3 80 FA 02 75 03  // .....t........u.
    2950: B2 01 C3 80 FA 04 75 03 B2 03 C3 C3 B5 08 E8 D8  // ......u.........
    2960: FF 74 02 B5 04 C3 8D 5C 09 E8 3B 09 8A C8 0A C9  // .t.....\..;.....
    2970: 75 03 32 C0 C3 B5 02 E8 93 04 8A C5 24 02 D0 E8  // u.2.........$...
    2980: C3 8D 5C 08 E8 20 09 8A D0 B6 01 83 EC 10 8B EC  // ..\.. ..........
    2990: 89 56 02 8C D0 66 C1 E0 10 8B C4 BB 4F 00 E8 91  // .V...f......O...
    29A0: 03 8B EC 8A 56 04 83 C4 10 C3 53 83 C3 4C E8 C4  // ....V.....S..L..
    29B0: 08 5B C3 53 83 C3 4C E8 16 08 5B C3 56 E8 2F 03  // .[.S..L...[.V./.
    29C0: 8B 44 38 83 7D 20 00 5E C3 52 50 0F BC D8 32 FF  // .D8.} .^.RP...2.
    29D0: 80 FB 01 75 05 BB 00 24 EB 0C FE CB B8 00 04 F7  // ...u...$........
    29E0: E3 05 00 20 8B D8 58 5A C3 57 E8 56 00 74 0A 8B  // ... ..XZ.W.V.t..
    29F0: 5D 02 E8 08 00 0B DB 5F C3 33 DB 5F C3 52 51 0B  // ]......_.3._.RQ.
    2A00: DB 74 1B 56 E8 CF 02 03 DE 5E 33 C9 8A 4F 01 80  // .t.V.....^3..O..
    2A10: 3F FF 74 08 3A 07 74 06 03 D9 EB F0 33 DB 0B DB  // ?.t.:.t.....3...
    2A20: 59 5A C3 56 51 E8 AE 02 32 C9 8D 7C 08 3B 5D 04  // YZ.VQ...2..|.;].
    2A30: 74 0C 83 C7 10 FE C1 3A 4C 06 72 F1 33 FF 0B FF  // t......:L.r.3...
    2A40: 59 5E C3 56 51 E8 8E 02 32 C9 8D 7C 08 3B 1D 74  // Y^.VQ...2..|.;.t
    2A50: 0C 83 C7 10 FE C1 3A 4C 06 72 F2 33 FF 0B FF 59  // ......:L.r.3...Y
    2A60: 5E C3 56 51 E8 6F 02 32 C9 8D 7C 08 3B 45 0C 74  // ^.VQ.o.2..|.;E.t
    2A70: 0C 83 C7 10 FE C1 3A 4C 06 72 F1 33 FF 0B FF 59  // ......:L.r.3...Y
    2A80: 5E C3 57 50 E8 DB FF 8A C3 8B 5D 02 E8 6E FF 58  // ^.WP......]..n.X
    2A90: 5F C3 53 32 C9 B3 01 E8 E8 FF 74 03 8A 4F 02 0A  // _.S2......t..O..
    2AA0: C9 5B C3 53 32 ED B3 02 E8 D7 FF 74 03 8A 6F 02  // .[.S2......t..o.
    2AB0: 0A ED 5B C3 50 57 8B DA E8 68 FF 75 04 33 DB EB  // ..[.PW...h.u.3..
    2AC0: 0D B0 14 8B 5D 08 E8 34 FF 74 F2 8B 5F 02 5F 58  // ....]..4.t.._._X
    2AD0: C3 66 50 53 51 57 8D 1C 66 25 FF FF 00 00 E8 26  // .fPSQW..f%.....&
    2AE0: 07 8B D8 E8 3B 00 23 C3 74 31 E8 75 FF 0B FF 74  // ....;.#.t1.u...t
    2AF0: 2A 66 50 66 8B 45 04 8D 5C 0C E8 0A 07 66 33 C0  // *fPf.E..\....f3.
    2B00: 8B 05 8D 5C 04 E8 FF 06 66 58 E8 85 FF E8 93 FF  // ...\....fX......
    2B10: 8D 5C 08 66 33 C0 8B C1 E8 EC 06 5F 59 5B 66 58  // .\.f3......_Y[fX
    2B20: C3 56 E8 B1 01 8B 44 04 5E C3 56 E8 A8 01 89 44  // .V....D.^.V....D
    2B30: 04 5E C3 E8 CE 01 8B F7 83 C6 38 BB 00 2C B9 23  // .^........8..,.#
    2B40: 00 E8 23 03 E8 01 00 C3 51 66 57 56 E8 87 01 66  // ..#.....QfWV...f
    2B50: 33 FF 8D 7C 08 33 C0 E8 D0 FF 32 C9 8B 15 B8 00  // 3..|.3....2.....
    2B60: 70 23 C2 3D 00 30 75 54 80 FA 15 74 0B E8 B1 FF  // p#.=.0uT...t....
    2B70: 0B 45 0C E8 B4 FF EB 44 E8 5E 00 89 45 0C 0B C0  // .E.....D.^..E...
    2B80: 75 04 89 05 EB 36 E8 98 FF 0B 45 0C E8 9B FF 83  // u....6....E.....
    2B90: 7D 06 00 74 16 E8 4A 00 89 45 06 0B C0 74 0C 83  // }..t..J..E...t..
    2BA0: 7D 06 00 74 06 8B 5C 0A E8 BB 00 E8 40 00 89 05  // }..t..\.....@...
    2BB0: 8B 5D 02 E8 B0 00 8B 5D 08 E8 CB 00 83 C7 10 FE  // .].....]........
    2BC0: C1 3A 4C 06 72 96 5E 66 5F 59 C3 08 00 80 00 00  // .:L.r.^f_Y......
    2BD0: 02 00 04 00 08 40 00 00 00 53 E8 58 00 E8 C7 06  // .....@...S.X....
    2BE0: 5B C3 53 E8 4F 00 83 C3 08 E8 BB 06 5B C3 53 57  // [.S.O.......[.SW
    2BF0: 52 E8 41 00 83 C3 04 E8 AD 06 8B D0 E8 3A FD 75  // R.A..........:.u
    2C00: 16 8B 5D 04 8B D3 E8 64 FA 57 E8 16 FE 5F 75 07  // ..]....d.W..._u.
    2C10: 8B D0 E8 36 FD 8B C2 5A 5F 5B C3 E8 D0 FF 66 C1  // ...6...Z_[....f.
    2C20: E8 10 B4 11 E8 25 00 C3 E8 C3 FF 66 C1 E8 18 B4  // .....%.....f....
    2C30: 10 E8 18 00 C3 51 52 33 C9 8A CE 80 E1 07 49 B8  // .....QR3......I.
    2C40: 10 00 F7 E1 BB 14 2C 03 D8 5A 59 C3 57 53 51 33  // ......,..ZY.WSQ3
    2C50: C9 8A C8 8A C4 BB 03 71 E8 8E FD 83 C3 02 03 D9  // .......q........
    2C60: 8A 07 59 5B 5F C3 50 53 B0 01 E8 90 FD 74 15 E8  // ..Y[_.PS.....t..
    2C70: A9 FF 88 47 02 5B 53 B0 02 E8 81 FD 74 06 E8 A7  // ...G.[S.....t...
    2C80: FF 88 47 02 5B 58 C3 51 50 B0 14 E8 6F FD 74 3A  // ..G.[X.QP...o.t:
    2C90: 53 E8 A1 FF 83 C3 0C E8 0D 06 8B C8 5B F6 C1 01  // S...........[...
    2CA0: 74 05 66 83 67 02 FD F6 C1 80 74 05 66 83 67 02  // t.f.g.....t.f.g.
    2CB0: F7 F7 C1 00 01 74 08 66 81 4F 02 00 01 00 00 F7  // .....t.f.O......
    2CC0: C1 00 02 74 05 66 83 67 02 FB 58 59 C3 BF A8 01  // ...t.f.g..XY....
    2CD0: 8B 3D 8B 7D 0C C3 BE A8 01 8B 34 8B 74 30 C3 1E  // .=.}......4.t0..
    2CE0: 0E 1F BF A8 01 8B 3D 8B 7D 0E 83 C7 04 1F C3 BE  // ......=.}.......
    2CF0: A8 01 8B 34 8B 74 10 C3 BF A8 01 8B 3D 8B 7D 26  // ...4.t......=.}&
    2D00: 83 C7 04 C3 BF A8 01 8B 3D 8B 7D 40 C3 BE A8 01  // ........=.}@....
    2D10: 8B 34 8B 74 1A C3 BE A8 01 8B 34 8B 74 3A C3 BF  // .4.t......4.t:..
    2D20: A8 01 8B 3D 8B 7D 0A 83 C7 04 B9 07 00 C3 E8 01  // ...=.}..........
    2D30: 00 CB 83 EC 06 8B EC 89 46 00 66 33 C0 C6 46 04  // ........F.f3..F.
    2D40: 00 89 46 02 06 52 8A D3 8B C5 E8 7E 17 5A 07 83  // ..F..R.....~.Z..
    2D50: C4 06 C3 E8 77 FF 66 F7 45 10 01 00 00 00 C3 50  // ....w.f.E......P
    2D60: E8 6A FF B8 01 00 09 45 10 58 C3 E8 5F FF 88 45  // .j.....E.X.._..E
    2D70: 10 C3 66 53 83 EC 48 8B EC 66 89 5E 00 66 89 4E  // ..fS..H..f.^.f.N
    2D80: 04 8C D0 66 C1 E0 10 8B C4 BB 00 00 E8 A3 FF 83  // ...f............
    2D90: C4 48 66 5B E8 81 01 E8 AA 01 83 EC 1C 8B EC C6  // .Hf[............
    2DA0: 46 01 07 8C D0 66 C1 E0 10 8B C4 BB 0D 00 E8 81  // F....f..........
    2DB0: FF 83 C4 1C 83 EC 1C 8B EC C6 46 01 08 8C D0 66  // ..........F....f
    2DC0: C1 E0 10 8B C4 BB 0D 00 E8 67 FF 83 C4 1C BB 04  // .........g......
    2DD0: 00 E8 D6 FB 66 C1 E8 10 E8 90 FF C3 83 EC 54 8B  // ....f.........T.
    2DE0: EC 66 89 5E 00 8C D0 66 C1 E0 10 8B C4 BB 0A 00  // .f.^...f........
    2DF0: E8 3F FF 83 C4 54 C3 E8 D3 FE 66 8B 5D 08 66 8B  // .?...T....f.].f.
    2E00: 4D 0C C3 56 E8 0F FF 66 8B 44 08 5E C3 83 EC 04  // M..V...f.D.^....
    2E10: 8B EC 89 4E 00 8C D0 66 C1 E0 10 8B C4 BB 38 00  // ...N...f......8.
    2E20: E8 0F FF 8B EC 8A 6E 02 83 C4 04 C3 C3 B0 04 C3  // ......n.........
    2E30: B0 01 C3 B0 04 C3 B0 08 C3 53 66 50 66 33 C0 E8  // .........SfPf3..
    2E40: C5 03 83 C3 04 E2 F8 66 58 5B C3 32 C0 C3 FC E8  // .......fX[.2....
    2E50: 55 04 66 C1 CB 10 E8 AE 03 66 C1 CB 10 66 81 C3  // U.f......f...f..
    2E60: 04 00 04 00 E2 E9 C3 FC 66 AD E8 9A 03 83 C3 04  // ........f.......
    2E70: E2 F6 C3 FC E8 30 04 66 AB 83 C3 04 E2 F6 C3 66  // .....0.f.......f
    2E80: 50 B8 64 00 E8 10 00 66 58 C3 66 50 B8 50 C3 D1  // P.d....fX.fP.P..
    2E90: E1 E8 03 00 66 58 C3 52 F7 E1 8B CA E8 21 02 66  // ....fX.R.....!.f
    2EA0: 53 8B D9 66 C1 E3 10 8B D8 66 B8 04 B1 03 00 B2  // S..f.....f......
    2EB0: 00 66 EF B2 04 66 33 C0 66 EF 66 B8 08 B1 03 00  // .f...f3.f.f.....
    2EC0: B2 00 66 EF B2 04 66 ED 33 C9 66 03 D8 73 0A 66  // ..f...f.3.f..s.f
    2ED0: ED 66 A9 00 00 00 80 75 F6 66 ED 66 3B C3 73 0C  // .f.....u.f.f;.s.
    2EE0: 66 C1 E8 10 3B C1 72 04 8B C8 EB ED 66 5B 5A C3  // f...;.r.....f[Z.
    2EF0: BB 42 EC E8 7F 03 66 33 D2 66 BB 64 00 00 00 66  // .B....f3.f.d...f
    2F00: F7 F3 C3 66 50 53 BB 07 00 E8 9E FA 25 00 02 35  // ...fPS......%..5
    2F10: 00 02 0B C0 5B 66 58 C3 B3 01 E8 7D 01 66 C1 E0  // ....[fX....}.f..
    2F20: 0A 66 83 E8 20 E8 E5 FD 66 89 44 04 C7 44 08 20  // .f.. ...f.D..D. 
    2F30: 00 C3 56 1E 0E 1F E8 D4 FD 66 8B 44 04 66 C1 E0  // ..V......f.D.f..
    2F40: 0A 1F 5E C3 E8 D1 FF 06 E8 B9 FD 0E 07 BB 00 78  // ..^............x
    2F50: E8 54 03 66 3B 05 75 19 B9 00 01 FC E8 14 FF BB  // .T.f;.u.........
    2F60: 00 7C BF A8 01 8B 3D 8B 7D 22 B9 00 01 FC E8 02  // .|....=.}"......
    2F70: FF E8 90 FD BE A8 01 8B 34 8B 74 14 8B 45 14 89  // ........4.t..E..
    2F80: 44 0C E8 6A FD 0B F6 74 49 8B 45 28 89 44 20 F6  // D..j...tI.E(.D .
    2F90: 45 26 08 74 17 8A 45 26 C0 E8 04 88 44 24 80 64  // E&.t..E&....D$.d
    2FA0: 24 FD F6 45 26 01 74 04 80 4C 24 02 57 83 C7 38  // $..E&.t..L$.W..8
    2FB0: 8A 85 87 00 88 44 3B 5F 66 8B 45 18 89 44 28 B9  // .....D;_f.E..D(.
    2FC0: 07 00 8D 5D 2C 8A 07 0A C0 74 03 88 44 2C 43 46  // ...],....t..D,CF
    2FD0: E2 F3 E8 41 FD 8B 45 20 89 44 10 8B 45 22 89 44  // ...A..E .D..E".D
    2FE0: 12 8B 45 1C 89 44 14 8B 45 1E 89 44 16 BB 04 71  // ..E..D..E..D...q
    2FF0: B0 09 E8 F4 F9 74 0C 57 83 C7 38 8A 85 85 00 88  // .....t.W..8.....
    3000: 47 04 5F 07 C3 BE A8 01 8B 34 8B 74 1E 83 C6 04  // G._......4.t....
    3010: B9 1C 00 C3 56 E8 D7 FC 8A 6C 33 5E C3 56 E8 CE  // ....V....l3^.V..
    3020: FC 53 81 C3 09 01 E8 7E 02 8A E8 5B 53 81 C3 00  // .S.....~...[S...
    3030: 01 E8 73 02 5B 8A C5 66 89 44 34 5E C3 56 E8 AE  // ..s.[..f.D4^.V..
    3040: FC 66 8B 44 34 53 81 C3 08 01 B1 01 8A E8 E8 FA  // .f.D4S..........
    3050: 01 5B 53 81 C3 00 01 B1 01 8A EC E8 ED 01 5B 53  // .[S...........[S
    3060: 81 C3 02 01 66 C1 E8 10 E8 B4 01 5B 5E C3 56 E8  // ....f......[^.V.
    3070: 7D FC 8B FE 83 C7 04 5E C3 56 E8 72 FC 8A 44 24  // }......^.V.r..D$
    3080: 80 FD 00 74 05 88 6C 33 0C 02 88 44 24 5E C3 32  // ...t..l3...D$^.2
    3090: C0 C3 E8 6F FC 66 8B 45 08 C3 66 53 83 EC 04 8B  // ...o.f.E..fS....
    30A0: EC 8C D0 66 C1 E0 10 8B C4 66 89 5E 00 BB 06 00  // ...f.....f.^....
    30B0: E8 7F FC 8B EC 66 8B 46 00 83 C4 04 66 5B C3 00  // .....f.F....f[..
    30C0: 66 50 8C C8 3D 00 C0 75 0C BA C3 03 EC 8A F0 0A  // fP..=..u........
    30D0: F6 74 02 EB 0E 53 2E 8B 1E 14 00 B2 20 E8 D6 00  // .t...S...... ...
    30E0: 8A F4 5B 32 D2 66 ED 66 58 C3 2E 8B 1E 14 00 C3  // ..[2.f.fX.......
    30F0: 0B C9 75 1A 4B 74 16 43 3B DA 77 09 8B C8 8B C2  // ..u.Kt.C;.w.....
    3100: 2B D2 F7 F3 91 F7 F3 8B DA 8B D1 2B C9 C3 3B CA  // +..........+..;.
    3110: 72 1A 75 10 3B D8 77 0C 2B C3 8B D8 2B C9 2B D2  // r.u.;.w.+...+.+.
    3120: B8 01 00 C3 2B C9 2B DB 93 87 CA C3 55 56 2B F6  // ....+.+.....UV+.
    3130: 8B EE 03 DB 13 C9 72 11 45 3B CA 72 F5 77 04 3B  // ......r.E;.r.w.;
    3140: D8 76 EF F8 13 F6 4D 78 20 D1 D9 D1 DB 2B C3 1B  // .v....Mx ....+..
    3150: D1 F5 72 F0 03 F6 4D 78 0C D1 E9 D1 DB 03 C3 13  // ..r...Mx........
    3160: D1 73 F1 EB DF 03 C3 13 D1 8B D8 8B CA 8B C6 33  // .s.............3
    3170: D2 5E 5D C3 93 50 92 0B C0 74 02 F7 E2 91 0B C0  // .^]..P...t......
    3180: 74 04 F7 E3 03 C8 58 F7 E3 03 D1 C3 52 66 50 B4  // t.....X.....RfP.
    3190: 80 8A C7 66 C1 E0 10 8A E3 8A C2 24 FC BA F8 0C  // ...f.......$....
    31A0: 66 EF 66 58 5A C3 52 BA FC 0C 66 ED 5A C3 52 BA  // f.fXZ.R...f.Z.R.
    31B0: FC 0C 66 EF 5A C3 E8 31 FF 9C FA E8 CE FF E8 E5  // ..f.Z..1........
    31C0: FF 9D C3 E8 24 FF 9C FA E8 C1 FF E8 E0 FF 9D C3  // ....$...........
    31D0: 52 66 53 66 50 E8 06 00 66 58 66 5B 5A C3 66 C1  // RfSfP...fXf[Z.f.
    31E0: E3 10 66 C1 EB 0E E8 D7 FE E8 75 01 C3 66 50 66  // ..f.......u..fPf
    31F0: C1 E3 10 66 C1 EB 10 E8 38 FD 66 03 D8 66 81 CB  // ...f....8.f..f..
    3200: 00 00 00 80 66 58 C3 52 66 53 E8 04 00 66 5B 5A  // ....fX.RfS...f[Z
    3210: C3 66 50 E8 AA FE E8 D4 FF E8 45 01 66 58 C3 52  // .fP.......E.fX.R
    3220: 51 66 53 66 50 8A CB 80 E3 FC 80 E1 03 C0 E1 03  // QfSfP...........
    3230: E8 8D FE E8 B7 FF E8 0F 01 66 D3 C8 58 50 66 D3  // .........f..XPf.
    3240: C0 E8 1D 01 66 58 66 5B 59 5A C3 66 50 51 C0 E1  // ....fXf[YZ.fPQ..
    3250: 03 E8 53 00 66 D3 C8 8A C5 66 D3 C0 E8 A8 FF 59  // ..S.f....f.....Y
    3260: 66 58 C3 66 50 51 C0 E1 03 E8 3B 00 66 D3 C8 59  // fX.fPQ....;.f..Y
    3270: 8A E8 66 58 C3 E8 5F 00 C3 E8 44 FE 66 C1 E3 10  // ..fX.._...D.f...
    3280: 66 C1 EB 0E E8 C1 00 C3 E8 35 FE 66 C1 E3 02 E8  // f........5.f....
    3290: B6 00 C3 52 66 53 E8 04 00 66 5B 5A C3 E8 20 FE  // ...RfS...f[Z.. .
    32A0: E8 4A FF E8 A2 00 C3 51 66 52 8A EB 8A CB 80 E1  // .J.....QfR......
    32B0: 03 C0 E1 03 80 E3 FC E8 D9 FF 80 F9 00 74 14 66  // .............t.f
    32C0: 8B D0 83 C3 04 E8 CB FF 83 EB 04 66 92 66 0F AD  // ...........f.f..
    32D0: D0 8A DD 66 5A 59 C3 52 66 53 E8 9C FF 66 5B 5A  // ...fZY.RfS...f[Z
    32E0: C3 52 66 53 E8 A1 FF 66 5B 5A C3 66 50 55 52 66  // .RfS...f[Z.fPURf
    32F0: 50 8B EC 8B 56 0C 89 56 08 E8 C4 FD 2E A1 F5 01  // P...V..V........
    3300: B2 18 EF B2 00 66 ED 66 89 46 0A 66 58 5A 5D C3  // .....f.f.F.fXZ].
    3310: 66 50 55 52 8B EC E8 A7 FD B2 00 66 8B 46 0A 66  // fPUR.......f.F.f
    3320: EF 8B 56 08 89 56 0C 66 8B 46 04 66 89 46 08 5A  // ..V..V.f.F.f.F.Z
    3330: 5D 66 58 66 58 C3 66 50 52 E8 84 FD B2 18 66 ED  // ]fXfX.fPR.....f.
    3340: 2E A3 F5 01 5A 66 58 C3 66 81 FB FF 00 00 00 77  // ....ZfX.f......w
    3350: 04 8A D3 EB 09 66 8B C3 B2 00 66 EF B2 04 66 ED  // .....f....f...f.
    3360: C3 66 81 FB FF 00 00 00 77 04 8A D3 EB 0A 66 93  // .f......w.....f.
    3370: B2 00 66 EF 66 93 B2 04 66 EF C3 C3 C3 55 8B EC  // ..f.f...f....U..
    3380: 53 51 8B F0 26 8B 5C 14 26 8B 4C 16 E8 28 00 8D  // SQ..&.\.&.L..(..
    3390: 66 FC 59 5B 5D C3 53 51 8B F0 26 8B 5C 24 33 C9  // f.Y[].SQ..&.\$3.
    33A0: E8 14 00 59 5B C3 55 8B EC 53 51 8B F0 26 8B 5C  // ...Y[.U..SQ..&.\
    33B0: 08 26 8B 4C 0A EB D5 52 56 57 C8 06 00 00 8B F0  // .&.L...RVW......
    33C0: 89 4E FE 8C D0 8E C0 26 8B 7C 26 8A 45 01 32 E4  // .N.....&.|&.E.2.
    33D0: B9 20 00 2B C8 B8 FF FF 8B D0 E3 06 D1 EA D1 D8  // . .+............
    33E0: E2 FA 8A 4D 03 32 ED 8B FA E3 06 D1 E0 D1 D7 E2  // ...M.2..........
    33F0: FA F7 D0 F7 D7 26 21 44 1C 26 21 7C 1E 8C D0 8E  // .....&!D.&!|....
    3400: C0 26 8B 7C 26 8A 4D 01 32 ED B8 20 00 2B C1 8B  // .&.|&.M.2.. .+..
    3410: C8 66 C7 46 FA FF FF FF FF E3 08 D1 6E FC D1 5E  // .f.F........n..^
    3420: FA E2 F8 8A 4D 02 32 ED 8B C3 8B 56 FE E3 06 D1  // ....M.2....V....
    3430: EA D1 D8 E2 FA 23 46 FA 23 56 FC 8A 4D 03 32 ED  // .....#F.#V..M.2.
    3440: E3 06 D1 E0 D1 D2 E2 FA 26 09 44 1C 26 09 54 1E  // ........&.D.&.T.
    3450: C9 5F 5E 5A C3 55 8B EC 53 51 52 57 50 8B D8 26  // ._^Z.U..SQRWP..&
    3460: 8B 7F 26 8A 45 01 32 E4 B9 20 00 2B C8 B8 FF FF  // ..&.E.2.. .+....
    3470: 8B D0 E3 06 D1 EA D1 D8 E2 FA 8A 4D 02 88 4E F6  // ...........M..N.
    3480: C6 46 F7 00 8B FA 8B 4E F6 E3 06 D1 E0 D1 D7 E2  // .F.....N........
    3490: FA 26 09 47 1C 26 09 7F 1E 8D 66 F8 5F 5A E9 F1  // .&.G.&....f._Z..
    34A0: FE 53 51 52 57 8B D8 8C D0 8E C0 26 8B 77 26 8A  // .SQRW......&.w&.
    34B0: 4C 01 32 ED B8 20 00 2B C1 8B C8 BE FF FF 8B D6  // L.2.. .+........
    34C0: E3 06 D1 EA D1 DE E2 FA 26 8B 7F 26 8A 4D 02 32  // ........&..&.M.2
    34D0: ED 8B C6 E3 06 D1 E0 D1 D2 E2 FA F7 D0 F7 D2 26  // ...............&
    34E0: 21 47 1C 26 21 57 1E 5F E9 CC 05 53 56 8B D8 8C  // !G.&!W._...SV...
    34F0: D2 8E C2 26 8B 77 26 80 3C 00 74 73 80 3C 01 75  // ...&.w&.<.ts.<.u
    3500: 58 8A 44 01 32 E4 26 83 7F 1E 00 75 4C 26 3B 47  // X.D.2.&....uL&;G
    3510: 1C 75 46 8A 04 6B F0 03 8A 84 50 91 26 01 47 26  // .uF..k....P.&.G&
    3520: 8C D0 8E C0 26 8B 77 26 80 3C 09 74 17 8A 04 32  // ....&.w&.<.t...2
    3530: E4 6B F0 03 8B C3 FF 94 4E 91 26 8B 77 26 8A 04  // .k......N.&.w&..
    3540: 32 E4 EB D1 8B 44 01 26 29 47 26 26 FF 47 26 26  // 2....D.&)G&&.G&&
    3550: 8B 47 1C 26 8B 77 1E EB 1A 26 8B 77 26 8A 04 32  // .G.&.w...&.w&..2
    3560: E4 6B F0 03 8A 84 50 91 26 01 47 26 E9 80 FF 33  // .k....P.&.G&...3
    3570: C0 33 F6 8B D6 5E 5B C3 53 51 52 56 8B D8 8D 77  // .3...^[.SQRV...w
    3580: 35 26 8B 54 02 26 89 57 14 26 C7 47 16 00 00 8B  // 5&.T.&.W.&.G....
    3590: F0 26 8B 47 20 33 D2 26 01 47 14 26 11 54 16 8C  // .&.G 3.&.G.&.T..
    35A0: D1 8E C1 26 F6 47 2F 06 0F 85 0A 05 26 80 7F 34  // ...&.G/.....&..4
    35B0: 00 75 22 26 8B 77 16 26 0B 77 14 75 10 26 D1 67  // .u"&.w.&.w.u.&.g
    35C0: 08 26 D1 57 0A 26 D1 67 08 26 D1 57 0A 8B C3 E8  // .&.W.&.g.&.W....
    35D0: 79 11 E9 E1 04 26 8A 47 34 32 E4 05 80 00 99 26  // y....&.G42.....&
    35E0: 89 47 1C 26 89 57 1E 8B C3 E8 FF FE E9 C7 04 53  // .G.&.W.........S
    35F0: 56 8B D8 8D 77 35 26 8A 44 02 32 E4 C1 E0 02 26  // V...w5&.D.2....&
    3600: 8B 37 26 8B 34 03 F0 26 8B 47 08 26 8B 5F 0A 26  // .7&.4..&.G.&._.&
    3610: 89 04 26 89 5C 02 5E 5B C3 53 52 56 8B D8 8C D0  // ..&.\.^[.SRV....
    3620: 8D 77 35 8E C0 26 8A 54 02 80 FA 40 73 21 26 8B  // .w5..&.T...@s!&.
    3630: 77 02 32 F6 C1 E2 02 26 8B 74 04 03 F2 26 8B 57  // w.2....&.t...&.W
    3640: 08 26 8B 47 0A 26 89 14 26 89 44 02 E9 7F 00 80  // .&.G.&..&.D.....
    3650: FA 41 75 12 26 8B 47 08 26 8B 57 0A 26 89 47 10  // .Au.&.G.&.W.&.G.
    3660: 26 89 57 12 EB 68 80 FA 40 75 12 26 8B 47 08 26  // &.W..h..@u.&.G.&
    3670: 8B 57 0A 26 89 47 0C 26 89 57 0E EB 51 80 FA 42  // .W.&.G.&.W..Q..B
    3680: 75 0A 26 8B 47 08 26 89 47 22 EB 42 80 FA 43 75  // u.&.G.&.G".B..Cu
    3690: 0A 26 8A 47 08 26 88 47 33 EB 33 80 FA 46 75 12  // .&.G.&.G3.3..Fu.
    36A0: 26 8B 57 08 26 8B 47 0A 26 89 57 18 26 89 47 1A  // &.W.&.G.&.W.&.G.
    36B0: EB 1C 80 FA 47 75 0A 26 8B 47 08 26 89 47 24 EB  // ....Gu.&.G.&.G$.
    36C0: 0D 80 FA 48 75 08 26 8B 47 08 26 89 47 20 5E 5A  // ...Hu.&.G.&.G ^Z
    36D0: 5B C3 53 56 8B D8 8D 77 35 26 8A 44 02 32 E4 26  // [.SV...w5&.D.2.&
    36E0: 89 47 14 26 C7 47 16 00 00 5E 5B C3 53 56 8B D8  // .G.&.G...^[.SV..
    36F0: 26 8B 77 02 26 8B 74 02 8A 04 32 E4 26 89 47 14  // &.w.&.t...2.&.G.
    3700: 26 C7 47 16 00 00 26 8B 5F 02 26 FF 47 02 5E 5B  // &.G...&._.&.G.^[
    3710: C3 53 56 8B D8 26 8B 77 02 26 8B 74 02 8B 34 26  // .SV..&.w.&.t..4&
    3720: 89 77 14 26 C7 47 16 00 00 26 8B 5F 02 26 83 47  // .w.&.G...&._.&.G
    3730: 02 02 5E 5B C3 53 56 8B D8 26 8B 77 02 26 8B 74  // ..^[.SV..&.w.&.t
    3740: 02 8B 04 8B 74 02 26 89 47 14 26 89 77 16 26 8B  // ....t.&.G.&.w.&.
    3750: 5F 02 26 83 47 02 04 5E 5B C3 53 52 56 8B D8 E8  // _.&.G..^[.SRV...
    3760: 70 FF 8B F3 26 8B 47 18 26 8B 57 1A D1 EA D1 D8  // p...&.G.&.W.....
    3770: D1 EA D1 D8 26 01 47 14 26 11 54 16 8B C3 E8 2B  // ....&.G.&.T....+
    3780: 10 E9 4A FF 53 8B D8 26 8B 5F 02 26 FF 47 02 5B  // ..J.S..&._.&.G.[
    3790: C3 53 8B D8 26 8B 5F 02 26 83 47 02 02 5B C3 53  // .S..&._.&.G..[.S
    37A0: 56 8B D8 E8 6B FF 8B F3 26 8B 57 20 33 C0 26 01  // V...k...&.W 3.&.
    37B0: 57 14 26 11 44 16 8C D2 8E C2 26 8B 47 2E 32 C0  // W.&.D.....&.G.2.
    37C0: 80 E4 06 3D 00 02 75 07 32 E4 33 D2 5E 5B C3 26  // ...=..u.2.3.^[.&
    37D0: 8B 47 2E 32 C0 80 E4 06 3D 00 04 74 EB 26 80 7F  // .G.2....=..t.&..
    37E0: 34 00 75 08 8B C3 E8 2F 0F 5E 5B C3 26 8A 47 34  // 4.u..../.^[.&.G4
    37F0: 32 E4 26 89 47 1C 26 C7 47 1E 00 00 8B C3 E8 EA  // 2.&.G.&.G.......
    3800: FC 5E 5B C3 53 8B D8 E8 E2 FE 26 8B 47 14 C1 E0  // .^[.S.....&.G...
    3810: 02 26 8B 1F 26 8B 1F 03 D8 26 8B 07 26 8B 57 02  // .&..&....&..&.W.
    3820: 5B C3 28 38 1D 38 33 38 82 38 39 38 51 38 6B 38  // [.(8.838.898Q8k8
    3830: 76 38 7C 38 53 51 56 8B D8 E8 B0 FE 8C D2 8E C2  // v8|8SQV.........
    3840: 26 83 7F 16 00 75 22 26 83 7F 14 40 73 1B 26 8B  // &....u"&...@s.&.
    3850: 77 02 26 8B 5F 14 C1 E3 02 26 8B 44 04 03 D8 26  // w.&._....&.D...&
    3860: 8B 07 26 8B 57 02 E9 7B 05 26 8B 77 14 26 8B 47  // ..&.W..{.&.w.&.G
    3870: 16 83 C6 C0 83 D0 FF 75 71 83 FE 08 77 6C 03 F6  // .......uq...wl..
    3880: 2E FF A4 BA 37 26 8B 47 10 26 8B 57 12 E9 54 05  // ....7&.G.&.W..T.
    3890: 26 8B 47 0C 26 8B 57 0E E9 49 05 26 8B 47 22 EB  // &.G.&.W..I.&.G".
    38A0: 4B 26 8A 4F 33 32 ED BB 01 00 33 D2 E3 06 D1 E3  // K&.O32....3.....
    38B0: D1 D2 E2 FA 8B C3 E9 2B 05 26 8A 4F 33 32 ED B8  // .......+.&.O32..
    38C0: 01 00 33 D2 E3 06 D1 E0 D1 D2 E2 FA F7 D0 F7 D2  // ..3.............
    38D0: E9 11 05 26 8B 47 18 26 8B 57 1A E9 06 05 26 8B  // ...&.G.&.W....&.
    38E0: 47 24 EB 08 26 8B 47 20 EB 02 33 C0 33 D2 E9 F3  // G$..&.G ..3.3...
    38F0: 04 53 56 8B D8 E8 F4 FD 8B F3 26 8B 47 18 26 8B  // .SV.......&.G.&.
    3900: 57 1A D1 EA D1 D8 D1 EA D1 D8 26 01 47 14 26 11  // W.........&.G.&.
    3910: 54 16 8B C3 E8 16 0E 5E 5B C3 33 C0 33 D2 C3 53  // T......^[.3.3..S
    3920: 56 8B D8 E8 EB FD 26 8B 77 14 26 03 77 22 8B 04  // V.....&.w.&.w"..
    3930: 8B 54 02 5E 5B C3 53 8B D8 26 C6 47 2B 04 E8 AB  // .T.^[.S..&.G+...
    3940: FD 26 8B 47 14 26 8B 57 16 5B C3 53 8B D8 26 C6  // .&.G.&.W.[.S..&.
    3950: 47 2B 01 E8 BB FD EB E9 53 8B D8 26 C6 47 2B 00  // G+......S..&.G+.
    3960: E8 D2 FD EB DC 53 8B D8 83 C3 35 26 8A 5F 01 C0  // .....S....5&._..
    3970: EB 03 80 E3 07 32 FF 03 DB FF 97 DE 90 5B C3 53  // .....2.......[.S
    3980: 52 56 8B D8 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3  // RV..&.G,2.......
    3990: FF 94 FA 90 26 89 47 08 26 89 57 0A 26 8A 47 2D  // ....&.G.&.W.&.G-
    39A0: 32 E4 8B F0 03 F0 8B C3 FF 94 12 91 26 89 47 04  // 2...........&.G.
    39B0: 26 89 57 06 E9 17 FD 53 51 56 8B D8 26 8A 4F 2B  // &.W....SQV..&.O+
    39C0: 32 ED 8B F1 8A 8C 42 91 E3 0A 26 D1 6F 06 26 D1  // 2.....B...&.o.&.
    39D0: 5F 04 E2 F6 26 8A 4F 2B 32 ED 8B F1 C1 E6 02 8B  // _...&.O+2.......
    39E0: 8C 22 91 8B B4 24 91 26 21 4F 04 26 21 77 06 26  // ."...$.&!O.&!w.&
    39F0: 8A 4F 2A 32 ED 8B F1 8A 8C 4A 91 E3 0A 26 D1 67  // .O*2.....J...&.g
    3A00: 04 26 D1 57 06 E2 F6 26 8B 4F 08 26 8B 77 0A 26  // .&.W...&.O.&.w.&
    3A10: 89 4F 14 26 89 77 16 E9 CA 03 53 51 52 56 57 8B  // .O.&.w....SQRVW.
    3A20: D8 8C D0 8E C0 26 8A 47 2B 32 E4 8B F0 C1 E6 02  // .....&.G+2......
    3A30: 26 8A 47 2A 8B F8 8A 8D 4A 91 32 ED 8B 84 22 91  // &.G*....J.2...".
    3A40: 8B 94 24 91 E3 06 D1 E0 D1 D2 E2 FA F7 D0 F7 D2  // ..$.............
    3A50: 26 21 47 14 26 21 57 16 26 8A 47 2A 32 E4 8B F0  // &!G.&!W.&.G*2...
    3A60: 8A 8C 4A 91 32 ED E3 0A 26 D1 6F 0A 26 D1 5F 08  // ..J.2...&.o.&._.
    3A70: E2 F6 26 8A 47 2B 8B F0 C1 E6 02 8B 84 22 91 8B  // ..&.G+......."..
    3A80: 94 24 91 26 21 47 08 26 21 57 0A 26 8A 47 2A 32  // .$.&!G.&!W.&.G*2
    3A90: E4 8B F0 8A 8C 4A 91 32 ED E3 0A 26 D1 67 08 26  // .....J.2...&.g.&
    3AA0: D1 57 0A E2 F6 26 8B 47 14 26 8B 57 16 26 09 47  // .W...&.G.&.W.&.G
    3AB0: 08 26 09 57 0A 5F 5E 5A 59 5B C3 53 51 56 8B D8  // .&.W._^ZY[.SQV..
    3AC0: 26 8A 4F 2B 32 ED 8B F1 8A 8C 42 91 E3 0A 26 D1  // &.O+2.....B...&.
    3AD0: 6F 06 26 D1 5F 04 E2 F6 26 8A 4F 2B 32 ED 8B F1  // o.&._...&.O+2...
    3AE0: C1 E6 02 8B 8C 22 91 8B B4 24 91 26 21 4F 04 26  // ....."...$.&!O.&
    3AF0: 21 77 06 26 8A 4F 2A 32 ED 8B F1 8A 8C 4A 91 E3  // !w.&.O*2.....J..
    3B00: 0A 26 D1 6F 0A 26 D1 5F 08 E2 F6 26 8A 4F 2B 32  // .&.o.&._...&.O+2
    3B10: ED 8B F1 C1 E6 02 8B 8C 22 91 8B B4 24 91 26 21  // ........"...$.&!
    3B20: 4F 08 26 21 77 0A E9 BB 02 51 52 57 8B D8 8C D0  // O.&!w....QRW....
    3B30: 8E C0 26 80 7F 2B 00 74 1A 26 8A 47 2C 32 E4 8B  // ..&..+.t.&.G,2..
    3B40: F0 03 F0 8B C3 FF 94 FA 90 26 89 47 08 26 89 57  // .........&.G.&.W
    3B50: 0A EB 10 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF  // ...&.G,2........
    3B60: 94 06 91 26 8A 47 2D 32 E4 8B F0 03 F0 8B C3 FF  // ...&.G-2........
    3B70: 94 12 91 26 89 47 04 26 89 57 06 8C D2 8E C2 26  // ...&.G.&.W.....&
    3B80: 80 7F 2B 00 74 4A 26 8A 47 2B 32 E4 8B F0 C1 E6  // ..+.tJ&.G+2.....
    3B90: 02 26 8A 47 2A 8B F8 8A 8D 4A 91 32 ED 8B 84 22  // .&.G*....J.2..."
    3BA0: 91 8B 94 24 91 E3 06 D1 E0 D1 D2 E2 FA F7 D0 F7  // ...$............
    3BB0: D2 26 21 47 08 26 21 57 0A 8B C3 E8 F9 FD 26 8B  // .&!G.&!W......&.
    3BC0: 47 04 26 8B 57 06 26 09 47 08 26 09 57 0A EB 10  // G.&.W.&.G.&.W...
    3BD0: 26 8B 57 04 26 8B 47 06 26 89 57 08 26 89 47 0A  // &.W.&.G.&.W.&.G.
    3BE0: 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94 EE 90  // &.G,2...........
    3BF0: 5F 5A 59 C3 53 51 52 56 57 8B D8 26 8A 47 2A 32  // _ZY.SQRVW..&.G*2
    3C00: E4 8B F0 8A 8C 4A 91 32 ED E3 0A 26 D1 67 04 26  // .....J.2...&.g.&
    3C10: D1 57 06 E2 F6 8C D0 8E C0 26 8A 47 2B 32 E4 8B  // .W.......&.G+2..
    3C20: F0 C1 E6 02 26 8A 47 2A 8B F8 8A 8D 4A 91 32 ED  // ....&.G*....J.2.
    3C30: 8B 84 22 91 8B 94 24 91 E3 06 D1 E0 D1 D2 E2 FA  // .."...$.........
    3C40: F7 D0 F7 D2 26 09 47 04 26 09 57 06 26 8B 47 04  // ....&.G.&.W.&.G.
    3C50: 26 8B 57 06 26 21 47 08 26 21 57 0A E9 56 FE 55  // &.W.&!G.&!W..V.U
    3C60: 8B EC 51 52 50 8B D8 26 8A 47 2C 32 E4 8B F0 03  // ..QRP..&.G,2....
    3C70: F0 8B C3 FF 94 FA 90 26 89 47 08 26 89 57 0A 26  // .......&.G.&.W.&
    3C80: 8A 47 2B 88 46 FA 8B C3 E8 DA FC 26 89 47 04 26  // .G+.F......&.G.&
    3C90: 89 57 06 26 8A 4F 2D 32 ED 8B F1 03 F1 8B C3 FF  // .W.&.O-2........
    3CA0: 94 12 91 26 89 47 14 26 89 57 16 8B C3 E8 44 FF  // ...&.G.&.W....D.
    3CB0: 8A 46 FA 32 E4 8B F0 8A 8C 42 91 E3 0A 26 D1 6F  // .F.2.....B...&.o
    3CC0: 16 26 D1 5F 14 E2 F6 26 8A 57 2B 32 F6 8B F2 C1  // .&._...&.W+2....
    3CD0: E6 02 8B 84 22 91 8B 94 24 91 26 21 47 14 26 21  // ...."...$.&!G.&!
    3CE0: 57 16 26 8A 47 2A 32 E4 8B F0 8A 8C 4A 91 32 ED  // W.&.G*2.....J.2.
    3CF0: E3 0A 26 D1 67 14 26 D1 57 16 E2 F6 26 8B 47 14  // ..&.g.&.W...&.G.
    3D00: 26 8B 57 16 26 09 47 08 26 09 57 0A 26 8A 47 2C  // &.W.&.G.&.W.&.G,
    3D10: 32 E4 8B F0 03 F0 8B C3 FF 94 EE 90 8D 66 FC 5A  // 2............f.Z
    3D20: 59 5D C3 51 8B D8 E8 56 FC 26 8A 4F 2B 32 ED 8B  // Y].Q...V.&.O+2..
    3D30: F1 8A 8C 42 91 E3 0A 26 D1 6F 06 26 D1 5F 04 E2  // ...B...&.o.&._..
    3D40: F6 8B C3 E8 AE FE 26 8A 4F 2C 32 ED 8B F1 03 F1  // ......&.O,2.....
    3D50: 8B C3 FF 94 EE 90 59 C3 8B D8 E8 22 FC 8B C3 E8  // ......Y...."....
    3D60: 55 FC 26 8B 47 04 26 8B 77 06 26 09 47 08 26 09  // U.&.G.&.w.&.G.&.
    3D70: 77 0A 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94  // w.&.G,2.........
    3D80: EE 90 C3 53 56 8B D8 E8 F5 FB 8B C3 E8 28 FC 26  // ...SV........(.&
    3D90: 8B 47 04 26 8B 77 06 26 31 47 08 26 31 77 0A 26  // .G.&.w.&1G.&1w.&
    3DA0: 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94 EE 90 5E  // .G,2...........^
    3DB0: 5B C3 53 51 56 8B D8 E8 C5 FB 8B C3 E8 F8 FB 26  // [.SQV..........&
    3DC0: 8B 4F 04 E3 0A 26 D1 67 08 26 D1 57 0A E2 F6 8B  // .O...&.g.&.W....
    3DD0: C3 E8 46 FC 26 8A 4F 2C 32 ED 8B F1 03 F1 8B C3  // ..F.&.O,2.......
    3DE0: FF 94 EE 90 5E 59 5B C3 53 51 56 8B D8 E8 8F FB  // ....^Y[.SQV.....
    3DF0: 8B C3 E8 C2 FB 26 8B 4F 04 E3 0A 26 D1 6F 0A 26  // .....&.O...&.o.&
    3E00: D1 5F 08 E2 F6 EB C8 52 8B D8 E8 72 FB 8B C3 E8  // ._.....R...r....
    3E10: A5 FB 8B F3 26 8B 47 04 26 8B 57 06 26 01 47 08  // ....&.G.&.W.&.G.
    3E20: 26 11 54 0A 8B C3 E8 F1 FB 26 8A 47 2C 32 E4 8B  // &.T......&.G,2..
    3E30: F0 03 F0 8B C3 FF 94 EE 90 5A C3 52 8B D8 E8 3E  // .........Z.R...>
    3E40: FB 8B C3 E8 71 FB 8B F3 26 8B 47 04 26 8B 57 06  // ....q...&.G.&.W.
    3E50: 26 29 47 08 26 19 54 0A EB CA 51 52 8B F0 E8 1E  // &)G.&.T...QR....
    3E60: FB 8B C6 E8 55 FC 26 8B 44 08 26 8B 54 0A 26 8B  // ....U.&.D.&.T.&.
    3E70: 5C 04 26 8B 4C 06 E8 FB F2 26 89 44 0C 26 89 54  // \.&.L....&.D.&.T
    3E80: 0E 5A 59 C3 52 8B D0 E8 F5 FA 8B C2 E8 2C FC 8B  // .ZY.R........,..
    3E90: C2 E8 5C 08 5A C3 51 52 57 8B F0 E8 E1 FA 8B C6  // ..\.Z.QRW.......
    3EA0: E8 18 FC 26 8B 44 08 26 8B 54 0A 26 8B 5C 04 26  // ...&.D.&.T.&.\.&
    3EB0: 8B 4C 06 E8 3A F2 26 89 44 0C 26 89 54 0E 8C D7  // .L..:.&.D.&.T...
    3EC0: 8E C7 26 8B 44 08 26 8B 54 0A 26 8B 5C 04 26 8B  // ..&.D.&.T.&.\.&.
    3ED0: 4C 06 E8 1B F2 26 89 5C 10 26 89 4C 12 E9 10 FD  // L....&.\.&.L....
    3EE0: 52 8B D0 E8 99 FA 8B C2 E8 D0 FB 8B C2 E8 D3 07  // R...............
    3EF0: 5A C3 51 52 8B D8 E8 86 FA 8B C3 E8 BD FB 8C D1  // Z.QR............
    3F00: 8E C1 26 8B 47 08 26 8B 57 0A 26 3B 57 06 75 0E  // ..&.G.&.W.&;W.u.
    3F10: 26 3B 47 04 75 08 26 C6 47 30 01 5A 59 C3 8B D0  // &;G.u.&.G0.ZY...
    3F20: 26 8B 47 0A 26 3B 47 06 72 08 75 0A 26 3B 57 04  // &.G.&;G.r.u.&;W.
    3F30: 73 04 33 C0 EB 03 B8 02 00 26 88 47 30 5A 59 C3  // s.3......&.G0ZY.
    3F40: 51 52 57 8B D8 26 8A 47 2C 32 E4 8B F0 03 F0 8B  // QRW..&.G,2......
    3F50: C3 FF 94 FA 90 26 89 47 08 26 89 57 0A 8C D0 8E  // .....&.G.&.W....
    3F60: C0 26 8A 47 2B 32 E4 8B F0 C1 E6 02 8B F8 8A 8D  // .&.G+2..........
    3F70: 42 91 32 ED 8B 84 22 91 8B 94 24 91 E3 06 D1 E0  // B.2..."...$.....
    3F80: D1 D2 E2 FA F7 D0 F7 D2 26 21 47 08 26 21 57 0A  // ........&!G.&!W.
    3F90: E9 4D FC 55 8B EC 51 52 57 83 EC 06 8B D8 26 8A  // .M.U..QRW.....&.
    3FA0: 47 2B 32 E4 8B F0 C1 E6 02 8B F8 8A 8D 42 91 32  // G+2..........B.2
    3FB0: ED 8B 84 22 91 89 46 F4 8B 84 24 91 89 46 F6 E3  // ..."..F...$..F..
    3FC0: 08 D1 66 F4 D1 56 F6 E2 F8 8B 7E F4 8B 46 F6 89  // ..f..V....~..F..
    3FD0: 46 F8 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94  // F.&.G,2.........
    3FE0: FA 90 26 89 47 08 26 89 57 0A 8B C3 E8 47 F9 26  // ..&.G.&.W....G.&
    3FF0: 89 47 04 26 89 57 06 8B C7 F7 D0 8B 56 F6 F7 D2  // .G.&.W......V...
    4000: 26 23 47 08 26 23 57 0A 26 89 47 14 26 89 57 16  // &#G.&#W.&.G.&.W.
    4010: 26 21 7F 08 8B 46 F6 26 21 47 0A 8C D1 8D 77 35  // &!...F.&!G....w5
    4020: 8E C1 26 80 3C 19 73 12 26 8B 4F 04 E3 0A 26 D1  // ..&.<.s.&.O...&.
    4030: 67 08 26 D1 57 0A E2 F6 EB 10 26 8B 4F 04 E3 0A  // g.&.W.....&.O...
    4040: 26 D1 6F 0A 26 D1 5F 08 E2 F6 26 21 7F 08 8B 46  // &.o.&._...&!...F
    4050: F8 26 21 47 0A 26 8B 57 14 26 8B 47 16 26 09 57  // .&!G.&.W.&.G.&.W
    4060: 08 26 09 47 0A 26 8A 47 2C 32 E4 8B F0 03 F0 8B  // .&.G.&.G,2......
    4070: C3 FF 94 EE 90 8D 66 FA 5F E9 A3 FC 52 8B D8 E8  // ......f._...R...
    4080: FD F8 8B C3 E8 34 FA 26 8B 47 08 26 8B 57 0A 26  // .....4.&.G.&.W.&
    4090: 85 57 06 75 06 26 85 47 04 74 05 B8 03 00 EB 03  // .W.u.&.G.t......
    40A0: B8 01 00 26 88 47 30 5A C3 53 51 52 56 8B D8 26  // ...&.G0Z.SQRV..&
    40B0: 8A 4F 2D 32 ED 8B F1 03 F1 FF 94 12 91 26 89 47  // .O-2.........&.G
    40C0: 04 26 89 57 06 26 8A 47 2B 32 E4 8B F0 8A 8C 42  // .&.W.&.G+2.....B
    40D0: 91 E3 0A 26 D1 6F 06 26 D1 5F 04 E2 F6 26 8A 47  // ...&.o.&._...&.G
    40E0: 2B 8B F0 C1 E6 02 8B 84 22 91 8B 94 24 91 26 21  // +......."...$.&!
    40F0: 47 04 26 21 57 06 E9 BD F9 52 8B D8 E8 AA FF 26  // G.&!W....R.....&
    4100: 8B 47 04 26 8B 57 06 26 89 47 18 26 89 57 1A 5A  // .G.&.W.&.G.&.W.Z
    4110: C3 51 52 8B D8 E8 91 FF 8C D0 8E C0 26 8B 77 02  // .QR.........&.w.
    4120: 26 8B 74 02 81 3C 5A 5A 74 5B 26 8B 77 02 26 8B  // &.t..<ZZt[&.w.&.
    4130: 74 02 80 3C 63 75 E1 26 8B 77 02 26 FF 44 02 8B  // t..<cu.&.w.&.D..
    4140: C3 E8 21 F8 26 89 47 08 26 89 57 0A 8B C3 E8 FA  // ..!.&.G.&.W.....
    4150: F7 26 89 47 14 26 89 57 16 8C D1 8E C1 26 8B 57  // .&.G.&.W.....&.W
    4160: 04 26 8B 47 06 26 3B 47 0A 75 AD 26 3B 57 08 75  // .&.G.&;G.u.&;W.u
    4170: A7 26 8B 77 02 26 8B 04 26 03 47 14 8B DE 26 89  // .&.w.&..&.G...&.
    4180: 47 02 5A 59 C3 26 8B 5F 02 26 83 47 02 02 5A 59  // G.ZY.&._.&.G..ZY
    4190: C3 52 57 8B D8 8C D0 8E C0 26 8B 77 02 26 8B 74  // .RW......&.w.&.t
    41A0: 02 8A 54 01 84 D2 75 08 26 C7 47 22 00 00 EB 2F  // ..T...u.&.G".../
    41B0: 80 FA FF 75 14 26 8B 77 02 26 8B 3F 26 8B 34 26  // ...u.&.w.&.?&.4&
    41C0: 2B 75 02 26 89 77 22 EB 16 26 8B 07 E8 E3 02 8B  // +u.&.w"..&......
    41D0: F0 8A C2 32 E4 03 C0 03 F0 8B 04 26 89 47 22 26  // ...2.......&.G"&
    41E0: 8B 5F 02 26 83 47 02 02 5F 5A C3 8B D8 26 80 67  // ._.&.G.._Z...&.g
    41F0: 2F F9 26 8B 77 02 26 8B 74 02 8A 44 01 26 88 47  // /.&.w.&.t..D.&.G
    4200: 34 26 8B 5F 02 26 83 47 02 03 C3 8B D8 26 8B 77  // 4&._.&.G.....&.w
    4210: 02 26 8B 74 02 8B 74 01 26 89 77 20 EB E3 53 8B  // .&.t..t.&.w ..S.
    4220: D8 26 8A 47 2C 32 E4 24 03 26 80 67 2F F9 C1 E0  // .&.G,2.$.&.g/...
    4230: 09 26 09 47 2E E9 4F F5 8B D8 26 8B 77 02 26 8B  // .&.G..O...&.w.&.
    4240: 74 02 8A 44 01 32 E4 26 89 47 04 26 C7 47 06 00  // t..D.2.&.G.&.G..
    4250: 00 8B C3 E8 40 04 26 8B 5F 02 26 83 47 02 02 C3  // ....@.&._.&.G...
    4260: 8B D8 26 8B 77 02 26 8B 74 02 8A 44 01 32 E4 26  // ..&.w.&.t..D.2.&
    4270: 89 47 04 26 C7 47 06 00 00 8B C3 E8 08 04 EB D6  // .G.&.G..........
    4280: 53 56 8B D8 26 8B 77 02 26 8B 74 02 8A 44 01 32  // SV..&.w.&.t..D.2
    4290: E4 26 89 47 04 26 C7 47 06 00 00 8B C3 E8 06 04  // .&.G.&.G........
    42A0: E9 86 F4 53 56 8B D8 26 8B 77 02 26 8B 74 02 8A  // ...SV..&.w.&.t..
    42B0: 44 01 32 E4 26 89 47 04 26 C7 47 06 00 00 8B C3  // D.2.&.G.&.G.....
    42C0: E8 F0 03 E9 63 F4 53 56 8B D8 26 8B 77 02 8B DE  // ....c.SV..&.w...
    42D0: 26 8B 5F 02 8B 5F 01 83 C3 03 26 01 5C 02 5E 5B  // &._.._....&.\.^[
    42E0: C3 51 52 8B D8 26 8B 77 02 26 83 44 02 02 26 8B  // .QR..&.w.&.D..&.
    42F0: 07 E8 A0 01 8B C8 26 8B 77 28 8A 44 01 32 E4 03  // ......&.w(.D.2..
    4300: C0 8B F1 03 F0 83 3C 00 74 4F 26 8B 77 28 8A 54  // ......<.tO&.w(.T
    4310: 01 32 F6 8B C3 E8 B0 01 26 88 47 31 26 8B 77 02  // .2......&.G1&.w.
    4320: 26 8B 34 8B 44 04 C1 E8 08 32 E4 24 7F C1 E8 02  // &.4.D....2.$....
    4330: 32 E4 24 1F 26 80 67 2F 07 C1 E0 0B 26 09 47 2E  // 2.$.&.g/....&.G.
    4340: 26 8B 37 26 8B 47 2E C1 E8 0B C1 E0 02 26 01 04  // &.7&.G.......&..
    4350: 26 C6 47 32 01 26 89 4F 28 5A 59 C3 53 8B D8 26  // &.G2.&.O(ZY.S..&
    4360: C6 47 32 82 5B C3 57 8B D8 8C D6 8E C6 26 80 7F  // .G2.[.W......&..
    4370: 2C 05 74 0A 26 8A 47 2C 26 3A 47 30 75 1E 26 8B  // ,.t.&.G,&:G0u.&.
    4380: 77 02 26 8B 74 02 26 8B 7F 02 26 8B 3D 8B 74 01  // w.&.t.&...&.=.t.
    4390: 03 F7 26 8B 5F 02 26 89 77 02 5F C3 26 8B 5F 02  // ..&._.&.w._.&._.
    43A0: 26 83 47 02 03 5F C3 53 56 57 8B D8 8C D6 8E C6  // &.G.._.SVW......
    43B0: 26 80 7F 30 01 74 0A 26 8A 47 30 26 3A 47 2C 75  // &..0.t.&.G0&:G,u
    43C0: 20 26 8B 77 02 26 8B 74 02 26 8B 7F 02 26 8B 3D  //  &.w.&.t.&...&.=
    43D0: 8B 74 01 03 F7 26 8B 5F 02 26 89 77 02 5F 5E 5B  // .t...&._.&.w._^[
    43E0: C3 26 8B 5F 02 26 83 47 02 03 EB F1 53 56 57 8B  // .&._.&.G....SVW.
    43F0: D8 8C D0 8E C0 26 80 7F 30 01 74 E5 EB C3 55 8B  // .....&..0.t...U.
    4400: EC 53 51 52 57 8B D8 26 8B 77 02 26 8B 74 02 8A  // .SQRW..&.w.&.t..
    4410: 04 26 C6 47 3D 00 8C D1 8E C1 26 80 7F 3D 08 73  // .&.G=.....&..=.s
    4420: 20 26 8B 77 02 26 8A 57 3D 32 F6 26 8B 7C 02 03  //  &.w.&.W=2.&.|..
    4430: FA 8B F3 03 F2 8A 15 26 88 54 35 26 FE 47 3D EB  // .......&.T5&.G=.
    4440: D5 26 8B 7F 02 8A D0 32 F6 8B F2 C1 E6 02 8A 94  // .&.....2........
    4450: 6F 91 26 01 55 02 26 8B 7F 28 8A 55 01 80 E2 07  // o.&.U.&..(.U....
    4460: 26 88 57 2D 26 8B 7F 28 8A 55 01 C0 EA 03 80 E2  // &.W-&..(.U......
    4470: 07 26 88 57 2B 26 8B 7F 28 8A 55 01 C0 EA 06 26  // .&.W+&..(.U....&
    4480: 88 57 2A 8A 94 6E 91 26 88 57 2C 8D 66 F8 5F 5A  // .W*..n.&.W,.f._Z
    4490: 59 5B 5D C3 53 56 8B D8 26 8B 77 02 8B C6 8B 74  // Y[].SV..&.w....t
    44A0: 48 03 F0 8B D8 8B 74 1E 8B C6 03 C3 83 C0 04 5E  // H.....t........^
    44B0: 5B C3 53 56 8B D8 26 8B 77 02 8B C6 8B 74 48 03  // [.SV..&.w....tH.
    44C0: F0 8B D8 8B 74 20 EB E0 8A C2 C3 16 07 55 8B EC  // ....t .......U..
    44D0: 53 51 56 57 83 EC 40 8B F8 89 46 B8 E8 D3 FF 8B  // SQVW..@...F.....
    44E0: D8 89 46 E0 26 8B 45 02 8B 5F 2E 03 D8 89 5E DE  // ..F.&.E.._....^.
    44F0: 83 46 DE 04 8B C7 E8 9B FF 89 46 E0 32 F6 8D 46  // .F........F.2..F
    4500: B8 E8 C4 FF 8A D0 32 F6 03 D2 8B 5E E0 03 DA 83  // ......2....^....
    4510: 3F 00 0F 84 65 01 88 46 E9 80 66 E7 F9 C6 46 EC  // ?...e..F..f...F.
    4520: 00 C7 46 D8 00 00 66 C7 46 D0 00 00 00 00 C7 46  // ..F...f.F......F
    4530: F6 00 00 C6 46 EA 01 EB 06 3C 01 0F 85 8C 00 8A  // ....F....<......
    4540: 56 E9 8A C2 32 E4 03 C0 8B 5E E0 03 D8 83 3F 00  // V...2....^....?.
    4550: 74 75 26 8B 45 02 8B 1F 03 D8 8B 47 04 32 E4 8B  // tu&.E......G.2..
    4560: C8 83 C1 09 32 ED 80 E1 FE 83 F9 00 74 07 D1 E9  // ....2.......t...
    4570: 33 C0 50 E2 FD 8B C4 8B D8 89 46 BA 85 C0 74 41  // 3.P.......F...tA
    4580: 83 C0 08 26 89 47 04 8A C2 32 E4 03 C0 8B 5E E0  // ...&.G...2....^.
    4590: 03 D8 26 8B 45 02 03 07 8B 5E BA 26 89 07 8B 5E  // ..&.E....^.&...^
    45A0: BA 26 8B 07 83 C0 06 26 89 47 02 8B 5E BA 8B 76  // .&.....&.G..^..v
    45B0: F6 26 89 77 06 8B 5E BA 89 5E F6 C6 46 EA 00 EB  // .&.w..^..^..F...
    45C0: 0A C6 46 EA 87 EB 04 C6 46 EA 83 8A 46 EA 32 E4  // ..F.....F...F.2.
    45D0: 83 F8 10 0F 8F 99 00 88 66 EA 8A 46 EA 32 E4 85  // ........f..F.2..
    45E0: C0 0F 8F 83 00 8C D0 8B 5E BA 8E C0 26 8B 5F 02  // ........^...&._.
    45F0: 89 5E E0 8B 5E BA 26 8B 5F 02 80 3F 5B 75 4A C6  // .^..^.&._..?[uJ.
    4600: 46 EA 10 8B 5E BA 26 8B 5F 06 89 5E F6 8B 5E BA  // F...^.&._..^..^.
    4610: 26 8B 1F 8B 47 04 32 E4 8B C8 83 C1 09 32 ED 80  // &...G.2......2..
    4620: E1 FE 03 E1 8B 5E F6 89 5E BA 85 DB 74 AC 26 8B  // .....^..^...t.&.
    4630: 1F 8B 47 04 C1 E8 08 32 E4 24 7F C1 E8 02 C1 E0  // ..G....2.$......
    4640: 02 8B 5E B8 26 29 07 EB 91 8D 46 B8 E8 AF FD 8A  // ..^.&)....F.....
    4650: D0 8D 46 B8 E8 2E 00 8A DA 32 FF C1 E3 02 8D 46  // ..F......2.....F
    4660: B8 FF 97 6C 91 E9 72 FF 83 7E F6 00 0F 85 C9 FE  // ...l..r..~......
    4670: 80 7E EA 10 74 05 8A 46 EA EB 02 32 C0 8D 66 F8  // .~..t..F...2..f.
    4680: 5F 5E E9 0B FE C3 53 51 8B D8 26 8A 4F 04 32 ED  // _^....SQ..&.O.2.
    4690: E8 EC E7 59 5B C3 53 51 8B D8 26 8A 4F 04 32 ED  // ...Y[.SQ..&.O.2.
    46A0: E8 E7 E7 59 5B C3 53 8B D8 26 8A 47 04 32 E4 E6  // ...Y[.S..&.G.2..
    46B0: 80 5B C3 53 51 8B D8 26 8A 4F 04 32 ED E8 2A D5  // .[.SQ..&.O.2..*.
    46C0: 59 5B C3 53 8B D8 66 50 66 52 66 51 66 26 8B 47  // Y[.S..fPfRfQf&.G
    46D0: 08 66 26 8B 57 10 66 26 8B 4F 04 66 F7 F1 66 26  // .f&.W.f&.O.f..f&
    46E0: 89 47 0C 66 26 89 57 10 66 59 66 5A 66 58 5B C3  // .G.f&.W.fYfZfX[.
    46F0: 53 8B D8 66 50 66 52 66 51 66 26 8B 47 08 66 26  // S..fPfRfQf&.G.f&
    4700: 8B 4F 04 66 F7 E1 66 26 89 47 0C 66 26 89 57 10  // .O.f..f&.G.f&.W.
    4710: 66 59 66 5A 66 58 5B C3 53 57 8B D8 26 8B 5F 14  // fYfZfX[.SW..&._.
    4720: E8 56 EB 8B D0 66 C1 E8 10 92 5F 5B C3 53 57 8B  // .V...f...._[.SW.
    4730: D8 26 8B 47 14 26 8B 57 16 8B D8 87 D3 66 C1 E3  // .&.G.&.W.....f..
    4740: 10 8B DA C1 E3 02 E8 54 EB EB D8 53 52 57 8B D8  // .......T...SRW..
    4750: 26 8B 47 08 26 8B 57 0A 92 66 C1 E0 10 8B C2 26  // &.G.&.W..f.....&
    4760: 8B 5F 14 E8 78 EA 5F 5A 5B C3 53 52 8B D8 26 8B  // ._..x._Z[.SR..&.
    4770: 47 1C 26 8B 57 1E 92 66 C1 E0 10 8B C2 26 8B 5F  // G.&.W..f.....&._
    4780: 26 8B 5F 01 E8 57 EA 5A 5B C3 53 52 56 8B F0 26  // &._..W.Z[.SRV..&
    4790: 8B 5C 26 8B 5F 01 E8 E0 EA 8B D0 66 C1 E8 10 92  // .\&._......f....
    47A0: 26 89 44 1C 26 89 54 1E 5E 5A 5B C3 53 51 52 57  // &.D.&.T.^Z[.SQRW
    47B0: 8B D8 26 8B 47 08 26 8B 57 0A 92 66 C1 E0 10 8B  // ..&.G.&.W..f....
    47C0: C2 8B C8 26 8B 47 14 26 8B 57 16 8B D8 87 D3 66  // ...&.G.&.W.....f
    47D0: C1 E3 10 8B DA C1 E3 02 8B C1 E8 34 EA 5F 5A 59  // ...........4._ZY
    47E0: 5B C3 8B D0 66 C1 E8 10 92 C3 1E 06 66 50 66 51  // [...f.......fPfQ
    47F0: 66 52 66 53 66 55 66 56 66 57 0E 1F 0A C0 75 06  // fRfSfUfVfW....u.
    4800: E8 07 01 E9 A8 00 3C 01 75 06 E8 37 01 E9 9E 00  // ......<.u..7....
    4810: 3C 02 75 06 E8 5F 02 E9 94 00 3C 03 75 0B E8 91  // <.u.._....<.u...
    4820: 03 8B EC 89 5E 0C E9 85 00 3C 04 75 02 EB 7D 3C  // ....^....<.u..}<
    4830: 05 75 0A E8 0E 04 8B EC 89 56 10 EB 71 3C 06 75  // .u.......V..q<.u
    4840: 10 E8 8C 03 8B EC 89 5E 0C 89 4E 14 89 56 10 EB  // .......^..N..V..
    4850: 5D 3C 07 75 02 EB 55 3C 08 75 0A E8 D0 03 8B EC  // ]<.u..U<.u......
    4860: 88 7E 0D EB 49 3C 09 75 02 EB 41 3C 0A 75 10 E8  // .~..I<.u..A<.u..
    4870: 65 04 8B EC 89 4E 14 89 7E 00 8C 46 1C EB 2F 3C  // e....N..~..F../<
    4880: 0B 75 02 EB 27 3C 10 75 0A E8 5A 04 8B EC 89 5E  // .u..'<.u..Z....^
    4890: 0C EB 1B 3C 11 75 02 EB 13 3C 15 75 0F E8 80 04  // ...<.u...<.u....
    48A0: 8B EC 89 5E 0C EB 07 B8 4F 01 EB 02 32 C0 8B EC  // ...^....O...2...
    48B0: 89 46 18 66 5F 66 5E 66 5D 66 5B 66 5A 66 59 66  // .F.f_f^f]f[fZfYf
    48C0: 58 07 1F C3 50 1E 2E 8E 1E 0F 03 8C D8 A3 38 58  // X...P.........8X
    48D0: A3 48 58 A3 5A 58 2E 8E 1E 07 03 A3 AA 04 1F 58  // .HX.ZX.........X
    48E0: CB 00 30 31 2E 30 30 00 56 45 53 41 00 03 C8 01  // ..01.00.VESA....
    48F0: 00 00 01 00 00 00 00 00 00 00 00 03 02 10 EB 00  // ................
    4900: 00 00 80 00 00 00 7A 48 00 00 B9 3F 00 8B DF 83  // ......zH...?....
    4910: C7 04 FC 66 33 C0 F3 66 AB 8B FB BE 80 48 B9 22  // ...f3..f.....H."
    4920: 00 F3 A4 06 1F 8C 4F 08 8C 47 10 8C 4F 18 8C 4F  // ......O..G..O..O
    4930: 1C 8C 4F 20 83 C7 22 89 7F 0E 0E 1F E8 85 D1 B0  // ..O ..".........
    4940: 4F 32 E4 C3 56 51 57 B9 10 00 66 33 C0 F3 66 AB  // O2..VQW...f3..f.
    4950: 5F 59 8C DB 06 1F C7 05 BB 00 C6 45 02 07 C7 45  // _Y.........E...E
    4960: 04 40 00 C7 45 06 40 00 C6 45 1B 06 C6 45 18 01  // .@..E.@..E...E..
    4970: C6 45 1A 01 C6 45 1E 01 66 C7 45 3E 00 84 D7 17  // .E...E..f.E>....
    4980: 8E DB E8 4F CA 66 0B C0 0F 84 E1 00 06 1F 66 89  // ...O.f........f.
    4990: 45 28 8C C8 66 C1 E0 10 B8 39 4C 66 89 45 0C 81  // E(..f....9Lf.E..
    49A0: F9 FF 81 0F 84 C2 00 80 E5 03 B2 01 53 8E DB BE  // ............S...
    49B0: 80 1C E8 31 CF 5B 06 1F 0F 84 B1 00 53 E8 AD D1  // ...1.[......S...
    49C0: 66 89 45 12 C7 45 16 08 10 8D 5C 0C E8 D8 E8 66  // f.E..E....\....f
    49D0: 89 45 1F 66 89 45 36 8D 5C 10 E8 CA E8 66 89 45  // .E.f.E6.\....f.E
    49E0: 23 66 89 45 3A 8D 5C 08 E8 BC E8 0A C0 75 03 5B  // #f.E:.\......u.[
    49F0: EB 7B E8 78 D1 66 C1 E8 10 3D 58 02 74 0D 3D 5E  // .{.x.f...=X.t.=^
    4A00: 01 74 08 77 0A C6 45 17 08 EB 04 C6 45 17 0E 2E  // .t.w..E.....E...
    4A10: A1 09 03 89 45 08 8D 5C 04 E8 8B E8 66 8B C8 66  // ....E..\....f..f
    4A20: C1 E9 10 D3 E0 89 45 10 89 45 32 B0 08 D2 E0 88  // ......E..E2.....
    4A30: 45 19 8D 5C 14 E8 6F E8 5B 3D 00 03 77 2F 53 8B  // E..\..o.[=..w/S.
    4A40: D8 B8 00 03 33 D2 F7 F3 5B FE C8 88 45 1D 88 45  // ....3...[...E..E
    4A50: 35 88 45 34 8E DB 57 53 BE 80 1C E8 DF C9 5B 5F  // 5.E4..WS......[_
    4A60: 0B C9 75 05 06 1F 83 25 FE 32 E4 EB 02 B4 03 B0  // ..u....%.2......
    4A70: 4F 8E DB 5E C3 00 81 FB FF 81 74 68 0A FF 75 04  // O..^......th..u.
    4A80: 8B C3 EB 21 F6 C7 08 75 61 8B CB B2 01 BE 20 1C  // ...!...ua..... .
    4A90: E8 53 CE 74 55 E8 B4 D0 0A C0 75 0E 66 C1 E8 10  // .S.tU.....u.f...
    4AA0: 80 E7 80 0A C7 E8 D5 02 EB 3A E8 23 CC 74 06 E8  // .........:.#.t..
    4AB0: 97 CA E8 E6 C3 BE 20 1C E8 56 C9 74 2D E8 A5 00  // ...... ..V.t-...
    4AC0: E8 2C 00 66 BB 20 1C 00 1C E8 77 D0 BE 00 1C E8  // .,.f. ....w.....
    4AD0: 7A D0 66 C1 E8 10 8B D8 32 C0 F6 C7 80 74 02 B0  // z.f.....2....t..
    4AE0: 40 E8 86 C9 B0 4F 32 E4 EB 04 B0 4F B4 03 C3 56  // @....O2....O...V
    4AF0: 06 33 C0 8E C0 BE 20 1C E8 72 D0 8B C8 66 C1 E8  // .3.... ..r...f..
    4B00: 10 8B D0 C1 E9 03 26 89 0E 4A 04 C1 EA 04 FE CA  // ......&..J......
    4B10: 26 88 16 84 04 26 C6 06 51 04 00 26 C6 06 50 04  // &....&..Q..&..P.
    4B20: 00 26 C6 06 49 04 62 26 C7 06 4C 04 00 A0 26 C6  // .&..I.b&..L...&.
    4B30: 06 85 04 10 26 C7 06 0C 01 11 62 8C C8 26 A3 0E  // ....&.....b..&..
    4B40: 01 07 5E C3 01 0F 00 0A 00 00 00 00 00 40 05 0F  // ..^..........@..
    4B50: FF 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E  // ................
    4B60: 0F 01 00 0F 00 FC BA C4 03 B8 00 01 EF B9 04 00  // ................
    4B70: B4 01 BE DC 4A AC 86 E0 EF 8A E0 FE C4 E2 F6 B8  // ....J...........
    4B80: 00 03 EF B9 09 00 BA CE 03 32 E4 BE E0 4A 8A C4  // .........2...J..
    4B90: EE AC 42 EE 4A FE C4 E2 F5 BA DA 03 EC B9 14 00  // ..B.J...........
    4BA0: BA C0 03 32 E4 BE E9 4A 8A C4 EE AC EE FE C4 E2  // ...2...J........
    4BB0: F7 C3 BE 00 1C E8 94 CF 66 C1 E8 10 8B D8 E8 64  // ........f......d
    4BC0: CF 75 05 E8 50 CF 75 04 B8 4F 00 C3 B8 4F 03 C3  // .u..P.u..O...O..
    4BD0: E8 52 CF 74 53 BE 00 1C 80 FB 00 74 18 80 FB 01  // .R.tS......t....
    4BE0: 75 05 E8 90 CF EB 1D 80 FB 02 75 10 8B C1 E8 43  // u.........u....C
    4BF0: CF D3 E8 8B C8 E8 33 CA 74 2E EB 08 80 FB 03 75  // ......3.t......u
    4C00: 24 E8 E7 CE E8 2D CF 8B D8 D3 E3 50 33 C0 BA 00  // $....-.....P3...
    4C10: 03 3B DA 77 05 BA FF FF EB 04 F7 F3 8B D0 58 8B  // .;.w..........X.
    4C20: C8 B8 4F 00 C3 32 C0 C3 B0 4F B4 03 C3 00 0A DB  // ..O..2...O......
    4C30: 75 07 8A EF E8 01 CB EB 05 E8 E6 CA 8A F8 B0 4F  // u..............O
    4C40: 32 E4 C3 00 E8 DE CE 74 2C BE 00 1C E8 FD CE 66  // 2......t,......f
    4C50: C1 E8 10 F6 C4 40 75 1D 0A FF 75 05 E8 1E 00 EB  // .....@u...u.....
    4C60: 0F 80 FF 01 75 14 BB 13 00 E8 09 E6 D1 E8 8B D0  // ....u...........
    4C70: B0 4F 32 E4 C3 B0 4F B4 03 C3 32 C0 C3 52 53 66  // .O2...O...2..RSf
    4C80: 50 81 E2 FF 02 D1 E2 8B C2 40 66 C1 E0 10 8B C2  // P........@f.....
    4C90: BB 13 00 E8 3A E5 BB 12 00 E8 34 E5 66 58 5B 5A  // ....:.....4.fX[Z
    4CA0: C3 9C 1E 06 66 50 66 51 66 52 66 53 66 55 66 56  // ....fPfQfRfSfUfV
    4CB0: 66 57 0E 1F E8 34 E6 E8 8A FF E8 53 E6 8B EC 89  // fW...4.....S....
    4CC0: 56 10 89 46 18 66 5F 66 5E 66 5D 66 5B 66 5A 66  // V..F.f_f^f]f[fZf
    4CD0: 59 66 58 07 1F 9D CB 0E 07 BF 14 90 2E 8B 0E 12  // YfX.............
    4CE0: 90 B8 4F 00 C3 00 0A DB 75 06 B7 04 B3 10 EB 26  // ..O.....u......&
    4CF0: 80 FB 01 75 14 E8 D8 C9 75 21 53 B1 01 0A FF 74  // ...u....u!S....t
    4D00: 02 B1 00 E8 ED C8 5B EB 0D 80 FB 02 75 0D E8 05  // ......[.....u...
    4D10: CA 8A F8 C0 E7 02 B0 4F 32 E4 C3 B8 4F 03 C3 00  // .......O2...O...
    4D20: 80 E3 01 0A DB 75 05 BB 02 01 EB 0E E8 A1 C9 75  // .....u.........u
    4D30: 0E 33 C0 53 E8 91 B8 5B 74 05 B0 4F 32 E4 C3 B0  // .3.S...[t..O2...
    4D40: 4F B4 03 C3 80 FC 1D 72 03 CD 42 C3 1E 06 66 50  // O......r..B...fP
    4D50: 66 51 66 52 66 53 66 55 66 56 66 57 0E 1F 50 0F  // fQfRfSfUfVfW..P.
    4D60: B6 C4 D1 E0 8B F0 58 2E FF 94 26 4D 66 5F 66 5E  // ......X...&Mf_f^
    4D70: 66 5D 66 5B 66 5A 66 59 66 58 07 1F C3 0E 1F 50  // f]f[fZfYfX.....P
    4D80: 0F B6 C4 D1 E0 8B F0 58 2E FF 94 26 4D C3 60 4D  // .......X...&M.`M
    4D90: 7C 86 95 86 B2 86 5F 4E B5 7D E7 7D 5A 7E DD 7E  // |....._N.}.}Z~.~
    4DA0: 6B 80 6F 80 78 83 49 84 CC 84 33 85 CE 86 30 87  // k.o.x.I...3...0.
    4DB0: D9 89 78 50 20 8E 14 4D 14 4D 14 4D 14 4D 14 4D  // ..xP ..M.M.M.M.M
    4DC0: 14 4D F0 8E F3 72 47 74 2E 8E 1E 07 03 80 26 87  // .M...rGt......&.
    4DD0: 04 F3 50 8A E0 80 E4 7F 80 FC 03 74 07 80 FC 12  // ..P........t....
    4DE0: 74 02 58 C3 E8 C4 01 3B D3 75 02 58 C3 BA CC 03  // t.X....;.u.X....
    4DF0: EC B2 B4 B1 30 26 F6 47 09 01 74 0C B2 D4 B1 20  // ....0&.G..t.... 
    4E00: A8 01 75 49 B5 09 EB 06 A8 01 74 41 B5 0B 53 E8  // ..uI......tA..S.
    4E10: 6A 41 0A FF 5B 75 0B 80 26 88 04 F0 08 2E 88 04  // jA..[u..&.......
    4E20: EB 2B 58 80 0E 87 04 08 80 26 10 04 CF 08 0E 10  // .+X......&......
    4E30: 04 89 16 63 04 C7 06 85 04 08 00 C6 06 84 04 18  // ...c............
    4E40: C7 06 0C 01 FE 59 8C 0E 0E 01 CD 42 C3 80 26 10  // .....Y.....B..&.
    4E50: 04 CF 08 0E 10 04 58 53 50 0E 1F 33 C9 8A C8 E8  // ......XSP..3....
    4E60: 6E C8 74 06 E8 E2 C6 E8 31 C0 B2 08 BE 40 1C E8  // n.t.....1....@..
    4E70: 74 CA BE 40 1C E8 99 C5 58 5B 0F 84 6E FF 2E 8E  // t..@....X[..n...
    4E80: 1E 07 03 0E 07 E8 13 29 0E 1F 53 66 BB 40 1C 00  // .......)..Sf.@..
    4E90: 1C E8 AF CC BE 00 1C B0 20 E8 CE C5 5B 2E 8E 1E  // ........ ...[...
    4EA0: 07 03 0E 07 E8 1C 2E E8 24 00 E8 28 3D E8 D1 01  // ........$..(=...
    4EB0: E8 8E 01 E8 AE 3E 0E 1F BE 00 1C B0 10 E8 AA C5  // .....>..........
    4EC0: E8 F7 2D E8 EF 2D C3 8B EC C6 46 1B 00 C3 E8 2F  // ..-..-....F..../
    4ED0: 00 E8 0A 00 E8 BD 00 E8 52 00 E8 5C 0A C3 53 83  // ........R..\..S.
    4EE0: C3 0A 8B 16 63 04 B9 19 00 B8 11 30 EF 32 C0 26  // ....c......0.2.&
    4EF0: 8A 27 EF 43 FE C0 E2 F7 5B 80 C2 06 32 C0 EE C3  // .'.C....[...2...
    4F00: 53 BA C4 03 83 C3 05 B9 04 00 B0 01 26 8A 27 3C  // S...........&.'<
    4F10: 01 75 03 80 CC 20 EF 43 FE C0 E2 F0 5B 26 8A 47  // .u... .C....[&.G
    4F20: 09 BA C2 03 EE B2 C4 B8 00 03 EF C3 8B F3 83 C6  // ................
    4F30: 23 BA DA 03 26 F6 47 09 01 75 02 B2 BA F6 06 89  // #...&.G..u......
    4F40: 04 08 74 1D 83 C6 10 EC B9 04 00 B4 10 B2 C0 80  // ..t.............
    4F50: FC 11 74 07 8A C4 EE 26 8A 04 EE 46 FE C4 E2 EF  // ..t....&...F....
    4F60: C3 53 EC 8B DE B9 14 00 32 E4 B2 C0 8A C4 EE FE  // .S......2.......
    4F70: C4 26 8A 07 EE 43 E2 F4 8A C4 EE 32 C0 EE 1E 06  // .&...C.....2....
    4F80: E8 49 2D 0B ED 74 09 1F 1E B9 10 00 F3 A4 46 A4  // .I-..t........F.
    4F90: 07 1F 5B C3 53 83 C3 37 B9 09 00 32 C0 BA CE 03  // ..[.S..7...2....
    4FA0: 26 8A 27 EF 43 FE C0 E2 F7 5B C3 BB 36 52 0E 07  // &.'.C....[..6R..
    4FB0: 8B D3 0A E4 7D 01 C3 E8 01 00 C3 33 F6 80 FC 03  // ....}......3....
    4FC0: 7F 3C 4A F6 06 89 04 10 75 20 A0 88 04 24 0F 3C  // .<J.....u ...$.<
    4FD0: 02 7E 24 3C 08 74 20 3C 06 74 1C 3C 07 74 18 B0  // .~$<.t <.t.<.t..
    4FE0: 40 F6 E4 03 D8 81 C3 00 04 C3 B0 40 D0 EC F6 E4  // @..........@....
    4FF0: 03 D8 81 C3 80 04 C3 B0 40 F6 E4 03 D8 C3 80 FC  // ........@.......
    5000: 07 75 11 F6 06 89 04 10 75 05 81 C3 00 01 C3 81  // .u......u.......
    5010: C3 00 05 C3 BF B8 4F BE D9 4F 33 C9 E8 4E 00 C3  // ......O..O3..N..
    5020: 04 80 00 05 80 00 06 C0 00 0D 80 02 0E C0 02 0F  // ................
    5030: 80 03 10 C0 03 11 40 05 12 80 05 13 C0 05 62 40  // ......@.......b@
    5040: 01 53 8A 1E 49 04 80 FB 07 7F 10 32 FF D1 E3 2E  // .S..I......2....
    5050: 8B 87 F5 4F A2 65 04 88 26 66 04 5B C3 2C 30 28  // ...O.e..&f.[.,0(
    5060: 30 2D 30 29 30 2A 30 2E 30 1E 3F 29 30 2E 38 25  // 0-0)0*0.0.?)0.8%
    5070: 75 07 2E 03 5D 01 33 F6 C3 83 C7 03 3B FE 75 ED  // u...].3.....;.u.
    5080: C3 1E 06 2E 8E 1E 07 03 F6 06 87 04 80 75 49 83  // .............uI.
    5090: 3E 4C 04 00 74 42 A0 49 04 B9 00 20 2E 8B 3E 0D  // >L..tB.I... ..>.
    50A0: 03 26 F6 47 33 01 75 0E 26 F6 47 09 01 75 1B 2E  // .&.G3.u.&.G..u..
    50B0: 8B 3E 0B 03 EB 14 3C 06 7E 0B 2E 8B 3E 09 03 26  // .>....<.~...>..&
    50C0: 8A 67 37 B5 40 66 33 C0 EB 06 66 B8 20 07 20 07  // .g7.@f3...f. . .
    50D0: 8E C7 66 33 FF F3 66 AB 80 26 87 04 7F 07 1F C3  // ..f3..f..&......
    50E0: 2E 8E 1E 07 03 80 FB 10 75 03 E9 7A 01 80 FB 20  // ........u..z... 
    50F0: 75 03 E9 9B 01 80 FB 32 75 1F BA CC 03 0A C0 75  // u......2u......u
    5100: 09 EC 0C 02 B2 C2 EE E9 F3 00 FE C8 0F 85 F3 00  // ................
    5110: EC 24 FD B2 C2 EE E9 E4 00 80 FB 35 75 28 3C 80  // .$.........5u(<.
    5120: 75 08 80 0E 89 04 40 E9 D3 00 F6 06 89 04 40 0F  // u.....@.......@.
    5130: 84 D0 00 0A C0 0F 84 CA 00 FE C8 75 06 E8 98 07  // ...........u....
    5140: E9 BA 00 E9 BD 00 80 FB 30 74 03 E9 96 00 50 E8  // ........0t....P.
    5150: 2A 3E 8A EF BA CC 03 EC 8A C8 58 0A C0 75 30 B7  // *>........X..u0.
    5160: 08 F6 C1 01 75 12 0A ED 75 0B A0 10 04 24 30 3C  // ....u...u....$0<
    5170: 30 75 10 B7 02 E9 8B 00 A0 10 04 24 30 3C 30 75  // 0u.........$0<0u
    5180: 02 B7 02 80 26 89 04 6F 80 0E 89 04 80 EB 36 3C  // ....&..o......6<
    5190: 01 75 41 80 26 89 04 6F B7 09 F6 C1 01 75 15 B7  // .uA.&..o.....u..
    51A0: 0B A0 10 04 24 30 3C 30 74 1B B7 09 0A ED 74 15  // ....$0<0t.....t.
    51B0: B7 05 EB 11 A0 10 04 24 30 3C 30 75 08 B7 0B 0A  // .......$0<0u....
    51C0: ED 74 02 B7 03 8A 1E 88 04 80 E3 F0 0A DF 88 1E  // .t..............
    51D0: 88 04 EB 29 3C 02 75 2B 80 26 89 04 6F 80 0E 89  // ...)<.u+.&..o...
    51E0: 04 10 EB B4 80 FB 31 75 1B 0A C0 74 0B 3C 01 75  // ......1u...t.<.u
    51F0: 0C 80 0E 89 04 08 EB 05 80 26 89 04 F7 8B EC C6  // .........&......
    5200: 46 1A 12 C3 80 FB 33 75 16 3C 00 74 0B 3C 01 75  // F.....3u.<.t.<.u
    5210: EC 80 26 89 04 FD EB E5 80 0E 89 04 02 EB DE 80  // ..&.............
    5220: FB 34 75 17 3C 00 75 07 80 26 87 04 FE EB CE 3C  // .4u.<.u..&.....<
    5230: 01 75 07 80 0E 87 04 01 EB C3 C3 80 FB 36 75 26  // .u...........6u&
    5240: BB 20 FF 3C 01 74 09 BB 00 DF 3C 00 74 02 EB AD  // . .<.t....<.t...
    5250: E8 02 00 EB A8 9C FA BA C4 03 B0 01 EE 42 EC 22  // .............B."
    5260: C7 0A C3 EE 9D C3 C3 B3 03 B7 00 BA CC 03 EC A8  // ................
    5270: 01 75 02 B7 01 A0 88 04 8A E0 B1 04 D2 EC 25 0F  // .u............%.
    5280: 0F 8B C8 8B EC 89 5E 0E 89 4E 16 C6 46 1A 12 C3  // ......^..N..F...
    5290: 9C FA C7 06 14 00 E0 77 8C 0E 16 00 9D C3 28 18  // .......w......(.
    52A0: 08 00 08 09 03 00 02 63 2D 27 28 90 2B A0 BF 1F  // .......c-'(.+...
    52B0: 00 C7 06 07 00 00 00 00 9C 8E 8F 14 1F 96 B9 A3  // ................
    52C0: FF 00 01 02 03 04 05 06 07 10 11 12 13 14 15 16  // ................
    52D0: 17 08 00 0F 00 00 00 00 00 00 10 0E 00 FF 50 18  // ..............P.
    52E0: 08 00 10 01 03 00 02 63 5F 4F 50 82 55 81 BF 1F  // .......c_OP.U...
    52F0: 00 C7 06 07 00 00 00 00 9C 8E 8F 28 1F 96 B9 A3  // ...........(....
    5300: FF 00 01 02 03 04 05 06 07 10 11 12 13 14 15 16  // ................
    5310: 17 08 00 0F 00 00 00 00 00 00 10 0E 00 FF 28 18  // ..............(.
    5320: 08 00 40 09 03 00 02 63 2D 27 28 90 2B 80 BF 1F  // ..@....c-'(.+...
    5330: 00 C1 00 00 00 00 00 00 9C 8E 8F 14 00 96 B9 A2  // ................
    5340: FF 00 13 15 17 02 04 06 07 10 11 12 13 14 15 16  // ................
    5350: 17 01 00 03 00 00 00 00 00 00 30 0F 00 FF 50 18  // ..........0...P.
    5360: 08 00 40 01 01 00 06 63 5F 4F 50 82 54 80 BF 1F  // ..@....c_OP.T...
    5370: 00 C1 00 00 00 00 00 00 9C 8E 8F 28 00 96 B9 C2  // ...........(....
    5380: FF 00 17 17 17 17 17 17 17 17 17 17 17 17 17 17  // ................
    5390: 17 01 00 01 00 00 00 00 00 00 00 0D 00 FF 50 18  // ..............P.
    53A0: 0E 00 10 00 03 00 03 A6 5F 4F 50 82 55 81 BF 1F  // ........_OP.U...
    53B0: 00 4D 0B 0C 00 00 00 00 83 85 5D 28 0D 63 BA A3  // .M........](.c..
    53C0: FF 00 08 08 08 08 08 08 08 10 18 18 18 18 18 18  // ................
    53D0: 18 0E 00 0F 08 00 00 00 00 00 10 0A 00 FF 50 1D  // ..............P.
    53E0: 10 00 A0 01 0F 00 0A E3 5F 4F 50 82 54 80 0B 3E  // ........_OP.T..>
    53F0: 00 40 00 00 00 00 00 00 EA 8C DF 50 00 E7 04 E3  // .@.........P....
    5400: FF 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E  // ................
    5410: 0F 01 00 0F 00 10 00 00 00 00 40 05 0F FF 00 05  // ..........@.....
    5420: 11 1C 08 0B 14 28 0E 18 2D 32 20 24 38 3F 00 05  // .....(..-2 $8?..
    5430: 08 0B 0E 11 14 18 1C 20 24 28 2D 32 38 3F 07 0C  // ....... $(-28?..
    5440: 10 15 1A 18 16 15 13 1C 25 2F 38 33 2E 2A 25 27  // ........%/83.*%'
    5450: 29 2A 2C 23 19 10 23 25 27 2A 2C 2B 2A 29 29 2D  // )*,#..#%'*,+*))-
    5460: 32 37 3B 39 37 34 32 33 34 35 35 31 2C 27 2F 30  // 27;974234551,'/0
    5470: 32 33 34 34 33 33 32 35 38 3A 3D 3C 3A 39 38 38  // 234433258:=<:988
    5480: 39 39 3A 37 34 31 03 05 07 09 0B 0B 0A 09 08 0D  // 99:741..........
    5490: 11 15 19 17 15 13 11 11 12 13 14 0F 0B 07 10 10  // ................
    54A0: 12 13 14 13 13 13 12 14 16 18 1A 19 18 17 16 17  // ................
    54B0: 17 17 18 15 14 11 15 15 16 17 17 17 17 17 16 18  // ................
    54C0: 19 1A 1B 1B 1A 19 19 19 19 19 1A 18 17 16 02 03  // ................
    54D0: 04 05 07 06 06 05 05 07 0A 0C 0E 0D 0C 0B 09 0A  // ................
    54E0: 0A 0B 0B 09 06 04 09 09 0A 0B 0B 0B 0B 0B 0A 0C  // ................
    54F0: 0D 0E 0F 0F 0E 0D 0D 0D 0D 0D 0E 0C 0B 0A 0C 0C  // ................
    5500: 0C 0D 0D 0D 0D 0D 0C 0D 0E 0F 0F 0F 0F 0E 0E 0E  // ................
    5510: 0E 0E 0E 0E 0D 0C 00 00 00 00 00 00 00 00 28 18  // ..............(.
    5520: 08 00 20 09 0F 00 06 63 2D 27 28 90 2B 80 BF 1F  // .. ....c-'(.+...
    5530: 00 C0 00 00 00 00 00 00 9C 8E 8F 14 00 96 B9 E3  // ................
    5540: FF 00 01 02 03 04 05 06 07 10 11 12 13 14 15 16  // ................
    5550: 17 01 00 0F 00 00 00 00 00 00 00 05 0F FF 50 18  // ..............P.
    5560: 08 00 40 01 0F 00 06 63 5F 4F 50 82 54 80 BF 1F  // ..@....c_OP.T...
    5570: 00 C0 00 00 00 00 00 00 9C 8E 8F 28 00 96 B9 E3  // ...........(....
    5580: FF 00 01 02 03 04 05 06 07 10 11 12 13 14 15 16  // ................
    5590: 17 01 00 0F 00 00 00 00 00 00 00 05 0F FF 00 05  // ................
    55A0: 11 1C 08 0B 25 28 02 07 1B 20 0F 14 28 2C 0C 11  // ....%(... ..(,..
    55B0: 25 2A 14 1E 32 36 0F 13 27 2C 1B 20 34 39 06 0B  // %*..26..',. 49..
    55C0: 1F 24 13 18 2C 30 09 0D 21 26 15 1A 2E 33 13 17  // .$..,0..!&...3..
    55D0: 2B 30 1F 24 38 3D 0E 18 2D 32 20 24 38 3F 00 05  // +0.$8=..-2 $8?..
    55E0: 11 1C 08 0B 14 18 00 05 11 1C 08 0B 14 18 0E 18  // ................
    55F0: 2D 32 20 24 38 3F 0E 18 2D 32 20 24 38 3F 00 05  // -2 $8?..-2 $8?..
    5600: 11 1C 08 0B 14 18 00 05 11 1C 08 0B 14 18 0E 18  // ................
    5610: 2D 32 20 24 38 3F 0E 18 2D 32 20 24 38 3F 50 18  // -2 $8?..-2 $8?P.
    5620: 0E 00 80 01 0F 00 06 A2 5F 4F 50 82 54 80 BF 1F  // ........_OP.T...
    5630: 00 40 00 00 00 00 00 00 83 85 5D 28 0F 63 BA E3  // .@........](.c..
    5640: FF 00 08 00 00 18 18 00 00 00 08 00 00 00 18 00  // ................
    5650: 00 0B 00 05 00 00 00 00 00 00 00 05 05 FF 50 18  // ..............P.
    5660: 0E 00 80 01 0F 00 06 A3 5F 4F 50 82 54 80 BF 1F  // ........_OP.T...
    5670: 00 40 00 00 00 00 00 00 83 85 5D 28 0F 63 BA E3  // .@........](.c..
    5680: FF 00 01 02 03 04 05 14 07 38 39 3A 3B 3C 3D 3E  // .........89:;<=>
    5690: 3F 01 00 0F 00 00 00 00 00 00 00 05 0F FF 28 18  // ?.............(.
    56A0: 0E 00 08 09 03 00 02 A3 2D 27 28 90 2B A0 BF 1F  // ........-'(.+...
    56B0: 00 4D 0B 0C 00 00 00 00 83 85 5D 14 1F 63 BA A3  // .M........]..c..
    56C0: FF 00 01 02 03 04 05 14 07 38 39 3A 3B 3C 3D 3E  // .........89:;<=>
    56D0: 3F 08 00 0F 00 00 00 00 00 00 10 0E 00 FF 50 18  // ?.............P.
    56E0: 0E 00 10 01 03 00 02 A3 5F 4F 50 82 55 81 BF 1F  // ........_OP.U...
    56F0: 00 4D 0B 0C 00 00 00 00 83 85 5D 28 1F 63 BA A3  // .M........](.c..
    5700: FF 00 01 02 03 04 05 14 07 38 39 3A 3B 3C 3D 3E  // .........89:;<=>
    5710: 3F 08 00 0F 00 00 00 00 00 00 10 0E 00 FF 28 18  // ?.............(.
    5720: 10 00 08 08 03 00 02 67 2D 27 28 90 2B A0 BF 1F  // .......g-'(.+...
    5730: 00 4F 0D 0E 00 00 00 00 9C 8E 8F 14 1F 96 B9 A3  // .O..............
    5740: FF 00 01 02 03 04 05 14 07 38 39 3A 3B 3C 3D 3E  // .........89:;<=>
    5750: 3F 0C 00 0F 08 00 00 00 00 00 10 0E 00 FF 50 18  // ?.............P.
    5760: 10 00 10 00 03 00 02 67 5F 4F 50 82 55 81 BF 1F  // .......g_OP.U...
    5770: 00 4F 0D 0E 00 00 00 00 9C 8E 8F 28 1F 96 B9 A3  // .O.........(....
    5780: FF 00 01 02 03 04 05 14 07 38 39 3A 3B 3C 3D 3E  // .........89:;<=>
    5790: 3F 0C 00 0F 08 00 00 00 00 00 10 0E 00 FF 50 18  // ?.............P.
    57A0: 10 00 10 00 03 00 02 66 5F 4F 50 82 55 81 BF 1F  // .......f_OP.U...
    57B0: 00 4F 0D 0E 00 00 00 00 9C 8E 8F 28 0F 96 B9 A3  // .O.........(....
    57C0: FF 00 08 08 08 08 08 08 08 10 18 18 18 18 18 18  // ................
    57D0: 18 0E 00 0F 08 00 00 00 00 00 10 0A 00 FF 50 1D  // ..............P.
    57E0: 10 00 A0 01 0F 00 06 E3 5F 4F 50 82 54 80 0B 3E  // ........_OP.T..>
    57F0: 00 40 00 00 00 00 00 00 EA 8C DF 28 00 E7 04 C3  // .@.........(....
    5800: FF 00 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F  // ..??????????????
    5810: 3F 01 00 0F 00 00 00 00 00 00 00 05 01 FF 50 1D  // ?.............P.
    5820: 10 00 A0 01 0F 00 06 E3 5F 4F 50 82 54 80 0B 3E  // ........_OP.T..>
    5830: 00 40 00 00 00 00 00 00 EA 8C DF 28 00 E7 04 E3  // .@.........(....
    5840: FF 00 01 02 03 04 05 14 07 38 39 3A 3B 3C 3D 3E  // .........89:;<=>
    5850: 3F 01 00 0F 00 00 00 00 00 00 00 05 0F FF 28 18  // ?.............(.
    5860: 08 00 20 01 0F 00 0E 63 5F 4F 50 82 54 80 BF 1F  // .. ....c_OP.T...
    5870: 00 41 00 00 00 00 00 00 9C 8E 8F 28 40 96 B9 A3  // .A.........(@...
    5880: FF 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E  // ................
    5890: 0F 41 00 0F 00 00 00 00 00 00 40 05 0F FF 36 52  // .A........@...6R
    58A0: 00 C0 00 00 00 00 00 00 00 00 00 00 00 00 56 58  // ..............VX
    58B0: 00 C0 00 00 00 00 00 00 00 00 00 00 00 00 1A 00  // ................
    58C0: EE 8F 00 C0 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    58D0: 00 00 00 00 00 00 00 00 1E E8 10 00 2E 8E 1E 07  // ................
    58E0: 03 E8 F8 36 E8 CF 36 E8 70 1A 1F C3 2E 8E 1E 07  // ...6..6.p.......
    58F0: 03 C7 06 87 04 60 F9 C6 06 8A 04 0B A0 89 04 0C  // .....`..........
    5900: 11 24 17 A2 89 04 B4 01 E8 6D 1E A0 89 04 80 26  // .$.......m.....&
    5910: 10 04 CF 80 0E 10 04 20 C7 06 63 04 D4 03 0E 1F  // ....... ..c.....
    5920: E8 E7 B5 F7 C1 02 00 75 03 E8 6F B5 C3 1E 2E 8E  // .......u..o.....
    5930: 1E 07 03 0E 07 EB 00 1F C3 F6 06 89 04 08 74 01  // ..............t.
    5940: C3 53 BA C8 03 EC B0 FF B2 C6 EE B2 C8 80 3E 63  // .S............>c
    5950: 04 B4 75 2F BE B2 59 B9 40 00 33 DB 9C FA 8A C3  // ..u/..Y.@.3.....
    5960: EE 8B FB C1 EF 03 83 E7 03 03 FE 2E 8A 05 42 EE  // ..............B.
    5970: 2E 8A 45 04 EE 2E 8A 45 08 EE FE C3 4A E2 DF 9D  // ..E....E....J...
    5980: E9 85 00 26 8A 47 2B F6 06 89 04 06 74 31 B9 F8  // ...&.G+.....t1..
    5990: 00 BF B6 53 3C 08 74 11 B9 40 00 BF 36 55 3C 38  // ...S<.t..@..6U<8
    59A0: 74 07 3C 3F 74 03 BF 76 55 33 DB 9C FA 8A C3 EE  // t.<?t..vU3......
    59B0: 2E 8A 01 42 EE EE EE FE C3 4A E2 F1 9D EB 49 3C  // ...B.....J....I<
    59C0: 08 74 25 3C 38 74 2E 3C 3F 74 2A B9 08 00 33 DB  // .t%<8t.<?t*...3.
    59D0: 51 E8 0B D3 B9 08 00 F7 C3 10 00 74 03 83 C7 18  // Q..........t....
    59E0: E8 67 00 59 E2 EA EB 20 E8 F4 D2 B9 00 01 33 DB  // .g.Y... ......3.
    59F0: E8 57 00 EB 13 B9 40 00 33 DB 51 E8 28 00 8A C3  // .W....@.3.Q.(...
    5A00: E8 B7 2F FE C3 59 E2 F2 5B C3 00 2A 00 2A 00 2A  // ../..Y..[..*.*.*
    5A10: 00 2A 15 3F 15 3F 15 3F 15 3F 00 2A 00 3F 00 2A  // .*.?.?.?.?.*.?.*
    5A20: 00 3F 00 2A 00 3F 8B FB C1 EF 02 83 E7 0F 2E 8A  // .?.*.?..........
    5A30: B5 A2 59 8B FB D1 EF 83 E7 0F 2E 8A AD A2 59 8B  // ..Y...........Y.
    5A40: FB 83 E7 0F 2E 8A 8D A2 59 C3 9C 8A C3 FA EE 2E  // ........Y.......
    5A50: 8A 05 42 EE 47 2E 8A 05 EE 47 2E 8A 05 EE 47 FE  // ..B.G....G....G.
    5A60: C3 4A E2 E7 9D C3 00 00 00 00 00 00 00 00 7E 81  // .J............~.
    5A70: A5 81 BD 99 81 7E 7C FE D6 BA C6 FE 7C 00 C6 EE  // .....~|.....|...
    5A80: FE FE 7C 38 10 00 10 38 7C FE 7C 38 10 00 10 38  // ..|8...8|.|8...8
    5A90: 10 EE EE 10 38 00 38 7C FE FE 6C 10 38 00 00 18  // ....8.8|..l.8...
    5AA0: 3C 7E 3C 18 00 00 FF E7 C3 81 C3 E7 FF FF 00 18  // <~<.............
    5AB0: 3C 66 66 3C 18 00 FF E7 C3 99 99 C3 E7 FF 1E 0E  // <ff<............
    5AC0: 1E 36 78 CC CC 78 7E C3 C3 7E 18 7E 18 18 1E 1A  // .6x..x~..~.~....
    5AD0: 1E 18 18 70 F0 60 3E 3E 36 36 F6 66 1E 0C DB 3C  // ...p.`>>66.f...<
    5AE0: 66 E7 66 3C DB 00 80 C0 F0 F8 F0 C0 80 00 02 06  // f.f<............
    5AF0: 1E 3E 1E 06 02 00 18 3C 7E 18 7E 3C 18 00 66 66  // .>.....<~.~<..ff
    5B00: 66 66 66 00 66 00 7F DB 7B 3B 1B 1B 1B 00 3C 66  // fff.f...{;....<f
    5B10: 38 6C 6C 38 CC 78 00 00 00 00 FE FE FE 00 18 3C  // 8ll8.x.........<
    5B20: 7E 18 7E 3C 18 7E 18 3C 7E 18 18 18 18 00 18 18  // ~.~<.~.<~.......
    5B30: 18 18 7E 3C 18 00 00 18 1C FE 1C 18 00 00 00 30  // ..~<...........0
    5B40: 70 FE 70 30 00 00 00 00 C0 C0 C0 FE 00 00 00 24  // p.p0...........$
    5B50: 66 FF 66 24 00 00 00 10 38 7C 7C FE 00 00 00 FE  // f.f$....8||.....
    5B60: 7C 7C 38 10 00 00 00 00 00 00 00 00 00 00 18 3C  // ||8............<
    5B70: 3C 18 18 00 18 00 6C 6C 6C 00 00 00 00 00 6C 6C  // <.....lll.....ll
    5B80: FE 6C FE 6C 6C 00 18 7E C0 7C 06 FC 18 00 00 C6  // .l.ll..~.|......
    5B90: 0C 18 30 60 C6 00 38 6C 38 76 CC CC 76 00 18 18  // ..0`..8l8v..v...
    5BA0: 30 00 00 00 00 00 18 30 60 60 60 30 18 00 60 30  // 0......0```0..`0
    5BB0: 18 18 18 30 60 00 00 EE 7C FE 7C EE 00 00 00 18  // ...0`...|.|.....
    5BC0: 18 7E 18 18 00 00 00 00 00 00 18 18 30 00 00 00  // .~..........0...
    5BD0: 00 FE 00 00 00 00 00 00 00 00 00 38 38 00 06 0C  // ...........88...
    5BE0: 18 30 60 C0 80 00 7C C6 CE DE F6 E6 7C 00 18 78  // .0`...|.....|..x
    5BF0: 18 18 18 18 7E 00 7C C6 0C 18 30 66 FE 00 7C C6  // ....~.|...0f..|.
    5C00: 06 3C 06 C6 7C 00 0C 1C 3C 6C FE 0C 0C 00 FE C0  // .<..|...<l......
    5C10: FC 06 06 C6 7C 00 7C C6 C0 FC C6 C6 7C 00 FE C6  // ....|.|.....|...
    5C20: 06 0C 18 18 18 00 7C C6 C6 7C C6 C6 7C 00 7C C6  // ......|..|..|.|.
    5C30: C6 7E 06 C6 7C 00 00 1C 1C 00 00 1C 1C 00 00 18  // .~..|...........
    5C40: 18 00 00 18 18 30 0C 18 30 60 30 18 0C 00 00 00  // .....0..0`0.....
    5C50: FE 00 00 FE 00 00 60 30 18 0C 18 30 60 00 7C C6  // ......`0...0`.|.
    5C60: 06 0C 18 00 18 00 7C C6 C6 DE DC C0 7E 00 38 6C  // ......|.....~.8l
    5C70: C6 C6 FE C6 C6 00 FC 66 66 7C 66 66 FC 00 3C 66  // .......ff|ff..<f
    5C80: C0 C0 C0 66 3C 00 F8 6C 66 66 66 6C F8 00 FE C2  // ...f<..lfffl....
    5C90: C0 F8 C0 C2 FE 00 FE 62 60 7C 60 60 F0 00 7C C6  // .......b`|``..|.
    5CA0: C0 C0 DE C6 7C 00 C6 C6 C6 FE C6 C6 C6 00 3C 18  // ....|.........<.
    5CB0: 18 18 18 18 3C 00 3C 18 18 18 D8 D8 70 00 C6 CC  // ....<.<.....p...
    5CC0: D8 F0 D8 CC C6 00 F0 60 60 60 60 62 FE 00 C6 EE  // .......````b....
    5CD0: FE D6 D6 C6 C6 00 C6 E6 E6 F6 DE CE C6 00 7C C6  // ..............|.
    5CE0: C6 C6 C6 C6 7C 00 FC 66 66 7C 60 60 F0 00 7C C6  // ....|..ff|``..|.
    5CF0: C6 C6 C6 D6 7C 06 FC C6 C6 FC D8 CC C6 00 7C C6  // ....|.........|.
    5D00: C0 7C 06 C6 7C 00 7E 5A 18 18 18 18 3C 00 C6 C6  // .|..|.~Z....<...
    5D10: C6 C6 C6 C6 7C 00 C6 C6 C6 C6 6C 38 10 00 C6 C6  // ....|.....l8....
    5D20: D6 D6 FE EE C6 00 C6 6C 38 38 38 6C C6 00 66 66  // .......l888l..ff
    5D30: 66 3C 18 18 3C 00 FE 86 0C 18 30 62 FE 00 7C 60  // f<..<.....0b..|`
    5D40: 60 60 60 60 7C 00 C0 60 30 18 0C 06 02 00 7C 0C  // ````|..`0.....|.
    5D50: 0C 0C 0C 0C 7C 00 10 38 6C C6 00 00 00 00 00 00  // ....|..8l.......
    5D60: 00 00 00 00 00 FF 30 30 18 00 00 00 00 00 00 00  // ......00........
    5D70: 78 0C 7C CC 7E 00 E0 60 7C 66 66 66 FC 00 00 00  // x.|.~..`|fff....
    5D80: 7C C6 C0 C6 7C 00 1C 0C 7C CC CC CC 7E 00 00 00  // |...|...|...~...
    5D90: 7C C6 FE C0 7C 00 1C 36 30 FC 30 30 78 00 00 00  // |...|..60.00x...
    5DA0: 76 CE C6 7E 06 7C E0 60 7C 66 66 66 E6 00 18 00  // v..~.|.`|fff....
    5DB0: 38 18 18 18 3C 00 0C 00 1C 0C 0C 0C CC 78 E0 60  // 8...<........x.`
    5DC0: 66 6C 78 6C E6 00 18 18 18 18 18 18 1C 00 00 00  // flxl............
    5DD0: 6C FE D6 D6 C6 00 00 00 DC 66 66 66 66 00 00 00  // l........ffff...
    5DE0: 7C C6 C6 C6 7C 00 00 00 DC 66 66 7C 60 F0 00 00  // |...|....ff|`...
    5DF0: 76 CC CC 7C 0C 1E 00 00 DC 66 60 60 F0 00 00 00  // v..|.....f``....
    5E00: 7C C0 7C 06 7C 00 30 30 FC 30 30 36 1C 00 00 00  // |.|.|.00.006....
    5E10: CC CC CC CC 76 00 00 00 C6 C6 6C 38 10 00 00 00  // ....v.....l8....
    5E20: C6 C6 D6 FE 6C 00 00 00 C6 6C 38 6C C6 00 00 00  // ....l....l8l....
    5E30: C6 C6 CE 76 06 7C 00 00 FC 98 30 64 FC 00 0E 18  // ...v.|....0d....
    5E40: 18 70 18 18 0E 00 18 18 18 00 18 18 18 00 70 18  // .p............p.
    5E50: 18 0E 18 18 70 00 76 DC 00 00 00 00 00 00 00 10  // ....p.v.........
    5E60: 38 38 6C 6C FE 00 3C 66 C0 66 3C 18 CC 78 00 C6  // 88ll..<f.f<..x..
    5E70: 00 C6 C6 CE 76 00 0E 00 7C C6 FE C0 7C 00 7C C6  // ....v...|...|.|.
    5E80: 78 0C 7C CC 7E 00 C6 00 78 0C 7C CC 7E 00 E0 00  // x.|.~...x.|.~...
    5E90: 78 0C 7C CC 7E 00 38 38 78 0C 7C CC 7E 00 00 00  // x.|.~.88x.|.~...
    5EA0: 7C C0 7C 18 6C 38 7C C6 7C C6 FE C0 7C 00 C6 00  // |.|.l8|.|...|...
    5EB0: 7C C6 FE C0 7C 00 E0 00 7C C6 FE C0 7C 00 66 00  // |...|...|...|.f.
    5EC0: 38 18 18 18 3C 00 7C C6 38 18 18 18 3C 00 00 00  // 8...<.|.8...<...
    5ED0: 38 18 18 18 3C 00 C6 38 6C C6 FE C6 C6 00 38 38  // 8...<..8l.....88
    5EE0: 00 7C C6 FE C6 00 0E 00 FE C0 F8 C0 FE 00 00 00  // .|..............
    5EF0: 6C 9A 7E D8 6E 00 7E D8 D8 FE D8 D8 DE 00 7C C6  // l.~.n.~.......|.
    5F00: 00 7C C6 C6 7C 00 00 C6 00 7C C6 C6 7C 00 00 E0  // .|..|....|..|...
    5F10: 00 7C C6 C6 7C 00 7C C6 00 C6 C6 CE 76 00 00 E0  // .|..|.|.....v...
    5F20: 00 C6 C6 CE 76 00 18 00 3C 18 18 18 3C 00 C6 38  // ....v...<...<..8
    5F30: 6C C6 C6 6C 38 00 C6 00 C6 C6 C6 C6 7C 00 00 18  // l..l8.......|...
    5F40: 7E D8 D8 7E 18 00 38 6C 60 F0 66 F6 6C 00 C3 66  // ~..~..8l`.f.l..f
    5F50: 3C 7E 18 3C 18 00 3E 63 38 0E 63 3E 00 1C 00 3E  // <~.<..>c8.c>...>
    5F60: 61 3C 86 7C 00 1C 0E 00 78 0C 7C CC 7E 00 1C 00  // a<.|....x.|.~...
    5F70: 38 18 18 18 3C 00 00 0E 00 7C C6 C6 7C 00 00 0E  // 8...<....|..|...
    5F80: 00 CC CC DC 76 00 00 FC 00 BC 66 66 E6 00 FE 00  // ....v.....ff....
    5F90: C6 E6 F6 CE C6 00 3E 00 3E 60 67 63 3D 00 3E 00  // ......>.>`gc=.>.
    5FA0: 76 CE C6 7E 06 7C 18 00 18 30 60 66 3C 00 00 00  // v..~.|...0`f<...
    5FB0: 00 7C 60 60 00 00 00 00 00 7C 0C 0C 00 00 C0 CC  // .|``.....|......
    5FC0: D8 30 7C 36 0C 3E C0 CC D8 30 6C 3C 7E 0C 18 00  // .0|6.>...0l<~...
    5FD0: 18 18 3C 3C 18 00 00 36 6C D8 6C 36 00 00 00 D8  // ..<<...6l.l6....
    5FE0: 6C 36 6C D8 00 00 22 88 22 88 22 88 22 88 55 AA  // l6l...".".".".U.
    5FF0: 55 AA 55 AA 55 AA DD 77 DD 77 DD 77 DD 77 18 18  // U.U.U..w.w.w.w..
    6000: 18 18 18 18 18 18 18 18 18 18 F8 18 18 18 18 18  // ................
    6010: F8 18 F8 18 18 18 36 36 36 36 F6 36 36 36 00 00  // ......6666.666..
    6020: 00 00 FE 36 36 36 00 00 F8 18 F8 18 18 18 36 36  // ...666........66
    6030: F6 06 F6 36 36 36 36 36 36 36 36 36 36 36 00 00  // ...66666666666..
    6040: FE 06 F6 36 36 36 36 36 F6 06 FE 00 00 00 36 36  // ...66666......66
    6050: 36 36 FE 00 00 00 18 18 F8 18 F8 00 00 00 00 00  // 66..............
    6060: 00 00 F8 18 18 18 18 18 18 18 1F 00 00 00 18 18  // ................
    6070: 18 18 FF 00 00 00 00 00 00 00 FF 18 18 18 18 18  // ................
    6080: 18 18 1F 18 18 18 00 00 00 00 FF 00 00 00 18 18  // ................
    6090: 18 18 FF 18 18 18 18 18 1F 18 1F 18 18 18 36 36  // ..............66
    60A0: 36 36 37 36 36 36 36 36 37 30 3F 00 00 00 00 00  // 6676666670?.....
    60B0: 3F 30 37 36 36 36 36 36 F7 00 FF 00 00 00 00 00  // ?0766666........
    60C0: FF 00 F7 36 36 36 36 36 37 30 37 36 36 36 00 00  // ...66666707666..
    60D0: FF 00 FF 00 00 00 36 36 F7 00 F7 36 36 36 18 18  // ......66...666..
    60E0: FF 00 FF 00 00 00 36 36 36 36 FF 00 00 00 00 00  // ......6666......
    60F0: FF 00 FF 18 18 18 00 00 00 00 FF 36 36 36 36 36  // ...........66666
    6100: 36 36 3F 00 00 00 18 18 1F 18 1F 00 00 00 00 00  // 66?.............
    6110: 1F 18 1F 18 18 18 00 00 00 00 3F 36 36 36 36 36  // ..........?66666
    6120: 36 36 FF 36 36 36 18 18 FF 18 FF 18 18 18 18 18  // 66.666..........
    6130: 18 18 F8 00 00 00 00 00 00 00 1F 18 18 18 FF FF  // ................
    6140: FF FF FF FF FF FF 00 00 00 00 FF FF FF FF F0 F0  // ................
    6150: F0 F0 F0 F0 F0 F0 0F 0F 0F 0F 0F 0F 0F 0F FF FF  // ................
    6160: FF FF 00 00 00 00 00 00 66 DC D8 DC 66 00 00 78  // ........f...f..x
    6170: CC F8 CC C6 CC 00 00 FE 62 60 60 60 E0 00 00 FE  // ........b```....
    6180: 6C 6C 6C 6C 6C 00 FE C6 60 30 60 C6 FE 00 00 7E  // lllll...`0`....~
    6190: D8 CC CC D8 70 00 00 66 66 66 66 7C C0 00 00 76  // ....p..ffff|...v
    61A0: DC 18 18 18 38 00 FE 38 6C C6 6C 38 FE 00 38 6C  // ....8..8l.l8..8l
    61B0: C6 FE C6 6C 38 00 38 6C C6 C6 6C 6C EE 00 3E 60  // ...l8.8l..ll..>`
    61C0: 38 66 C6 CC 78 00 00 00 7E DB DB 7E 00 00 06 7C  // 8f..x...~..~...|
    61D0: DE F6 E6 7C C0 00 38 60 C0 F8 C0 60 38 00 7C C6  // ...|..8`...`8.|.
    61E0: C6 C6 C6 C6 C6 00 00 FE 00 FE 00 FE 00 00 18 18  // ................
    61F0: 7E 18 18 00 7E 00 30 18 0C 18 30 00 7E 00 0C 18  // ~...~.0...0.~...
    6200: 30 18 0C 00 7E 00 0C 1E 18 18 18 18 18 18 18 18  // 0...~...........
    6210: 18 18 18 78 30 00 00 00 18 00 7E 00 18 00 00 76  // ...x0.....~....v
    6220: DC 00 76 DC 00 00 7C C6 C6 7C 00 00 00 00 00 00  // ..v...|..|......
    6230: 00 18 18 00 00 00 00 00 00 00 18 00 00 00 1F 18  // ................
    6240: 18 18 F8 38 18 00 D8 6C 6C 6C 00 00 00 00 70 D8  // ...8...lll....p.
    6250: 30 F8 00 00 00 00 00 00 7C 7C 7C 7C 00 00 00 00  // 0.......||||....
    6260: 00 00 00 00 00 00 1D 00 00 00 00 24 66 FF 66 24  // ...........$f.f$
    6270: 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00 00  // ................
    6280: 00 00 00 00 00 00 00 00 00 00 00 7E 81 A5 81 81  // ...........~....
    6290: BD 99 81 81 7E 00 00 00 00 00 00 7C FE FE D6 FE  // ....~......|....
    62A0: FE BA C6 FE 7C 00 00 00 00 00 00 00 6C EE FE FE  // ....|.......l...
    62B0: FE FE 7C 38 10 00 00 00 00 00 00 00 10 38 7C FE  // ..|8.........8|.
    62C0: 7C 38 10 00 00 00 00 00 00 00 00 00 10 38 38 10  // |8...........88.
    62D0: 6C EE 6C 10 38 00 00 00 00 00 00 10 38 7C 7C FE  // l.l.8.......8||.
    62E0: FE FE 6C 10 38 00 00 00 00 00 00 00 00 00 18 3C  // ..l.8..........<
    62F0: 3C 3C 18 00 00 00 00 00 00 FF FF FF FF FF E7 C3  // <<..............
    6300: C3 C3 E7 FF FF FF FF FF FF 00 00 00 00 18 3C 66  // ..............<f
    6310: 66 66 3C 18 00 00 00 00 00 FF FF FF FF E7 C3 99  // ff<.............
    6320: 99 99 C3 E7 FF FF FF FF FF 00 00 1E 0E 1E 36 78  // ..............6x
    6330: CC CC CC CC 78 00 00 00 00 00 00 3C 66 66 66 3C  // ....x......<fff<
    6340: 18 7E 18 18 18 00 00 00 00 00 00 1E 1A 1E 18 18  // .~..............
    6350: 18 18 78 F8 70 00 00 00 00 00 00 3E 36 3E 36 36  // ..x.p......>6>66
    6360: 76 F6 66 0E 1E 0C 00 00 00 00 00 18 DB 7E 3C 66  // v.f..........~<f
    6370: 66 3C 7E DB 18 00 00 00 00 00 00 00 80 E0 F0 FC  // f<~.............
    6380: FE FC F0 E0 80 00 00 00 00 00 00 00 02 0E 3E 7E  // ..............>~
    6390: FE 7E 3E 0E 02 00 00 00 00 00 00 18 3C 7E 18 18  // .~>.........<~..
    63A0: 18 18 7E 3C 18 00 00 00 00 00 00 66 66 66 66 66  // ..~<.......fffff
    63B0: 66 66 00 66 66 00 00 00 00 00 00 7F DB DB DB DB  // ff.ff...........
    63C0: 7B 1B 1B 1B 1B 00 00 00 00 00 00 7C C6 C6 60 7C  // {..........|..`|
    63D0: F6 DE 7C 0C C6 C6 7C 00 00 00 00 00 00 00 00 00  // ..|...|.........
    63E0: 00 FE FE FE FE 00 00 00 00 00 00 18 3C 7E 18 18  // ............<~..
    63F0: 18 7E 3C 18 7E 00 00 00 00 00 00 18 3C 7E 18 18  // .~<.~.......<~..
    6400: 18 18 18 18 18 00 00 00 00 00 00 18 18 18 18 18  // ................
    6410: 18 18 7E 3C 18 00 00 00 00 00 00 00 00 00 0C 0E  // ..~<............
    6420: FF 0E 0C 00 00 00 00 00 00 00 00 00 00 00 30 70  // ..............0p
    6430: FE 70 30 00 00 00 00 00 00 00 00 00 00 00 00 C0  // .p0.............
    6440: C0 C0 FE 00 00 00 00 00 00 00 00 00 00 00 24 66  // ..............$f
    6450: FF 66 24 00 00 00 00 00 00 00 00 00 10 38 38 38  // .f$..........888
    6460: 7C 7C FE FE 00 00 00 00 00 00 00 00 FE FE 7C 7C  // ||............||
    6470: 7C 38 38 10 00 00 00 00 00 00 00 00 00 00 00 00  // |88.............
    6480: 00 00 00 00 00 00 00 00 00 00 00 18 3C 3C 3C 3C  // ............<<<<
    6490: 18 18 00 18 18 00 00 00 00 00 36 36 36 36 14 00  // ..........6666..
    64A0: 00 00 00 00 00 00 00 00 00 00 00 6C 6C 6C FE 6C  // ...........lll.l
    64B0: 6C FE 6C 6C 6C 00 00 00 00 00 00 18 18 7C C6 C0  // l.lll........|..
    64C0: 78 3C 06 C6 7C 18 18 00 00 00 00 00 00 00 62 66  // x<..|.........bf
    64D0: 0C 18 30 66 C6 00 00 00 00 00 00 38 6C 38 30 76  // ..0f.......8l80v
    64E0: 7E CC CC CC 76 00 00 00 00 00 0C 0C 0C 18 00 00  // ~...v...........
    64F0: 00 00 00 00 00 00 00 00 00 00 00 0C 18 30 30 30  // .............000
    6500: 30 30 30 18 0C 00 00 00 00 00 00 30 18 0C 0C 0C  // 000........0....
    6510: 0C 0C 0C 18 30 00 00 00 00 00 00 00 00 00 6C 38  // ....0.........l8
    6520: FE 38 6C 00 00 00 00 00 00 00 00 00 00 00 18 18  // .8l.............
    6530: 7E 18 18 00 00 00 00 00 00 00 00 00 00 00 00 00  // ~...............
    6540: 00 00 0C 0C 0C 18 00 00 00 00 00 00 00 00 00 00  // ................
    6550: FE 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    6560: 00 00 00 18 18 00 00 00 00 00 00 00 00 02 06 0C  // ................
    6570: 18 30 60 C0 80 00 00 00 00 00 00 7C C6 C6 CE DE  // .0`........|....
    6580: F6 E6 C6 C6 7C 00 00 00 00 00 00 18 78 18 18 18  // ....|.......x...
    6590: 18 18 18 18 7E 00 00 00 00 00 00 7C C6 C6 06 0C  // ....~......|....
    65A0: 18 30 60 C6 FE 00 00 00 00 00 00 7C C6 06 06 3C  // .0`........|...<
    65B0: 06 06 06 C6 7C 00 00 00 00 00 00 0C 1C 3C 6C CC  // ....|........<l.
    65C0: CC FE 0C 0C 1E 00 00 00 00 00 00 FE C0 C0 C0 FC  // ................
    65D0: 06 06 06 C6 7C 00 00 00 00 00 00 7C C6 C0 C0 FC  // ....|......|....
    65E0: C6 C6 C6 C6 7C 00 00 00 00 00 00 FE C6 06 0C 18  // ....|...........
    65F0: 30 30 30 30 30 00 00 00 00 00 00 7C C6 C6 C6 7C  // 00000......|...|
    6600: C6 C6 C6 C6 7C 00 00 00 00 00 00 7C C6 C6 C6 C6  // ....|......|....
    6610: 7E 06 06 C6 7C 00 00 00 00 00 00 00 00 00 0C 0C  // ~...|...........
    6620: 00 00 0C 0C 00 00 00 00 00 00 00 00 00 00 0C 0C  // ................
    6630: 00 00 0C 0C 0C 18 00 00 00 00 00 00 0C 18 30 60  // ..............0`
    6640: C0 60 30 18 0C 00 00 00 00 00 00 00 00 00 00 FE  // .`0.............
    6650: 00 FE 00 00 00 00 00 00 00 00 00 00 60 30 18 0C  // ............`0..
    6660: 06 0C 18 30 60 00 00 00 00 00 00 7C C6 C6 0C 18  // ...0`......|....
    6670: 18 18 00 18 18 00 00 00 00 00 00 7C C6 C6 C6 DE  // ...........|....
    6680: DE DE DC C0 7E 00 00 00 00 00 00 38 6C C6 C6 C6  // ....~......8l...
    6690: FE C6 C6 C6 C6 00 00 00 00 00 00 FC 66 66 66 7C  // ............fff|
    66A0: 66 66 66 66 FC 00 00 00 00 00 00 3C 66 C2 C0 C0  // ffff.......<f...
    66B0: C0 C0 C2 66 3C 00 00 00 00 00 00 F8 6C 66 66 66  // ...f<.......lfff
    66C0: 66 66 66 6C F8 00 00 00 00 00 00 FE 66 60 64 7C  // fffl........f`d|
    66D0: 64 60 60 66 FE 00 00 00 00 00 00 FE 66 60 64 7C  // d``f........f`d|
    66E0: 64 60 60 60 F0 00 00 00 00 00 00 7C C6 C6 C0 C0  // d```.......|....
    66F0: C0 CE C6 C6 7C 00 00 00 00 00 00 C6 C6 C6 C6 FE  // ....|...........
    6700: C6 C6 C6 C6 C6 00 00 00 00 00 00 3C 18 18 18 18  // ...........<....
    6710: 18 18 18 18 3C 00 00 00 00 00 00 3C 18 18 18 18  // ....<......<....
    6720: 18 18 D8 D8 70 00 00 00 00 00 00 C6 C6 CC D8 F0  // ....p...........
    6730: F0 D8 CC C6 C6 00 00 00 00 00 00 F0 60 60 60 60  // ............````
    6740: 60 60 62 66 FE 00 00 00 00 00 00 C6 C6 EE EE FE  // ``bf............
    6750: D6 D6 D6 C6 C6 00 00 00 00 00 00 C6 C6 E6 E6 F6  // ................
    6760: DE CE CE C6 C6 00 00 00 00 00 00 7C C6 C6 C6 C6  // ...........|....
    6770: C6 C6 C6 C6 7C 00 00 00 00 00 00 FC 66 66 66 66  // ....|.......ffff
    6780: 7C 60 60 60 F0 00 00 00 00 00 00 7C C6 C6 C6 C6  // |```.......|....
    6790: C6 C6 D6 D6 7C 06 00 00 00 00 00 FC 66 66 66 7C  // ....|.......fff|
    67A0: 78 6C 66 66 E6 00 00 00 00 00 00 7C C6 C0 C0 70  // xlff.......|...p
    67B0: 1C 06 06 C6 7C 00 00 00 00 00 00 7E 5A 18 18 18  // ....|......~Z...
    67C0: 18 18 18 18 3C 00 00 00 00 00 00 C6 C6 C6 C6 C6  // ....<...........
    67D0: C6 C6 C6 C6 7C 00 00 00 00 00 00 C6 C6 C6 C6 C6  // ....|...........
    67E0: C6 C6 6C 38 10 00 00 00 00 00 00 C6 C6 C6 D6 D6  // ..l8............
    67F0: D6 FE EE C6 C6 00 00 00 00 00 00 C6 C6 C6 6C 38  // ..............l8
    6800: 38 6C C6 C6 C6 00 00 00 00 00 00 66 66 66 66 66  // 8l.........fffff
    6810: 3C 18 18 18 3C 00 00 00 00 00 00 FE C6 86 0C 18  // <...<...........
    6820: 30 60 C2 C6 FE 00 00 00 00 00 00 7C 60 60 60 60  // 0`.........|````
    6830: 60 60 60 60 7C 00 00 00 00 00 00 00 00 80 C0 60  // ````|..........`
    6840: 30 18 0C 06 02 00 00 00 00 00 00 7C 0C 0C 0C 0C  // 0..........|....
    6850: 0C 0C 0C 0C 7C 00 00 00 00 00 10 38 6C C6 00 00  // ....|......8l...
    6860: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    6870: 00 00 00 00 00 00 FF 00 00 00 18 18 18 0C 00 00  // ................
    6880: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 78 0C  // ..............x.
    6890: 7C CC CC DC 76 00 00 00 00 00 00 E0 60 60 7C 66  // |...v.......``|f
    68A0: 66 66 66 66 FC 00 00 00 00 00 00 00 00 00 7C C6  // ffff..........|.
    68B0: C0 C0 C0 C6 7C 00 00 00 00 00 00 1C 0C 0C 7C CC  // ....|.........|.
    68C0: CC CC CC CC 7E 00 00 00 00 00 00 00 00 00 7C C6  // ....~.........|.
    68D0: C6 FE C0 C6 7C 00 00 00 00 00 00 1C 36 30 30 FC  // ....|.......600.
    68E0: 30 30 30 30 78 00 00 00 00 00 00 00 00 00 76 CE  // 0000x.........v.
    68F0: C6 C6 CE 76 06 C6 7C 00 00 00 00 E0 60 60 7C 66  // ...v..|.....``|f
    6900: 66 66 66 66 E6 00 00 00 00 00 00 18 18 00 38 18  // ffff..........8.
    6910: 18 18 18 18 3C 00 00 00 00 00 00 0C 0C 00 1C 0C  // ....<...........
    6920: 0C 0C 0C 0C CC CC 78 00 00 00 00 E0 60 60 66 66  // ......x.....``ff
    6930: 6C 78 6C 66 E6 00 00 00 00 00 00 18 18 18 18 18  // lxlf............
    6940: 18 18 18 18 1C 00 00 00 00 00 00 00 00 00 6C FE  // ..............l.
    6950: D6 D6 C6 C6 C6 00 00 00 00 00 00 00 00 00 DC 66  // ...............f
    6960: 66 66 66 66 66 00 00 00 00 00 00 00 00 00 7C C6  // fffff.........|.
    6970: C6 C6 C6 C6 7C 00 00 00 00 00 00 00 00 00 DC 66  // ....|..........f
    6980: 66 66 66 7C 60 60 F0 00 00 00 00 00 00 00 76 CC  // fff|``........v.
    6990: CC CC CC 7C 0C 0C 1E 00 00 00 00 00 00 00 DC 66  // ...|...........f
    69A0: 60 60 60 60 F0 00 00 00 00 00 00 00 00 00 7C C6  // ````..........|.
    69B0: C0 7C 06 C6 7C 00 00 00 00 00 00 30 30 30 FC 30  // .|..|......000.0
    69C0: 30 30 30 36 1C 00 00 00 00 00 00 00 00 00 CC CC  // 0006............
    69D0: CC CC CC CC 76 00 00 00 00 00 00 00 00 00 C6 C6  // ....v...........
    69E0: C6 C6 6C 38 10 00 00 00 00 00 00 00 00 00 C6 C6  // ..l8............
    69F0: D6 D6 D6 FE 6C 00 00 00 00 00 00 00 00 00 C6 C6  // ....l...........
    6A00: 6C 38 6C C6 C6 00 00 00 00 00 00 00 00 00 C6 C6  // l8l.............
    6A10: C6 C6 CE 76 06 C6 7C 00 00 00 00 00 00 00 FE 86  // ...v..|.........
    6A20: 0C 18 30 62 FE 00 00 00 00 00 00 0E 18 18 18 70  // ..0b...........p
    6A30: 18 18 18 18 0E 00 00 00 00 00 00 18 18 18 18 00  // ................
    6A40: 18 18 18 18 18 00 00 00 00 00 00 70 18 18 18 0E  // ...........p....
    6A50: 18 18 18 18 70 00 00 00 00 00 00 76 DC 00 00 00  // ....p......v....
    6A60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 10 38  // ...............8
    6A70: 38 6C 6C FE 00 00 00 00 00 00 00 3C 66 C0 C0 C0  // 8ll........<f...
    6A80: C6 66 3C 18 0C CC 38 00 00 00 00 C6 00 00 C6 C6  // .f<...8.........
    6A90: C6 C6 C6 CE 76 00 00 00 00 00 0C 18 30 00 7C C6  // ....v.......0.|.
    6AA0: C6 FE C0 C6 7C 00 00 00 00 00 30 78 CC 00 78 0C  // ....|.....0x..x.
    6AB0: 7C CC CC DC 76 00 00 00 00 00 00 CC 00 00 78 0C  // |...v.........x.
    6AC0: 7C CC CC DC 76 00 00 00 00 00 60 30 18 00 78 0C  // |...v.....`0..x.
    6AD0: 7C CC CC DC 76 00 00 00 00 00 38 6C 38 00 78 0C  // |...v.....8l8.x.
    6AE0: 7C CC CC DC 76 00 00 00 00 00 00 00 00 7C C6 C0  // |...v........|..
    6AF0: C0 C6 7C 18 0C 6C 38 00 00 00 30 78 CC 00 7C C6  // ..|..l8...0x..|.
    6B00: C6 FE C0 C6 7C 00 00 00 00 00 00 CC 00 00 7C C6  // ....|.........|.
    6B10: C6 FE C0 C6 7C 00 00 00 00 00 30 18 0C 00 7C C6  // ....|.....0...|.
    6B20: C6 FE C0 C6 7C 00 00 00 00 00 00 66 00 00 38 18  // ....|......f..8.
    6B30: 18 18 18 18 3C 00 00 00 00 00 18 3C 66 00 38 18  // ....<......<f.8.
    6B40: 18 18 18 18 3C 00 00 00 00 00 00 00 00 00 38 18  // ....<.........8.
    6B50: 18 18 18 18 3C 00 00 00 00 00 C6 00 38 6C C6 C6  // ....<.......8l..
    6B60: C6 FE C6 C6 C6 00 00 00 00 38 6C 38 00 38 6C C6  // .........8l8.8l.
    6B70: C6 FE C6 C6 C6 00 00 00 00 0C 18 30 00 FE 60 60  // ...........0..``
    6B80: 7C 60 60 60 FE 00 00 00 00 00 00 00 00 66 DB 1B  // |```.........f..
    6B90: 7F D8 D8 DF 76 00 00 00 00 00 00 7E D8 D8 D8 D8  // ....v......~....
    6BA0: FE D8 D8 D8 DE 00 00 00 00 00 30 78 CC 00 7C C6  // ..........0x..|.
    6BB0: C6 C6 C6 C6 7C 00 00 00 00 00 00 C6 00 00 7C C6  // ....|.........|.
    6BC0: C6 C6 C6 C6 7C 00 00 00 00 00 30 18 0C 00 7C C6  // ....|.....0...|.
    6BD0: C6 C6 C6 C6 7C 00 00 00 00 00 30 78 CC 00 C6 C6  // ....|.....0x....
    6BE0: C6 C6 C6 CE 76 00 00 00 00 00 60 30 18 00 C6 C6  // ....v.....`0....
    6BF0: C6 C6 C6 CE 76 00 00 00 00 00 18 00 3C 18 18 18  // ....v.......<...
    6C00: 18 18 18 18 3C 00 00 00 00 00 C6 00 7C C6 C6 C6  // ....<.......|...
    6C10: C6 C6 C6 C6 7C 00 00 00 00 00 C6 00 C6 C6 C6 C6  // ....|...........
    6C20: C6 C6 C6 C6 7C 00 00 00 00 00 00 18 18 7C C6 C0  // ....|........|..
    6C30: C0 C6 7C 18 18 00 00 00 00 00 38 6C 60 60 F0 60  // ..|.......8l``.`
    6C40: 60 60 66 F6 6C 00 00 00 00 00 66 66 66 66 3C 18  // ``f.l.....ffff<.
    6C50: 7E 18 3C 18 18 00 00 00 00 00 00 3E 63 63 30 1C  // ~.<........>cc0.
    6C60: 06 63 63 3E 00 1C 00 00 00 00 00 00 00 00 3E 63  // .cc>..........>c
    6C70: 38 0E 63 3E 00 1C 00 00 00 00 0C 18 30 00 78 0C  // 8.c>........0.x.
    6C80: 7C CC CC DC 76 00 00 00 00 00 0C 18 30 00 38 18  // |...v.......0.8.
    6C90: 18 18 18 18 3C 00 00 00 00 00 0C 18 30 00 7C C6  // ....<.......0.|.
    6CA0: C6 C6 C6 C6 7C 00 00 00 00 00 18 30 60 00 CC CC  // ....|......0`...
    6CB0: CC CC CC DC 76 00 00 00 00 00 00 76 DC 00 BC 66  // ....v......v...f
    6CC0: 66 66 66 66 E6 00 00 00 00 00 76 DC 00 C6 C6 E6  // ffff......v.....
    6CD0: F6 DE CE C6 C6 00 00 00 00 00 21 1E 00 1E 33 60  // ..........!...3`
    6CE0: 60 67 63 33 1D 00 00 00 00 00 42 3C 00 3B 66 66  // `gc3......B<.;ff
    6CF0: 66 3E 06 66 3C 00 00 00 00 00 00 30 30 00 30 30  // f>.f<......00.00
    6D00: 30 60 C6 C6 7C 00 00 00 00 00 00 00 00 00 00 00  // 0`..|...........
    6D10: 7E 60 60 60 00 00 00 00 00 00 00 00 00 00 00 00  // ~```............
    6D20: 7E 06 06 06 00 00 00 00 00 00 60 60 62 66 6C 18  // ~.........``bfl.
    6D30: 30 60 DC 36 0C 18 3E 00 00 00 60 60 62 66 6C 18  // 0`.6..>...``bfl.
    6D40: 36 6E DE 36 7E 06 06 00 00 00 00 18 18 00 18 18  // 6n.6~...........
    6D50: 3C 3C 3C 3C 18 00 00 00 00 00 00 00 00 00 36 6C  // <<<<..........6l
    6D60: D8 6C 36 00 00 00 00 00 00 00 00 00 00 00 D8 6C  // .l6............l
    6D70: 36 6C D8 00 00 00 00 00 00 11 44 11 44 11 44 11  // 6l........D.D.D.
    6D80: 44 11 44 11 44 11 44 11 44 AA 55 AA 55 AA 55 AA  // D.D.D.D.D.U.U.U.
    6D90: 55 AA 55 AA 55 AA 55 AA 55 DD 77 DD 77 DD 77 DD  // U.U.U.U.U.w.w.w.
    6DA0: 77 DD 77 DD 77 DD 77 DD 77 18 18 18 18 18 18 18  // w.w.w.w.w.......
    6DB0: 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18  // ................
    6DC0: F8 18 18 18 18 18 18 18 18 18 18 18 18 18 F8 18  // ................
    6DD0: F8 18 18 18 18 18 18 18 18 36 36 36 36 36 36 36  // .........6666666
    6DE0: F6 36 36 36 36 36 36 36 36 00 00 00 00 00 00 00  // .66666666.......
    6DF0: FE 36 36 36 36 36 36 36 36 00 00 00 00 00 F8 18  // .66666666.......
    6E00: F8 18 18 18 18 18 18 18 18 36 36 36 36 36 F6 06  // .........66666..
    6E10: F6 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36  // .666666666666666
    6E20: 36 36 36 36 36 36 36 36 36 00 00 00 00 00 FE 06  // 666666666.......
    6E30: F6 36 36 36 36 36 36 36 36 36 36 36 36 36 F6 06  // .6666666666666..
    6E40: FE 00 00 00 00 00 00 00 00 36 36 36 36 36 36 36  // .........6666666
    6E50: FE 00 00 00 00 00 00 00 00 18 18 18 18 18 F8 18  // ................
    6E60: F8 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    6E70: F8 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18  // ................
    6E80: 1F 00 00 00 00 00 00 00 00 18 18 18 18 18 18 18  // ................
    6E90: FF 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    6EA0: FF 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18  // ................
    6EB0: 1F 18 18 18 18 18 18 18 18 00 00 00 00 00 00 00  // ................
    6EC0: FF 00 00 00 00 00 00 00 00 18 18 18 18 18 18 18  // ................
    6ED0: FF 18 18 18 18 18 18 18 18 18 18 18 18 18 1F 18  // ................
    6EE0: 1F 18 18 18 18 18 18 18 18 36 36 36 36 36 36 36  // .........6666666
    6EF0: 37 36 36 36 36 36 36 36 36 36 36 36 36 36 37 30  // 7666666666666670
    6F00: 3F 00 00 00 00 00 00 00 00 00 00 00 00 00 3F 30  // ?.............?0
    6F10: 37 36 36 36 36 36 36 36 36 36 36 36 36 36 F7 00  // 76666666666666..
    6F20: FF 00 00 00 00 00 00 00 00 00 00 00 00 00 FF 00  // ................
    6F30: F7 36 36 36 36 36 36 36 36 36 36 36 36 36 37 30  // .666666666666670
    6F40: 37 36 36 36 36 36 36 36 36 00 00 00 00 00 FF 00  // 766666666.......
    6F50: FF 00 00 00 00 00 00 00 00 36 36 36 36 36 F7 00  // .........66666..
    6F60: F7 36 36 36 36 36 36 36 36 18 18 18 18 18 FF 00  // .66666666.......
    6F70: FF 00 00 00 00 00 00 00 00 36 36 36 36 36 36 36  // .........6666666
    6F80: FF 00 00 00 00 00 00 00 00 00 00 00 00 00 FF 00  // ................
    6F90: FF 18 18 18 18 18 18 18 18 00 00 00 00 00 00 00  // ................
    6FA0: FF 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36  // .666666666666666
    6FB0: 3F 00 00 00 00 00 00 00 00 18 18 18 18 18 1F 18  // ?...............
    6FC0: 1F 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 18  // ................
    6FD0: 1F 18 18 18 18 18 18 18 18 00 00 00 00 00 00 00  // ................
    6FE0: 3F 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36  // ?666666666666666
    6FF0: FF 36 36 36 36 36 36 36 36 18 18 18 18 18 FF 18  // .66666666.......
    7000: FF 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18  // ................
    7010: F8 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    7020: 1F 18 18 18 18 18 18 18 18 FF FF FF FF FF FF FF  // ................
    7030: FF FF FF FF FF FF FF FF FF 00 00 00 00 00 00 00  // ................
    7040: 00 FF FF FF FF FF FF FF FF F0 F0 F0 F0 F0 F0 F0  // ................
    7050: F0 F0 F0 F0 F0 F0 F0 F0 F0 0F 0F 0F 0F 0F 0F 0F  // ................
    7060: 0F 0F 0F 0F 0F 0F 0F 0F 0F FF FF FF FF FF FF FF  // ................
    7070: FF 00 00 00 00 00 00 00 00 00 00 00 00 76 DC D8  // .............v..
    7080: D8 D8 D8 DC 76 00 00 00 00 00 00 78 CC CC D8 FC  // ....v......x....
    7090: C6 C6 C6 C6 CC 00 00 00 00 00 00 FE 66 62 60 60  // ............fb``
    70A0: 60 60 60 60 60 00 00 00 00 00 00 00 00 00 FE 6C  // `````..........l
    70B0: 6C 6C 6C 6C 6C 00 00 00 00 00 00 FE C6 62 30 18  // lllll........b0.
    70C0: 18 30 62 C6 FE 00 00 00 00 00 00 00 00 00 7E D8  // .0b...........~.
    70D0: CC CC CC D8 70 00 00 00 00 00 00 00 00 66 66 66  // ....p........fff
    70E0: 66 66 7C 60 C0 80 00 00 00 00 00 00 00 00 76 DC  // ff|`..........v.
    70F0: 18 18 18 18 18 00 00 00 00 00 00 FE 38 38 6C C6  // ............88l.
    7100: C6 6C 38 38 FE 00 00 00 00 00 00 00 38 6C C6 C6  // .l88........8l..
    7110: FE C6 C6 6C 38 00 00 00 00 00 00 38 6C C6 C6 C6  // ...l8......8l...
    7120: C6 6C 6C 6C EE 00 00 00 00 00 00 3E 60 60 3C 66  // .lll.......>``<f
    7130: C6 C6 C6 CC 78 00 00 00 00 00 00 00 00 00 7E DB  // ....x.........~.
    7140: DB DB 7E 00 00 00 00 00 00 00 00 02 06 7C CE DE  // ..~..........|..
    7150: F6 F6 7C 60 C0 00 00 00 00 00 00 00 1C 30 60 60  // ..|`.........0``
    7160: 7C 60 60 30 1C 00 00 00 00 00 00 7C C6 C6 C6 C6  // |``0.......|....
    7170: C6 C6 C6 C6 C6 00 00 00 00 00 00 00 00 FE 00 00  // ................
    7180: FE 00 00 FE 00 00 00 00 00 00 00 00 00 18 18 7E  // ...............~
    7190: 18 18 00 00 7E 00 00 00 00 00 00 30 18 0C 06 0C  // ....~......0....
    71A0: 18 30 00 00 7E 00 00 00 00 00 00 0C 18 30 60 30  // .0..~........0`0
    71B0: 18 0C 00 00 7E 00 00 00 00 00 00 00 00 0C 1E 1A  // ....~...........
    71C0: 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18  // ................
    71D0: 18 18 18 58 78 30 00 00 00 00 00 00 00 18 18 00  // ...Xx0..........
    71E0: 7E 00 18 18 00 00 00 00 00 00 00 00 00 00 00 76  // ~..............v
    71F0: DC 00 76 DC 00 00 00 00 00 00 00 78 CC CC 78 00  // ..v........x..x.
    7200: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    7210: 18 18 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    7220: 00 18 00 00 00 00 00 00 00 00 00 1F 18 18 18 18  // ................
    7230: 18 D8 D8 78 38 18 00 00 00 00 00 D8 6C 6C 6C 6C  // ...x8.......llll
    7240: 6C 00 00 00 00 00 00 00 00 00 00 70 D8 18 30 60  // l..........p..0`
    7250: F8 00 00 00 00 00 00 00 00 00 00 00 00 00 7E 7E  // ..............~~
    7260: 7E 7E 7E 7E 00 00 00 00 00 00 00 00 00 00 00 00  // ~~~~............
    7270: 00 00 00 00 00 00 00 00 00 1D 00 00 00 00 00 24  // ...............$
    7280: 66 FF 66 24 00 00 00 00 00 00 2F 00 00 00 01 03  // f.f$....../.....
    7290: 06 0C 18 30 60 C0 80 00 00 00 00 30 00 00 7E C3  // ...0`......0..~.
    72A0: C3 C3 DB DB C3 C3 C3 7E 00 00 00 00 4D 00 00 C3  // .......~....M...
    72B0: C3 E7 FF FF DB DB C3 C3 C3 00 00 00 00 54 00 00  // .............T..
    72C0: FF 99 18 18 18 18 18 18 18 3C 00 00 00 00 56 00  // .........<....V.
    72D0: 00 C3 C3 C3 C3 C3 C3 C3 66 3C 18 00 00 00 00 57  // ........f<.....W
    72E0: 00 00 C3 C3 C3 C3 DB DB DB DB FF 66 00 00 00 00  // ...........f....
    72F0: 58 00 00 C3 C3 C3 66 3C 3C 66 C3 C3 C3 00 00 00  // X.....f<<f......
    7300: 00 59 00 00 C3 C3 C3 C3 66 3C 18 18 18 3C 00 00  // .Y......f<...<..
    7310: 00 00 5C 00 00 00 80 C0 60 30 18 0C 06 03 01 00  // ..\.....`0......
    7320: 00 00 00 6D 00 00 00 00 00 66 FF DB DB DB C3 C3  // ...m.....f......
    7330: 00 00 00 00 76 00 00 00 00 00 C3 C3 C3 C3 66 3C  // ....v.........f<
    7340: 18 00 00 00 00 77 00 00 00 00 00 C3 C3 DB DB DB  // .....w..........
    7350: FF 66 00 00 00 00 00 00 11 62 C3 0B DB 74 03 E9  // .f.......b...t..
    7360: 46 01 57 32 C0 B9 40 00 F3 AA 5F BB DE 8F 26 89  // F.W2..@..._...&.
    7370: 1D 26 8C 4D 02 2E 8E 1E 07 03 57 BE 49 04 B9 1E  // .&.M......W.I...
    7380: 00 83 C7 04 FC 8A 04 26 88 05 46 47 E2 F7 5F A0  // .......&..FG.._.
    7390: 84 04 FE C0 26 88 45 22 A1 85 04 26 89 45 23 57  // ....&.E"...&.E#W
    73A0: E8 D9 1B 5F 26 88 5D 25 26 88 7D 26 8A 1E 49 04  // ..._&.]%&.}&..I.
    73B0: E8 FC 05 74 05 80 FB 13 7F 1D 32 FF D1 E3 2E 8A  // ...t......2.....
    73C0: 87 B6 8F 32 E4 0A C0 74 01 40 26 89 45 27 2E 8A  // ...2...t.@&.E'..
    73D0: 87 B7 8F 26 88 45 29 A1 85 04 8A 16 84 04 FE C2  // ...&.E).........
    73E0: F6 E2 B2 00 3D C8 00 7E 15 B2 01 3D 5E 01 7E 0E  // ....=..~...=^.~.
    73F0: B2 02 3D 90 01 7E 07 B2 03 3D E0 01 7E 00 26 88  // ..=..~...=..~.&.
    7400: 55 2A 8A 26 87 04 8A C4 24 01 C0 E0 04 80 E4 02  // U*.&....$.......
    7410: D0 E4 0A E0 80 F4 10 A0 89 04 24 0A 0A E0 E8 94  // ..........$.....
    7420: 08 B2 C0 B0 30 EE 42 EC 24 08 C0 E0 02 0A C4 0C  // ....0.B.$.......
    7430: 01 26 88 45 2D B0 03 26 88 45 31 E8 77 08 1E 06  // .&.E-..&.E1.w...
    7440: 32 D2 C4 1E A8 04 8C C1 8C CE 3B CE 74 34 26 C5  // 2.........;.t4&.
    7450: 77 04 8C D9 0B F1 74 03 80 CA 10 26 C5 77 0C 8C  // w.....t....&.w..
    7460: D9 0B F1 74 03 80 CA 08 26 C5 77 08 8C D9 0B F1  // ...t....&.w.....
    7470: 74 03 80 CA 04 26 C5 77 10 8C D9 0B F1 74 03 80  // t....&.w.....t..
    7480: CA 01 07 1F 26 88 55 32 B0 03 BA C4 03 E8 E4 04  // ....&.U2........
    7490: 8A E0 C0 EC 02 8A D4 8A F2 D0 EE 81 E2 04 04 25  // ...............%
    74A0: 03 03 0B C2 26 89 45 2B 8B EC C6 46 1A 1B C3 0A  // ....&.E+...F....
    74B0: C0 74 0F FE C8 74 36 FE C8 74 56 8B EC C6 46 1A  // .t...t6..tV...F.
    74C0: 00 C3 B8 20 00 F6 C1 01 74 03 83 C0 60 F6 C1 02  // ... ....t...`...
    74D0: 74 03 83 C0 3A F6 C1 04 74 03 05 03 03 83 C0 3F  // t...:...t......?
    74E0: C1 E8 06 8B EC 89 46 0E C6 46 1A 1C C3 8B FB 83  // ......F..F......
    74F0: C7 20 F6 C1 01 74 03 E8 85 00 F6 C1 02 74 03 E8  // . ...t.......t..
    7500: EF 00 F6 C1 04 74 03 E8 F8 01 8B EC C6 46 1A 1C  // .....t.......F..
    7510: C3 F6 C1 01 74 06 E8 16 15 E8 25 01 F6 C1 02 74  // ....t.....%....t
    7520: 03 E8 85 01 F6 C1 04 74 03 E8 12 02 EB DC 8A C4  // .......t........
    7530: EE 42 EC AA FE C4 4A E2 F5 C3 E8 6B 04 BD C0 03  // .B....J....k....
    7540: B9 15 00 32 E4 EC 87 EA 8A C4 EE 42 EC AA FE C4  // ...2.......B....
    7550: 4A 87 EA E2 F0 EC 87 EA B0 20 EE C3 26 8A 05 88  // J........ ..&...
    7560: 04 47 46 E2 F7 C3 26 8A 25 EF 47 FE C0 E2 F7 C3  // .GF...&.%.G.....
    7570: B2 C0 8A C4 EE 26 8A 05 47 FE C4 EE E2 F4 C3 9C  // .....&..G.......
    7580: FA 51 57 8B C7 2B C3 26 89 07 8B F7 E8 0A 04 EC  // .QW..+.&........
    7590: 26 88 44 01 26 89 54 41 B2 CE EC 26 88 44 02 B2  // &.D.&.TA...&.D..
    75A0: CC EC 26 88 44 09 B2 CA EC 26 88 44 04 B2 C4 EC  // ..&.D....&.D....
    75B0: 26 88 04 83 C7 05 B9 04 00 B4 01 E8 70 FF 26 8A  // &...........p.&.
    75C0: 04 EE 8B FE 83 C7 0A 26 8B 54 41 32 E4 B9 19 00  // .......&.TA2....
    75D0: E8 5B FF 26 8A 44 01 EE E8 5F FF B2 CE 32 E4 B9  // .[.&.D..._...2..
    75E0: 09 00 E8 49 FF 26 8A 44 02 EE 5F 59 83 C7 60 9D  // ...I.&.D.._Y..`.
    75F0: C3 9C FA 8B C7 2B C3 26 89 47 02 51 57 2E 8E 1E  // .....+.&.G.QW...
    7600: 07 03 A0 10 04 24 30 AA BE 49 04 B9 1E 00 F3 A4  // .....$0..I......
    7610: BE 84 04 B1 07 F3 A4 BE A8 04 B1 04 F3 A4 BE 14  // ................
    7620: 00 B1 04 F3 A4 BE 74 00 B1 04 F3 A4 BE 7C 00 B1  // ......t......|..
    7630: 04 F3 A4 BE 0C 01 B1 04 F3 A4 5F 59 83 C7 3A 9D  // .........._Y..:.
    7640: C3 9C FA 26 8B 3F 03 FB 8B F7 51 8B FE 83 C7 05  // ...&.?....Q.....
    7650: BA C4 03 B8 00 01 EF B0 01 B9 04 00 E8 07 FF 47  // ...............G
    7660: B2 C2 26 8A 44 09 EE B2 C4 B8 00 03 EF 26 8A 04  // ..&.D........&..
    7670: EE 26 8B 54 41 B8 11 00 EF B1 19 32 C0 E8 E6 FE  // .&.TA......2....
    7680: 26 8A 44 01 EE 80 C2 06 26 8A 44 04 EE EC B1 15  // &.D.....&.D.....
    7690: 32 E4 E8 DB FE B0 20 EE B1 09 32 C0 B2 CE E8 C5  // 2..... ...2.....
    76A0: FE 26 8A 44 02 EE 59 9D C3 9C FA 26 8B 7F 02 03  // .&.D..Y....&....
    76B0: FB 06 51 2E 8E 1E 07 03 26 8A 05 80 26 10 04 CF  // ..Q.....&...&...
    76C0: 08 06 10 04 47 BE 49 04 B9 1E 00 E8 8E FE BE 84  // ....G.I.........
    76D0: 04 B1 07 E8 86 FE BE A8 04 B1 04 E8 7E FE BE 14  // ............~...
    76E0: 00 B1 04 E8 76 FE BE 74 00 B1 04 E8 6E FE BE 7C  // ....v..t....n..|
    76F0: 00 B1 04 E8 66 FE BE 0C 01 B1 04 E8 5E FE 59 07  // ....f.......^.Y.
    7700: 9D C3 9C FA 8B C7 2B C3 26 89 47 04 E8 A6 05 B2  // ......+.&.G.....
    7710: C0 B0 34 EE 42 EC 26 88 05 BA C8 03 EC 26 88 45  // ..4.B.&......&.E
    7720: 01 50 4A 4A EC 26 88 45 02 83 C7 03 B9 00 03 42  // .PJJ.&.E.......B
    7730: 32 C0 EE 42 42 EC AA E2 FC 58 4A EE 9D C3 9C FA  // 2..BB....XJ.....
    7740: 26 8B 77 04 03 F3 E8 6C 05 B2 C0 B0 34 EE 26 8A  // &.w....l....4.&.
    7750: 04 EE BA C6 03 26 8A 44 02 EE 56 42 42 83 C6 03  // .....&.D..VBB...
    7760: 32 C0 EE 42 B9 00 03 26 8A 04 EE 46 E2 F9 5E FE  // 2..B...&...F..^.
    7770: CA 26 8A 44 01 EE 9D C3 BA CC 03 EC 24 FE 0A C4  // .&.D........$...
    7780: B2 C2 EE C3 E8 A8 12 B2 C0 86 C4 EE EB 00 EB 00  // ................
    7790: 86 C4 EE EB 00 EB 00 B0 20 EE C3 50 8A E0 80 E4  // ........ ..P....
    77A0: 80 80 26 87 04 7F 08 26 87 04 24 7F 8A E0 3C 07  // ..&....&..$...<.
    77B0: 7E 1E 26 F6 47 33 01 75 17 3C 23 74 13 3C 32 74  // ~.&.G3.u.<#t.<2t
    77C0: 0F 3C 33 74 0B B4 03 26 F6 47 09 01 75 02 B4 07  // .<3t...&.G..u...
    77D0: 88 26 49 04 BA B4 03 80 0E 87 04 02 26 F6 47 09  // .&I.........&.G.
    77E0: 01 74 07 B2 D4 80 26 87 04 FD 89 16 63 04 C7 06  // .t....&.....c...
    77F0: 4E 04 00 00 C6 06 62 04 00 B9 08 00 BF 50 04 FC  // N.....b......P..
    7800: 06 1E 07 33 C0 F3 AB 07 26 8A 07 32 E4 A3 4A 04  // ...3....&..2..J.
    7810: 26 8A 47 01 A2 84 04 26 8A 47 02 A3 85 04 26 8B  // &.G....&.G....&.
    7820: 47 03 A3 4C 04 26 8B 47 14 86 C4 A3 60 04 58 C3  // G..L.&.G....`.X.
    7830: 52 32 E4 33 D2 B0 0D CD 17 F6 C4 29 75 08 32 E4  // R2.3.......)u.2.
    7840: 33 D2 B0 0A CD 17 5A C3 06 1E 60 2E 8E 1E 07 03  // 3.....Z...`.....
    7850: 2E 83 0E 11 03 00 75 6E 80 3E 00 05 01 74 67 C6  // ......un.>...tg.
    7860: 06 00 05 01 8A 1E 62 04 32 FF D1 E3 8B FB 8B 85  // ......b.2.......
    7870: 50 04 8A 3E 62 04 50 32 F6 8A 0E 84 04 32 ED 41  // P..>b.P2.....2.A
    7880: 51 8B 0E 4A 04 32 D2 E8 A6 FF F6 C4 29 75 3D 51  // Q..J.2......)u=Q
    7890: 52 89 95 50 04 B4 08 E8 AA D4 0A C0 75 02 B0 20  // R..P........u.. 
    78A0: 33 D2 32 E4 CD 17 F6 C4 29 75 1F 5A FE C2 59 E2  // 3.2.....)u.Z..Y.
    78B0: DE FE C6 59 E2 CA E8 77 FF 32 C0 A2 00 05 58 89  // ...Y...w.2....X.
    78C0: 85 50 04 E8 AF 03 61 1F 07 CF 5A 59 59 B0 FF EB  // .P....a...ZYY...
    78D0: EA 52 2A F5 38 C6 7D 02 32 C0 2E 8E 06 09 03 5A  // .R*.8.}.2......Z
    78E0: C3 A0 85 04 F6 E3 8A F7 8B D8 8B CA BA C4 03 B8  // ................
    78F0: 02 0F EF B4 02 E8 6D 00 8B D1 32 ED 8A E6 8A C6  // ......m...2.....
    7900: F3 AA 03 FD 8A CA 4B 75 F7 32 E4 E8 57 00 C3 53  // ......Ku.2..W..S
    7910: 8A 1E 62 04 0B C0 75 04 0A DB 74 03 E8 35 03 5B  // ..b...u...t..5.[
    7920: 8B F8 2B D1 81 C2 01 01 8A C3 32 E4 C3 8A C6 32  // ..+.......2....2
    7930: F6 2B EA 0A DB 74 2A 2A C3 F6 26 85 04 8B C8 52  // .+...t**..&....R
    7940: B4 01 E8 20 00 B2 C4 B8 02 0F EF 5A 1E 06 1F 8B  // ... .......Z....
    7950: C1 8B CA F3 A4 03 F5 03 FD 48 75 F5 1F E8 81 FF  // .........Hu.....
    7960: C3 8A D8 EB F8 BA CE 03 B0 05 EE 42 EC 24 FC 0A  // ...........B.$..
    7970: C4 EE 4A C3 9C FA EE 42 EB 00 EC 4A 9D C3 1E 2E  // ..J....B...J....
    7980: 8E 1E 07 03 8B 16 63 04 80 C2 06 1F C3 1E 2E 8E  // ......c.........
    7990: 1E 07 03 8B 16 63 04 1F C3 50 BA CC 03 EC B2 D4  // .....c...P......
    79A0: A8 01 75 02 B2 B4 58 C3 E8 EE FF 80 C2 06 C3 1E  // ..u...X.........
    79B0: 2E 8E 1E 07 03 80 3E 49 04 03 74 13 80 3E 49 04  // ......>I..t..>I.
    79C0: 02 74 0C 80 3E 49 04 01 74 05 80 3E 49 04 00 1F  // .t..>I..t..>I...
    79D0: C3 50 2E 8E 06 0B 03 A0 10 04 24 30 3C 30 74 05  // .P........$0<0t.
    79E0: 2E 8E 06 0D 03 58 0B C0 74 03 E8 E1 01 03 06 4E  // .....X..t......N
    79F0: 04 81 C2 01 01 2B D1 32 ED 8B 2E 4A 04 8B F8 8B  // .....+.2...J....
    7A00: F0 8B C5 F6 E3 D1 E0 D1 E5 0A DB 75 02 8A DE 38  // ...........u...8
    7A10: F3 7E 02 8A DE C3 FC 8A D8 8B C1 E8 B3 FF 03 F0  // .~..............
    7A20: 3A 16 4A 04 74 06 06 1F E8 1B 00 C3 06 1F E8 40  // :.J.t..........@
    7A30: 00 C3 FC 8A D8 8A C1 8A E6 E8 95 FF F7 DD 2B F0  // ..............+.
    7A40: 06 1F E8 01 00 C3 53 8A CE 2A CB 32 ED 32 F6 2B  // ......S..*.2.2.+
    7A50: EA 2B EA E3 0E 8A E1 8B CA F3 A5 03 F5 03 FD FE  // .+..............
    7A60: CC 75 F4 58 B0 20 8A CA F3 AB 03 FD FE CB 75 F6  // .u.X. ........u.
    7A70: C3 53 8A C6 2A C3 74 06 F6 E2 8B C8 F3 A5 58 8B  // .S..*.t.......X.
    7A80: C8 F6 E2 91 B0 20 F3 AB C3 8B D8 E8 2E 00 2E 8E  // ..... ..........
    7A90: 1E 0D 03 8A C3 22 DF D3 E3 A8 80 74 03 30 1C C3  // .....".....t.0..
    7AA0: F6 D7 8A 34 22 F7 0A DE 88 1C C3 8A FC E8 0C 00  // ...4"...........
    7AB0: 2E 8E 1E 0D 03 8A 04 D2 E8 22 C7 C3 B0 28 F6 E2  // ........."...(..
    7AC0: F6 C2 01 74 03 05 D8 1F 8B F1 C1 EE 02 80 FF 05  // ...t............
    7AD0: 7F 0C 03 F0 F6 D1 80 E1 03 D0 E1 B7 03 C3 D1 EE  // ................
    7AE0: 03 F0 F6 D1 80 E1 07 B7 01 C3 FC 8A D8 2E 8E 06  // ................
    7AF0: 0D 03 8B C1 E8 86 00 75 02 8A DE 03 F0 E8 24 00  // .......u......$.
    7B00: C3 FC 8A D8 2E 8E 06 0D 03 8A C1 8A E6 E8 6D 00  // ..............m.
    7B10: 75 02 8A DE F7 DD 81 C6 F0 00 81 C7 F0 00 2B F0  // u.............+.
    7B20: E8 01 00 C3 8A CE 2A CB E3 2C 51 8A CA 56 57 D1  // ......*..,Q..VW.
    7B30: E9 F3 A5 13 C9 F3 A4 8A CA 2B F1 2B F9 81 C6 00  // .........+.+....
    7B40: 20 81 C7 00 20 D1 E9 F3 A5 13 C9 F3 A4 5F 5E 03  //  ... ........_^.
    7B50: F5 03 FD 59 E2 D4 8A C7 8A E7 8A CA 57 D1 E9 F3  // ...Y........W...
    7B60: AB 13 C9 F3 AA 8A CA 2B F9 81 C7 00 20 D1 E9 F3  // .......+.... ...
    7B70: AB 13 C9 F3 AA 5F 03 FD FE CB 75 DE C3 E8 B0 00  // ....._....u.....
    7B80: 81 C2 01 01 2B D1 38 F3 76 02 32 DB 51 B1 02 D2  // ....+.8.v.2.Q...
    7B90: E6 D2 E3 59 32 ED BD 50 00 80 3E 49 04 06 74 04  // ...Y2..P..>I..t.
    7BA0: D0 E2 D1 E0 06 1F 8B F8 8B F0 B0 50 F6 E3 0A DB  // ...........P....
    7BB0: C3 52 53 8A DF 32 FF D1 E3 8B 87 50 04 E8 0E 00  // .RS..2.....P....
    7BC0: 50 D1 EB A1 4C 04 F7 E3 5B 03 C3 5B 5A C3 52 8B  // P...L...[..[Z.R.
    7BD0: D0 A0 4A 04 F6 E4 32 F6 03 C2 D1 E0 5A C3 8B E8  // ..J...2.....Z...
    7BE0: 83 E5 0F 2E 8A A6 8E 7B 8B E8 C1 ED 04 83 E5 0F  // .......{........
    7BF0: 2E 8A 86 8E 7B C3 00 03 0C 0F 30 33 3C 3F C0 C3  // ....{.....03<?..
    7C00: CC CF F0 F3 FC FF 26 8B 04 86 E0 BA 00 80 F6 C4  // ......&.........
    7C10: C0 74 02 0A D6 D0 EE C1 E0 02 75 F2 88 56 00 45  // .t........u..V.E
    7C20: C3 8B 16 63 04 8A C5 86 E0 EF 8A E1 FE C0 EF C3  // ...c............
    7C30: 52 8B D0 8A C4 F6 26 4A 04 C1 E0 02 32 F6 03 C2  // R.....&J....2...
    7C40: 5A C3 53 8A DF 32 FF D1 E3 8B 87 50 04 D1 EB E8  // Z.S..2.....P....
    7C50: 02 00 5B C3 52 8B D0 32 F6 52 8A C4 F6 26 85 04  // ..[.R..2.R...&..
    7C60: F7 26 4A 04 5A 03 C2 0A DB 74 08 03 06 4C 04 FE  // .&J.Z....t...L..
    7C70: CB 75 F8 5A C3 52 8B D0 A0 4A 04 F6 E4 32 F6 03  // .u.Z.R...J...2..
    7C80: C2 D1 E0 03 06 4E 04 D1 F8 8B C8 B4 0E E8 91 FF  // .....N..........
    7C90: 5A C3 8B C2 F7 26 4A 04 8B F9 C1 EF 03 03 F8 0A  // Z....&J.........
    7CA0: FF 74 0A 8A C7 32 E4 F7 26 4C 04 03 F8 80 E1 07  // .t...2..&L......
    7CB0: B4 80 D2 EC C3 E8 F0 FC EC C3 E8 F8 FF B2 C0 B0  // ................
    7CC0: 20 EE C3 E8 EF FF B2 C0 32 C0 EE C3 C4 3E A8 04  //  .......2....>..
    7CD0: 26 C4 7D 04 8C C5 0B EF C3 53 B0 0E E8 95 FC 8A  // &.}......S......
    7CE0: E0 B0 0F E8 8E FC 8B D8 B8 0E AA EF B8 0F 55 EF  // ..............U.
    7CF0: B0 0E E8 7F FC 3C AA 74 0D B0 0F E8 76 FC 3C 55  // .....<.t....v.<U
    7D00: 74 04 32 C0 5B C3 B0 0E 8A E7 EF FE C0 8A E3 EF  // t.2.[...........
    7D10: B0 01 0A C0 5B C3 8A EE 8A 36 85 04 06 1F 0A DB  // ....[....6......
    7D20: 74 25 8A C5 2A C3 F6 E6 8B C8 52 32 F6 C1 E2 02  // t%..*.....R2....
    7D30: 8B C2 D1 E2 2B D5 51 8B C8 F3 A5 2B FA 2B F2 59  // ....+.Q....+.+.Y
    7D40: E2 F4 5A E8 05 00 C3 8A DD EB F8 8A C6 F6 E3 8B  // ..Z.............
    7D50: C8 8A C7 8A E0 32 F6 C1 E2 02 8B DA D1 E2 8B F1  // .....2..........
    7D60: 2B D5 8B CB F3 AB 2B FA 4E 75 F7 C3 2E 8E 1E 07  // +.....+.Nu......
    7D70: 03 89 0E 60 04 8A C5 24 60 A8 20 74 06 B9 00 1E  // ...`...$`. t....
    7D80: E9 94 00 F6 06 87 04 01 0F 85 8B 00 80 3E 49 04  // .............>I.
    7D90: 07 74 06 E8 19 FC 74 01 C3 F6 06 87 04 08 74 03  // .t....t.......t.
    7DA0: CD 42 C3 8A 36 85 04 8A D6 FE CA 38 CD 7E 1F 0A  // .B..6......8.~..
    7DB0: C9 74 64 8A E9 8A CE FE C9 EB 5C 38 D1 74 58 8A  // .td.......\8.tX.
    7DC0: CE 80 FD 03 7C 04 8A E9 D0 ED FE C9 EB 49 80 F9  // ....|........I..
    7DD0: 03 7E 44 8A E1 2A E5 0A E4 75 0A 38 CA 74 38 FE  // .~D..*...u.8.t8.
    7DE0: CA 38 CA 74 32 8A C5 0A C1 38 F0 7E 0A 80 FC 02  // .8.t2....8.~....
    7DF0: 7E 12 80 FD 02 7F C8 80 FC 03 7D BF 8A D6 FE CA  // ~.........}.....
    7E00: 38 D1 74 13 8A CE FE C9 FE C9 8A E9 2A EC 80 FE  // 8.t.........*...
    7E10: 08 7F 04 FE C1 FE C5 B4 0A E8 05 FE C3 2E 8E 1E  // ................
    7E20: 07 03 A2 62 04 32 E4 8B F0 F7 26 4C 04 A3 4E 04  // ...b.2....&L..N.
    7E30: 8B C8 E8 7A FB 74 07 80 3E 49 04 07 77 02 D1 F9  // ...z.t..>I..w...
    7E40: B4 0C E8 DC FD D1 E6 8B 84 50 04 E8 27 FE C3 2E  // .........P..'...
    7E50: 8E 1E 07 03 8A 26 49 04 E8 BB 9C 74 07 C7 06 50  // .....&I....t...P
    7E60: 04 00 00 C3 E8 48 FB 74 0B 80 FC 07 74 06 77 08  // .....H.t....t.w.
    7E70: E8 77 FC C3 E8 9F FB C3 80 FC 13 7C 03 74 1F C3  // .w.........|.t..
    7E80: E8 4E FA 8A D8 8B C1 E8 85 FA 8B 2E 4A 04 52 F6  // .N..........J.R.
    7E90: 26 85 04 F7 E5 8B F7 03 F0 5A E8 90 FA C3 E8 30  // &........Z.....0
    7EA0: FA 8A D8 8B C1 E8 67 FA C1 E7 03 52 8B 2E 4A 04  // ......g....R..J.
    7EB0: C1 E5 03 F7 26 85 04 F7 E5 8B F7 03 F0 5A E8 55  // ....&........Z.U
    7EC0: FE C3 2E 8E 1E 07 03 8A 26 49 04 E8 E1 FA 74 0C  // ........&I....t.
    7ED0: 80 FC 07 74 07 77 40 80 FC 03 7F 04 E8 53 FB C3  // ...t.w@......S..
    7EE0: E8 1E FC C3 E8 EA F9 8A D8 8A C1 8A E6 FE C4 E8  // ................
    7EF0: 1D FA 2B 3E 4A 04 C1 E7 03 52 F7 26 85 04 F7 26  // ..+>J....R.&...&
    7F00: 4A 04 C1 E0 03 8B F7 2B F0 5A 8B 2E 4A 04 C1 E5  // J......+.Z..J...
    7F10: 03 F7 DD E8 00 FE C3 80 FC 13 7C 03 74 C6 C3 E8  // ..........|.t...
    7F20: AF F9 8A D8 8A C1 8A E6 FE C4 E8 E2 F9 52 8B 2E  // .............R..
    7F30: 4A 04 F7 26 85 04 F7 E5 2B FD 8B F7 2B F0 5A F7  // J..&....+...+.Z.
    7F40: DD E8 E9 F9 C3 2E 8E 1E 07 03 2E 8E 06 0D 03 E8  // ................
    7F50: 5D FA 74 11 80 3E 49 04 07 7C 18 2E 8E 06 0B 03  // ].t..>I..|......
    7F60: 74 03 E9 B1 00 E8 49 FC 8B D8 26 8B 07 8B EC 89  // t.....I...&.....
    7F70: 46 1A C3 A1 50 04 E8 B7 FC 8B F0 BB 08 00 2B E3  // F...P.........+.
    7F80: 8B EC 80 3E 49 04 06 75 1F B9 04 00 26 8A 04 88  // ...>I..u....&...
    7F90: 46 00 45 26 8A 84 00 20 88 46 00 45 83 C6 50 E2  // F.E&... .F.E..P.
    7FA0: EB B8 00 02 B2 80 EB 17 D1 E6 B9 04 00 E8 56 FC  // ..............V.
    7FB0: 81 C6 00 20 E8 4F FC 81 EE B0 1F E2 F0 EB E2 2B  // ... .O.........+
    7FC0: EB C4 3E 0C 01 32 F6 80 FB 0E 75 09 26 83 7D FE  // ..>..2....u.&.}.
    7FD0: 10 75 02 B6 80 16 1F 8B F5 8B CB F6 C6 80 74 01  // .u............t.
    7FE0: 47 56 57 F3 A6 5F 5E 74 23 FE C0 03 FB F6 C6 80  // GVW.._^t#.......
    7FF0: 74 01 47 FE CA 75 E2 FE CC 74 0F 2E 8E 1E 07 03  // t.G..u...t......
    8000: C4 3E 7C 00 B0 80 B2 80 EB CB 32 C0 8B E5 03 E3  // .>|.......2.....
    8010: 8B EC 89 46 1A C3 80 3E 49 04 13 7C 05 75 02 EB  // ...F...>I..|.u..
    8020: 5A C3 2E 8E 06 09 03 E8 18 FC 8B F0 8B 1E 85 04  // Z...............
    8030: 2B E3 8B EC B8 05 08 B9 05 00 BA CE 03 80 3E 49  // +.............>I
    8040: 04 0F 72 1A F6 06 87 04 60 75 13 B4 0A F7 C6 01  // ..r.....`u......
    8050: 00 75 02 B4 05 B0 07 EF B8 05 18 B9 05 01 EF 51  // .u.............Q
    8060: 8B CB 26 8A 04 F6 D0 88 46 00 45 03 36 4A 04 E2  // ..&.....F.E.6J..
    8070: F1 58 EF B8 00 01 32 D2 E9 44 FF 2E 8E 06 09 03  // .X....2..D......
    8080: A1 50 04 8B D0 32 F6 52 8A C4 32 E4 F7 26 4A 04  // .P...2.R..2..&J.
    8090: F7 26 85 04 5A 03 C2 8B F0 8B 1E 85 04 2B E3 8B  // .&..Z........+..
    80A0: EC 53 8B 3E 4A 04 4F C1 E7 03 C1 E6 03 B9 08 00  // .S.>J.O.........
    80B0: 32 E4 26 8A 04 D0 E4 0A C0 74 03 80 CC 01 46 E2  // 2.&......t....F.
    80C0: F1 88 66 00 45 03 F7 4B 75 E3 5B B8 00 01 32 D2  // ..f.E..Ku.[...2.
    80D0: E9 EC FE 33 ED EB 03 BD 01 00 2E 8E 1E 07 03 2E  // ...3............
    80E0: 8E 06 0D 03 8A 26 49 04 E8 C4 F8 74 0F 2E 8E 06  // .....&I....t....
    80F0: 0B 03 80 FC 07 74 05 7C 3D E9 0B 02 8A E3 8B F0  // .....t.|=.......
    8100: 8A DF 32 FF D1 E3 8B 87 50 04 8B D0 A0 4A 04 F6  // ..2.....P....J..
    8110: E4 32 F6 03 C2 8B F8 D1 E7 0A DB 74 0B D0 EB A1  // .2.........t....
    8120: 4C 04 03 F8 FE CB 75 FA 8B C6 0B ED 75 03 F3 AB  // L.....u.....u...
    8130: C3 AA 47 E2 FC C3 50 2E 8E 06 0D 03 A1 50 04 E8  // ..G...P......P..
    8140: EE FA 8B F8 A0 50 04 8A 26 4A 04 8B E8 58 A8 80  // .....P..&J...X..
    8150: 74 08 24 7F C5 36 7C 00 EB 04 C5 36 0C 01 8A FC  // t.$..6|....6....
    8160: 32 E4 C1 E0 03 03 F0 80 FF 06 74 69 D1 E7 8A F3  // 2.........ti....
    8170: B0 55 80 E3 03 F6 E3 8A D8 8A F8 8B C5 50 B2 04  // .U...........P..
    8180: F6 C6 80 75 27 AC E8 55 FA 23 C3 AB AC E8 4E FA  // ...u'..U.#....N.
    8190: 23 C3 26 89 85 FE 1F 83 C7 4E FE CA 75 E7 83 EE  // #.&......N..u...
    81A0: 08 81 EF 3E 01 58 E8 72 00 E2 D2 C3 AC E8 2E FA  // ...>.X.r........
    81B0: 23 C3 26 31 05 AC E8 25 FA 23 C3 26 31 85 00 20  // #.&1...%.#.&1.. 
    81C0: 83 C7 50 FE CA 75 E5 83 EE 08 81 EF 3E 01 58 E8  // ..P..u......>.X.
    81D0: 49 00 E2 A9 C3 8B C5 50 B2 04 F6 C3 80 74 1F AC  // I......P.....t..
    81E0: 26 30 05 AC 26 30 85 00 20 83 C7 50 FE CA 7F EF  // &0..&0.. ..P....
    81F0: 83 EE 08 81 EF 3F 01 58 E8 20 00 E2 DA C3 AC AA  // .....?.X. ......
    8200: AC 26 88 85 FF 1F 83 C7 4F FE CA 7F F1 83 EE 08  // .&......O.......
    8210: 81 EF 3F 01 58 E8 03 00 E2 BD C3 FE C0 38 E0 72  // ..?.X........8.r
    8220: 06 32 C0 81 C7 F0 00 C3 8A 16 85 04 F6 E2 8B F0  // .2..............
    8230: 32 F6 8B EA 66 0F B6 06 51 04 F6 E2 66 0F B7 16  // 2...f...Q...f...
    8240: 4A 04 83 FA 64 75 03 BA 68 00 83 FA 5A 75 03 BA  // J...du..h...Zu..
    8250: 60 00 81 FA AF 00 75 03 BA B0 00 52 F7 E2 66 0F  // `.....u....R..f.
    8260: B7 F8 66 0F B6 06 50 04 66 03 F8 66 C1 CF 10 03  // ..f...P.f..f....
    8270: FA 66 C1 C7 03 81 CF 00 FF 66 C1 C7 10 5A 8A E2  // .f.......f...Z..
    8280: 4A C1 E2 03 A0 50 04 50 C5 06 0C 01 03 F0 2E 8E  // J....P.P........
    8290: 06 09 03 58 57 51 50 9C FC 8B CD E8 3B 00 B5 08  // ...XWQP.....;...
    82A0: AC 8A E0 8A C7 D0 E4 73 02 8A C3 26 88 05 66 47  // .......s...&..fG
    82B0: FE CD 75 EF 66 03 FA E2 E2 9D 58 59 5F 83 C7 08  // ..u.f.....XY_...
    82C0: FE C0 38 E0 72 0E 51 32 C0 8B CD 49 03 FA 83 C7  // ..8.r.Q2...I....
    82D0: 08 E2 F9 59 2B F5 E2 BC C3 06 52 33 C0 8E C0 66  // ...Y+.....R3...f
    82E0: C1 C7 10 8B C7 66 C1 C7 10 E8 2A 98 74 16 38 E0  // .....f....*.t.8.
    82F0: 74 12 0F B6 D0 E8 85 C9 8A E0 66 C1 C7 10 8B F8  // t.........f.....
    8300: 66 C1 C7 10 5A 07 C3 80 FC 13 7C 0B 0F 84 18 FF  // f...Z.....|.....
    8310: 80 FC 62 0F 84 11 FF E8 01 00 C3 80 FC 11 75 06  // ..b...........u.
    8320: 80 E3 80 80 CB 0F 50 53 8A DF 32 FF D1 E3 8B 97  // ......PS..2.....
    8330: 50 04 5B 2E 8E 06 09 03 E8 07 F9 8B F8 8B 2E 85  // P.[.............
    8340: 04 58 32 F6 52 8B 36 4A 04 56 8A 26 85 04 C5 36  // .X2.R.6J.V.&...6
    8350: 0C 01 80 FC 0E 75 09 83 7C FE 10 75 03 B4 10 46  // .....u..|..u...F
    8360: F6 E4 03 F0 B6 03 F6 C3 80 75 6D B2 C4 B8 02 0F  // .........um.....
    8370: EF 5A 58 50 52 4A 8A E0 57 51 51 57 8B CD 32 C0  // .ZXPRJ..WQQW..2.
    8380: AA 03 FA E2 FB 5F 47 FE C4 38 D4 76 0A 32 E4 8B  // ....._G..8.v.2..
    8390: CD 49 03 FA 47 E2 FB 59 E2 E0 59 5F BA C4 03 B0  // .I..G..Y..Y_....
    83A0: 02 8A E3 EF 5B 4B 5A 51 57 8B CD AC 26 8A 25 AA  // ....[KZQW...&.%.
    83B0: 03 FB E2 F7 5F 47 2B F5 42 3B D3 76 0A 33 D2 8B  // ...._G+.B;.v.3..
    83C0: CD 49 03 FB 47 E2 FB 59 E2 DD BA CE 03 B8 03 00  // .I..G..Y........
    83D0: EF B2 C4 B8 02 0F EF C3 B2 CE B8 03 18 EF EB BC  // ................
    83E0: 2E 8E 1E 07 03 80 3E 63 04 B4 74 0B BA CC 03 EC  // ......>c..t.....
    83F0: A8 01 75 04 CD 42 C3 C3 E8 D1 F8 0A FF 75 1C 8A  // ..u..B.......u..
    8400: E3 80 E4 1F 80 26 66 04 E0 08 26 66 04 E8 2D 00  // .....&f...&f..-.
    8410: 8A 1E 66 04 80 E3 20 B1 05 D2 EB E8 91 F5 74 19  // ..f... .......t.
    8420: A0 66 04 24 DF 80 E3 01 74 02 0C 20 A2 66 04 24  // .f.$....t.. .f.$
    8430: 10 0C 02 0A D8 E8 53 00 C3 E8 7E F8 C3 53 50 80  // ......S...~..SP.
    8440: E3 0F 8A FB D0 E3 81 E3 10 07 0A DF E8 60 F5 74  // .............`.t
    8450: 0E B4 00 8A C3 E8 2C F3 0B ED 74 03 26 88 1D 8A  // ......,...t.&...
    8460: C3 E8 0B 00 0B ED 74 04 26 88 5D 10 58 5B C3 8A  // ......t.&.].X[..
    8470: E0 1E 2E 8E 1E 07 03 80 3E 49 04 33 1F 7F 08 8A  // ........>I.3....
    8480: C4 B4 11 E8 FE F2 C3 E8 30 F8 C3 9C FA E8 9F 05  // ........0.......
    8490: B2 C0 B9 03 00 B4 01 8A C4 EE 8A C3 EE 0B ED 74  // ...............t
    84A0: 04 47 26 88 1D FE C4 80 C3 02 E2 EB B0 20 EE 9D  // .G&.......... ..
    84B0: C3 2E 8E 1E 07 03 8A 26 49 04 E8 F2 F4 74 0A 80  // .......&I....t..
    84C0: FC 07 77 06 74 03 E8 C0 F5 C3 80 FC 13 7C 03 74  // ..w.t........|.t
    84D0: 4C C3 8A D8 E8 BB F7 BA CE 03 B0 08 EF 2E 8E 1E  // L...............
    84E0: 09 03 F6 C3 80 75 1C B2 C4 B8 02 FF EF 8A 25 C6  // .....u........%.
    84F0: 05 00 8A E3 EF 8A 25 B4 FF 88 25 EF B2 CE B8 08  // ......%...%.....
    8500: FF EF C3 B8 03 18 EF B2 C4 B0 02 8A E3 EF 8A 25  // ...............%
    8510: B4 FF 88 25 EF B2 CE B8 03 00 EF EB E1 50 2E 8E  // ...%.........P..
    8520: 06 09 03 A1 4A 04 C1 E0 03 F7 E2 03 C1 8B F8 58  // ....J..........X
    8530: 26 88 05 C3 2E 8E 1E 07 03 8A 26 49 04 E8 6F F4  // &.........&I..o.
    8540: 74 0F 80 FC 07 77 0B 74 08 E8 5F F5 8B EC 89 46  // t....w.t.._....F
    8550: 1A C3 80 FC 13 7C 03 74 29 C3 E8 35 F7 8A CC 2E  // .....|.t)..5....
    8560: 8E 1E 09 03 BA CE 03 32 FF B8 04 03 EF D0 E7 8A  // .......2........
    8570: 1D 22 D9 74 03 80 CF 01 FE CC 7D F0 8B EC 88 7E  // .".t......}....~
    8580: 1A C3 A1 4A 04 C1 E0 03 F7 E2 03 C1 8B F8 2E 8E  // ...J............
    8590: 1E 09 03 8A 05 8B EC 88 46 1A C3 2E 8E 1E 07 03  // ........F.......
    85A0: 8A 3E 62 04 8A CF D0 E1 32 ED BE 50 04 03 F1 8B  // .>b.....2..P....
    85B0: 14 8A 0E 49 04 3C 0D 76 4A 2E 8E 06 0D 03 E8 EE  // ...I.<.vJ.......
    85C0: F3 75 33 8A 1E 4A 04 8A F8 8A C6 F6 E3 8A CA 03  // .u3..J..........
    85D0: C8 D1 E1 03 0E 4E 04 8B F9 8A C7 AA D1 E9 41 FE  // .....N........A.
    85E0: C2 38 DA 73 59 89 14 8B 16 63 04 B0 0E 8A E5 EF  // .8.sY....c......
    85F0: 8A E1 FE C0 EF C3 2E 8E 06 0B 03 80 F9 07 74 C3  // ..............t.
    8600: E9 83 00 75 04 32 D2 EB 0F 3C 0A 75 1D 3A 36 84  // ...u.2...<.u.:6.
    8610: 04 75 03 E9 93 00 FE C6 89 14 E8 92 F3 75 05 80  // .u...........u..
    8620: F9 07 7F 05 8B C2 E8 4C F6 C3 3C 07 75 04 E8 41  // .......L..<.u..A
    8630: 7F C3 3C 08 75 83 0A D2 74 DE FE CA EB DA 32 FF  // ..<.u...t.....2.
    8640: 32 D2 2B CB 3A 36 84 04 74 06 FE C6 03 CB EB 95  // 2.+.:6..t.......
    8650: 89 14 8B 16 63 04 B0 0E 8A E5 EF 8A E1 FE C0 EF  // ....c...........
    8660: 2B FB 2B FB 26 8A 65 02 50 8B 3E 4E 04 8B F3 D1  // +.+.&.e.P.>N....
    8670: E6 03 F7 A0 84 04 F6 E3 8B C8 06 1F F3 A5 8B CB  // ................
    8680: 58 B0 20 F3 AB C3 B9 01 00 B4 0A E8 B6 C6 FE C2  // X. .............
    8690: 3A 16 4A 04 74 03 89 14 C3 32 FF 32 D2 89 14 3A  // :.J.t....2.2...:
    86A0: 36 84 04 74 2E FE C6 EB ED 89 14 2E 8E 06 0D 03  // 6..t............
    86B0: E8 FC F2 74 0E 2E 8E 06 0B 03 80 F9 07 74 04 32  // ...t.........t.2
    86C0: FF EB 10 8B C2 E8 AD F5 8B F9 D1 E7 4F 8B 1E 4A  // ............O..J
    86D0: 04 EB 91 33 C9 8A 36 84 04 8A 16 4A 04 FE CA B0  // ...3..6....J....
    86E0: 01 E9 70 F7 2E 8E 1E 07 03 F6 06 87 04 08 74 03  // ..p...........t.
    86F0: CD 42 C3 E8 76 F6 8B EC C6 46 1B 00 C3 2E 8E 1E  // .B..v....F......
    8700: 07 03 8A DF 32 FF D1 E3 89 97 50 04 D0 EB 38 1E  // ....2.....P...8.
    8710: 62 04 75 05 8B C2 E8 5C F5 C3 2E 8E 1E 07 03 8A  // b.u....\........
    8720: DF 32 FF D1 E3 8B 97 50 04 8B 0E 60 04 8B EC 89  // .2.....P...`....
    8730: 4E 16 89 56 12 C3 2E 8E 1E 07 03 A0 87 04 24 80  // N..V..........$.
    8740: 0A 06 49 04 8A 26 4A 04 F6 06 87 04 08 75 2D E8  // ..I..&J......u-.
    8750: 5D F2 74 07 80 3E 49 04 07 7F 21 51 8A CC 8A 2E  // ].t..>I...!Q....
    8760: 84 04 BE 27 87 81 FE 30 87 74 10 2E 3B 0C 74 05  // ...'...0.t..;.t.
    8770: 83 C6 03 EB F0 24 80 2E 0A 44 02 59 8A 3E 62 04  // .....$...D.Y.>b.
    8780: 8B EC 89 46 1A 89 5E 0E 89 4E 16 89 56 12 C3 84  // ...F..^..N..V...
    8790: 18 23 84 2B 33 84 2A 32 2E 8E 1E 07 03 3C 04 7F  // .#.+3.*2.....<..
    87A0: 1B 50 52 BA CC 03 EC A8 01 5A 58 74 08 80 3E 63  // .PR......ZXt..>c
    87B0: 04 D4 74 08 C3 80 3E 63 04 B4 75 F8 3C 1C 73 F4  // ..t...>c..u.<.s.
    87C0: 32 E4 8B E8 D1 E5 2E FF A6 63 87 9B 87 BB 87 CD  // 2........c......
    87D0: 87 02 88 4C 87 4C 87 4C 87 27 88 3F 88 43 88 4C  // ...L.L.L.'.?.C.L
    87E0: 87 4C 87 4C 87 4C 87 4C 87 4C 87 71 88 4C 87 75  // .L.L.L.L.L.q.L.u
    87F0: 88 90 88 4C 87 CF 88 4C 87 DD 88 F8 88 FF 88 0B  // ...L...L........
    8800: 89 2F 89 80 3E 49 04 13 74 15 E8 BF F4 8B C3 86  // ./..>I..t.......
    8810: E0 E8 70 EF 0B ED 74 07 8A C7 32 FF 26 88 01 E8  // ..p...t...2.&...
    8820: 93 F4 C3 E8 A6 F4 8A C7 E8 44 FC 0B ED 74 F0 26  // .........D...t.&
    8830: 88 7D 11 EB EA 80 3E 49 04 13 74 E3 06 E8 8C F4  // .}....>I..t.....
    8840: 1F 0B ED 74 07 8B F2 B9 11 00 F3 A4 8B F2 E8 DE  // ...t............
    8850: 01 32 E4 B9 10 00 B2 C0 9C FA 8A C4 EE AC EE 9D  // .2..............
    8860: FE C4 E2 F4 AC E8 07 FC EB B5 80 FB 01 77 B0 E8  // .............w..
    8870: 43 F4 B2 C0 B0 30 E8 FB F0 24 F7 80 26 65 04 DF  // C....0...$..&e..
    8880: 80 FB 00 74 07 0C 08 80 0E 65 04 20 EE EB 90 E8  // ...t.....e. ....
    8890: 9D 01 8A C3 B2 C0 E8 DB F0 8B C8 EE B0 20 EE 8B  // ............. ..
    88A0: EC 88 4E 0F E9 78 FF B3 11 EB E4 8B FA E8 05 F4  // ..N..x..........
    88B0: B9 10 00 32 E4 B2 C0 8A C4 9C FA EE 42 EC 26 88  // ...2........B.&.
    88C0: 05 FE C4 4A EE 9D 47 E2 EE 9C FA B0 11 EE 42 EC  // ...J..G.......B.
    88D0: 9D 26 88 05 E8 E3 F3 EB 5A E8 CE 00 C3 8B FA 51  // .&......Z......Q
    88E0: 8B C3 26 8A 35 26 8A 6D 01 26 8A 4D 02 E8 CA 00  // ..&.5&.m.&.M....
    88F0: 83 C7 03 43 59 E2 E8 C3 0A DB 75 1A E8 B6 F3 B2  // ...CY.....u.....
    8900: C0 B0 30 E8 6E F0 24 7F F6 C7 01 74 02 0C 80 B4  // ..0.n.$....t....
    8910: 30 E8 70 EE EB 1D FE CB 75 1C E8 98 F3 B2 C0 B0  // 0.p.....u.......
    8920: 30 E8 50 F0 EE A8 80 75 03 C0 E7 02 B4 34 8A C7  // 0.P....u.....4..
    8930: E8 51 EE E8 7F F3 C3 8A C3 E8 D1 00 8B EC 89 4E  // .Q.............N
    8940: 16 88 76 13 C3 8B FA 51 8B C3 E8 C3 00 26 88 35  // ..v....Q.....&.5
    8950: 26 88 6D 01 26 88 4D 02 83 C7 03 43 59 E2 E8 C3  // &.m.&.M....CY...
    8960: BA C6 03 8A C3 EE C3 BA C6 03 EC 32 E4 8B EC 89  // ...........2....
    8970: 46 0E C3 E8 3F F3 B2 C0 B0 34 E8 F7 EF 8A F8 EE  // F...?....4......
    8980: B0 30 E8 EF EF B3 01 A8 80 75 05 B3 00 C0 EF 02  // .0.......u......
    8990: 8B EC 89 5E 0E EB 9C 51 8B C3 E8 73 00 E8 2A 00  // ...^...Q...s..*.
    89A0: 8A C3 E8 52 00 43 59 E2 EE C3 F6 06 89 04 02 74  // ...R.CY........t
    89B0: 03 E8 16 00 8A C3 E8 39 00 C3 F6 06 89 04 02 74  // .......9.......t
    89C0: 03 E8 06 00 8A C3 E8 2E 00 C3 50 B0 1E F6 E6 50  // ..........P....P
    89D0: B0 3B F6 E5 50 B0 0B F6 E1 59 03 C1 59 03 C1 B1  // .;..P....Y..Y...
    89E0: 64 F6 F1 80 FC 32 7C 02 FE C0 8A F0 8A E8 8A C8  // d....2|.........
    89F0: 58 C3 52 E8 39 00 5A 53 8B DA BA C8 03 9C FA EE  // X.R.9.ZS........
    8A00: 42 8A C7 EE 8A C5 EE 8A C1 EE 9D 5B C3 E8 1F 00  // B..........[....
    8A10: 53 9C FA BA C7 03 EE 42 42 EC 8A F8 EB 00 EB 00  // S......BB.......
    8A20: EC 8A E8 EB 00 EB 00 EC 8A C8 8A F7 9D 5B C3 50  // .............[.P
    8A30: 51 E8 81 F2 B9 FF 7F EC A8 08 75 02 E2 F9 59 58  // Q.........u...YX
    8A40: C3 2E 8E 1E 07 03 8B F8 24 0F 81 E7 F0 00 C1 EF  // ........$.......
    8A50: 03 83 FF 06 7F 18 2E FF A5 F3 89 FB 89 10 8A AE  // ................
    8A60: 8A 0A 8B 3C 03 74 08 3C 04 7F 03 E8 CF 01 C3 BA  // ...<.t.<........
    8A70: C4 03 B0 03 8A E3 EF C3 3C 04 77 F2 50 53 50 52  // ........<.w.PSPR
    8A80: 8B 16 63 04 B0 07 E8 EB EE 8A E0 D0 EC 80 E4 01  // ..c.............
    8A90: A8 40 74 03 80 CC 02 B0 12 E8 D8 EE 40 A3 85 04  // .@t.........@...
    8AA0: B0 09 E8 CF EE A8 80 74 04 D1 2E 85 04 A1 85 04  // .......t........
    8AB0: 8B D0 3D F4 01 73 1B BA E0 01 3D C2 01 73 13 BA  // ..=..s....=..s..
    8AC0: 90 01 3D 7C 01 73 0B BA 5E 01 3D 4A 01 73 03 BA  // ..=|.s..^.=J.s..
    8AD0: C8 00 89 16 85 04 5A 58 C6 06 84 04 FF E8 5D 01  // ......ZX......].
    8AE0: 5B 58 8A DF 32 FF 0A C0 74 0E B3 0E 3C 01 74 08  // [X..2...t...<.t.
    8AF0: B3 08 3C 02 74 02 B3 10 8A CB 8A E9 81 E9 01 02  // ..<.t...........
    8B00: 80 F9 08 7E 04 81 E9 01 01 87 1E 85 04 53 E8 5B  // ...~.........S.[
    8B10: F2 5B E8 85 02 C3 0A C0 74 11 FE C8 74 1A FE C8  // .[......t...t...
    8B20: 74 38 FE C8 74 3C FE C8 74 40 C3 89 2E 7C 00 8C  // t8..t<..t@...|..
    8B30: 06 7E 00 C3 8C C8 8E C0 FE CA 0A DB 74 07 32 FF  // .~..........t.2.
    8B40: 2E 8A 97 EE 8A 89 0E 85 04 88 16 84 04 89 2E 0C  // ................
    8B50: 01 8C 06 0E 01 C3 00 0D 18 2A E8 09 03 B9 0E 00  // .........*......
    8B60: EB D6 BD FE 59 B9 08 00 EB CA BD 11 62 B9 10 00  // ....Y.......b...
    8B70: EB C2 0A C0 75 BD 8B 0E 85 04 8A 16 84 04 80 FF  // ....u...........
    8B80: 07 77 35 80 FF 01 77 10 0A FF 75 06 C4 2E 7C 00  // .w5...w...u...|.
    8B90: EB 26 C4 2E 0C 01 EB 20 80 FF 02 75 0B 8C CD 8E  // .&..... ...u....
    8BA0: C5 2E 8B 2E F0 72 EB 10 0E 07 8A DF 32 FF 80 EB  // .....r......2...
    8BB0: 02 D1 E3 2E 8B AF 61 8B 8B C5 8B EC 89 4E 16 89  // ......a......N..
    8BC0: 56 12 89 46 0A 8C 46 1E C3 11 62 FE 59 FE 5D FE  // V..F..F...b.Y.].
    8BD0: 61 11 62 11 72 53 06 8A 26 49 04 E8 CD C3 26 8A  // a.b.rS..&I....&.
    8BE0: 47 02 26 8A 67 33 F6 C4 01 74 22 BD 11 62 3C 10  // G.&.g3...t"..b<.
    8BF0: 7D 0E E8 71 02 8C 06 0E 01 3C 0E 7D 07 BD FE 59  // }..q.....<.}...Y
    8C00: 8C 0E 0E 01 89 2E 0C 01 E8 10 01 EB 2D B4 84 3C  // ............-..<
    8C10: 10 7D 13 B4 81 3C 0E 74 0D 7F 15 B4 02 3C 08 74  // .}...<.t.....<.t
    8C20: 05 80 CC 80 EB 0A 26 F6 47 05 01 74 03 80 E4 7F  // ......&.G..t....
    8C30: 86 C4 32 DB E8 06 00 E8 C9 01 07 5B C3 8B F8 8B  // ..2........[....
    8C40: F2 BA CE 03 EC B8 05 00 EF B8 06 04 EF B2 C4 EC  // ................
    8C50: B8 02 04 EF B8 04 07 EF 8B D6 8B C7 50 24 7F 0A  // ............P$..
    8C60: C0 74 22 0E 07 33 D2 B9 00 01 3C 04 75 07 B7 10  // .t"..3....<.u...
    8C70: BD 11 62 EB 10 FE C8 75 07 B7 0E E8 E8 01 EB 05  // ..b....u........
    8C80: B7 08 BD FE 59 E8 2D 00 58 A8 80 74 00 BA C4 03  // ....Y.-.X..t....
    8C90: B8 02 03 EF B8 04 02 EF B2 CC EC A8 01 B8 06 0E  // ................
    8CA0: 75 02 B4 0A B2 CE 50 EC 58 EF B0 04 EE 32 C0 EE  // u.....P.X....2..
    8CB0: B8 05 10 EF C3 FC 0B C9 75 01 C3 80 FF 0E 75 0A  // ........u.....u.
    8CC0: 26 83 7E FE 10 75 03 80 CD 80 1E 06 1F 2E 8E 06  // &.~..u..........
    8CD0: 09 03 8B FA C1 E7 05 B0 40 53 80 E3 03 F6 E3 5B  // ........@S.....[
    8CE0: F6 C3 04 74 02 04 20 86 E0 8B D0 03 FA 8B F5 E3  // ...t.. .........
    8CF0: 28 32 C0 86 FB 32 FF 51 F6 C5 80 74 01 46 8B CB  // (2...2.Q...t.F..
    8D00: F3 A4 83 FB 20 74 07 B9 20 00 2B CB F3 AA 59 F6  // .... t.. .+...Y.
    8D10: C5 80 74 01 46 FE C9 75 DE 1F C3 8A 26 49 04 50  // ..t.F..u....&I.P
    8D20: 06 57 C4 3E A8 04 26 C4 7D 0C 8C C5 0B EF 74 30  // .W.>..&.}.....t0
    8D30: 8B EF 83 C7 07 26 8A 05 3C FF 74 24 38 E0 74 03  // .....&..<.t$8.t.
    8D40: 47 EB F2 8B FD 26 8A 05 FE C8 A2 84 04 26 8B 45  // G....&.......&.E
    8D50: 01 A3 85 04 26 C4 7D 03 89 3E 0C 01 8C 06 0E 01  // ....&.}..>......
    8D60: 5F 07 58 C3 26 F6 47 33 01 74 01 C3 C4 1E A8 04  // _.X.&.G3.t......
    8D70: 26 C4 5F 08 8C C0 0B C3 74 1F BF 0B 00 26 8A 01  // &._.....t....&..
    8D80: 3C FF 74 15 47 38 06 49 04 75 F2 26 8A 07 32 E4  // <.t.G8.I.u.&..2.
    8D90: 87 06 85 04 8B D8 E8 01 00 C3 8B 16 63 04 8A 26  // ............c..&
    8DA0: 85 04 FE CC 80 E4 1F 9C FA 80 FA D4 74 0B B0 14  // ............t...
    8DB0: EE 42 EC 24 E0 0A C4 EE 4A B0 09 EE 42 EC 24 E0  // .B.$....J...B.$.
    8DC0: 0A C4 EE 9D 8A C8 8B C3 8A 16 85 04 F6 F2 80 3E  // ...............>
    8DD0: 84 04 FF 75 07 A2 84 04 FE 0E 84 04 F6 E2 F6 C1  // ...u............
    8DE0: 80 74 02 D1 E0 48 8A E0 B0 12 8B 16 63 04 EF A0  // .t...H......c...
    8DF0: 4A 04 8A 26 84 04 FE C4 F6 E4 D1 E0 05 00 01 A3  // J..&............
    8E00: 4C 04 C3 8A 26 49 04 50 06 57 C4 3E A8 04 26 C4  // L...&I.P.W.>..&.
    8E10: 7D 08 8C C5 0B EF 74 4A 8B EF 83 C7 0B 26 8A 05  // }.....tJ.....&..
    8E20: 3C FF 74 3E 38 E0 74 03 47 EB F2 8B FD 26 8A 3D  // <.t>8.t.G....&.=
    8E30: 26 8A 5D 01 26 8B 4D 02 26 8B 55 04 26 8A 45 0A  // &.].&.M.&.U.&.E.
    8E40: 3C FF 74 02 FE C8 50 A0 84 04 FE C0 F6 26 85 04  // <.t...P......&..
    8E50: A3 85 04 58 A2 84 04 26 C4 7D 06 8B EF 32 C0 E8  // ...X...&.}...2..
    8E60: DB FD 5F 07 58 C3 50 53 51 52 2E A1 11 03 0B C0  // .._.X.PSQR......
    8E70: 74 09 2E 8B 2E F0 72 0E 07 EB 08 B8 30 11 B7 02  // t.....r.....0...
    8E80: E8 C1 BE 5A 59 5B 58 C3 3C 04 7C 01 C3 E3 FD 53  // ...ZY[X.<.|....S
    8E90: 2E 8E 1E 07 03 86 FB 32 FF D1 E3 8B FB 81 C7 50  // .......2.......P
    8EA0: 04 8B 35 5B 89 15 56 8B F0 51 53 26 8A 46 00 45  // ..5[..V..QS&.F.E
    8EB0: 3C 0D 7F 1F 75 04 32 D2 EB 40 3C 0A 74 32 3C 07  // <...u.2..@<.t2<.
    8EC0: 75 05 E8 AD 76 EB 62 3C 08 75 08 0A D2 74 5A FE  // u...v.b<.u...tZ.
    8ED0: CA EB 27 F7 C6 02 00 74 05 26 8A 5E 00 45 B9 01  // ..'....t.&.^.E..
    8EE0: 00 B4 09 E8 5E BE FE C2 3A 16 4A 04 72 0C 32 D2  // ....^...:.J.r.2.
    8EF0: 89 15 3A 36 84 04 73 06 FE C6 89 15 EB 2B 50 E8  // ..:6..s......+P.
    8F00: AD EA 75 08 B8 00 08 E8 3A BE EB 09 80 3E 49 04  // ..u.....:....>I.
    8F10: 07 74 F1 32 E4 86 3E 62 04 53 8A FC 55 E8 25 00  // .t.2..>b.S..U.%.
    8F20: 5D 5B 86 3E 62 04 58 8B 15 5B 59 E2 15 5A F7 C6  // ][.>b.X..[Y..Z..
    8F30: 01 00 75 02 89 15 8B 05 3A 3E 62 04 75 03 E8 34  // ..u.....:>b.u..4
    8F40: ED C3 E9 64 FF 33 C9 8A 36 84 04 8A 16 4A 04 FE  // ...d.3..6....J..
    8F50: CA B8 01 06 E8 ED BD C3 2E 8E 1E 07 03 0A C0 75  // ...............u
    8F60: 0D E8 18 00 8B EC 89 5E 0E C6 46 1A 1A C3 3C 01  // .......^..F...<.
    8F70: 75 09 E8 41 00 8B EC C6 46 1A 1A C3 A0 8A 04 BF  // u..A....F.......
    8F80: EE 8F 2E 3A 05 72 04 BB FF FF C3 32 E4 D1 E0 03  // ...:.r.....2....
    8F90: F8 2E 8B 5D 04 0A DB 74 05 0A FF 75 04 C3 86 FB  // ...]...t...u....
    8FA0: C3 A0 10 04 24 30 3C 30 74 06 F6 C3 01 75 EF C3  // ....$0<0t....u..
    8FB0: F6 C3 01 74 E9 C3 BF EE 8F 2E 8A 0D 32 C0 83 C7  // ...t........2...
    8FC0: 04 2E 3B 1D 74 12 86 FB 2E 3B 1D 74 0B 83 C7 02  // ..;.t....;.t....
    8FD0: FE C0 38 C8 7E EB B0 FF A2 8A 04 C3 BB 08 00 F6  // ..8.~...........
    8FE0: 06 89 04 02 74 0E BB 07 00 BA CC 03 EC A8 01 74  // ....t..........t
    8FF0: 18 BB 08 00 BA B4 03 E8 DF EC 74 21 B7 01 E8 8C  // ..........t!....
    9000: E9 80 FA D4 74 17 86 FB C3 BA D4 03 E8 CA EC 74  // ....t..........t
    9010: 0C B7 02 E8 77 E9 80 FA B4 74 02 86 FB C3 0F 08  // ....w....t......
    9020: 0F 08 0F 08 0F 08 03 01 03 01 01 01 00 08 01 01  // ................
    9030: 01 01 01 01 01 01 0F 01 0F 08 0F 04 00 02 0F 02  // ................
    9040: 01 01 0F 01 FF 01 FF E0 0F 00 00 00 00 07 02 08  // ................
    9050: FF 0E 00 00 3F 00 10 01 08 00 00 00 00 01 00 02  // ....?...........
    9060: 02 01 00 04 04 01 00 05 02 05 00 06 01 06 05 06  // ................
    9070: 00 08 01 08 00 07 02 07 06 07 CA 00 34 00 90 00  // ............4...
    9080: 96 00 00 00 00 00 00 00 5F 57 C3 90 50 66 52 E8  // ........_W..PfR.
    9090: F4 FF FF FF 81 EF 10 00 00 00 2E 8B 07 66 BA F8  // .............f..
    90A0: 0C EF 66 BA FC 0C ED 32 C0 66 8B F8 66 5A 58 C3  // ..f....2.f..fZX.
    90B0: 66 B8 4F 03 66 52 66 56 53 57 50 0A FF 75 44 E8  // f.O.fRfVSWP..uD.
    90C0: C8 FF FF FF 66 33 F6 66 BB 53 00 E8 48 00 00 00  // ....f3.f.S..H...
    90D0: C1 E8 10 F6 C4 40 75 2B 66 81 E2 FF 02 66 D1 E2  // .....@u+f....f..
    90E0: 66 8B C2 66 40 C1 E0 10 66 8B C2 66 BB 13 00 E8  // f..f@...f..f....
    90F0: 30 00 00 00 66 BB 12 00 E8 27 00 00 00 66 58 32  // 0...f....'...fX2
    9100: E4 66 50 58 5F 5B 66 5E 66 5A C3 90 66 B8 4F 03  // .fPX_[f^fZ..f.O.
    9110: C3 90 66 B8 4F 03 C3 90 66 52 E8 11 00 00 00 ED  // ..f.O...fR......
    9120: 66 5A C3 90 66 52 E8 05 00 00 00 EF 66 5A C3 90  // fZ..fR......fZ..
    9130: 66 8B D7 50 33 C0 66 8B C3 66 03 C6 C1 E0 02 EF  // f..P3.f..f......
    9140: 66 83 C2 04 58 C3 F0 38 E3 38 E3 38 E3 38 CE 38  // f...X..8.8.8.8.8
    9150: CE 38 CE 38 CE 38 10 35 87 35 B1 35 F2 36 F1 36  // .8.8.8.5.5.5.6.6
    9160: F1 36 37 37 9C 37 CC 37 89 38 B2 38 B2 38 29 37  // .677.7.7.8.8.8)7
    9170: 1C 37 1C 37 1C 37 1C 37 1C 37 37 37 9C 37 CC 37  // .7.7.7.7.777.7.7
    9180: 89 38 B7 38 FD 38 B2 38 B2 38 FF FF FF FF FF FF  // .8.8.8.8.8......
    9190: 00 00 FF FF 00 00 FF FF 00 00 FF 00 00 00 FF 00  // ................
    91A0: 00 00 FF 00 00 00 FF 00 00 00 00 00 08 10 00 08  // ................
    91B0: 10 18 00 08 10 18 14 33 01 14 33 02 22 47 03 02  // .......3..3."G..
    91C0: 47 03 39 34 03 ED 33 03 15 33 04 2E 33 04 3E 33  // G.94..3..3..3.>3
    91D0: 04 14 33 03 00 00 00 00 C1 3A 00 02 C1 3A 01 02  // ..3......:...:..
    91E0: C1 3A 02 02 C1 3A 03 02 C1 3A 04 02 C1 3A 05 02  // .:...:...:...:..
    91F0: BB 3C 00 02 BB 3C 01 02 BB 3C 02 02 BB 3C 03 02  // .<...<...<...<..
    9200: BB 3C 04 02 BB 3C 05 02 F0 3C 00 02 F0 3C 01 02  // .<...<...<...<..
    9210: F0 3C 02 02 F0 3C 03 02 F0 3C 04 02 F0 3C 05 02  // .<...<...<...<..
    9220: 2B 3F 00 02 2B 3F 01 02 2B 3F 02 02 2B 3F 03 02  // +?..+?..+?..+?..
    9230: 2B 3F 04 02 2B 3F 05 02 2B 3F 00 02 2B 3F 01 02  // +?..+?..+?..+?..
    9240: 2B 3F 02 02 2B 3F 03 02 2B 3F 04 02 2B 3F 05 02  // +?..+?..+?..+?..
    9250: F2 3D 00 02 F2 3D 01 02 F2 3D 02 02 F2 3D 03 02  // .=...=...=...=..
    9260: F2 3D 04 02 F2 3D 05 02 2E 3E 00 02 2E 3E 01 02  // .=...=...>...>..
    9270: 2E 3E 02 02 2E 3E 03 02 2E 3E 04 02 2E 3E 05 02  // .>...>...>...>..
    9280: 9F 3D 00 02 9F 3D 01 02 9F 3D 02 02 9F 3D 03 02  // .=...=...=...=..
    9290: 9F 3D 04 02 9F 3D 05 02 D3 3D 00 02 D3 3D 01 02  // .=...=...=...=..
    92A0: D3 3D 02 02 D3 3D 03 02 D3 3D 04 02 D3 3D 05 02  // .=...=...=...=..
    92B0: 83 41 00 00 B6 41 01 00 B6 41 02 00 A3 41 00 00  // .A...A...A...A..
    92C0: 91 40 00 02 8A 3E 00 02 8A 3E 01 02 8A 3E 02 02  // .@...>...>...>..
    92D0: 8A 3E 03 02 8A 3E 04 02 8A 3E 05 02 A9 40 00 02  // .>...>...>...@..
    92E0: FE 42 05 00 FE 42 01 00 FE 42 00 00 FE 42 02 00  // .B...B...B...B..
    92F0: 3F 43 00 00 3F 43 02 00 84 43 00 00 14 40 00 02  // ?C..?C...C...@..
    9300: 14 40 01 02 14 40 02 02 14 40 03 02 14 40 04 02  // .@...@...@...@..
    9310: 14 40 05 02 D0 41 00 00 F8 41 00 00 79 42 00 00  // .@...A...A..yB..
    9320: F4 42 00 00 D8 3E 00 02 D8 3E 01 02 D8 3E 02 02  // .B...>...>...>..
    9330: D8 3E 03 02 D8 3E 04 02 D8 3E 05 02 F3 42 00 01  // .>...>...>...B..
    9340: F3 42 00 01 F7 3B 00 02 F7 3B 01 02 F7 3B 02 02  // .B...;...;...;..
    9350: F7 3B 03 02 F7 3B 04 02 F7 3B 05 02 18 42 00 00  // .;...;...;...B..
    9360: F4 42 00 00 F4 42 00 00 F4 42 00 00 29 41 00 00  // .B...B...B..)A..
    9370: 1B 3D 00 02 1B 3D 01 02 1B 3D 02 02 1B 3D 03 02  // .=...=...=...=..
    9380: 1B 3D 04 02 1B 3D 05 02 4A 3D 00 02 4A 3D 01 02  // .=...=..J=..J=..
    9390: 4A 3D 02 02 4A 3D 03 02 4A 3D 04 02 4A 3D 05 02  // J=..J=..J=..J=..
    93A0: 80 3D 00 02 80 3D 01 02 80 3D 02 02 80 3D 03 02  // .=...=...=...=..
    93B0: 80 3D 04 02 80 3D 05 02 3B 42 00 00 5E 42 00 00  // .=...=..;B..^B..
    93C0: 1C 3E 01 02 1C 3E 02 02 78 3E 01 02 78 3E 02 02  // .>...>..x>..x>..
    93D0: A6 00 02 01 0C A4 00 00 00 00 00 00 68 C3 00 00  // ............h...
    93E0: 7A A4 00 00 00 00 C4 AD 00 00 00 00 8E AE AC B3  // z...............
    93F0: 00 00 00 00 00 00 00 00 00 00 C6 A4 80 B6 1A A5  // ................
    9400: 6C A5 16 AD 92 AD AA AD 56 A4 00 00 00 00 00 00  // l.......V.......
    9410: 00 00 00 00 00 00 10 B7 82 B7 C2 B7 00 00 06 B8  // ................
    9420: 00 00 76 BB 00 00 D6 B8 B0 BA 42 BC 94 BD D6 BD  // ..v.......B.....
    9430: 28 D0 00 00 00 00 EE BD B4 BF 28 CE 00 00 5C CF  // (.........(...\.
    9440: BE BF 00 00 E0 C1 00 00 00 00 00 00 26 C2 60 C3  // ............&.`.
    9450: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9460: 00 00 00 00 00 00 00 00 00 00 36 D2 B6 C6 FC C7  // ..........6.....
    9470: 88 CB CC CD 00 00 4A 00 02 01 00 00 00 00 00 00  // ......J.........
    9480: 58 94 20 95 68 95 6C 98 AC A2 C4 A3 00 00 00 00  // X. .h.l.........
    9490: C8 98 D4 9C 38 9D E0 A3 AC 9D 00 00 AC A1 00 00  // ....8...........
    94A0: 00 00 00 00 00 00 C0 A1 6E A2 00 00 00 00 00 00  // ........n.......
    94B0: 74 A2 00 00 00 00 D4 98 00 00 00 00 00 00 00 00  // t...............
    94C0: C8 00 02 01 D6 09 80 02 A0 00 E0 01 2D 00 10 00  // ............-...
    94D0: 60 00 0A 00 02 00 00 00 00 00 08 08 06 00 12 3C  // `..............<
    94E0: A0 0F 20 03 00 01 58 02 1C 00 28 00 80 00 01 00  // .. ...X...(.....
    94F0: 04 00 00 00 00 00 00 00 00 00 6A 3C 64 19 00 04  // ..........j<d...
    9500: 40 01 00 03 26 00 18 00 88 00 03 00 06 00 00 00  // @...&...........
    9510: 00 00 00 00 06 00 55 3C 30 2A 00 05 08 02 C0 03  // ......U<0*......
    9520: 28 00 60 00 70 00 01 00 03 00 00 00 00 00 00 00  // (.`.p...........
    9530: 00 00 E9 3C 30 2A 00 05 98 01 00 04 2A 00 30 00  // ...<0*......*.0.
    9540: 70 00 01 00 03 00 00 00 00 00 00 00 00 00 EA 3C  // p..............<
    9550: 8F 2F 78 05 D0 01 1A 04 27 00 58 00 90 00 03 00  // ./x.....'.X.....
    9560: 04 00 00 00 00 00 00 00 02 00 EB 3C 48 3F 40 06  // ...........<H?@.
    9570: 30 02 B0 04 32 00 40 00 C0 00 01 00 03 00 00 00  // 0...2.@.........
    9580: 00 00 00 00 00 00 EC 3C 48 00 03 01 0A 00 02 10  // .......<H.......
    9590: 20 4E 00 00 20 4E 00 00 01 00 00 00 C6 2C 00 00  //  N.. N.......,..
    95A0: 4C 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // L...............
    95B0: F4 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    95C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    95D0: 04 03 02 01 00 00 00 00 00 2A 00 2A 00 00 2A 2A  // .........*.*..**
    95E0: 2A 00 00 2A 00 2A 2A 15 00 2A 2A 2A 15 15 15 15  // *..*.**..***....
    95F0: 15 3F 15 3F 15 15 3F 3F 3F 15 15 3F 15 3F 3F 3F  // .?.?..???..?.???
    9600: 15 3F 3F 3F 00 00 00 05 05 05 08 08 08 0B 0B 0B  // .???............
    9610: 0E 0E 0E 11 11 11 14 14 14 18 18 18 1C 1C 1C 20  // ............... 
    9620: 20 20 24 24 24 28 28 28 2D 2D 2D 32 32 32 38 38  //   $$$(((---22288
    9630: 38 3F 3F 3F 00 00 3F 10 00 3F 1F 00 3F 2F 00 3F  // 8???..?..?..?/.?
    9640: 3F 00 3F 3F 00 2F 3F 00 1F 3F 00 10 3F 00 00 3F  // ?.??./?..?..?..?
    9650: 10 00 3F 1F 00 3F 2F 00 3F 3F 00 2F 3F 00 1F 3F  // ..?..?/.??./?..?
    9660: 00 10 3F 00 00 3F 00 00 3F 10 00 3F 1F 00 3F 2F  // ..?..?..?..?..?/
    9670: 00 3F 3F 00 2F 3F 00 1F 3F 00 10 3F 1F 1F 3F 27  // .??./?..?..?..?'
    9680: 1F 3F 2F 1F 3F 37 1F 3F 3F 1F 3F 3F 1F 37 3F 1F  // .?/.?7.??.??.7?.
    9690: 2F 3F 1F 27 3F 1F 1F 3F 27 1F 3F 2F 1F 3F 37 1F  // /?.'?..?'.?/.?7.
    96A0: 3F 3F 1F 37 3F 1F 2F 3F 1F 27 3F 1F 1F 3F 1F 1F  // ??.7?./?.'?..?..
    96B0: 3F 27 1F 3F 2F 1F 3F 37 1F 3F 3F 1F 37 3F 1F 2F  // ?'.?/.?7.??.7?./
    96C0: 3F 1F 27 3F 2D 2D 3F 31 2D 3F 36 2D 3F 3A 2D 3F  // ?.'?--?1-?6-?:-?
    96D0: 3F 2D 3F 3F 2D 3A 3F 2D 36 3F 2D 31 3F 2D 2D 3F  // ?-??-:?-6?-1?--?
    96E0: 31 2D 3F 36 2D 3F 3A 2D 3F 3F 2D 3A 3F 2D 36 3F  // 1-?6-?:-??-:?-6?
    96F0: 2D 31 3F 2D 2D 3F 2D 2D 3F 31 2D 3F 36 2D 3F 3A  // -1?--?--?1-?6-?:
    9700: 2D 3F 3F 2D 3A 3F 2D 36 3F 2D 31 3F 00 00 1C 07  // -??-:?-6?-1?....
    9710: 00 1C 0E 00 1C 15 00 1C 1C 00 1C 1C 00 15 1C 00  // ................
    9720: 0E 1C 00 07 1C 00 00 1C 07 00 1C 0E 00 1C 15 00  // ................
    9730: 1C 1C 00 15 1C 00 0E 1C 00 07 1C 00 00 1C 00 00  // ................
    9740: 1C 07 00 1C 0E 00 1C 15 00 1C 1C 00 15 1C 00 0E  // ................
    9750: 1C 00 07 1C 0E 0E 1C 11 0E 1C 15 0E 1C 18 0E 1C  // ................
    9760: 1C 0E 1C 1C 0E 18 1C 0E 15 1C 0E 11 1C 0E 0E 1C  // ................
    9770: 11 0E 1C 15 0E 1C 18 0E 1C 1C 0E 18 1C 0E 15 1C  // ................
    9780: 0E 11 1C 0E 0E 1C 0E 0E 1C 11 0E 1C 15 0E 1C 18  // ................
    9790: 0E 1C 1C 0E 18 1C 0E 15 1C 0E 11 1C 14 14 1C 16  // ................
    97A0: 14 1C 18 14 1C 1A 14 1C 1C 14 1C 1C 14 1A 1C 14  // ................
    97B0: 18 1C 14 16 1C 14 14 1C 16 14 1C 18 14 1C 1A 14  // ................
    97C0: 1C 1C 14 1A 1C 14 18 1C 14 16 1C 14 14 1C 14 14  // ................
    97D0: 1C 16 14 1C 18 14 1C 1A 14 1C 1C 14 1A 1C 14 18  // ................
    97E0: 1C 14 16 1C 00 00 10 04 00 10 08 00 10 0C 00 10  // ................
    97F0: 10 00 10 10 00 0C 10 00 08 10 00 04 10 00 00 10  // ................
    9800: 04 00 10 08 00 10 0C 00 10 10 00 0C 10 00 08 10  // ................
    9810: 00 04 10 00 00 10 00 00 10 04 00 10 08 00 10 0C  // ................
    9820: 00 10 10 00 0C 10 00 08 10 00 04 10 08 08 10 0A  // ................
    9830: 08 10 0C 08 10 0E 08 10 10 08 10 10 08 0E 10 08  // ................
    9840: 0C 10 08 0A 10 08 08 10 0A 08 10 0C 08 10 0E 08  // ................
    9850: 10 10 08 0E 10 08 0C 10 08 0A 10 08 08 10 08 08  // ................
    9860: 10 0A 08 10 0C 08 10 0E 08 10 10 08 0E 10 08 0C  // ................
    9870: 10 08 0A 10 0B 0B 10 0C 0B 10 0D 0B 10 0F 0B 10  // ................
    9880: 10 0B 10 10 0B 0F 10 0B 0D 10 0B 0C 10 0B 0B 10  // ................
    9890: 0C 0B 10 0D 0B 10 0F 0B 10 10 0B 0F 10 0B 0D 10  // ................
    98A0: 0B 0C 10 0B 0B 10 0B 0B 10 0C 0B 10 0D 0B 10 0F  // ................
    98B0: 0B 10 10 0B 0F 10 0B 0D 10 0B 0C 10 00 00 00 00  // ................
    98C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    98D0: 00 00 00 00 5C 00 02 01 14 37 80 07 B8 00 38 04  // ....\....7....8.
    98E0: 24 00 10 00 10 00 03 00 0E 00 35 01 AD 00 00 00  // $.........5.....
    98F0: 06 00 00 3C E2 04 00 00 02 00 34 21 00 00 B8 0B  // ...<......4!....
    9900: 00 00 00 00 7D 04 04 02 0B 0A 02 41 00 FF FF 00  // ....}......A....
    9910: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9920: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9930: 0C 00 02 01 00 00 00 00 00 00 00 00 00 04 01 0B  // ................
    9940: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9950: 77 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // w...............
    9960: 00 00 00 00 E2 04 1A 02 00 00 00 00 00 04 04 00  // ................
    9970: 00 00 00 00 8C 00 01 01 00 00 00 00 00 00 00 00  // ................
    9980: 00 00 00 00 00 00 00 00 02 00 10 01 14 31 00 00  // .............1..
    9990: 00 00 E4 00 00 00 00 00 00 02 30 02 0C 33 01 01  // ..........0..3..
    99A0: 00 00 E4 00 00 02 00 00 08 00 10 02 13 31 02 02  // .............1..
    99B0: 00 00 E4 00 00 01 00 00 80 00 20 02 13 32 03 03  // .......... ..2..
    99C0: 00 00 E4 00 00 01 00 00 00 00 00 00 00 00 00 00  // ................
    99D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    99E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    99F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9A00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9A10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9A20: 00 00 00 00 00 00 00 00 00 00 FF FF FF FF FF FF  // ................
    9A30: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    9A40: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    9A50: FF FF FF FF FF FF FF FF FF FF FF FF 00 00 00 00  // ................
    9A60: 00 00 FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    9A70: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    9A80: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    9A90: FF FF FF FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9AA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9AB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9AC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9AD0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9AE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9AF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9B00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9B10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9B20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9B30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9B40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9B50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9B60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9B70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9B80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9B90: 00 00 FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    9BA0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    9BB0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    9BC0: FF FF FF FF 00 00 00 00 00 00 FF FF FF FF FF FF  // ................
    9BD0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    9BE0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    9BF0: FF FF FF FF FF FF FF FF FF FF FF FF 00 00 00 00  // ................
    9C00: 00 00 FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    9C10: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    9C20: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    9C30: FF FF FF FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9C40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9C50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9C60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9C70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9C80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9C90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9CA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9CB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9CC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9CD0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9CE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9CF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9D00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9D10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9D20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9D30: 00 00 00 00 00 00 00 00 00 00 00 00 64 00 02 01  // ............d...
    9D40: B5 5D 00 00 00 00 01 00 B5 5D 00 00 08 08 02 00  // .].......]......
    9D50: B5 5D 00 00 10 10 03 00 B5 5D 00 00 18 14 04 00  // .].......]......
    9D60: B5 5D 00 00 1A 18 05 00 B5 5D 00 00 1C 1C 06 00  // .].......]......
    9D70: 91 5D 00 00 08 08 90 00 95 5D 00 00 08 08 91 00  // .].......]......
    9D80: 99 5D 00 00 08 08 92 00 9D 5D 00 00 08 08 93 00  // .].......]......
    9D90: A1 5D 00 00 08 08 94 00 A5 5D 00 00 08 08 95 00  // .].......]......
    9DA0: 74 00 01 01 10 01 06 12 11 01 16 12 13 01 06 6A  // t..............j
    9DB0: 14 01 16 6A 16 01 06 55 17 01 16 55 19 01 06 EA  // ...j...U...U....
    9DC0: 1A 01 16 EA 65 01 16 E9 66 01 0A E9 21 01 0A 12  // ....e...f...!...
    9DD0: 22 01 0A 6A 23 01 0A 55 24 01 0A EA 45 01 16 EB  // "..j#..U$...E...
    9DE0: 46 01 0A EB 75 01 16 EC 76 01 0A EC D2 01 16 70  // F...u...v......p
    9DF0: D4 01 0A 70 D8 01 16 71 D9 01 0A 71 E2 01 16 72  // ...p...q...q...r
    9E00: E4 01 0A 72 E8 01 16 73 E9 01 0A 73 F5 01 16 74  // ...r...s...s...t
    9E10: F6 01 0A 74 00 00 00 00 00 00 00 00 00 00 00 00  // ...t............
    9E20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9E30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9E40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9E50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9E60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9E70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9E80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9E90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9EA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9EB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9EC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9ED0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9EE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9EF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9F00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9F10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9F20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9F30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9F40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9F50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9F60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9F70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9F80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9F90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9FA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9FB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9FC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9FD0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9FE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9FF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A000: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A020: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A040: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A050: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A060: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A070: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A090: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A0A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A0B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A0C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A0D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A0E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A0F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A110: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A120: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A130: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A140: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A150: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A160: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A170: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A180: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A190: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A1A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A1B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A1C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A1D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A1E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A1F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A200: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    A210: 00 00 00 00 14 00 02 01 02 00 08 00 80 00 00 02  // ................
    A220: 00 04 00 08 40 00 FF FF AD 00 01 04 8A 02 05 00  // ....@...........
    A230: 14 31 58 00 1E 21 00 00 7C 00 00 00 02 00 00 00  // .1X..!..|.......
    A240: 0C 33 61 00 1E 22 00 00 83 00 00 00 00 02 00 00  // .3a.."..........
    A250: 13 31 6A 00 20 21 00 00 8A 00 00 00 08 00 00 00  // .1j. !..........
    A260: 13 32 73 00 20 22 00 00 91 00 00 00 80 00 00 00  // .2s. "..........
    A270: 03 71 98 00 00 00 00 00 00 00 00 00 00 00 00 00  // .q..............
    A280: 01 04 90 00 02 04 01 00 FF 01 04 91 00 02 04 02  // ................
    A290: 00 FF 01 04 92 00 02 04 03 00 FF 01 04 93 00 02  // ................
    A2A0: 04 04 00 FF 14 06 0F 00 00 00 FF 14 06 0B 00 00  // ................
    A2B0: 00 FF 14 06 0F 01 00 00 FF 14 06 0F 01 00 00 FF  // ................
    A2C0: 10 0A 01 02 03 04 00 00 00 00 11 0A 90 91 92 93  // ................
    A2D0: 00 00 00 00 FF 00 05 00 01 01 00 00 38 00 04 02  // ............8...
    A2E0: 04 00 00 00 60 EA 00 00 C0 12 60 09 00 00 00 00  // ....`.....`.....
    A2F0: 00 00 00 00 7C 01 4E 0C 01 01 00 00 55 00 00 00  // ....|.N.....U...
    A300: C0 12 00 00 00 01 04 01 00 04 04 00 00 00 00 00  // ................
    A310: 00 00 00 00 18 01 03 02 0A 00 34 00 04 01 0C 00  // ..........4.....
    A320: FF FF FF 00 02 0F 00 00 00 5F 00 08 40 9C 00 00  // ........._..@...
    A330: 03 0F 00 00 00 5F 00 08 FF FF FF 00 03 0F 00 00  // ....._..........
    A340: 2A 57 20 10 00 00 00 00 0F 00 05 00 CE 00 00 4B  // *W ............K
    A350: 00 00 80 01 3A 00 00 80 02 1B 00 00 80 03 00 00  // ....:...........
    A360: 00 80 08 34 25 00 80 09 1C 25 00 80 0A 00 1B 00  // ...4%....%......
    A370: 9F 10 14 3F 00 80 11 01 38 00 9F 18 00 4A 00 9F  // ...?....8....J..
    A380: 00 4B 00 00 80 01 3A 00 00 80 02 1B 00 00 80 03  // .K....:.........
    A390: 00 00 00 80 08 34 25 00 80 09 1C 25 00 80 0A 00  // .....4%....%....
    A3A0: 1B 00 9F 10 14 3F 00 80 11 01 38 00 9F 18 00 4A  // .....?....8....J
    A3B0: 00 9F 00 4B 00 00 80 01 3A 00 00 80 02 1B 00 00  // ...K....:.......
    A3C0: 80 03 00 00 00 80 08 34 25 00 80 09 1C 25 00 80  // .......4%....%..
    A3D0: 0A 00 1B 00 9F 10 14 3F 00 80 11 01 38 00 9F 18  // .......?....8...
    A3E0: 00 4A 00 9F 00 4B 00 00 80 01 3A 00 00 80 02 1B  // .J...K....:.....
    A3F0: 00 00 80 03 00 00 00 80 08 34 25 00 80 09 1C 25  // .........4%....%
    A400: 00 80 0A 00 1B 00 9F 10 14 3F 00 80 11 01 38 00  // .........?....8.
    A410: 9F 18 00 4A 00 9F 00 00 00 01 02 03 01 00 01 02  // ...J............
    A420: 03 01 00 01 02 03 01 00 01 02 03 01 1C 00 03 01  // ................
    A430: 00 0A 00 00 00 00 00 00 77 01 35 0C 10 27 00 00  // ........w.5..'..
    A440: FF 00 FF 00 FF 00 00 00 2C 00 02 02 00 09 01 02  // ........,.......
    A450: 08 01 02 02 64 C0 00 00 65 C0 00 00 66 C0 00 00  // ....d...e...f...
    A460: 67 C0 00 00 E8 C0 00 00 A0 21 00 00 42 EC 00 00  // g........!..B...
    A470: 10 27 00 00 4A 00 02 01 00 08 37 00 00 4B E5 00  // .'..J.....7..K..
    A480: 04 49 43 00 4A 05 53 00 00 02 00 00 49 42 00 52  // .IC.J.S.....IB.R
    A490: 1A 52 19 52 16 52 18 52 3D 02 05 02 00 02 00 00  // .R.R.R.R=.......
    A4A0: 52 0D 02 05 02 00 04 00 00 55 00 03 52 15 0D 05  // R........U..R...
    A4B0: 53 00 00 02 00 00 5B 52 16 52 18 52 3D 5B 24 00  // S.....[R.R.R=[$.
    A4C0: 01 01 00 00 37 00 00 03 00 41 E3 0D 33 05 41 01  // ....7....A..3.A.
    A4D0: 00 00 00 1B 05 41 0B 01 02 06 00 41 0D 25 1F 0E  // .....A.....A.%..
    A4E0: 03 5B 4B 00 01 01 00 00 37 00 00 42 21 00 63 00  // .[K.....7..B!.c.
    A4F0: 1F 00 63 01 39 00 63 03 3F 00 63 02 45 00 5A 5A  // ..c.9.c.?.c.E.ZZ
    A500: 5B 03 05 40 00 00 05 04 2D 19 40 00 15 05 40 02  // [..@....-.@...@.
    A510: 01 02 0C 00 40 02 00 00 0D 00 5B 02 00 00 E3 0D  // ....@.....[.....
    A520: 5B 02 00 00 E7 0D 5B 02 00 00 E8 0D 5B 00 54 00  // [.....[.....[.T.
    A530: 01 02 00 00 37 00 00 01 05 00 00 9B 62 01 00 54  // ....7.......b..T
    A540: 00 01 00 01 05 00 00 93 62 01 00 01 01 01 00 01  // ........b.......
    A550: 56 00 41 03 09 41 00 01 05 00 00 83 62 01 00 01  // V.A..A......b...
    A560: 02 01 00 41 01 05 00 00 9B 62 01 00 3C 25 01 00  // ...A.....b..<%..
    A570: 00 44 36 00 01 05 00 00 93 62 01 00 02 00 01 01  // .D6......b......
    A580: 00 5B 52 00 02 01 08 08 37 00 00 3D 25 00 00 44  // .[R.....7..=%..D
    A590: 14 00 55 38 00 5B 01 05 00 00 61 60 01 00 3C E5  // ..U8.[....a`..<.
    A5A0: 01 00 FF 44 10 00 4A E5 01 00 80 44 24 00 01 05  // ...D..J....D$...
    A5B0: 00 00 62 60 01 00 01 01 01 00 01 56 00 40 03 A9  // ..b`.......V.@..
    A5C0: 40 00 01 05 00 00 61 60 01 00 01 02 01 00 40 02  // @.....a`......@.
    A5D0: E5 00 01 5B A9 07 01 01 00 00 37 00 00 02 05 00  // ...[......7.....
    A5E0: 01 00 00 00 52 06 01 05 80 29 00 F4 00 00 01 05  // ....R....)......
    A5F0: 00 00 2C A8 01 00 01 05 01 00 00 F4 00 00 1A 05  // ..,.............
    A600: 00 04 2C 05 00 FF F3 00 00 01 01 81 29 00 01 05  // ..,.........)...
    A610: 00 00 2D A8 01 00 01 01 01 00 00 01 05 85 29 00  // ..-...........).
    A620: 00 3D 00 01 05 00 00 31 A8 01 00 01 05 01 00 00  // .=.....1........
    A630: 00 3D 00 14 05 00 06 0E 0D 00 3F 00 2C 05 00 01  // .=........?.,...
    A640: 00 00 00 01 01 86 29 00 01 05 00 00 32 A8 01 00  // ......).....2...
    A650: 01 01 01 00 00 01 05 50 28 EB 0F E4 60 01 05 00  // .......P(...`...
    A660: 00 90 A6 01 00 01 05 01 00 EB 0F E4 60 01 05 6E  // ............`..n
    A670: 29 00 00 00 00 01 05 00 00 1A A8 01 00 01 05 01  // )...............
    A680: 00 00 00 00 00 01 05 59 28 FF 21 10 00 01 05 00  // .......Y(.!.....
    A690: 00 99 A6 01 00 01 05 01 00 FF 21 10 00 01 05 5A  // ..........!....Z
    A6A0: 28 FF 25 10 00 01 05 00 00 9A A6 01 00 01 05 01  // (.%.............
    A6B0: 00 FF 25 10 00 01 05 72 29 FF FF 0F 00 01 05 00  // ..%....r).......
    A6C0: 00 1E A8 01 00 01 05 01 00 FF FF 0F 00 01 05 00  // ................
    A6D0: 00 10 A8 01 00 01 00 64 29 01 00 01 05 00 00 11  // .......d).......
    A6E0: A8 01 00 01 00 65 29 01 00 01 05 00 00 12 A8 01  // .....e).........
    A6F0: 00 01 00 66 29 01 00 01 05 00 00 13 A8 01 00 01  // ...f)...........
    A700: 00 67 29 01 00 01 05 00 00 14 A8 01 00 01 00 68  // .g)............h
    A710: 29 01 00 01 05 00 00 15 A8 01 00 01 00 69 29 01  // )............i).
    A720: 00 01 05 00 00 16 A8 01 00 01 00 6A 29 01 00 01  // ...........j)...
    A730: 05 00 00 17 A8 01 00 01 00 6B 29 01 00 03 00 40  // .........k)....@
    A740: 01 00 01 02 74 29 40 01 05 00 00 20 A8 01 00 01  // ....t)@.... ....
    A750: 02 01 00 40 03 00 41 81 29 33 00 41 80 29 2D 02  // ...@..A.)3.A.)-.
    A760: 40 41 01 02 75 29 40 01 05 00 00 21 A8 01 00 01  // @A..u)@....!....
    A770: 02 01 00 40 01 05 00 00 1F A8 01 00 01 00 73 29  // ...@..........s)
    A780: 01 00 01 05 ED 2A BF 3F 3F 00 01 05 F5 2A F0 BF  // .....*.??....*..
    A790: E0 0D 01 05 F4 2A 1F 00 00 00 01 05 14 27 01 00  // .....*.......'..
    A7A0: 00 00 01 05 0C 27 CC CC 00 00 01 05 0F 2A 24 0F  // .....'.......*$.
    A7B0: 00 00 01 05 EA 2A 00 F0 00 00 01 05 0A 2A 04 06  // .....*.......*..
    A7C0: 08 20 01 05 0C 00 08 20 02 01 01 05 0D 00 01 00  // . ..... ........
    A7D0: 00 00 66 FF 2D 0D 42 65 06 03 04 40 00 00 3E 05  // ..f.-.Be...@..>.
    A7E0: 40 00 00 00 00 44 28 02 01 04 00 00 00 00 01 04  // @....D(.........
    A7F0: 01 00 04 00 2D 0D 42 08 00 43 05 02 01 05 17 74  // ....-.B..C.....t
    A800: 11 01 03 00 03 00 40 26 74 01 05 17 74 15 01 03  // ......@&t...t...
    A810: 00 03 00 41 26 74 4C 05 40 01 00 00 00 44 AE 02  // ...A&tL.@....D..
    A820: 4C 05 41 FF 00 00 00 49 AE 02 4C 05 40 F0 00 00  // L.A....I..L.@...
    A830: 00 44 87 02 01 02 32 2A 40 01 02 33 2A 41 01 05  // .D....2*@..3*A..
    A840: 00 00 32 A1 01 00 01 02 01 00 40 01 05 00 00 33  // ..2.......@....3
    A850: A1 01 00 01 02 01 00 41 43 31 03 01 02 34 2A 40  // .......AC1...4*@
    A860: 01 02 35 2A 41 01 05 00 00 34 A1 01 00 01 02 01  // ..5*A....4......
    A870: 00 40 01 05 00 00 35 A1 01 00 01 02 01 00 41 43  // .@....5.......AC
    A880: 31 03 01 05 17 74 19 01 03 00 03 00 40 26 74 01  // 1....t......@&t.
    A890: 05 17 74 1D 01 03 00 03 00 41 26 74 4C 05 40 01  // ..t......A&tL.@.
    A8A0: 00 00 00 44 37 03 4C 05 41 FF 00 00 00 49 37 03  // ...D7.L.A....I7.
    A8B0: 4C 05 40 F0 00 00 00 44 0D 03 01 02 32 2A 40 01  // L.@....D....2*@.
    A8C0: 02 33 2A 41 01 05 00 00 32 A1 01 00 01 02 01 00  // .3*A....2.......
    A8D0: 40 01 05 00 00 33 A1 01 00 01 02 01 00 41 43 31  // @....3.......AC1
    A8E0: 03 01 02 34 2A 40 01 02 35 2A 41 01 05 00 00 34  // ...4*@..5*A....4
    A8F0: A1 01 00 01 02 01 00 40 01 05 00 00 35 A1 01 00  // .......@....5...
    A900: 01 02 01 00 41 01 00 36 2A 6D 70 66 FF 2D 0D 42  // ....A..6*mpf.-.B
    A910: 7D 04 03 04 40 00 00 3E 05 40 00 00 00 00 44 9B  // }...@..>.@....D.
    A920: 03 3E 05 40 00 00 02 00 45 68 03 15 05 40 02 01  // .>.@....Eh...@..
    A930: 02 0C 00 40 03 00 41 0D 00 43 73 03 01 04 00 00  // ...@..A..Cs.....
    A940: 00 00 03 00 41 01 00 03 04 40 04 00 01 02 00 00  // ....A....@......
    A950: 40 01 02 01 00 41 2D 05 40 00 77 01 00 01 02 00  // @....A-.@.w.....
    A960: 00 40 01 02 01 00 41 2D 0D 42 08 00 43 3E 03 01  // .@....A-.B..C>..
    A970: 05 00 00 40 40 01 00 03 00 40 01 00 4C 05 40 00  // ...@@....@..L.@.
    A980: 00 00 80 49 0E 04 66 FF 2D 0D 42 31 06 03 04 40  // ...I..f.-.B1...@
    A990: 00 00 3E 05 40 00 00 00 00 44 FE 03 15 05 40 02  // ..>.@....D....@.
    A9A0: 01 02 0C 00 40 03 00 41 0D 00 03 04 40 04 00 01  // ....@..A....@...
    A9B0: 02 00 00 40 01 02 01 00 41 2D 05 40 00 77 01 00  // ...@....A-.@.w..
    A9C0: 01 02 00 00 40 01 02 01 00 41 2D 0D 42 08 00 43  // ....@....A-.B..C
    A9D0: B9 03 01 05 0C 00 00 02 15 00 03 00 41 0D 00 44  // ............A..D
    A9E0: 1B 04 01 05 00 00 80 40 01 00 03 00 41 01 00 03  // .......@....A...
    A9F0: 05 40 00 08 00 00 4C 65 41 01 44 30 04 0F 05 40  // .@....LeA.D0...@
    AA00: 00 00 01 00 5C 02 42 2A FF E3 FE FF 40 01 05 00  // ....\.B*....@...
    AA10: 00 42 A1 01 00 5C 02 01 00 FF E3 FE FF 40 03 05  // .B...\.......@..
    AA20: 40 00 00 00 00 5C 02 43 2A FF 0F CF FF 40 01 05  // @....\.C*....@..
    AA30: 00 00 43 A1 01 00 5C 02 01 00 FF 0F CF FF 40 01  // ..C...\.......@.
    AA40: 0D E7 2A 7F 20 0D 05 F4 2A 10 00 00 00 5B 7A 2C  // ..*. ...*....[z,
    AA50: 03 00 40 01 00 58 2A 00 00 00 40 05 00 70 2A 00  // ..@..X*...@..p*.
    AA60: 00 01 40 01 00 59 2A 00 00 01 40 05 00 71 2A 00  // ..@..Y*...@..q*.
    AA70: 00 02 40 01 00 5A 2A 00 00 02 40 05 00 72 2A 00  // ..@..Z*...@..r*.
    AA80: 00 03 40 01 00 5B 2A 00 00 03 40 05 00 73 2A 00  // ..@..[*...@..s*.
    AA90: 00 04 40 01 00 5C 2A 00 00 04 40 05 00 74 2A 00  // ..@..\*...@..t*.
    AAA0: 00 05 40 01 00 5D 2A 00 00 05 40 05 00 75 2A 00  // ..@..]*...@..u*.
    AAB0: 00 06 40 01 00 5E 2A 00 00 06 40 05 00 76 2A 00  // ..@..^*...@..v*.
    AAC0: 00 07 40 01 00 5F 2A 00 00 07 40 05 00 77 2A 00  // ..@.._*...@..w*.
    AAD0: 00 08 40 01 00 60 2A 00 00 08 40 05 00 78 2A 00  // ..@..`*...@..x*.
    AAE0: 00 09 40 01 00 61 2A 00 00 09 40 05 00 79 2A 00  // ..@..a*...@..y*.
    AAF0: 00 0A 40 01 00 62 2A 00 00 0A 40 05 00 7A 2A 00  // ..@..b*...@..z*.
    AB00: 00 0B 40 01 00 63 2A 00 00 0B 40 05 00 7B 2A 00  // ..@..c*...@..{*.
    AB10: 00 0C 40 01 00 64 2A 00 00 0C 40 05 00 7C 2A 00  // ..@..d*...@..|*.
    AB20: 00 0D 40 01 00 65 2A 00 00 0D 40 05 00 7D 2A 00  // ..@..e*...@..}*.
    AB30: 00 10 40 01 00 66 2A 00 00 10 40 05 00 7E 2A 00  // ..@..f*...@..~*.
    AB40: 00 11 40 01 00 67 2A 00 00 11 40 05 00 7F 2A 00  // ..@..g*...@...*.
    AB50: 00 14 40 01 00 68 2A 00 00 14 40 05 00 80 2A 00  // ..@..h*...@...*.
    AB60: 00 16 40 01 00 69 2A 00 00 16 40 05 00 81 2A 00  // ..@..i*...@...*.
    AB70: 00 15 40 01 00 6A 2A 00 00 15 40 05 00 82 2A 00  // ..@..j*...@...*.
    AB80: 00 17 40 01 00 6B 2A 00 00 17 40 05 00 83 2A 00  // ..@..k*...@...*.
    AB90: 00 1C 40 01 00 6C 2A 00 00 1C 40 05 00 84 2A 00  // ..@..l*...@...*.
    ABA0: 00 1D 40 01 00 6D 2A 00 00 1D 40 05 00 85 2A 00  // ..@..m*...@...*.
    ABB0: 00 1E 40 01 00 6E 2A 00 00 1E 40 05 00 86 2A 00  // ..@..n*...@...*.
    ABC0: 00 1F 40 01 00 6F 2A 00 00 1F 40 05 00 87 2A 00  // ..@..o*...@...*.
    ABD0: 00 32 40 01 00 44 2A 00 00 33 40 01 00 45 2A 00  // .2@..D*..3@..E*.
    ABE0: 00 34 40 01 00 46 2A 00 00 35 40 01 00 47 2A 00  // .4@..F*..5@..G*.
    ABF0: 00 36 40 01 00 48 2A 00 00 3A 40 01 00 4B 2A 00  // .6@..H*..:@..K*.
    AC00: 00 00 00 00 00 32 40 05 00 44 2A 00 00 33 40 05  // .....2@..D*..3@.
    AC10: 00 45 2A 00 00 34 40 05 00 46 2A 00 00 35 40 05  // .E*..4@..F*..5@.
    AC20: 00 47 2A 00 00 36 40 05 00 48 2A 00 00 3A 40 05  // .G*..6@..H*..:@.
    AC30: 00 4B 2A 00 00 00 00 00 00 31 A0 01 00 81 F0 2F  // .K*......1...../
    AC40: FF 34 A0 01 00 81 F0 2F FF 8E A0 01 00 FA 1F 7C  // .4...../.......|
    AC50: CF 04 A0 01 00 FA E0 5F FE 05 A0 01 00 FA E0 5F  // ......._......._
    AC60: FE 0D A0 01 00 F0 E0 5F FE 13 A0 01 00 FB E0 5F  // ......._......._
    AC70: FE 02 A0 01 00 F8 E0 5F FE 4A A0 01 00 FB E0 5F  // ......._.J....._
    AC80: FE 4B A0 01 00 FB E0 5F FE 4C A0 01 00 FB E0 5F  // .K....._.L....._
    AC90: FE 4F A0 01 00 FB E0 5F FE 50 A0 01 00 FB E0 5F  // .O....._.P....._
    ACA0: FE 51 A0 01 00 FB E0 5F FE 42 A0 01 00 F8 E0 5F  // .Q....._.B....._
    ACB0: FE 44 A0 01 00 FA E0 5F 0A 47 A0 01 00 FA E0 5F  // .D....._.G....._
    ACC0: FE 48 A0 01 00 F8 E0 5F FE 49 A0 01 00 F8 E0 5F  // .H....._.I....._
    ACD0: FE 38 A0 01 00 08 04 A1 01 22 A0 01 00 39 00 00  // .8......."...9..
    ACE0: 00 62 A0 01 00 39 00 00 00 70 A0 01 00 01 00 00  // .b...9...p......
    ACF0: 00 83 A0 01 00 70 60 60 60 0A A2 01 00 40 00 00  // .....p```....@..
    AD00: 00 42 A1 01 00 EF 0D 01 00 43 A1 01 00 00 00 FF  // .B.......C......
    AD10: 3F ED A1 01 00 BF 3F 3F 00 EE A1 01 00 01 00 00  // ?.....??........
    AD20: 00 F0 A1 01 00 01 00 00 00 F1 A1 01 00 02 20 00  // .............. .
    AD30: 80 F2 A1 01 00 01 00 00 00 F3 A1 01 00 02 20 00  // .............. .
    AD40: 80 00 A1 01 00 45 0A 55 51 01 A1 01 00 D5 55 55  // .....E.UQ.....UU
    AD50: 55 02 A1 01 00 45 96 F0 D7 03 A1 01 00 5F 55 55  // U....E......._UU
    AD60: 55 EA A1 01 00 07 E0 0C E0 E7 A1 01 00 20 10 11  // U............ ..
    AD70: 00 80 A3 01 00 C9 09 00 00 00 00 00 00 00 7B 00  // ..............{.
    AD80: 02 01 00 00 37 00 00 3D 65 00 01 44 7A 00 56 00  // ....7..=e..Dz.V.
    AD90: 40 03 21 40 00 21 25 40 C4 03 0A 48 40 01 05 29  // @.!@.!%@...H@..)
    ADA0: 3A 00 01 00 00 5C 05 A1 3A CF FF FF FF 20 00 00  // :....\..:.... ..
    ADB0: 00 5C 05 B4 3A CF FF FF FF 20 00 00 00 56 00 40  // .\..:.... ...V.@
    ADC0: 03 21 40 00 21 0D 40 1B 01 03 0A 48 40 5C 05 5F  // .!@.!.@....H@\._
    ADD0: 41 FC FF FF FF 00 00 00 08 56 00 40 03 21 40 00  // A........V.@.!@.
    ADE0: 21 25 40 80 03 0A 48 40 5C 05 01 50 FF FC FF FF  // !%@...H@\..P....
    ADF0: 00 03 00 00 3A 00 00 5B 5B 00 17 00 02 01 00 00  // ....:..[[.......
    AE00: 01 05 60 0F 00 00 00 F4 01 05 62 0F 00 00 00 00  // ..`.......b.....
    AE10: 5B 00 1A 00 02 01 00 00 37 00 00 01 05 70 0C 04  // [.......7....p..
    AE20: A2 FF 03 01 05 71 0C 43 48 00 10 5B CA 00 02 01  // .....q.CH..[....
    AE30: 04 04 37 00 00 66 0C 03 0C 41 00 00 2D 0A 41 42  // ..7..f...A..-.AB
    AE40: 2D 0D 42 04 00 3D 24 00 06 00 44 31 00 2D 0D 42  // -.B..=$...D1.-.B
    AE50: 08 00 3E 0A 42 41 45 19 00 55 20 00 5B 56 00 43  // ..>.BAE..U .[V.C
    AE60: 03 24 43 05 00 03 04 46 00 00 33 05 46 01 00 00  // .$C....F..3.F...
    AE70: 00 01 02 00 00 46 03 00 00 01 00 0D 02 01 00 44  // .....F.........D
    AE80: 2D 05 46 02 00 00 00 01 02 00 00 46 03 24 43 04  // -.F........F.$C.
    AE90: 00 4B E5 00 01 49 AA 00 07 02 01 00 45 2D 05 46  // .K...I......E-.F
    AEA0: 01 00 00 00 01 02 00 00 46 4A 02 01 00 44 44 90  // ........FJ...DD.
    AEB0: 00 03 29 43 00 0E A2 00 44 43 98 00 03 29 43 00  // ..)C....DC...)C.
    AEC0: 08 A2 00 45 33 05 46 03 00 00 00 01 02 00 00 46  // ...E3.F........F
    AED0: 01 02 01 00 00 5B 0D 02 01 00 44 01 04 00 00 00  // .....[....D.....
    AEE0: 00 3D A5 00 01 44 C4 00 07 02 01 00 45 43 C9 00  // .=...D......EC..
    AEF0: 0D 02 01 00 44 5B 1D 05 01 07 0C 08 37 00 00 3D  // ....D[......7..=
    AF00: 25 01 FF 44 F7 04 3D 25 01 17 46 F3 04 3D 25 01  // %..D..=%..F..=%.
    AF10: 02 47 F3 04 3D 25 01 14 45 F7 04 3D 05 00 00 00  // .G..=%..E..=....
    AF20: 00 00 44 C3 02 4B E5 01 30 44 3D 00 08 E5 01 CF  // ..D..K..0D=.....
    AF30: 43 42 00 5D E5 01 CF 10 66 1B 56 00 02 3D A5 01  // CB.]....f.V..=..
    AF40: 02 49 54 00 56 08 40 43 66 00 3D A5 01 03 49 61  // .IT.V.@Cf.=...Ia
    AF50: 00 56 08 40 43 66 00 03 0C 40 18 00 3E 0D 40 00  // .V.@Cf...@..>.@.
    AF60: 00 44 75 00 03 0A 02 40 43 79 00 0E E5 01 80 4B  // .Du....@Cy.....K
    AF70: E5 01 02 49 87 00 02 A9 02 02 55 28 02 66 FF 2D  // ...I......U(.f.-
    AF80: 0D 42 09 05 03 39 40 01 09 0D 40 30 00 1B 0D 40  // .B...9@...@0...@
    AF90: 04 21 0D 40 05 00 2D 0A 42 40 03 04 40 00 00 27  // .!.@..-.B@..@..'
    AFA0: 05 40 10 27 00 00 02 A2 03 40 02 E4 03 04 00 56  // .@.'.....@.....V
    AFB0: 00 00 56 00 01 02 0D 03 40 01 02 65 01 01 20 05  // ..V.....@..e.. .
    AFC0: 00 0A 00 00 00 03 02 46 40 3D 05 00 80 8D 5B 00  // .......F@=....[.
    AFD0: 47 EF 00 3D A5 03 64 45 E8 00 02 65 03 03 0E E5  // G..=..dE...e....
    AFE0: 01 08 55 28 01 4B E5 01 08 44 FA 00 1B 05 46 01  // ..U(.K...D....F.
    AFF0: 3E 05 46 A0 2F C5 01 48 0F 01 2C 65 01 01 15 05  // >.F./..H..,e....
    B000: 46 01 43 FA 00 14 2D 01 05 3D A5 01 00 44 30 01  // F.C...-..=...D0.
    B010: 4B E5 01 80 49 30 01 3D A5 03 64 45 30 01 0E 25  // K...I0.=..dE0..%
    B020: 03 01 15 05 46 01 03 05 01 00 00 01 00 4B E5 01  // ....F........K..
    B030: 80 44 92 01 27 04 46 00 00 3E 05 41 00 00 00 00  // .D..'.F..>.A....
    B040: 44 A4 01 03 04 40 00 00 03 02 00 41 27 02 40 41  // D....@.....A'.@A
    B050: 03 02 40 00 3E 05 41 00 00 00 00 49 52 01 7C 05  // ..@.>.A....IR.|.
    B060: 00 00 00 01 00 7E 04 40 00 00 7C 04 40 00 00 7E  // .....~.@..|.@..~
    B070: 02 40 00 03 02 01 40 3E 05 01 33 F3 00 00 48 92  // .@....@>..3...H.
    B080: 01 03 05 01 00 00 01 00 27 04 46 00 00 7C 02 01  // ........'.F..|..
    B090: 41 7E 04 40 00 00 03 0A 00 40 27 04 46 00 00 03  // A~.@.....@'.F...
    B0A0: 8A 00 40 56 18 01 4B E5 01 80 49 2F 02 7C 02 02  // ..@V..K...I/.|..
    B0B0: 00 7E 05 40 A0 86 01 00 03 01 41 03 09 05 41 03  // .~.@......A...A.
    B0C0: 00 00 00 6F 02 40 41 7C 05 40 4E 0C 00 00 7E 04  // ...o.@A|.@N...~.
    B0D0: 40 00 00 27 05 40 05 00 00 00 3E 05 40 00 00 00  // @..'.@....>.@...
    B0E0: 00 49 F2 01 03 25 40 01 03 8A 01 40 21 05 40 05  // .I...%@....@!.@.
    B0F0: 00 00 00 7C 04 40 00 00 7E 05 40 4E 0C 00 00 03  // ...|.@..~.@N....
    B100: 01 41 03 09 05 41 03 00 00 00 75 02 40 41 3D A5  // .A...A....u.@A=.
    B110: 01 00 44 27 02 1B 05 40 01 2D 02 00 40 03 02 02  // ..D'...@.-..@...
    B120: 00 33 02 02 40 66 FF 2D 0D 42 01 05 56 00 40 03  // .3..@f.-.B..V.@.
    B130: 21 40 01 33 25 40 14 15 25 40 01 2D 0A 42 40 03  // !@.3%@..%@.-.B@.
    B140: 0C 48 00 00 4A 65 0A 5E 10 44 5D 03 03 39 41 01  // .H..Je.^.D]..9A.
    B150: 09 0D 41 30 00 1B 0D 41 04 3C 22 86 5E 41 49 A2  // ..A0...A.<".^AI.
    B160: 02 3C 21 4B 5E 03 49 A2 02 3C 29 4D 5E 03 49 A2  // .<!K^.I..<)M^.I.
    B170: 02 03 20 41 87 5E 09 25 41 E0 3E 29 41 01 49 A2  // .. A.^.%A.>)A.I.
    B180: 02 4B E5 01 40 49 55 03 3C 02 48 5E 00 49 A2 02  // .K..@IU.<.H^.I..
    B190: 3C 0A 4A 5E 01 44 A6 02 0E E5 01 01 3A 00 00 4B  // <.J^.D......:..K
    B1A0: E5 01 01 44 CB 04 4B E5 01 02 49 C3 02 3D 25 02  // ...D..K...I..=%.
    B1B0: 03 46 C3 02 55 28 02 52 23 56 00 40 03 21 40 01  // .F..U(.R#V.@.!@.
    B1C0: 33 25 40 14 03 0A 48 40 07 25 60 01 FE 66 FF 2D  // 3%@...H@.%`..f.-
    B1D0: 0D 42 01 05 56 00 40 03 21 40 01 33 25 40 14 15  // .B..V.@.!@.3%@..
    B1E0: 25 40 01 2D 0A 42 40 03 0C 48 00 00 07 65 4B 5E  // %@.-.B@..H...eK^
    B1F0: FE 54 00 49 5E 54 00 4A 5E 07 65 0A 5E EF 4A 65  // .T.I^T.J^.e.^.Je
    B200: 0A 5E 20 49 08 03 07 65 1A 5E EF 4A 65 1A 5E 20  // .^ I...e.^.Je.^ 
    B210: 49 15 03 3D 05 00 00 00 00 00 49 5D 03 4A A5 E9  // I..=......I].J..
    B220: 5D 80 44 52 03 56 00 41 5C 25 08 5E F8 06 51 02  // ].DR.V.A\%.^..Q.
    B230: 4A 65 08 5E 01 44 3A 03 2D A5 41 01 2D 0D 48 10  // Je.^.D:.-.A.-.H.
    B240: 00 3E A5 41 04 45 32 03 43 F3 04 01 02 48 5E 00  // .>.A.E2.C....H^.
    B250: 43 87 04 01 05 03 5E 80 88 01 00 3D A5 01 00 49  // C.....^....=...I
    B260: 7E 03 3D 05 00 E0 3B 66 00 45 7E 03 07 25 04 5E  // ~.=...;f.E~..%.^
    B270: FE 43 9E 03 0D 25 04 5E 01 3D A5 01 02 49 9E 03  // .C...%.^.=...I..
    B280: 4B E5 01 08 44 9E 03 01 05 DB 5E 80 88 01 00 0D  // K...D.....^.....
    B290: 25 DC 5E 01 0D 25 87 5E 01 03 39 40 01 09 0D 40  // %.^..%.^..9@...@
    B2A0: 30 00 1B 0D 40 04 01 22 86 5E 40 0D 65 87 5E 80  // 0...@..".^@.e.^.
    B2B0: 5C 79 87 5E FB 03 56 00 40 03 31 40 03 03 01 41  // \y.^..V.@.1@...A
    B2C0: 03 09 05 41 03 00 00 00 75 02 40 41 03 05 41 A1  // ...A....u.@A..A.
    B2D0: 83 00 00 3E 25 40 64 48 F9 03 03 05 41 24 83 00  // ...>%@dH....A$..
    B2E0: 00 3E 25 40 30 48 F9 03 03 05 41 A3 76 00 00 01  // .>%@0H....A.v...
    B2F0: 0A 4C 5E 41 01 E2 4E 5E 40 0D 25 4E 5E 02 01 21  // .L^A..N^@.%N^..!
    B300: 4B 5E 03 01 A5 4B 5E E8 01 02 48 5E 00 54 00 49  // K^...K^...H^.T.I
    B310: 5E 01 02 4A 5E 01 4B E5 01 08 44 2F 04 07 65 87  // ^..J^.K...D/..e.
    B320: 5E FE 43 34 04 0D 65 87 5E 01 5C 29 87 5E 1F 01  // ^.C4..e.^.\).^..
    B330: 01 8D 53 5E 20 03 01 29 4D 5E 03 07 65 87 5E 7F  // ..S^ ..)M^..e.^.
    B340: 5C 65 0A 5E E3 04 4A 65 0A 5E 20 49 50 04 0D 65  // \e.^..Je.^ IP..e
    B350: 0A 5E 10 4A 65 0A 5E 20 44 5D 04 4B E5 01 02 49  // .^.Je.^ D].K...I
    B360: 87 04 5C 65 1A 5E E3 04 4A 65 1A 5E 20 49 72 04  // ..\e.^..Je.^ Ir.
    B370: 0D 65 1A 5E 10 4A 65 1A 5E 20 44 7F 04 4B E5 01  // .e.^.Je.^ D..K..
    B380: 80 49 9A 04 01 02 49 5E 02 0D 65 4B 5E 01 51 0A  // .I....I^..eK^.Q.
    B390: 0D 65 87 5E 40 51 0A 4A 65 87 5E 20 44 A1 04 07  // .e.^@Q.Je.^ D...
    B3A0: 65 87 5E BF 56 00 40 03 21 40 01 33 25 40 14 03  // e.^.V.@.!@.3%@..
    B3B0: 0A 48 40 0D 25 60 01 01 51 0A 4B E5 01 02 49 F3  // .H@.%`..Q.K...I.
    B3C0: 04 3A 00 00 3D 25 02 03 46 F3 04 02 25 03 02 02  // .:..=%..F...%...
    B3D0: E1 03 02 02 61 03 01 02 B9 03 01 08 A5 03 04 0E  // ....a...........
    B3E0: B1 03 02 02 01 02 00 52 2E 3A 00 00 5B 02 25 01  // .......R.:..[.%.
    B3F0: 0B 43 CB 04 7A 1C 00 00 00 D8 00 B0 01 88 02 40  // .C..z..........@
    B400: 42 0F 00 04 00 53 07 00 04 00 53 07 00 00 40 42  // B....S....S...@B
    B410: 0F 00 04 00 D4 02 02 01 00 04 37 00 00 42 29 00  // ..........7..B).
    B420: 63 02 49 02 63 07 21 00 63 08 1B 00 5A 5A 5B 0D  // c.I.c.!.c...ZZ[.
    B430: 25 C8 39 02 5B 01 05 3B 01 30 02 12 00 01 05 30  // %.9.[..;.0.....0
    B440: 01 80 BB 10 00 01 05 31 01 3C 00 01 08 01 8D 83  // .......1.<......
    B450: 38 30 00 01 25 82 38 01 5C 65 D4 00 FC 02 5C 25  // 80..%.8.\e....\%
    B460: 50 39 0F C0 01 25 32 01 00 01 05 4C 35 00 00 00  // P9...%2....L5...
    B470: 00 01 05 4A 35 00 00 00 00 01 05 50 35 00 00 00  // ...J5......P5...
    B480: 00 01 05 4E 35 00 00 00 00 01 05 54 35 00 00 00  // ...N5......T5...
    B490: 00 01 05 52 35 00 00 00 00 01 05 58 35 00 00 00  // ...R5......X5...
    B4A0: 00 01 05 56 35 00 00 00 00 01 05 6D 35 01 00 00  // ...V5......m5...
    B4B0: 00 01 05 DF 39 01 10 00 00 01 05 24 3A 00 1B 5D  // ....9......$:..]
    B4C0: 05 01 05 76 3A 35 00 13 00 01 05 77 3A 36 11 00  // ...v:5.....w:6..
    B4D0: 00 01 05 78 3A 41 E6 01 00 01 05 79 3A 00 00 00  // ...x:A.....y:...
    B4E0: 00 01 05 7A 3A 00 00 08 2C 01 05 7C 3A 02 04 00  // ...z:...,..|:...
    B4F0: 00 01 05 8C 3A 5E 4E 01 00 01 05 7A 3A 00 00 08  // ....:^N....z:...
    B500: 2C 01 05 7D 3A A4 01 00 00 01 05 7F 3A A4 01 00  // ,..}:.......:...
    B510: 00 01 05 81 3A 00 02 00 00 01 05 82 3A 49 D2 00  // ....:.......:I..
    B520: 00 01 05 85 3A 20 00 00 00 01 05 86 3A 24 0D 00  // ....: ......:$..
    B530: 00 01 05 89 3A 00 00 00 00 01 05 8A 3A 00 00 00  // ....:.......:...
    B540: 00 01 05 5C 3A 00 00 92 06 01 05 5D 3A AA 08 00  // ...\:......]:...
    B550: E0 01 05 C9 39 FE 01 00 00 01 05 CA 39 1E 05 00  // ....9.......9...
    B560: 00 01 05 CB 39 BA 04 00 00 01 05 CC 39 24 04 00  // ....9.......9$..
    B570: 00 01 05 CD 39 A2 08 00 00 01 05 CE 39 FE 01 00  // ....9.......9...
    B580: 00 01 05 CF 39 1E 05 00 00 01 05 D0 39 BA 04 00  // ....9.......9...
    B590: 00 01 05 D1 39 24 04 00 00 01 05 D2 39 A2 08 00  // ....9$......9...
    B5A0: 00 01 05 D3 39 FE 01 00 00 01 05 D4 39 1E 05 00  // ....9.......9...
    B5B0: 00 01 05 D5 39 BA 04 00 00 01 05 D6 39 24 04 00  // ....9.......9$..
    B5C0: 00 01 05 D7 39 A2 08 00 00 01 05 D8 39 FE 01 00  // ....9.......9...
    B5D0: 00 01 05 D9 39 1E 05 00 00 01 05 DA 39 BA 04 00  // ....9.......9...
    B5E0: 00 01 05 DB 39 24 04 00 00 01 05 DC 39 A2 08 00  // ....9$......9...
    B5F0: 00 0D 25 C8 39 02 0D 25 52 41 01 01 25 F2 4A 00  // ..%.9..%RA..%.J.
    B600: 01 25 F0 4A 00 01 25 F1 4A 00 01 25 EF 4B 00 55  // .%.J..%.J..%.K.U
    B610: 00 01 52 17 2C 25 01 01 3D 25 01 01 45 FE 01 55  // ..R.,%..=%..E..U
    B620: 00 01 52 4E 01 05 7C 53 00 00 00 03 02 25 01 07  // ..RN..|S.....%..
    B630: 52 33 02 05 01 00 07 00 00 52 4D 2C 25 01 01 3D  // R3.......RM,%..=
    B640: 25 01 04 45 25 02 66 16 03 0C 41 04 00 4C 0D 41  // %..E%.f...A..L.A
    B650: 02 00 44 46 02 0D A5 4C 00 02 52 4B 5B 02 05 01  // ..DF...L..RK[...
    B660: 01 00 00 00 52 06 01 05 00 00 17 A8 01 00 03 00  // ....R...........
    B670: 40 01 00 15 05 40 04 01 02 59 39 40 2D 01 40 01  // @....@...Y9@-.@.
    B680: 01 02 5A 39 40 01 05 53 39 00 F4 00 00 03 01 40  // ..Z9@..S9......@
    B690: 01 1B 05 40 04 2D 05 40 FF F3 00 00 01 02 54 39  // ...@.-.@......T9
    B6A0: 40 01 05 00 00 17 A8 01 00 01 00 55 39 01 00 01  // @..........U9...
    B6B0: 05 64 3A 00 00 40 0F 54 00 65 3A 03 01 40 01 15  // .d:..@.T.e:..@..
    B6C0: 05 40 08 33 05 40 01 00 00 00 2D 05 40 00 00 40  // .@.3.@....-.@..@
    B6D0: 0F 01 02 66 3A 40 54 00 67 3A 01 25 C9 00 F4 01  // ...f:@T.g:.%....
    B6E0: 05 C4 00 00 00 00 00 5B 90 00 02 01 00 04 66 FF  // .......[......f.
    B6F0: 56 08 47 2D 0D 42 68 00 03 21 47 00 09 25 47 F0  // V.G-.Bh..!G..%G.
    B700: 42 22 47 63 00 4F 00 63 60 4A 00 63 20 42 00 63  // B"Gc.O.c`J.c B.c
    B710: 90 3A 00 63 A0 32 00 5A 5A 5B 2D 0D 42 20 00 43  // .:.c.2.ZZ[-.B .C
    B720: 4F 00 2D 0D 42 18 00 43 4F 00 2D 0D 42 10 00 43  // O.-.B..CO.-.B..C
    B730: 4F 00 2D 0D 42 08 00 03 21 47 00 09 25 47 07 2D  // O.-.B...!G..%G.-
    B740: 0A 42 47 2D 0A 42 47 03 0C 48 00 00 5B 7A 90 00  // .BG-.BG..H..[z..
    B750: 00 00 80 00 00 01 80 01 00 00 00 01 00 02 00 03  // ................
    B760: 00 00 D8 00 B0 01 88 02 00 00 C4 00 88 01 4C 02  // ..............L.
    B770: 00 00 1B 01 36 02 51 03 72 00 01 01 00 00 37 00  // ....6.Q.r.....7.
    B780: 00 56 00 40 03 21 40 00 21 0D 40 1B 01 03 02 48  // .V.@.!@.!.@....H
    B790: 40 01 25 24 41 01 3D 65 00 02 49 4C 00 01 0D 35  // @.%$A.=e..IL...5
    B7A0: 41 01 00 54 00 33 41 0D 25 26 41 01 01 05 25 41  // A..T.3A.%&A...%A
    B7B0: 11 00 00 00 07 A5 24 41 FE 01 05 27 41 11 01 11  // ......$A...'A...
    B7C0: 01 43 6E 00 01 05 29 41 00 00 00 01 01 05 2D 41  // .Cn...)A......-A
    B7D0: 00 00 00 01 01 05 27 41 11 01 11 01 54 00 25 41  // ......'A....T.%A
    B7E0: 01 0D 35 41 00 01 3A 00 00 5B 3F 00 01 01 00 00  // ..5A..:..[?.....
    B7F0: 37 00 00 52 14 54 30 02 50 54 00 21 50 54 00 22  // 7..R.T0.PT.!PT."
    B800: 50 3C 69 02 50 00 44 3B 00 01 69 02 50 00 3D 65  // P<i.P.D;..i.P.=e
    B810: 00 00 44 3B 00 4A A5 01 50 01 44 3B 00 4A 25 02  // ..D;.J..P.D;.J%.
    B820: 50 01 44 33 00 3A 00 00 5B 00 43 00 01 01 00 00  // P.D3.:..[.C.....
    B830: 37 00 00 52 14 3D 65 00 01 44 3A 00 0D 65 01 50  // 7..R.=e..D:..e.P
    B840: 03 54 20 01 50 4A A5 01 50 01 49 1B 00 54 20 0F  // .T .PJ..P.I..T .
    B850: 50 56 00 40 20 25 00 01 03 0A 48 40 07 E5 E8 39  // PV.@ %....H@...9
    B860: 7F 43 3F 00 0D 25 01 50 01 3A 00 00 5B 00 CF 00  // .C?..%.P.:..[...
    B870: 02 01 00 00 37 00 00 42 29 00 63 00 1B 00 63 01  // ....7..B).c...c.
    B880: 1B 00 63 02 AA 00 5A 5A 5B 66 FF 56 08 40 2D 0D  // ..c...ZZ[f.V.@-.
    B890: 42 C3 00 03 21 40 00 15 25 40 01 2D 0A 42 40 03  // B...!@..%@.-.B@.
    B8A0: 0C 48 00 00 3D 65 00 00 44 72 00 0D 25 CC 00 01  // .H..=e..Dr..%...
    B8B0: 3A 00 00 01 8D C0 00 00 02 51 02 01 05 C6 00 00  // :........Q......
    B8C0: 00 10 00 01 05 C8 00 00 00 50 00 01 0D C3 00 02  // .........P......
    B8D0: 00 54 20 CA 00 01 05 C2 00 00 01 00 00 43 1A 00  // .T ..........C..
    B8E0: 07 25 CC 00 FE 3A 00 00 0D 25 CA 00 01 01 25 C2  // .%...:...%....%.
    B8F0: 00 01 07 A5 C1 00 FE 0D 25 D5 00 01 0D 65 D5 00  // ........%....e..
    B900: 01 4A 65 D5 00 01 44 93 00 54 08 D5 00 54 00 C6  // .Je...D..T...T..
    B910: 00 54 00 C8 00 43 1A 00 5C 65 D4 00 FC 02 01 A1  // .T...C..\e......
    B920: C0 00 00 2B A5 C0 00 01 0D A5 C1 00 01 5B 7A 0C  // ...+.........[z.
    B930: 00 00 00 02 00 2C 00 2D 00 2E 00 2F 00 00 DA 01  // .....,.-.../....
    B940: 03 01 00 00 37 00 00 03 05 46 10 27 00 00 3D A5  // ....7....F.'..=.
    B950: 00 02 49 1C 00 02 02 00 46 5B 03 05 40 16 6C 01  // ..I.....F[..@.l.
    B960: 00 03 05 41 00 6C 01 00 3D 25 00 00 44 54 00 03  // ...A.l..=%..DT..
    B970: 05 40 16 6E 01 00 03 05 41 00 6E 01 00 3D 25 00  // .@.n....A.n..=%.
    B980: 01 44 54 00 03 05 40 16 7E 01 00 03 05 41 00 7E  // .DT...@.~....A.~
    B990: 01 00 01 02 00 00 40 03 88 40 01 00 03 18 40 01  // ......@..@....@.
    B9A0: 00 09 8D 40 FF 01 3E 8D 40 00 00 49 AA 00 01 02  // ...@..>.@..I....
    B9B0: 00 00 41 03 00 40 01 00 09 05 40 FF 01 00 00 3E  // ..A..@....@....>
    B9C0: 0D 40 00 00 49 93 00 03 05 46 00 71 02 00 43 CD  // .@..I....F.q..C.
    B9D0: 00 21 02 40 46 03 00 41 01 00 09 05 41 00 1E 00  // .!.@F..A....A...
    B9E0: 00 1B 05 41 09 43 C5 00 7C 02 40 46 7E 05 40 00  // ...A.C..|.@F~.@.
    B9F0: 00 01 00 03 00 41 01 00 09 05 41 00 F0 00 00 1B  // .....A....A.....
    BA00: 05 41 0C 75 02 40 41 03 02 46 40 3D A5 00 01 49  // .A.u.@A..F@=...I
    BA10: D9 00 02 02 00 46 5B 3D E5 00 00 49 3B 01 56 00  // .....F[=...I;.V.
    BA20: 40 03 29 40 00 21 0D 40 0A 00 03 05 41 4A 6C 01  // @.)@.!.@....AJl.
    BA30: 00 3D 25 00 00 44 0F 01 03 05 41 4A 6E 01 00 3D  // .=%..D....AJn..=
    BA40: 25 00 01 44 0F 01 03 05 41 4A 7E 01 00 2D 02 40  // %..D....AJ~..-.@
    BA50: 41 01 02 00 00 40 03 00 41 01 00 09 05 41 00 00  // A....@..A....A..
    BA60: F0 07 1B 05 41 14 02 E2 00 41 3D E5 00 00 49 3B  // ....A....A=...I;
    BA70: 01 02 05 00 10 27 00 00 5B 56 00 40 03 39 40 00  // .....'..[V.@.9@.
    BA80: 55 38 00 66 FF 2D 0D 42 B2 01 3E 0C 40 02 00 47  // U8.f.-.B..>.@..G
    BA90: 5C 01 2D 0D 42 08 00 43 4C 01 33 0C 40 04 00 21  // \.-.B..CL.3.@..!
    BAA0: 0C 40 06 00 2D 0C 40 00 00 03 09 42 00 55 00 00  // .@..-.@....B.U..
    BAB0: 02 0A 00 40 7C 05 46 40 42 0F 00 7E 01 40 00 02  // ...@|.F@B..~.@..
    BAC0: 02 00 40 3E 25 42 00 49 AE 01 56 00 46 66 08 03  // ..@>%B.I..V.Ff..
    BAD0: 0C 46 0C 00 3E 0D 46 00 00 44 AE 01 7C 02 40 46  // .F..>.F..D..|.@F
    BAE0: 7E 05 40 14 00 00 00 32 02 00 40 5B 5B 7A 28 00  // ~.@....2..@[[z(.
    BAF0: FF FF 07 00 00 00 00 00 C8 00 3F 00 08 00 19 00  // ..........?.....
    BB00: 40 06 5F 00 40 00 32 00 80 0C 7E 00 60 00 64 00  // @._.@.2...~.`.d.
    BB10: 00 32 7F 00 7F 00 64 00 C6 00 02 03 04 00 37 00  // .2....d.......7.
    BB20: 00 56 00 46 56 00 00 03 21 00 00 55 20 00 3D 65  // .V.FV...!..U .=e
    BB30: 00 03 44 2C 00 3D 65 00 0B 46 BB 00 02 29 00 00  // ..D,.=e..F...)..
    BB40: 32 25 00 08 0E 25 00 60 52 14 5C 22 28 55 F8 00  // 2%...%.`R.\"(U..
    BB50: 02 22 00 00 52 14 03 08 41 3D 41 09 0D 41 03 00  // ."..R...A=A..A..
    BB60: 66 FF 2D 0D 42 C2 00 2D 0A 42 41 03 24 00 00 00  // f.-.B..-.BA.$...
    BB70: 3D E2 00 00 48 A7 00 3E 25 00 04 44 76 00 03 22  // =...H..>%..Dv.."
    BB80: 46 00 33 25 46 01 15 25 46 04 0F 25 46 01 33 39  // F.3%F..%F..%F.39
    BB90: 00 00 3E 25 00 01 44 93 00 3E 25 00 02 44 8C 00  // ..>%..D..>%..D..
    BBA0: 03 25 46 21 03 65 00 2F 43 97 00 03 65 00 13 03  // .%F!.e./C...e...
    BBB0: 79 46 00 33 65 46 01 15 2D 46 03 0F 65 46 01 52  // yF.3eF..-F..eF.R
    BBC0: 14 01 02 01 4D 46 01 52 00 4D 00 54 00 08 4D 54  // ....MF.R.M.T..MT
    BBD0: 00 FF 4C 3A 00 00 5B 7A 04 00 03 02 01 04 CB 00  // ..L:..[z........
    BBE0: 01 01 00 00 37 00 00 3D 65 00 01 44 61 00 56 00  // ....7..=e..Da.V.
    BBF0: 40 20 25 00 10 03 0A 48 40 07 25 8D 4F FD 4A 25  // @ %....H@.%.O.J%
    BC00: 8D 4F 04 49 20 00 52 14 07 25 48 50 FE 4A 65 48  // .O.I .R..%HP.JeH
    BC10: 50 01 49 2F 00 03 21 40 00 21 0D 40 C4 00 03 0A  // P.I/..!@.!.@....
    BC20: 48 40 07 25 27 3A FE 56 00 40 03 21 40 00 21 0D  // H@.%':.V.@.!@.!.
    BC30: 40 1B 01 03 0A 48 40 07 25 FD 40 EF 43 C7 00 56  // @....H@.%.@.C..V
    BC40: 00 40 20 25 00 10 03 0A 48 40 0D 25 8D 4F 02 4A  // .@ %....H@.%.O.J
    BC50: 25 8D 4F 04 44 71 00 52 14 0D 25 48 50 01 4A 65  // %.O.Dq.R..%HP.Je
    BC60: 48 50 01 44 80 00 56 00 40 03 21 40 00 21 0D 40  // HP.D..V.@.!@.!.@
    BC70: C4 00 03 0A 48 40 0D 25 27 3A 01 56 00 40 03 21  // ....H@.%':.V.@.!
    BC80: 40 00 21 0D 40 1B 01 03 0A 48 40 0D 25 FD 40 10  // @.!.@....H@.%.@.
    BC90: 56 00 40 03 21 40 00 21 0D 40 5A 00 03 0A 48 40  // V.@.!@.!.@Z...H@
    BCA0: 0D 25 4C 4D 01 3A 00 00 5B 00 51 01 01 04 00 08  // .%LM.:..[.Q.....
    BCB0: 37 00 00 3D 65 02 01 49 1A 01 4B A5 02 03 49 2A  // 7..=e..I..K...I*
    BCC0: 00 52 25 02 05 00 00 00 00 00 02 05 01 00 05 02  // .R%.............
    BCD0: 00 43 2F 00 55 28 02 52 25 0E 25 02 90 52 14 08  // .C/.U(.R%.%..R..
    BCE0: 25 02 07 0D 05 27 3A 11 11 01 00 5C 25 26 3A 0B  // %....':....\%&:.
    BCF0: 01 03 21 41 02 15 25 41 04 0D 22 26 3A 41 0D 65  // ..!A..%A.."&:A.e
    BD00: 29 3A 01 5C 25 4E 3A FD 01 01 0D 3E 3A F4 00 01  // ):.\%N:....>:...
    BD10: 0D 42 3A F4 00 4B A5 02 03 49 85 00 01 05 3D 3A  // .B:..K...I....=:
    BD20: 00 00 10 00 01 05 41 3A 00 00 50 00 43 95 00 01  // ......A:..P.C...
    BD30: 05 3D 3A 00 00 00 00 01 05 41 3A 00 00 00 00 01  // .=:......A:.....
    BD40: 0D 1B 3A 80 00 01 0D 24 3A 00 03 01 0D 7C 3A 01  // ..:....$:....|:.
    BD50: 03 01 05 7A 3A 00 00 08 28 01 05 7B 3A 00 00 08  // ...z:...(..{:...
    BD60: 00 01 E5 5E 3A 08 01 E5 5D 3A E0 54 00 1C 3A 01  // ...^:...]:.T..:.
    BD70: 19 1D 3A 00 01 89 1D 3A 00 01 19 21 3A 00 01 89  // ..:....:...!:...
    BD80: 21 3A 00 54 08 19 3A 66 FF 2D 0D 42 42 01 03 0C  // !:.T..:f.-.BB...
    BD90: 40 00 00 3E 0D 40 FF FF 44 01 01 3D 8C 01 00 00  // @..>.@..D..=....
    BDA0: 44 01 01 2D 0D 42 03 00 43 E4 00 01 24 19 3A 02  // D..-.B..C...$.:.
    BDB0: 00 01 09 3B 3A 01 07 25 26 3A FE 07 25 4E 3A FE  // ...;:..%&:..%N:.
    BDC0: 3A 00 00 5B 0E 25 02 90 52 14 3D 65 02 00 49 2F  // :..[.%..R.=e..I/
    BDD0: 01 0D 25 26 3A 01 43 3B 01 3D 65 02 10 44 3B 01  // ..%&:.C;.=e..D;.
    BDE0: 01 09 3B 3A 01 3A 00 00 5B 7A 0F 00 01 00 01 01  // ..;:.:..[z......
    BDF0: 01 03 01 05 02 02 00 08 FF FF 08 00 42 00 01 01  // ............B...
    BE00: 00 00 37 00 00 52 14 3D 65 00 01 44 21 00 54 20  // ..7..R.=e..D!.T 
    BE10: 4D 50 4A 65 4D 50 01 49 16 00 43 3E 00 5C 4D 1B  // MPJeMP.I..C>.\M.
    BE20: 50 FE FF 00 01 4A A5 01 50 01 44 3E 00 0D 25 4D  // P....J..P.D>..%M
    BE30: 50 01 4A 65 4D 50 01 44 36 00 3A 00 00 5B 17 00  // P.JeMP.D6.:..[..
    BE40: 01 03 00 00 37 00 00 0E 25 00 A0 52 14 54 00 5F  // ....7...%..R.T._
    BE50: 41 3A 00 00 5B 00 C6 01 01 01 00 18 56 00 40 03  // A:..[.......V.@.
    BE60: 21 40 05 21 0D 40 80 00 03 0A 48 40 37 00 00 01  // !@.!.@....H@7...
    BE70: 0D 49 50 0D 00 3D 8D 01 0D 00 46 2C 00 01 19 49  // .IP..=....F,...I
    BE80: 50 01 01 8D 4A 50 40 01 01 0D 4B 50 2C 01 03 09  // P...JP@...KP,...
    BE90: 41 00 2D 19 41 00 03 8A 41 41 2D 8D 41 01 00 1B  // A.-.A...AA-.A...
    BEA0: 1D 41 02 01 1A 4A 50 41 33 0D 41 01 00 01 0A EA  // .A...JPA3.A.....
    BEB0: 4F 41 54 08 EC 4F 01 99 EC 4F 02 03 19 41 00 33  // OAT..O...O...A.3
    BEC0: 09 41 02 56 18 41 03 B1 41 04 33 1A 41 41 01 8A  // .A.V.A..A.3.AA..
    BED0: EB 4F 41 03 19 41 00 33 09 41 02 2D 1A 41 41 2D  // .OA..A.3.A.-.AA-
    BEE0: 09 41 00 4B 25 04 10 44 98 00 2D 09 41 00 01 0A  // .A.K%..D..-.A...
    BEF0: EB 4F 41 03 21 41 04 09 25 41 02 1B 25 41 01 01  // .OA.!A..%A..%A..
    BF00: 22 ED 4F 41 03 09 41 01 2D 19 41 01 33 0D 41 01  // ".OA..A.-.A.3.A.
    BF10: 00 01 0A EF 4F 41 54 08 F7 4F 01 99 F7 4F 03 03  // ....OAT..O...O..
    BF20: 19 41 01 33 09 41 03 56 18 41 03 B9 41 04 33 1A  // .A.3.A.V.A..A.3.
    BF30: 41 41 01 8A F6 4F 41 03 19 41 01 33 09 41 03 2D  // AA...OA..A.3.A.-
    BF40: 1A 41 41 2D 09 41 01 4B 25 04 20 44 FC 00 2D 09  // .AA-.A.K%. D..-.
    BF50: 41 01 01 0A F6 4F 41 03 21 41 04 09 25 41 04 1B  // A....OA.!A..%A..
    BF60: 25 41 02 01 22 F8 4F 41 3D 65 05 00 44 21 01 07  // %A..".OA=e..D!..
    BF70: 65 01 50 EF 43 26 01 0D 65 01 50 10 03 00 46 EB  // e.P.C&..e.P...F.
    BF80: 4F 02 00 02 F6 4F 56 00 40 03 21 40 05 21 0D 40  // O....OV.@.!@.!.@
    BF90: 01 00 03 0A 48 40 56 00 40 03 09 40 02 3D 65 05  // ....H@V.@..@.=e.
    BFA0: 00 49 53 01 33 0D 40 02 00 15 05 40 0F 56 00 41  // .IS.3.@....@.V.A
    BFB0: 3D 8D 02 0D 00 48 6B 01 03 0D 41 0D 00 33 19 41  // =....Hk...A..3.A
    BFC0: 02 0F 02 40 41 0F E5 40 80 01 02 E8 39 40 56 00  // ...@A..@....9@V.
    BFD0: 40 03 21 40 05 21 0D 40 1B 01 03 0A 48 40 01 09  // @.!@.!.@....H@..
    BFE0: 3B 41 00 01 89 3B 41 01 01 09 3C 41 00 01 89 3C  // ;A...;A...<A...<
    BFF0: 41 01 01 02 38 41 46 01 01 39 41 02 54 00 36 41  // A...8AF..9A.T.6A
    C000: 01 31 36 41 04 01 B1 36 41 04 54 00 37 41 01 39  // .16A...6A.T.7A.9
    C010: 37 41 04 01 B9 37 41 04 3A 00 00 5B 0A 00 02 03  // 7A...7A.:..[....
    C020: 08 00 37 00 00 5B 21 02 01 01 00 00 37 00 00 0D  // ..7..[!.....7...
    C030: 25 78 53 08 07 25 9E 53 FE 56 00 41 03 39 41 01  // %xS..%.S.V.A.9A.
    C040: 09 25 41 0F 03 0A 40 42 66 FF 2D 0D 42 11 02 15  // .%A...@Bf.-.B...
    C050: 25 41 02 2D 0A 42 41 03 0C 41 00 00 01 02 00 00  // %A.-.BA..A......
    C060: 41 07 A5 01 00 FE 54 08 01 00 01 0C 7F 53 02 00  // A.....T......S..
    C070: 03 0A 42 40 03 05 40 C0 5D 00 00 56 00 41 03 21  // ..B@..@.]..V.A.!
    C080: 41 00 27 02 40 41 01 8A 7B 53 40 01 25 7B 53 02  // A.'.@A..{S@.%{S.
    C090: 0D 25 79 53 02 01 A9 7D 53 01 4B 25 01 01 49 7F  // .%yS...}S.K%..I.
    C0A0: 00 54 30 7D 53 01 0D 7D 53 00 31 2B A5 7D 53 01  // .T0}S..}S.1+.}S.
    C0B0: 4B 25 01 02 44 96 00 2B A5 7D 53 01 56 00 41 03  // K%..D..+.}S.V.A.
    C0C0: 71 41 01 0F E5 41 80 01 02 7E 53 41 03 69 41 00  // qA...A...~SA.iA.
    C0D0: 2D A5 41 01 01 02 7E 53 41 4B 25 01 02 44 C6 00  // -.A...~SAK%..D..
    C0E0: 56 28 41 2D A5 41 01 01 02 7E 53 41 4B 25 01 01  // V(A-.A...~SAK%..
    C0F0: 44 E7 00 03 71 41 00 2D A5 41 01 01 02 7E 53 41  // D...qA.-.A...~SA
    C100: 03 79 41 00 2D A5 41 01 01 02 7E 53 41 0D 25 78  // .yA.-.A...~SA.%x
    C110: 53 01 03 A5 41 01 43 BA 01 03 29 40 01 03 65 40  // S...A.C...)@..e@
    C120: 01 03 99 40 00 56 00 41 03 71 41 01 0F 65 41 01  // ...@.V.A.qA..eA.
    C130: 0F E5 41 80 01 02 7E 53 41 01 A5 7D 53 04 3D 65  // ..A...~SA..}S.=e
    C140: 01 04 47 28 01 01 0D 7D 53 01 13 43 57 01 01 A2  // ..G(...}S..CW...
    C150: 7D 53 40 01 0D 7D 53 01 31 43 57 01 07 65 7D 53  // }S@..}S.1CW..e}S
    C160: EF 01 A5 7D 53 03 3E 25 40 04 46 57 01 01 A2 7D  // ...}S.>%@.FW...}
    C170: 53 40 31 A5 7D 53 01 5C 65 7D 53 FD 20 0D 25 78  // S@1.}S.\e}S. .%x
    C180: 53 01 03 A5 41 00 43 BA 01 03 05 41 01 00 00 80  // S...A.C....A....
    C190: 03 AA 41 40 01 02 7E 53 41 3D 65 01 01 49 82 01  // ..A@..~SA=e..I..
    C1A0: 02 A8 00 7E 53 43 F9 01 56 00 41 03 1A 41 40 3B  // ...~SC..V.A..A@;
    C1B0: 02 41 03 28 41 7E 53 03 68 41 7E 53 03 A8 41 7E  // .A.(A~S.hA~S..A~
    C1C0: 53 03 E8 41 7E 53 04 02 00 41 56 28 40 2D 8D 40  // S..A~S...AV(@-.@
    C1D0: 04 00 3E 25 40 04 47 F9 01 33 25 40 04 43 36 01  // ..>%@.G..3%@.C6.
    C1E0: 02 65 00 02 03 0D 41 64 00 33 0D 41 01 00 3E 0D  // .e....Ad.3.A..>.
    C1F0: 41 00 00 44 F9 01 51 64 4A 25 7A 53 10 44 C3 01  // A..D..QdJ%zS.D..
    C200: 4A 65 7A 53 06 49 F9 01 02 65 00 01 0D 25 79 53  // JezS.I...e...%yS
    C210: 02 3E A5 41 00 44 63 01 4B 25 01 01 44 F3 00 0D  // .>.A.Dc.K%..D...
    C220: 25 79 53 02 01 25 78 53 02 51 01 54 00 78 53 54  // %yS..%xS.Q.T.xST
    C230: 00 7F 53 5B 7A 10 00 90 5D 01 00 94 5D 03 02 98  // ..S[z...]...]...
    C240: 5D 05 04 9C 5D 42 41 00 46 00 02 02 00 04 37 00  // ]...]BA.F.....7.
    C250: 00 55 30 00 32 25 00 01 20 25 00 08 56 08 48 03  // .U0.2%.. %..V.H.
    C260: 22 48 40 0D A5 D5 53 01 02 A0 00 D4 53 08 A5 00  // "H@...S.....S...
    C270: 03 4A 25 D4 53 02 44 3C 00 5C 0D D5 53 FF FE 01  // .J%.S.D<.\..S...
    C280: 00 43 42 00 0D 0D D5 53 01 01 3A 00 00 5B 3A 01  // .CB....S..:..[:.
    C290: 01 08 08 00 03 01 00 00 3D E5 00 01 44 33 00 3D  // ........=...D3.=
    C2A0: E5 00 02 44 33 00 02 05 00 00 00 01 00 52 29 20  // ...D3........R) 
    C2B0: 05 00 64 00 00 00 03 02 46 40 02 02 00 00 43 93  // ..d.....F@....C.
    C2C0: 00 02 05 00 01 00 02 00 52 29 03 01 01 00 02 02  // ........R)......
    C2D0: 00 00 03 01 46 00 56 38 46 03 05 40 80 C3 C9 01  // ....F.V8F..@....
    C2E0: 27 02 40 46 2D 05 40 31 00 00 00 27 05 40 32 00  // '.@F-.@1...'.@2.
    C2F0: 00 00 21 05 40 32 00 00 00 21 02 46 40 03 02 46  // ..!.@2...!.F@..F
    C300: 40 55 00 03 27 05 46 19 00 00 00 7C 05 40 00 40  // @U..'.F....|.@.@
    C310: 00 00 7E 02 40 01 02 8A 01 40 02 1A 01 40 55 00  // ..~.@....@...@U.
    C320: 02 55 38 00 03 05 40 00 32 00 00 3D 05 00 00 00  // .U8...@.2..=....
    C330: 00 00 44 D1 00 03 02 40 46 27 01 40 00 3E 05 40  // ..D....@F'.@.>.@
    C340: 9C 18 00 00 47 C0 00 03 05 40 00 32 00 00 3E 05  // ....G....@.2..>.
    C350: 40 C8 00 00 00 46 D1 00 03 05 40 C8 00 00 00 66  // @....F....@....f
    C360: FF 2D 0D 42 1A 01 3E 0C 40 02 00 47 E8 00 2D 0D  // .-.B..>.@..G..-.
    C370: 42 08 00 43 D8 00 33 0C 40 00 00 27 0C 40 06 00  // B..C..3.@..'.@..
    C380: 2D 0C 40 04 00 02 E2 00 40 33 0C 40 04 00 21 0C  // -.@.....@3.@..!.
    C390: 40 06 00 2D 0C 40 00 00 27 02 46 40 02 0A 00 40  // @..-.@..'.F@...@
    C3A0: 02 B2 00 40 5B 7A 20 00 C8 00 40 06 08 00 19 00  // ...@[z ...@.....
    C3B0: 40 06 80 0C 40 00 32 00 80 0C 38 18 60 00 64 00  // @...@.2...8.`.d.
    C3C0: 00 32 00 32 7F 00 64 00 07 00 02 01 00 00 5B 00  // .2.2..d.......[.
    C3D0: 4E 03 01 05 00 00 37 00 00 0E 25 00 60 52 14 08  // N.....7...%.`R..
    C3E0: 25 00 0F 42 29 00 63 0F 53 00 63 11 1F 02 63 12  // %..B).c.S.c...c.
    C3F0: 90 02 63 01 E8 02 63 00 34 03 63 08 D6 01 63 09  // ..c...c.4.c...c.
    C400: B7 01 63 0A BE 01 63 13 C6 01 63 14 CE 01 63 0B  // ..c...c...c...c.
    C410: DE 01 63 0C D8 02 63 0D E6 01 63 10 FF 01 5A 5A  // ..c...c...c...ZZ
    C420: 43 B3 01 54 00 9A 55 01 0D 2B 55 1F 00 3D A5 00  // C..T..U..+U..=..
    C430: 00 44 72 00 3D A5 00 02 44 A1 01 3D A5 00 05 49  // .Dr.=...D..=...I
    C440: A9 01 54 00 C9 55 3D 25 02 00 49 81 00 02 25 02  // ..T..U=%..I...%.
    C450: 02 32 25 02 01 01 E1 C9 55 02 4A 25 CC 55 01 49  // .2%.....U.J%.U.I
    C460: D8 00 7B 05 01 00 80 00 00 7E 05 40 8C 0A 00 00  // ..{......~.@....
    C470: 56 00 46 03 29 46 02 27 02 40 46 07 65 D0 55 FE  // V.F.)F.'.@F.e.U.
    C480: 01 05 D1 55 00 80 00 00 01 02 D2 55 40 0D E5 D3  // ...U.......U@...
    C490: 55 10 0D 65 28 55 04 03 21 40 02 15 25 40 05 01  // U..e(U..!@..%@..
    C4A0: E2 CA 55 40 54 20 CE 55 02 A0 02 28 55 03 0A 46  // ..U@T .U...(U..F
    C4B0: 48 08 A5 02 07 56 00 40 03 31 40 02 21 0D 40 80  // H....V.@.1@.!.@.
    C4C0: 00 03 8A 46 40 03 0A 48 40 03 88 40 EA 4F 03 08  // ...F@..H@..@.O..
    C4D0: 40 EF 4F 2D 05 40 01 00 01 00 03 98 41 EB 4F 03  // @.O-.@......A.O.
    C4E0: 18 41 F6 4F 03 0A 48 46 3C 02 0C 56 40 44 B3 01  // .A.O..HF<..V@D..
    C4F0: 01 02 0C 56 40 01 02 0D 56 41 03 1A 48 46 03 00  // ...V@...VA..HF..
    C500: 40 EB 4F 33 1A 40 40 33 08 40 36 41 33 08 40 36  // @.O3.@@3.@6A3.@6
    C510: 41 03 00 41 F6 4F 33 1A 41 41 33 08 41 37 41 33  // A..A.O3.AA3.A7A3
    C520: 08 41 37 41 03 0A 48 46 01 0A 0F 56 41 01 8A 0F  // .A7A..HF...VA...
    C530: 56 40 03 1A 48 46 03 00 40 EC 4F 33 8A 40 40 03  // V@..HF..@.O3.@@.
    C540: 00 41 F7 4F 33 8A 41 41 4A 25 ED 4F 01 44 84 01  // .A.O3.AAJ%.O.D..
    C550: 0F E5 40 80 4A 25 F8 4F 01 44 90 01 0F E5 41 80  // ..@.J%.O.D....A.
    C560: 03 0A 48 46 01 1A 0E 56 41 01 9A 0E 56 40 43 B3  // ..HF...VA...V@C.
    C570: 01 01 05 9A 55 00 00 00 00 07 E5 28 55 2F 0D 65  // ....U......(U/.e
    C580: 28 55 04 3A 00 00 5B 54 20 D8 55 43 B3 01 01 25  // (U.:..[T .UC...%
    C590: D8 55 01 43 B3 01 01 25 D8 55 02 43 B3 01 01 25  // .U.C...%.U.C...%
    C5A0: D8 55 03 43 B3 01 07 25 C8 55 EF 43 B3 01 0D 25  // .U.C...%.U.C...%
    C5B0: C8 55 10 43 B3 01 0D 65 D0 55 01 51 0A 07 25 CD  // .U.C...e.U.Q..%.
    C5C0: 55 FE 51 0A 01 0D CC 55 01 02 51 C8 43 B3 01 0D  // U.Q....U..Q.C...
    C5D0: 25 DE 55 10 3D A5 00 00 44 B3 01 3A 00 00 55 00  // %.U.=...D..:..U.
    C5E0: 01 02 21 01 00 02 0D 00 00 05 52 15 43 B3 01 01  // ..!.......R.C...
    C5F0: 69 6F 55 02 3D A5 00 03 49 3B 02 4A 25 35 55 10  // ioU.=...I;.J%5U.
    C600: 49 3B 02 01 A5 6F 55 02 43 40 02 01 B1 6F 55 00  // I;...oU.C@...oU.
    C610: 3D 25 02 00 44 55 02 32 25 02 01 14 25 02 04 5C  // =%..DU.2%...%..\
    C620: E1 6F 55 8F 02 3D E5 00 04 47 64 02 0D 25 6F 55  // .oU..=...Gd..%oU
    C630: 01 43 69 02 07 25 6F 55 FE 3D A5 00 05 44 77 02  // .Ci..%oU.=...Dw.
    C640: 3D A5 00 00 49 88 02 02 A5 00 00 03 39 40 00 33  // =...I.......9@.3
    C650: 25 40 01 01 22 CB 55 40 02 E0 02 70 55 43 B3 01  // %@..".U@...pUC..
    C660: 02 E0 02 70 55 4B E5 02 01 44 B3 01 02 B0 00 6F  // ...pUK...D.....o
    C670: 55 02 E5 00 04 4A 25 6F 55 01 44 B1 02 02 E5 00  // U....J%oU.D.....
    C680: 08 3D A5 00 02 44 BF 02 3D A5 00 03 49 C8 02 54  // .=...D..=...I..T
    C690: 00 70 55 50 02 43 B3 01 02 A5 00 00 03 31 43 00  // .pUP.C.......1C.
    C6A0: 4A 62 6F 55 44 44 B3 01 54 08 CC 55 51 C8 0D 25  // JboUDD..T..UQ..%
    C6B0: CD 55 01 51 32 43 B3 01 0D 25 70 55 01 3D A5 00  // .U.Q2C...%pU.=..
    C6C0: 00 44 FD 02 01 0D A1 55 0F 01 43 0E 03 03 39 43  // .D.....U..C...9C
    C6D0: 00 03 02 40 44 33 25 40 01 01 0A A1 55 40 3A 00  // ...@D3%@....U@:.
    C6E0: 00 20 25 00 02 03 22 43 40 03 22 40 44 15 25 40  // . %..."C@."@D.%@
    C6F0: 01 0D 22 5E 5D 40 51 64 69 25 40 FF 07 22 5E 5D  // .."^]@Qdi%@.."^]
    C700: 40 43 B3 01 54 00 A1 55 07 25 70 55 FE 07 0D 6F  // @C..T..U.%pU...o
    C710: 55 FE 80 54 20 C8 55 54 20 D8 55 43 B3 01 46 01  // U..T .UT .UC..F.
    C720: 01 06 00 00 37 00 00 42 29 00 63 07 24 01 63 01  // ....7..B).c.$.c.
    C730: 25 00 63 00 C0 00 63 0B 27 01 63 04 2C 01 5A 5A  // %.c...c.'.c.,.ZZ
    C740: 43 3F 01 02 65 00 11 52 04 4B E5 02 01 49 20 01  // C?..e..R.K...I .
    C750: 02 65 00 0A 55 08 02 52 4D 3D E5 00 04 47 50 00  // .e..U..RM=...GP.
    C760: 68 25 00 01 02 25 02 01 52 4D 68 25 00 01 3D A5  // h%...%..RMh%..=.
    C770: 00 00 49 82 00 20 05 01 64 00 00 00 02 05 01 14  // ..I.. ..d.......
    C780: 1E 00 02 2C 21 01 00 02 01 02 00 02 02 00 40 52  // ...,!.........@R
    C790: 0C 26 05 00 64 00 00 00 02 02 01 40 02 01 00 02  // .&..d......@....
    C7A0: 02 65 00 01 55 08 02 52 4D 3D E5 00 04 47 A0 00  // .e..U..RM=...G..
    C7B0: 68 25 00 01 02 25 02 01 52 4D 68 25 00 01 51 05  // h%...%..RMh%..Q.
    C7C0: 02 65 00 01 52 04 51 0A 02 65 00 09 52 4D 3D E5  // .e..R.Q..e..RM=.
    C7D0: 00 04 47 20 01 68 25 00 01 52 4D 43 20 01 02 65  // ..G .h%..RMC ..e
    C7E0: 00 12 52 04 4B E5 02 01 44 20 01 02 65 00 08 52  // ..R.K...D ..e..R
    C7F0: 4D 3D E5 00 04 47 E4 00 68 25 00 01 52 4D 68 25  // M=...G..h%..RMh%
    C800: 00 01 02 65 00 00 52 04 02 65 00 00 52 4D 3D E5  // ...e..R..e..RM=.
    C810: 00 04 47 01 01 68 25 00 01 52 4D 68 25 00 01 3D  // ..G..h%..RMh%..=
    C820: A5 00 00 49 20 01 02 01 02 00 02 05 01 14 00 00  // ...I ...........
    C830: 00 2C 21 01 00 55 00 00 52 0C 02 01 00 02 3A 00  // .,!..U..R.....:.
    C840: 00 5B 43 20 01 52 4D 43 20 01 66 06 02 29 00 00  // .[C .RMC .f..)..
    C850: 02 68 00 4E 00 02 8C 00 20 00 52 33 5B 02 29 00  // .h.N.... .R3[.).
    C860: 00 52 33 5B 8B 03 02 01 00 00 37 00 00 0E 25 00  // .R3[......7...%.
    C870: 20 52 14 08 25 00 0F 42 29 00 63 07 35 00 63 0A  //  R..%..B).c.5.c.
    C880: 3D 00 63 01 33 01 63 00 8D 01 63 09 CD 01 63 08  // =.c.3.c...c...c.
    C890: 02 02 63 0B 1A 02 5A 5A 5B 0D 65 EC 5D 08 43 87  // ..c...ZZ[.e.].C.
    C8A0: 03 03 0A 46 48 66 07 2D 0C 42 08 00 56 00 40 20  // ...FHf.-.B..V.@ 
    C8B0: 25 00 05 2D 0A 42 40 20 25 00 02 03 0A 48 40 01  // %..-.B@ %....H@.
    C8C0: 04 2E 5D 00 00 01 64 2D 5D 04 00 07 E5 2D 5D FC  // ..]...d-]....-].
    C8D0: 07 A5 2D 5D 8F 03 0A 48 46 56 00 41 5C FA FB 5D  // ..-]...HFV.A\..]
    C8E0: FC 41 3D A5 00 00 49 A7 00 07 A5 E9 5D 7F 66 07  // .A=...I.....].f.
    C8F0: 2D 0C 42 06 00 2D 0D 42 06 00 56 00 41 3D A5 02  // -.B..-.B..V.A=..
    C900: 14 49 23 03 03 25 41 20 43 23 03 0D A5 E9 5D 80  // .I#..%A C#....].
    C910: 66 1E 2D 0D 42 C4 00 3D A5 00 02 44 CE 00 2D 0D  // f.-.B..=...D..-.
    C920: 42 0C 00 3D 05 01 40 9C 00 00 47 CE 00 2D 0D 42  // B..=..@...G..-.B
    C930: 0C 00 03 21 43 00 03 E2 41 44 4C E4 41 05 00 49  // ...!C...ADL.A..I
    C940: 21 01 66 07 2D 0C 42 04 00 2D 0D 42 02 00 03 04  // !.f.-.B..-.B....
    C950: 40 00 00 3E 05 40 00 00 00 00 44 87 03 03 21 43  // @..>.@....D...!C
    C960: 00 03 E2 41 44 4C E4 41 05 00 44 19 01 3D A4 00  // ...ADL.A..D..=..
    C970: 04 00 49 19 01 3D 04 01 00 00 47 21 01 2D 0D 42  // ..I..=....G!.-.B
    C980: 0C 00 43 EA 00 03 04 40 06 00 03 24 41 0A 00 03  // ..C....@...$A...
    C990: 64 41 0B 00 43 2C 03 07 65 EC 5D F7 03 0A 46 48  // dA..C,..e.]...FH
    C9A0: 56 00 41 3D E5 00 04 47 4E 01 07 25 0A 5E F9 43  // V.A=...GN..%.^.C
    C9B0: 54 01 5C 25 0A 5E F9 02 4A 65 08 5E 01 44 54 01  // T.\%.^..Je.^.DT.
    C9C0: 07 25 08 5E F8 4A 65 08 5E 01 44 61 01 2D E5 41  // .%.^.Je.^.Da.-.A
    C9D0: 01 2D 0D 48 10 00 3E E5 41 04 45 3F 01 03 0A 48  // .-.H..>.A.E?...H
    C9E0: 46 0D 25 F9 5D 02 4A 25 F9 5D 04 44 82 01 43 87  // F.%.].J%.].D..C.
    C9F0: 03 07 25 F9 5D FD 4A 25 F9 5D 04 49 92 01 0D 65  // ..%.].J%.].I...e
    CA00: EC 5D 08 56 00 41 4A 65 08 5E 01 44 A2 01 5C 25  // .].V.AJe.^.D..\%
    CA10: 08 5E F8 04 51 02 4A 65 08 5E 01 44 B2 01 2D A5  // .^..Q.Je.^.D..-.
    CA20: 41 01 2D 0D 48 10 00 3E A5 41 04 45 A2 01 43 87  // A.-.H..>.A.E..C.
    CA30: 03 03 0A 46 48 56 08 48 20 25 00 02 03 22 48 40  // ...FHV.H %..."H@
    CA40: 0D 25 2D 5D 01 51 64 07 25 2D 5D FE 0D E5 2E 5D  // .%-].Qd.%-]....]
    CA50: 10 03 0A 48 46 0D A5 FB 5D 01 51 14 0D 25 FB 5D  // ...HF...].Q..%.]
    CA60: 01 51 14 43 87 03 07 A5 FB 5D FE 56 00 40 20 25  // .Q.C.....].V.@ %
    CA70: 00 02 03 0A 48 40 07 E5 2E 5D EF 43 87 03 08 A5  // ....H@...].C....
    CA80: 00 1B 66 1E 2D 0D 42 C0 02 03 21 43 00 03 A2 46  // ..f.-.B...!C...F
    CA90: 44 03 0C 46 02 00 4C A4 46 00 00 49 89 02 66 1E  // D..F..L.F..I..f.
    CAA0: 2D 0D 42 E8 00 3D 05 01 48 3F 00 00 47 74 02 66  // -.B..=..H?..Gt.f
    CAB0: 1E 2D 0D 42 50 02 3D 05 01 78 69 00 00 47 74 02  // .-.BP.=..xi..Gt.
    CAC0: 66 1E 2D 0D 42 88 02 3D 05 01 F0 D2 00 00 47 74  // f.-.B..=......Gt
    CAD0: 02 66 1E 2D 0D 42 20 01 03 21 43 00 03 A2 46 44  // .f.-.B ..!C...FD
    CAE0: 03 0C 46 02 00 4C A4 46 00 00 44 AC 02 2D 0D 42  // ..F..L.F..D..-.B
    CAF0: 06 00 56 20 41 3D A4 00 00 00 44 23 03 2D 25 41  // ..V A=....D#.-%A
    CB00: 01 3E 25 41 0A 44 AC 02 2D 0D 42 05 00 43 91 02  // .>%A.D..-.B..C..
    CB10: 66 07 2D 0C 42 06 00 03 21 43 00 03 A2 46 44 03  // f.-.B...!C...FD.
    CB20: 0C 46 02 00 4C A4 46 00 00 49 D0 02 2D 0C 42 04  // .F..L.F..I..-.B.
    CB30: 00 43 BB 02 2D 0D 42 06 00 3D 05 01 48 3F 00 00  // .C..-.B..=..H?..
    CB40: 47 08 03 03 0A 40 46 21 0D 40 0A 00 2D 0A 42 40  // G....@F!.@..-.B@
    CB50: 3D 05 01 78 69 00 00 47 08 03 2D 0A 42 40 3D 05  // =..xi..G..-.B@=.
    CB60: 01 F0 D2 00 00 47 08 03 2D 0A 42 40 3D A4 00 00  // .....G..-.B@=...
    CB70: 00 44 23 03 03 24 41 00 00 3E 25 41 18 44 23 03  // .D#..$A..>%A.D#.
    CB80: 2D 0A 42 46 43 08 03 03 04 40 01 00 03 65 41 08  // -.BFC....@...eA.
    CB90: 01 0A EB 5D 40 01 05 03 5E 88 88 01 00 01 F2 04  // ...]@...^.......
    CBA0: 5E 40 01 BA 0A 5E 40 01 BA 1A 5E 40 01 BA 2A 5E  // ^@...^@...^@..*^
    CBB0: 40 01 BA 3A 5E 40 01 25 09 5E 20 01 25 19 5E 20  // @..:^@.%.^ .%.^ 
    CBC0: 01 25 29 5E 20 01 25 39 5E 20 01 2A 09 5E 41 01  // .%)^ .%9^ .*.^A.
    CBD0: 2A 19 5E 41 01 2A 29 5E 41 01 2A 39 5E 41 3D 65  // *.^A.*)^A.*9^A=e
    CBE0: 00 0B 44 87 03 5C A2 F0 5D DF 41 3A 00 00 5B 00  // ..D..\..].A:..[.
    CBF0: 44 02 01 02 00 00 37 00 00 3D 0D 00 00 00 44 CE  // D.....7..=....D.
    CC00: 01 56 00 41 03 21 41 01 09 25 41 0F 15 0D 41 02  // .V.A.!A..%A...A.
    CC10: 03 0A 40 42 66 FF 2D 0D 42 34 02 2D 0A 42 41 03  // ..@Bf.-.B4.-.BA.
    CC20: 0C 48 02 00 0D A5 90 5D 01 54 08 90 5D 03 0C 48  // .H.....].T..]..H
    CC30: 00 00 03 F9 41 01 15 3D 41 04 5C BA 10 54 8F 41  // ....A..=A.\..T.A
    CC40: 03 0A 42 40 4A 25 10 54 01 49 81 00 0D 0D 10 54  // ..B@J%.T.I.....T
    CC50: 01 01 0D 25 10 54 10 4A 25 10 54 20 44 67 00 07  // ...%.T.J%.T Dg..
    CC60: 25 10 54 EF 4A 25 10 54 20 49 74 00 0D 25 13 54  // %.T.J%.T It..%.T
    CC70: 40 56 00 41 03 09 41 00 3B 02 41 03 3B 41 00 1B  // @V.A..A.;.A.;A..
    CC80: 25 41 04 01 A2 11 54 41 03 69 41 01 15 2D 41 04  // %A....TA.iA..-A.
    CC90: 01 2A 11 54 41 56 00 40 0F E5 40 80 03 73 40 00  // .*.TAV.@..@..s@.
    CCA0: 01 02 16 54 40 56 00 40 03 6B 40 00 01 02 16 54  // ...T@V.@.k@....T
    CCB0: 40 03 63 40 00 01 02 16 54 40 03 7B 40 00 09 65  // @.c@....T@.{@..e
    CCC0: 40 0F 01 02 16 54 40 3E 25 41 04 47 10 01 33 25  // @....T@>%A.G..3%
    CCD0: 41 04 2D 05 46 04 00 00 00 03 63 40 00 01 02 16  // A.-.F.....c@....
    CCE0: 54 40 03 6B 40 00 01 02 16 54 40 03 73 40 00 01  // T@.k@....T@.s@..
    CCF0: 02 16 54 40 03 7B 40 00 01 02 16 54 40 43 D7 00  // ..T@.{@....T@C..
    CD00: 0D 25 13 54 02 0D 25 11 54 01 03 29 40 01 21 25  // .%.T..%.T..)@.!%
    CD10: 40 0A 2D 25 40 32 4A 25 14 54 01 49 42 01 51 0A  // @.-%@2J%.T.IB.Q.
    CD20: 33 25 40 01 3E 25 40 00 49 26 01 02 65 01 01 43  // 3%@.>%@.I&..e..C
    CD30: CA 01 4A 05 14 54 F0 8F FF 00 44 54 01 02 65 01  // ..J..T....DT..e.
    CD40: 02 43 CA 01 01 05 16 54 01 00 00 80 03 00 40 16  // .C.....T......@.
    CD50: 54 02 6A 01 40 02 B8 01 14 54 08 A5 01 1F 3D A5  // T.j.@....T....=.
    CD60: 01 00 46 7C 01 02 65 01 03 43 CA 01 32 A5 01 01  // ..F|..e..C..2...
    CD70: 3D 8D 00 00 00 44 CA 01 3D A5 01 00 44 CA 01 03  // =....D..=...D...
    CD80: 31 41 01 03 19 40 00 56 18 40 3B 02 40 03 28 40  // 1A...@.V.@;.@.(@
    CD90: 16 54 03 68 40 16 54 03 A8 40 16 54 03 E8 40 16  // .T.h@.T..@.T..@.
    CDA0: 54 04 02 00 40 3E 25 41 04 47 CA 01 33 25 41 04  // T...@>%A.G..3%A.
    CDB0: 2D 05 46 04 00 00 00 43 9D 01 3A 00 00 5B 66 FF  // -.F....C..:..[f.
    CDC0: 2D 0D 42 34 02 03 0C 48 00 00 01 8D 18 54 18 00  // -.B4...H.....T..
    CDD0: 01 05 19 54 00 1C 02 00 01 05 1A 54 10 11 3D 12  // ...T.......T..=.
    CDE0: 2D 0D 42 04 00 2C 25 00 01 3D 25 00 04 49 D5 01  // -.B..,%..=%..I..
    CDF0: 56 08 48 03 25 41 10 0D 65 BF 5D 40 07 65 BF 5D  // V.H.%A..e.]@.e.]
    CE00: BF 33 25 41 01 3E 25 41 00 49 07 02 0D 25 63 5D  // .3%A.>%A.I...%c]
    CE10: 01 54 30 63 5D 0D 25 64 5D 01 54 30 64 5D 51 32  // .T0c].%d].T0d]Q2
    CE20: 5B 7A 10 00 00 00 00 00 1C 00 04 00 38 00 08 00  // [z..........8...
    CE30: 54 00 0C 00 5C 00 01 02 00 04 02 25 01 04 03 31  // T...\......%...1
    CE40: 41 00 09 0D 41 0F 00 15 0D 41 01 66 FF 2D 0D 42  // A...A....A.f.-.B
    CE50: 50 00 2D 0A 42 41 03 0C 48 00 00 07 A5 90 5D FE  // P.-.BA..H.....].
    CE60: 01 0D 90 5D 11 11 50 02 4A 0D 93 5D 01 00 49 41  // ...]..P.J..]..IA
    CE70: 00 02 25 01 13 54 08 90 5D 54 00 92 5D 3A 00 00  // ..%..T..]T..]:..
    CE80: 5B 7A 0C 00 00 00 04 00 08 00 0C 00 10 00 14 00  // [z..............
    CE90: 34 01 02 01 04 04 37 00 00 42 21 00 63 07 29 00  // 4.....7..B!.c.).
    CEA0: 63 03 53 00 63 02 65 00 63 04 83 00 63 0C 11 01  // c.S.c.e.c...c...
    CEB0: 63 0D 22 01 5A 5A 43 33 01 01 0D 45 5D 9F 0F 01  // c.".ZZC3...E]...
    CEC0: 25 46 5D 00 66 06 01 24 47 5D 30 00 01 4C 47 5D  // %F].f..$G]0..LG]
    CED0: 31 00 03 24 46 3B 00 3E 25 46 00 44 33 01 54 20  // 1..$F;.>%F.D3.T 
    CEE0: 47 5D 5B 0D E5 47 5D 01 5C 05 43 5D FF FF FF FD  // G][..G].\.C]....
    CEF0: 11 00 00 00 5B 0D E5 47 5D 01 4A 25 44 5D 02 44  // ....[..G].J%D].D
    CF00: 77 00 0D A5 43 5D 01 0D A5 43 5D 02 5C 25 43 5D  // w...C]...C].\%C]
    CF10: EF 01 5B 4A 05 53 00 00 02 00 00 44 93 00 0D 25  // ..[J.S.....D...%
    CF20: 4B 5D 01 3D 8D 00 00 00 44 10 01 03 05 46 00 36  // K].=....D....F.6
    CF30: 6E 01 56 00 41 03 19 41 00 21 05 41 FF 0F 00 00  // n.V.A..A.!.A....
    CF40: 27 02 46 40 3E 05 41 00 00 00 00 44 C3 00 2D 0D  // '.F@>.A....D..-.
    CF50: 40 01 00 01 8A 45 5D 40 56 00 41 03 19 41 00 21  // @....E]@V.A..A.!
    CF60: 02 40 41 27 02 46 40 01 A5 4A 5D 0C 01 0A 4A 5D  // .@A'.F@..J]...J]
    CF70: 40 15 05 40 04 56 00 41 03 29 41 00 2D 0D 41 01  // @..@.V.A.)A.-.A.
    CF80: 00 21 02 40 41 1B 05 40 08 01 0A 48 5D 40 0D E5  // .!.@A..@...H]@..
    CF90: 48 5D C0 07 25 4B 5D FE 4A 65 4B 5D 01 49 08 01  // H]..%K].JeK].I..
    CFA0: 5B 5C E5 43 5D FE 02 07 E5 47 5D FE 0D 25 43 5D  // [\.C]....G]..%C]
    CFB0: 11 5B 0D E5 47 5D 01 5C 05 43 5D EF FF FD FD 01  // .[..G].\.C].....
    CFC0: 00 00 00 5B CB 00 03 02 00 10 37 00 00 56 00 40  // ...[......7..V.@
    CFD0: 4A 25 00 EC 01 44 30 00 4A 25 05 EC 1E 49 30 00  // J%...D0.J%...I0.
    CFE0: 03 25 40 01 01 05 05 EC 03 00 00 00 4A 65 05 EC  // .%@.........Je..
    CFF0: 0F 49 28 00 3D 65 02 00 49 3B 00 2C 25 02 F4 3D  // .I(.=e..I;.,%..=
    D000: E5 02 00 49 46 00 2C A5 02 F4 3D 65 02 02 49 4D  // ...IF.,...=e..IM
    D010: 00 03 01 40 03 09 05 40 00 00 00 FC 3E 05 40 00  // ...@...@....>.@.
    D020: 00 00 D0 49 73 00 01 05 63 C0 00 00 00 40 55 00  // ...Is...c....@U.
    D030: 00 55 20 02 43 77 00 54 00 63 C0 01 01 64 C0 00  // .U .Cw.T.c...d..
    D040: 56 00 40 03 21 40 02 01 02 65 C0 40 01 01 66 C0  // V.@.!@...e.@..f.
    D050: 01 03 31 40 02 01 02 67 C0 40 01 01 E8 C0 03 3D  // ..1@...g.@.....=
    D060: 65 02 01 44 AB 00 3D E5 02 01 44 AB 00 51 02 4A  // e..D..=...D..Q.J
    D070: E5 A0 21 80 49 AB 00 3E 25 40 01 49 CA 00 01 05  // ..!.I..>%@.I....
    D080: 05 EC 01 00 00 00 4A 65 05 EC 0F 49 C2 00 5B 00  // ......Je...I..[.
    D090: 0D 02 02 01 00 00 37 00 00 3D 25 01 01 44 5D 00  // ......7..=%..D].
    D0A0: 3D 25 01 02 44 F1 00 3D 25 01 00 49 F6 01 3D 05  // =%..D..=%..I..=.
    D0B0: 00 00 00 00 00 49 39 00 3A 00 00 0D 25 A4 53 01  // .....I9.:...%.S.
    D0C0: 4A 65 A4 53 01 44 30 00 5B 54 20 A4 53 26 05 00  // Je.S.D0.[T .S&..
    D0D0: 64 00 00 00 02 02 01 40 02 05 00 04 00 00 00 52  // d......@.......R
    D0E0: 13 20 05 01 64 00 00 00 02 02 00 40 5B 02 01 02  // . ..d......@[...
    D0F0: 01 02 05 00 05 00 00 00 02 05 01 58 02 00 00 52  // ...........X...R
    D100: 13 20 05 01 40 42 0F 00 02 02 00 40 02 01 01 02  // . ..@B.....@....
    D110: 56 00 46 66 08 03 0C 46 0C 00 26 05 00 40 0D 03  // V.Ff...F..&..@..
    D120: 00 21 02 40 46 32 02 00 40 07 0D 18 01 F8 FE 66  // .!.@F2..@......f
    D130: 08 03 0C 41 0C 00 3E 0D 41 00 00 44 CD 00 01 A5  // ...A..>.A..D....
    D140: 15 01 01 01 05 13 01 C0 12 00 00 01 01 14 01 00  // ................
    D150: 0D 25 15 01 01 4A 65 15 01 02 44 C5 00 01 01 42  // .%...Je...D....B
    D160: 01 00 01 01 46 01 00 01 01 4A 01 00 01 01 4E 01  // ....F....J....N.
    D170: 00 3D 65 01 02 49 F0 00 5C 0D 18 01 F8 FF 01 01  // .=e..I..\.......
    D180: 5B 66 FF 2D 0D 42 FD 01 56 00 41 03 39 41 01 15  // [f.-.B..V.A.9A..
    D190: 25 41 02 2D 0A 42 41 3D 65 01 0B 49 64 01 20 05  // %A.-.BA=e..Id. .
    D1A0: 00 64 00 00 00 03 0C 48 02 00 03 00 41 40 01 0F  // .d.....H....A@..
    D1B0: 25 41 10 09 0D 41 DF FF 03 0C 48 00 00 4A 05 01  // %A...A....H..J..
    D1C0: 50 01 00 00 00 44 4D 01 03 0C 48 02 00 3C 02 41  // P....DM...H..<.A
    D1D0: 01 40 49 4D 01 3C 02 40 01 41 44 F6 01 03 0C 48  // .@IM.<.@.AD....H
    D1E0: 02 00 07 25 40 01 EF 01 02 41 01 40 01 0A 40 01  // ...%@....A.@..@.
    D1F0: 41 43 F6 01 56 00 40 03 8D 40 0C 00 3D 65 01 18  // AC..V.@..@..=e..
    D200: 44 87 01 03 8D 40 3E 00 3D 65 01 19 44 87 01 03  // D....@>.=e..D...
    D210: A9 40 01 33 A5 40 14 03 31 40 01 09 25 40 03 15  // .@.3.@..1@..%@..
    D220: 25 40 04 0F 0D 40 01 01 56 00 41 03 29 41 01 33  // %@...@..V.A.)A.3
    D230: 25 41 14 03 0C 48 00 00 4A 05 01 50 01 00 00 00  // %A...H..J..P....
    D240: 44 D4 01 03 0C 48 02 00 4A 25 40 01 10 49 D4 01  // D....H..J%@..I..
    D250: 3C 22 43 01 41 49 D4 01 03 1A 48 40 3C 0A 00 01  // <"C.AI....H@<...
    D260: 40 44 F6 01 03 1A 48 40 07 25 00 01 FE 03 0C 48  // @D....H@.%.....H
    D270: 02 00 01 22 43 01 41 07 0D 40 01 EF FF 03 1A 48  // ..."C.A..@.....H
    D280: 40 01 0A 00 01 40 3A 00 00 5B 7A 10 00 00 00 00  // @....@:..[z.....
    D290: 00 80 00 04 00 00 01 08 00 80 01 0C 00 00 F2 00  // ................
    D2A0: 01 01 04 00 37 00 00 56 00 00 66 1E 2D 0D 42 4C  // ....7..V..f.-.BL
    D2B0: 00 56 00 40 21 25 00 10 2D 0A 42 40 03 24 41 0C  // .V.@!%..-.B@.$A.
    D2C0: 00 4C 25 41 08 44 E6 00 02 25 00 64 02 0D 01 01  // .L%A.D...%.d....
    D2D0: 01 02 E4 01 06 00 0E E5 01 90 66 1E 03 24 41 08  // ..........f..$A.
    D2E0: 00 4C 25 41 20 49 64 00 43 64 00 2D 0D 42 35 02  // .L%A Id.Cd.-.B5.
    D2F0: 02 A4 01 00 00 03 64 00 01 00 2D 0D 42 03 00 43  // ......d...-.B..C
    D300: CC 00 3E 0D 00 00 00 44 87 00 3E 0D 00 01 00 44  // ..>....D..>....D
    D310: 9E 00 3E 0D 00 02 00 44 B5 00 3E 0D 00 03 00 44  // ..>....D..>....D
    D320: 4D 00 43 E6 00 2D 0D 42 E4 01 02 A4 01 00 00 03  // M.C..-.B........
    D330: 64 00 01 00 2D 0D 42 03 00 43 CC 00 2D 0D 42 FF  // d...-.B..C..-.B.
    D340: 01 02 A4 01 00 00 03 64 00 01 00 2D 0D 42 03 00  // .......d...-.B..
    D350: 43 CC 00 2D 0D 42 1A 02 02 A4 01 00 00 03 64 00  // C..-.B........d.
    D360: 01 00 2D 0D 42 03 00 43 CC 00 3E 65 00 00 44 E6  // ..-.B..C..>e..D.
    D370: 00 33 65 00 01 02 4C 00 00 00 52 36 2D 0D 42 02  // .3e...L...R6-.B.
    D380: 00 43 CC 00 2D 25 00 01 3E 25 00 04 45 0C 00 5B  // .C..-%..>%..E..[
    D390: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D3A0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D3B0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D3C0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D3D0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D3E0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D3F0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D400: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D410: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D420: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D430: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D440: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D450: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D460: FF FF FF FF FF FF FF FF 00 00 00 00 00 00 00 00  // ................
    D470: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D480: 00 00 00 00                                      // ....


WSMT
----
[000h 0000   4]                    Signature : "WSMT"    [Windows SMM Security Mitigations Table]
[004h 0004   4]                 Table Length : 00000028
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : AE
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "TP-R11  "
[018h 0024   4]                 Oem Revision : 00001100
[01Ch 0028   4]              Asl Compiler ID : "PTEC"
[020h 0032   4]        Asl Compiler Revision : 00000002

[024h 0036   4]             Protection Flags : 00000007
                          FIXED_COMM_BUFFERS : 1
           COMM_BUFFER_NESTED_PTR_PROTECTION : 1
                  SYSTEM_RESOURCE_PROTECTION : 1

Raw Table Data: Length 40 (0x28)

    0000: 57 53 4D 54 28 00 00 00 01 AE 4C 45 4E 4F 56 4F  // WSMT(.....LENOVO
    0010: 54 50 2D 52 31 31 20 20 00 11 00 00 50 54 45 43  // TP-R11  ....PTEC
    0020: 02 00 00 00 07 00 00 00                          // ........


