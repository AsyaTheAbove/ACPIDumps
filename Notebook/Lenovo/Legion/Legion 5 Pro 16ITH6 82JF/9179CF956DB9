
Intel ACPI Component Architecture
ACPI Binary Table Extraction Utility version 20210604
Copyright (c) 2000 - 2021 Intel Corporation


 Signature  Length    Version Oem       Oem         Oem         Compiler Compiler
                              Id        TableId     RevisionId  Name     Revision
 _________  __________  ____  ________  __________  __________  _______  __________

 01)  SSDT  0x00003300  0x02  "LENOVO"  "CB-01   "  0x00000001  "INTL"   0x20160422
 02)  MCFG  0x0000003C  0x01  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 03)  APIC  0x0000012C  0x04  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 04)  SSDT  0x0000AC0F  0x02  "LENOVO"  "CB-01   "  0x00000001  "INTL"   0x20160422
 05)  TPM2  0x0000004C  0x04  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 06)  SSDT  0x00000B70  0x02  "LENOVO"  "CB-01   "  0x00000001  "INTL"   0x20160422
 07)  NHLT  0x0000002D  0x00  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 08)  SSDT  0x000000F8  0x01  "LENOVO"  "CB-01   "  0x00000001  "INTL"   0x20160422
 09)  UEFI  0x00000236  0x01  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 10)  DSDT  0x0004F297  0x02  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 11)  SSDT  0x00000D8B  0x02  "LENOVO"  "CB-01   "  0x00000001  "INTL"   0x20160422
 12)  WSMT  0x00000028  0x01  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 13)  SSDT  0x0000005C  0x02  "LENOVO"  "CB-01   "  0x00000001  "INTL"   0x20160527
 14)  LPIT  0x000000CC  0x01  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 15)  SSDT  0x0000B47C  0x02  "INTEL "  "TcssSsdt"  0x00001000  "INTL"   0x20160422
 16)  DBG2  0x00000054  0x00  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 17)  SSDT  0x0000012A  0x02  "LENOVO"  "CB-01   "  0x00000001  "INTL"   0x20160422
 18)  SSDT  0x000034DA  0x02  "LENOVO"  "CB-01   "  0x00000001  "INTL"   0x20160422
 19)  DMAR  0x000000B8  0x02  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 20)  FACP  0x00000114  0x06  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 21)  FPDT  0x00000044  0x01  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 22)  SSDT  0x0000255C  0x02  "LENOVO"  "CB-01   "  0x00000001  "INTL"   0x20160422
 23)  PTDT  0x00000CFE  0x00  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 24)  MSDM  0x00000055  0x03  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 25)  SSDT  0x000001C6  0x02  "PmRef "  "Cpu0Psd "  0x00003000  "INTL"   0x20160422
 26)  SSDT  0x00000E3E  0x02  "LENOVO"  "CB-01   "  0x00000001  "INTL"   0x20160422
 27)  DBGP  0x00000034  0x01  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 28)  SSDT  0x000000F6  0x02  "LENOVO"  "CB-01   "  0x00000001  "INTL"   0x20160422
 29)  HPET  0x00000038  0x01  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 30)  SSDT  0x0000077B  0x02  "LENOVO"  "CB-01   "  0x00000001  "INTL"   0x20160422
 31)  FACS  0x00000040  0x02
 32)  BGRT  0x00000038  0x01  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 33)  SSDT  0x00009B1D  0x01  "LENOVO"  "CB-01   "  0x00000001  "INTL"   0x20160422
 34)  SSDT  0x0000028B  0x02  "PmRef "  "Cpu0Hwp "  0x00003000  "INTL"   0x20160422
 35)  SSDT  0x00000386  0x02  "PmRef "  "Cpu0Cst "  0x00003001  "INTL"   0x20160422
 36)  SSDT  0x0000048A  0x02  "PmRef "  "ApCst   "  0x00003000  "INTL"   0x20160422
 37)  SSDT  0x0000048A  0x02  "PmRef "  "ApHwp   "  0x00003000  "INTL"   0x20160422
 38)  SSDT  0x000008E7  0x02  "PmRef "  "ApIst   "  0x00003000  "INTL"   0x20160422
 39)  SSDT  0x0000051E  0x02  "PmRef "  "Cpu0Ist "  0x00003000  "INTL"   0x20160422
 40)  SSDT  0x000004D4  0x02  "PmRef "  "ApPsd   "  0x00003000  "INTL"   0x20160422

Found 40 ACPI tables in acpidump

APIC
----
[000h 0000   4]                    Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004   4]                 Table Length : 0000012C
[008h 0008   1]                     Revision : 04
[009h 0009   1]                     Checksum : 5D
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "CB-01   "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "ACPI"
[020h 0032   4]        Asl Compiler Revision : 00040000

[024h 0036   4]           Local Apic Address : FEE00000
[028h 0040   4]        Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044   1]                Subtable Type : 00 [Processor Local APIC]
[02Dh 0045   1]                       Length : 08
[02Eh 0046   1]                 Processor ID : 00
[02Fh 0047   1]                Local Apic ID : 00
[030h 0048   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[034h 0052   1]                Subtable Type : 00 [Processor Local APIC]
[035h 0053   1]                       Length : 08
[036h 0054   1]                 Processor ID : 01
[037h 0055   1]                Local Apic ID : 02
[038h 0056   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[03Ch 0060   1]                Subtable Type : 00 [Processor Local APIC]
[03Dh 0061   1]                       Length : 08
[03Eh 0062   1]                 Processor ID : 02
[03Fh 0063   1]                Local Apic ID : 04
[040h 0064   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[044h 0068   1]                Subtable Type : 00 [Processor Local APIC]
[045h 0069   1]                       Length : 08
[046h 0070   1]                 Processor ID : 03
[047h 0071   1]                Local Apic ID : 06
[048h 0072   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[04Ch 0076   1]                Subtable Type : 00 [Processor Local APIC]
[04Dh 0077   1]                       Length : 08
[04Eh 0078   1]                 Processor ID : 04
[04Fh 0079   1]                Local Apic ID : 08
[050h 0080   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[054h 0084   1]                Subtable Type : 00 [Processor Local APIC]
[055h 0085   1]                       Length : 08
[056h 0086   1]                 Processor ID : 05
[057h 0087   1]                Local Apic ID : 0A
[058h 0088   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[05Ch 0092   1]                Subtable Type : 00 [Processor Local APIC]
[05Dh 0093   1]                       Length : 08
[05Eh 0094   1]                 Processor ID : 06
[05Fh 0095   1]                Local Apic ID : 0C
[060h 0096   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[064h 0100   1]                Subtable Type : 00 [Processor Local APIC]
[065h 0101   1]                       Length : 08
[066h 0102   1]                 Processor ID : 07
[067h 0103   1]                Local Apic ID : 0E
[068h 0104   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[06Ch 0108   1]                Subtable Type : 00 [Processor Local APIC]
[06Dh 0109   1]                       Length : 08
[06Eh 0110   1]                 Processor ID : 08
[06Fh 0111   1]                Local Apic ID : 01
[070h 0112   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[074h 0116   1]                Subtable Type : 00 [Processor Local APIC]
[075h 0117   1]                       Length : 08
[076h 0118   1]                 Processor ID : 09
[077h 0119   1]                Local Apic ID : 03
[078h 0120   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[07Ch 0124   1]                Subtable Type : 00 [Processor Local APIC]
[07Dh 0125   1]                       Length : 08
[07Eh 0126   1]                 Processor ID : 0A
[07Fh 0127   1]                Local Apic ID : 05
[080h 0128   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[084h 0132   1]                Subtable Type : 00 [Processor Local APIC]
[085h 0133   1]                       Length : 08
[086h 0134   1]                 Processor ID : 0B
[087h 0135   1]                Local Apic ID : 07
[088h 0136   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[08Ch 0140   1]                Subtable Type : 00 [Processor Local APIC]
[08Dh 0141   1]                       Length : 08
[08Eh 0142   1]                 Processor ID : 0C
[08Fh 0143   1]                Local Apic ID : 09
[090h 0144   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[094h 0148   1]                Subtable Type : 00 [Processor Local APIC]
[095h 0149   1]                       Length : 08
[096h 0150   1]                 Processor ID : 0D
[097h 0151   1]                Local Apic ID : 0B
[098h 0152   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[09Ch 0156   1]                Subtable Type : 00 [Processor Local APIC]
[09Dh 0157   1]                       Length : 08
[09Eh 0158   1]                 Processor ID : 0E
[09Fh 0159   1]                Local Apic ID : 0D
[0A0h 0160   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0A4h 0164   1]                Subtable Type : 00 [Processor Local APIC]
[0A5h 0165   1]                       Length : 08
[0A6h 0166   1]                 Processor ID : 0F
[0A7h 0167   1]                Local Apic ID : 0F
[0A8h 0168   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0ACh 0172   1]                Subtable Type : 01 [I/O APIC]
[0ADh 0173   1]                       Length : 0C
[0AEh 0174   1]                  I/O Apic ID : 02
[0AFh 0175   1]                     Reserved : 00
[0B0h 0176   4]                      Address : FEC00000
[0B4h 0180   4]                    Interrupt : 00000000

[0B8h 0184   1]                Subtable Type : 02 [Interrupt Source Override]
[0B9h 0185   1]                       Length : 0A
[0BAh 0186   1]                          Bus : 00
[0BBh 0187   1]                       Source : 00
[0BCh 0188   4]                    Interrupt : 00000002
[0C0h 0192   2]        Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0

[0C2h 0194   1]                Subtable Type : 02 [Interrupt Source Override]
[0C3h 0195   1]                       Length : 0A
[0C4h 0196   1]                          Bus : 00
[0C5h 0197   1]                       Source : 09
[0C6h 0198   4]                    Interrupt : 00000009
[0CAh 0202   2]        Flags (decoded below) : 000D
                                    Polarity : 1
                                Trigger Mode : 3

[0CCh 0204   1]                Subtable Type : 04 [Local APIC NMI]
[0CDh 0205   1]                       Length : 06
[0CEh 0206   1]                 Processor ID : 01
[0CFh 0207   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0D1h 0209   1]         Interrupt Input LINT : 01

[0D2h 0210   1]                Subtable Type : 04 [Local APIC NMI]
[0D3h 0211   1]                       Length : 06
[0D4h 0212   1]                 Processor ID : 02
[0D5h 0213   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0D7h 0215   1]         Interrupt Input LINT : 01

[0D8h 0216   1]                Subtable Type : 04 [Local APIC NMI]
[0D9h 0217   1]                       Length : 06
[0DAh 0218   1]                 Processor ID : 03
[0DBh 0219   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0DDh 0221   1]         Interrupt Input LINT : 01

[0DEh 0222   1]                Subtable Type : 04 [Local APIC NMI]
[0DFh 0223   1]                       Length : 06
[0E0h 0224   1]                 Processor ID : 04
[0E1h 0225   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0E3h 0227   1]         Interrupt Input LINT : 01

[0E4h 0228   1]                Subtable Type : 04 [Local APIC NMI]
[0E5h 0229   1]                       Length : 06
[0E6h 0230   1]                 Processor ID : 05
[0E7h 0231   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0E9h 0233   1]         Interrupt Input LINT : 01

[0EAh 0234   1]                Subtable Type : 04 [Local APIC NMI]
[0EBh 0235   1]                       Length : 06
[0ECh 0236   1]                 Processor ID : 06
[0EDh 0237   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0EFh 0239   1]         Interrupt Input LINT : 01

[0F0h 0240   1]                Subtable Type : 04 [Local APIC NMI]
[0F1h 0241   1]                       Length : 06
[0F2h 0242   1]                 Processor ID : 07
[0F3h 0243   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0F5h 0245   1]         Interrupt Input LINT : 01

[0F6h 0246   1]                Subtable Type : 04 [Local APIC NMI]
[0F7h 0247   1]                       Length : 06
[0F8h 0248   1]                 Processor ID : 08
[0F9h 0249   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0FBh 0251   1]         Interrupt Input LINT : 01

[0FCh 0252   1]                Subtable Type : 04 [Local APIC NMI]
[0FDh 0253   1]                       Length : 06
[0FEh 0254   1]                 Processor ID : 09
[0FFh 0255   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[101h 0257   1]         Interrupt Input LINT : 01

[102h 0258   1]                Subtable Type : 04 [Local APIC NMI]
[103h 0259   1]                       Length : 06
[104h 0260   1]                 Processor ID : 0A
[105h 0261   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[107h 0263   1]         Interrupt Input LINT : 01

[108h 0264   1]                Subtable Type : 04 [Local APIC NMI]
[109h 0265   1]                       Length : 06
[10Ah 0266   1]                 Processor ID : 0B
[10Bh 0267   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[10Dh 0269   1]         Interrupt Input LINT : 01

[10Eh 0270   1]                Subtable Type : 04 [Local APIC NMI]
[10Fh 0271   1]                       Length : 06
[110h 0272   1]                 Processor ID : 0C
[111h 0273   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[113h 0275   1]         Interrupt Input LINT : 01

[114h 0276   1]                Subtable Type : 04 [Local APIC NMI]
[115h 0277   1]                       Length : 06
[116h 0278   1]                 Processor ID : 0D
[117h 0279   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[119h 0281   1]         Interrupt Input LINT : 01

[11Ah 0282   1]                Subtable Type : 04 [Local APIC NMI]
[11Bh 0283   1]                       Length : 06
[11Ch 0284   1]                 Processor ID : 0E
[11Dh 0285   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[11Fh 0287   1]         Interrupt Input LINT : 01

[120h 0288   1]                Subtable Type : 04 [Local APIC NMI]
[121h 0289   1]                       Length : 06
[122h 0290   1]                 Processor ID : 0F
[123h 0291   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[125h 0293   1]         Interrupt Input LINT : 01

[126h 0294   1]                Subtable Type : 04 [Local APIC NMI]
[127h 0295   1]                       Length : 06
[128h 0296   1]                 Processor ID : 10
[129h 0297   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[12Bh 0299   1]         Interrupt Input LINT : 01

Raw Table Data: Length 300 (0x12C)

    0000: 41 50 49 43 2C 01 00 00 04 5D 4C 45 4E 4F 56 4F  // APIC,....]LENOVO
    0010: 43 42 2D 30 31 20 20 20 01 00 00 00 41 43 50 49  // CB-01   ....ACPI
    0020: 00 00 04 00 00 00 E0 FE 01 00 00 00 00 08 00 00  // ................
    0030: 01 00 00 00 00 08 01 02 01 00 00 00 00 08 02 04  // ................
    0040: 01 00 00 00 00 08 03 06 01 00 00 00 00 08 04 08  // ................
    0050: 01 00 00 00 00 08 05 0A 01 00 00 00 00 08 06 0C  // ................
    0060: 01 00 00 00 00 08 07 0E 01 00 00 00 00 08 08 01  // ................
    0070: 01 00 00 00 00 08 09 03 01 00 00 00 00 08 0A 05  // ................
    0080: 01 00 00 00 00 08 0B 07 01 00 00 00 00 08 0C 09  // ................
    0090: 01 00 00 00 00 08 0D 0B 01 00 00 00 00 08 0E 0D  // ................
    00A0: 01 00 00 00 00 08 0F 0F 01 00 00 00 01 0C 02 00  // ................
    00B0: 00 00 C0 FE 00 00 00 00 02 0A 00 00 02 00 00 00  // ................
    00C0: 00 00 02 0A 00 09 09 00 00 00 0D 00 04 06 01 05  // ................
    00D0: 00 01 04 06 02 05 00 01 04 06 03 05 00 01 04 06  // ................
    00E0: 04 05 00 01 04 06 05 05 00 01 04 06 06 05 00 01  // ................
    00F0: 04 06 07 05 00 01 04 06 08 05 00 01 04 06 09 05  // ................
    0100: 00 01 04 06 0A 05 00 01 04 06 0B 05 00 01 04 06  // ................
    0110: 0C 05 00 01 04 06 0D 05 00 01 04 06 0E 05 00 01  // ................
    0120: 04 06 0F 05 00 01 04 06 10 05 00 01              // ............


BGRT
----
[000h 0000   4]                    Signature : "BGRT"    [Boot Graphics Resource Table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 62
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "CB-01   "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "ACPI"
[020h 0032   4]        Asl Compiler Revision : 00040000

[024h 0036   2]                      Version : 0001
[026h 0038   1]       Status (decoded below) : 00
                                   Displayed : 0
                          Orientation Offset : 0
[027h 0039   1]                   Image Type : 00
[028h 0040   8]                Image Address : 000000003F276000
[030h 0048   4]                Image OffsetX : 000003B1
[034h 0052   4]                Image OffsetY : 00000251

Raw Table Data: Length 56 (0x38)

    0000: 42 47 52 54 38 00 00 00 01 62 4C 45 4E 4F 56 4F  // BGRT8....bLENOVO
    0010: 43 42 2D 30 31 20 20 20 01 00 00 00 41 43 50 49  // CB-01   ....ACPI
    0020: 00 00 04 00 01 00 00 00 00 60 27 3F 00 00 00 00  // .........`'?....
    0030: B1 03 00 00 51 02 00 00                          // ....Q...


DBG2
----
[000h 0000   4]                    Signature : "DBG2"    [Debug Port Table type 2]
[004h 0004   4]                 Table Length : 00000054
[008h 0008   1]                     Revision : 00
[009h 0009   1]                     Checksum : BC
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "CB-01   "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "ACPI"
[020h 0032   4]        Asl Compiler Revision : 00040000

[024h 0036   4]                  Info Offset : 0000002C
[028h 0040   4]                   Info Count : 00000001

[02Ch 0044   1]                     Revision : 00
[02Dh 0045   2]                       Length : 0028
[02Fh 0047   1]               Register Count : 01
[030h 0048   2]              Namepath Length : 0002
[032h 0050   2]              Namepath Offset : 0026
[034h 0052   2]              OEM Data Length : 0000 [Optional field not present]
[036h 0054   2]              OEM Data Offset : 0000 [Optional field not present]
[038h 0056   2]                    Port Type : 8000
[03Ah 0058   2]                 Port Subtype : 0001
[03Ch 0060   2]                     Reserved : 0000
[03Eh 0062   2]          Base Address Offset : 0016
[040h 0064   2]          Address Size Offset : 0022

[042h 0066  12]        Base Address Register : [Generic Address Structure]
[042h 0066   1]                     Space ID : 01 [SystemIO]
[043h 0067   1]                    Bit Width : 08
[044h 0068   1]                   Bit Offset : 00
[045h 0069   1]         Encoded Access Width : 00 [Undefined/Legacy]
[046h 0070   8]                      Address : 00000000000003F8

[04Eh 0078   4]                 Address Size : 00000020

[052h 0082   2]                     Namepath : "."

Raw Table Data: Length 84 (0x54)

    0000: 44 42 47 32 54 00 00 00 00 BC 4C 45 4E 4F 56 4F  // DBG2T.....LENOVO
    0010: 43 42 2D 30 31 20 20 20 01 00 00 00 41 43 50 49  // CB-01   ....ACPI
    0020: 00 00 04 00 2C 00 00 00 01 00 00 00 00 28 00 01  // ....,........(..
    0030: 02 00 26 00 00 00 00 00 00 80 01 00 00 00 16 00  // ..&.............
    0040: 22 00 01 08 00 00 F8 03 00 00 00 00 00 00 20 00  // "............. .
    0050: 00 00 2E 00                                      // ....


DBGP
----
[000h 0000   4]                    Signature : "DBGP"    [Debug Port Table]
[004h 0004   4]                 Table Length : 00000034
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 72
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "CB-01   "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "ACPI"
[020h 0032   4]        Asl Compiler Revision : 00040000

[024h 0036   1]               Interface Type : 00
[025h 0037   3]                     Reserved : 8948FF

[028h 0040  12]          Debug Port Register : [Generic Address Structure]
[028h 0040   1]                     Space ID : 01 [SystemIO]
[029h 0041   1]                    Bit Width : 08
[02Ah 0042   1]                   Bit Offset : 00
[02Bh 0043   1]         Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044   8]                      Address : 00000000000003F8


Raw Table Data: Length 52 (0x34)

    0000: 44 42 47 50 34 00 00 00 01 72 4C 45 4E 4F 56 4F  // DBGP4....rLENOVO
    0010: 43 42 2D 30 31 20 20 20 01 00 00 00 41 43 50 49  // CB-01   ....ACPI
    0020: 00 00 04 00 00 FF 48 89 01 08 00 00 F8 03 00 00  // ......H.........
    0030: 00 00 00 00                                      // ....


DMAR
----
[000h 0000   4]                    Signature : "DMAR"    [DMA Remapping Table]
[004h 0004   4]                 Table Length : 000000B8
[008h 0008   1]                     Revision : 02
[009h 0009   1]                     Checksum : 86
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "CB-01   "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "ACPI"
[020h 0032   4]        Asl Compiler Revision : 00040000

[024h 0036   1]           Host Address Width : 26
[025h 0037   1]                        Flags : 05
[026h 0038  10]                     Reserved : 00 00 00 00 00 00 00 00 00 00

[030h 0048   2]                Subtable Type : 0000 [Hardware Unit Definition]
[032h 0050   2]                       Length : 0018

[034h 0052   1]                        Flags : 00
[035h 0053   1]                     Reserved : 00
[036h 0054   2]           PCI Segment Number : 0000
[038h 0056   8]        Register Base Address : 00000000FED90000

[040h 0064   1]            Device Scope Type : 01 [PCI Endpoint Device]
[041h 0065   1]                 Entry Length : 08
[042h 0066   2]                     Reserved : 0000
[044h 0068   1]               Enumeration ID : 00
[045h 0069   1]               PCI Bus Number : 00

[046h 0070   2]                     PCI Path : 02,00


[048h 0072   2]                Subtable Type : 0000 [Hardware Unit Definition]
[04Ah 0074   2]                       Length : 0018

[04Ch 0076   1]                        Flags : 00
[04Dh 0077   1]                     Reserved : 00
[04Eh 0078   2]           PCI Segment Number : 0000
[050h 0080   8]        Register Base Address : 00000000FED84000

[058h 0088   1]            Device Scope Type : 02 [PCI Bridge Device]
[059h 0089   1]                 Entry Length : 08
[05Ah 0090   2]                     Reserved : 0000
[05Ch 0092   1]               Enumeration ID : 00
[05Dh 0093   1]               PCI Bus Number : 00

[05Eh 0094   2]                     PCI Path : 07,00


[060h 0096   2]                Subtable Type : 0000 [Hardware Unit Definition]
[062h 0098   2]                       Length : 0018

[064h 0100   1]                        Flags : 00
[065h 0101   1]                     Reserved : 00
[066h 0102   2]           PCI Segment Number : 0000
[068h 0104   8]        Register Base Address : 00000000FED86000

[070h 0112   1]            Device Scope Type : 02 [PCI Bridge Device]
[071h 0113   1]                 Entry Length : 08
[072h 0114   2]                     Reserved : 0000
[074h 0116   1]               Enumeration ID : 00
[075h 0117   1]               PCI Bus Number : 00

[076h 0118   2]                     PCI Path : 07,02


[078h 0120   2]                Subtable Type : 0000 [Hardware Unit Definition]
[07Ah 0122   2]                       Length : 0020

[07Ch 0124   1]                        Flags : 01
[07Dh 0125   1]                     Reserved : 00
[07Eh 0126   2]           PCI Segment Number : 0000
[080h 0128   8]        Register Base Address : 00000000FED91000

[088h 0136   1]            Device Scope Type : 03 [IOAPIC Device]
[089h 0137   1]                 Entry Length : 08
[08Ah 0138   2]                     Reserved : 0000
[08Ch 0140   1]               Enumeration ID : 02
[08Dh 0141   1]               PCI Bus Number : 00

[08Eh 0142   2]                     PCI Path : 1E,07


[090h 0144   1]            Device Scope Type : 04 [Message-capable HPET Device]
[091h 0145   1]                 Entry Length : 08
[092h 0146   2]                     Reserved : 0000
[094h 0148   1]               Enumeration ID : 00
[095h 0149   1]               PCI Bus Number : 00

[096h 0150   2]                     PCI Path : 1E,06


[098h 0152   2]                Subtable Type : 0001 [Reserved Memory Region]
[09Ah 0154   2]                       Length : 0020

[09Ch 0156   2]                     Reserved : 0000
[09Eh 0158   2]           PCI Segment Number : 0000
[0A0h 0160   8]                 Base Address : 000000004C000000
[0A8h 0168   8]          End Address (limit) : 00000000503FFFFF

[0B0h 0176   1]            Device Scope Type : 01 [PCI Endpoint Device]
[0B1h 0177   1]                 Entry Length : 08
[0B2h 0178   2]                     Reserved : 0000
[0B4h 0180   1]               Enumeration ID : 00
[0B5h 0181   1]               PCI Bus Number : 00

[0B6h 0182   2]                     PCI Path : 02,00


Raw Table Data: Length 184 (0xB8)

    0000: 44 4D 41 52 B8 00 00 00 02 86 4C 45 4E 4F 56 4F  // DMAR......LENOVO
    0010: 43 42 2D 30 31 20 20 20 01 00 00 00 41 43 50 49  // CB-01   ....ACPI
    0020: 00 00 04 00 26 05 00 00 00 00 00 00 00 00 00 00  // ....&...........
    0030: 00 00 18 00 00 00 00 00 00 00 D9 FE 00 00 00 00  // ................
    0040: 01 08 00 00 00 00 02 00 00 00 18 00 00 00 00 00  // ................
    0050: 00 40 D8 FE 00 00 00 00 02 08 00 00 00 00 07 00  // .@..............
    0060: 00 00 18 00 00 00 00 00 00 60 D8 FE 00 00 00 00  // .........`......
    0070: 02 08 00 00 00 00 07 02 00 00 20 00 01 00 00 00  // .......... .....
    0080: 00 10 D9 FE 00 00 00 00 03 08 00 00 02 00 1E 07  // ................
    0090: 04 08 00 00 00 00 1E 06 01 00 20 00 00 00 00 00  // .......... .....
    00A0: 00 00 00 4C 00 00 00 00 FF FF 3F 50 00 00 00 00  // ...L......?P....
    00B0: 01 08 00 00 00 00 02 00                          // ........


DSDT
----
DefinitionBlock ("", "DSDT", 2, "LENOVO", "CB-01   ", 0x00000001)
{
    External (_GPE.AL6F, MethodObj)    // 0 Arguments
    External (_GPE.P0L6, MethodObj)    // 0 Arguments
    External (_GPE.P1L6, MethodObj)    // 0 Arguments
    External (_GPE.P2L6, MethodObj)    // 0 Arguments
    External (_GPE.P3L6, MethodObj)    // 0 Arguments
    External (_SB_.AWAC, DeviceObj)
    External (_SB_.AWAC.WAST, IntObj)
    External (_SB_.BGIA, UnknownObj)
    External (_SB_.BGMA, UnknownObj)
    External (_SB_.BGMS, UnknownObj)
    External (_SB_.CFGD, UnknownObj)
    External (_SB_.CPPC, IntObj)
    External (_SB_.DSAE, UnknownObj)
    External (_SB_.DTSE, UnknownObj)
    External (_SB_.DTSF, UnknownObj)
    External (_SB_.DTSI, IntObj)
    External (_SB_.ELNG, UnknownObj)
    External (_SB_.EMNA, UnknownObj)
    External (_SB_.EPCS, UnknownObj)
    External (_SB_.GGOV, MethodObj)    // 1 Arguments
    External (_SB_.IETM, DeviceObj)
    External (_SB_.LID0, DeviceObj)
    External (_SB_.NPCF, DeviceObj)
    External (_SB_.NVDR._DSM, MethodObj)    // 4 Arguments
    External (_SB_.NVDR.NVD1._DSM, MethodObj)    // 4 Arguments
    External (_SB_.NVDR.NVD1._LSI, MethodObj)    // 0 Arguments
    External (_SB_.NVDR.NVD1._LSR, MethodObj)    // 2 Arguments
    External (_SB_.NVDR.NVD1._LSW, MethodObj)    // 3 Arguments
    External (_SB_.NVDR.RSTP, MethodObj)    // 0 Arguments
    External (_SB_.PC00.DPOF, UnknownObj)
    External (_SB_.PC00.GFX0.ALSI, UnknownObj)
    External (_SB_.PC00.GFX0.CBLV, UnknownObj)
    External (_SB_.PC00.GFX0.CDCK, UnknownObj)
    External (_SB_.PC00.GFX0.CLID, UnknownObj)
    External (_SB_.PC00.GFX0.DD1F, DeviceObj)
    External (_SB_.PC00.GFX0.DD2F, DeviceObj)
    External (_SB_.PC00.GFX0.GLID, MethodObj)    // 1 Arguments
    External (_SB_.PC00.GFX0.GSCI, MethodObj)    // 0 Arguments
    External (_SB_.PC00.GFX0.GSSE, UnknownObj)
    External (_SB_.PC00.GFX0.IUEH, MethodObj)    // 1 Arguments
    External (_SB_.PC00.GFX0.STAT, UnknownObj)
    External (_SB_.PC00.GFX0.TCHE, UnknownObj)
    External (_SB_.PC00.GMHB, MethodObj)    // 0 Arguments
    External (_SB_.PC00.HDAS.PPMS, MethodObj)    // 1 Arguments
    External (_SB_.PC00.HDAS.PS0X, MethodObj)    // 0 Arguments
    External (_SB_.PC00.HDAS.PS3X, MethodObj)    // 0 Arguments
    External (_SB_.PC00.HIDW, MethodObj)    // 4 Arguments
    External (_SB_.PC00.HIWC, MethodObj)    // 1 Arguments
    External (_SB_.PC00.LPCB.H_EC.BAT0, DeviceObj)
    External (_SB_.PC00.LPCB.H_EC.BAT1, DeviceObj)
    External (_SB_.PC00.LPCB.H_EC.BAT2, DeviceObj)
    External (_SB_.PC00.LPCB.H_EC.BNUM, IntObj)
    External (_SB_.PC00.LPCB.H_EC.CFAN, FieldUnitObj)
    External (_SB_.PC00.LPCB.H_EC.LID0, DeviceObj)
    External (_SB_.PC00.LPCB.H_EC.LSTE, FieldUnitObj)
    External (_SB_.PC00.LPCB.H_EC.ONTM, IntObj)
    External (_SB_.PC00.LPCB.H_EC.RPWR, FieldUnitObj)
    External (_SB_.PC00.LPCB.H_EC.VPWR, FieldUnitObj)
    External (_SB_.PC00.PAUD.PUAM, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PC2M, MethodObj)    // 1 Arguments
    External (_SB_.PC00.PEG0, DeviceObj)
    External (_SB_.PC00.PEG0.HPEV, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG0.HPME, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG0.PEGP.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG0.PEGP.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG0.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG0.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG1, DeviceObj)
    External (_SB_.PC00.PEG1.HPEV, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG1.HPME, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG1.PEGP.EDP0, UnknownObj)
    External (_SB_.PC00.PEG1.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG1.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG2, DeviceObj)
    External (_SB_.PC00.PEG2.HPEV, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG2.HPME, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG2.PEGP.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG2.PEGP.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG2.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG2.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG3, DeviceObj)
    External (_SB_.PC00.PEG3.HPEV, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG3.HPME, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG3.PEGP.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG3.PEGP.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG3.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG3.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PTHT.THEN, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP01.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP01.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP01.PPRW, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP02.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP02.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP02.PPRW, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP03.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP03.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP03.PPRW, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP04.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP04.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP04.PPRW, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP05.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP05.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP05.PPRW, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP06.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP06.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP06.PPRW, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP07.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP07.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP07.PPRW, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP08.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP08.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP08.PPRW, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP09.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP09.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP09.PPRW, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP10.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP10.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP10.PPRW, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP11.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP11.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP11.PPRW, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP12.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP12.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP12.PPRW, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP13.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP13.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP13.PPRW, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP14.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP14.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP14.PPRW, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP15.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP15.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP15.PPRW, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP16.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP16.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP16.PPRW, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP17.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP17.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP17.PPRW, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP18.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP18.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP18.PPRW, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP19.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP19.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP19.PPRW, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP20.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP20.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP20.PPRW, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP21.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP21.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP21.PPRW, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP22.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP22.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP22.PPRW, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP23.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP23.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP23.PPRW, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP24.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP24.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PC00.RP24.PPRW, MethodObj)    // 0 Arguments
    External (_SB_.PC00.SAT0.PRT0.SPOF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.SAT0.PRT0.SPON, MethodObj)    // 0 Arguments
    External (_SB_.PC00.SAT0.PRT1.SPOF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.SAT0.PRT1.SPON, MethodObj)    // 0 Arguments
    External (_SB_.PC00.SAT0.PRT2.SPOF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.SAT0.PRT2.SPON, MethodObj)    // 0 Arguments
    External (_SB_.PC00.SAT0.PRT3.SPOF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.SAT0.PRT3.SPON, MethodObj)    // 0 Arguments
    External (_SB_.PC00.SAT0.PRT4.SPOF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.SAT0.PRT4.SPON, MethodObj)    // 0 Arguments
    External (_SB_.PC00.SAT0.PRT5.SPOF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.SAT0.PRT5.SPON, MethodObj)    // 0 Arguments
    External (_SB_.PC00.SAT0.PRT6.SPOF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.SAT0.PRT6.SPON, MethodObj)    // 0 Arguments
    External (_SB_.PC00.SAT0.PRT7.SPOF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.SAT0.PRT7.SPON, MethodObj)    // 0 Arguments
    External (_SB_.PC00.SAT0.SATC, MethodObj)    // 1 Arguments
    External (_SB_.PC00.SAT0.SATD, MethodObj)    // 4 Arguments
    External (_SB_.PC00.TCON, MethodObj)    // 0 Arguments
    External (_SB_.PC00.TDM0, UnknownObj)
    External (_SB_.PC00.TDM1, UnknownObj)
    External (_SB_.PC00.TG0N, MethodObj)    // 0 Arguments
    External (_SB_.PC00.TG1N, MethodObj)    // 0 Arguments
    External (_SB_.PC00.THC0, DeviceObj)
    External (_SB_.PC00.THC1, DeviceObj)
    External (_SB_.PC00.TRP0, DeviceObj)
    External (_SB_.PC00.TRP0.HPEV, MethodObj)    // 0 Arguments
    External (_SB_.PC00.TRP0.HPEX, IntObj)
    External (_SB_.PC00.TRP0.HPME, MethodObj)    // 0 Arguments
    External (_SB_.PC00.TRP0.HPSX, IntObj)
    External (_SB_.PC00.TRP0.PMEX, IntObj)
    External (_SB_.PC00.TRP0.PMSX, IntObj)
    External (_SB_.PC00.TRP1, DeviceObj)
    External (_SB_.PC00.TRP1.HPEV, MethodObj)    // 0 Arguments
    External (_SB_.PC00.TRP1.HPEX, IntObj)
    External (_SB_.PC00.TRP1.HPME, MethodObj)    // 0 Arguments
    External (_SB_.PC00.TRP1.HPSX, IntObj)
    External (_SB_.PC00.TRP1.PMEX, IntObj)
    External (_SB_.PC00.TRP1.PMSX, IntObj)
    External (_SB_.PC00.TRP2, DeviceObj)
    External (_SB_.PC00.TRP2.HPEV, MethodObj)    // 0 Arguments
    External (_SB_.PC00.TRP2.HPEX, IntObj)
    External (_SB_.PC00.TRP2.HPME, MethodObj)    // 0 Arguments
    External (_SB_.PC00.TRP2.HPSX, IntObj)
    External (_SB_.PC00.TRP2.PMEX, IntObj)
    External (_SB_.PC00.TRP2.PMSX, IntObj)
    External (_SB_.PC00.TRP3, DeviceObj)
    External (_SB_.PC00.TRP3.HPEV, MethodObj)    // 0 Arguments
    External (_SB_.PC00.TRP3.HPEX, IntObj)
    External (_SB_.PC00.TRP3.HPME, MethodObj)    // 0 Arguments
    External (_SB_.PC00.TRP3.HPSX, IntObj)
    External (_SB_.PC00.TRP3.PMEX, IntObj)
    External (_SB_.PC00.TRP3.PMSX, IntObj)
    External (_SB_.PC00.TXHC, DeviceObj)
    External (_SB_.PC00.XHCI.DUAM, MethodObj)    // 0 Arguments
    External (_SB_.PC00.XHCI.PS0X, MethodObj)    // 0 Arguments
    External (_SB_.PC00.XHCI.PS3X, MethodObj)    // 0 Arguments
    External (_SB_.PC00.XHCI.RHUB.INIR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.XHCI.RHUB.PS0X, MethodObj)    // 0 Arguments
    External (_SB_.PC00.XHCI.RHUB.PS2X, MethodObj)    // 0 Arguments
    External (_SB_.PC00.XHCI.RHUB.PS3X, MethodObj)    // 0 Arguments
    External (_SB_.PC01, DeviceObj)
    External (_SB_.PC01.TRP0, DeviceObj)
    External (_SB_.PC01.TRP0.HPEV, MethodObj)    // 0 Arguments
    External (_SB_.PC01.TRP0.HPEX, IntObj)
    External (_SB_.PC01.TRP0.HPME, MethodObj)    // 0 Arguments
    External (_SB_.PC01.TRP0.HPSX, IntObj)
    External (_SB_.PC01.TRP0.PMEX, IntObj)
    External (_SB_.PC01.TRP0.PMSX, IntObj)
    External (_SB_.PC01.TRP1, DeviceObj)
    External (_SB_.PC01.TRP1.HPEV, MethodObj)    // 0 Arguments
    External (_SB_.PC01.TRP1.HPEX, IntObj)
    External (_SB_.PC01.TRP1.HPME, MethodObj)    // 0 Arguments
    External (_SB_.PC01.TRP1.HPSX, IntObj)
    External (_SB_.PC01.TRP1.PMEX, IntObj)
    External (_SB_.PC01.TRP1.PMSX, IntObj)
    External (_SB_.PC01.TRP2, DeviceObj)
    External (_SB_.PC01.TRP2.HPEV, MethodObj)    // 0 Arguments
    External (_SB_.PC01.TRP2.HPEX, IntObj)
    External (_SB_.PC01.TRP2.HPME, MethodObj)    // 0 Arguments
    External (_SB_.PC01.TRP2.HPSX, IntObj)
    External (_SB_.PC01.TRP2.PMEX, IntObj)
    External (_SB_.PC01.TRP2.PMSX, IntObj)
    External (_SB_.PC01.TRP3, DeviceObj)
    External (_SB_.PC01.TRP3.HPEV, MethodObj)    // 0 Arguments
    External (_SB_.PC01.TRP3.HPEX, IntObj)
    External (_SB_.PC01.TRP3.HPME, MethodObj)    // 0 Arguments
    External (_SB_.PC01.TRP3.HPSX, IntObj)
    External (_SB_.PC01.TRP3.PMEX, IntObj)
    External (_SB_.PC01.TRP3.PMSX, IntObj)
    External (_SB_.PCI0.GFX0.CLID, UnknownObj)
    External (_SB_.PDTS, UnknownObj)
    External (_SB_.PKGA, UnknownObj)
    External (_SB_.PR00.LPSS, PkgObj)
    External (_SB_.PR00.TPSS, PkgObj)
    External (_SB_.PTHH.THEN, MethodObj)    // 0 Arguments
    External (_SB_.PWRB, DeviceObj)
    External (_SB_.SGOV, MethodObj)    // 2 Arguments
    External (_SB_.TCWK, MethodObj)    // 1 Arguments
    External (_SB_.TPM_.PTS_, MethodObj)    // 1 Arguments
    External (_SB_.TRPD, UnknownObj)
    External (_SB_.TRPF, UnknownObj)
    External (_SB_.UBTC, UnknownObj)
    External (_SB_.UBTC.ECRD, MethodObj)    // 0 Arguments
    External (_TZ_.ETMD, IntObj)
    External (_TZ_.TZ00, DeviceObj)
    External (BGIA, IntObj)
    External (BGMA, IntObj)
    External (BGMS, IntObj)
    External (CNFG, IntObj)
    External (D1F0, UnknownObj)
    External (D1F1, UnknownObj)
    External (D1F2, UnknownObj)
    External (D6F0, UnknownObj)
    External (DIDX, UnknownObj)    // Conflicts with a later declaration
    External (DIDY, UnknownObj)    // Conflicts with a later declaration
    External (DME0, UnknownObj)    // Conflicts with a later declaration
    External (DME1, UnknownObj)    // Conflicts with a later declaration
    External (DPMS, IntObj)
    External (DUWS, UnknownObj)    // Conflicts with a later declaration
    External (EC0_.SEN1, DeviceObj)
    External (EC0_.SEN2, DeviceObj)
    External (EC0_.SEN3, DeviceObj)
    External (EC0_.SEN4, DeviceObj)
    External (EC0_.SEN5, DeviceObj)
    External (EC0_.SEN6, DeviceObj)
    External (EC0_.SEN7, DeviceObj)
    External (EC0_.SEN8, DeviceObj)
    External (ELNG, IntObj)
    External (EMNA, IntObj)
    External (GFX0, DeviceObj)
    External (HGMD, UnknownObj)    // Conflicts with a later declaration
    External (INSM, UnknownObj)    // Conflicts with a later declaration
    External (ITRT, UnknownObj)
    External (ITSP, UnknownObj)
    External (LSKD, UnknownObj)    // Conflicts with a later declaration
    External (M32B, UnknownObj)    // Conflicts with a later declaration
    External (M32L, UnknownObj)    // Conflicts with a later declaration
    External (M64B, UnknownObj)    // Conflicts with a later declaration
    External (M64L, UnknownObj)    // Conflicts with a later declaration
    External (P0WK, UnknownObj)    // Conflicts with a later declaration
    External (P1GP, UnknownObj)    // Conflicts with a later declaration
    External (P1WK, UnknownObj)    // Conflicts with a later declaration
    External (P2GP, UnknownObj)    // Conflicts with a later declaration
    External (P2WK, UnknownObj)    // Conflicts with a later declaration
    External (P3GP, UnknownObj)    // Conflicts with a later declaration
    External (P3WK, UnknownObj)    // Conflicts with a later declaration
    External (PF00, IntObj)
    External (PF01, UnknownObj)
    External (PF02, UnknownObj)
    External (PF03, UnknownObj)
    External (PF04, UnknownObj)
    External (PF05, UnknownObj)
    External (PF06, UnknownObj)
    External (PF07, UnknownObj)
    External (PF08, UnknownObj)
    External (PF09, UnknownObj)
    External (PF10, UnknownObj)
    External (PF11, UnknownObj)
    External (PF12, UnknownObj)
    External (PF13, UnknownObj)
    External (PF14, UnknownObj)
    External (PF15, UnknownObj)
    External (PG0E, UnknownObj)    // Conflicts with a later declaration
    External (PG1E, UnknownObj)    // Conflicts with a later declaration
    External (PG2E, UnknownObj)    // Conflicts with a later declaration
    External (PG3E, UnknownObj)    // Conflicts with a later declaration
    External (PMRL, IntObj)
    External (PMSA, IntObj)
    External (PTHM, IntObj)
    External (RDLY, UnknownObj)
    External (RTD3, IntObj)
    External (SEN1, UnknownObj)
    External (SEN2, UnknownObj)
    External (SEN3, UnknownObj)
    External (SEN4, UnknownObj)
    External (SEN5, UnknownObj)
    External (SEN6, UnknownObj)
    External (SEN7, UnknownObj)
    External (SEN8, UnknownObj)
    External (SGGP, UnknownObj)    // Conflicts with a later declaration
    External (SIME, UnknownObj)    // Conflicts with a later declaration
    External (TDCE, UnknownObj)    // Conflicts with a later declaration
    External (THCE, UnknownObj)    // Conflicts with a later declaration
    External (TRE0, UnknownObj)    // Conflicts with a later declaration
    External (TRE1, UnknownObj)    // Conflicts with a later declaration
    External (TRE2, UnknownObj)    // Conflicts with a later declaration
    External (TRE3, UnknownObj)    // Conflicts with a later declaration
    External (TRTD, UnknownObj)    // Conflicts with a later declaration
    External (UBTC, DeviceObj)
    External (VDSD, IntObj)
    External (VMDE, UnknownObj)    // Conflicts with a later declaration
    External (VMR1, UnknownObj)    // Conflicts with a later declaration
    External (VMR2, UnknownObj)    // Conflicts with a later declaration
    External (VMR3, UnknownObj)    // Conflicts with a later declaration
    External (XBAS, UnknownObj)    // Conflicts with a later declaration

    Name (SANB, 0x45A83418)
    Name (SANL, 0x01BC)
    OperationRegion (SANV, SystemMemory, SANB, SANL)
    Field (SANV, AnyAcc, Lock, Preserve)
    {
        ASLB,   32, 
        IMON,   8, 
        IGDS,   8, 
        IBTT,   8, 
        IPAT,   8, 
        IPSC,   8, 
        IBIA,   8, 
        ISSC,   8, 
        IDMS,   8, 
        IF1E,   8, 
        HVCO,   8, 
        GSMI,   8, 
        PAVP,   8, 
        CADL,   8, 
        CSTE,   16, 
        NSTE,   16, 
        NDID,   8, 
        DID1,   32, 
        DID2,   32, 
        DID3,   32, 
        DID4,   32, 
        DID5,   32, 
        DID6,   32, 
        DID7,   32, 
        DID8,   32, 
        DID9,   32, 
        DIDA,   32, 
        DIDB,   32, 
        DIDC,   32, 
        DIDD,   32, 
        DIDE,   32, 
        DIDF,   32, 
        DIDX,   32, 
        NXD1,   32, 
        NXD2,   32, 
        NXD3,   32, 
        NXD4,   32, 
        NXD5,   32, 
        NXD6,   32, 
        NXD7,   32, 
        NXD8,   32, 
        NXDX,   32, 
        LIDS,   8, 
        KSV0,   32, 
        KSV1,   8, 
        BRTL,   8, 
        ALSE,   8, 
        ALAF,   8, 
        LLOW,   8, 
        LHIH,   8, 
        ALFP,   8, 
        IPTP,   8, 
        EDPV,   8, 
        HGMD,   8, 
        HGFL,   8, 
        SGGP,   8, 
        HRE0,   8, 
        HRG0,   32, 
        HRA0,   8, 
        PWE0,   8, 
        PWG0,   32, 
        PWA0,   8, 
        P1GP,   8, 
        HRE1,   8, 
        HRG1,   32, 
        HRA1,   8, 
        PWE1,   8, 
        PWG1,   32, 
        PWA1,   8, 
        P2GP,   8, 
        HRE2,   8, 
        HRG2,   32, 
        HRA2,   8, 
        PWE2,   8, 
        PWG2,   32, 
        PWA2,   8, 
        P3GP,   8, 
        HRE3,   8, 
        HRG3,   32, 
        HRA3,   8, 
        PWE3,   8, 
        PWG3,   32, 
        PWA3,   8, 
        P3WK,   32, 
        DLPW,   16, 
        DLHR,   16, 
        EECP,   8, 
        XBAS,   32, 
        GBAS,   16, 
        NVGA,   32, 
        NVHA,   32, 
        AMDA,   32, 
        LTRX,   8, 
        OBFX,   8, 
        LTRY,   8, 
        OBFY,   8, 
        LTRZ,   8, 
        OBFZ,   8, 
        LTRW,   8, 
        OBFA,   8, 
        SMSL,   16, 
        SNSL,   16, 
        M64B,   64, 
        M64L,   64, 
        CPEX,   32, 
        M32B,   32, 
        M32L,   32, 
        P0WK,   32, 
        P1WK,   32, 
        P2WK,   32, 
        VTDS,   8, 
        VTB1,   32, 
        VTB2,   32, 
        VTB3,   32, 
        VTB4,   32, 
        VTB5,   32, 
        VTB6,   32, 
        VTB7,   32, 
        VE1V,   16, 
        VE2V,   16, 
        RPIN,   8, 
        RPBA,   32, 
        CTHM,   8, 
        SIME,   8, 
        THCE,   8, 
        TDCE,   8, 
        DME0,   8, 
        DME1,   8, 
        TRE0,   8, 
        TRE1,   8, 
        TRE2,   8, 
        TRE3,   8, 
        TPA0,   32, 
        TPA1,   32, 
        TPA2,   32, 
        TPA3,   32, 
        TCDS,   32, 
        TCIT,   8, 
        TCIR,   8, 
        TRTD,   8, 
        ITM0,   32, 
        ITM1,   32, 
        LTE0,   8, 
        LTE1,   8, 
        LTE2,   8, 
        LTE3,   8, 
        PSL0,   16, 
        PSL1,   16, 
        PSL2,   16, 
        PSL3,   16, 
        PNS0,   16, 
        PNS1,   16, 
        PNS2,   16, 
        PNS3,   16, 
        IMRY,   8, 
        TIVS,   8, 
        PG0E,   8, 
        PG1E,   8, 
        PG2E,   8, 
        PG3E,   8, 
        VMDE,   8, 
        DIDY,   32, 
        NXDY,   32, 
        SLTS,   8, 
        VMR1,   8, 
        VMR2,   8, 
        VMR3,   8, 
        VMS0,   8, 
        VMS1,   8, 
        VMS2,   8, 
        VMS3,   8, 
        VMS4,   8, 
        VMS5,   8, 
        VMS6,   8, 
        VMS7,   8, 
        VMCP,   8, 
        CPRT,   8, 
        CSLU,   32, 
        CSSP,   32, 
        MPGN,   8, 
        CMBM,   8, 
        DPMS,   8, 
        PMSA,   64, 
        PMRL,   64, 
        EEC3,   8, 
        P0SC,   8, 
        P1SC,   8, 
        P2SC,   8, 
        P3SC,   8, 
        SBN0,   8, 
        SBN1,   8, 
        SBN2,   8, 
        SBN3,   8, 
        EEC1,   8, 
        EEC2,   8, 
        PBR1,   8, 
        PBR2,   8, 
        PBR3,   8, 
        HGST,   8, 
        PDIW,   8, 
        PDI0,   16, 
        PDI1,   16
    }

    Name (SS1, Zero)
    Name (SS2, Zero)
    Name (SS3, One)
    Name (SS4, One)
    OperationRegion (GNVS, SystemMemory, 0x45A78018, 0x0AB6)
    Field (GNVS, AnyAcc, Lock, Preserve)
    {
        OSYS,   16, 
        SMIF,   8, 
        PRM0,   8, 
        PRM1,   8, 
        SCIF,   8, 
        PRM2,   8, 
        PRM3,   8, 
        LCKF,   8, 
        PRM4,   8, 
        PRM5,   8, 
        PWRS,   8, 
        DBGS,   8, 
        THOF,   8, 
        ACT1,   8, 
        ACTT,   8, 
        PSVT,   8, 
        TC1V,   8, 
        TC2V,   8, 
        TSPV,   8, 
        CRTT,   8, 
        DTSE,   8, 
        DTS1,   8, 
        DTS2,   8, 
        DTSF,   8, 
        REVN,   8, 
        APIC,   8, 
        TCNT,   8, 
        PCP0,   8, 
        PCP1,   8, 
        PPCM,   8, 
        PPMF,   32, 
        C67L,   8, 
        NATP,   8, 
        CMAP,   8, 
        CMBP,   8, 
        LPTP,   8, 
        FDCP,   8, 
        CMCP,   8, 
        CIRP,   8, 
        SMSC,   8, 
        W381,   8, 
        SMC1,   8, 
        EMAE,   8, 
        EMAP,   16, 
        EMAL,   16, 
        MEFE,   8, 
        DSTS,   8, 
        MORD,   8, 
        TCGP,   8, 
        PPRP,   32, 
        PPRQ,   8, 
        LPPR,   8, 
        IDEM,   8, 
        PLID,   8, 
        BTYP,   8, 
        OSCC,   8, 
        NEXP,   8, 
        SBV1,   8, 
        SBV2,   8, 
        ECON,   8, 
        DSEN,   8, 
        GPIC,   8, 
        CTYP,   8, 
        L01C,   8, 
        VFN0,   8, 
        VFN1,   8, 
        VFN2,   8, 
        VFN3,   8, 
        VFN4,   8, 
        VFN5,   8, 
        VFN6,   8, 
        VFN7,   8, 
        VFN8,   8, 
        VFN9,   8, 
        PNHM,   32, 
        TBAL,   32, 
        TBAH,   32, 
        TSOD,   8, 
        PFLV,   8, 
        BREV,   16, 
        PDTS,   8, 
        PKGA,   8, 
        PAMT,   8, 
        AC0F,   8, 
        AC1F,   8, 
        DTS3,   8, 
        DTS4,   8, 
        XTUB,   32, 
        XTUS,   32, 
        XMPB,   32, 
        DDRF,   8, 
        RTD3,   8, 
        PEP0,   8, 
        PEP3,   8, 
        DPTF,   8, 
        DCFE,   16, 
        SADE,   8, 
        FND1,   8, 
        AMBD,   8, 
        AMAT,   8, 
        AMPT,   8, 
        AMCT,   8, 
        AMHT,   8, 
        SKDE,   8, 
        SKAT,   8, 
        SKPT,   8, 
        SKCT,   8, 
        SKHT,   8, 
        EFDE,   8, 
        EFAT,   8, 
        EFPT,   8, 
        EFCT,   8, 
        EFHT,   8, 
        VRDE,   8, 
        VRAT,   8, 
        VRPT,   8, 
        VRCT,   8, 
        VRHT,   8, 
        DPAP,   8, 
        DPPP,   8, 
        DPCP,   8, 
        PIDE,   8, 
        PPSZ,   32, 
        IRMC,   8, 
        CHEN,   8, 
        S0ID,   8, 
        CTDB,   8, 
        DKSM,   8, 
        SIO1,   16, 
        SIO2,   16, 
        SPBA,   16, 
        Offset (0x1F4), 
        PWRE,   8, 
        Offset (0x1F7), 
        PPPR,   16, 
        Offset (0x1FA), 
        VSPE,   8, 
        RFIM,   8, 
        Offset (0x203), 
        XHPR,   8, 
        RIC0,   8, 
        GBSX,   8, 
        IUBE,   8, 
        IUCE,   8, 
        IUDE,   8, 
        ECNO,   8, 
        AUDD,   16, 
        IC0D,   16, 
        IC1D,   16, 
        IC1S,   16, 
        VRRD,   16, 
        PSCP,   8, 
        I20D,   16, 
        I21D,   16, 
        RCG0,   16, 
        RCG1,   16, 
        ECDB,   8, 
        P2ME,   8, 
        P2MK,   8, 
        SSH0,   16, 
        SSL0,   16, 
        SSD0,   16, 
        FMH0,   16, 
        FML0,   16, 
        FMD0,   16, 
        FPH0,   16, 
        FPL0,   16, 
        FPD0,   16, 
        HSH0,   16, 
        HSL0,   16, 
        HSD0,   16, 
        Offset (0x23D), 
        SSH1,   16, 
        SSL1,   16, 
        SSD1,   16, 
        FMH1,   16, 
        FML1,   16, 
        FMD1,   16, 
        FPH1,   16, 
        FPL1,   16, 
        FPD1,   16, 
        HSH1,   16, 
        HSL1,   16, 
        HSD1,   16, 
        Offset (0x256), 
        SSH2,   16, 
        SSL2,   16, 
        SSD2,   16, 
        FMH2,   16, 
        FML2,   16, 
        FMD2,   16, 
        FPH2,   16, 
        FPL2,   16, 
        FPD2,   16, 
        HSH2,   16, 
        HSL2,   16, 
        HSD2,   16, 
        Offset (0x26F), 
        SSH3,   16, 
        SSL3,   16, 
        SSD3,   16, 
        FMH3,   16, 
        FML3,   16, 
        FMD3,   16, 
        FPH3,   16, 
        FPL3,   16, 
        FPD3,   16, 
        HSH3,   16, 
        HSL3,   16, 
        HSD3,   16, 
        Offset (0x288), 
        SSH4,   16, 
        SSL4,   16, 
        SSD4,   16, 
        FMH4,   16, 
        FML4,   16, 
        FMD4,   16, 
        FPH4,   16, 
        FPL4,   16, 
        FPD4,   16, 
        HSH4,   16, 
        HSL4,   16, 
        HSD4,   16, 
        Offset (0x2A1), 
        SSH5,   16, 
        SSL5,   16, 
        SSD5,   16, 
        FMH5,   16, 
        FML5,   16, 
        FMD5,   16, 
        FPH5,   16, 
        FPL5,   16, 
        FPD5,   16, 
        HSH5,   16, 
        HSL5,   16, 
        HSD5,   16, 
        Offset (0x2BA), 
        M0C0,   16, 
        M1C0,   16, 
        M0C1,   16, 
        M1C1,   16, 
        M0C2,   16, 
        M1C2,   16, 
        M0C3,   16, 
        M1C3,   16, 
        M0C4,   16, 
        M1C4,   16, 
        M0C5,   16, 
        M1C5,   16, 
        M0C6,   16, 
        M1C6,   16, 
        M0C7,   16, 
        M1C7,   16, 
        M0C8,   16, 
        M1C8,   16, 
        Offset (0x2DF), 
        M0C9,   16, 
        M1C9,   16, 
        M0CA,   16, 
        M1CA,   16, 
        M0CB,   16, 
        M1CB,   16, 
        Offset (0x2EC), 
        GIRQ,   32, 
        DMTP,   8, 
        DMTD,   8, 
        DMSH,   8, 
        SHSB,   8, 
        PLCS,   8, 
        PLVL,   16, 
        WWSD,   8, 
        CVSD,   8, 
        SSDD,   8, 
        INLD,   8, 
        IFAT,   8, 
        IFPT,   8, 
        IFCT,   8, 
        IFHT,   8, 
        USBH,   8, 
        BCV4,   8, 
        WTV0,   8, 
        WTV1,   8, 
        APFU,   8, 
        Offset (0x30A), 
        PEPC,   64, 
        VRSD,   16, 
        PB1E,   8, 
        GNID,   8, 
        Offset (0x327), 
        CHGE,   8, 
        AMC3,   8, 
        SKC3,   8, 
        EFC3,   8, 
        VRC3,   8, 
        IFC3,   8, 
        WGC3,   8, 
        BATR,   8, 
        IN34,   8, 
        ECLP,   8, 
        MEMS,   8, 
        S1DE,   8, 
        S2DE,   8, 
        S3DE,   8, 
        S4DE,   8, 
        S5DE,   8, 
        S1S3,   8, 
        S2S3,   8, 
        S3S3,   8, 
        S4S3,   8, 
        S5S3,   8, 
        PSME,   8, 
        PDT1,   8, 
        PLM1,   32, 
        PTW1,   32, 
        DDT1,   8, 
        DDP1,   8, 
        DLI1,   16, 
        DPL1,   16, 
        DTW1,   32, 
        DMI1,   16, 
        DMA1,   16, 
        DMT1,   16, 
        WIFE,   8, 
        DOM1,   8, 
        LIM1,   16, 
        TIM1,   32, 
        TRD0,   8, 
        TRL0,   8, 
        TRD1,   8, 
        TRL1,   8, 
        WDM1,   8, 
        CID1,   16, 
        Offset (0x3FA), 
        APPE,   8, 
        SDS0,   8, 
        SDS1,   8, 
        SDS2,   8, 
        SDS3,   8, 
        SDS4,   8, 
        SDS5,   8, 
        SDS6,   8, 
        SDS7,   8, 
        SDS8,   8, 
        SDS9,   8, 
        SDSA,   8, 
        TPLT,   8, 
        TPLM,   8, 
        TPLB,   8, 
        TPLH,   16, 
        TPLS,   8, 
        TPDT,   8, 
        TPDM,   8, 
        TPDB,   8, 
        TPDH,   16, 
        TPDS,   8, 
        FPTT,   8, 
        FPTM,   8, 
        WTVX,   8, 
        WITX,   8, 
        GPTD,   8, 
        GDBT,   16, 
        UTKX,   8, 
        SPTD,   8, 
        Offset (0x42A), 
        ATLB,   32, 
        SDM0,   8, 
        SDM1,   8, 
        SDM2,   8, 
        SDM3,   8, 
        SDM4,   8, 
        SDM5,   8, 
        SDM6,   8, 
        SDM7,   8, 
        SDM8,   8, 
        SDM9,   8, 
        SDMA,   8, 
        SDMB,   8, 
        Offset (0x43B), 
        USTP,   8, 
        Offset (0x465), 
        GFPS,   32, 
        GFPI,   32, 
        WBBR,   32, 
        GBTK,   32, 
        GBTI,   32, 
        GPDI,   32, 
        GPLI,   32, 
        CL00,   8, 
        CL01,   8, 
        CL02,   8, 
        CL03,   8, 
        CL04,   8, 
        CL05,   8, 
        L0EN,   8, 
        L1EN,   8, 
        L2EN,   8, 
        L3EN,   8, 
        L4EN,   8, 
        L5EN,   8, 
        CDIV,   8, 
        C0VE,   8, 
        C0TP,   8, 
        C0CV,   8, 
        C0IC,   32, 
        C0GP,   8, 
        C0IB,   8, 
        C0IA,   16, 
        C0P0,   8, 
        C0P1,   8, 
        C0P2,   8, 
        C0P3,   8, 
        C0G0,   8, 
        C0G1,   8, 
        C0G2,   8, 
        C0G3,   8, 
        C0F0,   8, 
        C0F1,   8, 
        C0F2,   8, 
        C0F3,   8, 
        C0A0,   8, 
        C0A1,   8, 
        C0A2,   8, 
        C0A3,   8, 
        C0I0,   8, 
        C0I1,   8, 
        C0I2,   8, 
        C0I3,   8, 
        C0PL,   8, 
        C0W0,   8, 
        C0W1,   8, 
        C0W2,   8, 
        C0W3,   8, 
        C0SP,   8, 
        C0W4,   8, 
        C0W5,   8, 
        C0CS,   8, 
        C1VE,   8, 
        C1TP,   8, 
        C1CV,   8, 
        C1IC,   32, 
        C1GP,   8, 
        C1IB,   8, 
        C1IA,   16, 
        C1P0,   8, 
        C1P1,   8, 
        C1P2,   8, 
        C1P3,   8, 
        C1G0,   8, 
        C1G1,   8, 
        C1G2,   8, 
        C1G3,   8, 
        C1F0,   8, 
        C1F1,   8, 
        C1F2,   8, 
        C1F3,   8, 
        C1A0,   8, 
        C1A1,   8, 
        C1A2,   8, 
        C1A3,   8, 
        C1I0,   8, 
        C1I1,   8, 
        C1I2,   8, 
        C1I3,   8, 
        C1PL,   8, 
        C1W0,   8, 
        C1W1,   8, 
        C1W2,   8, 
        C1W3,   8, 
        C1SP,   8, 
        C1W4,   8, 
        C1W5,   8, 
        C1CS,   8, 
        C2VE,   8, 
        C2TP,   8, 
        C2CV,   8, 
        C2IC,   32, 
        C2GP,   8, 
        C2IB,   8, 
        C2IA,   16, 
        C2P0,   8, 
        C2P1,   8, 
        C2P2,   8, 
        C2P3,   8, 
        C2G0,   8, 
        C2G1,   8, 
        C2G2,   8, 
        C2G3,   8, 
        C2F0,   8, 
        C2F1,   8, 
        C2F2,   8, 
        C2F3,   8, 
        C2A0,   8, 
        C2A1,   8, 
        C2A2,   8, 
        C2A3,   8, 
        C2I0,   8, 
        C2I1,   8, 
        C2I2,   8, 
        C2I3,   8, 
        C2PL,   8, 
        C2W0,   8, 
        C2W1,   8, 
        C2W2,   8, 
        C2W3,   8, 
        C2SP,   8, 
        C2W4,   8, 
        C2W5,   8, 
        C2CS,   8, 
        C3VE,   8, 
        C3TP,   8, 
        C3CV,   8, 
        C3IC,   32, 
        C3GP,   8, 
        C3IB,   8, 
        C3IA,   16, 
        C3P0,   8, 
        C3P1,   8, 
        C3P2,   8, 
        C3P3,   8, 
        C3G0,   8, 
        C3G1,   8, 
        C3G2,   8, 
        C3G3,   8, 
        C3F0,   8, 
        C3F1,   8, 
        C3F2,   8, 
        C3F3,   8, 
        C3A0,   8, 
        C3A1,   8, 
        C3A2,   8, 
        C3A3,   8, 
        C3I0,   8, 
        C3I1,   8, 
        C3I2,   8, 
        C3I3,   8, 
        C3PL,   8, 
        C3W0,   8, 
        C3W1,   8, 
        C3W2,   8, 
        C3W3,   8, 
        C3SP,   8, 
        C3W4,   8, 
        C3W5,   8, 
        C3CS,   8, 
        C4VE,   8, 
        C4TP,   8, 
        C4CV,   8, 
        C4IC,   32, 
        C4GP,   8, 
        C4IB,   8, 
        C4IA,   16, 
        C4P0,   8, 
        C4P1,   8, 
        C4P2,   8, 
        C4P3,   8, 
        C4G0,   8, 
        C4G1,   8, 
        C4G2,   8, 
        C4G3,   8, 
        C4F0,   8, 
        C4F1,   8, 
        C4F2,   8, 
        C4F3,   8, 
        C4A0,   8, 
        C4A1,   8, 
        C4A2,   8, 
        C4A3,   8, 
        C4I0,   8, 
        C4I1,   8, 
        C4I2,   8, 
        C4I3,   8, 
        C4PL,   8, 
        C4W0,   8, 
        C4W1,   8, 
        C4W2,   8, 
        C4W3,   8, 
        C4SP,   8, 
        C4W4,   8, 
        C4W5,   8, 
        C4CS,   8, 
        C5VE,   8, 
        C5TP,   8, 
        C5CV,   8, 
        C5IC,   32, 
        C5GP,   8, 
        C5IB,   8, 
        C5IA,   16, 
        C5P0,   8, 
        C5P1,   8, 
        C5P2,   8, 
        C5P3,   8, 
        C5G0,   8, 
        C5G1,   8, 
        C5G2,   8, 
        C5G3,   8, 
        C5F0,   8, 
        C5F1,   8, 
        C5F2,   8, 
        C5F3,   8, 
        C5A0,   8, 
        C5A1,   8, 
        C5A2,   8, 
        C5A3,   8, 
        C5I0,   8, 
        C5I1,   8, 
        C5I2,   8, 
        C5I3,   8, 
        C5PL,   8, 
        C5W0,   8, 
        C5W1,   8, 
        C5W2,   8, 
        C5W3,   8, 
        C5SP,   8, 
        C5W4,   8, 
        C5W5,   8, 
        C5CS,   8, 
        L0SM,   8, 
        L0H0,   8, 
        L0H1,   8, 
        L0H2,   8, 
        L0H3,   8, 
        L0H4,   8, 
        L0H5,   8, 
        L0H6,   8, 
        L0H7,   8, 
        L0H8,   8, 
        L0PL,   8, 
        L0M0,   8, 
        L0M1,   8, 
        L0M2,   8, 
        L0M3,   8, 
        L0M4,   8, 
        L0M5,   8, 
        L0M6,   8, 
        L0M7,   8, 
        L0M8,   8, 
        L0M9,   8, 
        L0MA,   8, 
        L0MB,   8, 
        L0MC,   8, 
        L0MD,   8, 
        L0ME,   8, 
        L0MF,   8, 
        L0DI,   8, 
        L0BS,   8, 
        L0A0,   16, 
        L0A1,   16, 
        L0A2,   16, 
        L0A3,   16, 
        L0A4,   16, 
        L0A5,   16, 
        L0A6,   16, 
        L0A7,   16, 
        L0A8,   16, 
        L0A9,   16, 
        L0AA,   16, 
        L0AB,   16, 
        L0D0,   8, 
        L0D1,   8, 
        L0D2,   8, 
        L0D3,   8, 
        L0D4,   8, 
        L0D5,   8, 
        L0D6,   8, 
        L0D7,   8, 
        L0D8,   8, 
        L0D9,   8, 
        L0DA,   8, 
        L0DB,   8, 
        L0DV,   8, 
        L0CV,   8, 
        L0LU,   8, 
        L0NL,   8, 
        L0EE,   8, 
        L0VC,   8, 
        L0FS,   8, 
        L0LE,   8, 
        L0DG,   8, 
        L0CK,   32, 
        L0CL,   8, 
        L0PP,   8, 
        L0VR,   8, 
        L0PV,   8, 
        L0PU,   8, 
        L0FD,   8, 
        L1SM,   8, 
        L1H0,   8, 
        L1H1,   8, 
        L1H2,   8, 
        L1H3,   8, 
        L1H4,   8, 
        L1H5,   8, 
        L1H6,   8, 
        L1H7,   8, 
        L1H8,   8, 
        L1PL,   8, 
        L1M0,   8, 
        L1M1,   8, 
        L1M2,   8, 
        L1M3,   8, 
        L1M4,   8, 
        L1M5,   8, 
        L1M6,   8, 
        L1M7,   8, 
        L1M8,   8, 
        L1M9,   8, 
        L1MA,   8, 
        L1MB,   8, 
        L1MC,   8, 
        L1MD,   8, 
        L1ME,   8, 
        L1MF,   8, 
        L1DI,   8, 
        L1BS,   8, 
        L1A0,   16, 
        L1A1,   16, 
        L1A2,   16, 
        L1A3,   16, 
        L1A4,   16, 
        L1A5,   16, 
        L1A6,   16, 
        L1A7,   16, 
        L1A8,   16, 
        L1A9,   16, 
        L1AA,   16, 
        L1AB,   16, 
        L1D0,   8, 
        L1D1,   8, 
        L1D2,   8, 
        L1D3,   8, 
        L1D4,   8, 
        L1D5,   8, 
        L1D6,   8, 
        L1D7,   8, 
        L1D8,   8, 
        L1D9,   8, 
        L1DA,   8, 
        L1DB,   8, 
        L1DV,   8, 
        L1CV,   8, 
        L1LU,   8, 
        L1NL,   8, 
        L1EE,   8, 
        L1VC,   8, 
        L1FS,   8, 
        L1LE,   8, 
        L1DG,   8, 
        L1CK,   32, 
        L1CL,   8, 
        L1PP,   8, 
        L1VR,   8, 
        L1PV,   8, 
        L1PU,   8, 
        L1FD,   8, 
        L2SM,   8, 
        L2H0,   8, 
        L2H1,   8, 
        L2H2,   8, 
        L2H3,   8, 
        L2H4,   8, 
        L2H5,   8, 
        L2H6,   8, 
        L2H7,   8, 
        L2H8,   8, 
        L2PL,   8, 
        L2M0,   8, 
        L2M1,   8, 
        L2M2,   8, 
        L2M3,   8, 
        L2M4,   8, 
        L2M5,   8, 
        L2M6,   8, 
        L2M7,   8, 
        L2M8,   8, 
        L2M9,   8, 
        L2MA,   8, 
        L2MB,   8, 
        L2MC,   8, 
        L2MD,   8, 
        L2ME,   8, 
        L2MF,   8, 
        L2DI,   8, 
        L2BS,   8, 
        L2A0,   16, 
        L2A1,   16, 
        L2A2,   16, 
        L2A3,   16, 
        L2A4,   16, 
        L2A5,   16, 
        L2A6,   16, 
        L2A7,   16, 
        L2A8,   16, 
        L2A9,   16, 
        L2AA,   16, 
        L2AB,   16, 
        L2D0,   8, 
        L2D1,   8, 
        L2D2,   8, 
        L2D3,   8, 
        L2D4,   8, 
        L2D5,   8, 
        L2D6,   8, 
        L2D7,   8, 
        L2D8,   8, 
        L2D9,   8, 
        L2DA,   8, 
        L2DB,   8, 
        L2DV,   8, 
        L2CV,   8, 
        L2LU,   8, 
        L2NL,   8, 
        L2EE,   8, 
        L2VC,   8, 
        L2FS,   8, 
        L2LE,   8, 
        L2DG,   8, 
        L2CK,   32, 
        L2CL,   8, 
        L2PP,   8, 
        L2VR,   8, 
        L2PV,   8, 
        L2PU,   8, 
        L2FD,   8, 
        L3SM,   8, 
        L3H0,   8, 
        L3H1,   8, 
        L3H2,   8, 
        L3H3,   8, 
        L3H4,   8, 
        L3H5,   8, 
        L3H6,   8, 
        L3H7,   8, 
        L3H8,   8, 
        L3PL,   8, 
        L3M0,   8, 
        L3M1,   8, 
        L3M2,   8, 
        L3M3,   8, 
        L3M4,   8, 
        L3M5,   8, 
        L3M6,   8, 
        L3M7,   8, 
        L3M8,   8, 
        L3M9,   8, 
        L3MA,   8, 
        L3MB,   8, 
        L3MC,   8, 
        L3MD,   8, 
        L3ME,   8, 
        L3MF,   8, 
        L3DI,   8, 
        L3BS,   8, 
        L3A0,   16, 
        L3A1,   16, 
        L3A2,   16, 
        L3A3,   16, 
        L3A4,   16, 
        L3A5,   16, 
        L3A6,   16, 
        L3A7,   16, 
        L3A8,   16, 
        L3A9,   16, 
        L3AA,   16, 
        L3AB,   16, 
        L3D0,   8, 
        L3D1,   8, 
        L3D2,   8, 
        L3D3,   8, 
        L3D4,   8, 
        L3D5,   8, 
        L3D6,   8, 
        L3D7,   8, 
        L3D8,   8, 
        L3D9,   8, 
        L3DA,   8, 
        L3DB,   8, 
        L3DV,   8, 
        L3CV,   8, 
        L3LU,   8, 
        L3NL,   8, 
        L3EE,   8, 
        L3VC,   8, 
        L3FS,   8, 
        L3LE,   8, 
        L3DG,   8, 
        L3CK,   32, 
        L3CL,   8, 
        L3PP,   8, 
        L3VR,   8, 
        L3PV,   8, 
        L3PU,   8, 
        L3FD,   8, 
        L4SM,   8, 
        L4H0,   8, 
        L4H1,   8, 
        L4H2,   8, 
        L4H3,   8, 
        L4H4,   8, 
        L4H5,   8, 
        L4H6,   8, 
        L4H7,   8, 
        L4H8,   8, 
        L4PL,   8, 
        L4M0,   8, 
        L4M1,   8, 
        L4M2,   8, 
        L4M3,   8, 
        L4M4,   8, 
        L4M5,   8, 
        L4M6,   8, 
        L4M7,   8, 
        L4M8,   8, 
        L4M9,   8, 
        L4MA,   8, 
        L4MB,   8, 
        L4MC,   8, 
        L4MD,   8, 
        L4ME,   8, 
        L4MF,   8, 
        L4DI,   8, 
        L4BS,   8, 
        L4A0,   16, 
        L4A1,   16, 
        L4A2,   16, 
        L4A3,   16, 
        L4A4,   16, 
        L4A5,   16, 
        L4A6,   16, 
        L4A7,   16, 
        L4A8,   16, 
        L4A9,   16, 
        L4AA,   16, 
        L4AB,   16, 
        L4D0,   8, 
        L4D1,   8, 
        L4D2,   8, 
        L4D3,   8, 
        L4D4,   8, 
        L4D5,   8, 
        L4D6,   8, 
        L4D7,   8, 
        L4D8,   8, 
        L4D9,   8, 
        L4DA,   8, 
        L4DB,   8, 
        L4DV,   8, 
        L4CV,   8, 
        L4LU,   8, 
        L4NL,   8, 
        L4EE,   8, 
        L4VC,   8, 
        L4FS,   8, 
        L4LE,   8, 
        L4DG,   8, 
        L4CK,   32, 
        L4CL,   8, 
        L4PP,   8, 
        L4VR,   8, 
        L4PV,   8, 
        L4PU,   8, 
        L4FD,   8, 
        L5SM,   8, 
        L5H0,   8, 
        L5H1,   8, 
        L5H2,   8, 
        L5H3,   8, 
        L5H4,   8, 
        L5H5,   8, 
        L5H6,   8, 
        L5H7,   8, 
        L5H8,   8, 
        L5PL,   8, 
        L5M0,   8, 
        L5M1,   8, 
        L5M2,   8, 
        L5M3,   8, 
        L5M4,   8, 
        L5M5,   8, 
        L5M6,   8, 
        L5M7,   8, 
        L5M8,   8, 
        L5M9,   8, 
        L5MA,   8, 
        L5MB,   8, 
        L5MC,   8, 
        L5MD,   8, 
        L5ME,   8, 
        L5MF,   8, 
        L5DI,   8, 
        L5BS,   8, 
        L5A0,   16, 
        L5A1,   16, 
        L5A2,   16, 
        L5A3,   16, 
        L5A4,   16, 
        L5A5,   16, 
        L5A6,   16, 
        L5A7,   16, 
        L5A8,   16, 
        L5A9,   16, 
        L5AA,   16, 
        L5AB,   16, 
        L5D0,   8, 
        L5D1,   8, 
        L5D2,   8, 
        L5D3,   8, 
        L5D4,   8, 
        L5D5,   8, 
        L5D6,   8, 
        L5D7,   8, 
        L5D8,   8, 
        L5D9,   8, 
        L5DA,   8, 
        L5DB,   8, 
        L5DV,   8, 
        L5CV,   8, 
        L5LU,   8, 
        L5NL,   8, 
        L5EE,   8, 
        L5VC,   8, 
        L5FS,   8, 
        L5LE,   8, 
        L5DG,   8, 
        L5CK,   32, 
        L5CL,   8, 
        L5PP,   8, 
        L5VR,   8, 
        L5PV,   8, 
        L5PU,   8, 
        L5FD,   8, 
        F0FM,   8, 
        F0MS,   8, 
        F0M0,   8, 
        F0M1,   8, 
        F0M2,   8, 
        F0M3,   8, 
        F0M4,   8, 
        F0M5,   8, 
        F0M6,   8, 
        F0M7,   8, 
        F0M8,   8, 
        F0M9,   8, 
        F0MA,   8, 
        F0MB,   8, 
        F0MC,   8, 
        F0MD,   8, 
        F0ME,   8, 
        F0MF,   8, 
        F0BS,   8, 
        F0AB,   16, 
        F0GP,   8, 
        F0GG,   16, 
        F0AV,   8, 
        F0IV,   8, 
        F0OM,   8, 
        F1FM,   8, 
        F1MS,   8, 
        F1M0,   8, 
        F1M1,   8, 
        F1M2,   8, 
        F1M3,   8, 
        F1M4,   8, 
        F1M5,   8, 
        F1M6,   8, 
        F1M7,   8, 
        F1M8,   8, 
        F1M9,   8, 
        F1MA,   8, 
        F1MB,   8, 
        F1MC,   8, 
        F1MD,   8, 
        F1ME,   8, 
        F1MF,   8, 
        F1BS,   8, 
        F1AB,   16, 
        F1GP,   8, 
        F1GG,   16, 
        F1AV,   8, 
        F1IV,   8, 
        F1OM,   8, 
        F2FM,   8, 
        F2MS,   8, 
        F2M0,   8, 
        F2M1,   8, 
        F2M2,   8, 
        F2M3,   8, 
        F2M4,   8, 
        F2M5,   8, 
        F2M6,   8, 
        F2M7,   8, 
        F2M8,   8, 
        F2M9,   8, 
        F2MA,   8, 
        F2MB,   8, 
        F2MC,   8, 
        F2MD,   8, 
        F2ME,   8, 
        F2MF,   8, 
        F2BS,   8, 
        F2AB,   16, 
        F2GP,   8, 
        F2GG,   16, 
        F2AV,   8, 
        F2IV,   8, 
        F2OM,   8, 
        F3FM,   8, 
        F3MS,   8, 
        F3M0,   8, 
        F3M1,   8, 
        F3M2,   8, 
        F3M3,   8, 
        F3M4,   8, 
        F3M5,   8, 
        F3M6,   8, 
        F3M7,   8, 
        F3M8,   8, 
        F3M9,   8, 
        F3MA,   8, 
        F3MB,   8, 
        F3MC,   8, 
        F3MD,   8, 
        F3ME,   8, 
        F3MF,   8, 
        F3BS,   8, 
        F3AB,   16, 
        F3GP,   8, 
        F3GG,   16, 
        F3AV,   8, 
        F3IV,   8, 
        F3OM,   8, 
        F4FM,   8, 
        F4MS,   8, 
        F4M0,   8, 
        F4M1,   8, 
        F4M2,   8, 
        F4M3,   8, 
        F4M4,   8, 
        F4M5,   8, 
        F4M6,   8, 
        F4M7,   8, 
        F4M8,   8, 
        F4M9,   8, 
        F4MA,   8, 
        F4MB,   8, 
        F4MC,   8, 
        F4MD,   8, 
        F4ME,   8, 
        F4MF,   8, 
        F4BS,   8, 
        F4AB,   16, 
        F4GP,   8, 
        F4GG,   16, 
        F4AV,   8, 
        F4IV,   8, 
        F4OM,   8, 
        F5FM,   8, 
        F5MS,   8, 
        F5M0,   8, 
        F5M1,   8, 
        F5M2,   8, 
        F5M3,   8, 
        F5M4,   8, 
        F5M5,   8, 
        F5M6,   8, 
        F5M7,   8, 
        F5M8,   8, 
        F5M9,   8, 
        F5MA,   8, 
        F5MB,   8, 
        F5MC,   8, 
        F5MD,   8, 
        F5ME,   8, 
        F5MF,   8, 
        F5BS,   8, 
        F5AB,   16, 
        F5GP,   8, 
        F5GG,   16, 
        F5AV,   8, 
        F5IV,   8, 
        F5OM,   8, 
        ECR1,   8, 
        I2SC,   8, 
        I2SI,   32, 
        I2SB,   8, 
        ODV0,   8, 
        ODV1,   8, 
        ODV2,   8, 
        ODV3,   8, 
        ODV4,   8, 
        ODV5,   8, 
        UBCB,   32, 
        WIFC,   8, 
        Offset (0x830), 
        ADPM,   32, 
        AG1L,   64, 
        AG1H,   64, 
        AG2L,   64, 
        AG2H,   64, 
        AG3L,   64, 
        AG3H,   64, 
        HEFE,   8, 
        XDCE,   8, 
        STXE,   8, 
        ST10,   8, 
        ST11,   8, 
        ST12,   8, 
        ST13,   8, 
        ST14,   8, 
        ST15,   8, 
        ST16,   8, 
        ST17,   8, 
        ST18,   8, 
        ST19,   8, 
        ENVM,   8, 
        DHSP,   16, 
        DSSP,   16, 
        DSTP,   8, 
        STDE,   8, 
        STRS,   8, 
        ST20,   8, 
        ST21,   8, 
        ST22,   8, 
        ST23,   8, 
        ST24,   8, 
        ST25,   8, 
        ST26,   8, 
        ST27,   8, 
        ST28,   8, 
        ST29,   8, 
        ST30,   8, 
        ST31,   8, 
        ST32,   8, 
        ST33,   8, 
        ST34,   8, 
        ST35,   8, 
        ST36,   8, 
        ST37,   8, 
        ST38,   8, 
        ST39,   8, 
        ST40,   8, 
        ST41,   8, 
        ST42,   8, 
        ST43,   8, 
        ST44,   8, 
        ST45,   8, 
        ST46,   8, 
        ST47,   8, 
        ST48,   8, 
        ST49,   8, 
        SD11,   8, 
        SD12,   8, 
        SD13,   8, 
        SD14,   8, 
        SD15,   8, 
        SD16,   8, 
        SD21,   8, 
        SD22,   8, 
        SD23,   8, 
        SD24,   8, 
        SD25,   8, 
        SD26,   8, 
        SD31,   8, 
        SD32,   8, 
        SD33,   8, 
        SD34,   8, 
        SD35,   8, 
        SD36,   8, 
        Offset (0x8D2), 
        SDAA,   8, 
        SDAB,   8, 
        BTSE,   8, 
        BTBR,   8, 
        BED2,   8, 
        BED3,   8, 
        BTLE,   8, 
        BTL2,   8, 
        BTLL,   8, 
        Offset (0x8DD), 
        ATDV,   8, 
        COEM,   8, 
        RTVM,   8, 
        USTC,   8, 
        HEB1,   32, 
        BATP,   8, 
        TSDB,   8, 
        Offset (0x8E9), 
        RBY1,   8, 
        RBY2,   8, 
        SCSS,   8, 
        NCTC,   8, 
        NCTI,   8, 
        NCTH,   8, 
        HSIO,   8, 
        ZPOD,   8, 
        RGBC,   8, 
        DPTC,   8, 
        SRSP,   32, 
        CEDS,   8, 
        EHK3,   8, 
        EHK4,   8, 
        EHK5,   8, 
        EHK6,   8, 
        EHK7,   8, 
        EHK8,   8, 
        VBVP,   8, 
        VBVD,   8, 
        VBHB,   8, 
        VBRL,   8, 
        SMSS,   8, 
        VBST,   8, 
        ADAS,   8, 
        PPBG,   32, 
        AEAB,   8, 
        AHDB,   8, 
        ELPM,   32, 
        ELPS,   32, 
        UCMS,   8, 
        UCG1,   32, 
        UCG2,   32, 
        Offset (0x939), 
        PCHE,   8, 
        Offset (0x93D), 
        UDGF,   8, 
        UDUP,   8, 
        DBGF,   8, 
        DBUP,   8, 
        TTUP,   8, 
        TP1T,   8, 
        TP1P,   8, 
        TP1D,   8, 
        TP2T,   8, 
        TP2P,   8, 
        TP2D,   8, 
        TP3T,   8, 
        TP3P,   8, 
        TP3D,   8, 
        TP4T,   8, 
        TP4P,   8, 
        TP4D,   8, 
        TP5T,   8, 
        TP5P,   8, 
        TP5D,   8, 
        TP6T,   8, 
        TP6P,   8, 
        TP6D,   8, 
        STAS,   8, 
        WRTO,   8, 
        PRST,   32, 
        WPRP,   8, 
        PSWP,   32, 
        RPNB,   8, 
        POME,   8, 
        PSW2,   32, 
        RPN2,   8, 
        WFCP,   32, 
        PFCP,   8, 
        WBRS,   32, 
        PBRS,   8, 
        WWKP,   32, 
        GPLP,   32, 
        GPLR,   32, 
        GPI1,   32, 
        TPP1,   32, 
        TPR1,   32, 
        PPDI,   8, 
        PPLI,   8, 
        PPLP,   8, 
        PPLR,   8, 
        PPI1,   8, 
        PPP1,   8, 
        PPR1,   8, 
        PSPE,   32, 
        PPSP,   8, 
        PSPR,   32, 
        PPSR,   8, 
        PSP2,   32, 
        PS2P,   8, 
        PSR2,   32, 
        SR2P,   8, 
        WLWK,   32, 
        WLRP,   8, 
        SATP,   32, 
        STPP,   8, 
        SSDP,   32, 
        SDPP,   8, 
        SSDR,   32, 
        SDRP,   8, 
        S2DP,   32, 
        S2PP,   8, 
        S2DR,   32, 
        S2RP,   8, 
        SD2P,   32, 
        SDP1,   8, 
        SD2R,   32, 
        SDR1,   8, 
        SXI1,   8, 
        SXI2,   8, 
        SXP1,   8, 
        SXP2,   8, 
        TSD0,   8, 
        WCLK,   8, 
        CWEF,   8, 
        CECV,   32, 
        WWRP,   8, 
        WAGE,   8, 
        AGA1,   8, 
        AGA2,   8, 
        AGA3,   8, 
        AGA4,   8, 
        AGA5,   8, 
        AGB1,   8, 
        AGB2,   8, 
        AGB3,   8, 
        AGB4,   8, 
        AGB5,   8, 
        ACSD,   32, 
        I5BS,   32, 
        DGVR,   32, 
        DGVP,   8, 
        PAPE,   32, 
        PAPP,   8, 
        PARE,   32, 
        PARP,   8, 
        PAWK,   32, 
        PART,   8, 
        PBPE,   32, 
        PBPP,   8, 
        PBRE,   32, 
        PBRP,   8, 
        PBWK,   32, 
        PBRT,   8, 
        PCPE,   32, 
        PCPP,   8, 
        PCRE,   32, 
        PCRP,   8, 
        PCWK,   32, 
        PCRT,   8, 
        LPMR,   32, 
        CVFS,   8, 
        NCNV,   8, 
        DGOP,   32, 
        ST50,   8, 
        ST51,   8, 
        ST52,   8, 
        ST53,   8, 
        ST54,   8, 
        ST55,   8, 
        ST56,   8, 
        ST57,   8, 
        ST58,   8, 
        ST59,   8, 
        ST5A,   8, 
        ST5B,   8, 
        ST60,   8, 
        ST61,   8, 
        ST62,   8, 
        ST63,   8, 
        ST64,   8, 
        ST65,   8, 
        ST66,   8, 
        ST67,   8, 
        ST68,   8, 
        ST69,   8, 
        ST6A,   8, 
        ST6B,   8, 
        ST70,   8, 
        ST71,   8, 
        ST72,   8, 
        ST73,   8, 
        ST74,   8, 
        ST75,   8, 
        ST76,   8, 
        ST77,   8, 
        ST78,   8, 
        ST79,   8, 
        ST7A,   8, 
        ST7B,   8, 
        ST80,   8, 
        ST81,   8, 
        ST82,   8, 
        ST83,   8, 
        ST84,   8, 
        ST85,   8, 
        ST86,   8, 
        ST87,   8, 
        ST88,   8, 
        ST89,   8, 
        ST8A,   8, 
        ST8B,   8, 
        SD17,   8, 
        SD18,   8, 
        SD19,   8, 
        SD27,   8, 
        SD28,   8, 
        SD29,   8, 
        SD37,   8, 
        SD38,   8, 
        SD39,   8, 
        AGA6,   8, 
        AGA7,   8, 
        AGA8,   8, 
        AGA9,   8, 
        AGAA,   8, 
        AGAB,   8, 
        AGB6,   8, 
        AGB7,   8, 
        AGB8,   8, 
        AGB9,   8, 
        AGBA,   8, 
        AGBB,   8, 
        UHBS,   32, 
        DUWS,   8, 
        DGBA,   64, 
        L0LC,   8, 
        L1LC,   8, 
        L2LC,   8, 
        L3LC,   8, 
        L4LC,   8, 
        L5LC,   8, 
        ICS0,   32, 
        ICS1,   32, 
        ICS2,   32, 
        ICS3,   32, 
        ICS4,   32, 
        ICS5,   32, 
        XSMI,   32, 
        WWEN,   8, 
        TN2B,   16, 
        TB2R,   16, 
        TR2P,   16, 
        TB2F,   16, 
        TFDI,   16, 
        TBTG,   16, 
        TBTP,   16, 
        D2BA,   64, 
        D2OP,   32, 
        SRLD,   8
    }

    Scope (_SB)
    {
        Name (PD00, Package (0x2A)
        {
            Package (0x04)
            {
                0x001FFFFF, 
                Zero, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                One, 
                Zero, 
                0x0A
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x02, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x03, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                Zero, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                One, 
                Zero, 
                0x0A
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x02, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x03, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                Zero, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                One, 
                Zero, 
                0x0A
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x02, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x03, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                Zero, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                One, 
                Zero, 
                0x0A
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                0x02, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                0x03, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                Zero, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                Zero, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                One, 
                Zero, 
                0x0A
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x02, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x03, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                Zero, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                One, 
                Zero, 
                0x0A
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x02, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                Zero, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                One, 
                Zero, 
                0x0A
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x02, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x03, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                Zero, 
                0x0A
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                Zero, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                Zero, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                Zero, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                Zero, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                Zero, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                One, 
                Zero, 
                0x0A
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                0x02, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                0x03, 
                Zero, 
                0x0B
            }
        })
        Name (AR00, Package (0x48)
        {
            Package (0x04)
            {
                0x001FFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x02, 
                Zero, 
                0x24
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x03, 
                Zero, 
                0x25
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0019FFFF, 
                Zero, 
                Zero, 
                0x1F
            }, 

            Package (0x04)
            {
                0x0019FFFF, 
                One, 
                Zero, 
                0x20
            }, 

            Package (0x04)
            {
                0x0019FFFF, 
                0x02, 
                Zero, 
                0x21
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                Zero, 
                Zero, 
                0x1B
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                One, 
                Zero, 
                0x28
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                0x02, 
                Zero, 
                0x1D
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                0x03, 
                Zero, 
                0x1E
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                Zero, 
                Zero, 
                0x2B
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                One, 
                Zero, 
                0x18
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                0x02, 
                Zero, 
                0x19
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                0x03, 
                Zero, 
                0x26
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                One, 
                Zero, 
                0x22
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                Zero, 
                Zero, 
                0x23
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                One, 
                Zero, 
                0x14
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x02, 
                Zero, 
                0x15
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x03, 
                Zero, 
                0x2A
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                Zero, 
                Zero, 
                0x17
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                One, 
                Zero, 
                0x16
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PD04, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x0A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x0B
            }
        })
        Name (AR04, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PD05, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x0A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x0B
            }
        })
        Name (AR05, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x10
            }
        })
        Name (PD06, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x0A
            }
        })
        Name (AR06, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x11
            }
        })
        Name (PD07, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x0A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x0B
            }
        })
        Name (AR07, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x12
            }
        })
        Name (PD08, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x0A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x0B
            }
        })
        Name (AR08, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PD09, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x0A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x0B
            }
        })
        Name (AR09, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x10
            }
        })
        Name (PD0E, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x0A
            }
        })
        Name (AR0E, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x11
            }
        })
        Name (PD0F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x0A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x0B
            }
        })
        Name (AR0F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x12
            }
        })
        Name (PD02, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x0A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x0B
            }
        })
        Name (AR02, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PD0A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x0A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x0B
            }
        })
        Name (AR0A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x10
            }
        })
        Name (PD0B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x0A
            }
        })
        Name (AR0B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x11
            }
        })
        Name (PD0C, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x0B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x0A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x0B
            }
        })
        Name (AR0C, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x12
            }
        })
        Device (PC00)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_SEG, Zero)  // _SEG: PCI Segment
            Name (_ADR, Zero)  // _ADR: Address
            Method (^BN00, 0, NotSerialized)
            {
                Return (Zero)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BN00 ())
            }

            Name (_UID, Zero)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR00 ())
                }

                Return (PD00 ())
            }

            OperationRegion (HBUS, PCI_Config, Zero, 0x0100)
            Field (HBUS, DWordAcc, NoLock, Preserve)
            {
                Offset (0x40), 
                EPEN,   1, 
                    ,   11, 
                EPBR,   20, 
                Offset (0x48), 
                MHEN,   1, 
                    ,   14, 
                MHBR,   17, 
                Offset (0x50), 
                GCLK,   1, 
                Offset (0x54), 
                D0EN,   1, 
                D1F2,   1, 
                D1F1,   1, 
                D1F0,   1, 
                    ,   9, 
                D6F0,   1, 
                Offset (0x60), 
                PXEN,   1, 
                PXSZ,   3, 
                    ,   22, 
                PXBR,   6, 
                Offset (0x68), 
                DIEN,   1, 
                    ,   11, 
                DIBR,   20, 
                Offset (0x70), 
                    ,   20, 
                MEBR,   12, 
                Offset (0x80), 
                PMLK,   1, 
                    ,   3, 
                PM0H,   2, 
                Offset (0x81), 
                PM1L,   2, 
                    ,   2, 
                PM1H,   2, 
                Offset (0x82), 
                PM2L,   2, 
                    ,   2, 
                PM2H,   2, 
                Offset (0x83), 
                PM3L,   2, 
                    ,   2, 
                PM3H,   2, 
                Offset (0x84), 
                PM4L,   2, 
                    ,   2, 
                PM4H,   2, 
                Offset (0x85), 
                PM5L,   2, 
                    ,   2, 
                PM5H,   2, 
                Offset (0x86), 
                PM6L,   2, 
                    ,   2, 
                PM6H,   2, 
                Offset (0x87), 
                Offset (0xA8), 
                    ,   20, 
                TUUD,   19, 
                Offset (0xBC), 
                    ,   20, 
                TLUD,   12, 
                Offset (0xC8), 
                    ,   7, 
                HTSE,   1
            }

            Name (BUF0, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0100,             // Length
                    ,, _Y00)
                DWordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000CF7,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000CF8,         // Length
                    ,, , TypeStatic, DenseTranslation)
                IO (Decode16,
                    0x0CF8,             // Range Minimum
                    0x0CF8,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                DWordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x00000000,         // Granularity
                    0x00000D00,         // Range Minimum
                    0x0000FFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x0000F300,         // Length
                    ,, , TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000A0000,         // Range Minimum
                    0x000BFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C0000,         // Range Minimum
                    0x000C3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y01, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C4000,         // Range Minimum
                    0x000C7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y02, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C8000,         // Range Minimum
                    0x000CBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y03, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000CC000,         // Range Minimum
                    0x000CFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y04, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D0000,         // Range Minimum
                    0x000D3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y05, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D4000,         // Range Minimum
                    0x000D7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y06, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D8000,         // Range Minimum
                    0x000DBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y07, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000DC000,         // Range Minimum
                    0x000DFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y08, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E0000,         // Range Minimum
                    0x000E3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y09, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E4000,         // Range Minimum
                    0x000E7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y0A, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E8000,         // Range Minimum
                    0x000EBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y0B, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000EC000,         // Range Minimum
                    0x000EFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y0C, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000F0000,         // Range Minimum
                    0x000FFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00010000,         // Length
                    ,, _Y0D, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0xDFFFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0xE0000000,         // Length
                    ,, _Y0E, AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000010000, // Range Minimum
                    0x000000000001FFFF, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000010000, // Length
                    ,, _Y0F, AddressRangeMemory, TypeStatic)
            })
            Name (EP_B, Zero)
            Name (MH_B, Zero)
            Name (PC_B, Zero)
            Name (PC_L, Zero)
            Name (DM_B, Zero)
            Method (GEPB, 0, Serialized)
            {
                If ((EP_B == Zero))
                {
                    EP_B = (EPBR << 0x0C)
                }

                Return (EP_B) /* \_SB_.PC00.EP_B */
            }

            Method (GMHB, 0, Serialized)
            {
                If ((MH_B == Zero))
                {
                    MH_B = (MHBR << 0x0F)
                }

                Return (MH_B) /* \_SB_.PC00.MH_B */
            }

            Method (GPCB, 0, Serialized)
            {
                If ((PC_B == Zero))
                {
                    PC_B = (PXBR << 0x1A)
                }

                Return (PC_B) /* \_SB_.PC00.PC_B */
            }

            Method (PC2M, 1, Serialized)
            {
                Local0 = GPCB ()
                Local0 += ((Arg0 & 0x001F0000) >> One)
                Local0 += ((Arg0 & 0x07) << 0x0C)
                Return (Local0)
            }

            Method (GPCL, 0, Serialized)
            {
                If ((PC_L == Zero))
                {
                    If ((PXSZ < 0x03))
                    {
                        PC_L = (0x10000000 >> PXSZ) /* \_SB_.PC00.PXSZ */
                    }
                    Else
                    {
                        PC_L = 0x10000000
                    }
                }

                Return (PC_L) /* \_SB_.PC00.PC_L */
            }

            Method (GDMB, 0, Serialized)
            {
                If ((DM_B == Zero))
                {
                    DM_B = (DIBR << 0x0C)
                }

                Return (DM_B) /* \_SB_.PC00.DM_B */
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Local0 = GPCL ()
                CreateWordField (BUF0, \_SB.PC00._Y00._MAX, PBMX)  // _MAX: Maximum Base Address
                PBMX = ((Local0 >> 0x14) - 0x02)
                CreateWordField (BUF0, \_SB.PC00._Y00._LEN, PBLN)  // _LEN: Length
                PBLN = ((Local0 >> 0x14) - One)
                If (CondRefOf (\VMDE))
                {
                    If (((VMDE == One) && (PBMX > 0xE0)))
                    {
                        PBMX = 0xE0
                        PBLN = 0xE1
                    }
                }

                If (PM1L)
                {
                    CreateDWordField (BUF0, \_SB.PC00._Y01._LEN, C0LN)  // _LEN: Length
                    C0LN = Zero
                }

                If ((PM1L == One))
                {
                    CreateBitField (BUF0, \_SB.PC00._Y01._RW, C0RW)  // _RW_: Read-Write Status
                    C0RW = Zero
                }

                If (PM1H)
                {
                    CreateDWordField (BUF0, \_SB.PC00._Y02._LEN, C4LN)  // _LEN: Length
                    C4LN = Zero
                }

                If ((PM1H == One))
                {
                    CreateBitField (BUF0, \_SB.PC00._Y02._RW, C4RW)  // _RW_: Read-Write Status
                    C4RW = Zero
                }

                If (PM2L)
                {
                    CreateDWordField (BUF0, \_SB.PC00._Y03._LEN, C8LN)  // _LEN: Length
                    C8LN = Zero
                }

                If ((PM2L == One))
                {
                    CreateBitField (BUF0, \_SB.PC00._Y03._RW, C8RW)  // _RW_: Read-Write Status
                    C8RW = Zero
                }

                If (PM2H)
                {
                    CreateDWordField (BUF0, \_SB.PC00._Y04._LEN, CCLN)  // _LEN: Length
                    CCLN = Zero
                }

                If ((PM2H == One))
                {
                    CreateBitField (BUF0, \_SB.PC00._Y04._RW, CCRW)  // _RW_: Read-Write Status
                    CCRW = Zero
                }

                If (PM3L)
                {
                    CreateDWordField (BUF0, \_SB.PC00._Y05._LEN, D0LN)  // _LEN: Length
                    D0LN = Zero
                }

                If ((PM3L == One))
                {
                    CreateBitField (BUF0, \_SB.PC00._Y05._RW, D0RW)  // _RW_: Read-Write Status
                    D0RW = Zero
                }

                If (PM3H)
                {
                    CreateDWordField (BUF0, \_SB.PC00._Y06._LEN, D4LN)  // _LEN: Length
                    D4LN = Zero
                }

                If ((PM3H == One))
                {
                    CreateBitField (BUF0, \_SB.PC00._Y06._RW, D4RW)  // _RW_: Read-Write Status
                    D4RW = Zero
                }

                If (PM4L)
                {
                    CreateDWordField (BUF0, \_SB.PC00._Y07._LEN, D8LN)  // _LEN: Length
                    D8LN = Zero
                }

                If ((PM4L == One))
                {
                    CreateBitField (BUF0, \_SB.PC00._Y07._RW, D8RW)  // _RW_: Read-Write Status
                    D8RW = Zero
                }

                If (PM4H)
                {
                    CreateDWordField (BUF0, \_SB.PC00._Y08._LEN, DCLN)  // _LEN: Length
                    DCLN = Zero
                }

                If ((PM4H == One))
                {
                    CreateBitField (BUF0, \_SB.PC00._Y08._RW, DCRW)  // _RW_: Read-Write Status
                    DCRW = Zero
                }

                If (PM5L)
                {
                    CreateDWordField (BUF0, \_SB.PC00._Y09._LEN, E0LN)  // _LEN: Length
                    E0LN = Zero
                }

                If ((PM5L == One))
                {
                    CreateBitField (BUF0, \_SB.PC00._Y09._RW, E0RW)  // _RW_: Read-Write Status
                    E0RW = Zero
                }

                If (PM5H)
                {
                    CreateDWordField (BUF0, \_SB.PC00._Y0A._LEN, E4LN)  // _LEN: Length
                    E4LN = Zero
                }

                If ((PM5H == One))
                {
                    CreateBitField (BUF0, \_SB.PC00._Y0A._RW, E4RW)  // _RW_: Read-Write Status
                    E4RW = Zero
                }

                If (PM6L)
                {
                    CreateDWordField (BUF0, \_SB.PC00._Y0B._LEN, E8LN)  // _LEN: Length
                    E8LN = Zero
                }

                If ((PM6L == One))
                {
                    CreateBitField (BUF0, \_SB.PC00._Y0B._RW, E8RW)  // _RW_: Read-Write Status
                    E8RW = Zero
                }

                If (PM6H)
                {
                    CreateDWordField (BUF0, \_SB.PC00._Y0C._LEN, ECLN)  // _LEN: Length
                    ECLN = Zero
                }

                If ((PM6H == One))
                {
                    CreateBitField (BUF0, \_SB.PC00._Y0C._RW, ECRW)  // _RW_: Read-Write Status
                    ECRW = Zero
                }

                If (PM0H)
                {
                    CreateDWordField (BUF0, \_SB.PC00._Y0D._LEN, F0LN)  // _LEN: Length
                    F0LN = Zero
                }

                If ((PM0H == One))
                {
                    CreateBitField (BUF0, \_SB.PC00._Y0D._RW, F0RW)  // _RW_: Read-Write Status
                    F0RW = Zero
                }

                CreateDWordField (BUF0, \_SB.PC00._Y0E._MIN, M1MN)  // _MIN: Minimum Base Address
                CreateDWordField (BUF0, \_SB.PC00._Y0E._MAX, M1MX)  // _MAX: Maximum Base Address
                CreateDWordField (BUF0, \_SB.PC00._Y0E._LEN, M1LN)  // _LEN: Length
                M1LN = M32L /* \M32L */
                M1MN = M32B /* \M32B */
                M1MX = ((M1MN + M1LN) - One)
                If ((M64L == Zero))
                {
                    CreateQWordField (BUF0, \_SB.PC00._Y0F._LEN, MSLN)  // _LEN: Length
                    MSLN = Zero
                }
                Else
                {
                    CreateQWordField (BUF0, \_SB.PC00._Y0F._LEN, M2LN)  // _LEN: Length
                    CreateQWordField (BUF0, \_SB.PC00._Y0F._MIN, M2MN)  // _MIN: Minimum Base Address
                    CreateQWordField (BUF0, \_SB.PC00._Y0F._MAX, M2MX)  // _MAX: Maximum Base Address
                    M2LN = M64L /* \M64L */
                    M2MN = M64B /* \M64B */
                    M2MX = ((M2MN + M2LN) - One)
                }

                Return (BUF0) /* \_SB_.PC00.BUF0 */
            }

            Name (GUID, ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */)
            Name (SUPP, Zero)
            Name (CTRL, Zero)
            Name (XCNT, Zero)
            Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
            {
                Local0 = Arg3
                CreateDWordField (Local0, Zero, CDW1)
                CreateDWordField (Local0, 0x04, CDW2)
                CreateDWordField (Local0, 0x08, CDW3)
                If ((Arg0 == GUID))
                {
                    SUPP = CDW2 /* \_SB_.PC00._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.PC00._OSC.CDW3 */
                    If (!NEXP)
                    {
                        CTRL &= 0xFFFFFFF8
                    }

                    If (CondRefOf (ITSP))
                    {
                        If (ITSP)
                        {
                            CTRL &= 0xFFFFFFF7
                        }
                    }

                    If (~(CDW1 & One))
                    {
                        If ((CTRL & One))
                        {
                            NHPG ()
                        }

                        If ((CTRL & 0x04))
                        {
                            NPME ()
                        }
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.PC00.CTRL */
                    OSCC = CTRL /* \_SB_.PC00.CTRL */
                    Return (Local0)
                }
                Else
                {
                    CDW1 |= 0x04
                    Return (Local0)
                }
            }

            Scope (\_SB.PC00)
            {
                Method (AR00, 0, NotSerialized)
                {
                    Return (^^AR00) /* \_SB_.AR00 */
                }

                Method (PD00, 0, NotSerialized)
                {
                    Return (^^PD00) /* \_SB_.PD00 */
                }

                Method (AR04, 0, NotSerialized)
                {
                    Return (^^AR04) /* \_SB_.AR04 */
                }

                Method (PD04, 0, NotSerialized)
                {
                    Return (^^PD04) /* \_SB_.PD04 */
                }

                Method (AR05, 0, NotSerialized)
                {
                    Return (^^AR05) /* \_SB_.AR05 */
                }

                Method (PD05, 0, NotSerialized)
                {
                    Return (^^PD05) /* \_SB_.PD05 */
                }

                Method (AR06, 0, NotSerialized)
                {
                    Return (^^AR06) /* \_SB_.AR06 */
                }

                Method (PD06, 0, NotSerialized)
                {
                    Return (^^PD06) /* \_SB_.PD06 */
                }

                Method (AR07, 0, NotSerialized)
                {
                    Return (^^AR07) /* \_SB_.AR07 */
                }

                Method (PD07, 0, NotSerialized)
                {
                    Return (^^PD07) /* \_SB_.PD07 */
                }

                Method (AR08, 0, NotSerialized)
                {
                    Return (^^AR08) /* \_SB_.AR08 */
                }

                Method (PD08, 0, NotSerialized)
                {
                    Return (^^PD08) /* \_SB_.PD08 */
                }

                Method (AR09, 0, NotSerialized)
                {
                    Return (^^AR09) /* \_SB_.AR09 */
                }

                Method (PD09, 0, NotSerialized)
                {
                    Return (^^PD09) /* \_SB_.PD09 */
                }

                Device (PEG0)
                {
                    Name (_ADR, 0x00060000)  // _ADR: Address
                    Device (PEGP)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                    }
                }

                Device (PEG1)
                {
                    Name (_ADR, 0x00010000)  // _ADR: Address
                    Device (PEGP)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                    }
                }

                Device (PEG2)
                {
                    Name (_ADR, 0x00010001)  // _ADR: Address
                    Device (PEGP)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                    }
                }

                If ((MPGN >= 0x04))
                {
                    Device (PEG3)
                    {
                        Name (_ADR, 0x00010002)  // _ADR: Address
                        Device (PEGP)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                        }
                    }
                }

                Device (GFX0)
                {
                    Name (_ADR, 0x00020000)  // _ADR: Address
                }

                Device (TCPU)
                {
                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        If (PCIC (Arg0))
                        {
                            Return (PCID (Arg0, Arg1, Arg2, Arg3))
                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }

                    Name (_ADR, 0x00040000)  // _ADR: Address
                }

                Device (IPU0)
                {
                    Name (_ADR, 0x00050000)  // _ADR: Address
                }

                Device (GNA0)
                {
                    Name (_ADR, 0x00080000)  // _ADR: Address
                }
            }
        }
    }

    Scope (_SB)
    {
        Device (AWAC)
        {
            Name (_HID, "ACPI000E" /* Time and Alarm Device */)  // _HID: Hardware ID
            Name (WAST, Zero)
            Name (WTTR, Zero)
            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x72, 0x04))
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((STAS == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_GCP, 0, NotSerialized)  // _GCP: Get Capabilities
            {
                Return (0xB7)
            }

            OperationRegion (RTCM, SystemCMOS, Zero, 0x3F)
            Field (RTCM, ByteAcc, Lock, Preserve)
            {
                SEC,    8, 
                Offset (0x02), 
                MIN,    8, 
                Offset (0x04), 
                HOR,    8, 
                Offset (0x07), 
                DAY,    8, 
                MON,    8, 
                YEAR,   8, 
                Offset (0x32), 
                CNTY,   8
            }

            Method (_GRT, 0, Serialized)  // _GRT: Get Real Time
            {
                Name (BUFF, Buffer (0x10) {})
                CreateWordField (BUFF, Zero, Y)
                CreateByteField (BUFF, 0x02, M)
                CreateByteField (BUFF, 0x03, D)
                CreateByteField (BUFF, 0x04, H)
                CreateByteField (BUFF, 0x05, MIN1)
                CreateByteField (BUFF, 0x06, S)
                CreateByteField (BUFF, 0x07, V)
                CreateWordField (BUFF, 0x0A, TZ)
                CreateByteField (BUFF, 0x0C, DL)
                FromBCD (YEAR, Local5)
                FromBCD (CNTY, Local6)
                Y = ((Local6 * 0x64) + Local5)
                FromBCD (MON, M) /* \_SB_.AWAC._GRT.M___ */
                FromBCD (DAY, D) /* \_SB_.AWAC._GRT.D___ */
                FromBCD (HOR, H) /* \_SB_.AWAC._GRT.H___ */
                FromBCD (MIN, MIN1) /* \_SB_.AWAC._GRT.MIN1 */
                FromBCD (SEC, S) /* \_SB_.AWAC._GRT.S___ */
                TZ = 0x07FF
                DL = Zero
                V = One
                Return (BUFF) /* \_SB_.AWAC._GRT.BUFF */
            }

            Method (_SRT, 1, NotSerialized)  // _SRT: Set Real Time
            {
                CreateWordField (Arg0, Zero, Y)
                CreateByteField (Arg0, 0x02, M)
                CreateByteField (Arg0, 0x03, D)
                CreateByteField (Arg0, 0x04, H)
                CreateByteField (Arg0, 0x05, MIN1)
                CreateByteField (Arg0, 0x06, S)
                Divide (Y, 0x64, Local5, Local4)
                ToBCD (Local4, CNTY) /* \_SB_.AWAC.CNTY */
                ToBCD (Local5, YEAR) /* \_SB_.AWAC.YEAR */
                ToBCD (M, MON) /* \_SB_.AWAC.MON_ */
                ToBCD (D, DAY) /* \_SB_.AWAC.DAY_ */
                ToBCD (H, HOR) /* \_SB_.AWAC.HOR_ */
                ToBCD (MIN1, MIN) /* \_SB_.AWAC.MIN_ */
                ToBCD (S, SEC) /* \_SB_.AWAC.SEC_ */
                Return (Zero)
            }

            Method (_GWS, 1, Serialized)  // _GWS: Get Wake Status
            {
                Local0 = Zero
                If ((Arg0 == Zero))
                {
                    If (((ACWA == 0xFFFFFFFF) && (One & WTTR)))
                    {
                        Local0 |= One
                        WTTR ^= One /* \_SB_.AWAC.WTTR */
                    }
                }
                ElseIf (((DCWA == 0xFFFFFFFF) && (0x02 & WTTR)))
                {
                    Local0 |= One
                    WTTR ^= 0x02 /* \_SB_.AWAC.WTTR */
                }

                If (WAST)
                {
                    Local0 |= 0x02
                    WAST = Zero
                }

                Return (Local0)
            }

            Method (_CWS, 1, NotSerialized)  // _CWS: Clear Wake Alarm Status
            {
                Return (Zero)
            }

            Method (_STP, 2, NotSerialized)  // _STP: Set Expired Timer Wake Policy
            {
                If ((Arg0 == Zero))
                {
                    ACET = Arg1
                }
                Else
                {
                    DCET = Arg1
                }

                Return (Zero)
            }

            Method (_STV, 2, Serialized)  // _STV: Set Timer Value
            {
                If ((Arg0 == Zero))
                {
                    ACWA = Arg1
                    WTTR |= One /* \_SB_.AWAC.WTTR */
                }
                Else
                {
                    DCWA = Arg1
                    WTTR |= 0x02 /* \_SB_.AWAC.WTTR */
                }

                Return (Zero)
            }

            Method (_TIP, 1, NotSerialized)  // _TIP: Expired Timer Wake Policy
            {
                If ((Arg0 == Zero))
                {
                    Return (ACET) /* \ACET */
                }
                Else
                {
                    Return (DCET) /* \DCET */
                }
            }

            Method (_TIV, 1, NotSerialized)  // _TIV: Timer Values
            {
                If ((Arg0 == Zero))
                {
                    Return (ACWA) /* \ACWA */
                }
                Else
                {
                    Return (DCWA) /* \DCWA */
                }
            }
        }
    }

    OperationRegion (OGNS, SystemMemory, 0x45A83D18, 0x00000010)
    Field (OGNS, AnyAcc, Lock, Preserve)
    {
        OG00,   8, 
        OG01,   8, 
        OG02,   8, 
        OG03,   8, 
        OG04,   8, 
        OG05,   8, 
        OG06,   8, 
        OG07,   8, 
        OG08,   8, 
        OG09,   8, 
        OG10,   8, 
        ECFG,   8, 
        DGRP,   32
    }

    Name (BUFN, Zero)
    Name (MBUF, Buffer (0x1000) {})
    OperationRegion (MDBG, SystemMemory, 0x45A60018, 0x00001004)
    Field (MDBG, AnyAcc, Lock, Preserve)
    {
        MDG0,   32768
    }

    Method (DB2H, 1, Serialized)
    {
        If (SRLD)
        {
            SHOW (Arg0)
            MDGC (0x20)
            MDG0 = MBUF /* \MBUF */
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (DW2H, 1, Serialized)
    {
        Local0 = Arg0
        Local1 = (Arg0 >> 0x08)
        Local0 &= 0xFF
        Local1 &= 0xFF
        DB2H (Local1)
        BUFN--
        DB2H (Local0)
    }

    Method (DD2H, 1, Serialized)
    {
        Local0 = Arg0
        Local1 = (Arg0 >> 0x10)
        Local0 &= 0xFFFF
        Local1 &= 0xFFFF
        DW2H (Local1)
        BUFN--
        DW2H (Local0)
    }

    Method (MBGS, 1, Serialized)
    {
        If (SRLD)
        {
            Local0 = SizeOf (Arg0)
            Name (BUFS, Buffer (Local0) {})
            BUFS = Arg0
            MDGC (0x20)
            While (Local0)
            {
                MDGC (DerefOf (BUFS [(SizeOf (Arg0) - Local0)]))
                Local0--
            }

            MDG0 = MBUF /* \MBUF */
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (SDBG, 1, Serialized)
    {
        OperationRegion (U3F8, SystemIO, 0x03F8, 0x10)
        Field (U3F8, ByteAcc, Lock, Preserve)
        {
            TXBF,   8, 
            DLM,    8, 
            FCR,    8, 
            LCR,    8
        }

        LCR = 0x83
        TXBF = One
        DLM = Zero
        FCR = 0xE1
        LCR = 0x03
        DLM = Zero
        ToHexString (Arg0, Local3)
        Local4 = SizeOf (Local3)
        Local5 = Zero
        While ((Local5 < Local4))
        {
            Mid (Local3, Local5, One, TXBF) /* \SDBG.TXBF */
            Stall (0x64)
            Local5++
        }

        Stall (0x64)
        TXBF = 0x0D
        Stall (0x64)
        TXBF = 0x0A
    }

    Method (ADBG, 1, Serialized)
    {
        If ((SRLD & One))
        {
            If ((SRLD & 0x02))
            {
                SDBG (Arg0)
            }

            ToHexString (Arg0, Local1)
            Local0 = SizeOf (Local1)
            Name (BUFS, Buffer (Local0) {})
            BUFS = Local1
            MDGC (0x20)
            While (Local0)
            {
                MDGC (DerefOf (BUFS [(SizeOf (Local1) - Local0)]))
                Local0--
            }

            MDG0 = MBUF /* \MBUF */
        }
    }

    Method (SHOW, 1, Serialized)
    {
        MDGC (NTOC ((Arg0 >> 0x04)))
        MDGC (NTOC (Arg0))
    }

    Method (LINE, 0, Serialized)
    {
        Local0 = BUFN /* \BUFN */
        Local0 &= 0x0F
        While (Local0)
        {
            MDGC (Zero)
            Local0++
            Local0 &= 0x0F
        }
    }

    Method (MDGC, 1, Serialized)
    {
        MBUF [BUFN] = Arg0
        BUFN += One
        If ((BUFN > 0x0FFF))
        {
            BUFN &= 0x0FFF
            UP_L (0x0F)
        }
    }

    Method (UP_L, 1, Serialized)
    {
        Local2 = Arg0
        Local2 <<= 0x04
        MOVE (Local2)
        Local3 = (0x1000 - Local2)
        While (Local2)
        {
            MBUF [Local3] = Zero
            Local3++
            Local2--
        }
    }

    Method (MOVE, 1, Serialized)
    {
        Local4 = Arg0
        BUFN = Zero
        Local5 = (0x1000 - Local4)
        While (Local5)
        {
            Local5--
            MBUF [BUFN] = DerefOf (MBUF [Local4])
            BUFN++
            Local4++
        }
    }

    Method (NTOC, 1, Serialized)
    {
        Local0 = (Arg0 & 0x0F)
        If ((Local0 < 0x0A))
        {
            Local0 += 0x30
        }
        Else
        {
            Local0 += 0x37
        }

        Return (Local0)
    }

    If ((ECR1 == One))
    {
        Scope (_SB.PC00)
        {
            Name (PCIG, ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */)
            Method (PCID, 4, Serialized)
            {
                If ((Arg0 == PCIG))
                {
                    If ((Arg1 >= 0x03))
                    {
                        If ((Arg2 == Zero))
                        {
                            Return (Buffer (0x02)
                            {
                                 0x01, 0x03                                       // ..
                            })
                        }

                        If ((Arg2 == 0x08))
                        {
                            Return (One)
                        }

                        If ((Arg2 == 0x09))
                        {
                            Return (Package (0x05)
                            {
                                0xC350, 
                                Ones, 
                                Ones, 
                                0xC350, 
                                Ones
                            })
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }

    Scope (_SB.PC00)
    {
        Method (PCIC, 1, Serialized)
        {
            If ((ECR1 == One))
            {
                If ((Arg0 == PCIG))
                {
                    Return (One)
                }
            }

            Return (Zero)
        }

        Method (IICB, 2, Serialized)
        {
            Switch (ToInteger (Arg1))
            {
                Case (Zero)
                {
                    Name (IIC0, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C0",
                            0x00, ResourceConsumer, _Y10, Exclusive,
                            )
                    })
                    CreateWordField (IIC0, \_SB.PC00.IICB._Y10._ADR, DAD0)  // _ADR: Address
                    DAD0 = Arg0
                    Return (IIC0) /* \_SB_.PC00.IICB.IIC0 */
                }
                Case (One)
                {
                    Name (IIC1, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C1",
                            0x00, ResourceConsumer, _Y11, Exclusive,
                            )
                    })
                    CreateWordField (IIC1, \_SB.PC00.IICB._Y11._ADR, DAD1)  // _ADR: Address
                    DAD1 = Arg0
                    Return (IIC1) /* \_SB_.PC00.IICB.IIC1 */
                }
                Case (0x02)
                {
                    Name (IIC2, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C2",
                            0x00, ResourceConsumer, _Y12, Exclusive,
                            )
                    })
                    CreateWordField (IIC2, \_SB.PC00.IICB._Y12._ADR, DAD2)  // _ADR: Address
                    DAD2 = Arg0
                    Return (IIC2) /* \_SB_.PC00.IICB.IIC2 */
                }
                Case (0x03)
                {
                    Name (IIC3, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C3",
                            0x00, ResourceConsumer, _Y13, Exclusive,
                            )
                    })
                    CreateWordField (IIC3, \_SB.PC00.IICB._Y13._ADR, DAD3)  // _ADR: Address
                    DAD3 = Arg0
                    Return (IIC3) /* \_SB_.PC00.IICB.IIC3 */
                }
                Case (0x04)
                {
                    Name (IIC4, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C4",
                            0x00, ResourceConsumer, _Y14, Exclusive,
                            )
                    })
                    CreateWordField (IIC4, \_SB.PC00.IICB._Y14._ADR, DAD4)  // _ADR: Address
                    DAD4 = Arg0
                    Return (IIC4) /* \_SB_.PC00.IICB.IIC4 */
                }
                Case (0x05)
                {
                    Name (IIC5, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C5",
                            0x00, ResourceConsumer, _Y15, Exclusive,
                            )
                    })
                    CreateWordField (IIC5, \_SB.PC00.IICB._Y15._ADR, DAD5)  // _ADR: Address
                    DAD5 = Arg0
                    Return (IIC5) /* \_SB_.PC00.IICB.IIC5 */
                }
                Default
                {
                    Return (Zero)
                }

            }
        }

        Method (VIIC, 1, Serialized)
        {
            Name (VIC0, ResourceTemplate ()
            {
                I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                    AddressingMode7Bit, "\\_SB.PC00.XHCI.RHUB.HS04.VI2C",
                    0x00, ResourceConsumer, _Y16, Exclusive,
                    )
            })
            CreateWordField (VIC0, \_SB.PC00.VIIC._Y16._ADR, DADR)  // _ADR: Address
            DADR = Arg0
            Return (VIC0) /* \_SB_.PC00.VIIC.VIC0 */
        }

        Method (INTB, 3, Serialized)
        {
            Name (INTR, ResourceTemplate ()
            {
                Interrupt (ResourceConsumer, Level, ActiveLow, ExclusiveAndWake, ,, _Y17)
                {
                    0x00000000,
                }
            })
            CreateDWordField (INTR, \_SB.PC00.INTB._Y17._INT, NUMI)  // _INT: Interrupts
            NUMI = INUM (Arg0)
            CreateByteField (INTR, 0x03, LEVI)
            LEVI = Arg1
            CreateByteField (INTR, 0x03, ACTI)
            ACTI = Arg2
            Return (INTR) /* \_SB_.PC00.INTB.INTR */
        }
    }

    Name (PCHH, One)
    Name (PCHN, 0x03)
    Name (PCHL, 0x02)
    Name (PNVB, 0x45A83018)
    Name (PNVL, 0x02D8)
    OperationRegion (PNVA, SystemMemory, PNVB, PNVL)
    Field (PNVA, AnyAcc, Lock, Preserve)
    {
        PCHS,   16, 
        PCHG,   16, 
        PSTP,   16, 
        RPA1,   32, 
        RPA2,   32, 
        RPA3,   32, 
        RPA4,   32, 
        RPA5,   32, 
        RPA6,   32, 
        RPA7,   32, 
        RPA8,   32, 
        RPA9,   32, 
        RPAA,   32, 
        RPAB,   32, 
        RPAC,   32, 
        RPAD,   32, 
        RPAE,   32, 
        RPAF,   32, 
        RPAG,   32, 
        RPAH,   32, 
        RPAI,   32, 
        RPAJ,   32, 
        RPAK,   32, 
        RPAL,   32, 
        RPAM,   32, 
        RPAN,   32, 
        RPAO,   32, 
        RPAP,   32, 
        RPAQ,   32, 
        RPAR,   32, 
        RPAS,   32, 
        NHLA,   64, 
        NHLL,   32, 
        ADFM,   32, 
        SWQ0,   8, 
        SWQ1,   8, 
        SWQ2,   8, 
        SWQ3,   8, 
        ACS0,   8, 
        ACS1,   8, 
        ACS2,   8, 
        ACS3,   8, 
        DAI0,   8, 
        DAI1,   8, 
        DAI2,   8, 
        DAI3,   8, 
        DOD0,   8, 
        DOD1,   8, 
        DOD2,   8, 
        DOD3,   8, 
        SWMC,   8, 
        XTAL,   8, 
        DSPM,   32, 
        SBRG,   32, 
        GEI0,   8, 
        GEI1,   8, 
        GEI2,   8, 
        GED0,   8, 
        GED1,   8, 
        GED2,   8, 
        PML1,   16, 
        PML2,   16, 
        PML3,   16, 
        PML4,   16, 
        PML5,   16, 
        PML6,   16, 
        PML7,   16, 
        PML8,   16, 
        PML9,   16, 
        PMLA,   16, 
        PMLB,   16, 
        PMLC,   16, 
        PMLD,   16, 
        PMLE,   16, 
        PMLF,   16, 
        PMLG,   16, 
        PMLH,   16, 
        PMLI,   16, 
        PMLJ,   16, 
        PMLK,   16, 
        PMLL,   16, 
        PMLM,   16, 
        PMLN,   16, 
        PMLO,   16, 
        PMLP,   16, 
        PMLQ,   16, 
        PMLR,   16, 
        PMLS,   16, 
        PNL1,   16, 
        PNL2,   16, 
        PNL3,   16, 
        PNL4,   16, 
        PNL5,   16, 
        PNL6,   16, 
        PNL7,   16, 
        PNL8,   16, 
        PNL9,   16, 
        PNLA,   16, 
        PNLB,   16, 
        PNLC,   16, 
        PNLD,   16, 
        PNLE,   16, 
        PNLF,   16, 
        PNLG,   16, 
        PNLH,   16, 
        PNLI,   16, 
        PNLJ,   16, 
        PNLK,   16, 
        PNLL,   16, 
        PNLM,   16, 
        PNLN,   16, 
        PNLO,   16, 
        PNLP,   16, 
        PNLQ,   16, 
        PNLR,   16, 
        PNLS,   16, 
        XHPC,   8, 
        XRPC,   8, 
        XSPC,   8, 
        XSPA,   8, 
        HPTB,   32, 
        HPTE,   8, 
        SM00,   8, 
        SM01,   8, 
        SM02,   8, 
        SM03,   8, 
        SM04,   8, 
        SM05,   8, 
        SM06,   8, 
        SC00,   64, 
        SC01,   64, 
        SC02,   64, 
        SC03,   64, 
        SC04,   64, 
        SC05,   64, 
        SC06,   64, 
        IM00,   8, 
        IM01,   8, 
        IM02,   8, 
        IM03,   8, 
        IM04,   8, 
        IM05,   8, 
        IM06,   8, 
        IM07,   8, 
        IC00,   64, 
        IC01,   64, 
        IC02,   64, 
        IC03,   64, 
        IC04,   64, 
        IC05,   64, 
        IC06,   64, 
        IC07,   64, 
        UM00,   8, 
        UM01,   8, 
        UM02,   8, 
        UM03,   8, 
        UM04,   8, 
        UM05,   8, 
        UM06,   8, 
        UC00,   64, 
        UC01,   64, 
        UC02,   64, 
        UC03,   64, 
        UC04,   64, 
        UC05,   64, 
        UC06,   64, 
        UD00,   8, 
        UD01,   8, 
        UD02,   8, 
        UD03,   8, 
        UD04,   8, 
        UD05,   8, 
        UD06,   8, 
        UP00,   8, 
        UP01,   8, 
        UP02,   8, 
        UP03,   8, 
        UP04,   8, 
        UP05,   8, 
        UP06,   8, 
        UI00,   8, 
        UI01,   8, 
        UI02,   8, 
        UI03,   8, 
        UI04,   8, 
        UI05,   8, 
        UI06,   8, 
        SGIR,   8, 
        GPHD,   8, 
        NIT1,   8, 
        NIT2,   8, 
        NIT3,   8, 
        NPM1,   8, 
        NPM2,   8, 
        NPM3,   8, 
        NPC1,   8, 
        NPC2,   8, 
        NPC3,   8, 
        NL11,   16, 
        NL12,   16, 
        NL13,   16, 
        ND21,   8, 
        ND22,   8, 
        ND23,   8, 
        ND11,   32, 
        ND12,   32, 
        ND13,   32, 
        NLR1,   16, 
        NLR2,   16, 
        NLR3,   16, 
        NLD1,   32, 
        NLD2,   32, 
        NLD3,   32, 
        NEA1,   16, 
        NEA2,   16, 
        NEA3,   16, 
        NEB1,   16, 
        NEB2,   16, 
        NEB3,   16, 
        NEC1,   16, 
        NEC2,   16, 
        NEC3,   16, 
        NRA1,   16, 
        NRA2,   16, 
        NRA3,   16, 
        NMB1,   32, 
        NMB2,   32, 
        NMB3,   32, 
        NMV1,   32, 
        NMV2,   32, 
        NMV3,   32, 
        NPB1,   32, 
        NPB2,   32, 
        NPB3,   32, 
        NPV1,   32, 
        NPV2,   32, 
        NPV3,   32, 
        NRP1,   32, 
        NRP2,   32, 
        NRP3,   32, 
        EMH4,   8, 
        EMDS,   8, 
        CSKU,   8, 
        ITA0,   16, 
        ITA1,   16, 
        ITA2,   16, 
        ITA3,   16, 
        ITS0,   8, 
        ITS1,   8, 
        ITS2,   8, 
        ITS3,   8, 
        PMBS,   16, 
        PWRM,   32, 
        CNVI,   8, 
        CBTC,   8, 
        CBTA,   8, 
        PTHM,   8, 
        PSON,   8, 
        LTR1,   8, 
        LTR2,   8, 
        LTR3,   8, 
        LTR4,   8, 
        LTR5,   8, 
        LTR6,   8, 
        LTR7,   8, 
        LTR8,   8, 
        LTR9,   8, 
        LTRA,   8, 
        LTRB,   8, 
        LTRC,   8, 
        LTRD,   8, 
        LTRE,   8, 
        LTRF,   8, 
        LTRG,   8, 
        LTRH,   8, 
        LTRI,   8, 
        LTRJ,   8, 
        LTRK,   8, 
        LTRL,   8, 
        LTRM,   8, 
        LTRN,   8, 
        LTRO,   8, 
        GBES,   8, 
        PPDS,   32, 
        EMCE,   8, 
        SDCE,   8, 
        TGEA,   8, 
        TGEB,   8, 
        CR00,   8, 
        CR01,   8, 
        CR02,   8, 
        CR03,   8, 
        CR04,   8, 
        CR05,   8, 
        CR06,   8, 
        CR07,   8, 
        CR08,   8, 
        CR09,   8, 
        CR10,   8, 
        CR11,   8, 
        CR12,   8, 
        CR13,   8, 
        CR14,   8, 
        CR15,   8, 
        CR16,   8, 
        CR17,   8, 
        TCOB,   16, 
        ICKP,   16, 
        PCNV,   16, 
        HBSL,   32, 
        SPPR,   8
    }

    Scope (_SB)
    {
        OperationRegion (ICLK, SystemMemory, (SBRG + ((ICKP << 0x10) + 0x8000)), 0x40)
        If ((PCHS == PCHL))
        {
            Field (ICLK, AnyAcc, Lock, Preserve)
            {
                CLL0,   8, 
                Offset (0x0C), 
                CLL1,   8, 
                Offset (0x18), 
                CLL2,   8, 
                Offset (0x24), 
                CLL3,   8, 
                Offset (0x30), 
                CLL4,   8, 
                Offset (0x3C), 
                CLL5,   8
            }
        }
        Else
        {
            Field (ICLK, AnyAcc, Lock, Preserve)
            {
                CLH0,   8, 
                Offset (0x0C), 
                CLH1,   8
            }
        }

        Method (NCLK, 0, NotSerialized)
        {
            If ((PCHS == PCHL))
            {
                Return (0x06)
            }
            Else
            {
                Return (0x02)
            }
        }

        Method (CLKC, 2, Serialized)
        {
            If ((PCHS == PCHL))
            {
                Switch (Arg0)
                {
                    Case (Zero)
                    {
                        Local0 = CLL0 /* \_SB_.CLL0 */
                        CLL0 = ((Local0 & 0xFFFFFFFFFFFFFFFD) | (Arg1 << One))
                    }
                    Case (One)
                    {
                        Local0 = CLL1 /* \_SB_.CLL1 */
                        CLL1 = ((Local0 & 0xFFFFFFFFFFFFFFFD) | (Arg1 << One))
                    }
                    Case (0x02)
                    {
                        Local0 = CLL2 /* \_SB_.CLL2 */
                        CLL2 = ((Local0 & 0xFFFFFFFFFFFFFFFD) | (Arg1 << One))
                    }
                    Case (0x03)
                    {
                        Local0 = CLL3 /* \_SB_.CLL3 */
                        CLL3 = ((Local0 & 0xFFFFFFFFFFFFFFFD) | (Arg1 << One))
                    }
                    Case (0x04)
                    {
                        Local0 = CLL4 /* \_SB_.CLL4 */
                        CLL4 = ((Local0 & 0xFFFFFFFFFFFFFFFD) | (Arg1 << One))
                    }
                    Case (0x05)
                    {
                        Local0 = CLL5 /* \_SB_.CLL5 */
                        CLL5 = ((Local0 & 0xFFFFFFFFFFFFFFFD) | (Arg1 << One))
                    }

                }
            }
            Else
            {
                Switch (Arg0)
                {
                    Case (Zero)
                    {
                        Local0 = CLH0 /* \_SB_.CLH0 */
                        CLH0 = ((Local0 & 0xFFFFFFFFFFFFFFFD) | (Arg1 << One))
                    }
                    Case (One)
                    {
                        Local0 = CLH1 /* \_SB_.CLH1 */
                        CLH1 = ((Local0 & 0xFFFFFFFFFFFFFFFD) | (Arg1 << One))
                    }

                }
            }
        }

        Method (CLKF, 2, Serialized)
        {
            If ((PCHS == PCHL))
            {
                Switch (Arg0)
                {
                    Case (Zero)
                    {
                        Local0 = CLL0 /* \_SB_.CLL0 */
                        CLL0 = ((Local0 & 0xFFFFFFFFFFFFFFFE) | Arg1)
                    }
                    Case (One)
                    {
                        Local0 = CLL1 /* \_SB_.CLL1 */
                        CLL1 = ((Local0 & 0xFFFFFFFFFFFFFFFE) | Arg1)
                    }
                    Case (0x02)
                    {
                        Local0 = CLL2 /* \_SB_.CLL2 */
                        CLL2 = ((Local0 & 0xFFFFFFFFFFFFFFFE) | Arg1)
                    }
                    Case (0x03)
                    {
                        Local0 = CLL3 /* \_SB_.CLL3 */
                        CLL3 = ((Local0 & 0xFFFFFFFFFFFFFFFE) | Arg1)
                    }
                    Case (0x04)
                    {
                        Local0 = CLL4 /* \_SB_.CLL4 */
                        CLL4 = ((Local0 & 0xFFFFFFFFFFFFFFFE) | Arg1)
                    }
                    Case (0x05)
                    {
                        Local0 = CLL5 /* \_SB_.CLL5 */
                        CLL5 = ((Local0 & 0xFFFFFFFFFFFFFFFE) | Arg1)
                    }

                }
            }
            Else
            {
                Switch (Arg0)
                {
                    Case (Zero)
                    {
                        Local0 = CLH0 /* \_SB_.CLH0 */
                        CLH0 = ((Local0 & 0xFFFFFFFFFFFFFFFE) | Arg1)
                    }
                    Case (One)
                    {
                        Local0 = CLH1 /* \_SB_.CLH1 */
                        CLH1 = ((Local0 & 0xFFFFFFFFFFFFFFFE) | Arg1)
                    }

                }
            }
        }
    }

    Scope (_SB)
    {
        Name (GPCL, Package (0x12)
        {
            Package (0x07)
            {
                0x006E0000, 
                0x1A, 
                0x0700, 
                0xB0, 
                0x20, 
                0x0140, 
                Zero
            }, 

            Package (0x07)
            {
                0x006E0000, 
                0x10, 
                0x08A0, 
                0xB4, 
                0x30, 
                0x0144, 
                0x20
            }, 

            Package (0x07)
            {
                0x006E0000, 
                0x19, 
                0x09A0, 
                0xB8, 
                0x38, 
                0x0148, 
                0x40
            }, 

            Package (0x07)
            {
                0x00690000, 
                0x08, 
                0x0700, 
                0xB0, 
                0x20, 
                0x0140, 
                0x0160
            }, 

            Package (0x07)
            {
                0x00690000, 
                0x09, 
                0x0780, 
                0xB4, 
                0x24, 
                0xFFFF, 
                0xFFFF
            }, 

            Package (0x07)
            {
                0x006C0000, 
                0x11, 
                0x0700, 
                0xB0, 
                0x20, 
                0x0140, 
                0xFFFF
            }, 

            Package (0x07)
            {
                0x006D0000, 
                0x08, 
                0x0700, 
                0xB0, 
                0x20, 
                0x0140, 
                0x60
            }, 

            Package (0x07)
            {
                0x006D0000, 
                0x18, 
                0x0780, 
                0xB4, 
                0x24, 
                0x0144, 
                0x80
            }, 

            Package (0x07)
            {
                0x006D0000, 
                0x15, 
                0x0900, 
                0xB8, 
                0x30, 
                0x0148, 
                0xA0
            }, 

            Package (0x07)
            {
                0x006D0000, 
                0x18, 
                0x0A50, 
                0xBC, 
                0x3C, 
                0x014C, 
                0xC0
            }, 

            Package (0x07)
            {
                0x006D0000, 
                0x1B, 
                0x0BD0, 
                0xC0, 
                0x48, 
                0x0150, 
                0xE0
            }, 

            Package (0x07)
            {
                0x006A0000, 
                0x18, 
                0x0700, 
                0xB0, 
                0x20, 
                0x0140, 
                0x0100
            }, 

            Package (0x07)
            {
                0x006A0000, 
                0x19, 
                0x0880, 
                0xB4, 
                0x2C, 
                0x0144, 
                0x0120
            }, 

            Package (0x07)
            {
                0x006A0000, 
                0x06, 
                0x0A10, 
                0xB8, 
                0x3C, 
                0xFFFF, 
                0xFFFF
            }, 

            Package (0x07)
            {
                0x006A0000, 
                0x19, 
                0x0A70, 
                0xBC, 
                0x40, 
                0x014C, 
                0x0140
            }, 

            Package (0x07)
            {
                0x006A0000, 
                0x0A, 
                0x0C00, 
                0xC0, 
                0x50, 
                0xFFFF, 
                0xFFFF
            }, 

            Package (0x07)
            {
                0x006B0000, 
                0x0F, 
                0x0700, 
                0xB0, 
                0x20, 
                0xFFFF, 
                0xFFFF
            }, 

            Package (0x07)
            {
                0x006B0000, 
                0x5B, 
                0x07F0, 
                0xB4, 
                0x28, 
                0xFFFF, 
                0xFFFF
            }
        })
        Name (GPCH, Package (0x13)
        {
            Package (0x07)
            {
                0x006E0000, 
                0x19, 
                0x0600, 
                0xC0, 
                0x20, 
                0x0140, 
                Zero
            }, 

            Package (0x07)
            {
                0x006E0000, 
                0x14, 
                0x0790, 
                0xC4, 
                0x30, 
                0x0144, 
                0x20
            }, 

            Package (0x07)
            {
                0x006E0000, 
                0x18, 
                0x08D0, 
                0xC8, 
                0x3C, 
                0x0148, 
                0x40
            }, 

            Package (0x07)
            {
                0x006E0000, 
                0x08, 
                0x0A70, 
                0xCC, 
                0x4C, 
                0x014C, 
                0x60
            }, 

            Package (0x07)
            {
                0x006D0000, 
                0x18, 
                0x0600, 
                0xC0, 
                0x20, 
                0x0140, 
                0x80
            }, 

            Package (0x07)
            {
                0x006D0000, 
                0x18, 
                0x07A0, 
                0xC4, 
                0x30, 
                0x0144, 
                0xA0
            }, 

            Package (0x07)
            {
                0x006D0000, 
                0x08, 
                0x0920, 
                0xC8, 
                0x3C, 
                0x0148, 
                0xC0
            }, 

            Package (0x07)
            {
                0x006D0000, 
                0x10, 
                0x09A0, 
                0xCC, 
                0x40, 
                0x014C, 
                0xE0
            }, 

            Package (0x07)
            {
                0x006D0000, 
                0x1B, 
                0x0AB0, 
                0xD0, 
                0x4C, 
                0x0150, 
                0x0100
            }, 

            Package (0x07)
            {
                0x006C0000, 
                0x0D, 
                0x0600, 
                0xC0, 
                0x20, 
                0x0140, 
                0xFFFF
            }, 

            Package (0x07)
            {
                0x006B0000, 
                0x0D, 
                0x0600, 
                0xC0, 
                0x20, 
                0x0140, 
                0x0120
            }, 

            Package (0x07)
            {
                0x006B0000, 
                0x18, 
                0x06D0, 
                0xC4, 
                0x28, 
                0x0144, 
                0x0140
            }, 

            Package (0x07)
            {
                0x006B0000, 
                0x54, 
                0xFFFF, 
                0xC8, 
                0x34, 
                0x0148, 
                0xFFFF
            }, 

            Package (0x07)
            {
                0x006A0000, 
                0x18, 
                0x0600, 
                0xC0, 
                0x20, 
                0x0140, 
                0x0160
            }, 

            Package (0x07)
            {
                0x006A0000, 
                0x0A, 
                0x0780, 
                0xC4, 
                0x2C, 
                0x0144, 
                0x0180
            }, 

            Package (0x07)
            {
                0x006A0000, 
                0x0C, 
                0x0820, 
                0xC8, 
                0x34, 
                0x0148, 
                0x01A0
            }, 

            Package (0x07)
            {
                0x00690000, 
                0x0F, 
                0x0600, 
                0xC0, 
                0x20, 
                0x0140, 
                0x01C0
            }, 

            Package (0x07)
            {
                0x00690000, 
                0x09, 
                0x06F0, 
                0xC4, 
                0x28, 
                0x0164, 
                0xFFFF
            }, 

            Package (0x07)
            {
                0x00690000, 
                0x0E, 
                0x0780, 
                0xC8, 
                0x30, 
                0x0168, 
                0xFFFF
            }
        })
        Name (RXEV, Package (0x12)
        {
            Buffer (0x1A) {}, 
            Buffer (0x19) {}, 
            Buffer (0x18) {}, 
            Buffer (0x08) {}, 
            Buffer (0x18) {}, 
            Buffer (0x18) {}, 
            Buffer (0x08) {}, 
            Buffer (0x18) {}, 
            Buffer (0x15) {}, 
            Buffer (0x1B) {}, 
            Buffer (0x1B) {}, 
            Buffer (0x18) {}, 
            Buffer (0x19) {}, 
            Buffer (0x06) {}, 
            Buffer (0x19) {}, 
            Buffer (0x0C) {}, 
            Buffer (0x0F) {}, 
            Buffer (0x5B) {}
        })
    }

    Scope (_SB)
    {
        Method (GINF, 2, NotSerialized)
        {
            If ((PCHS == PCHL))
            {
                Return (DerefOf (DerefOf (GPCL [Arg0]) [Arg1]))
            }
            Else
            {
                Return (DerefOf (DerefOf (GPCH [Arg0]) [Arg1]))
            }
        }

        Method (GMXG, 0, NotSerialized)
        {
            If ((PCHS == PCHL))
            {
                Return (0x12)
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (GADR, 2, NotSerialized)
        {
            Local0 = (GINF (Arg0, Zero) + SBRG)
            Local1 = GINF (Arg0, Arg1)
            Return ((Local0 + Local1))
        }

        Method (GNUM, 1, NotSerialized)
        {
            Local0 = GNMB (Arg0)
            Local1 = GGRP (Arg0)
            Return ((GINF (Local1, 0x06) + Local0))
        }

        Method (INUM, 1, NotSerialized)
        {
            Return ((GPC1 (Arg0) & 0x7F))
        }

        Method (GGRP, 1, Serialized)
        {
            Local0 = ((Arg0 & 0x00FF0000) >> 0x10)
            Return (Local0)
        }

        Method (GNMB, 1, Serialized)
        {
            Return ((Arg0 & 0xFFFF))
        }

        Method (GGPE, 1, NotSerialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (Local1 >> 0x05)
            If (!((((GEI0 == Local0) && (GED0 == Local2)) | (
                (GEI1 == Local0) && (GED1 == Local2))) | ((GEI2 == Local0) && (GED2 == 
                Local2))))
            {
                Return (0x6F)
            }
            Else
            {
                If (((GEI0 == Local0) && (GED0 == Local2)))
                {
                    Local3 = Zero
                }
                ElseIf (((GEI1 == Local0) && (GED1 == Local2)))
                {
                    Local3 = One
                }
                ElseIf (((GEI2 == Local0) && (GED2 == Local2)))
                {
                    Local3 = 0x02
                }
                Else
                {
                    BreakPoint
                    Return (Zero)
                }

                Return ((((Local3 - Local2) * 0x20) + Local1))
            }
        }

        Method (GPC0, 1, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x10))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                TEMP,   32
            }

            Return (TEMP) /* \_SB_.GPC0.TEMP */
        }

        Method (SPC0, 2, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x10))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                TEMP,   32
            }

            TEMP = Arg1
        }

        Method (GPC1, 1, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = ((GADR (Local0, 0x02) + (Local1 * 0x10)) + 
                0x04)
            OperationRegion (PDW1, SystemMemory, Local2, 0x04)
            Field (PDW1, AnyAcc, NoLock, Preserve)
            {
                TEMP,   32
            }

            Return (TEMP) /* \_SB_.GPC1.TEMP */
        }

        Method (SPC1, 2, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = ((GADR (Local0, 0x02) + (Local1 * 0x10)) + 
                0x04)
            OperationRegion (PDW1, SystemMemory, Local2, 0x04)
            Field (PDW1, AnyAcc, NoLock, Preserve)
            {
                TEMP,   32
            }

            TEMP = Arg1
        }

        Method (SRXO, 2, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x10))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   28, 
                TEMP,   1, 
                Offset (0x04)
            }

            TEMP = Arg1
        }

        Method (GGIV, 1, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x10))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   1, 
                TEMP,   1, 
                Offset (0x04)
            }

            Return (TEMP) /* \_SB_.GGIV.TEMP */
        }

        Method (GGOV, 1, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x10))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                TEMP,   1, 
                Offset (0x04)
            }

            Return (TEMP) /* \_SB_.GGOV.TEMP */
        }

        Method (SGOV, 2, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x10))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                TEMP,   1, 
                Offset (0x04)
            }

            TEMP = Arg1
        }

        Method (GGII, 1, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x10))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   23, 
                TEMP,   1, 
                Offset (0x04)
            }

            Return (TEMP) /* \_SB_.GGII.TEMP */
        }

        Method (SGII, 2, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x10))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   23, 
                TEMP,   1, 
                Offset (0x04)
            }

            TEMP = Arg1
        }

        Method (GPMV, 1, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x10))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   10, 
                TEMP,   3, 
                Offset (0x04)
            }

            Return (TEMP) /* \_SB_.GPMV.TEMP */
        }

        Method (SPMV, 2, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x10))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   10, 
                TEMP,   3, 
                Offset (0x04)
            }

            TEMP = Arg1
        }

        Method (GHPO, 1, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local3 = (GADR (Local0, 0x03) + ((Local1 >> 0x05) * 0x04))
            Local4 = (Local1 & 0x1F)
            OperationRegion (PREG, SystemMemory, Local3, 0x04)
            Field (PREG, AnyAcc, NoLock, Preserve)
            {
                TEMP,   32
            }

            Return (((TEMP >> Local4) & One))
        }

        Method (SHPO, 2, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local3 = (GADR (Local0, 0x03) + ((Local1 >> 0x05) * 0x04))
            Local4 = (Local1 & 0x1F)
            OperationRegion (PREG, SystemMemory, Local3, 0x04)
            Field (PREG, AnyAcc, NoLock, Preserve)
            {
                TEMP,   32
            }

            If (Arg1)
            {
                TEMP |= (One << Local4)
            }
            Else
            {
                TEMP &= ~(One << Local4)
            }
        }

        Method (GGPO, 1, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x04) + ((Local1 >> 0x03) * 0x04
                ))
            OperationRegion (PREG, SystemMemory, Local2, 0x04)
            Field (PREG, AnyAcc, NoLock, Preserve)
            {
                TEMP,   32
            }

            Return (((TEMP >> ((Local1 & 0x07) * 0x04)) & 
                0x03))
        }

        Method (SGRA, 2, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x10))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   20, 
                TEMP,   1, 
                Offset (0x04)
            }

            TEMP = Arg1
        }

        Method (SGWP, 2, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = ((GADR (Local0, 0x02) + (Local1 * 0x10)) + 
                0x04)
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   10, 
                TEMP,   4, 
                Offset (0x04)
            }

            TEMP = Arg1
        }

        Method (CAGS, 1, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local4 = (Local1 >> 0x05)
            If (!((((GEI0 == Local0) && (GED0 == Local4)) | (
                (GEI1 == Local0) && (GED1 == Local4))) | ((GEI2 == Local0) && (GED2 == 
                Local4))))
            {
                Local3 = GADR (Local0, 0x05)
                If (((Local3 & 0xFFFF) != 0xFFFF))
                {
                    OperationRegion (GPPX, SystemMemory, (Local3 + (Local4 * 0x04)), 0x04)
                    Field (GPPX, AnyAcc, NoLock, Preserve)
                    {
                        STSX,   32
                    }

                    Local2 = (One << (Local1 % 0x20))
                    STSX = Local2
                }
            }
        }

        Method (ISME, 1, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local4 = (Local1 >> 0x05)
            If (!!((((GEI0 == Local0) && (GED0 == Local4)) | 
                ((GEI1 == Local0) && (GED1 == Local4))) | ((GEI2 == Local0) && (
                GED2 == Local4))))
            {
                Return (Zero)
            }

            If (((GADR (Local0, 0x05) & 0xFFFF) == 0xFFFF))
            {
                Return (Zero)
            }

            Local2 = (GADR (Local0, 0x05) + (Local4 * 0x04))
            Local3 = (Local1 & 0x1F)
            OperationRegion (GPPX, SystemMemory, Local2, 0x24)
            Field (GPPX, AnyAcc, NoLock, Preserve)
            {
                STSX,   32, 
                Offset (0x20), 
                GENX,   32
            }

            Return ((((STSX & GENX) >> Local3) & One))
        }

        Method (DIPI, 1, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x10))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   9, 
                RDIS,   1, 
                    ,   15, 
                RCFG,   2, 
                Offset (0x04)
            }

            If ((RCFG != 0x02))
            {
                DerefOf (RXEV [Local0]) [Local1] = RCFG /* \_SB_.DIPI.RCFG */
                RCFG = 0x02
                RDIS = One
            }
        }

        Method (UIPI, 1, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x10))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   9, 
                RDIS,   1, 
                    ,   15, 
                RCFG,   2, 
                Offset (0x04)
            }

            Local3 = DerefOf (DerefOf (RXEV [Local0]) [Local1])
            If ((Local3 != 0x02))
            {
                RDIS = Zero
                RCFG = Local3
            }
        }

        Method (GRXE, 2, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x10))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   25, 
                RCFG,   2, 
                Offset (0x04)
            }

            RCFG = Arg1
        }
    }

    Scope (_SB)
    {
        Method (PSD3, 1, Serialized)
        {
            If (((SIME == One) || !IMPS ()))
            {
                Return (Zero)
            }

            Switch ((Zero + Arg0--))
            {
                Case (Zero)
                {
                    RAA0 = One
                    While ((APA0 == Zero))
                    {
                        Stall (0x0A)
                    }
                }
                Case (One)
                {
                    RAA1 = One
                    While ((APA1 == Zero))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x02)
                {
                    RAA2 = One
                    While ((APA2 == Zero))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x03)
                {
                    RAA3 = One
                    While ((APA3 == Zero))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x04)
                {
                    RPB0 = One
                    While ((APB0 == Zero))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x05)
                {
                    RPB1 = One
                    While ((APB1 == Zero))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x06)
                {
                    RPB2 = One
                    While ((APB2 == Zero))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x07)
                {
                    RPB3 = One
                    While ((APB3 == Zero))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x08)
                {
                    RPC0 = One
                    While ((APC0 == Zero))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x09)
                {
                    RPC1 = One
                    While ((APC1 == Zero))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x0A)
                {
                    RPC2 = One
                    While ((APC2 == Zero))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x0B)
                {
                    RPC3 = One
                    While ((APC3 == Zero))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x0C)
                {
                    RPD0 = One
                    While ((APD0 == Zero))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x0D)
                {
                    RPD1 = One
                    While ((APD1 == Zero))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x0E)
                {
                    RPD2 = One
                    While ((APD2 == Zero))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x0F)
                {
                    RPD3 = One
                    While ((APD3 == Zero))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x10)
                {
                    RPE0 = One
                    While ((APE0 == Zero))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x11)
                {
                    RPE1 = One
                    While ((APE1 == Zero))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x12)
                {
                    RPE2 = One
                    While ((APE2 == Zero))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x13)
                {
                    RPE3 = One
                    While ((APE3 == Zero))
                    {
                        Stall (0x0A)
                    }
                }

            }
        }

        Method (PSD0, 1, Serialized)
        {
            If (((SIME == One) || !IMPS ()))
            {
                Return (Zero)
            }

            Switch ((Zero + Arg0--))
            {
                Case (Zero)
                {
                    RAA0 = Zero
                    While ((APA0 == One))
                    {
                        Stall (0x0A)
                    }
                }
                Case (One)
                {
                    RAA1 = Zero
                    While ((APA1 == One))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x02)
                {
                    RAA2 = Zero
                    While ((APA2 == One))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x03)
                {
                    RAA3 = Zero
                    While ((APA3 == One))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x04)
                {
                    RPB0 = Zero
                    While ((APB0 == One))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x05)
                {
                    RPB1 = Zero
                    While ((APB1 == One))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x06)
                {
                    RPB2 = Zero
                    While ((APB2 == One))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x07)
                {
                    RPB3 = Zero
                    While ((APB3 == One))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x08)
                {
                    RPC0 = Zero
                    While ((APC0 == One))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x09)
                {
                    RPC1 = Zero
                    While ((APC1 == One))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x0A)
                {
                    RPC2 = Zero
                    While ((APC2 == One))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x0B)
                {
                    RPC3 = Zero
                    While ((APC3 == One))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x0C)
                {
                    RPD0 = Zero
                    While ((APD0 == One))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x0D)
                {
                    RPD1 = Zero
                    While ((APD1 == One))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x0E)
                {
                    RPD2 = Zero
                    While ((APD2 == One))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x0F)
                {
                    RPD3 = Zero
                    While ((APD3 == One))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x10)
                {
                    RPE0 = Zero
                    While ((APE0 == One))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x11)
                {
                    RPE1 = Zero
                    While ((APE1 == One))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x12)
                {
                    RPE2 = Zero
                    While ((APE2 == One))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x13)
                {
                    RPE3 = Zero
                    While ((APE3 == One))
                    {
                        Stall (0x0A)
                    }
                }

            }
        }

        Method (CSD3, 1, Serialized)
        {
            If (((SIME == One) || !IMPS ()))
            {
                Return (Zero)
            }

            Switch (ToInteger (Arg0))
            {
                Case (0x14)
                {
                    RSAT = One
                    While ((ASAT == Zero))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x15)
                {
                    RGBE = One
                    While ((AGBE == Zero))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x16)
                {
                    RXHC = One
                    While ((AXHC == Zero))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x17)
                {
                    RXDC = One
                    While ((AXDC == Zero))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x18)
                {
                    RUFS = One
                    While ((AUFS == Zero))
                    {
                        Stall (0x0A)
                    }
                }

            }
        }

        Method (CSD0, 1, Serialized)
        {
            If (((SIME == One) || !IMPS ()))
            {
                Return (Zero)
            }

            Switch (ToInteger (Arg0))
            {
                Case (0x14)
                {
                    RSAT = Zero
                    While ((ASAT == One))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x15)
                {
                    RGBE = Zero
                    While ((AGBE == One))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x16)
                {
                    RXHC = Zero
                    While ((AXHC == One))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x17)
                {
                    RXDC = Zero
                    While ((AXDC == One))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x18)
                {
                    RUFS = Zero
                    While ((AUFS == One))
                    {
                        Stall (0x0A)
                    }
                }

            }
        }
    }

    Name (THMN, 0x48)
    Name (THCN, 0x0E)
    Name (CNPM, 0x80)
    Name (FMSN, 0x10)
    Scope (\)
    {
        Method (THDA, 2, Serialized)
        {
            Local0 = 0xFE200000
            Local0 += (0x40 * (CNPM * (Arg0 - FMSN)))
            Local0 += (0x40 * Arg1)
            Return (Local0)
        }

        Method (STRD, 3, Serialized)
        {
            If (((Arg1 + Arg2) > SizeOf (Arg0)))
            {
                Return (Zero)
            }

            ToBuffer (Arg0, Local3)
            Local0 = Zero
            Local1 = Zero
            While ((Local1 < Arg2))
            {
                Local2 = DerefOf (Local3 [(Arg1 + Local1)])
                Local0 += (Local2 << (0x08 * Local1))
                Local1++
            }

            Return (Local0)
        }

        Method (THDS, 1, Serialized)
        {
            If ((PTHM == Zero))
            {
                Return (Zero)
            }
            ElseIf ((PTHM == One))
            {
                If (!\_SB.PC00.PTHT.THEN ())
                {
                    Return (Zero)
                }
            }
            ElseIf ((PTHM == 0x02))
            {
                If (!\_SB.PTHH.THEN ())
                {
                    Return (Zero)
                }
            }
            Else
            {
                Return (Zero)
            }

            Concatenate (Arg0, "\n", Local2)
            Local0 = SizeOf (Local2)
            Local1 = THDA (THMN, THCN)
            OperationRegion (THBA, SystemMemory, Local1, 0x40)
            Field (THBA, QWordAcc, NoLock, Preserve)
            {
                QO00,   64
            }

            Field (THBA, DWordAcc, NoLock, Preserve)
            {
                DO00,   32, 
                Offset (0x10), 
                DO10,   32, 
                Offset (0x30), 
                DO30,   32
            }

            Field (THBA, WordAcc, NoLock, Preserve)
            {
                WO00,   16
            }

            Field (THBA, ByteAcc, NoLock, Preserve)
            {
                BO00,   8
            }

            DO10 = 0x01000242
            WO00 = Local0
            Local6 = Zero
            Local7 = Local0
            While ((Local7 >= 0x08))
            {
                QO00 = STRD (Local2, Local6, 0x08)
                Local6 += 0x08
                Local7 -= 0x08
            }

            If ((Local7 >= 0x04))
            {
                DO00 = STRD (Local2, Local6, 0x04)
                Local6 += 0x04
                Local7 -= 0x04
            }

            If ((Local7 >= 0x02))
            {
                WO00 = STRD (Local2, Local6, 0x02)
                Local6 += 0x02
                Local7 -= 0x02
            }

            If ((Local7 >= One))
            {
                BO00 = STRD (Local2, Local6, One)
                Local6 += One
                Local7 -= One
            }

            DO30 = Zero
        }

        Method (THDH, 1, Serialized)
        {
            THDS (ToHexString (Arg0))
        }

        Method (THDD, 1, Serialized)
        {
            THDS (ToDecimalString (Arg0))
        }
    }

    Scope (_SB)
    {
        Method (PWAK, 1, NotSerialized)
        {
            If ((Arg0 == 0x03))
            {
                S23W ()
            }
        }

        Name (HDAA, One)
        Name (DISA, One)
        Name (CIWF, One)
        Name (CIBT, One)
        Name (S23C, Zero)
        Method (S23W, 0, NotSerialized)
        {
            HDAA = One
            DISA = One
            CIWF = One
            CIBT = One
        }

        Method (DION, 0, NotSerialized)
        {
            S023 (One, One)
        }

        Method (DIOF, 0, NotSerialized)
        {
            S023 (One, Zero)
        }

        Method (S023, 2, Serialized)
        {
            If (!S23C)
            {
                If ((^PC00.HDAS.VDID == 0xFFFFFFFF))
                {
                    HDAA = 0x02
                }

                If (!^PC00.CNIP ())
                {
                    CIWF = 0x02
                    CIBT = 0x02
                }

                S23C = One
            }

            Switch (ToInteger (Arg0))
            {
                Case (Zero)
                {
                    If ((HDAA != 0x02))
                    {
                        HDAA = Arg1
                    }
                }
                Case (One)
                {
                    DISA = Arg1
                }
                Case (0x02)
                {
                    If ((CIWF != 0x02))
                    {
                        CIWF = Arg1
                    }
                }
                Case (0x03)
                {
                    If ((CIBT != 0x02))
                    {
                        CIBT = Arg1
                    }
                }
                Default
                {
                    Return (Zero)
                }

            }

            If ((((DISA != One) && (HDAA != One)) && (
                (CIWF != One) && (CIBT != One))))
            {
                XSQD = Zero
            }
            Else
            {
                XSQD = One
            }
        }

        Device (PRRE)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, "PCHRESV")  // _UID: Unique ID
            Name (_STA, 0x0B)  // _STA: Status
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0xFE000000,         // Address Base
                        0x00020000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFE04C000,         // Address Base
                        0x00004000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFE050000,         // Address Base
                        0x00060000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFE0D0000,         // Address Base
                        0x00030000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFE200000,         // Address Base
                        0x00600000,         // Address Length
                        )
                    Memory32Fixed (ReadOnly,
                        0xFF000000,         // Address Base
                        0x01000000,         // Address Length
                        )
                    IO (Decode16,
                        0x0000,             // Range Minimum
                        0x0000,             // Range Maximum
                        0x01,               // Alignment
                        0xFF,               // Length
                        _Y18)
                })
                CreateWordField (BUF0, \_SB.PRRE._CRS._Y18._MIN, AMIN)  // _MIN: Minimum Base Address
                CreateWordField (BUF0, \_SB.PRRE._CRS._Y18._MAX, AMAX)  // _MAX: Maximum Base Address
                AMIN = PMBS /* \PMBS */
                AMAX = PMBS /* \PMBS */
                Name (SBR0, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00690000,         // Address Length
                        _Y19)
                })
                CreateDWordField (SBR0, \_SB.PRRE._CRS._Y19._BAS, BAS0)  // _BAS: Base Address
                BAS0 = SBRG /* \SBRG */
                ConcatenateResTemplate (BUF0, SBR0, Local0)
                If (((PCHS == PCHH) || (PCHS == 0x04)))
                {
                    Name (SBRS, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y1A)
                    })
                    CreateDWordField (SBRS, \_SB.PRRE._CRS._Y1A._BAS, BAS1)  // _BAS: Base Address
                    CreateDWordField (SBRS, \_SB.PRRE._CRS._Y1A._LEN, LEN1)  // _LEN: Length
                    BAS1 = (SBRG + 0x006C0000)
                    LEN1 = 0x00010000
                    ConcatenateResTemplate (Local0, SBRS, Local1)
                }
                Else
                {
                    Name (SBRL, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y1B)
                    })
                    CreateDWordField (SBRL, \_SB.PRRE._CRS._Y1B._BAS, BAS2)  // _BAS: Base Address
                    CreateDWordField (SBRL, \_SB.PRRE._CRS._Y1B._LEN, LEN2)  // _LEN: Length
                    BAS2 = (SBRG + 0x006B0000)
                    LEN2 = 0x00020000
                    ConcatenateResTemplate (Local0, SBRL, Local1)
                }

                Name (SBRE, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y1C)
                })
                CreateDWordField (SBRE, \_SB.PRRE._CRS._Y1C._BAS, BAS3)  // _BAS: Base Address
                CreateDWordField (SBRE, \_SB.PRRE._CRS._Y1C._LEN, LEN3)  // _LEN: Length
                BAS3 = (SBRG + 0x006F0000)
                If ((PCHS == 0x04))
                {
                    LEN3 = ((SBRG + 0x10000000) - BAS3)
                }
                Else
                {
                    LEN3 = ((SBRG + 0x01000000) - BAS3)
                }

                ConcatenateResTemplate (Local1, SBRE, Local2)
                Return (Local2)
            }
        }

        Device (IOTR)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, "IoTraps")  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = Buffer (0x02)
                    {
                         0x79, 0x00                                       // y.
                    }
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x0000,             // Range Minimum
                        0x0000,             // Range Maximum
                        0x01,               // Alignment
                        0xFF,               // Length
                        _Y1D)
                })
                Name (BUF1, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x0000,             // Range Minimum
                        0x0000,             // Range Maximum
                        0x01,               // Alignment
                        0xFF,               // Length
                        _Y1E)
                })
                Name (BUF2, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x0000,             // Range Minimum
                        0x0000,             // Range Maximum
                        0x01,               // Alignment
                        0xFF,               // Length
                        _Y1F)
                })
                Name (BUF3, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x0000,             // Range Minimum
                        0x0000,             // Range Maximum
                        0x01,               // Alignment
                        0xFF,               // Length
                        _Y20)
                })
                CreateWordField (BUF0, \_SB.IOTR._CRS._Y1D._MIN, AMI0)  // _MIN: Minimum Base Address
                CreateWordField (BUF0, \_SB.IOTR._CRS._Y1D._MAX, AMA0)  // _MAX: Maximum Base Address
                CreateWordField (BUF1, \_SB.IOTR._CRS._Y1E._MIN, AMI1)  // _MIN: Minimum Base Address
                CreateWordField (BUF1, \_SB.IOTR._CRS._Y1E._MAX, AMA1)  // _MAX: Maximum Base Address
                CreateWordField (BUF2, \_SB.IOTR._CRS._Y1F._MIN, AMI2)  // _MIN: Minimum Base Address
                CreateWordField (BUF2, \_SB.IOTR._CRS._Y1F._MAX, AMA2)  // _MAX: Maximum Base Address
                CreateWordField (BUF3, \_SB.IOTR._CRS._Y20._MIN, AMI3)  // _MIN: Minimum Base Address
                CreateWordField (BUF3, \_SB.IOTR._CRS._Y20._MAX, AMA3)  // _MAX: Maximum Base Address
                AMI0 = ITA0 /* \ITA0 */
                AMA0 = ITA0 /* \ITA0 */
                AMI1 = ITA1 /* \ITA1 */
                AMA1 = ITA1 /* \ITA1 */
                AMI2 = ITA2 /* \ITA2 */
                AMA2 = ITA2 /* \ITA2 */
                AMI3 = ITA3 /* \ITA3 */
                AMA3 = ITA3 /* \ITA3 */
                If ((ITS0 == One))
                {
                    ConcatenateResTemplate (Local0, BUF0, Local1)
                    Local0 = Local1
                }

                If ((ITS1 == One))
                {
                    ConcatenateResTemplate (Local0, BUF1, Local1)
                    Local0 = Local1
                }

                If ((ITS2 == One))
                {
                    ConcatenateResTemplate (Local0, BUF2, Local1)
                    Local0 = Local1
                }

                If ((ITS3 == One))
                {
                    ConcatenateResTemplate (Local0, BUF3, Local1)
                    Local0 = Local1
                }

                Return (Local0)
            }
        }
    }

    Scope (_SB.PC00)
    {
        Name (TEMP, Zero)
        Device (LPCB)
        {
            Name (_ADR, 0x001F0000)  // _ADR: Address
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            OperationRegion (LPC, PCI_Config, Zero, 0x0100)
            Field (LPC, AnyAcc, NoLock, Preserve)
            {
                Offset (0x02), 
                CDID,   16, 
                Offset (0x08), 
                CRID,   8, 
                Offset (0x80), 
                IOD0,   8, 
                IOD1,   8, 
                Offset (0xA0), 
                    ,   9, 
                PRBL,   1, 
                Offset (0xDC), 
                    ,   2, 
                ESPI,   1
            }
        }

        Device (SBUS)
        {
            Name (_ADR, 0x001F0004)  // _ADR: Address
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }

    Scope (\)
    {
        Method (PCRR, 2, Serialized)
        {
            Local1 = (Arg1 & 0xFFFF)
            Local2 = ((Arg1 & 0x000F0000) << 0x08)
            Local0 = ((Arg0 << 0x10) + Local1)
            Local0 = ((Local2 + Local0) + SBRG) /* \SBRG */
            OperationRegion (PCR0, SystemMemory, Local0, 0x04)
            Field (PCR0, DWordAcc, Lock, Preserve)
            {
                DAT0,   32
            }

            Return (DAT0) /* \PCRR.DAT0 */
        }

        Method (PCRW, 3, Serialized)
        {
            Local1 = (Arg1 & 0xFFFF)
            Local2 = ((Arg1 & 0x000F0000) << 0x08)
            Local0 = ((Arg0 << 0x10) + Local1)
            Local0 = ((Local2 + Local0) + SBRG) /* \SBRG */
            OperationRegion (PCR0, SystemMemory, Local0, 0x04)
            Field (PCR0, DWordAcc, Lock, Preserve)
            {
                DAT0,   32
            }

            DAT0 = Arg2
        }

        Method (PCRO, 3, Serialized)
        {
            Local0 = PCRR (Arg0, Arg1)
            Local1 = (Local0 | Arg2)
            PCRW (Arg0, Arg1, Local1)
        }

        Method (PCRA, 3, Serialized)
        {
            Local0 = PCRR (Arg0, Arg1)
            Local1 = (Local0 & Arg2)
            PCRW (Arg0, Arg1, Local1)
        }

        Method (PCAO, 4, Serialized)
        {
            Local0 = PCRR (Arg0, Arg1)
            Local1 = ((Local0 & Arg2) | Arg3)
            PCRW (Arg0, Arg1, Local1)
        }
    }

    Scope (\)
    {
        Name (TMOV, 0x0A)
        Method (TMVA, 1, Serialized)
        {
            TMOV = 0x0A
            If ((Arg0 > 0x0A))
            {
                TMOV = Arg0
            }
        }

        Method (IPCS, 7, Serialized)
        {
            Name (RPKG, Package (0x05)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            If ((Arg2 > 0x10))
            {
                ADBG ("CmdSize>16 Error")
                RPKG [Zero] = One
                Return (RPKG) /* \IPCS.RPKG */
            }

            IWB0 = Arg3
            IWB1 = Arg4
            IWB2 = Arg5
            IWB3 = Arg6
            Local0 = Zero
            Local0 += (Arg0 << Zero)
            Local0 += (Arg1 << 0x0C)
            Local0 += (Arg2 << 0x10)
            CMDR = Local0
            Local0 = Zero
            While (One)
            {
                If ((!IBSY || (IERR == One)))
                {
                    Break
                }

                If ((Local0 > TMOV))
                {
                    RPKG [Zero] = 0x03
                    Return (RPKG) /* \IPCS.RPKG */
                }

                Sleep (One)
                Local0++
            }

            If ((IERR == One))
            {
                RPKG [Zero] = 0x02
                Return (RPKG) /* \IPCS.RPKG */
            }

            RPKG [One] = IRB0 /* \IRB0 */
            RPKG [0x02] = IRB1 /* \IRB1 */
            RPKG [0x03] = IRB2 /* \IRB2 */
            RPKG [0x04] = IRB3 /* \IRB3 */
            Return (RPKG) /* \IPCS.RPKG */
        }

        Method (MCUI, 2, Serialized)
        {
            Name (PRPI, Zero)
            Local0 = (One << Arg0)
            Local1 = (Arg1 << Arg0)
            PRPI = CTRP (Arg0)
            If ((PCHS == PCHN))
            {
                Name (CRPN, Buffer (0x08)
                {
                     0x04, 0x05, 0x06, 0x07, 0x00, 0x01, 0x02, 0x03   // ........
                })
                PRPI = DerefOf (CRPN [PRPI])
            }

            If ((PRPI < 0x18))
            {
                Local2 = (One << PRPI) /* \MCUI.PRPI */
                Local3 = (Arg1 << PRPI) /* \MCUI.PRPI */
            }
            Else
            {
                Local2 = (One << PRPI) /* \MCUI.PRPI */
                Local3 = (Arg1 << PRPI) /* \MCUI.PRPI */
                Local2 <<= 0x18
                Local3 <<= 0x18
            }

            ADBG ("Calling IPCS method with command V_PMC_PWRM_IPC_SRC_CLK_PORT_MAPPING_CMD")
            ADBG (Concatenate ("Local0 =", ToHexString (Local0)))
            ADBG (Concatenate ("Local1 =", ToHexString (Local1)))
            ADBG (Concatenate ("Local2 =", ToHexString (Local2)))
            ADBG (Concatenate ("Local3 =", ToHexString (Local3)))
            IPCS (0xAC, Zero, 0x10, Local0, Local1, Local2, Local3)
        }

        Method (SPCO, 2, Serialized)
        {
            ADBG ("Calling SPCO method to configure PCIe ClkReq Override")
            TMOV = 0x0A
            MCUI (Arg0, Arg1)
        }

        Method (SPCX, 3, Serialized)
        {
            ADBG ("Calling SPCX method to configure PCIe ClkReq Override")
            ADBG ("Calling TMVA method to override IPC1 Command Timeout Value")
            TMVA (Arg2)
            MCUI (Arg0, Arg1)
        }

        Method (HBCM, 2, Serialized)
        {
            ADBG ("mask/unmask Hybrid Partner CLKREQ")
            Name (HPRI, Zero)
            HPRI = Arg0
            If ((HPRI < 0x18))
            {
                Local0 = (One << HPRI) /* \HBCM.HPRI */
                Local1 = (Arg1 << HPRI) /* \HBCM.HPRI */
            }
            Else
            {
                Local0 = Zero
                Local1 = Zero
            }

            ADBG ("Calling IPCS method for Hybrid Partner with command V_PMC_PWRM_IPC_SRC_CLK_PORT_MAPPING_CMD")
            ADBG (Concatenate ("Port number of Hybrid Partner =", ToHexString (HPRI)))
            ADBG (Concatenate ("Local0 of Hybrid Partner =", ToHexString (Local0)))
            ADBG (Concatenate ("Local1 of Hybrid Partner =", ToHexString (Local1)))
            IPCS (0xAC, Zero, 0x10, Zero, Zero, Local0, Local1)
        }

        Method (CTRP, 1, Serialized)
        {
            Switch (Arg0)
            {
                Case (Zero)
                {
                    Return (CR00) /* \CR00 */
                }
                Case (One)
                {
                    Return (CR01) /* \CR01 */
                }
                Case (0x02)
                {
                    Return (CR02) /* \CR02 */
                }
                Case (0x03)
                {
                    Return (CR03) /* \CR03 */
                }
                Case (0x04)
                {
                    Return (CR04) /* \CR04 */
                }
                Case (0x05)
                {
                    Return (CR05) /* \CR05 */
                }
                Case (0x06)
                {
                    Return (CR06) /* \CR06 */
                }
                Case (0x07)
                {
                    Return (CR07) /* \CR07 */
                }
                Case (0x08)
                {
                    Return (CR08) /* \CR08 */
                }
                Case (0x09)
                {
                    Return (CR09) /* \CR09 */
                }
                Case (0x0A)
                {
                    Return (CR10) /* \CR10 */
                }
                Case (0x0B)
                {
                    Return (CR11) /* \CR11 */
                }
                Case (0x0C)
                {
                    Return (CR12) /* \CR12 */
                }
                Case (0x0D)
                {
                    Return (CR13) /* \CR13 */
                }
                Case (0x0E)
                {
                    Return (CR14) /* \CR14 */
                }
                Case (0x0F)
                {
                    Return (CR15) /* \CR15 */
                }
                Default
                {
                    Return (0xFF)
                }

            }
        }

        Method (TCBS, 0, NotSerialized)
        {
            Return (TCOB) /* \TCOB */
        }

        OperationRegion (PMIO, SystemIO, PMBS, 0x80)
        Field (PMIO, ByteAcc, NoLock, Preserve)
        {
            Offset (0x01), 
            PBSS,   1, 
            Offset (0x40), 
                ,   17, 
            GPEC,   1, 
            Offset (0x6C), 
                ,   19, 
            CPWS,   1, 
            Offset (0x7C), 
                ,   19, 
            CPWE,   1
        }

        OperationRegion (TCBA, SystemIO, TCBS (), 0x10)
        Field (TCBA, ByteAcc, NoLock, Preserve)
        {
            Offset (0x04), 
                ,   9, 
            CPSC,   1
        }

        OperationRegion (PWMR, SystemMemory, PWRM, 0x1E30)
        Field (PWMR, DWordAcc, NoLock, Preserve)
        {
            CMDR,   32, 
            IBSY,   1, 
            IERR,   1, 
                ,   1, 
                ,   1, 
            Offset (0x05), 
            Offset (0x06), 
            IERC,   8, 
            Offset (0x08), 
            Offset (0x80), 
            IWB0,   32, 
            IWB1,   32, 
            IWB2,   32, 
            IWB3,   32, 
            IRB0,   32, 
            IRB1,   32, 
            IRB2,   32, 
            IRB3,   32, 
            Offset (0x10D0), 
            RAA0,   1, 
            RAA1,   1, 
            RAA2,   1, 
            RAA3,   1, 
            RPB0,   1, 
            RPB1,   1, 
            RPB2,   1, 
            RPB3,   1, 
            RPC0,   1, 
            RPC1,   1, 
            RPC2,   1, 
            RPC3,   1, 
            RSAT,   1, 
            RGBE,   1, 
            RXHC,   1, 
            RXDC,   1, 
            RUFS,   1, 
            RPD0,   1, 
            RPD1,   1, 
            RPD2,   1, 
            RPD3,   1, 
            RPE0,   1, 
            RPE1,   1, 
            RPE2,   1, 
            RPE3,   1, 
            Offset (0x10D4), 
            APA0,   1, 
            APA1,   1, 
            APA2,   1, 
            APA3,   1, 
            APB0,   1, 
            APB1,   1, 
            APB2,   1, 
            APB3,   1, 
            APC0,   1, 
            APC1,   1, 
            APC2,   1, 
            APC3,   1, 
            ASAT,   1, 
            AGBE,   1, 
            AXHC,   1, 
            AXDC,   1, 
            AUFS,   1, 
            APD0,   1, 
            APD1,   1, 
            APD2,   1, 
            APD3,   1, 
            APE0,   1, 
            APE1,   1, 
            APE2,   1, 
            APE3,   1, 
            Offset (0x1800), 
            ACWA,   32, 
            DCWA,   32, 
            ACET,   32, 
            DCET,   32, 
            Offset (0x18E8), 
                ,   31, 
            CECE,   1, 
            Offset (0x1B0C), 
                ,   2, 
            ISAT,   1, 
            Offset (0x1B1C), 
                ,   22, 
            XSQD,   1, 
            Offset (0x1BD0), 
                ,   31, 
            CPPM,   1, 
            Offset (0x1E20), 
            GBED,   1, 
            Offset (0x1E28), 
                ,   22, 
            SCFD,   1
        }

        Method (PSOC, 1, Serialized)
        {
            If (PSON)
            {
                If (Arg0)
                {
                    CECE = One
                }
                Else
                {
                    CECE = Zero
                }
            }
        }

        Method (PSOS, 0, NotSerialized)
        {
            If (CECE)
            {
                Return (One)
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (CFAE, 1, NotSerialized)
        {
            If (DerefOf (Arg0 [Zero]))
            {
                ADBG ("CPPM Forced Alignment Disable")
                CPPM = Zero
                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
            Else
            {
                ADBG ("CPPM Forced Alignment Enable")
                CPPM = One
                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }

        Method (IMPS, 0, NotSerialized)
        {
            If (((PCHS == PCHH) || (PCHS == 0x04)))
            {
                Return (Zero)
            }
            Else
            {
                Return (One)
            }
        }
    }

    Scope (_SB.PC00)
    {
        Name (LTRZ, Zero)
        Name (LMSL, Zero)
        Name (LNSL, Zero)
    }

    If ((GBES != Zero))
    {
        Scope (_SB.PC00)
        {
            Device (GLAN)
            {
                Name (_ADR, 0x001F0006)  // _ADR: Address
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x6D, 0x04))
                }

                Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                {
                }
            }
        }
    }

    Scope (_SB.PC00)
    {
        Device (XHCI)
        {
            Name (_ADR, 0x00140000)  // _ADR: Address
            OperationRegion (XPRT, PCI_Config, Zero, 0x0100)
            Field (XPRT, AnyAcc, NoLock, Preserve)
            {
                DVID,   16, 
                Offset (0x10), 
                XADL,   32, 
                XADH,   32, 
                Offset (0xA2), 
                    ,   2, 
                D3HE,   1
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                ADBG ("XHCI _DSM")
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
            {
                Return (0x03)
            }

            Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
            {
                Return (0x03)
            }

            Method (_S3W, 0, NotSerialized)  // _S3W: S3 Device Wake State
            {
                Return (0x03)
            }

            Method (_S4W, 0, NotSerialized)  // _S4W: S4 Device Wake State
            {
                Return (0x03)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                Return (0x03)
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (CondRefOf (DUWS))
                {
                    Return (GPRW (0x6D, DUWS))
                }
                Else
                {
                    Return (GPRW (0x6D, 0x04))
                }
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If (CondRefOf (\_SB.PC00.XHCI.RHUB.INIR))
                {
                    ^RHUB.INIR ()
                }
            }

            Method (USRA, 0, Serialized)
            {
                If ((PCHS == PCHH))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (SSPA, 0, Serialized)
            {
                If (((PCHS == PCHH) || (PCHS == 0x04)))
                {
                    Return (0x11)
                }
                ElseIf ((PCHS == PCHL))
                {
                    Return (0x0D)
                }
                ElseIf ((PCHS == PCHN))
                {
                    Return (0x09)
                }

                Return (Zero)
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                ADBG ("XHCI D0")
                If ((DVID == 0xFFFF))
                {
                    Return (Zero)
                }

                If (CondRefOf (\_SB.PC00.XHCI.PS0X))
                {
                    PS0X ()
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                ADBG ("XHCI D3")
                If ((DVID == 0xFFFF))
                {
                    Return (Zero)
                }

                If (CondRefOf (\_SB.PC00.XHCI.PS3X))
                {
                    PS3X ()
                }
            }

            Method (CUID, 1, Serialized)
            {
                If ((Arg0 == ToUUID ("7c9512a9-1705-4cb4-af7d-506a2423ab71") /* Unknown UUID */))
                {
                    Return (One)
                }

                Return (Zero)
            }

            Device (RHUB)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    ADBG ("XHCI RHUB PS0")
                    If ((DVID == 0xFFFF))
                    {
                        Return (Zero)
                    }

                    If (CondRefOf (\_SB.PC00.XHCI.RHUB.PS0X))
                    {
                        ADBG ("XHCI CSD0")
                        CSD0 (0x16)
                        PS0X ()
                    }
                }

                Method (_PS2, 0, Serialized)  // _PS2: Power State 2
                {
                    ADBG ("XHCI RHUB PS2")
                    If ((DVID == 0xFFFF))
                    {
                        Return (Zero)
                    }

                    If (CondRefOf (\_SB.PC00.XHCI.RHUB.PS2X))
                    {
                        PS2X ()
                        ADBG ("XHCI CSD3")
                        CSD3 (0x16)
                    }
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    ADBG ("XHCI RHUB PS3")
                    If ((DVID == 0xFFFF))
                    {
                        Return (Zero)
                    }

                    If (CondRefOf (\_SB.PC00.XHCI.RHUB.PS3X))
                    {
                        PS3X ()
                        ADBG ("XHCI CSD3")
                        CSD3 (0x16)
                    }
                }

                Device (HS01)
                {
                    Name (_ADR, One)  // _ADR: Address
                }

                Device (HS02)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                }

                Device (HS03)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                }

                Device (HS04)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                }

                Device (HS05)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                }

                Device (HS06)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                }

                Device (HS07)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                }

                Device (HS08)
                {
                    Name (_ADR, 0x08)  // _ADR: Address
                }

                Device (SS01)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return ((SSPA () + Zero))
                    }
                }

                Device (SS02)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return ((SSPA () + One))
                    }
                }

                Device (SS03)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return ((SSPA () + 0x02))
                    }
                }

                Device (SS04)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return ((SSPA () + 0x03))
                    }
                }

                Device (SS05)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return ((SSPA () + 0x04))
                    }
                }

                Device (SS06)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return ((SSPA () + 0x05))
                    }
                }
            }
        }
    }

    If (((PCHS == PCHL) || (PCHS == PCHH)))
    {
        Scope (_SB.PC00.XHCI.RHUB)
        {
            Device (HS09)
            {
                Name (_ADR, 0x09)  // _ADR: Address
            }

            Device (HS10)
            {
                Name (_ADR, 0x0A)  // _ADR: Address
            }

            Device (HS11)
            {
                Name (_ADR, 0x0B)  // _ADR: Address
            }

            Device (HS12)
            {
                Name (_ADR, 0x0C)  // _ADR: Address
            }

            Device (USR1)
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return ((USRA () + Zero))
                }
            }

            Device (USR2)
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return ((USRA () + One))
                }
            }
        }
    }

    If ((PCHS == PCHH))
    {
        Scope (_SB.PC00.XHCI.RHUB)
        {
            Device (HS13)
            {
                Name (_ADR, 0x0D)  // _ADR: Address
            }

            Device (HS14)
            {
                Name (_ADR, 0x0E)  // _ADR: Address
            }

            Device (SS07)
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return ((SSPA () + 0x06))
                }
            }

            Device (SS08)
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return ((SSPA () + 0x07))
                }
            }

            Device (SS09)
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return ((SSPA () + 0x08))
                }
            }

            Device (SS10)
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return ((SSPA () + 0x09))
                }
            }
        }
    }

    Scope (_SB.PC00)
    {
        Device (XDCI)
        {
            Name (_ADR, 0x00140001)  // _ADR: Address
            OperationRegion (OTGD, PCI_Config, Zero, 0x0100)
            Field (OTGD, DWordAcc, NoLock, Preserve)
            {
                DVID,   16, 
                Offset (0x10), 
                XDCB,   64
            }

            Field (OTGD, ByteAcc, NoLock, Preserve)
            {
                Offset (0x84), 
                D0I3,   2
            }

            Method (XDBA, 0, NotSerialized)
            {
                Return ((XDCB & 0xFFFFFFFFFFFFFF00))
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                ADBG ("XDCI DSM")
                If ((Arg0 == ToUUID ("732b85d5-b7a7-4a1b-9ba0-4bbd00ffd511") /* Unknown UUID */))
                {
                    If ((Arg1 == One))
                    {
                        Method (SPPS, 2, Serialized)
                        {
                            OperationRegion (XDBW, SystemMemory, XDBA (), 0x00110000)
                            Field (XDBW, WordAcc, NoLock, Preserve)
                            {
                                Offset (0x10F810), 
                                Offset (0x10F811), 
                                U2CP,   2, 
                                U3CP,   2, 
                                Offset (0x10F818), 
                                PUPS,   2, 
                                    ,   1, 
                                PURC,   1, 
                                Offset (0x10F81A), 
                                Offset (0x10F81C), 
                                    ,   3, 
                                UXPE,   2, 
                                Offset (0x10F81E)
                            }

                            Local1 = Arg0
                            Local2 = Arg1
                            If ((Local1 == Zero))
                            {
                                ADBG ("PMU D0")
                                UXPE = Zero
                                Local0 = Zero
                                While ((Local0 < 0x0A))
                                {
                                    Stall (0x64)
                                    Local0++
                                }

                                PUPS = Zero
                                Local0 = Zero
                                While ((Local0 < 0x07D0))
                                {
                                    Stall (0x64)
                                    If (((U2CP == Zero) && (U3CP == Zero)))
                                    {
                                        Break
                                    }

                                    Local0++
                                }

                                If ((U2CP != Zero))
                                {
                                    ADBG ("U2 not in D0")
                                }

                                If ((U3CP != Zero))
                                {
                                    ADBG ("U3 not in D0")
                                }

                                Return (Zero)
                            }

                            If ((Local1 == 0x03))
                            {
                                ADBG ("PMU D3")
                                If ((U2CP != Zero))
                                {
                                    ADBG ("U2 not in D0")
                                }

                                If ((U3CP != Zero))
                                {
                                    ADBG ("U3 not in D0")
                                }

                                PUPS = 0x03
                                Local0 = Zero
                                While ((Local0 < 0x07D0))
                                {
                                    Stall (0x64)
                                    If (((U2CP == 0x03) && (U3CP == 0x03)))
                                    {
                                        Break
                                    }

                                    Local0++
                                }

                                If ((U2CP != 0x03))
                                {
                                    ADBG ("U2 not in D3")
                                }

                                If ((U3CP != 0x03))
                                {
                                    ADBG ("U3 not in D3")
                                }

                                UXPE = Local2
                                Return (Zero)
                            }

                            Return (Zero)
                        }

                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                ADBG ("XDCI Fn0")
                                Return (Buffer (0x02)
                                {
                                     0xB3, 0x03                                       // ..
                                })
                            }
                            Case (One)
                            {
                                ADBG ("XDCI Fn1")
                                Return (One)
                            }
                            Case (0x04)
                            {
                                ADBG ("XDCI Fn4")
                                Local1 = DerefOf (Arg3 [Zero])
                                ADBG (Local1)
                                SPPS (Local1, Zero)
                            }
                            Case (0x05)
                            {
                                Return (Zero)
                            }
                            Case (0x07)
                            {
                                ADBG ("XDCI Fn7")
                                OperationRegion (XD22, SystemMemory, XDBA (), 0x00110000)
                                Field (XD22, WordAcc, NoLock, Preserve)
                                {
                                    Offset (0x10F818), 
                                    P2PS,   2, 
                                    Offset (0x10F81A)
                                }

                                Local0 = P2PS /* \_SB_.PC00.XDCI._DSM.P2PS */
                                Return (Local0)
                            }
                            Case (0x08)
                            {
                                ADBG ("XDCI Fn8")
                                Return (One)
                            }
                            Case (0x09)
                            {
                                ADBG ("XDCI Fn9")
                                OperationRegion (XGCT, SystemMemory, XDBA (), 0x00110000)
                                Field (XGCT, WordAcc, NoLock, Preserve)
                                {
                                    Offset (0xC110), 
                                    GCTL,   32
                                }

                                Local1 = (PPDS & 0xFFF80000)
                                Local1 >>= 0x13
                                ADBG (Concatenate ("PCH XDCI: Func9 Return Val = ", ToHexString (Local1)))
                                Return (Local1)
                            }

                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Name (_DDN, "ICL PCH XDCI controller")  // _DDN: DOS Device Name
            Name (_STR, Unicode ("ICL PCH XDCI controller"))  // _STR: Description String
            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                Return (0x03)
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x6D, 0x04))
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
            }
        }
    }

    Scope (_SB.PC00)
    {
        Device (HDAS)
        {
            Name (_ADR, 0x001F0003)  // _ADR: Address
            OperationRegion (HDAR, PCI_Config, Zero, 0x0100)
            Field (HDAR, WordAcc, NoLock, Preserve)
            {
                VDID,   32
            }

            Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x6D, 0x04))
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                S023 (Zero, One)
                If (CondRefOf (\_SB.PC00.HDAS.PS0X))
                {
                    PS0X ()
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                S023 (Zero, Zero)
                If (CondRefOf (\_SB.PC00.HDAS.PS3X))
                {
                    PS3X ()
                }
            }

            Name (NBUF, ResourceTemplate ()
            {
                QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, NonCacheable, ReadOnly,
                    0x0000000000000001, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, _Y21, AddressRangeACPI, TypeStatic)
            })
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                CreateQWordField (NBUF, \_SB.PC00.HDAS._Y21._MIN, NBAS)  // _MIN: Minimum Base Address
                CreateQWordField (NBUF, \_SB.PC00.HDAS._Y21._MAX, NMAS)  // _MAX: Maximum Base Address
                CreateQWordField (NBUF, \_SB.PC00.HDAS._Y21._LEN, NLEN)  // _LEN: Length
                NBAS = NHLA /* \NHLA */
                NMAS = (NHLA + (NHLL - One))
                NLEN = NHLL /* \NHLL */
            }

            Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "nhlt-version", 
                        "1.8-0"
                    }
                }
            })
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                If ((Arg0 == ToUUID ("a69f886e-6ceb-4594-a41f-7b5dce24c553") /* Unknown UUID */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Return (Buffer (One)
                            {
                                 0x4F                                             // O
                            })
                        }
                        Case (One)
                        {
                            Return (NBUF) /* \_SB_.PC00.HDAS.NBUF */
                        }
                        Case (0x02)
                        {
                            Return (ADFM) /* \ADFM */
                        }
                        Case (0x03)
                        {
                            If (CondRefOf (\_SB.PC00.HDAS.PPMS))
                            {
                                Return (PPMS (Arg3))
                            }

                            Return (Zero)
                        }
                        Case (0x06)
                        {
                            Switch (ToInteger (XTAL))
                            {
                                Case (Zero)
                                {
                                    Return (0x016E3600)
                                }
                                Case (One)
                                {
                                    Return (0x0249F000)
                                }
                                Default
                                {
                                    Return (Zero)
                                }

                            }
                        }
                        Default
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }

                    }
                }

                If (CondRefOf (HIWC))
                {
                    If (HIWC (Arg0))
                    {
                        If (CondRefOf (HIDW))
                        {
                            Return (HIDW (Arg0, Arg1, Arg2, Arg3))
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }

        Scope (HDAS)
        {
            Device (SNDW)
            {
                Name (_ADR, 0x40000000)  // _ADR: Address
                Name (_CID, Package (0x02)  // _CID: Compatible ID
                {
                    "PRP00001", 
                    "PNP0A05" /* Generic Container Device */
                })
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (0x0B)
                }

                Method (QCFG, 3, NotSerialized)
                {
                    DerefOf (DerefOf (Arg0 [One]) [Zero]) [One]
                         = Arg1
                    DerefOf (DerefOf (Arg0 [One]) [0x04]) [One]
                         = Arg2
                }

                Method (XCFG, 2, NotSerialized)
                {
                    If ((Arg1 == Zero))
                    {
                        Local0 = 0x016E3600
                        Local1 = 0x005B8D80
                        Local2 = 0x7D
                        Local3 = 0x02
                    }
                    ElseIf ((Arg1 == One))
                    {
                        Local0 = 0x0249F000
                        Local1 = 0x00493E00
                        Local2 = 0x32
                        Local3 = 0x04
                    }

                    DerefOf (DerefOf (Arg0 [One]) [One]) [One]
                         = Local0
                    DerefOf (DerefOf (DerefOf (Arg0 [One]) [0x07]
                        ) [One]) [Zero] = Local1
                    DerefOf (DerefOf (Arg0 [One]) [0x09]) [One]
                         = Local2
                    DerefOf (DerefOf (Arg0 [One]) [0x0A]) [One]
                         = Local3
                }

                Method (DCFG, 3, NotSerialized)
                {
                    DerefOf (DerefOf (Arg0 [One]) [0x02]) [One]
                         = Arg1
                    DerefOf (DerefOf (Arg0 [One]) [0x03]) [One]
                         = Arg2
                }

                Method (SDWU, 1, NotSerialized)
                {
                    DerefOf (DerefOf (_DSD [One]) [One]) [One]
                         = Arg0
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    SDWU (SWMC)
                    QCFG (LNK0, SWQ0, ACS0)
                    QCFG (LNK1, SWQ1, ACS1)
                    QCFG (LNK2, SWQ2, ACS2)
                    QCFG (LNK3, SWQ3, ACS3)
                    XCFG (LNK0, XTAL)
                    XCFG (LNK1, XTAL)
                    XCFG (LNK2, XTAL)
                    XCFG (LNK3, XTAL)
                    DCFG (LNK0, DAI0, DOD0)
                    DCFG (LNK1, DAI1, DOD1)
                    DCFG (LNK2, DAI2, DOD2)
                    DCFG (LNK3, DAI3, DOD3)
                }

                Name (_DSD, Package (0x04)  // _DSD: Device-Specific Data
                {
                    ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                    Package (0x02)
                    {
                        Package (0x02)
                        {
                            "mipi-sdw-sw-interface-revision", 
                            0x00010000
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-master-count", 
                            0x04
                        }
                    }, 

                    ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b") /* Hierarchical Data Extension */, 
                    Package (0x04)
                    {
                        Package (0x02)
                        {
                            "mipi-sdw-link-0-subproperties", 
                            "LNK0"
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-link-1-subproperties", 
                            "LNK1"
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-link-2-subproperties", 
                            "LNK2"
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-link-3-subproperties", 
                            "LNK3"
                        }
                    }
                })
                Name (LNK0, Package (0x02)
                {
                    ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                    Package (0x0D)
                    {
                        Package (0x02)
                        {
                            "intel-quirk-mask", 
                            Zero
                        }, 

                        Package (0x02)
                        {
                            "intel-sdw-ip-clock", 
                            0x0249F000
                        }, 

                        Package (0x02)
                        {
                            "intel-sdw-doais", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "intel-sdw-dods", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "intel-autonomous-clock-stop", 
                            Zero
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-clock-stop-mode0-supported", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-clock-stop-mode1-supported", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-clock-frequencies-supported", 
                            Package (0x01)
                            {
                                0x00493E00
                            }
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-default-frame-rate", 
                            0xBB80
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-default-frame-row-size", 
                            0x32
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-default-frame-col-size", 
                            0x04
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-dynamic-frame-shape", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-command-error-threshold", 
                            0x10
                        }
                    }
                })
                Name (LNK1, Package (0x02)
                {
                    ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                    Package (0x0D)
                    {
                        Package (0x02)
                        {
                            "intel-quirk-mask", 
                            Zero
                        }, 

                        Package (0x02)
                        {
                            "intel-sdw-ip-clock", 
                            0x0249F000
                        }, 

                        Package (0x02)
                        {
                            "intel-sdw-doais", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "intel-sdw-dods", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "intel-autonomous-clock-stop", 
                            Zero
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-clock-stop-mode0-supported", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-clock-stop-mode1-supported", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-clock-frequencies-supported", 
                            Package (0x01)
                            {
                                0x00493E00
                            }
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-default-frame-rate", 
                            0xBB80
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-default-frame-row-size", 
                            0x32
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-default-frame-col-size", 
                            0x04
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-dynamic-frame-shape", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-command-error-threshold", 
                            0x10
                        }
                    }
                })
                Name (LNK2, Package (0x02)
                {
                    ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                    Package (0x0D)
                    {
                        Package (0x02)
                        {
                            "intel-quirk-mask", 
                            Zero
                        }, 

                        Package (0x02)
                        {
                            "intel-sdw-ip-clock", 
                            0x0249F000
                        }, 

                        Package (0x02)
                        {
                            "intel-sdw-doais", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "intel-sdw-dods", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "intel-autonomous-clock-stop", 
                            Zero
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-clock-stop-mode0-supported", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-clock-stop-mode1-supported", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-clock-frequencies-supported", 
                            Package (0x01)
                            {
                                0x00493E00
                            }
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-default-frame-rate", 
                            0xBB80
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-default-frame-row-size", 
                            0x32
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-default-frame-col-size", 
                            0x04
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-dynamic-frame-shape", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-command-error-threshold", 
                            0x10
                        }
                    }
                })
                Name (LNK3, Package (0x02)
                {
                    ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                    Package (0x0D)
                    {
                        Package (0x02)
                        {
                            "intel-quirk-mask", 
                            Zero
                        }, 

                        Package (0x02)
                        {
                            "intel-sdw-ip-clock", 
                            0x0249F000
                        }, 

                        Package (0x02)
                        {
                            "intel-sdw-doais", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "intel-sdw-dods", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "intel-autonomous-clock-stop", 
                            Zero
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-clock-stop-mode0-supported", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-clock-stop-mode1-supported", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-clock-frequencies-supported", 
                            Package (0x01)
                            {
                                0x00493E00
                            }
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-default-frame-rate", 
                            0xBB80
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-default-frame-row-size", 
                            0x32
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-default-frame-col-size", 
                            0x04
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-dynamic-frame-shape", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-command-error-threshold", 
                            0x10
                        }
                    }
                })
            }
        }

        Scope (HDAS)
        {
            Device (IDA)
            {
                Name (_ADR, 0x10000000)  // _ADR: Address
            }
        }

        Device (RP01)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPA1 != Zero))
                {
                    Return (RPA1) /* \RPA1 */
                }
                Else
                {
                    Return (0x001C0000)
                }
            }

            Name (SLOT, One)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTR1 /* \LTR1 */
                LMSL = PML1 /* \PML1 */
                LNSL = PNL1 /* \PNL1 */
                If ((HBSL & One))
                {
                    HBCS = One
                }

                If ((CondRefOf (VMR1) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && ((VMR1 & One) != Zero)))
                    {
                        PRMV = One
                    }
                }
            }

            Method (RPAR, 0, Serialized)
            {
                Local0 = GPCB ()
                Local1 = ((_ADR () >> 0x10) & 0x1F)
                Local2 = (_ADR () & 0x07)
                Local0 += (Local1 << 0x0F)
                Local0 += (Local2 << 0x0C)
                Return (Local0)
            }

            OperationRegion (PXCS, SystemMemory, RPAR (), 0x0C80)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                    ,   3, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                Offset (0xE0), 
                NCB0,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((NCB0 != One))
                {
                    Return (Zero)
                }

                DPGE = Zero
                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = Zero
                DPGE = One
                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = One
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRE)
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP01._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == Zero) || (LNSL == Zero)))
                                    {
                                        If ((PCHS == PCHH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == PCHL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.RP01.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (CondRefOf (\_SB.PC00.RP01.PPRW))
                {
                    Return (PPRW ())
                }

                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR04 ())
                    }
                }

                Return (PD04 ())
            }
        }

        Device (RP02)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPA2 != Zero))
                {
                    Return (RPA2) /* \RPA2 */
                }
                Else
                {
                    Return (0x001C0001)
                }
            }

            Name (SLOT, 0x02)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTR2 /* \LTR2 */
                LMSL = PML2 /* \PML2 */
                LNSL = PNL2 /* \PNL2 */
                If ((HBSL & One))
                {
                    HBCS = One
                }

                If ((CondRefOf (VMR1) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && ((VMR1 & 0x02) != Zero)))
                    {
                        PRMV = One
                    }
                }
            }

            Method (RPAR, 0, Serialized)
            {
                Local0 = GPCB ()
                Local1 = ((_ADR () >> 0x10) & 0x1F)
                Local2 = (_ADR () & 0x07)
                Local0 += (Local1 << 0x0F)
                Local0 += (Local2 << 0x0C)
                Return (Local0)
            }

            OperationRegion (PXCS, SystemMemory, RPAR (), 0x0C80)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                    ,   3, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                Offset (0xE0), 
                NCB0,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((NCB0 != One))
                {
                    Return (Zero)
                }

                DPGE = Zero
                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = Zero
                DPGE = One
                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = One
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRE)
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP02._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == Zero) || (LNSL == Zero)))
                                    {
                                        If ((PCHS == PCHH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == PCHL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.RP02.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (CondRefOf (\_SB.PC00.RP02.PPRW))
                {
                    Return (PPRW ())
                }

                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR05 ())
                    }
                }

                Return (PD05 ())
            }
        }

        Device (RP03)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPA3 != Zero))
                {
                    Return (RPA3) /* \RPA3 */
                }
                Else
                {
                    Return (0x001C0002)
                }
            }

            Name (SLOT, 0x03)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTR3 /* \LTR3 */
                LMSL = PML3 /* \PML3 */
                LNSL = PNL3 /* \PNL3 */
                If ((HBSL & One))
                {
                    HBCS = One
                }

                If ((CondRefOf (VMR1) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && ((VMR1 & 0x04) != Zero)))
                    {
                        PRMV = One
                    }
                }
            }

            Method (RPAR, 0, Serialized)
            {
                Local0 = GPCB ()
                Local1 = ((_ADR () >> 0x10) & 0x1F)
                Local2 = (_ADR () & 0x07)
                Local0 += (Local1 << 0x0F)
                Local0 += (Local2 << 0x0C)
                Return (Local0)
            }

            OperationRegion (PXCS, SystemMemory, RPAR (), 0x0C80)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                    ,   3, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                Offset (0xE0), 
                NCB0,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((NCB0 != One))
                {
                    Return (Zero)
                }

                DPGE = Zero
                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = Zero
                DPGE = One
                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = One
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRE)
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP03._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == Zero) || (LNSL == Zero)))
                                    {
                                        If ((PCHS == PCHH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == PCHL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.RP03.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (CondRefOf (\_SB.PC00.RP03.PPRW))
                {
                    Return (PPRW ())
                }

                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR06 ())
                    }
                }

                Return (PD06 ())
            }
        }

        Device (RP04)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPA4 != Zero))
                {
                    Return (RPA4) /* \RPA4 */
                }
                Else
                {
                    Return (0x001C0003)
                }
            }

            Name (SLOT, 0x04)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTR4 /* \LTR4 */
                LMSL = PML4 /* \PML4 */
                LNSL = PNL4 /* \PNL4 */
                If ((HBSL & One))
                {
                    HBCS = One
                }

                If ((CondRefOf (VMR1) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && ((VMR1 & 0x08) != Zero)))
                    {
                        PRMV = One
                    }
                }
            }

            Method (RPAR, 0, Serialized)
            {
                Local0 = GPCB ()
                Local1 = ((_ADR () >> 0x10) & 0x1F)
                Local2 = (_ADR () & 0x07)
                Local0 += (Local1 << 0x0F)
                Local0 += (Local2 << 0x0C)
                Return (Local0)
            }

            OperationRegion (PXCS, SystemMemory, RPAR (), 0x0C80)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                    ,   3, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                Offset (0xE0), 
                NCB0,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((NCB0 != One))
                {
                    Return (Zero)
                }

                DPGE = Zero
                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = Zero
                DPGE = One
                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = One
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRE)
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP04._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == Zero) || (LNSL == Zero)))
                                    {
                                        If ((PCHS == PCHH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == PCHL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.RP04.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (CondRefOf (\_SB.PC00.RP04.PPRW))
                {
                    Return (PPRW ())
                }

                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR07 ())
                    }
                }

                Return (PD07 ())
            }
        }

        Device (RP05)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPA5 != Zero))
                {
                    Return (RPA5) /* \RPA5 */
                }
                Else
                {
                    Return (0x001C0004)
                }
            }

            Name (SLOT, 0x05)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTR5 /* \LTR5 */
                LMSL = PML5 /* \PML5 */
                LNSL = PNL5 /* \PNL5 */
                If ((HBSL & 0x02))
                {
                    HBCS = One
                }

                If ((CondRefOf (VMR1) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && ((VMR1 & 0x10) != Zero)))
                    {
                        PRMV = One
                    }
                }
            }

            Method (RPAR, 0, Serialized)
            {
                Local0 = GPCB ()
                Local1 = ((_ADR () >> 0x10) & 0x1F)
                Local2 = (_ADR () & 0x07)
                Local0 += (Local1 << 0x0F)
                Local0 += (Local2 << 0x0C)
                Return (Local0)
            }

            OperationRegion (PXCS, SystemMemory, RPAR (), 0x0C80)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                    ,   3, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                Offset (0xE0), 
                NCB0,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((NCB0 != One))
                {
                    Return (Zero)
                }

                DPGE = Zero
                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = Zero
                DPGE = One
                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = One
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRE)
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP05._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == Zero) || (LNSL == Zero)))
                                    {
                                        If ((PCHS == PCHH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == PCHL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.RP05.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (CondRefOf (\_SB.PC00.RP05.PPRW))
                {
                    Return (PPRW ())
                }

                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR04 ())
                    }
                }

                Return (PD04 ())
            }
        }

        Device (RP06)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPA6 != Zero))
                {
                    Return (RPA6) /* \RPA6 */
                }
                Else
                {
                    Return (0x001C0005)
                }
            }

            Name (SLOT, 0x06)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTR6 /* \LTR6 */
                LMSL = PML6 /* \PML6 */
                LNSL = PNL6 /* \PNL6 */
                If ((HBSL & 0x02))
                {
                    HBCS = One
                }

                If ((CondRefOf (VMR1) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && ((VMR1 & 0x20) != Zero)))
                    {
                        PRMV = One
                    }
                }
            }

            Method (RPAR, 0, Serialized)
            {
                Local0 = GPCB ()
                Local1 = ((_ADR () >> 0x10) & 0x1F)
                Local2 = (_ADR () & 0x07)
                Local0 += (Local1 << 0x0F)
                Local0 += (Local2 << 0x0C)
                Return (Local0)
            }

            OperationRegion (PXCS, SystemMemory, RPAR (), 0x0C80)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                    ,   3, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                Offset (0xE0), 
                NCB0,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((NCB0 != One))
                {
                    Return (Zero)
                }

                DPGE = Zero
                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = Zero
                DPGE = One
                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = One
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRE)
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP06._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == Zero) || (LNSL == Zero)))
                                    {
                                        If ((PCHS == PCHH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == PCHL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.RP06.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (CondRefOf (\_SB.PC00.RP06.PPRW))
                {
                    Return (PPRW ())
                }

                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR05 ())
                    }
                }

                Return (PD05 ())
            }
        }

        Device (RP07)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPA7 != Zero))
                {
                    Return (RPA7) /* \RPA7 */
                }
                Else
                {
                    Return (0x001C0006)
                }
            }

            Name (SLOT, 0x07)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTR7 /* \LTR7 */
                LMSL = PML7 /* \PML7 */
                LNSL = PNL7 /* \PNL7 */
                If ((HBSL & 0x02))
                {
                    HBCS = One
                }

                If ((CondRefOf (VMR1) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && ((VMR1 & 0x40) != Zero)))
                    {
                        PRMV = One
                    }
                }
            }

            Method (RPAR, 0, Serialized)
            {
                Local0 = GPCB ()
                Local1 = ((_ADR () >> 0x10) & 0x1F)
                Local2 = (_ADR () & 0x07)
                Local0 += (Local1 << 0x0F)
                Local0 += (Local2 << 0x0C)
                Return (Local0)
            }

            OperationRegion (PXCS, SystemMemory, RPAR (), 0x0C80)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                    ,   3, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                Offset (0xE0), 
                NCB0,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((NCB0 != One))
                {
                    Return (Zero)
                }

                DPGE = Zero
                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = Zero
                DPGE = One
                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = One
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRE)
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP07._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == Zero) || (LNSL == Zero)))
                                    {
                                        If ((PCHS == PCHH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == PCHL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.RP07.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (CondRefOf (\_SB.PC00.RP07.PPRW))
                {
                    Return (PPRW ())
                }

                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR06 ())
                    }
                }

                Return (PD06 ())
            }
        }

        Device (RP08)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPA8 != Zero))
                {
                    Return (RPA8) /* \RPA8 */
                }
                Else
                {
                    Return (0x001C0007)
                }
            }

            Name (SLOT, 0x08)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTR8 /* \LTR8 */
                LMSL = PML8 /* \PML8 */
                LNSL = PNL8 /* \PNL8 */
                If ((HBSL & 0x02))
                {
                    HBCS = One
                }

                If ((CondRefOf (VMR1) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && ((VMR1 & 0x80) != Zero)))
                    {
                        PRMV = One
                    }
                }
            }

            Method (RPAR, 0, Serialized)
            {
                Local0 = GPCB ()
                Local1 = ((_ADR () >> 0x10) & 0x1F)
                Local2 = (_ADR () & 0x07)
                Local0 += (Local1 << 0x0F)
                Local0 += (Local2 << 0x0C)
                Return (Local0)
            }

            OperationRegion (PXCS, SystemMemory, RPAR (), 0x0C80)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                    ,   3, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                Offset (0xE0), 
                NCB0,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((NCB0 != One))
                {
                    Return (Zero)
                }

                DPGE = Zero
                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = Zero
                DPGE = One
                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = One
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRE)
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP08._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == Zero) || (LNSL == Zero)))
                                    {
                                        If ((PCHS == PCHH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == PCHL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.RP08.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (CondRefOf (\_SB.PC00.RP08.PPRW))
                {
                    Return (PPRW ())
                }

                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR07 ())
                    }
                }

                Return (PD07 ())
            }
        }

        Device (RP09)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPA9 != Zero))
                {
                    Return (RPA9) /* \RPA9 */
                }
                Else
                {
                    Return (0x001D0000)
                }
            }

            Name (SLOT, 0x09)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTR9 /* \LTR9 */
                LMSL = PML9 /* \PML9 */
                LNSL = PNL9 /* \PNL9 */
                If ((HBSL & 0x04))
                {
                    HBCS = One
                }

                If ((CondRefOf (VMR2) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && ((VMR2 & One) != Zero)))
                    {
                        PRMV = One
                    }
                }
            }

            Method (RPAR, 0, Serialized)
            {
                Local0 = GPCB ()
                Local1 = ((_ADR () >> 0x10) & 0x1F)
                Local2 = (_ADR () & 0x07)
                Local0 += (Local1 << 0x0F)
                Local0 += (Local2 << 0x0C)
                Return (Local0)
            }

            OperationRegion (PXCS, SystemMemory, RPAR (), 0x0C80)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                    ,   3, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                Offset (0xE0), 
                NCB0,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((NCB0 != One))
                {
                    Return (Zero)
                }

                DPGE = Zero
                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = Zero
                DPGE = One
                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = One
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRE)
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP09._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == Zero) || (LNSL == Zero)))
                                    {
                                        If ((PCHS == PCHH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == PCHL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.RP09.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (CondRefOf (\_SB.PC00.RP09.PPRW))
                {
                    Return (PPRW ())
                }

                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR04 ())
                    }
                }

                Return (PD04 ())
            }
        }

        Device (RP10)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPAA != Zero))
                {
                    Return (RPAA) /* \RPAA */
                }
                Else
                {
                    Return (0x001D0001)
                }
            }

            Name (SLOT, 0x0A)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTRA /* \LTRA */
                LMSL = PMLA /* \PMLA */
                LNSL = PNLA /* \PNLA */
                If ((HBSL & 0x04))
                {
                    HBCS = One
                }

                If ((CondRefOf (VMR2) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && ((VMR2 & 0x02) != Zero)))
                    {
                        PRMV = One
                    }
                }
            }

            Method (RPAR, 0, Serialized)
            {
                Local0 = GPCB ()
                Local1 = ((_ADR () >> 0x10) & 0x1F)
                Local2 = (_ADR () & 0x07)
                Local0 += (Local1 << 0x0F)
                Local0 += (Local2 << 0x0C)
                Return (Local0)
            }

            OperationRegion (PXCS, SystemMemory, RPAR (), 0x0C80)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                    ,   3, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                Offset (0xE0), 
                NCB0,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((NCB0 != One))
                {
                    Return (Zero)
                }

                DPGE = Zero
                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = Zero
                DPGE = One
                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = One
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRE)
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP10._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == Zero) || (LNSL == Zero)))
                                    {
                                        If ((PCHS == PCHH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == PCHL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.RP10.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (CondRefOf (\_SB.PC00.RP10.PPRW))
                {
                    Return (PPRW ())
                }

                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR05 ())
                    }
                }

                Return (PD05 ())
            }
        }

        Device (RP11)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPAB != Zero))
                {
                    Return (RPAB) /* \RPAB */
                }
                Else
                {
                    Return (0x001D0002)
                }
            }

            Name (SLOT, 0x0B)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTRB /* \LTRB */
                LMSL = PMLB /* \PMLB */
                LNSL = PNLB /* \PNLB */
                If ((HBSL & 0x04))
                {
                    HBCS = One
                }

                If ((CondRefOf (VMR2) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && ((VMR2 & 0x04) != Zero)))
                    {
                        PRMV = One
                    }
                }
            }

            Method (RPAR, 0, Serialized)
            {
                Local0 = GPCB ()
                Local1 = ((_ADR () >> 0x10) & 0x1F)
                Local2 = (_ADR () & 0x07)
                Local0 += (Local1 << 0x0F)
                Local0 += (Local2 << 0x0C)
                Return (Local0)
            }

            OperationRegion (PXCS, SystemMemory, RPAR (), 0x0C80)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                    ,   3, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                Offset (0xE0), 
                NCB0,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((NCB0 != One))
                {
                    Return (Zero)
                }

                DPGE = Zero
                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = Zero
                DPGE = One
                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = One
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRE)
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP11._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == Zero) || (LNSL == Zero)))
                                    {
                                        If ((PCHS == PCHH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == PCHL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.RP11.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (CondRefOf (\_SB.PC00.RP11.PPRW))
                {
                    Return (PPRW ())
                }

                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR06 ())
                    }
                }

                Return (PD06 ())
            }
        }

        Device (RP12)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPAC != Zero))
                {
                    Return (RPAC) /* \RPAC */
                }
                Else
                {
                    Return (0x001D0003)
                }
            }

            Name (SLOT, 0x0C)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTRC /* \LTRC */
                LMSL = PMLC /* \PMLC */
                LNSL = PNLC /* \PNLC */
                If ((HBSL & 0x04))
                {
                    HBCS = One
                }

                If ((CondRefOf (VMR2) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && ((VMR2 & 0x08) != Zero)))
                    {
                        PRMV = One
                    }
                }
            }

            Method (RPAR, 0, Serialized)
            {
                Local0 = GPCB ()
                Local1 = ((_ADR () >> 0x10) & 0x1F)
                Local2 = (_ADR () & 0x07)
                Local0 += (Local1 << 0x0F)
                Local0 += (Local2 << 0x0C)
                Return (Local0)
            }

            OperationRegion (PXCS, SystemMemory, RPAR (), 0x0C80)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                    ,   3, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                Offset (0xE0), 
                NCB0,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((NCB0 != One))
                {
                    Return (Zero)
                }

                DPGE = Zero
                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = Zero
                DPGE = One
                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = One
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRE)
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP12._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == Zero) || (LNSL == Zero)))
                                    {
                                        If ((PCHS == PCHH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == PCHL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.RP12.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (CondRefOf (\_SB.PC00.RP12.PPRW))
                {
                    Return (PPRW ())
                }

                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR07 ())
                    }
                }

                Return (PD07 ())
            }
        }

        Device (RP13)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPAD != Zero))
                {
                    Return (RPAD) /* \RPAD */
                }
                Else
                {
                    Return (0x001D0004)
                }
            }

            Name (SLOT, 0x0D)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTRD /* \LTRD */
                LMSL = PMLD /* \PMLD */
                LNSL = PNLD /* \PNLD */
                If ((HBSL & 0x08))
                {
                    HBCS = One
                }

                If ((CondRefOf (VMR2) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && ((VMR2 & 0x10) != Zero)))
                    {
                        PRMV = One
                    }
                }
            }

            Method (RPAR, 0, Serialized)
            {
                Local0 = GPCB ()
                Local1 = ((_ADR () >> 0x10) & 0x1F)
                Local2 = (_ADR () & 0x07)
                Local0 += (Local1 << 0x0F)
                Local0 += (Local2 << 0x0C)
                Return (Local0)
            }

            OperationRegion (PXCS, SystemMemory, RPAR (), 0x0C80)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                    ,   3, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                Offset (0xE0), 
                NCB0,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((NCB0 != One))
                {
                    Return (Zero)
                }

                DPGE = Zero
                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = Zero
                DPGE = One
                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = One
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRE)
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP13._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == Zero) || (LNSL == Zero)))
                                    {
                                        If ((PCHS == PCHH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == PCHL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.RP13.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (CondRefOf (\_SB.PC00.RP13.PPRW))
                {
                    Return (PPRW ())
                }

                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR04 ())
                    }
                }

                Return (PD04 ())
            }
        }

        Device (RP14)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPAE != Zero))
                {
                    Return (RPAE) /* \RPAE */
                }
                Else
                {
                    Return (0x001D0005)
                }
            }

            Name (SLOT, 0x0E)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTRE /* \LTRE */
                LMSL = PMLE /* \PMLE */
                LNSL = PNLE /* \PNLE */
                If ((HBSL & 0x08))
                {
                    HBCS = One
                }

                If ((CondRefOf (VMR2) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && ((VMR2 & 0x20) != Zero)))
                    {
                        PRMV = One
                    }
                }
            }

            Method (RPAR, 0, Serialized)
            {
                Local0 = GPCB ()
                Local1 = ((_ADR () >> 0x10) & 0x1F)
                Local2 = (_ADR () & 0x07)
                Local0 += (Local1 << 0x0F)
                Local0 += (Local2 << 0x0C)
                Return (Local0)
            }

            OperationRegion (PXCS, SystemMemory, RPAR (), 0x0C80)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                    ,   3, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                Offset (0xE0), 
                NCB0,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((NCB0 != One))
                {
                    Return (Zero)
                }

                DPGE = Zero
                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = Zero
                DPGE = One
                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = One
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRE)
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP14._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == Zero) || (LNSL == Zero)))
                                    {
                                        If ((PCHS == PCHH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == PCHL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.RP14.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (CondRefOf (\_SB.PC00.RP14.PPRW))
                {
                    Return (PPRW ())
                }

                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR05 ())
                    }
                }

                Return (PD05 ())
            }
        }

        Device (RP15)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPAF != Zero))
                {
                    Return (RPAF) /* \RPAF */
                }
                Else
                {
                    Return (0x001D0006)
                }
            }

            Name (SLOT, 0x0F)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTRF /* \LTRF */
                LMSL = PMLF /* \PMLF */
                LNSL = PNLF /* \PNLF */
                If ((HBSL & 0x08))
                {
                    HBCS = One
                }

                If ((CondRefOf (VMR2) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && ((VMR2 & 0x40) != Zero)))
                    {
                        PRMV = One
                    }
                }
            }

            Method (RPAR, 0, Serialized)
            {
                Local0 = GPCB ()
                Local1 = ((_ADR () >> 0x10) & 0x1F)
                Local2 = (_ADR () & 0x07)
                Local0 += (Local1 << 0x0F)
                Local0 += (Local2 << 0x0C)
                Return (Local0)
            }

            OperationRegion (PXCS, SystemMemory, RPAR (), 0x0C80)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                    ,   3, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                Offset (0xE0), 
                NCB0,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((NCB0 != One))
                {
                    Return (Zero)
                }

                DPGE = Zero
                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = Zero
                DPGE = One
                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = One
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRE)
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP15._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == Zero) || (LNSL == Zero)))
                                    {
                                        If ((PCHS == PCHH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == PCHL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.RP15.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (CondRefOf (\_SB.PC00.RP15.PPRW))
                {
                    Return (PPRW ())
                }

                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR06 ())
                    }
                }

                Return (PD06 ())
            }
        }

        Device (RP16)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPAG != Zero))
                {
                    Return (RPAG) /* \RPAG */
                }
                Else
                {
                    Return (0x001D0007)
                }
            }

            Name (SLOT, 0x10)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTRG /* \LTRG */
                LMSL = PMLG /* \PMLG */
                LNSL = PNLG /* \PNLG */
                If ((HBSL & 0x08))
                {
                    HBCS = One
                }

                If ((CondRefOf (VMR2) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && ((VMR2 & 0x80) != Zero)))
                    {
                        PRMV = One
                    }
                }
            }

            Method (RPAR, 0, Serialized)
            {
                Local0 = GPCB ()
                Local1 = ((_ADR () >> 0x10) & 0x1F)
                Local2 = (_ADR () & 0x07)
                Local0 += (Local1 << 0x0F)
                Local0 += (Local2 << 0x0C)
                Return (Local0)
            }

            OperationRegion (PXCS, SystemMemory, RPAR (), 0x0C80)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                    ,   3, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                Offset (0xE0), 
                NCB0,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((NCB0 != One))
                {
                    Return (Zero)
                }

                DPGE = Zero
                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = Zero
                DPGE = One
                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = One
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRE)
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP16._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == Zero) || (LNSL == Zero)))
                                    {
                                        If ((PCHS == PCHH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == PCHL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.RP16.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (CondRefOf (\_SB.PC00.RP16.PPRW))
                {
                    Return (PPRW ())
                }

                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR07 ())
                    }
                }

                Return (PD07 ())
            }
        }

        Device (RP17)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPAH != Zero))
                {
                    Return (RPAH) /* \RPAH */
                }
                Else
                {
                    Return (0x001B0000)
                }
            }

            Name (SLOT, 0x11)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTRH /* \LTRH */
                LMSL = PMLH /* \PMLH */
                LNSL = PNLH /* \PNLH */
                If ((HBSL & 0x10))
                {
                    HBCS = One
                }

                If ((CondRefOf (VMR3) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && ((VMR3 & One) != Zero)))
                    {
                        PRMV = One
                    }
                }
            }

            Method (RPAR, 0, Serialized)
            {
                Local0 = GPCB ()
                Local1 = ((_ADR () >> 0x10) & 0x1F)
                Local2 = (_ADR () & 0x07)
                Local0 += (Local1 << 0x0F)
                Local0 += (Local2 << 0x0C)
                Return (Local0)
            }

            OperationRegion (PXCS, SystemMemory, RPAR (), 0x0C80)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                    ,   3, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                Offset (0xE0), 
                NCB0,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((NCB0 != One))
                {
                    Return (Zero)
                }

                DPGE = Zero
                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = Zero
                DPGE = One
                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = One
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRE)
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP17._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == Zero) || (LNSL == Zero)))
                                    {
                                        If ((PCHS == PCHH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == PCHL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.RP17.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (CondRefOf (\_SB.PC00.RP17.PPRW))
                {
                    Return (PPRW ())
                }

                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR04 ())
                    }
                }

                Return (PD04 ())
            }
        }

        Device (RP18)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPAI != Zero))
                {
                    Return (RPAI) /* \RPAI */
                }
                Else
                {
                    Return (0x001B0001)
                }
            }

            Name (SLOT, 0x12)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTRI /* \LTRI */
                LMSL = PMLI /* \PMLI */
                LNSL = PNLI /* \PNLI */
                If ((HBSL & 0x10))
                {
                    HBCS = One
                }

                If ((CondRefOf (VMR3) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && ((VMR3 & 0x02) != Zero)))
                    {
                        PRMV = One
                    }
                }
            }

            Method (RPAR, 0, Serialized)
            {
                Local0 = GPCB ()
                Local1 = ((_ADR () >> 0x10) & 0x1F)
                Local2 = (_ADR () & 0x07)
                Local0 += (Local1 << 0x0F)
                Local0 += (Local2 << 0x0C)
                Return (Local0)
            }

            OperationRegion (PXCS, SystemMemory, RPAR (), 0x0C80)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                    ,   3, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                Offset (0xE0), 
                NCB0,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((NCB0 != One))
                {
                    Return (Zero)
                }

                DPGE = Zero
                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = Zero
                DPGE = One
                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = One
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRE)
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP18._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == Zero) || (LNSL == Zero)))
                                    {
                                        If ((PCHS == PCHH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == PCHL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.RP18.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (CondRefOf (\_SB.PC00.RP18.PPRW))
                {
                    Return (PPRW ())
                }

                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR05 ())
                    }
                }

                Return (PD05 ())
            }
        }

        Device (RP19)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPAJ != Zero))
                {
                    Return (RPAJ) /* \RPAJ */
                }
                Else
                {
                    Return (0x001B0002)
                }
            }

            Name (SLOT, 0x13)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTRJ /* \LTRJ */
                LMSL = PMLJ /* \PMLJ */
                LNSL = PNLJ /* \PNLJ */
                If ((HBSL & 0x10))
                {
                    HBCS = One
                }

                If ((CondRefOf (VMR3) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && ((VMR3 & 0x04) != Zero)))
                    {
                        PRMV = One
                    }
                }
            }

            Method (RPAR, 0, Serialized)
            {
                Local0 = GPCB ()
                Local1 = ((_ADR () >> 0x10) & 0x1F)
                Local2 = (_ADR () & 0x07)
                Local0 += (Local1 << 0x0F)
                Local0 += (Local2 << 0x0C)
                Return (Local0)
            }

            OperationRegion (PXCS, SystemMemory, RPAR (), 0x0C80)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                    ,   3, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                Offset (0xE0), 
                NCB0,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((NCB0 != One))
                {
                    Return (Zero)
                }

                DPGE = Zero
                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = Zero
                DPGE = One
                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = One
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRE)
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP19._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == Zero) || (LNSL == Zero)))
                                    {
                                        If ((PCHS == PCHH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == PCHL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.RP19.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (CondRefOf (\_SB.PC00.RP19.PPRW))
                {
                    Return (PPRW ())
                }

                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR06 ())
                    }
                }

                Return (PD06 ())
            }
        }

        Device (RP20)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPAK != Zero))
                {
                    Return (RPAK) /* \RPAK */
                }
                Else
                {
                    Return (0x001B0003)
                }
            }

            Name (SLOT, 0x14)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTRK /* \LTRK */
                LMSL = PMLK /* \_SB_.PC00.PMLK */
                LNSL = PNLK /* \PNLK */
                If ((HBSL & 0x10))
                {
                    HBCS = One
                }

                If ((CondRefOf (VMR3) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && ((VMR3 & 0x08) != Zero)))
                    {
                        PRMV = One
                    }
                }
            }

            Method (RPAR, 0, Serialized)
            {
                Local0 = GPCB ()
                Local1 = ((_ADR () >> 0x10) & 0x1F)
                Local2 = (_ADR () & 0x07)
                Local0 += (Local1 << 0x0F)
                Local0 += (Local2 << 0x0C)
                Return (Local0)
            }

            OperationRegion (PXCS, SystemMemory, RPAR (), 0x0C80)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                    ,   3, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                Offset (0xE0), 
                NCB0,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((NCB0 != One))
                {
                    Return (Zero)
                }

                DPGE = Zero
                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = Zero
                DPGE = One
                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = One
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRE)
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP20._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == Zero) || (LNSL == Zero)))
                                    {
                                        If ((PCHS == PCHH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == PCHL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.RP20.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (CondRefOf (\_SB.PC00.RP20.PPRW))
                {
                    Return (PPRW ())
                }

                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR07 ())
                    }
                }

                Return (PD07 ())
            }
        }

        Device (RP21)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPAL != Zero))
                {
                    Return (RPAL) /* \RPAL */
                }
                Else
                {
                    Return (0x001B0004)
                }
            }

            Name (SLOT, 0x15)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTRL /* \LTRL */
                LMSL = PMLL /* \PMLL */
                LNSL = PNLL /* \PNLL */
                If ((HBSL & 0x20))
                {
                    HBCS = One
                }

                If ((CondRefOf (VMR3) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && ((VMR3 & 0x10) != Zero)))
                    {
                        PRMV = One
                    }
                }
            }

            Method (RPAR, 0, Serialized)
            {
                Local0 = GPCB ()
                Local1 = ((_ADR () >> 0x10) & 0x1F)
                Local2 = (_ADR () & 0x07)
                Local0 += (Local1 << 0x0F)
                Local0 += (Local2 << 0x0C)
                Return (Local0)
            }

            OperationRegion (PXCS, SystemMemory, RPAR (), 0x0C80)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                    ,   3, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                Offset (0xE0), 
                NCB0,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((NCB0 != One))
                {
                    Return (Zero)
                }

                DPGE = Zero
                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = Zero
                DPGE = One
                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = One
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRE)
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP21._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == Zero) || (LNSL == Zero)))
                                    {
                                        If ((PCHS == PCHH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == PCHL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.RP21.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (CondRefOf (\_SB.PC00.RP21.PPRW))
                {
                    Return (PPRW ())
                }

                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR04 ())
                    }
                }

                Return (PD04 ())
            }
        }

        Device (RP22)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPAM != Zero))
                {
                    Return (RPAM) /* \RPAM */
                }
                Else
                {
                    Return (0x001B0005)
                }
            }

            Name (SLOT, 0x16)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTRM /* \LTRM */
                LMSL = PMLM /* \PMLM */
                LNSL = PNLM /* \PNLM */
                If ((HBSL & 0x20))
                {
                    HBCS = One
                }

                If ((CondRefOf (VMR3) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && ((VMR3 & 0x20) != Zero)))
                    {
                        PRMV = One
                    }
                }
            }

            Method (RPAR, 0, Serialized)
            {
                Local0 = GPCB ()
                Local1 = ((_ADR () >> 0x10) & 0x1F)
                Local2 = (_ADR () & 0x07)
                Local0 += (Local1 << 0x0F)
                Local0 += (Local2 << 0x0C)
                Return (Local0)
            }

            OperationRegion (PXCS, SystemMemory, RPAR (), 0x0C80)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                    ,   3, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                Offset (0xE0), 
                NCB0,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((NCB0 != One))
                {
                    Return (Zero)
                }

                DPGE = Zero
                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = Zero
                DPGE = One
                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = One
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRE)
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP22._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == Zero) || (LNSL == Zero)))
                                    {
                                        If ((PCHS == PCHH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == PCHL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.RP22.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (CondRefOf (\_SB.PC00.RP22.PPRW))
                {
                    Return (PPRW ())
                }

                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR05 ())
                    }
                }

                Return (PD05 ())
            }
        }

        Device (RP23)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPAN != Zero))
                {
                    Return (RPAN) /* \RPAN */
                }
                Else
                {
                    Return (0x001B0006)
                }
            }

            Name (SLOT, 0x17)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTRN /* \LTRN */
                LMSL = PMLN /* \PMLN */
                LNSL = PNLN /* \PNLN */
                If ((HBSL & 0x20))
                {
                    HBCS = One
                }

                If ((CondRefOf (VMR3) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && ((VMR3 & 0x40) != Zero)))
                    {
                        PRMV = One
                    }
                }
            }

            Method (RPAR, 0, Serialized)
            {
                Local0 = GPCB ()
                Local1 = ((_ADR () >> 0x10) & 0x1F)
                Local2 = (_ADR () & 0x07)
                Local0 += (Local1 << 0x0F)
                Local0 += (Local2 << 0x0C)
                Return (Local0)
            }

            OperationRegion (PXCS, SystemMemory, RPAR (), 0x0C80)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                    ,   3, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                Offset (0xE0), 
                NCB0,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((NCB0 != One))
                {
                    Return (Zero)
                }

                DPGE = Zero
                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = Zero
                DPGE = One
                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = One
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRE)
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP23._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == Zero) || (LNSL == Zero)))
                                    {
                                        If ((PCHS == PCHH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == PCHL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.RP23.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (CondRefOf (\_SB.PC00.RP23.PPRW))
                {
                    Return (PPRW ())
                }

                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR06 ())
                    }
                }

                Return (PD06 ())
            }
        }

        Device (RP24)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPAO != Zero))
                {
                    Return (RPAO) /* \RPAO */
                }
                Else
                {
                    Return (0x001B0007)
                }
            }

            Name (SLOT, 0x18)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTRO /* \LTRO */
                LMSL = PMLO /* \PMLO */
                LNSL = PNLO /* \PNLO */
                If ((HBSL & 0x20))
                {
                    HBCS = One
                }

                If ((CondRefOf (VMR3) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && ((VMR3 & 0x80) != Zero)))
                    {
                        PRMV = One
                    }
                }
            }

            Method (RPAR, 0, Serialized)
            {
                Local0 = GPCB ()
                Local1 = ((_ADR () >> 0x10) & 0x1F)
                Local2 = (_ADR () & 0x07)
                Local0 += (Local1 << 0x0F)
                Local0 += (Local2 << 0x0C)
                Return (Local0)
            }

            OperationRegion (PXCS, SystemMemory, RPAR (), 0x0C80)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                    ,   3, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                Offset (0xE0), 
                NCB0,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((NCB0 != One))
                {
                    Return (Zero)
                }

                DPGE = Zero
                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = Zero
                DPGE = One
                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                NCB0 = One
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRE)
                                {
                                    FUN6 = One
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.RP24._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == Zero) || (LNSL == Zero)))
                                    {
                                        If ((PCHS == PCHH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == PCHL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.RP24.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (CondRefOf (\_SB.PC00.RP24.PPRW))
                {
                    Return (PPRW ())
                }

                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (CondRefOf (PICM))
                {
                    If (PICM)
                    {
                        Return (AR07 ())
                    }
                }

                Return (PD07 ())
            }
        }

        Device (SAT0)
        {
            Name (_ADR, 0x00170000)  // _ADR: Address
            Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
            {
                ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "StorageD3Enable", 
                        One
                    }
                }
            })
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                If ((Arg0 == ToUUID ("9cd9cddd-8845-4afd-8392-31c4eb87cabd") /* Unknown UUID */))
                {
                    Return (D3AS (Arg1, Arg2, Arg3))
                }

                If ((CondRefOf (SATC) && CondRefOf (SATD)))
                {
                    If (SATC (Arg0))
                    {
                        Return (SATD (Arg0, Arg1, Arg2, Arg3))
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                If ((PCHS == PCHL))
                {
                    If (!SCFD)
                    {
                        CSD0 (0x14)
                    }
                }

                ISAT = Zero
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                ISAT = One
                If ((PCHS == PCHL))
                {
                    CSD3 (0x14)
                }
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                Return (0x03)
            }

            Device (PRT0)
            {
                Name (_ADR, 0xFFFF)  // _ADR: Address
                Method (PRES, 0, NotSerialized)
                {
                    If ((SPPR & One))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Device (PRT1)
            {
                Name (_ADR, 0x0001FFFF)  // _ADR: Address
                Method (PRES, 0, NotSerialized)
                {
                    If ((SPPR & 0x02))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Device (PRT2)
            {
                Name (_ADR, 0x0002FFFF)  // _ADR: Address
                Method (PRES, 0, NotSerialized)
                {
                    If ((SPPR & 0x04))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Device (PRT3)
            {
                Name (_ADR, 0x0003FFFF)  // _ADR: Address
                Method (PRES, 0, NotSerialized)
                {
                    If ((SPPR & 0x08))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Device (PRT4)
            {
                Name (_ADR, 0x0004FFFF)  // _ADR: Address
                Method (PRES, 0, NotSerialized)
                {
                    If ((SPPR & 0x10))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Device (PRT5)
            {
                Name (_ADR, 0x0005FFFF)  // _ADR: Address
                Method (PRES, 0, NotSerialized)
                {
                    If ((SPPR & 0x20))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Device (NVM1)
            {
                Name (_ADR, 0x00C1FFFF)  // _ADR: Address
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    NITV = NIT1 /* \NIT1 */
                    NPMV = NPM1 /* \NPM1 */
                    NPCV = NPC1 /* \NPC1 */
                    NL1V = NL11 /* \NL11 */
                    ND2V = ND21 /* \ND21 */
                    ND1V = ND11 /* \ND11 */
                    NLRV = NLR1 /* \NLR1 */
                    NLDV = NLD1 /* \NLD1 */
                    NEAV = NEA1 /* \NEA1 */
                    NEBV = NEB1 /* \NEB1 */
                    NECV = NEC1 /* \NEC1 */
                    NRAV = NRA1 /* \NRA1 */
                    NMBV = NMB1 /* \NMB1 */
                    NMVV = NMV1 /* \NMV1 */
                    NPBV = NPB1 /* \NPB1 */
                    NPVV = NPV1 /* \NPV1 */
                    NRPN = NRP1 /* \NRP1 */
                    NCRN = Zero
                }

                Name (PRBI, Zero)
                Name (PRBD, Zero)
                Name (PCMD, Zero)
                Name (NCRN, Zero)
                Name (NITV, Zero)
                Name (NPMV, Zero)
                Name (NPCV, Zero)
                Name (NL1V, Zero)
                Name (ND2V, Zero)
                Name (ND1V, Zero)
                Name (NLRV, Zero)
                Name (NLDV, Zero)
                Name (NEAV, Zero)
                Name (NEBV, Zero)
                Name (NECV, Zero)
                Name (NRAV, Zero)
                Name (NMBV, Zero)
                Name (NMVV, Zero)
                Name (NPBV, Zero)
                Name (NPVV, Zero)
                Name (NRPN, Zero)
                Name (MXIE, Zero)
                Name (ID3C, Zero)
                Name (ID3H, Zero)
                Name (CSAV, Zero)
                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    If (IR3D ())
                    {
                        Return (Zero)
                    }

                    NVD3 ()
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    If (IR3D ())
                    {
                        Return (Zero)
                    }

                    NVD0 ()
                }

                Method (RL23, 0, NotSerialized)
                {
                    RDCA (NCRN, 0xE2, 0xFFFFFFFF, 0x04, One)
                    Sleep (0x10)
                    Local0 = Zero
                    While ((RDCA (NCRN, 0xE2, Zero, Zero, Zero) & 0x04))
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    RDCA (NCRN, 0x0324, 0xFFFFFFFF, 0x08, One)
                }

                Method (RLA, 0, NotSerialized)
                {
                    RDCA (NCRN, 0x0420, 0xBFFFFFFF, Zero, One)
                    RDCA (NCRN, 0xE2, 0xFFFFFFFF, 0x08, One)
                    Sleep (0x10)
                    Local0 = Zero
                    While ((RDCA (NCRN, 0xE2, Zero, Zero, Zero) & 0x08))
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    RDCA (NCRN, 0x0420, 0xFFFFFFFF, 0x40000000, One)
                    Local0 = Zero
                    While (((RDCA (NCRN, 0x52, Zero, Zero, Zero) & 0x2000) == Zero))
                    {
                        If ((Local0 > 0x08))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    RDCA (NCRN, 0x0324, 0xFFFFFFF7, Zero, One)
                }

                Method (RPON, 0, Serialized)
                {
                    If ((ID3C == Zero))
                    {
                        Return (Zero)
                    }

                    RSON (NRPN)
                    RLA ()
                    Sleep (0x64)
                    ID3C = Zero
                }

                Method (RPOF, 0, Serialized)
                {
                    If ((ID3H == Zero))
                    {
                        BreakPoint
                        Return (Zero)
                    }

                    If (!D3CS (NRPN))
                    {
                        Return (Zero)
                    }

                    RL23 ()
                    RSOF (NRPN)
                    ID3C = One
                }

                Method (SAVC, 0, Serialized)
                {
                    PCMD = RDCA (NCRN, 0x04, Zero, Zero, 0x02)
                    If ((NITV == One))
                    {
                        PRBI = 0x24
                        PRBD = RDCA (NCRN, 0x24, Zero, Zero, 0x02)
                    }
                    ElseIf ((NITV == 0x02))
                    {
                        PRBI = 0x10
                        PRBD = RDCA (NCRN, 0x10, Zero, Zero, 0x02)
                        OperationRegion (MCRC, SystemMemory, (GPCB () + 0x000B833C), 0x04)
                        Field (MCRC, AnyAcc, NoLock, Preserve)
                        {
                            SCSO,   8, 
                            Offset (0x02), 
                            TCSO,   8, 
                                ,   7, 
                            RE,     1
                        }

                        MXIE = RDCA (NCRN, TCSO, Zero, Zero, 0x02)
                    }

                    CSAV = One
                }

                Method (NVD3, 0, Serialized)
                {
                    If ((NITV == Zero))
                    {
                        Return (Zero)
                    }

                    If ((ID3H == One))
                    {
                        Return (Zero)
                    }

                    SAVC ()
                    RDCA (NCRN, (NPMV + 0x04), 0xFFFFFFFC, 0x03, 0x03)
                    RDCA (NCRN, 0xA4, 0xFFFFFFFC, 0x03, One)
                    ID3H = One
                    Return (Zero)
                }

                Method (NVD0, 0, Serialized)
                {
                    If ((NITV == Zero))
                    {
                        Return (Zero)
                    }

                    If ((ID3H == Zero))
                    {
                        Return (Zero)
                    }

                    RDCA (NCRN, 0xA4, 0xFFFFFFFC, Zero, One)
                    RDCA (NCRN, (NPMV + 0x04), 0xFFFFFFFC, Zero, 0x03)
                    If ((CSAV == One))
                    {
                        CNRS ()
                        If ((NITV == 0x02))
                        {
                            OperationRegion (MCRC, SystemMemory, (GPCB () + 0x000B833C), 0x04)
                            Field (MCRC, AnyAcc, NoLock, Preserve)
                            {
                                SCSO,   8, 
                                Offset (0x02), 
                                TCSO,   8, 
                                    ,   7, 
                                RE,     1
                            }

                            RDCA (NCRN, TCSO, 0xFFFFFFFF, (MXIE & 0x80000000), 0x03)
                        }
                    }
                    Else
                    {
                    }

                    ID3H = Zero
                    Return (Zero)
                }

                Method (CNRS, 0, Serialized)
                {
                    If ((NITV == Zero))
                    {
                        Return (Zero)
                    }

                    RDCA (NCRN, 0x10, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x14, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x18, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x1C, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x20, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x24, Zero, Zero, 0x03)
                    RDCA (NCRN, PRBI, Zero, PRBD, 0x03)
                    RDCA (NCRN, 0x04, 0xFFFFFFF8, PCMD, 0x03)
                    If ((NL1V != Zero))
                    {
                        RDCA (NCRN, (NL1V + 0x0C), 0xFFFFFF00, ND2V, 0x03)
                        RDCA (NCRN, (NL1V + 0x08), 0x0F, (ND1V & 0xFFFFFFF0), 0x03)
                        RDCA (NCRN, (NL1V + 0x08), 0xFFFFFFFF, ND1V, 0x03)
                    }

                    If ((NLRV != Zero))
                    {
                        RDCA (NCRN, (NLRV + 0x04), 0xFFFFFFFF, NLDV, 0x03)
                    }

                    RDCA (NCRN, (NPCV + 0x10), 0xFFFFFEBF, (NEAV & 0xFFFC), 0x03)
                    RDCA (NCRN, (NPCV + 0x28), 0xFFFFFBFF, NECV, 0x03)
                    RDCA (NCRN, (NPCV + 0x08), 0xFFFFFF1F, NEBV, 0x03)
                    RDCA (NCRN, 0x68, 0xFFFFFBFF, NRAV, One)
                    If (((NEAV & 0x40) == 0x40))
                    {
                        RDCA (NCRN, 0x50, 0xFFFFFFDF, 0x20, One)
                        While (((RDCA (NCRN, 0x52, Zero, Zero, Zero) & 0x2000) == Zero))
                        {
                            Stall (0x0A)
                        }
                    }

                    RDCA (NCRN, (NPCV + 0x10), 0xFFFFFFFC, (NEAV & 0x03), 0x03)
                    If ((NMVV != Zero))
                    {
                        RDCA (NCRN, NMBV, Zero, NMVV, 0x03)
                    }

                    If ((NPVV != Zero))
                    {
                        RDCA (NCRN, NPBV, Zero, NPVV, 0x03)
                    }
                }
            }

            Device (NVM2)
            {
                Name (_ADR, 0x00C2FFFF)  // _ADR: Address
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    NITV = NIT2 /* \NIT2 */
                    NPMV = NPM2 /* \NPM2 */
                    NPCV = NPC2 /* \NPC2 */
                    NL1V = NL12 /* \NL12 */
                    ND2V = ND22 /* \ND22 */
                    ND1V = ND12 /* \ND12 */
                    NLRV = NLR2 /* \NLR2 */
                    NLDV = NLD2 /* \NLD2 */
                    NEAV = NEA2 /* \NEA2 */
                    NEBV = NEB2 /* \NEB2 */
                    NECV = NEC2 /* \NEC2 */
                    NRAV = NRA2 /* \NRA2 */
                    NMBV = NMB2 /* \NMB2 */
                    NMVV = NMV2 /* \NMV2 */
                    NPBV = NPB2 /* \NPB2 */
                    NPVV = NPV2 /* \NPV2 */
                    NRPN = NRP2 /* \NRP2 */
                    NCRN = One
                }

                Name (PRBI, Zero)
                Name (PRBD, Zero)
                Name (PCMD, Zero)
                Name (NCRN, Zero)
                Name (NITV, Zero)
                Name (NPMV, Zero)
                Name (NPCV, Zero)
                Name (NL1V, Zero)
                Name (ND2V, Zero)
                Name (ND1V, Zero)
                Name (NLRV, Zero)
                Name (NLDV, Zero)
                Name (NEAV, Zero)
                Name (NEBV, Zero)
                Name (NECV, Zero)
                Name (NRAV, Zero)
                Name (NMBV, Zero)
                Name (NMVV, Zero)
                Name (NPBV, Zero)
                Name (NPVV, Zero)
                Name (NRPN, Zero)
                Name (MXIE, Zero)
                Name (ID3C, Zero)
                Name (ID3H, Zero)
                Name (CSAV, Zero)
                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    If (IR3D ())
                    {
                        Return (Zero)
                    }

                    NVD3 ()
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    If (IR3D ())
                    {
                        Return (Zero)
                    }

                    NVD0 ()
                }

                Method (RL23, 0, NotSerialized)
                {
                    RDCA (NCRN, 0xE2, 0xFFFFFFFF, 0x04, One)
                    Sleep (0x10)
                    Local0 = Zero
                    While ((RDCA (NCRN, 0xE2, Zero, Zero, Zero) & 0x04))
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    RDCA (NCRN, 0x0324, 0xFFFFFFFF, 0x08, One)
                }

                Method (RLA, 0, NotSerialized)
                {
                    RDCA (NCRN, 0x0420, 0xBFFFFFFF, Zero, One)
                    RDCA (NCRN, 0xE2, 0xFFFFFFFF, 0x08, One)
                    Sleep (0x10)
                    Local0 = Zero
                    While ((RDCA (NCRN, 0xE2, Zero, Zero, Zero) & 0x08))
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    RDCA (NCRN, 0x0420, 0xFFFFFFFF, 0x40000000, One)
                    Local0 = Zero
                    While (((RDCA (NCRN, 0x52, Zero, Zero, Zero) & 0x2000) == Zero))
                    {
                        If ((Local0 > 0x08))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    RDCA (NCRN, 0x0324, 0xFFFFFFF7, Zero, One)
                }

                Method (RPON, 0, Serialized)
                {
                    If ((ID3C == Zero))
                    {
                        Return (Zero)
                    }

                    RSON (NRPN)
                    RLA ()
                    Sleep (0x64)
                    ID3C = Zero
                }

                Method (RPOF, 0, Serialized)
                {
                    If ((ID3H == Zero))
                    {
                        BreakPoint
                        Return (Zero)
                    }

                    If (!D3CS (NRPN))
                    {
                        Return (Zero)
                    }

                    RL23 ()
                    RSOF (NRPN)
                    ID3C = One
                }

                Method (SAVC, 0, Serialized)
                {
                    PCMD = RDCA (NCRN, 0x04, Zero, Zero, 0x02)
                    If ((NITV == One))
                    {
                        PRBI = 0x24
                        PRBD = RDCA (NCRN, 0x24, Zero, Zero, 0x02)
                    }
                    ElseIf ((NITV == 0x02))
                    {
                        PRBI = 0x10
                        PRBD = RDCA (NCRN, 0x10, Zero, Zero, 0x02)
                        OperationRegion (MCRC, SystemMemory, (GPCB () + 0x000B833C), 0x04)
                        Field (MCRC, AnyAcc, NoLock, Preserve)
                        {
                            SCSO,   8, 
                            Offset (0x02), 
                            TCSO,   8, 
                                ,   7, 
                            RE,     1
                        }

                        MXIE = RDCA (NCRN, TCSO, Zero, Zero, 0x02)
                    }

                    CSAV = One
                }

                Method (NVD3, 0, Serialized)
                {
                    If ((NITV == Zero))
                    {
                        Return (Zero)
                    }

                    If ((ID3H == One))
                    {
                        Return (Zero)
                    }

                    SAVC ()
                    RDCA (NCRN, (NPMV + 0x04), 0xFFFFFFFC, 0x03, 0x03)
                    RDCA (NCRN, 0xA4, 0xFFFFFFFC, 0x03, One)
                    ID3H = One
                    Return (Zero)
                }

                Method (NVD0, 0, Serialized)
                {
                    If ((NITV == Zero))
                    {
                        Return (Zero)
                    }

                    If ((ID3H == Zero))
                    {
                        Return (Zero)
                    }

                    RDCA (NCRN, 0xA4, 0xFFFFFFFC, Zero, One)
                    RDCA (NCRN, (NPMV + 0x04), 0xFFFFFFFC, Zero, 0x03)
                    If ((CSAV == One))
                    {
                        CNRS ()
                        If ((NITV == 0x02))
                        {
                            OperationRegion (MCRC, SystemMemory, (GPCB () + 0x000B833C), 0x04)
                            Field (MCRC, AnyAcc, NoLock, Preserve)
                            {
                                SCSO,   8, 
                                Offset (0x02), 
                                TCSO,   8, 
                                    ,   7, 
                                RE,     1
                            }

                            RDCA (NCRN, TCSO, 0xFFFFFFFF, (MXIE & 0x80000000), 0x03)
                        }
                    }
                    Else
                    {
                    }

                    ID3H = Zero
                    Return (Zero)
                }

                Method (CNRS, 0, Serialized)
                {
                    If ((NITV == Zero))
                    {
                        Return (Zero)
                    }

                    RDCA (NCRN, 0x10, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x14, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x18, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x1C, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x20, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x24, Zero, Zero, 0x03)
                    RDCA (NCRN, PRBI, Zero, PRBD, 0x03)
                    RDCA (NCRN, 0x04, 0xFFFFFFF8, PCMD, 0x03)
                    If ((NL1V != Zero))
                    {
                        RDCA (NCRN, (NL1V + 0x0C), 0xFFFFFF00, ND2V, 0x03)
                        RDCA (NCRN, (NL1V + 0x08), 0x0F, (ND1V & 0xFFFFFFF0), 0x03)
                        RDCA (NCRN, (NL1V + 0x08), 0xFFFFFFFF, ND1V, 0x03)
                    }

                    If ((NLRV != Zero))
                    {
                        RDCA (NCRN, (NLRV + 0x04), 0xFFFFFFFF, NLDV, 0x03)
                    }

                    RDCA (NCRN, (NPCV + 0x10), 0xFFFFFEBF, (NEAV & 0xFFFC), 0x03)
                    RDCA (NCRN, (NPCV + 0x28), 0xFFFFFBFF, NECV, 0x03)
                    RDCA (NCRN, (NPCV + 0x08), 0xFFFFFF1F, NEBV, 0x03)
                    RDCA (NCRN, 0x68, 0xFFFFFBFF, NRAV, One)
                    If (((NEAV & 0x40) == 0x40))
                    {
                        RDCA (NCRN, 0x50, 0xFFFFFFDF, 0x20, One)
                        While (((RDCA (NCRN, 0x52, Zero, Zero, Zero) & 0x2000) == Zero))
                        {
                            Stall (0x0A)
                        }
                    }

                    RDCA (NCRN, (NPCV + 0x10), 0xFFFFFFFC, (NEAV & 0x03), 0x03)
                    If ((NMVV != Zero))
                    {
                        RDCA (NCRN, NMBV, Zero, NMVV, 0x03)
                    }

                    If ((NPVV != Zero))
                    {
                        RDCA (NCRN, NPBV, Zero, NPVV, 0x03)
                    }
                }
            }

            Device (NVM3)
            {
                Name (_ADR, 0x00C3FFFF)  // _ADR: Address
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    NITV = NIT3 /* \NIT3 */
                    NPMV = NPM3 /* \NPM3 */
                    NPCV = NPC3 /* \NPC3 */
                    NL1V = NL13 /* \NL13 */
                    ND2V = ND23 /* \ND23 */
                    ND1V = ND13 /* \ND13 */
                    NLRV = NLR3 /* \NLR3 */
                    NLDV = NLD3 /* \NLD3 */
                    NEAV = NEA3 /* \NEA3 */
                    NEBV = NEB3 /* \NEB3 */
                    NECV = NEC3 /* \NEC3 */
                    NRAV = NRA3 /* \NRA3 */
                    NMBV = NMB3 /* \NMB3 */
                    NMVV = NMV3 /* \NMV3 */
                    NPBV = NPB3 /* \NPB3 */
                    NPVV = NPV3 /* \NPV3 */
                    NRPN = NRP3 /* \NRP3 */
                    NCRN = 0x02
                }

                Name (PRBI, Zero)
                Name (PRBD, Zero)
                Name (PCMD, Zero)
                Name (NCRN, Zero)
                Name (NITV, Zero)
                Name (NPMV, Zero)
                Name (NPCV, Zero)
                Name (NL1V, Zero)
                Name (ND2V, Zero)
                Name (ND1V, Zero)
                Name (NLRV, Zero)
                Name (NLDV, Zero)
                Name (NEAV, Zero)
                Name (NEBV, Zero)
                Name (NECV, Zero)
                Name (NRAV, Zero)
                Name (NMBV, Zero)
                Name (NMVV, Zero)
                Name (NPBV, Zero)
                Name (NPVV, Zero)
                Name (NRPN, Zero)
                Name (MXIE, Zero)
                Name (ID3C, Zero)
                Name (ID3H, Zero)
                Name (CSAV, Zero)
                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    If (IR3D ())
                    {
                        Return (Zero)
                    }

                    NVD3 ()
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    If (IR3D ())
                    {
                        Return (Zero)
                    }

                    NVD0 ()
                }

                Method (RL23, 0, NotSerialized)
                {
                    RDCA (NCRN, 0xE2, 0xFFFFFFFF, 0x04, One)
                    Sleep (0x10)
                    Local0 = Zero
                    While ((RDCA (NCRN, 0xE2, Zero, Zero, Zero) & 0x04))
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    RDCA (NCRN, 0x0324, 0xFFFFFFFF, 0x08, One)
                }

                Method (RLA, 0, NotSerialized)
                {
                    RDCA (NCRN, 0x0420, 0xBFFFFFFF, Zero, One)
                    RDCA (NCRN, 0xE2, 0xFFFFFFFF, 0x08, One)
                    Sleep (0x10)
                    Local0 = Zero
                    While ((RDCA (NCRN, 0xE2, Zero, Zero, Zero) & 0x08))
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    RDCA (NCRN, 0x0420, 0xFFFFFFFF, 0x40000000, One)
                    Local0 = Zero
                    While (((RDCA (NCRN, 0x52, Zero, Zero, Zero) & 0x2000) == Zero))
                    {
                        If ((Local0 > 0x08))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    RDCA (NCRN, 0x0324, 0xFFFFFFF7, Zero, One)
                }

                Method (RPON, 0, Serialized)
                {
                    If ((ID3C == Zero))
                    {
                        Return (Zero)
                    }

                    RSON (NRPN)
                    RLA ()
                    Sleep (0x64)
                    ID3C = Zero
                }

                Method (RPOF, 0, Serialized)
                {
                    If ((ID3H == Zero))
                    {
                        BreakPoint
                        Return (Zero)
                    }

                    If (!D3CS (NRPN))
                    {
                        Return (Zero)
                    }

                    RL23 ()
                    RSOF (NRPN)
                    ID3C = One
                }

                Method (SAVC, 0, Serialized)
                {
                    PCMD = RDCA (NCRN, 0x04, Zero, Zero, 0x02)
                    If ((NITV == One))
                    {
                        PRBI = 0x24
                        PRBD = RDCA (NCRN, 0x24, Zero, Zero, 0x02)
                    }
                    ElseIf ((NITV == 0x02))
                    {
                        PRBI = 0x10
                        PRBD = RDCA (NCRN, 0x10, Zero, Zero, 0x02)
                        OperationRegion (MCRC, SystemMemory, (GPCB () + 0x000B833C), 0x04)
                        Field (MCRC, AnyAcc, NoLock, Preserve)
                        {
                            SCSO,   8, 
                            Offset (0x02), 
                            TCSO,   8, 
                                ,   7, 
                            RE,     1
                        }

                        MXIE = RDCA (NCRN, TCSO, Zero, Zero, 0x02)
                    }

                    CSAV = One
                }

                Method (NVD3, 0, Serialized)
                {
                    If ((NITV == Zero))
                    {
                        Return (Zero)
                    }

                    If ((ID3H == One))
                    {
                        Return (Zero)
                    }

                    SAVC ()
                    RDCA (NCRN, (NPMV + 0x04), 0xFFFFFFFC, 0x03, 0x03)
                    RDCA (NCRN, 0xA4, 0xFFFFFFFC, 0x03, One)
                    ID3H = One
                    Return (Zero)
                }

                Method (NVD0, 0, Serialized)
                {
                    If ((NITV == Zero))
                    {
                        Return (Zero)
                    }

                    If ((ID3H == Zero))
                    {
                        Return (Zero)
                    }

                    RDCA (NCRN, 0xA4, 0xFFFFFFFC, Zero, One)
                    RDCA (NCRN, (NPMV + 0x04), 0xFFFFFFFC, Zero, 0x03)
                    If ((CSAV == One))
                    {
                        CNRS ()
                        If ((NITV == 0x02))
                        {
                            OperationRegion (MCRC, SystemMemory, (GPCB () + 0x000B833C), 0x04)
                            Field (MCRC, AnyAcc, NoLock, Preserve)
                            {
                                SCSO,   8, 
                                Offset (0x02), 
                                TCSO,   8, 
                                    ,   7, 
                                RE,     1
                            }

                            RDCA (NCRN, TCSO, 0xFFFFFFFF, (MXIE & 0x80000000), 0x03)
                        }
                    }
                    Else
                    {
                    }

                    ID3H = Zero
                    Return (Zero)
                }

                Method (CNRS, 0, Serialized)
                {
                    If ((NITV == Zero))
                    {
                        Return (Zero)
                    }

                    RDCA (NCRN, 0x10, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x14, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x18, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x1C, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x20, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x24, Zero, Zero, 0x03)
                    RDCA (NCRN, PRBI, Zero, PRBD, 0x03)
                    RDCA (NCRN, 0x04, 0xFFFFFFF8, PCMD, 0x03)
                    If ((NL1V != Zero))
                    {
                        RDCA (NCRN, (NL1V + 0x0C), 0xFFFFFF00, ND2V, 0x03)
                        RDCA (NCRN, (NL1V + 0x08), 0x0F, (ND1V & 0xFFFFFFF0), 0x03)
                        RDCA (NCRN, (NL1V + 0x08), 0xFFFFFFFF, ND1V, 0x03)
                    }

                    If ((NLRV != Zero))
                    {
                        RDCA (NCRN, (NLRV + 0x04), 0xFFFFFFFF, NLDV, 0x03)
                    }

                    RDCA (NCRN, (NPCV + 0x10), 0xFFFFFEBF, (NEAV & 0xFFFC), 0x03)
                    RDCA (NCRN, (NPCV + 0x28), 0xFFFFFBFF, NECV, 0x03)
                    RDCA (NCRN, (NPCV + 0x08), 0xFFFFFF1F, NEBV, 0x03)
                    RDCA (NCRN, 0x68, 0xFFFFFBFF, NRAV, One)
                    If (((NEAV & 0x40) == 0x40))
                    {
                        RDCA (NCRN, 0x50, 0xFFFFFFDF, 0x20, One)
                        While (((RDCA (NCRN, 0x52, Zero, Zero, Zero) & 0x2000) == Zero))
                        {
                            Stall (0x0A)
                        }
                    }

                    RDCA (NCRN, (NPCV + 0x10), 0xFFFFFFFC, (NEAV & 0x03), 0x03)
                    If ((NMVV != Zero))
                    {
                        RDCA (NCRN, NMBV, Zero, NMVV, 0x03)
                    }

                    If ((NPVV != Zero))
                    {
                        RDCA (NCRN, NPBV, Zero, NPVV, 0x03)
                    }
                }
            }

            Method (RDCA, 5, Serialized)
            {
                OperationRegion (RPAL, SystemMemory, (GPCB () + (0x000B8100 + Arg1)), 0x04)
                Field (RPAL, DWordAcc, Lock, Preserve)
                {
                    RPCD,   32
                }

                OperationRegion (EPAC, SystemMemory, (GPCB () + 0x000B8308), 0x08)
                Field (EPAC, DWordAcc, Lock, Preserve)
                {
                    CAIR,   32, 
                    CADR,   32
                }

                OperationRegion (NCRG, SystemMemory, (GPCB () + 0x000B8FC0), 0x04)
                Field (NCRG, DWordAcc, Lock, Preserve)
                {
                    CRGC,   32
                }

                If ((Arg0 > 0x02))
                {
                    Return (Zero)
                }
                Else
                {
                    CRGC = Arg0
                }

                Switch (ToInteger (Arg4))
                {
                    Case (Zero)
                    {
                        Return (RPCD) /* \_SB_.PC00.SAT0.RDCA.RPCD */
                    }
                    Case (0x02)
                    {
                        CAIR = Arg1
                        Return (CADR) /* \_SB_.PC00.SAT0.RDCA.CADR */
                    }
                    Case (One)
                    {
                        Local0 = (Arg2 & RPCD) /* \_SB_.PC00.SAT0.RDCA.RPCD */
                        Local0 |= Arg3
                        RPCD = Local0
                    }
                    Case (0x03)
                    {
                        CAIR = Arg1
                        Local0 = (Arg2 & CADR) /* \_SB_.PC00.SAT0.RDCA.CADR */
                        Local0 |= Arg3
                        CADR = Local0
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }

                Return (Zero)
            }

            Method (D3CS, 1, Serialized)
            {
                Switch (ToInteger (Arg0))
                {
                    Case (0x04)
                    {
                        If (CondRefOf (\_SB.PC00.RP05.POFF))
                        {
                            Return (One)
                        }
                    }
                    Case (0x06)
                    {
                        If (CondRefOf (\_SB.PC00.RP07.POFF))
                        {
                            Return (One)
                        }
                    }
                    Case (0x08)
                    {
                        If (CondRefOf (\_SB.PC00.RP09.POFF))
                        {
                            Return (One)
                        }
                    }
                    Case (0x0A)
                    {
                        If (CondRefOf (\_SB.PC00.RP11.POFF))
                        {
                            Return (One)
                        }
                    }
                    Case (0x0C)
                    {
                        If (CondRefOf (\_SB.PC00.RP13.POFF))
                        {
                            Return (One)
                        }
                    }
                    Case (0x0E)
                    {
                        If (CondRefOf (\_SB.PC00.RP15.POFF))
                        {
                            Return (One)
                        }
                    }
                    Case (0x10)
                    {
                        If (CondRefOf (\_SB.PC00.RP17.POFF))
                        {
                            Return (One)
                        }
                    }
                    Case (0x12)
                    {
                        If (CondRefOf (\_SB.PC00.RP19.POFF))
                        {
                            Return (One)
                        }
                    }
                    Case (0x14)
                    {
                        If (CondRefOf (\_SB.PC00.RP21.POFF))
                        {
                            Return (One)
                        }
                    }
                    Case (0x16)
                    {
                        If (CondRefOf (\_SB.PC00.RP23.POFF))
                        {
                            Return (One)
                        }
                    }

                }

                Return (Zero)
            }

            Method (RSON, 1, Serialized)
            {
                Switch (ToInteger (Arg0))
                {
                    Case (0x04)
                    {
                        If (CondRefOf (\_SB.PC00.RP05.PON))
                        {
                            ^^RP05.PON ()
                        }
                    }
                    Case (0x06)
                    {
                        If (CondRefOf (\_SB.PC00.RP07.PON))
                        {
                            ^^RP07.PON ()
                        }
                    }
                    Case (0x08)
                    {
                        If (CondRefOf (\_SB.PC00.RP09.PON))
                        {
                            ^^RP09.PON ()
                        }
                    }
                    Case (0x0A)
                    {
                        If (CondRefOf (\_SB.PC00.RP11.PON))
                        {
                            ^^RP11.PON ()
                        }
                    }
                    Case (0x0C)
                    {
                        If (CondRefOf (\_SB.PC00.RP13.PON))
                        {
                            ^^RP13.PON ()
                        }
                    }
                    Case (0x0E)
                    {
                        If (CondRefOf (\_SB.PC00.RP15.PON))
                        {
                            ^^RP15.PON ()
                        }
                    }
                    Case (0x10)
                    {
                        If (CondRefOf (\_SB.PC00.RP17.PON))
                        {
                            ^^RP17.PON ()
                        }
                    }
                    Case (0x12)
                    {
                        If (CondRefOf (\_SB.PC00.RP19.PON))
                        {
                            ^^RP19.PON ()
                        }
                    }
                    Case (0x14)
                    {
                        If (CondRefOf (\_SB.PC00.RP21.PON))
                        {
                            ^^RP21.PON ()
                        }
                    }
                    Case (0x16)
                    {
                        If (CondRefOf (\_SB.PC00.RP23.PON))
                        {
                            ^^RP23.PON ()
                        }
                    }

                }
            }

            Method (RSOF, 1, Serialized)
            {
                Switch (ToInteger (Arg0))
                {
                    Case (0x04)
                    {
                        If (CondRefOf (\_SB.PC00.RP05.POFF))
                        {
                            ^^RP05.POFF ()
                        }
                    }
                    Case (0x06)
                    {
                        If (CondRefOf (\_SB.PC00.RP07.POFF))
                        {
                            ^^RP07.POFF ()
                        }
                    }
                    Case (0x08)
                    {
                        If (CondRefOf (\_SB.PC00.RP09.POFF))
                        {
                            ^^RP09.POFF ()
                        }
                    }
                    Case (0x0A)
                    {
                        If (CondRefOf (\_SB.PC00.RP11.POFF))
                        {
                            ^^RP11.POFF ()
                        }
                    }
                    Case (0x0C)
                    {
                        If (CondRefOf (\_SB.PC00.RP13.POFF))
                        {
                            ^^RP13.POFF ()
                        }
                    }
                    Case (0x0E)
                    {
                        If (CondRefOf (\_SB.PC00.RP15.POFF))
                        {
                            ^^RP15.POFF ()
                        }
                    }
                    Case (0x10)
                    {
                        If (CondRefOf (\_SB.PC00.RP17.POFF))
                        {
                            ^^RP17.POFF ()
                        }
                    }
                    Case (0x12)
                    {
                        If (CondRefOf (\_SB.PC00.RP19.POFF))
                        {
                            ^^RP19.POFF ()
                        }
                    }
                    Case (0x14)
                    {
                        If (CondRefOf (\_SB.PC00.RP21.POFF))
                        {
                            ^^RP21.POFF ()
                        }
                    }
                    Case (0x16)
                    {
                        If (CondRefOf (\_SB.PC00.RP23.POFF))
                        {
                            ^^RP23.POFF ()
                        }
                    }

                }
            }

            Name (VL0M, Zero)
            Name (VL1M, Zero)
            Name (VL2M, Zero)
            Name (VR3A, One)
            Method (IRM, 1, NotSerialized)
            {
                If ((VL0M & Arg0))
                {
                    Return (One)
                }
                ElseIf ((VL1M & Arg0))
                {
                    Return (One)
                }
                ElseIf ((VL2M & Arg0))
                {
                    Return (One)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (PD3C, 1, NotSerialized)
            {
                Return (!(VR3A || !IRM (Arg0)))
            }

            Scope (PRT0)
            {
                Method (IR3D, 0, NotSerialized)
                {
                    Return (PD3C (One))
                }
            }

            Scope (PRT1)
            {
                Method (IR3D, 0, NotSerialized)
                {
                    Return (PD3C (0x02))
                }
            }

            Scope (PRT2)
            {
                Method (IR3D, 0, NotSerialized)
                {
                    Return (PD3C (0x04))
                }
            }

            Scope (PRT3)
            {
                Method (IR3D, 0, NotSerialized)
                {
                    Return (PD3C (0x08))
                }
            }

            Scope (PRT4)
            {
                Method (IR3D, 0, NotSerialized)
                {
                    Return (PD3C (0x10))
                }
            }

            Scope (PRT5)
            {
                Method (IR3D, 0, NotSerialized)
                {
                    Return (PD3C (0x20))
                }
            }

            Scope (NVM1)
            {
                Method (IR3D, 0, NotSerialized)
                {
                    Return (PD3C (0x0100))
                }
            }

            Scope (NVM2)
            {
                Method (IR3D, 0, NotSerialized)
                {
                    Return (PD3C (0x0200))
                }
            }

            Scope (NVM3)
            {
                Method (IR3D, 0, NotSerialized)
                {
                    Return (Zero)
                }
            }

            Method (RSTD, 5, Serialized)
            {
                If ((Arg0 == ToUUID ("e03e3431-e510-4fa2-abc0-2d7e901245fe") /* Unknown UUID */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (RBUF, Buffer (One)
                            {
                                 0x00                                             // .
                            })
                            CreateByteField (RBUF, Zero, SFUN)
                            SFUN = 0x3F
                            Return (RBUF) /* \_SB_.PC00.SAT0.RSTD.RBUF */
                        }
                        Case (One)
                        {
                            Arg4 = DerefOf (Arg3 [Zero])
                            Local0 = DerefOf (Arg3 [Zero])
                            Return (Package (0x01)
                            {
                                Zero
                            })
                        }
                        Case (0x02)
                        {
                            Local0 = DerefOf (Arg3 [Zero])
                            CPON (Local0)
                            Return (Package (0x01)
                            {
                                Zero
                            })
                        }
                        Case (0x03)
                        {
                            Local0 = DerefOf (Arg3 [Zero])
                            CPOF (Local0)
                            Return (Package (0x01)
                            {
                                Zero
                            })
                        }
                        Case (0x04)
                        {
                            Name (GETM, Buffer (One)
                            {
                                 0x00                                             // .
                            })
                            CreateByteField (GETM, Zero, GMSK)
                            GMSK = Arg4
                            Return (GETM) /* \_SB_.PC00.SAT0.RSTD.GETM */
                        }
                        Case (0x05)
                        {
                            VR3A = DerefOf (Arg3 [Zero])
                            Return (Zero)
                        }
                        Default
                        {
                            Return (Package (0x01)
                            {
                                0x02
                            })
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (D3AS, 3, Serialized)
            {
                Switch (Arg1)
                {
                    Case (Zero)
                    {
                        Return (Buffer (One)
                        {
                             0x03                                             // .
                        })
                    }
                    Case (One)
                    {
                        If ((PSON == One))
                        {
                            Return (Buffer (One)
                            {
                                 0x01                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }

                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Method (CPON, 1, Serialized)
            {
                If ((CondRefOf (\_SB.PC00.SAT0.PRT0.SPON) && (Arg0 & One)))
                {
                    ^PRT0.SPON ()
                }

                If ((CondRefOf (\_SB.PC00.SAT0.PRT1.SPON) && (Arg0 & 0x02)))
                {
                    ^PRT1.SPON ()
                }

                If ((CondRefOf (\_SB.PC00.SAT0.PRT2.SPON) && (Arg0 & 0x04)))
                {
                    ^PRT2.SPON ()
                }

                If ((CondRefOf (\_SB.PC00.SAT0.PRT3.SPON) && (Arg0 & 0x08)))
                {
                    ^PRT3.SPON ()
                }

                If ((CondRefOf (\_SB.PC00.SAT0.PRT4.SPON) && (Arg0 & 0x10)))
                {
                    ^PRT4.SPON ()
                }

                If ((CondRefOf (\_SB.PC00.SAT0.PRT5.SPON) && (Arg0 & 0x20)))
                {
                    ^PRT5.SPON ()
                }

                If ((CondRefOf (\_SB.PC00.SAT0.NVM1.RPON) && (Arg0 & 0x0100)))
                {
                    ^NVM1.RPON ()
                }

                If ((CondRefOf (\_SB.PC00.SAT0.NVM1.NVD0) && (Arg0 & 0x0100)))
                {
                    ^NVM1.NVD0 ()
                }

                If ((CondRefOf (\_SB.PC00.SAT0.NVM2.RPON) && (Arg0 & 0x0200)))
                {
                    ^NVM2.RPON ()
                }

                If ((CondRefOf (\_SB.PC00.SAT0.NVM2.NVD0) && (Arg0 & 0x0200)))
                {
                    ^NVM2.NVD0 ()
                }

                If ((CondRefOf (\_SB.PC00.SAT0.NVM3.RPON) && (Arg0 & 0x0400)))
                {
                    ^NVM3.RPON ()
                }

                If ((CondRefOf (\_SB.PC00.SAT0.NVM3.NVD0) && (Arg0 & 0x0400)))
                {
                    ^NVM3.NVD0 ()
                }
            }

            Method (CPOF, 1, Serialized)
            {
                If ((CondRefOf (\_SB.PC00.SAT0.PRT0.SPOF) && (Arg0 & One)))
                {
                    ^PRT0.SPOF ()
                }

                If ((CondRefOf (\_SB.PC00.SAT0.PRT1.SPOF) && (Arg0 & 0x02)))
                {
                    ^PRT1.SPOF ()
                }

                If ((CondRefOf (\_SB.PC00.SAT0.PRT2.SPOF) && (Arg0 & 0x04)))
                {
                    ^PRT2.SPOF ()
                }

                If ((CondRefOf (\_SB.PC00.SAT0.PRT3.SPOF) && (Arg0 & 0x08)))
                {
                    ^PRT3.SPOF ()
                }

                If ((CondRefOf (\_SB.PC00.SAT0.PRT4.SPOF) && (Arg0 & 0x10)))
                {
                    ^PRT4.SPOF ()
                }

                If ((CondRefOf (\_SB.PC00.SAT0.PRT5.SPOF) && (Arg0 & 0x20)))
                {
                    ^PRT5.SPOF ()
                }

                If ((CondRefOf (\_SB.PC00.SAT0.NVM1.NVD3) && (Arg0 & 0x0100)))
                {
                    ^NVM1.NVD3 ()
                }

                If ((CondRefOf (\_SB.PC00.SAT0.NVM1.RPOF) && (Arg0 & 0x0100)))
                {
                    ^NVM1.RPOF ()
                }

                If ((CondRefOf (\_SB.PC00.SAT0.NVM2.NVD3) && (Arg0 & 0x0200)))
                {
                    ^NVM2.NVD3 ()
                }

                If ((CondRefOf (\_SB.PC00.SAT0.NVM2.RPOF) && (Arg0 & 0x0200)))
                {
                    ^NVM2.RPOF ()
                }

                If ((CondRefOf (\_SB.PC00.SAT0.NVM3.NVD3) && (Arg0 & 0x0400)))
                {
                    ^NVM3.NVD3 ()
                }

                If ((CondRefOf (\_SB.PC00.SAT0.NVM3.RPOF) && (Arg0 & 0x0400)))
                {
                    ^NVM3.RPOF ()
                }
            }

            Device (VOL0)
            {
                Name (_ADR, 0x0080FFFF)  // _ADR: Address
                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    V0PR
                })
                Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                {
                    V0PR
                })
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    Return (RSTD (Arg0, Arg1, Arg2, Arg3, RefOf (VL0M)))
                }

                PowerResource (V0PR, 0x00, 0x0000)
                {
                    Name (_STA, One)  // _STA: Status
                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        If (VR3A)
                        {
                            CPON (VL0M)
                            _STA = One
                        }
                        Else
                        {
                        }
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        If (VR3A)
                        {
                            CPOF (VL0M)
                            _STA = Zero
                        }
                        Else
                        {
                        }
                    }
                }
            }

            Device (VOL1)
            {
                Name (_ADR, 0x0081FFFF)  // _ADR: Address
                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    V1PR
                })
                Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                {
                    V1PR
                })
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    Return (RSTD (Arg0, Arg1, Arg2, Arg3, RefOf (VL1M)))
                }

                PowerResource (V1PR, 0x00, 0x0000)
                {
                    Name (_STA, One)  // _STA: Status
                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        If (VR3A)
                        {
                            CPON (VL1M)
                            _STA = One
                        }
                        Else
                        {
                        }
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        If (VR3A)
                        {
                            CPOF (VL1M)
                            _STA = Zero
                        }
                        Else
                        {
                        }
                    }
                }
            }

            Device (VOL2)
            {
                Name (_ADR, 0x0082FFFF)  // _ADR: Address
                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    V2PR
                })
                Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                {
                    V2PR
                })
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    Return (RSTD (Arg0, Arg1, Arg2, Arg3, RefOf (VL2M)))
                }

                PowerResource (V2PR, 0x00, 0x0000)
                {
                    Name (_STA, One)  // _STA: Status
                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        If (VR3A)
                        {
                            CPON (VL2M)
                            _STA = One
                        }
                        Else
                        {
                        }
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        If (VR3A)
                        {
                            CPOF (VL2M)
                            _STA = Zero
                        }
                        Else
                        {
                        }
                    }
                }
            }
        }
    }

    Scope (_SB)
    {
        Device (GPI0)
        {
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                If ((GPHD == One))
                {
                    Return ("PNP0C02")
                }

                If ((PCHS == PCHH))
                {
                    Return ("INT34C6")
                }
                Else
                {
                    Return ("INT34C5")
                }
            }

            Name (LINK, "\\_SB.GPI0")
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                If ((PCHS == PCHH))
                {
                    Name (RBFH, ResourceTemplate ()
                    {
                        Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, _Y22)
                        {
                            0x0000000E,
                        }
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00010000,         // Address Length
                            _Y23)
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00010000,         // Address Length
                            _Y24)
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00010000,         // Address Length
                            _Y25)
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00010000,         // Address Length
                            _Y26)
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00010000,         // Address Length
                            _Y27)
                    })
                    CreateDWordField (RBFH, \_SB.GPI0._CRS._Y22._INT, INTH)  // _INT: Interrupts
                    INTH = SGIR /* \SGIR */
                    CreateDWordField (RBFH, \_SB.GPI0._CRS._Y23._BAS, CMH0)  // _BAS: Base Address
                    CMH0 = (SBRG + 0x006E0000)
                    CreateDWordField (RBFH, \_SB.GPI0._CRS._Y24._BAS, CMH1)  // _BAS: Base Address
                    CMH1 = (SBRG + 0x006D0000)
                    CreateDWordField (RBFH, \_SB.GPI0._CRS._Y25._BAS, CMH3)  // _BAS: Base Address
                    CMH3 = (SBRG + 0x006B0000)
                    CreateDWordField (RBFH, \_SB.GPI0._CRS._Y26._BAS, CMH4)  // _BAS: Base Address
                    CMH4 = (SBRG + 0x006A0000)
                    CreateDWordField (RBFH, \_SB.GPI0._CRS._Y27._BAS, CMH5)  // _BAS: Base Address
                    CMH5 = (SBRG + 0x00690000)
                    Return (RBFH) /* \_SB_.GPI0._CRS.RBFH */
                }
                Else
                {
                    Name (RBFL, ResourceTemplate ()
                    {
                        Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, _Y28)
                        {
                            0x0000000E,
                        }
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00010000,         // Address Length
                            _Y29)
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00010000,         // Address Length
                            _Y2A)
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00010000,         // Address Length
                            _Y2B)
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00010000,         // Address Length
                            _Y2C)
                    })
                    CreateDWordField (RBFL, \_SB.GPI0._CRS._Y28._INT, INTL)  // _INT: Interrupts
                    INTL = SGIR /* \SGIR */
                    CreateDWordField (RBFL, \_SB.GPI0._CRS._Y29._BAS, CML0)  // _BAS: Base Address
                    CML0 = (SBRG + 0x006E0000)
                    CreateDWordField (RBFL, \_SB.GPI0._CRS._Y2A._BAS, CML1)  // _BAS: Base Address
                    CML1 = (SBRG + 0x006D0000)
                    CreateDWordField (RBFL, \_SB.GPI0._CRS._Y2B._BAS, CML4)  // _BAS: Base Address
                    CML4 = (SBRG + 0x006A0000)
                    CreateDWordField (RBFL, \_SB.GPI0._CRS._Y2C._BAS, CML5)  // _BAS: Base Address
                    CML5 = (SBRG + 0x00690000)
                    Return (RBFL) /* \_SB_.GPI0._CRS.RBFL */
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((GPHD == One))
                {
                    Return (0x0B)
                }

                Return (0x0F)
            }
        }
    }

    Scope (_SB.PC00)
    {
        Method (SOD3, 3, Serialized)
        {
            OperationRegion (ICB1, SystemMemory, (GPCB () + Arg0), 0x88)
            If (Arg1)
            {
                Field (ICB1, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x84), 
                    PMEC,   8
                }

                PMEC = 0x03
                Local3 = PMEC /* \_SB_.PC00.SOD3.PMEC */
            }

            If ((Arg1 && Arg2))
            {
                Field (ICB1, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                    BAR0,   64
                }

                BAR0 = Zero
            }
        }
    }

    Scope (_SB.PC00)
    {
        Method (SPIH, 1, Serialized)
        {
            OperationRegion (ICB1, SystemMemory, Arg0, 0x20)
            Field (ICB1, AnyAcc, NoLock, Preserve)
            {
                Offset (0x10), 
                BAR0,   64, 
                BAR1,   64
            }

            Name (BUF0, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y2D)
            })
            Name (BUF1, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y2E)
            })
            CreateDWordField (BUF0, \_SB.PC00.SPIH._Y2D._BAS, ADR0)  // _BAS: Base Address
            CreateDWordField (BUF1, \_SB.PC00.SPIH._Y2E._BAS, ADR1)  // _BAS: Base Address
            ADR0 = (BAR0 & 0xFFFFFFFFFFFFF000)
            ADR1 = (BAR1 & 0xFFFFFFFFFFFFF000)
            ConcatenateResTemplate (BUF0, BUF1, Local0)
            Return (Local0)
        }

        Device (SPI0)
        {
            If ((SM00 == 0x02))
            {
                Name (_HID, "PNP0C02" /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (SPIH (SC00))
                }

                Name (_STA, 0x0B)  // _STA: Status
            }

            If ((SM00 == One))
            {
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                {
                    SOD3 (SC00, One, One)
                }

                Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                {
                }
            }

            If (((SM00 == One) || (SM00 == Zero)))
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return (0x001E0002)
                }
            }
        }

        Device (SPI1)
        {
            If ((SM01 == 0x02))
            {
                Name (_HID, "PNP0C02" /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (SPIH (SC01))
                }

                Name (_STA, 0x0B)  // _STA: Status
            }

            If ((SM01 == One))
            {
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                {
                    SOD3 (SC01, One, One)
                }

                Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                {
                }
            }

            If (((SM01 == One) || (SM01 == Zero)))
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return (0x001E0003)
                }
            }
        }

        Device (SPI2)
        {
            If ((SM02 == 0x02))
            {
                Name (_HID, "PNP0C02" /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (SPIH (SC02))
                }

                Name (_STA, 0x0B)  // _STA: Status
            }

            If ((SM02 == One))
            {
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                {
                    SOD3 (SC02, One, One)
                }

                Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                {
                }
            }

            If (((SM02 == One) || (SM02 == Zero)))
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return (0x00120006)
                }
            }
        }

        Device (SPI3)
        {
            If ((SM03 == 0x02))
            {
                Name (_HID, "PNP0C02" /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (SPIH (SC03))
                }

                Name (_STA, 0x0B)  // _STA: Status
            }

            If ((SM03 == One))
            {
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                {
                    SOD3 (SC03, One, One)
                }

                Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                {
                }
            }

            If (((SM03 == One) || (SM03 == Zero)))
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return (0x00130000)
                }
            }
        }

        Device (SPI4)
        {
            If ((SM04 == 0x02))
            {
                Name (_HID, "PNP0C02" /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (SPIH (SC04))
                }

                Name (_STA, 0x0B)  // _STA: Status
            }

            If ((SM04 == One))
            {
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                {
                    SOD3 (SC04, One, One)
                }

                Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                {
                }
            }

            If (((SM04 == One) || (SM04 == Zero)))
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return (0x00130001)
                }
            }
        }

        Device (SPI5)
        {
            If ((SM05 == 0x02))
            {
                Name (_HID, "PNP0C02" /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (SPIH (SC05))
                }

                Name (_STA, 0x0B)  // _STA: Status
            }

            If ((SM05 == One))
            {
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                {
                    SOD3 (SC05, One, One)
                }

                Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                {
                }
            }

            If (((SM05 == One) || (SM05 == Zero)))
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return (0x00130002)
                }
            }
        }

        Device (SPI6)
        {
            If ((SM06 == 0x02))
            {
                Name (_HID, "PNP0C02" /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (SPIH (SC06))
                }

                Name (_STA, 0x0B)  // _STA: Status
            }

            If ((SM06 == One))
            {
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                {
                    SOD3 (SC06, One, One)
                }

                Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                {
                }
            }

            If (((SM06 == One) || (SM06 == Zero)))
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return (0x00130003)
                }
            }
        }
    }

    Scope (_SB.PC00)
    {
        Method (I2CH, 1, Serialized)
        {
            OperationRegion (ICB1, SystemMemory, Arg0, 0x20)
            Field (ICB1, AnyAcc, NoLock, Preserve)
            {
                Offset (0x10), 
                BAR0,   64, 
                BAR1,   64
            }

            Name (BUF0, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y2F)
            })
            Name (BUF1, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y30)
            })
            CreateDWordField (BUF0, \_SB.PC00.I2CH._Y2F._BAS, ADR0)  // _BAS: Base Address
            CreateDWordField (BUF1, \_SB.PC00.I2CH._Y30._BAS, ADR1)  // _BAS: Base Address
            ADR0 = (BAR0 & 0xFFFFFFFFFFFFF000)
            ADR1 = (BAR1 & 0xFFFFFFFFFFFFF000)
            ConcatenateResTemplate (BUF0, BUF1, Local0)
            Return (Local0)
        }

        Device (I2C0)
        {
            If ((IM00 == 0x02))
            {
                Name (_HID, "PNP0C02" /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (I2CH (IC00))
                }

                Name (_STA, 0x0B)  // _STA: Status
            }

            If ((IM00 == One))
            {
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                {
                    SOD3 (IC00, One, One)
                }

                Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                {
                }
            }

            If (((IM00 == One) || (IM00 == Zero)))
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return (0x00150000)
                }
            }
        }

        Device (I2C1)
        {
            If ((IM01 == 0x02))
            {
                Name (_HID, "PNP0C02" /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (I2CH (IC01))
                }

                Name (_STA, 0x0B)  // _STA: Status
            }

            If ((IM01 == One))
            {
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                {
                    SOD3 (IC01, One, One)
                }

                Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                {
                }
            }

            If (((IM01 == One) || (IM01 == Zero)))
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return (0x00150001)
                }
            }
        }

        Device (I2C2)
        {
            If ((IM02 == 0x02))
            {
                Name (_HID, "PNP0C02" /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (I2CH (IC02))
                }

                Name (_STA, 0x0B)  // _STA: Status
            }

            If ((IM02 == One))
            {
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                {
                    SOD3 (IC02, One, One)
                }

                Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                {
                }
            }

            If (((IM02 == One) || (IM02 == Zero)))
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return (0x00150002)
                }
            }
        }

        Device (I2C3)
        {
            If ((IM03 == 0x02))
            {
                Name (_HID, "PNP0C02" /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (I2CH (IC03))
                }

                Name (_STA, 0x0B)  // _STA: Status
            }

            If ((IM03 == One))
            {
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                {
                    SOD3 (IC03, One, One)
                }

                Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                {
                }
            }

            If (((IM03 == One) || (IM03 == Zero)))
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return (0x00150003)
                }
            }
        }

        Device (I2C4)
        {
            If ((IM04 == 0x02))
            {
                Name (_HID, "PNP0C02" /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (I2CH (IC04))
                }

                Name (_STA, 0x0B)  // _STA: Status
            }

            If ((IM04 == One))
            {
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                {
                    SOD3 (IC04, One, One)
                }

                Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                {
                }
            }

            If (((IM04 == One) || (IM04 == Zero)))
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return (0x00190000)
                }
            }
        }

        Device (I2C5)
        {
            If ((IM05 == 0x02))
            {
                Name (_HID, "PNP0C02" /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (I2CH (IC05))
                }

                Name (_STA, 0x0B)  // _STA: Status
            }

            If ((IM05 == One))
            {
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                {
                    SOD3 (IC05, One, One)
                }

                Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                {
                }
            }

            If (((IM05 == One) || (IM05 == Zero)))
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return (0x00190001)
                }
            }
        }

        Device (I2C6)
        {
            If ((IM06 == 0x02))
            {
                Name (_HID, "PNP0C02" /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (I2CH (IC06))
                }

                Name (_STA, 0x0B)  // _STA: Status
            }

            If ((IM06 == One))
            {
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                {
                    SOD3 (IC06, One, One)
                }

                Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                {
                }
            }

            If (((IM06 == One) || (IM06 == Zero)))
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return (0x00100000)
                }
            }
        }

        Device (I2C7)
        {
            If ((IM07 == 0x02))
            {
                Name (_HID, "PNP0C02" /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (I2CH (IC07))
                }

                Name (_STA, 0x0B)  // _STA: Status
            }

            If ((IM07 == One))
            {
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                {
                    SOD3 (IC07, One, One)
                }

                Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                {
                }
            }

            If (((IM07 == One) || (IM07 == Zero)))
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return (0x00100001)
                }
            }
        }
    }

    Scope (_SB.PC00)
    {
        Method (UDSM, 1, Serialized)
        {
            If ((Arg0 == ToUUID ("f7af8347-a966-49fe-9022-7a9deeebdb27") /* Unknown UUID */))
            {
                Return (One)
            }

            Return (Zero)
        }

        Method (UDMA, 2, Serialized)
        {
            Switch (ToInteger (Arg0))
            {
                Case (Zero)
                {
                    Return (Buffer (0x08)
                    {
                         0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                    })
                }
                Case (One)
                {
                    Return (ToInteger (Arg1))
                }

            }

            Return (Buffer (0x08)
            {
                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
            })
        }

        Device (UA00)
        {
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                If (UDSM (Arg0))
                {
                    Return (UDMA (Arg2, UD00))
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                Return (0x001E0000)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                SOD3 (UC00, One, One)
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
            }
        }

        Device (UA01)
        {
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                If (UDSM (Arg0))
                {
                    Return (UDMA (Arg2, UD01))
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                Return (0x001E0001)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                SOD3 (UC01, One, One)
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
            }
        }

        Device (UA02)
        {
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                If (UDSM (Arg0))
                {
                    Return (UDMA (Arg2, UD02))
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                Return (0x00190002)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                SOD3 (UC02, One, One)
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
            }
        }

        Device (UA03)
        {
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                If (UDSM (Arg0))
                {
                    Return (UDMA (Arg2, UD03))
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                Return (0x00110000)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                SOD3 (UC03, One, One)
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
            }
        }

        Device (UA04)
        {
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                If (UDSM (Arg0))
                {
                    Return (UDMA (Arg2, UD04))
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                Return (0x00110001)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                SOD3 (UC04, One, One)
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
            }
        }

        Device (UA05)
        {
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                If (UDSM (Arg0))
                {
                    Return (UDMA (Arg2, UD05))
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                Return (0x00110002)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                SOD3 (UC05, One, One)
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
            }
        }

        Device (UA06)
        {
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                If (UDSM (Arg0))
                {
                    Return (UDMA (Arg2, UD06))
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                Return (0x00110003)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                SOD3 (UC06, One, One)
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
            }
        }
    }

    Scope (_SB)
    {
        Device (URSC)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_STA, 0x0B)  // _STA: Status
            Name (_UID, 0x05)  // _UID: Unique ID
            Method (UARB, 2, Serialized)
            {
                Local0 = Buffer (0x02)
                    {
                         0x79, 0x00                                       // y.
                    }
                If (((Arg0 == 0x02) || (Arg0 == 0x03)))
                {
                    OperationRegion (UACF, SystemMemory, Arg1, 0x20)
                    Field (UACF, AnyAcc, NoLock, Preserve)
                    {
                        Offset (0x10), 
                        BAR0,   64, 
                        BAR1,   64
                    }

                    Name (BUF1, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00000FF8,         // Address Length
                            _Y31)
                    })
                    Name (BUF2, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00001000,         // Address Length
                            _Y32)
                    })
                    CreateDWordField (BUF1, \_SB.URSC.UARB._Y31._BAS, ADR1)  // _BAS: Base Address
                    CreateDWordField (BUF2, \_SB.URSC.UARB._Y32._BAS, ADR2)  // _BAS: Base Address
                    Local1 = (BAR0 & 0xFFFFFFFFFFFFF000)
                    ADR1 = (Local1 + 0x08)
                    ADR2 = (BAR1 & 0xFFFFFFFFFFFFF000)
                    ConcatenateResTemplate (BUF1, BUF2, Local0)
                }

                Return (Local0)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Local0 = Buffer (0x02)
                    {
                         0x79, 0x00                                       // y.
                    }
                ConcatenateResTemplate (Local0, UARB (UM00, UC00), Local1)
                Local0 = Local1
                ConcatenateResTemplate (Local0, UARB (UM01, UC01), Local1)
                Local0 = Local1
                ConcatenateResTemplate (Local0, UARB (UM02, UC02), Local1)
                Local0 = Local1
                Return (Local0)
            }
        }

        Method (UARH, 2, Serialized)
        {
            OperationRegion (UACF, SystemMemory, Arg0, 0x18)
            Field (UACF, AnyAcc, NoLock, Preserve)
            {
                Offset (0x10), 
                BAR0,   64
            }

            Name (BUF0, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00000008,         // Address Length
                    _Y33)
            })
            Name (IBUF, ResourceTemplate ()
            {
                Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, _Y34)
                {
                    0x00000014,
                }
            })
            CreateDWordField (BUF0, \_SB.UARH._Y33._BAS, ADR0)  // _BAS: Base Address
            CreateDWordField (IBUF, \_SB.UARH._Y34._INT, IRQN)  // _INT: Interrupts
            Local0 = (BAR0 & 0xFFFFFFFFFFFFF000)
            ADR0 = Local0
            IRQN = Arg1
            ConcatenateResTemplate (BUF0, IBUF, Local1)
            Return (Local1)
        }

        Method (UAPG, 3, Serialized)
        {
            If ((Arg1 != 0x02))
            {
                Return (Arg1)
            }

            OperationRegion (UACF, SystemMemory, Arg2, 0x18)
            Field (UACF, AnyAcc, NoLock, Preserve)
            {
                Offset (0x10), 
                BAR0,   64
            }

            OperationRegion (UAB0, SystemMemory, (BAR0 & 0xFFFFFFFFFFFFF000), 0x10)
            Field (UAB0, ByteAcc, Lock, Preserve)
            {
                DLL,    8, 
                DLH,    8, 
                FCR,    8, 
                LCR,    8
            }

            Local0 = LCR /* \_SB_.UAPG.LCR_ */
            If ((Local0 && 0x7F))
            {
                Return (Zero)
            }

            Return (One)
        }

        Method (UHID, 1, Serialized)
        {
            If ((Arg0 == 0x03))
            {
                Return (0x0105D041)
            }

            Return (0x020CD041)
        }

        Method (UPS3, 2, Serialized)
        {
            If ((Arg0 == One))
            {
                OperationRegion (UACF, SystemMemory, Arg1, 0x88)
                Field (UACF, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                    BAR0,   64
                }

                Field (UACF, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x84), 
                    PMEC,   8
                }

                OperationRegion (UAB0, SystemMemory, (BAR0 & 0xFFFFFFFFFFFFF000), 0x82)
                Field (UAB0, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x81), 
                    PPRR,   8
                }

                PPRR = Zero
                PMEC = 0x03
                Local0 = PMEC /* \_SB_.UPS3.PMEC */
            }
        }

        Method (UPS0, 2, Serialized)
        {
            If ((Arg0 == One))
            {
                OperationRegion (UACF, SystemMemory, Arg1, 0x88)
                Field (UACF, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                    BAR0,   64
                }

                Field (UACF, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x84), 
                    PMEC,   8
                }

                PMEC = Zero
                Local0 = PMEC /* \_SB_.UPS0.PMEC */
                OperationRegion (UAB0, SystemMemory, (BAR0 & 0xFFFFFFFFFFFFF000), 0x82)
                Field (UAB0, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x81), 
                    PPRR,   8
                }

                PPRR = 0x07
            }
        }

        Method (UPSC, 1, Serialized)
        {
            OperationRegion (UACF, SystemMemory, (Arg0 + 0x84), 0x04)
            Field (UACF, ByteAcc, NoLock, Preserve)
            {
                PMEC,   8
            }

            Return ((PMEC & 0x03))
        }

        If (((UM00 == 0x02) || (UM00 == 0x03)))
        {
            Device (UAH0)
            {
                Name (_DDN, "SerialIoUart0")  // _DDN: DOS Device Name
                Name (_UID, "SerialIoUart0")  // _UID: Unique ID
                Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                {
                    Return (UHID (UM00))
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (UARH (UC00, UI00))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((UM00 == 0x03))
                    {
                        If ((UP00 == 0x02))
                        {
                            UP00 = UAPG (UM00, UP00, UC00)
                        }

                        Return (0x0F)
                    }

                    Return (0x0B)
                }

                If ((UM00 == 0x03))
                {
                    Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                    {
                        Return (UPSC (UC00))
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                        UPS3 (UP00, UC00)
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                        UPS0 (UP00, UC00)
                    }
                }
            }
        }

        If (((UM01 == 0x02) || (UM01 == 0x03)))
        {
            Device (UAH1)
            {
                Name (_DDN, "SerialIoUart1")  // _DDN: DOS Device Name
                Name (_UID, "SerialIoUart1")  // _UID: Unique ID
                Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                {
                    Return (UHID (UM01))
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (UARH (UC01, UI01))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((UM01 == 0x03))
                    {
                        If ((UP01 == 0x02))
                        {
                            UP01 = UAPG (UM01, UP01, UC01)
                        }

                        Return (0x0F)
                    }

                    Return (0x0B)
                }

                If ((UM01 == 0x03))
                {
                    Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                    {
                        Return (UPSC (UC01))
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                        UPS3 (UP01, UC01)
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                        UPS0 (UP01, UC01)
                    }
                }
            }
        }

        If (((UM02 == 0x02) || (UM02 == 0x03)))
        {
            Device (UAH2)
            {
                Name (_DDN, "SerialIoUart2")  // _DDN: DOS Device Name
                Name (_UID, "SerialIoUart2")  // _UID: Unique ID
                Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                {
                    Return (UHID (UM02))
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (UARH (UC02, UI02))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((UM02 == 0x03))
                    {
                        If ((UP02 == 0x02))
                        {
                            UP02 = UAPG (UM02, UP02, UC02)
                        }

                        Return (0x0F)
                    }

                    Return (0x0B)
                }

                If ((UM02 == 0x03))
                {
                    Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                    {
                        Return (UPSC (UC02))
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                        UPS3 (UP02, UC02)
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                        UPS0 (UP02, UC02)
                    }
                }
            }
        }

        If (((UM03 == 0x02) || (UM03 == 0x03)))
        {
            Device (UAH3)
            {
                Name (_DDN, "SerialIoUART3")  // _DDN: DOS Device Name
                Name (_UID, "SerialIoUART3")  // _UID: Unique ID
                Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                {
                    Return (UHID (UM03))
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (UARH (UC03, UI03))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((UM03 == 0x03))
                    {
                        If ((UP03 == 0x02))
                        {
                            UP03 = UAPG (UM03, UP03, UC03)
                        }

                        Return (0x0F)
                    }

                    Return (0x0B)
                }

                If ((UM03 == 0x03))
                {
                    Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                    {
                        UPSC (UC03)
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                        UPS3 (UP03, UC03)
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                        UPS0 (UP03, UC03)
                    }
                }
            }
        }

        If (((UM04 == 0x02) || (UM04 == 0x03)))
        {
            Device (UAH4)
            {
                Name (_DDN, "SerialIoUART4")  // _DDN: DOS Device Name
                Name (_UID, "SerialIoUART4")  // _UID: Unique ID
                Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                {
                    Return (UHID (UM04))
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (UARH (UC04, UI04))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((UM04 == 0x03))
                    {
                        If ((UP04 == 0x02))
                        {
                            UP04 = UAPG (UM04, UP04, UC04)
                        }

                        Return (0x0F)
                    }

                    Return (0x0B)
                }

                If ((UM04 == 0x03))
                {
                    Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                    {
                        UPSC (UC04)
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                        UPS3 (UP04, UC04)
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                        UPS0 (UP04, UC04)
                    }
                }
            }
        }

        If (((UM05 == 0x02) || (UM05 == 0x03)))
        {
            Device (UAH5)
            {
                Name (_DDN, "SerialIoUART5")  // _DDN: DOS Device Name
                Name (_UID, "SerialIoUART5")  // _UID: Unique ID
                Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                {
                    Return (UHID (UM05))
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (UARH (UC05, UI05))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((UM05 == 0x03))
                    {
                        If ((UP05 == 0x02))
                        {
                            UP05 = UAPG (UM05, UP05, UC05)
                        }

                        Return (0x0F)
                    }

                    Return (0x0B)
                }

                If ((UM05 == 0x03))
                {
                    Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                    {
                        UPSC (UC05)
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                        UPS3 (UP05, UC05)
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                        UPS0 (UP05, UC05)
                    }
                }
            }
        }

        If (((UM06 == 0x02) || (UM06 == 0x03)))
        {
            Device (UAH6)
            {
                Name (_DDN, "SerialIoUART6")  // _DDN: DOS Device Name
                Name (_UID, "SerialIoUART6")  // _UID: Unique ID
                Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                {
                    Return (UHID (UM06))
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (UARH (UC06, UI06))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((UM06 == 0x03))
                    {
                        If ((UP06 == 0x02))
                        {
                            UP06 = UAPG (UM06, UP06, UC06)
                        }

                        Return (0x0F)
                    }

                    Return (0x0B)
                }

                If ((UM06 == 0x03))
                {
                    Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                    {
                        UPSC (UC06)
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                        UPS3 (UP06, UC06)
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                        UPS0 (UP06, UC06)
                    }
                }
            }
        }
    }

    Scope (_SB.PC00)
    {
        If ((PCHS != PCHN))
        {
            Device (ISHD)
            {
                Name (_ADR, 0x00120000)  // _ADR: Address
                Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    If (CondRefOf (HIWC))
                    {
                        If (HIWC (Arg0))
                        {
                            If (CondRefOf (HIDW))
                            {
                                Return (HIDW (Arg0, Arg1, Arg2, Arg3))
                            }
                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }
        }
    }

    Scope (_SB.PC00)
    {
        Device (THC0)
        {
            Name (_ADR, 0x00100006)  // _ADR: Address
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }
            }
        }

        Device (THC1)
        {
            Name (_ADR, 0x00100007)  // _ADR: Address
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }
            }
        }
    }

    Scope (_SB.PC00)
    {
        Device (HECI)
        {
            Name (_ADR, 0x00160000)  // _ADR: Address
            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                If (CondRefOf (HIWC))
                {
                    If (HIWC (Arg0))
                    {
                        If (CondRefOf (HIDW))
                        {
                            Return (HIDW (Arg0, Arg1, Arg2, Arg3))
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }

        Device (HEC3)
        {
            Name (_ADR, 0x00160004)  // _ADR: Address
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }

    Scope (_SB.PC00)
    {
        Device (CNVW)
        {
            Name (_ADR, 0x00140003)  // _ADR: Address
            OperationRegion (CWAR, SystemMemory, (GPCB () + 0x000A3000), 0x0100)
            Field (CWAR, WordAcc, NoLock, Preserve)
            {
                VDID,   32, 
                    ,   1, 
                WMSE,   1, 
                WBME,   1, 
                Offset (0x10), 
                WBR0,   64, 
                Offset (0x44), 
                    ,   28, 
                WFLR,   1, 
                Offset (0x48), 
                    ,   15, 
                WIFR,   1, 
                Offset (0xCC), 
                WPMS,   32
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                Return (0x03)
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x6D, 0x04))
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                S023 (0x02, One)
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                Local0 = PCRR (PCNV, 0x8100)
                If (((Local0 & 0x7F) == 0x4C))
                {
                    S023 (0x02, Zero)
                }
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
            }

            PowerResource (WRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    If ((WFLR == One))
                    {
                        WBR0 = Zero
                        WPMS = Zero
                        WBME = Zero
                        WMSE = Zero
                        WIFR = One
                    }
                }
            }

            Name (_PRR, Package (0x01)  // _PRR: Power Resource for Reset
            {
                WRST
            })
        }

        Method (CNIP, 0, NotSerialized)
        {
            If ((^CNVW.VDID != 0xFFFFFFFF))
            {
                Return (One)
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (SBTE, 1, Serialized)
        {
            If ((PCHS == PCHL))
            {
                Local0 = 0x090A0000
            }
            ElseIf ((PCHS == One))
            {
                Local0 = 0x08080000
            }
            Else
            {
                Return (Zero)
            }

            SGOV (Local0, Arg0)
            S023 (0x03, Arg0)
        }

        Method (GBTE, 0, NotSerialized)
        {
            If ((PCHS == PCHL))
            {
                Local0 = 0x090A0000
            }
            ElseIf ((PCHS == One))
            {
                Local0 = 0x08080000
            }
            Else
            {
                Return (Zero)
            }

            Return (GGOV (Local0))
        }

        Method (AOLX, 0, NotSerialized)
        {
            Name (AODS, Package (0x03)
            {
                Zero, 
                0x12, 
                Zero
            })
            If ((CBTA == One))
            {
                AODS [0x02] = One
            }

            Return (AODS) /* \_SB_.PC00.AOLX.AODS */
        }
    }

    If ((\_SB.PC00.CNIP () & (CBTC == One)))
    {
        If ((PCHS == 0x02))
        {
            Scope (_SB.PC00.XHCI.RHUB.HS10)
            {
                Method (AOLD, 0, NotSerialized)
                {
                    Return (AOLX ())
                }
            }
        }
        ElseIf ((PCHS == One))
        {
            Scope (_SB.PC00.XHCI.RHUB.HS14)
            {
                Method (AOLD, 0, NotSerialized)
                {
                    Return (AOLX ())
                }
            }
        }
        ElseIf ((PCHS == 0x03))
        {
            Scope (_SB.PC00.XHCI.RHUB.HS08)
            {
                Method (AOLD, 0, NotSerialized)
                {
                    Return (AOLX ())
                }
            }
        }
    }

    Scope (_SB.PC00)
    {
        Device (PTHT)
        {
            Name (_ADR, 0x001F0007)  // _ADR: Address
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If ((PTHM == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            OperationRegion (PTHR, PCI_Config, Zero, 0x20)
            Field (PTHR, AnyAcc, NoLock, Preserve)
            {
                Offset (0x10), 
                MTBL,   32, 
                MTBH,   32
            }

            Method (THEN, 0, Serialized)
            {
                OperationRegion (RMTB, SystemMemory, ((MTBH << 0x20) + (MTBL & 0xFFF00000)), 0x0100)
                Field (RMTB, AnyAcc, NoLock, Preserve)
                {
                    Offset (0xE8), 
                    BTTH,   1
                }

                If ((BTTH == One))
                {
                    Return (One)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (_SB)
    {
        Device (PTHH)
        {
            Name (_HID, "INTC1001")  // _HID: Hardware ID
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If ((PTHM == 0x02))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                Memory32Fixed (ReadWrite,
                    0xFE100000,         // Address Base
                    0x00100000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xFC800000,         // Address Base
                    0x00800000,         // Address Length
                    )
            })
            OperationRegion (MTBR, SystemMemory, 0xFE100000, 0x0100)
            Field (MTBR, AnyAcc, NoLock, Preserve)
            {
                Offset (0xE8), 
                BHTH,   1
            }

            Method (THEN, 0, Serialized)
            {
                If ((BHTH == One))
                {
                    Return (One)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (_SB.PC00.LPCB)
    {
        Scope (^GFX0)
        {
            OperationRegion (GFXF, PCI_Config, Zero, 0x04)
            Field (GFXF, AnyAcc, NoLock, Preserve)
            {
                VIDG,   16, 
                DIDG,   16
            }
        }

        Device (EC0)
        {
            Name (_HID, EisaId ("PNP0C09") /* Embedded Controller Device */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (ECAV, Zero)
            Mutex (LFCM, 0x00)
            Method (_GPE, 0, NotSerialized)  // _GPE: General Purpose Events
            {
                If (ESPI)
                {
                    Local0 = 0x6E
                }
                Else
                {
                    Local0 = 0x17
                    If ((SRSP != Zero))
                    {
                        Local0 = GGPE (SRSP)
                    }
                }

                Return (Local0)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (BFFR, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x0062,             // Range Minimum
                        0x0062,             // Range Maximum
                        0x00,               // Alignment
                        0x01,               // Length
                        )
                    IO (Decode16,
                        0x0066,             // Range Minimum
                        0x0066,             // Range Maximum
                        0x00,               // Alignment
                        0x01,               // Length
                        )
                    IO (Decode16,
                        0x0270,             // Range Minimum
                        0x0270,             // Range Maximum
                        0x00,               // Alignment
                        0x10,               // Length
                        )
                })
                Return (BFFR) /* \_SB_.PC00.LPCB.EC0_._CRS.BFFR */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }

            OperationRegion (ERAM, EmbeddedControl, Zero, 0xFF)
            Field (ERAM, ByteAcc, Lock, Preserve)
            {
                VCMD,   8, 
                Offset (0x60), 
                SMPR,   8
            }

            OperationRegion (ECB2, SystemMemory, 0xFF00D520, 0xFF)
            Field (ECB2, AnyAcc, Lock, Preserve)
            {
                BAR1,   184, 
                BAR2,   80
            }

            OperationRegion (ERAE, SystemMemory, 0xFE0B0EE9, One)
            Field (ERAE, ByteAcc, Lock, Preserve)
            {
                GFFV,   1, 
                SFFV,   1
            }

            OperationRegion (ERAX, SystemMemory, 0xFE0B0400, 0xFF)
            Field (ERAX, ByteAcc, Lock, Preserve)
            {
                Offset (0x01), 
                VDAT,   8, 
                VSTA,   8, 
                Offset (0x06), 
                FANS,   8, 
                BUSG,   1, 
                BLEG,   1, 
                BATF,   1, 
                BNSM,   1, 
                BTST,   1, 
                BBAD,   1, 
                AUTO,   1, 
                FCHG,   1, 
                Offset (0x0A), 
                EDCC,   1, 
                    ,   1, 
                CDMB,   1, 
                CCSB,   1, 
                BTSM,   1, 
                BTCM,   1, 
                    ,   1, 
                Offset (0x0B), 
                SGST,   1, 
                HDMI,   1, 
                    ,   1, 
                    ,   1, 
                    ,   1, 
                    ,   1, 
                    ,   1, 
                Offset (0x0C), 
                ODPO,   1, 
                EODD,   1, 
                ODPK,   1, 
                CMEX,   1, 
                CMON,   1, 
                SODD,   1, 
                ODFB,   1, 
                EODS,   1, 
                RTMP,   8, 
                SBTS,   8, 
                MPTS,   8, 
                PINF,   3, 
                SUPR,   1, 
                GTMP,   1, 
                QUIT,   1, 
                LS35,   1, 
                Offset (0x11), 
                RMBT,   1, 
                RSBT,   1, 
                    ,   2, 
                Offset (0x12), 
                FUSL,   8, 
                FUSH,   8, 
                FWBT,   64, 
                Offset (0x1D), 
                Offset (0x1E), 
                SSFM,   1, 
                BLCF,   1, 
                PABD,   1, 
                ES3F,   1, 
                ES5F,   1, 
                TBOF,   1, 
                GPOF,   1, 
                RS8F,   1, 
                LSKV,   8, 
                SPMO,   4, 
                MSMF,   1, 
                GSFS,   1, 
                MACF,   1, 
                MCUD,   1, 
                BTFW,   8, 
                Offset (0x23), 
                RGBS,   1, 
                KBLT,   1, 
                    ,   5, 
                LCON,   1, 
                BACT,   16, 
                KBGS,   32, 
                FEPL,   8, 
                FEPH,   8, 
                KBSS,   32, 
                Offset (0x31), 
                GIRT,   8, 
                PIRT,   8, 
                KIRT,   8, 
                IRTI,   8, 
                Offset (0x36), 
                DGPU,   8, 
                GUST,   8, 
                GDST,   8, 
                FCST,   8, 
                CTMD,   1, 
                CAC1,   1, 
                STYP,   2, 
                ICST,   1, 
                ICBL,   3, 
                KBST,   1, 
                KBBL,   3, 
                YLST,   1, 
                YLBL,   2, 
                APON,   1, 
                Offset (0x3F), 
                PRRO,   1, 
                PRWO,   1, 
                    ,   5, 
                SPBL,   1, 
                PCBV,   16, 
                PCBS,   8, 
                ECTP,   8, 
                Offset (0x45), 
                KBGC,   32, 
                Offset (0x4A), 
                ESMC,   1, 
                Offset (0x4B), 
                EMOD,   8, 
                BFUD,   16, 
                Offset (0x54), 
                    ,   3, 
                PDMD,   1, 
                Offset (0x55), 
                    ,   1, 
                TPMD,   1, 
                Offset (0x56), 
                Offset (0x57), 
                    ,   5, 
                BTSB,   2, 
                Offset (0x58), 
                    ,   4, 
                BTTP,   4, 
                BTLF,   4, 
                Offset (0x5A), 
                GPPW,   8, 
                Offset (0x5D), 
                EXSI,   8, 
                EXSB,   8, 
                EXND,   8, 
                HMPR,   8, 
                SMST,   8, 
                SMAD,   8, 
                SMCM,   8, 
                SMDA,   256, 
                BCNT,   8, 
                SMAA,   8, 
                SAD0,   8, 
                SAD1,   8, 
                    ,   1, 
                    ,   1, 
                    ,   1, 
                    ,   1, 
                FBDC,   1, 
                FBFG,   1, 
                Offset (0x8A), 
                KBLO,   1, 
                UCHE,   1, 
                KLCH,   1, 
                    ,   1, 
                KLFS,   1, 
                KLOR,   1, 
                CIBM,   1, 
                UCER,   1, 
                TPDV,   3, 
                Offset (0x8C), 
                QCHO,   1, 
                BKLT,   1, 
                BSFU,   1, 
                    ,   1, 
                    ,   1, 
                OKBS,   1, 
                    ,   1, 
                QCBX,   1, 
                FLBT,   1, 
                    ,   2, 
                LESR,   1, 
                Offset (0x8E), 
                Offset (0x8F), 
                BMN0,   72, 
                BDN0,   64, 
                IBTL,   1, 
                IBCL,   1, 
                ISS0,   1, 
                IRTC,   1, 
                ISUP,   1, 
                ISC2,   1, 
                IWAK,   1, 
                Offset (0xA1), 
                FPFC,   1, 
                VOUT,   1, 
                TPAD,   1, 
                HKDB,   1, 
                NUML,   1, 
                CALK,   1, 
                CCPW,   1, 
                EECP,   1, 
                Offset (0xA3), 
                OSTY,   3, 
                ACMO,   1, 
                ADPI,   2, 
                    ,   1, 
                ADPT,   1, 
                PMEW,   1, 
                MODW,   1, 
                LANW,   1, 
                RTCW,   1, 
                WLAW,   1, 
                USBW,   1, 
                KEYW,   1, 
                TPWK,   1, 
                CHCR,   1, 
                ADPP,   1, 
                LERN,   1, 
                ACMD,   1, 
                BOVP,   1, 
                LEAK,   1, 
                AIRP,   1, 
                ACOF,   1, 
                Offset (0xA7), 
                Offset (0xA8), 
                Offset (0xA9), 
                THRT,   8, 
                Offset (0xAB), 
                Offset (0xAC), 
                Offset (0xAD), 
                Offset (0xAE), 
                TLVL,   4, 
                    ,   2, 
                THSW,   1, 
                TPIN,   1, 
                Offset (0xB0), 
                CPUT,   8, 
                CPUS,   8, 
                PCHS,   8, 
                GPUS,   8, 
                GPUT,   8, 
                SSDS,   8, 
                PCHT,   8, 
                CHIS,   8, 
                    ,   1, 
                LSTE,   1, 
                PMEE,   1, 
                PWBE,   1, 
                RNGE,   1, 
                BTWE,   1, 
                Offset (0xB9), 
                LCBV,   8, 
                DGDF,   8, 
                WLAN,   1, 
                BLUE,   1, 
                WEXT,   1, 
                BEXT,   1, 
                KILL,   1, 
                WLOK,   1, 
                EN3G,   1, 
                EX3G,   1, 
                Offset (0xBD), 
                CTYP,   3, 
                CORE,   3, 
                GATY,   2, 
                BA1P,   1, 
                BA2P,   1, 
                    ,   2, 
                B1CH,   1, 
                B2CH,   1, 
                Offset (0xBF), 
                PBY1,   1, 
                PBY2,   1, 
                    ,   2, 
                SMB1,   1, 
                SMB2,   1, 
                Offset (0xC0), 
                B1TY,   1, 
                B1MD,   1, 
                B1LW,   1, 
                    ,   1, 
                B1MF,   3, 
                Offset (0xC1), 
                B1ST,   8, 
                B1RC,   16, 
                B1SN,   16, 
                B1FV,   16, 
                B1DV,   16, 
                B1DC,   16, 
                B1FC,   16, 
                B1GS,   8, 
                Offset (0xD0), 
                B1CR,   16, 
                B1AC,   16, 
                B1PC,   8, 
                B1VL,   8, 
                B1TM,   8, 
                B1AT,   8, 
                B1CC,   16, 
                B1TC,   8, 
                B1CI,   8, 
                B1CU,   8, 
                B1CA,   8, 
                B1SM,   16, 
                B1VC,   8, 
                B1FA,   8, 
                B1VA,   8, 
                B1C1,   16, 
                B1C2,   16, 
                B1C3,   16, 
                Offset (0xEC), 
                MAXE,   16, 
                B1CT,   16, 
                B1EX,   1, 
                B1FL,   1, 
                B1EP,   1, 
                B1FI,   1, 
                    ,   2, 
                B1RE,   1, 
                Offset (0xF1), 
                B1LL,   1, 
                B1CE,   1, 
                B1SE,   1, 
                B1S5,   1, 
                B1SR,   1, 
                B1SC,   1, 
                Offset (0xF2), 
                B1TO,   1, 
                B1BC,   1, 
                B1CF,   1, 
                B1CS,   1, 
                B1SG,   1, 
                B1SU,   1, 
                B1OV,   1, 
                B1OT,   1, 
                B1TT,   1, 
                B1SA,   1, 
                B1SS,   1, 
                    ,   1, 
                B1SF,   1, 
                B1WN,   1, 
                Offset (0xF4), 
                B1DA,   16, 
                Offset (0xF8), 
                B1CN,   8, 
                ITMD,   1, 
                Offset (0xFA), 
                Offset (0xFB), 
                Offset (0xFE), 
                FA2S,   8
            }

            Method (ACTY, 0, NotSerialized)
            {
                If ((One == ADPT))
                {
                    If ((One == ACMO))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return (0x02)
                    }
                }
                Else
                {
                    Return (0x03)
                }
            }

            OperationRegion (ECMS, SystemIO, 0x72, 0x02)
            Field (ECMS, ByteAcc, Lock, Preserve)
            {
                INDX,   8, 
                DATA,   8
            }

            Method (RECM, 1, Serialized)
            {
                INDX = Arg0
                Return (DATA) /* \_SB_.PC00.LPCB.EC0_.DATA */
            }

            Method (WECM, 2, Serialized)
            {
                INDX = Arg0
                DATA = Arg1
            }

            OperationRegion (CMDE, SystemIO, 0x62, 0x0B)
            Field (CMDE, ByteAcc, Lock, Preserve)
            {
                EC62,   8, 
                Offset (0x02), 
                Offset (0x03), 
                Offset (0x04), 
                EC66,   8, 
                Offset (0x06), 
                EC68,   8, 
                Offset (0x08), 
                Offset (0x09), 
                Offset (0x0A), 
                EC6C,   8
            }

            Method (WIBE, 1, Serialized)
            {
                Local0 = 0x00010000
                While (Local0)
                {
                    If ((Arg0 == One))
                    {
                        Local1 = EC66 /* \_SB_.PC00.LPCB.EC0_.EC66 */
                    }
                    ElseIf ((Arg0 == 0x02))
                    {
                        Local1 = EC6C /* \_SB_.PC00.LPCB.EC0_.EC6C */
                    }
                    Else
                    {
                        Return (0x02)
                    }

                    If (((Local1 & 0x02) == Zero))
                    {
                        Return (Zero)
                    }

                    Stall (0x0A)
                    Local0--
                }

                Return (One)
            }

            Method (WOBF, 1, Serialized)
            {
                Local0 = 0x00010000
                While (Local0)
                {
                    If ((Arg0 == One))
                    {
                        Local1 = EC66 /* \_SB_.PC00.LPCB.EC0_.EC66 */
                    }
                    ElseIf ((Arg0 == 0x02))
                    {
                        Local1 = EC6C /* \_SB_.PC00.LPCB.EC0_.EC6C */
                    }
                    Else
                    {
                        Return (0x02)
                    }

                    If (((Local1 & One) == One))
                    {
                        Return (Zero)
                    }

                    Stall (0x0A)
                    Local0--
                }

                Return (One)
            }

            Method (WOBE, 1, Serialized)
            {
                Local0 = 0x00010000
                While (Local0)
                {
                    If ((Arg0 == One))
                    {
                        Local1 = EC66 /* \_SB_.PC00.LPCB.EC0_.EC66 */
                    }
                    ElseIf ((Arg0 == 0x02))
                    {
                        Local1 = EC6C /* \_SB_.PC00.LPCB.EC0_.EC6C */
                    }
                    Else
                    {
                        Return (0x02)
                    }

                    If (((Local1 & One) == One))
                    {
                        If ((Arg0 == One))
                        {
                            Local2 = EC62 /* \_SB_.PC00.LPCB.EC0_.EC62 */
                        }
                        ElseIf ((Arg0 == 0x02))
                        {
                            Local2 = EC68 /* \_SB_.PC00.LPCB.EC0_.EC68 */
                        }
                        Else
                        {
                            Return (0x02)
                        }
                    }
                    Else
                    {
                        Return (Zero)
                    }

                    Stall (0x0A)
                    Local0--
                }

                Return (One)
            }

            Method (LCMD, 2, Serialized)
            {
                Name (LBUF, Buffer (0x1E)
                {
                     0x00                                             // .
                })
                If ((WIBE (0x02) != Zero))
                {
                    Return (One)
                }

                If ((WOBE (0x02) != Zero))
                {
                    Return (One)
                }

                EC6C = Arg0
                If ((WIBE (0x02) != Zero))
                {
                    Return (One)
                }

                If (((Arg1 != Zero) && (Arg1 != 0xFF)))
                {
                    EC68 = Arg1
                    If ((WIBE (0x02) != Zero))
                    {
                        Return (One)
                    }
                }

                If ((WOBF (0x02) != Zero))
                {
                    Return (One)
                }

                Local0 = EC68 /* \_SB_.PC00.LPCB.EC0_.EC68 */
                Local1 = Zero
                While (Local0)
                {
                    If ((WOBF (0x02) != Zero))
                    {
                        Return (One)
                    }

                    LBUF [Local1] = EC68 /* \_SB_.PC00.LPCB.EC0_.EC68 */
                    Local1++
                    Local0--
                }

                Return (LBUF) /* \_SB_.PC00.LPCB.EC0_.LCMD.LBUF */
            }

            Method (NCMD, 2, Serialized)
            {
                If ((WIBE (0x02) != Zero))
                {
                    Return (One)
                }

                If ((WOBE (0x02) != Zero))
                {
                    Return (One)
                }

                EC6C = Arg0
                If ((WIBE (0x02) != Zero))
                {
                    Return (One)
                }

                If (((Arg1 != Zero) && (Arg1 != 0xFF)))
                {
                    EC68 = Arg1
                    If ((WIBE (0x02) != Zero))
                    {
                        Return (One)
                    }
                }

                Return (Zero)
            }

            Method (SCMD, 2, Serialized)
            {
                Name (LBUF, Buffer (0x1E)
                {
                     0x00                                             // .
                })
                If ((WIBE (One) != Zero))
                {
                    Return (One)
                }

                If ((WOBE (One) != Zero))
                {
                    Return (One)
                }

                EC66 = Arg0
                If ((WIBE (One) != Zero))
                {
                    Return (One)
                }

                If (((Arg1 != Zero) && (Arg1 != 0xFF)))
                {
                    EC62 = Arg1
                    If ((WIBE (One) != Zero))
                    {
                        Return (One)
                    }
                }

                If ((WOBF (One) != Zero))
                {
                    Return (One)
                }

                Local0 = EC62 /* \_SB_.PC00.LPCB.EC0_.EC62 */
                Local1 = Zero
                While (Local0)
                {
                    If ((WOBF (One) != Zero))
                    {
                        Return (One)
                    }

                    LBUF [Local1] = EC62 /* \_SB_.PC00.LPCB.EC0_.EC62 */
                    Local1++
                    Local0--
                }

                Return (LBUF) /* \_SB_.PC00.LPCB.EC0_.SCMD.LBUF */
            }

            Method (TCMD, 2, Serialized)
            {
                If ((WIBE (One) != Zero))
                {
                    Return (One)
                }

                If ((WOBE (One) != Zero))
                {
                    Return (One)
                }

                EC66 = Arg0
                If ((WIBE (One) != Zero))
                {
                    Return (One)
                }

                If (((Arg1 != Zero) && (Arg1 != 0xFF)))
                {
                    EC62 = Arg1
                    If ((WIBE (One) != Zero))
                    {
                        Return (One)
                    }
                }

                Return (Zero)
            }

            Method (LRAM, 2, Serialized)
            {
                If ((WIBE (0x02) != Zero))
                {
                    Return (One)
                }

                If ((WOBE (0x02) != Zero))
                {
                    Return (One)
                }

                EC6C = 0x7E
                If ((WIBE (0x02) != Zero))
                {
                    Return (One)
                }

                EC68 = Arg0
                If ((WIBE (0x02) != Zero))
                {
                    Return (One)
                }

                EC68 = Arg1
                If ((WIBE (0x02) != Zero))
                {
                    Return (One)
                }

                If ((WOBF (0x02) != Zero))
                {
                    Return (One)
                }

                Return (EC68) /* \_SB_.PC00.LPCB.EC0_.EC68 */
            }

            Method (SRAM, 2, Serialized)
            {
                If ((WIBE (One) != Zero))
                {
                    Return (One)
                }

                If ((WOBE (One) != Zero))
                {
                    Return (One)
                }

                EC66 = 0x7E
                If ((WIBE (One) != Zero))
                {
                    Return (One)
                }

                EC62 = Arg0
                If ((WIBE (One) != Zero))
                {
                    Return (One)
                }

                EC62 = Arg1
                If ((WIBE (One) != Zero))
                {
                    Return (One)
                }

                If ((WOBF (One) != Zero))
                {
                    Return (One)
                }

                Return (EC62) /* \_SB_.PC00.LPCB.EC0_.EC62 */
            }

            Device (BAT0)
            {
                Name (_HID, EisaId ("PNP0C0A") /* Control Method Battery */)  // _HID: Hardware ID
                Name (_UID, One)  // _UID: Unique ID
                Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
                {
                    _SB
                })
                Name (PBIF, Package (0x0D)
                {
                    Zero, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    One, 
                    0xFFFFFFFF, 
                    Zero, 
                    Zero, 
                    0x64, 
                    Zero, 
                    "LCFC", 
                    "BAT20101001", 
                    "LiP", 
                    "LENOVO"
                })
                Name (XBIF, Package (0x15)
                {
                    One, 
                    Zero, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    One, 
                    0xFFFFFFFF, 
                    Zero, 
                    Zero, 
                    Zero, 
                    0x00017318, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0x03E8, 
                    0x03E8, 
                    0x64, 
                    Zero, 
                    "LCFC", 
                    "BAT20101001", 
                    "LiP", 
                    "LENOVO", 
                    One
                })
                Name (PBST, Package (0x04)
                {
                    One, 
                    0x0A90, 
                    0x1000, 
                    0x2A30
                })
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (ECAV)
                    {
                        If ((Acquire (LFCM, 0xA000) == Zero))
                        {
                            Local0 = BA1P /* \_SB_.PC00.LPCB.EC0_.BA1P */
                            Release (LFCM)
                        }
                    }

                    If ((Local0 & One))
                    {
                        Return (0x1F)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (_BIF, 0, NotSerialized)  // _BIF: Battery Information
                {
                    If ((ECAV == One))
                    {
                        If ((Acquire (LFCM, 0xA000) == Zero))
                        {
                            Local0 = B1DC /* \_SB_.PC00.LPCB.EC0_.B1DC */
                            Local0 *= 0x0A
                            PBIF [One] = Local0
                            Local0 = B1FC /* \_SB_.PC00.LPCB.EC0_.B1FC */
                            Local0 *= 0x0A
                            PBIF [0x02] = Local0
                            PBIF [0x04] = B1DV /* \_SB_.PC00.LPCB.EC0_.B1DV */
                            If (B1FC)
                            {
                                PBIF [0x05] = ((B1FC * 0x0A) / 0x0A)
                                PBIF [0x07] = ((B1DC * 0x0A) / 0x64)
                            }

                            PBIF [0x09] = ""
                            PBIF [0x0A] = ""
                            PBIF [0x0B] = ""
                            PBIF [0x0C] = ""
                            Name (BDNT, Buffer (0x09)
                            {
                                 0x00                                             // .
                            })
                            BDNT = BDN0 /* \_SB_.PC00.LPCB.EC0_.BDN0 */
                            PBIF [0x09] = ToString (BDNT, Ones)
                            Local0 = B1SN /* \_SB_.PC00.LPCB.EC0_.B1SN */
                            Name (SERN, Buffer (0x06)
                            {
                                "     "
                            })
                            Local2 = 0x04
                            While (Local0)
                            {
                                Divide (Local0, 0x0A, Local1, Local0)
                                SERN [Local2] = (Local1 + 0x30)
                                Local2--
                            }

                            PBIF [0x0A] = SERN /* \_SB_.PC00.LPCB.EC0_.BAT0._BIF.SERN */
                            Name (DCH0, Buffer (0x0A)
                            {
                                 0x00                                             // .
                            })
                            Name (DCH1, "LION")
                            Name (DCH2, "LiP")
                            If ((B1TY == One))
                            {
                                DCH0 = DCH1 /* \_SB_.PC00.LPCB.EC0_.BAT0._BIF.DCH1 */
                                PBIF [0x0B] = ToString (DCH0, Ones)
                            }
                            Else
                            {
                                DCH0 = DCH2 /* \_SB_.PC00.LPCB.EC0_.BAT0._BIF.DCH2 */
                                PBIF [0x0B] = ToString (DCH0, Ones)
                            }

                            Name (BMNT, Buffer (0x0A)
                            {
                                 0x00                                             // .
                            })
                            BMNT = BMN0 /* \_SB_.PC00.LPCB.EC0_.BMN0 */
                            PBIF [0x0C] = ToString (BMNT, Ones)
                            Release (LFCM)
                        }
                    }

                    Return (PBIF) /* \_SB_.PC00.LPCB.EC0_.BAT0.PBIF */
                }

                Method (_BIX, 0, NotSerialized)  // _BIX: Battery Information Extended
                {
                    If ((ECAV == One))
                    {
                        If ((Acquire (LFCM, 0xA000) == Zero))
                        {
                            Local0 = B1DC /* \_SB_.PC00.LPCB.EC0_.B1DC */
                            Local0 *= 0x0A
                            XBIF [0x02] = Local0
                            Local0 = B1FC /* \_SB_.PC00.LPCB.EC0_.B1FC */
                            Local0 *= 0x0A
                            XBIF [0x03] = Local0
                            XBIF [0x05] = B1DV /* \_SB_.PC00.LPCB.EC0_.B1DV */
                            If (B1FC)
                            {
                                XBIF [0x06] = ((B1FC * 0x0A) / 0x0A)
                                XBIF [0x0E] = ((B1DC * 0x0A) / 0x64)
                            }

                            XBIF [0x08] = B1CT /* \_SB_.PC00.LPCB.EC0_.B1CT */
                            XBIF [0x10] = ""
                            XBIF [0x11] = ""
                            XBIF [0x12] = ""
                            XBIF [0x13] = ""
                            Name (BDNT, Buffer (0x09)
                            {
                                 0x00                                             // .
                            })
                            BDNT = BDN0 /* \_SB_.PC00.LPCB.EC0_.BDN0 */
                            XBIF [0x10] = ToString (BDNT, Ones)
                            Local0 = B1SN /* \_SB_.PC00.LPCB.EC0_.B1SN */
                            Name (SERN, Buffer (0x06)
                            {
                                "     "
                            })
                            Local2 = 0x04
                            While (Local0)
                            {
                                Divide (Local0, 0x0A, Local1, Local0)
                                SERN [Local2] = (Local1 + 0x30)
                                Local2--
                            }

                            XBIF [0x11] = SERN /* \_SB_.PC00.LPCB.EC0_.BAT0._BIX.SERN */
                            Name (DCH0, Buffer (0x0A)
                            {
                                 0x00                                             // .
                            })
                            Name (DCH1, "LION")
                            Name (DCH2, "LiP")
                            If ((B1TY == One))
                            {
                                DCH0 = DCH1 /* \_SB_.PC00.LPCB.EC0_.BAT0._BIX.DCH1 */
                                XBIF [0x12] = ToString (DCH0, Ones)
                            }
                            Else
                            {
                                DCH0 = DCH2 /* \_SB_.PC00.LPCB.EC0_.BAT0._BIX.DCH2 */
                                XBIF [0x12] = ToString (DCH0, Ones)
                            }

                            Name (BMNT, Buffer (0x0A)
                            {
                                 0x00                                             // .
                            })
                            BMNT = BMN0 /* \_SB_.PC00.LPCB.EC0_.BMN0 */
                            XBIF [0x13] = ToString (BMNT, Ones)
                            Release (LFCM)
                        }
                    }

                    Return (XBIF) /* \_SB_.PC00.LPCB.EC0_.BAT0.XBIF */
                }

                Name (OBST, Zero)
                Name (OBAC, Zero)
                Name (OBPR, Zero)
                Name (OBRC, Zero)
                Name (OBPV, Zero)
                Method (_BST, 0, Serialized)  // _BST: Battery Status
                {
                    If ((ECAV == One))
                    {
                        If ((Acquire (LFCM, 0xA000) == Zero))
                        {
                            Sleep (0x10)
                            Local0 = B1ST /* \_SB_.PC00.LPCB.EC0_.B1ST */
                            Local1 = DerefOf (PBST [Zero])
                            Switch ((Local0 & 0x07))
                            {
                                Case (Zero)
                                {
                                    OBST = (Local1 & 0xF8)
                                }
                                Case (One)
                                {
                                    OBST = (One | (Local1 & 0xF8))
                                }
                                Case (0x02)
                                {
                                    OBST = (0x02 | (Local1 & 0xF8))
                                }
                                Case (0x04)
                                {
                                    OBST = (0x04 | (Local1 & 0xF8))
                                }

                            }

                            Sleep (0x10)
                            OBAC = B1AC /* \_SB_.PC00.LPCB.EC0_.B1AC */
                            If ((OBST & One))
                            {
                                If ((OBAC != Zero))
                                {
                                    OBAC = (~OBAC & 0x7FFF)
                                }
                            }
                            ElseIf ((FBFG != One))
                            {
                                If ((OBAC & 0x8000))
                                {
                                    OBAC = Zero
                                }
                            }

                            Sleep (0x10)
                            OBRC = B1RC /* \_SB_.PC00.LPCB.EC0_.B1RC */
                            Sleep (0x10)
                            OBPV = B1FV /* \_SB_.PC00.LPCB.EC0_.B1FV */
                            OBRC *= 0x0A
                            OBPR = ((OBAC * OBPV) / 0x03E8)
                            PBST [Zero] = OBST /* \_SB_.PC00.LPCB.EC0_.BAT0.OBST */
                            PBST [One] = OBPR /* \_SB_.PC00.LPCB.EC0_.BAT0.OBPR */
                            PBST [0x02] = OBRC /* \_SB_.PC00.LPCB.EC0_.BAT0.OBRC */
                            PBST [0x03] = OBPV /* \_SB_.PC00.LPCB.EC0_.BAT0.OBPV */
                            Release (LFCM)
                        }
                    }

                    Return (PBST) /* \_SB_.PC00.LPCB.EC0_.BAT0.PBST */
                }
            }

            Scope (\_SB.PC00.LPCB.EC0)
            {
                Device (VPC0)
                {
                    Name (_HID, "VPC2004")  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (_VPC, 0x7C0DF516)
                    Name (VPCD, Zero)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0F)
                    }

                    Method (_CFG, 0, NotSerialized)
                    {
                        Return (_VPC) /* \_SB_.PC00.LPCB.EC0_.VPC0._VPC */
                    }

                    Method (VPCR, 1, Serialized)
                    {
                        If (ECAV)
                        {
                            If ((Acquire (LFCM, 0xA000) == Zero))
                            {
                                If ((Arg0 == One))
                                {
                                    VPCD = VCMD /* \_SB_.PC00.LPCB.EC0_.VCMD */
                                }
                                Else
                                {
                                    VPCD = VDAT /* \_SB_.PC00.LPCB.EC0_.VDAT */
                                }

                                Release (LFCM)
                            }
                        }

                        Return (VPCD) /* \_SB_.PC00.LPCB.EC0_.VPC0.VPCD */
                    }

                    Method (VPCW, 2, Serialized)
                    {
                        If (ECAV)
                        {
                            If ((Acquire (LFCM, 0xA000) == Zero))
                            {
                                If ((Arg0 == One))
                                {
                                    VCMD = Arg1
                                }
                                Else
                                {
                                    VDAT = Arg1
                                }

                                Release (LFCM)
                            }
                        }

                        Return (Zero)
                    }

                    Method (SVCR, 1, Serialized)
                    {
                    }

                    Method (HALS, 0, NotSerialized)
                    {
                        Local0 = Zero
                        If (ECAV)
                        {
                            If ((Acquire (LFCM, 0xA000) == Zero))
                            {
                                Local0 |= 0x08
                                Local0 |= 0x40
                                If ((One == UCHE))
                                {
                                    Local0 |= 0x80
                                }

                                Local0 |= 0x0200
                                If ((Zero == HKDB))
                                {
                                    Local0 |= 0x0400
                                }

                                Local0 |= Zero
                                If (ITMD)
                                {
                                    Local0 |= 0x2000
                                }

                                Local0 |= 0x4000
                                If ((One == CIBM))
                                {
                                    Local0 |= 0x8000
                                }

                                Release (LFCM)
                            }
                        }

                        Return (Local0)
                    }

                    Method (SALS, 1, Serialized)
                    {
                        Local0 = ToInteger (Arg0)
                        If (ECAV)
                        {
                            If ((Acquire (LFCM, 0xA000) == Zero))
                            {
                                If ((Local0 == 0x0A))
                                {
                                    UCHE = One
                                    Release (LFCM)
                                    Return (Zero)
                                }

                                If ((Local0 == 0x0B))
                                {
                                    UCHE = Zero
                                    Release (LFCM)
                                    Return (Zero)
                                }

                                If ((Local0 == 0x0E))
                                {
                                    HKDB = Zero
                                    Release (LFCM)
                                    SGOV (0x08050010, One)
                                    Return (Zero)
                                }

                                If ((Local0 == 0x0F))
                                {
                                    HKDB = One
                                    Release (LFCM)
                                    SGOV (0x08050010, Zero)
                                    Return (Zero)
                                }

                                If ((Local0 == 0x12))
                                {
                                    CIBM = Zero
                                    Release (LFCM)
                                    Return (Zero)
                                }

                                If ((Local0 == 0x13))
                                {
                                    CIBM = One
                                    Release (LFCM)
                                    Return (Zero)
                                }

                                Release (LFCM)
                            }
                        }

                        Return (Zero)
                    }

                    Method (GBMD, 0, NotSerialized)
                    {
                        Local0 = 0x10000000
                        If (ECAV)
                        {
                            If ((Acquire (LFCM, 0xA000) == Zero))
                            {
                                If ((One == CDMB))
                                {
                                    Local0 |= One
                                }

                                If ((One == QCBX))
                                {
                                    If ((One == QCHO))
                                    {
                                        Local0 |= 0x04
                                    }
                                }

                                If ((One == BBAD))
                                {
                                    Local0 |= 0x08
                                }

                                If ((One == BTSM))
                                {
                                    Local0 |= 0x20
                                }

                                If ((One == BLEG))
                                {
                                    Local0 |= 0x80
                                }

                                If ((One == BATF))
                                {
                                    Local0 |= 0x0100
                                }

                                If ((Zero == BTSM))
                                {
                                    Local0 |= 0x0200
                                }

                                If ((One == BUSG))
                                {
                                    Local0 |= 0x0800
                                }

                                If ((Zero == ADPI))
                                {
                                    Local0 &= 0xFFFE7FFF
                                }

                                If ((One == ADPI))
                                {
                                    Local0 |= 0x8000
                                }

                                If ((0x02 == ADPI))
                                {
                                    Local0 |= 0x00010000
                                }

                                If ((One == QCBX))
                                {
                                    Local0 |= 0x00020000
                                }

                                Local0 |= 0x00040000
                                If ((One == ESMC))
                                {
                                    Local0 |= 0x00400000
                                }

                                Release (LFCM)
                            }
                        }

                        Return (Local0)
                    }

                    Name (VBST, Zero)
                    Name (VBAC, Zero)
                    Name (VBPR, Zero)
                    Name (VBRC, Zero)
                    Name (VBPV, Zero)
                    Name (VBFC, Zero)
                    Name (VBCT, Zero)
                    Method (SMTF, 1, NotSerialized)
                    {
                        If (ECAV)
                        {
                            If ((Acquire (LFCM, 0xA000) == Zero))
                            {
                                If ((Arg0 == Zero))
                                {
                                    If ((B1FV == Zero))
                                    {
                                        Release (LFCM)
                                        Return (0xFFFF)
                                    }

                                    If ((B1AC == Zero))
                                    {
                                        Release (LFCM)
                                        Return (0xFFFF)
                                    }

                                    Local0 = B1FC /* \_SB_.PC00.LPCB.EC0_.B1FC */
                                    Local0 *= 0x0A
                                    VBFC = Local0
                                    Local1 = B1RC /* \_SB_.PC00.LPCB.EC0_.B1RC */
                                    Local1 *= 0x0A
                                    VBRC = Local1
                                    If ((VBFC > VBRC))
                                    {
                                        VBPV = B1FV /* \_SB_.PC00.LPCB.EC0_.B1FV */
                                        VBAC = B1AC /* \_SB_.PC00.LPCB.EC0_.B1AC */
                                        Local0 -= Local1
                                        Local1 = (VBAC * VBPV)
                                        Local3 = (Local0 * 0x03E8)
                                        Local3 = (Local3 * 0x3C)
                                        VBCT = (Local3 / Local1)
                                        Release (LFCM)
                                        Return (VBCT) /* \_SB_.PC00.LPCB.EC0_.VPC0.VBCT */
                                    }
                                    Else
                                    {
                                        Release (LFCM)
                                        Return (0xFFFF)
                                    }
                                }

                                If ((Arg0 == One))
                                {
                                    Release (LFCM)
                                    Return (0xFFFF)
                                }

                                Release (LFCM)
                            }
                        }

                        Return (0xFFFF)
                    }

                    Name (QBST, Zero)
                    Name (QBAC, Zero)
                    Name (QBPR, Zero)
                    Name (QBRC, Zero)
                    Name (QBPV, Zero)
                    Name (QBFC, Zero)
                    Name (QBCT, Zero)
                    Method (SMTE, 1, NotSerialized)
                    {
                        If (ECAV)
                        {
                            If ((Acquire (LFCM, 0xA000) == Zero))
                            {
                                If ((Arg0 == Zero))
                                {
                                    If ((B1FV == Zero))
                                    {
                                        Release (LFCM)
                                        Return (0xFFFF)
                                    }

                                    If ((B1AC == Zero))
                                    {
                                        Release (LFCM)
                                        Return (0xFFFF)
                                    }

                                    Local0 = B1RC /* \_SB_.PC00.LPCB.EC0_.B1RC */
                                    Local0 *= 0x0A
                                    QBRC = Local0
                                    Local1 = B1FC /* \_SB_.PC00.LPCB.EC0_.B1FC */
                                    Local1 *= 0x0A
                                    QBFC = Local1
                                    If ((QBFC > QBRC))
                                    {
                                        QBPV = B1FV /* \_SB_.PC00.LPCB.EC0_.B1FV */
                                        If (((B1AC & 0x8000) == Zero))
                                        {
                                            QBAC = B1AC /* \_SB_.PC00.LPCB.EC0_.B1AC */
                                        }
                                        Else
                                        {
                                            QBAC = (0xFFFF - B1AC)
                                        }

                                        Local1 = (QBAC * QBPV)
                                        Local3 = (Local0 * 0x03E8)
                                        Local3 = (Local3 * 0x3C)
                                        QBCT = (Local3 / Local1)
                                        Release (LFCM)
                                        Return (QBCT) /* \_SB_.PC00.LPCB.EC0_.VPC0.QBCT */
                                    }
                                    Else
                                    {
                                        Release (LFCM)
                                        Return (0xFFFF)
                                    }
                                }

                                If ((Arg0 == One))
                                {
                                    Release (LFCM)
                                    Return (0xFFFF)
                                }

                                Release (LFCM)
                            }
                        }

                        Return (0xFFFF)
                    }

                    Method (SBMC, 1, NotSerialized)
                    {
                        If (ECAV)
                        {
                            If ((Acquire (LFCM, 0xA000) == Zero))
                            {
                                If ((Arg0 == Zero))
                                {
                                    CDMB = Zero
                                    EDCC = One
                                    Release (LFCM)
                                    Return (Zero)
                                }

                                If ((Arg0 == One))
                                {
                                    CDMB = One
                                    Release (LFCM)
                                    Return (Zero)
                                }

                                If ((Arg0 == 0x03))
                                {
                                    BTSM = One
                                    Release (LFCM)
                                    Return (Zero)
                                }

                                If ((Arg0 == 0x05))
                                {
                                    BTSM = Zero
                                    Release (LFCM)
                                    Return (Zero)
                                }

                                If ((One == QCBX))
                                {
                                    If ((Arg0 == 0x07))
                                    {
                                        QCHO = One
                                        BTSM = Zero
                                        Release (LFCM)
                                        Return (Zero)
                                    }
                                }

                                If ((One == QCBX))
                                {
                                    If ((Arg0 == 0x08))
                                    {
                                        QCHO = Zero
                                        Release (LFCM)
                                        Return (Zero)
                                    }
                                }

                                If ((Arg0 == 0x09))
                                {
                                    ESMC = One
                                    Release (LFCM)
                                    Return (Zero)
                                }

                                If ((Arg0 == 0x10))
                                {
                                    ESMC = Zero
                                    Release (LFCM)
                                    Return (Zero)
                                }

                                Release (LFCM)
                            }
                        }

                        Return (Zero)
                    }

                    Method (MHCF, 1, NotSerialized)
                    {
                        P80B = 0x78
                        Local0 = Arg0
                        If (ECAV)
                        {
                            If ((Acquire (LFCM, 0xA000) == Zero))
                            {
                                Local0 &= 0x20
                                Local0 >>= 0x05
                                RMBT = Local0
                                Sleep (0x14)
                                Release (LFCM)
                            }
                        }

                        Return (Local0)
                    }

                    Method (MHPF, 1, NotSerialized)
                    {
                        If (ECAV)
                        {
                            If ((Acquire (LFCM, 0xA000) == Zero))
                            {
                                Name (BFWB, Buffer (0x25) {})
                                CreateByteField (BFWB, Zero, FB0)
                                CreateByteField (BFWB, One, FB1)
                                CreateByteField (BFWB, 0x02, FB2)
                                CreateByteField (BFWB, 0x03, FB3)
                                CreateField (BFWB, 0x20, 0x0100, FB4)
                                CreateByteField (BFWB, 0x24, FB5)
                                If ((SizeOf (Arg0) <= 0x25))
                                {
                                    If ((SMPR != Zero))
                                    {
                                        FB1 = SMST /* \_SB_.PC00.LPCB.EC0_.SMST */
                                    }
                                    Else
                                    {
                                        BFWB = Arg0
                                        SMAD = FB2 /* \_SB_.PC00.LPCB.EC0_.VPC0.MHPF.FB2_ */
                                        SMCM = FB3 /* \_SB_.PC00.LPCB.EC0_.VPC0.MHPF.FB3_ */
                                        BCNT = FB5 /* \_SB_.PC00.LPCB.EC0_.VPC0.MHPF.FB5_ */
                                        Local0 = FB0 /* \_SB_.PC00.LPCB.EC0_.VPC0.MHPF.FB0_ */
                                        If (((Local0 & One) == Zero))
                                        {
                                            SMDA = FB4 /* \_SB_.PC00.LPCB.EC0_.VPC0.MHPF.FB4_ */
                                        }

                                        SMST = Zero
                                        SMPR = FB0 /* \_SB_.PC00.LPCB.EC0_.VPC0.MHPF.FB0_ */
                                        BTFW = 0x80
                                        Local1 = 0x03E8
                                        While (Local1)
                                        {
                                            Sleep (One)
                                            Local1--
                                            If (((SMST && 0x80) || (SMPR == Zero)))
                                            {
                                                Break
                                            }
                                        }

                                        Local0 = FB0 /* \_SB_.PC00.LPCB.EC0_.VPC0.MHPF.FB0_ */
                                        If (((Local0 & One) != Zero))
                                        {
                                            FB4 = SMDA /* \_SB_.PC00.LPCB.EC0_.SMDA */
                                        }

                                        FB1 = SMST /* \_SB_.PC00.LPCB.EC0_.SMST */
                                        If (((Local1 == Zero) || !(SMST && 0x80)))
                                        {
                                            SMPR = Zero
                                            FB1 = 0x92
                                        }
                                    }

                                    Release (LFCM)
                                    Return (BFWB) /* \_SB_.PC00.LPCB.EC0_.VPC0.MHPF.BFWB */
                                }

                                Release (LFCM)
                            }
                        }
                    }

                    Method (MHIF, 1, NotSerialized)
                    {
                        If (ECAV)
                        {
                            If ((Acquire (LFCM, 0xA000) == Zero))
                            {
                                P80B = 0x50
                                If ((Arg0 == Zero))
                                {
                                    Name (RETB, Buffer (0x0A) {})
                                    Name (BUF1, Buffer (0x08) {})
                                    BUF1 = FWBT /* \_SB_.PC00.LPCB.EC0_.FWBT */
                                    CreateByteField (BUF1, Zero, FW0)
                                    CreateByteField (BUF1, One, FW1)
                                    CreateByteField (BUF1, 0x02, FW2)
                                    CreateByteField (BUF1, 0x03, FW3)
                                    CreateByteField (BUF1, 0x04, FW4)
                                    CreateByteField (BUF1, 0x05, FW5)
                                    CreateByteField (BUF1, 0x06, FW6)
                                    CreateByteField (BUF1, 0x07, FW7)
                                    RETB [Zero] = FUSL /* \_SB_.PC00.LPCB.EC0_.FUSL */
                                    RETB [One] = FUSH /* \_SB_.PC00.LPCB.EC0_.FUSH */
                                    RETB [0x02] = FW0 /* \_SB_.PC00.LPCB.EC0_.VPC0.MHIF.FW0_ */
                                    RETB [0x03] = FW1 /* \_SB_.PC00.LPCB.EC0_.VPC0.MHIF.FW1_ */
                                    RETB [0x04] = FW2 /* \_SB_.PC00.LPCB.EC0_.VPC0.MHIF.FW2_ */
                                    RETB [0x05] = FW3 /* \_SB_.PC00.LPCB.EC0_.VPC0.MHIF.FW3_ */
                                    RETB [0x06] = FW4 /* \_SB_.PC00.LPCB.EC0_.VPC0.MHIF.FW4_ */
                                    RETB [0x07] = FW5 /* \_SB_.PC00.LPCB.EC0_.VPC0.MHIF.FW5_ */
                                    RETB [0x08] = FW6 /* \_SB_.PC00.LPCB.EC0_.VPC0.MHIF.FW6_ */
                                    RETB [0x09] = FW7 /* \_SB_.PC00.LPCB.EC0_.VPC0.MHIF.FW7_ */
                                    Release (LFCM)
                                    Return (RETB) /* \_SB_.PC00.LPCB.EC0_.VPC0.MHIF.RETB */
                                }

                                Release (LFCM)
                            }
                        }
                    }

                    Method (GSBI, 1, NotSerialized)
                    {
                        Name (BIFB, Buffer (0x53)
                        {
                            /* 0000 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                            /* 0008 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                            /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                            /* 0018 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                            /* 0020 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                            /* 0028 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                            /* 0030 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                            /* 0038 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                            /* 0040 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                            /* 0048 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                            /* 0050 */  0xFF, 0xFF, 0xFF                                 // ...
                        })
                        CreateWordField (BIFB, Zero, DCAP)
                        CreateWordField (BIFB, 0x02, FCAP)
                        CreateWordField (BIFB, 0x04, RCAP)
                        CreateWordField (BIFB, 0x06, ATTE)
                        CreateWordField (BIFB, 0x08, ATTF)
                        CreateWordField (BIFB, 0x0A, BTVT)
                        CreateWordField (BIFB, 0x0C, BTCT)
                        CreateWordField (BIFB, 0x0E, BTMP)
                        CreateWordField (BIFB, 0x10, MDAT)
                        CreateWordField (BIFB, 0x12, FUDT)
                        CreateWordField (BIFB, 0x14, DVLT)
                        CreateField (BIFB, 0xB0, 0x50, DCHE)
                        CreateField (BIFB, 0x0100, 0x40, DNAM)
                        CreateField (BIFB, 0x0140, 0x60, MNAM)
                        CreateField (BIFB, 0x01A0, 0xB8, BRNB)
                        CreateQWordField (BIFB, 0x4B, BFW0)
                        If (((Arg0 == Zero) || (Arg0 == One)))
                        {
                            If (ECAV)
                            {
                                If ((Acquire (LFCM, 0xA000) == Zero))
                                {
                                    Local0 = B1DC /* \_SB_.PC00.LPCB.EC0_.B1DC */
                                    Local0 *= 0x0A
                                    DCAP = Local0
                                    Local0 = B1FC /* \_SB_.PC00.LPCB.EC0_.B1FC */
                                    Local0 *= 0x0A
                                    FCAP = Local0
                                    Local0 = B1RC /* \_SB_.PC00.LPCB.EC0_.B1RC */
                                    Local0 *= 0x0A
                                    RCAP = Local0
                                    ATTE = SMTE (Zero)
                                    ATTF = SMTF (Zero)
                                    BTVT = B1FV /* \_SB_.PC00.LPCB.EC0_.B1FV */
                                    BTCT = B1AC /* \_SB_.PC00.LPCB.EC0_.B1AC */
                                    Local0 = B1AT /* \_SB_.PC00.LPCB.EC0_.B1AT */
                                    Local0 += 0x0111
                                    Local0 *= 0x0A
                                    BTMP = Local0
                                    MDAT = B1DA /* \_SB_.PC00.LPCB.EC0_.B1DA */
                                    If ((BFUD != Zero))
                                    {
                                        FUDT = BFUD /* \_SB_.PC00.LPCB.EC0_.BFUD */
                                    }

                                    DVLT = B1DV /* \_SB_.PC00.LPCB.EC0_.B1DV */
                                    Name (DCH0, Buffer (0x0A)
                                    {
                                         0x00                                             // .
                                    })
                                    Name (DCH1, "LION")
                                    Name (DCH2, "LiP")
                                    If ((B1TY == One))
                                    {
                                        DCH0 = DCH1 /* \_SB_.PC00.LPCB.EC0_.VPC0.GSBI.DCH1 */
                                        DCHE = DCH0 /* \_SB_.PC00.LPCB.EC0_.VPC0.GSBI.DCH0 */
                                    }
                                    Else
                                    {
                                        DCH0 = DCH2 /* \_SB_.PC00.LPCB.EC0_.VPC0.GSBI.DCH2 */
                                        DCHE = DCH0 /* \_SB_.PC00.LPCB.EC0_.VPC0.GSBI.DCH0 */
                                    }

                                    Name (BDNT, Buffer (0x08)
                                    {
                                         0x00                                             // .
                                    })
                                    BDNT = BDN0 /* \_SB_.PC00.LPCB.EC0_.BDN0 */
                                    DNAM = BDNT /* \_SB_.PC00.LPCB.EC0_.VPC0.GSBI.BDNT */
                                    Name (BMNT, Buffer (0x0C)
                                    {
                                         0x00                                             // .
                                    })
                                    BMNT = BMN0 /* \_SB_.PC00.LPCB.EC0_.BMN0 */
                                    MNAM = BMNT /* \_SB_.PC00.LPCB.EC0_.VPC0.GSBI.BMNT */
                                    Name (BRN0, Buffer (0x17)
                                    {
                                         0x00                                             // .
                                    })
                                    BRN0 = BAR1 /* \_SB_.PC00.LPCB.EC0_.BAR1 */
                                    BRNB = BRN0 /* \_SB_.PC00.LPCB.EC0_.VPC0.GSBI.BRN0 */
                                    BFW0 = FWBT /* \_SB_.PC00.LPCB.EC0_.FWBT */
                                    Release (LFCM)
                                }
                            }

                            Return (BIFB) /* \_SB_.PC00.LPCB.EC0_.VPC0.GSBI.BIFB */
                        }

                        If ((Arg0 == 0x02))
                        {
                            Return (BIFB) /* \_SB_.PC00.LPCB.EC0_.VPC0.GSBI.BIFB */
                        }

                        Return (Zero)
                    }

                    Method (HODD, 0, NotSerialized)
                    {
                    }

                    Method (SODD, 1, Serialized)
                    {
                    }

                    Method (GBID, 0, Serialized)
                    {
                        Name (GBUF, Package (0x04)
                        {
                            Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            }, 

                            Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            }, 

                            Buffer (0x08)
                            {
                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                            }, 

                            Buffer (0x08)
                            {
                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                            }
                        })
                        If (ECAV)
                        {
                            If ((Acquire (LFCM, 0xA000) == Zero))
                            {
                                DerefOf (GBUF [Zero]) [Zero] = B1CT /* \_SB_.PC00.LPCB.EC0_.B1CT */
                                DerefOf (GBUF [One]) [Zero] = Zero
                                Name (BUF1, Buffer (0x08) {})
                                BUF1 = FWBT /* \_SB_.PC00.LPCB.EC0_.FWBT */
                                CreateByteField (BUF1, Zero, FW0)
                                CreateByteField (BUF1, One, FW1)
                                CreateByteField (BUF1, 0x02, FW2)
                                CreateByteField (BUF1, 0x03, FW3)
                                CreateByteField (BUF1, 0x04, FW4)
                                CreateByteField (BUF1, 0x05, FW5)
                                CreateByteField (BUF1, 0x06, FW6)
                                CreateByteField (BUF1, 0x07, FW7)
                                DerefOf (GBUF [0x02]) [Zero] = FW0 /* \_SB_.PC00.LPCB.EC0_.VPC0.GBID.FW0_ */
                                DerefOf (GBUF [0x02]) [One] = FW1 /* \_SB_.PC00.LPCB.EC0_.VPC0.GBID.FW1_ */
                                DerefOf (GBUF [0x02]) [0x02] = FW2 /* \_SB_.PC00.LPCB.EC0_.VPC0.GBID.FW2_ */
                                DerefOf (GBUF [0x02]) [0x03] = FW3 /* \_SB_.PC00.LPCB.EC0_.VPC0.GBID.FW3_ */
                                DerefOf (GBUF [0x02]) [0x04] = FW4 /* \_SB_.PC00.LPCB.EC0_.VPC0.GBID.FW4_ */
                                DerefOf (GBUF [0x02]) [0x05] = FW5 /* \_SB_.PC00.LPCB.EC0_.VPC0.GBID.FW5_ */
                                DerefOf (GBUF [0x02]) [0x06] = FW6 /* \_SB_.PC00.LPCB.EC0_.VPC0.GBID.FW6_ */
                                DerefOf (GBUF [0x02]) [0x07] = FW7 /* \_SB_.PC00.LPCB.EC0_.VPC0.GBID.FW7_ */
                                DerefOf (GBUF [0x03]) [Zero] = Zero
                                Release (LFCM)
                            }
                        }

                        Return (GBUF) /* \_SB_.PC00.LPCB.EC0_.VPC0.GBID.GBUF */
                    }

                    Name (APDT, Zero)
                    Method (APPC, 1, Serialized)
                    {
                        APDT = Arg0
                        Return (Zero)
                    }

                    Method (DBSL, 0, NotSerialized)
                    {
                        Return (Package (0x10)
                        {
                            0xC9, 
                            0xAE, 
                            0x95, 
                            0x7E, 
                            0x69, 
                            0x56, 
                            0x45, 
                            0x36, 
                            0x29, 
                            0x1E, 
                            0x15, 
                            0x0E, 
                            0x09, 
                            0x06, 
                            0x05, 
                            Zero
                        })
                    }

                    Method (SBSL, 1, Serialized)
                    {
                        If (ECAV)
                        {
                            If ((Acquire (LFCM, 0xA000) == Zero))
                            {
                                Local0 = Arg0
                                If ((Local0 == One))
                                {
                                    LCBV = 0x0E
                                }

                                If ((Local0 == 0x02))
                                {
                                    LCBV = 0x07
                                }

                                Release (LFCM)
                            }
                        }

                        Return (Zero)
                    }

                    Method (KBLC, 1, NotSerialized)
                    {
                        If (ECAV)
                        {
                            If ((Acquire (LFCM, 0xA000) == Zero))
                            {
                                If ((Arg0 == One))
                                {
                                    Local0 = KBGC /* \_SB_.PC00.LPCB.EC0_.KBGC */
                                    Release (LFCM)
                                    Return ((Local0 | One))
                                }
                                ElseIf (((Arg0 & 0x0F) == 0x02))
                                {
                                    Local0 = KBGC /* \_SB_.PC00.LPCB.EC0_.KBGC */
                                    Local0 &= 0xFFFFFFFE
                                    Local1 = (Arg0 & 0xFFF0)
                                    Local1 >>= 0x03
                                    If ((Local0 != Local1))
                                    {
                                        Release (LFCM)
                                        Return (Zero)
                                    }
                                    Else
                                    {
                                        Local3 = KBGS /* \_SB_.PC00.LPCB.EC0_.KBGS */
                                        Release (LFCM)
                                        Return ((Local3 | One))
                                    }
                                }
                                ElseIf (((Arg0 & 0x0F) == 0x03))
                                {
                                    Local0 = KBGC /* \_SB_.PC00.LPCB.EC0_.KBGC */
                                    Local0 &= 0xFFFFFFFE
                                    Local1 = (Arg0 & 0xFFF0)
                                    Local1 >>= 0x03
                                    If ((Local0 != Local1))
                                    {
                                        Release (LFCM)
                                        Return (Zero)
                                    }
                                    Else
                                    {
                                        Local3 = (Arg0 & 0xFFFFFFFF)
                                        KBSS = Local3
                                        Sleep (0x012C)
                                        Local3 = KBGS /* \_SB_.PC00.LPCB.EC0_.KBGS */
                                        Release (LFCM)
                                        Return ((Local3 | One))
                                    }
                                }

                                Release (LFCM)
                            }
                        }

                        Return (Zero)
                    }

                    Method (BSIF, 1, NotSerialized)
                    {
                        If (ECAV)
                        {
                            If ((Acquire (LFCM, 0xA000) == Zero))
                            {
                                If (((Arg0 & 0x0F) == One))
                                {
                                    Local0 = Arg0
                                    Local0 >>= 0x04
                                    Local1 = Zero
                                    If ((Local0 == One))
                                    {
                                        Local1 |= 0x0B70
                                        Return ((Local1 | One))
                                    }
                                }

                                Release (LFCM)
                            }
                        }

                        Return (Zero)
                    }

                    Method (BTMC, 1, NotSerialized)
                    {
                        If (ECAV)
                        {
                            If ((Acquire (LFCM, 0xA000) == Zero))
                            {
                                If (((Arg0 & 0x0F) == One))
                                {
                                    Local0 = Arg0
                                    Local0 >>= 0x04
                                    Local1 = Zero
                                    If ((Local0 == One))
                                    {
                                        If ((TPMD == Zero))
                                        {
                                            Local1 = Zero
                                        }
                                        ElseIf ((TPMD == One))
                                        {
                                            If ((PDMD == One))
                                            {
                                                Local1 = One
                                            }
                                            ElseIf ((PDMD == Zero))
                                            {
                                                Local1 = 0x02
                                            }
                                        }

                                        Local1 <<= 0x04
                                        Release (LFCM)
                                        Return ((Local1 | One))
                                    }
                                    ElseIf ((Local0 == 0x02))
                                    {
                                        Local1 = BTLF /* \_SB_.PC00.LPCB.EC0_.BTLF */
                                        Local1 <<= 0x04
                                        Release (LFCM)
                                        Return ((Local1 | One))
                                    }
                                    ElseIf ((Local0 == 0x03))
                                    {
                                        Local1 = BTTP /* \_SB_.PC00.LPCB.EC0_.BTTP */
                                        Local1 <<= 0x04
                                        Release (LFCM)
                                        Return ((Local1 | One))
                                    }
                                    ElseIf ((Local0 == 0x04))
                                    {
                                        Local1 = BTLF /* \_SB_.PC00.LPCB.EC0_.BTLF */
                                        Local1 <<= 0x04
                                        Release (LFCM)
                                        Return ((Local1 | One))
                                    }
                                    Else
                                    {
                                        Release (LFCM)
                                        Return (Local1)
                                    }
                                }
                                ElseIf (((Arg0 & 0x0F) == 0x02))
                                {
                                    Local0 = One
                                    Local0 <<= One
                                    Release (LFCM)
                                    Return (Local0)
                                }
                                ElseIf (((Arg0 & 0x0F) == 0x03))
                                {
                                    Local0 = Arg0
                                    Local0 >>= 0x04
                                    Local1 = Zero
                                    Local2 = Zero
                                    If ((Local0 == One))
                                    {
                                        If ((TPMD == One))
                                        {
                                            Local1 = One
                                            If ((BTSB == 0x03))
                                            {
                                                Local2 = 0x03
                                            }
                                        }

                                        Local1 <<= One
                                        Local2 <<= 0x02
                                        Local1 |= Local2
                                        Release (LFCM)
                                        Return ((Local1 | One))
                                    }
                                    ElseIf ((Local0 == 0x02))
                                    {
                                        If ((BTSB == 0x03))
                                        {
                                            Local1 = One
                                        }
                                        Else
                                        {
                                            Local1 = Zero
                                        }

                                        Local1 <<= One
                                        Release (LFCM)
                                        Return ((Local1 | One))
                                    }
                                }

                                Release (LFCM)
                            }
                        }

                        Return (Zero)
                    }

                    Method (STHT, 1, Serialized)
                    {
                        Return (Zero)
                    }
                }
            }

            Scope (\)
            {
                OperationRegion (LFCN, SystemMemory, 0x4521D018, 0x037D)
                Field (LFCN, AnyAcc, Lock, Preserve)
                {
                    PS2V,   8, 
                    KBID,   8, 
                    MCSZ,   8, 
                    OKRB,   8, 
                    EDID,   1024, 
                    TPTY,   8, 
                    TPTP,   16, 
                    TPNY,   8, 
                    TPNP,   16, 
                    UMAB,   8, 
                    ENQT,   8, 
                    DYTP,   32, 
                    FCAP,   16, 
                    VSTD,   1, 
                        ,   1, 
                    VFBC,   1, 
                    VMYH,   1, 
                    VSTP,   1, 
                    VAPM,   1, 
                    VAQM,   1, 
                    VIEP,   1, 
                    VIBS,   1, 
                    VCQL,   1, 
                    VAAA,   1, 
                    VMMC,   1, 
                        ,   1, 
                        ,   1, 
                        ,   1, 
                    Offset (0x94), 
                    MYHC,   8, 
                    MMCC,   8, 
                    SMYH,   8, 
                    SMMC,   8, 
                    CICF,   4, 
                    CICM,   4, 
                    BDDN,   2048, 
                    PBID,   8, 
                    CAMS,   8, 
                    PANT,   8, 
                    DSMF,   8, 
                    RDOC,   8, 
                    TRLV,   8, 
                    GTYP,   8, 
                    RGBD,   8, 
                    MCSK,   8, 
                    OCCS,   8, 
                    COCC,   8, 
                    ACR1,   8, 
                    ACR2,   8, 
                    ACR3,   8, 
                    ACR4,   8, 
                    ACR5,   8, 
                    ACR6,   8, 
                    ACR7,   8, 
                    ACR8,   8, 
                    CVOT,   16, 
                    CVOP,   8, 
                    AROT,   8, 
                    CARO,   8, 
                    CAVO,   16, 
                    CAVP,   8, 
                    GOCC,   8, 
                    GCCO,   16, 
                    GCOP,   8, 
                    GVCO,   16, 
                    GVOP,   8, 
                    GSYN,   8, 
                    CMSP,   16, 
                    PVSD,   8, 
                    LDDC,   3072, 
                    GSNM,   8, 
                    PMID,   16, 
                    PPID,   16, 
                    CTCD,   8, 
                    CNFG,   8, 
                    RSVD,   440
                }

                OperationRegion (SMIO, SystemIO, 0xB2, 0x02)
                Field (SMIO, ByteAcc, NoLock, Preserve)
                {
                    SMBA,   8, 
                    SMBB,   8
                }
            }

            Method (_REG, 2, NotSerialized)  // _REG: Region Availability
            {
                If ((Arg0 == 0x03))
                {
                    ECAV = Arg1
                }

                If (((Arg0 == 0x03) && (Arg1 == One)))
                {
                    If ((OSYS == 0x07D6))
                    {
                        Local0 = One
                    }

                    If ((OSYS == 0x03E8))
                    {
                        Local0 = 0x02
                    }

                    If ((OSYS == 0x07D9))
                    {
                        Local0 = 0x03
                    }

                    If ((OSYS == 0x07DC))
                    {
                        Local0 = 0x04
                    }

                    If ((OSYS == 0x07DD))
                    {
                        Local0 = 0x05
                    }

                    If ((OSYS == 0x07DF))
                    {
                        Local0 = 0x06
                    }

                    If ((Acquire (LFCM, 0xA000) == Zero))
                    {
                        OSTY = Local0
                        If ((LSTE == Zero))
                        {
                            ^^^GFX0.CLID = Zero
                        }

                        If ((LSTE == One))
                        {
                            ^^^GFX0.CLID = 0x03
                        }

                        LIDS = LSTE /* \_SB_.PC00.LPCB.EC0_.LSTE */
                        Release (LFCM)
                    }
                }

                If ((Acquire (LFCM, 0xA000) == Zero))
                {
                    If ((SPMO == 0x02))
                    {
                        ODV1 = 0x02
                        LTGP = Zero
                        DTGP = Zero
                    }
                    ElseIf ((SPMO == One))
                    {
                        ODV1 = One
                        LTGP = One
                        DTGP = One
                    }
                    Else
                    {
                        NCMD (0x8B, Zero)
                        ODV1 = Zero
                        LTGP = Zero
                        DTGP = Zero
                    }

                    Release (LFCM)
                }

                Sleep (0x32)
                Notify (NPCF, 0xC0) // Hardware-Specific
                If ((ACTY () == One))
                {
                    ODV4 = One
                }
                Else
                {
                    ODV4 = Zero
                }

                Notify (IETM, 0x88) // Device-Specific
            }

            Method (CMFC, 0, Serialized)
            {
                Return (EDID) /* \EDID */
            }

            Method (LFCI, 2, Serialized)
            {
                Switch (ToInteger (Arg0))
                {
                    Case (One)
                    {
                        Return (OKRB) /* \OKRB */
                    }
                    Case (0x02)
                    {
                        Local0 = RECM (0x78)
                        P80B = Local0
                        Return (Local0)
                    }

                }
            }

            Method (CHKS, 0, NotSerialized)
            {
                Local0 = 0x03E8
                While (HMPR)
                {
                    Sleep (One)
                    Local0--
                    If (!Local0)
                    {
                        Return (0x8080)
                    }
                }

                If ((SMST & 0x80))
                {
                    Return (Zero)
                }

                Return (0x8081)
            }

            Scope (\)
            {
                Name (LTGP, Zero)
                Name (FMOD, Zero)
                Name (DTGP, Zero)
            }

            Method (_Q11, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80B = 0x11
                If (IGDS)
                {
                    Notify (^^^GFX0.DD1F, 0x87) // Device-Specific
                }
                Else
                {
                    Notify (^^^PEG1.PEGP.EDP0, 0x87) // Device-Specific
                }

                Notify (VPC0, 0x80) // Status Change
            }

            Method (_Q12, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80B = 0x12
                If (IGDS)
                {
                    Notify (^^^GFX0.DD1F, 0x86) // Device-Specific
                }
                Else
                {
                    Notify (^^^PEG1.PEGP.EDP0, 0x86) // Device-Specific
                }

                Notify (VPC0, 0x80) // Status Change
            }

            Method (_Q15, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80B = 0x15
                Notify (PS2M, 0x0E) // Heterogeneous Memory Attributes Update
                If (ECAV)
                {
                    If ((Acquire (LFCM, 0xA000) == Zero))
                    {
                        LIDS = LSTE /* \_SB_.PC00.LPCB.EC0_.LSTE */
                        Release (LFCM)
                    }
                }

                ^^^GFX0.GLID (LIDS)
                Notify (LID0, 0x80) // Status Change
            }

            Method (_Q16, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80B = 0x16
                Notify (PS2M, 0x0D) // System Resource Affinity Update
                If (ECAV)
                {
                    If ((Acquire (LFCM, 0xA000) == Zero))
                    {
                        LIDS = LSTE /* \_SB_.PC00.LPCB.EC0_.LSTE */
                        Release (LFCM)
                    }
                }

                ^^^GFX0.GLID (LIDS)
                Notify (LID0, 0x80) // Status Change
            }

            Method (_Q1D, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80B = 0x1D
                If (ECAV)
                {
                    If ((Acquire (LFCM, 0xA000) == Zero))
                    {
                        Local0 = TLVL /* \_SB_.PC00.LPCB.EC0_.TLVL */
                        Release (LFCM)
                    }
                }

                CPPC = Local0
                PNOT ()
            }

            Method (_Q25, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80B = 0x25
                Notify (ADP0, 0x80) // Status Change
                Notify (BAT0, 0x80) // Status Change
                Notify (BAT0, 0x81) // Information Change
            }

            Method (_Q37, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80B = 0x37
                Sleep (0x012C)
                Notify (GZFD, 0xE5) // Hardware-Specific
                Sleep (0x05)
                Notify (GZFD, 0xE7) // Hardware-Specific
                PWRS = One
                Notify (ADP0, 0x80) // Status Change
                Notify (BAT0, 0x80) // Status Change
                If (ECAV)
                {
                    If ((Acquire (LFCM, 0xA000) == Zero))
                    {
                        If ((CTMD == One))
                        {
                            SPMO = One
                            CAC1 = One
                        }

                        If ((((SPMO == Zero) && (PABD == One)) && (ACTY () == One)))
                        {
                            SSFM = One
                            SPMO = One
                            ODV1 = One
                            LTGP = One
                            DTGP = One
                            PABD = Zero
                            Notify (NPCF, 0xC0) // Hardware-Specific
                            Notify (IETM, 0x88) // Device-Specific
                            Release (LFCM)
                        }
                    }
                }

                PNOT ()
            }

            Method (_Q38, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80B = 0x38
                Sleep (0x012C)
                Notify (GZFD, 0xE5) // Hardware-Specific
                Sleep (0x05)
                Notify (GZFD, 0xE7) // Hardware-Specific
                PWRS = Zero
                Notify (ADP0, 0x80) // Status Change
                Notify (BAT0, 0x80) // Status Change
                If (ECAV)
                {
                    If ((Acquire (LFCM, 0xA000) == Zero))
                    {
                        If ((CTMD == One))
                        {
                            SPMO = Zero
                            CAC1 = Zero
                        }

                        If (((SPMO == One) && ((ACTY () == 0x02) || (ACTY () == 0x03))))
                        {
                            SSFM = One
                            SPMO = Zero
                            ODV1 = Zero
                            LTGP = Zero
                            DTGP = Zero
                            PABD = One
                            Notify (NPCF, 0xC0) // Hardware-Specific
                            Notify (IETM, 0x88) // Device-Specific
                            Release (LFCM)
                        }
                    }
                }

                PNOT ()
            }

            Method (_Q32, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80B = 0x32
                Notify (PWRB, 0x80) // Status Change
            }

            Method (_Q3C, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80B = 0x3C
                ^^^^WMIS.SDAT = One
                Notify (WMIS, 0xD0) // Hardware-Specific
            }

            Method (_Q3D, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80B = 0x3D
                ^^^^WMIS.SDAT = Zero
                Notify (WMIS, 0xD0) // Hardware-Specific
            }

            Method (_Q3E, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80B = 0x3E
                Notify (PS2M, 0x3E) // Reserved
            }

            Method (_Q3F, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80B = 0x3F
                Notify (PS2M, 0x3F) // Reserved
            }

            Method (_Q44, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80B = 0x44
                Notify (VPC0, 0x80) // Status Change
            }

            Method (_Q13, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80B = 0x13
                Sleep (0x05)
                If (ECAV)
                {
                    If ((Acquire (LFCM, 0xA000) == Zero))
                    {
                        If ((SPMO == 0x02))
                        {
                            ODV1 = 0x02
                            LTGP = Zero
                            DTGP = Zero
                        }
                        ElseIf ((SPMO == One))
                        {
                            ODV1 = One
                            LTGP = One
                            DTGP = One
                        }
                        Else
                        {
                            ODV1 = Zero
                            LTGP = Zero
                            DTGP = Zero
                        }

                        Release (LFCM)
                    }
                }

                PABD = Zero
                Notify (GZFD, 0xE3) // Hardware-Specific
                Notify (GZFD, 0xE7) // Hardware-Specific
                Sleep (0x05)
                INSM = Zero
                BCTP = Zero
                Notify (NPCF, 0xC0) // Hardware-Specific
                Sleep (0x05)
                Notify (IETM, 0x88) // Device-Specific
            }

            Method (_Q72, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80B = 0x72
                Sleep (0x05)
                If ((Acquire (LFCM, 0xA000) == Zero))
                {
                    If ((SPMO == 0x02))
                    {
                        ODV1 = 0x02
                        LTGP = Zero
                        DTGP = Zero
                    }
                    ElseIf ((SPMO == One))
                    {
                        ODV1 = One
                        LTGP = One
                        DTGP = One
                    }
                    Else
                    {
                        ODV1 = Zero
                        LTGP = Zero
                        DTGP = Zero
                    }

                    Release (LFCM)
                }

                Sleep (0x32)
                Notify (NPCF, 0xC0) // Hardware-Specific
                If ((ACTY () == One))
                {
                    ODV4 = One
                }
                Else
                {
                    ODV4 = Zero
                }

                Notify (IETM, 0x88) // Device-Specific
            }

            Method (_Q70, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80B = 0x70
                Sleep (0x05)
                Notify (SEN1, 0x90) // Device-Specific
                Notify (SEN2, 0x90) // Device-Specific
                Notify (SEN3, 0x90) // Device-Specific
                Notify (SEN4, 0x90) // Device-Specific
                Notify (SEN5, 0x90) // Device-Specific
                Notify (SEN6, 0x90) // Device-Specific
                Notify (SEN7, 0x90) // Device-Specific
                Notify (SEN8, 0x90) // Device-Specific
            }

            Method (_Q74, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80B = 0x74
                Sleep (0x05)
                ODV2 = One
                Notify (IETM, 0x88) // Device-Specific
            }

            Method (_Q75, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80B = 0x75
                Sleep (0x05)
                ODV2 = 0x02
                Notify (IETM, 0x88) // Device-Specific
            }

            Method (_Q76, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80B = 0x76
                Sleep (0x05)
                ODV2 = Zero
                Notify (IETM, 0x88) // Device-Specific
            }

            Method (_Q77, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80B = 0x77
                Sleep (0x05)
                ODV3 = One
                Notify (IETM, 0x88) // Device-Specific
            }

            Method (_Q78, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80B = 0x78
                Sleep (0x05)
                ODV3 = 0x02
                Notify (IETM, 0x88) // Device-Specific
            }

            Method (_Q79, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80B = 0x79
                Sleep (0x05)
                ODV3 = Zero
                Notify (IETM, 0x88) // Device-Specific
            }

            Method (_Q80, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80B = 0x80
                Sleep (0x05)
                ODV3 = 0x03
                Notify (^^^PEG1.PEGP, 0xD4) // Hardware-Specific
                Notify (IETM, 0x88) // Device-Specific
            }

            Method (_Q81, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80B = 0x81
                Sleep (0x05)
                ODV3 = 0x04
                Notify (^^^PEG1.PEGP, 0xD2) // Hardware-Specific
                Notify (IETM, 0x88) // Device-Specific
            }

            Method (_Q82, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80B = 0x82
                Sleep (0x05)
                ODV3 = 0x05
                Notify (^^^PEG1.PEGP, 0xD2) // Hardware-Specific
                Notify (IETM, 0x88) // Device-Specific
            }

            Method (_Q83, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80B = 0x83
                Sleep (0x05)
                ODV3 = Zero
                Notify (IETM, 0x88) // Device-Specific
            }

            Method (_Q86, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80B = 0x86
                Sleep (0x05)
            }

            Method (_Q87, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80B = 0x87
                Sleep (0x05)
            }

            Method (_Q4F, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80B = 0x4F
                ^^^^UBTC.ECRD ()
                Sleep (One)
                Notify (UBTC, 0x80) // Status Change
            }

            Method (_Q62, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80B = 0x62
                If (ECAV)
                {
                    If ((Acquire (LFCM, 0xA000) == Zero))
                    {
                        GUST = 0x03
                        Notify (GZFD, 0xD0) // Hardware-Specific
                        Release (LFCM)
                    }
                }
            }

            Method (_Q63, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80B = 0x63
                If (ECAV)
                {
                    If ((Acquire (LFCM, 0xA000) == Zero))
                    {
                        GUST = One
                        Notify (GZFD, 0xD0) // Hardware-Specific
                        Release (LFCM)
                    }
                }
            }

            Method (_Q66, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80B = 0x66
                If (ECAV)
                {
                    If ((Acquire (LFCM, 0xA000) == Zero))
                    {
                        GUST = 0x02
                        Notify (GZFD, 0xD0) // Hardware-Specific
                        Release (LFCM)
                    }
                }
            }

            Method (_Q67, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80B = 0x67
                If (ECAV)
                {
                    If ((Acquire (LFCM, 0xA000) == Zero))
                    {
                        GUST = Zero
                        Notify (GZFD, 0xD0) // Hardware-Specific
                        Release (LFCM)
                    }
                }
            }

            Method (_Q68, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80B = 0x68
                Notify (GZFD, 0xD1) // Hardware-Specific
            }

            Method (_Q69, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80B = 0x69
                Notify (GZFD, 0xE0) // Hardware-Specific
            }

            Method (_Q6A, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80B = 0x6A
                Notify (GZFD, 0xE1) // Hardware-Specific
            }

            Method (_Q6B, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80B = 0x6B
                Notify (GZFD, 0xE2) // Hardware-Specific
            }

            Method (_QDE, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80B = 0xDE
                Notify (GZFD, 0xE6) // Hardware-Specific
            }

            Method (_QD1, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80B = 0xD1
                If (ECAV)
                {
                    If ((Acquire (LFCM, 0xA000) == Zero))
                    {
                        GUST = Zero
                        Notify (^^^PEG1.PEGP, 0xD1) // Hardware-Specific
                        Release (LFCM)
                    }
                }

                Sleep (0x0A)
            }

            Method (_QD2, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80B = 0xD2
                If (ECAV)
                {
                    If ((Acquire (LFCM, 0xA000) == Zero))
                    {
                        GUST = Zero
                        Notify (^^^PEG1.PEGP, 0xD2) // Hardware-Specific
                        Release (LFCM)
                    }
                }

                Sleep (0x0A)
            }

            Method (_QD3, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80B = 0xD3
                If (ECAV)
                {
                    If ((Acquire (LFCM, 0xA000) == Zero))
                    {
                        GUST = Zero
                        Notify (^^^PEG1.PEGP, 0xD3) // Hardware-Specific
                        Release (LFCM)
                    }
                }

                Sleep (0x0A)
            }

            Method (_QD4, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80B = 0xD4
                If (ECAV)
                {
                    If ((Acquire (LFCM, 0xA000) == Zero))
                    {
                        GUST = Zero
                        Notify (^^^PEG1.PEGP, 0xD4) // Hardware-Specific
                        Release (LFCM)
                    }
                }

                Sleep (0x0A)
            }

            Method (_QD5, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80B = 0xD5
                If (ECAV)
                {
                    If ((Acquire (LFCM, 0xA000) == Zero))
                    {
                        GUST = Zero
                        Notify (^^^PEG1.PEGP, 0xD5) // Hardware-Specific
                        Release (LFCM)
                    }
                }

                Sleep (0x0A)
            }

            Scope (\)
            {
                Name (GPSF, Zero)
                Name (DCPS, Zero)
            }

            Name (DGST, 0xD1)
            Method (_Q1E, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80B = 0x1E
                If (((GATY == 0x02) || (MSMF == One)))
                {
                    P80B = 0x91
                    If ((DGDF <= 0x04))
                    {
                        P80B = 0x92
                        Local0 = 0xD1
                        Local0 += DGDF /* \_SB_.PC00.LPCB.EC0_.DGDF */
                        If ((Local0 == 0xD1))
                        {
                            DCPS = Zero
                            P80B = 0xD1
                            If ((DGST != Local0))
                            {
                                DGST = Local0
                                Notify (^^^PEG1.PEGP, Local0)
                            }

                            Sleep (0x0A)
                            If ((GPSF == Zero))
                            {
                                GPSF = One
                                Notify (NPCF, 0xC0) // Hardware-Specific
                            }
                        }
                        Else
                        {
                            DCPS = One
                            P80B = 0xD2
                            If ((DGST != Local0))
                            {
                                DGST = Local0
                                Notify (^^^PEG1.PEGP, Local0)
                            }

                            Sleep (0x0A)
                            If ((GPSF == One))
                            {
                                GPSF = Zero
                                Notify (NPCF, 0xC0) // Hardware-Specific
                            }
                        }
                    }
                }
            }

            Method (_Q6C, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                SMBA = 0xCE
            }

            Method (_QDC, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80B = 0xDC
                Notify (GZFD, 0xE8) // Hardware-Specific
            }

            Method (_QDD, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80B = 0xDD
                If ((NUML == One))
                {
                    SGOV (0x08050011, One)
                }
                Else
                {
                    SGOV (0x08050011, Zero)
                }

                If ((CALK == One))
                {
                    SGOV (0x0805000F, One)
                }
                Else
                {
                    SGOV (0x0805000F, Zero)
                }
            }

            Scope (\)
            {
                Name (LSKD, Zero)
            }

            Method (_QDF, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80B = 0xDF
                If ((LSKV != Zero))
                {
                    If ((LSKV < 0x27))
                    {
                        LSKD = LSKV /* \_SB_.PC00.LPCB.EC0_.LSKV */
                    }

                    If ((LSKD == 0x04))
                    {
                        If ((HKDB == Zero))
                        {
                            SGOV (0x08050010, One)
                        }
                        Else
                        {
                            SGOV (0x08050010, Zero)
                        }
                    }

                    LSKV = Zero
                }

                Notify (WMIU, 0xD0) // Hardware-Specific
                Notify (GZFD, 0xE8) // Hardware-Specific
            }
        }

        Scope (\_SB)
        {
            Device (ADP0)
            {
                Name (_HID, "ACPI0003" /* Power Source Device */)  // _HID: Hardware ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (0x0F)
                }

                Name (ACDC, 0xFF)
                Method (_PSR, 0, NotSerialized)  // _PSR: Power Source
                {
                    If (^^PC00.LPCB.EC0.ECAV)
                    {
                        If ((Acquire (^^PC00.LPCB.EC0.LFCM, 0xA000) == Zero))
                        {
                            Local0 = One
                            Local0 = ^^PC00.LPCB.EC0.ADPT /* \_SB_.PC00.LPCB.EC0_.ADPT */
                            Release (^^PC00.LPCB.EC0.LFCM)
                            Return (Local0)
                        }
                    }
                }

                Method (_PCL, 0, NotSerialized)  // _PCL: Power Consumer List
                {
                    Return (Package (0x01)
                    {
                        _SB
                    })
                }
            }

            Device (LID0)
            {
                Name (_HID, EisaId ("PNP0C0D") /* Lid Device */)  // _HID: Hardware ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (0x0F)
                }

                Method (_LID, 0, NotSerialized)  // _LID: Lid Status
                {
                    Return (LIDS) /* \LIDS */
                }
            }

            Device (PWRB)
            {
                Name (_HID, EisaId ("PNP0C0C") /* Power Button Device */)  // _HID: Hardware ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (0x0F)
                }
            }

            Device (WMI4)
            {
                Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
                Name (_UID, 0x04)  // _UID: Unique ID
                Mutex (MWMI, 0x00)
                Name (_WDG, Buffer (0x28)
                {
                    /* 0000 */  0x76, 0x37, 0xA0, 0xC3, 0xAC, 0x51, 0xAA, 0x49,  // v7...Q.I
                    /* 0008 */  0xAD, 0x0F, 0xF2, 0xF7, 0xD6, 0x2C, 0x3F, 0x3C,  // .....,?<
                    /* 0010 */  0x41, 0x44, 0x03, 0x05, 0x21, 0x12, 0x90, 0x05,  // AD..!...
                    /* 0018 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  // f.......
                    /* 0020 */  0xC9, 0x06, 0x29, 0x10, 0x42, 0x44, 0x01, 0x00   // ..).BD..
                })
                Name (ITEM, Package (0x03)
                {
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        "BAT0 BatMaker"
                    }, 

                    Package (0x03)
                    {
                        Zero, 
                        One, 
                        "BAT0 HwId "
                    }, 

                    Package (0x03)
                    {
                        Zero, 
                        0x02, 
                        "BAT0 MfgDate "
                    }
                })
                Method (WQAD, 1, NotSerialized)
                {
                    If (^^PC00.LPCB.EC0.ECAV)
                    {
                        If ((Acquire (^^PC00.LPCB.EC0.LFCM, 0xA000) == Zero))
                        {
                            Local0 = PSAG (Arg0)
                            Local1 = DerefOf (ITEM [Local0])
                            Local2 = DerefOf (Local1 [Zero])
                            Local3 = DerefOf (Local1 [One])
                            Local4 = DerefOf (Local1 [0x02])
                            Local5 = BATD (Local2, Local3)
                            Concatenate (Local4, ",", Local6)
                            Concatenate (Local6, Local5, Local7)
                            Release (^^PC00.LPCB.EC0.LFCM)
                        }
                    }

                    Return (Local7)
                }

                Method (PSAG, 1, NotSerialized)
                {
                    Return (Arg0)
                }

                Method (BATD, 2, NotSerialized)
                {
                    Name (STRB, Buffer (0x0A)
                    {
                         0x00                                             // .
                    })
                    Name (BUFR, Buffer (0x08) {})
                    BUFR = ^^PC00.LPCB.EC0.FWBT /* \_SB_.PC00.LPCB.EC0_.FWBT */
                    CreateWordField (BUFR, Zero, MID0)
                    CreateWordField (BUFR, 0x02, HID0)
                    CreateWordField (BUFR, 0x04, FIR0)
                    CreateWordField (BUFR, 0x06, DAT0)
                    If ((Arg0 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            STRB = ToHexString (MID0)
                        }

                        If ((Arg1 == One))
                        {
                            STRB = ToHexString (HID0)
                        }

                        If ((Arg1 == 0x02))
                        {
                            Local0 = ^^PC00.LPCB.EC0.B1DA /* \_SB_.PC00.LPCB.EC0_.B1DA */
                            Name (DATB, Buffer (0x09)
                            {
                                "00000000"
                            })
                            Local3 = 0x07
                            Local1 = (Local0 & 0x1F)
                            While (Local1)
                            {
                                Divide (Local1, 0x0A, Local2, Local1)
                                DATB [Local3] = (Local2 + 0x30)
                                Local3--
                            }

                            Local3 = 0x05
                            Local1 = ((Local0 & 0x01E0) >> 0x05)
                            While (Local1)
                            {
                                Divide (Local1, 0x0A, Local2, Local1)
                                DATB [Local3] = (Local2 + 0x30)
                                Local3--
                            }

                            Local3 = 0x03
                            Local1 = (((Local0 & 0xFE00) >> 0x09) + 0x07BC)
                            While (Local1)
                            {
                                Divide (Local1, 0x0A, Local2, Local1)
                                DATB [Local3] = (Local2 + 0x30)
                                Local3--
                            }

                            STRB = DATB /* \_SB_.WMI4.BATD.DATB */
                        }
                    }

                    Return (ToString (STRB, Ones))
                }

                Name (WQBD, Buffer (0x0275)
                {
                    /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                    /* 0008 */  0x65, 0x02, 0x00, 0x00, 0xF8, 0x05, 0x00, 0x00,  // e.......
                    /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                    /* 0018 */  0x18, 0xD1, 0x82, 0x00, 0x01, 0x06, 0x18, 0x42,  // .......B
                    /* 0020 */  0x10, 0x05, 0x10, 0x8A, 0x0D, 0x21, 0x02, 0x0B,  // .....!..
                    /* 0028 */  0x83, 0x50, 0x50, 0x18, 0x14, 0xA0, 0x45, 0x41,  // .PP...EA
                    /* 0030 */  0xC8, 0x05, 0x14, 0x95, 0x02, 0x21, 0xC3, 0x02,  // .....!..
                    /* 0038 */  0x14, 0x0B, 0x70, 0x2E, 0x40, 0xBA, 0x00, 0xE5,  // ..p.@...
                    /* 0040 */  0x28, 0x72, 0x0C, 0x22, 0x02, 0xF7, 0xEF, 0x0F,  // (r."....
                    /* 0048 */  0x31, 0xD0, 0x18, 0xA8, 0x50, 0x08, 0x89, 0x00,  // 1...P...
                    /* 0050 */  0xA6, 0x42, 0xE0, 0x08, 0x41, 0xBF, 0x02, 0x10,  // .B..A...
                    /* 0058 */  0x3A, 0x14, 0x20, 0x53, 0x80, 0x41, 0x01, 0x4E,  // :. S.A.N
                    /* 0060 */  0x11, 0x44, 0x10, 0xA5, 0x65, 0x01, 0xBA, 0x05,  // .D..e...
                    /* 0068 */  0xF8, 0x16, 0xA0, 0x1D, 0x42, 0x68, 0x91, 0x9A,  // ....Bh..
                    /* 0070 */  0x9F, 0x04, 0x81, 0x6A, 0x5B, 0x80, 0x45, 0x01,  // ...j[.E.
                    /* 0078 */  0xB2, 0x41, 0x08, 0xA0, 0xC7, 0xC1, 0x44, 0x0E,  // .A....D.
                    /* 0080 */  0x02, 0x25, 0x66, 0x10, 0x28, 0x9D, 0x73, 0x90,  // .%f.(.s.
                    /* 0088 */  0x4D, 0x60, 0xE1, 0x9F, 0x4C, 0x94, 0xF3, 0x88,  // M`..L...
                    /* 0090 */  0x92, 0xE0, 0xA8, 0x0E, 0x22, 0x42, 0xF0, 0x72,  // ...."B.r
                    /* 0098 */  0x05, 0x48, 0x9E, 0x80, 0x34, 0x4F, 0x4C, 0xD6,  // .H..4OL.
                    /* 00A0 */  0x07, 0xA1, 0x21, 0xB0, 0x11, 0xF0, 0x88, 0x12,  // ..!.....
                    /* 00A8 */  0x40, 0x58, 0xA0, 0x75, 0x2A, 0x14, 0x0C, 0xCA,  // @X.u*...
                    /* 00B0 */  0x03, 0x88, 0xE4, 0x8C, 0x15, 0x05, 0x6C, 0xAF,  // ......l.
                    /* 00B8 */  0x13, 0x91, 0xC9, 0x81, 0x52, 0x49, 0x70, 0xA8,  // ....RIp.
                    /* 00C0 */  0x61, 0x5A, 0xE2, 0xEC, 0x34, 0xB2, 0x13, 0x39,  // aZ..4..9
                    /* 00C8 */  0xB6, 0xA6, 0x87, 0x2C, 0x48, 0x26, 0x6D, 0x28,  // ...,H&m(
                    /* 00D0 */  0xA8, 0xB1, 0x7B, 0x5A, 0x27, 0xE5, 0x99, 0x46,  // ..{Z'..F
                    /* 00D8 */  0x3C, 0x28, 0xC3, 0x24, 0xF0, 0x28, 0x18, 0x1A,  // <(.$.(..
                    /* 00E0 */  0x27, 0x28, 0x0B, 0x42, 0x0E, 0x06, 0x8A, 0x02,  // '(.B....
                    /* 00E8 */  0x3C, 0x09, 0xCF, 0xB1, 0x78, 0x01, 0xC2, 0x67,  // <...x..g
                    /* 00F0 */  0x4C, 0xA6, 0x1D, 0x23, 0x81, 0xCF, 0x04, 0x1E,  // L..#....
                    /* 00F8 */  0xE6, 0x31, 0x63, 0x47, 0x14, 0x2E, 0xE0, 0xF9,  // .1cG....
                    /* 0100 */  0x1C, 0x43, 0xE4, 0xB8, 0x87, 0x1A, 0xE3, 0x28,  // .C.....(
                    /* 0108 */  0x22, 0x3F, 0x08, 0x60, 0x05, 0x1D, 0x04, 0x90,  // "?.`....
                    /* 0110 */  0x38, 0xFF, 0xFF, 0xE3, 0x89, 0x76, 0xDA, 0xC1,  // 8....v..
                    /* 0118 */  0x42, 0xC7, 0x39, 0xBF, 0xD0, 0x18, 0xD1, 0xE3,  // B.9.....
                    /* 0120 */  0x40, 0xC9, 0x80, 0x90, 0x47, 0x01, 0x56, 0x61,  // @...G.Va
                    /* 0128 */  0x35, 0x91, 0x04, 0xBE, 0x07, 0x74, 0x76, 0x12,  // 5....tv.
                    /* 0130 */  0xD0, 0xA5, 0x21, 0x46, 0x6F, 0x08, 0xD2, 0x26,  // ..!Fo..&
                    /* 0138 */  0xC0, 0x96, 0x00, 0x6B, 0x02, 0x8C, 0xDD, 0x06,  // ...k....
                    /* 0140 */  0x08, 0xCA, 0xD1, 0x36, 0x87, 0x22, 0x84, 0x28,  // ...6.".(
                    /* 0148 */  0x21, 0xE2, 0x86, 0xAC, 0x11, 0x45, 0x10, 0x95,  // !....E..
                    /* 0150 */  0x41, 0x08, 0x35, 0x50, 0xD8, 0x28, 0xF1, 0x8D,  // A.5P.(..
                    /* 0158 */  0x13, 0x22, 0x48, 0x02, 0x8F, 0x1C, 0x77, 0x04,  // ."H...w.
                    /* 0160 */  0xF0, 0xD8, 0x0E, 0xE8, 0x04, 0x4F, 0xE9, 0x71,  // .....O.q
                    /* 0168 */  0xC1, 0x04, 0x9E, 0xF7, 0xC1, 0x1D, 0xEA, 0x21,  // .......!
                    /* 0170 */  0x1C, 0x70, 0xD4, 0x18, 0xC7, 0xF1, 0x4C, 0x40,  // .p....L@
                    /* 0178 */  0x16, 0x2E, 0x0D, 0x20, 0x8A, 0x04, 0x8F, 0x3A,  // ... ...:
                    /* 0180 */  0x32, 0xF8, 0x70, 0xE0, 0x41, 0x7A, 0x9E, 0x9E,  // 2.p.Az..
                    /* 0188 */  0x40, 0x90, 0x43, 0x38, 0x82, 0xC7, 0x86, 0xA7,  // @.C8....
                    /* 0190 */  0x02, 0x8F, 0x81, 0x5D, 0x17, 0x7C, 0x0E, 0xF0,  // ...].|..
                    /* 0198 */  0x31, 0x01, 0xEF, 0x1A, 0x50, 0xA3, 0x7E, 0x3A,  // 1...P.~:
                    /* 01A0 */  0x60, 0x93, 0x0E, 0x87, 0x19, 0xAE, 0x87, 0x1D,  // `.......
                    /* 01A8 */  0xEE, 0x04, 0x1E, 0x0E, 0x1E, 0x33, 0xF8, 0x91,  // .....3..
                    /* 01B0 */  0xC3, 0x83, 0xC3, 0xCD, 0xF0, 0x64, 0x8E, 0xAC,  // .....d..
                    /* 01B8 */  0x54, 0x01, 0x66, 0x4F, 0x08, 0x3A, 0x4D, 0xF8,  // T.fO.:M.
                    /* 01C0 */  0xCC, 0xC1, 0x6E, 0x00, 0xE7, 0xD3, 0x33, 0x24,  // ..n...3$
                    /* 01C8 */  0x91, 0x3F, 0x08, 0xD4, 0xC8, 0x0C, 0xED, 0x69,  // .?.....i
                    /* 01D0 */  0xBF, 0x7A, 0x18, 0xF2, 0xA1, 0xE0, 0xB0, 0x98,  // .z......
                    /* 01D8 */  0xD8, 0xB3, 0x07, 0x1D, 0x0F, 0xF8, 0xAF, 0x24,  // .......$
                    /* 01E0 */  0x0F, 0x1B, 0x9E, 0xBE, 0xE7, 0x6B, 0x82, 0x91,  // .....k..
                    /* 01E8 */  0x07, 0x8E, 0x1E, 0x88, 0xA1, 0x9F, 0x38, 0x0E,  // ......8.
                    /* 01F0 */  0xE3, 0x34, 0x7C, 0x09, 0xF1, 0x39, 0xE0, 0xFF,  // .4|..9..
                    /* 01F8 */  0x1F, 0x24, 0xC6, 0x31, 0x79, 0x70, 0x3C, 0xD8,  // .$.1yp<.
                    /* 0200 */  0xC8, 0xE9, 0x51, 0xC5, 0x47, 0x0A, 0x7E, 0xBE,  // ..Q.G.~.
                    /* 0208 */  0xF0, 0x91, 0x82, 0x5D, 0x10, 0x9E, 0x1C, 0x0C,  // ...]....
                    /* 0210 */  0x71, 0x38, 0x67, 0xE5, 0x13, 0x85, 0x0F, 0x2A,  // q8g....*
                    /* 0218 */  0xB8, 0x13, 0x05, 0x5C, 0x85, 0xE8, 0xE4, 0x36,  // ...\...6
                    /* 0220 */  0x61, 0xB4, 0x67, 0x81, 0xC7, 0x09, 0x98, 0x07,  // a.g.....
                    /* 0228 */  0x01, 0xF0, 0x8D, 0xDF, 0x07, 0x19, 0xB0, 0x4D,  // .......M
                    /* 0230 */  0x09, 0x3B, 0x24, 0x78, 0x47, 0x19, 0xE0, 0x71,  // .;$xG..q
                    /* 0238 */  0x32, 0xC1, 0x1D, 0x27, 0x3C, 0x04, 0x3E, 0x80,  // 2..'<.>.
                    /* 0240 */  0x87, 0x90, 0x93, 0xB4, 0xD2, 0xA9, 0x21, 0xCF,  // ......!.
                    /* 0248 */  0x3C, 0x60, 0x1B, 0x06, 0x57, 0x68, 0xD3, 0xA7,  // <`..Wh..
                    /* 0250 */  0x46, 0xA3, 0x56, 0x0D, 0xCA, 0xD4, 0x28, 0xD3,  // F.V...(.
                    /* 0258 */  0xA0, 0x56, 0x9F, 0x4A, 0x8D, 0x19, 0xFB, 0xE1,  // .V.J....
                    /* 0260 */  0x58, 0xDC, 0xBB, 0x40, 0x07, 0x03, 0x0B, 0x7B,  // X..@...{
                    /* 0268 */  0x21, 0xE8, 0x88, 0xE0, 0x58, 0x20, 0x34, 0x08,  // !...X 4.
                    /* 0270 */  0x9D, 0x40, 0xFC, 0xFF, 0x07                     // .@...
                })
            }

            Scope (\)
            {
                Name (GDSF, 0x1F)
                Name (CTG2, Zero)
            }

            Scope (\)
            {
                Name (INSM, Zero)
                Name (BCTP, Zero)
                Name (CPPL, 0x78)
                Name (CCPL, 0x50)
            }

            Scope (\_SB)
            {
                Device (GZFD)
                {
                    Name (_HID, "PNP0C14" /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
                    Name (_UID, "GMZN")  // _UID: Unique ID
                    Name (_WDG, Buffer (0x01CC)
                    {
                        /* 0000 */  0xE3, 0x54, 0x7B, 0x88, 0xDC, 0xDD, 0x2C, 0x4B,  // .T{...,K
                        /* 0008 */  0x8B, 0x88, 0x68, 0xA2, 0x6A, 0x88, 0x35, 0xD0,  // ..h.j.5.
                        /* 0010 */  0x41, 0x41, 0x01, 0x02, 0x49, 0x95, 0x54, 0x92,  // AA..I.T.
                        /* 0018 */  0xDE, 0x4B, 0x06, 0x4F, 0xAC, 0x04, 0xCE, 0x8B,  // .K.O....
                        /* 0020 */  0xF8, 0x98, 0xDB, 0xAA, 0x41, 0x42, 0x01, 0x02,  // ....AB..
                        /* 0028 */  0x77, 0xD7, 0xAF, 0x14, 0x6F, 0x10, 0x9B, 0x4C,  // w...o..L
                        /* 0030 */  0xB3, 0x34, 0xD3, 0x88, 0xDC, 0x78, 0x09, 0xBE,  // .4...x..
                        /* 0038 */  0x41, 0x43, 0x01, 0x02, 0xF1, 0x47, 0x75, 0xDA,  // AC...Gu.
                        /* 0040 */  0x4D, 0x82, 0x5F, 0x40, 0xBE, 0x79, 0xD9, 0x90,  // M._@.y..
                        /* 0048 */  0x3E, 0x29, 0xCE, 0xD7, 0x41, 0x44, 0x01, 0x02,  // >)..AD..
                        /* 0050 */  0x05, 0x88, 0x2A, 0xDC, 0x8C, 0x3A, 0xBA, 0x41,  // ..*..:.A
                        /* 0058 */  0xA6, 0xF7, 0x09, 0x2E, 0x00, 0x89, 0xCD, 0x3B,  // .......;
                        /* 0060 */  0x41, 0x45, 0x01, 0x02, 0x27, 0x91, 0x5B, 0x8C,  // AE..'.[.
                        /* 0068 */  0xD4, 0xEC, 0x57, 0x46, 0x98, 0x0F, 0x85, 0x10,  // ..WF....
                        /* 0070 */  0x19, 0xF9, 0x9C, 0xA5, 0x42, 0x41, 0x01, 0x02,  // ....BA..
                        /* 0078 */  0x0A, 0xCA, 0xF3, 0xB7, 0xDC, 0xAC, 0xD2, 0x42,  // .......B
                        /* 0080 */  0x92, 0x17, 0x77, 0xC6, 0xC6, 0x28, 0xFB, 0xD2,  // ..w..(..
                        /* 0088 */  0x41, 0x30, 0x0C, 0x01, 0xE2, 0x54, 0x7B, 0x88,  // A0...T{.
                        /* 0090 */  0xDC, 0xDD, 0x2C, 0x4B, 0x8B, 0x88, 0x68, 0xA2,  // ..,K..h.
                        /* 0098 */  0x6A, 0x88, 0x35, 0xD0, 0x41, 0x31, 0x02, 0x01,  // j.5.A1..
                        /* 00A0 */  0xD3, 0x7C, 0xA5, 0x93, 0xC6, 0xBB, 0xAB, 0x46,  // .|.....F
                        /* 00A8 */  0x95, 0x1D, 0x31, 0xF1, 0x7C, 0xC9, 0x68, 0xA0,  // ..1.|.h.
                        /* 00B0 */  0x41, 0x32, 0x12, 0x01, 0x6D, 0x2A, 0xFB, 0x87,  // A2..m*..
                        /* 00B8 */  0x02, 0xD8, 0xE7, 0x48, 0x92, 0x08, 0x45, 0x76,  // ...H..Ev
                        /* 00C0 */  0xC5, 0xF5, 0xC8, 0xD8, 0x41, 0x33, 0x02, 0x01,  // ....A3..
                        /* 00C8 */  0x84, 0xBD, 0xD5, 0x4D, 0xA9, 0x15, 0xE2, 0x47,  // ...M...G
                        /* 00D0 */  0xAD, 0x65, 0xCC, 0x61, 0xA5, 0xC6, 0x2F, 0xD0,  // .e.a../.
                        /* 00D8 */  0x41, 0x34, 0x06, 0x01, 0x81, 0x24, 0xD4, 0xBF,  // A4...$..
                        /* 00E0 */  0xE3, 0xAE, 0x01, 0x45, 0xA1, 0x07, 0xAF, 0xB6,  // ...E....
                        /* 00E8 */  0x84, 0x25, 0xC5, 0xF8, 0xD0, 0x00, 0x01, 0x08,  // .%......
                        /* 00F0 */  0x6B, 0x90, 0x62, 0xD0, 0xD4, 0x12, 0x10, 0x45,  // k.b....E
                        /* 00F8 */  0x99, 0x9D, 0x48, 0x31, 0xEE, 0x80, 0xE9, 0x85,  // ..H1....
                        /* 0100 */  0xD1, 0x00, 0x01, 0x08, 0x81, 0x24, 0xD4, 0xBF,  // .....$..
                        /* 0108 */  0xE3, 0xAE, 0x02, 0x45, 0xA1, 0x07, 0xAF, 0xB6,  // ...E....
                        /* 0110 */  0x84, 0x25, 0xC5, 0xF8, 0xE0, 0x00, 0x01, 0x08,  // .%......
                        /* 0118 */  0x35, 0xA4, 0x72, 0xBC, 0xC1, 0xE8, 0x75, 0x42,  // 5.r...uB
                        /* 0120 */  0xB3, 0xE2, 0xD8, 0xB8, 0x07, 0x4A, 0xBA, 0x59,  // .....J.Y
                        /* 0128 */  0xE1, 0x00, 0x01, 0x08, 0xD9, 0xC6, 0xAF, 0x10,  // ........
                        /* 0130 */  0x8B, 0xEA, 0x90, 0x45, 0xA2, 0xE7, 0x1C, 0xD3,  // ...E....
                        /* 0138 */  0xC8, 0x4B, 0xB4, 0xB1, 0xE2, 0x00, 0x01, 0x08,  // .K......
                        /* 0140 */  0x9E, 0x28, 0x20, 0xD3, 0xEA, 0x8F, 0xE0, 0x41,  // .( ....A
                        /* 0148 */  0x86, 0xF9, 0x61, 0x1D, 0x83, 0x15, 0x1B, 0x5F,  // ..a...._
                        /* 0150 */  0xE3, 0x00, 0x01, 0x08, 0x9E, 0x28, 0x20, 0xD3,  // .....( .
                        /* 0158 */  0xEA, 0x8F, 0xE1, 0x41, 0x86, 0xF9, 0x61, 0x1D,  // ...A..a.
                        /* 0160 */  0x83, 0x15, 0x1B, 0x5F, 0xE4, 0x00, 0x01, 0x08,  // ..._....
                        /* 0168 */  0x9E, 0x28, 0x20, 0xD3, 0xEA, 0x8F, 0xE0, 0x41,  // .( ....A
                        /* 0170 */  0x86, 0xF9, 0x71, 0x1D, 0x83, 0x15, 0x1B, 0x5F,  // ..q...._
                        /* 0178 */  0xE5, 0x00, 0x01, 0x08, 0x9E, 0x28, 0x20, 0xD3,  // .....( .
                        /* 0180 */  0xEA, 0x8F, 0xE0, 0x41, 0x86, 0xF9, 0x81, 0x1D,  // ...A....
                        /* 0188 */  0x83, 0x15, 0x1B, 0x5F, 0xE6, 0x00, 0x01, 0x08,  // ..._....
                        /* 0190 */  0x9E, 0x28, 0x20, 0xD3, 0xEA, 0x8F, 0xE0, 0x41,  // .( ....A
                        /* 0198 */  0x86, 0xF9, 0x91, 0x1D, 0x83, 0x15, 0x1B, 0x5F,  // ......._
                        /* 01A0 */  0xE7, 0x00, 0x01, 0x08, 0xA1, 0x91, 0x33, 0x1E,  // ......3.
                        /* 01A8 */  0x89, 0x2C, 0x4D, 0x46, 0x95, 0xD9, 0x30, 0x28,  // .,MF..0(
                        /* 01B0 */  0xB7, 0x2E, 0x7A, 0x33, 0xE8, 0x00, 0x01, 0x08,  // ..z3....
                        /* 01B8 */  0x21, 0x12, 0x90, 0x05, 0x66, 0xD5, 0xD1, 0x11,  // !...f...
                        /* 01C0 */  0xB2, 0xF0, 0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10,  // ......).
                        /* 01C8 */  0x44, 0x44, 0x01, 0x00                           // DD..
                    })
                    OperationRegion (ECMS, SystemIO, 0x72, 0x02)
                    Field (ECMS, ByteAcc, Lock, Preserve)
                    {
                        INDX,   8, 
                        DATA,   8
                    }

                    Method (RECM, 1, Serialized)
                    {
                        INDX = Arg0
                        Return (DATA) /* \_SB_.GZFD.DATA */
                    }

                    Method (WECM, 2, Serialized)
                    {
                        INDX = Arg0
                        DATA = Arg1
                    }

                    Name (COC0, Buffer (0x24)
                    {
                         0x00                                             // .
                    })
                    CreateDWordField (COC0, Zero, TUNE)
                    CreateDWordField (COC0, 0x04, CDEV)
                    CreateDWordField (COC0, 0x08, COCV)
                    CreateDWordField (COC0, 0x0C, CMIN)
                    CreateDWordField (COC0, 0x10, CMAX)
                    CreateDWordField (COC0, 0x14, CSCV)
                    CreateDWordField (COC0, 0x18, COCO)
                    CreateDWordField (COC0, 0x1C, CNOC)
                    CreateDWordField (COC0, 0x20, CDET)
                    Method (WQA0, 1, NotSerialized)
                    {
                        If ((Arg0 == Zero))
                        {
                            TUNE = 0x1D
                            CDEV = 0x30
                            COCV = ACR1 /* \ACR1 */
                            CMIN = 0x2A
                            CMAX = 0x36
                            CSCV = One
                            COCO = 0x07
                            CNOC = 0x0C
                            CDET = 0xC8
                            Return (COC0) /* \_SB_.GZFD.COC0 */
                        }

                        If ((Arg0 == One))
                        {
                            TUNE = 0x1E
                            CDEV = 0x2F
                            COCV = ACR2 /* \ACR2 */
                            CMIN = 0x2A
                            CMAX = 0x36
                            CSCV = One
                            COCO = 0x08
                            CNOC = 0x0B
                            CDET = 0xC8
                            Return (COC0) /* \_SB_.GZFD.COC0 */
                        }

                        If ((Arg0 == 0x02))
                        {
                            TUNE = 0x1F
                            CDEV = 0x2E
                            COCV = ACR3 /* \ACR3 */
                            CMIN = 0x2A
                            CMAX = 0x36
                            CSCV = One
                            COCO = 0x09
                            CNOC = 0x0A
                            CDET = 0xC8
                            Return (COC0) /* \_SB_.GZFD.COC0 */
                        }

                        If ((Arg0 == 0x03))
                        {
                            TUNE = 0x20
                            CDEV = 0x2D
                            COCV = ACR4 /* \ACR4 */
                            CMIN = 0x2A
                            CMAX = 0x36
                            CSCV = One
                            COCO = 0x0A
                            CNOC = 0x09
                            CDET = 0xC8
                            Return (COC0) /* \_SB_.GZFD.COC0 */
                        }

                        If ((Arg0 == 0x04))
                        {
                            TUNE = 0x2A
                            CDEV = 0x2C
                            COCV = ACR5 /* \ACR5 */
                            CMIN = 0x2A
                            CMAX = 0x36
                            CSCV = One
                            COCO = 0x0B
                            CNOC = 0x08
                            CDET = 0xC8
                            Return (COC0) /* \_SB_.GZFD.COC0 */
                        }

                        If ((Arg0 == 0x05))
                        {
                            TUNE = 0x2B
                            CDEV = 0x2B
                            COCV = ACR6 /* \ACR6 */
                            CMIN = 0x2A
                            CMAX = 0x36
                            CSCV = One
                            COCO = 0x0C
                            CNOC = 0x07
                            CDET = 0xC8
                            Return (COC0) /* \_SB_.GZFD.COC0 */
                        }

                        If ((Arg0 == 0x06))
                        {
                            TUNE = 0x60
                            CDEV = 0x2A
                            COCV = ACR7 /* \ACR7 */
                            CMIN = 0x2A
                            CMAX = 0x36
                            CSCV = One
                            COCO = 0x0D
                            CNOC = 0x06
                            CDET = 0xC8
                            Return (COC0) /* \_SB_.GZFD.COC0 */
                        }

                        If ((Arg0 == 0x07))
                        {
                            TUNE = 0x61
                            CDEV = 0x29
                            COCV = ACR8 /* \ACR8 */
                            CMIN = 0x2A
                            CMAX = 0x36
                            CSCV = One
                            COCO = 0x0E
                            CNOC = 0x05
                            CDET = 0xC8
                            Return (COC0) /* \_SB_.GZFD.COC0 */
                        }

                        If ((Arg0 == 0x08))
                        {
                            TUNE = 0x22
                            CDEV = Zero
                            If ((CVOP == One))
                            {
                                COCV = (Zero - CVOT) /* \CVOT */
                            }
                            Else
                            {
                                COCV = CVOT /* \CVOT */
                            }

                            CMIN = 0xFFFFFFFFFFFFFF60
                            CMAX = 0xA0
                            CSCV = One
                            COCO = 0x03
                            CNOC = 0x10
                            CDET = 0xC8
                            Return (COC0) /* \_SB_.GZFD.COC0 */
                        }

                        If ((Arg0 == 0x09))
                        {
                            TUNE = 0x72
                            CDEV = Zero
                            COCV = AROT /* \AROT */
                            CMIN = Zero
                            CMAX = 0x1F
                            CSCV = One
                            COCO = 0x12
                            CNOC = One
                            CDET = 0xC8
                            Return (COC0) /* \_SB_.GZFD.COC0 */
                        }

                        If ((Arg0 == 0x0A))
                        {
                            TUNE = 0x4C
                            CDEV = 0x24
                            COCV = CARO /* \CARO */
                            CMIN = 0x24
                            CMAX = 0x36
                            CSCV = One
                            COCO = 0x11
                            CNOC = 0x02
                            CDET = 0xC8
                            Return (COC0) /* \_SB_.GZFD.COC0 */
                        }

                        If ((Arg0 == 0x0B))
                        {
                            TUNE = 0x4F
                            CDEV = Zero
                            If ((CAVP == One))
                            {
                                COCV = (Zero - CAVO) /* \CAVO */
                            }
                            Else
                            {
                                COCV = CAVO /* \CAVO */
                            }

                            CMIN = 0xFFFFFFFFFFFFFF60
                            CMAX = 0xA0
                            CSCV = One
                            COCO = 0x04
                            CNOC = 0x0F
                            CDET = 0xC8
                            Return (COC0) /* \_SB_.GZFD.COC0 */
                        }
                    }

                    Method (FTOI, 2, NotSerialized)
                    {
                        Name (OCVI, Zero)
                        Name (NORP, Zero)
                        Name (REMA, Zero)
                        Name (MANT, Zero)
                        Name (INDE, Zero)
                        Name (SHFT, Zero)
                        Name (RESU, Zero)
                        OCVI = Arg0
                        NORP = Arg1
                        Divide (OCVI, 0x02, REMA, OCVI) /* \_SB_.GZFD.FTOI.OCVI */
                        While ((OCVI != Zero))
                        {
                            REMA <<= INDE /* \_SB_.GZFD.FTOI.INDE */
                            MANT += REMA /* \_SB_.GZFD.FTOI.REMA */
                            INDE += One
                            Divide (OCVI, 0x02, REMA, OCVI) /* \_SB_.GZFD.FTOI.OCVI */
                        }

                        SHFT = (0x17 - INDE) /* \_SB_.GZFD.FTOI.INDE */
                        MANT <<= SHFT /* \_SB_.GZFD.FTOI.SHFT */
                        RESU |= MANT /* \_SB_.GZFD.FTOI.MANT */
                        INDE += 0x7F
                        INDE <<= 0x17
                        RESU |= INDE /* \_SB_.GZFD.FTOI.INDE */
                        If ((NORP == One))
                        {
                            RESU |= 0x80000000
                        }

                        Return (RESU) /* \_SB_.GZFD.FTOI.RESU */
                    }

                    Name (GOC0, Buffer (0x2C)
                    {
                         0x00                                             // .
                    })
                    CreateDWordField (GOC0, Zero, GPST)
                    CreateDWordField (GOC0, 0x04, GOCI)
                    CreateDWordField (GOC0, 0x08, GDEV)
                    CreateDWordField (GOC0, 0x0C, GOCV)
                    CreateDWordField (GOC0, 0x10, GMIN)
                    CreateDWordField (GOC0, 0x14, GMAX)
                    CreateDWordField (GOC0, 0x18, GSCV)
                    CreateDWordField (GOC0, 0x1C, GOCO)
                    CreateDWordField (GOC0, 0x20, GNOC)
                    CreateDWordField (GOC0, 0x24, GDET)
                    CreateDWordField (GOC0, 0x28, GCAP)
                    Name (GOC1, Buffer (0x2C)
                    {
                         0x00                                             // .
                    })
                    CreateDWordField (GOC1, Zero, MPST)
                    CreateDWordField (GOC1, 0x04, MOCI)
                    CreateDWordField (GOC1, 0x08, MDEV)
                    CreateDWordField (GOC1, 0x0C, MOCV)
                    CreateDWordField (GOC1, 0x10, MMIN)
                    CreateDWordField (GOC1, 0x14, MMAX)
                    CreateDWordField (GOC1, 0x18, MSCV)
                    CreateDWordField (GOC1, 0x1C, MOCO)
                    CreateDWordField (GOC1, 0x20, MNOC)
                    CreateDWordField (GOC1, 0x24, MDET)
                    CreateDWordField (GOC1, 0x28, MCAP)
                    Method (WQA1, 1, NotSerialized)
                    {
                        If ((Arg0 == Zero))
                        {
                            GPST = Zero
                            GOCI = Zero
                            GDEV = Zero
                            If ((GCCO == Zero))
                            {
                                GOCV = Zero
                            }
                            Else
                            {
                                GOCV = FTOI (GCCO, GCOP)
                            }

                            GMIN = Zero
                            GMAX = 0x43160000
                            GSCV = One
                            GOCO = Zero
                            GNOC = Zero
                            GDET = Zero
                            GCAP = Zero
                            Return (GOC0) /* \_SB_.GZFD.GOC0 */
                        }

                        If ((Arg0 == One))
                        {
                            MPST = Zero
                            MOCI = One
                            MDEV = Zero
                            If ((GVCO == Zero))
                            {
                                MOCV = Zero
                            }
                            Else
                            {
                                MOCV = FTOI (GVCO, GVOP)
                            }

                            MMIN = Zero
                            MMAX = 0x43960000
                            MSCV = One
                            MOCO = Zero
                            MNOC = Zero
                            MDET = Zero
                            MCAP = One
                            Return (GOC1) /* \_SB_.GZFD.GOC1 */
                        }
                    }

                    Name (WTL1, Package (0x12)
                    {
                        Package (0x02)
                        {
                            "League of Legends.exe", 
                            "0"
                        }, 

                        Package (0x02)
                        {
                            "LeagueClient.exe", 
                            "0"
                        }, 

                        Package (0x02)
                        {
                            "dota2.exe", 
                            "0"
                        }, 

                        Package (0x02)
                        {
                            "csgo.exe", 
                            "0"
                        }, 

                        Package (0x02)
                        {
                            "TslGame.exe", 
                            "0"
                        }, 

                        Package (0x02)
                        {
                            "FortniteClient-Win64-Shipping.exe", 
                            "0"
                        }, 

                        Package (0x02)
                        {
                            "RainbowSix.exe", 
                            "0"
                        }, 

                        Package (0x02)
                        {
                            "SOTTR.exe", 
                            "0"
                        }, 

                        Package (0x02)
                        {
                            "FarCryNewDawn.exe", 
                            "0"
                        }, 

                        Package (0x02)
                        {
                            "ACOdyssey.exe", 
                            "0"
                        }, 

                        Package (0x02)
                        {
                            "RDR2.exe", 
                            "0"
                        }, 

                        Package (0x02)
                        {
                            "MetroExodus.exe", 
                            "0"
                        }, 

                        Package (0x02)
                        {
                            "bfv.exe", 
                            "0"
                        }, 

                        Package (0x02)
                        {
                            "F1_2020.exe", 
                            "0"
                        }, 

                        Package (0x02)
                        {
                            "Cyberpunk2077.exe", 
                            "0"
                        }, 

                        Package (0x02)
                        {
                            "GTA5.exe", 
                            "0"
                        }, 

                        Package (0x02)
                        {
                            "Overwatch.exe", 
                            "0"
                        }, 

                        Package (0x02)
                        {
                            "ACValhalla.exe", 
                            "0"
                        }
                    })
                    Name (WTL2, Package (0x12)
                    {
                        Package (0x02)
                        {
                            "League of Legends.exe", 
                            "1"
                        }, 

                        Package (0x02)
                        {
                            "LeagueClient.exe", 
                            "1"
                        }, 

                        Package (0x02)
                        {
                            "dota2.exe", 
                            "1"
                        }, 

                        Package (0x02)
                        {
                            "csgo.exe", 
                            "1"
                        }, 

                        Package (0x02)
                        {
                            "TslGame.exe", 
                            "1"
                        }, 

                        Package (0x02)
                        {
                            "FortniteClient-Win64-Shipping.exe", 
                            "1"
                        }, 

                        Package (0x02)
                        {
                            "RainbowSix.exe", 
                            "4"
                        }, 

                        Package (0x02)
                        {
                            "SOTTR.exe", 
                            "1"
                        }, 

                        Package (0x02)
                        {
                            "FarCryNewDawn.exe", 
                            "4"
                        }, 

                        Package (0x02)
                        {
                            "ACOdyssey.exe", 
                            "4"
                        }, 

                        Package (0x02)
                        {
                            "RDR2.exe", 
                            "2"
                        }, 

                        Package (0x02)
                        {
                            "MetroExodus.exe", 
                            "2"
                        }, 

                        Package (0x02)
                        {
                            "bfv.exe", 
                            "4"
                        }, 

                        Package (0x02)
                        {
                            "F1_2020.exe", 
                            "2"
                        }, 

                        Package (0x02)
                        {
                            "Cyberpunk2077.exe", 
                            "2"
                        }, 

                        Package (0x02)
                        {
                            "GTA5.exe", 
                            "1"
                        }, 

                        Package (0x02)
                        {
                            "Overwatch.exe", 
                            "3"
                        }, 

                        Package (0x02)
                        {
                            "ACValhalla.exe", 
                            "3"
                        }
                    })
                    Method (WQA2, 1, NotSerialized)
                    {
                        If (((MCSK == 0x02) || (MCSK == 0x04)))
                        {
                            If ((GTYP == 0x02))
                            {
                                If ((Arg0 == Zero))
                                {
                                    Return (DerefOf (WTL2 [Zero]))
                                }

                                If ((Arg0 == One))
                                {
                                    Return (DerefOf (WTL2 [One]))
                                }

                                If ((Arg0 == 0x02))
                                {
                                    Return (DerefOf (WTL2 [0x02]))
                                }

                                If ((Arg0 == 0x03))
                                {
                                    Return (DerefOf (WTL2 [0x03]))
                                }

                                If ((Arg0 == 0x04))
                                {
                                    Return (DerefOf (WTL2 [0x04]))
                                }

                                If ((Arg0 == 0x05))
                                {
                                    Return (DerefOf (WTL2 [0x05]))
                                }

                                If ((Arg0 == 0x06))
                                {
                                    Return (DerefOf (WTL2 [0x06]))
                                }

                                If ((Arg0 == 0x07))
                                {
                                    Return (DerefOf (WTL2 [0x07]))
                                }

                                If ((Arg0 == 0x08))
                                {
                                    Return (DerefOf (WTL2 [0x08]))
                                }

                                If ((Arg0 == 0x09))
                                {
                                    Return (DerefOf (WTL2 [0x09]))
                                }

                                If ((Arg0 == 0x0A))
                                {
                                    Return (DerefOf (WTL2 [0x0A]))
                                }

                                If ((Arg0 == 0x0B))
                                {
                                    Return (DerefOf (WTL2 [0x0B]))
                                }

                                If ((Arg0 == 0x0C))
                                {
                                    Return (DerefOf (WTL2 [0x0C]))
                                }

                                If ((Arg0 == 0x0D))
                                {
                                    Return (DerefOf (WTL2 [0x0D]))
                                }

                                If ((Arg0 == 0x0E))
                                {
                                    Return (DerefOf (WTL2 [0x0E]))
                                }

                                If ((Arg0 == 0x0F))
                                {
                                    Return (DerefOf (WTL2 [0x0F]))
                                }

                                If ((Arg0 == 0x10))
                                {
                                    Return (DerefOf (WTL2 [0x10]))
                                }

                                If ((Arg0 == 0x11))
                                {
                                    Return (DerefOf (WTL2 [0x11]))
                                }
                            }
                            Else
                            {
                                If ((Arg0 == Zero))
                                {
                                    Return (DerefOf (WTL1 [Zero]))
                                }

                                If ((Arg0 == One))
                                {
                                    Return (DerefOf (WTL1 [One]))
                                }

                                If ((Arg0 == 0x02))
                                {
                                    Return (DerefOf (WTL1 [0x02]))
                                }

                                If ((Arg0 == 0x03))
                                {
                                    Return (DerefOf (WTL1 [0x03]))
                                }

                                If ((Arg0 == 0x04))
                                {
                                    Return (DerefOf (WTL1 [0x04]))
                                }

                                If ((Arg0 == 0x05))
                                {
                                    Return (DerefOf (WTL1 [0x05]))
                                }

                                If ((Arg0 == 0x06))
                                {
                                    Return (DerefOf (WTL1 [0x06]))
                                }

                                If ((Arg0 == 0x07))
                                {
                                    Return (DerefOf (WTL1 [0x07]))
                                }

                                If ((Arg0 == 0x08))
                                {
                                    Return (DerefOf (WTL1 [0x08]))
                                }

                                If ((Arg0 == 0x09))
                                {
                                    Return (DerefOf (WTL1 [0x09]))
                                }

                                If ((Arg0 == 0x0A))
                                {
                                    Return (DerefOf (WTL1 [0x0A]))
                                }

                                If ((Arg0 == 0x0B))
                                {
                                    Return (DerefOf (WTL1 [0x0B]))
                                }

                                If ((Arg0 == 0x0C))
                                {
                                    Return (DerefOf (WTL1 [0x0C]))
                                }

                                If ((Arg0 == 0x0D))
                                {
                                    Return (DerefOf (WTL1 [0x0D]))
                                }

                                If ((Arg0 == 0x0E))
                                {
                                    Return (DerefOf (WTL1 [0x0E]))
                                }

                                If ((Arg0 == 0x0F))
                                {
                                    Return (DerefOf (WTL1 [0x0F]))
                                }

                                If ((Arg0 == 0x10))
                                {
                                    Return (DerefOf (WTL1 [0x10]))
                                }

                                If ((Arg0 == 0x11))
                                {
                                    Return (DerefOf (WTL1 [0x11]))
                                }
                            }
                        }
                        Else
                        {
                            If ((Arg0 == Zero))
                            {
                                Return (DerefOf (WTL1 [Zero]))
                            }

                            If ((Arg0 == One))
                            {
                                Return (DerefOf (WTL1 [One]))
                            }

                            If ((Arg0 == 0x02))
                            {
                                Return (DerefOf (WTL1 [0x02]))
                            }

                            If ((Arg0 == 0x03))
                            {
                                Return (DerefOf (WTL1 [0x03]))
                            }

                            If ((Arg0 == 0x04))
                            {
                                Return (DerefOf (WTL1 [0x04]))
                            }

                            If ((Arg0 == 0x05))
                            {
                                Return (DerefOf (WTL1 [0x05]))
                            }

                            If ((Arg0 == 0x06))
                            {
                                Return (DerefOf (WTL1 [0x06]))
                            }

                            If ((Arg0 == 0x07))
                            {
                                Return (DerefOf (WTL1 [0x07]))
                            }

                            If ((Arg0 == 0x08))
                            {
                                Return (DerefOf (WTL1 [0x08]))
                            }

                            If ((Arg0 == 0x09))
                            {
                                Return (DerefOf (WTL1 [0x09]))
                            }

                            If ((Arg0 == 0x0A))
                            {
                                Return (DerefOf (WTL1 [0x0A]))
                            }

                            If ((Arg0 == 0x0B))
                            {
                                Return (DerefOf (WTL1 [0x0B]))
                            }

                            If ((Arg0 == 0x0C))
                            {
                                Return (DerefOf (WTL1 [0x0C]))
                            }

                            If ((Arg0 == 0x0D))
                            {
                                Return (DerefOf (WTL1 [0x0D]))
                            }

                            If ((Arg0 == 0x0E))
                            {
                                Return (DerefOf (WTL1 [0x0E]))
                            }

                            If ((Arg0 == 0x0F))
                            {
                                Return (DerefOf (WTL1 [0x0F]))
                            }

                            If ((Arg0 == 0x10))
                            {
                                Return (DerefOf (WTL1 [0x10]))
                            }

                            If ((Arg0 == 0x11))
                            {
                                Return (DerefOf (WTL1 [0x11]))
                            }
                        }
                    }

                    Method (WMAA, 3, NotSerialized)
                    {
                        If ((Arg1 == 0x04))
                        {
                            If ((GTYP == 0x05))
                            {
                                Return (Zero)
                            }
                            Else
                            {
                                Return (0x03)
                            }
                        }

                        If ((Arg1 == 0x0B))
                        {
                            Return (0x0D)
                        }

                        If ((Arg1 == 0x0C))
                        {
                            Return (Zero)
                        }

                        If ((Arg1 == 0x0D))
                        {
                            If ((ToInteger (Arg2) == One))
                            {
                                ^^PC00.LPCB.EC0.NCMD (0x59, 0x70)
                            }
                            Else
                            {
                                ^^PC00.LPCB.EC0.NCMD (0x59, 0x76)
                            }
                        }

                        If ((Arg1 == 0x0E))
                        {
                            Return (Zero)
                        }

                        If ((Arg1 == 0x0F))
                        {
                            Return (Zero)
                        }

                        If ((Arg1 == 0x10))
                        {
                            Return (Zero)
                        }

                        If ((Arg1 == 0x12))
                        {
                            Return (Zero)
                        }

                        If ((Arg1 == 0x13))
                        {
                            Return (Zero)
                        }

                        If ((Arg1 == 0x14))
                        {
                            If (^^PC00.LPCB.EC0.ECAV)
                            {
                                If ((Acquire (^^PC00.LPCB.EC0.LFCM, 0xA000) == Zero))
                                {
                                    If ((^^PC00.LPCB.EC0.FCST & One))
                                    {
                                        Release (^^PC00.LPCB.EC0.LFCM)
                                        Return (One)
                                    }

                                    Release (^^PC00.LPCB.EC0.LFCM)
                                    Return (Zero)
                                }
                            }
                        }

                        If ((Arg1 == 0x15))
                        {
                            Return (One)
                        }

                        If ((Arg1 == 0x16))
                        {
                            If ((ToInteger (Arg2) == One))
                            {
                                ^^PC00.LPCB.EC0.NCMD (0x59, 0x78)
                            }
                            Else
                            {
                                ^^PC00.LPCB.EC0.NCMD (0x59, 0x79)
                            }
                        }

                        If ((Arg1 == 0x17))
                        {
                            If (^^PC00.LPCB.EC0.ECAV)
                            {
                                If ((Acquire (^^PC00.LPCB.EC0.LFCM, 0xA000) == Zero))
                                {
                                    If ((^^PC00.LPCB.EC0.GDST & 0x02))
                                    {
                                        Release (^^PC00.LPCB.EC0.LFCM)
                                        Return (One)
                                    }

                                    Release (^^PC00.LPCB.EC0.LFCM)
                                    Return (Zero)
                                }
                            }
                        }

                        If ((Arg1 == 0x18))
                        {
                            Return (One)
                        }

                        If ((Arg1 == 0x19))
                        {
                            If ((ToInteger (Arg2) == One))
                            {
                                ^^PC00.LPCB.EC0.NCMD (0x59, 0x7B)
                            }
                            Else
                            {
                                ^^PC00.LPCB.EC0.NCMD (0x59, 0x7A)
                            }
                        }

                        If ((Arg1 == 0x1A))
                        {
                            If (^^PC00.LPCB.EC0.ECAV)
                            {
                                If ((Acquire (^^PC00.LPCB.EC0.LFCM, 0xA000) == Zero))
                                {
                                    If ((^^PC00.LPCB.EC0.GDST & 0x04))
                                    {
                                        Release (^^PC00.LPCB.EC0.LFCM)
                                        Return (One)
                                    }

                                    Release (^^PC00.LPCB.EC0.LFCM)
                                    Return (Zero)
                                }
                            }
                        }

                        If ((Arg1 == 0x1D))
                        {
                            Return (Zero)
                        }

                        If ((Arg1 == 0x1E))
                        {
                            Local1 = Zero
                            Local1 |= 0xF000
                            Local1 |= 0x04
                            Local1 |= 0x10
                            Local1 |= 0x40
                            Return (Local1)
                        }

                        If ((Arg1 == 0x1F))
                        {
                            Local1 = 0x0C80
                            Local2 = 0x0C80
                            Local1 |= (Local2 << 0x10)
                            Return (Local1)
                        }

                        If ((Arg1 == 0x20))
                        {
                            Return (Zero)
                        }

                        If ((Arg1 == 0x21))
                        {
                            Return (Zero)
                        }

                        If ((Arg1 == 0x22))
                        {
                            Return (Zero)
                        }

                        If ((Arg1 == 0x23))
                        {
                            If ((^^PC00.LPCB.EC0.KBLT == One))
                            {
                                Return (0x04)
                            }
                            Else
                            {
                                Return (0xF0)
                            }
                        }

                        If ((Arg1 == 0x24))
                        {
                            If (^^PC00.LPCB.EC0.ECAV)
                            {
                                If ((Acquire (^^PC00.LPCB.EC0.LFCM, 0xA000) == Zero))
                                {
                                    If ((ToInteger (Arg2) == One))
                                    {
                                        ^^PC00.LPCB.EC0.KLOR = One
                                        ^^PC00.LPCB.EC0.KLCH = One
                                    }
                                    Else
                                    {
                                        ^^PC00.LPCB.EC0.KLOR = Zero
                                        ^^PC00.LPCB.EC0.KLCH = One
                                    }

                                    Release (^^PC00.LPCB.EC0.LFCM)
                                    Return (Zero)
                                }
                            }
                        }

                        If ((Arg1 == 0x25))
                        {
                            If (^^PC00.LPCB.EC0.ECAV)
                            {
                                If ((Acquire (^^PC00.LPCB.EC0.LFCM, 0xA000) == Zero))
                                {
                                    Local1 = ^^PC00.LPCB.EC0.KLOR /* \_SB_.PC00.LPCB.EC0_.KLOR */
                                    Release (^^PC00.LPCB.EC0.LFCM)
                                    Return (Local1)
                                }
                            }
                        }

                        If ((Arg1 == 0x26))
                        {
                            If (^^PC00.LPCB.EC0.ECAV)
                            {
                                If ((Acquire (^^PC00.LPCB.EC0.LFCM, 0xA000) == Zero))
                                {
                                    Local1 = Zero
                                    Release (^^PC00.LPCB.EC0.LFCM)
                                    Return (Local1)
                                }
                            }
                        }

                        If ((Arg1 == 0x27))
                        {
                            If (^^PC00.LPCB.EC0.ECAV)
                            {
                                If ((Acquire (^^PC00.LPCB.EC0.LFCM, 0xA000) == Zero))
                                {
                                    Local1 = Zero
                                    Release (^^PC00.LPCB.EC0.LFCM)
                                    Return (Local1)
                                }
                            }
                        }

                        If ((Arg1 == 0x28))
                        {
                            Return (0x02)
                        }

                        If ((Arg1 == 0x29))
                        {
                            If (^^PC00.LPCB.EC0.ECAV)
                            {
                                If ((Acquire (^^PC00.LPCB.EC0.LFCM, 0xA000) == Zero))
                                {
                                    If ((^^PC00.LPCB.EC0.MSMF == One))
                                    {
                                        Local1 = One
                                    }
                                    ElseIf ((^^PC00.LPCB.EC0.MSMF == Zero))
                                    {
                                        Local1 = Zero
                                    }

                                    Release (^^PC00.LPCB.EC0.LFCM)
                                    Return (Local1)
                                }
                            }
                        }

                        If ((Arg1 == 0x2A))
                        {
                            If ((ToInteger (Arg2) == One))
                            {
                                SMBB = 0x26
                                SMBA = 0xCA
                            }
                            ElseIf ((ToInteger (Arg2) == Zero))
                            {
                                SMBB = 0x25
                                SMBA = 0xCA
                            }

                            Return (Zero)
                        }

                        If ((Arg1 == 0x2B))
                        {
                            Return (0x04)
                        }

                        If ((Arg1 == 0x2C))
                        {
                            If (^^PC00.LPCB.EC0.ECAV)
                            {
                                If ((Acquire (^^PC00.LPCB.EC0.LFCM, 0xA000) == Zero))
                                {
                                    If ((ToInteger (Arg2) == One))
                                    {
                                        ^^PC00.LPCB.EC0.CTMD = Zero
                                        ^^PC00.LPCB.EC0.CAC1 = Zero
                                        If ((^^PC00.LPCB.EC0.SPMO != 0x02))
                                        {
                                            ^^PC00.LPCB.EC0.SSFM = One
                                        }

                                        ^^PC00.LPCB.EC0.SPMO = 0x02
                                        ODV1 = 0x02
                                        LTGP = Zero
                                        ^^PC00.LPCB.EC0.PABD = Zero
                                        DTGP = Zero
                                    }
                                    ElseIf ((ToInteger (Arg2) == 0x02))
                                    {
                                        ^^PC00.LPCB.EC0.CTMD = Zero
                                        ^^PC00.LPCB.EC0.CAC1 = Zero
                                        If ((^^PC00.LPCB.EC0.SPMO != Zero))
                                        {
                                            ^^PC00.LPCB.EC0.SSFM = One
                                        }

                                        ^^PC00.LPCB.EC0.SPMO = Zero
                                        ODV1 = Zero
                                        LTGP = Zero
                                        ^^PC00.LPCB.EC0.PABD = Zero
                                        DTGP = Zero
                                    }
                                    ElseIf ((ToInteger (Arg2) == 0x03))
                                    {
                                        ^^PC00.LPCB.EC0.CTMD = Zero
                                        ^^PC00.LPCB.EC0.CAC1 = Zero
                                        If (((^^PC00.LPCB.EC0.ADPT == Zero) || (^^PC00.LPCB.EC0.ACTY () == 0x02)))
                                        {
                                            If ((^^PC00.LPCB.EC0.SPMO != Zero))
                                            {
                                                ^^PC00.LPCB.EC0.SSFM = One
                                            }

                                            ^^PC00.LPCB.EC0.SPMO = Zero
                                            ODV1 = One
                                            Sleep (0x05)
                                            Notify (IETM, 0x88) // Device-Specific
                                            Sleep (0x05)
                                            ODV1 = Zero
                                            Notify (IETM, 0x88) // Device-Specific
                                            LTGP = Zero
                                            ^^PC00.LPCB.EC0.PABD = One
                                            DTGP = Zero
                                        }
                                        Else
                                        {
                                            If ((^^PC00.LPCB.EC0.SPMO != One))
                                            {
                                                ^^PC00.LPCB.EC0.SSFM = One
                                            }

                                            ^^PC00.LPCB.EC0.SPMO = One
                                            ODV1 = Zero
                                            Sleep (0x05)
                                            Notify (IETM, 0x88) // Device-Specific
                                            Sleep (0x05)
                                            ODV1 = One
                                            Notify (IETM, 0x88) // Device-Specific
                                            LTGP = One
                                            ^^PC00.LPCB.EC0.PABD = Zero
                                            DTGP = One
                                        }
                                    }
                                    ElseIf ((ToInteger (Arg2) == 0xFF))
                                    {
                                        ^^PC00.LPCB.EC0.CTMD = One
                                        If (((^^PC00.LPCB.EC0.ADPT == Zero) || (^^PC00.LPCB.EC0.ACTY () == 0x02)))
                                        {
                                            ^^PC00.LPCB.EC0.CAC1 = Zero
                                        }
                                        Else
                                        {
                                            ^^PC00.LPCB.EC0.CAC1 = One
                                        }

                                        If (((^^PC00.LPCB.EC0.ADPT == Zero) || (^^PC00.LPCB.EC0.ACTY () == 0x02)))
                                        {
                                            If ((^^PC00.LPCB.EC0.SPMO != Zero))
                                            {
                                                ^^PC00.LPCB.EC0.SSFM = One
                                            }

                                            ^^PC00.LPCB.EC0.SPMO = Zero
                                            ODV1 = One
                                            Sleep (0x05)
                                            Notify (IETM, 0x88) // Device-Specific
                                            Sleep (0x05)
                                            ODV1 = Zero
                                            Notify (IETM, 0x88) // Device-Specific
                                            LTGP = Zero
                                            ^^PC00.LPCB.EC0.PABD = One
                                            DTGP = Zero
                                        }
                                        Else
                                        {
                                            If ((^^PC00.LPCB.EC0.SPMO != One))
                                            {
                                                ^^PC00.LPCB.EC0.SSFM = One
                                            }

                                            ^^PC00.LPCB.EC0.SPMO = One
                                            ODV1 = Zero
                                            Sleep (0x05)
                                            Notify (IETM, 0x88) // Device-Specific
                                            Sleep (0x05)
                                            ODV1 = One
                                            Notify (IETM, 0x88) // Device-Specific
                                            LTGP = One
                                            ^^PC00.LPCB.EC0.PABD = Zero
                                            DTGP = One
                                        }
                                    }

                                    Sleep (0x05)
                                    Notify (GZFD, 0xE7) // Hardware-Specific
                                    BCTP = Zero
                                    INSM = Zero
                                    Notify (NPCF, 0xC0) // Hardware-Specific
                                    Notify (IETM, 0x88) // Device-Specific
                                    Release (^^PC00.LPCB.EC0.LFCM)
                                    Return (Zero)
                                }
                            }
                        }

                        If ((Arg1 == 0x2D))
                        {
                            If (^^PC00.LPCB.EC0.ECAV)
                            {
                                If ((Acquire (^^PC00.LPCB.EC0.LFCM, 0xA000) == Zero))
                                {
                                    If ((^^PC00.LPCB.EC0.CTMD == One))
                                    {
                                        Local1 = 0xFF
                                    }
                                    ElseIf ((^^PC00.LPCB.EC0.SPMO == 0x02))
                                    {
                                        Local1 = One
                                    }
                                    ElseIf ((^^PC00.LPCB.EC0.SPMO == Zero))
                                    {
                                        If ((^^PC00.LPCB.EC0.PABD == One))
                                        {
                                            Local1 = 0x03
                                        }
                                        Else
                                        {
                                            Local1 = 0x02
                                        }
                                    }
                                    ElseIf ((^^PC00.LPCB.EC0.SPMO == One))
                                    {
                                        Local1 = 0x03
                                    }

                                    Release (^^PC00.LPCB.EC0.LFCM)
                                    Return (Local1)
                                }
                            }
                        }

                        If ((Arg1 == 0x2E))
                        {
                            If (^^PC00.LPCB.EC0.ECAV)
                            {
                                If ((Acquire (^^PC00.LPCB.EC0.LFCM, 0xA000) == Zero))
                                {
                                    If ((^^PC00.LPCB.EC0.GSFS == One))
                                    {
                                        Local1 = One
                                    }
                                    ElseIf ((^^PC00.LPCB.EC0.GSFS == Zero))
                                    {
                                        Local1 = 0x02
                                    }

                                    Release (^^PC00.LPCB.EC0.LFCM)
                                    Return (Local1)
                                }
                            }
                        }

                        If ((Arg1 == 0x2F))
                        {
                            If (^^PC00.LPCB.EC0.ECAV)
                            {
                                If ((Acquire (^^PC00.LPCB.EC0.LFCM, 0xA000) == Zero))
                                {
                                    If ((^^PC00.LPCB.EC0.ACTY () == One))
                                    {
                                        Local1 = One
                                        ODV4 = One
                                    }
                                    Else
                                    {
                                        Local1 = 0x02
                                        ODV4 = Zero
                                    }

                                    Notify (IETM, 0x88) // Device-Specific
                                    Release (^^PC00.LPCB.EC0.LFCM)
                                    Return (Local1)
                                }
                            }
                        }

                        If ((Arg1 == 0x30))
                        {
                            Return (0x64)
                        }

                        If ((Arg1 == 0x31))
                        {
                            If ((PANT & 0x02))
                            {
                                Return (One)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        If ((Arg1 == 0x32))
                        {
                            If ((PANT & 0x02))
                            {
                                If ((GGOV (0x080F0004) == One))
                                {
                                    Return (One)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        If ((Arg1 == 0x33))
                        {
                            If ((PANT & 0x02))
                            {
                                If ((ToInteger (Arg2) == One))
                                {
                                    WECM (0x7F, One)
                                    SGOV (0x080F0004, One)
                                }
                                Else
                                {
                                    WECM (0x7F, Zero)
                                    SGOV (0x080F0004, Zero)
                                }
                            }
                            Else
                            {
                                WECM (0x7F, Zero)
                                SGOV (0x080F0004, Zero)
                            }

                            Return (Zero)
                        }

                        If ((Arg1 == 0x34))
                        {
                            If (^^PC00.LPCB.EC0.ECAV)
                            {
                                If ((Acquire (^^PC00.LPCB.EC0.LFCM, 0xA000) == Zero))
                                {
                                    ^^PC00.LPCB.EC0.LCON = ToInteger (Arg2)
                                    Release (^^PC00.LPCB.EC0.LFCM)
                                    Return (Zero)
                                }
                            }
                        }

                        If ((Arg1 == 0x35))
                        {
                            Return (Zero)
                        }

                        If ((Arg1 == 0x36))
                        {
                            If ((ToInteger (Arg2) == One))
                            {
                                Return (Zero)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        If ((Arg1 == 0x37))
                        {
                            If (^^PC00.LPCB.EC0.ECAV)
                            {
                                If ((Acquire (^^PC00.LPCB.EC0.LFCM, 0xA000) == Zero))
                                {
                                    If ((^^PC00.LPCB.EC0.SPMO == 0x02))
                                    {
                                        Local1 = One
                                    }
                                    ElseIf ((^^PC00.LPCB.EC0.SPMO == Zero))
                                    {
                                        Local1 = 0x02
                                    }
                                    ElseIf ((^^PC00.LPCB.EC0.SPMO == One))
                                    {
                                        Local1 = 0x03
                                    }

                                    Release (^^PC00.LPCB.EC0.LFCM)
                                    Return (Local1)
                                }
                            }
                        }

                        If ((Arg1 == 0x38))
                        {
                            If (^^PC00.LPCB.EC0.ECAV)
                            {
                                If ((Acquire (^^PC00.LPCB.EC0.LFCM, 0xA000) == Zero))
                                {
                                    If ((OCCS == Zero))
                                    {
                                        Local1 = Zero
                                    }
                                    ElseIf (((COCC == One) && (GOCC == One)))
                                    {
                                        Local1 = 0x03
                                    }
                                    ElseIf ((COCC == One))
                                    {
                                        Local1 = One
                                    }
                                    ElseIf ((GOCC == One))
                                    {
                                        Local1 = 0x02
                                    }
                                    Else
                                    {
                                        Local1 = Zero
                                    }

                                    Release (^^PC00.LPCB.EC0.LFCM)
                                    Return (Local1)
                                }
                            }
                        }

                        If ((Arg1 == 0x39))
                        {
                            If (^^PC00.LPCB.EC0.ECAV)
                            {
                                If ((^^PC00.LPCB.EC0.SPMO == Zero))
                                {
                                    INSM = ToInteger (Arg2)
                                    If (((MCSK == 0x02) || (MCSK == 0x04)))
                                    {
                                        If ((GTYP == 0x02))
                                        {
                                            If ((INSM == Zero))
                                            {
                                                ^^PC00.LPCB.EC0.NCMD (0x8B, Zero)
                                                BCTP = Zero
                                                DTGP = Zero
                                                LTGP = Zero
                                                ODV1 = Zero
                                            }
                                            ElseIf ((INSM == One))
                                            {
                                                ^^PC00.LPCB.EC0.NCMD (0x8A, Zero)
                                                BCTP = One
                                                ODV1 = One
                                            }
                                            ElseIf ((INSM == 0x02))
                                            {
                                                ^^PC00.LPCB.EC0.NCMD (0x8A, Zero)
                                                BCTP = One
                                                ODV1 = 0x03
                                            }
                                            ElseIf ((INSM == 0x03))
                                            {
                                                ^^PC00.LPCB.EC0.NCMD (0x8A, Zero)
                                                BCTP = One
                                                ODV1 = 0x04
                                            }
                                            ElseIf ((INSM == 0x04))
                                            {
                                                ^^PC00.LPCB.EC0.NCMD (0x8A, Zero)
                                                BCTP = One
                                                ODV1 = 0x05
                                            }
                                            ElseIf ((INSM == 0x05))
                                            {
                                                ^^PC00.LPCB.EC0.NCMD (0x8B, Zero)
                                                BCTP = Zero
                                                DTGP = Zero
                                                LTGP = Zero
                                                ODV1 = 0x06
                                            }
                                            Else
                                            {
                                                ^^PC00.LPCB.EC0.NCMD (0x8B, Zero)
                                                BCTP = Zero
                                                DTGP = Zero
                                                LTGP = Zero
                                                ODV1 = Zero
                                            }
                                        }
                                        ElseIf ((INSM == Zero))
                                        {
                                            ^^PC00.LPCB.EC0.NCMD (0x8B, Zero)
                                            BCTP = Zero
                                            DTGP = Zero
                                            LTGP = Zero
                                            ODV1 = Zero
                                        }
                                        ElseIf ((INSM == One))
                                        {
                                            ^^PC00.LPCB.EC0.NCMD (0x8A, Zero)
                                            BCTP = One
                                            ODV1 = One
                                        }
                                    }
                                    ElseIf ((INSM == Zero))
                                    {
                                        ^^PC00.LPCB.EC0.NCMD (0x8B, Zero)
                                        BCTP = Zero
                                        DTGP = Zero
                                        LTGP = Zero
                                        ODV1 = Zero
                                    }
                                    ElseIf ((INSM == One))
                                    {
                                        ^^PC00.LPCB.EC0.NCMD (0x8A, Zero)
                                        BCTP = One
                                        ODV1 = One
                                    }

                                    Notify (IETM, 0x88) // Device-Specific
                                    Notify (NPCF, 0xC0) // Hardware-Specific
                                }

                                Return (Zero)
                            }
                        }

                        If ((Arg1 == 0x3A))
                        {
                            If (^^PC00.LPCB.EC0.ECAV)
                            {
                                Local1 = INSM /* \INSM */
                                Return (Local1)
                            }
                        }

                        If ((Arg1 == 0x3B))
                        {
                            Return (One)
                        }

                        If ((Arg1 == 0x3C))
                        {
                            Local1 = CMSP /* \CMSP */
                            If ((OCCS == Zero))
                            {
                                Local2 = CMSP /* \CMSP */
                            }
                            ElseIf (((COCC == One) && (PVSD == 0x09)))
                            {
                                Local3 = ACR1 /* \ACR1 */
                                Local3 *= 0x64
                                Local2 = Local3
                            }
                            Else
                            {
                                Local2 = CMSP /* \CMSP */
                            }

                            Local1 = (Local2 | (Local1 << 0x10))
                            Return (Local1)
                        }

                        If ((Arg1 == 0x3D))
                        {
                            If (^^PC00.LPCB.EC0.ECAV)
                            {
                                If (((MCSK == 0x02) || (MCSK == 0x04)))
                                {
                                    If ((GTYP == 0x02))
                                    {
                                        Local1 = 0x06
                                    }
                                    Else
                                    {
                                        Local1 = 0x02
                                    }
                                }
                                Else
                                {
                                    Local1 = 0x02
                                }
                            }
                        }

                        If ((Arg1 == 0x3E))
                        {
                            If (^^PC00.LPCB.EC0.ECAV)
                            {
                                If ((^^PC00.LPCB.EC0.ACTY () == One))
                                {
                                    Local1 = One
                                }
                                Else
                                {
                                    Local1 = Zero
                                }

                                Return (Local1)
                            }
                        }
                    }

                    Method (WMAB, 3, NotSerialized)
                    {
                        If ((Arg1 == One))
                        {
                            If (^^PC00.LPCB.EC0.ECAV)
                            {
                                If ((Acquire (^^PC00.LPCB.EC0.LFCM, 0xA000) == Zero))
                                {
                                    Local0 = ^^PC00.LPCB.EC0.FCST /* \_SB_.PC00.LPCB.EC0_.FCST */
                                    Release (^^PC00.LPCB.EC0.LFCM)
                                    Return (Local0)
                                }
                            }
                        }

                        If ((Arg1 == 0x02))
                        {
                            If (^^PC00.LPCB.EC0.ECAV)
                            {
                                If ((Acquire (^^PC00.LPCB.EC0.LFCM, 0xA000) == Zero))
                                {
                                    If ((ToInteger (Arg2) == Zero))
                                    {
                                        ^^PC00.LPCB.EC0.NCMD (0x59, 0x76)
                                    }

                                    If ((ToInteger (Arg2) == One))
                                    {
                                        ^^PC00.LPCB.EC0.NCMD (0x59, 0x70)
                                    }

                                    Release (^^PC00.LPCB.EC0.LFCM)
                                }
                            }
                        }

                        If ((Arg1 == 0x07))
                        {
                            If ((ToInteger (Arg2) == Zero))
                            {
                                Local0 = (^^PC00.LPCB.EC0.FANS * 0x64)
                                Return (Local0)
                            }

                            If ((ToInteger (Arg2) == One))
                            {
                                Local0 = (^^PC00.LPCB.EC0.FA2S * 0x64)
                                Return (Local0)
                            }
                        }

                        If ((Arg1 == 0x08))
                        {
                            If ((ToInteger (Arg2) == 0x03))
                            {
                                Return (^^PC00.LPCB.EC0.CPUT) /* \_SB_.PC00.LPCB.EC0_.CPUT */
                            }

                            If ((ToInteger (Arg2) == 0x04))
                            {
                                Return (^^PC00.LPCB.EC0.GPUT) /* \_SB_.PC00.LPCB.EC0_.GPUT */
                            }

                            Return (Zero)
                        }
                    }

                    Method (WMAC, 3, NotSerialized)
                    {
                        OperationRegion (CUPL, SystemMemory, (^^PC00.GMHB () + 0x59A0), 0x10)
                        Field (CUPL, ByteAcc, NoLock, Preserve)
                        {
                            CPL2,   15, 
                            Offset (0x04), 
                            CPL1,   15
                        }

                        If ((Arg1 == One))
                        {
                            Return (Zero)
                        }

                        If ((Arg1 == 0x03))
                        {
                            If ((CPL1 == Zero))
                            {
                                CPL1 = 0x87
                            }

                            Name (STPL, Buffer (0x10)
                            {
                                 0x00                                             // .
                            })
                            CreateDWordField (STPL, Zero, TPL1)
                            CreateDWordField (STPL, 0x04, STP1)
                            CreateDWordField (STPL, 0x08, NTPL)
                            CreateDWordField (STPL, 0x0C, XTPL)
                            TPL1 = CPL1 /* \_SB_.GZFD.WMAC.CPL1 */
                            STP1 = One
                            NTPL = 0x0A
                            XTPL = 0x87
                            Return (STPL) /* \_SB_.GZFD.WMAC.STPL */
                        }

                        If ((Arg1 == 0x04))
                        {
                            Local0 = ToInteger (Arg2)
                            Local0 *= 0x08
                            CPL1 = Local0
                            Notify (IETM, 0x88) // Device-Specific
                        }

                        If ((Arg1 == 0x05))
                        {
                            Name (LTPL, Buffer (0x10)
                            {
                                 0x00                                             // .
                            })
                            CreateDWordField (LTPL, Zero, TPL2)
                            CreateDWordField (LTPL, 0x04, STP2)
                            CreateDWordField (LTPL, 0x08, NLP2)
                            CreateDWordField (LTPL, 0x0C, XLP2)
                            TPL2 = CPL2 /* \_SB_.GZFD.WMAC.CPL2 */
                            STP2 = One
                            NLP2 = 0x0A
                            XLP2 = 0x5A
                            Return (LTPL) /* \_SB_.GZFD.WMAC.LTPL */
                        }

                        If ((Arg1 == 0x06))
                        {
                            Local0 = ToInteger (Arg2)
                            Local0 *= 0x08
                            CPL2 = Local0
                        }
                    }

                    Method (WMAD, 3, NotSerialized)
                    {
                        If ((Arg1 == One))
                        {
                            If (^^PC00.LPCB.EC0.ECAV)
                            {
                                If ((Acquire (^^PC00.LPCB.EC0.LFCM, 0xA000) == Zero))
                                {
                                    If ((ToInteger (Arg2) == One))
                                    {
                                        Release (^^PC00.LPCB.EC0.LFCM)
                                        Return (Zero)
                                    }
                                    ElseIf (((GTYP == 0x05) || (OCCS == Zero)))
                                    {
                                        Release (^^PC00.LPCB.EC0.LFCM)
                                        Return (Zero)
                                    }
                                    ElseIf ((GOCC == One))
                                    {
                                        Release (^^PC00.LPCB.EC0.LFCM)
                                        Return (0x13)
                                    }
                                    Else
                                    {
                                        Release (^^PC00.LPCB.EC0.LFCM)
                                        Return (0x10)
                                    }
                                }
                            }
                        }

                        If ((Arg1 == 0x02))
                        {
                            CreateByteField (Arg2, Zero, GGOM)
                            CreateByteField (Arg2, One, GOCS)
                            If ((ToInteger (GGOM) != One))
                            {
                                If ((ToInteger (GGOM) == 0x02)) {}
                                ElseIf ((ToInteger (GGOM) == 0x03)) {}
                                ElseIf ((ToInteger (GGOM) == 0xFF)) {}
                                If ((ToInteger (GOCS) == One))
                                {
                                    If ((^^PC00.LPCB.EC0.ADPT == One))
                                    {
                                        OCCS = One
                                        GOCC = One
                                        SMBB = 0x11
                                        SMBA = 0xCB
                                    }
                                }
                                Else
                                {
                                    GOCC = Zero
                                    SMBB = 0x10
                                    SMBA = 0xCB
                                }
                            }
                            Else
                            {
                                If ((ToInteger (GGOM) == One)) {}
                                GOCC = Zero
                                SMBB = 0x10
                                SMBA = 0xCB
                            }
                        }

                        If ((Arg1 == 0x03))
                        {
                            Name (GPPL, Buffer (0x10)
                            {
                                 0x00                                             // .
                            })
                            CreateDWordField (GPPL, Zero, PPAB)
                            CreateDWordField (GPPL, 0x04, STP3)
                            CreateDWordField (GPPL, 0x08, NPPL)
                            CreateDWordField (GPPL, 0x0C, XPPL)
                            PPAB = CPPL /* \CPPL */
                            STP3 = 0x05
                            NPPL = Zero
                            XPPL = 0x0F
                            Return (GPPL) /* \_SB_.GZFD.WMAD.GPPL */
                        }

                        If ((Arg1 == 0x04))
                        {
                            Local0 = ToInteger (Arg2)
                            CPPL = (Local0 * 0x08)
                            Notify (NPCF, 0xC0) // Hardware-Specific
                        }

                        If ((Arg1 == 0x05))
                        {
                            If ((One == GTYP))
                            {
                                CTG2 = 0x0118
                            }
                            ElseIf ((0x02 == GTYP))
                            {
                                CTG2 = 0x0118
                            }
                            ElseIf ((0x03 == GTYP))
                            {
                                CTG2 = 0x50
                            }
                            ElseIf ((0x04 == GTYP))
                            {
                                CTG2 = 0xA0
                            }
                            ElseIf ((0x05 == GTYP))
                            {
                                CTG2 = 0xA0
                            }
                            ElseIf ((0x06 == GTYP))
                            {
                                CTG2 = 0xA0
                            }
                            ElseIf ((0x07 == GTYP))
                            {
                                CTG2 = 0xA0
                            }

                            If ((CCPL == Zero))
                            {
                                CCPL = CTG2 /* \CTG2 */
                            }

                            Name (CGPL, Buffer (0x10)
                            {
                                 0x00                                             // .
                            })
                            CreateDWordField (CGPL, Zero, CTGL)
                            CreateDWordField (CGPL, 0x04, STP4)
                            CreateDWordField (CGPL, 0x08, NTGP)
                            CreateDWordField (CGPL, 0x0C, XTGP)
                            Divide (CTG2, 0x08, Local1, Local0)
                            Divide (CCPL, 0x08, Local3, Local2)
                            CTGL = Local2
                            STP4 = 0x05
                            NTGP = Zero
                            XTGP = Local0
                            Return (CGPL) /* \_SB_.GZFD.WMAD.CGPL */
                        }

                        If ((Arg1 == 0x06))
                        {
                            Local0 = ToInteger (Arg2)
                            CCPL = (Local0 * 0x08)
                            Notify (NPCF, 0xC0) // Hardware-Specific
                        }
                    }

                    Method (WMAE, 3, NotSerialized)
                    {
                        If ((Arg1 == One))
                        {
                            Name (CGDT, Buffer (0x02)
                            {
                                 0x00                                             // .
                            })
                            CreateByteField (CGDT, Zero, CTDT)
                            CreateByteField (CGDT, One, GTDT)
                            CTDT = Zero
                            GTDT = One
                            Return (CGDT) /* \_SB_.GZFD.WMAE.CGDT */
                        }

                        If ((Arg1 == 0x02))
                        {
                            Return (0x00010007)
                        }

                        If ((Arg1 == 0x03))
                        {
                            Return (0x3E)
                        }

                        If ((Arg1 == 0x04))
                        {
                            If (^^PC00.LPCB.EC0.ECAV)
                            {
                                If ((Acquire (^^PC00.LPCB.EC0.LFCM, 0xA000) == Zero))
                                {
                                    ^^PC00.LPCB.EC0.CTMD = ToInteger (Arg2)
                                    If (((^^PC00.LPCB.EC0.ADPT == Zero) || (^^PC00.LPCB.EC0.ACTY () == 0x02)))
                                    {
                                        ^^PC00.LPCB.EC0.SPMO = Zero
                                        ^^PC00.LPCB.EC0.CAC1 = Zero
                                    }
                                    Else
                                    {
                                        ^^PC00.LPCB.EC0.SPMO = ToInteger (Arg2)
                                        ^^PC00.LPCB.EC0.CAC1 = ToInteger (Arg2)
                                    }

                                    Release (^^PC00.LPCB.EC0.LFCM)
                                }
                            }

                            ODV5 = ToInteger (Arg2)
                            Notify (IETM, 0x88) // Device-Specific
                        }

                        If ((Arg1 == 0x05))
                        {
                            If ((PANT & 0x04))
                            {
                                If ((PANT & 0x20))
                                {
                                    Return (0x1C)
                                }
                                Else
                                {
                                    Return (0x18)
                                }
                            }
                            ElseIf ((PANT & 0x20))
                            {
                                Return (0x0C)
                            }
                            Else
                            {
                                Return (0x08)
                            }
                        }

                        If ((Arg1 == 0x06))
                        {
                            Return (GDSF) /* \GDSF */
                        }

                        If ((Arg1 == 0x07))
                        {
                            GDSF = ToInteger (Arg2)
                            Return (Zero)
                        }

                        If ((Arg1 == 0x08))
                        {
                            Return (One)
                        }
                    }

                    Method (WMBA, 3, NotSerialized)
                    {
                        Name (CSCB, Buffer (0x02)
                        {
                             0x00                                             // .
                        })
                        CreateByteField (CSCB, Zero, CST1)
                        CreateByteField (CSCB, One, CBL1)
                        If ((Arg1 == One))
                        {
                            If ((ToInteger (Arg2) == Zero))
                            {
                                WECM (0x62, One)
                                CST1 = ^^PC00.LPCB.EC0.KBST /* \_SB_.PC00.LPCB.EC0_.KBST */
                                CBL1 = ^^PC00.LPCB.EC0.KBBL /* \_SB_.PC00.LPCB.EC0_.KBBL */
                                Return (CSCB) /* \_SB_.GZFD.WMBA.CSCB */
                            }
                            ElseIf ((ToInteger (Arg2) == 0x03))
                            {
                                WECM (0x62, 0x02)
                                CST1 = ^^PC00.LPCB.EC0.YLST /* \_SB_.PC00.LPCB.EC0_.YLST */
                                CBL1 = ^^PC00.LPCB.EC0.YLBL /* \_SB_.PC00.LPCB.EC0_.YLBL */
                                Return (CSCB) /* \_SB_.GZFD.WMBA.CSCB */
                            }
                            ElseIf ((ToInteger (Arg2) == 0x05))
                            {
                                WECM (0x62, 0x03)
                                CST1 = ^^PC00.LPCB.EC0.ICST /* \_SB_.PC00.LPCB.EC0_.ICST */
                                CBL1 = ^^PC00.LPCB.EC0.ICBL /* \_SB_.PC00.LPCB.EC0_.ICBL */
                                Return (CSCB) /* \_SB_.GZFD.WMBA.CSCB */
                            }
                            Else
                            {
                                WECM (0x62, 0x08)
                                Return (Zero)
                            }
                        }

                        If ((Arg1 == 0x02))
                        {
                            CreateByteField (Arg2, Zero, LTI2)
                            CreateByteField (Arg2, One, CST2)
                            CreateByteField (Arg2, 0x02, CBL2)
                            If ((ToInteger (LTI2) == Zero))
                            {
                                WECM (0x62, 0x04)
                                ^^PC00.LPCB.EC0.KBST = ToInteger (CST2)
                                ^^PC00.LPCB.EC0.KBBL = ToInteger (CBL2)
                                ^^PC00.LPCB.EC0.APON = One
                                Return (Zero)
                            }
                            ElseIf ((ToInteger (LTI2) == 0x03))
                            {
                                WECM (0x62, 0x05)
                                ^^PC00.LPCB.EC0.YLST = ToInteger (CST2)
                                ^^PC00.LPCB.EC0.YLBL = ToInteger (CBL2)
                                ^^PC00.LPCB.EC0.APON = One
                                Return (Zero)
                            }
                            ElseIf ((ToInteger (LTI2) == 0x05))
                            {
                                WECM (0x62, 0x06)
                                ^^PC00.LPCB.EC0.ICST = ToInteger (CST2)
                                ^^PC00.LPCB.EC0.ICBL = ToInteger (CBL2)
                                ^^PC00.LPCB.EC0.APON = One
                                Return (Zero)
                            }
                            Else
                            {
                                WECM (0x62, 0x07)
                                Return (Zero)
                            }
                        }
                    }

                    Name (FACT, Buffer (0x22)
                    {
                         0x00                                             // .
                    })
                    CreateByteField (FACT, Zero, FNID)
                    CreateDWordField (FACT, One, FNLE)
                    CreateWordField (FACT, 0x05, FNSP)
                    CreateByteField (FACT, 0x07, SEID)
                    CreateDWordField (FACT, 0x08, STLE)
                    CreateWordField (FACT, 0x0C, SSTM)
                    CreateWordField (FACT, 0x0E, FDMA)
                    CreateWordField (FACT, 0x10, FCMA)
                    CreateWordField (FACT, 0x12, FDMI)
                    CreateWordField (FACT, 0x14, FCMI)
                    CreateWordField (FACT, 0x16, FSST)
                    CreateWordField (FACT, 0x18, MAST)
                    CreateWordField (FACT, 0x1A, MIST)
                    CreateWordField (FACT, 0x1C, STST)
                    Method (WQA3, 1, NotSerialized)
                    {
                        If ((Arg0 == Zero))
                        {
                            FNID = Zero
                            FCMA = 0x1194
                            FDMI = 0x1130
                            Return (FACT) /* \_SB_.GZFD.FACT */
                        }

                        If ((Arg0 == One))
                        {
                            FNID = One
                            Return (FACT) /* \_SB_.GZFD.FACT */
                        }
                    }

                    Name (LTDA, Buffer (0x07)
                    {
                         0x00                                             // .
                    })
                    CreateByteField (LTDA, Zero, LTID)
                    CreateByteField (LTDA, One, COTI)
                    CreateByteField (LTDA, 0x02, LTTP)
                    CreateByteField (LTDA, 0x03, STTN)
                    CreateByteField (LTDA, 0x04, DFST)
                    CreateByteField (LTDA, 0x05, BNLE)
                    CreateByteField (LTDA, 0x06, DBNL)
                    Method (WQA4, 1, NotSerialized)
                    {
                        If ((^^PC00.LPCB.EC0.STYP == One))
                        {
                            If ((Arg0 == Zero))
                            {
                                LTID = Zero
                                COTI = Zero
                                LTTP = One
                                STTN = 0x06
                                DFST = Zero
                                BNLE = 0x04
                                DBNL = 0x03
                                Return (LTDA) /* \_SB_.GZFD.LTDA */
                            }

                            If ((Arg0 == One))
                            {
                                LTID = One
                                COTI = Zero
                                LTTP = One
                                STTN = 0x06
                                DFST = Zero
                                BNLE = 0x04
                                DBNL = 0x03
                                Return (LTDA) /* \_SB_.GZFD.LTDA */
                            }

                            If ((Arg0 == 0x02))
                            {
                                LTID = 0x02
                                COTI = Zero
                                LTTP = One
                                STTN = 0x06
                                DFST = Zero
                                BNLE = 0x04
                                DBNL = 0x03
                                Return (LTDA) /* \_SB_.GZFD.LTDA */
                            }

                            If ((Arg0 == 0x03))
                            {
                                LTID = 0x03
                                COTI = Zero
                                LTTP = One
                                STTN = 0x04
                                DFST = Zero
                                BNLE = 0x04
                                DBNL = 0x03
                                Return (LTDA) /* \_SB_.GZFD.LTDA */
                            }

                            If ((Arg0 == 0x04))
                            {
                                LTID = 0x04
                                COTI = 0x02
                                LTTP = One
                                STTN = 0x04
                                DFST = One
                                BNLE = Zero
                                DBNL = Zero
                                Return (LTDA) /* \_SB_.GZFD.LTDA */
                            }

                            If ((Arg0 == 0x05))
                            {
                                LTID = 0x05
                                COTI = One
                                LTTP = Zero
                                STTN = 0x02
                                DFST = One
                                BNLE = Zero
                                DBNL = Zero
                                Return (LTDA) /* \_SB_.GZFD.LTDA */
                            }
                        }
                        Else
                        {
                            If ((^^PC00.LPCB.EC0.STYP == 0x02))
                            {
                                If ((Arg0 == Zero))
                                {
                                    LTID = Zero
                                    COTI = One
                                    LTTP = Zero
                                    STTN = 0x02
                                    DFST = One
                                    BNLE = 0x03
                                    DBNL = One
                                    Return (LTDA) /* \_SB_.GZFD.LTDA */
                                }
                            }
                            ElseIf ((^^PC00.LPCB.EC0.STYP == 0x03))
                            {
                                If ((Arg0 == Zero))
                                {
                                    LTID = Zero
                                    COTI = Zero
                                    LTTP = One
                                    STTN = 0x05
                                    DFST = Zero
                                    BNLE = 0x04
                                    DBNL = 0x03
                                    Return (LTDA) /* \_SB_.GZFD.LTDA */
                                }
                            }

                            If ((Arg0 == One))
                            {
                                LTID = One
                                COTI = Zero
                                LTTP = Zero
                                STTN = Zero
                                DFST = Zero
                                BNLE = Zero
                                DBNL = Zero
                                Return (LTDA) /* \_SB_.GZFD.LTDA */
                            }

                            If ((Arg0 == 0x02))
                            {
                                LTID = 0x02
                                COTI = Zero
                                LTTP = Zero
                                STTN = Zero
                                DFST = Zero
                                BNLE = Zero
                                DBNL = Zero
                                Return (LTDA) /* \_SB_.GZFD.LTDA */
                            }

                            If ((Arg0 == 0x03))
                            {
                                LTID = 0x03
                                COTI = One
                                LTTP = Zero
                                STTN = 0x02
                                DFST = One
                                BNLE = Zero
                                DBNL = Zero
                                Return (LTDA) /* \_SB_.GZFD.LTDA */
                            }

                            If ((Arg0 == 0x04))
                            {
                                LTID = 0x04
                                COTI = One
                                LTTP = Zero
                                STTN = 0x04
                                DFST = One
                                BNLE = Zero
                                DBNL = Zero
                                Return (LTDA) /* \_SB_.GZFD.LTDA */
                            }

                            If ((Arg0 == 0x05))
                            {
                                LTID = 0x05
                                COTI = Zero
                                LTTP = Zero
                                STTN = Zero
                                DFST = Zero
                                BNLE = Zero
                                DBNL = Zero
                                Return (LTDA) /* \_SB_.GZFD.LTDA */
                            }
                        }
                    }

                    Method (_WED, 1, NotSerialized)  // _Wxx: Wake Event, xx=0x00-0xFF
                    {
                        If ((Arg0 == 0xD0))
                        {
                            If (^^PC00.LPCB.EC0.ECAV)
                            {
                                If ((Acquire (^^PC00.LPCB.EC0.LFCM, 0xA000) == Zero))
                                {
                                    Local1 = ^^PC00.LPCB.EC0.GUST /* \_SB_.PC00.LPCB.EC0_.GUST */
                                    ^^PC00.LPCB.EC0.GUST = Zero
                                    Release (^^PC00.LPCB.EC0.LFCM)
                                    Return (Local1)
                                }
                            }
                        }

                        If ((Arg0 == 0xD1))
                        {
                            Return (0xFF)
                        }

                        If ((Arg0 == 0xD1))
                        {
                            Return (Zero)
                        }

                        If ((Arg0 == 0xE2))
                        {
                            If (^^PC00.LPCB.EC0.ECAV)
                            {
                                If ((Acquire (^^PC00.LPCB.EC0.LFCM, 0xA000) == Zero))
                                {
                                    Local2 = Zero
                                    If (((^^PC00.LPCB.EC0.GDST & 0x02) == 0x02))
                                    {
                                        Local2 |= One
                                    }

                                    If (((^^PC00.LPCB.EC0.GDST & 0x04) == 0x04))
                                    {
                                        Local2 |= 0x02
                                    }

                                    Release (^^PC00.LPCB.EC0.LFCM)
                                    Return (Local2)
                                }
                            }
                        }

                        Name (FANQ, Package (0x02)
                        {
                            One, 
                            0x04
                        })
                        Name (FANB, Package (0x02)
                        {
                            0x02, 
                            0x04
                        })
                        Name (FANP, Package (0x02)
                        {
                            0x03, 
                            0x04
                        })
                        If ((Arg0 == 0xE3))
                        {
                            If (^^PC00.LPCB.EC0.ECAV)
                            {
                                If ((Acquire (^^PC00.LPCB.EC0.LFCM, 0xA000) == Zero))
                                {
                                    If ((^^PC00.LPCB.EC0.SPMO == 0x02))
                                    {
                                        Return (FANQ) /* \_SB_.GZFD._WED.FANQ */
                                    }
                                    ElseIf ((^^PC00.LPCB.EC0.SPMO == Zero))
                                    {
                                        Return (FANB) /* \_SB_.GZFD._WED.FANB */
                                    }
                                    ElseIf ((^^PC00.LPCB.EC0.SPMO == One))
                                    {
                                        Return (FANP) /* \_SB_.GZFD._WED.FANP */
                                    }

                                    Release (^^PC00.LPCB.EC0.LFCM)
                                }
                            }
                        }

                        If ((Arg0 == 0xE4))
                        {
                            If (^^PC00.LPCB.EC0.ECAV)
                            {
                                If ((Acquire (^^PC00.LPCB.EC0.LFCM, 0xA000) == Zero))
                                {
                                    Local1 = Zero
                                    Release (^^PC00.LPCB.EC0.LFCM)
                                    Return (Local1)
                                }
                            }
                        }

                        If ((Arg0 == 0xE5))
                        {
                            If (^^PC00.LPCB.EC0.ECAV)
                            {
                                If ((Acquire (^^PC00.LPCB.EC0.LFCM, 0xA000) == Zero))
                                {
                                    If ((^^PC00.LPCB.EC0.ACTY () == One))
                                    {
                                        Local1 = One
                                        ODV4 = One
                                    }
                                    Else
                                    {
                                        Local1 = 0x02
                                        ODV4 = Zero
                                    }

                                    Notify (IETM, 0x88) // Device-Specific
                                    Release (^^PC00.LPCB.EC0.LFCM)
                                    Return (Local1)
                                }
                            }
                        }

                        If ((Arg0 == 0xE6))
                        {
                            Return (One)
                        }

                        If ((Arg0 == 0xE7))
                        {
                            If (^^PC00.LPCB.EC0.ECAV)
                            {
                                If ((Acquire (^^PC00.LPCB.EC0.LFCM, 0xA000) == Zero))
                                {
                                    If ((^^PC00.LPCB.EC0.SPMO == 0x02))
                                    {
                                        Local1 = One
                                    }
                                    ElseIf ((^^PC00.LPCB.EC0.SPMO == Zero))
                                    {
                                        Local1 = 0x02
                                    }
                                    ElseIf ((^^PC00.LPCB.EC0.SPMO == One))
                                    {
                                        Local1 = 0x03
                                    }

                                    Release (^^PC00.LPCB.EC0.LFCM)
                                    Return (Local1)
                                }
                            }
                        }

                        If ((Arg0 == 0xE8))
                        {
                            If (((LSKD == 0x13) || (LSKD == 0x14)))
                            {
                                Local1 = Zero
                            }
                            ElseIf (((LSKD == 0x15) || (LSKD == 0x16)))
                            {
                                Local1 = One
                            }
                            ElseIf ((((LSKD == 0x17) || (LSKD == 0x18)) || ((
                                LSKD == 0x19) || (LSKD == 0x25))))
                            {
                                Local1 = 0x02
                            }
                            ElseIf ((LSKD == 0x26))
                            {
                                Local1 = 0x03
                            }
                            ElseIf ((((LSKD == 0x1A) || (LSKD == 0x1B)) || ((
                                LSKD == 0x1C) || (LSKD == 0x1D))))
                            {
                                Local1 = 0x03
                            }
                            ElseIf ((((LSKD == 0x1E) || (LSKD == 0x1F)) || ((
                                LSKD == 0x20) || (LSKD == 0x21))))
                            {
                                Local1 = 0x03
                            }
                            ElseIf ((((LSKD == 0x22) || (LSKD == 0x23)) || 0x24))
                            {
                                Local1 = 0x03
                            }

                            Return (Local1)
                        }
                    }

                    Name (WQDD, Buffer (0x4D6D)
                    {
                        /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                        /* 0008 */  0x5D, 0x4D, 0x00, 0x00, 0xC0, 0xFC, 0x01, 0x00,  // ]M......
                        /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                        /* 0018 */  0x28, 0xA5, 0xB6, 0x01, 0x01, 0x08, 0x09, 0x42,  // (......B
                        /* 0020 */  0x58, 0x0E, 0x84, 0x84, 0x58, 0xA0, 0x10, 0x81,  // X...X...
                        /* 0028 */  0xE2, 0x10, 0x29, 0xBA, 0x04, 0x18, 0x8C, 0x06,  // ..).....
                        /* 0030 */  0x40, 0xEA, 0x82, 0x89, 0x09, 0x10, 0x01, 0x21,  // @......!
                        /* 0038 */  0xAF, 0x02, 0x6C, 0x0A, 0x30, 0x09, 0xA2, 0xFE,  // ..l.0...
                        /* 0040 */  0xFD, 0x21, 0x4A, 0x82, 0x43, 0x09, 0x81, 0x90,  // .!J.C...
                        /* 0048 */  0x44, 0x01, 0xE6, 0x05, 0xE8, 0x16, 0x60, 0x58,  // D.....`X
                        /* 0050 */  0x80, 0x6D, 0x01, 0xA6, 0x05, 0x38, 0x86, 0xA4,  // .m...8..
                        /* 0058 */  0xD2, 0xC0, 0x29, 0x81, 0xA5, 0x40, 0x48, 0xA8,  // ..)..@H.
                        /* 0060 */  0x00, 0xE5, 0x02, 0x7C, 0x0B, 0xD0, 0x8E, 0x28,  // ...|...(
                        /* 0068 */  0xC9, 0x02, 0x2C, 0xC3, 0x88, 0xC0, 0xA3, 0x88,  // ..,.....
                        /* 0070 */  0x6C, 0x34, 0x0E, 0x8D, 0x1D, 0x86, 0x65, 0x82,  // l4....e.
                        /* 0078 */  0x69, 0x10, 0x87, 0x51, 0x36, 0xB2, 0x08, 0x3C,  // i..Q6..<
                        /* 0080 */  0xA1, 0x4E, 0x05, 0xC8, 0x15, 0x20, 0x4C, 0x80,  // .N... L.
                        /* 0088 */  0x78, 0x54, 0x61, 0x34, 0x07, 0x45, 0x02, 0x40,  // xTa4.E.@
                        /* 0090 */  0xA3, 0xC4, 0x8C, 0x89, 0xC0, 0x76, 0x8E, 0xAD,  // .....v..
                        /* 0098 */  0x51, 0x9C, 0x46, 0xE1, 0x02, 0xA4, 0x63, 0x68,  // Q.F...ch
                        /* 00A0 */  0x04, 0xC7, 0x15, 0x8C, 0x69, 0xC6, 0x11, 0x4C,  // ....i..L
                        /* 00A8 */  0x88, 0x58, 0x5C, 0x10, 0x86, 0xA0, 0x62, 0xF4,  // .X\...b.
                        /* 00B0 */  0x38, 0x3E, 0x02, 0x18, 0xE5, 0x54, 0xA2, 0xC5,  // 8>...T..
                        /* 00B8 */  0x0F, 0x18, 0x25, 0xAA, 0x31, 0x18, 0x4E, 0xB4,  // ..%.1.N.
                        /* 00C0 */  0x60, 0xD1, 0xEC, 0x19, 0x45, 0x40, 0x06, 0x8B,  // `...E@..
                        /* 00C8 */  0x1B, 0xFD, 0x10, 0x4D, 0x10, 0xEC, 0x80, 0x30,  // ...M...0
                        /* 00D0 */  0x32, 0x20, 0x04, 0xD9, 0xFA, 0x48, 0x09, 0x81,  // 2 ...H..
                        /* 00D8 */  0xDD, 0x8F, 0x4C, 0xCE, 0x04, 0x18, 0x14, 0x60,  // ..L....`
                        /* 00E0 */  0x4D, 0x80, 0x37, 0x01, 0x0E, 0x27, 0x24, 0x98,  // M.7..'$.
                        /* 00E8 */  0xB6, 0x04, 0x28, 0x44, 0x10, 0x4C, 0x6D, 0x28,  // ..(D.Lm(
                        /* 00F0 */  0x1A, 0x61, 0x8C, 0x70, 0x71, 0xA2, 0xC4, 0x8C,  // .a.pq...
                        /* 00F8 */  0xD8, 0x18, 0xA0, 0x50, 0x22, 0x06, 0xA9, 0x11,  // ...P"...
                        /* 0100 */  0x42, 0xC0, 0x46, 0x08, 0x16, 0xB1, 0x38, 0x48,  // B.F...8H
                        /* 0108 */  0x8D, 0xB5, 0xFD, 0x41, 0x10, 0xB1, 0x0E, 0xCE,  // ...A....
                        /* 0110 */  0x05, 0x2C, 0xC2, 0x68, 0x50, 0x67, 0x81, 0x04,  // .,.hPg..
                        /* 0118 */  0xCF, 0x06, 0x3E, 0x17, 0x9C, 0xD6, 0xE9, 0x79,  // ..>....y
                        /* 0120 */  0x8A, 0x41, 0xCE, 0xF7, 0xB4, 0xEA, 0x1C, 0x25,  // .A.....%
                        /* 0128 */  0x25, 0xB0, 0x54, 0x08, 0xFD, 0xFF, 0x15, 0x9C,  // %.T.....
                        /* 0130 */  0x12, 0xA0, 0xB8, 0x06, 0xD4, 0xF5, 0xE0, 0xE1,  // ........
                        /* 0138 */  0x80, 0x8D, 0xE4, 0x79, 0x00, 0x3B, 0x9F, 0x93,  // ...y.;..
                        /* 0140 */  0x78, 0x18, 0x88, 0xDE, 0xEC, 0xC1, 0x40, 0x16,  // x.....@.
                        /* 0148 */  0x81, 0x34, 0x0E, 0x9F, 0x02, 0x3C, 0x8F, 0x13,  // .4...<..
                        /* 0150 */  0x4D, 0xE0, 0x23, 0xC1, 0x31, 0x60, 0x46, 0x64,  // M.#.1`Fd
                        /* 0158 */  0x68, 0x4F, 0xED, 0x74, 0x9E, 0x03, 0x7C, 0x46,  // hO.t..|F
                        /* 0160 */  0x38, 0x1C, 0x36, 0xBE, 0x67, 0x09, 0x36, 0x0E,  // 8.6.g.6.
                        /* 0168 */  0xF8, 0x8A, 0xEF, 0x00, 0x42, 0x78, 0x53, 0xF0,  // ....BxS.
                        /* 0170 */  0xFC, 0x4C, 0x30, 0xF8, 0x40, 0xD1, 0xC7, 0x04,  // .L0.@...
                        /* 0178 */  0x9F, 0x11, 0xDE, 0x1C, 0x3C, 0x4D, 0x4F, 0x29,  // ....<MO)
                        /* 0180 */  0xC2, 0xBB, 0x04, 0x9B, 0x89, 0x23, 0x42, 0xE8,  // .....#B.
                        /* 0188 */  0x7B, 0x61, 0x51, 0x10, 0xDA, 0xB7, 0x0E, 0x13,  // {aQ.....
                        /* 0190 */  0x88, 0x73, 0x04, 0x3B, 0x05, 0x04, 0x3D, 0x6A,  // .s.;..=j
                        /* 0198 */  0x0F, 0xE6, 0xA5, 0xC0, 0x63, 0xF2, 0xF9, 0xE0,  // ....c...
                        /* 01A0 */  0xF0, 0x30, 0x87, 0x03, 0xCF, 0xE2, 0x6C, 0x7C,  // .0....l|
                        /* 01A8 */  0x38, 0x60, 0x43, 0x36, 0xF2, 0x43, 0x04, 0x58,  // 8`C6.C.X
                        /* 01B0 */  0x06, 0x85, 0x9D, 0xC5, 0x49, 0x61, 0xCE, 0x00,  // ....Ia..
                        /* 01B8 */  0x60, 0x8C, 0x3B, 0x58, 0xF4, 0xB0, 0x7C, 0x91,  // `.;X..|.
                        /* 01C0 */  0xC0, 0x10, 0x8C, 0x37, 0x52, 0x50, 0x1D, 0x15,  // ...7RP..
                        /* 01C8 */  0x3C, 0x52, 0x38, 0xFF, 0xFF, 0x91, 0xE2, 0xE4,  // <R8.....
                        /* 01D0 */  0x8D, 0x14, 0x34, 0x50, 0xCF, 0x18, 0xCF, 0x05,  // ..4P....
                        /* 01D8 */  0xEF, 0x1A, 0xB8, 0xA3, 0x03, 0x58, 0x81, 0x71,  // .....X.q
                        /* 01E0 */  0x03, 0xB5, 0x5F, 0x01, 0x08, 0xC1, 0xDF, 0x53,  // .._....S
                        /* 01E8 */  0x1E, 0x1E, 0x1E, 0x52, 0x22, 0x3C, 0xAA, 0x18,  // ...R"<..
                        /* 01F0 */  0xFD, 0xE1, 0xA2, 0x4F, 0x01, 0x5A, 0x21, 0x84,  // ...O.Z!.
                        /* 01F8 */  0x76, 0x10, 0x61, 0x0E, 0x22, 0x52, 0xAC, 0x08,  // v.a."R..
                        /* 0200 */  0x61, 0x9E, 0x4B, 0xC2, 0x19, 0x28, 0x58, 0xB8,  // a.K..(X.
                        /* 0208 */  0x13, 0x89, 0x11, 0xCA, 0xD0, 0x2F, 0x19, 0x26,  // ...../.&
                        /* 0210 */  0x28, 0x72, 0x88, 0xE8, 0x71, 0x70, 0xE0, 0xD3,  // (r..qp..
                        /* 0218 */  0x38, 0xAA, 0xE0, 0x41, 0x23, 0x47, 0x39, 0x95,  // 8..A#G9.
                        /* 0220 */  0xC3, 0xF2, 0xDD, 0xC0, 0x08, 0xC7, 0x75, 0x50,  // ......uP
                        /* 0228 */  0xA7, 0xE8, 0xDB, 0xCA, 0x41, 0x1F, 0xE7, 0xCB,  // ....A...
                        /* 0230 */  0x44, 0xA0, 0x67, 0x0E, 0x4E, 0xE0, 0x90, 0xAB,  // D.g.N...
                        /* 0238 */  0xA7, 0x31, 0x9E, 0x0E, 0x8A, 0x05, 0x83, 0x3A,  // .1.....:
                        /* 0240 */  0xF4, 0x00, 0xAE, 0x0E, 0x08, 0xCF, 0x09, 0xB0,  // ........
                        /* 0248 */  0xFE, 0xFF, 0x87, 0x1E, 0x70, 0x4D, 0xFE, 0x88,  // ....pM..
                        /* 0250 */  0x5A, 0x05, 0xD1, 0x65, 0x20, 0x4A, 0x8C, 0xD8,  // Z..e J..
                        /* 0258 */  0x27, 0x13, 0xFF, 0x3D, 0x83, 0x9D, 0x79, 0x0C,  // '..=..y.
                        /* 0260 */  0xF3, 0xE8, 0x83, 0x39, 0xF0, 0xC0, 0xBF, 0xE7,  // ...9....
                        /* 0268 */  0xBC, 0xE2, 0x3C, 0xE4, 0xBC, 0xE5, 0x1C, 0xC2,  // ..<.....
                        /* 0270 */  0x1B, 0x8E, 0x21, 0x5E, 0x74, 0x1E, 0x0A, 0x3C,  // ..!^t..<
                        /* 0278 */  0x9E, 0x10, 0x0F, 0x3C, 0x56, 0x86, 0x22, 0x88,  // ...<V.".
                        /* 0280 */  0x07, 0x1E, 0x63, 0x3C, 0xED, 0x18, 0x25, 0xC4,  // ..c<..%.
                        /* 0288 */  0xEB, 0x8E, 0x6F, 0x3B, 0x21, 0x0C, 0xF5, 0x00,  // ..o;!...
                        /* 0290 */  0x13, 0xFE, 0x04, 0x42, 0xFA, 0xC0, 0xC3, 0x04,  // ...B....
                        /* 0298 */  0xA9, 0x80, 0x68, 0x03, 0x44, 0x91, 0x0E, 0x3C,  // ..h.D..<
                        /* 02A0 */  0xA0, 0x1B, 0x9A, 0x8F, 0x1F, 0x3E, 0xF0, 0xC0,  // .....>..
                        /* 02A8 */  0x3D, 0x7D, 0xC0, 0x3F, 0x6E, 0x80, 0x4F, 0xFE,  // =}.?n.O.
                        /* 02B0 */  0xC1, 0x07, 0x14, 0x62, 0x0F, 0x27, 0xA0, 0x39,  // ...b.'.9
                        /* 02B8 */  0x00, 0x81, 0x2F, 0x32, 0x84, 0x9C, 0x8C, 0x07,  // ../2....
                        /* 02C0 */  0xFD, 0xFF, 0xC7, 0x7D, 0x2C, 0x08, 0x17, 0xF1,  // ...},...
                        /* 02C8 */  0xB9, 0x80, 0x07, 0x3C, 0xFE, 0x00, 0x1D, 0x81,  // ...<....
                        /* 02D0 */  0xC7, 0x09, 0xD0, 0x9C, 0x22, 0x18, 0xD0, 0x39,  // ...."..9
                        /* 02D8 */  0xB1, 0x8B, 0x98, 0x47, 0x50, 0xD7, 0x31, 0x06,  // ...GP.1.
                        /* 02E0 */  0x14, 0xB7, 0x08, 0x9F, 0xC7, 0x7C, 0x86, 0x78,  // .....|.x
                        /* 02E8 */  0x67, 0x48, 0xE0, 0xF0, 0x23, 0x45, 0x9F, 0x13,  // gH..#E..
                        /* 02F0 */  0x7C, 0xCA, 0x60, 0xD7, 0x14, 0x7E, 0x87, 0x79,  // |.`..~.y
                        /* 02F8 */  0xF5, 0x30, 0xCC, 0xB3, 0x00, 0x0B, 0x79, 0x02,  // .0....y.
                        /* 0300 */  0x02, 0x3A, 0xE7, 0x19, 0xFC, 0x51, 0x04, 0xF6,  // .:...Q..
                        /* 0308 */  0xA8, 0xF8, 0x2C, 0x9E, 0x17, 0xCE, 0x8A, 0xCF,  // ..,.....
                        /* 0310 */  0xD6, 0xC3, 0x05, 0x63, 0xE0, 0x73, 0x02, 0x94,  // ...c.s..
                        /* 0318 */  0x53, 0x80, 0xE7, 0x8A, 0x3B, 0x3C, 0xC1, 0xF9,  // S...;<..
                        /* 0320 */  0xFF, 0x8F, 0x15, 0x1E, 0xA0, 0x0F, 0x4F, 0xC0,  // ......O.
                        /* 0328 */  0xE3, 0x9C, 0xC0, 0xA6, 0x84, 0x39, 0x26, 0x80,  // .....9&.
                        /* 0330 */  0x33, 0xF4, 0x40, 0xD1, 0xC3, 0x33, 0x70, 0x48,  // 3.@..3pH
                        /* 0338 */  0x1F, 0x12, 0xB0, 0x07, 0x0C, 0x70, 0x81, 0xFA,  // .....p..
                        /* 0340 */  0x80, 0x01, 0x3C, 0xC6, 0xC4, 0x66, 0x8A, 0x1F,  // ..<..f..
                        /* 0348 */  0x2A, 0xF0, 0x18, 0xC5, 0x33, 0xD2, 0xA1, 0x82,  // *...3...
                        /* 0350 */  0xF9, 0x8F, 0xEA, 0xA1, 0xC2, 0xFB, 0xFF, 0x0F,  // ........
                        /* 0358 */  0x15, 0x8C, 0x63, 0xF2, 0x50, 0x81, 0xC1, 0x19,  // ..c.P...
                        /* 0360 */  0xD1, 0x43, 0xC5, 0x8D, 0xC6, 0xB7, 0xAB, 0x37,  // .C.....7
                        /* 0368 */  0x2C, 0x3E, 0x56, 0xEC, 0x19, 0x11, 0x5C, 0xA7,  // ,>V...\.
                        /* 0370 */  0x32, 0x9F, 0x11, 0x81, 0xC7, 0xA0, 0x30, 0x83,  // 2.....0.
                        /* 0378 */  0x05, 0x06, 0xB1, 0x8F, 0x09, 0x50, 0x8E, 0x1D,  // .....P..
                        /* 0380 */  0x86, 0x38, 0x9B, 0x57, 0x35, 0x76, 0x21, 0x62,  // .8.W5v!b
                        /* 0388 */  0x63, 0x05, 0x97, 0x87, 0xB1, 0x02, 0x85, 0xFF,  // c.......
                        /* 0390 */  0xFF, 0xC9, 0x04, 0x3B, 0x27, 0xCC, 0x85, 0x08,  // ...;'...
                        /* 0398 */  0x73, 0x22, 0x02, 0x06, 0xC3, 0xF1, 0x11, 0xD1,  // s"......
                        /* 03A0 */  0x73, 0x85, 0x41, 0x30, 0xE6, 0x60, 0x41, 0x35,  // s.A0.`A5
                        /* 03A8 */  0x22, 0x0F, 0x16, 0xFE, 0x99, 0xEF, 0x60, 0xC1,  // ".....`.
                        /* 03B0 */  0x32, 0x28, 0x43, 0xBC, 0xC6, 0x1D, 0x2E, 0x70,  // 2(C....p
                        /* 03B8 */  0x89, 0x7E, 0x52, 0x80, 0x72, 0xA0, 0xF3, 0xBD,  // .~R.r...
                        /* 03C0 */  0x8F, 0x5D, 0x94, 0xD8, 0x68, 0xC1, 0x67, 0x62,  // .]..h.gb
                        /* 03C8 */  0xB4, 0x40, 0x05, 0xCC, 0x13, 0x8A, 0xFE, 0x9C,  // .@......
                        /* 03D0 */  0xF7, 0x2A, 0x66, 0xAC, 0x47, 0x3E, 0xFF, 0xFF,  // .*f.G>..
                        /* 03D8 */  0x2F, 0xD9, 0x1C, 0x26, 0xF2, 0x63, 0x11, 0x38,  // /..&.c.8
                        /* 03E0 */  0x8F, 0xA8, 0x60, 0xBC, 0x9E, 0xBE, 0x91, 0x32,  // ..`....2
                        /* 03E8 */  0xB5, 0x17, 0x02, 0x02, 0x12, 0xD6, 0xC7, 0x48,  // .......H
                        /* 03F0 */  0x5F, 0x51, 0x8D, 0x12, 0xE3, 0xCC, 0x02, 0x1E,  // _Q......
                        /* 03F8 */  0x4C, 0x88, 0x47, 0x54, 0x60, 0x14, 0xFD, 0xE5,  // L.GT`...
                        /* 0400 */  0xE8, 0xF3, 0x29, 0x0D, 0x0B, 0x83, 0x3A, 0xA2,  // ..)...:.
                        /* 0408 */  0x02, 0xBE, 0x2F, 0x04, 0x8F, 0xA8, 0x98, 0xFF,  // ../.....
                        /* 0410 */  0xFF, 0x11, 0x15, 0xEC, 0x57, 0xD2, 0x08, 0xAF,  // ....W...
                        /* 0418 */  0xA5, 0xCF, 0xA4, 0x8F, 0xF6, 0x27, 0xF6, 0x46,  // .....'.F
                        /* 0420 */  0xF0, 0x74, 0xEA, 0xE1, 0x44, 0xF0, 0x11, 0x95,  // .t..D...
                        /* 0428 */  0x81, 0x45, 0x8A, 0x62, 0xC8, 0x28, 0x51, 0x8D,  // .E.b.(Q.
                        /* 0430 */  0xF2, 0x78, 0xCF, 0xB0, 0x5E, 0xF4, 0x8D, 0xE4,  // .x..^...
                        /* 0438 */  0x1B, 0x44, 0xF4, 0xB8, 0x8F, 0xF8, 0x5C, 0xE6,  // .D....\.
                        /* 0440 */  0x42, 0xE4, 0xE3, 0x88, 0x0A, 0x50, 0xE4, 0xE4,  // B....P..
                        /* 0448 */  0x06, 0x07, 0xF5, 0xD9, 0xE1, 0xBC, 0x7D, 0x41,  // ......}A
                        /* 0450 */  0x30, 0xFE, 0xDB, 0x92, 0x4F, 0x6E, 0x60, 0xF9,  // 0...On`.
                        /* 0458 */  0xFF, 0x9F, 0x51, 0x81, 0xD3, 0x98, 0x5E, 0x15,  // ..Q...^.
                        /* 0460 */  0xCE, 0x09, 0x33, 0x8B, 0x83, 0xF2, 0x39, 0x06,  // ..3...9.
                        /* 0468 */  0x9C, 0xA7, 0x4C, 0x38, 0xD0, 0x87, 0xFC, 0xE6,  // ..L8....
                        /* 0470 */  0xE1, 0x73, 0xC2, 0x99, 0xB2, 0x13, 0x3F, 0xF0,  // .s....?.
                        /* 0478 */  0x3E, 0xE8, 0xF8, 0x00, 0x62, 0x97, 0x03, 0x05,  // >...b...
                        /* 0480 */  0xF5, 0xD9, 0x16, 0xCE, 0xFD, 0x06, 0x7B, 0x6B,  // ......{k
                        /* 0488 */  0xC5, 0x9C, 0x6D, 0xC1, 0x77, 0x40, 0x05, 0xC7,  // ..m.w@..
                        /* 0490 */  0x41, 0xC8, 0xFF, 0xFF, 0xB3, 0x2D, 0x70, 0x7E,  // A....-p~
                        /* 0498 */  0x4B, 0x78, 0xB8, 0xF8, 0x7B, 0x1B, 0x9B, 0x49,  // Kx..{..I
                        /* 04A0 */  0x84, 0x13, 0x7A, 0xA4, 0xF1, 0x45, 0xFD, 0xDC,  // ..z..E..
                        /* 04A8 */  0x6C, 0x1C, 0x92, 0x04, 0x3D, 0xA5, 0x02, 0x9D,  // l...=...
                        /* 04B0 */  0x59, 0x3D, 0xF5, 0x81, 0x6D, 0x56, 0x18, 0x9C,  // Y=..mV..
                        /* 04B8 */  0x28, 0x87, 0xC5, 0x20, 0x1E, 0x69, 0x7C, 0x8F,  // (.. .i|.
                        /* 04C0 */  0x79, 0x5C, 0x00, 0xE7, 0x80, 0xF1, 0x23, 0xF2,  // y\....#.
                        /* 04C8 */  0x58, 0x7C, 0x82, 0x65, 0x83, 0xC1, 0x11, 0x8C,  // X|.e....
                        /* 04D0 */  0x7A, 0x54, 0x05, 0x3A, 0xB3, 0x3A, 0x5E, 0xEC,  // zT.:.:^.
                        /* 04D8 */  0xFF, 0x7F, 0xBC, 0xB0, 0x6F, 0xB9, 0xFC, 0xF8,  // ....o...
                        /* 04E0 */  0xE4, 0x11, 0x63, 0x0E, 0x0C, 0xC0, 0x67, 0xC0,  // ..c...g.
                        /* 04E8 */  0x98, 0x73, 0xAC, 0x07, 0x0C, 0xE6, 0xF3, 0x2A,  // .s.....*
                        /* 04F0 */  0x38, 0x06, 0x0C, 0xBE, 0xBB, 0x2E, 0x1B, 0x30,  // 8......0
                        /* 04F8 */  0xB0, 0x89, 0x7F, 0x5C, 0x81, 0x72, 0xE0, 0xC0,  // ...\.r..
                        /* 0500 */  0x9F, 0x67, 0x31, 0x87, 0x47, 0xB0, 0x9D, 0x5A,  // .g1.G..Z
                        /* 0508 */  0xC1, 0x71, 0x78, 0xC4, 0xFD, 0xFF, 0x0F, 0x1C,  // .qx.....
                        /* 0510 */  0xE0, 0x1B, 0x16, 0xE6, 0xC8, 0x0B, 0x98, 0x38,  // .......8
                        /* 0518 */  0xB6, 0x82, 0xE3, 0xC8, 0x0B, 0xB8, 0x3C, 0xB5,  // ......<.
                        /* 0520 */  0x02, 0x97, 0xFF, 0xFF, 0x91, 0x17, 0xF0, 0xA4,  // ........
                        /* 0528 */  0xE2, 0xC8, 0x0B, 0xE8, 0x39, 0x66, 0xE0, 0x07,  // ....9f..
                        /* 0530 */  0x64, 0xE8, 0x23, 0x79, 0x0F, 0xF5, 0x01, 0x31,  // d.#y...1
                        /* 0538 */  0xEC, 0x4B, 0xA8, 0x71, 0xDF, 0x29, 0x7D, 0x2C,  // .K.q.)},
                        /* 0540 */  0x04, 0xDB, 0x60, 0x7D, 0x2C, 0x04, 0x1E, 0x83,  // ..`},...
                        /* 0548 */  0x82, 0xF3, 0xFF, 0x3F, 0x28, 0x80, 0xF3, 0xB4,  // ...?(...
                        /* 0550 */  0x0C, 0x1C, 0x4E, 0xB4, 0xEC, 0xB4, 0x0C, 0x0C,  // ..N.....
                        /* 0558 */  0x35, 0x45, 0x01, 0x61, 0xF2, 0x4F, 0x53, 0x92,  // 5E.a.OS.
                        /* 0560 */  0xF7, 0x16, 0xA0, 0x30, 0x3E, 0x2D, 0x03, 0xAE,  // ...0>-..
                        /* 0568 */  0x04, 0x1F, 0x14, 0x40, 0x73, 0x1A, 0x80, 0x7F,  // ...@s...
                        /* 0570 */  0x13, 0xE0, 0x87, 0x88, 0xF0, 0x0F, 0x1C, 0x1E,  // ........
                        /* 0578 */  0x41, 0x84, 0xFF, 0x7F, 0x02, 0x9F, 0x94, 0xC1,  // A.......
                        /* 0580 */  0x75, 0x62, 0x78, 0x52, 0x06, 0x7B, 0xC0, 0xF3,  // ubxR.{..
                        /* 0588 */  0x80, 0xCE, 0x1B, 0x3E, 0x29, 0x03, 0xFC, 0x38,  // ...>)..8
                        /* 0590 */  0x59, 0xE2, 0x4E, 0x22, 0xE0, 0xBD, 0x85, 0x60,  // Y.N"...`
                        /* 0598 */  0x8E, 0x21, 0x30, 0xFF, 0xFF, 0xC7, 0x10, 0xF0,  // .!0.....
                        /* 05A0 */  0x65, 0x0D, 0x02, 0x51, 0xDF, 0x61, 0xC3, 0xAB,  // e..Q.a..
                        /* 05A8 */  0x95, 0x8D, 0xD5, 0xFA, 0xBC, 0x41, 0x05, 0x1F,  // .....A..
                        /* 05B0 */  0x13, 0x34, 0xA1, 0x27, 0x37, 0x0F, 0xB3, 0xD2,  // .4.'7...
                        /* 05B8 */  0xD9, 0x08, 0xE5, 0xF5, 0xE0, 0xD9, 0xDE, 0x32,  // .......2
                        /* 05C0 */  0xC1, 0x74, 0x8E, 0x36, 0x84, 0x05, 0x9E, 0x48,  // .t.6...H
                        /* 05C8 */  0x0C, 0xA1, 0xF1, 0x18, 0xDC, 0x82, 0xE0, 0x28,  // .......(
                        /* 05D0 */  0x88, 0x4F, 0x00, 0x0E, 0x7B, 0x02, 0x42, 0x1F,  // .O..{.B.
                        /* 05D8 */  0x01, 0x7C, 0xE7, 0xE1, 0x04, 0x0E, 0x77, 0xFC,  // .|....w.
                        /* 05E0 */  0xA1, 0x27, 0x06, 0xFC, 0xD8, 0x0E, 0xEC, 0xBC,  // .'......
                        /* 05E8 */  0x7C, 0xCA, 0x05, 0xD7, 0xCC, 0x7C, 0x5F, 0xF2,  // |....|_.
                        /* 05F0 */  0xD0, 0xD8, 0xDD, 0xC4, 0x43, 0xF1, 0x10, 0x1E,  // ....C...
                        /* 05F8 */  0x0F, 0x4C, 0xE0, 0x91, 0xF8, 0x5C, 0xC4, 0x07,  // .L...\..
                        /* 0600 */  0xE1, 0x53, 0x38, 0x3F, 0xFC, 0x80, 0xF3, 0x60,  // .S8?...`
                        /* 0608 */  0x84, 0x3B, 0x23, 0xC0, 0x03, 0xF2, 0x85, 0xC0,  // .;#.....
                        /* 0610 */  0xB3, 0x7A, 0x28, 0x60, 0x73, 0x08, 0x11, 0x26,  // .z(`s..&
                        /* 0618 */  0x9A, 0xE1, 0x31, 0x81, 0x46, 0x45, 0x65, 0x8D,  // ..1.FEe.
                        /* 0620 */  0x0B, 0x35, 0x52, 0x9F, 0x64, 0x18, 0xF6, 0xFB,  // .5R.d...
                        /* 0628 */  0x80, 0x45, 0x0F, 0x54, 0xB7, 0x83, 0xA7, 0x74,  // .E.T...t
                        /* 0630 */  0x0C, 0xAC, 0xC7, 0xCE, 0x61, 0x8D, 0x76, 0xB0,  // ....a.v.
                        /* 0638 */  0x3E, 0x4A, 0xF8, 0x1A, 0xE2, 0x99, 0xFD, 0xFF,  // >J......
                        /* 0640 */  0x4F, 0xD8, 0xB0, 0x3E, 0x42, 0x81, 0xEB, 0xA8,  // O..>B...
                        /* 0648 */  0xC0, 0x8E, 0xDB, 0x3E, 0x01, 0xE0, 0xCE, 0x09,  // ...>....
                        /* 0650 */  0x3A, 0x35, 0xA0, 0x0E, 0x40, 0x16, 0x7F, 0x6A,  // :5..@..j
                        /* 0658 */  0x40, 0xCC, 0xF1, 0xB0, 0x9E, 0x04, 0x0C, 0xFA,  // @.......
                        /* 0660 */  0xAA, 0x63, 0x9C, 0x27, 0x2A, 0x8F, 0xC8, 0xB7,  // .c.'*...
                        /* 0668 */  0x00, 0x26, 0xF5, 0xE4, 0x80, 0x12, 0x49, 0x21,  // .&....I!
                        /* 0670 */  0x89, 0x27, 0x07, 0x94, 0x28, 0x38, 0x0A, 0xE2,  // .'..(8..
                        /* 0678 */  0x93, 0x83, 0x4F, 0xED, 0xF8, 0x93, 0x03, 0xFE,  // ..O.....
                        /* 0680 */  0x1C, 0xC6, 0x4F, 0x0E, 0x70, 0x0F, 0xCC, 0xE0,  // ..O.p...
                        /* 0688 */  0x19, 0x2A, 0x9F, 0x1F, 0xBC, 0xEB, 0x3A, 0x3B,  // .*....:;
                        /* 0690 */  0x3B, 0x00, 0x56, 0x82, 0x9D, 0x1D, 0x40, 0xF3,  // ;.V...@.
                        /* 0698 */  0xFF, 0x3F, 0x3B, 0xF0, 0x73, 0x80, 0xCF, 0x0E,  // .?;.s...
                        /* 06A0 */  0xE0, 0x3A, 0x01, 0x00, 0x9F, 0xF3, 0x03, 0x9C,  // .:......
                        /* 06A8 */  0x49, 0x3E, 0x3F, 0x00, 0x16, 0x2E, 0x06, 0x3E,  // I>?....>
                        /* 06B0 */  0xBF, 0x83, 0x6F, 0x7C, 0xEC, 0xFC, 0x00, 0x18,  // ..o|....
                        /* 06B8 */  0xFA, 0xFF, 0x9F, 0x1F, 0x80, 0x03, 0x2C, 0x3F,  // ......,?
                        /* 06C0 */  0x3F, 0x00, 0x9F, 0x13, 0x00, 0x78, 0x44, 0x9E,  // ?....xD.
                        /* 06C8 */  0x1F, 0x50, 0x1C, 0x3E, 0x28, 0x1A, 0xED, 0x24,  // .P.>(..$
                        /* 06D0 */  0x0E, 0xE0, 0xC4, 0x0F, 0x22, 0xC2, 0x39, 0x84,  // ....".9.
                        /* 06D8 */  0x3F, 0x84, 0x57, 0x8A, 0x28, 0x81, 0x1E, 0x26,  // ?.W.(..&
                        /* 06E0 */  0x7D, 0xC2, 0x24, 0xC7, 0x07, 0x94, 0x50, 0x0A,  // }.$...P.
                        /* 06E8 */  0x1D, 0xAD, 0x7C, 0x7C, 0xE0, 0xC2, 0xE0, 0x28,  // ..||...(
                        /* 06F0 */  0x88, 0x8F, 0x0F, 0x0E, 0x7D, 0x7C, 0x80, 0x1E,  // ....}|..
                        /* 06F8 */  0xF2, 0x34, 0x03, 0x8A, 0xA3, 0x9B, 0x8F, 0x55,  // .4.....U
                        /* 0700 */  0x60, 0xC1, 0x7A, 0x13, 0xF7, 0xF4, 0x60, 0xDC,  // `.z...`.
                        /* 0708 */  0x8B, 0x7D, 0x9B, 0x33, 0xD2, 0x09, 0x9E, 0xEF,  // .}.3....
                        /* 0710 */  0xDB, 0xA3, 0xCF, 0x7B, 0x0F, 0x10, 0xC0, 0xE0,  // ...{....
                        /* 0718 */  0xFF, 0x7F, 0x80, 0x00, 0x4E, 0x47, 0x33, 0x1F,  // ....NG3.
                        /* 0720 */  0x20, 0xC0, 0x35, 0x7E, 0x1F, 0x20, 0xC0, 0x75,  //  .5~. .u
                        /* 0728 */  0x06, 0x00, 0x5E, 0xA2, 0x8E, 0x10, 0x68, 0xD9,  // ..^...h.
                        /* 0730 */  0x07, 0x2C, 0x04, 0x36, 0xC3, 0xF0, 0x2D, 0xC2,  // .,.6..-.
                        /* 0738 */  0xC7, 0x05, 0x0F, 0xCA, 0x04, 0x3E, 0xE8, 0x01,  // .....>..
                        /* 0740 */  0x5E, 0x8E, 0x43, 0x7C, 0x7A, 0xF0, 0x8E, 0x0F,  // ^.C|z...
                        /* 0748 */  0xFC, 0xFF, 0x7F, 0x7C, 0x00, 0x5C, 0x84, 0x3A,  // ...|.\.:
                        /* 0750 */  0x3E, 0x80, 0xCE, 0xC2, 0xF1, 0x01, 0x74, 0xE3,  // >.....t.
                        /* 0758 */  0x07, 0x1E, 0x47, 0x07, 0x38, 0x67, 0x1B, 0x76,  // ..G.8g.v
                        /* 0760 */  0x74, 0x00, 0xF6, 0x47, 0x2B, 0xDC, 0x58, 0xC1,  // t..G+.X.
                        /* 0768 */  0xF3, 0xFF, 0x3F, 0x09, 0xF1, 0xA3, 0x03, 0x70,  // ..?....p
                        /* 0770 */  0x3A, 0xA8, 0x07, 0x7A, 0x90, 0x0D, 0xF4, 0xE8,  // :..z....
                        /* 0778 */  0x00, 0xFC, 0xCF, 0xEA, 0x3E, 0x3A, 0x00, 0xA7,  // ....>:..
                        /* 0780 */  0xF1, 0xC3, 0x17, 0x72, 0x74, 0x40, 0x0D, 0xC1,  // ...rt@..
                        /* 0788 */  0x62, 0x0F, 0x31, 0x08, 0x8D, 0x37, 0x65, 0x32,  // b.1..7e2
                        /* 0790 */  0xDC, 0xD7, 0x14, 0x8F, 0xC7, 0xA7, 0x06, 0x76,  // .......v
                        /* 0798 */  0x70, 0xE0, 0xD2, 0x28, 0x74, 0x9E, 0xF2, 0xC1,  // p..(t...
                        /* 07A0 */  0x81, 0x4B, 0x81, 0xA3, 0x20, 0x3E, 0x38, 0x38,  // .K.. >88
                        /* 07A8 */  0xE6, 0xC1, 0x01, 0x7A, 0xAC, 0x23, 0x0C, 0x28,  // ...z.#.(
                        /* 07B0 */  0xE4, 0x41, 0xD1, 0xFF, 0xFF, 0x48, 0xE1, 0x4F,  // .A...H.O
                        /* 07B8 */  0x8D, 0xAD, 0xF0, 0xD8, 0x70, 0xA7, 0x06, 0xC0,  // ....p...
                        /* 07C0 */  0xC9, 0x21, 0xDE, 0xA7, 0x06, 0x70, 0x79, 0x38,  // .!...py8
                        /* 07C8 */  0x35, 0x80, 0x6E, 0xA2, 0x3E, 0xBF, 0x80, 0x6B,  // 5.n.>..k
                        /* 07D0 */  0xF8, 0x90, 0x0E, 0x0D, 0xA8, 0x13, 0x80, 0x4F,  // .......O
                        /* 07D8 */  0xDF, 0x18, 0x5C, 0x66, 0x6C, 0x94, 0x3A, 0x53,  // ..\fl.:S
                        /* 07E0 */  0x7B, 0x36, 0xEC, 0x8C, 0xC9, 0x4E, 0x0D, 0x5C,  // {6...N.\
                        /* 07E8 */  0x1C, 0x85, 0x8E, 0x0D, 0x3E, 0x35, 0x70, 0x31,  // ....>5p1
                        /* 07F0 */  0x70, 0x14, 0xC4, 0xA7, 0x06, 0x07, 0x3D, 0x35,  // p.....=5
                        /* 07F8 */  0x40, 0x3F, 0x25, 0xFA, 0xD4, 0x00, 0xE7, 0xFF,  // @?%.....
                        /* 0800 */  0x7F, 0x6A, 0xC0, 0x1D, 0x98, 0xC1, 0x33, 0x37,  // .j....37
                        /* 0808 */  0x7E, 0x0E, 0xF3, 0xE0, 0x70, 0x67, 0x17, 0xC0,  // ~...pg..
                        /* 0810 */  0x21, 0xB8, 0x4F, 0x51, 0xC0, 0x6D, 0xFC, 0x10,  // !.OQ.m..
                        /* 0818 */  0xCF, 0x0D, 0xD0, 0x67, 0xFD, 0xDC, 0x00, 0xAC,  // ...g....
                        /* 0820 */  0xFE, 0xFF, 0xE7, 0x06, 0x60, 0x35, 0xB7, 0xE7,  // ....`5..
                        /* 0828 */  0x06, 0xC0, 0xA9, 0x89, 0x73, 0x03, 0x90, 0x1C,  // ....s...
                        /* 0830 */  0x3F, 0x8C, 0xC3, 0x1C, 0x5E, 0xF4, 0xB9, 0x01,  // ?...^...
                        /* 0838 */  0x3D, 0xB5, 0x18, 0xC5, 0x43, 0xA3, 0xCF, 0xDC,  // =...C...
                        /* 0840 */  0x3E, 0x38, 0xF0, 0xB3, 0x9C, 0x4F, 0x0E, 0x3E,  // >8...O.>
                        /* 0848 */  0x38, 0x70, 0x39, 0x70, 0x14, 0xC4, 0xFF, 0xFF,  // 8p9p....
                        /* 0850 */  0x83, 0x83, 0xA3, 0x1E, 0x1C, 0xA0, 0x47, 0x3B,  // ......G;
                        /* 0858 */  0x38, 0x80, 0xE2, 0xE0, 0x03, 0x9E, 0x63, 0x0F,  // 8.....c.
                        /* 0860 */  0x1F, 0x1D, 0x9B, 0x2A, 0xF6, 0xE4, 0x00, 0x38,  // ...*...8
                        /* 0868 */  0x39, 0x83, 0xF9, 0xE4, 0x00, 0x2E, 0x15, 0x27,  // 9......'
                        /* 0870 */  0x07, 0xD0, 0xCD, 0xE9, 0x31, 0x0A, 0xAC, 0x07,  // ....1...
                        /* 0878 */  0x00, 0x38, 0x47, 0x07, 0xDC, 0x18, 0x2C, 0xF9,  // .8G...,.
                        /* 0880 */  0xE8, 0x80, 0xD0, 0x7A, 0xD6, 0x25, 0xC3, 0x38,  // ...z.%.8
                        /* 0888 */  0x07, 0x7E, 0xA8, 0xC4, 0xFC, 0xFF, 0x8F, 0xB7,  // .~......
                        /* 0890 */  0x80, 0x8F, 0x2B, 0x41, 0xAC, 0x53, 0x7F, 0xFB,  // ..+A.S..
                        /* 0898 */  0xF2, 0x24, 0x5F, 0xD4, 0x7D, 0x33, 0x66, 0xD3,  // .$_.}3f.
                        /* 08A0 */  0xC3, 0x9C, 0x1C, 0x00, 0x27, 0x87, 0x7F, 0xF0,  // ....'...
                        /* 08A8 */  0x8D, 0xDC, 0x87, 0x7F, 0xE0, 0x74, 0x72, 0xE0,  // .....tr.
                        /* 08B0 */  0x27, 0x00, 0xFC, 0x7D, 0x01, 0x7F, 0xF8, 0xC7,  // '..}....
                        /* 08B8 */  0xFD, 0xFF, 0x45, 0x41, 0x28, 0xC0, 0xE1, 0x1F,  // ..EA(...
                        /* 08C0 */  0xD2, 0xC9, 0x12, 0x83, 0x70, 0x0E, 0xCF, 0xB1,  // ....p...
                        /* 08C8 */  0xF6, 0x7C, 0xC2, 0xA4, 0xC7, 0x07, 0x7E, 0x82,  // .|....~.
                        /* 08D0 */  0xF0, 0x51, 0xC6, 0xC7, 0x07, 0x2E, 0x0B, 0x8E,  // .Q......
                        /* 08D8 */  0x82, 0xF8, 0xF8, 0xE0, 0xC8, 0xC7, 0x07, 0xE8,  // ........
                        /* 08E0 */  0x11, 0x8F, 0x0F, 0xA0, 0x38, 0x0C, 0x3C, 0xC6,  // ....8.<.
                        /* 08E8 */  0x80, 0x0D, 0xED, 0xE0, 0x70, 0x40, 0x06, 0x0B,  // ....p@..
                        /* 08F0 */  0x1A, 0xA2, 0x62, 0x28, 0x02, 0xDC, 0xFC, 0x09,  // ..b(....
                        /* 08F8 */  0x02, 0xD0, 0x72, 0x12, 0xF2, 0x09, 0x02, 0x5C,  // ..r....\
                        /* 0900 */  0x67, 0x00, 0x9F, 0x20, 0xC0, 0x75, 0x04, 0x80,  // g.. .u..
                        /* 0908 */  0xF7, 0xFF, 0x3F, 0x02, 0x80, 0x11, 0x29, 0xD6,  // ..?...).
                        /* 0910 */  0x23, 0x00, 0x93, 0x78, 0xBA, 0x43, 0x8B, 0x3F,  // #..x.C.?
                        /* 0918 */  0x72, 0x23, 0xCE, 0x0F, 0xB0, 0xE4, 0x9E, 0x1F,  // r#......
                        /* 0920 */  0x50, 0x42, 0x29, 0x74, 0x80, 0xF0, 0xF9, 0x81,  // PB)t....
                        /* 0928 */  0x1F, 0x76, 0x0D, 0x66, 0x10, 0x9F, 0x1F, 0x1C,  // .v.f....
                        /* 0930 */  0xFA, 0xFC, 0x00, 0x3D, 0xE4, 0x89, 0x1B, 0x14,  // ...=....
                        /* 0938 */  0x62, 0x8F, 0xC8, 0xA0, 0x1B, 0x2F, 0x3C, 0x4C,  // b..../<L
                        /* 0940 */  0xFB, 0xC2, 0x90, 0x66, 0x04, 0x9D, 0xF1, 0x00,  // ...f....
                        /* 0948 */  0x2F, 0x27, 0x22, 0x1F, 0x20, 0xC0, 0x65, 0x03,  // /'". .e.
                        /* 0950 */  0x96, 0xFE, 0xFF, 0x0F, 0x10, 0xE0, 0x39, 0x03,  // ......9.
                        /* 0958 */  0x00, 0x2F, 0x61, 0xE7, 0x3C, 0xB4, 0xF0, 0x33,  // ./a.<..3
                        /* 0960 */  0x0D, 0xA4, 0x39, 0xBF, 0x88, 0xDB, 0x27, 0x88,  // ..9...'.
                        /* 0968 */  0x08, 0x7C, 0x7E, 0xF0, 0x11, 0x82, 0x1F, 0x39,  // .|~....9
                        /* 0970 */  0x7D, 0xC0, 0xF2, 0x11, 0x82, 0x4B, 0x82, 0xA3,  // }....K..
                        /* 0978 */  0x20, 0x3E, 0x42, 0x38, 0xEE, 0x11, 0x02, 0x7A,  //  >B8...z
                        /* 0980 */  0xBC, 0x13, 0x0D, 0x28, 0x4E, 0x66, 0xE0, 0x41,  // ...(Nf.A
                        /* 0988 */  0x3A, 0x33, 0x8F, 0xD4, 0x28, 0x2F, 0x1F, 0xF8,  // :3..(/..
                        /* 0990 */  0xF3, 0x0C, 0xE0, 0xE5, 0xFF, 0x7F, 0xD2, 0x03,  // ........
                        /* 0998 */  0xA7, 0x8E, 0x93, 0x1E, 0xD0, 0x3A, 0x00, 0x80,  // .....:..
                        /* 09A0 */  0x43, 0xF0, 0xE1, 0x01, 0x1D, 0xE2, 0xF0, 0x40,  // C......@
                        /* 09A8 */  0x15, 0x62, 0xE8, 0xE0, 0x70, 0xB4, 0x3E, 0x3E,  // .b..p.>>
                        /* 09B0 */  0xE0, 0x2E, 0x0F, 0xEC, 0xF0, 0xE9, 0xC3, 0x03,  // ........
                        /* 09B8 */  0x3F, 0xD1, 0xF8, 0x84, 0xE5, 0xC3, 0x03, 0x3F,  // ?......?
                        /* 09C0 */  0xEE, 0xF9, 0xE4, 0xC9, 0x0F, 0x0F, 0x8E, 0x7E,  // .......~
                        /* 09C8 */  0x78, 0x80, 0x7E, 0xF6, 0xF4, 0xE1, 0x01, 0xFE,  // x.~.....
                        /* 09D0 */  0x11, 0x9A, 0x0F, 0x16, 0xFE, 0x34, 0x8D, 0x12,  // .....4..
                        /* 09D8 */  0xED, 0x10, 0xDF, 0x03, 0xCE, 0x23, 0x88, 0x71,  // .....#.q
                        /* 09E0 */  0x1E, 0xF6, 0x18, 0xEC, 0xC9, 0x9E, 0xB1, 0x5D,  // .......]
                        /* 09E8 */  0x1F, 0x21, 0x80, 0xE0, 0xFF, 0xFF, 0x08, 0x01,  // .!......
                        /* 09F0 */  0x5C, 0x0E, 0x69, 0x3E, 0x42, 0x80, 0xCB, 0xC7,  // \.i>B...
                        /* 09F8 */  0x11, 0x02, 0x74, 0xC7, 0x00, 0xE0, 0x28, 0xFB,  // ..t...(.
                        /* 0A00 */  0x20, 0x81, 0x92, 0x72, 0x90, 0xA0, 0xA7, 0x1C,  //  ..r....
                        /* 0A08 */  0x76, 0x91, 0xE0, 0xA7, 0x08, 0x26, 0xFD, 0x14,  // v....&..
                        /* 0A10 */  0x81, 0x3A, 0x48, 0xF8, 0x2C, 0xEA, 0x53, 0x04,  // .:H.,.S.
                        /* 0A18 */  0x3F, 0x0F, 0x73, 0x10, 0x9F, 0x22, 0x4C, 0xE3,  // ?.s.."L.
                        /* 0A20 */  0x53, 0x04, 0xDC, 0xC0, 0x67, 0x2C, 0x50, 0x4C,  // S...g,PL
                        /* 0A28 */  0xED, 0x78, 0xC1, 0x32, 0x7A, 0x9F, 0xF5, 0x7C,  // .x.2z..|
                        /* 0A30 */  0x5C, 0xF4, 0x89, 0xC3, 0x18, 0x67, 0x1F, 0x2E,  // \....g..
                        /* 0A38 */  0xEA, 0x0B, 0x1F, 0xC3, 0x62, 0x63, 0xC6, 0xFD,  // ....bc..
                        /* 0A40 */  0xFF, 0xC7, 0xCC, 0xA6, 0x62, 0x8C, 0xC3, 0xE7,  // ....b...
                        /* 0A48 */  0x27, 0x2D, 0xC0, 0xCB, 0x11, 0xDF, 0x07, 0x09,  // '-......
                        /* 0A50 */  0x70, 0x8D, 0xC5, 0x07, 0x09, 0x70, 0x9D, 0x04,  // p....p..
                        /* 0A58 */  0x80, 0x6F, 0xA8, 0xB3, 0x04, 0x4A, 0xDC, 0x09,  // .o...J..
                        /* 0A60 */  0xCD, 0x87, 0x63, 0xC4, 0x7C, 0x8F, 0xC6, 0x87,  // ..c.|...
                        /* 0A68 */  0xAF, 0x08, 0x67, 0x60, 0x9C, 0x73, 0xF3, 0x51,  // ..g`.s.Q
                        /* 0A70 */  0xD9, 0x30, 0x6F, 0x0F, 0xBE, 0xCA, 0x04, 0x09,  // .0o.....
                        /* 0A78 */  0xF3, 0x96, 0x1A, 0xE6, 0x3C, 0xC2, 0x44, 0x49,  // ....<.DI
                        /* 0A80 */  0xE0, 0x13, 0xAA, 0x0F, 0x15, 0xFC, 0x5C, 0xE1,  // ......\.
                        /* 0A88 */  0x23, 0x98, 0x0F, 0x15, 0x5C, 0x2A, 0x1C, 0x05,  // #...\*..
                        /* 0A90 */  0xF1, 0xA1, 0xC2, 0x32, 0x0E, 0x15, 0xA8, 0xFF,  // ...2....
                        /* 0A98 */  0xFF, 0xA1, 0x02, 0x4E, 0xEC, 0x93, 0x0E, 0x28,  // ...N...(
                        /* 0AA0 */  0xE4, 0x9F, 0x6A, 0x41, 0x77, 0x14, 0xF0, 0x08,  // ..jAw...
                        /* 0AA8 */  0x61, 0xDC, 0x48, 0x7C, 0x32, 0xF1, 0xB9, 0xCD,  // a.H|2...
                        /* 0AB0 */  0x38, 0x06, 0x3B, 0x5C, 0x1C, 0x36, 0xE6, 0xC8,  // 8.;\.6..
                        /* 0AB8 */  0xEC, 0xB9, 0x62, 0xCE, 0x15, 0x80, 0x93, 0xA3,  // ..b.....
                        /* 0AC0 */  0x9C, 0xCF, 0x15, 0xE0, 0x32, 0x72, 0xAE, 0x00,  // ....2r..
                        /* 0AC8 */  0xDD, 0x61, 0x00, 0x78, 0xFD, 0xFF, 0x0F, 0x03,  // .a.x....
                        /* 0AD0 */  0xE0, 0x38, 0x19, 0xE2, 0xC6, 0x63, 0xD9, 0x47,  // .8...c.G
                        /* 0AD8 */  0x0B, 0xC4, 0xCC, 0x0F, 0xFB, 0x25, 0xE0, 0xC1,  // .....%..
                        /* 0AE0 */  0x82, 0x9F, 0x25, 0x70, 0x07, 0x1E, 0x7E, 0x30,  // ..%p..~0
                        /* 0AE8 */  0xF4, 0x91, 0x82, 0x8B, 0x82, 0xA3, 0x20, 0x3E,  // ...... >
                        /* 0AF0 */  0x52, 0xF8, 0xB8, 0xE3, 0x23, 0x05, 0xDC, 0x80,  // R...#...
                        /* 0AF8 */  0x47, 0x0A, 0x50, 0x9C, 0xBB, 0xC1, 0x37, 0x39,  // G.P...79
                        /* 0B00 */  0x36, 0x70, 0x78, 0x07, 0x79, 0xC0, 0xA2, 0x92,  // 6px.y...
                        /* 0B08 */  0x73, 0x04, 0xA8, 0xFE, 0xFF, 0x27, 0x00, 0xE0,  // s....'..
                        /* 0B10 */  0x74, 0x78, 0x80, 0x89, 0xF1, 0xF0, 0x00, 0xF8,  // tx......
                        /* 0B18 */  0x9A, 0x1C, 0x3B, 0x3C, 0x00, 0x66, 0xFF, 0xFF,  // ..;<.f..
                        /* 0B20 */  0x27, 0x06, 0x9F, 0x02, 0x7C, 0x78, 0x00, 0x6E,  // '...|x.n
                        /* 0B28 */  0x27, 0x00, 0xF8, 0xA2, 0x0F, 0x0F, 0x28, 0x51,  // '.....(Q
                        /* 0B30 */  0x10, 0x0A, 0x72, 0x78, 0x40, 0x1C, 0xE1, 0xE1,  // ..rx@...
                        /* 0B38 */  0x8C, 0xF5, 0x61, 0xC1, 0xF8, 0xBE, 0x81, 0xF9,  // ..a.....
                        /* 0B40 */  0x9C, 0x0A, 0x78, 0x19, 0x2F, 0x3F, 0x72, 0x83,  // ..x./?r.
                        /* 0B48 */  0x03, 0xE7, 0x04, 0x8E, 0x12, 0x77, 0x8A, 0x00,  // .....w..
                        /* 0B50 */  0xAE, 0xFF, 0xFF, 0x73, 0x2A, 0xF0, 0x3A, 0x7F,  // ...s*.:.
                        /* 0B58 */  0xFA, 0x9C, 0x0A, 0x9C, 0x8E, 0x01, 0xE0, 0x0E,  // ........
                        /* 0B60 */  0x74, 0x94, 0x40, 0x1D, 0x01, 0x1C, 0xEC, 0x2C,  // t.@....,
                        /* 0B68 */  0x0F, 0x69, 0x3A, 0xCF, 0x88, 0xB8, 0x81, 0x9E,  // .i:.....
                        /* 0B70 */  0x86, 0x5D, 0xA2, 0xE8, 0xDE, 0xEA, 0xA3, 0x20,  // .]..... 
                        /* 0B78 */  0x60, 0xE6, 0x72, 0xF0, 0x92, 0x70, 0xB0, 0x9E,  // `.r..p..
                        /* 0B80 */  0x22, 0xEE, 0x58, 0x09, 0xC3, 0xFB, 0x1C, 0x09,  // ".X.....
                        /* 0B88 */  0x56, 0xC0, 0x28, 0x8F, 0xBD, 0x3E, 0x56, 0xFE,  // V.(..>V.
                        /* 0B90 */  0xFF, 0x0F, 0xD3, 0x27, 0x69, 0xC0, 0xD5, 0x51,  // ...'i..Q
                        /* 0B98 */  0x10, 0x7C, 0x56, 0x8E, 0x82, 0x40, 0xEB, 0x30,  // .|V..@.0
                        /* 0BA0 */  0x00, 0x9C, 0x8E, 0x3C, 0x38, 0x0E, 0xC7, 0x38,  // ...<8..8
                        /* 0BA8 */  0x4F, 0x23, 0x6E, 0x14, 0xB8, 0x03, 0x0F, 0xF6,  // O#n.....
                        /* 0BB0 */  0x1C, 0xE6, 0x43, 0x05, 0x17, 0x4C, 0xA1, 0x13,  // ..C..L..
                        /* 0BB8 */  0x8F, 0x0F, 0x15, 0x5C, 0x20, 0x1C, 0x05, 0xF1,  // ...\ ...
                        /* 0BC0 */  0xA1, 0xC2, 0xE1, 0x0F, 0x3C, 0x50, 0xFE, 0xFF,  // ....<P..
                        /* 0BC8 */  0x87, 0x0A, 0x5C, 0xD8, 0x23, 0x35, 0x28, 0xCE,  // ..\.#5(.
                        /* 0BD0 */  0x01, 0x07, 0x0E, 0x96, 0xE1, 0xB1, 0x09, 0xC3,  // ........
                        /* 0BD8 */  0x9C, 0x3A, 0xF6, 0x72, 0xF2, 0x48, 0x60, 0x1C,  // .:.r.H`.
                        /* 0BE0 */  0x7E, 0xA0, 0x06, 0xBC, 0x84, 0x3C, 0x4F, 0x80,  // ~....<O.
                        /* 0BE8 */  0x4E, 0xCB, 0x79, 0x02, 0x74, 0xE7, 0x00, 0xE0,  // N.y.t...
                        /* 0BF0 */  0x19, 0xE0, 0x28, 0x81, 0xFA, 0xFF, 0x73, 0x38,  // ..(...s8
                        /* 0BF8 */  0xCC, 0x61, 0x0C, 0x71, 0x94, 0x80, 0x29, 0xFE,  // .a.q..).
                        /* 0C00 */  0x28, 0x81, 0x3A, 0x4D, 0xF8, 0x38, 0xE6, 0xA3,  // (.:M.8..
                        /* 0C08 */  0x04, 0x97, 0x09, 0x47, 0x41, 0x7C, 0x94, 0xB0,  // ...GA|..
                        /* 0C10 */  0x84, 0xE3, 0x0E, 0xF4, 0xC8, 0xC7, 0x1D, 0x50,  // .......P
                        /* 0C18 */  0x80, 0xF8, 0xD0, 0x04, 0xAE, 0x31, 0x83, 0xF3,  // .....1..
                        /* 0C20 */  0x38, 0x06, 0x38, 0x3A, 0xD5, 0xF9, 0x34, 0x01,  // 8.8:..4.
                        /* 0C28 */  0x2E, 0x2F, 0xA7, 0x09, 0xD0, 0xFD, 0xFF, 0x8F,  // ./......
                        /* 0C30 */  0x02, 0xC0, 0x39, 0xC8, 0x61, 0x11, 0x1D, 0xE9,  // ..9.a...
                        /* 0C38 */  0x48, 0x06, 0x8A, 0x71, 0xBF, 0x4D, 0xFA, 0x60,  // H..q.M.`
                        /* 0C40 */  0xA4, 0x23, 0x05, 0xEA, 0x3C, 0xE6, 0x33, 0x85,  // .#..<.3.
                        /* 0C48 */  0x8F, 0x14, 0x5C, 0x28, 0x1C, 0x05, 0xF1, 0x91,  // ..\(....
                        /* 0C50 */  0xC2, 0x22, 0x8E, 0x14, 0xD0, 0x43, 0x1F, 0x29,  // ."...C.)
                        /* 0C58 */  0x40, 0x21, 0xFE, 0xD0, 0x04, 0x64, 0xA0, 0x8E,  // @!...d..
                        /* 0C60 */  0xC3, 0x27, 0x72, 0xDF, 0x97, 0x8C, 0xF7, 0xCA,  // .'r.....
                        /* 0C68 */  0x04, 0xEF, 0x4C, 0x01, 0x4C, 0xFF, 0xFF, 0x67,  // ..L.L..g
                        /* 0C70 */  0x0A, 0x70, 0x1D, 0x9C, 0x7C, 0xA6, 0x00, 0x17,  // .p..|...
                        /* 0C78 */  0x9C, 0xCF, 0x14, 0xE0, 0x3A, 0x0B, 0x00, 0x6F,  // ....:..o
                        /* 0C80 */  0xA1, 0x87, 0x6B, 0xF4, 0x49, 0xC2, 0x27, 0x21,  // ..k.I.'!
                        /* 0C88 */  0x76, 0x9B, 0xF0, 0x91, 0x07, 0x2B, 0xF9, 0x40,  // v....+.@
                        /* 0C90 */  0x81, 0x3A, 0xCB, 0xFA, 0xAC, 0xE8, 0x03, 0x05,  // .:......
                        /* 0C98 */  0x17, 0x07, 0x47, 0x41, 0x7C, 0xA0, 0x70, 0xF0,  // ..GA|.p.
                        /* 0CA0 */  0xC3, 0x18, 0xF4, 0xA0, 0x87, 0x31, 0x50, 0x08,  // .....1P.
                        /* 0CA8 */  0x3E, 0x35, 0x81, 0x6E, 0xB6, 0x30, 0xEE, 0x4C,  // >5.n.0.L
                        /* 0CB0 */  0xB0, 0xFF, 0xFF, 0x47, 0x09, 0xC0, 0xC9, 0x11,  // ...G....
                        /* 0CB8 */  0xDD, 0x47, 0x09, 0x70, 0x99, 0x39, 0x4A, 0x80,  // .G.p.9J.
                        /* 0CC0 */  0xEE, 0x14, 0x00, 0xFC, 0x84, 0x1F, 0x22, 0xD0,  // ......".
                        /* 0CC8 */  0x47, 0x44, 0x1F, 0x80, 0xD8, 0x21, 0x02, 0xC6,  // GD...!..
                        /* 0CD0 */  0x09, 0xD6, 0x87, 0x08, 0x7E, 0x0A, 0xF3, 0x41,  // ....~..A
                        /* 0CD8 */  0xC2, 0x87, 0x08, 0x7E, 0xE8, 0xF7, 0xB1, 0x9F,  // ...~....
                        /* 0CE0 */  0x1F, 0x22, 0x4C, 0xE3, 0x43, 0x04, 0xDC, 0x83,  // ."L.C...
                        /* 0CE8 */  0xBF, 0x0F, 0x39, 0xF0, 0x27, 0x78, 0xBC, 0xD8,  // ..9.'x..
                        /* 0CF0 */  0xFF, 0xFF, 0x61, 0x09, 0xFE, 0x78, 0xC1, 0x76,  // ..a..x.v
                        /* 0CF8 */  0x55, 0xC2, 0x1F, 0x24, 0x00, 0x2B, 0xC7, 0x11,  // U..$.+..
                        /* 0D00 */  0x1F, 0x24, 0xC0, 0xA5, 0xE6, 0x20, 0x01, 0xBA,  // .$... ..
                        /* 0D08 */  0x93, 0x00, 0xF0, 0x95, 0x7B, 0x98, 0x40, 0x1D,  // ....{.@.
                        /* 0D10 */  0xC7, 0x7D, 0xB2, 0xF6, 0x38, 0x18, 0xC6, 0x31,  // .}..8..1
                        /* 0D18 */  0xBF, 0x01, 0x84, 0x78, 0x37, 0xF3, 0xD9, 0x15,  // ...x7...
                        /* 0D20 */  0xD6, 0xFF, 0xFF, 0xEC, 0x0A, 0x7C, 0xCE, 0x12,  // .....|..
                        /* 0D28 */  0xB8, 0x43, 0x26, 0x78, 0x86, 0xCC, 0xE7, 0xC6,  // .C&x....
                        /* 0D30 */  0x40, 0x42, 0x3D, 0x25, 0xF9, 0x18, 0x70, 0x2A,  // @B=%..p*
                        /* 0D38 */  0x07, 0x1B, 0x27, 0xC8, 0x2B, 0x81, 0x87, 0x6B,  // ..'.+..k
                        /* 0D40 */  0x24, 0x9F, 0x9C, 0x82, 0x3C, 0x25, 0x9C, 0x42,  // $...<%.B
                        /* 0D48 */  0xD4, 0xD7, 0xB7, 0x87, 0x83, 0xA6, 0xCE, 0xAE,  // ........
                        /* 0D50 */  0x80, 0x48, 0x37, 0x67, 0x57, 0xA0, 0x75, 0x0E,  // .H7gW.u.
                        /* 0D58 */  0x80, 0xFF, 0xFF, 0x3F, 0x07, 0xC0, 0x3F, 0x77,  // ...?..?w
                        /* 0D60 */  0xC1, 0x39, 0x47, 0xE0, 0x7C, 0x4E, 0x5B, 0x07,  // .9G.|N[.
                        /* 0D68 */  0x09, 0x7E, 0xEE, 0x02, 0x8E, 0x07, 0x09, 0xDC,  // .~......
                        /* 0D70 */  0x11, 0x09, 0x3C, 0x23, 0xC6, 0x8F, 0xCE, 0xC7,  // ..<#....
                        /* 0D78 */  0x08, 0xC0, 0xDB, 0xB9, 0x0B, 0x7C, 0x23, 0xF4,  // .....|#.
                        /* 0D80 */  0x31, 0x02, 0xEE, 0xFF, 0xFF, 0xDC, 0x05, 0xDE,  // 1.......
                        /* 0D88 */  0x53, 0x00, 0x78, 0x25, 0x1D, 0x22, 0x50, 0xE3,  // S.x%."P.
                        /* 0D90 */  0xF2, 0x69, 0xCB, 0x87, 0x08, 0x3C, 0xF4, 0x63,  // .i...<.c
                        /* 0D98 */  0xE1, 0xB1, 0x3C, 0x5B, 0xB3, 0x73, 0x34, 0x3F,  // ..<[.s4?
                        /* 0DA0 */  0xD7, 0x70, 0x79, 0xA7, 0x08, 0x94, 0x20, 0x38,  // .py... 8
                        /* 0DA8 */  0x0A, 0xE2, 0x53, 0x84, 0x4F, 0x35, 0x3E, 0x45,  // ..S.O5>E
                        /* 0DB0 */  0xC0, 0x0D, 0x77, 0x8A, 0x00, 0x85, 0xC8, 0x01,  // ..w.....
                        /* 0DB8 */  0x83, 0xFC, 0x12, 0xE9, 0xE9, 0xB1, 0xF3, 0x03,  // ........
                        /* 0DC0 */  0xE0, 0x24, 0xD4, 0xF9, 0x01, 0xCA, 0xFF, 0xFF,  // .$......
                        /* 0DC8 */  0xFC, 0x00, 0xD7, 0xCE, 0xF9, 0x01, 0x74, 0xE3,  // ......t.
                        /* 0DD0 */  0x07, 0x1E, 0x82, 0x4F, 0x0E, 0xA8, 0xB1, 0x3B,  // ...O...;
                        /* 0DD8 */  0xC8, 0xC9, 0x01, 0x71, 0xAD, 0x67, 0x47, 0xAE,  // ...q.gG.
                        /* 0DE0 */  0x43, 0x78, 0x49, 0x38, 0x8B, 0xC3, 0xA9, 0x19,  // CxI8....
                        /* 0DE8 */  0x48, 0x57, 0x2E, 0x86, 0x13, 0xE5, 0x29, 0xD5,  // HW....).
                        /* 0DF0 */  0xE7, 0x2E, 0x13, 0xF8, 0xA0, 0xE5, 0xE3, 0x03,  // ........
                        /* 0DF8 */  0x3F, 0xD2, 0xF8, 0xD4, 0xEC, 0xE3, 0x03, 0x97,  // ?.......
                        /* 0E00 */  0x06, 0x47, 0x41, 0x7C, 0x7C, 0x70, 0xEC, 0xE3,  // .GA||p..
                        /* 0E08 */  0x03, 0xF4, 0x98, 0xC7, 0x07, 0x50, 0xC8, 0x1D,  // .....P..
                        /* 0E10 */  0x2F, 0xE8, 0xA6, 0x88, 0x47, 0x3A, 0x46, 0x2C,  // /...G:F,
                        /* 0E18 */  0xD0, 0x39, 0x62, 0xCE, 0x10, 0xC0, 0xED, 0xFF,  // .9b.....
                        /* 0E20 */  0x7F, 0x86, 0x00, 0x6F, 0xBC, 0x33, 0x04, 0xE8,  // ...o.3..
                        /* 0E28 */  0xF4, 0x9C, 0x21, 0x40, 0x77, 0x08, 0x00, 0x6E,  // ..!@w..n
                        /* 0E30 */  0xA7, 0x2C, 0x1C, 0x87, 0x0F, 0x7F, 0x98, 0xE1,  // .,......
                        /* 0E38 */  0xF9, 0x84, 0x63, 0xE4, 0x63, 0x78, 0xAB, 0xF0,  // ..c.cx..
                        /* 0E40 */  0xC4, 0x8E, 0xE4, 0x10, 0x02, 0x3D, 0x44, 0x00,  // .....=D.
                        /* 0E48 */  0x86, 0xA6, 0x87, 0xBB, 0x84, 0xF0, 0xF9, 0xF1,  // ........
                        /* 0E50 */  0xC3, 0x1A, 0x83, 0xC6, 0x1C, 0x22, 0x70, 0xFF,  // ....."p.
                        /* 0E58 */  0xFF, 0x43, 0x04, 0xE0, 0xCD, 0xCF, 0x21, 0x02,  // .C....!.
                        /* 0E60 */  0xE8, 0x1D, 0x02, 0xC0, 0x25, 0xFF, 0x10, 0x81,  // ....%...
                        /* 0E68 */  0x1A, 0x95, 0xE3, 0x1C, 0x19, 0x04, 0x7B, 0x1E,  // ......{.
                        /* 0E70 */  0x27, 0xFA, 0x62, 0x8F, 0x9B, 0x62, 0x68, 0xCF,  // '.b..bh.
                        /* 0E78 */  0x22, 0xCC, 0x31, 0x44, 0x8A, 0xF0, 0x50, 0x61,  // ".1D..Pa
                        /* 0E80 */  0xFC, 0x9E, 0x0F, 0xCF, 0x3E, 0x47, 0xA0, 0x4E,  // ....>G.N
                        /* 0E88 */  0x80, 0x3E, 0x4B, 0xF8, 0x1C, 0xC1, 0x25, 0xC2,  // .>K...%.
                        /* 0E90 */  0x51, 0x10, 0x9F, 0x23, 0x1C, 0xFF, 0x1C, 0x01,  // Q..#....
                        /* 0E98 */  0x3D, 0xEE, 0x39, 0x02, 0x14, 0xD3, 0x39, 0x66,  // =.9...9f
                        /* 0EA0 */  0xCC, 0xFF, 0x7F, 0xCC, 0x70, 0x27, 0x87, 0x59,  // ....p'.Y
                        /* 0EA8 */  0xE7, 0xD1, 0x61, 0xEF, 0x21, 0x30, 0xF0, 0xE3,  // ..a.!0..
                        /* 0EB0 */  0xBC, 0xDF, 0xFA, 0x42, 0x12, 0x31, 0xA6, 0xEF,  // ...B.1..
                        /* 0EB8 */  0x48, 0x3E, 0x01, 0x02, 0x5E, 0x0E, 0x24, 0x3E,  // H>..^.$>
                        /* 0EC0 */  0x4B, 0x80, 0xEB, 0x9B, 0xE0, 0xB3, 0x04, 0xB8,  // K.......
                        /* 0EC8 */  0x0E, 0x02, 0xC0, 0xF5, 0xBC, 0x8C, 0x1B, 0x99,  // ........
                        /* 0ED0 */  0xCF, 0xF2, 0x3E, 0xDE, 0xB3, 0xC3, 0x04, 0xBC,  // ..>.....
                        /* 0ED8 */  0x03, 0x3D, 0xF6, 0xFF, 0x7F, 0xCC, 0x01, 0x8E,  // .=......
                        /* 0EE0 */  0xC3, 0x31, 0x34, 0x3B, 0x92, 0x80, 0x69, 0x84,  // .14;..i.
                        /* 0EE8 */  0x6C, 0x99, 0x47, 0x0E, 0xF7, 0x2C, 0x0F, 0x38,  // l.G..,.8
                        /* 0EF0 */  0x3A, 0xE6, 0x80, 0xCF, 0xD0, 0x31, 0x07, 0x68,  // :....1.h
                        /* 0EF8 */  0x1D, 0x02, 0xE0, 0xFD, 0xFF, 0x0F, 0x01, 0x70,  // .......p
                        /* 0F00 */  0xCF, 0x11, 0x70, 0x0E, 0x3E, 0xEC, 0x1C, 0x01,  // ..p.>...
                        /* 0F08 */  0x98, 0x38, 0x7D, 0x81, 0xFB, 0x1C, 0x01, 0xF8,  // .8}.....
                        /* 0F10 */  0x56, 0x74, 0x8E, 0x80, 0xF2, 0xFF, 0x3F, 0x7D,  // Vt....?}
                        /* 0F18 */  0x01, 0x97, 0x43, 0x00, 0xB8, 0x64, 0x9F, 0x23,  // ..C..d.#
                        /* 0F20 */  0x50, 0xD2, 0x20, 0x14, 0xE6, 0xF4, 0x05, 0x69,  // P. ....i
                        /* 0F28 */  0xD0, 0x07, 0x10, 0xFF, 0x08, 0x8F, 0xC5, 0x43,  // .......C
                        /* 0F30 */  0xB0, 0xC6, 0x5B, 0x0F, 0x92, 0xC0, 0xA7, 0x79,  // ..[....y
                        /* 0F38 */  0xC0, 0xCB, 0xF4, 0xF0, 0x97, 0x24, 0xF0, 0x1C,  // .....$..
                        /* 0F40 */  0x25, 0x80, 0xEF, 0xFF, 0xFF, 0x34, 0x0F, 0x9C,  // %....4..
                        /* 0F48 */  0x1C, 0x9D, 0xE6, 0x81, 0xD6, 0x29, 0x00, 0xBC,  // .....)..
                        /* 0F50 */  0xD2, 0xCF, 0x12, 0x28, 0x49, 0x87, 0x68, 0x7A,  // ...(I.hz
                        /* 0F58 */  0xE8, 0x61, 0xB7, 0x57, 0xFC, 0x44, 0x30, 0x27,  // .a.W.D0'
                        /* 0F60 */  0x0B, 0x72, 0x8E, 0x40, 0x9D, 0x71, 0x2C, 0xF7,  // .r.@.q,.
                        /* 0F68 */  0x1C, 0x81, 0x3A, 0xD3, 0xFB, 0x54, 0xCF, 0xCF,  // ..:..T..
                        /* 0F70 */  0x11, 0x0E, 0x7F, 0x8E, 0x80, 0x7E, 0xAE, 0xF7,  // .....~..
                        /* 0F78 */  0xB9, 0x0B, 0xFE, 0x70, 0x0E, 0x19, 0x2C, 0xAE,  // ...p..,.
                        /* 0F80 */  0xCF, 0xBA, 0x10, 0xC6, 0xEA, 0xE1, 0x31, 0x98,  // ......1.
                        /* 0F88 */  0x58, 0x67, 0x1D, 0x21, 0x88, 0x8F, 0x24, 0x46,  // Xg.!..$F
                        /* 0F90 */  0xF6, 0x7D, 0xC4, 0xDE, 0xE7, 0x4C, 0xC6, 0x70,  // .}...L.p
                        /* 0F98 */  0x24, 0x3E, 0x49, 0xE0, 0xFE, 0xFF, 0x27, 0x09,  // $>I...'.
                        /* 0FA0 */  0xC0, 0xC3, 0x79, 0xC4, 0x27, 0x09, 0x70, 0x1D,  // ..y.'.p.
                        /* 0FA8 */  0x11, 0x7C, 0x92, 0x00, 0x17, 0xD8, 0xA3, 0x17,  // .|......
                        /* 0FB0 */  0xD8, 0x4E, 0x02, 0x60, 0x04, 0x0B, 0x12, 0xE3,  // .N.`....
                        /* 0FB8 */  0xB5, 0xD5, 0xE2, 0x4F, 0x13, 0x50, 0xA2, 0x9C,  // ...O.P..
                        /* 0FC0 */  0xF0, 0x21, 0x9E, 0x26, 0xB0, 0x67, 0x56, 0xE0,  // .!.&.gV.
                        /* 0FC8 */  0xFB, 0xFF, 0x3F, 0x5B, 0x82, 0xE7, 0xA4, 0xC4,  // ..?[....
                        /* 0FD0 */  0x87, 0x0D, 0x1F, 0xB6, 0xAF, 0x79, 0x23, 0x4E,  // .....y#N
                        /* 0FD8 */  0x60, 0x80, 0xA3, 0x33, 0x2B, 0xF8, 0x2C, 0x9D,  // `..3+.,.
                        /* 0FE0 */  0x59, 0x81, 0xD6, 0x41, 0x00, 0x38, 0x88, 0x5E,  // Y..A.8.^
                        /* 0FE8 */  0xA0, 0x4E, 0x13, 0x5C, 0xD4, 0x91, 0xDA, 0x2F,  // .N.\.../
                        /* 0FF0 */  0x07, 0x1D, 0xF3, 0x39, 0xE8, 0xD1, 0x18, 0xFD,  // ...9....
                        /* 0FF8 */  0x40, 0xD8, 0x88, 0x5F, 0x7D, 0x3C, 0x86, 0x18,  // @.._}<..
                        /* 1000 */  0xFF, 0xFF, 0xD3, 0xF4, 0x15, 0xCC, 0x87, 0x0B,  // ........
                        /* 1008 */  0x9F, 0x23, 0x7C, 0x8C, 0xB0, 0x68, 0x0A, 0xC9,  // .#|..h..
                        /* 1010 */  0x3A, 0x4E, 0xA0, 0x84, 0x1C, 0x27, 0x28, 0x88,  // :N...'(.
                        /* 1018 */  0x01, 0x9D, 0xF2, 0x38, 0x81, 0x3E, 0xE2, 0xB0,  // ...8.>..
                        /* 1020 */  0x21, 0x3C, 0x6E, 0x38, 0xD7, 0x69, 0x82, 0x8E,  // !<n8.i..
                        /* 1028 */  0xD5, 0x23, 0xE7, 0x1A, 0x8E, 0x3A, 0x08, 0xD8,  // .#...:..
                        /* 1030 */  0x17, 0xB4, 0x83, 0x06, 0xCB, 0xE4, 0xF0, 0xBB,  // ........
                        /* 1038 */  0x3C, 0x01, 0x8F, 0xCD, 0x33, 0xB1, 0x9A, 0xBB,  // <...3...
                        /* 1040 */  0x01, 0x6A, 0x1E, 0xBE, 0x42, 0x60, 0x74, 0x1D,  // .j..B`t.
                        /* 1048 */  0x21, 0x40, 0xA6, 0xEF, 0x06, 0x01, 0x72, 0x74,  // !@....rt
                        /* 1050 */  0x7E, 0x90, 0xF3, 0xD8, 0xB9, 0x9C, 0xB1, 0x53,  // ~......S
                        /* 1058 */  0x10, 0x8F, 0xDD, 0x51, 0xC7, 0x8E, 0x96, 0x02,  // ...Q....
                        /* 1060 */  0xA2, 0xC1, 0xFA, 0x3E, 0x80, 0x25, 0x18, 0xEB,  // ...>.%..
                        /* 1068 */  0x6C, 0x02, 0x0A, 0x79, 0x27, 0x1C, 0x10, 0x0D,  // l..y'...
                        /* 1070 */  0x84, 0x1D, 0xBA, 0x3C, 0x11, 0x7E, 0x1E, 0x81,  // ...<.~..
                        /* 1078 */  0xF7, 0xFF, 0x1F, 0x9B, 0xCF, 0x23, 0xC0, 0x3B,  // .....#.;
                        /* 1080 */  0xDC, 0x79, 0x04, 0x74, 0x9A, 0xCE, 0x23, 0xA0,  // .y.t..#.
                        /* 1088 */  0x13, 0x7B, 0x1E, 0x01, 0xDD, 0x69, 0x02, 0xC6,  // .{...i..
                        /* 1090 */  0xD5, 0x80, 0x5F, 0x01, 0x70, 0x87, 0x4B, 0x9D,  // .._.p.K.
                        /* 1098 */  0x93, 0xD0, 0xA7, 0x23, 0x1F, 0x45, 0x60, 0xDD,  // ...#.E`.
                        /* 10A0 */  0x38, 0x7D, 0x40, 0x38, 0x2B, 0x13, 0x58, 0xE6,  // 8}@8+.X.
                        /* 10A8 */  0x39, 0x09, 0x75, 0x7C, 0xB3, 0xBC, 0xE3, 0x03,  // 9.u|....
                        /* 10B0 */  0x4A, 0x10, 0x1C, 0x05, 0xF1, 0xF1, 0xC1, 0x87,  // J.......
                        /* 10B8 */  0x37, 0x9F, 0x93, 0xE0, 0x8E, 0xDF, 0x87, 0x07,  // 7.......
                        /* 10C0 */  0xF8, 0x22, 0x07, 0x0C, 0x8A, 0xFF, 0xFF, 0x59,  // .".....Y
                        /* 10C8 */  0x04, 0xD6, 0x5C, 0x3D, 0x3C, 0xCC, 0xF1, 0x08,  // ..\=<...
                        /* 10D0 */  0x70, 0x12, 0xEC, 0xFC, 0x00, 0x3A, 0x4F, 0xE7,  // p....:O.
                        /* 10D8 */  0x07, 0xD0, 0x0D, 0xE8, 0xF9, 0x01, 0xFC, 0x27,  // .......'
                        /* 10E0 */  0x00, 0xAC, 0xC8, 0xD3, 0x03, 0x8A, 0xC3, 0xF2,  // ........
                        /* 10E8 */  0x0F, 0xBB, 0x90, 0xE6, 0x10, 0x28, 0xFC, 0x6B,  // .....(.k
                        /* 10F0 */  0x8B, 0x0F, 0xE4, 0xE4, 0xF0, 0x80, 0x3A, 0x7F,  // ......:.
                        /* 10F8 */  0xFB, 0x00, 0xE1, 0xC3, 0x03, 0x17, 0x06, 0x47,  // .......G
                        /* 1100 */  0x41, 0x7C, 0x78, 0x70, 0xE8, 0xC3, 0x03, 0xF4,  // A|xp....
                        /* 1108 */  0x90, 0x87, 0x07, 0x68, 0xFF, 0xFF, 0xC3, 0x03,  // ...h....
                        /* 1110 */  0xEE, 0xF0, 0x01, 0x9E, 0xD1, 0x61, 0xE7, 0x78,  // .....a.x
                        /* 1118 */  0x76, 0x6D, 0x0D, 0x0F, 0x71, 0x2A, 0xC5, 0x1F,  // vm..q*..
                        /* 1120 */  0x20, 0x00, 0x2F, 0xE7, 0x19, 0xF0, 0x1D, 0xC2,  //  ./.....
                        /* 1128 */  0x7C, 0x9E, 0x01, 0x4E, 0x67, 0x00, 0xF0, 0x89,  // |..Ng...
                        /* 1130 */  0x3B, 0x42, 0xA0, 0xA5, 0x9F, 0x67, 0x10, 0xE7,  // ;B...g..
                        /* 1138 */  0x07, 0x0C, 0xC8, 0x63, 0x1B, 0xF6, 0xD4, 0xED,  // ...c....
                        /* 1140 */  0x23, 0x04, 0x17, 0x49, 0xA1, 0x03, 0xA4, 0x8F,  // #..I....
                        /* 1148 */  0x10, 0xFC, 0xFF, 0x2F, 0x0A, 0x8E, 0x82, 0xF8,  // .../....
                        /* 1150 */  0x08, 0xE1, 0xC0, 0x47, 0x08, 0xE8, 0x67, 0x66,  // ...G..gf
                        /* 1158 */  0x1F, 0x21, 0xE0, 0x9F, 0x3F, 0xC0, 0x37, 0x5A,  // .!..?.7Z
                        /* 1160 */  0xEC, 0xFC, 0x70, 0x07, 0x1A, 0xC0, 0xA4, 0xA9,  // ..p.....
                        /* 1168 */  0x03, 0x0D, 0xD0, 0x3B, 0x01, 0xC0, 0x3F, 0x3E,  // ...;..?>
                        /* 1170 */  0xC0, 0x39, 0xEB, 0xFA, 0xFF, 0x7F, 0x7C, 0x00,  // .9....|.
                        /* 1178 */  0xFE, 0x07, 0x6E, 0xDC, 0x68, 0xC1, 0x73, 0x32,  // ..n.h.s2
                        /* 1180 */  0xE6, 0xC7, 0x07, 0xC0, 0xB1, 0xAA, 0xE3, 0x03,  // ........
                        /* 1188 */  0xD0, 0x3A, 0x01, 0xF0, 0xFF, 0xFF, 0x09, 0x00,  // .:......
                        /* 1190 */  0xBE, 0xD4, 0xB3, 0x1E, 0x3A, 0xC2, 0xF1, 0x0A,  // ....:...
                        /* 1198 */  0x12, 0xCE, 0xE3, 0xB6, 0x51, 0x7C, 0x50, 0x7D,  // ....Q|P}
                        /* 11A0 */  0xF8, 0xF3, 0xF1, 0x9A, 0x9D, 0x1F, 0xF8, 0x11,  // ........
                        /* 11A8 */  0xC2, 0x07, 0x2C, 0x9F, 0x1F, 0xB8, 0x34, 0x38,  // ..,...48
                        /* 11B0 */  0x0A, 0xE2, 0xF3, 0x83, 0x63, 0x9F, 0x1F, 0xA0,  // ....c...
                        /* 11B8 */  0x9F, 0x8C, 0x7D, 0x9A, 0x81, 0x2F, 0xF7, 0x30,  // ..}../.0
                        /* 11C0 */  0x04, 0xDA, 0xE9, 0x61, 0x60, 0x8E, 0x8F, 0xDD,  // ...a`...
                        /* 11C8 */  0x86, 0x60, 0x1C, 0x21, 0x00, 0x27, 0xF1, 0x8E,  // .`.!.'..
                        /* 11D0 */  0x10, 0xA0, 0x73, 0x75, 0x84, 0x80, 0xF6, 0xFF,  // ..su....
                        /* 11D8 */  0x3F, 0x42, 0xC0, 0x3B, 0x04, 0x00, 0xB7, 0x33,  // ?B.;...3
                        /* 11E0 */  0x0D, 0xCC, 0x23, 0x04, 0x7E, 0x88, 0x6F, 0xA3,  // ..#.~.o.
                        /* 11E8 */  0xFC, 0x4C, 0x03, 0xF8, 0x19, 0x2E, 0x9C, 0xF9,  // .L......
                        /* 11F0 */  0x61, 0xCE, 0x34, 0x80, 0x99, 0xFF, 0xFF, 0x09,  // a.4.....
                        /* 11F8 */  0x02, 0x5C, 0xA0, 0x3E, 0xD3, 0x00, 0xB7, 0x13,  // .\.>....
                        /* 1200 */  0x00, 0xFC, 0xF3, 0x1E, 0xCC, 0xE3, 0x03, 0xB0,  // ........
                        /* 1208 */  0x3F, 0xEF, 0x81, 0xFB, 0xF8, 0x00, 0xFC, 0xFF,  // ?.......
                        /* 1210 */  0xFF, 0xC7, 0x07, 0xE0, 0x78, 0x91, 0x7A, 0xDE,  // ....x.z.
                        /* 1218 */  0x03, 0x76, 0x27, 0x00, 0xF8, 0x62, 0x8F, 0x0F,  // .v'..b..
                        /* 1220 */  0xA8, 0x23, 0xAA, 0x4F, 0x58, 0x3E, 0x3E, 0xC0,  // .#.OX>>.
                        /* 1228 */  0xBA, 0x52, 0xB0, 0x89, 0x18, 0xA6, 0xE7, 0x13,  // .R......
                        /* 1230 */  0x31, 0x20, 0x67, 0xBC, 0x70, 0xE6, 0x87, 0x3D,  // 1 g.p..=
                        /* 1238 */  0x42, 0x80, 0xE5, 0xFF, 0x7F, 0x84, 0x00, 0xEE,  // B.......
                        /* 1240 */  0x87, 0x10, 0x1F, 0x21, 0xC0, 0xA5, 0xEB, 0x08,  // ...!....
                        /* 1248 */  0x01, 0x3A, 0xC1, 0x47, 0x08, 0xA0, 0x70, 0x0A,  // .:.G..p.
                        /* 1250 */  0x80, 0x7B, 0x4A, 0xC7, 0x1D, 0x23, 0x1C, 0xE0,  // .{J..#..
                        /* 1258 */  0x18, 0x81, 0x98, 0x6E, 0xCC, 0xDE, 0x51, 0x34,  // ...n..Q4
                        /* 1260 */  0x86, 0xA3, 0x3E, 0xC1, 0xA3, 0x30, 0x7C, 0x9C,  // ..>..0|.
                        /* 1268 */  0xA7, 0x0A, 0xE4, 0x31, 0x02, 0x75, 0x8A, 0xF0,  // ...1.u..
                        /* 1270 */  0xB9, 0xC6, 0xC7, 0x08, 0x2E, 0x0B, 0x8E, 0x82,  // ........
                        /* 1278 */  0xF8, 0x18, 0xE1, 0xC8, 0xC7, 0x08, 0xE8, 0x11,  // ........
                        /* 1280 */  0x8F, 0x11, 0xA0, 0x38, 0x10, 0x1C, 0x33, 0xAC,  // ...8..3.
                        /* 1288 */  0xFF, 0xFF, 0x98, 0xE1, 0x4D, 0x10, 0x03, 0x73,  // ....M..s
                        /* 1290 */  0x84, 0xB8, 0x09, 0xE3, 0x4E, 0x11, 0x80, 0x93,  // ....N...
                        /* 1298 */  0x68, 0xA7, 0x08, 0xD0, 0xF9, 0x3A, 0x45, 0x80,  // h....:E.
                        /* 12A0 */  0xEE, 0x08, 0x00, 0x9C, 0x8E, 0x10, 0x38, 0x0E,  // ......8.
                        /* 12A8 */  0xCB, 0x3F, 0x42, 0xA0, 0x70, 0x63, 0xFA, 0x88,  // .?B.pc..
                        /* 12B0 */  0x70, 0x22, 0x71, 0x0E, 0xEB, 0x34, 0x9E, 0x01,  // p"q..4..
                        /* 12B8 */  0x03, 0x3D, 0xD6, 0x00, 0x97, 0xFF, 0xFF, 0xB1,  // .=......
                        /* 12C0 */  0x06, 0x78, 0x81, 0x1C, 0xC7, 0xCB, 0x80, 0x6F,  // .x.....o
                        /* 12C8 */  0x1F, 0x6C, 0x88, 0x58, 0xA0, 0x53, 0xC4, 0x9C,  // .l.X.S..
                        /* 12D0 */  0x20, 0x00, 0x27, 0xE1, 0x4E, 0x10, 0xA0, 0x1B,  //  .'.N...
                        /* 12D8 */  0x9A, 0x4F, 0x10, 0xE0, 0x3A, 0x03, 0x00, 0xAF,  // .O..:...
                        /* 12E0 */  0xA3, 0x16, 0x6E, 0x18, 0x3E, 0xD4, 0xF8, 0x6C,  // ..n.>..l
                        /* 12E8 */  0x0C, 0xC3, 0xE7, 0x45, 0x80, 0x88, 0x3E, 0x39,  // ...E..>9
                        /* 12F0 */  0xD0, 0xFF, 0x3F, 0x84, 0xCF, 0x10, 0x3E, 0xD4,  // ..?...>.
                        /* 12F8 */  0xF8, 0x00, 0xC1, 0xE5, 0xC1, 0x51, 0x10, 0x1F,  // .....Q..
                        /* 1300 */  0x20, 0x1C, 0xFD, 0x00, 0x01, 0x3D, 0xEA, 0x01,  //  ....=..
                        /* 1308 */  0x02, 0x14, 0xE3, 0xF5, 0x68, 0xC1, 0x31, 0xAF,  // ....h.1.
                        /* 1310 */  0xDA, 0xEF, 0x1E, 0x14, 0x31, 0x9C, 0x71, 0x7C,  // ....1.q|
                        /* 1318 */  0x81, 0xC5, 0x03, 0x05, 0x8F, 0x13, 0x3B, 0x44,  // ......;D
                        /* 1320 */  0xC5, 0x88, 0x3A, 0x09, 0x84, 0x88, 0xF6, 0x82,  // ..:.....
                        /* 1328 */  0xFD, 0x0C, 0x01, 0x58, 0x39, 0x17, 0xF9, 0x0C,  // ...X9...
                        /* 1330 */  0x01, 0x2E, 0x63, 0x67, 0x08, 0xD0, 0x1D, 0x03,  // ..cg....
                        /* 1338 */  0xC0, 0xFF, 0xFF, 0x3F, 0x06, 0x80, 0xE3, 0x38,  // ...?...8
                        /* 1340 */  0x8A, 0x1B, 0x89, 0x85, 0x1F, 0x6C, 0x10, 0x67,  // .....l.g
                        /* 1348 */  0x08, 0x9F, 0xDE, 0x71, 0xC7, 0x2C, 0xC0, 0xD0,  // ...q.,..
                        /* 1350 */  0x90, 0x61, 0xDD, 0xF5, 0x3D, 0x42, 0xCC, 0x31,  // .a..=B.1
                        /* 1358 */  0x0B, 0x70, 0x38, 0x1F, 0x1F, 0x21, 0xC0, 0xF1,  // .p8..!..
                        /* 1360 */  0xFF, 0x3F, 0x66, 0x81, 0xF7, 0x08, 0x00, 0x8E,  // .?f.....
                        /* 1368 */  0xE3, 0x03, 0x9C, 0x43, 0x20, 0x3B, 0x3E, 0x00,  // ...C ;>.
                        /* 1370 */  0xEB, 0x83, 0x3A, 0x6E, 0xB0, 0xE0, 0x39, 0x57,  // ..:n..9W
                        /* 1378 */  0xF3, 0xE3, 0x03, 0xE0, 0xF5, 0xFF, 0x7F, 0x7C,  // .......|
                        /* 1380 */  0xC0, 0x0F, 0xE8, 0xF1, 0x01, 0x58, 0x1D, 0x01,  // .....X..
                        /* 1388 */  0xC0, 0x25, 0xF5, 0xF8, 0x80, 0x1A, 0x93, 0x43,  // .%.....C
                        /* 1390 */  0x1C, 0x1F, 0x10, 0xE3, 0x8D, 0xFC, 0xC4, 0x75,  // .......u
                        /* 1398 */  0x70, 0x51, 0x0E, 0xF9, 0x30, 0x0C, 0xF2, 0xCC,  // pQ..0...
                        /* 13A0 */  0xE5, 0x69, 0x9D, 0xC5, 0x93, 0x60, 0x9C, 0xC3,  // .i...`..
                        /* 13A8 */  0xF0, 0xB9, 0x0F, 0x78, 0x9E, 0x21, 0x70, 0x87,  // ...x.!p.
                        /* 13B0 */  0x34, 0xF0, 0x8C, 0x98, 0xCF, 0x10, 0x73, 0x6A,  // 4.....sj
                        /* 13B8 */  0xF4, 0x10, 0x71, 0x03, 0xF7, 0x14, 0x31, 0x87,  // ..q...1.
                        /* 13C0 */  0x08, 0xE0, 0xF8, 0xFF, 0x3F, 0xF7, 0x01, 0x3F,  // ....?..?
                        /* 13C8 */  0x69, 0xE7, 0x3E, 0xA0, 0x75, 0x06, 0x00, 0xDF,  // i.>.u...
                        /* 13D0 */  0xD9, 0x18, 0xCE, 0x08, 0xD8, 0x44, 0x9E, 0x69,  // .....D.i
                        /* 13D8 */  0x7C, 0x88, 0x80, 0x7B, 0xAE, 0x01, 0xFC, 0x4C,  // |..{...L
                        /* 13E0 */  0x90, 0x9D, 0x21, 0xC0, 0xFA, 0xFF, 0x3F, 0xD7,  // ..!...?.
                        /* 13E8 */  0x00, 0xAE, 0xAC, 0x9D, 0x6B, 0x80, 0xDE, 0x11,  // ....k...
                        /* 13F0 */  0x00, 0x1C, 0x29, 0x96, 0xA6, 0x23, 0x04, 0x97,  // ..)..#..
                        /* 13F8 */  0x04, 0xA1, 0x54, 0xAF, 0x05, 0x9D, 0x44, 0x3D,  // ..T...D=
                        /* 1400 */  0xCE, 0xE3, 0x30, 0xF4, 0x93, 0xA8, 0x51, 0x22,  // ..0...Q"
                        /* 1408 */  0x1F, 0x41, 0xAD, 0x97, 0x05, 0xE1, 0xBF, 0xE4,  // .A......
                        /* 1410 */  0x3C, 0xAC, 0xB3, 0x0C, 0xA0, 0x3A, 0x3A, 0xF8,  // <....::.
                        /* 1418 */  0xE4, 0x60, 0xF5, 0x14, 0xD2, 0x75, 0x82, 0x40,  // .`...u.@
                        /* 1420 */  0x29, 0x39, 0x41, 0x50, 0x10, 0x03, 0x3A, 0xE6,  // )9AP..:.
                        /* 1428 */  0x09, 0x02, 0x7D, 0x70, 0x60, 0xB3, 0x2C, 0x1E,  // ..}p`.,.
                        /* 1430 */  0x44, 0xC1, 0x0E, 0x10, 0x74, 0x90, 0x1E, 0x32,  // D...t..2
                        /* 1438 */  0xD7, 0x70, 0x80, 0x40, 0xC0, 0x16, 0x39, 0x5A,  // .p.@..9Z
                        /* 1440 */  0xD0, 0x0C, 0xEC, 0xE8, 0x3D, 0xB1, 0xFF, 0xFF,  // ....=...
                        /* 1448 */  0x93, 0xBE, 0x6F, 0x02, 0x06, 0x8B, 0xF9, 0xD0,  // ..o.....
                        /* 1450 */  0x68, 0xAC, 0x50, 0x0F, 0x21, 0x09, 0xAA, 0x39,  // h.P.!..9
                        /* 1458 */  0x15, 0xA0, 0x06, 0xE2, 0xC3, 0x03, 0x46, 0xD7,  // ......F.
                        /* 1460 */  0xDD, 0x01, 0x64, 0xFA, 0xCE, 0x0E, 0x20, 0x47,  // ..d... G
                        /* 1468 */  0xE7, 0x37, 0x48, 0xC0, 0xC3, 0x4D, 0x81, 0xC1,  // .7H..M..
                        /* 1470 */  0x3C, 0x37, 0xF8, 0x78, 0x65, 0x94, 0x90, 0x31,  // <7.xe..1
                        /* 1478 */  0x9E, 0xB0, 0x5E, 0x15, 0xF8, 0x05, 0x00, 0x77,  // ..^....w
                        /* 1480 */  0x19, 0x81, 0x77, 0x9F, 0x22, 0x97, 0x11, 0xA0,  // ..w."...
                        /* 1488 */  0x7D, 0x8D, 0xF0, 0x65, 0x04, 0xFB, 0xFF, 0xBF,  // }..e....
                        /* 1490 */  0x8C, 0xC0, 0xD6, 0x76, 0x19, 0x01, 0x1D, 0xD6,  // ...v....
                        /* 1498 */  0x1B, 0x24, 0xD8, 0xE6, 0xE2, 0xD9, 0xE3, 0x2E,  // .$......
                        /* 14A0 */  0x01, 0x86, 0x89, 0xF1, 0x1E, 0xE0, 0x3B, 0x08,  // ......;.
                        /* 14A8 */  0xE6, 0x42, 0xE2, 0xA9, 0x3E, 0x0A, 0xE0, 0x08,  // .B..>...
                        /* 14B0 */  0x7C, 0x8F, 0xC4, 0x71, 0xF8, 0x56, 0x8B, 0x99,  // |..q.V..
                        /* 14B8 */  0xEE, 0x59, 0x18, 0xFD, 0xC0, 0x02, 0x7B, 0x96,  // .Y....{.
                        /* 14C0 */  0x07, 0x69, 0x68, 0x76, 0x67, 0xF3, 0x15, 0x89,  // .ihvg...
                        /* 14C8 */  0x4B, 0xA4, 0x90, 0xC0, 0x63, 0x04, 0x4A, 0x12,  // K...c.J.
                        /* 14D0 */  0x1C, 0x05, 0xF1, 0x31, 0xC2, 0x71, 0x8F, 0x11,  // ...1.q..
                        /* 14D8 */  0xD0, 0xE3, 0x1D, 0x23, 0x40, 0x71, 0x2F, 0x78,  // ...#@q/x
                        /* 14E0 */  0x8C, 0x00, 0xD3, 0xD8, 0x3C, 0xC4, 0xE3, 0xF3,  // ....<...
                        /* 14E8 */  0x68, 0x3D, 0x3E, 0x06, 0x74, 0x7E, 0x98, 0x0B,  // h=>.t~..
                        /* 14F0 */  0x12, 0xB0, 0xFA, 0xFF, 0x5F, 0x90, 0x80, 0xAD,  // ...._...
                        /* 14F8 */  0xB7, 0x5B, 0x2D, 0xD0, 0x3B, 0x02, 0x80, 0xE3,  // .[-.;...
                        /* 1500 */  0xF8, 0x80, 0x3B, 0x05, 0xF8, 0x9E, 0xE6, 0x01,  // ..;.....
                        /* 1508 */  0x30, 0x85, 0x63, 0xD2, 0x55, 0xE2, 0x44, 0xDF,  // 0.c.U.D.
                        /* 1510 */  0x25, 0x0C, 0x8C, 0xB9, 0xF3, 0xF3, 0xDB, 0x23,  // %......#
                        /* 1518 */  0x3F, 0xCE, 0xF8, 0xF4, 0xC0, 0x85, 0xC0, 0x51,  // ?......Q
                        /* 1520 */  0x10, 0x9F, 0x1E, 0x7C, 0x77, 0xF4, 0xE9, 0x01,  // ...|w...
                        /* 1528 */  0x6E, 0xA8, 0xD3, 0x03, 0x28, 0xC4, 0x5D, 0xD2,  // n...(.].
                        /* 1530 */  0x41, 0x74, 0xEA, 0xF0, 0xC1, 0x01, 0xFC, 0xFF,  // At......
                        /* 1538 */  0xFF, 0xC3, 0x0C, 0x60, 0x63, 0xBC, 0x3E, 0xCC,  // ...`c.>.
                        /* 1540 */  0x00, 0xC7, 0xF1, 0x33, 0xD4, 0xC7, 0xB4, 0x27,  // ...3...'
                        /* 1548 */  0x7D, 0x03, 0xC7, 0x7A, 0xA2, 0xC5, 0xE2, 0x3C,  // }..z...<
                        /* 1550 */  0x84, 0x19, 0xE3, 0xA5, 0x81, 0x13, 0xF8, 0x56,  // .......V
                        /* 1558 */  0x8B, 0x97, 0x7C, 0x81, 0x44, 0x40, 0x9E, 0x15,  // ..|.D@..
                        /* 1560 */  0x9B, 0xD3, 0xD3, 0xBF, 0x6F, 0x38, 0x67, 0xC6,  // ....o8g.
                        /* 1568 */  0xE0, 0x4E, 0xA1, 0xE2, 0xE3, 0x04, 0xEE, 0x08,  // .N......
                        /* 1570 */  0x81, 0x3A, 0x41, 0x58, 0xD4, 0x11, 0x02, 0x25,  // .:AX...%
                        /* 1578 */  0x03, 0x8E, 0x82, 0xF8, 0x08, 0xE1, 0xD3, 0x95,  // ........
                        /* 1580 */  0x8F, 0x10, 0x70, 0x23, 0xDD, 0x20, 0x41, 0x71,  // ..p#. Aq
                        /* 1588 */  0x1D, 0xF5, 0xB8, 0xC1, 0xF0, 0xFF, 0x27, 0x78,  // ......'x
                        /* 1590 */  0x0B, 0x78, 0xF0, 0xC1, 0x9C, 0x20, 0x00, 0x27,  // .x... .'
                        /* 1598 */  0x47, 0x22, 0x9F, 0x20, 0xC0, 0x65, 0xEE, 0x04,  // G". .e..
                        /* 15A0 */  0x01, 0x3A, 0xF9, 0x37, 0x47, 0xD0, 0x9D, 0x20,  // .:.7G.. 
                        /* 15A8 */  0x38, 0xE2, 0x83, 0x42, 0xC8, 0x27, 0x19, 0x0F,  // 8..B.'..
                        /* 15B0 */  0xC2, 0x40, 0x8F, 0x00, 0xFC, 0xFC, 0xC0, 0x6F,  // .@.....o
                        /* 15B8 */  0x0D, 0xB0, 0x2E, 0x27, 0xB8, 0x53, 0x04, 0xAC,  // ...'.S..
                        /* 15C0 */  0xB3, 0x05, 0x3B, 0x45, 0x00, 0xCF, 0xFF, 0xFF,  // ..;E....
                        /* 15C8 */  0x29, 0x02, 0x0C, 0xE7, 0x1A, 0xDC, 0x29, 0x02,  // ).....).
                        /* 15D0 */  0xF0, 0xAE, 0xEE, 0x14, 0x01, 0xB4, 0x8E, 0x35,  // .......5
                        /* 15D8 */  0xF8, 0x53, 0x04, 0x70, 0x10, 0x7B, 0x8A, 0x40,  // .S.p.{.@
                        /* 15E0 */  0xC9, 0x83, 0x90, 0xF8, 0x53, 0x04, 0xE2, 0xDC,  // ....S...
                        /* 15E8 */  0xFA, 0xAA, 0x70, 0x1C, 0x41, 0xDF, 0x76, 0x82,  // ..p.A.v.
                        /* 15F0 */  0x18, 0xE9, 0x1C, 0xFC, 0xFF, 0xBF, 0x0B, 0x46,  // .......F
                        /* 15F8 */  0x7F, 0x8B, 0xF0, 0xAC, 0x22, 0xBC, 0x0B, 0x1A,  // ...."...
                        /* 1600 */  0xF3, 0xF1, 0xF6, 0xF9, 0xCF, 0x73, 0x3B, 0x32,  // .....s;2
                        /* 1608 */  0x7E, 0xE0, 0x02, 0xBC, 0xDC, 0x19, 0x0F, 0x0D,  // ~.......
                        /* 1610 */  0x7B, 0xE0, 0x02, 0x1C, 0xBA, 0x3B, 0x70, 0x01,  // {....;p.
                        /* 1618 */  0xBD, 0xB1, 0xBC, 0x30, 0x60, 0x91, 0xFE, 0xFF,  // ...0`...
                        /* 1620 */  0x8F, 0x11, 0x3E, 0x31, 0xF8, 0xC0, 0xE5, 0x1B,  // ..>1....
                        /* 1628 */  0x03, 0xEE, 0x2E, 0xEA, 0x83, 0x00, 0xF6, 0x30,  // .......0
                        /* 1630 */  0x8A, 0x17, 0x7C, 0x8C, 0x40, 0xCC, 0x3A, 0x76,  // ..|.@.:v
                        /* 1638 */  0xF8, 0x1A, 0x27, 0x41, 0x8C, 0x1F, 0x4C, 0x09,  // ..'A..L.
                        /* 1640 */  0xF0, 0x11, 0x35, 0x7F, 0x04, 0xF0, 0xF9, 0x01,  // ..5.....
                        /* 1648 */  0x25, 0x8D, 0x42, 0x07, 0x08, 0x9F, 0x1F, 0xB8,  // %.B.....
                        /* 1650 */  0x14, 0x38, 0x0A, 0xE2, 0xDB, 0x36, 0x9C, 0xF3,  // .8...6..
                        /* 1658 */  0x03, 0x3E, 0xD6, 0xF9, 0x01, 0x14, 0x87, 0x0D,  // .>......
                        /* 1660 */  0x0F, 0x1A, 0x1C, 0x93, 0x3D, 0x36, 0x18, 0x07,  // ....=6..
                        /* 1668 */  0x08, 0xC0, 0xC9, 0xE9, 0xC8, 0x07, 0x08, 0x70,  // .......p
                        /* 1670 */  0x0D, 0xD8, 0x07, 0x08, 0x70, 0x81, 0xFC, 0xFF,  // ....p...
                        /* 1678 */  0x1F, 0x20, 0xC0, 0x76, 0x55, 0x60, 0x47, 0x1B,  // . .vU`G.
                        /* 1680 */  0x5F, 0x8B, 0xF9, 0xB4, 0xDF, 0x6C, 0x7C, 0x31,  // _....l|1
                        /* 1688 */  0x78, 0xAE, 0x7F, 0x43, 0xF6, 0x2D, 0x00, 0x06,  // x..C.-..
                        /* 1690 */  0x41, 0xB9, 0xC7, 0x07, 0xD4, 0x11, 0xC0, 0x87,  // A.......
                        /* 1698 */  0x1A, 0xCC, 0x98, 0xDF, 0x4D, 0x0D, 0x1D, 0xF6,  // ....M...
                        /* 16A0 */  0x8D, 0xC2, 0x77, 0x9C, 0x73, 0x0E, 0xF3, 0xC0,  // ..w.s...
                        /* 16A8 */  0x6C, 0x9C, 0x73, 0xF3, 0x58, 0x5E, 0x13, 0x3C,  // l.s.X^.<
                        /* 16B0 */  0x38, 0x1F, 0xD8, 0xD9, 0x11, 0x82, 0x1F, 0x6A,  // 8......j
                        /* 16B8 */  0x7C, 0xDC, 0xF2, 0x11, 0x82, 0xCB, 0x81, 0xA3,  // |.......
                        /* 16C0 */  0x20, 0x3E, 0x42, 0x38, 0xEA, 0x11, 0x02, 0xFA,  //  >B8....
                        /* 16C8 */  0xE9, 0xD6, 0x47, 0x08, 0xF8, 0xD7, 0x05, 0x0F,  // ..G.....
                        /* 16D0 */  0x1B, 0x1C, 0x30, 0x27, 0x87, 0x1B, 0x36, 0x1B,  // ..0'..6.
                        /* 16D8 */  0x1D, 0x3F, 0x44, 0x00, 0x4E, 0x82, 0x1E, 0x22,  // .?D.N.."
                        /* 16E0 */  0x20, 0xFC, 0xFF, 0x0F, 0x11, 0xB0, 0xED, 0x1D,  //  .......
                        /* 16E8 */  0x22, 0x40, 0x07, 0xF6, 0x10, 0x01, 0xB6, 0x91,  // "@......
                        /* 16F0 */  0x05, 0x7A, 0x2C, 0xF0, 0xC5, 0xD8, 0xE3, 0xC7,  // .z,.....
                        /* 16F8 */  0xDC, 0xD8, 0xF9, 0xC1, 0x01, 0x8F, 0xF4, 0xE2,  // ........
                        /* 1700 */  0x80, 0x3D, 0x36, 0xE8, 0x8C, 0x8C, 0x16, 0x7D,  // .=6....}
                        /* 1708 */  0x62, 0xD0, 0xC0, 0x4E, 0xE6, 0x84, 0x4F, 0xFB,  // b..N..O.
                        /* 1710 */  0xA1, 0xE6, 0x39, 0xD5, 0x18, 0xAF, 0x16, 0x3E,  // ..9....>
                        /* 1718 */  0xAC, 0x9A, 0xC0, 0x32, 0x8F, 0x10, 0xA8, 0x73,  // ...2...s
                        /* 1720 */  0x8D, 0xCF, 0x10, 0x3E, 0x42, 0x70, 0x41, 0x70,  // ...>BpAp
                        /* 1728 */  0x14, 0xC4, 0x47, 0x08, 0x87, 0x3D, 0x42, 0x40,  // ..G..=B@
                        /* 1730 */  0x0F, 0x77, 0x84, 0x00, 0xC5, 0x65, 0xEC, 0xA0,  // .w...e..
                        /* 1738 */  0xC1, 0x32, 0x38, 0x4F, 0xD8, 0x37, 0x36, 0x63,  // .28O.76c
                        /* 1740 */  0x74, 0x7D, 0xE1, 0x47, 0x4C, 0xE1, 0x50, 0x9F,  // t}.GL.P.
                        /* 1748 */  0x21, 0x80, 0xDD, 0xFF, 0xFF, 0x9C, 0x05, 0x4C,  // !......L
                        /* 1750 */  0xF5, 0x9D, 0xB3, 0x80, 0xD6, 0xF0, 0xCE, 0x1E,  // ........
                        /* 1758 */  0x73, 0x04, 0xE4, 0xB3, 0x3B, 0x83, 0x37, 0x83,  // s...;.7.
                        /* 1760 */  0x98, 0x3E, 0x61, 0x19, 0xCC, 0x67, 0x9A, 0x38,  // .>a..g.8
                        /* 1768 */  0xD1, 0x7C, 0x7E, 0xF0, 0x45, 0xC2, 0xA7, 0x2D,  // .|~.E..-
                        /* 1770 */  0xA3, 0xF9, 0xDA, 0xC0, 0xE2, 0x3D, 0x11, 0x7C,  // .....=.|
                        /* 1778 */  0xAE, 0xA1, 0x81, 0x60, 0x50, 0x1A, 0x0E, 0x0A,  // ...`P...
                        /* 1780 */  0x50, 0x06, 0x7A, 0x9C, 0x87, 0x77, 0x64, 0x4C,  // P.z..wdL
                        /* 1788 */  0x12, 0x1C, 0xEA, 0x0C, 0xE0, 0x91, 0x1D, 0xCA,  // ........
                        /* 1790 */  0x51, 0x9D, 0xCE, 0x09, 0x7B, 0x52, 0x4F, 0x9F,  // Q...{RO.
                        /* 1798 */  0x30, 0xA4, 0x40, 0xE8, 0x84, 0xC1, 0xEE, 0x61,  // 0.@....a
                        /* 17A0 */  0x11, 0x5F, 0x0E, 0x0D, 0x93, 0xC0, 0xA3, 0x67,  // ._.....g
                        /* 17A8 */  0x68, 0x1C, 0x1A, 0x3B, 0x0C, 0x5F, 0x0B, 0x82,  // h..;._..
                        /* 17B0 */  0x1D, 0xC4, 0xA3, 0x87, 0x4F, 0x8A, 0x6C, 0x42,  // ....O.lB
                        /* 17B8 */  0xCF, 0x04, 0xE5, 0x5E, 0x17, 0x74, 0x1B, 0x8A,  // ...^.t..
                        /* 17C0 */  0x1A, 0xE3, 0x65, 0xD7, 0x47, 0x21, 0x0D, 0x1E,  // ..e.G!..
                        /* 17C8 */  0x34, 0x67, 0x84, 0x77, 0x01, 0xCF, 0xD9, 0x68,  // 4g.w...h
                        /* 17D0 */  0x27, 0xF1, 0xFF, 0x7F, 0xD8, 0xF6, 0x15, 0x89,  // '.......
                        /* 17D8 */  0xDD, 0x27, 0x0C, 0xF4, 0x28, 0x62, 0x1C, 0x43,  // .'..(b.C
                        /* 17E0 */  0x3C, 0xB0, 0xF9, 0x4E, 0xC2, 0xCE, 0x04, 0xD8,  // <..N....
                        /* 17E8 */  0x23, 0x87, 0x21, 0x63, 0x1F, 0xA0, 0x09, 0xEC,  // #.!c....
                        /* 17F0 */  0xFE, 0xE6, 0xAD, 0x9B, 0xC8, 0xB9, 0x9C, 0xD2,  // ........
                        /* 17F8 */  0x83, 0x44, 0x88, 0xF7, 0xC3, 0xC6, 0x04, 0xD8,  // .D......
                        /* 1800 */  0x3A, 0x10, 0xE8, 0xF0, 0x10, 0xE1, 0x65, 0x22,  // :.....e"
                        /* 1808 */  0x4A, 0xA4, 0xD6, 0x26, 0x26, 0x28, 0x86, 0x11,  // J..&&(..
                        /* 1810 */  0xA5, 0x37, 0x14, 0x02, 0x1C, 0xBA, 0x36, 0x58,  // .7....6X
                        /* 1818 */  0x41, 0x1B, 0xF0, 0x85, 0x20, 0x44, 0xA4, 0x38,  // A... D.8
                        /* 1820 */  0xED, 0x0F, 0x82, 0x88, 0x7A, 0x43, 0xE8, 0x38,  // ....zC.8
                        /* 1828 */  0xE0, 0x43, 0xAD, 0x47, 0xC3, 0x4F, 0x16, 0x3E,  // .C.G.O.>
                        /* 1830 */  0x12, 0xF8, 0x72, 0xE9, 0xA3, 0x39, 0x3B, 0x48,  // ..r..9;H
                        /* 1838 */  0x79, 0x60, 0x8F, 0x19, 0xCF, 0x02, 0x1E, 0x35,  // y`.....5
                        /* 1840 */  0x3B, 0x7A, 0xF8, 0x48, 0xE1, 0xC3, 0x01, 0xFE,  // ;z.H....
                        /* 1848 */  0xD8, 0x10, 0xF0, 0x95, 0xCA, 0x67, 0x02, 0x8F,  // .....g..
                        /* 1850 */  0xD1, 0x70, 0x7C, 0x88, 0x9E, 0xAE, 0x27, 0x70,  // .p|...'p
                        /* 1858 */  0x88, 0x0C, 0xD0, 0x67, 0x10, 0xF8, 0xE3, 0xF1,  // ...g....
                        /* 1860 */  0x21, 0xC0, 0x33, 0x37, 0x81, 0x8F, 0xAA, 0x1E,  // !.37....
                        /* 1868 */  0x04, 0x1F, 0x99, 0xA1, 0x3D, 0xCF, 0xD3, 0x7A,  // ....=..z
                        /* 1870 */  0x17, 0xF0, 0x01, 0xC0, 0x87, 0x52, 0x02, 0xA1,  // .....R..
                        /* 1878 */  0x43, 0x8C, 0xC7, 0x03, 0xFE, 0xE3, 0xF2, 0x03,  // C.......
                        /* 1880 */  0x42, 0x84, 0x17, 0x06, 0xCF, 0xD7, 0x27, 0x05,  // B.....'.
                        /* 1888 */  0x1D, 0x2C, 0x74, 0xB0, 0xC1, 0x9D, 0x29, 0x7C,  // .,t...)|
                        /* 1890 */  0x4E, 0xE0, 0xA7, 0x0E, 0x9F, 0x11, 0x38, 0xFC,  // N.....8.
                        /* 1898 */  0x2B, 0x02, 0x3F, 0x92, 0xB0, 0xC0, 0xC7, 0x1B,  // +.?.....
                        /* 18A0 */  0x2A, 0x6A, 0xF0, 0xE4, 0xFF, 0x7F, 0xAC, 0xC0,  // *j......
                        /* 18A8 */  0x9C, 0x28, 0xD8, 0x45, 0x87, 0xC3, 0xB2, 0x43,  // .(.E...C
                        /* 18B0 */  0x0F, 0x19, 0x1E, 0x74, 0xC1, 0xC7, 0x09, 0xA0,  // ...t....
                        /* 18B8 */  0x75, 0x90, 0xE0, 0xC3, 0x86, 0x7F, 0xA5, 0x30,  // u......0
                        /* 18C0 */  0xB0, 0x0F, 0x3A, 0xFC, 0xC8, 0x81, 0x3B, 0xE8,  // ..:...;.
                        /* 18C8 */  0xC0, 0x43, 0x89, 0xFE, 0xFC, 0xF0, 0xBC, 0xF2,  // .C......
                        /* 18D0 */  0xAC, 0x1B, 0x22, 0xDA, 0x3B, 0xD5, 0x9B, 0x0E,  // ..".;...
                        /* 18D8 */  0x53, 0x8B, 0x23, 0xAC, 0x20, 0x91, 0x1E, 0x76,  // S.#. ..v
                        /* 18E0 */  0x8C, 0x74, 0x20, 0x51, 0x82, 0x84, 0x0C, 0x6B,  // .t Q...k
                        /* 18E8 */  0xA4, 0x04, 0x3E, 0x24, 0xE1, 0xC7, 0xC1, 0x01,  // ..>$....
                        /* 18F0 */  0x4F, 0x80, 0x8D, 0xE3, 0xED, 0xC7, 0x53, 0x39,  // O.....S9
                        /* 18F8 */  0x2C, 0x9F, 0x51, 0x7C, 0xCF, 0xF2, 0xA0, 0x1E,  // ,.Q|....
                        /* 1900 */  0x55, 0x7C, 0x98, 0x39, 0xD2, 0x77, 0x24, 0x7E,  // U|.9.w$~
                        /* 1908 */  0x90, 0xC3, 0x1E, 0x2E, 0x3C, 0x04, 0x3E, 0x80,  // ....<.>.
                        /* 1910 */  0x77, 0xA3, 0xB3, 0xF4, 0x59, 0xE8, 0xDC, 0x70,  // w...Y..p
                        /* 1918 */  0xA7, 0x19, 0x7E, 0x45, 0xC0, 0x9C, 0xB1, 0x91,  // ..~E....
                        /* 1920 */  0x87, 0x1B, 0x1A, 0xE0, 0x6D, 0xA0, 0x80, 0x30,  // ....m..0
                        /* 1928 */  0xA8, 0xF3, 0x0D, 0x58, 0xFE, 0xFF, 0xE7, 0x1B,  // ...X....
                        /* 1930 */  0xC0, 0xC2, 0x91, 0x12, 0x4C, 0x07, 0x4A, 0x76,  // ....L.Jv
                        /* 1938 */  0xC2, 0x01, 0xCE, 0x68, 0x4F, 0x38, 0x60, 0x12,  // ...hO8`.
                        /* 1940 */  0x78, 0xC2, 0x01, 0x44, 0xFD, 0xFF, 0x4F, 0x38,  // x..D..O8
                        /* 1948 */  0xC0, 0x5E, 0xD4, 0x09, 0x07, 0x7D, 0x70, 0xF3,  // .^...}p.
                        /* 1950 */  0x49, 0x81, 0x5D, 0x71, 0xC0, 0x41, 0x30, 0xF4,  // I.]q.A0.
                        /* 1958 */  0x19, 0x07, 0xE8, 0x8C, 0xE5, 0x91, 0x02, 0xD8,  // ........
                        /* 1960 */  0x9D, 0x72, 0xC0, 0x7B, 0xF0, 0xC0, 0x9D, 0x72,  // .r.{...r
                        /* 1968 */  0xC0, 0x8B, 0x74, 0x1C, 0xEF, 0x31, 0xCF, 0x39,  // ..t..1.9
                        /* 1970 */  0xF8, 0xFF, 0xFF, 0x39, 0x07, 0xB0, 0x13, 0xE5,  // ...9....
                        /* 1978 */  0x90, 0x43, 0xA5, 0xBF, 0x0F, 0x24, 0x1E, 0x06,  // .C...$..
                        /* 1980 */  0x75, 0xCE, 0x01, 0x5C, 0x9D, 0x3F, 0x7C, 0x8A,  // u..\.?|.
                        /* 1988 */  0x00, 0xC7, 0x95, 0xD2, 0x67, 0x87, 0x17, 0x8F,  // ....g...
                        /* 1990 */  0xF7, 0x57, 0x23, 0x84, 0x32, 0xCE, 0x83, 0xB4,  // .W#.2...
                        /* 1998 */  0x71, 0x8D, 0xF0, 0xD8, 0xE9, 0x2B, 0x04, 0xEE,  // q....+..
                        /* 19A0 */  0x90, 0x03, 0x7F, 0x26, 0x07, 0xF4, 0x5E, 0xF3,  // ...&..^.
                        /* 19A8 */  0xFE, 0x70, 0x44, 0x41, 0x7C, 0xB5, 0x79, 0xB9,  // .pDA|.y.
                        /* 19B0 */  0x79, 0xBD, 0x89, 0xF3, 0xA2, 0xE3, 0x43, 0x0E,  // y.....C.
                        /* 19B8 */  0x3B, 0xE2, 0x18, 0x25, 0xDE, 0xFF, 0x3F, 0x82,  // ;..%..?.
                        /* 19C0 */  0xB1, 0x42, 0xF9, 0x7C, 0xF3, 0x2E, 0x11, 0xEB,  // .B.|....
                        /* 19C8 */  0x69, 0xC7, 0x28, 0xE1, 0x62, 0x04, 0x0B, 0x12,  // i.(.b...
                        /* 19D0 */  0xF4, 0x21, 0x87, 0x49, 0x38, 0xE4, 0x00, 0x34,  // .!.I8..4
                        /* 19D8 */  0x09, 0x7F, 0x7A, 0x46, 0x0F, 0xD7, 0xC7, 0x04,  // ..zF....
                        /* 19E0 */  0x1F, 0x08, 0xDE, 0x12, 0x30, 0xA7, 0x91, 0x87,  // ....0...
                        /* 19E8 */  0x07, 0x9F, 0xFC, 0x4D, 0x30, 0xE4, 0x01, 0x07,  // ...M0...
                        /* 19F0 */  0xE8, 0x1C, 0xA6, 0xC1, 0x73, 0x96, 0xC0, 0xFC,  // ....s...
                        /* 19F8 */  0xFF, 0xCF, 0x12, 0x98, 0x73, 0x04, 0xEE, 0x60,  // ....s..`
                        /* 1A00 */  0x03, 0xBE, 0x93, 0x06, 0xEE, 0x60, 0x03, 0xDE,  // .....`..
                        /* 1A08 */  0x51, 0xF9, 0x54, 0x03, 0x38, 0x8A, 0x76, 0xA4,  // Q.T.8.v.
                        /* 1A10 */  0x41, 0x85, 0x39, 0xD5, 0x00, 0x02, 0xFF, 0xFF,  // A.9.....
                        /* 1A18 */  0x47, 0x07, 0xD8, 0x97, 0xBC, 0xB7, 0x14, 0x76,  // G......v
                        /* 1A20 */  0xD3, 0x60, 0x27, 0x11, 0x76, 0x02, 0x67, 0x28,  // .`'.v.g(
                        /* 1A28 */  0x21, 0x22, 0xBF, 0x69, 0x3D, 0xD5, 0x80, 0xEB,  // !".i=...
                        /* 1A30 */  0xC6, 0xF1, 0x26, 0xF0, 0xFC, 0xF7, 0xF2, 0xF0,  // ..&.....
                        /* 1A38 */  0x28, 0x70, 0x4A, 0xAF, 0x0F, 0xCF, 0x31, 0x6F,  // (pJ...1o
                        /* 1A40 */  0x33, 0xCF, 0x32, 0x86, 0x7A, 0x17, 0xF4, 0x0D,  // 3.2.z...
                        /* 1A48 */  0xD0, 0x70, 0xA1, 0x8C, 0x19, 0x2E, 0xD8, 0xBB,  // .p......
                        /* 1A50 */  0xA0, 0x67, 0x15, 0x2F, 0xCE, 0x3B, 0x8D, 0xD1,  // .g./.;..
                        /* 1A58 */  0x02, 0xC6, 0x0E, 0x13, 0x22, 0xE2, 0x09, 0x3E,  // ...."..>
                        /* 1A60 */  0xD5, 0x30, 0x49, 0xA7, 0x1A, 0x80, 0x26, 0x22,  // .0I...&"
                        /* 1A68 */  0x4E, 0x82, 0x68, 0x68, 0x5F, 0x33, 0x30, 0xFF,  // N.hh_30.
                        /* 1A70 */  0xFF, 0x73, 0x0C, 0x8B, 0x7C, 0xA4, 0x01, 0x3A,  // .s..|..:
                        /* 1A78 */  0x87, 0x54, 0xF0, 0x1C, 0x24, 0x60, 0x01, 0x9D,  // .T..$`..
                        /* 1A80 */  0x1F, 0x3F, 0x4B, 0xC0, 0x3D, 0xD9, 0x80, 0xEF,  // .?K.=...
                        /* 1A88 */  0x9C, 0x88, 0x3B, 0xD9, 0x80, 0x77, 0x70, 0x91,  // ..;..wp.
                        /* 1A90 */  0xA2, 0x84, 0x36, 0x52, 0x84, 0xB8, 0x27, 0x13,  // ..6R..'.
                        /* 1A98 */  0x27, 0xE6, 0xDB, 0x0D, 0xF6, 0x74, 0x03, 0x38,  // '....t.8
                        /* 1AA0 */  0x89, 0x7A, 0x6C, 0x46, 0x85, 0x3B, 0x39, 0x23,  // .zlF.;9#
                        /* 1AA8 */  0xFF, 0xFF, 0x27, 0x67, 0xC0, 0xA8, 0xCB, 0x23,  // ..'g...#
                        /* 1AB0 */  0x0A, 0x39, 0x3B, 0x1C, 0xC3, 0x51, 0xF8, 0x96,  // .9;..Q..
                        /* 1AB8 */  0x12, 0xE5, 0x95, 0x85, 0xDD, 0x4B, 0x8D, 0xF2,  // .....K..
                        /* 1AC0 */  0x5C, 0x0A, 0x93, 0xC0, 0x07, 0x1C, 0xD8, 0xA7,  // \.......
                        /* 1AC8 */  0x3F, 0x1F, 0x97, 0x7D, 0x1C, 0x78, 0x09, 0x3C,  // ?..}.x.<
                        /* 1AD0 */  0x9F, 0xB3, 0x7A, 0xC0, 0x31, 0xD0, 0x93, 0x8D,  // ..z.1...
                        /* 1AD8 */  0x4F, 0x81, 0xEC, 0x2C, 0xE8, 0x6B, 0xB3, 0x0F,  // O..,.k..
                        /* 1AE0 */  0x13, 0xC1, 0x9E, 0x9C, 0x0D, 0x1C, 0x35, 0xE8,  // ......5.
                        /* 1AE8 */  0x03, 0x45, 0x8C, 0x37, 0x67, 0x63, 0x46, 0x88,  // .E.7gcF.
                        /* 1AF0 */  0x61, 0xAC, 0x07, 0x1C, 0x26, 0xEE, 0x80, 0x03,  // a...&...
                        /* 1AF8 */  0x48, 0xF8, 0xFF, 0x1F, 0x70, 0x00, 0x43, 0x52,  // H...p.CR
                        /* 1B00 */  0x0E, 0x38, 0xE8, 0xE1, 0xFA, 0xA4, 0xC0, 0x6E,  // .8.....n
                        /* 1B08 */  0x0F, 0x6C, 0xB8, 0xCF, 0x0E, 0x0F, 0x0A, 0x6C,  // .l.....l
                        /* 1B10 */  0x48, 0xEC, 0x8C, 0x03, 0xBC, 0x8F, 0x13, 0xE0,  // H.......
                        /* 1B18 */  0x3E, 0xE3, 0x80, 0x6F, 0x38, 0xCF, 0x38, 0xC0,  // >..o8.8.
                        /* 1B20 */  0x60, 0x70, 0x31, 0x0E, 0xE4, 0xFF, 0x1F, 0xF3,  // `p1.....
                        /* 1B28 */  0x71, 0xD0, 0x30, 0x8F, 0x31, 0x1E, 0x4C, 0xC8,  // q.0.1.L.
                        /* 1B30 */  0x10, 0xEF, 0x31, 0x51, 0x1E, 0x09, 0x01, 0x47,  // ..1Q...G
                        /* 1B38 */  0xA1, 0x2C, 0x80, 0x30, 0xF9, 0x2F, 0x04, 0xC5,  // .,.0./..
                        /* 1B40 */  0x80, 0x41, 0x9D, 0x72, 0x00, 0x57, 0x82, 0xCF,  // .A.r.W..
                        /* 1B48 */  0x11, 0xA0, 0x41, 0x3F, 0x96, 0x53, 0x88, 0x15,  // ..A?.S..
                        /* 1B50 */  0xE9, 0xF5, 0xE1, 0xE9, 0x8B, 0x81, 0x44, 0x0A,  // ......D.
                        /* 1B58 */  0x77, 0x4E, 0xBE, 0x46, 0xC0, 0x3D, 0x39, 0xC3,  // wN.F.=9.
                        /* 1B60 */  0x3F, 0x44, 0xFC, 0xFF, 0x1F, 0x22, 0x8E, 0x29,  // ?D...".)
                        /* 1B68 */  0xC4, 0x83, 0xCD, 0x41, 0xBD, 0x09, 0xBC, 0xDC,  // ...A....
                        /* 1B70 */  0x04, 0x39, 0x8F, 0xA7, 0x1C, 0x1F, 0x72, 0x7C,  // .9....r|
                        /* 1B78 */  0x66, 0xF6, 0x21, 0xC7, 0x50, 0xEF, 0x3A, 0xB1,  // f.!.P.:.
                        /* 1B80 */  0xDE, 0x75, 0x0C, 0x12, 0x2A, 0xC2, 0x5B, 0xA1,  // .u..*.[.
                        /* 1B88 */  0xAF, 0xCE, 0x3E, 0x41, 0xFB, 0x8E, 0x13, 0x23,  // ..>A...#
                        /* 1B90 */  0xDC, 0x43, 0x0E, 0x13, 0xF2, 0x1A, 0x91, 0x87,  // .C......
                        /* 1B98 */  0x43, 0x0E, 0x40, 0x91, 0xD7, 0x8C, 0x0F, 0x39,  // C.@....9
                        /* 1BA0 */  0xB8, 0x51, 0xF8, 0x8C, 0xC0, 0x09, 0x1C, 0xF8,  // .Q......
                        /* 1BA8 */  0x80, 0x03, 0x74, 0x4E, 0x12, 0xB0, 0xFF, 0xFF,  // ..tN....
                        /* 1BB0 */  0x27, 0x09, 0xD8, 0x43, 0x7C, 0x92, 0x00, 0xC3,  // '..C|...
                        /* 1BB8 */  0xF9, 0x06, 0x7C, 0xB1, 0x4F, 0xDE, 0x68, 0x68,  // ..|.O.hh
                        /* 1BC0 */  0xCF, 0xC1, 0xD3, 0x39, 0xAB, 0x63, 0xE2, 0xC7,  // ...9.c..
                        /* 1BC8 */  0x6E, 0x70, 0x9D, 0x0C, 0xC0, 0x71, 0xEC, 0x06,  // np...q..
                        /* 1BD0 */  0xCF, 0x90, 0xB0, 0xB3, 0x88, 0xF1, 0x80, 0x73,  // .......s
                        /* 1BD8 */  0xCE, 0x3E, 0x5C, 0x74, 0x25, 0xC0, 0xE8, 0xD1,  // .>\t%...
                        /* 1BE0 */  0x08, 0x68, 0x43, 0x06, 0x0A, 0xF5, 0xDA, 0x73,  // .hC....s
                        /* 1BE8 */  0x26, 0x0F, 0x94, 0x18, 0xA4, 0x78, 0x47, 0x18,  // &....xG.
                        /* 1BF0 */  0xCF, 0x47, 0x23, 0xF0, 0xFF, 0xFF, 0x8F, 0x46,  // .G#....F
                        /* 1BF8 */  0xC0, 0x30, 0xF0, 0x61, 0x92, 0xC6, 0x78, 0x5B,  // .0.a..x[
                        /* 1C00 */  0x28, 0x22, 0x0C, 0xEA, 0x68, 0x04, 0xB8, 0x3A,  // ("..h..:
                        /* 1C08 */  0x22, 0xE0, 0x4E, 0x20, 0xE0, 0x03, 0x0D, 0x1B,  // ".N ....
                        /* 1C10 */  0x28, 0xA4, 0xEF, 0xB9, 0xEC, 0x78, 0x04, 0x1C,  // (....x..
                        /* 1C18 */  0x2F, 0xE1, 0x3E, 0x1E, 0x81, 0xE5, 0xFF, 0x7F,  // /.>.....
                        /* 1C20 */  0xA4, 0x04, 0x98, 0x22, 0xE4, 0x78, 0x04, 0x3D,  // ...".x.=
                        /* 1C28 */  0xF8, 0xF1, 0x08, 0xE8, 0x9C, 0x26, 0xC0, 0x0D,  // .....&..
                        /* 1C30 */  0xF5, 0x34, 0x01, 0x9E, 0xFF, 0xFF, 0x11, 0x09,  // .4......
                        /* 1C38 */  0xCC, 0xD0, 0x3E, 0xE7, 0x00, 0x27, 0xA8, 0x68,  // ..>..'.h
                        /* 1C40 */  0x81, 0x22, 0x3C, 0x87, 0x03, 0x9E, 0x82, 0x9E,  // ."<.....
                        /* 1C48 */  0x72, 0x68, 0x84, 0x57, 0x82, 0xA2, 0xC1, 0xA0,  // rh.W....
                        /* 1C50 */  0x0E, 0x3A, 0x80, 0xA5, 0xFF, 0xFF, 0x41, 0x87,  // .:....A.
                        /* 1C58 */  0x9D, 0xFB, 0x71, 0x67, 0x09, 0xB8, 0x33, 0x79,  // ..qg..3y
                        /* 1C60 */  0x3D, 0x38, 0x98, 0x03, 0xF7, 0xF9, 0xE1, 0xC4,  // =8......
                        /* 1C68 */  0xDF, 0x09, 0x9E, 0x0F, 0x7C, 0x32, 0x08, 0xF4,  // ....|2..
                        /* 1C70 */  0xEA, 0xE6, 0x4B, 0x15, 0x03, 0xF3, 0x45, 0x02,  // ..K...E.
                        /* 1C78 */  0x77, 0xB0, 0xC2, 0x1E, 0x2A, 0x81, 0xCD, 0x49,  // w...*..I
                        /* 1C80 */  0xFC, 0x31, 0x07, 0xAE, 0xB0, 0x63, 0x0E, 0x40,  // .1...c.@
                        /* 1C88 */  0x92, 0xFF, 0x3F, 0xAC, 0x8E, 0x39, 0xD0, 0x43,  // ..?..9.C
                        /* 1C90 */  0x1F, 0x73, 0x80, 0xCE, 0x59, 0x02, 0x78, 0x1E,  // .s..Y.x.
                        /* 1C98 */  0x72, 0x80, 0xF3, 0xE8, 0x30, 0xE0, 0x1E, 0x1D,  // r...0...
                        /* 1CA0 */  0xE6, 0x72, 0x08, 0xEF, 0x90, 0x03, 0x18, 0xF8,  // .r......
                        /* 1CA8 */  0xFF, 0x1F, 0x72, 0x60, 0x84, 0x3F, 0xE1, 0xD0,  // ..r`.?..
                        /* 1CB0 */  0x50, 0x6F, 0x04, 0xC5, 0x85, 0x41, 0x1D, 0x72,  // Po...A.r
                        /* 1CB8 */  0x00, 0x57, 0x31, 0x4E, 0x12, 0xA0, 0x39, 0xBB,  // .W1N..9.
                        /* 1CC0 */  0xC4, 0x78, 0x4D, 0x3D, 0x80, 0x50, 0x07, 0xF1,  // .xM=.P..
                        /* 1CC8 */  0xC8, 0xE2, 0x83, 0x97, 0x87, 0x71, 0x70, 0xBE,  // .....qp.
                        /* 1CD0 */  0xAB, 0xBC, 0x77, 0xE1, 0x64, 0xE1, 0x08, 0xCC,  // ..w.d...
                        /* 1CD8 */  0x47, 0x89, 0x87, 0x89, 0x47, 0x31, 0x03, 0x9F,  // G...G1..
                        /* 1CE0 */  0x97, 0x4F, 0x04, 0x91, 0xCE, 0xC8, 0xB7, 0x30,  // .O.....0
                        /* 1CE8 */  0xB8, 0xA7, 0x1D, 0xE0, 0x83, 0xF2, 0xB4, 0x03,  // ........
                        /* 1CF0 */  0x57, 0xDA, 0x69, 0x07, 0x84, 0xFF, 0xFF, 0xD3,  // W.i.....
                        /* 1CF8 */  0x0E, 0x60, 0x5D, 0xC2, 0x69, 0x07, 0x0D, 0xED,  // .`].i...
                        /* 1D00 */  0x3B, 0x07, 0xE6, 0x8C, 0xC3, 0x8E, 0xE4, 0xC0,  // ;.......
                        /* 1D08 */  0xFB, 0xA0, 0xF1, 0x28, 0x01, 0xD6, 0xC3, 0x0E,  // ...(....
                        /* 1D10 */  0xF8, 0x0E, 0x04, 0x06, 0xFE, 0xFF, 0x3F, 0xEC,  // ......?.
                        /* 1D18 */  0x80, 0x1D, 0xF0, 0x48, 0x62, 0xBD, 0xE1, 0x3C,  // ...Hb..<
                        /* 1D20 */  0x20, 0x7A, 0x26, 0x6F, 0x32, 0xC1, 0x5E, 0x29,  //  z&o2.^)
                        /* 1D28 */  0x22, 0xC5, 0xF6, 0x81, 0x87, 0x9F, 0x10, 0x7D,  // "......}
                        /* 1D30 */  0xB4, 0x06, 0x2C, 0x05, 0x3C, 0x57, 0xA3, 0x22,  // ..,.<W."
                        /* 1D38 */  0x1D, 0xAD, 0x01, 0xBD, 0x37, 0x82, 0x47, 0x88,  // ....7.G.
                        /* 1D40 */  0xC3, 0xF1, 0x64, 0xFE, 0xFF, 0x07, 0xE1, 0x4B,  // ..d....K
                        /* 1D48 */  0x98, 0x0F, 0xAE, 0x7C, 0xF2, 0x6F, 0x17, 0x86,  // ...|.o..
                        /* 1D50 */  0xC2, 0x1E, 0xAD, 0x81, 0xD9, 0x39, 0x07, 0x0B,  // .....9..
                        /* 1D58 */  0xF1, 0x9C, 0x03, 0x57, 0xCC, 0x39, 0x07, 0xA0,  // ...W.9..
                        /* 1D60 */  0x49, 0x78, 0x08, 0x1D, 0x12, 0xE1, 0x86, 0x3D,  // Ix.....=
                        /* 1D68 */  0xE6, 0x20, 0xFF, 0xFF, 0xC7, 0x1C, 0x60, 0x30,  // . ....`0
                        /* 1D70 */  0x44, 0x9F, 0x26, 0x80, 0xCF, 0x21, 0x07, 0x9C,  // D.&..!..
                        /* 1D78 */  0x67, 0x0A, 0xDC, 0x21, 0x07, 0xBC, 0xF3, 0x78,  // g..!...x
                        /* 1D80 */  0xAD, 0x79, 0x7B, 0xF1, 0xAD, 0xDA, 0xB0, 0x6F,  // .y{....o
                        /* 1D88 */  0x87, 0xF0, 0x0E, 0x38, 0x80, 0x15, 0x91, 0xF2,  // ...8....
                        /* 1D90 */  0x40, 0x98, 0xF8, 0xD7, 0x81, 0x8E, 0x6C, 0x86,  // @.....l.
                        /* 1D98 */  0xE1, 0x07, 0x1C, 0xD8, 0xFF, 0xFF, 0x03, 0x0E,  // ........
                        /* 1DA0 */  0x60, 0x03, 0xE8, 0xC9, 0x0B, 0x3C, 0x47, 0x04,  // `....<G.
                        /* 1DA8 */  0xDC, 0x59, 0xC0, 0x07, 0x04, 0x5F, 0x0E, 0xD8,  // .Y..._..
                        /* 1DB0 */  0xFD, 0xDD, 0x07, 0x83, 0xC7, 0x03, 0xDF, 0x11,  // ........
                        /* 1DB8 */  0xD9, 0x64, 0x4E, 0x20, 0xC2, 0xB3, 0x0D, 0xFC,  // .dN ....
                        /* 1DC0 */  0xA1, 0xBC, 0xCA, 0x84, 0x88, 0xF3, 0x60, 0x10,  // ......`.
                        /* 1DC8 */  0xE1, 0x25, 0x24, 0xC4, 0x3B, 0x4D, 0x9C, 0x47,  // .%$.;M.G
                        /* 1DD0 */  0x9A, 0xD7, 0x88, 0x08, 0xCF, 0x36, 0x46, 0x8A,  // .....6F.
                        /* 1DD8 */  0x10, 0xE8, 0xD9, 0x86, 0x81, 0xBE, 0xDD, 0x78,  // .......x
                        /* 1DE0 */  0x1A, 0x31, 0x1E, 0xA8, 0x63, 0x45, 0x0A, 0x71,  // .1..cE.q
                        /* 1DE8 */  0x22, 0xE1, 0x42, 0x46, 0x8A, 0x16, 0xE3, 0xD9,  // ".BF....
                        /* 1DF0 */  0x86, 0xC5, 0x3B, 0x0E, 0xE8, 0x24, 0xE2, 0xB3,  // ..;..$..
                        /* 1DF8 */  0x0D, 0x60, 0xE8, 0xFF, 0x7F, 0xB6, 0x01, 0xF6,  // .`......
                        /* 1E00 */  0x97, 0x83, 0xA7, 0x13, 0xF0, 0x9D, 0x15, 0xE0,  // ........
                        /* 1E08 */  0x9D, 0x4A, 0x80, 0xC9, 0x97, 0xC2, 0x5A, 0xC6,  // .J....Z.
                        /* 1E10 */  0xEA, 0xC5, 0xCA, 0xC6, 0x62, 0x7D, 0xC6, 0xA0,  // ....b}..
                        /* 1E18 */  0x32, 0x4F, 0x09, 0x9A, 0xC0, 0xE1, 0x19, 0x39,  // 2O.....9
                        /* 1E20 */  0xEC, 0xFB, 0x8B, 0x41, 0x22, 0x3F, 0x9B, 0x18,  // ...A"?..
                        /* 1E28 */  0xFE, 0xB9, 0x22, 0xC2, 0x41, 0x9C, 0x45, 0x20,  // ..".A.E 
                        /* 1E30 */  0x76, 0x4E, 0x30, 0x44, 0xAC, 0xB7, 0x09, 0x8F,  // vN0D....
                        /* 1E38 */  0x49, 0xE0, 0x3A, 0x02, 0x19, 0xC2, 0x32, 0x28,  // I.:...2(
                        /* 1E40 */  0x74, 0x18, 0xF7, 0xB8, 0x0C, 0xE7, 0xD8, 0x60,  // t......`
                        /* 1E48 */  0x14, 0xC4, 0x07, 0x01, 0x1F, 0x1E, 0x7C, 0x3E,  // ......|>
                        /* 1E50 */  0xC2, 0xED, 0xC7, 0x03, 0x81, 0x7F, 0x5A, 0xF3,  // ......Z.
                        /* 1E58 */  0xE9, 0x01, 0x0E, 0x70, 0xC4, 0x93, 0xF4, 0x54,  // ...p...T
                        /* 1E60 */  0x0C, 0xE7, 0xB3, 0x12, 0x87, 0xF3, 0xAD, 0xE0,  // ........
                        /* 1E68 */  0xE4, 0x4D, 0xE0, 0xFF, 0xFF, 0x51, 0x08, 0x8C,  // .M...Q..
                        /* 1E70 */  0x02, 0x4F, 0x07, 0xA0, 0x00, 0xF2, 0x5D, 0xC0,  // .O....].
                        /* 1E78 */  0x07, 0x9C, 0xE7, 0x01, 0x36, 0x87, 0x67, 0x1C,  // ....6.g.
                        /* 1E80 */  0x9F, 0x70, 0xD8, 0x61, 0x10, 0x31, 0x2A, 0x7A,  // .p.a.1*z
                        /* 1E88 */  0x0E, 0x3E, 0x2E, 0xCC, 0xF1, 0xC0, 0x47, 0x18,  // .>....G.
                        /* 1E90 */  0x86, 0xFD, 0x1E, 0xE0, 0xCB, 0xD3, 0x43, 0x93,  // ......C.
                        /* 1E98 */  0xCF, 0x54, 0x18, 0x58, 0x8F, 0x94, 0xC3, 0x1A,  // .T.X....
                        /* 1EA0 */  0x2D, 0xEC, 0x01, 0x3F, 0x44, 0xF8, 0x02, 0xE2,  // -..?D...
                        /* 1EA8 */  0x99, 0xF9, 0x84, 0xE2, 0xC3, 0x28, 0xD8, 0x8E,  // .....(..
                        /* 1EB0 */  0x08, 0xEC, 0x2A, 0xF0, 0x9C, 0x80, 0x81, 0x79,  // ..*....y
                        /* 1EB8 */  0x1A, 0xC0, 0x02, 0x3D, 0xD1, 0x05, 0x7A, 0x37,  // ...=..z7
                        /* 1EC0 */  0x31, 0x36, 0xBF, 0x0E, 0x90, 0x83, 0x03, 0xEA,  // 16......
                        /* 1EC8 */  0x04, 0x64, 0x59, 0x07, 0x07, 0x88, 0x87, 0x03,  // .dY.....
                        /* 1ED0 */  0xEC, 0x81, 0xC1, 0x87, 0x06, 0x1E, 0xFF, 0x70,  // .......p
                        /* 1ED8 */  0x46, 0x0F, 0x0D, 0x3C, 0x2E, 0x18, 0x05, 0xF1,  // F..<....
                        /* 1EE0 */  0xA1, 0xC1, 0x51, 0x0E, 0x0D, 0xE8, 0xC3, 0x80,  // ..Q.....
                        /* 1EE8 */  0x0F, 0x0C, 0xC0, 0xE6, 0xFF, 0x7F, 0x60, 0x00,  // ......`.
                        /* 1EF0 */  0x4C, 0x0D, 0xDA, 0x07, 0x06, 0xE0, 0x79, 0x58,  // L.....yX
                        /* 1EF8 */  0x80, 0x71, 0x6A, 0xF0, 0x71, 0x00, 0x7B, 0x60,  // .qj.q.{`
                        /* 1F00 */  0x80, 0x0F, 0xFC, 0xC0, 0x00, 0xEC, 0x6F, 0x07,  // ......o.
                        /* 1F08 */  0x3E, 0x16, 0xF1, 0x03, 0x03, 0xCC, 0xFF, 0xFF,  // >.......
                        /* 1F10 */  0x81, 0x01, 0x30, 0x05, 0xCB, 0x0F, 0x0C, 0xC0,  // ..0.....
                        /* 1F18 */  0xE7, 0x68, 0xC0, 0x0E, 0x0C, 0x60, 0x14, 0x72,  // .h...`.r
                        /* 1F20 */  0x60, 0x40, 0xDD, 0xD8, 0x12, 0x94, 0x77, 0x60,  // `@....w`
                        /* 1F28 */  0x81, 0x76, 0xDC, 0xB3, 0x77, 0x10, 0x82, 0xEF,  // .v..w...
                        /* 1F30 */  0x99, 0x79, 0x18, 0xCF, 0x68, 0xEF, 0x57, 0x3E,  // .y..h.W>
                        /* 1F38 */  0x6B, 0x62, 0x0E, 0xF5, 0x3E, 0x35, 0xF0, 0x43,  // kb..>5.C
                        /* 1F40 */  0x83, 0xA3, 0x9F, 0x1A, 0x50, 0x87, 0x53, 0x83,  // ....P.S.
                        /* 1F48 */  0x19, 0xC4, 0xA7, 0x06, 0x07, 0x39, 0xA8, 0x42,  // .....9.B
                        /* 1F50 */  0x3F, 0xB4, 0x80, 0xED, 0xFF, 0x7F, 0x68, 0x00,  // ?.....h.
                        /* 1F58 */  0xCC, 0x1D, 0x04, 0x7D, 0x68, 0x01, 0x9E, 0x27,  // ...}h..'
                        /* 1F60 */  0x04, 0x06, 0xE2, 0x13, 0x02, 0xEE, 0x70, 0x8B,  // ......p.
                        /* 1F68 */  0x3D, 0x34, 0xC0, 0x3F, 0xB4, 0xF0, 0x43, 0x03,  // =4.?..C.
                        /* 1F70 */  0xE0, 0xE1, 0xE0, 0xC2, 0xFE, 0xFF, 0x87, 0x06,  // ........
                        /* 1F78 */  0xC0, 0xA4, 0x85, 0x83, 0x0B, 0x50, 0x3D, 0x34,  // .....P=4
                        /* 1F80 */  0x80, 0x23, 0xD0, 0xEA, 0x74, 0x68, 0xE0, 0x67,  // .#..th.g
                        /* 1F88 */  0x71, 0xC7, 0x7D, 0x1B, 0xE8, 0xE0, 0x02, 0x07,  // q.}.....
                        /* 1F90 */  0xEA, 0xCC, 0x42, 0x04, 0x79, 0x6C, 0xF5, 0x95,  // ..B.yl..
                        /* 1F98 */  0xF2, 0x00, 0x12, 0x38, 0x1A, 0xAC, 0x0E, 0x0C,  // ...8....
                        /* 1FA0 */  0x3C, 0x14, 0x8C, 0x22, 0x41, 0xE8, 0xC0, 0xC0,  // <.."A...
                        /* 1FA8 */  0x43, 0xC0, 0x51, 0x10, 0x8F, 0xD6, 0x07, 0x06,  // C.Q.....
                        /* 1FB0 */  0x38, 0x83, 0x38, 0x84, 0x63, 0x7C, 0x3B, 0xF5,  // 8.8.c|;.
                        /* 1FB8 */  0xA1, 0x05, 0xFE, 0xFF, 0xFF, 0xC0, 0x00, 0x8C,  // ........
                        /* 1FC0 */  0x06, 0x05, 0x13, 0xF9, 0xA0, 0xC0, 0x3F, 0x5C,  // ......?\
                        /* 1FC8 */  0x0F, 0x0A, 0x38, 0x9C, 0x12, 0x42, 0x56, 0x7F,  // ..8..BV.
                        /* 1FD0 */  0x20, 0xD0, 0xC4, 0x3D, 0x28, 0x70, 0x1F, 0x48,  //  ..=(p.H
                        /* 1FD8 */  0x3C, 0x28, 0xE0, 0x32, 0x71, 0x0F, 0x0A, 0xDC,  // <(.2q...
                        /* 1FE0 */  0x50, 0x1E, 0x14, 0xD8, 0xFE, 0xFF, 0x87, 0x13,  // P.......
                        /* 1FE8 */  0x60, 0x12, 0xEC, 0x70, 0x02, 0xBA, 0x63, 0xBD,  // `..p..c.
                        /* 1FF0 */  0x0F, 0x27, 0xE0, 0x1A, 0xD0, 0x03, 0x12, 0x98,  // .'......
                        /* 1FF8 */  0x4F, 0x22, 0x0C, 0xE4, 0x49, 0x04, 0x77, 0x30,  // O"..I.w0
                        /* 2000 */  0x81, 0x7F, 0x38, 0xE2, 0x07, 0x13, 0xE0, 0x7D,  // ..8....}
                        /* 2008 */  0x30, 0x02, 0x5E, 0x83, 0xC2, 0xFE, 0xFF, 0x0F,  // 0.^.....
                        /* 2010 */  0x26, 0x60, 0x1A, 0x14, 0x38, 0x0E, 0x26, 0xC0,  // &`..8.&.
                        /* 2018 */  0x75, 0x50, 0xE0, 0x38, 0x98, 0x00, 0xD7, 0x41,  // uP.8...A
                        /* 2020 */  0x81, 0xE3, 0x60, 0x02, 0x18, 0xF9, 0xFF, 0x1F,  // ..`.....
                        /* 2028 */  0x4C, 0x60, 0x7A, 0x38, 0x98, 0x00, 0xAD, 0x43,  // L`z8...C
                        /* 2030 */  0x18, 0x9C, 0x83, 0x09, 0x9C, 0x70, 0x87, 0x40,  // .....p.@
                        /* 2038 */  0x94, 0xC8, 0x83, 0x89, 0x0F, 0xA2, 0xD0, 0x40,  // .......@
                        /* 2040 */  0x42, 0x9D, 0x93, 0x51, 0x8E, 0xF7, 0x48, 0xCE,  // B..Q..H.
                        /* 2048 */  0x29, 0xC8, 0xFB, 0x69, 0xD0, 0x33, 0x09, 0x72,  // )..i.3.r
                        /* 2050 */  0x42, 0x81, 0x4E, 0xE8, 0xE0, 0x8C, 0xF8, 0x22,  // B.N...."
                        /* 2058 */  0xE8, 0x9B, 0x06, 0x23, 0x70, 0x94, 0x83, 0x20,  // ...#p.. 
                        /* 2060 */  0x2A, 0x04, 0x85, 0x22, 0x40, 0xE8, 0x80, 0xC2,  // *.."@...
                        /* 2068 */  0x45, 0xC3, 0x51, 0x10, 0x0F, 0xDD, 0x07, 0x31,  // E.Q....1
                        /* 2070 */  0xC0, 0xEE, 0xFF, 0xFF, 0x80, 0x02, 0x0C, 0x0E,  // ........
                        /* 2078 */  0x16, 0xC0, 0x23, 0xE4, 0xC1, 0x02, 0x74, 0xE0,  // ..#...t.
                        /* 2080 */  0x3E, 0x58, 0x80, 0x0B, 0xFE, 0x01, 0x0A, 0xCC,  // >X......
                        /* 2088 */  0x27, 0x09, 0x8E, 0xF2, 0x24, 0xC1, 0x2E, 0xCE,  // '...$...
                        /* 2090 */  0x3E, 0x49, 0x18, 0xE4, 0x49, 0x02, 0x7B, 0xBC,  // >I..I.{.
                        /* 2098 */  0x00, 0xC7, 0x31, 0x8A, 0x1F, 0x2F, 0x00, 0x0B,  // ..1../..
                        /* 20A0 */  0xFF, 0xFF, 0xE3, 0x14, 0x60, 0xFE, 0x78, 0x01,  // ....`.x.
                        /* 20A8 */  0xBC, 0x4D, 0x1C, 0x2F, 0x80, 0xD6, 0x31, 0x08,  // .M./..1.
                        /* 20B0 */  0xCE, 0xF1, 0x02, 0x0C, 0xFF, 0xFF, 0xE3, 0x05,  // ........
                        /* 20B8 */  0x26, 0xEC, 0xA1, 0x0F, 0x75, 0x06, 0x70, 0xFC,  // &...u.p.
                        /* 20C0 */  0xC3, 0x2D, 0xB4, 0xE3, 0x05, 0x3C, 0x02, 0xC7,  // .-...<..
                        /* 20C8 */  0x3C, 0xF6, 0xA1, 0x02, 0xC2, 0x28, 0xDE, 0xB1,  // <....(..
                        /* 20D0 */  0x0F, 0x15, 0x08, 0x8E, 0x82, 0xF8, 0xD8, 0xE7,  // ........
                        /* 20D8 */  0x38, 0x87, 0x06, 0xF4, 0x38, 0x7D, 0x1E, 0x78,  // 8...8}.x
                        /* 20E0 */  0x33, 0x38, 0xCC, 0x08, 0x47, 0xCC, 0x86, 0x81,  // 38..G...
                        /* 20E8 */  0x39, 0x09, 0x01, 0xDF, 0x28, 0xE3, 0x42, 0x43,  // 9...(.BC
                        /* 20F0 */  0x7B, 0xAE, 0xB5, 0x0B, 0xF0, 0x3C, 0x2A, 0xA0,  // {....<*.
                        /* 20F8 */  0x71, 0xB8, 0x00, 0xE7, 0xA8, 0xE0, 0x00, 0x3F,  // q......?
                        /* 2100 */  0x13, 0x14, 0x3F, 0x2A, 0x90, 0xFF, 0xFF, 0xCF,  // ..?*....
                        /* 2108 */  0x7E, 0x60, 0x1F, 0x15, 0x2C, 0x48, 0x8F, 0x0A,  // ~`..,H..
                        /* 2110 */  0x58, 0x1C, 0xFE, 0x80, 0xFB, 0x31, 0x05, 0x7C,  // X....1.|
                        /* 2118 */  0x2A, 0x8E, 0x29, 0x80, 0x16, 0x31, 0x87, 0x2A,  // *.)..1.*
                        /* 2120 */  0x94, 0xBC, 0x81, 0xFB, 0x50, 0x85, 0xFC, 0xFF,  // ....P...
                        /* 2128 */  0x1F, 0x53, 0xE0, 0xDE, 0x36, 0x7D, 0xD9, 0x38,  // .S..6}.8
                        /* 2130 */  0xB4, 0x78, 0xBE, 0xE6, 0x63, 0x24, 0x9C, 0xA8,  // .x..c$..
                        /* 2138 */  0x50, 0xE1, 0x21, 0x14, 0xFD, 0x24, 0x40, 0x4F,  // P.!..$@O
                        /* 2140 */  0x30, 0x04, 0x8C, 0x82, 0xF8, 0x10, 0xE1, 0xD3,  // 0.......
                        /* 2148 */  0x12, 0x9C, 0x91, 0x3C, 0xF9, 0x63, 0x8E, 0x29,  // ...<.c.)
                        /* 2150 */  0xC0, 0xF7, 0xDC, 0x00, 0x3C, 0x22, 0x9E, 0x1B,  // ....<"..
                        /* 2158 */  0x40, 0x37, 0x4E, 0x9F, 0x1B, 0xC0, 0x75, 0xD0,  // @7N...u.
                        /* 2160 */  0xE3, 0x67, 0x3B, 0x60, 0x71, 0x44, 0xC0, 0xC0,  // .g;`qD..
                        /* 2168 */  0x3C, 0x22, 0x60, 0x8E, 0x0D, 0xEC, 0xFF, 0x7F,  // <"`.....
                        /* 2170 */  0x6C, 0x80, 0x79, 0xB4, 0x83, 0x79, 0x6C, 0x00,  // l.y..yl.
                        /* 2178 */  0xE6, 0xE7, 0x3A, 0xE0, 0x75, 0x6C, 0x00, 0xDE,  // ..:.ul..
                        /* 2180 */  0xC3, 0xF5, 0xB1, 0x01, 0x38, 0x9D, 0x5E, 0xC0,  // ....8.^.
                        /* 2188 */  0x72, 0x44, 0xF0, 0xFF, 0xFF, 0xD8, 0x00, 0x43,  // rD.....C
                        /* 2190 */  0xDA, 0x91, 0x0D, 0x75, 0x6C, 0xB0, 0xDC, 0x23,  // ...ul..#
                        /* 2198 */  0x1B, 0x88, 0x26, 0x1D, 0x24, 0x92, 0xE7, 0xF4,  // ..&.$...
                        /* 21A0 */  0xEE, 0x8F, 0x13, 0x74, 0x6A, 0x43, 0x49, 0x81,  // ...tjCI.
                        /* 21A8 */  0x91, 0x90, 0x53, 0x1B, 0x2A, 0xFA, 0xE9, 0x81,  // ..S.*...
                        /* 21B0 */  0x82, 0x58, 0xC2, 0x79, 0x1C, 0xE2, 0x5C, 0x4E,  // .X.y..\N
                        /* 21B8 */  0xE5, 0x28, 0x1E, 0x5A, 0x7C, 0x78, 0x01, 0xBE,  // .(.Z|x..
                        /* 21C0 */  0x31, 0x06, 0x85, 0x86, 0x37, 0x68, 0xC4, 0x47,  // 1...7h.G
                        /* 21C8 */  0x02, 0x1F, 0xD8, 0x80, 0xEF, 0xB8, 0xE1, 0x40,  // .......@
                        /* 21D0 */  0x3F, 0x3A, 0x78, 0xDE, 0x1E, 0x14, 0x78, 0xFF,  // ?:x...x.
                        /* 21D8 */  0xFF, 0xE7, 0x35, 0x30, 0x9F, 0x3E, 0x80, 0xB7,  // ..50.>..
                        /* 21E0 */  0x8D, 0x33, 0x10, 0x90, 0x3F, 0x69, 0x60, 0xEE,  // .3..?i`.
                        /* 21E8 */  0xF6, 0xB8, 0xD3, 0x07, 0xFC, 0x33, 0x10, 0xCC,  // .....3..
                        /* 21F0 */  0xD3, 0x07, 0x30, 0x3F, 0x03, 0xB1, 0xFF, 0xFF,  // ..0?....
                        /* 21F8 */  0xE9, 0x03, 0xB0, 0x70, 0x52, 0x06, 0x5E, 0xA7,  // ...pR.^.
                        /* 2200 */  0x0F, 0xF0, 0x0E, 0x0A, 0x1C, 0xA7, 0x0F, 0xC0,  // ........
                        /* 2208 */  0x95, 0x8E, 0xD3, 0x07, 0xC4, 0xFF, 0xFF, 0x51,  // .......Q
                        /* 2210 */  0x0A, 0x38, 0x9E, 0x3E, 0xA0, 0x1D, 0xE8, 0x50,  // .8.>...P
                        /* 2218 */  0x97, 0x00, 0x8B, 0x3C, 0x56, 0x82, 0x68, 0xEE,  // ...<V.h.
                        /* 2220 */  0x4F, 0x39, 0x9E, 0x9C, 0x71, 0xA2, 0xF4, 0x8E,  // O9..q...
                        /* 2228 */  0xA2, 0xF3, 0x07, 0xEE, 0x48, 0x07, 0xFE, 0x79,  // ....H..y
                        /* 2230 */  0x7A, 0x30, 0x3E, 0x58, 0x02, 0xEE, 0x06, 0xEA,  // z0>X....
                        /* 2238 */  0x83, 0x03, 0x58, 0xFE, 0xFF, 0x07, 0x07, 0xE6,  // ..X.....
                        /* 2240 */  0xE3, 0xE0, 0x00, 0xBA, 0xD3, 0xF4, 0x53, 0x10,  // ......S.
                        /* 2248 */  0x70, 0x39, 0x24, 0xC0, 0x38, 0x3D, 0x80, 0xF7,  // p9$.8=..
                        /* 2250 */  0x28, 0x04, 0xF3, 0xF4, 0x00, 0x18, 0x38, 0x5F,  // (.....8_
                        /* 2258 */  0x02, 0x56, 0xFE, 0xFF, 0xA7, 0x07, 0x30, 0x8F,  // .V....0.
                        /* 2260 */  0xC5, 0xA7, 0x07, 0xE0, 0x74, 0x8A, 0x01, 0xCB,  // ....t...
                        /* 2268 */  0xE9, 0x01, 0x4C, 0xAF, 0x03, 0x9F, 0x1E, 0xF8,  // ..L.....
                        /* 2270 */  0x39, 0xC0, 0xD2, 0x8E, 0x32, 0xD0, 0xAE, 0xDF,  // 9...2...
                        /* 2278 */  0xD8, 0x6B, 0x2E, 0xEE, 0xB4, 0x0D, 0xB8, 0xFD,  // .k......
                        /* 2280 */  0xFF, 0x1F, 0x1C, 0xC0, 0x14, 0xEE, 0xE0, 0x00,  // ........
                        /* 2288 */  0x3A, 0x23, 0x07, 0x07, 0xD0, 0x89, 0x3D, 0xC5,  // :#....=.
                        /* 2290 */  0x80, 0xFA, 0x7C, 0x80, 0xBD, 0xE3, 0xE2, 0x0E,  // ..|.....
                        /* 2298 */  0x0C, 0x60, 0x38, 0xBD, 0xF0, 0x03, 0x03, 0xF0,  // .`8.....
                        /* 22A0 */  0x3F, 0xB8, 0x00, 0xEB, 0xFF, 0xFF, 0x81, 0x01,  // ?.......
                        /* 22A8 */  0x98, 0x29, 0x39, 0x30, 0x00, 0xAD, 0x83, 0x0B,  // .)90....
                        /* 22B0 */  0x9C, 0x03, 0x03, 0xB8, 0x8F, 0x72, 0xD8, 0x13,  // .....r..
                        /* 22B8 */  0x89, 0x4F, 0x0D, 0xBE, 0xC4, 0x9C, 0x44, 0x94,  // .O....D.
                        /* 22C0 */  0xF3, 0x39, 0xC9, 0x07, 0x16, 0xC0, 0xEE, 0xFF,  // .9......
                        /* 22C8 */  0xFF, 0xC0, 0x00, 0xCC, 0x46, 0xEC, 0x03, 0x0B,  // ....F...
                        /* 22D0 */  0xF0, 0x3C, 0x1F, 0x60, 0x6E, 0xF9, 0x3E, 0x1F,  // .<.`n.>.
                        /* 22D8 */  0x60, 0x0F, 0x2C, 0xE0, 0x39, 0x30, 0x00, 0xFF,  // `.,.90..
                        /* 22E0 */  0x03, 0x0B, 0xB0, 0xFE, 0xFF, 0x1F, 0x18, 0x80,  // ........
                        /* 22E8 */  0x99, 0x94, 0x03, 0x0B, 0x50, 0x3D, 0x30, 0xC0,  // ....P=0.
                        /* 22F0 */  0x0D, 0x73, 0x2E, 0x47, 0x71, 0x38, 0xEA, 0xB9,  // .s.Gq8..
                        /* 22F8 */  0x1C, 0x7D, 0x60, 0xE1, 0x13, 0x8C, 0x75, 0xB4,  // .}`...u.
                        /* 2300 */  0xA7, 0x9B, 0xC0, 0xD1, 0x0E, 0xE4, 0xA8, 0x50,  // .......P
                        /* 2308 */  0x30, 0x8A, 0x74, 0x20, 0x47, 0x85, 0x80, 0xA3,  // 0.t G...
                        /* 2310 */  0x20, 0xB6, 0x70, 0x58, 0x80, 0x36, 0x85, 0x63,  //  .pX.6.c
                        /* 2318 */  0x3B, 0xBE, 0x93, 0xF4, 0x61, 0x05, 0x18, 0x0F,  // ;...a...
                        /* 2320 */  0x0A, 0x26, 0xF2, 0x41, 0xC1, 0xF8, 0xFF, 0x0F,  // .&.A....
                        /* 2328 */  0x0A, 0x6C, 0x27, 0x72, 0xE0, 0x71, 0x32, 0x08,  // .l'r.q2.
                        /* 2330 */  0x59, 0xFD, 0x71, 0x40, 0x13, 0xF7, 0xA0, 0xC0,  // Y.q@....
                        /* 2338 */  0x7D, 0x22, 0x07, 0xE7, 0xA0, 0xE0, 0x4E, 0xDC,  // }"....N.
                        /* 2340 */  0x83, 0x02, 0x37, 0x94, 0x0F, 0x26, 0xC0, 0x3B,  // ..7..&.;
                        /* 2348 */  0xD8, 0xC1, 0x04, 0x74, 0x56, 0x60, 0xC9, 0xFF,  // ...tV`..
                        /* 2350 */  0xFF, 0x60, 0x02, 0xA6, 0x01, 0x3D, 0x18, 0x81,  // .`...=..
                        /* 2358 */  0xF9, 0x1C, 0xC2, 0x51, 0x8E, 0xD7, 0xC7, 0x52,  // ...Q...R
                        /* 2360 */  0x76, 0x2C, 0x81, 0x7F, 0x2C, 0xE2, 0xC7, 0x12,  // v,..,...
                        /* 2368 */  0xE0, 0x7B, 0x24, 0x02, 0x5E, 0xC7, 0x12, 0xF0,  // .{$.^...
                        /* 2370 */  0x0E, 0x0A, 0x1C, 0xC7, 0x12, 0x30, 0xFF, 0xFF,  // .....0..
                        /* 2378 */  0x8F, 0x25, 0x60, 0x1C, 0x14, 0x38, 0x8E, 0x25,  // .%`..8.%
                        /* 2380 */  0xC0, 0x75, 0x50, 0xE0, 0x38, 0x96, 0x00, 0xAE,  // .uP.8...
                        /* 2388 */  0xB4, 0x1C, 0x4B, 0x80, 0xD6, 0xF1, 0x0B, 0xCE,  // ..K.....
                        /* 2390 */  0x7C, 0xFE, 0xFF, 0x8F, 0x25, 0x30, 0x64, 0x7A,  // |...%0dz
                        /* 2398 */  0x18, 0x03, 0x0B, 0xF1, 0x8A, 0x90, 0x30, 0x18,  // ......0.
                        /* 23A0 */  0x94, 0x86, 0xF3, 0x00, 0x94, 0x11, 0x9E, 0xC0,  // ........
                        /* 23A8 */  0x71, 0x1D, 0x12, 0x93, 0x04, 0x87, 0x1A, 0xBC,  // q.......
                        /* 23B0 */  0x87, 0xF4, 0x4A, 0x7A, 0x14, 0x8F, 0x65, 0x1E,  // ..Jz..e.
                        /* 23B8 */  0xC7, 0x39, 0x85, 0x64, 0xD2, 0xC6, 0x86, 0x3A,  // .9.d...:
                        /* 23C0 */  0xB8, 0x79, 0x3E, 0x67, 0x76, 0x34, 0xB5, 0x9F,  // .y>gv4..
                        /* 23C8 */  0xD2, 0xC9, 0xF1, 0xDC, 0x04, 0x1E, 0x36, 0x43,  // ......6C
                        /* 23D0 */  0xE3, 0xD0, 0xD8, 0x61, 0xF8, 0x3E, 0x10, 0xEC,  // ...a.>..
                        /* 23D8 */  0x20, 0x0E, 0xE3, 0x9C, 0x4D, 0xE0, 0x09, 0x9D,  //  ...M...
                        /* 23E0 */  0x66, 0xB9, 0xF7, 0x04, 0x1D, 0xE4, 0xA3, 0xC6,  // f.......
                        /* 23E8 */  0x68, 0x0E, 0x8A, 0xC0, 0x1D, 0x35, 0x58, 0xC0,  // h....5X.
                        /* 23F0 */  0x3C, 0xDB, 0xE3, 0xF5, 0xE5, 0xCD, 0x58, 0x6C,  // <.....Xl
                        /* 23F8 */  0xCC, 0x31, 0x42, 0xC5, 0xA8, 0x71, 0xE8, 0x64,  // .1B..q.d
                        /* 2400 */  0xE4, 0x06, 0x39, 0x8E, 0xC7, 0x38, 0xA3, 0xC7,  // ..9..8..
                        /* 2408 */  0x7D, 0x1C, 0x30, 0xCC, 0x81, 0x3C, 0xCC, 0xFA,  // }.0..<..
                        /* 2410 */  0xCE, 0xE4, 0xB1, 0x60, 0x4F, 0x17, 0xF6, 0x7C,  // ...`O..|
                        /* 2418 */  0x85, 0x20, 0xF7, 0x02, 0x13, 0x74, 0x3F, 0x1A,  // . ...t?.
                        /* 2420 */  0x1D, 0x22, 0x42, 0xF4, 0x36, 0x02, 0xA1, 0x57,  // ."B.6..W
                        /* 2428 */  0x2C, 0x40, 0x9C, 0x00, 0x5B, 0x33, 0x13, 0xD0,  // ,@..[3..
                        /* 2430 */  0xA1, 0xD5, 0x86, 0x42, 0x30, 0x8F, 0xCE, 0x28,  // ...B0..(
                        /* 2438 */  0xC1, 0x4E, 0xE6, 0x6D, 0xE2, 0xF8, 0xA2, 0xC4,  // .N.m....
                        /* 2440 */  0x68, 0x0C, 0x42, 0xB8, 0x01, 0x63, 0x46, 0x08,  // h.B..cF.
                        /* 2448 */  0x18, 0x3D, 0x62, 0x9C, 0x08, 0xED, 0x0F, 0x82,  // .=b.....
                        /* 2450 */  0x84, 0x7A, 0xE6, 0x68, 0x2C, 0x8E, 0x34, 0x1A,  // .z.h,.4.
                        /* 2458 */  0xD4, 0xB1, 0xC2, 0xC7, 0x02, 0x5F, 0xF6, 0x3D,  // ....._.=
                        /* 2460 */  0x2A, 0xCF, 0xCE, 0xE8, 0xE7, 0x52, 0xE7, 0xE9,  // *....R..
                        /* 2468 */  0x9F, 0x12, 0x78, 0x6A, 0x3E, 0x7F, 0xC0, 0x71,  // ..xj>..q
                        /* 2470 */  0x2D, 0xE0, 0xFF, 0x0F, 0xF8, 0x66, 0xF0, 0x5C,  // -....f.\
                        /* 2478 */  0xC0, 0x4E, 0x44, 0x86, 0xE3, 0x43, 0xF4, 0xD8,  // .ND..C..
                        /* 2480 */  0xC3, 0x9D, 0xC0, 0x21, 0x32, 0x40, 0x1F, 0x40,  // ...!2@.@
                        /* 2488 */  0xE0, 0x8F, 0xC7, 0x07, 0x01, 0xCF, 0xE7, 0x84,  // ........
                        /* 2490 */  0x13, 0x58, 0xFE, 0x20, 0x50, 0x23, 0x33, 0xB4,  // .X. P#3.
                        /* 2498 */  0x6F, 0x1E, 0xA7, 0xF5, 0x28, 0xE0, 0x63, 0xC2,  // o...(.c.
                        /* 24A0 */  0x61, 0xB1, 0xA3, 0x8C, 0xCF, 0x2E, 0x1E, 0x0F,  // a.......
                        /* 24A8 */  0xF8, 0xAF, 0x01, 0x4F, 0x07, 0x11, 0x5E, 0x1A,  // ...O..^.
                        /* 24B0 */  0x3C, 0x5F, 0x9F, 0x49, 0xD9, 0x81, 0xDE, 0xE3,  // <_.I....
                        /* 24B8 */  0xC1, 0x1D, 0x12, 0xD8, 0xE1, 0xE4, 0x4D, 0x84,  // ......M.
                        /* 24C0 */  0x9D, 0xA1, 0x74, 0x4C, 0x35, 0x84, 0x44, 0x1D,  // ..tL5.D.
                        /* 24C8 */  0x4B, 0x50, 0xA7, 0x0A, 0x1F, 0x28, 0xD8, 0xB5,  // KP...(..
                        /* 24D0 */  0x21, 0xEE, 0x33, 0x80, 0x71, 0xD9, 0x41, 0xC8,  // !.3.q.A.
                        /* 24D8 */  0x23, 0x83, 0x7F, 0x42, 0x78, 0x9A, 0x00, 0xCB,  // #..Bx...
                        /* 24E0 */  0x31, 0x82, 0x9F, 0x6B, 0xAC, 0xEB, 0xAC, 0x42,  // 1..k...B
                        /* 24E8 */  0x8F, 0x35, 0xE0, 0x18, 0x88, 0x03, 0x0F, 0x13,  // .5......
                        /* 24F0 */  0x3D, 0x38, 0x0F, 0x93, 0x83, 0xBC, 0x6F, 0xFB,  // =8....o.
                        /* 24F8 */  0x3C, 0xC0, 0xCE, 0xA6, 0x1E, 0x27, 0x58, 0xFE,  // <....'X.
                        /* 2500 */  0xFF, 0x07, 0x02, 0xB0, 0xC8, 0x1B, 0x27, 0xE8,  // ......'.
                        /* 2508 */  0xC6, 0xC4, 0x07, 0x0A, 0x3E, 0x29, 0x4F, 0x01,  // ....>)O.
                        /* 2510 */  0x1D, 0xDF, 0x3D, 0x50, 0x3E, 0x40, 0x0F, 0x94,  // ..=P>@..
                        /* 2518 */  0x9F, 0x4D, 0x18, 0x4C, 0xE0, 0xE3, 0x88, 0xFB,  // .M.L....
                        /* 2520 */  0x56, 0xC2, 0x4E, 0x25, 0x98, 0xD3, 0x02, 0x1B,  // V.N%....
                        /* 2528 */  0x2D, 0x78, 0x00, 0x3D, 0x5A, 0xF8, 0x87, 0x5A,  // -x.=Z..Z
                        /* 2530 */  0xF0, 0x8C, 0x96, 0x0F, 0x0C, 0x7B, 0x7C, 0x81,  // .....{|.
                        /* 2538 */  0x33, 0x67, 0x9F, 0x31, 0xC0, 0x60, 0x15, 0x48,  // 3g.1.`.H
                        /* 2540 */  0xE7, 0x93, 0x40, 0x8F, 0x2C, 0x4F, 0x2C, 0x47,  // ..@.,O,G
                        /* 2548 */  0x48, 0x46, 0x0D, 0x15, 0xFE, 0x5C, 0x0E, 0xEA,  // HF...\..
                        /* 2550 */  0xF4, 0x7C, 0x01, 0xF0, 0xA8, 0xC1, 0xF9, 0xFF,  // .|......
                        /* 2558 */  0x1F, 0x35, 0x06, 0xD4, 0xA3, 0x06, 0x3E, 0x03,  // .5....>.
                        /* 2560 */  0xC3, 0x8E, 0x1A, 0x98, 0x0C, 0x09, 0x77, 0x2E,  // ......w.
                        /* 2568 */  0x83, 0x87, 0x12, 0x3D, 0x74, 0x9F, 0x02, 0xB4,  // ...=t...
                        /* 2570 */  0x42, 0xE8, 0xDE, 0x61, 0xB0, 0x38, 0xEF, 0x90,  // B..a.8..
                        /* 2578 */  0x06, 0x89, 0xFF, 0x1E, 0xE9, 0x69, 0x18, 0xE1,  // .....i..
                        /* 2580 */  0x04, 0x5F, 0x23, 0x0C, 0x75, 0x1C, 0x21, 0x12,  // ._#.u.!.
                        /* 2588 */  0x14, 0x39, 0x50, 0xF4, 0x30, 0x38, 0xFA, 0x83,  // .9P.08..
                        /* 2590 */  0x1A, 0xC3, 0x36, 0xCA, 0x99, 0x1C, 0x95, 0x0F,  // ..6.....
                        /* 2598 */  0x56, 0x46, 0x38, 0xCB, 0xE7, 0xA9, 0xE7, 0x2B,  // VF8....+
                        /* 25A0 */  0x5F, 0x17, 0x30, 0xE7, 0x35, 0x9C, 0xA4, 0xE7,  // _.0.5...
                        /* 25A8 */  0x01, 0x0D, 0x70, 0x42, 0x90, 0x08, 0x18, 0xD4,  // ..pB....
                        /* 25B0 */  0x19, 0x0C, 0x30, 0xF1, 0xFF, 0x3F, 0x83, 0x81,  // ..0..?..
                        /* 25B8 */  0xE1, 0xBE, 0xE0, 0x33, 0x18, 0xF0, 0xB8, 0x09,  // ...3....
                        /* 25C0 */  0x04, 0x79, 0x36, 0x3A, 0x17, 0x9F, 0xC0, 0xC0,  // .y6:....
                        /* 25C8 */  0x75, 0x6D, 0x79, 0xE3, 0x3A, 0x83, 0xE0, 0x8F,  // umy.:...
                        /* 25D0 */  0x5D, 0x0C, 0xEB, 0xCD, 0x2B, 0x44, 0xA8, 0x03,  // ]...+D..
                        /* 25D8 */  0x0B, 0xF4, 0x04, 0x66, 0x94, 0x73, 0x08, 0x18,  // ...f.s..
                        /* 25E0 */  0xE5, 0xDC, 0x02, 0x85, 0x7A, 0x11, 0x63, 0xD6,  // ....z.c.
                        /* 25E8 */  0x90, 0x74, 0x01, 0x33, 0x48, 0xF0, 0x10, 0x41,  // .t.3H..A
                        /* 25F0 */  0x62, 0x45, 0xF6, 0x09, 0x8C, 0x85, 0x58, 0xAE,  // bE....X.
                        /* 25F8 */  0xBE, 0x04, 0x3E, 0x81, 0x01, 0x2C, 0xF8, 0xFF,  // ..>..,..
                        /* 2600 */  0x9F, 0xC0, 0x00, 0xE3, 0xE1, 0x8F, 0xB2, 0xE8,  // ........
                        /* 2608 */  0x43, 0x82, 0x07, 0xC1, 0xEE, 0x15, 0x98, 0x89,  // C.......
                        /* 2610 */  0xBE, 0x76, 0x3C, 0xDD, 0x98, 0xC0, 0x21, 0xCF,  // .v<...!.
                        /* 2618 */  0x60, 0x40, 0xE7, 0x24, 0x83, 0x1F, 0x29, 0xFC,  // `@.$..).
                        /* 2620 */  0xD3, 0x07, 0x6E, 0x56, 0xEC, 0xF4, 0x03, 0x96,  // ..nV....
                        /* 2628 */  0x43, 0x2E, 0x5E, 0xDC, 0x11, 0xCA, 0x87, 0x71,  // C.^....q
                        /* 2630 */  0x3A, 0x5C, 0xCC, 0xFF, 0x7F, 0xB8, 0xF8, 0x41,  // :\.....A
                        /* 2638 */  0xF2, 0x71, 0x08, 0x58, 0x47, 0x70, 0x1F, 0xC2,  // .q.XGp..
                        /* 2640 */  0x80, 0xC7, 0x70, 0xC1, 0x3D, 0x17, 0x3E, 0x5D,  // ..p.=.>]
                        /* 2648 */  0x1F, 0x8B, 0x71, 0x83, 0xC2, 0x5C, 0x9D, 0xF9,  // ..q..\..
                        /* 2650 */  0xA0, 0x8E, 0xE2, 0x21, 0x01, 0xF6, 0xF0, 0xC1,  // ...!....
                        /* 2658 */  0x73, 0x96, 0xE2, 0x91, 0x4F, 0x83, 0x50, 0xCE,  // s...O.P.
                        /* 2660 */  0xC0, 0xBE, 0xBA, 0x78, 0x72, 0xE7, 0xF7, 0xCE,  // ...xr...
                        /* 2668 */  0xE1, 0x9B, 0xB4, 0xE3, 0x9D, 0xC5, 0x80, 0xCE,  // ........
                        /* 2670 */  0x50, 0x71, 0xC7, 0x64, 0xF8, 0x63, 0xE2, 0x97,  // Pq.d.c..
                        /* 2678 */  0x0E, 0xCC, 0xA9, 0x03, 0x3C, 0xFF, 0xFF, 0x53,  // ....<..S
                        /* 2680 */  0x07, 0x7B, 0x97, 0xF8, 0xD4, 0x81, 0x1B, 0x97,  // .{......
                        /* 2688 */  0x87, 0x81, 0xBB, 0x02, 0xC0, 0x89, 0x39, 0x58,  // ......9X
                        /* 2690 */  0x50, 0x1D, 0x21, 0x3C, 0x58, 0xF8, 0xC3, 0x38,  // P.!<X..8
                        /* 2698 */  0x58, 0x70, 0xDE, 0x3B, 0x60, 0x9D, 0x3B, 0xC0,  // Xp.;`.;.
                        /* 26A0 */  0x27, 0xF3, 0xDC, 0x81, 0x3E, 0x90, 0x79, 0xC0,  // '...>.y.
                        /* 26A8 */  0xF0, 0x2E, 0x1E, 0x98, 0x73, 0x21, 0x3B, 0x79,  // ....s!;y
                        /* 26B0 */  0x80, 0xE7, 0xB4, 0xE6, 0x11, 0xC3, 0x3F, 0xA3,  // ......?.
                        /* 26B8 */  0x83, 0x6B, 0xC4, 0xB0, 0xAE, 0x1E, 0xB8, 0x01,  // .k......
                        /* 26C0 */  0xF8, 0xEC, 0x01, 0xFF, 0xFF, 0x7F, 0x54, 0x00,  // ......T.
                        /* 26C8 */  0xC3, 0xE1, 0x03, 0x7C, 0x87, 0x4B, 0x38, 0xE7,  // ...|.K8.
                        /* 26D0 */  0x4E, 0xEC, 0xBD, 0x84, 0xDD, 0x2D, 0x61, 0x1C,  // N....-a.
                        /* 26D8 */  0x2E, 0xC1, 0xF6, 0xAD, 0xF7, 0xE1, 0x12, 0x78,  // .......x
                        /* 26E0 */  0x9C, 0x4F, 0xF1, 0xE7, 0x75, 0x98, 0xE7, 0x21,  // .O..u..!
                        /* 26E8 */  0xB0, 0x8D, 0x1A, 0xEE, 0xB9, 0x13, 0x3B, 0x6A,  // ......;j
                        /* 26F0 */  0x60, 0x31, 0x2A, 0x8F, 0x1A, 0x6C, 0xFF, 0xFF,  // `1*..l..
                        /* 26F8 */  0x51, 0xC3, 0x3C, 0x9F, 0xE2, 0x47, 0x0D, 0x1C,  // Q.<..G..
                        /* 2700 */  0x8F, 0x0E, 0xB0, 0xC0, 0x3D, 0x6A, 0x30, 0x9B,  // ....=j0.
                        /* 2708 */  0x38, 0x3A, 0x00, 0xC9, 0x91, 0xF9, 0xE8, 0x00,  // 8:......
                        /* 2710 */  0x5C, 0x47, 0x0D, 0x76, 0x15, 0xA3, 0x46, 0xFC,  // \G.v..F.
                        /* 2718 */  0xFF, 0x8F, 0x0E, 0xC0, 0x6D, 0xD4, 0xC0, 0xE2,  // ....m...
                        /* 2720 */  0x70, 0xE8, 0x51, 0xE3, 0x8E, 0x77, 0x98, 0x69,  // p.Q..w.i
                        /* 2728 */  0x60, 0x50, 0x02, 0x07, 0x89, 0xF3, 0x70, 0x08,  // `P....p.
                        /* 2730 */  0xBE, 0x01, 0xFB, 0x78, 0x07, 0x7C, 0x66, 0x85,  // ...x.|f.
                        /* 2738 */  0x81, 0xF1, 0xB0, 0xD8, 0xA9, 0x0A, 0x5C, 0xC3,  // ......\.
                        /* 2740 */  0xE5, 0x62, 0xCE, 0x0C, 0xE8, 0x43, 0x9A, 0x0F,  // .b...C..
                        /* 2748 */  0x2E, 0xFC, 0x72, 0x84, 0x83, 0x39, 0xCC, 0x93,  // ..r..9..
                        /* 2750 */  0x31, 0xCC, 0x69, 0xFA, 0x4C, 0xE0, 0x63, 0x2B,  // 1.i.L.c+
                        /* 2758 */  0x3B, 0x34, 0x80, 0xE5, 0xFF, 0x3F, 0x64, 0x36,  // ;4...?d6
                        /* 2760 */  0x5C, 0x1F, 0x1A, 0x80, 0xC7, 0xC1, 0x05, 0x73,  // \......s
                        /* 2768 */  0xB2, 0xC2, 0x0E, 0x0D, 0xCE, 0xB0, 0x81, 0xC9,  // ........
                        /* 2770 */  0xA1, 0x83, 0x0D, 0x1B, 0xF8, 0xD8, 0x18, 0x36,  // .......6
                        /* 2778 */  0x90, 0x39, 0x74, 0xF0, 0x61, 0x03, 0xD3, 0x49,  // .9t.a..I
                        /* 2780 */  0x83, 0xE1, 0xFF, 0x7F, 0xFD, 0xC0, 0x0C, 0x1B,  // ........
                        /* 2788 */  0x5C, 0x3A, 0x0E, 0x0F, 0x80, 0xAA, 0x53, 0x20,  // \:....S 
                        /* 2790 */  0x0E, 0xD8, 0xE3, 0xF6, 0x3D, 0x2F, 0x42, 0xF0,  // ....=/B.
                        /* 2798 */  0x17, 0xBD, 0x67, 0xF0, 0xB3, 0x89, 0xF0, 0x3C,  // ..g....<
                        /* 27A0 */  0x69, 0xF4, 0x67, 0xF5, 0x3E, 0x05, 0x68, 0x85,  // i.g.>.h.
                        /* 27A8 */  0x10, 0xDA, 0x2B, 0x4A, 0xB0, 0x38, 0x41, 0x8E,  // ..+J.8A.
                        /* 27B0 */  0x22, 0x48, 0x85, 0x70, 0xE4, 0xB6, 0x68, 0x98,  // "H.p..h.
                        /* 27B8 */  0x40, 0x3E, 0xB4, 0xC0, 0x18, 0x04, 0x47, 0x8E,  // @>....G.
                        /* 27C0 */  0x77, 0x48, 0x61, 0x0F, 0xE2, 0x64, 0xA2, 0x9C,  // wHa..d..
                        /* 27C8 */  0xC7, 0x31, 0x79, 0x74, 0x4F, 0xE1, 0x1E, 0x53,  // .1ytO..S
                        /* 27D0 */  0xB9, 0xC3, 0xD6, 0xF5, 0x09, 0x77, 0x7E, 0xE7,  // .....w~.
                        /* 27D8 */  0x04, 0x16, 0x6D, 0x06, 0x84, 0x49, 0x3F, 0x20,  // ..m..I? 
                        /* 27E0 */  0x48, 0xD6, 0x73, 0x80, 0xC2, 0xF8, 0xF0, 0xE8,  // H.s.....
                        /* 27E8 */  0xB3, 0x3C, 0xFE, 0x4C, 0x70, 0x22, 0xE7, 0xFA,  // .<.Lp"..
                        /* 27F0 */  0x20, 0xC0, 0x4E, 0x96, 0x86, 0xE3, 0xC3, 0xF4,  //  .N.....
                        /* 27F8 */  0xC4, 0xDE, 0xE8, 0x0F, 0xF7, 0xE1, 0xDE, 0x03,  // ........
                        /* 2800 */  0x7E, 0x13, 0x08, 0xC9, 0xAE, 0xFC, 0x0F, 0x8C,  // ~.......
                        /* 2808 */  0xD8, 0x69, 0x9D, 0x94, 0xAF, 0xEF, 0x11, 0x0F,  // .i......
                        /* 2810 */  0xCA, 0x30, 0x09, 0xFE, 0xFF, 0x0F, 0x0A, 0x1C,  // .0......
                        /* 2818 */  0x8D, 0x43, 0x63, 0x87, 0xE1, 0x01, 0x07, 0x3B,  // .Cc....;
                        /* 2820 */  0x88, 0xC3, 0x78, 0x6B, 0x34, 0x81, 0x27, 0x74,  // ..xk4.'t
                        /* 2828 */  0xA2, 0x07, 0xF9, 0x46, 0xF0, 0x74, 0x10, 0x35,  // ...F.t.5
                        /* 2830 */  0x46, 0x73, 0x27, 0x7A, 0xC4, 0x59, 0x01, 0x1C,  // Fs'z.Y..
                        /* 2838 */  0x47, 0x01, 0x58, 0xB3, 0xF7, 0x39, 0xE0, 0x31,  // G.X..9.1
                        /* 2840 */  0x20, 0x54, 0xF0, 0xD7, 0x85, 0xD8, 0xA7, 0x72,  //  T.....r
                        /* 2848 */  0x2E, 0xF1, 0x9F, 0x2B, 0x8D, 0x72, 0x18, 0x98,  // ...+.r..
                        /* 2850 */  0x93, 0x84, 0x6F, 0xFD, 0xEF, 0x09, 0x3E, 0x49,  // ..o...>I
                        /* 2858 */  0x30, 0xF7, 0xE3, 0xD1, 0xFD, 0xB4, 0xB5, 0x19,  // 0.......
                        /* 2860 */  0x09, 0x24, 0x06, 0xB3, 0x85, 0xA1, 0xFB, 0xE5,  // .$......
                        /* 2868 */  0x69, 0x1A, 0xC5, 0x77, 0x81, 0xF3, 0x7A, 0x61,  // i..w..za
                        /* 2870 */  0x88, 0x72, 0x0C, 0x27, 0x11, 0x25, 0x50, 0x94,  // .r.'.%P.
                        /* 2878 */  0x20, 0xD1, 0xDE, 0x75, 0x23, 0x46, 0x8B, 0x11,  //  ..u#F..
                        /* 2880 */  0x37, 0x44, 0xD4, 0x30, 0xF1, 0x22, 0xB4, 0x3F,  // 7D.0.".?
                        /* 2888 */  0x08, 0x12, 0xEE, 0x34, 0xA0, 0x03, 0x87, 0x23,  // ...4...#
                        /* 2890 */  0x8D, 0x06, 0x75, 0x98, 0xE2, 0xA7, 0x81, 0xD7,  // ..u.....
                        /* 2898 */  0x0A, 0x1F, 0x38, 0x0C, 0x72, 0x06, 0x9E, 0xDD,  // ..8.r...
                        /* 28A0 */  0xA3, 0x80, 0x07, 0xCD, 0xEE, 0x08, 0xFE, 0x1D,  // ........
                        /* 28A8 */  0xF8, 0x6C, 0x80, 0x77, 0x0D, 0xA8, 0x4B, 0xC1,  // .l.w..K.
                        /* 28B0 */  0x23, 0x01, 0x3B, 0x7B, 0xC0, 0x3F, 0x65, 0xC0,  // #.;{.?e.
                        /* 28B8 */  0x1F, 0x8F, 0xCF, 0x00, 0x9E, 0xCF, 0x09, 0x27,  // .......'
                        /* 28C0 */  0xB0, 0xFC, 0x41, 0xA0, 0x46, 0x66, 0x68, 0x9F,  // ..A.Ffh.
                        /* 28C8 */  0x01, 0x4E, 0xEB, 0x55, 0xC0, 0x27, 0x84, 0xC3,  // .N.U.'..
                        /* 28D0 */  0x62, 0xA7, 0x02, 0x1F, 0xEA, 0xC1, 0xF0, 0xFF,  // b.......
                        /* 28D8 */  0x1F, 0x0F, 0x18, 0x46, 0xFE, 0x84, 0xE1, 0xFB,  // ...F....
                        /* 28E0 */  0x82, 0xE7, 0xEB, 0x03, 0x07, 0xF6, 0x10, 0x02,  // ........
                        /* 28E8 */  0xB6, 0xA3, 0x02, 0xEE, 0x08, 0x02, 0x4C, 0x44,  // ......LD
                        /* 28F0 */  0x69, 0x19, 0x02, 0x0B, 0x7E, 0x40, 0x90, 0x8D,  // i...~@..
                        /* 28F8 */  0x13, 0x32, 0x3D, 0x77, 0x58, 0x16, 0x90, 0x4E,  // .2=wX..N
                        /* 2900 */  0x65, 0x6C, 0x14, 0x3D, 0x62, 0x0B, 0xF7, 0x94,  // el.=b...
                        /* 2908 */  0x0C, 0x6E, 0x84, 0xD7, 0x3F, 0xDC, 0x51, 0xDF,  // .n..?.Q.
                        /* 2910 */  0x0C, 0x82, 0x20, 0xF1, 0x0F, 0x73, 0x74, 0x4C,  // .. ..stL
                        /* 2918 */  0x1E, 0x82, 0xE3, 0x82, 0x51, 0x10, 0x9F, 0x01,  // ....Q...
                        /* 2920 */  0x1C, 0xE5, 0x38, 0x00, 0xE5, 0x02, 0xE4, 0x8B,  // ..8.....
                        /* 2928 */  0x0D, 0xBB, 0x5C, 0x98, 0xE0, 0x19, 0xC8, 0x87,  // ..\.....
                        /* 2930 */  0x06, 0x38, 0x03, 0x8C, 0x78, 0x72, 0x9E, 0x86,  // .8..xr..
                        /* 2938 */  0xE1, 0x7C, 0x12, 0xE2, 0x70, 0xBE, 0xC0, 0x33,  // .|..p..3
                        /* 2940 */  0x02, 0x76, 0x28, 0x00, 0xDF, 0xD1, 0x1D, 0x77,  // .v(....w
                        /* 2948 */  0x28, 0x80, 0x07, 0xE4, 0x3B, 0x80, 0x95, 0x9E,  // (...;...
                        /* 2950 */  0x03, 0xE8, 0x1C, 0x42, 0x84, 0x89, 0xE6, 0xFF,  // ...B....
                        /* 2958 */  0x3F, 0x3C, 0x26, 0xD8, 0xA8, 0xE8, 0xF1, 0xC9,  // ?<&.....
                        /* 2960 */  0xE3, 0xE2, 0xC7, 0x02, 0x1F, 0x5C, 0x18, 0xF6,  // .....\..
                        /* 2968 */  0x0B, 0x80, 0x45, 0x4F, 0x47, 0xA3, 0x7F, 0x62,  // ..EOG..b
                        /* 2970 */  0x62, 0xC3, 0x36, 0xAC, 0x47, 0xCA, 0x61, 0x8D,  // b.6.G.a.
                        /* 2978 */  0xF6, 0x74, 0xE4, 0x71, 0xF9, 0xDE, 0xE1, 0x1B,  // .t.q....
                        /* 2980 */  0x91, 0x4F, 0x02, 0xEC, 0x9C, 0x0D, 0xAE, 0xB3,  // .O......
                        /* 2988 */  0x01, 0x3B, 0x42, 0x62, 0x4E, 0x07, 0xFC, 0x1A,  // .;BbN...
                        /* 2990 */  0x88, 0x3D, 0x2C, 0xC0, 0x3E, 0x43, 0xF9, 0xB0,  // .=,.>C..
                        /* 2998 */  0x00, 0xFC, 0xEF, 0x26, 0x3E, 0x89, 0xF0, 0xC3,  // ...&>...
                        /* 29A0 */  0x02, 0x60, 0xE6, 0xFF, 0x7F, 0x58, 0x00, 0xD3,  // .`...X..
                        /* 29A8 */  0xA0, 0x7D, 0x58, 0x00, 0x4E, 0x67, 0x03, 0x76,  // .}X.Ng.v
                        /* 29B0 */  0x58, 0x00, 0x43, 0xC6, 0x95, 0xE9, 0xB0, 0x80,  // X.C.....
                        /* 29B8 */  0x53, 0x00, 0xA4, 0x83, 0x0A, 0xFE, 0x00, 0x0E,  // S.......
                        /* 29C0 */  0x27, 0xEF, 0xF2, 0x74, 0x4A, 0xF0, 0x00, 0x9D,  // '..tJ...
                        /* 29C8 */  0x94, 0x42, 0xA9, 0x0F, 0x0B, 0xA8, 0x9C, 0x87,  // .B......
                        /* 29D0 */  0x05, 0x0A, 0x62, 0x40, 0x87, 0x80, 0x90, 0x91,  // ..b@....
                        /* 29D8 */  0xC3, 0x02, 0xEA, 0xA8, 0xE7, 0x91, 0xF0, 0xD3,  // ........
                        /* 29E0 */  0x01, 0x3B, 0xCF, 0x9C, 0x3B, 0x9B, 0xA4, 0xA7,  // .;..;...
                        /* 29E8 */  0xCC, 0xAF, 0x66, 0xBE, 0x2B, 0x30, 0xE4, 0x6A,  // ..f.+0.j
                        /* 29F0 */  0xEE, 0x00, 0x28, 0x30, 0x5F, 0x15, 0x30, 0xE3,  // ..(0_.0.
                        /* 29F8 */  0xF7, 0xF1, 0x0E, 0x1C, 0xC7, 0xAA, 0x04, 0xF5,  // ........
                        /* 2A00 */  0x9D, 0x14, 0x40, 0x8E, 0xCE, 0x23, 0x6F, 0x53,  // ..@..#oS
                        /* 2A08 */  0x53, 0xE5, 0x21, 0x6F, 0x1B, 0x14, 0xC4, 0x03,  // S.!o....
                        /* 2A10 */  0xF3, 0x4D, 0xCB, 0x4E, 0x20, 0xF4, 0xFF, 0x9F,  // .M.N ...
                        /* 2A18 */  0x2A, 0x7F, 0x06, 0xF8, 0x44, 0x0F, 0x0B, 0xE5,  // *...D...
                        /* 2A20 */  0xB0, 0xAA, 0x3F, 0x45, 0x91, 0x6B, 0x0E, 0xB8,  // ..?E.k..
                        /* 2A28 */  0xC7, 0xE3, 0xEB, 0x21, 0x78, 0x9C, 0x1D, 0xD3,  // ...!x...
                        /* 2A30 */  0x74, 0x27, 0xE1, 0x46, 0x2E, 0x0B, 0x74, 0x64,  // t'.F..td
                        /* 2A38 */  0x3E, 0x0D, 0xF8, 0xE8, 0x0F, 0xEF, 0x8E, 0xE1,  // >.......
                        /* 2A40 */  0xFB, 0x99, 0xC7, 0x05, 0x77, 0x4A, 0xBE, 0xF3,  // ....wJ..
                        /* 2A48 */  0xE1, 0xAE, 0x1A, 0x6C, 0xA0, 0x7C, 0x4C, 0x0F,  // ...l.|L.
                        /* 2A50 */  0x29, 0x1E, 0x31, 0xFC, 0x81, 0xC2, 0xBB, 0x77,  // ).1....w
                        /* 2A58 */  0xF0, 0x8B, 0x02, 0x78, 0x6E, 0x28, 0xC0, 0x1B,  // ...xn(..
                        /* 2A60 */  0x96, 0x8F, 0x9C, 0xFF, 0xFF, 0x6F, 0x47, 0xC0,  // .....oG.
                        /* 2A68 */  0xEB, 0x96, 0x8A, 0x39, 0xA1, 0xE0, 0x0E, 0x00,  // ...9....
                        /* 2A70 */  0x5A, 0xBA, 0x6E, 0x28, 0x38, 0xB1, 0xB7, 0x23,  // Z.n(8..#
                        /* 2A78 */  0x28, 0x37, 0x14, 0x38, 0xD2, 0x6E, 0x47, 0x28,  // (7.8.nG(
                        /* 2A80 */  0x51, 0x14, 0x92, 0x74, 0xCE, 0x40, 0x5D, 0x92,  // Q..t.@].
                        /* 2A88 */  0x38, 0x88, 0x8F, 0x04, 0x0E, 0x78, 0x7C, 0x40,  // 8....x|@
                        /* 2A90 */  0x0F, 0xC5, 0xC7, 0x04, 0x58, 0x97, 0x80, 0x40,  // ....X..@
                        /* 2A98 */  0x0F, 0x42, 0xAF, 0x99, 0xFC, 0xBE, 0xE2, 0x13,  // .B......
                        /* 2AA0 */  0x04, 0x9C, 0x2B, 0x12, 0xDC, 0x49, 0xB0, 0x63,  // ..+..I.c
                        /* 2AA8 */  0x07, 0xE6, 0xA6, 0x04, 0xEF, 0xDC, 0x00, 0x78,  // .......x
                        /* 2AB0 */  0xF9, 0xFF, 0x9F, 0x1B, 0x70, 0xE3, 0xF5, 0x45,  // ....p..E
                        /* 2AB8 */  0x09, 0x38, 0x9E, 0x1B, 0xE0, 0x49, 0x5B, 0x90,  // .8...I[.
                        /* 2AC0 */  0xCE, 0x0D, 0xFC, 0x0C, 0x60, 0xF1, 0x17, 0x25,  // ....`..%
                        /* 2AC8 */  0x28, 0x97, 0x03, 0x9C, 0x5C, 0x40, 0x5D, 0x93,  // (...\@].
                        /* 2AD0 */  0xB8, 0x50, 0x18, 0xDD, 0x7E, 0x7D, 0x6A, 0xE0,  // .P..~}j.
                        /* 2AD8 */  0xC7, 0x08, 0xC3, 0x19, 0xC4, 0xE3, 0x75, 0x86,  // ......u.
                        /* 2AE0 */  0x6B, 0x12, 0xFA, 0xCA, 0xE9, 0x71, 0xB0, 0x63,  // k....q.c
                        /* 2AE8 */  0x12, 0x70, 0x8D, 0x31, 0x23, 0xF4, 0xE1, 0xDC,  // .p.1#...
                        /* 2AF0 */  0xC7, 0x6D, 0xDC, 0x98, 0xC0, 0x7D, 0x28, 0xE4,  // .m...}(.
                        /* 2AF8 */  0x27, 0x29, 0xB0, 0xFD, 0xFF, 0x4F, 0x52, 0xE0,  // ')...OR.
                        /* 2B00 */  0x0F, 0x7B, 0x1A, 0x40, 0xC5, 0x3B, 0x0D, 0x50,  // .{.@.;.P
                        /* 2B08 */  0x10, 0x0F, 0xCC, 0x81, 0x4E, 0x52, 0xE8, 0x53,  // ....NR.S
                        /* 2B10 */  0x82, 0x4F, 0x03, 0xEC, 0x86, 0x80, 0xB9, 0x06,  // .O......
                        /* 2B18 */  0x61, 0x0E, 0x52, 0x60, 0x3F, 0x31, 0xF8, 0x20,  // a.R`?1. 
                        /* 2B20 */  0x05, 0xBE, 0xA8, 0x47, 0x17, 0xF4, 0xA9, 0xC9,  // ...G....
                        /* 2B28 */  0x03, 0xC3, 0x13, 0x38, 0xD6, 0x39, 0x0A, 0x14,  // ...8.9..
                        /* 2B30 */  0xA7, 0x13, 0xDC, 0x39, 0x0A, 0xF6, 0x78, 0x61,  // ...9..xa
                        /* 2B38 */  0x0D, 0x13, 0xDE, 0x01, 0x85, 0x9F, 0x5F, 0x80,  // ......_.
                        /* 2B40 */  0xD7, 0xFF, 0xFF, 0xFC, 0x02, 0x2F, 0xD4, 0xF9,  // ...../..
                        /* 2B48 */  0x05, 0x74, 0x16, 0xCE, 0x2F, 0xA0, 0xBB, 0x2F,  // .t../../
                        /* 2B50 */  0xE3, 0x8F, 0x51, 0xE0, 0x99, 0x3F, 0xE6, 0x79,  // ..Q..?.y
                        /* 2B58 */  0xC0, 0xE2, 0xDF, 0x58, 0x51, 0x27, 0x00, 0x0B,  // ...XQ'..
                        /* 2B60 */  0x3C, 0x44, 0x41, 0xB9, 0x23, 0xE0, 0x8E, 0x4F,  // <DA.#..O
                        /* 2B68 */  0x3E, 0x42, 0x71, 0x31, 0x14, 0x92, 0x72, 0xC0,  // >Bq1..r.
                        /* 2B70 */  0x40, 0x5D, 0x59, 0x0D, 0x66, 0x10, 0x1F, 0x22,  // @]Y.f.."
                        /* 2B78 */  0x7C, 0x00, 0xF2, 0xC1, 0x01, 0x1C, 0xC7, 0x27,  // |......'
                        /* 2B80 */  0x70, 0x1F, 0x0E, 0x7C, 0x7C, 0x02, 0xEE, 0xFF,  // p..||...
                        /* 2B88 */  0xFF, 0xF3, 0x02, 0x70, 0x38, 0xD1, 0xF8, 0xBC,  // ...p8...
                        /* 2B90 */  0x00, 0x9C, 0x8E, 0x4F, 0xF8, 0xF3, 0x02, 0x3E,  // ...O...>
                        /* 2B98 */  0xFC, 0x19, 0x0E, 0x75, 0x5E, 0xB1, 0x30, 0x20,  // ...u^.0 
                        /* 2BA0 */  0x1D, 0x9E, 0xB0, 0xD3, 0x3D, 0xF0, 0xB3, 0x78,  // ....=..x
                        /* 2BA8 */  0xD9, 0xF7, 0x84, 0x0C, 0xC7, 0x8E, 0x71, 0xD8,  // ......q.
                        /* 2BB0 */  0xA7, 0x82, 0x4F, 0x50, 0x3C, 0x3A, 0x89, 0x42,  // ..OP<:.B
                        /* 2BB8 */  0xDF, 0x5B, 0x51, 0x31, 0x0F, 0x0D, 0x14, 0xC4,  // .[Q1....
                        /* 2BC0 */  0x80, 0x3E, 0x41, 0x01, 0x16, 0x8E, 0x47, 0xC0,  // .>A...G.
                        /* 2BC8 */  0xE2, 0xEC, 0x67, 0x74, 0xFF, 0xFF, 0x61, 0x1C,  // ..gt..a.
                        /* 2BD0 */  0x7B, 0xA8, 0x14, 0xC4, 0x43, 0xF5, 0xB9, 0xD5,  // {...C...
                        /* 2BD8 */  0xD7, 0x2A, 0x9F, 0x5B, 0x71, 0x57, 0x00, 0xF8,  // .*.[qW..
                        /* 2BE0 */  0xE7, 0x56, 0xE0, 0x69, 0x4C, 0x80, 0x36, 0x48,  // .V.iL.6H
                        /* 2BE8 */  0x72, 0xD6, 0x00, 0x1E, 0xD1, 0xCE, 0x1A, 0xA0,  // r.......
                        /* 2BF0 */  0xF3, 0x70, 0xD6, 0x00, 0xDD, 0x68, 0x1E, 0x75,  // .p...h.u
                        /* 2BF8 */  0xC0, 0x76, 0x14, 0xC0, 0x9E, 0x37, 0x30, 0x67,  // .v...70g
                        /* 2C00 */  0x01, 0x9C, 0xB6, 0x2B, 0x37, 0x6A, 0xC8, 0x56,  // ...+7j.V
                        /* 2C08 */  0x7B, 0xDC, 0x80, 0x7E, 0x91, 0xC3, 0x0D, 0xEA,  // {..~....
                        /* 2C10 */  0xCC, 0x3C, 0x06, 0xC3, 0xBC, 0xE1, 0xFB, 0xFF,  // .<......
                        /* 2C18 */  0x0F, 0xEA, 0x1B, 0x8E, 0xD5, 0x1C, 0x39, 0x50,  // ......9P
                        /* 2C20 */  0x3A, 0x28, 0x94, 0xFB, 0xC8, 0x81, 0x4A, 0x7A,  // :(....Jz
                        /* 2C28 */  0x32, 0xA0, 0x20, 0x06, 0xF4, 0x0D, 0x0F, 0xB8,  // 2. .....
                        /* 2C30 */  0xDD, 0x39, 0x80, 0xB5, 0x9C, 0x3B, 0x07, 0x6A,  // .9...;.j
                        /* 2C38 */  0xAB, 0x9E, 0xAB, 0x29, 0x3C, 0x57, 0x87, 0xBB,  // ...)<W..
                        /* 2C40 */  0x73, 0xA0, 0xA5, 0xDD, 0x39, 0x20, 0x1C, 0x04,  // s...9 ..
                        /* 2C48 */  0xC0, 0x71, 0xF1, 0x00, 0xBC, 0xFC, 0xFF, 0x2F,  // .q...../
                        /* 2C50 */  0x1E, 0x60, 0x08, 0x79, 0xF1, 0x00, 0x1D, 0xB8,  // .`.y....
                        /* 2C58 */  0x2F, 0x1E, 0xE0, 0x82, 0x7F, 0xF1, 0x00, 0xFB,  // /.......
                        /* 2C60 */  0x7D, 0x00, 0x77, 0x72, 0xF2, 0x81, 0x00, 0xCE,  // }.wr....
                        /* 2C68 */  0xDB, 0xC3, 0x31, 0x6C, 0x8C, 0x84, 0xC5, 0x78,  // ..1l...x
                        /* 2C70 */  0x03, 0x48, 0x38, 0x0C, 0xEA, 0x3C, 0xE1, 0x53,  // .H8..<.S
                        /* 2C78 */  0x01, 0x7E, 0x9C, 0x87, 0x79, 0x74, 0x07, 0xC6,  // .~..yt..
                        /* 2C80 */  0xEE, 0xCF, 0x86, 0xE3, 0x47, 0x00, 0x0F, 0xAC,  // ....G...
                        /* 2C88 */  0xF9, 0xC1, 0x68, 0x1C, 0xE7, 0xEB, 0x99, 0x85,  // ..h.....
                        /* 2C90 */  0x64, 0xA7, 0x06, 0xDF, 0x17, 0x71, 0xA7, 0x80,  // d....q..
                        /* 2C98 */  0xB3, 0x39, 0xA8, 0xDA, 0x11, 0x35, 0xD3, 0x53,  // .9...5.S
                        /* 2CA0 */  0x32, 0x81, 0x07, 0xCF, 0xD0, 0x38, 0x34, 0x76,  // 2....84v
                        /* 2CA8 */  0x18, 0xBE, 0x15, 0x04, 0x3B, 0x88, 0xC3, 0x78,  // ....;..x
                        /* 2CB0 */  0x8B, 0xE3, 0x13, 0x3A, 0xCD, 0x72, 0x6F, 0x0B,  // ...:.ro.
                        /* 2CB8 */  0xBA, 0xB9, 0x45, 0x8D, 0xD1, 0xDC, 0x09, 0x02,  // ..E.....
                        /* 2CC0 */  0x31, 0x76, 0x70, 0x80, 0xF9, 0x40, 0xF2, 0xD0,  // 1vp..@..
                        /* 2CC8 */  0x60, 0x88, 0x58, 0x7C, 0xC4, 0x31, 0x42, 0x3D,  // `.X|.1B=
                        /* 2CD0 */  0x00, 0x78, 0x44, 0xAD, 0x82, 0xC8, 0x27, 0x8A,  // .xD...'.
                        /* 2CD8 */  0x30, 0xFE, 0xFF, 0xB1, 0x4F, 0xE6, 0xD4, 0x7D,  // 0...O..}
                        /* 2CE0 */  0x2C, 0xF0, 0xAD, 0xC0, 0x27, 0x00, 0x4F, 0x28,  // ,...'.O(
                        /* 2CE8 */  0xF2, 0x59, 0x3C, 0x55, 0x18, 0xE5, 0x60, 0x30,  // .Y<U..`0
                        /* 2CF0 */  0x77, 0x2D, 0x7B, 0xBE, 0x49, 0x90, 0xEB, 0x17,  // w-{.I...
                        /* 2CF8 */  0x73, 0x3F, 0x2C, 0x4D, 0xE0, 0xB0, 0x8E, 0xEB,  // s?,M....
                        /* 2D00 */  0x1D, 0xB4, 0xB5, 0xD3, 0x84, 0x46, 0xD3, 0x16,  // .....F..
                        /* 2D08 */  0x92, 0x10, 0x5E, 0x20, 0x9E, 0x21, 0xA2, 0xC4,  // ..^ .!..
                        /* 2D10 */  0x89, 0x14, 0xE4, 0xC5, 0x24, 0x4A, 0x6F, 0x28,  // ....$Jo(
                        /* 2D18 */  0x02, 0x8C, 0x19, 0x25, 0xC8, 0xEB, 0x68, 0xB0,  // ...%..h.
                        /* 2D20 */  0x57, 0x9B, 0x90, 0x21, 0x62, 0x56, 0x08, 0xAE,  // W..!bV..
                        /* 2D28 */  0x01, 0x44, 0x89, 0xD0, 0xFE, 0x20, 0x48, 0xE4,  // .D... H.
                        /* 2D30 */  0x97, 0x80, 0x7C, 0xDC, 0xA7, 0xE8, 0x68, 0xF8,  // ..|...h.
                        /* 2D38 */  0xED, 0x95, 0x9F, 0x09, 0x5E, 0x14, 0x3C, 0xA9,  // ....^.<.
                        /* 2D40 */  0x27, 0x1D, 0xCF, 0xF5, 0xCC, 0xEA, 0x9C, 0x1C,  // '.......
                        /* 2D48 */  0x25, 0xF0, 0xD0, 0x7C, 0x0C, 0x81, 0xE3, 0x1A,  // %..|....
                        /* 2D50 */  0x50, 0x57, 0x83, 0x07, 0x03, 0x76, 0x60, 0x30,  // PW...v`0
                        /* 2D58 */  0x1C, 0x1F, 0xA2, 0x4F, 0x0D, 0x9E, 0xC0, 0x21,  // ...O...!
                        /* 2D60 */  0x32, 0x40, 0x9F, 0x43, 0xE0, 0x8F, 0xC7, 0x27,  // 2@.C...'
                        /* 2D68 */  0x01, 0xCF, 0xE7, 0x84, 0x13, 0x58, 0xFE, 0x20,  // .....X. 
                        /* 2D70 */  0x50, 0x23, 0x33, 0xB4, 0xE7, 0x7A, 0x5A, 0xCF,  // P#3..zZ.
                        /* 2D78 */  0x02, 0x3E, 0x27, 0x1C, 0x16, 0x13, 0x7B, 0xF7,  // .>'...{.
                        /* 2D80 */  0xA1, 0xE3, 0x01, 0xFF, 0x65, 0xEF, 0xF1, 0x20,  // ....e.. 
                        /* 2D88 */  0xC2, 0x5B, 0x83, 0xE7, 0x6B, 0x82, 0x71, 0x6F,  // .[..k.qo
                        /* 2D90 */  0x74, 0x50, 0xC6, 0xFC, 0x40, 0xE2, 0xE1, 0xB0,  // tP..@...
                        /* 2D98 */  0x78, 0x77, 0x4A, 0x2A, 0xEA, 0x70, 0x82, 0xBA,  // xwJ*.p..
                        /* 2DA0 */  0xD4, 0x62, 0x0E, 0x04, 0x6F, 0x1D, 0x86, 0x78,  // .b..o..x
                        /* 2DA8 */  0x36, 0x61, 0xFF, 0x8D, 0xFF, 0xFF, 0x81, 0x81,  // 6a......
                        /* 2DB0 */  0xE1, 0x08, 0x83, 0x3B, 0x4D, 0xC0, 0x3D, 0x44,  // ...;M.=D
                        /* 2DB8 */  0xB0, 0x29, 0x71, 0x94, 0x47, 0x07, 0xEB, 0xBA,  // .)q.G...
                        /* 2DC0 */  0x23, 0x81, 0x2E, 0xF2, 0x38, 0xD1, 0xC0, 0x6C,  // #...8..l
                        /* 2DC8 */  0x26, 0x21, 0x03, 0x3F, 0x23, 0xBC, 0xA5, 0x98,  // &!.?#...
                        /* 2DD0 */  0x60, 0xC0, 0x81, 0x82, 0xEA, 0x40, 0x00, 0x8E,  // `....@..
                        /* 2DD8 */  0x8B, 0x90, 0x07, 0x0A, 0xA6, 0x39, 0x31, 0x90,  // .....91.
                        /* 2DE0 */  0x60, 0x07, 0xC5, 0x26, 0xEA, 0x91, 0x82, 0xF1,  // `..&....
                        /* 2DE8 */  0xD6, 0x8D, 0x03, 0x36, 0x6A, 0xC4, 0x80, 0xE7,  // ...6j...
                        /* 2DF0 */  0xF0, 0x1C, 0xC2, 0x47, 0x0A, 0x2E, 0x40, 0x9F,  // ...G..@.
                        /* 2DF8 */  0x10, 0xC0, 0xFC, 0xFF, 0x1F, 0x29, 0x9C, 0xDB,  // .....)..
                        /* 2E00 */  0x8F, 0xE7, 0xE4, 0x13, 0x02, 0xE6, 0x1A, 0x0E,  // ........
                        /* 2E08 */  0xBE, 0x0B, 0xB0, 0xAF, 0xEB, 0xF8, 0x53, 0x0D,  // ......S.
                        /* 2E10 */  0x9B, 0x55, 0xD8, 0x67, 0x8C, 0xA8, 0xB5, 0x5E,  // .U.g...^
                        /* 2E18 */  0x75, 0x08, 0xCC, 0xD3, 0x05, 0x3B, 0x49, 0x79,  // u....;Iy
                        /* 2E20 */  0xB0, 0xE0, 0x01, 0xF5, 0x60, 0xE1, 0x5F, 0x64,  // ....`._d
                        /* 2E28 */  0xC1, 0x33, 0x2A, 0xEC, 0x2C, 0x9E, 0x4F, 0xCE,  // .3*.,.O.
                        /* 2E30 */  0x8A, 0x1F, 0x13, 0xD8, 0x70, 0xC1, 0x17, 0xF8,  // ....p...
                        /* 2E38 */  0x9C, 0x00, 0xE5, 0x14, 0xE0, 0xB9, 0xE2, 0x0E,  // ........
                        /* 2E40 */  0x26, 0xE0, 0xBA, 0x85, 0x7B, 0xAC, 0xF0, 0xE5,  // &...{...
                        /* 2E48 */  0x9D, 0x13, 0x40, 0x36, 0x25, 0xCC, 0x31, 0x81,  // ..@6%.1.
                        /* 2E50 */  0xFD, 0xFF, 0x07, 0x0A, 0xB6, 0x7B, 0xAF, 0x07,  // .....{..
                        /* 2E58 */  0x8A, 0x1B, 0x9E, 0x81, 0x43, 0xFA, 0x90, 0x80,  // ....C...
                        /* 2E60 */  0x3D, 0x60, 0x80, 0xEB, 0x40, 0xE6, 0x03, 0x06,  // =`..@...
                        /* 2E68 */  0xF0, 0x18, 0x13, 0x9B, 0x29, 0x7E, 0xA8, 0xC0,  // ....)~..
                        /* 2E70 */  0xE3, 0x72, 0xEE, 0xA1, 0x82, 0xF9, 0xFA, 0xEA,  // .r......
                        /* 2E78 */  0xA1, 0x02, 0x93, 0x31, 0x79, 0xA8, 0xC0, 0x20,  // ...1y.. 
                        /* 2E80 */  0xB8, 0x80, 0xFF, 0xFF, 0x50, 0xB1, 0xA3, 0xF1,  // ....P...
                        /* 2E88 */  0x6D, 0xEE, 0x8D, 0x8E, 0x8F, 0x15, 0x1B, 0x71,  // m......q
                        /* 2E90 */  0xAC, 0xA0, 0x1A, 0x91, 0x8F, 0x43, 0xC0, 0x63,  // .....C.c
                        /* 2E98 */  0x50, 0x98, 0xC1, 0x02, 0x83, 0x8B, 0xB6, 0x8F,  // P.......
                        /* 2EA0 */  0x09, 0xF8, 0x63, 0x87, 0x21, 0xCE, 0xE6, 0xD5,  // ..c.!...
                        /* 2EA8 */  0x90, 0x5D, 0x88, 0xD8, 0x58, 0xC1, 0x65, 0xE2,  // .]..X.e.
                        /* 2EB0 */  0x24, 0x05, 0x84, 0xE6, 0x84, 0xB9, 0x10, 0x61,  // $......a
                        /* 2EB8 */  0x4E, 0x44, 0xC0, 0x60, 0x38, 0x3E, 0xFE, 0x9D,  // ND.`8>..
                        /* 2EC0 */  0x2B, 0xFE, 0xFF, 0x3F, 0x32, 0x76, 0xD1, 0xF7,  // +..?2v..
                        /* 2EC8 */  0x60, 0xC1, 0xA3, 0x62, 0xB0, 0xA0, 0x38, 0x63,  // `..b..8c
                        /* 2ED0 */  0x1E, 0x2C, 0x58, 0x06, 0x65, 0x88, 0xD7, 0xC6,  // .,X.e...
                        /* 2ED8 */  0xC3, 0x05, 0x2E, 0xD1, 0x4F, 0x0A, 0x50, 0x0E,  // ....O.P.
                        /* 2EE0 */  0x90, 0xBE, 0x67, 0xB2, 0x8B, 0x12, 0x1B, 0x2D,  // ..g....-
                        /* 2EE8 */  0xF8, 0xC6, 0xEA, 0xD1, 0x02, 0x0F, 0x30, 0x4F,  // ......0O
                        /* 2EF0 */  0x28, 0xFA, 0x03, 0xDC, 0xAB, 0x98, 0xB1, 0x1E,  // (.......
                        /* 2EF8 */  0x31, 0x3D, 0x58, 0x1F, 0x6F, 0x0C, 0x13, 0xF9,  // 1=X.o...
                        /* 2F00 */  0xB1, 0x08, 0x9C, 0x82, 0xCF, 0xCA, 0xA0, 0x40,  // .......@
                        /* 2F08 */  0x89, 0xFE, 0x30, 0xE0, 0x13, 0x48, 0x88, 0x68,  // ..0..H.h
                        /* 2F10 */  0xBE, 0xB1, 0x1A, 0xE4, 0xFF, 0x1F, 0xC8, 0xA7,  // ........
                        /* 2F18 */  0x65, 0xA3, 0xFA, 0x46, 0x60, 0x97, 0x53, 0x11,  // e..F`.S.
                        /* 2F20 */  0xE6, 0xB3, 0x70, 0xB4, 0x43, 0x8B, 0x7E, 0x32,  // ..p.C.~2
                        /* 2F28 */  0x21, 0x12, 0xF8, 0x10, 0x86, 0x1F, 0x08, 0x47,  // !......G
                        /* 2F30 */  0x7D, 0x7C, 0x66, 0x03, 0x79, 0x83, 0x36, 0xFE,  // }|f.y.6.
                        /* 2F38 */  0x71, 0xF9, 0xA0, 0x6B, 0x84, 0xE3, 0x7A, 0xBE,  // q..k..z.
                        /* 2F40 */  0x7D, 0x46, 0xF0, 0x3D, 0x0C, 0x73, 0x8A, 0xC6,  // }F.=.s..
                        /* 2F48 */  0x29, 0xB3, 0x02, 0xC2, 0xA4, 0x3F, 0x28, 0x25,  // )....?(%
                        /* 2F50 */  0xEB, 0x3D, 0x40, 0x61, 0x7C, 0x26, 0x06, 0x5C,  // .=@a|&.\
                        /* 2F58 */  0x1D, 0x54, 0x7D, 0x58, 0x00, 0xC7, 0x71, 0x00,  // .T}X..q.
                        /* 2F60 */  0xD6, 0x5D, 0x9C, 0x1D, 0x03, 0x42, 0x05, 0x7F,  // .]...B..
                        /* 2F68 */  0x5C, 0x88, 0xFD, 0xD2, 0x60, 0xFC, 0x08, 0x4F,  // \...`..O
                        /* 2F70 */  0xC3, 0xF0, 0xEF, 0xE9, 0x27, 0x14, 0xF5, 0x2D,  // ....'..-
                        /* 2F78 */  0x20, 0xD0, 0x63, 0x70, 0x04, 0x9F, 0x3F, 0x22,  //  .cp..?"
                        /* 2F80 */  0x9D, 0xD4, 0x6B, 0x70, 0xA4, 0xF7, 0x61, 0x0F,  // ..kp..a.
                        /* 2F88 */  0xE1, 0xB8, 0x1E, 0x5E, 0xA3, 0x84, 0x78, 0x6D,  // ...^..xm
                        /* 2F90 */  0x88, 0x10, 0x28, 0x4A, 0xD0, 0x20, 0x6F, 0x93,  // ..(J. o.
                        /* 2F98 */  0x11, 0x82, 0x84, 0x8B, 0x1B, 0xE4, 0xFC, 0x8C,  // ........
                        /* 2FA0 */  0x77, 0x6A, 0x4F, 0xC3, 0x2C, 0x9C, 0x81, 0xFF,  // wjO.,...
                        /* 2FA8 */  0xFF, 0x89, 0x83, 0x9D, 0x86, 0x01, 0x7E, 0x1C,  // ......~.
                        /* 2FB0 */  0x38, 0x70, 0x07, 0x11, 0xB0, 0x1D, 0x15, 0x70,  // 8p.....p
                        /* 2FB8 */  0x47, 0x10, 0x60, 0x92, 0xFC, 0xE5, 0xAB, 0xB3,  // G.`.....
                        /* 2FC0 */  0x87, 0x93, 0xAE, 0x55, 0x36, 0xD6, 0x6A, 0x02,  // ...U6.j.
                        /* 2FC8 */  0x9D, 0x3B, 0xAC, 0x03, 0x48, 0xD3, 0xE1, 0x87,  // .;..H...
                        /* 2FD0 */  0x7F, 0x76, 0x51, 0x31, 0x52, 0x8C, 0xD3, 0x78,  // .vQ1R..x
                        /* 2FD8 */  0x45, 0xF0, 0x35, 0xD5, 0x27, 0x09, 0xA7, 0x3E,  // E.5.'..>
                        /* 2FE0 */  0x2E, 0xE8, 0xBC, 0x6C, 0xDE, 0xFF, 0x7F, 0x82,  // ...l....
                        /* 2FE8 */  0x79, 0x49, 0x94, 0x79, 0x4C, 0x74, 0x08, 0x4E,  // yI.yLt.N
                        /* 2FF0 */  0x79, 0x6C, 0xA6, 0x20, 0x06, 0x74, 0x84, 0x53,  // yl. .t.S
                        /* 2FF8 */  0x31, 0xFA, 0xC0, 0xE4, 0xC3, 0x34, 0x66, 0x58,  // 1....4fX
                        /* 3000 */  0xAF, 0x0C, 0x6C, 0x8E, 0xBE, 0x0C, 0xF0, 0x69,  // ..l....i
                        /* 3008 */  0xF9, 0x78, 0x60, 0x60, 0xAB, 0xB9, 0x07, 0xA1,  // .x``....
                        /* 3010 */  0xC0, 0x7C, 0x14, 0x38, 0x64, 0x9F, 0x7E, 0xC1,  // .|.8d.~.
                        /* 3018 */  0xA7, 0xEF, 0x40, 0x00, 0x0A, 0x20, 0xCF, 0xDF,  // ..@.. ..
                        /* 3020 */  0x67, 0x9C, 0x67, 0x00, 0x36, 0x85, 0xC7, 0x1C,  // g.g.6...
                        /* 3028 */  0xA3, 0x19, 0x9D, 0x5F, 0x9B, 0x3C, 0x53, 0x1E,  // ..._.<S.
                        /* 3030 */  0x76, 0xA6, 0x14, 0xC4, 0x33, 0x75, 0x90, 0xEB,  // v...3u..
                        /* 3038 */  0x34, 0x94, 0xD1, 0x63, 0xAF, 0x25, 0xEC, 0xB6,  // 4..c.%..
                        /* 3040 */  0x01, 0x67, 0xCC, 0x11, 0x1F, 0x0B, 0x3C, 0x0D,  // .g....<.
                        /* 3048 */  0xC3, 0x79, 0xB0, 0x1C, 0xCE, 0x83, 0xE5, 0x63,  // .y.....c
                        /* 3050 */  0xF1, 0x64, 0xC1, 0x75, 0x65, 0xC4, 0x4D, 0x16,  // .d.ue.M.
                        /* 3058 */  0x8C, 0xF0, 0x98, 0x60, 0x83, 0xA2, 0xE3, 0xF1,  // ...`....
                        /* 3060 */  0xB0, 0xF8, 0xD9, 0xC0, 0x17, 0x1E, 0x86, 0xFD,  // ........
                        /* 3068 */  0xFF, 0x7F, 0x72, 0xB0, 0xE8, 0x3B, 0x02, 0xB9,  // ..r..;..
                        /* 3070 */  0xB4, 0x63, 0x60, 0x3D, 0x50, 0x0E, 0x6B, 0xB4,  // .c`=P.k.
                        /* 3078 */  0xB0, 0x2F, 0x39, 0xEF, 0x1C, 0x3E, 0xB0, 0xF8,  // ./9..>..
                        /* 3080 */  0x0A, 0xC6, 0x60, 0x3D, 0x58, 0x0F, 0xE8, 0x8D,  // ..`=X...
                        /* 3088 */  0x07, 0x2C, 0x77, 0x0A, 0x76, 0x00, 0xF7, 0xBD,  // .,w.v...
                        /* 3090 */  0xC2, 0x67, 0x35, 0x5F, 0xD6, 0x7C, 0x11, 0xC0,  // .g5_.|..
                        /* 3098 */  0xFD, 0x30, 0x98, 0xF8, 0x4B, 0x06, 0x3A, 0xDA,  // .0..K.:.
                        /* 30A0 */  0xA2, 0x74, 0xC9, 0xE0, 0xB8, 0x2F, 0x19, 0x30,  // .t.../.0
                        /* 30A8 */  0x83, 0x5C, 0x32, 0x28, 0x84, 0x23, 0x50, 0x28,  // .\2(.#P(
                        /* 30B0 */  0x00, 0x84, 0xCE, 0x0A, 0x5C, 0x32, 0x1C, 0x05,  // ....\2..
                        /* 30B8 */  0xF1, 0x88, 0x1D, 0xE3, 0xAC, 0x80, 0xBE, 0xB8,  // ........
                        /* 30C0 */  0xF8, 0x92, 0x81, 0x39, 0x2A, 0xC0, 0x3C, 0x65,  // ...9*.<e
                        /* 30C8 */  0xB0, 0xA3, 0x02, 0xEC, 0x6B, 0x06, 0xF8, 0x8E,  // ....k...
                        /* 30D0 */  0x13, 0xE0, 0x1E, 0x14, 0x38, 0x8E, 0x13, 0xF0,  // ....8...
                        /* 30D8 */  0xFF, 0xFF, 0xC7, 0x09, 0xC0, 0xC3, 0x89, 0xC4,  // ........
                        /* 30E0 */  0xC7, 0x09, 0xE0, 0x74, 0x7A, 0x60, 0xC7, 0x09,  // ...tz`..
                        /* 30E8 */  0x30, 0xC8, 0xFB, 0x71, 0xE9, 0x38, 0xC1, 0x2F,  // 0..q.8./
                        /* 30F0 */  0xE1, 0x96, 0xBC, 0x3A, 0x5D, 0x81, 0xF0, 0xD8,  // ...:]...
                        /* 30F8 */  0x27, 0xE7, 0x89, 0x84, 0x39, 0xD9, 0x57, 0x38,  // '...9.W8
                        /* 3100 */  0xCF, 0xEA, 0x90, 0x8D, 0xD4, 0x3B, 0x0E, 0x19,  // .....;..
                        /* 3108 */  0xF8, 0x33, 0xA2, 0x21, 0x5E, 0x8C, 0x98, 0xA8,  // .3.!^...
                        /* 3110 */  0x01, 0xE8, 0x50, 0xC1, 0xE5, 0xC0, 0x48, 0x0C,  // ..P...H.
                        /* 3118 */  0x84, 0x0E, 0x15, 0x3C, 0xFE, 0x5A, 0x05, 0x66,  // ...<.Z.f
                        /* 3120 */  0x10, 0x5F, 0xD4, 0x7D, 0x69, 0xF7, 0xE5, 0x12,  // ._.}i...
                        /* 3128 */  0x77, 0x24, 0xF0, 0x78, 0x8E, 0xEB, 0x28, 0x1E,  // w$.x..(.
                        /* 3130 */  0xAF, 0x3C, 0x5C, 0x4F, 0x07, 0x4C, 0xE3, 0x7D,  // .<\O.L.}
                        /* 3138 */  0xB2, 0x01, 0xDB, 0xFF, 0xFF, 0x7C, 0x81, 0xBF,  // .....|..
                        /* 3140 */  0x4E, 0x82, 0xEF, 0x80, 0xE1, 0xF1, 0xE1, 0xCE,  // N.......
                        /* 3148 */  0x20, 0xBE, 0x9E, 0x79, 0x58, 0xA7, 0xE4, 0x41,  //  ..yX..A
                        /* 3150 */  0x81, 0x7D, 0xE4, 0x1E, 0x14, 0xF8, 0xA2, 0x0D,  // .}......
                        /* 3158 */  0x0A, 0x3D, 0x00, 0xDF, 0xDA, 0xD9, 0x09, 0x00,  // .=......
                        /* 3160 */  0x58, 0x1E, 0x31, 0x3C, 0x3A, 0x60, 0x71, 0x51,  // X.1<:`qQ
                        /* 3168 */  0xF7, 0xE8, 0x80, 0xE1, 0xFF, 0x9F, 0xC0, 0x50,  // .......P
                        /* 3170 */  0x1E, 0x1D, 0xF8, 0x8E, 0x2E, 0xC0, 0xE3, 0x2A,  // .......*
                        /* 3178 */  0xEE, 0xA3, 0x0B, 0xB8, 0x60, 0xF9, 0xD1, 0x05,  // ....`...
                        /* 3180 */  0x3C, 0x77, 0x7A, 0x7E, 0xB0, 0x02, 0xDF, 0x75,  // <wz~...u
                        /* 3188 */  0x00, 0x3C, 0x9F, 0x17, 0x8B, 0x39, 0x5D, 0xA1,  // .<...9].
                        /* 3190 */  0xCE, 0x2F, 0x16, 0x78, 0xBA, 0x82, 0x72, 0x7E,  // ./.x..r~
                        /* 3198 */  0x01, 0x97, 0x84, 0x33, 0x16, 0xEA, 0x86, 0xEE,  // ...3....
                        /* 31A0 */  0xE3, 0x1D, 0xFC, 0x03, 0x09, 0xFE, 0xA4, 0xCD,  // ........
                        /* 31A8 */  0x6E, 0xFE, 0x3E, 0x36, 0xC0, 0x3C, 0x3F, 0xF1,  // n.>6.<?.
                        /* 31B0 */  0xFF, 0xFF, 0xA1, 0x05, 0xFC, 0x23, 0x7D, 0x78,  // .....#}x
                        /* 31B8 */  0x36, 0xD0, 0x63, 0x03, 0xF0, 0xBF, 0xE1, 0xFA,  // 6.c.....
                        /* 31C0 */  0xD8, 0x00, 0x9C, 0x0E, 0x50, 0xF8, 0x63, 0x03,  // ....P.c.
                        /* 31C8 */  0xB8, 0xC4, 0x9D, 0xA2, 0x50, 0xA7, 0x24, 0x0B,  // ....P.$.
                        /* 31D0 */  0x3E, 0x45, 0x41, 0xB9, 0x4A, 0xFB, 0xA2, 0xEB,  // >EA.J...
                        /* 31D8 */  0x5B, 0x03, 0xFC, 0x43, 0x14, 0xB0, 0x99, 0x0D,  // [..C....
                        /* 31E0 */  0xE6, 0xFF, 0x7F, 0xA6, 0x80, 0x7F, 0x88, 0x02,  // ........
                        /* 31E8 */  0x98, 0x71, 0x02, 0x00, 0x96, 0x87, 0x28, 0x60,  // .q....(`
                        /* 31F0 */  0x33, 0x3A, 0x18, 0xFF, 0xFF, 0xD1, 0x01, 0xA7,  // 3:......
                        /* 31F8 */  0x43, 0x14, 0xE0, 0xEA, 0xF0, 0xE1, 0x43, 0x14,  // C.....C.
                        /* 3200 */  0x70, 0xBC, 0x0E, 0xE0, 0x91, 0xDE, 0x5E, 0xE0,  // p.....^.
                        /* 3208 */  0x11, 0x94, 0x72, 0x88, 0x42, 0x9D, 0x4F, 0x2C,  // ..r.B.O,
                        /* 3210 */  0xEF, 0x10, 0x05, 0xE5, 0x8A, 0x00, 0x9E, 0x33,  // .......3
                        /* 3218 */  0x14, 0xFC, 0xFF, 0xFF, 0x19, 0x0A, 0xE0, 0xC4,  // ........
                        /* 3220 */  0xD1, 0xDE, 0x67, 0x28, 0xE0, 0x78, 0x42, 0x00,  // ..g(.xB.
                        /* 3228 */  0xCB, 0x93, 0x81, 0x45, 0xF3, 0x31, 0x10, 0x16,  // ...E.1..
                        /* 3230 */  0xE3, 0x71, 0xA0, 0x30, 0x30, 0xA8, 0xB1, 0xF9,  // .q.00...
                        /* 3238 */  0x50, 0x80, 0x1F, 0xE6, 0x51, 0x1E, 0xDC, 0x71,  // P...Q..q
                        /* 3240 */  0xB1, 0x13, 0xB8, 0xE1, 0xF8, 0x09, 0xC0, 0xE3,  // ........
                        /* 3248 */  0x6A, 0x7E, 0x34, 0x3A, 0x25, 0x1C, 0x87, 0x27,  // j~4:%..'
                        /* 3250 */  0x96, 0xE0, 0xFF, 0x1F, 0xD2, 0xD2, 0x06, 0x88,  // ........
                        /* 3258 */  0x92, 0x02, 0xA1, 0x19, 0x1D, 0xD0, 0x21, 0xBD,  // ......!.
                        /* 3260 */  0x2E, 0x44, 0x7C, 0xE9, 0x36, 0x4C, 0x02, 0x8F,  // .D|.6L..
                        /* 3268 */  0x9D, 0xA1, 0x71, 0x68, 0xEC, 0x30, 0x3C, 0x46,  // ..qh.0<F
                        /* 3270 */  0x0F, 0xE2, 0xD9, 0xC1, 0x27, 0x70, 0x36, 0xA1,  // ....'p6.
                        /* 3278 */  0x73, 0x2D, 0xF7, 0xB2, 0xA0, 0xD3, 0x4C, 0xD4,  // s-....L.
                        /* 3280 */  0x18, 0xCD, 0x9D, 0x62, 0x10, 0x43, 0x07, 0x07,  // ...b.C..
                        /* 3288 */  0x98, 0x35, 0xDF, 0x22, 0xC8, 0x80, 0x8D, 0xC5,  // .5."....
                        /* 3290 */  0x66, 0x1C, 0x23, 0x54, 0x8C, 0xC7, 0x90, 0x47,  // f.#T...G
                        /* 3298 */  0x64, 0x1C, 0xF6, 0xC9, 0xC4, 0x3F, 0x47, 0x5F,  // d....?G_
                        /* 32A0 */  0x03, 0x3C, 0x36, 0x43, 0x9D, 0x50, 0xE4, 0x97,  // .<6C.P..
                        /* 32A8 */  0x27, 0x1F, 0xBF, 0xD9, 0x60, 0xF8, 0x19, 0xC3,  // '...`...
                        /* 32B0 */  0x57, 0x81, 0xB7, 0x19, 0xDF, 0x0D, 0x4C, 0xD0,  // W.....L.
                        /* 32B8 */  0xFD, 0x35, 0x44, 0x97, 0x87, 0x10, 0xA7, 0x15,  // .5D.....
                        /* 32C0 */  0xE2, 0xC4, 0x9E, 0x1E, 0x5E, 0x26, 0xDA, 0x82,  // ....^&..
                        /* 32C8 */  0x10, 0x42, 0x9C, 0x1A, 0x51, 0xA4, 0x0D, 0x44,  // .B..Q..D
                        /* 32D0 */  0xD6, 0x50, 0x88, 0x42, 0x3C, 0x41, 0x06, 0x8A,  // .P.B<A..
                        /* 32D8 */  0x72, 0x56, 0x11, 0x22, 0xC7, 0x32, 0x44, 0xD0,  // rV.".2D.
                        /* 32E0 */  0xF3, 0x89, 0x16, 0x3B, 0x4A, 0x8C, 0xF6, 0x07,  // ...;J...
                        /* 32E8 */  0xC2, 0x74, 0x1C, 0xD1, 0x59, 0xA4, 0xD1, 0xA0,  // .t..Y...
                        /* 32F0 */  0x0E, 0x17, 0x3E, 0x17, 0xF8, 0x4C, 0x70, 0x80,  // ..>..Lp.
                        /* 32F8 */  0x27, 0xE5, 0xA1, 0x05, 0x39, 0xD7, 0x33, 0x7B,  // '...9.3{
                        /* 3300 */  0xD2, 0x38, 0x39, 0x46, 0xE0, 0xA1, 0xF9, 0x14,  // .89F....
                        /* 3308 */  0x02, 0xC7, 0x35, 0xA0, 0xAE, 0x06, 0x0F, 0x06,  // ..5.....
                        /* 3310 */  0xEC, 0xC2, 0x60, 0x38, 0x3E, 0x44, 0xDF, 0xD0,  // ..`8>D..
                        /* 3318 */  0x3C, 0x81, 0x43, 0x64, 0x80, 0x3E, 0x86, 0xC0,  // <.Cd.>..
                        /* 3320 */  0x1F, 0x8F, 0x4F, 0x02, 0x3E, 0x4B, 0x98, 0xC0,  // ..O.>K..
                        /* 3328 */  0xF2, 0x07, 0x81, 0xFA, 0xFF, 0x9F, 0xE6, 0xF9,  // ........
                        /* 3330 */  0x34, 0x4F, 0xEB, 0x59, 0xC0, 0xE7, 0x84, 0xC3,  // 4O.Y....
                        /* 3338 */  0x62, 0x62, 0x4F, 0x2D, 0x74, 0x3C, 0xE0, 0x57,  // bbO-t<.W
                        /* 3340 */  0x7C, 0x3C, 0x10, 0xC2, 0x5B, 0x83, 0xE7, 0xEB,  // |<..[...
                        /* 3348 */  0xB3, 0x0C, 0x3B, 0xEC, 0xE3, 0x46, 0xE1, 0x31,  // ..;..F.1
                        /* 3350 */  0x3F, 0x8F, 0x78, 0x38, 0x2C, 0xDC, 0x19, 0x91,  // ?.x8,...
                        /* 3358 */  0x8A, 0x3A, 0x9B, 0xA0, 0x4E, 0x15, 0x3E, 0x50,  // .:..N.>P
                        /* 3360 */  0xB0, 0x0B, 0xC1, 0xDB, 0xB9, 0x21, 0x1E, 0x4D,  // .....!.M
                        /* 3368 */  0xD8, 0xF9, 0xC6, 0x03, 0x83, 0x7F, 0x28, 0xF5,  // ......(.
                        /* 3370 */  0x69, 0x02, 0x1C, 0x87, 0x08, 0x36, 0x25, 0x8E,  // i....6%.
                        /* 3378 */  0x52, 0xD7, 0xF1, 0x1F, 0x74, 0x91, 0x87, 0x89,  // R...t...
                        /* 3380 */  0x06, 0xF6, 0xD9, 0xE2, 0x44, 0x42, 0x06, 0x7E,  // ....DB.~
                        /* 3388 */  0x44, 0x08, 0x72, 0x9E, 0x0E, 0x38, 0x4E, 0x50,  // D.r..8NP
                        /* 3390 */  0x9D, 0x07, 0xC0, 0x71, 0x0D, 0xF2, 0x38, 0xC1,  // ...q..8.
                        /* 3398 */  0x34, 0x27, 0x06, 0x12, 0xEC, 0xA0, 0xD8, 0x44,  // 4'.....D
                        /* 33A0 */  0x4D, 0xF0, 0xFF, 0x3F, 0x52, 0x70, 0x85, 0x3E,  // M..?Rp.>
                        /* 33A8 */  0x38, 0xA1, 0xCF, 0x2E, 0xEC, 0xA8, 0x72, 0x76,  // 8.....rv
                        /* 33B0 */  0xBE, 0x8F, 0xF8, 0xAC, 0xC4, 0x87, 0x0A, 0x2E,  // ........
                        /* 33B8 */  0x40, 0x0F, 0x15, 0xFE, 0x91, 0x09, 0x37, 0x54,  // @.....7T
                        /* 33C0 */  0xB8, 0x63, 0x7A, 0x33, 0x39, 0x27, 0xCC, 0x2C,  // .cz39'.,
                        /* 33C8 */  0x0E, 0xCA, 0x33, 0xF5, 0x99, 0x0E, 0x7C, 0x81,  // ..3...|.
                        /* 33D0 */  0x87, 0x8A, 0x86, 0x66, 0x27, 0x8C, 0x17, 0x1D,  // ...f'...
                        /* 33D8 */  0x1F, 0x4B, 0xCE, 0x94, 0x9D, 0x44, 0x3D, 0x52,  // .K...D=R
                        /* 33E0 */  0xF0, 0x80, 0xFA, 0x68, 0x01, 0x3C, 0xCE, 0x5B,  // ...h.<.[
                        /* 33E8 */  0x3E, 0x24, 0xD8, 0xE5, 0x40, 0x41, 0x7D, 0x64,  // >$..@A}d
                        /* 33F0 */  0xF3, 0x40, 0xF9, 0xFF, 0xFF, 0x64, 0xC3, 0x6F,  // .@...d.o
                        /* 33F8 */  0x1B, 0x3E, 0x08, 0x9D, 0x54, 0xD8, 0x43, 0x8D,  // .>..T.C.
                        /* 3400 */  0xFA, 0xB6, 0x86, 0x23, 0x18, 0x72, 0xAC, 0xA0,  // ...#.r..
                        /* 3408 */  0x3A, 0x04, 0x7A, 0xAC, 0xF0, 0x45, 0x1E, 0x99,  // :.z..E..
                        /* 3410 */  0x40, 0x36, 0x2A, 0x3E, 0x8B, 0xB3, 0xC2, 0x9C,  // @6*>....
                        /* 3418 */  0x2F, 0xD8, 0x70, 0xC1, 0xF7, 0x78, 0xF1, 0x70,  // /.p..x.p
                        /* 3420 */  0xF1, 0x67, 0x00, 0x43, 0x9C, 0x49, 0x84, 0x13,  // .g.C.I..
                        /* 3428 */  0x7A, 0x82, 0xF2, 0x3D, 0xE9, 0xDC, 0x6C, 0x1C,  // z..=..l.
                        /* 3430 */  0x92, 0x04, 0x1D, 0x2E, 0xA8, 0x8E, 0x64, 0x1E,  // ......d.
                        /* 3438 */  0x2E, 0xFC, 0x59, 0x3D, 0x9C, 0x80, 0x6B, 0x56,  // ..Y=..kV
                        /* 3440 */  0x38, 0x9C, 0x28, 0x87, 0xC5, 0xCE, 0x73, 0x46,  // 8.(...sF
                        /* 3448 */  0x7E, 0x41, 0x79, 0x5C, 0x00, 0xE7, 0x80, 0xF1,  // ~Ay\....
                        /* 3450 */  0x23, 0xF2, 0xFF, 0x7F, 0x2C, 0x3E, 0xE4, 0xB2,  // #...,>..
                        /* 3458 */  0xC1, 0xE0, 0x08, 0x46, 0x1D, 0x2F, 0xA8, 0x3C,  // ...F./.<
                        /* 3460 */  0x8C, 0x17, 0x14, 0xB3, 0x3A, 0x5E, 0x70, 0x4D,  // ....:^pM
                        /* 3468 */  0x8A, 0x9D, 0xD6, 0xD8, 0x88, 0x31, 0x07, 0x06,  // .....1..
                        /* 3470 */  0xE0, 0x33, 0x60, 0xCC, 0xB9, 0xD7, 0x03, 0x06,  // .3`.....
                        /* 3478 */  0xF3, 0x88, 0x3C, 0x60, 0xE0, 0x33, 0x29, 0x0F,  // ..<`.3).
                        /* 3480 */  0x18, 0xF8, 0xC4, 0x3F, 0xAE, 0x40, 0xF9, 0xFF,  // ...?.@..
                        /* 3488 */  0x1F, 0x38, 0xF0, 0x07, 0xA0, 0x37, 0x44, 0x4C,  // .8...7DL
                        /* 3490 */  0xCC, 0x11, 0x83, 0xCA, 0xC4, 0x88, 0x41, 0x71,  // ......Aq
                        /* 3498 */  0xBD, 0x79, 0xE0, 0x00, 0xF3, 0xB0, 0x30, 0xE3,  // .y....0.
                        /* 34A0 */  0x05, 0x6B, 0xEC, 0xF3, 0x15, 0x94, 0xF1, 0xB2,  // .k......
                        /* 34A8 */  0xF9, 0xBC, 0x69, 0xB2, 0x6B, 0x23, 0x3B, 0xBB,  // ..i.k#;.
                        /* 34B0 */  0x7A, 0xB4, 0xE0, 0x51, 0x71, 0x32, 0x03, 0x42,  // z..Qq2.B
                        /* 34B8 */  0x73, 0xC2, 0xC0, 0x1C, 0x94, 0xC7, 0x0A, 0xD6,  // s.......
                        /* 34C0 */  0x83, 0x12, 0x7E, 0x38, 0x3E, 0x4D, 0x9E, 0x2B,  // ..~8>M.+
                        /* 34C8 */  0x1C, 0x82, 0xFF, 0xFF, 0x93, 0x02, 0xB8, 0x86,  // ........
                        /* 34D0 */  0xEA, 0x93, 0x02, 0xF0, 0x18, 0x94, 0x21, 0x1E,  // ......!.
                        /* 34D8 */  0xCE, 0x0E, 0x17, 0xB8, 0x9C, 0xB3, 0x7D, 0x52,  // ......}R
                        /* 34E0 */  0xC0, 0x9F, 0x47, 0x7D, 0x6D, 0x65, 0xF7, 0x0F,  // ..G}me..
                        /* 34E8 */  0x36, 0x5A, 0xF0, 0x8D, 0xD4, 0xA3, 0x05, 0x1E,  // 6Z......
                        /* 34F0 */  0x60, 0x9E, 0x50, 0xF4, 0xF7, 0xA3, 0x37, 0x42,  // `.P...7B
                        /* 34F8 */  0x1F, 0x94, 0x7D, 0xB3, 0xF3, 0x55, 0x87, 0xC1,  // ..}..U..
                        /* 3500 */  0x44, 0x7E, 0x4A, 0x02, 0xE7, 0x31, 0x03, 0x3F,  // D~J..1.?
                        /* 3508 */  0x20, 0x43, 0x1F, 0xC9, 0x6B, 0xAF, 0xCF, 0xA3,  //  C..k...
                        /* 3510 */  0x61, 0xDF, 0x79, 0x7D, 0x59, 0xF4, 0xB1, 0x10,  // a.y}Y...
                        /* 3518 */  0xDE, 0xFF, 0x7F, 0xB8, 0xF0, 0x6C, 0x1C, 0x0B,  // .....l..
                        /* 3520 */  0x81, 0xCA, 0xA0, 0xE0, 0x8D, 0x15, 0x7C, 0x82,  // ......|.
                        /* 3528 */  0x0F, 0xED, 0xA0, 0x40, 0x89, 0xFE, 0x1C, 0x61,  // ...@...a
                        /* 3530 */  0xAD, 0x10, 0x42, 0x7B, 0x77, 0x66, 0x20, 0x81,  // ..B{wf .
                        /* 3538 */  0x7C, 0x6C, 0xF7, 0xFD, 0x0F, 0x73, 0x95, 0x37,  // |l...s.7
                        /* 3540 */  0x5E, 0xB4, 0xA7, 0x64, 0x4F, 0x26, 0x44, 0x02,  // ^..dO&D.
                        /* 3548 */  0x1F, 0xEB, 0xF0, 0x03, 0xE1, 0xA8, 0xCF, 0xF1,  // ........
                        /* 3550 */  0x6C, 0x20, 0xAF, 0xF2, 0xC6, 0x3F, 0x2E, 0x1F,  // l ...?..
                        /* 3558 */  0xB9, 0x8D, 0x70, 0x5C, 0x4F, 0xDA, 0xAF, 0x7F,  // ..p\O...
                        /* 3560 */  0xD8, 0xE3, 0x3C, 0x2E, 0xD7, 0x3B, 0xC0, 0x27,  // ..<..;.'
                        /* 3568 */  0x65, 0x1F, 0xA7, 0x24, 0xEB, 0x31, 0x40, 0x61,  // e..$.1@a
                        /* 3570 */  0x7C, 0x3A, 0x07, 0x5C, 0xFC, 0xFF, 0x4F, 0xE7,  // |:.\..O.
                        /* 3578 */  0xF0, 0x8F, 0xCC, 0x3E, 0x29, 0x80, 0xE3, 0x38,  // ...>)..8
                        /* 3580 */  0x00, 0x6B, 0xF6, 0xBE, 0x07, 0x3C, 0x06, 0x84,  // .k...<..
                        /* 3588 */  0x0A, 0xFE, 0x0E, 0x11, 0xFB, 0x7D, 0xC3, 0xF8,  // .....}..
                        /* 3590 */  0x11, 0x9E, 0xCB, 0xE1, 0x83, 0x04, 0xED, 0xED,  // ........
                        /* 3598 */  0x1E, 0xAE, 0x21, 0xC5, 0x78, 0x0E, 0x68, 0xEC,  // ..!.x.h.
                        /* 35A0 */  0xE8, 0xA2, 0x03, 0xED, 0x13, 0x43, 0x9C, 0x60,  // .....C.`
                        /* 35A8 */  0x51, 0x8E, 0xCB, 0x68, 0xB1, 0xA2, 0x3C, 0x44,  // Q..h..<D
                        /* 35B0 */  0x1C, 0x53, 0xC0, 0x43, 0x8B, 0x12, 0x2C, 0x46,  // .S.C..,F
                        /* 35B8 */  0x84, 0x60, 0xAF, 0x0E, 0x91, 0x82, 0x46, 0x79,  // .`....Fy
                        /* 35C0 */  0x13, 0x37, 0x54, 0xB8, 0xE7, 0x72, 0x16, 0xEE,  // .7T..r..
                        /* 35C8 */  0x34, 0xA0, 0xE3, 0x86, 0xCF, 0xE5, 0x00, 0x27,  // 4......'
                        /* 35D0 */  0xFE, 0xFF, 0xE7, 0x72, 0xDC, 0x81, 0x03, 0x77,  // ...r...w
                        /* 35D8 */  0x10, 0x01, 0xDB, 0x51, 0x01, 0x77, 0x04, 0x01,  // ...Q.w..
                        /* 35E0 */  0x26, 0xBA, 0x1F, 0xE1, 0x3A, 0x7B, 0x38, 0xE9,  // &...:{8.
                        /* 35E8 */  0x5A, 0x65, 0x63, 0xAD, 0x26, 0xD0, 0xB9, 0xC3,  // Zec.&...
                        /* 35F0 */  0x3A, 0x80, 0x34, 0x1D, 0x0E, 0xF2, 0xE0, 0xE6,  // :.4.....
                        /* 35F8 */  0x8B, 0x8A, 0x07, 0x11, 0xE3, 0x7D, 0x99, 0x8F,  // .....}..
                        /* 3600 */  0xE0, 0x49, 0xC2, 0xA9, 0x8F, 0x0B, 0x3A, 0xB9,  // .I....:.
                        /* 3608 */  0x7B, 0xEC, 0xCE, 0x4B, 0xA2, 0xCC, 0x63, 0xA2,  // {..K..c.
                        /* 3610 */  0x43, 0x70, 0xCA, 0x03, 0x3C, 0x05, 0x31, 0xA0,  // Cp..<.1.
                        /* 3618 */  0x23, 0x1C, 0xD0, 0xD1, 0xE7, 0x34, 0x1F, 0xEB,  // #....4..
                        /* 3620 */  0x31, 0xC3, 0x7A, 0x65, 0x60, 0x73, 0xF4, 0x65,  // 1.ze`s.e
                        /* 3628 */  0x80, 0x4F, 0xCB, 0xC7, 0x03, 0x03, 0x5B, 0xCD,  // .O....[.
                        /* 3630 */  0x25, 0x08, 0x05, 0xE6, 0x2B, 0x37, 0x3F, 0x88,  // %...+7?.
                        /* 3638 */  0x83, 0x4D, 0xDF, 0x81, 0x00, 0x14, 0x40, 0x9E,  // .M....@.
                        /* 3640 */  0xBF, 0xCF, 0x38, 0xCF, 0x00, 0x6C, 0x0A, 0x8F,  // ..8..l..
                        /* 3648 */  0x39, 0x46, 0x33, 0x3A, 0xBF, 0x71, 0x79, 0xA6,  // 9F3:.qy.
                        /* 3650 */  0x3C, 0xEC, 0x4C, 0x29, 0x88, 0x67, 0xEA, 0x20,  // <.L).g. 
                        /* 3658 */  0x37, 0x7B, 0x08, 0xFF, 0x7F, 0x82, 0xA3, 0xC7,  // 7{......
                        /* 3660 */  0x5E, 0x4B, 0xD8, 0x6D, 0x03, 0xCE, 0x98, 0x23,  // ^K.m...#
                        /* 3668 */  0x3E, 0x16, 0x78, 0x1A, 0x86, 0xF3, 0x60, 0x39,  // >.x...`9
                        /* 3670 */  0x9C, 0x07, 0xCB, 0xC7, 0xE2, 0xC9, 0x82, 0xEB,  // ........
                        /* 3678 */  0x02, 0x85, 0x9B, 0x2C, 0x18, 0xE1, 0x31, 0xC1,  // ...,..1.
                        /* 3680 */  0x06, 0x45, 0xC7, 0xE3, 0x61, 0xF1, 0xB3, 0x81,  // .E..a...
                        /* 3688 */  0x2F, 0x3C, 0x0C, 0xFB, 0xC9, 0xC1, 0xA2, 0xEF,  // /<......
                        /* 3690 */  0x08, 0xE4, 0x9E, 0xC5, 0x86, 0xC6, 0x07, 0xCA,  // ........
                        /* 3698 */  0x61, 0x8D, 0x16, 0xF6, 0x25, 0xE7, 0x9D, 0xC3,  // a...%...
                        /* 36A0 */  0x07, 0x16, 0xDF, 0xDE, 0x18, 0xAC, 0xAF, 0xC7,  // ........
                        /* 36A8 */  0xE0, 0xBA, 0x53, 0xB0, 0xAF, 0xC5, 0x7B, 0x05,  // ..S...{.
                        /* 36B0 */  0x3B, 0xE6, 0xF9, 0x9E, 0xE7, 0x8B, 0x00, 0xEE,  // ;.......
                        /* 36B8 */  0x87, 0xC1, 0xC4, 0x5F, 0x32, 0xD0, 0xD1, 0x16,  // ..._2...
                        /* 36C0 */  0xA5, 0x4B, 0x06, 0xC7, 0x7D, 0xC9, 0x80, 0x19,  // .K..}...
                        /* 36C8 */  0xE4, 0x92, 0x41, 0x21, 0x1C, 0x81, 0x42, 0x01,  // ..A!..B.
                        /* 36D0 */  0x20, 0x74, 0x56, 0xE0, 0x92, 0xE1, 0x28, 0x88,  //  tV...(.
                        /* 36D8 */  0x47, 0xEC, 0x18, 0x67, 0x05, 0xF4, 0xC5, 0xC5,  // G..g....
                        /* 36E0 */  0x97, 0x0C, 0xCC, 0x51, 0x81, 0xFF, 0xFF, 0x8F,  // ...Q....
                        /* 36E8 */  0x0A, 0x30, 0x4E, 0x19, 0xEC, 0xA8, 0x00, 0xFB,  // .0N.....
                        /* 36F0 */  0x9A, 0x01, 0xBE, 0xE3, 0x04, 0xB8, 0x07, 0x05,  // ........
                        /* 36F8 */  0x8E, 0xE3, 0x04, 0xE0, 0xE9, 0x44, 0xE2, 0xE3,  // .....D..
                        /* 3700 */  0x04, 0x70, 0x3A, 0x3D, 0xB0, 0xE3, 0x04, 0x18,  // .p:=....
                        /* 3708 */  0x64, 0xFC, 0xB8, 0x74, 0x9C, 0xE0, 0xF7, 0x26,  // d..t...&
                        /* 3710 */  0x0B, 0x74, 0xF0, 0xFF, 0xBF, 0x02, 0xC1, 0xC0,  // .t......
                        /* 3718 */  0x39, 0x5B, 0x2B, 0x44, 0x21, 0xF3, 0xE8, 0xFD,  // 9[+D!...
                        /* 3720 */  0x0E, 0x47, 0x66, 0xFD, 0x6E, 0xE9, 0xEB, 0xA1,  // .Gf.n...
                        /* 3728 */  0x07, 0x2F, 0x68, 0x9D, 0x28, 0xB8, 0x84, 0xD5,  // ./h.(...
                        /* 3730 */  0x1A, 0x42, 0x27, 0x0A, 0x1E, 0x79, 0xA1, 0x02,  // .B'..y..
                        /* 3738 */  0x33, 0x88, 0x2D, 0x1C, 0x33, 0x7C, 0xAF, 0x44,  // 3.-.3|.D
                        /* 3740 */  0x8F, 0xC6, 0xD3, 0x3A, 0xA8, 0x93, 0x78, 0xB6,  // ...:..x.
                        /* 3748 */  0xF2, 0x58, 0x3D, 0x17, 0xF8, 0x04, 0x87, 0xFA,  // .X=.....
                        /* 3750 */  0x50, 0x03, 0xE6, 0x9B, 0x24, 0x38, 0xCF, 0x16,  // P...$8..
                        /* 3758 */  0x1E, 0x1D, 0xEE, 0xF8, 0xE1, 0x9B, 0x99, 0xA7,  // ........
                        /* 3760 */  0x75, 0x4A, 0x1E, 0x14, 0xD8, 0xC7, 0xED, 0x41,  // uJ.....A
                        /* 3768 */  0x81, 0x2F, 0xD6, 0xA0, 0xD0, 0xF7, 0x53, 0x1F,  // ./....S.
                        /* 3770 */  0xFC, 0xD9, 0xF8, 0x81, 0xC3, 0xFF, 0x7F, 0x6C,  // .......l
                        /* 3778 */  0x30, 0xCF, 0x16, 0x1E, 0x1B, 0xB0, 0x38, 0xE3,  // 0.....8.
                        /* 3780 */  0x7B, 0x6C, 0xC0, 0x0E, 0xCA, 0x63, 0x03, 0xDF,  // {l...c..
                        /* 3788 */  0x89, 0x05, 0x78, 0x84, 0x3B, 0xB1, 0x80, 0x0E,  // ..x.;...
                        /* 3790 */  0x96, 0x9F, 0x58, 0xC0, 0x73, 0x21, 0x05, 0xCF,  // ..X.s!..
                        /* 3798 */  0x79, 0x0A, 0x7F, 0x19, 0xE0, 0x28, 0xBE, 0x0C,  // y....(..
                        /* 37A0 */  0x40, 0x3A, 0x51, 0x91, 0xFF, 0xFF, 0xC9, 0x03,  // @:Q.....
                        /* 37A8 */  0x23, 0xED, 0x44, 0x05, 0xE5, 0x76, 0x00, 0x5F,  // #.D..v._
                        /* 37B0 */  0xC2, 0xA1, 0x0A, 0x75, 0x9B, 0xF7, 0x79, 0x0E,  // ...u..y.
                        /* 37B8 */  0xFE, 0x31, 0x04, 0x7F, 0x2A, 0x67, 0xD7, 0x82,  // .1..*g..
                        /* 37C0 */  0x97, 0x2A, 0x1F, 0x18, 0xE0, 0x1D, 0xAA, 0xC0,  // .*......
                        /* 37C8 */  0x73, 0x60, 0x80, 0x3F, 0xCC, 0xA7, 0x65, 0x03,  // s`.?..e.
                        /* 37D0 */  0x3D, 0x30, 0x00, 0xFF, 0x2B, 0xAD, 0x0F, 0x0C,  // =0..+...
                        /* 37D8 */  0xC0, 0xE9, 0xC4, 0x84, 0x3F, 0x30, 0xC0, 0x3F,  // ....?0.?
                        /* 37E0 */  0x33, 0xB1, 0xFF, 0xFF, 0x99, 0x09, 0xF6, 0x4C,  // 3......L
                        /* 37E8 */  0x4E, 0x36, 0x94, 0xCF, 0x4C, 0xC0, 0x72, 0x30,  // N6..L.r0
                        /* 37F0 */  0x60, 0x38, 0x33, 0x01, 0xCC, 0x18, 0x3F, 0x78,  // `83...?x
                        /* 37F8 */  0xFF, 0xFF, 0x67, 0x26, 0xE0, 0x3C, 0x36, 0x60,  // ..g&.<6`
                        /* 3800 */  0x77, 0x66, 0x02, 0x5C, 0x1D, 0x3B, 0x7C, 0x66,  // wf.\.;|f
                        /* 3808 */  0x02, 0x8E, 0x87, 0x01, 0x7E, 0x66, 0x81, 0xF1,  // ....~f..
                        /* 3810 */  0xFF, 0x3F, 0x22, 0xD1, 0x33, 0x13, 0x28, 0x4E,  // .?".3.(N
                        /* 3818 */  0x07, 0xF0, 0xCF, 0x4C, 0x00, 0x07, 0xE2, 0x1D,  // ...L....
                        /* 3820 */  0x18, 0x40, 0x77, 0x76, 0xF7, 0x81, 0x01, 0x5C,  // .@wv...\
                        /* 3828 */  0x37, 0xFF, 0x67, 0x26, 0xB0, 0x1E, 0x18, 0x60,  // 7.g&...`
                        /* 3830 */  0xFE, 0xFF, 0x8F, 0x1C, 0x8C, 0xC0, 0x62, 0x5F,  // ......b_
                        /* 3838 */  0xF8, 0x26, 0xD0, 0x29, 0xDA, 0xF2, 0x60, 0x50,  // .&.)..`P
                        /* 3840 */  0x23, 0xF3, 0x91, 0x00, 0x3F, 0xC8, 0x63, 0x3C,  // #...?.c<
                        /* 3848 */  0xB4, 0xA3, 0x62, 0x07, 0x6C, 0xC3, 0xF1, 0xF1,  // ..b.l...
                        /* 3850 */  0x7B, 0x54, 0xCD, 0x8F, 0x42, 0x67, 0x84, 0xE3,  // {T..Bg..
                        /* 3858 */  0xF0, 0x70, 0x42, 0x32, 0x69, 0xC3, 0x43, 0x49,  // .pB2i.CI
                        /* 3860 */  0x81, 0xD0, 0x8C, 0x0E, 0xE8, 0x90, 0x5E, 0x16,  // ......^.
                        /* 3868 */  0x22, 0xBE, 0x53, 0x1B, 0x26, 0x81, 0x47, 0xCE,  // ".S.&.G.
                        /* 3870 */  0xD0, 0x38, 0x34, 0x76, 0x18, 0x1E, 0x5C, 0xB0,  // .84v..\.
                        /* 3878 */  0x83, 0x78, 0x72, 0xF0, 0x01, 0x9B, 0x4D, 0xE8,  // .xr...M.
                        /* 3880 */  0x4C, 0x0F, 0xFA, 0x55, 0xE1, 0x21, 0x26, 0x6A,  // L..U.!&j
                        /* 3888 */  0x8C, 0xE6, 0xA0, 0xC8, 0xD0, 0x3D, 0x70, 0x70,  // .....=pp
                        /* 3890 */  0x80, 0x59, 0xF3, 0x78, 0xC9, 0xF9, 0xC2, 0x58,  // .Y.x...X
                        /* 3898 */  0x6C, 0xDC, 0x31, 0x42, 0xC5, 0x78, 0x33, 0xF0,  // l.1B.x3.
                        /* 38A0 */  0xD1, 0xDB, 0xD0, 0x87, 0xF8, 0x0A, 0xCC, 0x47,  // .......G
                        /* 38A8 */  0x13, 0xF2, 0x71, 0xC9, 0x47, 0x6B, 0x3E, 0x12,  // ..q.Gk>.
                        /* 38B0 */  0x7E, 0xBC, 0xB0, 0xE7, 0x3B, 0x0C, 0x99, 0x8E,  // ~...;...
                        /* 38B8 */  0x09, 0xBA, 0xBF, 0x44, 0xC8, 0x1B, 0x8C, 0x06,  // ...D....
                        /* 38C0 */  0x15, 0xA1, 0xB1, 0x61, 0x49, 0xB1, 0x00, 0x5B,  // ...aI..[
                        /* 38C8 */  0x48, 0x04, 0xE7, 0x88, 0xA2, 0x04, 0x8A, 0x72,  // H......r
                        /* 38D0 */  0x38, 0x46, 0x09, 0x16, 0x23, 0x54, 0xB4, 0x28,  // 8F..#T.(
                        /* 38D8 */  0xAD, 0x1D, 0xAA, 0x85, 0x10, 0x2B, 0xC4, 0x69,  // .....+.i
                        /* 38E0 */  0x86, 0x0C, 0xF6, 0x50, 0x11, 0x2D, 0xC8, 0x09,  // ...P.-..
                        /* 38E8 */  0xB4, 0x7F, 0x88, 0x60, 0x2B, 0xD4, 0x10, 0x1D,  // ...`+...
                        /* 38F0 */  0x69, 0x34, 0xA8, 0x73, 0x85, 0x0F, 0x05, 0x3E,  // i4.s...>
                        /* 38F8 */  0x10, 0x1C, 0xDD, 0x51, 0x19, 0x3C, 0x48, 0xE4,  // ...Q.<H.
                        /* 3900 */  0x13, 0x78, 0xC8, 0x78, 0x1A, 0xF0, 0xB8, 0xD9,  // .x.x....
                        /* 3908 */  0xD4, 0x7C, 0x00, 0x81, 0xE3, 0x1A, 0x50, 0xB3,  // .|....P.
                        /* 3910 */  0x7C, 0x2A, 0x60, 0x7F, 0x15, 0xC3, 0xFD, 0xFF,  // |*`.....
                        /* 3918 */  0x0F, 0x11, 0x73, 0x23, 0xF3, 0x04, 0x0E, 0x91,  // ..s#....
                        /* 3920 */  0x01, 0xFA, 0x04, 0x02, 0x7F, 0x3C, 0x3E, 0x06,  // .....<>.
                        /* 3928 */  0x78, 0x3E, 0x27, 0x9C, 0xC0, 0xF2, 0x07, 0x81,  // x>'.....
                        /* 3930 */  0x3A, 0xA9, 0xF3, 0xAB, 0xC7, 0x69, 0x3D, 0x08,  // :....i=.
                        /* 3938 */  0xF8, 0x90, 0x70, 0x58, 0xEC, 0x80, 0xE3, 0x03,  // ..pX....
                        /* 3940 */  0x8B, 0xC7, 0x03, 0xFE, 0xA1, 0x3F, 0x18, 0x44,  // .....?.D
                        /* 3948 */  0x78, 0x65, 0xF0, 0x7C, 0xFD, 0x8E, 0x61, 0x07,  // xe.|..a.
                        /* 3950 */  0x79, 0xDC, 0x40, 0x7C, 0x32, 0x31, 0xC4, 0xD3,  // y.@|21..
                        /* 3958 */  0xC9, 0x0B, 0x82, 0x31, 0x4E, 0x29, 0xF4, 0x21,  // ...1N).!
                        /* 3960 */  0x3D, 0x22, 0x78, 0x50, 0x27, 0x6C, 0x82, 0x31,  // ="xP'l.1
                        /* 3968 */  0xCF, 0x84, 0xF4, 0x58, 0xE5, 0xB3, 0x09, 0x3F,  // ...X...?
                        /* 3970 */  0x57, 0xF8, 0x48, 0xC1, 0x2E, 0x0E, 0xAF, 0xDF,  // W.H.....
                        /* 3978 */  0x86, 0x78, 0x34, 0x61, 0xE7, 0x1B, 0x8F, 0x0E,  // .x4a....
                        /* 3980 */  0xFE, 0xD9, 0x1C, 0x3C, 0x07, 0x09, 0x38, 0xF3,  // ...<..8.
                        /* 3988 */  0xC2, 0xEA, 0x1A, 0x01, 0x39, 0xE4, 0x83, 0x4B,  // ....9..K
                        /* 3990 */  0xCE, 0xC2, 0xA4, 0x64, 0xC0, 0x28, 0x78, 0x0F,  // ...d.(x.
                        /* 3998 */  0x18, 0x7B, 0x1D, 0xE3, 0x1A, 0x87, 0x47, 0x8C,  // .{....G.
                        /* 39A0 */  0x1F, 0x85, 0xC8, 0xF1, 0xC1, 0xFF, 0xFF, 0x31,  // .......1
                        /* 39A8 */  0xB3, 0xB8, 0x63, 0x06, 0xD5, 0x01, 0x01, 0x1C,  // ..c.....
                        /* 39B0 */  0x47, 0x1B, 0xF0, 0x8C, 0x19, 0xCE, 0xD4, 0x18,  // G.......
                        /* 39B8 */  0xC8, 0xA9, 0xC1, 0x18, 0x36, 0x3B, 0xA7, 0x81,  // ....6;..
                        /* 39C0 */  0xE7, 0x40, 0x52, 0x1B, 0x24, 0x19, 0x37, 0x38,  // .@R.$.78
                        /* 39C8 */  0x2E, 0x80, 0x6C, 0xDC, 0xC0, 0x00, 0xD0, 0xE3,  // ..l.....
                        /* 39D0 */  0x06, 0x76, 0x53, 0xF3, 0xB8, 0x81, 0x89, 0x2C,  // .vS....,
                        /* 39D8 */  0x03, 0xFF, 0xFF, 0x71, 0x63, 0x4F, 0x43, 0x1E,  // ...qcOC.
                        /* 39E0 */  0x37, 0xF6, 0xEA, 0xC3, 0x06, 0x18, 0xFD, 0xBD,  // 7.......
                        /* 39E8 */  0xE2, 0x8D, 0xCD, 0x23, 0x87, 0x15, 0x79, 0xE4,  // ...#..y.
                        /* 39F0 */  0xA0, 0x02, 0xF5, 0xC8, 0xE1, 0x1F, 0x91, 0xC0,  // ........
                        /* 39F8 */  0x33, 0x72, 0x38, 0x93, 0xC3, 0x8E, 0x1D, 0x98,  // 3r8.....
                        /* 3A00 */  0x48, 0x1A, 0x3B, 0x7A, 0x00, 0x1E, 0x3B, 0x76,  // H.;z..;v
                        /* 3A08 */  0x2A, 0x30, 0xEE, 0x7F, 0x3E, 0x5D, 0xF1, 0x9B,  // *0..>]..
                        /* 3A10 */  0x96, 0x03, 0x0F, 0x1D, 0x54, 0xE7, 0x46, 0x0F,  // ....T.F.
                        /* 3A18 */  0x1D, 0xBE, 0xE0, 0xA1, 0x83, 0x7A, 0x6E, 0xEC,  // .....zn.
                        /* 3A20 */  0xFF, 0x3F, 0x37, 0x1C, 0xD4, 0xB9, 0xE1, 0x66,  // .?7....f
                        /* 3A28 */  0xEE, 0x91, 0x83, 0x4F, 0xD0, 0x91, 0x08, 0x7D,  // ...O...}
                        /* 3A30 */  0x5A, 0x65, 0x23, 0xC7, 0x5D, 0x98, 0xC2, 0x3C,  // Ze#.]..<
                        /* 3A38 */  0x41, 0xFA, 0x6E, 0x15, 0xFE, 0xA4, 0xDE, 0x76,  // A.n....v
                        /* 3A40 */  0x4E, 0xC5, 0x93, 0x7B, 0x82, 0x00, 0xDF, 0xA9,  // N..{....
                        /* 3A48 */  0xCE, 0xE3, 0x86, 0x7F, 0x14, 0x3C, 0x6E, 0x30,  // .....<n0
                        /* 3A50 */  0x0F, 0xF9, 0xBC, 0x42, 0x46, 0x88, 0xE5, 0x13,  // ...BF...
                        /* 3A58 */  0x84, 0x67, 0xC7, 0x40, 0xCE, 0x0E, 0x7B, 0x34,  // .g.@..{4
                        /* 3A60 */  0x02, 0xA3, 0xBC, 0x13, 0x04, 0x1A, 0xCA, 0x03,  // ........
                        /* 3A68 */  0xC7, 0x5E, 0xBA, 0x7D, 0x0D, 0xF3, 0x74, 0xCE,  // .^.}..t.
                        /* 3A70 */  0xD6, 0xEA, 0xA7, 0xA2, 0xD3, 0x08, 0xBC, 0xE0,  // ........
                        /* 3A78 */  0x83, 0x07, 0x95, 0x87, 0xC1, 0x43, 0xFC, 0xFF,  // .....C..
                        /* 3A80 */  0x0F, 0x1E, 0x73, 0x1A, 0xF5, 0xE0, 0xC1, 0x3B,  // ..s....;
                        /* 3A88 */  0x3B, 0x18, 0x47, 0x12, 0x4F, 0x88, 0x5D, 0x48,  // ;.G.O.]H
                        /* 3A90 */  0xE0, 0x9D, 0x23, 0xC0, 0x27, 0xEA, 0x88, 0x04,  // ..#.'...
                        /* 3A98 */  0x82, 0xF1, 0xC3, 0xC1, 0x79, 0x42, 0xB5, 0x4B,  // ....yB.K
                        /* 3AA0 */  0x58, 0x85, 0x1E, 0x3C, 0xA8, 0x86, 0xE5, 0x83,  // X..<....
                        /* 3AA8 */  0x04, 0x70, 0x1B, 0x3C, 0xEC, 0xD1, 0xF1, 0xA3,  // .p.<....
                        /* 3AB0 */  0x0D, 0xB0, 0x18, 0x3A, 0xEC, 0xFF, 0xFF, 0xD0,  // ...:....
                        /* 3AB8 */  0xB1, 0x47, 0x12, 0xF0, 0x99, 0x38, 0x23, 0x01,  // .G...8#.
                        /* 3AC0 */  0xBD, 0xA1, 0x83, 0xE3, 0x0C, 0x01, 0x4E, 0x71,  // ......Nq
                        /* 3AC8 */  0xC7, 0x2D, 0x10, 0x8C, 0x1C, 0xD6, 0x61, 0x39,  // .-....a9
                        /* 3AD0 */  0xD8, 0x01, 0x45, 0x61, 0x87, 0x45, 0x9F, 0x48,  // ..Ea.E.H
                        /* 3AD8 */  0xC0, 0xA5, 0xE2, 0x44, 0x02, 0xE4, 0xC7, 0x87,  // ...D....
                        /* 3AE0 */  0x3F, 0x47, 0xF0, 0xFF, 0xFF, 0x89, 0x04, 0x58,  // ?G.....X
                        /* 3AE8 */  0x9E, 0xBE, 0x7D, 0xF5, 0xF6, 0x89, 0x04, 0x5C,  // ..}....\
                        /* 3AF0 */  0x43, 0xF7, 0x89, 0x04, 0xB8, 0x8F, 0x8E, 0x0D,  // C.......
                        /* 3AF8 */  0x1D, 0xD8, 0x62, 0x9D, 0xF2, 0x1B, 0x89, 0x87,  // ..b.....
                        /* 3B00 */  0x0E, 0xAE, 0x61, 0x7B, 0xE8, 0x60, 0xFE, 0xFF,  // ..a{.`..
                        /* 3B08 */  0x9F, 0x48, 0x80, 0xC3, 0xE8, 0x3C, 0x74, 0x60,  // .H...<t`
                        /* 3B10 */  0x7B, 0x89, 0x7A, 0x2E, 0x38, 0x9B, 0x43, 0x07,  // {.z.8.C.
                        /* 3B18 */  0x9B, 0x8D, 0xA1, 0x03, 0xFD, 0xD1, 0xB1, 0xA3,  // ........
                        /* 3B20 */  0x29, 0xB0, 0x38, 0x4F, 0xC2, 0x38, 0x8E, 0xC0,  // ).8O.8..
                        /* 3B28 */  0x83, 0x3C, 0x9C, 0xE3, 0x48, 0xE0, 0xB1, 0xC3,  // .<..H...
                        /* 3B30 */  0xFA, 0xFF, 0x8F, 0x1D, 0x96, 0x8E, 0xF3, 0x08,  // ........
                        /* 3B38 */  0x20, 0x60, 0x78, 0xEC, 0xE8, 0x06, 0x5C, 0x47,  //  `x...\G
                        /* 3B40 */  0x73, 0x32, 0xD1, 0x0E, 0x1D, 0x6C, 0x3E, 0x86,  // s2...l>.
                        /* 3B48 */  0x0E, 0x08, 0x18, 0x9D, 0xCF, 0x23, 0xE0, 0xFE,  // .....#..
                        /* 3B50 */  0xFF, 0x0F, 0x1D, 0x9C, 0x08, 0x47, 0x74, 0xE8,  // .....Gt.
                        /* 3B58 */  0x60, 0x1B, 0x94, 0x87, 0x0E, 0xEC, 0x47, 0xE7,  // `.....G.
                        /* 3B60 */  0xA1, 0x03, 0xDF, 0x51, 0x3C, 0xB9, 0x79, 0xE8,  // ...Q<.y.
                        /* 3B68 */  0xE0, 0x3A, 0xFF, 0x7A, 0xE8, 0xC0, 0xF6, 0xFF,  // .:.z....
                        /* 3B70 */  0x3F, 0x74, 0xFC, 0xE8, 0x3C, 0x74, 0x60, 0x3B,  // ?t..<t`;
                        /* 3B78 */  0xE4, 0xA3, 0x38, 0x9C, 0x43, 0x07, 0xDB, 0x50,  // ..8.C..P
                        /* 3B80 */  0x3C, 0x74, 0xE0, 0x3E, 0x3A, 0x76, 0x46, 0x02,  // <t.>:vF.
                        /* 3B88 */  0xAE, 0xD7, 0xE9, 0x80, 0x81, 0xCE, 0x33, 0xCC,  // ......3.
                        /* 3B90 */  0x33, 0x12, 0xF8, 0x9C, 0x8C, 0x1D, 0xF2, 0xFF,  // 3.......
                        /* 3B98 */  0x7F, 0xEC, 0xC0, 0x6F, 0x78, 0x98, 0x33, 0x12,  // ...ox.3.
                        /* 3BA0 */  0x38, 0xCF, 0xB8, 0x60, 0xD5, 0x3A, 0x20, 0x5D,  // 8..`.: ]
                        /* 3BA8 */  0x6C, 0x7C, 0xC6, 0x05, 0x1B, 0x98, 0xCF, 0xB8,  // l|......
                        /* 3BB0 */  0xC0, 0x7C, 0x74, 0x6C, 0xE4, 0xE0, 0x3C, 0xC9,  // .|tl..<.
                        /* 3BB8 */  0x18, 0x18, 0x37, 0x74, 0x8F, 0xF8, 0xB4, 0x7D,  // ..7t...}
                        /* 3BC0 */  0x2B, 0x7C, 0xC1, 0xF4, 0x71, 0xD4, 0x28, 0xD1,  // +|..q.(.
                        /* 3BC8 */  0x5F, 0x09, 0x0E, 0xE9, 0x4C, 0x42, 0x44, 0x7B,  // _...LBD{
                        /* 3BD0 */  0x01, 0x60, 0x28, 0x2F, 0x18, 0x47, 0xF1, 0xFF,  // .`(/.G..
                        /* 3BD8 */  0x7F, 0x04, 0xE0, 0xE3, 0x09, 0x7B, 0x24, 0x21,  // .....{$!
                        /* 3BE0 */  0x12, 0x14, 0x39, 0x52, 0xF4, 0x20, 0xF8, 0x00,  // ..9R. ..
                        /* 3BE8 */  0xE2, 0x45, 0xF7, 0x20, 0x4E, 0x26, 0x4A, 0xE8,  // .E. N&J.
                        /* 3BF0 */  0x63, 0xF2, 0x40, 0xCF, 0x31, 0xC2, 0x31, 0x95,  // c.@.1.1.
                        /* 3BF8 */  0x7B, 0x51, 0x20, 0x9A, 0xA7, 0xA8, 0x79, 0x95,  // {Q ...y.
                        /* 3C00 */  0x0D, 0x24, 0x02, 0x8F, 0x80, 0x67, 0x7B, 0xEE,  // .$...g{.
                        /* 3C08 */  0x9A, 0x40, 0xF2, 0xCF, 0x08, 0x92, 0xF7, 0x22,  // .@....."
                        /* 3C10 */  0xA0, 0x30, 0xD6, 0x00, 0x22, 0x39, 0x87, 0x01,  // .0.."9..
                        /* 3C18 */  0x14, 0xB0, 0x8F, 0x05, 0x27, 0xF2, 0x6E, 0xE7,  // ....'.n.
                        /* 3C20 */  0xB3, 0x80, 0x25, 0xC1, 0xA1, 0x86, 0xE9, 0x89,  // ..%.....
                        /* 3C28 */  0x3D, 0x03, 0x1C, 0xEE, 0x89, 0x9C, 0xBF, 0x2F,  // =....../
                        /* 3C30 */  0x03, 0x21, 0xD9, 0xF1, 0xD8, 0x43, 0xE1, 0x07,  // .!...C..
                        /* 3C38 */  0x04, 0x4F, 0xEB, 0xA4, 0xAC, 0x1D, 0x51, 0x83,  // .O....Q.
                        /* 3C40 */  0x32, 0x4C, 0x02, 0x9F, 0x15, 0x18, 0x1A, 0x87,  // 2L......
                        /* 3C48 */  0xC6, 0x0E, 0xC3, 0xE3, 0x0E, 0x76, 0x10, 0x87,  // .....v..
                        /* 3C50 */  0x71, 0x78, 0xCF, 0x21, 0x6C, 0x42, 0x27, 0x7A,  // qx.!lB'z
                        /* 3C58 */  0x90, 0x6F, 0x04, 0xC5, 0xA3, 0x0A, 0xA3, 0x39,  // .o.....9
                        /* 3C60 */  0x28, 0x22, 0xF8, 0xB8, 0x00, 0x9A, 0xA3, 0x00,  // ("......
                        /* 3C68 */  0x5C, 0x1C, 0x5F, 0x04, 0xDE, 0x03, 0x02, 0xC5,  // \._.....
                        /* 3C70 */  0x7F, 0x58, 0x08, 0x7F, 0x30, 0x47, 0x73, 0x04,  // .X..0Gs.
                        /* 3C78 */  0x11, 0x12, 0x18, 0xE6, 0x40, 0x30, 0xC7, 0x09,  // ....@0..
                        /* 3C80 */  0x7B, 0xBE, 0x29, 0x90, 0xE3, 0x04, 0x73, 0x3F,  // {.)...s?
                        /* 3C88 */  0x23, 0x39, 0x3B, 0x2B, 0x08, 0xA3, 0xB7, 0x8B,  // #9;+....
                        /* 3C90 */  0x80, 0xC0, 0x4F, 0xA7, 0x2D, 0x18, 0xC1, 0x15,  // ..O.-...
                        /* 3C98 */  0x87, 0x25, 0x94, 0x23, 0x8B, 0xF6, 0xCA, 0x50,  // .%.#...P
                        /* 3CA0 */  0x19, 0x8A, 0x80, 0x0E, 0x22, 0x4C, 0x3C, 0x43,  // ...."L<C
                        /* 3CA8 */  0x45, 0x09, 0xF1, 0x50, 0x60, 0xD0, 0x20, 0xF1,  // E..P`. .
                        /* 3CB0 */  0x5A, 0xBB, 0x61, 0x90, 0x29, 0xB6, 0x3F, 0x08,  // Z.a.).?.
                        /* 3CB8 */  0x12, 0xF0, 0x3C, 0xA0, 0x53, 0x87, 0x23, 0x8D,  // ..<.S.#.
                        /* 3CC0 */  0x86, 0xFC, 0xFF, 0xCF, 0x21, 0x98, 0x33, 0x81,  // ....!.3.
                        /* 3CC8 */  0xCF, 0x03, 0x67, 0xF8, 0x64, 0x61, 0xDC, 0x20,  // ..g.da. 
                        /* 3CD0 */  0xA7, 0xE2, 0x31, 0x3E, 0x0C, 0x78, 0xD8, 0xEC,  // ..1>.x..
                        /* 3CD8 */  0x96, 0xE0, 0xFF, 0x81, 0x4F, 0x07, 0x78, 0xD7,  // ....O.x.
                        /* 3CE0 */  0x80, 0xBA, 0x16, 0x3C, 0x14, 0xB0, 0x03, 0x08,  // ...<....
                        /* 3CE8 */  0xFC, 0x73, 0x06, 0xFC, 0xF1, 0xF8, 0x14, 0xE0,  // .s......
                        /* 3CF0 */  0xF9, 0x9C, 0xF0, 0xA3, 0x03, 0x19, 0x04, 0x6A,  // .......j
                        /* 3CF8 */  0x64, 0x86, 0xF6, 0x79, 0xE2, 0xB4, 0x5E, 0x06,  // d..y..^.
                        /* 3D00 */  0x7C, 0x46, 0x38, 0x2C, 0x26, 0x16, 0x42, 0x0A,  // |F8,&.B.
                        /* 3D08 */  0xCE, 0x27, 0xA0, 0x18, 0x0F, 0x7C, 0xC5, 0x67,  // .'...|.g
                        /* 3D10 */  0x0C, 0x72, 0x63, 0xF0, 0x7C, 0x7D, 0x0C, 0x01,  // .rc.|}..
                        /* 3D18 */  0x06, 0x87, 0x05, 0x1C, 0x81, 0x8F, 0x21, 0xC0,  // ......!.
                        /* 3D20 */  0x43, 0xB3, 0x87, 0x23, 0x01, 0xCB, 0xBA, 0x5A,  // C..#...Z
                        /* 3D28 */  0xD9, 0x58, 0xAD, 0x8F, 0x3E, 0x3E, 0x9D, 0x1A,  // .X..>>..
                        /* 3D30 */  0x48, 0xE7, 0x1E, 0xEE, 0x11, 0x5B, 0xB8, 0xCF,  // H....[..
                        /* 3D38 */  0x29, 0x7C, 0x1A, 0x2F, 0x09, 0x86, 0x78, 0xA0,  // )|./..x.
                        /* 3D40 */  0x31, 0xC1, 0xD4, 0x07, 0x06, 0x31, 0x68, 0xF4,  // 1....1h.
                        /* 3D48 */  0x24, 0xAF, 0x81, 0xFF, 0x3F, 0xC4, 0xCC, 0x63,  // $...?..c
                        /* 3D50 */  0xA2, 0x43, 0x70, 0x4A, 0x08, 0xC1, 0x19, 0xC4,  // .CpJ....
                        /* 3D58 */  0x80, 0x8E, 0x70, 0xAA, 0xA3, 0x07, 0x02, 0xFE,  // ..p.....
                        /* 3D60 */  0x45, 0xF1, 0x31, 0xC7, 0x47, 0x2A, 0x36, 0xAC,  // E.1.G*6.
                        /* 3D68 */  0x53, 0x62, 0x73, 0xF4, 0x75, 0x80, 0xDF, 0x52,  // Sbs.u..R
                        /* 3D70 */  0x7C, 0x40, 0x30, 0xB0, 0xD5, 0xDC, 0x86, 0x50,  // |@0....P
                        /* 3D78 */  0x60, 0x3E, 0x0C, 0x9C, 0x32, 0x3B, 0x71, 0xE9,  // `>..2;q.
                        /* 3D80 */  0xA4, 0x03, 0x9A, 0x53, 0x46, 0x82, 0xFA, 0x8E,  // ...SF...
                        /* 3D88 */  0x04, 0xA0, 0x00, 0xF2, 0xFC, 0x7D, 0x3A, 0xF7,  // .....}:.
                        /* 3D90 */  0x71, 0x80, 0x41, 0x84, 0x89, 0x66, 0x74, 0x1E,  // q.A..ft.
                        /* 3D98 */  0x7D, 0xA6, 0xA8, 0xB0, 0x33, 0xA5, 0x20, 0x9E,  // }...3. .
                        /* 3DA0 */  0xA9, 0x83, 0xCC, 0x14, 0x3D, 0x13, 0x8F, 0x1E,  // ....=...
                        /* 3DA8 */  0x7B, 0x31, 0x61, 0xF7, 0x0D, 0x38, 0x63, 0x8E,  // {1a..8c.
                        /* 3DB0 */  0xF8, 0x58, 0xE0, 0x69, 0x18, 0xCE, 0x83, 0xE5,  // .X.i....
                        /* 3DB8 */  0x70, 0x1E, 0x2C, 0x1F, 0x8B, 0x27, 0x0B, 0x2E,  // p.,..'..
                        /* 3DC0 */  0x81, 0x93, 0x05, 0x39, 0x3C, 0x26, 0xDA, 0xA0,  // ...9<&..
                        /* 3DC8 */  0xE8, 0x78, 0x3C, 0x2C, 0x7E, 0x36, 0xF0, 0xA5,  // .x<,~6..
                        /* 3DD0 */  0x87, 0x9D, 0xAC, 0x3C, 0x98, 0xFF, 0xFF, 0xEB,  // ...<....
                        /* 3DD8 */  0xDA, 0x3B, 0x82, 0x2F, 0x5C, 0x6C, 0x68, 0x7C,  // .;./\lh|
                        /* 3DE0 */  0xA0, 0x1C, 0xD6, 0x68, 0x61, 0x5F, 0x74, 0xDE,  // ...ha_t.
                        /* 3DE8 */  0x3A, 0x7C, 0x64, 0xF1, 0xC4, 0x8C, 0x11, 0xD6,  // :|d.....
                        /* 3DF0 */  0x83, 0xF5, 0x68, 0xDE, 0x7A, 0xC0, 0x72, 0xA7,  // ..h.z.r.
                        /* 3DF8 */  0x60, 0x5F, 0x8B, 0xB7, 0x2E, 0x38, 0x47, 0x01,  // `_...8G.
                        /* 3E00 */  0xDC, 0x1B, 0xC3, 0xF2, 0x6F, 0x19, 0xE8, 0x68,  // ....o..h
                        /* 3E08 */  0xAB, 0xD2, 0x2D, 0x83, 0xC3, 0xBE, 0x65, 0xC0,  // ..-...e.
                        /* 3E10 */  0x0C, 0x72, 0xCB, 0xA0, 0x10, 0x8E, 0x40, 0xA1,  // .r....@.
                        /* 3E18 */  0x00, 0x10, 0x3A, 0x2C, 0x70, 0xC9, 0x70, 0x14,  // ..:,p.p.
                        /* 3E20 */  0xC4, 0x43, 0x76, 0x8C, 0xC3, 0x02, 0xFA, 0xEE,  // .Cv.....
                        /* 3E28 */  0xE2, 0x5B, 0x06, 0xE6, 0xAC, 0x00, 0xF3, 0x98,  // .[......
                        /* 3E30 */  0xC1, 0xCE, 0x0A, 0xB0, 0xEF, 0x19, 0xE0, 0x3B,  // .......;
                        /* 3E38 */  0x4F, 0x80, 0x7B, 0x50, 0xE0, 0x38, 0x4F, 0xC0,  // O.{P.8O.
                        /* 3E40 */  0xFF, 0xFF, 0x9F, 0x27, 0x00, 0x0F, 0x47, 0x12,  // ...'..G.
                        /* 3E48 */  0x9F, 0x27, 0x80, 0xD3, 0xE9, 0x81, 0x9D, 0x27,  // .'.....'
                        /* 3E50 */  0xC0, 0x22, 0xE3, 0x3C, 0x81, 0xE2, 0xB0, 0xC8,  // .".<....
                        /* 3E58 */  0xF3, 0x04, 0xC4, 0xE3, 0x21, 0xBF, 0xED, 0xB2,  // ....!...
                        /* 3E60 */  0xE3, 0x04, 0x97, 0x43, 0x21, 0x31, 0xC7, 0x09,  // ...C!1..
                        /* 3E68 */  0x54, 0x7C, 0x30, 0x0A, 0xE2, 0x81, 0x7A, 0xD4,  // T|0...z.
                        /* 3E70 */  0x36, 0x32, 0x10, 0x0A, 0xE9, 0xE1, 0xF9, 0x8E,  // 62......
                        /* 3E78 */  0x89, 0x9B, 0x05, 0x86, 0x60, 0x88, 0xEB, 0x25,  // ....`..%
                        /* 3E80 */  0x3D, 0x2D, 0x80, 0x6B, 0x08, 0xE1, 0xDF, 0xEE,  // =-.k....
                        /* 3E88 */  0xDE, 0x35, 0xD9, 0xC1, 0x02, 0x3C, 0xFF, 0xFF,  // .5...<..
                        /* 3E90 */  0x43, 0x03, 0x1C, 0xAB, 0x40, 0xBA, 0x55, 0x05,  // C...@.U.
                        /* 3E98 */  0x7A, 0x68, 0x00, 0x2E, 0xC1, 0x0E, 0x0D, 0xA0,  // zh......
                        /* 3EA0 */  0x83, 0xE5, 0x87, 0x06, 0xF0, 0xDC, 0xCD, 0x70,  // .......p
                        /* 3EA8 */  0x87, 0x06, 0xF0, 0xDE, 0x49, 0x31, 0x04, 0xE3,  // ....I1..
                        /* 3EB0 */  0xFC, 0x21, 0x4D, 0x20, 0xF1, 0x0F, 0x04, 0x49,  // .!M ...I
                        /* 3EB8 */  0x5B, 0x1C, 0x85, 0xF1, 0xED, 0x12, 0x70, 0x05,  // [.....p.
                        /* 3EC0 */  0x74, 0xD4, 0x60, 0xF8, 0xFF, 0xDF, 0x2E, 0x61,  // t.`....a
                        /* 3EC8 */  0x40, 0xBC, 0xDD, 0xF9, 0x82, 0xE0, 0xD3, 0x25,  // @......%
                        /* 3ED0 */  0xDC, 0xCB, 0x25, 0x6C, 0x90, 0xB0, 0x4F, 0x95,  // ..%l..O.
                        /* 3ED8 */  0x61, 0x5F, 0x20, 0x22, 0x9C, 0xD3, 0x03, 0xE5,  // a_ "....
                        /* 3EE0 */  0x53, 0xE5, 0xB3, 0x65, 0x1C, 0x63, 0xBD, 0x57,  // S..e.c.W
                        /* 3EE8 */  0xFA, 0x52, 0xF9, 0x2C, 0x18, 0x27, 0xCA, 0xC3,  // .R.,.'..
                        /* 3EF0 */  0xA5, 0x4F, 0x70, 0x6F, 0x99, 0x0F, 0x99, 0x9E,  // .Opo....
                        /* 3EF8 */  0x5C, 0xE0, 0xF3, 0x0A, 0x12, 0x21, 0x66, 0x98,  // \....!f.
                        /* 3F00 */  0xA0, 0x27, 0x10, 0x39, 0xE6, 0xCB, 0x25, 0x8B,  // .'.9..%.
                        /* 3F08 */  0x77, 0xB9, 0x04, 0x68, 0x72, 0x44, 0x78, 0xB9,  // w..hrDx.
                        /* 3F10 */  0x04, 0x1F, 0xC4, 0xFF, 0xFF, 0x59, 0x01, 0xD6,  // .....Y..
                        /* 3F18 */  0xDD, 0x12, 0x98, 0x48, 0x7D, 0x67, 0x69, 0x08,  // ...H}gi.
                        /* 3F20 */  0x16, 0x7E, 0x0E, 0x42, 0x1D, 0x0A, 0x1C, 0xEC,  // .~.B....
                        /* 3F28 */  0x94, 0xA0, 0x63, 0x1B, 0xBB, 0x55, 0xF8, 0xBC,  // ..c..U..
                        /* 3F30 */  0xE1, 0xFB, 0x81, 0x07, 0xF4, 0x58, 0xF0, 0x5A,  // .....X.Z
                        /* 3F38 */  0x71, 0xE6, 0x8E, 0x72, 0x0C, 0x42, 0x85, 0xA0,  // q..r.B..
                        /* 3F40 */  0xD0, 0x29, 0xCD, 0xC7, 0x20, 0x2E, 0x1A, 0x8E,  // .).. ...
                        /* 3F48 */  0x82, 0xF8, 0xA0, 0xE0, 0x13, 0x18, 0x9C, 0x69,  // .......i
                        /* 3F50 */  0x1D, 0xC2, 0x19, 0x1D, 0x04, 0xE6, 0x80, 0x08,  // ........
                        /* 3F58 */  0xEE, 0x53, 0x1A, 0x70, 0x18, 0xEB, 0x41, 0x01,  // .S.p..A.
                        /* 3F60 */  0x93, 0x53, 0x1A, 0x70, 0xF9, 0xFF, 0x9F, 0x90,  // .S.p....
                        /* 3F68 */  0xC0, 0x15, 0xEB, 0x10, 0x09, 0xF4, 0x0E, 0x18,  // ........
                        /* 3F70 */  0xB8, 0x43, 0x24, 0x38, 0xAE, 0x0F, 0x38, 0x9C,  // .C$8..8.
                        /* 3F78 */  0xE7, 0x00, 0xFE, 0x92, 0xA0, 0x87, 0x09, 0xD4,  // ........
                        /* 3F80 */  0x88, 0x2C, 0xEC, 0x30, 0x81, 0x18, 0xE5, 0x71,  // .,.0...q
                        /* 3F88 */  0x07, 0x8D, 0xF0, 0xBC, 0x64, 0x9C, 0xD8, 0x27,  // ....d..'
                        /* 3F90 */  0xF7, 0x34, 0xE4, 0x39, 0x3D, 0x03, 0x79, 0x84,  // .4.9=.y.
                        /* 3F98 */  0x6F, 0x8C, 0x5C, 0xC2, 0x81, 0x02, 0x15, 0xFE,  // o.\.....
                        /* 3FA0 */  0x00, 0x0B, 0x0A, 0x27, 0x87, 0x48, 0xA8, 0x63,  // ...'.H.c
                        /* 3FA8 */  0x79, 0x9E, 0x00, 0xFB, 0x91, 0x05, 0xFE, 0x59,  // y......Y
                        /* 3FB0 */  0x81, 0x5F, 0x7E, 0x9E, 0x80, 0x12, 0xF8, 0xB0,  // ._~.....
                        /* 3FB8 */  0x00, 0xAE, 0xFF, 0xFF, 0x61, 0x01, 0x6E, 0xBC,  // ....a.n.
                        /* 3FC0 */  0x13, 0x22, 0xD0, 0x3B, 0x58, 0x81, 0xE7, 0xB0,  // .".;X...
                        /* 3FC8 */  0xC0, 0xCF, 0x06, 0xD8, 0x13, 0x9A, 0x4F, 0x02,  // ......O.
                        /* 3FD0 */  0xEC, 0x8A, 0x08, 0xE3, 0x80, 0xA0, 0x03, 0x03,  // ........
                        /* 3FD8 */  0x5A, 0xDA, 0x81, 0x01, 0x31, 0xE3, 0x98, 0x06,  // Z...1...
                        /* 3FE0 */  0x09, 0x7F, 0x08, 0x27, 0xC0, 0x47, 0xFC, 0x0C,  // ...'.G..
                        /* 3FE8 */  0x74, 0x2E, 0x47, 0x11, 0x22, 0xD8, 0x6B, 0x93,  // t.G.".k.
                        /* 3FF0 */  0x87, 0xA5, 0x03, 0x03, 0xEA, 0x80, 0xE8, 0x13,  // ........
                        /* 3FF8 */  0x83, 0x0F, 0x0C, 0x3C, 0x2E, 0x18, 0x05, 0xF1,  // ...<....
                        /* 4000 */  0x68, 0x1D, 0xE5, 0xC0, 0x80, 0x3E, 0x2D, 0xB1,  // h....>-.
                        /* 4008 */  0x49, 0x60, 0x4F, 0x0C, 0x80, 0x97, 0xFF, 0xFF,  // I`O.....
                        /* 4010 */  0x89, 0x01, 0xF8, 0x1C, 0x0F, 0xC1, 0x77, 0x62,  // ......wb
                        /* 4018 */  0x00, 0xDF, 0xFD, 0x00, 0x77, 0x61, 0xC0, 0x1D,  // ....wa..
                        /* 4020 */  0x06, 0x38, 0xB2, 0x2F, 0x89, 0x3E, 0xB1, 0xE0,  // .8./.>..
                        /* 4028 */  0x0F, 0x00, 0x3E, 0x31, 0xF8, 0x88, 0xCA, 0x87,  // ..>1....
                        /* 4030 */  0x80, 0x3B, 0x6F, 0x79, 0x08, 0xEC, 0x16, 0x8D,  // .;oy....
                        /* 4038 */  0x3F, 0xB2, 0x80, 0xF1, 0x8C, 0x0C, 0xDC, 0x8E,  // ?.......
                        /* 4040 */  0x54, 0xE0, 0x3B, 0x31, 0x80, 0xE3, 0xFF, 0x7F,  // T.;1....
                        /* 4048 */  0x62, 0x00, 0x47, 0xB8, 0x13, 0x03, 0xE8, 0xCE,  // b.G.....
                        /* 4050 */  0x86, 0x3E, 0x31, 0x80, 0xEB, 0xD0, 0xE7, 0xF3,  // .>1.....
                        /* 4058 */  0x29, 0xB8, 0x4E, 0x0C, 0xF0, 0x6E, 0x2C, 0x78,  // ).N..n,x
                        /* 4060 */  0x59, 0x07, 0x06, 0xD4, 0x05, 0xC0, 0x32, 0x4F,  // Y.....2O
                        /* 4068 */  0x2C, 0x88, 0xD1, 0x9E, 0x70, 0x90, 0x97, 0xC3,  // ,...p...
                        /* 4070 */  0xD3, 0x60, 0x87, 0x64, 0x5F, 0xA1, 0x30, 0x27,  // .`.d_.0'
                        /* 4078 */  0x06, 0x5F, 0x9C, 0x70, 0x40, 0x35, 0x5E, 0x04,  // ._.p@5^.
                        /* 4080 */  0xC9, 0x30, 0x7C, 0x31, 0xF4, 0xB9, 0x05, 0x18,  // .0|1....
                        /* 4088 */  0x9C, 0x1A, 0xF0, 0xE7, 0x16, 0xE0, 0xFE, 0xFF,  // ........
                        /* 4090 */  0x3F, 0x36, 0x80, 0x3B, 0xE6, 0xB1, 0x01, 0x74,  // ?6.;...t
                        /* 4098 */  0x16, 0x8E, 0x0D, 0xA0, 0x3B, 0xC9, 0xE2, 0x0E,  // ....;...
                        /* 40A0 */  0x6D, 0x60, 0xBC, 0x21, 0x60, 0x81, 0xDE, 0x10,  // m`.!`...
                        /* 40A8 */  0xB0, 0x77, 0x07, 0x2C, 0x41, 0x79, 0x67, 0x07,  // .w.,Ayg.
                        /* 40B0 */  0xD4, 0x79, 0xD3, 0x67, 0x07, 0xDC, 0xBD, 0x01,  // .y.g....
                        /* 40B8 */  0x7B, 0x9F, 0xF0, 0x04, 0x8E, 0xC0, 0x73, 0xF3,  // {.....s.
                        /* 40C0 */  0xDD, 0x01, 0x0C, 0x67, 0x38, 0x60, 0x30, 0x89,  // ...g8`0.
                        /* 40C8 */  0xC7, 0x61, 0x1F, 0x64, 0xD9, 0xD9, 0x01, 0xF8,  // .a.d....
                        /* 40D0 */  0xFC, 0xFF, 0xCF, 0x0E, 0xC0, 0xF3, 0xD0, 0xE1,  // ........
                        /* 40D8 */  0xB3, 0x03, 0xB8, 0x8E, 0xE2, 0x3E, 0x3B, 0x80,  // .....>;.
                        /* 40E0 */  0xEB, 0x38, 0xEC, 0xB3, 0x03, 0x98, 0x4F, 0x09,  // .8....O.
                        /* 40E8 */  0xD8, 0xF3, 0x03, 0xF8, 0x64, 0x9E, 0x1F, 0xA0,  // ....d...
                        /* 40F0 */  0x1C, 0xA5, 0xF8, 0xF9, 0x01, 0xF0, 0xF3, 0xFF,  // ........
                        /* 40F8 */  0x3F, 0x4F, 0x81, 0xEB, 0xFC, 0x00, 0xBC, 0x63,  // ?O.....c
                        /* 4100 */  0x9F, 0x1F, 0x40, 0xE7, 0xE1, 0xFC, 0x00, 0xBA,  // ..@.....
                        /* 4108 */  0x18, 0x07, 0x2A, 0xD0, 0x9D, 0x1F, 0xC0, 0x0E,  // ..*.....
                        /* 4110 */  0x6A, 0xA0, 0x77, 0xBB, 0x63, 0xB2, 0xAF, 0x11,  // j.w.c...
                        /* 4118 */  0x69, 0x08, 0xC7, 0xF2, 0x90, 0x69, 0xA4, 0x97,  // i....i..
                        /* 4120 */  0x05, 0x4B, 0x3A, 0x43, 0xA0, 0x0E, 0x00, 0x16,  // .K:C....
                        /* 4128 */  0x79, 0xA4, 0x41, 0xDD, 0x1D, 0xF0, 0x27, 0x2C,  // y.A...',
                        /* 4130 */  0x9C, 0x5A, 0x0C, 0x72, 0x92, 0xF0, 0x35, 0xFD,  // .Z.r..5.
                        /* 4138 */  0xC9, 0xD3, 0xA3, 0x38, 0x3B, 0x7E, 0xB8, 0x82,  // ...8;~..
                        /* 4140 */  0xFD, 0xFF, 0x3F, 0x5C, 0x81, 0x63, 0x12, 0xF8,  // ..?\.c..
                        /* 4148 */  0x13, 0x0D, 0xE0, 0x2D, 0xE4, 0x11, 0x02, 0x74,  // ...-...t
                        /* 4150 */  0xE0, 0x3E, 0x42, 0x80, 0x0B, 0xFE, 0x89, 0x06,  // .>B.....
                        /* 4158 */  0x6C, 0x57, 0x07, 0xFC, 0x21, 0x01, 0xA7, 0xFE,  // lW..!...
                        /* 4160 */  0x90, 0x40, 0xB1, 0x1E, 0x12, 0x60, 0x08, 0x55,  // .@...`.U
                        /* 4168 */  0x31, 0x12, 0x26, 0xFF, 0x79, 0x20, 0x69, 0x30,  // 1.&.y i0
                        /* 4170 */  0xA8, 0xD3, 0x8F, 0x4F, 0x05, 0xF8, 0x71, 0x1E,  // ...O..q.
                        /* 4178 */  0xE6, 0xD1, 0x1D, 0x18, 0x93, 0x04, 0x87, 0x3A,  // .......:
                        /* 4180 */  0x02, 0x78, 0x60, 0xAF, 0x9E, 0xFF, 0xFF, 0x67,  // .x`....g
                        /* 4188 */  0x0A, 0xCF, 0xD7, 0x33, 0x0B, 0xC9, 0xA4, 0x8D,  // ...3....
                        /* 4190 */  0x10, 0x25, 0x65, 0x2C, 0x1E, 0x8F, 0x86, 0xF3,  // .%e,....
                        /* 4198 */  0xAE, 0xE1, 0x93, 0xA0, 0x61, 0x12, 0x78, 0xF0,  // ....a.x.
                        /* 41A0 */  0x0C, 0x8D, 0x43, 0x63, 0x87, 0xE1, 0x21, 0x06,  // ..Cc..!.
                        /* 41A8 */  0x3B, 0x88, 0xA7, 0x0C, 0x9F, 0x70, 0xD8, 0x84,  // ;....p..
                        /* 41B0 */  0x4E, 0xF5, 0x51, 0xF5, 0x6D, 0xA1, 0x78, 0x54,  // N.Q.m.xT
                        /* 41B8 */  0x61, 0x34, 0x07, 0x45, 0x04, 0x8F, 0x1D, 0x34,  // a4.E...4
                        /* 41C0 */  0x60, 0xD6, 0x7C, 0x68, 0x20, 0x57, 0x60, 0x63,  // `.|h W`c
                        /* 41C8 */  0xB1, 0x51, 0xC7, 0x08, 0x75, 0xF0, 0x06, 0x3A,  // .Q..u..:
                        /* 41D0 */  0xF8, 0xB7, 0x81, 0x60, 0xC6, 0x8A, 0x12, 0x89,  // ...`....
                        /* 41D8 */  0x5D, 0x1B, 0x7D, 0x7E, 0xC3, 0x1E, 0x79, 0x8C,  // ].}~..y.
                        /* 41E0 */  0xF7, 0x16, 0xE1, 0xAB, 0x81, 0x09, 0xBA, 0x1F,  // ........
                        /* 41E8 */  0x92, 0x50, 0x22, 0xB4, 0x76, 0x1A, 0x11, 0xC6,  // .P".v...
                        /* 41F0 */  0xAB, 0x67, 0x9C, 0xB6, 0x04, 0x18, 0xC3, 0xD1,  // .g......
                        /* 41F8 */  0xE4, 0x8E, 0x2B, 0x4A, 0x9C, 0xDE, 0x46, 0xA3,  // ..+J..F.
                        /* 4200 */  0xEB, 0x44, 0x94, 0x40, 0xF1, 0x6A, 0x03, 0x13,  // .D.@.j..
                        /* 4208 */  0xCA, 0x61, 0x45, 0x88, 0x12, 0x32, 0x52, 0x9C,  // .aE..2R.
                        /* 4210 */  0x28, 0xC6, 0x3B, 0xA0, 0x70, 0xC7, 0xD8, 0xFE,  // (.;.p...
                        /* 4218 */  0xC1, 0x93, 0x2D, 0x45, 0xC7, 0x00, 0x47, 0x1A,  // ..-E..G.
                        /* 4220 */  0x0D, 0xEA, 0x64, 0xE1, 0x33, 0x81, 0xCF, 0x03,  // ..d.3...
                        /* 4228 */  0xA7, 0x75, 0x52, 0x46, 0x0F, 0xF2, 0xF0, 0x62,  // .uRF...b
                        /* 4230 */  0x9D, 0x87, 0x01, 0x32, 0x6C, 0x36, 0x34, 0x1F,  // ...2l64.
                        /* 4238 */  0x41, 0xE0, 0xB8, 0x06, 0xD4, 0xE9, 0xD9, 0x87,  // A.......
                        /* 4240 */  0x02, 0x7F, 0x59, 0x0C, 0xC7, 0x87, 0xE8, 0x13,  // ..Y.....
                        /* 4248 */  0x8C, 0x87, 0xE5, 0xC3, 0x11, 0x3F, 0x83, 0xC0,  // .....?..
                        /* 4250 */  0x1F, 0x8F, 0x4F, 0x01, 0x1E, 0xB8, 0x8F, 0x0E,  // ..O.....
                        /* 4258 */  0x64, 0x10, 0xA8, 0x91, 0xF9, 0xFF, 0x7F, 0xB6,  // d.......
                        /* 4260 */  0x66, 0xD3, 0x7A, 0x02, 0xF0, 0x19, 0xE1, 0xB0,  // f.z.....
                        /* 4268 */  0xD8, 0xA1, 0xD4, 0x67, 0x16, 0x8F, 0x07, 0xFC,  // ...g....
                        /* 4270 */  0xF7, 0x80, 0x47, 0x83, 0x08, 0x6F, 0x0C, 0x9E,  // ..G..o..
                        /* 4278 */  0xAF, 0x8F, 0x48, 0xEC, 0xE0, 0x8B, 0x3B, 0x2E,  // ..H...;.
                        /* 4280 */  0xF8, 0x84, 0x80, 0xBF, 0xA1, 0x3C, 0x8F, 0xB0,  // .....<..
                        /* 4288 */  0x80, 0x47, 0x58, 0x2A, 0xEA, 0x6C, 0x82, 0x3A,  // .GX*.l.:
                        /* 4290 */  0x54, 0xF8, 0x3C, 0xC1, 0x6E, 0x0D, 0x2F, 0x41,  // T.<.n./A
                        /* 4298 */  0x86, 0x08, 0xCB, 0x0E, 0x38, 0x1E, 0x1B, 0xFC,  // ....8...
                        /* 42A0 */  0xFB, 0x8C, 0x0F, 0x13, 0xE0, 0x38, 0x45, 0xC0,  // .....8E.
                        /* 42A8 */  0xB8, 0xDE, 0x58, 0xD7, 0x79, 0x18, 0x84, 0xC7,  // ..X.y...
                        /* 42B0 */  0x33, 0x8F, 0x15, 0x77, 0x1E, 0x31, 0xF0, 0x91,  // 3..w.1..
                        /* 42B8 */  0xF8, 0x50, 0xE0, 0x59, 0x7B, 0xAA, 0x3E, 0xC0,  // .P.Y{.>.
                        /* 42C0 */  0x30, 0xA0, 0x77, 0x88, 0x63, 0x7B, 0x6F, 0xF0,  // 0.w.c{o.
                        /* 42C8 */  0x29, 0x94, 0x0D, 0x17, 0x3C, 0x27, 0x03, 0x70,  // )...<'.p
                        /* 42D0 */  0x4C, 0xEB, 0x70, 0x61, 0xFF, 0xFF, 0x87, 0xCB,  // L.pa....
                        /* 42D8 */  0xC7, 0x85, 0x9D, 0xC5, 0x29, 0xB2, 0x71, 0xE1,  // ....).q.
                        /* 42E0 */  0xA0, 0xCE, 0xD8, 0x23, 0x06, 0xD7, 0xD9, 0xCE,  // ...#....
                        /* 42E8 */  0x23, 0xC6, 0x1D, 0x35, 0x7C, 0x58, 0x80, 0x01,  // #..5|X..
                        /* 42F0 */  0xFF, 0xAC, 0x71, 0x4A, 0xC7, 0xEB, 0x88, 0xE3,  // ..qJ....
                        /* 42F8 */  0x05, 0x15, 0xA0, 0xC7, 0x0B, 0xFF, 0x4C, 0xE8,  // ......L.
                        /* 4300 */  0xD3, 0x02, 0x58, 0x47, 0xC5, 0x8F, 0x0B, 0x60,  // ..XG...`
                        /* 4308 */  0xB1, 0x0A, 0xA4, 0x63, 0x4A, 0xA0, 0xA3, 0xF5,  // ...cJ...
                        /* 4310 */  0x9B, 0xC2, 0xA3, 0xC5, 0x8D, 0xCC, 0x77, 0x47,  // ......wG
                        /* 4318 */  0x7E, 0x2F, 0xF3, 0x34, 0x38, 0x4A, 0xE4, 0x63,  // ~/.48J.c
                        /* 4320 */  0x3F, 0xCC, 0x47, 0x60, 0x3E, 0x5C, 0xF0, 0x80,  // ?.G`>\..
                        /* 4328 */  0xFA, 0xB4, 0x00, 0x3C, 0x86, 0xE5, 0xFF, 0xFF,  // ...<....
                        /* 4330 */  0xB0, 0xD8, 0x64, 0x31, 0x28, 0x87, 0xC5, 0xEE,  // ..d1(...
                        /* 4338 */  0x74, 0x06, 0x3E, 0x60, 0x30, 0x9E, 0x16, 0xE0,  // t.>`0...
                        /* 4340 */  0x9C, 0x90, 0xD8, 0x54, 0x0E, 0xE3, 0x35, 0xE2,  // ...T..5.
                        /* 4348 */  0x11, 0x8F, 0x0D, 0x87, 0x9F, 0x16, 0xC0, 0x76,  // .......v
                        /* 4350 */  0x80, 0xF6, 0x69, 0x01, 0x78, 0x8C, 0x0A, 0x7B,  // ..i.x..{
                        /* 4358 */  0x49, 0xC5, 0x9C, 0x16, 0x80, 0xC3, 0x59, 0xC5,  // I.....Y.
                        /* 4360 */  0x0A, 0x27, 0x43, 0x6E, 0x11, 0xEC, 0x88, 0xE6,  // .'Cn....
                        /* 4368 */  0x11, 0x45, 0x78, 0x39, 0x64, 0x37, 0x21, 0xDF,  // .Ex9d7!.
                        /* 4370 */  0xAB, 0x7C, 0xA8, 0x63, 0xE3, 0x05, 0xCF, 0x39,  // .|.c...9
                        /* 4378 */  0xCD, 0xE3, 0x85, 0x3F, 0x8F, 0xE3, 0x05, 0xCB,  // ...?....
                        /* 4380 */  0xB8, 0x70, 0xFF, 0xFF, 0x71, 0xF1, 0xFB, 0x1C,  // .p..q...
                        /* 4388 */  0x1B, 0x17, 0x3B, 0xAA, 0x80, 0x63, 0xC0, 0x38,  // ..;..c.8
                        /* 4390 */  0x41, 0x03, 0x46, 0x1F, 0xDA, 0x7C, 0x5A, 0xC0,  // A.F..|Z.
                        /* 4398 */  0x0F, 0x1A, 0x1C, 0x47, 0x5C, 0x0F, 0x1A, 0x3C,  // ...G\..<
                        /* 43A0 */  0x27, 0x55, 0x0F, 0x1A, 0xFE, 0x69, 0xEE, 0x99,  // 'U...i..
                        /* 43A8 */  0x01, 0xAC, 0x03, 0x07, 0x3E, 0x87, 0x12, 0xDC,  // ....>...
                        /* 43B0 */  0x01, 0x13, 0x1E, 0x4A, 0xEC, 0xC0, 0x7D, 0xDE,  // ...J..}.
                        /* 43B8 */  0x15, 0x05, 0x71, 0xD8, 0xC6, 0x7F, 0x73, 0x7C,  // ..q...s|
                        /* 43C0 */  0xC6, 0x38, 0x80, 0x33, 0x30, 0xCA, 0x23, 0xB4,  // .8.30.#.
                        /* 43C8 */  0x51, 0xE3, 0x84, 0x78, 0x92, 0xE6, 0xC3, 0xC4,  // Q..x....
                        /* 43D0 */  0x0D, 0x82, 0xA3, 0x3E, 0x6F, 0xB2, 0x41, 0xBC,  // ...>o.A.
                        /* 43D8 */  0x72, 0x7A, 0x1E, 0x87, 0xE4, 0x43, 0x92, 0x11,  // rz...C..
                        /* 43E0 */  0x0E, 0xF1, 0x98, 0x1F, 0x10, 0x3D, 0x53, 0xCC,  // .....=S.
                        /* 43E8 */  0x59, 0x8E, 0xFF, 0xFF, 0x09, 0x1C, 0xEB, 0x04,  // Y.......
                        /* 43F0 */  0x49, 0x03, 0x1C, 0x11, 0x24, 0xF1, 0x39, 0x40,  // I...$.9@
                        /* 43F8 */  0x61, 0x7C, 0x88, 0x04, 0x5C, 0x1D, 0x4E, 0xF9,  // a|..\.N.
                        /* 4400 */  0x59, 0x09, 0x0C, 0x47, 0x01, 0xD8, 0xE7, 0x57,  // Y..G...W
                        /* 4408 */  0x86, 0x14, 0xEF, 0x04, 0x9E, 0x16, 0x0E, 0xE0,  // ........
                        /* 4410 */  0xFD, 0xDB, 0x07, 0x06, 0x13, 0xF8, 0x14, 0x09,  // ........
                        /* 4418 */  0xFB, 0xAA, 0x10, 0xF7, 0x25, 0xD2, 0x83, 0x7A,  // ....%..z
                        /* 4420 */  0x74, 0x7C, 0x70, 0x7C, 0x82, 0x7C, 0x7B, 0x3C,  // t|p|.|{<
                        /* 4428 */  0xA1, 0x48, 0xF1, 0xDE, 0x23, 0x0D, 0xF1, 0x08,  // .H..#...
                        /* 4430 */  0x69, 0x28, 0xE3, 0x05, 0x3D, 0xBA, 0x47, 0x82,  // i(..=.G.
                        /* 4438 */  0x28, 0x41, 0x22, 0x45, 0x0D, 0x13, 0x22, 0x54,  // (A"E.."T
                        /* 4440 */  0xA0, 0x10, 0x11, 0x8E, 0xD4, 0x50, 0x4F, 0x91,  // .....PO.
                        /* 4448 */  0x2C, 0xE2, 0x81, 0x40, 0x67, 0x0E, 0x9F, 0x22,  // ,..@g.."
                        /* 4450 */  0x81, 0xDF, 0xFF, 0xFF, 0x14, 0x09, 0xF8, 0x43,  // .......C
                        /* 4458 */  0x7B, 0x0E, 0x01, 0x06, 0xA7, 0x05, 0xDC, 0x41,  // {......A
                        /* 4460 */  0x04, 0xB8, 0x48, 0x7D, 0xD9, 0x68, 0xB4, 0x8E,  // ..H}.h..
                        /* 4468 */  0xFA, 0x28, 0xD0, 0x29, 0x9D, 0x1F, 0x5A, 0x1C,  // .(.)..Z.
                        /* 4470 */  0x9F, 0x4A, 0xA7, 0x74, 0x7E, 0xE8, 0x83, 0x71,  // .J.t~..q
                        /* 4478 */  0x88, 0xC7, 0xDE, 0xBD, 0x30, 0x58, 0x6F, 0x14,  // ....0Xo.
                        /* 4480 */  0x8E, 0x08, 0xAF, 0xC3, 0xA6, 0x87, 0xE1, 0x70,  // .......p
                        /* 4488 */  0x14, 0x3A, 0x8C, 0xF9, 0x8C, 0xCE, 0x0F, 0x40,  // .:.....@
                        /* 4490 */  0x86, 0x33, 0x88, 0x01, 0x9D, 0xE4, 0x30, 0x0A,  // .3....0.
                        /* 4498 */  0x8A, 0xFF, 0xFF, 0x8D, 0xD2, 0xB3, 0xF5, 0xF4,  // ........
                        /* 44A0 */  0x1E, 0x1F, 0x18, 0xA4, 0x0F, 0x06, 0xFC, 0xC0,  // ........
                        /* 44A8 */  0x62, 0x4C, 0xE3, 0x5B, 0xCD, 0xA9, 0x08, 0x05,  // bL.[....
                        /* 44B0 */  0xE6, 0x43, 0x3A, 0xE6, 0xD2, 0x08, 0x2E, 0x7D,  // .C:....}
                        /* 44B8 */  0x57, 0x74, 0x90, 0xA3, 0xF3, 0x80, 0x2B, 0xD5,  // Wt....+.
                        /* 44C0 */  0x68, 0x79, 0xA4, 0x73, 0x3E, 0x05, 0xF1, 0xC0,  // hy.s>...
                        /* 44C8 */  0x1C, 0x6A, 0xB4, 0xE8, 0x33, 0x94, 0x2F, 0x01,  // .j..3./.
                        /* 44D0 */  0xF0, 0x0E, 0x85, 0xB8, 0x83, 0x0A, 0x3F, 0xE6,  // ......?.
                        /* 44D8 */  0x83, 0x77, 0x44, 0x9E, 0x32, 0xB8, 0xA2, 0x0D,  // .wD.2...
                        /* 44E0 */  0x0D, 0x7D, 0xDA, 0xF1, 0xD0, 0xF0, 0xA7, 0x2F,  // .}...../
                        /* 44E8 */  0x70, 0x8C, 0x0E, 0xDC, 0x27, 0x07, 0xFF, 0xFF,  // p...'...
                        /* 44F0 */  0x47, 0x07, 0x2E, 0x81, 0xF7, 0x03, 0x90, 0xC3,  // G.......
                        /* 44F8 */  0x63, 0x4E, 0x8B, 0x1E, 0x94, 0xC7, 0xE3, 0x61,  // cN.....a
                        /* 4500 */  0xF1, 0xE3, 0x84, 0x8F, 0x4C, 0x0C, 0xFB, 0xB5,  // ....L...
                        /* 4508 */  0xC3, 0xA3, 0x3D, 0xC1, 0x97, 0x90, 0x07, 0x65,  // ..=....e
                        /* 4510 */  0x0C, 0xAC, 0x07, 0xCA, 0x61, 0x8D, 0x16, 0xF6,  // ....a...
                        /* 4518 */  0xF1, 0xE0, 0x91, 0xC5, 0xD7, 0x1D, 0x9F, 0x6D,  // .......m
                        /* 4520 */  0x19, 0xAC, 0x07, 0xEB, 0x33, 0x13, 0x78, 0x4E,  // ....3.xN
                        /* 4528 */  0x24, 0xEC, 0x59, 0xF2, 0x38, 0x80, 0x3D, 0xC6,  // $.Y.8.=.
                        /* 4530 */  0xC3, 0x39, 0x91, 0xE0, 0x9E, 0x28, 0x4C, 0xFC,  // .9...(L.
                        /* 4538 */  0x29, 0x05, 0x1D, 0xE8, 0x0D, 0x20, 0xCC, 0xA7,  // ).... ..
                        /* 4540 */  0x14, 0xB0, 0x8A, 0x3E, 0xA5, 0x50, 0x08, 0xCB,  // ...>.P..
                        /* 4548 */  0x85, 0x91, 0x58, 0x08, 0x1D, 0x34, 0xB8, 0x3C,  // ..X..4.<
                        /* 4550 */  0x38, 0x0A, 0xE2, 0x43, 0x93, 0xC3, 0x9C, 0x52,  // 8..C...R
                        /* 4558 */  0x40, 0x75, 0x6E, 0x80, 0x77, 0x4A, 0x61, 0x63,  // @un.wJac
                        /* 4560 */  0x67, 0xFF, 0xFF, 0x73, 0x03, 0xBC, 0x6B, 0x0A,  // g..s..k.
                        /* 4568 */  0xF8, 0x8E, 0x23, 0xC0, 0x69, 0x68, 0xE0, 0x38,  // ..#.ih.8
                        /* 4570 */  0x8E, 0x00, 0x3E, 0x46, 0x07, 0x8E, 0xE3, 0x08,  // ..>F....
                        /* 4578 */  0xE0, 0xE2, 0xFF, 0x7F, 0x1C, 0x81, 0x3B, 0x34,  // ......;4
                        /* 4580 */  0x7E, 0x1C, 0x01, 0x3E, 0x47, 0x0F, 0x76, 0x1C,  // ~..>G.v.
                        /* 4588 */  0x01, 0xAB, 0xE4, 0x17, 0x87, 0x41, 0xFC, 0x5C,  // .....A.\
                        /* 4590 */  0x90, 0x48, 0x18, 0xD4, 0xD9, 0x12, 0x70, 0x75,  // .H....pu
                        /* 4598 */  0xAC, 0x07, 0xF3, 0x85, 0x82, 0xCD, 0x9D, 0x1D,  // ........
                        /* 45A0 */  0x2A, 0xE1, 0x1F, 0x23, 0xA3, 0x76, 0x86, 0xA0,  // *..#.v..
                        /* 45A8 */  0x43, 0xA5, 0x07, 0x15, 0xE2, 0x65, 0xF2, 0xAD,  // C....e..
                        /* 45B0 */  0xF2, 0x48, 0x1E, 0x22, 0x02, 0x3D, 0x54, 0x32,  // .H.".=T2
                        /* 45B8 */  0x88, 0xA8, 0x51, 0xFE, 0xFF, 0x71, 0x5E, 0x26,  // ..Q..q^&
                        /* 45C0 */  0x83, 0x84, 0x32, 0xEA, 0x81, 0x45, 0x0C, 0xF8,  // ..2..E..
                        /* 45C8 */  0x22, 0xF8, 0x68, 0x19, 0x24, 0x7C, 0x8C, 0xD8,  // ".h.$|..
                        /* 45D0 */  0x07, 0xE0, 0x43, 0x25, 0x8B, 0xFC, 0x66, 0xD0,  // ..C%..f.
                        /* 45D8 */  0x49, 0xC0, 0x87, 0x4A, 0x80, 0x1F, 0x81, 0x0F,  // I..J....
                        /* 45E0 */  0x32, 0x68, 0x68, 0xBB, 0x1C, 0x2B, 0xB9, 0x15,  // 2hh..+..
                        /* 45E8 */  0x71, 0x82, 0xF1, 0x8E, 0xDA, 0xA0, 0x3A, 0xE8,  // q.....:.
                        /* 45F0 */  0x78, 0x64, 0xF0, 0x0F, 0x2E, 0xB8, 0x43, 0x04,  // xd....C.
                        /* 45F8 */  0xDC, 0x21, 0xB1, 0x1B, 0x04, 0x0E, 0xED, 0xFF,  // .!......
                        /* 4600 */  0x7F, 0x06, 0x3E, 0xD3, 0x80, 0xEB, 0x8C, 0x0D,  // ..>.....
                        /* 4608 */  0x1C, 0xF0, 0xA2, 0x45, 0xF4, 0xF9, 0xD4, 0x67,  // ...E...g
                        /* 4610 */  0x51, 0xE0, 0x71, 0x0D, 0xF0, 0x10, 0xF8, 0x59,  // Q.q....Y
                        /* 4618 */  0xC2, 0x43, 0xE0, 0x03, 0x78, 0x25, 0x3F, 0x43,  // .C..x%?C
                        /* 4620 */  0x9F, 0x79, 0x4E, 0x0C, 0x77, 0x6E, 0xE1, 0x60,  // .yN.wn.`
                        /* 4628 */  0xA7, 0xCC, 0x8F, 0x3E, 0x38, 0x85, 0x36, 0x7D,  // ...>8.6}
                        /* 4630 */  0x6A, 0x34, 0x6A, 0xD5, 0xA0, 0x4C, 0x8D, 0x32,  // j4j..L.2
                        /* 4638 */  0x0D, 0x6A, 0xF5, 0xA9, 0xD4, 0x98, 0xB1, 0xE6,  // .j......
                        /* 4640 */  0x2F, 0x02, 0x09, 0x7A, 0x3B, 0xE8, 0x6C, 0x60,  // /..z;.l`
                        /* 4648 */  0xF9, 0x20, 0x54, 0x36, 0x85, 0x40, 0x7C, 0xA2,  // . T6.@|.
                        /* 4650 */  0x31, 0x88, 0x05, 0x9E, 0x55, 0x05, 0xE2, 0x78,  // 1...U..x
                        /* 4658 */  0x20, 0x34, 0xD0, 0x1A, 0x04, 0xE2, 0x30, 0x26,  //  4....0&
                        /* 4660 */  0x40, 0x98, 0xF8, 0x93, 0xB8, 0x40, 0x2C, 0xF8,  // @....@,.
                        /* 4668 */  0x89, 0x20, 0x70, 0xF2, 0x44, 0x10, 0x88, 0xC5,  // . p.D...
                        /* 4670 */  0xD9, 0x00, 0x61, 0x92, 0x74, 0x1C, 0x3D, 0xA8,  // ..a.t.=.
                        /* 4678 */  0x0F, 0x10, 0x26, 0xE4, 0x1D, 0x20, 0x10, 0x8B,  // ..&.. ..
                        /* 4680 */  0x70, 0x02, 0xC2, 0x22, 0x80, 0x50, 0xD9, 0x4F,  // p..".P.O
                        /* 4688 */  0x07, 0x81, 0x58, 0xA6, 0x15, 0x10, 0x26, 0x51,  // ..X...&Q
                        /* 4690 */  0x0B, 0x08, 0xF5, 0x02, 0x42, 0x5F, 0x00, 0x02,  // ....B_..
                        /* 4698 */  0x21, 0x66, 0x86, 0x45, 0x9F, 0xA7, 0x3A, 0x2D,  // !f.E..:-
                        /* 46A0 */  0x11, 0x37, 0x43, 0xA1, 0xEB, 0xD6, 0x51, 0x95,  // .7C...Q.
                        /* 46A8 */  0xD8, 0x01, 0x61, 0xFF, 0x7F, 0x09, 0x7A, 0x40,  // ..a...z@
                        /* 46B0 */  0x58, 0xEC, 0x97, 0x84, 0x40, 0x2C, 0xDA, 0x10,  // X...@,..
                        /* 46B8 */  0x20, 0x75, 0x74, 0xC4, 0x60, 0xD2, 0x40, 0x34,  //  ut.`.@4
                        /* 46C0 */  0x08, 0x62, 0x09, 0x88, 0x09, 0x06, 0x11, 0x90,  // .b......
                        /* 46C8 */  0x03, 0x78, 0x02, 0x62, 0x71, 0x40, 0x04, 0xE4,  // .x.bq@..
                        /* 46D0 */  0x80, 0xA6, 0x80, 0x58, 0x5C, 0x10, 0x01, 0x39,  // ...X\..9
                        /* 46D8 */  0xBC, 0x2B, 0x20, 0x26, 0xE5, 0x1D, 0x21, 0x20,  // .+ &..! 
                        /* 46E0 */  0x0B, 0x7A, 0xFD, 0x0B, 0xC8, 0xF2, 0x40, 0x04,  // .z....@.
                        /* 46E8 */  0x64, 0x69, 0xCF, 0x10, 0x01, 0x59, 0x28, 0x88,  // di...Y(.
                        /* 46F0 */  0x06, 0x49, 0x3E, 0x33, 0x81, 0x88, 0x68, 0x10,  // .I>3..h.
                        /* 46F8 */  0x0D, 0x89, 0x3C, 0x83, 0x04, 0xE4, 0x08, 0x20,  // ..<.... 
                        /* 4700 */  0x02, 0x72, 0x8C, 0xC7, 0x4D, 0x20, 0x12, 0x0A,  // .r..M ..
                        /* 4708 */  0x44, 0x40, 0x0E, 0xF6, 0xA6, 0x10, 0x90, 0x63,  // D@.....c
                        /* 4710 */  0x82, 0x08, 0xC8, 0xD1, 0xD5, 0x01, 0x31, 0x21,  // ......1!
                        /* 4718 */  0xEE, 0x06, 0x42, 0xED, 0x0D, 0x84, 0x82, 0x08,  // ..B.....
                        /* 4720 */  0xC8, 0xC2, 0xFD, 0x01, 0xB1, 0x18, 0x20, 0x02,  // ...... .
                        /* 4728 */  0x72, 0xB8, 0x2F, 0x43, 0x20, 0x12, 0x15, 0x44,  // r./C ..D
                        /* 4730 */  0x83, 0x25, 0x0F, 0x08, 0x0D, 0x96, 0x80, 0x08,  // .%......
                        /* 4738 */  0xC8, 0xD1, 0x34, 0x02, 0xB1, 0xA0, 0x20, 0x3A,  // ..4... :
                        /* 4740 */  0x14, 0x90, 0x27, 0x94, 0x80, 0x2C, 0x0B, 0x44,  // ..'..,.D
                        /* 4748 */  0xC7, 0x00, 0xF2, 0x06, 0x09, 0x44, 0xE4, 0x82,  // .....D..
                        /* 4750 */  0x08, 0xC8, 0x51, 0xFE, 0x10, 0x81, 0x48, 0x30,  // ..Q...H0
                        /* 4758 */  0x10, 0x1D, 0x11, 0xC8, 0xD3, 0x43, 0x40, 0x16,  // .....C@.
                        /* 4760 */  0x07, 0xA2, 0x23, 0x03, 0x79, 0x50, 0x04, 0x22,  // ..#.yP."
                        /* 4768 */  0xD1, 0x40, 0x04, 0x64, 0x19, 0xBF, 0x8A, 0x40,  // .@.d...@
                        /* 4770 */  0x44, 0x14, 0x88, 0x00, 0xC9, 0xA3, 0x22, 0x20,  // D....." 
                        /* 4778 */  0x03, 0xD1, 0xA9, 0x85, 0xA8, 0x05, 0x62, 0x72,  // ......br
                        /* 4780 */  0x40, 0x74, 0x7C, 0x20, 0xAF, 0x8D, 0x40, 0x44,  // @t| ..@D
                        /* 4788 */  0x3E, 0x88, 0x80, 0x1C, 0x51, 0x2F, 0x10, 0x0B,  // >...Q/..
                        /* 4790 */  0x0C, 0xA2, 0xC1, 0x90, 0x37, 0xC7, 0xC1, 0x30,  // ....7..0
                        /* 4798 */  0x10, 0x01, 0x59, 0xEC, 0x2B, 0x4B, 0x40, 0x96,  // ..Y.+K@.
                        /* 47A0 */  0x0E, 0x22, 0x20, 0x47, 0xFA, 0xED, 0x08, 0xC8,  // ." G....
                        /* 47A8 */  0x01, 0x41, 0x34, 0x78, 0xF2, 0xF5, 0x11, 0x90,  // .A4x....
                        /* 47B0 */  0xFF, 0xFF, 0x42, 0xFE, 0x51, 0x07, 0xC2, 0x54,  // ..B.Q..T
                        /* 47B8 */  0x0F, 0x84, 0x82, 0x08, 0xC8, 0x31, 0xDF, 0x51,  // .....1.Q
                        /* 47C0 */  0x02, 0x72, 0x68, 0x10, 0x01, 0x59, 0xD4, 0x73,  // .rh..Y.s
                        /* 47C8 */  0x24, 0x10, 0x91, 0x08, 0x22, 0x20, 0x07, 0x31,  // $..." .1
                        /* 47D0 */  0x0E, 0xC4, 0x62, 0x81, 0x68, 0x10, 0xE4, 0x89,  // ..b.h...
                        /* 47D8 */  0xA9, 0x41, 0x90, 0x2F, 0x88, 0x8E, 0x16, 0xE4,  // .A./....
                        /* 47E0 */  0xDD, 0x25, 0x20, 0x87, 0x00, 0x11, 0x90, 0xB3,  // .% .....
                        /* 47E8 */  0x3D, 0xB8, 0x1E, 0x02, 0x18, 0x88, 0x80, 0x1C,  // =.......
                        /* 47F0 */  0xFA, 0xBD, 0x24, 0x20, 0x4B, 0x50, 0x7F, 0xAC,  // ..$ KP..
                        /* 47F8 */  0xA0, 0xAF, 0x23, 0x01, 0x59, 0x20, 0x88, 0x80,  // ..#.Y ..
                        /* 4800 */  0x2C, 0x59, 0x3F, 0x10, 0x0B, 0x00, 0xA2, 0x01,  // ,Y?.....
                        /* 4808 */  0x92, 0x00, 0x03, 0xA4, 0x20, 0x02, 0x72, 0xDC,  // .... .r.
                        /* 4810 */  0x04, 0x40, 0x2C, 0x3C, 0x88, 0x06, 0x40, 0x2A,  // .@,<..@*
                        /* 4818 */  0x0C, 0x80, 0x82, 0xE8, 0x00, 0x41, 0x3A, 0x1C,  // .....A:.
                        /* 4820 */  0x20, 0x28, 0x88, 0x0E, 0x25, 0xA4, 0x04, 0x10,  //  (..%...
                        /* 4828 */  0x8B, 0x07, 0xA2, 0x01, 0x91, 0x16, 0x03, 0xA2,  // ........
                        /* 4830 */  0x31, 0x80, 0x98, 0xBC, 0x1C, 0x40, 0x4C, 0x2C,  // 1....@L,
                        /* 4838 */  0x88, 0x0E, 0x1A, 0x24, 0xC8, 0x41, 0x83, 0x82,  // ...$.A..
                        /* 4840 */  0x68, 0xD0, 0xE4, 0x0D, 0xAE, 0x41, 0x13, 0x10,  // h....A..
                        /* 4848 */  0x01, 0x59, 0x4A, 0x15, 0x20, 0x26, 0x0C, 0x44,  // .YJ. &.D
                        /* 4850 */  0x07, 0x0C, 0xD2, 0xE5, 0x80, 0x41, 0x41, 0x04,  // .....AA.
                        /* 4858 */  0xE4, 0x38, 0x65, 0x80, 0x58, 0x38, 0x10, 0x0D,  // .8e.X8..
                        /* 4860 */  0x86, 0xB4, 0x19, 0x0C, 0x8D, 0x73, 0x98, 0xA0,  // .....s..
                        /* 4868 */  0x79, 0x80, 0x98, 0x32, 0x10, 0x01, 0x59, 0x6D,  // y..2..Ym
                        /* 4870 */  0x1F, 0x20, 0xA6, 0x1D, 0x44, 0x40, 0x4E, 0x55,  // . ..D@NU
                        /* 4878 */  0x08, 0x88, 0x65, 0x04, 0x11, 0x90, 0x53, 0x36,  // ..e...S6
                        /* 4880 */  0x02, 0x62, 0x99, 0x41, 0x04, 0x64, 0x1D, 0x99,  // .b.A.d..
                        /* 4888 */  0x80, 0x98, 0x2A, 0x10, 0x01, 0x59, 0xF1, 0x83,  // ..*..Y..
                        /* 4890 */  0x54, 0x40, 0xD6, 0x0F, 0x22, 0x60, 0x92, 0x0A,  // T@.."`..
                        /* 4898 */  0x98, 0x82, 0x08, 0xC8, 0x2A, 0x6A, 0x01, 0x31,  // ....*j.1
                        /* 48A0 */  0x4D, 0x20, 0x1A, 0x0C, 0xE9, 0x05, 0xC4, 0xFE,  // M ......
                        /* 48A8 */  0xFF, 0xDA, 0x41, 0x04, 0xE4, 0x4C, 0xC5, 0x80,  // ..A..L..
                        /* 48B0 */  0x58, 0x42, 0x10, 0x0D, 0x84, 0x54, 0x03, 0x61,  // XB...T.a
                        /* 48B8 */  0x29, 0x40, 0x68, 0xA2, 0x6C, 0x20, 0x2C, 0x69,  // )@h.l ,i
                        /* 48C0 */  0x39, 0x10, 0xA6, 0x33, 0x1D, 0x08, 0xD3, 0xDE,  // 9..3....
                        /* 48C8 */  0x0E, 0x90, 0xE6, 0x03, 0x61, 0x7A, 0xFA, 0x81,  // ....az..
                        /* 48D0 */  0x30, 0x2D, 0x01, 0x41, 0x98, 0xB6, 0x86, 0x20,  // 0-.A... 
                        /* 48D8 */  0x2C, 0x19, 0x08, 0x4D, 0xF7, 0xA2, 0x14, 0x88,  // ,..M....
                        /* 48E0 */  0xB3, 0x77, 0x04, 0x61, 0xCA, 0x43, 0x82, 0xB0,  // .w.a.C..
                        /* 48E8 */  0x0C, 0x25, 0x41, 0x58, 0xC6, 0x98, 0x20, 0x4C,  // .%AX.. L
                        /* 48F0 */  0x61, 0x4D, 0x10, 0x9A, 0x13, 0x84, 0xE9, 0xEA,  // aM......
                        /* 48F8 */  0x09, 0xC2, 0xF4, 0x27, 0x05, 0x61, 0xE9, 0x41,  // ...'.a.A
                        /* 4900 */  0xA8, 0x8A, 0xA8, 0x20, 0x4C, 0x6B, 0xD7, 0x81,  // ... Lk..
                        /* 4908 */  0x51, 0x10, 0x9A, 0xF6, 0xC5, 0x2F, 0x10, 0xAB,  // Q..../..
                        /* 4910 */  0x8C, 0x3B, 0x0C, 0x0A, 0x42, 0x53, 0xD6, 0x05,  // .;..BS..
                        /* 4918 */  0x61, 0x9A, 0x0A, 0x0F, 0x8F, 0x82, 0xD0, 0x34,  // a......4
                        /* 4920 */  0x89, 0x07, 0x40, 0x2B, 0x0F, 0x94, 0x66, 0x06,  // ..@+..f.
                        /* 4928 */  0x61, 0x99, 0x3B, 0x0F, 0x9B, 0x29, 0x08, 0x0D,  // a.;..)..
                        /* 4930 */  0x44, 0x4B, 0x03, 0xD1, 0xD4, 0x40, 0xB4, 0x35,  // DK...@.5
                        /* 4938 */  0x10, 0x8D, 0x3D, 0x4C, 0x5A, 0x1B, 0x88, 0x29,  // ..=LZ..)
                        /* 4940 */  0xC9, 0x0D, 0xC4, 0x34, 0x04, 0x07, 0x62, 0x8A,  // ...4..b.
                        /* 4948 */  0x40, 0x04, 0x44, 0x92, 0x03, 0x51, 0x10, 0x01,  // @.D..Q..
                        /* 4950 */  0x39, 0x0B, 0x10, 0x4D, 0x06, 0x44, 0x35, 0x35,  // 9..M.D55
                        /* 4958 */  0x07, 0x62, 0x0A, 0x41, 0x74, 0xFC, 0x20, 0x40,  // .b.At. @
                        /* 4960 */  0x34, 0x29, 0x10, 0xCD, 0x54, 0xFD, 0x68, 0x40,  // 4)..T.h@
                        /* 4968 */  0x41, 0x74, 0x10, 0x20, 0xD9, 0x81, 0x98, 0x52,  // At. ...R
                        /* 4970 */  0x10, 0x0D, 0x95, 0x00, 0xD1, 0xC4, 0x40, 0x54,  // ......@T
                        /* 4978 */  0x6B, 0x77, 0x20, 0xA6, 0x1C, 0x44, 0x40, 0xD6,  // kw ..D@.
                        /* 4980 */  0x5C, 0x1E, 0x88, 0x25, 0x00, 0x11, 0x90, 0xFF,  // \..%....
                        /* 4988 */  0xFF, 0xD9, 0x81, 0xA8, 0x92, 0xF4, 0x07, 0x04,  // ........
                        /* 4990 */  0x1A, 0x1F, 0x88, 0xA9, 0x03, 0x11, 0x90, 0x73,  // .......s
                        /* 4998 */  0x01, 0xD1, 0x94, 0x40, 0x34, 0x65, 0xFE, 0x63,  // ...@4e.c
                        /* 49A0 */  0x04, 0x05, 0x11, 0x90, 0xF5, 0x1E, 0xE8, 0x04,  // ........
                        /* 49A8 */  0x64, 0xF5, 0x20, 0x02, 0x72, 0x72, 0x20, 0xFA,  // d. .rr .
                        /* 49B0 */  0xC7, 0xFA, 0xFA, 0x7A, 0x4C, 0x20, 0x20, 0x02,  // ...zL  .
                        /* 49B8 */  0x72, 0x22, 0x20, 0x9A, 0x48, 0x01, 0x10, 0xCB,  // r" .H...
                        /* 49C0 */  0x07, 0xA2, 0x43, 0x03, 0x91, 0x00, 0xC4, 0xB2,  // ..C.....
                        /* 49C8 */  0x82, 0xE8, 0x40, 0x40, 0x34, 0x00, 0xB1, 0xDC,  // ..@@4...
                        /* 49D0 */  0x20, 0x1A, 0x08, 0xF1, 0x00, 0xC4, 0xD4, 0x83,  //  .......
                        /* 49D8 */  0x08, 0xC8, 0xB9, 0x81, 0xA8, 0x0A, 0x11, 0x40,  // .......@
                        /* 49E0 */  0x4C, 0x83, 0x0A, 0x20, 0xA6, 0x08, 0x44, 0x40,  // L.. ..D@
                        /* 49E8 */  0x4E, 0x02, 0x44, 0x73, 0x01, 0x51, 0x45, 0x2E,  // N.Ds.QE.
                        /* 49F0 */  0x80, 0x98, 0x3E, 0x10, 0x1D, 0x22, 0x88, 0x0D,  // ..>.."..
                        /* 49F8 */  0x20, 0xA6, 0x17, 0x44, 0x07, 0x0C, 0xE2, 0x03,  //  ..D....
                        /* 4A00 */  0x88, 0x25, 0x01, 0xD1, 0xA1, 0x80, 0x18, 0x01,  // .%......
                        /* 4A08 */  0x62, 0xC9, 0x40, 0x04, 0x44, 0x9C, 0x00, 0x51,  // b.@.D..Q
                        /* 4A10 */  0x10, 0x01, 0x11, 0x2B, 0x40, 0x14, 0x44, 0x40,  // ...+@.D@
                        /* 4A18 */  0xC4, 0x0B, 0x10, 0x05, 0xD1, 0x60, 0x89, 0x99,  // .....`..
                        /* 4A20 */  0xC1, 0x52, 0x10, 0x1D, 0x39, 0x88, 0x1A, 0x20,  // .R..9.. 
                        /* 4A28 */  0xA6, 0x0C, 0x44, 0x07, 0x04, 0x02, 0x44, 0x13,  // ..D...D.
                        /* 4A30 */  0x02, 0x51, 0x6D, 0x6E, 0x80, 0x98, 0x52, 0x10,  // .Qmn..R.
                        /* 4A38 */  0x1D, 0x08, 0x88, 0x1D, 0x20, 0xA6, 0x0E, 0x44,  // .... ..D
                        /* 4A40 */  0x07, 0x02, 0x02, 0x44, 0x53, 0x02, 0x51, 0x7D,  // ...DS.Q}
                        /* 4A48 */  0x7A, 0x80, 0x98, 0x5A, 0x10, 0x01, 0x39, 0x27,  // z..Z..9'
                        /* 4A50 */  0x10, 0x4D, 0x0D, 0x44, 0x55, 0x29, 0x1A, 0x0A,  // .M.DU)..
                        /* 4A58 */  0x05, 0xA1, 0x09, 0x1C, 0x81, 0x30, 0xC5, 0x92,  // .....0..
                        /* 4A60 */  0x40, 0x98, 0x72, 0x4B, 0x43, 0xA3, 0x9A, 0x40,  // @.rKC..@
                        /* 4A68 */  0xD8, 0xFF, 0x5F, 0xB7, 0x29, 0x10, 0x96, 0x1A,  // .._.)...
                        /* 4A70 */  0x84, 0x66, 0x54, 0x75, 0x2C, 0xA0, 0xAE, 0x40,  // .fTu,..@
                        /* 4A78 */  0x58, 0x72, 0x59, 0x20, 0x2C, 0xAD, 0x2D, 0x10,  // XrY ,.-.
                        /* 4A80 */  0x96, 0x55, 0xD7, 0x31, 0x80, 0x0A, 0x1B, 0x20,  // .U.1... 
                        /* 4A88 */  0x35, 0x06, 0xC2, 0x54, 0x2A, 0x3B, 0x1C, 0x50,  // 5..T*;.P
                        /* 4A90 */  0x67, 0x43, 0xA1, 0xD2, 0x40, 0x98, 0x6A, 0x6B,  // gC..@.jk
                        /* 4A98 */  0x43, 0xA2, 0xDA, 0x40, 0x58, 0x1A, 0x6F, 0x20,  // C..@X.o 
                        /* 4AA0 */  0x2C, 0x99, 0xB8, 0x21, 0x51, 0x77, 0x20, 0x4C,  // ,..!Qw L
                        /* 4AA8 */  0x81, 0xBC, 0x43, 0x01, 0xB5, 0x77, 0x28, 0xA0,  // ..C..w(.
                        /* 4AB0 */  0x20, 0x3A, 0x5C, 0x10, 0x7F, 0x40, 0x2C, 0x01,  //  :\..@,.
                        /* 4AB8 */  0x88, 0x80, 0x2C, 0xD4, 0x20, 0x10, 0x53, 0x0D,  // ..,. .S.
                        /* 4AC0 */  0x22, 0x20, 0xA2, 0x10, 0x88, 0xC9, 0x06, 0x11,  // " ......
                        /* 4AC8 */  0x90, 0x85, 0x39, 0x04, 0x62, 0x32, 0x41, 0x74,  // ..9.b2At
                        /* 4AD0 */  0x2C, 0x22, 0x16, 0x81, 0x98, 0x68, 0x10, 0x1D,  // ,"...h..
                        /* 4AD8 */  0xB1, 0x88, 0x47, 0x20, 0xA6, 0x10, 0x44, 0x47,  // ..G ..DG
                        /* 4AE0 */  0x35, 0x02, 0x44, 0x73, 0x02, 0xD1, 0x60, 0x22,  // 5.Ds..`"
                        /* 4AE8 */  0x81, 0x58, 0x4C, 0x10, 0x01, 0x39, 0x84, 0x49,  // .XL..9.I
                        /* 4AF0 */  0x20, 0x16, 0x09, 0x44, 0x47, 0x42, 0xE2, 0x12,  //  ..DGB..
                        /* 4AF8 */  0x88, 0x05, 0x02, 0xD1, 0x51, 0x8B, 0xD8, 0x04,  // ....Q...
                        /* 4B00 */  0x62, 0x19, 0x40, 0x04, 0x44, 0x74, 0x02, 0xB1,  // b.@.Dt..
                        /* 4B08 */  0x10, 0x20, 0x02, 0xB2, 0x7A, 0xA1, 0x40, 0x2C,  // . ..z.@,
                        /* 4B10 */  0x0A, 0x88, 0x80, 0x9C, 0xC3, 0x28, 0x10, 0x4B,  // .....(.K
                        /* 4B18 */  0x05, 0xA2, 0x03, 0x06, 0xB1, 0x3A, 0x70, 0x0A,  // .....:p.
                        /* 4B20 */  0x42, 0x15, 0x6B, 0x05, 0x61, 0x1A, 0xBD, 0x82,  // B.k.a...
                        /* 4B28 */  0x30, 0x4D, 0x62, 0x8F, 0x0D, 0xD4, 0x2C, 0x08,  // 0Mb...,.
                        /* 4B30 */  0xCB, 0x0F, 0x42, 0x33, 0xAB, 0x3D, 0x30, 0x50,  // ..B3.=0P
                        /* 4B38 */  0xB7, 0x20, 0x2C, 0x9F, 0x5C, 0x10, 0x96, 0xCA,  // . ,.\...
                        /* 4B40 */  0xEE, 0x51, 0x84, 0xEA, 0x3D, 0x58, 0x50, 0xBF,  // .Q..=XP.
                        /* 4B48 */  0x43, 0xA2, 0x8A, 0x41, 0x58, 0x76, 0x10, 0x2A,  // C..AXv.*
                        /* 4B50 */  0xF8, 0xF5, 0xAD, 0x21, 0xF9, 0xFF, 0xAF, 0x1E,  // ...!....
                        /* 4B58 */  0x44, 0x47, 0x00, 0x62, 0xF9, 0x08, 0x40, 0x41,  // DG.b..@A
                        /* 4B60 */  0x74, 0xAC, 0x24, 0x9E, 0x81, 0x98, 0x54, 0x10,  // t.$...T.
                        /* 4B68 */  0x01, 0x39, 0x24, 0x10, 0x8D, 0x0C, 0x44, 0xA3,  // .9$...D.
                        /* 4B70 */  0x9B, 0x06, 0x62, 0x42, 0x54, 0x0F, 0x9B, 0x82,  // ..bBT...
                        /* 4B78 */  0x68, 0xD8, 0x04, 0x88, 0x8A, 0x73, 0x3D, 0x00,  // h....s=.
                        /* 4B80 */  0x0A, 0xA2, 0x83, 0x24, 0x01, 0xA2, 0x22, 0x64,  // ...$.."d
                        /* 4B88 */  0x03, 0x31, 0x09, 0xBA, 0x81, 0x98, 0x20, 0x10,  // .1.... .
                        /* 4B90 */  0x1D, 0x24, 0x89, 0x70, 0x20, 0x26, 0x18, 0x44,  // .$.p &.D
                        /* 4B98 */  0x40, 0x8E, 0x0A, 0x44, 0x83, 0x03, 0xD1, 0x10,  // @..D....
                        /* 4BA0 */  0xC6, 0x8F, 0x04, 0x14, 0x44, 0x87, 0x33, 0xA2,  // ....D.3.
                        /* 4BA8 */  0x1C, 0x88, 0x89, 0x05, 0xD1, 0x00, 0x89, 0xF4,  // ........
                        /* 4BB0 */  0x01, 0x52, 0x10, 0x1D, 0xFC, 0x88, 0x77, 0x10,  // .R....w.
                        /* 4BB8 */  0x26, 0x50, 0x3C, 0x08, 0x93, 0x63, 0x1E, 0x84,  // &P<..c..
                        /* 4BC0 */  0x2D, 0x36, 0x08, 0x8B, 0x0C, 0x42, 0x23, 0xBA,  // -6...B#.
                        /* 4BC8 */  0x07, 0x61, 0xF1, 0xE4, 0x83, 0x50, 0xFB, 0x20,  // .a...P. 
                        /* 4BD0 */  0x54, 0x3F, 0x08, 0xF5, 0x0F, 0xC2, 0xC2, 0x05,  // T?......
                        /* 4BD8 */  0x00, 0x61, 0x91, 0x0A, 0x80, 0xB0, 0x38, 0x09,  // .a....8.
                        /* 4BE0 */  0x40, 0x58, 0x90, 0x06, 0x20, 0x4C, 0x7E, 0x84,  // @X.. L~.
                        /* 4BE8 */  0x63, 0x00, 0xED, 0x00, 0xC2, 0xE2, 0x82, 0x50,  // c......P
                        /* 4BF0 */  0x8D, 0x25, 0x86, 0x49, 0x41, 0x74, 0xF8, 0x20,  // .%.IAt. 
                        /* 4BF8 */  0x29, 0x0E, 0x2B, 0x14, 0x44, 0xC7, 0x04, 0x12,  // ).+.D...
                        /* 4C00 */  0xE3, 0xB0, 0x42, 0x41, 0x74, 0x58, 0x21, 0x40,  // ..BAtX!@
                        /* 4C08 */  0x34, 0x25, 0x10, 0xCD, 0x98, 0x03, 0x88, 0x25,  // 4%.....%
                        /* 4C10 */  0x06, 0xD1, 0x21, 0x89, 0xF4, 0x00, 0x62, 0xCA,  // ..!...b.
                        /* 4C18 */  0x41, 0x74, 0xFC, 0x20, 0x41, 0x80, 0x98, 0x1E,  // At. A...
                        /* 4C20 */  0x10, 0x0D, 0x80, 0x00, 0xD1, 0x94, 0x40, 0x3C,  // ......@<
                        /* 4C28 */  0x09, 0x10, 0x05, 0xD1, 0x41, 0x88, 0x44, 0x39,  // ....A.D9
                        /* 4C30 */  0x08, 0x51, 0x10, 0x01, 0xF9, 0xFF, 0xAF, 0xB8,  // .Q......
                        /* 4C38 */  0x0A, 0x10, 0xD3, 0x0F, 0xA2, 0xE3, 0x1A, 0xC9,  // ........
                        /* 4C40 */  0x02, 0xC4, 0x54, 0x81, 0xE8, 0xC8, 0x42, 0x80,  // ..T...B.
                        /* 4C48 */  0x68, 0x56, 0x20, 0x1E, 0x06, 0x88, 0x82, 0x08,  // hV .....
                        /* 4C50 */  0xC8, 0x6A, 0xE2, 0x1C, 0x25, 0x28, 0x08, 0x4D,  // .j..%(.M
                        /* 4C58 */  0x53, 0xE7, 0xA0, 0x42, 0xF3, 0x1C, 0x2C, 0x68,  // S..B..,h
                        /* 4C60 */  0x1F, 0x10, 0x96, 0x3E, 0xD0, 0x60, 0x69, 0xA2,  // ...>.`i.
                        /* 4C68 */  0x23, 0x11, 0x6D, 0x74, 0xAC, 0xA0, 0x91, 0x0E,  // #.mt....
                        /* 4C70 */  0x17, 0xB4, 0xD2, 0x60, 0x69, 0xA6, 0xA3, 0x06,  // ...`i...
                        /* 4C78 */  0xED, 0x74, 0xE0, 0xA0, 0xA5, 0x40, 0x98, 0xCE,  // .t...@..
                        /* 4C80 */  0x54, 0x07, 0x17, 0xDA, 0x0A, 0x98, 0xC6, 0x02,  // T.......
                        /* 4C88 */  0x61, 0x29, 0x6B, 0x1D, 0x6D, 0x68, 0xAE, 0x41,  // a)k.mh.A
                        /* 4C90 */  0xD1, 0x60, 0x03, 0xA1, 0xC5, 0x0E, 0x3A, 0x34,  // .`....:4
                        /* 4C98 */  0xD9, 0xB1, 0x89, 0x36, 0x03, 0xA2, 0xD9, 0x0E,  // ...6....
                        /* 4CA0 */  0x3B, 0x14, 0x84, 0xCA, 0x0D, 0x37, 0x48, 0xA6,  // ;....7H.
                        /* 4CA8 */  0x1D, 0x44, 0x87, 0x17, 0x52, 0xEE, 0xF0, 0x42,  // .D..R..B
                        /* 4CB0 */  0x41, 0x74, 0xC4, 0x20, 0xED, 0x8E, 0x18, 0x14,  // At. ....
                        /* 4CB8 */  0x44, 0x47, 0x0E, 0x02, 0x44, 0x23, 0x03, 0xD1,  // DG..D#..
                        /* 4CC0 */  0xB0, 0xF5, 0x80, 0x58, 0x74, 0x10, 0x1D, 0x75,  // ...Xt..u
                        /* 4CC8 */  0x49, 0xC1, 0x83, 0x03, 0x05, 0xA1, 0x32, 0x1A,  // I.....2.
                        /* 4CD0 */  0x02, 0x32, 0x51, 0x20, 0x02, 0x23, 0x40, 0x34,  // .2Q .#@4
                        /* 4CD8 */  0x1C, 0x10, 0x0D, 0x51, 0xF1, 0x98, 0x41, 0x41,  // ...Q..AA
                        /* 4CE0 */  0x74, 0xD4, 0x25, 0x1D, 0x81, 0x58, 0x28, 0x10,  // t.%..X(.
                        /* 4CE8 */  0x1D, 0x63, 0x49, 0x49, 0x20, 0x16, 0x0C, 0x44,  // .cII ..D
                        /* 4CF0 */  0x40, 0x0E, 0xD5, 0x12, 0x88, 0x45, 0x04, 0xD1,  // @....E..
                        /* 4CF8 */  0xD1, 0x83, 0xD4, 0x3C, 0x7A, 0x50, 0x10, 0x1D,  // ...<zP..
                        /* 4D00 */  0x6D, 0x49, 0x50, 0x20, 0x26, 0x0B, 0x44, 0x47,  // mIP &.DG
                        /* 4D08 */  0x56, 0x92, 0x14, 0x88, 0x49, 0x07, 0xD1, 0xD1,  // V...I...
                        /* 4D10 */  0x98, 0x54, 0x3D, 0x80, 0xD0, 0xAC, 0x20, 0xEC,  // .T=... .
                        /* 4D18 */  0xFF, 0x2F, 0xAB, 0xEB, 0xF1, 0x87, 0x86, 0x05,  // ./......
                        /* 4D20 */  0x61, 0x92, 0xCA, 0x82, 0xD0, 0xB4, 0x20, 0x4C,  // a..... L
                        /* 4D28 */  0x4C, 0x5B, 0x10, 0x1A, 0x77, 0xD0, 0xB4, 0x2E,  // L[..w...
                        /* 4D30 */  0x08, 0x93, 0x12, 0xF8, 0xC0, 0x41, 0x41, 0xA8,  // .....AA.
                        /* 4D38 */  0xA8, 0xC4, 0xC7, 0x20, 0x0A, 0xA2, 0x41, 0x90,  // ... ..A.
                        /* 4D40 */  0xC6, 0x47, 0x22, 0x0A, 0xA2, 0xC3, 0x08, 0x01,  // .G".....
                        /* 4D48 */  0xA2, 0x24, 0x8F, 0x24, 0x34, 0x33, 0x10, 0x93,  // .$.$43..
                        /* 4D50 */  0x03, 0xA2, 0x61, 0x12, 0x20, 0x1A, 0x11, 0x88,  // ..a. ...
                        /* 4D58 */  0xCA, 0xED, 0x0C, 0xC4, 0xC4, 0x83, 0xE8, 0x38,  // .......8
                        /* 4D60 */  0x42, 0x52, 0x1F, 0x04, 0x68, 0xEB, 0x03, 0x0C,  // BR..h...
                        /* 4D68 */  0x8D, 0x0D, 0xC2, 0xFE, 0xFF                     // .....
                    })
                }
            }

            Device (HKDV)
            {
                Name (_HID, "LHK2019")  // _HID: Hardware ID
                Name (_UID, Zero)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (0x0F)
                }
            }

            Device (WMIU)
            {
                Name (_HID, "PNP0C14" /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
                Name (_UID, "LSK20")  // _UID: Unique ID
                Name (_WDG, Buffer (0x3C)
                {
                    /* 0000 */  0x74, 0x09, 0x6C, 0xCE, 0x07, 0x04, 0x50, 0x4F,  // t.l...PO
                    /* 0008 */  0x88, 0xBA, 0x4F, 0xC3, 0xB6, 0x55, 0x9A, 0xD8,  // ..O..U..
                    /* 0010 */  0x53, 0x4B, 0x01, 0x02, 0x0C, 0xDE, 0xC0, 0x8F,  // SK......
                    /* 0018 */  0xE4, 0xB4, 0xFD, 0x43, 0xB0, 0xF3, 0x88, 0x71,  // ...C...q
                    /* 0020 */  0x71, 0x1C, 0x12, 0x94, 0xD0, 0x00, 0x01, 0x08,  // q.......
                    /* 0028 */  0x21, 0x12, 0x90, 0x05, 0x66, 0xD5, 0xD1, 0x11,  // !...f...
                    /* 0030 */  0xB2, 0xF0, 0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10,  // ......).
                    /* 0038 */  0x44, 0x41, 0x01, 0x00                           // DA..
                })
                Method (WMSK, 3, NotSerialized)
                {
                    If ((Arg1 == One))
                    {
                        If ((ToInteger (Arg2) == One))
                        {
                            Return (0x03)
                        }
                        ElseIf ((ToInteger (Arg2) == 0x02))
                        {
                            Return (Zero)
                        }
                        ElseIf ((ToInteger (Arg2) == 0x03))
                        {
                            Return (0x02)
                        }
                        ElseIf ((ToInteger (Arg2) == 0x04))
                        {
                            Return (0x02)
                        }
                        ElseIf ((ToInteger (Arg2) == 0x05))
                        {
                            Return (Zero)
                        }
                        ElseIf ((ToInteger (Arg2) == 0x06))
                        {
                            Return (Zero)
                        }
                        ElseIf ((ToInteger (Arg2) == 0x07))
                        {
                            Return (Zero)
                        }
                        ElseIf ((ToInteger (Arg2) == 0x08))
                        {
                            Return (Zero)
                        }
                        ElseIf ((ToInteger (Arg2) == 0x09))
                        {
                            Return (Zero)
                        }
                        ElseIf ((ToInteger (Arg2) == 0x0A))
                        {
                            Return (Zero)
                        }
                        ElseIf ((ToInteger (Arg2) == 0x0B))
                        {
                            Return (Zero)
                        }
                        ElseIf ((ToInteger (Arg2) == 0x0C))
                        {
                            If ((CNFG == One))
                            {
                                Return (0x15)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }
                        ElseIf ((ToInteger (Arg2) == 0x0D))
                        {
                            Return (Zero)
                        }
                        ElseIf ((ToInteger (Arg2) == 0x0E))
                        {
                            Return (0x15)
                        }
                        ElseIf ((ToInteger (Arg2) == 0x0F))
                        {
                            Return (0x15)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Method (_WED, 1, NotSerialized)  // _Wxx: Wake Event, xx=0x00-0xFF
                {
                    If ((Arg0 == 0xD0))
                    {
                        If ((LSKD == One))
                        {
                            Return (One)
                        }
                        ElseIf ((LSKD == 0x02))
                        {
                            Return (0x05)
                        }
                        ElseIf ((LSKD == 0x03))
                        {
                            Return (0x06)
                        }
                        ElseIf ((LSKD == 0x04))
                        {
                            If ((^^PC00.LPCB.EC0.HKDB == Zero))
                            {
                                Return (0x02)
                            }
                            Else
                            {
                                Return (0x03)
                            }
                        }
                        ElseIf ((LSKD == 0x05))
                        {
                            Return (0x04)
                        }
                        ElseIf ((LSKD == 0x06))
                        {
                            Return (0x07)
                        }
                        ElseIf ((LSKD == 0x07))
                        {
                            Return (0x08)
                        }
                        ElseIf ((LSKD == 0x08))
                        {
                            Return (0x09)
                        }
                        ElseIf ((LSKD == 0x09))
                        {
                            Return (0x0A)
                        }
                        ElseIf ((LSKD == 0x0A))
                        {
                            Return (0x0B)
                        }
                        ElseIf ((LSKD == 0x0B))
                        {
                            Return (0x0C)
                        }
                        ElseIf ((LSKD == 0x0C))
                        {
                            Return (0x0D)
                        }
                        ElseIf ((LSKD == 0x0D))
                        {
                            Return (0x0E)
                        }
                        ElseIf ((LSKD == 0x0E))
                        {
                            Return (0x0F)
                        }
                        ElseIf ((LSKD == 0x0F))
                        {
                            If ((PANT & 0x20))
                            {
                                Return (0x10)
                            }
                        }
                        ElseIf ((LSKD == 0x13))
                        {
                            If ((CNFG == One))
                            {
                                Return (0x14)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }
                        ElseIf ((LSKD == 0x14))
                        {
                            If ((CNFG == One))
                            {
                                Return (0x15)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }
                        ElseIf ((LSKD == 0x15))
                        {
                            Return (0x16)
                        }
                        ElseIf ((LSKD == 0x16))
                        {
                            Return (0x17)
                        }
                        ElseIf ((LSKD == 0x17))
                        {
                            Return (0x18)
                        }
                        ElseIf ((LSKD == 0x18))
                        {
                            Return (0x19)
                        }
                        ElseIf ((LSKD == 0x19))
                        {
                            Return (0x1A)
                        }
                        ElseIf ((LSKD == 0x25))
                        {
                            Return (0x26)
                        }
                        ElseIf ((LSKD == 0x1A))
                        {
                            Return (0x1B)
                        }
                        ElseIf ((LSKD == 0x1B))
                        {
                            Return (0x1C)
                        }
                        ElseIf ((LSKD == 0x1C))
                        {
                            Return (0x1D)
                        }
                        ElseIf ((LSKD == 0x1D))
                        {
                            Return (0x1E)
                        }
                        ElseIf ((LSKD == 0x1E))
                        {
                            Return (0x1F)
                        }
                        ElseIf ((LSKD == 0x1F))
                        {
                            Return (0x20)
                        }
                        ElseIf ((LSKD == 0x20))
                        {
                            Return (0x21)
                        }
                        ElseIf ((LSKD == 0x21))
                        {
                            Return (0x22)
                        }
                        ElseIf ((LSKD == 0x22))
                        {
                            Return (0x23)
                        }
                        ElseIf ((LSKD == 0x23))
                        {
                            Return (0x24)
                        }
                        ElseIf ((LSKD == 0x24))
                        {
                            Return (0x25)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Name (WQDA, Buffer (0x0418)
                {
                    /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                    /* 0008 */  0x08, 0x04, 0x00, 0x00, 0x5E, 0x0C, 0x00, 0x00,  // ....^...
                    /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                    /* 0018 */  0xA8, 0x40, 0x86, 0x00, 0x01, 0x06, 0x18, 0x42,  // .@.....B
                    /* 0020 */  0x10, 0x05, 0x10, 0x8A, 0x28, 0x81, 0x42, 0x04,  // ....(.B.
                    /* 0028 */  0x8A, 0x40, 0xA4, 0x50, 0x30, 0x28, 0x0D, 0x20,  // .@.P0(. 
                    /* 0030 */  0x92, 0x03, 0x21, 0x17, 0x4C, 0x4C, 0x80, 0x08,  // ..!.LL..
                    /* 0038 */  0x08, 0x79, 0x15, 0x60, 0x53, 0x80, 0x49, 0x10,  // .y.`S.I.
                    /* 0040 */  0xF5, 0xEF, 0x0F, 0x51, 0x12, 0x1C, 0x4A, 0x08,  // ...Q..J.
                    /* 0048 */  0x84, 0x24, 0x0A, 0x30, 0x2F, 0x40, 0xB7, 0x00,  // .$.0/@..
                    /* 0050 */  0xC3, 0x02, 0x6C, 0x0B, 0x30, 0x2D, 0xC0, 0x31,  // ..l.0-.1
                    /* 0058 */  0x24, 0x95, 0x06, 0x4E, 0x09, 0x2C, 0x05, 0x42,  // $..N.,.B
                    /* 0060 */  0x42, 0x05, 0x28, 0x17, 0xE0, 0x5B, 0x80, 0x76,  // B.(..[.v
                    /* 0068 */  0x44, 0x49, 0x16, 0x60, 0x19, 0x46, 0x04, 0x1E,  // DI.`.F..
                    /* 0070 */  0x45, 0x64, 0xA3, 0x71, 0x68, 0xEC, 0x30, 0x2C,  // Ed.qh.0,
                    /* 0078 */  0x13, 0x4C, 0x83, 0x38, 0x8C, 0xB2, 0x91, 0x45,  // .L.8...E
                    /* 0080 */  0xE0, 0x09, 0x75, 0x2A, 0x40, 0xAE, 0x00, 0x61,  // ..u*@..a
                    /* 0088 */  0x02, 0xC4, 0xA3, 0x0A, 0xA3, 0x39, 0x28, 0x22,  // .....9("
                    /* 0090 */  0x1A, 0x1A, 0x25, 0x66, 0x4C, 0x04, 0xB6, 0x73,  // ..%fL..s
                    /* 0098 */  0x6C, 0x8D, 0xE2, 0x34, 0x0A, 0x17, 0x20, 0x1D,  // l..4.. .
                    /* 00A0 */  0x43, 0x23, 0x38, 0xAE, 0x63, 0x30, 0x58, 0x90,  // C#8.c0X.
                    /* 00A8 */  0x43, 0x31, 0x44, 0x41, 0x02, 0xAC, 0xA2, 0x91,  // C1DA....
                    /* 00B0 */  0x61, 0x84, 0x08, 0x72, 0x7C, 0x81, 0xBA, 0xC4,  // a..r|...
                    /* 00B8 */  0x13, 0x88, 0xC7, 0xE4, 0x01, 0x18, 0x21, 0x4C,  // ......!L
                    /* 00C0 */  0x8B, 0xB0, 0x82, 0x36, 0x62, 0x02, 0xC3, 0x1E,  // ...6b...
                    /* 00C8 */  0x0A, 0xE6, 0x07, 0x20, 0x01, 0x9E, 0x05, 0x58,  // ... ...X
                    /* 00D0 */  0x1F, 0x23, 0x21, 0xB0, 0x7B, 0x01, 0xE2, 0x04,  // .#!.{...
                    /* 00D8 */  0x68, 0x1E, 0x8D, 0x46, 0x75, 0x9C, 0xC6, 0x88,  // h..Fu...
                    /* 00E0 */  0xD2, 0x96, 0x00, 0xC5, 0x23, 0x13, 0x4C, 0x88,  // ....#.L.
                    /* 00E8 */  0x28, 0x21, 0x3A, 0xC3, 0x13, 0x5A, 0x28, 0xC3,  // (!:..Z(.
                    /* 00F0 */  0x45, 0x89, 0x13, 0x25, 0x70, 0x84, 0xDE, 0x04,  // E..%p...
                    /* 00F8 */  0x18, 0x83, 0x20, 0x08, 0x81, 0x43, 0x54, 0x36,  // .. ..CT6
                    /* 0100 */  0x48, 0xA1, 0xB6, 0x3F, 0x08, 0x22, 0xC9, 0xC1,  // H..?."..
                    /* 0108 */  0x89, 0x80, 0x45, 0x1A, 0x0D, 0xEA, 0x14, 0x90,  // ..E.....
                    /* 0110 */  0xE0, 0xA9, 0xC0, 0x27, 0x82, 0x93, 0x3A, 0xAF,  // ...'..:.
                    /* 0118 */  0xA3, 0x3A, 0xEB, 0x20, 0xC1, 0x4F, 0xA4, 0xCE,  // .:. .O..
                    /* 0120 */  0xE3, 0x00, 0x19, 0x38, 0x9B, 0x9A, 0xD9, 0x75,  // ...8...u
                    /* 0128 */  0x3E, 0x80, 0xE0, 0x1A, 0x50, 0xFF, 0xFF, 0x79,  // >...P..y
                    /* 0130 */  0x3E, 0x16, 0xB0, 0x61, 0x86, 0xC3, 0x0C, 0xD1,  // >..a....
                    /* 0138 */  0x83, 0xF5, 0x04, 0x0E, 0x91, 0x01, 0x7A, 0x62,  // ......zb
                    /* 0140 */  0x4F, 0x04, 0x58, 0x87, 0x93, 0xD1, 0x71, 0xA0,  // O.X...q.
                    /* 0148 */  0x54, 0x01, 0x66, 0xC7, 0xAD, 0x49, 0x27, 0x38,  // T.f..I'8
                    /* 0150 */  0x1E, 0x9F, 0x03, 0x3C, 0x9F, 0x13, 0x4E, 0x60,  // ...<..N`
                    /* 0158 */  0xF9, 0x83, 0x40, 0x8D, 0xCC, 0xD0, 0x36, 0x38,  // ..@...68
                    /* 0160 */  0x2D, 0x1D, 0x04, 0x7C, 0x00, 0x30, 0x81, 0xC5,  // -..|.0..
                    /* 0168 */  0x1E, 0x26, 0xE8, 0x78, 0xC0, 0x7F, 0x00, 0x78,  // .&.x...x
                    /* 0170 */  0x3E, 0x88, 0xF0, 0xCE, 0xE0, 0xF9, 0x7A, 0x10,  // >.....z.
                    /* 0178 */  0x3A, 0x5B, 0xC8, 0xC9, 0x78, 0x50, 0xC7, 0x0A,  // :[..xP..
                    /* 0180 */  0x5F, 0x10, 0x30, 0xE0, 0x47, 0xFB, 0xC2, 0x10,  // _.0.G...
                    /* 0188 */  0xE6, 0xA5, 0x21, 0xEE, 0xC1, 0x5B, 0xEB, 0x15,  // ..!..[..
                    /* 0190 */  0x82, 0x10, 0x38, 0x34, 0x84, 0xFE, 0x1A, 0x16,  // ..84....
                    /* 0198 */  0x35, 0x78, 0x7A, 0xB2, 0xE0, 0x87, 0x0A, 0x06,  // 5xz.....
                    /* 01A0 */  0xCC, 0xC7, 0x73, 0x5A, 0x3E, 0x7B, 0x78, 0x78,  // ..sZ>{xx
                    /* 01A8 */  0xF0, 0x4F, 0x14, 0xC0, 0xE2, 0x3C, 0x81, 0xBB,  // .O...<..
                    /* 01B0 */  0x1C, 0xB0, 0x13, 0x05, 0x7E, 0xE0, 0xF0, 0x2F,  // ....~../
                    /* 01B8 */  0x15, 0x86, 0xF5, 0x45, 0xE2, 0x1D, 0x22, 0x81,  // ...E..".
                    /* 01C0 */  0xB1, 0x02, 0x63, 0xFE, 0xFF, 0xC0, 0x1E, 0xB9,  // ..c.....
                    /* 01C8 */  0xFD, 0x0A, 0x40, 0x08, 0x7E, 0x4A, 0x4F, 0x06,  // ..@.~JO.
                    /* 01D0 */  0xCF, 0x20, 0x11, 0x8E, 0xCA, 0xE8, 0x4F, 0x10,  // . ....O.
                    /* 01D8 */  0x7D, 0xCE, 0x5B, 0x10, 0xD1, 0x8E, 0xEA, 0x1C,  // }.[.....
                    /* 01E0 */  0x8E, 0x22, 0x54, 0x88, 0xB3, 0x30, 0x50, 0xB8,  // ."T..0P.
                    /* 01E8 */  0x60, 0x01, 0x8D, 0x93, 0xC0, 0x22, 0x87, 0x8A,  // `...."..
                    /* 01F0 */  0x1E, 0x04, 0x07, 0x3C, 0x87, 0x43, 0x0A, 0x7A,  // ...<.C.z
                    /* 01F8 */  0x10, 0x27, 0x13, 0xE5, 0x3C, 0x8E, 0xC9, 0xA7,  // .'..<...
                    /* 0200 */  0x14, 0x23, 0x1C, 0xD3, 0xC3, 0xC9, 0x53, 0x87,  // .#....S.
                    /* 0208 */  0x6F, 0x1B, 0x07, 0x7F, 0x5E, 0xC7, 0x7A, 0x88,  // o...^.z.
                    /* 0210 */  0x6C, 0xE0, 0x87, 0x80, 0x39, 0x5B, 0x78, 0x08,  // l...9[x.
                    /* 0218 */  0x7C, 0x00, 0x07, 0x74, 0x8A, 0x56, 0x3A, 0x31,  // |..t.V:1
                    /* 0220 */  0xE4, 0x79, 0x86, 0x8F, 0x19, 0x3B, 0x00, 0xAE,  // .y...;..
                    /* 0228 */  0xCA, 0x03, 0x08, 0x13, 0xFF, 0x34, 0x90, 0xB4,  // .....4..
                    /* 0230 */  0x37, 0x02, 0x85, 0xF1, 0x09, 0x07, 0x70, 0x05,  // 7.....p.
                    /* 0238 */  0xF4, 0x00, 0x01, 0x9E, 0xB3, 0x01, 0x5C, 0xEC,  // ......\.
                    /* 0240 */  0x93, 0x8F, 0x12, 0xE2, 0xED, 0x21, 0xFA, 0xB9,  // .....!..
                    /* 0248 */  0x9C, 0xCC, 0x2B, 0x84, 0x8F, 0x37, 0x98, 0xFF,  // ..+..7..
                    /* 0250 */  0xFF, 0xF1, 0x06, 0xD6, 0x05, 0xC6, 0xDA, 0xAE,  // ........
                    /* 0258 */  0x37, 0x64, 0x4A, 0xCF, 0x34, 0xEF, 0x36, 0x46,  // 7dJ.4.6F
                    /* 0260 */  0x39, 0x2C, 0xC3, 0x3C, 0xDE, 0xF8, 0x76, 0xD0,  // 9,.<..v.
                    /* 0268 */  0x1A, 0x8C, 0xEE, 0x36, 0xEC, 0x3C, 0x72, 0x12,  // ...6.<r.
                    /* 0270 */  0xA1, 0x18, 0xEE, 0x83, 0x44, 0x9C, 0xD8, 0xE1,  // ....D...
                    /* 0278 */  0x22, 0xC4, 0x7E, 0xE4, 0x30, 0xDE, 0xE3, 0x0D,  // ".~.0...
                    /* 0280 */  0x8B, 0x77, 0x1C, 0xD0, 0x31, 0xC4, 0xC7, 0x1B,  // .w..1...
                    /* 0288 */  0x80, 0x1F, 0xA7, 0x83, 0xC7, 0x12, 0xF0, 0x9F,  // ........
                    /* 0290 */  0x15, 0xF8, 0xA9, 0x04, 0x4C, 0xFF, 0xFF, 0x53,  // ....L..S
                    /* 0298 */  0x09, 0xFC, 0xC4, 0x0F, 0x02, 0x9D, 0x75, 0x9C,  // ......u.
                    /* 02A0 */  0x16, 0x44, 0x36, 0x16, 0x6B, 0x02, 0xC9, 0x82,  // .D6.k...
                    /* 02A8 */  0x50, 0xCE, 0x05, 0xCB, 0x23, 0xAE, 0x30, 0x8F,  // P...#.0.
                    /* 02B0 */  0x27, 0xF2, 0x39, 0x44, 0x7E, 0xA9, 0x88, 0x70,  // '.9D~..p
                    /* 02B8 */  0x06, 0xC7, 0x10, 0xE9, 0xB4, 0x62, 0x1C, 0xD8,  // .....b..
                    /* 02C0 */  0x2B, 0x87, 0xEF, 0x01, 0x4F, 0x16, 0x3C, 0x11,  // +...O.<.
                    /* 02C8 */  0xB0, 0x0E, 0x72, 0x3C, 0x0B, 0x85, 0x94, 0xD1,  // ..r<....
                    /* 02D0 */  0x68, 0x54, 0x1E, 0x84, 0xB5, 0xC0, 0x08, 0xCE,  // hT......
                    /* 02D8 */  0x20, 0x06, 0x74, 0x50, 0x08, 0x1D, 0x90, 0x70,  //  .tP...p
                    /* 02E0 */  0x4A, 0x40, 0x34, 0xAD, 0xF7, 0x21, 0x76, 0xEA,  // J@4..!v.
                    /* 02E8 */  0xF1, 0xFD, 0xC8, 0x04, 0x53, 0xDD, 0x8D, 0xE8,  // ....S...
                    /* 02F0 */  0x3C, 0x7D, 0x23, 0xE0, 0xF7, 0x14, 0x9F, 0x11,  // <}#.....
                    /* 02F8 */  0x0C, 0x6E, 0x85, 0xF7, 0x0F, 0xD0, 0x8C, 0x38,  // .n.....8
                    /* 0300 */  0x88, 0x6F, 0x0C, 0x3E, 0x13, 0x78, 0xA3, 0x27,  // .o.>.x.'
                    /* 0308 */  0x82, 0x51, 0x73, 0x64, 0x42, 0x4D, 0xC3, 0x53,  // .QsdBM.S
                    /* 0310 */  0x7D, 0xB1, 0x31, 0x81, 0x75, 0x5D, 0x86, 0x40,  // }.1.u].@
                    /* 0318 */  0xA6, 0xEF, 0x98, 0x00, 0x0A, 0x20, 0x5F, 0x0A,  // ..... _.
                    /* 0320 */  0x7C, 0xD2, 0x79, 0x30, 0x60, 0x63, 0x78, 0xD8,  // |.y0`cx.
                    /* 0328 */  0x31, 0x9A, 0xD1, 0xB9, 0xE0, 0xC9, 0xA3, 0x24,  // 1......$
                    /* 0330 */  0x4E, 0x9E, 0x82, 0x78, 0xF2, 0x8E, 0x3F, 0x79,  // N..x..?y
                    /* 0338 */  0xF4, 0x9D, 0xC2, 0x87, 0x2B, 0x4E, 0xE0, 0xB8,  // ....+N..
                    /* 0340 */  0x63, 0xA7, 0x57, 0x10, 0xFC, 0x64, 0xFF, 0xFF,  // c.W..d..
                    /* 0348 */  0xA7, 0xF6, 0xA8, 0xE0, 0x59, 0xF8, 0xD2, 0x82,  // ....Y...
                    /* 0350 */  0x1B, 0x3C, 0xDC, 0x5B, 0xC6, 0x91, 0x87, 0x79,  // .<.[...y
                    /* 0358 */  0xA7, 0xF2, 0xE9, 0xCA, 0x60, 0x41, 0xC2, 0xBC,  // ....`A..
                    /* 0360 */  0x2F, 0xE0, 0x80, 0xDE, 0xEE, 0x5E, 0x1C, 0x0E,  // /....^..
                    /* 0368 */  0x37, 0xC4, 0xF9, 0x1E, 0x7A, 0x04, 0x1F, 0x3F,  // 7...z..?
                    /* 0370 */  0x7C, 0x66, 0xC0, 0x0D, 0x89, 0x5D, 0x03, 0xF8,  // |f...]..
                    /* 0378 */  0x68, 0x7C, 0x0D, 0xE0, 0xA3, 0xF4, 0x1D, 0x0B,  // h|......
                    /* 0380 */  0x7C, 0x02, 0xEF, 0x01, 0x20, 0x87, 0xC7, 0x84,  // |... ...
                    /* 0388 */  0x1F, 0x15, 0xBD, 0x67, 0x78, 0x5C, 0x7C, 0xC8,  // ...gx\|.
                    /* 0390 */  0xBE, 0x22, 0x31, 0xEC, 0x67, 0x0D, 0x5F, 0xD2,  // ."1.g._.
                    /* 0398 */  0x4E, 0xF0, 0x95, 0xE2, 0x85, 0x0D, 0x03, 0xEB,  // N.......
                    /* 03A0 */  0x43, 0x00, 0x87, 0x35, 0x5A, 0xD8, 0x43, 0x7E,  // C..5Z.C~
                    /* 03A8 */  0x49, 0xF1, 0x09, 0xC7, 0x33, 0x33, 0x46, 0x58,  // I...33FX
                    /* 03B0 */  0x1F, 0x04, 0x1C, 0xE6, 0x20, 0x00, 0x9A, 0x03,  // .... ...
                    /* 03B8 */  0x1B, 0xFE, 0x06, 0xE0, 0x4B, 0x40, 0x90, 0x37,  // ....K@.7
                    /* 03C0 */  0x91, 0xD3, 0x7D, 0xF2, 0x31, 0x2A, 0xBF, 0x11,  // ..}.1*..
                    /* 03C8 */  0xF0, 0xF3, 0x08, 0x16, 0x28, 0x88, 0x6F, 0x18,  // ....(.o.
                    /* 03D0 */  0x1E, 0xDB, 0x81, 0xC4, 0x86, 0x73, 0x2D, 0xC1,  // .....s-.
                    /* 03D8 */  0xFE, 0xFF, 0x09, 0x2A, 0xB4, 0xE9, 0x53, 0xA3,  // ...*..S.
                    /* 03E0 */  0x51, 0xAB, 0x06, 0x65, 0x6A, 0x94, 0x69, 0x50,  // Q..ej.iP
                    /* 03E8 */  0xAB, 0x4F, 0xA5, 0xC6, 0x8C, 0x99, 0xB8, 0xF0,  // .O......
                    /* 03F0 */  0xF9, 0x15, 0xA1, 0x11, 0x3B, 0x12, 0x08, 0x8D,  // ....;...
                    /* 03F8 */  0x48, 0x21, 0x10, 0x07, 0xFE, 0x71, 0x08, 0xC4,  // H!...q..
                    /* 0400 */  0x72, 0xEF, 0x61, 0xBA, 0x16, 0x11, 0x5A, 0x19,  // r.a...Z.
                    /* 0408 */  0x01, 0x91, 0x36, 0x10, 0x01, 0x59, 0xBB, 0x0A,  // ..6..Y..
                    /* 0410 */  0x20, 0x96, 0x04, 0x44, 0x40, 0xFE, 0xFF, 0x03   //  ..D@...
                })
            }

            Device (WMIS)
            {
                Name (_HID, "PNP0C14" /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
                Name (_UID, "LSR")  // _UID: Unique ID
                Name (SDAT, Zero)
                Name (_WDG, Buffer (0x3C)
                {
                    /* 0000 */  0xED, 0x14, 0xE6, 0x77, 0x9E, 0xF1, 0xD6, 0x46,  // ...w...F
                    /* 0008 */  0xA6, 0x13, 0xA8, 0x66, 0x9F, 0xEE, 0x1F, 0xF0,  // ...f....
                    /* 0010 */  0x53, 0x52, 0x01, 0x02, 0x21, 0x12, 0x90, 0x05,  // SR..!...
                    /* 0018 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  // f.......
                    /* 0020 */  0xC9, 0x06, 0x29, 0x10, 0x44, 0x46, 0x01, 0x00,  // ..).DF..
                    /* 0028 */  0x76, 0xDF, 0xD1, 0x95, 0xC0, 0xD6, 0x16, 0x4E,  // v......N
                    /* 0030 */  0x91, 0x93, 0x7B, 0x2A, 0x84, 0x9F, 0x3D, 0xF2,  // ..{*..=.
                    /* 0038 */  0xD0, 0x00, 0x01, 0x08                           // ....
                })
                Method (WMSR, 3, Serialized)
                {
                    If ((Arg1 == One))
                    {
                        Return (SDAT) /* \_SB_.WMIS.SDAT */
                    }

                    If ((Arg1 == 0x02))
                    {
                        ^^PC00.LPCB.EC0.LESR = One
                        Return (One)
                    }

                    If ((Arg1 == 0x03))
                    {
                        ^^PC00.LPCB.EC0.LESR = Zero
                        Return (One)
                    }

                    If ((Arg1 == 0x04))
                    {
                        Switch (^^PC00.GFX0.VIDG)
                        {
                            Case (0x8086)
                            {
                                Switch (^^PC00.GFX0.DIDG)
                                {
                                    Case (0x9A49)
                                    {
                                        Return (One)
                                    }
                                    Case (0x9A60)
                                    {
                                        Return (One)
                                    }
                                    Default
                                    {
                                        Return (Zero)
                                    }

                                }
                            }
                            Case (0x1002)
                            {
                                Return (Zero)
                            }
                            Default
                            {
                                Return (Zero)
                            }

                        }
                    }
                }

                Method (_WED, 1, NotSerialized)  // _Wxx: Wake Event, xx=0x00-0xFF
                {
                    Return (One)
                }

                Name (WQDF, Buffer (0x05AE)
                {
                    /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                    /* 0008 */  0x9E, 0x05, 0x00, 0x00, 0xC8, 0x1F, 0x00, 0x00,  // ........
                    /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                    /* 0018 */  0x18, 0x4B, 0x8F, 0x00, 0x01, 0x06, 0x18, 0x42,  // .K.....B
                    /* 0020 */  0x10, 0x05, 0x10, 0x8A, 0x27, 0x81, 0x42, 0x04,  // ....'.B.
                    /* 0028 */  0x0A, 0x40, 0xA4, 0x40, 0x30, 0x28, 0x0D, 0x20,  // .@.@0(. 
                    /* 0030 */  0x92, 0x03, 0x21, 0x17, 0x4C, 0x4C, 0x80, 0x08,  // ..!.LL..
                    /* 0038 */  0x08, 0x79, 0x15, 0x60, 0x53, 0x80, 0x49, 0x10,  // .y.`S.I.
                    /* 0040 */  0xF5, 0xEF, 0x0F, 0x51, 0x12, 0x1C, 0x4A, 0x08,  // ...Q..J.
                    /* 0048 */  0x84, 0x24, 0x0A, 0x30, 0x2F, 0x40, 0xB7, 0x00,  // .$.0/@..
                    /* 0050 */  0xC3, 0x02, 0x6C, 0x0B, 0x30, 0x2D, 0xC0, 0x31,  // ..l.0-.1
                    /* 0058 */  0x24, 0x95, 0x06, 0x4E, 0x09, 0x2C, 0x05, 0x42,  // $..N.,.B
                    /* 0060 */  0x42, 0x05, 0x28, 0x17, 0xE0, 0x5B, 0x80, 0x76,  // B.(..[.v
                    /* 0068 */  0x44, 0x49, 0x16, 0x60, 0x19, 0x46, 0x04, 0x1E,  // DI.`.F..
                    /* 0070 */  0x45, 0x64, 0xA3, 0x71, 0x68, 0xEC, 0x30, 0x2C,  // Ed.qh.0,
                    /* 0078 */  0x13, 0x4C, 0x83, 0x38, 0x8C, 0xB2, 0x91, 0x45,  // .L.8...E
                    /* 0080 */  0xE0, 0x09, 0x75, 0x2A, 0x40, 0xAE, 0x00, 0x61,  // ..u*@..a
                    /* 0088 */  0x02, 0xC4, 0xA3, 0x0A, 0xA3, 0x39, 0x28, 0x32,  // .....9(2
                    /* 0090 */  0x87, 0xD0, 0x18, 0x31, 0x63, 0x22, 0xB0, 0x9D,  // ...1c"..
                    /* 0098 */  0x63, 0x6B, 0x14, 0xA7, 0x51, 0xB8, 0x00, 0xE9,  // ck..Q...
                    /* 00A0 */  0x18, 0x1A, 0xC1, 0x71, 0x1D, 0x83, 0xC1, 0x82,  // ...q....
                    /* 00A8 */  0x1C, 0x8A, 0x21, 0x0A, 0x1A, 0x82, 0xAC, 0x0E,  // ..!.....
                    /* 00B0 */  0x47, 0x16, 0x05, 0x28, 0x85, 0x11, 0x44, 0x64,  // G..(..Dd
                    /* 00B8 */  0x63, 0x9D, 0x49, 0xEB, 0xC0, 0x08, 0xAC, 0x70,  // c.I....p
                    /* 00C0 */  0x51, 0x23, 0x1B, 0x29, 0x41, 0xB4, 0x23, 0xC1,  // Q#.)A.#.
                    /* 00C8 */  0xC8, 0x80, 0x90, 0x67, 0x54, 0x0D, 0xD1, 0x04,  // ...gT...
                    /* 00D0 */  0x76, 0x3F, 0x24, 0x59, 0x9B, 0x8D, 0x8C, 0x41,  // v?$Y...A
                    /* 00D8 */  0x48, 0xA3, 0x00, 0x6F, 0x02, 0xB4, 0x09, 0xB0,  // H..o....
                    /* 00E0 */  0x85, 0x22, 0x8C, 0x0E, 0x27, 0x26, 0x94, 0x43,  // ."..'&.C
                    /* 00E8 */  0x3B, 0x84, 0x68, 0xA1, 0x8C, 0x19, 0x24, 0x44,  // ;.h...$D
                    /* 00F0 */  0x67, 0x28, 0x82, 0xAC, 0x50, 0x80, 0x32, 0x01,  // g(..P.2.
                    /* 00F8 */  0x06, 0x05, 0x88, 0xC3, 0x13, 0x52, 0xE8, 0x50,  // .....R.P
                    /* 0100 */  0xD1, 0x8D, 0xD4, 0xFE, 0x20, 0x88, 0x20, 0x07,  // .... . .
                    /* 0108 */  0x07, 0x02, 0x16, 0x69, 0x34, 0xA8, 0x43, 0x40,  // ...i4.C@
                    /* 0110 */  0x82, 0x87, 0x02, 0x1F, 0x08, 0x0E, 0xEA, 0xD4,  // ........
                    /* 0118 */  0x4E, 0xEA, 0xA4, 0x83, 0x9C, 0xE8, 0x79, 0xD5,  // N.....y.
                    /* 0120 */  0x79, 0x1A, 0x20, 0xE3, 0x66, 0x43, 0x33, 0xBB,  // y. .fC3.
                    /* 0128 */  0x8E, 0x07, 0x10, 0x5C, 0x03, 0xEA, 0x5E, 0x90,  // ...\..^.
                    /* 0130 */  0xE0, 0xFF, 0xFF, 0x54, 0xE0, 0x59, 0x86, 0xC3,  // ...T.Y..
                    /* 0138 */  0x0C, 0xD1, 0x23, 0x0F, 0x77, 0x02, 0x87, 0xC8,  // ..#.w...
                    /* 0140 */  0x00, 0x3D, 0xB9, 0x07, 0x02, 0xEC, 0x08, 0x4F,  // .=.....O
                    /* 0148 */  0xE6, 0x69, 0xA0, 0x54, 0x01, 0x66, 0xC7, 0x4E,  // .i.T.f.N
                    /* 0150 */  0x08, 0x8E, 0xC7, 0xC7, 0x00, 0xCF, 0xE7, 0x84,  // ........
                    /* 0158 */  0x13, 0x58, 0xFE, 0x20, 0x50, 0x23, 0x33, 0xB4,  // .X. P#3.
                    /* 0160 */  0x87, 0x79, 0x5A, 0x6F, 0x00, 0x9E, 0xBF, 0x09,  // .yZo....
                    /* 0168 */  0x2C, 0xF6, 0x2C, 0x41, 0xC7, 0x03, 0x7E, 0xC5,  // ,.,A..~.
                    /* 0170 */  0xC7, 0x02, 0x9D, 0x0C, 0x8C, 0xED, 0x43, 0x82,  // ......C.
                    /* 0178 */  0x45, 0x1D, 0x2D, 0xE4, 0x64, 0x3C, 0xA8, 0x53,  // E.-.d<.S
                    /* 0180 */  0x85, 0x51, 0x23, 0x1E, 0x99, 0xEF, 0x09, 0x27,  // .Q#....'
                    /* 0188 */  0x1B, 0xC4, 0xB0, 0xE7, 0x1D, 0xE6, 0xE0, 0x0D,  // ........
                    /* 0190 */  0xF1, 0x72, 0x10, 0x29, 0x81, 0x83, 0x43, 0xE8,  // .r.)..C.
                    /* 0198 */  0xAB, 0x61, 0x51, 0x83, 0xA7, 0x07, 0x0B, 0x7E,  // .aQ....~
                    /* 01A0 */  0xA6, 0x60, 0x57, 0x82, 0xB0, 0x86, 0x38, 0x9E,  // .`W...8.
                    /* 01A8 */  0xD3, 0xF2, 0xD1, 0xC3, 0xC3, 0x83, 0x7F, 0x92,  // ........
                    /* 01B0 */  0x78, 0xA0, 0x00, 0x56, 0xD3, 0x3D, 0xC2, 0x03,  // x..V.=..
                    /* 01B8 */  0x88, 0xF6, 0x4A, 0x81, 0x1D, 0x3A, 0x18, 0xAE,  // ..J..:..
                    /* 01C0 */  0x15, 0x86, 0xF5, 0x2D, 0xE2, 0x25, 0x22, 0x81,  // ...-.%".
                    /* 01C8 */  0x07, 0x15, 0x98, 0xFD, 0xFF, 0x81, 0xF9, 0xD8,  // ........
                    /* 01D0 */  0xED, 0x57, 0x00, 0x42, 0xF0, 0x93, 0x7A, 0x36,  // .W.B..z6
                    /* 01D8 */  0x38, 0xA4, 0x08, 0xC7, 0x65, 0xF4, 0x67, 0x88,  // 8...e.g.
                    /* 01E0 */  0x3E, 0x05, 0x68, 0x85, 0x10, 0x5A, 0xA4, 0x93,  // >.h..Z..
                    /* 01E8 */  0x8A, 0x11, 0x29, 0x4E, 0x2C, 0x4F, 0x23, 0x41,  // ..)N,O#A
                    /* 01F0 */  0x91, 0x23, 0x45, 0x8F, 0x80, 0xE3, 0x9D, 0xC0,  // .#E.....
                    /* 01F8 */  0xF1, 0xC4, 0x8C, 0x7C, 0x3C, 0x51, 0x4E, 0xE2,  // ...|<QN.
                    /* 0200 */  0x80, 0x7C, 0x46, 0x31, 0xC2, 0x01, 0x3D, 0x9A,  // .|F1..=.
                    /* 0208 */  0x3C, 0xAA, 0x58, 0xF3, 0xD8, 0x35, 0xA9, 0xD3,  // <.X..5..
                    /* 0210 */  0x3C, 0x3E, 0x36, 0x26, 0xDC, 0xD1, 0xC2, 0x43,  // <>6&...C
                    /* 0218 */  0xE0, 0x73, 0xC6, 0xCC, 0x0A, 0x77, 0x9A, 0xE1,  // .s...w..
                    /* 0220 */  0x03, 0xC6, 0x0E, 0x80, 0xC7, 0x35, 0x03, 0xC2,  // .....5..
                    /* 0228 */  0x84, 0xBF, 0x0C, 0x24, 0xE9, 0x89, 0x40, 0x61,  // ...$..@a
                    /* 0230 */  0x7C, 0xBE, 0x01, 0x5C, 0x9D, 0x03, 0x7C, 0x7E,  // |..\..|~
                    /* 0238 */  0x00, 0xCB, 0xC1, 0x00, 0x06, 0xEC, 0xA1, 0x1F,  // ........
                    /* 0240 */  0x40, 0x88, 0x07, 0x87, 0xC0, 0x47, 0x72, 0x28,  // @....Gr(
                    /* 0248 */  0xC1, 0x1F, 0x34, 0xD8, 0xD9, 0x06, 0xDE, 0xFF,  // ..4.....
                    /* 0250 */  0xFF, 0x6C, 0xC3, 0xCE, 0x33, 0x11, 0x8E, 0xE1,  // .l..3...
                    /* 0258 */  0xA1, 0xE6, 0x99, 0xE6, 0xB5, 0xC6, 0x23, 0x78,  // ......#x
                    /* 0260 */  0xA7, 0x79, 0x9D, 0x79, 0xAC, 0x31, 0xCC, 0xB3,  // .y.y.1..
                    /* 0268 */  0x8D, 0xC1, 0x5E, 0x6F, 0x8C, 0x72, 0x16, 0x11,  // ..^o.r..
                    /* 0270 */  0x7D, 0xB6, 0xF1, 0xCD, 0xC6, 0x30, 0x11, 0x1E,  // }....0..
                    /* 0278 */  0x6D, 0x0C, 0xF9, 0x8C, 0x63, 0x90, 0x08, 0x07,  // m...c...
                    /* 0280 */  0xF8, 0x6C, 0xC3, 0xA2, 0x1D, 0x06, 0x74, 0x06,  // .l....t.
                    /* 0288 */  0xF1, 0xD9, 0x06, 0xE0, 0xC7, 0x89, 0x04, 0xBC,  // ........
                    /* 0290 */  0x27, 0x05, 0x4E, 0xE0, 0x13, 0x09, 0xF8, 0xFF,  // '.N.....
                    /* 0298 */  0xFF, 0x27, 0x12, 0x1E, 0x49, 0xCB, 0xC9, 0x83,  // .'..I...
                    /* 02A0 */  0x65, 0x78, 0x10, 0xC8, 0xC6, 0x52, 0x7D, 0x24,  // ex...R}$
                    /* 02A8 */  0xA0, 0xC9, 0x96, 0x2B, 0x8F, 0xB8, 0xC2, 0x7C,  // ...+...|
                    /* 02B0 */  0xE2, 0xE1, 0x53, 0x7A, 0xBF, 0x30, 0xFA, 0x71,  // ..Sz.0.q
                    /* 02B8 */  0xB3, 0x2C, 0x80, 0x3A, 0xBE, 0xF1, 0x14, 0x14,  // .,.:....
                    /* 02C0 */  0x52, 0x46, 0xA3, 0x11, 0x19, 0xCE, 0x5A, 0x60,  // RF....Z`
                    /* 02C8 */  0x04, 0x67, 0x10, 0x03, 0x3A, 0x28, 0x84, 0xCE,  // .g..:(..
                    /* 02D0 */  0x45, 0x38, 0x25, 0x47, 0x33, 0x32, 0x0B, 0x06,  // E8%G32..
                    /* 02D8 */  0xF1, 0x98, 0xC3, 0x08, 0xA6, 0xBA, 0x12, 0xD1,  // ........
                    /* 02E0 */  0x39, 0xFA, 0x2E, 0xC0, 0xA7, 0xE5, 0xD3, 0x81,  // 9.......
                    /* 02E8 */  0xC1, 0x7D, 0xF3, 0x7A, 0xEF, 0x00, 0xCB, 0x68,  // .}.z...h
                    /* 02F0 */  0x83, 0xF8, 0xAE, 0xE0, 0xD3, 0x80, 0x37, 0x79,  // ......7y
                    /* 02F8 */  0x22, 0x18, 0x35, 0x27, 0x25, 0xD4, 0x34, 0x7C,  // ".5'%.4|
                    /* 0300 */  0x33, 0x78, 0x25, 0x30, 0x81, 0x75, 0xDD, 0x80,  // 3x%0.u..
                    /* 0308 */  0x40, 0xA6, 0xEF, 0x80, 0x00, 0x0A, 0x20, 0x5F,  // @..... _
                    /* 0310 */  0x08, 0x7C, 0x3C, 0x78, 0x28, 0x60, 0x63, 0x78,  // .|<x(`cx
                    /* 0318 */  0xC8, 0x31, 0x9A, 0xD1, 0xB9, 0xD4, 0xC9, 0xA3,  // .1......
                    /* 0320 */  0xC4, 0x4D, 0x9E, 0x82, 0x78, 0xF2, 0xBE, 0x55,  // .M..x..U
                    /* 0328 */  0x79, 0xF2, 0xB8, 0xDB, 0x84, 0x8F, 0x04, 0x9C,  // y.......
                    /* 0330 */  0xC0, 0x97, 0x00, 0x8F, 0xDD, 0x97, 0x0F, 0xFC,  // ........
                    /* 0338 */  0x64, 0x9F, 0x9E, 0x7C, 0xAB, 0x60, 0x82, 0x07,  // d..|.`..
                    /* 0340 */  0x0F, 0xF9, 0xFF, 0x3F, 0x78, 0xCC, 0x79, 0x0A,  // ...?x.y.
                    /* 0348 */  0x0C, 0xD3, 0xE1, 0x28, 0x4F, 0x0C, 0xB8, 0xF1,  // ...(O...
                    /* 0350 */  0xF8, 0x0E, 0xC0, 0x87, 0xE2, 0x3B, 0x00, 0x1F,  // .....;..
                    /* 0358 */  0xA2, 0x6F, 0x55, 0xE0, 0x13, 0x78, 0x09, 0x00,  // .oU..x..
                    /* 0360 */  0x39, 0x3C, 0x26, 0xE0, 0xA8, 0xA8, 0xAC, 0x71,  // 9<&....q
                    /* 0368 */  0xA1, 0xC6, 0xEB, 0x7B, 0x11, 0xC3, 0x7E, 0xC8,  // ...{..~.
                    /* 0370 */  0xB0, 0xE8, 0x59, 0xEA, 0x3E, 0xF1, 0x92, 0x86,  // ..Y.>...
                    /* 0378 */  0x81, 0xF5, 0x09, 0x80, 0xC3, 0x1A, 0x2D, 0xEC,  // ......-.
                    /* 0380 */  0x81, 0xBF, 0x9B, 0xF8, 0x60, 0xE3, 0x99, 0x19,  // ....`...
                    /* 0388 */  0x23, 0xAC, 0x4F, 0x01, 0x60, 0x9B, 0xE8, 0xD3,  // #.O.`...
                    /* 0390 */  0x84, 0xC1, 0x1E, 0xD2, 0xC0, 0x70, 0x4C, 0xC0,  // .....pL.
                    /* 0398 */  0xA9, 0x7C, 0x25, 0xE8, 0x46, 0xC2, 0x39, 0xAC,  // .|%.F.9.
                    /* 03A0 */  0x79, 0x85, 0xBA, 0xDC, 0xB1, 0x29, 0xC4, 0x38,  // y....).8
                    /* 03A8 */  0xD8, 0x83, 0x3E, 0xC2, 0x03, 0xF0, 0x0C, 0xE2,  // ..>.....
                    /* 03B0 */  0x04, 0x79, 0x9D, 0x62, 0x1A, 0x21, 0x75, 0x25,  // .y.b.!u%
                    /* 03B8 */  0xE1, 0xEA, 0x60, 0x94, 0xFF, 0x18, 0x81, 0x4A,  // ..`....J
                    /* 03C0 */  0x7C, 0x8C, 0xA0, 0x20, 0x1E, 0xB4, 0xAF, 0x24,  // |.. ...$
                    /* 03C8 */  0x98, 0xFF, 0xFF, 0x95, 0x04, 0xB0, 0x18, 0xF3,  // ........
                    /* 03D0 */  0xE8, 0x01, 0xE5, 0x7E, 0xF4, 0x64, 0x81, 0x89,  // ...~.d..
                    /* 03D8 */  0x35, 0x45, 0xE8, 0x57, 0x22, 0xDC, 0x14, 0xC1,  // 5E.W"...
                    /* 03E0 */  0x35, 0x12, 0xDC, 0x18, 0x61, 0xDD, 0x06, 0x7C,  // 5...a..|
                    /* 03E8 */  0x8B, 0x01, 0xCE, 0x17, 0x18, 0xDF, 0x17, 0xB8,  // ........
                    /* 03F0 */  0x9C, 0xFB, 0x02, 0x05, 0xF1, 0xBD, 0xC1, 0x51,  // .......Q
                    /* 03F8 */  0xE7, 0x8E, 0xFA, 0xFF, 0x43, 0x1A, 0xDA, 0x67,  // ....C..g
                    /* 0400 */  0x2C, 0x5F, 0x5E, 0x1C, 0xEE, 0x12, 0x03, 0x8A,  // ,_^.....
                    /* 0408 */  0xD3, 0x14, 0x7E, 0xEE, 0xE0, 0x19, 0x89, 0x41,  // ..~....A
                    /* 0410 */  0x9F, 0xA6, 0x30, 0xD7, 0x17, 0x78, 0x23, 0xF3,  // ..0..x#.
                    /* 0418 */  0xF5, 0x05, 0x78, 0x5F, 0x3B, 0x7C, 0x7D, 0x01,  // ..x_;|}.
                    /* 0420 */  0xD7, 0xD8, 0x7C, 0x7D, 0x01, 0xD7, 0xB1, 0x15,  // ..|}....
                    /* 0428 */  0x3C, 0xD7, 0x17, 0xDC, 0x11, 0x00, 0x7F, 0xC2,  // <.......
                    /* 0430 */  0xF3, 0x88, 0xDE, 0x22, 0xA2, 0xBC, 0xC4, 0xBD,  // ..."....
                    /* 0438 */  0x82, 0xBC, 0xBD, 0x7A, 0x56, 0x3E, 0x48, 0xFB,  // ...zV>H.
                    /* 0440 */  0x62, 0x06, 0x43, 0xE3, 0x15, 0x06, 0x75, 0x18,  // b.C...u.
                    /* 0448 */  0xB0, 0xE2, 0x2B, 0x0C, 0x9D, 0xC2, 0x79, 0x3C,  // ..+...y<
                    /* 0450 */  0xC2, 0xF8, 0xFF, 0x7F, 0x84, 0xC1, 0xDF, 0x60,  // .......`
                    /* 0458 */  0x00, 0xBE, 0xFF, 0xFF, 0x6F, 0x30, 0x00, 0x0B,  // ....o0..
                    /* 0460 */  0x61, 0xF9, 0x0D, 0x06, 0x18, 0xFF, 0xFF, 0x6F,  // a......o
                    /* 0468 */  0x30, 0x60, 0xB9, 0xB5, 0xC2, 0x9C, 0x45, 0xCC,  // 0`....E.
                    /* 0470 */  0x13, 0x09, 0x71, 0x04, 0x47, 0x13, 0xF7, 0x11,  // ..q.G...
                    /* 0478 */  0xC6, 0x57, 0x63, 0xDF, 0x5A, 0x01, 0xA6, 0xFE,  // .Wc.Z...
                    /* 0480 */  0xFF, 0x6F, 0xAD, 0x00, 0x37, 0x4E, 0x00, 0xBE,  // .o..7N..
                    /* 0488 */  0xB5, 0x02, 0xEB, 0x5B, 0x08, 0x2C, 0xED, 0x37,  // ...[.,.7
                    /* 0490 */  0x12, 0x94, 0x14, 0x08, 0x65, 0x7A, 0x33, 0x68,  // ....ez3h
                    /* 0498 */  0x00, 0x6C, 0x0C, 0xBE, 0xDB, 0x7B, 0x4A, 0x8D,  // .l...{J.
                    /* 04A0 */  0x81, 0x29, 0xC9, 0x7D, 0x04, 0x95, 0x81, 0x42,  // .).}...B
                    /* 04A8 */  0xBA, 0xCE, 0x10, 0x28, 0x25, 0x67, 0x08, 0x0A,  // ...(%g..
                    /* 04B0 */  0x62, 0x40, 0xFF, 0xFF, 0x4F, 0x5B, 0xF8, 0x61,  // b@..O[.a
                    /* 04B8 */  0x78, 0x3A, 0x1E, 0x44, 0x88, 0x13, 0xF5, 0x40,  // x:.D...@
                    /* 04C0 */  0x7D, 0x6C, 0x73, 0xA4, 0x03, 0x09, 0x74, 0x79,  // }ls...ty
                    /* 04C8 */  0xE3, 0x05, 0xCD, 0xC9, 0xE0, 0x38, 0x60, 0x5C,  // .....8`\
                    /* 04D0 */  0x47, 0x00, 0xEE, 0xFD, 0xFF, 0xAF, 0x23, 0xC0,  // G.....#.
                    /* 04D8 */  0x32, 0xDE, 0x75, 0x04, 0x74, 0x16, 0xAE, 0x23,  // 2.u.t..#
                    /* 04E0 */  0xA0, 0x93, 0x7B, 0x1D, 0x01, 0x22, 0x87, 0x10,  // ..{.."..
                    /* 04E8 */  0xFC, 0x01, 0x4B, 0xB7, 0x11, 0x50, 0xCC, 0xDD,  // ..K..P..
                    /* 04F0 */  0xB7, 0x11, 0xC0, 0xDA, 0xFF, 0xFF, 0x36, 0x02,  // ......6.
                    /* 04F8 */  0x70, 0xFB, 0x46, 0x09, 0x8E, 0xFF, 0xFF, 0x6D,  // p.F....m
                    /* 0500 */  0x04, 0x77, 0x63, 0xF0, 0x8D, 0x12, 0xF8, 0xDD,  // .wc.....
                    /* 0508 */  0x46, 0xC0, 0x82, 0x54, 0x33, 0xA0, 0xD0, 0x8E,  // F..T3...
                    /* 0510 */  0xE1, 0x0C, 0x30, 0x04, 0x15, 0xDA, 0xF4, 0xA9,  // ..0.....
                    /* 0518 */  0xD1, 0xA8, 0x55, 0x83, 0x32, 0x35, 0xCA, 0x34,  // ..U.25.4
                    /* 0520 */  0xA8, 0xD5, 0xA7, 0x52, 0x63, 0xC6, 0x0C, 0x41,  // ...Rc..A
                    /* 0528 */  0x49, 0xD2, 0xC3, 0x41, 0xE3, 0x74, 0x20, 0x10,  // I..A.t .
                    /* 0530 */  0x1A, 0x92, 0x42, 0xE7, 0x6A, 0xB2, 0x46, 0x81,  // ..B.j.F.
                    /* 0538 */  0x58, 0xA6, 0x07, 0x10, 0x16, 0x7D, 0x69, 0x32,  // X....}i2
                    /* 0540 */  0x02, 0x22, 0x1D, 0x26, 0x80, 0x98, 0x42, 0x15,  // .".&..B.
                    /* 0548 */  0x40, 0x4C, 0x2F, 0x88, 0x80, 0xAC, 0xFF, 0x15,  // @L/.....
                    /* 0550 */  0x21, 0x20, 0x87, 0x01, 0x11, 0x90, 0x55, 0xDA,  // ! ....U.
                    /* 0558 */  0x00, 0x62, 0x92, 0x41, 0x04, 0x64, 0xF9, 0x3A,  // .b.A.d.:
                    /* 0560 */  0x00, 0x29, 0x88, 0x80, 0x1C, 0xF1, 0x59, 0x20,  // .)....Y 
                    /* 0568 */  0x20, 0xE7, 0x05, 0x11, 0x90, 0x83, 0xD0, 0x08,  //  .......
                    /* 0570 */  0xC8, 0xA9, 0x28, 0x04, 0xE4, 0x84, 0x3F, 0x4C,  // ..(...?L
                    /* 0578 */  0x01, 0x12, 0x10, 0x01, 0x59, 0x85, 0x15, 0x20,  // ....Y.. 
                    /* 0580 */  0x26, 0x09, 0x44, 0x40, 0x16, 0xAB, 0x05, 0x88,  // &.D@....
                    /* 0588 */  0x49, 0x07, 0x11, 0x90, 0x23, 0x3C, 0x00, 0x04,  // I...#<..
                    /* 0590 */  0xE4, 0x3C, 0x20, 0x02, 0x72, 0x52, 0x33, 0x40,  // .< .rR3@
                    /* 0598 */  0x2C, 0x37, 0x88, 0x80, 0x9C, 0xDE, 0x0D, 0x10,  // ,7......
                    /* 05A0 */  0x93, 0xF2, 0x94, 0x10, 0x90, 0x45, 0xDA, 0x19,  // .....E..
                    /* 05A8 */  0x18, 0x05, 0x11, 0x90, 0xFF, 0xFF               // ......
                })
            }
        }

        Device (HPET)
        {
            Name (_HID, EisaId ("PNP0103") /* HPET System Timer */)  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Name (BUF0, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0xFED00000,         // Address Base
                    0x00000400,         // Address Length
                    _Y35)
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (HPTE)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                If (HPTE)
                {
                    CreateDWordField (BUF0, \_SB.PC00.LPCB.HPET._Y35._BAS, HPT0)  // _BAS: Base Address
                    HPT0 = HPTB /* \HPTB */
                }

                Return (BUF0) /* \_SB_.PC00.LPCB.HPET.BUF0 */
            }
        }

        Device (IPIC)
        {
            Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x0020,             // Range Minimum
                    0x0020,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x0024,             // Range Minimum
                    0x0024,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x0028,             // Range Minimum
                    0x0028,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x002C,             // Range Minimum
                    0x002C,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x0030,             // Range Minimum
                    0x0030,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x0034,             // Range Minimum
                    0x0034,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x0038,             // Range Minimum
                    0x0038,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x003C,             // Range Minimum
                    0x003C,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x00A0,             // Range Minimum
                    0x00A0,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x00A4,             // Range Minimum
                    0x00A4,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x00A8,             // Range Minimum
                    0x00A8,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x00AC,             // Range Minimum
                    0x00AC,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x00B0,             // Range Minimum
                    0x00B0,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x00B4,             // Range Minimum
                    0x00B4,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x00B8,             // Range Minimum
                    0x00B8,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x00BC,             // Range Minimum
                    0x00BC,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x04D0,             // Range Minimum
                    0x04D0,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IRQNoFlags ()
                    {2}
            })
        }

        Device (MATH)
        {
            Name (_HID, EisaId ("PNP0C04") /* x87-compatible Floating Point Processing Unit */)  // _HID: Hardware ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x00F0,             // Range Minimum
                    0x00F0,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IRQNoFlags ()
                    {13}
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((PCHS == PCHH))
                {
                    Return (0x1F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (LDRC)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x002E,             // Range Minimum
                    0x002E,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x004E,             // Range Minimum
                    0x004E,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x0061,             // Range Minimum
                    0x0061,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0063,             // Range Minimum
                    0x0063,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0065,             // Range Minimum
                    0x0065,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0067,             // Range Minimum
                    0x0067,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0070,             // Range Minimum
                    0x0070,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0080,             // Range Minimum
                    0x0080,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0092,             // Range Minimum
                    0x0092,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x00B2,             // Range Minimum
                    0x00B2,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x0680,             // Range Minimum
                    0x0680,             // Range Maximum
                    0x01,               // Alignment
                    0x20,               // Length
                    )
                IO (Decode16,
                    0x164E,             // Range Minimum
                    0x164E,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
            })
        }

        Device (RTC)
        {
            Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x0070,             // Range Minimum
                    0x0070,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                IRQNoFlags ()
                    {8}
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((STAS == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (TIMR)
        {
            Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x0040,             // Range Minimum
                    0x0040,             // Range Maximum
                    0x01,               // Alignment
                    0x04,               // Length
                    )
                IO (Decode16,
                    0x0050,             // Range Minimum
                    0x0050,             // Range Maximum
                    0x10,               // Alignment
                    0x04,               // Length
                    )
                IRQNoFlags ()
                    {0}
            })
        }

        Device (CWDT)
        {
            Name (_HID, EisaId ("INT3F0D") /* ACPI Motherboard Resources */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _CID: Compatible ID
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                Return (0x0F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x0000,             // Range Minimum
                        0x0000,             // Range Maximum
                        0x04,               // Alignment
                        0x04,               // Length
                        _Y36)
                })
                CreateWordField (RBUF, \_SB.PC00.LPCB.CWDT._CRS._Y36._MIN, OMIN)  // _MIN: Minimum Base Address
                CreateWordField (RBUF, \_SB.PC00.LPCB.CWDT._CRS._Y36._MAX, OMAX)  // _MAX: Maximum Base Address
                OMIN = (PMBS + 0x54)
                OMAX = (PMBS + 0x54)
                Return (RBUF) /* \_SB_.PC00.LPCB.CWDT._CRS.RBUF */
            }
        }

        OperationRegion (PKBS, SystemIO, 0x60, 0x05)
        Field (PKBS, ByteAcc, Lock, Preserve)
        {
            PKBD,   8, 
            Offset (0x02), 
            Offset (0x03), 
            Offset (0x04), 
            PKBC,   8
        }

        Device (PS2K)
        {
            Name (_HID, "MSFT0001")  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0303") /* IBM Enhanced Keyboard (101/102-key, PS/2 Mouse) */)  // _CID: Compatible ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (P2MK)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x0060,             // Range Minimum
                    0x0060,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0064,             // Range Minimum
                    0x0064,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {1}
            })
            Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
            {
                StartDependentFn (0x00, 0x00)
                {
                    FixedIO (
                        0x0060,             // Address
                        0x01,               // Length
                        )
                    FixedIO (
                        0x0064,             // Address
                        0x01,               // Length
                        )
                    IRQNoFlags ()
                        {1}
                }
                EndDependentFn ()
            })
        }

        Device (PS2M)
        {
            Name (_HID, "MSFT0003")  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0F03") /* Microsoft PS/2-style Mouse */)  // _CID: Compatible ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (P2ME)
                {
                    If (P2MK)
                    {
                        Return (0x0F)
                    }
                }

                Return (Zero)
            }

            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {12}
            })
            Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
            {
                StartDependentFn (0x00, 0x00)
                {
                    IRQNoFlags ()
                        {12}
                }
                EndDependentFn ()
            })
        }
    }

    Name (ECUP, One)
    Mutex (EHLD, 0x00)
    Scope (\)
    {
        Device (CHUB)
        {
            Name (_HID, EisaId ("INT339B"))  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((CHEN == One))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("1730e71d-e5dd-4a34-be57-4d76b6a2fe37") /* Unknown UUID */))
                {
                    If ((ToInteger (Arg1) >= Zero))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                             // .
                                })
                            }
                            Case (One)
                            {
                                Switch (ToInteger (DerefOf (Arg3 [Zero])))
                                {
                                    Case (Zero)
                                    {
                                    }

                                }
                            }

                        }

                        Return (Zero)
                    }

                    Return (Zero)
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }

    Mutex (MUTX, 0x00)
    Mutex (OSUM, 0x00)
    Mutex (WWMT, 0x00)
    Mutex (CNMT, 0x00)
    Event (WFEV)
    Scope (\)
    {
        Name (S4FG, Zero)
    }

    OperationRegion (ECMS, SystemIO, 0x72, 0x02)
    Field (ECMS, ByteAcc, Lock, Preserve)
    {
        INDX,   8, 
        DATA,   8
    }

    Method (RECM, 1, Serialized)
    {
        INDX = Arg0
        Return (DATA) /* \DATA */
    }

    Method (WECM, 2, Serialized)
    {
        INDX = Arg0
        DATA = Arg1
    }

    OperationRegion (PRT0, SystemIO, 0x80, 0x02)
    Field (PRT0, WordAcc, Lock, Preserve)
    {
        P80B,   16
    }

    Name (P80T, Zero)
    Method (D8XH, 2, Serialized)
    {
        If ((Arg0 == Zero))
        {
            P80T = ((P80T & 0xFF00) | Arg1)
        }

        If ((Arg0 == One))
        {
            P80T = ((P80T & 0xFF) | (Arg1 << 0x08))
        }

        P80B = P80T /* \P80T */
    }

    Method (P8XH, 2, Serialized)
    {
        If (CondRefOf (MDBG))
        {
            D8XH (Arg0, Arg1)
        }
    }

    OperationRegion (SPRT, SystemIO, 0xB2, 0x02)
    Field (SPRT, ByteAcc, Lock, Preserve)
    {
        SSMP,   8
    }

    Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        GPIC = Arg0
        PICM = Arg0
    }

    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        D8XH (Zero, Arg0)
        D8XH (One, Zero)
        ADBG (Concatenate ("_PTS=", ToHexString (Arg0)))
        If ((Arg0 == 0x03))
        {
            If (CondRefOf (\_SB.DTSE))
            {
                If ((\_SB.DTSE && (TCNT > One)))
                {
                    TRAP (0x02, 0x1E)
                }
            }

            CWEF = CPWE /* \CPWE */
            ADBG (Concatenate ("_PTS S3 CWEF=", CWEF))
        }

        If (CondRefOf (\_SB.TPM.PTS))
        {
            \_SB.TPM.PTS (Arg0)
        }

        If (CondRefOf (\_SB.PC00.TXHC))
        {
            If (TRTD)
            {
                \_SB.PC00.TCON ()
            }

            If (ITRT)
            {
                \_SB.PC00.TG0N ()
                \_SB.PC00.TG1N ()
            }
        }

        If ((Arg0 == 0x03))
        {
            If ((Acquire (\_SB.PC00.LPCB.EC0.LFCM, 0xA000) == Zero))
            {
                \_SB.PC00.LPCB.EC0.ES3F = One
                Release (\_SB.PC00.LPCB.EC0.LFCM)
            }
        }
    }

    Method (PBCL, 0, NotSerialized)
    {
        Return (Package (0x67)
        {
            0x50, 
            0x32, 
            Zero, 
            One, 
            0x02, 
            0x03, 
            0x04, 
            0x05, 
            0x06, 
            0x07, 
            0x08, 
            0x09, 
            0x0A, 
            0x0B, 
            0x0C, 
            0x0D, 
            0x0E, 
            0x0F, 
            0x10, 
            0x11, 
            0x12, 
            0x13, 
            0x14, 
            0x15, 
            0x16, 
            0x17, 
            0x18, 
            0x19, 
            0x1A, 
            0x1B, 
            0x1C, 
            0x1D, 
            0x1E, 
            0x1F, 
            0x20, 
            0x21, 
            0x22, 
            0x23, 
            0x24, 
            0x25, 
            0x26, 
            0x27, 
            0x28, 
            0x29, 
            0x2A, 
            0x2B, 
            0x2C, 
            0x2D, 
            0x2E, 
            0x2F, 
            0x30, 
            0x31, 
            0x32, 
            0x33, 
            0x34, 
            0x35, 
            0x36, 
            0x37, 
            0x38, 
            0x39, 
            0x3A, 
            0x3B, 
            0x3C, 
            0x3D, 
            0x3E, 
            0x3F, 
            0x40, 
            0x41, 
            0x42, 
            0x43, 
            0x44, 
            0x45, 
            0x46, 
            0x47, 
            0x48, 
            0x49, 
            0x4A, 
            0x4B, 
            0x4C, 
            0x4D, 
            0x4E, 
            0x4F, 
            0x50, 
            0x51, 
            0x52, 
            0x53, 
            0x54, 
            0x55, 
            0x56, 
            0x57, 
            0x58, 
            0x59, 
            0x5A, 
            0x5B, 
            0x5C, 
            0x5D, 
            0x5E, 
            0x5F, 
            0x60, 
            0x61, 
            0x62, 
            0x63, 
            0x64
        })
    }

    Method (_WAK, 1, Serialized)  // _WAK: Wake
    {
        D8XH (One, 0xAB)
        ADBG ("_WAK")
        If ((OSYS == 0x03E8))
        {
            Local0 = One
        }

        If ((OSYS == 0x07D6))
        {
            Local0 = 0x02
        }

        If ((OSYS == 0x07D9))
        {
            Local0 = 0x03
        }

        If ((OSYS == 0x07DC))
        {
            Local0 = 0x04
        }

        If ((OSYS == 0x07DD))
        {
            Local0 = 0x05
        }

        If ((OSYS == 0x07DF))
        {
            Local0 = 0x06
        }

        \_SB.PC00.LPCB.EC0.OSTY = Local0
        If (NEXP)
        {
            If ((OSCC & One))
            {
                NHPG ()
            }

            If ((OSCC & 0x04))
            {
                NPME ()
            }
        }

        If ((Arg0 == 0x03))
        {
            If ((Zero == ACTT)) {}
        }

        If (((Arg0 == 0x03) || (Arg0 == 0x04)))
        {
            S4FG = One
        }

        If (((Arg0 == 0x03) || (Arg0 == 0x04)))
        {
            If ((GBSX & 0x40))
            {
                \_SB.PC00.GFX0.IUEH (0x06)
                PB1E ^= 0x08
                If (ECON)
                {
                    If ((PB1E & 0x08)) {}
                    Else
                    {
                    }
                }
            }

            If ((GBSX & 0x80))
            {
                \_SB.PC00.GFX0.IUEH (0x07)
                PB1E ^= 0x10
                If (ECON)
                {
                    If ((PB1E & 0x10)) {}
                    Else
                    {
                    }
                }
            }

            If (CondRefOf (\_SB.DTSE))
            {
                If ((\_SB.DTSE && (TCNT > One)))
                {
                    TRAP (0x02, 0x14)
                }
            }

            If (((Arg0 == 0x03) || (Arg0 == 0x04)))
            {
                If ((Acquire (\_SB.PC00.LPCB.EC0.LFCM, 0xA000) == Zero))
                {
                    LIDS = \_SB.PC00.LPCB.EC0.LSTE
                    Release (\_SB.PC00.LPCB.EC0.LFCM)
                }

                If (IGDS)
                {
                    If ((LIDS == Zero))
                    {
                        \_SB.PC00.GFX0.CLID = 0x80000000
                    }

                    If ((LIDS == One))
                    {
                        \_SB.PC00.GFX0.CLID = 0x80000003
                    }
                }

                Notify (\_SB.LID0, 0x80) // Status Change
                If ((RECM (0x74) == 0x08))
                {
                    Notify (\_SB.PWRB, 0x02) // Device Wake
                }

                If ((RECM (0x74) == 0x05))
                {
                    Notify (\_SB.PWRB, 0x02) // Device Wake
                }

                If ((RECM (0x74) == 0x06))
                {
                    Notify (\_SB.LID0, 0x80) // Status Change
                }
            }

            If ((\_SB.PC00.RP01.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PC00.RP01, Zero) // Bus Check
            }

            If ((\_SB.PC00.RP02.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PC00.RP02, Zero) // Bus Check
            }

            If ((\_SB.PC00.RP03.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PC00.RP03, Zero) // Bus Check
            }

            If ((\_SB.PC00.RP04.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PC00.RP04, Zero) // Bus Check
            }

            If ((\_SB.PC00.RP05.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PC00.RP05, Zero) // Bus Check
            }

            If ((\_SB.PC00.RP06.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PC00.RP06, Zero) // Bus Check
            }

            If ((\_SB.PC00.RP07.VDID != 0xFFFFFFFF))
            {
                If ((DSTS == Zero))
                {
                    Notify (\_SB.PC00.RP07, Zero) // Bus Check
                }
            }

            If ((\_SB.PC00.RP08.VDID != 0xFFFFFFFF))
            {
                If ((DSTS == Zero))
                {
                    Notify (\_SB.PC00.RP08, Zero) // Bus Check
                }
            }

            If ((\_SB.PC00.RP09.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PC00.RP09, Zero) // Bus Check
            }

            If ((\_SB.PC00.RP10.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PC00.RP10, Zero) // Bus Check
            }

            If ((\_SB.PC00.RP11.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PC00.RP11, Zero) // Bus Check
            }

            If ((\_SB.PC00.RP12.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PC00.RP12, Zero) // Bus Check
            }

            If ((\_SB.PC00.RP13.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PC00.RP13, Zero) // Bus Check
            }

            If ((\_SB.PC00.RP14.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PC00.RP14, Zero) // Bus Check
            }

            If ((\_SB.PC00.RP15.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PC00.RP15, Zero) // Bus Check
            }

            If ((\_SB.PC00.RP16.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PC00.RP16, Zero) // Bus Check
            }

            If ((\_SB.PC00.RP17.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PC00.RP17, Zero) // Bus Check
            }

            If ((\_SB.PC00.RP18.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PC00.RP18, Zero) // Bus Check
            }

            If ((\_SB.PC00.RP19.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PC00.RP19, Zero) // Bus Check
            }

            If ((\_SB.PC00.RP20.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PC00.RP20, Zero) // Bus Check
            }

            If ((\_SB.PC00.RP21.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PC00.RP21, Zero) // Bus Check
            }

            If ((\_SB.PC00.RP22.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PC00.RP22, Zero) // Bus Check
            }

            If ((\_SB.PC00.RP23.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PC00.RP23, Zero) // Bus Check
            }

            If ((\_SB.PC00.RP24.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PC00.RP24, Zero) // Bus Check
            }

            If ((\_SB.PC00.RP21.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PC00.RP21, Zero) // Bus Check
            }

            If ((\_SB.PC00.RP22.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PC00.RP22, Zero) // Bus Check
            }

            If ((\_SB.PC00.RP23.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PC00.RP23, Zero) // Bus Check
            }

            If ((\_SB.PC00.RP24.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PC00.RP24, Zero) // Bus Check
            }

            If (CondRefOf (\_SB.PC00.TXHC))
            {
                \_SB.TCWK (Arg0)
            }
        }

        If ((Arg0 == 0x03))
        {
            If (CondRefOf (\_SB.NVDR.RSTP))
            {
                \_SB.NVDR.RSTP ()
            }
        }

        If ((Arg0 == 0x03))
        {
            If ((Acquire (\_SB.PC00.LPCB.EC0.LFCM, 0xA000) == Zero))
            {
                \_SB.PC00.LPCB.EC0.ES3F = Zero
                Release (\_SB.PC00.LPCB.EC0.LFCM)
            }
        }

        If ((Arg0 != 0x03))
        {
            If ((Acquire (\_SB.PC00.LPCB.EC0.LFCM, 0xA000) == Zero))
            {
                If ((\_SB.PC00.LPCB.EC0.SPMO == 0x02))
                {
                    ODV1 = 0x02
                    LTGP = Zero
                    DTGP = Zero
                }
                ElseIf ((\_SB.PC00.LPCB.EC0.SPMO == One))
                {
                    ODV1 = One
                    LTGP = One
                    DTGP = One
                }
                Else
                {
                    ODV1 = Zero
                    LTGP = Zero
                    DTGP = Zero
                }

                Release (\_SB.PC00.LPCB.EC0.LFCM)
            }

            Sleep (0x32)
            Notify (\_SB.NPCF, 0xC0) // Hardware-Specific
            If ((\_SB.PC00.LPCB.EC0.ACTY () == One))
            {
                ODV4 = One
            }
            Else
            {
                ODV4 = Zero
            }

            Notify (\_SB.IETM, 0x88) // Device-Specific
        }

        Return (Package (0x02)
        {
            Zero, 
            Zero
        })
    }

    Method (GETB, 3, Serialized)
    {
        Local0 = (Arg0 * 0x08)
        Local1 = (Arg1 * 0x08)
        CreateField (Arg2, Local0, Local1, TBF3)
        Return (TBF3) /* \GETB.TBF3 */
    }

    Method (PNOT, 0, Serialized)
    {
        If ((TCNT > One))
        {
            If ((PF00 & 0x08))
            {
                Notify (\_SB.PR00, 0x80) // Performance Capability Change
            }

            If ((PF01 & 0x08))
            {
                Notify (\_SB.PR01, 0x80) // Performance Capability Change
            }

            If ((PF02 & 0x08))
            {
                Notify (\_SB.PR02, 0x80) // Performance Capability Change
            }

            If ((PF03 & 0x08))
            {
                Notify (\_SB.PR03, 0x80) // Performance Capability Change
            }

            If ((PF04 & 0x08))
            {
                Notify (\_SB.PR04, 0x80) // Performance Capability Change
            }

            If ((PF05 & 0x08))
            {
                Notify (\_SB.PR05, 0x80) // Performance Capability Change
            }

            If ((PF06 & 0x08))
            {
                Notify (\_SB.PR06, 0x80) // Performance Capability Change
            }

            If ((PF07 & 0x08))
            {
                Notify (\_SB.PR07, 0x80) // Performance Capability Change
            }

            If ((PF08 & 0x08))
            {
                Notify (\_SB.PR08, 0x80) // Performance Capability Change
            }

            If ((PF09 & 0x08))
            {
                Notify (\_SB.PR09, 0x80) // Performance Capability Change
            }

            If ((PF10 & 0x08))
            {
                Notify (\_SB.PR10, 0x80) // Performance Capability Change
            }

            If ((PF11 & 0x08))
            {
                Notify (\_SB.PR11, 0x80) // Performance Capability Change
            }

            If ((PF12 & 0x08))
            {
                Notify (\_SB.PR12, 0x80) // Performance Capability Change
            }

            If ((PF13 & 0x08))
            {
                Notify (\_SB.PR13, 0x80) // Performance Capability Change
            }

            If ((PF14 & 0x08))
            {
                Notify (\_SB.PR14, 0x80) // Performance Capability Change
            }

            If ((PF15 & 0x08))
            {
                Notify (\_SB.PR15, 0x80) // Performance Capability Change
            }
        }
        Else
        {
            Notify (\_SB.PR00, 0x80) // Performance Capability Change
        }

        If ((TCNT > One))
        {
            If (((PF00 & 0x08) && (PF00 & 0x10)))
            {
                Notify (\_SB.PR00, 0x81) // C-State Change
            }

            If (((PF01 & 0x08) && (PF01 & 0x10)))
            {
                Notify (\_SB.PR01, 0x81) // C-State Change
            }

            If (((PF02 & 0x08) && (PF02 & 0x10)))
            {
                Notify (\_SB.PR02, 0x81) // C-State Change
            }

            If (((PF03 & 0x08) && (PF03 & 0x10)))
            {
                Notify (\_SB.PR03, 0x81) // C-State Change
            }

            If (((PF04 & 0x08) && (PF04 & 0x10)))
            {
                Notify (\_SB.PR04, 0x81) // C-State Change
            }

            If (((PF05 & 0x08) && (PF05 & 0x10)))
            {
                Notify (\_SB.PR05, 0x81) // C-State Change
            }

            If (((PF06 & 0x08) && (PF06 & 0x10)))
            {
                Notify (\_SB.PR06, 0x81) // C-State Change
            }

            If (((PF07 & 0x08) && (PF07 & 0x10)))
            {
                Notify (\_SB.PR07, 0x81) // C-State Change
            }

            If (((PF08 & 0x08) && (PF08 & 0x10)))
            {
                Notify (\_SB.PR08, 0x81) // C-State Change
            }

            If (((PF09 & 0x08) && (PF09 & 0x10)))
            {
                Notify (\_SB.PR09, 0x81) // C-State Change
            }

            If (((PF10 & 0x08) && (PF10 & 0x10)))
            {
                Notify (\_SB.PR10, 0x81) // C-State Change
            }

            If (((PF11 & 0x08) && (PF11 & 0x10)))
            {
                Notify (\_SB.PR11, 0x81) // C-State Change
            }

            If (((PF12 & 0x08) && (PF12 & 0x10)))
            {
                Notify (\_SB.PR12, 0x81) // C-State Change
            }

            If (((PF13 & 0x08) && (PF13 & 0x10)))
            {
                Notify (\_SB.PR13, 0x81) // C-State Change
            }

            If (((PF14 & 0x08) && (PF14 & 0x10)))
            {
                Notify (\_SB.PR14, 0x81) // C-State Change
            }

            If (((PF15 & 0x08) && (PF15 & 0x10)))
            {
                Notify (\_SB.PR15, 0x81) // C-State Change
            }
        }
        Else
        {
            Notify (\_SB.PR00, 0x81) // C-State Change
        }

        If ((DPTF == One))
        {
            Notify (\_SB.IETM, 0x86) // Device-Specific
            If (((ECON == One) && (CHGE == One))) {}
        }
    }

    OperationRegion (CPWR, SystemMemory, (\_SB.PC00.GMHB () + 0x5000), 0x1000)
    Field (CPWR, ByteAcc, NoLock, Preserve)
    {
        Offset (0x938), 
        PWRU,   4, 
        Offset (0x9A0), 
        PPL1,   15, 
        PL1E,   1, 
        CLP1,   1
    }

    Name (CLMP, Zero)
    Name (PLEN, Zero)
    Name (PLSV, 0x8000)
    Name (CSEM, Zero)
    Method (SPL1, 0, Serialized)
    {
        Name (PPUU, Zero)
        If ((CSEM == One))
        {
            Return (Zero)
        }

        CSEM = One
        PLSV = PPL1 /* \PPL1 */
        PLEN = PL1E /* \PL1E */
        CLMP = CLP1 /* \CLP1 */
        If ((PWRU == Zero))
        {
            PPUU = One
        }
        Else
        {
            PPUU = (PWRU-- << 0x02)
        }

        Local0 = (PLVL * PPUU) /* \SPL1.PPUU */
        Local1 = (Local0 / 0x03E8)
        PPL1 = Local1
        PL1E = One
        CLP1 = One
    }

    Method (RPL1, 0, Serialized)
    {
        PPL1 = PLSV /* \PLSV */
        PL1E = PLEN /* \PLEN */
        CLP1 = CLMP /* \CLMP */
        CSEM = Zero
    }

    Name (UAMS, Zero)
    Name (GLCK, Zero)
    Method (GUAM, 1, Serialized)
    {
        Switch (ToInteger (Arg0))
        {
            Case (Zero)
            {
                If ((GLCK == One))
                {
                    GLCK = Zero
                    P8XH (Zero, 0xE1)
                    P8XH (One, 0xAB)
                    If (PSCP)
                    {
                        If (CondRefOf (\_SB.PR00._PPC))
                        {
                            \_SB.CPPC = Zero
                            PNOT ()
                        }
                    }

                    If (PLCS)
                    {
                        RPL1 ()
                    }
                }
            }
            Case (One)
            {
                If ((GLCK == Zero))
                {
                    GLCK = One
                    P8XH (Zero, 0xE0)
                    P8XH (One, Zero)
                    If (PSCP)
                    {
                        If ((CondRefOf (\_SB.PR00._PSS) && CondRefOf (\_SB.PR00._PPC)))
                        {
                            If ((PF00 & 0x0400))
                            {
                                \_SB.CPPC = (SizeOf (\_SB.PR00.TPSS) - One)
                            }
                            Else
                            {
                                \_SB.CPPC = (SizeOf (\_SB.PR00.LPSS) - One)
                            }

                            PNOT ()
                        }
                    }

                    If (PLCS)
                    {
                        SPL1 ()
                    }
                }
            }
            Default
            {
                Return (Zero)
            }

        }

        UAMS = (Arg0 && !PWRS)
        P_CS ()
    }

    Method (P_CS, 0, Serialized)
    {
        If (CondRefOf (\_SB.PC00.PAUD.PUAM))
        {
            \_SB.PC00.PAUD.PUAM ()
        }

        If ((OSYS == 0x07DC))
        {
            If (CondRefOf (\_SB.PC00.XHCI.DUAM))
            {
                \_SB.PC00.XHCI.DUAM ()
            }
        }
    }

    Method (TRAP, 2, Serialized)
    {
        SMIF = Arg1
        If ((Arg0 == 0x02))
        {
            \_SB.DTSF = Arg1
            \_SB.TRPD = Zero
            Return (\_SB.DTSF) /* External reference */
        }

        If ((Arg0 == 0x04))
        {
            \_SB.TRPF = Zero
        }

        Return (SMIF) /* \SMIF */
    }

    Scope (_SB.PC00)
    {
        Method (PTMA, 0, NotSerialized)
        {
            Return (BGMA) /* External reference */
        }

        Method (PTMS, 0, NotSerialized)
        {
            Return (BGMS) /* External reference */
        }

        Method (PTIA, 0, NotSerialized)
        {
            Return (BGIA) /* External reference */
        }

        Method (_INI, 0, Serialized)  // _INI: Initialize
        {
            OSYS = 0x03E8
            If (CondRefOf (\_OSI, Local0))
            {
                If (_OSI ("Windows 2001"))
                {
                    OSYS = 0x07D1
                }

                If (_OSI ("Windows 2001 SP1"))
                {
                    OSYS = 0x07D1
                }

                If (_OSI ("Windows 2001 SP2"))
                {
                    OSYS = 0x07D2
                }

                If (_OSI ("Windows 2001.1"))
                {
                    OSYS = 0x07D3
                }

                If (_OSI ("Windows 2006"))
                {
                    OSYS = 0x07D6
                }

                If (_OSI ("Windows 2009"))
                {
                    OSYS = 0x07D9
                }

                If (_OSI ("Windows 2012"))
                {
                    OSYS = 0x07DC
                }

                If (_OSI ("Windows 2013"))
                {
                    OSYS = 0x07DD
                }

                If (_OSI ("Windows 2015"))
                {
                    OSYS = 0x07DF
                }
            }

            If (CondRefOf (\_SB.DTSE))
            {
                If ((DTSE >= One))
                {
                    DSAE = One
                }
            }
        }
    }

    Scope (\)
    {
        Method (NHPG, 0, Serialized)
        {
            \_SB.PC00.RP01.HPEX = Zero
            \_SB.PC00.RP02.HPEX = Zero
            \_SB.PC00.RP03.HPEX = Zero
            \_SB.PC00.RP04.HPEX = Zero
            \_SB.PC00.RP05.HPEX = Zero
            \_SB.PC00.RP06.HPEX = Zero
            \_SB.PC00.RP07.HPEX = Zero
            \_SB.PC00.RP08.HPEX = Zero
            \_SB.PC00.RP09.HPEX = Zero
            \_SB.PC00.RP10.HPEX = Zero
            \_SB.PC00.RP11.HPEX = Zero
            \_SB.PC00.RP12.HPEX = Zero
            \_SB.PC00.RP13.HPEX = Zero
            \_SB.PC00.RP14.HPEX = Zero
            \_SB.PC00.RP15.HPEX = Zero
            \_SB.PC00.RP16.HPEX = Zero
            \_SB.PC00.RP17.HPEX = Zero
            \_SB.PC00.RP18.HPEX = Zero
            \_SB.PC00.RP19.HPEX = Zero
            \_SB.PC00.RP20.HPEX = Zero
            \_SB.PC00.RP21.HPEX = Zero
            \_SB.PC00.RP22.HPEX = Zero
            \_SB.PC00.RP23.HPEX = Zero
            \_SB.PC00.RP24.HPEX = Zero
            If (CondRefOf (\_SB.PC00.TXHC))
            {
                If (CondRefOf (\_SB.PC01))
                {
                    \_SB.PC01.TRP0.HPEX = Zero
                    \_SB.PC01.TRP1.HPEX = Zero
                    \_SB.PC01.TRP2.HPEX = Zero
                    \_SB.PC01.TRP3.HPEX = Zero
                }
                Else
                {
                    \_SB.PC00.TRP0.HPEX = Zero
                    \_SB.PC00.TRP1.HPEX = Zero
                    \_SB.PC00.TRP2.HPEX = Zero
                    \_SB.PC00.TRP3.HPEX = Zero
                }
            }

            \_SB.PC00.RP01.HPSX = One
            \_SB.PC00.RP02.HPSX = One
            \_SB.PC00.RP03.HPSX = One
            \_SB.PC00.RP04.HPSX = One
            \_SB.PC00.RP05.HPSX = One
            \_SB.PC00.RP06.HPSX = One
            \_SB.PC00.RP07.HPSX = One
            \_SB.PC00.RP08.HPSX = One
            \_SB.PC00.RP09.HPSX = One
            \_SB.PC00.RP10.HPSX = One
            \_SB.PC00.RP11.HPSX = One
            \_SB.PC00.RP12.HPSX = One
            \_SB.PC00.RP13.HPSX = One
            \_SB.PC00.RP14.HPSX = One
            \_SB.PC00.RP15.HPSX = One
            \_SB.PC00.RP16.HPSX = One
            \_SB.PC00.RP17.HPSX = One
            \_SB.PC00.RP18.HPSX = One
            \_SB.PC00.RP19.HPSX = One
            \_SB.PC00.RP20.HPSX = One
            \_SB.PC00.RP21.HPSX = One
            \_SB.PC00.RP22.HPSX = One
            \_SB.PC00.RP23.HPSX = One
            \_SB.PC00.RP24.HPSX = One
            If (CondRefOf (\_SB.PC00.TXHC))
            {
                If (CondRefOf (\_SB.PC01))
                {
                    \_SB.PC01.TRP0.HPSX = One
                    \_SB.PC01.TRP1.HPSX = One
                    \_SB.PC01.TRP2.HPSX = One
                    \_SB.PC01.TRP3.HPSX = One
                }
                Else
                {
                    \_SB.PC00.TRP0.HPSX = One
                    \_SB.PC00.TRP1.HPSX = One
                    \_SB.PC00.TRP2.HPSX = One
                    \_SB.PC00.TRP3.HPSX = One
                }
            }
        }

        Method (NPME, 0, Serialized)
        {
            \_SB.PC00.RP01.PMEX = Zero
            \_SB.PC00.RP02.PMEX = Zero
            \_SB.PC00.RP03.PMEX = Zero
            \_SB.PC00.RP04.PMEX = Zero
            \_SB.PC00.RP05.PMEX = Zero
            \_SB.PC00.RP06.PMEX = Zero
            \_SB.PC00.RP07.PMEX = Zero
            \_SB.PC00.RP08.PMEX = Zero
            \_SB.PC00.RP09.PMEX = Zero
            \_SB.PC00.RP10.PMEX = Zero
            \_SB.PC00.RP11.PMEX = Zero
            \_SB.PC00.RP12.PMEX = Zero
            \_SB.PC00.RP13.PMEX = Zero
            \_SB.PC00.RP14.PMEX = Zero
            \_SB.PC00.RP15.PMEX = Zero
            \_SB.PC00.RP16.PMEX = Zero
            \_SB.PC00.RP17.PMEX = Zero
            \_SB.PC00.RP18.PMEX = Zero
            \_SB.PC00.RP19.PMEX = Zero
            \_SB.PC00.RP20.PMEX = Zero
            \_SB.PC00.RP21.PMEX = Zero
            \_SB.PC00.RP22.PMEX = Zero
            \_SB.PC00.RP23.PMEX = Zero
            \_SB.PC00.RP24.PMEX = Zero
            \_SB.PC00.RP21.PMEX = Zero
            \_SB.PC00.RP22.PMEX = Zero
            \_SB.PC00.RP23.PMEX = Zero
            \_SB.PC00.RP24.PMEX = Zero
            If (CondRefOf (\_SB.PC00.TXHC))
            {
                If (CondRefOf (\_SB.PC01))
                {
                    \_SB.PC01.TRP0.PMEX = Zero
                    \_SB.PC01.TRP1.PMEX = Zero
                    \_SB.PC01.TRP2.PMEX = Zero
                    \_SB.PC01.TRP3.PMEX = Zero
                }
                Else
                {
                    \_SB.PC00.TRP0.PMEX = Zero
                    \_SB.PC00.TRP1.PMEX = Zero
                    \_SB.PC00.TRP2.PMEX = Zero
                    \_SB.PC00.TRP3.PMEX = Zero
                }
            }

            \_SB.PC00.RP01.PMSX = One
            \_SB.PC00.RP02.PMSX = One
            \_SB.PC00.RP03.PMSX = One
            \_SB.PC00.RP04.PMSX = One
            \_SB.PC00.RP05.PMSX = One
            \_SB.PC00.RP06.PMSX = One
            \_SB.PC00.RP07.PMSX = One
            \_SB.PC00.RP08.PMSX = One
            \_SB.PC00.RP09.PMSX = One
            \_SB.PC00.RP10.PMSX = One
            \_SB.PC00.RP11.PMSX = One
            \_SB.PC00.RP12.PMSX = One
            \_SB.PC00.RP13.PMSX = One
            \_SB.PC00.RP14.PMSX = One
            \_SB.PC00.RP15.PMSX = One
            \_SB.PC00.RP16.PMSX = One
            \_SB.PC00.RP17.PMSX = One
            \_SB.PC00.RP18.PMSX = One
            \_SB.PC00.RP19.PMSX = One
            \_SB.PC00.RP20.PMSX = One
            \_SB.PC00.RP21.PMSX = One
            \_SB.PC00.RP22.PMSX = One
            \_SB.PC00.RP23.PMSX = One
            \_SB.PC00.RP24.PMSX = One
            If (CondRefOf (\_SB.PC00.TXHC))
            {
                If (CondRefOf (\_SB.PC01))
                {
                    \_SB.PC01.TRP0.PMSX = One
                    \_SB.PC01.TRP1.PMSX = One
                    \_SB.PC01.TRP2.PMSX = One
                    \_SB.PC01.TRP3.PMSX = One
                }
                Else
                {
                    \_SB.PC00.TRP0.PMSX = One
                    \_SB.PC00.TRP1.PMSX = One
                    \_SB.PC00.TRP2.PMSX = One
                    \_SB.PC00.TRP3.PMSX = One
                }
            }
        }

        Name (PICM, Zero)
        Name (PRWP, Package (0x02)
        {
            Zero, 
            Zero
        })
        Method (GPRW, 2, NotSerialized)
        {
            PRWP [Zero] = Arg0
            Local0 = (SS1 << One)
            Local0 |= (SS2 << 0x02)
            Local0 |= (SS3 << 0x03)
            Local0 |= (SS4 << 0x04)
            If (((One << Arg1) & Local0))
            {
                PRWP [One] = Arg1
            }
            Else
            {
                Local0 >>= One
                FindSetLeftBit (Local0, PRWP [One])
            }

            Return (PRWP) /* \PRWP */
        }
    }

    Scope (_SB)
    {
        Name (OSCI, Zero)
        Name (OSCO, Zero)
        Name (OSCP, Zero)
        Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, Zero, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            If ((Arg0 == ToUUID ("0811b06e-4a27-44f9-8d60-3cbbc22e7b48") /* Platform-wide Capabilities */))
            {
                If ((Arg1 == One))
                {
                    OSCP = CAP0 /* \_SB_._OSC.CAP0 */
                    If ((CAP0 & 0x04))
                    {
                        OSCO = 0x04
                        If (((HGMD & 0x0F) != 0x02))
                        {
                            If ((RTD3 == Zero))
                            {
                                CAP0 &= 0xFFFFFFFB
                                STS0 |= 0x10
                            }
                        }
                    }
                }
                Else
                {
                    STS0 &= 0xFFFFFF00
                    STS0 |= 0x0A
                }
            }
            Else
            {
                STS0 &= 0xFFFFFF00
                STS0 |= 0x06
            }

            Return (Arg3)
        }

        Device (EPC)
        {
            Name (_HID, EisaId ("INT0E0C"))  // _HID: Hardware ID
            Name (_STR, Unicode ("Enclave Page Cache 1.0"))  // _STR: Description String
            Name (_MLS, Package (0x01)  // _MLS: Multiple Language String
            {
                Package (0x02)
                {
                    "en", 
                    Unicode ("Enclave Page Cache 1.0")
                }
            })
            Name (RBUF, ResourceTemplate ()
            {
                QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, NonCacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000001, // Length
                    ,, _Y37, AddressRangeMemory, TypeStatic)
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateQWordField (RBUF, \_SB.EPC._Y37._MIN, EMIN)  // _MIN: Minimum Base Address
                CreateQWordField (RBUF, \_SB.EPC._Y37._MAX, EMAX)  // _MAX: Maximum Base Address
                CreateQWordField (RBUF, \_SB.EPC._Y37._LEN, ELEN)  // _LEN: Length
                EMIN = EMNA /* External reference */
                ELEN = ELNG /* External reference */
                EMAX = ((EMNA + ELNG) - One)
                Return (RBUF) /* \_SB_.EPC_.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((EPCS != Zero))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }
        }
    }

    Scope (_SB)
    {
        Device (SLPB)
        {
            Name (_HID, EisaId ("PNP0C0E") /* Sleep Button Device */)  // _HID: Hardware ID
            Name (_STA, 0x0B)  // _STA: Status
        }
    }

    Scope (_SB.PC00.I2C5)
    {
        Device (PA01)
        {
            Name (_HID, "MCHP1930")  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If (POME)
                {
                    Switch (ToInteger (PLID))
                    {
                        Case (Package (0x10)
                            {
                                One, 
                                0x02, 
                                0x03, 
                                0x04, 
                                0x17, 
                                0x05, 
                                0x06, 
                                0x07, 
                                0x07, 
                                0x08, 
                                0x0C, 
                                0x0A, 
                                0x0E, 
                                0x0D, 
                                0x10, 
                                0x0F
                            }

)
                        {
                            Return (0x0F)
                        }

                    }
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.PC00.I2C5",
                        0x00, ResourceConsumer, _Y38, Exclusive,
                        )
                })
                CreateWordField (RBUF, \_SB.PC00.I2C5.PA01._CRS._Y38._ADR, BADR)  // _ADR: Address
                Switch (ToInteger (PLID))
                {
                    Case (0x0F)
                    {
                        BADR = 0x10
                    }
                    Default
                    {
                        BADR = 0x18
                    }

                }

                Return (RBUF) /* \_SB_.PC00.I2C5.PA01._CRS.RBUF */
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 != ToUUID ("033771e0-1705-47b4-9535-d1bbe14d9a09") /* Unknown UUID */))
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Switch (ToInteger (Arg1))
                        {
                            Case (Zero)
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                             // .
                                })
                            }
                            Case (One)
                            {
                                Return (Buffer (One)
                                {
                                     0x7F                                             // .
                                })
                            }

                        }

                        Break
                    }
                    Case (One)
                    {
                        Name (PKG1, Package (0x02)
                        {
                            Package (0x08)
                            {
                                "VCCIN_PH1", 
                                0x02, 
                                "VCCIN_PH2", 
                                0x02, 
                                "VCCIN_PH3", 
                                0x02, 
                                "V3.3A_DSW_VR", 
                                0x02
                            }, 

                            Package (0x08)
                            {
                                "AUDIO_CODEC", 
                                0x0A, 
                                "CAMERA", 
                                0x0A, 
                                "STORAGE", 
                                0x05, 
                                "CPU_PH1", 
                                One
                            }
                        })
                        Switch (ToInteger (PLID))
                        {
                            Case (0x0F)
                            {
                                Return (DerefOf (PKG1 [One]))
                            }
                            Default
                            {
                                Return (DerefOf (PKG1 [Zero]))
                            }

                        }
                    }
                    Case (0x02)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Name (PKG2, Package (0x02)
                        {
                            Package (0x04)
                            {
                                0x07D0, 
                                0x07D0, 
                                0x07D0, 
                                0x07D0
                            }, 

                            Package (0x04)
                            {
                                0x2710, 
                                0x2710, 
                                0x1388, 
                                0x01F4
                            }
                        })
                        Switch (ToInteger (PLID))
                        {
                            Case (0x0F)
                            {
                                Return (DerefOf (PKG2 [One]))
                            }
                            Default
                            {
                                Return (DerefOf (PKG2 [Zero]))
                            }

                        }
                    }
                    Case (0x03)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Name (BUF3, Package (0x01)
                        {
                            0x0F
                        })
                        Return (BUF3) /* \_SB_.PC00.I2C5.PA01._DSM.BUF3 */
                    }
                    Case (0x04)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Name (BUF4, Package (0x01)
                        {
                            Zero
                        })
                        Return (BUF4) /* \_SB_.PC00.I2C5.PA01._DSM.BUF4 */
                    }
                    Case (0x05)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Name (BUF5, Package (0x02)
                        {
                            0x0400, 
                            0x08
                        })
                        Return (BUF5) /* \_SB_.PC00.I2C5.PA01._DSM.BUF5 */
                    }
                    Case (0x06)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Name (BUF6, Package (0x01)
                        {
                            0x0384
                        })
                        Return (BUF6) /* \_SB_.PC00.I2C5.PA01._DSM.BUF6 */
                    }

                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }

        Device (PA02)
        {
            Name (_HID, "MCHP1930")  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If (POME)
                {
                    Switch (ToInteger (PLID))
                    {
                        Case (Package (0x10)
                            {
                                One, 
                                0x02, 
                                0x03, 
                                0x04, 
                                0x17, 
                                0x05, 
                                0x06, 
                                0x07, 
                                0x07, 
                                0x08, 
                                0x0C, 
                                0x0A, 
                                0x0E, 
                                0x0D, 
                                0x10, 
                                0x0F
                            }

)
                        {
                            Return (0x0F)
                        }

                    }
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.PC00.I2C5",
                        0x00, ResourceConsumer, _Y39, Exclusive,
                        )
                })
                CreateWordField (RBUF, \_SB.PC00.I2C5.PA02._CRS._Y39._ADR, BADR)  // _ADR: Address
                Switch (ToInteger (PLID))
                {
                    Case (0x0F)
                    {
                        BADR = 0x12
                    }
                    Default
                    {
                        BADR = 0x11
                    }

                }

                Return (RBUF) /* \_SB_.PC00.I2C5.PA02._CRS.RBUF */
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 != ToUUID ("033771e0-1705-47b4-9535-d1bbe14d9a09") /* Unknown UUID */))
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Switch (ToInteger (Arg1))
                        {
                            Case (Zero)
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                             // .
                                })
                            }
                            Case (One)
                            {
                                Return (Buffer (One)
                                {
                                     0x7F                                             // .
                                })
                            }

                        }

                        Break
                    }
                    Case (One)
                    {
                        Name (PKG1, Package (0x02)
                        {
                            Package (0x08)
                            {
                                "SSD", 
                                0x05, 
                                "WLAN", 
                                0x05, 
                                "VBATA", 
                                0x02, 
                                "BACKLIGHT", 
                                0x02
                            }, 

                            Package (0x08)
                            {
                                "WIFI", 
                                0x05, 
                                "", 
                                Zero, 
                                "DISPLAY_PANEL", 
                                0x0A, 
                                "DISPLAY_BACKLIGHT", 
                                0x0A
                            }
                        })
                        Switch (ToInteger (PLID))
                        {
                            Case (0x0F)
                            {
                                Return (DerefOf (PKG1 [One]))
                            }
                            Default
                            {
                                Return (DerefOf (PKG1 [Zero]))
                            }

                        }
                    }
                    Case (0x02)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Name (PKG2, Package (0x02)
                        {
                            Package (0x04)
                            {
                                0x1388, 
                                0x1388, 
                                0x07D0, 
                                0x07D0
                            }, 

                            Package (0x04)
                            {
                                0x1388, 
                                Zero, 
                                0x2710, 
                                0x2710
                            }
                        })
                        Switch (ToInteger (PLID))
                        {
                            Case (0x0F)
                            {
                                Return (DerefOf (PKG2 [One]))
                            }
                            Default
                            {
                                Return (DerefOf (PKG2 [Zero]))
                            }

                        }
                    }
                    Case (0x03)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Name (BUF3, Package (0x01)
                        {
                            0x0F
                        })
                        Return (BUF3) /* \_SB_.PC00.I2C5.PA02._DSM.BUF3 */
                    }
                    Case (0x04)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Name (BUF4, Package (0x01)
                        {
                            Zero
                        })
                        Return (BUF4) /* \_SB_.PC00.I2C5.PA02._DSM.BUF4 */
                    }
                    Case (0x05)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Name (BUF5, Package (0x02)
                        {
                            0x0400, 
                            0x08
                        })
                        Return (BUF5) /* \_SB_.PC00.I2C5.PA02._DSM.BUF5 */
                    }
                    Case (0x06)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Name (BUF6, Package (0x01)
                        {
                            0x0384
                        })
                        Return (BUF6) /* \_SB_.PC00.I2C5.PA02._DSM.BUF6 */
                    }

                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }

        Device (PA03)
        {
            Name (_HID, "MCHP1930")  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If (POME)
                {
                    Switch (ToInteger (PLID))
                    {
                        Case (Package (0x10)
                            {
                                One, 
                                0x02, 
                                0x03, 
                                0x04, 
                                0x17, 
                                0x05, 
                                0x06, 
                                0x07, 
                                0x07, 
                                0x08, 
                                0x0C, 
                                0x0A, 
                                0x0E, 
                                0x0D, 
                                0x10, 
                                0x0F
                            }

)
                        {
                            Return (0x0F)
                        }

                    }
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.PC00.I2C5",
                        0x00, ResourceConsumer, _Y3A, Exclusive,
                        )
                })
                CreateWordField (RBUF, \_SB.PC00.I2C5.PA03._CRS._Y3A._ADR, BADR)  // _ADR: Address
                Switch (ToInteger (PLID))
                {
                    Case (0x0F)
                    {
                        BADR = 0x11
                    }
                    Default
                    {
                        BADR = 0x1E
                    }

                }

                Return (RBUF) /* \_SB_.PC00.I2C5.PA03._CRS.RBUF */
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 != ToUUID ("033771e0-1705-47b4-9535-d1bbe14d9a09") /* Unknown UUID */))
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Switch (ToInteger (Arg1))
                        {
                            Case (Zero)
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                             // .
                                })
                            }
                            Case (One)
                            {
                                Return (Buffer (One)
                                {
                                     0x7F                                             // .
                                })
                            }

                        }

                        Break
                    }
                    Case (One)
                    {
                        Name (PKG1, Package (0x02)
                        {
                            Package (0x08)
                            {
                                "VDD2_CPU", 
                                One, 
                                "VDD2_MEM", 
                                0x02, 
                                "VCCIN_AUX", 
                                0x02, 
                                "V1.8A_MCP", 
                                0x05
                            }, 

                            Package (0x08)
                            {
                                "CPU_PH2", 
                                One, 
                                "CPU_PH3", 
                                One, 
                                "SOC", 
                                One, 
                                "MAINMEM_VDD2", 
                                0x02
                            }
                        })
                        Switch (ToInteger (PLID))
                        {
                            Case (0x0F)
                            {
                                Return (DerefOf (PKG1 [One]))
                            }
                            Default
                            {
                                Return (DerefOf (PKG1 [Zero]))
                            }

                        }
                    }
                    Case (0x02)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Name (PKG2, Package (0x02)
                        {
                            Package (0x04)
                            {
                                0x03E8, 
                                0x07D0, 
                                0x07D0, 
                                0x1388
                            }, 

                            Package (0x04)
                            {
                                0x01F4, 
                                0x01F4, 
                                0x01F4, 
                                0x07D0
                            }
                        })
                        Switch (ToInteger (PLID))
                        {
                            Case (0x0F)
                            {
                                Return (DerefOf (PKG2 [One]))
                            }
                            Default
                            {
                                Return (DerefOf (PKG2 [Zero]))
                            }

                        }
                    }
                    Case (0x03)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Name (BUF3, Package (0x01)
                        {
                            0x0F
                        })
                        Return (BUF3) /* \_SB_.PC00.I2C5.PA03._DSM.BUF3 */
                    }
                    Case (0x04)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Name (BUF4, Package (0x01)
                        {
                            Zero
                        })
                        Return (BUF4) /* \_SB_.PC00.I2C5.PA03._DSM.BUF4 */
                    }
                    Case (0x05)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Name (BUF5, Package (0x02)
                        {
                            0x0400, 
                            0x08
                        })
                        Return (BUF5) /* \_SB_.PC00.I2C5.PA03._DSM.BUF5 */
                    }
                    Case (0x06)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Name (BUF6, Package (0x01)
                        {
                            0x0384
                        })
                        Return (BUF6) /* \_SB_.PC00.I2C5.PA03._DSM.BUF6 */
                    }

                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }

        Device (PA04)
        {
            Name (_HID, "MCHP1930")  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If (POME)
                {
                    Switch (ToInteger (PLID))
                    {
                        Case (0x0F)
                        {
                            Return (0x0F)
                        }

                    }
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.PC00.I2C5",
                        0x00, ResourceConsumer, _Y3B, Exclusive,
                        )
                })
                CreateWordField (RBUF, \_SB.PC00.I2C5.PA04._CRS._Y3B._ADR, BADR)  // _ADR: Address
                Switch (ToInteger (PLID))
                {
                    Case (0x0F)
                    {
                        BADR = 0x13
                    }
                    Default
                    {
                        BADR = Zero
                    }

                }

                Return (RBUF) /* \_SB_.PC00.I2C5.PA04._CRS.RBUF */
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 != ToUUID ("033771e0-1705-47b4-9535-d1bbe14d9a09") /* Unknown UUID */))
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Switch (ToInteger (Arg1))
                        {
                            Case (Zero)
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                             // .
                                })
                            }
                            Case (One)
                            {
                                Return (Buffer (One)
                                {
                                     0x7F                                             // .
                                })
                            }

                        }

                        Break
                    }
                    Case (One)
                    {
                        Name (PKG1, Package (0x02)
                        {
                            Package (0x08)
                            {
                                "", 
                                Zero, 
                                "", 
                                Zero, 
                                "", 
                                Zero, 
                                "", 
                                Zero
                            }, 

                            Package (0x08)
                            {
                                "MAINMEM_LP4x", 
                                0x05, 
                                "MAINMEM_VDD2CPU", 
                                0x02, 
                                "MAINMEM_VPP", 
                                0x05, 
                                "SYSTEM", 
                                0x02
                            }
                        })
                        Switch (ToInteger (PLID))
                        {
                            Case (0x0F)
                            {
                                Return (DerefOf (PKG1 [One]))
                            }
                            Default
                            {
                                Return (DerefOf (PKG1 [Zero]))
                            }

                        }
                    }
                    Case (0x02)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Name (PKG2, Package (0x02)
                        {
                            Package (0x04)
                            {
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0x1388, 
                                0x07D0, 
                                0x1388, 
                                0x07D0
                            }
                        })
                        Switch (ToInteger (PLID))
                        {
                            Case (0x0F)
                            {
                                Return (DerefOf (PKG2 [One]))
                            }
                            Default
                            {
                                Return (DerefOf (PKG2 [Zero]))
                            }

                        }
                    }
                    Case (0x03)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Name (BUF3, Package (0x01)
                        {
                            0x0F
                        })
                        Return (BUF3) /* \_SB_.PC00.I2C5.PA04._DSM.BUF3 */
                    }
                    Case (0x04)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Name (BUF4, Package (0x01)
                        {
                            Zero
                        })
                        Return (BUF4) /* \_SB_.PC00.I2C5.PA04._DSM.BUF4 */
                    }
                    Case (0x05)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Name (BUF5, Package (0x02)
                        {
                            0x0400, 
                            0x08
                        })
                        Return (BUF5) /* \_SB_.PC00.I2C5.PA04._DSM.BUF5 */
                    }
                    Case (0x06)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Name (BUF6, Package (0x01)
                        {
                            0x0384
                        })
                        Return (BUF6) /* \_SB_.PC00.I2C5.PA04._DSM.BUF6 */
                    }

                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }

    Scope (_SB.PC00.I2C0)
    {
        Device (PA01)
        {
            Name (_HID, "MCHP1930")  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If (POME)
                {
                    Switch (ToInteger (PLID))
                    {
                        Case (Package (0x01)
                            {
                                0x21
                            }

)
                        {
                            Return (0x0F)
                        }

                    }
                }

                Return (Zero)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.PC00.I2C0",
                        0x00, ResourceConsumer, _Y3C, Exclusive,
                        )
                })
                CreateWordField (RBUF, \_SB.PC00.I2C0.PA01._CRS._Y3C._ADR, BADR)  // _ADR: Address
                BADR = 0x1F
                Return (RBUF) /* \_SB_.PC00.I2C0.PA01._CRS.RBUF */
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 != ToUUID ("033771e0-1705-47b4-9535-d1bbe14d9a09") /* Unknown UUID */))
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Switch (ToInteger (Arg1))
                        {
                            Case (Zero)
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                             // .
                                })
                            }
                            Case (One)
                            {
                                Return (Buffer (One)
                                {
                                     0x7F                                             // .
                                })
                            }

                        }

                        Break
                    }
                    Case (One)
                    {
                        Name (PKG1, Package (0x01)
                        {
                            Package (0x08)
                            {
                                "VBATA", 
                                0x02, 
                                "VDDQ_MEM", 
                                0x02, 
                                "VCCIN_PH1", 
                                One, 
                                "VCCIN_PH2", 
                                One
                            }
                        })
                        Return (DerefOf (PKG1 [Zero]))
                    }
                    Case (0x02)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Name (PKG2, Package (0x01)
                        {
                            Package (0x04)
                            {
                                0x07D0, 
                                0x07D0, 
                                0x03E8, 
                                0x03E8
                            }
                        })
                        Return (DerefOf (PKG2 [Zero]))
                    }
                    Case (0x03)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Name (BUF3, Package (0x01)
                        {
                            0x0F
                        })
                        Return (BUF3) /* \_SB_.PC00.I2C0.PA01._DSM.BUF3 */
                    }
                    Case (0x04)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Name (BUF4, Package (0x01)
                        {
                            Zero
                        })
                        Return (BUF4) /* \_SB_.PC00.I2C0.PA01._DSM.BUF4 */
                    }
                    Case (0x05)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Name (BUF5, Package (0x02)
                        {
                            0x0400, 
                            0x08
                        })
                        Return (BUF5) /* \_SB_.PC00.I2C0.PA01._DSM.BUF5 */
                    }
                    Case (0x06)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Name (BUF6, Package (0x01)
                        {
                            0x0384
                        })
                        Return (BUF6) /* \_SB_.PC00.I2C0.PA01._DSM.BUF6 */
                    }

                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }

        Device (PA02)
        {
            Name (_HID, "MCHP1930")  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If (POME)
                {
                    Switch (ToInteger (PLID))
                    {
                        Case (Package (0x01)
                            {
                                0x21
                            }

)
                        {
                            Return (0x0F)
                        }

                    }
                }

                Return (Zero)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.PC00.I2C0",
                        0x00, ResourceConsumer, _Y3D, Exclusive,
                        )
                })
                CreateWordField (RBUF, \_SB.PC00.I2C0.PA02._CRS._Y3D._ADR, BADR)  // _ADR: Address
                BADR = 0x10
                Return (RBUF) /* \_SB_.PC00.I2C0.PA02._CRS.RBUF */
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 != ToUUID ("033771e0-1705-47b4-9535-d1bbe14d9a09") /* Unknown UUID */))
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Switch (ToInteger (Arg1))
                        {
                            Case (Zero)
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                             // .
                                })
                            }
                            Case (One)
                            {
                                Return (Buffer (One)
                                {
                                     0x7F                                             // .
                                })
                            }

                        }

                        Break
                    }
                    Case (One)
                    {
                        Name (PKG1, Package (0x01)
                        {
                            Package (0x08)
                            {
                                "VCCIN_PH3", 
                                One, 
                                "VCCIN_PH4", 
                                One, 
                                "VCCIN_PH5", 
                                One, 
                                "VCCIN_PH6", 
                                One
                            }
                        })
                        Return (DerefOf (PKG1 [Zero]))
                    }
                    Case (0x02)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Name (PKG2, Package (0x01)
                        {
                            Package (0x04)
                            {
                                0x03E8, 
                                0x03E8, 
                                0x03E8, 
                                0x03E8
                            }
                        })
                        Return (DerefOf (PKG2 [Zero]))
                    }
                    Case (0x03)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Name (BUF3, Package (0x01)
                        {
                            0x0F
                        })
                        Return (BUF3) /* \_SB_.PC00.I2C0.PA02._DSM.BUF3 */
                    }
                    Case (0x04)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Name (BUF4, Package (0x01)
                        {
                            Zero
                        })
                        Return (BUF4) /* \_SB_.PC00.I2C0.PA02._DSM.BUF4 */
                    }
                    Case (0x05)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Name (BUF5, Package (0x02)
                        {
                            0x0400, 
                            0x08
                        })
                        Return (BUF5) /* \_SB_.PC00.I2C0.PA02._DSM.BUF5 */
                    }
                    Case (0x06)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Name (BUF6, Package (0x01)
                        {
                            0x0384
                        })
                        Return (BUF6) /* \_SB_.PC00.I2C0.PA02._DSM.BUF6 */
                    }

                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }

        Device (PA03)
        {
            Name (_HID, "MCHP1930")  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If (POME)
                {
                    Switch (ToInteger (PLID))
                    {
                        Case (Package (0x01)
                            {
                                0x21
                            }

)
                        {
                            Return (0x0F)
                        }

                    }
                }

                Return (Zero)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.PC00.I2C0",
                        0x00, ResourceConsumer, _Y3E, Exclusive,
                        )
                })
                CreateWordField (RBUF, \_SB.PC00.I2C0.PA03._CRS._Y3E._ADR, BADR)  // _ADR: Address
                BADR = 0x11
                Return (RBUF) /* \_SB_.PC00.I2C0.PA03._CRS.RBUF */
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 != ToUUID ("033771e0-1705-47b4-9535-d1bbe14d9a09") /* Unknown UUID */))
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Switch (ToInteger (Arg1))
                        {
                            Case (Zero)
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                             // .
                                })
                            }
                            Case (One)
                            {
                                Return (Buffer (One)
                                {
                                     0x7F                                             // .
                                })
                            }

                        }

                        Break
                    }
                    Case (One)
                    {
                        Name (PKG1, Package (0x01)
                        {
                            Package (0x08)
                            {
                                "VCCIN_PH7", 
                                One, 
                                "VCCIN_PH8", 
                                One, 
                                "VCCIN_AUX_PH1", 
                                0x02, 
                                "VCCIN_AUX_PH2", 
                                0x02
                            }
                        })
                        Return (DerefOf (PKG1 [Zero]))
                    }
                    Case (0x02)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Name (PKG2, Package (0x01)
                        {
                            Package (0x04)
                            {
                                0x03E8, 
                                0x03E8, 
                                0x07D0, 
                                0x07D0
                            }
                        })
                        Return (DerefOf (PKG2 [Zero]))
                    }
                    Case (0x03)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Name (BUF3, Package (0x01)
                        {
                            0x0F
                        })
                        Return (BUF3) /* \_SB_.PC00.I2C0.PA03._DSM.BUF3 */
                    }
                    Case (0x04)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Name (BUF4, Package (0x01)
                        {
                            Zero
                        })
                        Return (BUF4) /* \_SB_.PC00.I2C0.PA03._DSM.BUF4 */
                    }
                    Case (0x05)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Name (BUF5, Package (0x02)
                        {
                            0x0400, 
                            0x08
                        })
                        Return (BUF5) /* \_SB_.PC00.I2C0.PA03._DSM.BUF5 */
                    }
                    Case (0x06)
                    {
                        If ((Arg1 < One))
                        {
                            Break
                        }

                        Name (BUF6, Package (0x01)
                        {
                            0x0384
                        })
                        Return (BUF6) /* \_SB_.PC00.I2C0.PA03._DSM.BUF6 */
                    }

                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }

    Scope (_SB)
    {
        Device (COEX)
        {
            Name (_HID, EisaId ("INT3519"))  // _HID: Hardware ID
            Name (_STR, Unicode ("CoExistence Manager"))  // _STR: Description String
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((COEM == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (_SB)
    {
        Processor (PR00, 0x00, 0x00001810, 0x06) {}
        Processor (PR01, 0x01, 0x00001810, 0x06) {}
        Processor (PR02, 0x02, 0x00001810, 0x06) {}
        Processor (PR03, 0x03, 0x00001810, 0x06) {}
        Processor (PR04, 0x04, 0x00001810, 0x06) {}
        Processor (PR05, 0x05, 0x00001810, 0x06) {}
        Processor (PR06, 0x06, 0x00001810, 0x06) {}
        Processor (PR07, 0x07, 0x00001810, 0x06) {}
        Processor (PR08, 0x08, 0x00001810, 0x06) {}
        Processor (PR09, 0x09, 0x00001810, 0x06) {}
        Processor (PR10, 0x0A, 0x00001810, 0x06) {}
        Processor (PR11, 0x0B, 0x00001810, 0x06) {}
        Processor (PR12, 0x0C, 0x00001810, 0x06) {}
        Processor (PR13, 0x0D, 0x00001810, 0x06) {}
        Processor (PR14, 0x0E, 0x00001810, 0x06) {}
        Processor (PR15, 0x0F, 0x00001810, 0x06) {}
        Processor (PR16, 0x10, 0x00001810, 0x06) {}
        Processor (PR17, 0x11, 0x00001810, 0x06) {}
        Processor (PR18, 0x12, 0x00001810, 0x06) {}
        Processor (PR19, 0x13, 0x00001810, 0x06) {}
        Processor (PR20, 0x14, 0x00001810, 0x06) {}
        Processor (PR21, 0x15, 0x00001810, 0x06) {}
        Processor (PR22, 0x16, 0x00001810, 0x06) {}
        Processor (PR23, 0x17, 0x00001810, 0x06) {}
    }

    Scope (_SB.PR00)
    {
        Name (CPC2, Package (0x15)
        {
            0x15, 
            0x02, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000771, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000000000CE, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x0000000000000771, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x0000000000000771, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x0000000000000771, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x01,               // Bit Offset
                    0x0000000000000777, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000770, // Address
                    0x04,               // Access Size
                    )
            }, 

            One, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x0A,               // Bit Width
                    0x20,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            Zero
        })
        Name (CPCP, Package (0x15)
        {
            0x15, 
            0x02, 
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000271, // Address
                    0x01,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000000000CE, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x0000000000000771, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x0000000000000771, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x0000000000000771, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x01,               // Bit Offset
                    0x0000000000000777, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000770, // Address
                    0x04,               // Access Size
                    )
            }, 

            One, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x0A,               // Bit Width
                    0x20,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            Zero
        })
    }

    Scope (_SB)
    {
        Device (PAGD)
        {
            Name (_HID, "ACPI000C" /* Processor Aggregator Device */)  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (_OSI ("Processor Aggregator Device"))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Name (_PUR, Package (0x02)  // _PUR: Processor Utilization Request
            {
                One, 
                Zero
            })
        }
    }

    Scope (_SB.PC00)
    {
        Device (PDRC)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (BUF0, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00008000,         // Address Length
                    _Y3F)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y40)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y41)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00000000,         // Address Length
                    _Y42)
                Memory32Fixed (ReadWrite,
                    0xFED20000,         // Address Base
                    0x00060000,         // Address Length
                    )
                Memory32Fixed (ReadOnly,
                    0xFED90000,         // Address Base
                    0x00004000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xFED45000,         // Address Base
                    0x0004B000,         // Address Length
                    )
                Memory32Fixed (ReadOnly,
                    0xFEE00000,         // Address Base
                    0x00100000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00000000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00000000,         // Address Length
                    _Y43)
            })
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                CreateDWordField (BUF0, \_SB.PC00.PDRC._Y3F._BAS, MBR0)  // _BAS: Base Address
                MBR0 = GMHB ()
                CreateDWordField (BUF0, \_SB.PC00.PDRC._Y40._BAS, DBR0)  // _BAS: Base Address
                DBR0 = GDMB ()
                CreateDWordField (BUF0, \_SB.PC00.PDRC._Y41._BAS, EBR0)  // _BAS: Base Address
                EBR0 = GEPB ()
                CreateDWordField (BUF0, \_SB.PC00.PDRC._Y42._BAS, XBR0)  // _BAS: Base Address
                XBR0 = GPCB ()
                CreateDWordField (BUF0, \_SB.PC00.PDRC._Y42._LEN, XSZ0)  // _LEN: Length
                XSZ0 = GPCL ()
                If (!HPTE)
                {
                    CreateDWordField (BUF0, \_SB.PC00.PDRC._Y43._BAS, HBAS)  // _BAS: Base Address
                    CreateDWordField (BUF0, \_SB.PC00.PDRC._Y43._LEN, HLEN)  // _LEN: Length
                    HBAS = HPTB /* \HPTB */
                    HLEN = 0x0400
                }

                Return (BUF0) /* \_SB_.PC00.PDRC.BUF0 */
            }
        }
    }

    Method (BRTN, 1, Serialized)
    {
        If (((DIDX & 0x0F0F) == 0x0400))
        {
            Notify (\_SB.PC00.GFX0.DD1F, Arg0)
        }

        If (((DIDY & 0x0F0F) == 0x0401))
        {
            Notify (\_SB.PC00.GFX0.DD2F, Arg0)
        }
    }

    Scope (_GPE)
    {
        Method (_L73, 0, Serialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
        }

        Method (_L69, 0, Serialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            If (CondRefOf (\_SB.PC00.TXHC))
            {
                If (CondRefOf (\_SB.PC01))
                {
                    If ((\_SB.PC01.TRP0.HPME () == One))
                    {
                        Notify (\_SB.PC00.TDM0, 0x02) // Device Wake
                        Notify (\_SB.PC01.TRP0, 0x02) // Device Wake
                    }

                    If ((\_SB.PC01.TRP1.HPME () == One))
                    {
                        Notify (\_SB.PC00.TDM0, 0x02) // Device Wake
                        Notify (\_SB.PC01.TRP1, 0x02) // Device Wake
                    }

                    If ((\_SB.PC01.TRP2.HPME () == One))
                    {
                        Notify (\_SB.PC00.TDM1, 0x02) // Device Wake
                        Notify (\_SB.PC01.TRP2, 0x02) // Device Wake
                    }

                    If ((\_SB.PC01.TRP3.HPME () == One))
                    {
                        Notify (\_SB.PC00.TDM1, 0x02) // Device Wake
                        Notify (\_SB.PC01.TRP3, 0x02) // Device Wake
                    }
                }
                Else
                {
                    If ((\_SB.PC00.TRP0.HPME () == One))
                    {
                        Notify (\_SB.PC00.TDM0, 0x02) // Device Wake
                        Notify (\_SB.PC00.TRP0, 0x02) // Device Wake
                    }

                    If ((\_SB.PC00.TRP1.HPME () == One))
                    {
                        Notify (\_SB.PC00.TDM0, 0x02) // Device Wake
                        Notify (\_SB.PC00.TRP1, 0x02) // Device Wake
                    }

                    If ((\_SB.PC00.TRP2.HPME () == One))
                    {
                        Notify (\_SB.PC00.TDM1, 0x02) // Device Wake
                        Notify (\_SB.PC00.TRP2, 0x02) // Device Wake
                    }

                    If ((\_SB.PC00.TRP3.HPME () == One))
                    {
                        Notify (\_SB.PC00.TDM1, 0x02) // Device Wake
                        Notify (\_SB.PC00.TRP3, 0x02) // Device Wake
                    }
                }
            }

            \_SB.PC00.RP01.HPME ()
            \_SB.PC00.RP02.HPME ()
            \_SB.PC00.RP03.HPME ()
            \_SB.PC00.RP04.HPME ()
            \_SB.PC00.RP05.HPME ()
            \_SB.PC00.RP06.HPME ()
            \_SB.PC00.RP07.HPME ()
            \_SB.PC00.RP08.HPME ()
            \_SB.PC00.RP09.HPME ()
            \_SB.PC00.RP10.HPME ()
            \_SB.PC00.RP11.HPME ()
            \_SB.PC00.RP12.HPME ()
            \_SB.PC00.RP13.HPME ()
            \_SB.PC00.RP14.HPME ()
            \_SB.PC00.RP15.HPME ()
            \_SB.PC00.RP16.HPME ()
            \_SB.PC00.RP17.HPME ()
            \_SB.PC00.RP18.HPME ()
            \_SB.PC00.RP19.HPME ()
            \_SB.PC00.RP20.HPME ()
            \_SB.PC00.RP21.HPME ()
            \_SB.PC00.RP22.HPME ()
            \_SB.PC00.RP23.HPME ()
            \_SB.PC00.RP24.HPME ()
            If ((D6F0 == One))
            {
                \_SB.PC00.PEG0.HPME ()
                Notify (\_SB.PC00.PEG0, 0x02) // Device Wake
                Notify (\_SB.PC00.PEG0.PEGP, 0x02) // Device Wake
            }

            If ((D1F0 == One))
            {
                \_SB.PC00.PEG1.HPME ()
                Notify (\_SB.PC00.PEG1, 0x02) // Device Wake
            }

            If ((D1F1 == One))
            {
                \_SB.PC00.PEG2.HPME ()
                Notify (\_SB.PC00.PEG2, 0x02) // Device Wake
            }

            If ((D1F2 == One))
            {
                If (CondRefOf (\_SB.PC00.PEG3))
                {
                    \_SB.PC00.PEG3.HPME ()
                    Notify (\_SB.PC00.PEG3, 0x02) // Device Wake
                }
            }
        }

        Method (_L61, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            L01C += One
            P8XH (Zero, One)
            P8XH (One, L01C)
            Sleep (0x64)
            If (CondRefOf (\_SB.PC00.TXHC))
            {
                If (CondRefOf (\_SB.PC01))
                {
                    \_SB.PC01.TRP0.HPEV ()
                    \_SB.PC01.TRP1.HPEV ()
                    \_SB.PC01.TRP2.HPEV ()
                    \_SB.PC01.TRP3.HPEV ()
                }
                Else
                {
                    \_SB.PC00.TRP0.HPEV ()
                    \_SB.PC00.TRP1.HPEV ()
                    \_SB.PC00.TRP2.HPEV ()
                    \_SB.PC00.TRP3.HPEV ()
                }
            }

            If ((PG0E == One))
            {
                \_SB.PC00.PEG0.HPEV ()
            }

            If ((PG1E == One))
            {
                \_SB.PC00.PEG1.HPEV ()
            }

            If ((PG2E == One))
            {
                \_SB.PC00.PEG2.HPEV ()
            }

            If ((PG3E == One))
            {
                \_SB.PC00.PEG3.HPEV ()
            }

            If (((\_SB.PC00.RP01.VDID != 0xFFFFFFFF) && \_SB.PC00.RP01.HPSX))
            {
                If (\_SB.PC00.RP01.PDCX)
                {
                    \_SB.PC00.RP01.PDCX = One
                    \_SB.PC00.RP01.HPSX = One
                    If (!\_SB.PC00.RP01.PDSX)
                    {
                        \_SB.PC00.RP01.L0SE = Zero
                    }

                    Notify (\_SB.PC00.RP01, Zero) // Bus Check
                }
                Else
                {
                    \_SB.PC00.RP01.HPSX = One
                }
            }

            If (((\_SB.PC00.RP02.VDID != 0xFFFFFFFF) && \_SB.PC00.RP02.HPSX))
            {
                If (\_SB.PC00.RP02.PDCX)
                {
                    \_SB.PC00.RP02.PDCX = One
                    \_SB.PC00.RP02.HPSX = One
                    If (!\_SB.PC00.RP02.PDSX)
                    {
                        \_SB.PC00.RP02.L0SE = Zero
                    }

                    Notify (\_SB.PC00.RP02, Zero) // Bus Check
                }
                Else
                {
                    \_SB.PC00.RP02.HPSX = One
                }
            }

            If (((\_SB.PC00.RP03.VDID != 0xFFFFFFFF) && \_SB.PC00.RP03.HPSX))
            {
                If (\_SB.PC00.RP03.PDCX)
                {
                    \_SB.PC00.RP03.PDCX = One
                    \_SB.PC00.RP03.HPSX = One
                    If (!\_SB.PC00.RP03.PDSX)
                    {
                        \_SB.PC00.RP03.L0SE = Zero
                    }

                    Notify (\_SB.PC00.RP03, Zero) // Bus Check
                }
                Else
                {
                    \_SB.PC00.RP03.HPSX = One
                }
            }

            If (((\_SB.PC00.RP04.VDID != 0xFFFFFFFF) && \_SB.PC00.RP04.HPSX))
            {
                If (\_SB.PC00.RP04.PDCX)
                {
                    \_SB.PC00.RP04.PDCX = One
                    \_SB.PC00.RP04.HPSX = One
                    If (!\_SB.PC00.RP04.PDSX)
                    {
                        \_SB.PC00.RP04.L0SE = Zero
                    }

                    Notify (\_SB.PC00.RP04, Zero) // Bus Check
                }
                Else
                {
                    \_SB.PC00.RP04.HPSX = One
                }
            }

            If (((\_SB.PC00.RP05.VDID != 0xFFFFFFFF) && \_SB.PC00.RP05.HPSX))
            {
                If (\_SB.PC00.RP05.PDCX)
                {
                    \_SB.PC00.RP05.PDCX = One
                    \_SB.PC00.RP05.HPSX = One
                    If (!\_SB.PC00.RP05.PDSX)
                    {
                        \_SB.PC00.RP05.L0SE = Zero
                    }

                    Notify (\_SB.PC00.RP05, Zero) // Bus Check
                }
                Else
                {
                    \_SB.PC00.RP05.HPSX = One
                }
            }

            If (((\_SB.PC00.RP06.VDID != 0xFFFFFFFF) && \_SB.PC00.RP06.HPSX))
            {
                If (\_SB.PC00.RP06.PDCX)
                {
                    \_SB.PC00.RP06.PDCX = One
                    \_SB.PC00.RP06.HPSX = One
                    If (!\_SB.PC00.RP06.PDSX)
                    {
                        \_SB.PC00.RP06.L0SE = Zero
                    }

                    Notify (\_SB.PC00.RP06, Zero) // Bus Check
                }
                Else
                {
                    \_SB.PC00.RP06.HPSX = One
                }
            }

            If (((\_SB.PC00.RP07.VDID != 0xFFFFFFFF) && \_SB.PC00.RP07.HPSX))
            {
                If (\_SB.PC00.RP07.PDCX)
                {
                    \_SB.PC00.RP07.PDCX = One
                    \_SB.PC00.RP07.HPSX = One
                    If (!\_SB.PC00.RP07.PDSX)
                    {
                        \_SB.PC00.RP07.L0SE = Zero
                    }

                    If ((PFLV == 0x02))
                    {
                        Notify (\_SB.PC00.RP07, Zero) // Bus Check
                    }
                }
                Else
                {
                    \_SB.PC00.RP07.HPSX = One
                }
            }

            If (((\_SB.PC00.RP08.VDID != 0xFFFFFFFF) && \_SB.PC00.RP08.HPSX))
            {
                If (\_SB.PC00.RP08.PDCX)
                {
                    \_SB.PC00.RP08.PDCX = One
                    \_SB.PC00.RP08.HPSX = One
                    If (!\_SB.PC00.RP08.PDSX)
                    {
                        \_SB.PC00.RP08.L0SE = Zero
                    }

                    If ((PFLV == 0x02))
                    {
                        Notify (\_SB.PC00.RP08, Zero) // Bus Check
                    }
                }
                Else
                {
                    \_SB.PC00.RP08.HPSX = One
                }
            }

            If (((\_SB.PC00.RP09.VDID != 0xFFFFFFFF) && \_SB.PC00.RP09.HPSX))
            {
                If (\_SB.PC00.RP09.PDCX)
                {
                    \_SB.PC00.RP09.PDCX = One
                    \_SB.PC00.RP09.HPSX = One
                    If (!\_SB.PC00.RP09.PDSX)
                    {
                        \_SB.PC00.RP09.L0SE = Zero
                    }

                    Notify (\_SB.PC00.RP09, Zero) // Bus Check
                }
                Else
                {
                    \_SB.PC00.RP09.HPSX = One
                }
            }

            If (((\_SB.PC00.RP10.VDID != 0xFFFFFFFF) && \_SB.PC00.RP10.HPSX))
            {
                If (\_SB.PC00.RP10.PDCX)
                {
                    \_SB.PC00.RP10.PDCX = One
                    \_SB.PC00.RP10.HPSX = One
                    If (!\_SB.PC00.RP10.PDSX)
                    {
                        \_SB.PC00.RP10.L0SE = Zero
                    }

                    Notify (\_SB.PC00.RP10, Zero) // Bus Check
                }
                Else
                {
                    \_SB.PC00.RP10.HPSX = One
                }
            }

            If (((\_SB.PC00.RP11.VDID != 0xFFFFFFFF) && \_SB.PC00.RP11.HPSX))
            {
                If (\_SB.PC00.RP11.PDCX)
                {
                    \_SB.PC00.RP11.PDCX = One
                    \_SB.PC00.RP11.HPSX = One
                    If (!\_SB.PC00.RP11.PDSX)
                    {
                        \_SB.PC00.RP11.L0SE = Zero
                    }

                    Notify (\_SB.PC00.RP11, Zero) // Bus Check
                }
                Else
                {
                    \_SB.PC00.RP11.HPSX = One
                }
            }

            If (((\_SB.PC00.RP12.VDID != 0xFFFFFFFF) && \_SB.PC00.RP12.HPSX))
            {
                If (\_SB.PC00.RP12.PDCX)
                {
                    \_SB.PC00.RP12.PDCX = One
                    \_SB.PC00.RP12.HPSX = One
                    If (!\_SB.PC00.RP12.PDSX)
                    {
                        \_SB.PC00.RP12.L0SE = Zero
                    }

                    Notify (\_SB.PC00.RP12, Zero) // Bus Check
                }
                Else
                {
                    \_SB.PC00.RP12.HPSX = One
                }
            }

            If (((\_SB.PC00.RP13.VDID != 0xFFFFFFFF) && \_SB.PC00.RP13.HPSX))
            {
                If (\_SB.PC00.RP13.PDCX)
                {
                    \_SB.PC00.RP13.PDCX = One
                    \_SB.PC00.RP13.HPSX = One
                    If (!\_SB.PC00.RP13.PDSX)
                    {
                        \_SB.PC00.RP13.L0SE = Zero
                    }

                    Notify (\_SB.PC00.RP13, Zero) // Bus Check
                }
                Else
                {
                    \_SB.PC00.RP13.HPSX = One
                }
            }

            If (((\_SB.PC00.RP14.VDID != 0xFFFFFFFF) && \_SB.PC00.RP14.HPSX))
            {
                If (\_SB.PC00.RP14.PDCX)
                {
                    \_SB.PC00.RP14.PDCX = One
                    \_SB.PC00.RP14.HPSX = One
                    If (!\_SB.PC00.RP14.PDSX)
                    {
                        \_SB.PC00.RP14.L0SE = Zero
                    }

                    Notify (\_SB.PC00.RP14, Zero) // Bus Check
                }
                Else
                {
                    \_SB.PC00.RP14.HPSX = One
                }
            }

            If (((\_SB.PC00.RP15.VDID != 0xFFFFFFFF) && \_SB.PC00.RP15.HPSX))
            {
                If (\_SB.PC00.RP15.PDCX)
                {
                    \_SB.PC00.RP15.PDCX = One
                    \_SB.PC00.RP15.HPSX = One
                    If (!\_SB.PC00.RP15.PDSX)
                    {
                        \_SB.PC00.RP15.L0SE = Zero
                    }

                    Notify (\_SB.PC00.RP15, Zero) // Bus Check
                }
                Else
                {
                    \_SB.PC00.RP15.HPSX = One
                }
            }

            If (((\_SB.PC00.RP16.VDID != 0xFFFFFFFF) && \_SB.PC00.RP16.HPSX))
            {
                If (\_SB.PC00.RP16.PDCX)
                {
                    \_SB.PC00.RP16.PDCX = One
                    \_SB.PC00.RP16.HPSX = One
                    If (!\_SB.PC00.RP16.PDSX)
                    {
                        \_SB.PC00.RP16.L0SE = Zero
                    }

                    Notify (\_SB.PC00.RP16, Zero) // Bus Check
                }
                Else
                {
                    \_SB.PC00.RP16.HPSX = One
                }
            }

            If (((\_SB.PC00.RP17.VDID != 0xFFFFFFFF) && \_SB.PC00.RP17.HPSX))
            {
                If (\_SB.PC00.RP17.PDCX)
                {
                    \_SB.PC00.RP17.PDCX = One
                    \_SB.PC00.RP17.HPSX = One
                    If (!\_SB.PC00.RP17.PDSX)
                    {
                        \_SB.PC00.RP17.L0SE = Zero
                    }

                    Notify (\_SB.PC00.RP17, Zero) // Bus Check
                }
                Else
                {
                    \_SB.PC00.RP17.HPSX = One
                }
            }

            If (((\_SB.PC00.RP18.VDID != 0xFFFFFFFF) && \_SB.PC00.RP18.HPSX))
            {
                If (\_SB.PC00.RP18.PDCX)
                {
                    \_SB.PC00.RP18.PDCX = One
                    \_SB.PC00.RP18.HPSX = One
                    If (!\_SB.PC00.RP18.PDSX)
                    {
                        \_SB.PC00.RP18.L0SE = Zero
                    }

                    Notify (\_SB.PC00.RP18, Zero) // Bus Check
                }
                Else
                {
                    \_SB.PC00.RP18.HPSX = One
                }
            }

            If (((\_SB.PC00.RP19.VDID != 0xFFFFFFFF) && \_SB.PC00.RP19.HPSX))
            {
                If (\_SB.PC00.RP19.PDCX)
                {
                    \_SB.PC00.RP19.PDCX = One
                    \_SB.PC00.RP19.HPSX = One
                    If (!\_SB.PC00.RP19.PDSX)
                    {
                        \_SB.PC00.RP19.L0SE = Zero
                    }

                    Notify (\_SB.PC00.RP19, Zero) // Bus Check
                }
                Else
                {
                    \_SB.PC00.RP19.HPSX = One
                }
            }

            If (((\_SB.PC00.RP20.VDID != 0xFFFFFFFF) && \_SB.PC00.RP20.HPSX))
            {
                If (\_SB.PC00.RP20.PDCX)
                {
                    \_SB.PC00.RP20.PDCX = One
                    \_SB.PC00.RP20.HPSX = One
                    If (!\_SB.PC00.RP20.PDSX)
                    {
                        \_SB.PC00.RP20.L0SE = Zero
                    }

                    Notify (\_SB.PC00.RP20, Zero) // Bus Check
                }
                Else
                {
                    \_SB.PC00.RP20.HPSX = One
                }
            }

            If (((\_SB.PC00.RP21.VDID != 0xFFFFFFFF) && \_SB.PC00.RP21.HPSX))
            {
                If (\_SB.PC00.RP21.PDCX)
                {
                    \_SB.PC00.RP21.PDCX = One
                    \_SB.PC00.RP21.HPSX = One
                    If (!\_SB.PC00.RP21.PDSX)
                    {
                        \_SB.PC00.RP21.L0SE = Zero
                    }

                    Notify (\_SB.PC00.RP21, Zero) // Bus Check
                }
                Else
                {
                    \_SB.PC00.RP21.HPSX = One
                }
            }

            If (((\_SB.PC00.RP22.VDID != 0xFFFFFFFF) && \_SB.PC00.RP22.HPSX))
            {
                If (\_SB.PC00.RP22.PDCX)
                {
                    \_SB.PC00.RP22.PDCX = One
                    \_SB.PC00.RP22.HPSX = One
                    If (!\_SB.PC00.RP22.PDSX)
                    {
                        \_SB.PC00.RP22.L0SE = Zero
                    }

                    Notify (\_SB.PC00.RP22, Zero) // Bus Check
                }
                Else
                {
                    \_SB.PC00.RP22.HPSX = One
                }
            }

            If (((\_SB.PC00.RP23.VDID != 0xFFFFFFFF) && \_SB.PC00.RP23.HPSX))
            {
                If (\_SB.PC00.RP23.PDCX)
                {
                    \_SB.PC00.RP23.PDCX = One
                    \_SB.PC00.RP23.HPSX = One
                    If (!\_SB.PC00.RP23.PDSX)
                    {
                        \_SB.PC00.RP23.L0SE = Zero
                    }

                    Notify (\_SB.PC00.RP23, Zero) // Bus Check
                }
                Else
                {
                    \_SB.PC00.RP23.HPSX = One
                }
            }

            If (((\_SB.PC00.RP24.VDID != 0xFFFFFFFF) && \_SB.PC00.RP24.HPSX))
            {
                If (\_SB.PC00.RP24.PDCX)
                {
                    \_SB.PC00.RP24.PDCX = One
                    \_SB.PC00.RP24.HPSX = One
                    If (!\_SB.PC00.RP24.PDSX)
                    {
                        \_SB.PC00.RP24.L0SE = Zero
                    }

                    Notify (\_SB.PC00.RP24, Zero) // Bus Check
                }
                Else
                {
                    \_SB.PC00.RP24.HPSX = One
                }
            }
        }

        Method (_L62, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            GPEC = Zero
            If (CondRefOf (\_SB.DTSE))
            {
                If ((\_SB.DTSE >= One))
                {
                    If ((\_SB.DTSI == One))
                    {
                        Notify (\_TZ.TZ00, 0x80) // Status Change
                        \_SB.DTSI = Zero
                    }
                }
            }
        }

        Method (_L66, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            If ((\_SB.PC00.GFX0.GSSE && !GSMI))
            {
                \_SB.PC00.GFX0.GSCI ()
            }
        }

        Name (PRES, One)
        Method (_L6F, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            If (CondRefOf (\_GPE.AL6F))
            {
                AL6F ()
            }

            If ((CPRT == One))
            {
                If ((SGGP == One))
                {
                    If (CondRefOf (\_GPE.P0L6))
                    {
                        P0L6 ()
                    }
                }

                If ((P1GP == One))
                {
                    If (CondRefOf (\_GPE.P1L6))
                    {
                        P1L6 ()
                    }
                }

                If ((P2GP == One))
                {
                    If (CondRefOf (\_GPE.P2L6))
                    {
                        P2L6 ()
                    }
                }

                If ((P3GP == One))
                {
                    If (CondRefOf (\_GPE.P3L6))
                    {
                        P3L6 ()
                    }
                }
            }
        }

        Method (_L72, 0, Serialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            If (CondRefOf (\_SB.AWAC))
            {
                \_SB.AWAC.WAST = One
                Notify (\_SB.AWAC, 0x02) // Device Wake
            }
        }

        Method (_E21, 0, NotSerialized)  // _Exx: Edge-Triggered GPE, xx=0x00-0xFF
        {
            Sleep (0x64)
            P80B = 0x21
            Notify (\_SB.PC00.PEG1.PEGP, 0x81) // Information Change
        }

        Method (_E24, 0, NotSerialized)  // _Exx: Edge-Triggered GPE, xx=0x00-0xFF
        {
            Sleep (0x64)
            P80B = 0x24
            Notify (\_SB.PC00.PEG1.PEGP, 0x81) // Information Change
        }
    }

    Method (GMIO, 2, Serialized)
    {
        OperationRegion (PXCS, SystemMemory, \_SB.PC00.PC2M (Arg0), 0x20)
        Field (PXCS, AnyAcc, NoLock, Preserve)
        {
            Offset (0x18), 
            PBUS,   8, 
            SBUS,   8
        }

        Local0 = \_SB.PC00.GPCB ()
        Local0 += ((Arg1 & 0x001F0000) >> One)
        Local0 += ((Arg1 & 0x07) << 0x0C)
        Local0 += (SBUS << 0x14)
        Return (Local0)
    }

    Scope (_SB.PC00.RP01.PXSX)
    {
        OperationRegion (RPXX, SystemMemory, GMIO (^_ADR (), _ADR), 0x10)
        Field (RPXX, AnyAcc, NoLock, Preserve)
        {
            VDID,   32
        }

        OperationRegion (FLDR, SystemMemory, (GMIO (^_ADR (), _ADR) + 0x44), 0x06)
        Field (FLDR, ByteAcc, NoLock, Preserve)
        {
            DCAP,   32, 
            DCTR,   16
        }

        Method (WIST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x095A8086)
                    {
                        Return (One)
                    }
                    Case (0x095B8086)
                    {
                        Return (One)
                    }
                    Case (0x31658086)
                    {
                        Return (One)
                    }
                    Case (0x31668086)
                    {
                        Return (One)
                    }
                    Case (0x08B18086)
                    {
                        Return (One)
                    }
                    Case (0x08B28086)
                    {
                        Return (One)
                    }
                    Case (0x08B38086)
                    {
                        Return (One)
                    }
                    Case (0x08B48086)
                    {
                        Return (One)
                    }
                    Case (0x24F38086)
                    {
                        Return (One)
                    }
                    Case (0x24F48086)
                    {
                        Return (One)
                    }
                    Case (0x24F58086)
                    {
                        Return (One)
                    }
                    Case (0x24F68086)
                    {
                        Return (One)
                    }
                    Case (0x24FD8086)
                    {
                        Return (One)
                    }
                    Case (0x24FB8086)
                    {
                        Return (One)
                    }
                    Case (0x25268086)
                    {
                        Return (One)
                    }
                    Case (0x271B8086)
                    {
                        Return (One)
                    }
                    Case (0x27238086)
                    {
                        Return (One)
                    }
                    Case (0x27258086)
                    {
                        Return (One)
                    }
                    Case (0x885210EC)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (WWST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x73608086)
                    {
                        Return (One)
                    }
                    Case (0x75608086)
                    {
                        Return (One)
                    }
                    Case (0x4D7514C3)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        If (WIST ())
        {
            PowerResource (WRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    If ((DCAP & 0x10000000))
                    {
                        Local0 = DCTR /* \_SB_.PC00.RP01.PXSX.DCTR */
                        Local0 |= 0x8000
                        DCTR = Local0
                    }
                }
            }

            Name (SPLX, Package (0x02)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (SPLC, 0, Serialized)
            {
                DerefOf (SPLX [One]) [Zero] = DOM1 /* \DOM1 */
                DerefOf (SPLX [One]) [One] = LIM1 /* \LIM1 */
                DerefOf (SPLX [One]) [0x02] = TIM1 /* \TIM1 */
                Return (SPLX) /* \_SB_.PC00.RP01.PXSX.SPLX */
            }

            Name (WANX, Package (0x03)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (WAND, 0, Serialized)
            {
                DerefOf (WANX [One]) [Zero] = Zero
                DerefOf (WANX [One]) [One] = TRD0 /* \TRD0 */
                DerefOf (WANX [One]) [0x02] = TRL0 /* \TRL0 */
                DerefOf (WANX [0x02]) [Zero] = One
                DerefOf (WANX [0x02]) [One] = TRD1 /* \TRD1 */
                DerefOf (WANX [0x02]) [0x02] = TRL1 /* \TRL1 */
                Return (WANX) /* \_SB_.PC00.RP01.PXSX.WANX */
            }

            Name (WRDX, Package (0x02)
            {
                Zero, 
                Package (0x02)
                {
                    0x80000000, 
                    0x8000
                }
            })
            Method (WRDD, 0, Serialized)
            {
                DerefOf (WRDX [One]) [Zero] = WDM1 /* \WDM1 */
                DerefOf (WRDX [One]) [One] = CID1 /* \CID1 */
                Return (WRDX) /* \_SB_.PC00.RP01.PXSX.WRDX */
            }

            Name (WRDY, Package (0x02)
            {
                One, 
                Package (0x18)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WRDS, 0, Serialized)
            {
                DerefOf (WRDY [One]) [One] = STXE /* \STXE */
                DerefOf (WRDY [One]) [0x02] = ST10 /* \ST10 */
                DerefOf (WRDY [One]) [0x03] = ST11 /* \ST11 */
                DerefOf (WRDY [One]) [0x04] = ST12 /* \ST12 */
                DerefOf (WRDY [One]) [0x05] = ST13 /* \ST13 */
                DerefOf (WRDY [One]) [0x06] = ST14 /* \ST14 */
                DerefOf (WRDY [One]) [0x07] = ST15 /* \ST15 */
                DerefOf (WRDY [One]) [0x08] = ST16 /* \ST16 */
                DerefOf (WRDY [One]) [0x09] = ST17 /* \ST17 */
                DerefOf (WRDY [One]) [0x0A] = ST18 /* \ST18 */
                DerefOf (WRDY [One]) [0x0B] = ST19 /* \ST19 */
                DerefOf (WRDY [One]) [0x0C] = ST50 /* \ST50 */
                DerefOf (WRDY [One]) [0x0D] = ST51 /* \ST51 */
                DerefOf (WRDY [One]) [0x0E] = ST52 /* \ST52 */
                DerefOf (WRDY [One]) [0x0F] = ST53 /* \ST53 */
                DerefOf (WRDY [One]) [0x10] = ST54 /* \ST54 */
                DerefOf (WRDY [One]) [0x11] = ST55 /* \ST55 */
                DerefOf (WRDY [One]) [0x12] = ST56 /* \ST56 */
                DerefOf (WRDY [One]) [0x13] = ST57 /* \ST57 */
                DerefOf (WRDY [One]) [0x14] = ST58 /* \ST58 */
                DerefOf (WRDY [One]) [0x15] = ST59 /* \ST59 */
                DerefOf (WRDY [One]) [0x16] = ST5A /* \ST5A */
                DerefOf (WRDY [One]) [0x17] = ST5B /* \ST5B */
                Return (WRDY) /* \_SB_.PC00.RP01.PXSX.WRDY */
            }

            Name (EWRY, Package (0x02)
            {
                One, 
                Package (0x45)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (EWRD, 0, Serialized)
            {
                DerefOf (EWRY [One]) [One] = STDE /* \STDE */
                DerefOf (EWRY [One]) [0x02] = STRS /* \STRS */
                DerefOf (EWRY [One]) [0x03] = ST20 /* \ST20 */
                DerefOf (EWRY [One]) [0x04] = ST21 /* \ST21 */
                DerefOf (EWRY [One]) [0x05] = ST22 /* \ST22 */
                DerefOf (EWRY [One]) [0x06] = ST23 /* \ST23 */
                DerefOf (EWRY [One]) [0x07] = ST24 /* \ST24 */
                DerefOf (EWRY [One]) [0x08] = ST25 /* \ST25 */
                DerefOf (EWRY [One]) [0x09] = ST26 /* \ST26 */
                DerefOf (EWRY [One]) [0x0A] = ST27 /* \ST27 */
                DerefOf (EWRY [One]) [0x0B] = ST28 /* \ST28 */
                DerefOf (EWRY [One]) [0x0C] = ST29 /* \ST29 */
                DerefOf (EWRY [One]) [0x0D] = ST60 /* \ST60 */
                DerefOf (EWRY [One]) [0x0E] = ST61 /* \ST61 */
                DerefOf (EWRY [One]) [0x0F] = ST62 /* \ST62 */
                DerefOf (EWRY [One]) [0x10] = ST63 /* \ST63 */
                DerefOf (EWRY [One]) [0x11] = ST64 /* \ST64 */
                DerefOf (EWRY [One]) [0x12] = ST65 /* \ST65 */
                DerefOf (EWRY [One]) [0x13] = ST66 /* \ST66 */
                DerefOf (EWRY [One]) [0x14] = ST67 /* \ST67 */
                DerefOf (EWRY [One]) [0x15] = ST68 /* \ST68 */
                DerefOf (EWRY [One]) [0x16] = ST69 /* \ST69 */
                DerefOf (EWRY [One]) [0x17] = ST6A /* \ST6A */
                DerefOf (EWRY [One]) [0x18] = ST6B /* \ST6B */
                DerefOf (EWRY [One]) [0x19] = ST30 /* \ST30 */
                DerefOf (EWRY [One]) [0x1A] = ST31 /* \ST31 */
                DerefOf (EWRY [One]) [0x1B] = ST32 /* \ST32 */
                DerefOf (EWRY [One]) [0x1C] = ST33 /* \ST33 */
                DerefOf (EWRY [One]) [0x1D] = ST34 /* \ST34 */
                DerefOf (EWRY [One]) [0x1E] = ST35 /* \ST35 */
                DerefOf (EWRY [One]) [0x1F] = ST36 /* \ST36 */
                DerefOf (EWRY [One]) [0x20] = ST37 /* \ST37 */
                DerefOf (EWRY [One]) [0x21] = ST38 /* \ST38 */
                DerefOf (EWRY [One]) [0x22] = ST39 /* \ST39 */
                DerefOf (EWRY [One]) [0x23] = ST70 /* \ST70 */
                DerefOf (EWRY [One]) [0x24] = ST71 /* \ST71 */
                DerefOf (EWRY [One]) [0x25] = ST72 /* \ST72 */
                DerefOf (EWRY [One]) [0x26] = ST73 /* \ST73 */
                DerefOf (EWRY [One]) [0x27] = ST74 /* \ST74 */
                DerefOf (EWRY [One]) [0x28] = ST75 /* \ST75 */
                DerefOf (EWRY [One]) [0x29] = ST76 /* \ST76 */
                DerefOf (EWRY [One]) [0x2A] = ST77 /* \ST77 */
                DerefOf (EWRY [One]) [0x2B] = ST78 /* \ST78 */
                DerefOf (EWRY [One]) [0x2C] = ST79 /* \ST79 */
                DerefOf (EWRY [One]) [0x2D] = ST7A /* \ST7A */
                DerefOf (EWRY [One]) [0x2E] = ST7B /* \ST7B */
                DerefOf (EWRY [One]) [0x2F] = ST40 /* \ST40 */
                DerefOf (EWRY [One]) [0x30] = ST41 /* \ST41 */
                DerefOf (EWRY [One]) [0x31] = ST42 /* \ST42 */
                DerefOf (EWRY [One]) [0x32] = ST43 /* \ST43 */
                DerefOf (EWRY [One]) [0x33] = ST44 /* \ST44 */
                DerefOf (EWRY [One]) [0x34] = ST45 /* \ST45 */
                DerefOf (EWRY [One]) [0x35] = ST46 /* \ST46 */
                DerefOf (EWRY [One]) [0x36] = ST47 /* \ST47 */
                DerefOf (EWRY [One]) [0x37] = ST48 /* \ST48 */
                DerefOf (EWRY [One]) [0x38] = ST49 /* \ST49 */
                DerefOf (EWRY [One]) [0x39] = ST80 /* \ST80 */
                DerefOf (EWRY [One]) [0x3A] = ST81 /* \ST81 */
                DerefOf (EWRY [One]) [0x3B] = ST82 /* \ST82 */
                DerefOf (EWRY [One]) [0x3C] = ST83 /* \ST83 */
                DerefOf (EWRY [One]) [0x3D] = ST84 /* \ST84 */
                DerefOf (EWRY [One]) [0x3E] = ST85 /* \ST85 */
                DerefOf (EWRY [One]) [0x3F] = ST86 /* \ST86 */
                DerefOf (EWRY [One]) [0x40] = ST87 /* \ST87 */
                DerefOf (EWRY [One]) [0x41] = ST88 /* \ST88 */
                DerefOf (EWRY [One]) [0x42] = ST89 /* \ST89 */
                DerefOf (EWRY [One]) [0x43] = ST8A /* \ST8A */
                DerefOf (EWRY [One]) [0x44] = ST8B /* \ST8B */
                Return (EWRY) /* \_SB_.PC00.RP01.PXSX.EWRY */
            }

            Name (WGDY, Package (0x02)
            {
                0x02, 
                Package (0x1C)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WGDS, 0, Serialized)
            {
                DerefOf (WGDY [One]) [One] = SD11 /* \SD11 */
                DerefOf (WGDY [One]) [0x02] = SD12 /* \SD12 */
                DerefOf (WGDY [One]) [0x03] = SD13 /* \SD13 */
                DerefOf (WGDY [One]) [0x04] = SD14 /* \SD14 */
                DerefOf (WGDY [One]) [0x05] = SD15 /* \SD15 */
                DerefOf (WGDY [One]) [0x06] = SD16 /* \SD16 */
                DerefOf (WGDY [One]) [0x07] = SD17 /* \SD17 */
                DerefOf (WGDY [One]) [0x08] = SD18 /* \SD18 */
                DerefOf (WGDY [One]) [0x09] = SD19 /* \SD19 */
                DerefOf (WGDY [One]) [0x0A] = SD21 /* \SD21 */
                DerefOf (WGDY [One]) [0x0B] = SD22 /* \SD22 */
                DerefOf (WGDY [One]) [0x0C] = SD23 /* \SD23 */
                DerefOf (WGDY [One]) [0x0D] = SD24 /* \SD24 */
                DerefOf (WGDY [One]) [0x0E] = SD25 /* \SD25 */
                DerefOf (WGDY [One]) [0x0F] = SD26 /* \SD26 */
                DerefOf (WGDY [One]) [0x10] = SD27 /* \SD27 */
                DerefOf (WGDY [One]) [0x11] = SD28 /* \SD28 */
                DerefOf (WGDY [One]) [0x12] = SD29 /* \SD29 */
                DerefOf (WGDY [One]) [0x13] = SD31 /* \SD31 */
                DerefOf (WGDY [One]) [0x14] = SD32 /* \SD32 */
                DerefOf (WGDY [One]) [0x15] = SD33 /* \SD33 */
                DerefOf (WGDY [One]) [0x16] = SD34 /* \SD34 */
                DerefOf (WGDY [One]) [0x17] = SD35 /* \SD35 */
                DerefOf (WGDY [One]) [0x18] = SD36 /* \SD36 */
                DerefOf (WGDY [One]) [0x19] = SD37 /* \SD37 */
                DerefOf (WGDY [One]) [0x1A] = SD38 /* \SD38 */
                DerefOf (WGDY [One]) [0x1B] = SD39 /* \SD39 */
                Return (WGDY) /* \_SB_.PC00.RP01.PXSX.WGDY */
            }

            Name (ECKY, Package (0x02)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    Zero
                }
            })
            Method (ECKV, 0, Serialized)
            {
                DerefOf (ECKY [One]) [One] = CECV /* \CECV */
                Return (ECKY) /* \_SB_.PC00.RP01.PXSX.ECKY */
            }

            Name (PPAY, Package (0x02)
            {
                One, 
                Package (0x18)
                {
                    0x07, 
                    Zero, 
                    0x18, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x18, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28
                }
            })
            Method (PPAG, 0, Serialized)
            {
                DerefOf (PPAY [One]) [One] = WAGE /* \WAGE */
                DerefOf (PPAY [One]) [0x02] = AGA1 /* \AGA1 */
                DerefOf (PPAY [One]) [0x03] = AGA2 /* \AGA2 */
                DerefOf (PPAY [One]) [0x04] = AGA3 /* \AGA3 */
                DerefOf (PPAY [One]) [0x05] = AGA4 /* \AGA4 */
                DerefOf (PPAY [One]) [0x06] = AGA5 /* \AGA5 */
                DerefOf (PPAY [One]) [0x07] = AGA6 /* \AGA6 */
                DerefOf (PPAY [One]) [0x08] = AGA7 /* \AGA7 */
                DerefOf (PPAY [One]) [0x09] = AGA8 /* \AGA8 */
                DerefOf (PPAY [One]) [0x0A] = AGA9 /* \AGA9 */
                DerefOf (PPAY [One]) [0x0B] = AGAA /* \AGAA */
                DerefOf (PPAY [One]) [0x0C] = AGAB /* \AGAB */
                DerefOf (PPAY [One]) [0x0D] = AGB1 /* \AGB1 */
                DerefOf (PPAY [One]) [0x0E] = AGB2 /* \AGB2 */
                DerefOf (PPAY [One]) [0x0F] = AGB3 /* \AGB3 */
                DerefOf (PPAY [One]) [0x10] = AGB4 /* \AGB4 */
                DerefOf (PPAY [One]) [0x11] = AGB5 /* \AGB5 */
                DerefOf (PPAY [One]) [0x12] = AGB6 /* \AGB6 */
                DerefOf (PPAY [One]) [0x13] = AGB7 /* \AGB7 */
                DerefOf (PPAY [One]) [0x14] = AGB8 /* \AGB8 */
                DerefOf (PPAY [One]) [0x15] = AGB9 /* \AGB9 */
                DerefOf (PPAY [One]) [0x16] = AGBA /* \AGBA */
                DerefOf (PPAY [One]) [0x17] = AGBB /* \AGBB */
                Return (PPAY) /* \_SB_.PC00.RP01.PXSX.PPAY */
            }

            Name (SADX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    0x80000000
                }, 

                Package (0x02)
                {
                    0x12, 
                    0x80000000
                }
            })
            Method (SADS, 0, Serialized)
            {
                DerefOf (SADX [One]) [One] = ATDV /* \ATDV */
                DerefOf (SADX [0x02]) [One] = ATDV /* \ATDV */
                Return (SADX) /* \_SB_.PC00.RP01.PXSX.SADX */
            }

            Name (GPCX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }, 

                Package (0x02)
                {
                    0x12, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }
            })
            Method (GPC, 0, Serialized)
            {
                Return (GPCX) /* \_SB_.PC00.RP01.PXSX.GPCX */
            }
        }

        If (((WWEN != Zero) && (WWRP == SLOT)))
        {
            Method (SHRF, 0, NotSerialized)
            {
                PSD0 (SLOT)
                SPCO (WCLK, One)
                SGOV (WFCP, PFCP)
                Sleep (TN2B)
                SGOV (WBRS, (~PBRS & One))
                Sleep (TB2R)
                SGOV (PRST, (~WPRP & One))
                L23D ()
            }

            Method (_RST, 0, Serialized)  // _RST: Device Reset
            {
                If ((WWEN == 0x02))
                {
                    Local0 = Acquire (WWMT, 0x03E8)
                    If ((Local0 == Zero))
                    {
                        ADBG ("Start WWAN FLDR")
                        DL23 ()
                        SGOV (WBRS, PBRS)
                        Sleep (TBTG)
                        SHRF ()
                        ADBG ("End WWAN FLDR")
                        Release (WWMT)
                    }
                }
                Else
                {
                    SGOV (WBRS, PBRS)
                    Sleep (0xC8)
                    Notify (PXSX, One) // Device Check
                    SGOV (PRST, (~WPRP & One))
                    SGOV (WBRS, (~PBRS & One))
                    Sleep (0xC8)
                    Local0 = Zero
                    While ((LASX == Zero))
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    Sleep (0x0A)
                    Notify (PXSX, One) // Device Check
                }
            }

            PowerResource (MRST, 0x05, 0x0000)
            {
                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    Return (One)
                }

                Method (_ON, 0, Serialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                {
                }

                Method (_RST, 0, Serialized)  // _RST: Device Reset
                {
                    Local0 = Acquire (WWMT, 0x03E8)
                    If ((Local0 == Zero))
                    {
                        ADBG ("Start WWAN PR _RST")
                        DL23 ()
                        SGOV (WBRS, PBRS)
                        SPCO (WCLK, Zero)
                        Sleep (TB2F)
                        SGOV (WFCP, (~PFCP & One))
                        Sleep (TFDI)
                        SHRF ()
                        Release (WWMT)
                    }
                }
            }
        }

        If ((WIST () || ((WWEN != Zero) && (WWRP == SLOT))))
        {
            PowerResource (DRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    If ((DCAP & 0x10000000))
                    {
                        Local0 = DCTR /* \_SB_.PC00.RP01.PXSX.DCTR */
                        Local0 |= 0x8000
                        DCTR = Local0
                    }
                }
            }

            Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
            {
                If (WIST ())
                {
                    If (CondRefOf (WRST))
                    {
                        Return (Package (0x01)
                        {
                            WRST
                        })
                    }
                }

                If (((WWEN != Zero) && (WWRP == SLOT)))
                {
                    If (CondRefOf (MRST))
                    {
                        Return (Package (0x01)
                        {
                            MRST
                        })
                    }
                }

                Return (Package (0x01)
                {
                    DRST
                })
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (WIST ())
                {
                    If ((Arg0 == ToUUID ("f21202bf-8f78-4dc6-a5b3-1f738e285ade") /* Unknown UUID */))
                    {
                        If ((Arg2 == Zero))
                        {
                            If ((Arg1 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x0F                                             // .
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }
                        }

                        If ((Arg2 == One))
                        {
                            Local0 = ACSD /* \ACSD */
                            Return (Local0)
                        }

                        If ((Arg2 == 0x02))
                        {
                            Local0 = I5BS /* \I5BS */
                            Return (Local0)
                        }

                        If ((Arg2 == 0x03))
                        {
                            Local0 = UHBS /* \UHBS */
                            Return (Local0)
                        }

                        Return (Zero)
                    }
                }

                If (((WWEN != Zero) && (WWRP == SLOT)))
                {
                    If ((Arg0 == ToUUID ("bad01b75-22a8-4f48-8792-bdde9467747d") /* Unknown UUID */))
                    {
                        If ((Arg2 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x09                                             // .
                            })
                        }

                        If ((Arg2 == One)) {}
                        If ((Arg2 == 0x02)) {}
                        If ((Arg2 == 0x03))
                        {
                            If ((WRTO == One)) {}
                            ElseIf ((WRTO == 0x03)) {}
                            Else
                            {
                            }

                            Return (WRTO) /* \WRTO */
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }

    Scope (_SB.PC00.RP02.PXSX)
    {
        OperationRegion (RPXX, SystemMemory, GMIO (^_ADR (), _ADR), 0x10)
        Field (RPXX, AnyAcc, NoLock, Preserve)
        {
            VDID,   32
        }

        OperationRegion (FLDR, SystemMemory, (GMIO (^_ADR (), _ADR) + 0x44), 0x06)
        Field (FLDR, ByteAcc, NoLock, Preserve)
        {
            DCAP,   32, 
            DCTR,   16
        }

        Method (WIST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x095A8086)
                    {
                        Return (One)
                    }
                    Case (0x095B8086)
                    {
                        Return (One)
                    }
                    Case (0x31658086)
                    {
                        Return (One)
                    }
                    Case (0x31668086)
                    {
                        Return (One)
                    }
                    Case (0x08B18086)
                    {
                        Return (One)
                    }
                    Case (0x08B28086)
                    {
                        Return (One)
                    }
                    Case (0x08B38086)
                    {
                        Return (One)
                    }
                    Case (0x08B48086)
                    {
                        Return (One)
                    }
                    Case (0x24F38086)
                    {
                        Return (One)
                    }
                    Case (0x24F48086)
                    {
                        Return (One)
                    }
                    Case (0x24F58086)
                    {
                        Return (One)
                    }
                    Case (0x24F68086)
                    {
                        Return (One)
                    }
                    Case (0x24FD8086)
                    {
                        Return (One)
                    }
                    Case (0x24FB8086)
                    {
                        Return (One)
                    }
                    Case (0x25268086)
                    {
                        Return (One)
                    }
                    Case (0x271B8086)
                    {
                        Return (One)
                    }
                    Case (0x27238086)
                    {
                        Return (One)
                    }
                    Case (0x27258086)
                    {
                        Return (One)
                    }
                    Case (0x885210EC)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (WWST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x73608086)
                    {
                        Return (One)
                    }
                    Case (0x75608086)
                    {
                        Return (One)
                    }
                    Case (0x4D7514C3)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        If (WIST ())
        {
            PowerResource (WRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    If ((DCAP & 0x10000000))
                    {
                        Local0 = DCTR /* \_SB_.PC00.RP02.PXSX.DCTR */
                        Local0 |= 0x8000
                        DCTR = Local0
                    }
                }
            }

            Name (SPLX, Package (0x02)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (SPLC, 0, Serialized)
            {
                DerefOf (SPLX [One]) [Zero] = DOM1 /* \DOM1 */
                DerefOf (SPLX [One]) [One] = LIM1 /* \LIM1 */
                DerefOf (SPLX [One]) [0x02] = TIM1 /* \TIM1 */
                Return (SPLX) /* \_SB_.PC00.RP02.PXSX.SPLX */
            }

            Name (WANX, Package (0x03)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (WAND, 0, Serialized)
            {
                DerefOf (WANX [One]) [Zero] = Zero
                DerefOf (WANX [One]) [One] = TRD0 /* \TRD0 */
                DerefOf (WANX [One]) [0x02] = TRL0 /* \TRL0 */
                DerefOf (WANX [0x02]) [Zero] = One
                DerefOf (WANX [0x02]) [One] = TRD1 /* \TRD1 */
                DerefOf (WANX [0x02]) [0x02] = TRL1 /* \TRL1 */
                Return (WANX) /* \_SB_.PC00.RP02.PXSX.WANX */
            }

            Name (WRDX, Package (0x02)
            {
                Zero, 
                Package (0x02)
                {
                    0x80000000, 
                    0x8000
                }
            })
            Method (WRDD, 0, Serialized)
            {
                DerefOf (WRDX [One]) [Zero] = WDM1 /* \WDM1 */
                DerefOf (WRDX [One]) [One] = CID1 /* \CID1 */
                Return (WRDX) /* \_SB_.PC00.RP02.PXSX.WRDX */
            }

            Name (WRDY, Package (0x02)
            {
                One, 
                Package (0x18)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WRDS, 0, Serialized)
            {
                DerefOf (WRDY [One]) [One] = STXE /* \STXE */
                DerefOf (WRDY [One]) [0x02] = ST10 /* \ST10 */
                DerefOf (WRDY [One]) [0x03] = ST11 /* \ST11 */
                DerefOf (WRDY [One]) [0x04] = ST12 /* \ST12 */
                DerefOf (WRDY [One]) [0x05] = ST13 /* \ST13 */
                DerefOf (WRDY [One]) [0x06] = ST14 /* \ST14 */
                DerefOf (WRDY [One]) [0x07] = ST15 /* \ST15 */
                DerefOf (WRDY [One]) [0x08] = ST16 /* \ST16 */
                DerefOf (WRDY [One]) [0x09] = ST17 /* \ST17 */
                DerefOf (WRDY [One]) [0x0A] = ST18 /* \ST18 */
                DerefOf (WRDY [One]) [0x0B] = ST19 /* \ST19 */
                DerefOf (WRDY [One]) [0x0C] = ST50 /* \ST50 */
                DerefOf (WRDY [One]) [0x0D] = ST51 /* \ST51 */
                DerefOf (WRDY [One]) [0x0E] = ST52 /* \ST52 */
                DerefOf (WRDY [One]) [0x0F] = ST53 /* \ST53 */
                DerefOf (WRDY [One]) [0x10] = ST54 /* \ST54 */
                DerefOf (WRDY [One]) [0x11] = ST55 /* \ST55 */
                DerefOf (WRDY [One]) [0x12] = ST56 /* \ST56 */
                DerefOf (WRDY [One]) [0x13] = ST57 /* \ST57 */
                DerefOf (WRDY [One]) [0x14] = ST58 /* \ST58 */
                DerefOf (WRDY [One]) [0x15] = ST59 /* \ST59 */
                DerefOf (WRDY [One]) [0x16] = ST5A /* \ST5A */
                DerefOf (WRDY [One]) [0x17] = ST5B /* \ST5B */
                Return (WRDY) /* \_SB_.PC00.RP02.PXSX.WRDY */
            }

            Name (EWRY, Package (0x02)
            {
                One, 
                Package (0x45)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (EWRD, 0, Serialized)
            {
                DerefOf (EWRY [One]) [One] = STDE /* \STDE */
                DerefOf (EWRY [One]) [0x02] = STRS /* \STRS */
                DerefOf (EWRY [One]) [0x03] = ST20 /* \ST20 */
                DerefOf (EWRY [One]) [0x04] = ST21 /* \ST21 */
                DerefOf (EWRY [One]) [0x05] = ST22 /* \ST22 */
                DerefOf (EWRY [One]) [0x06] = ST23 /* \ST23 */
                DerefOf (EWRY [One]) [0x07] = ST24 /* \ST24 */
                DerefOf (EWRY [One]) [0x08] = ST25 /* \ST25 */
                DerefOf (EWRY [One]) [0x09] = ST26 /* \ST26 */
                DerefOf (EWRY [One]) [0x0A] = ST27 /* \ST27 */
                DerefOf (EWRY [One]) [0x0B] = ST28 /* \ST28 */
                DerefOf (EWRY [One]) [0x0C] = ST29 /* \ST29 */
                DerefOf (EWRY [One]) [0x0D] = ST60 /* \ST60 */
                DerefOf (EWRY [One]) [0x0E] = ST61 /* \ST61 */
                DerefOf (EWRY [One]) [0x0F] = ST62 /* \ST62 */
                DerefOf (EWRY [One]) [0x10] = ST63 /* \ST63 */
                DerefOf (EWRY [One]) [0x11] = ST64 /* \ST64 */
                DerefOf (EWRY [One]) [0x12] = ST65 /* \ST65 */
                DerefOf (EWRY [One]) [0x13] = ST66 /* \ST66 */
                DerefOf (EWRY [One]) [0x14] = ST67 /* \ST67 */
                DerefOf (EWRY [One]) [0x15] = ST68 /* \ST68 */
                DerefOf (EWRY [One]) [0x16] = ST69 /* \ST69 */
                DerefOf (EWRY [One]) [0x17] = ST6A /* \ST6A */
                DerefOf (EWRY [One]) [0x18] = ST6B /* \ST6B */
                DerefOf (EWRY [One]) [0x19] = ST30 /* \ST30 */
                DerefOf (EWRY [One]) [0x1A] = ST31 /* \ST31 */
                DerefOf (EWRY [One]) [0x1B] = ST32 /* \ST32 */
                DerefOf (EWRY [One]) [0x1C] = ST33 /* \ST33 */
                DerefOf (EWRY [One]) [0x1D] = ST34 /* \ST34 */
                DerefOf (EWRY [One]) [0x1E] = ST35 /* \ST35 */
                DerefOf (EWRY [One]) [0x1F] = ST36 /* \ST36 */
                DerefOf (EWRY [One]) [0x20] = ST37 /* \ST37 */
                DerefOf (EWRY [One]) [0x21] = ST38 /* \ST38 */
                DerefOf (EWRY [One]) [0x22] = ST39 /* \ST39 */
                DerefOf (EWRY [One]) [0x23] = ST70 /* \ST70 */
                DerefOf (EWRY [One]) [0x24] = ST71 /* \ST71 */
                DerefOf (EWRY [One]) [0x25] = ST72 /* \ST72 */
                DerefOf (EWRY [One]) [0x26] = ST73 /* \ST73 */
                DerefOf (EWRY [One]) [0x27] = ST74 /* \ST74 */
                DerefOf (EWRY [One]) [0x28] = ST75 /* \ST75 */
                DerefOf (EWRY [One]) [0x29] = ST76 /* \ST76 */
                DerefOf (EWRY [One]) [0x2A] = ST77 /* \ST77 */
                DerefOf (EWRY [One]) [0x2B] = ST78 /* \ST78 */
                DerefOf (EWRY [One]) [0x2C] = ST79 /* \ST79 */
                DerefOf (EWRY [One]) [0x2D] = ST7A /* \ST7A */
                DerefOf (EWRY [One]) [0x2E] = ST7B /* \ST7B */
                DerefOf (EWRY [One]) [0x2F] = ST40 /* \ST40 */
                DerefOf (EWRY [One]) [0x30] = ST41 /* \ST41 */
                DerefOf (EWRY [One]) [0x31] = ST42 /* \ST42 */
                DerefOf (EWRY [One]) [0x32] = ST43 /* \ST43 */
                DerefOf (EWRY [One]) [0x33] = ST44 /* \ST44 */
                DerefOf (EWRY [One]) [0x34] = ST45 /* \ST45 */
                DerefOf (EWRY [One]) [0x35] = ST46 /* \ST46 */
                DerefOf (EWRY [One]) [0x36] = ST47 /* \ST47 */
                DerefOf (EWRY [One]) [0x37] = ST48 /* \ST48 */
                DerefOf (EWRY [One]) [0x38] = ST49 /* \ST49 */
                DerefOf (EWRY [One]) [0x39] = ST80 /* \ST80 */
                DerefOf (EWRY [One]) [0x3A] = ST81 /* \ST81 */
                DerefOf (EWRY [One]) [0x3B] = ST82 /* \ST82 */
                DerefOf (EWRY [One]) [0x3C] = ST83 /* \ST83 */
                DerefOf (EWRY [One]) [0x3D] = ST84 /* \ST84 */
                DerefOf (EWRY [One]) [0x3E] = ST85 /* \ST85 */
                DerefOf (EWRY [One]) [0x3F] = ST86 /* \ST86 */
                DerefOf (EWRY [One]) [0x40] = ST87 /* \ST87 */
                DerefOf (EWRY [One]) [0x41] = ST88 /* \ST88 */
                DerefOf (EWRY [One]) [0x42] = ST89 /* \ST89 */
                DerefOf (EWRY [One]) [0x43] = ST8A /* \ST8A */
                DerefOf (EWRY [One]) [0x44] = ST8B /* \ST8B */
                Return (EWRY) /* \_SB_.PC00.RP02.PXSX.EWRY */
            }

            Name (WGDY, Package (0x02)
            {
                0x02, 
                Package (0x1C)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WGDS, 0, Serialized)
            {
                DerefOf (WGDY [One]) [One] = SD11 /* \SD11 */
                DerefOf (WGDY [One]) [0x02] = SD12 /* \SD12 */
                DerefOf (WGDY [One]) [0x03] = SD13 /* \SD13 */
                DerefOf (WGDY [One]) [0x04] = SD14 /* \SD14 */
                DerefOf (WGDY [One]) [0x05] = SD15 /* \SD15 */
                DerefOf (WGDY [One]) [0x06] = SD16 /* \SD16 */
                DerefOf (WGDY [One]) [0x07] = SD17 /* \SD17 */
                DerefOf (WGDY [One]) [0x08] = SD18 /* \SD18 */
                DerefOf (WGDY [One]) [0x09] = SD19 /* \SD19 */
                DerefOf (WGDY [One]) [0x0A] = SD21 /* \SD21 */
                DerefOf (WGDY [One]) [0x0B] = SD22 /* \SD22 */
                DerefOf (WGDY [One]) [0x0C] = SD23 /* \SD23 */
                DerefOf (WGDY [One]) [0x0D] = SD24 /* \SD24 */
                DerefOf (WGDY [One]) [0x0E] = SD25 /* \SD25 */
                DerefOf (WGDY [One]) [0x0F] = SD26 /* \SD26 */
                DerefOf (WGDY [One]) [0x10] = SD27 /* \SD27 */
                DerefOf (WGDY [One]) [0x11] = SD28 /* \SD28 */
                DerefOf (WGDY [One]) [0x12] = SD29 /* \SD29 */
                DerefOf (WGDY [One]) [0x13] = SD31 /* \SD31 */
                DerefOf (WGDY [One]) [0x14] = SD32 /* \SD32 */
                DerefOf (WGDY [One]) [0x15] = SD33 /* \SD33 */
                DerefOf (WGDY [One]) [0x16] = SD34 /* \SD34 */
                DerefOf (WGDY [One]) [0x17] = SD35 /* \SD35 */
                DerefOf (WGDY [One]) [0x18] = SD36 /* \SD36 */
                DerefOf (WGDY [One]) [0x19] = SD37 /* \SD37 */
                DerefOf (WGDY [One]) [0x1A] = SD38 /* \SD38 */
                DerefOf (WGDY [One]) [0x1B] = SD39 /* \SD39 */
                Return (WGDY) /* \_SB_.PC00.RP02.PXSX.WGDY */
            }

            Name (ECKY, Package (0x02)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    Zero
                }
            })
            Method (ECKV, 0, Serialized)
            {
                DerefOf (ECKY [One]) [One] = CECV /* \CECV */
                Return (ECKY) /* \_SB_.PC00.RP02.PXSX.ECKY */
            }

            Name (PPAY, Package (0x02)
            {
                One, 
                Package (0x18)
                {
                    0x07, 
                    Zero, 
                    0x18, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x18, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28
                }
            })
            Method (PPAG, 0, Serialized)
            {
                DerefOf (PPAY [One]) [One] = WAGE /* \WAGE */
                DerefOf (PPAY [One]) [0x02] = AGA1 /* \AGA1 */
                DerefOf (PPAY [One]) [0x03] = AGA2 /* \AGA2 */
                DerefOf (PPAY [One]) [0x04] = AGA3 /* \AGA3 */
                DerefOf (PPAY [One]) [0x05] = AGA4 /* \AGA4 */
                DerefOf (PPAY [One]) [0x06] = AGA5 /* \AGA5 */
                DerefOf (PPAY [One]) [0x07] = AGA6 /* \AGA6 */
                DerefOf (PPAY [One]) [0x08] = AGA7 /* \AGA7 */
                DerefOf (PPAY [One]) [0x09] = AGA8 /* \AGA8 */
                DerefOf (PPAY [One]) [0x0A] = AGA9 /* \AGA9 */
                DerefOf (PPAY [One]) [0x0B] = AGAA /* \AGAA */
                DerefOf (PPAY [One]) [0x0C] = AGAB /* \AGAB */
                DerefOf (PPAY [One]) [0x0D] = AGB1 /* \AGB1 */
                DerefOf (PPAY [One]) [0x0E] = AGB2 /* \AGB2 */
                DerefOf (PPAY [One]) [0x0F] = AGB3 /* \AGB3 */
                DerefOf (PPAY [One]) [0x10] = AGB4 /* \AGB4 */
                DerefOf (PPAY [One]) [0x11] = AGB5 /* \AGB5 */
                DerefOf (PPAY [One]) [0x12] = AGB6 /* \AGB6 */
                DerefOf (PPAY [One]) [0x13] = AGB7 /* \AGB7 */
                DerefOf (PPAY [One]) [0x14] = AGB8 /* \AGB8 */
                DerefOf (PPAY [One]) [0x15] = AGB9 /* \AGB9 */
                DerefOf (PPAY [One]) [0x16] = AGBA /* \AGBA */
                DerefOf (PPAY [One]) [0x17] = AGBB /* \AGBB */
                Return (PPAY) /* \_SB_.PC00.RP02.PXSX.PPAY */
            }

            Name (SADX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    0x80000000
                }, 

                Package (0x02)
                {
                    0x12, 
                    0x80000000
                }
            })
            Method (SADS, 0, Serialized)
            {
                DerefOf (SADX [One]) [One] = ATDV /* \ATDV */
                DerefOf (SADX [0x02]) [One] = ATDV /* \ATDV */
                Return (SADX) /* \_SB_.PC00.RP02.PXSX.SADX */
            }

            Name (GPCX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }, 

                Package (0x02)
                {
                    0x12, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }
            })
            Method (GPC, 0, Serialized)
            {
                Return (GPCX) /* \_SB_.PC00.RP02.PXSX.GPCX */
            }
        }

        If (((WWEN != Zero) && (WWRP == SLOT)))
        {
            Method (SHRF, 0, NotSerialized)
            {
                PSD0 (SLOT)
                SPCO (WCLK, One)
                SGOV (WFCP, PFCP)
                Sleep (TN2B)
                SGOV (WBRS, (~PBRS & One))
                Sleep (TB2R)
                SGOV (PRST, (~WPRP & One))
                L23D ()
            }

            Method (_RST, 0, Serialized)  // _RST: Device Reset
            {
                If ((WWEN == 0x02))
                {
                    Local0 = Acquire (WWMT, 0x03E8)
                    If ((Local0 == Zero))
                    {
                        ADBG ("Start WWAN FLDR")
                        DL23 ()
                        SGOV (WBRS, PBRS)
                        Sleep (TBTG)
                        SHRF ()
                        ADBG ("End WWAN FLDR")
                        Release (WWMT)
                    }
                }
                Else
                {
                    SGOV (WBRS, PBRS)
                    Sleep (0xC8)
                    Notify (PXSX, One) // Device Check
                    SGOV (PRST, (~WPRP & One))
                    SGOV (WBRS, (~PBRS & One))
                    Sleep (0xC8)
                    Local0 = Zero
                    While ((LASX == Zero))
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    Sleep (0x0A)
                    Notify (PXSX, One) // Device Check
                }
            }

            PowerResource (MRST, 0x05, 0x0000)
            {
                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    Return (One)
                }

                Method (_ON, 0, Serialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                {
                }

                Method (_RST, 0, Serialized)  // _RST: Device Reset
                {
                    Local0 = Acquire (WWMT, 0x03E8)
                    If ((Local0 == Zero))
                    {
                        ADBG ("Start WWAN PR _RST")
                        DL23 ()
                        SGOV (WBRS, PBRS)
                        SPCO (WCLK, Zero)
                        Sleep (TB2F)
                        SGOV (WFCP, (~PFCP & One))
                        Sleep (TFDI)
                        SHRF ()
                        Release (WWMT)
                    }
                }
            }
        }

        If ((WIST () || ((WWEN != Zero) && (WWRP == SLOT))))
        {
            PowerResource (DRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    If ((DCAP & 0x10000000))
                    {
                        Local0 = DCTR /* \_SB_.PC00.RP02.PXSX.DCTR */
                        Local0 |= 0x8000
                        DCTR = Local0
                    }
                }
            }

            Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
            {
                If (WIST ())
                {
                    If (CondRefOf (WRST))
                    {
                        Return (Package (0x01)
                        {
                            WRST
                        })
                    }
                }

                If (((WWEN != Zero) && (WWRP == SLOT)))
                {
                    If (CondRefOf (MRST))
                    {
                        Return (Package (0x01)
                        {
                            MRST
                        })
                    }
                }

                Return (Package (0x01)
                {
                    DRST
                })
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (WIST ())
                {
                    If ((Arg0 == ToUUID ("f21202bf-8f78-4dc6-a5b3-1f738e285ade") /* Unknown UUID */))
                    {
                        If ((Arg2 == Zero))
                        {
                            If ((Arg1 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x0F                                             // .
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }
                        }

                        If ((Arg2 == One))
                        {
                            Local0 = ACSD /* \ACSD */
                            Return (Local0)
                        }

                        If ((Arg2 == 0x02))
                        {
                            Local0 = I5BS /* \I5BS */
                            Return (Local0)
                        }

                        If ((Arg2 == 0x03))
                        {
                            Local0 = UHBS /* \UHBS */
                            Return (Local0)
                        }

                        Return (Zero)
                    }
                }

                If (((WWEN != Zero) && (WWRP == SLOT)))
                {
                    If ((Arg0 == ToUUID ("bad01b75-22a8-4f48-8792-bdde9467747d") /* Unknown UUID */))
                    {
                        If ((Arg2 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x09                                             // .
                            })
                        }

                        If ((Arg2 == One)) {}
                        If ((Arg2 == 0x02)) {}
                        If ((Arg2 == 0x03))
                        {
                            If ((WRTO == One)) {}
                            ElseIf ((WRTO == 0x03)) {}
                            Else
                            {
                            }

                            Return (WRTO) /* \WRTO */
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }

    Scope (_SB.PC00.RP03.PXSX)
    {
        OperationRegion (RPXX, SystemMemory, GMIO (^_ADR (), _ADR), 0x10)
        Field (RPXX, AnyAcc, NoLock, Preserve)
        {
            VDID,   32
        }

        OperationRegion (FLDR, SystemMemory, (GMIO (^_ADR (), _ADR) + 0x44), 0x06)
        Field (FLDR, ByteAcc, NoLock, Preserve)
        {
            DCAP,   32, 
            DCTR,   16
        }

        Method (WIST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x095A8086)
                    {
                        Return (One)
                    }
                    Case (0x095B8086)
                    {
                        Return (One)
                    }
                    Case (0x31658086)
                    {
                        Return (One)
                    }
                    Case (0x31668086)
                    {
                        Return (One)
                    }
                    Case (0x08B18086)
                    {
                        Return (One)
                    }
                    Case (0x08B28086)
                    {
                        Return (One)
                    }
                    Case (0x08B38086)
                    {
                        Return (One)
                    }
                    Case (0x08B48086)
                    {
                        Return (One)
                    }
                    Case (0x24F38086)
                    {
                        Return (One)
                    }
                    Case (0x24F48086)
                    {
                        Return (One)
                    }
                    Case (0x24F58086)
                    {
                        Return (One)
                    }
                    Case (0x24F68086)
                    {
                        Return (One)
                    }
                    Case (0x24FD8086)
                    {
                        Return (One)
                    }
                    Case (0x24FB8086)
                    {
                        Return (One)
                    }
                    Case (0x25268086)
                    {
                        Return (One)
                    }
                    Case (0x271B8086)
                    {
                        Return (One)
                    }
                    Case (0x27238086)
                    {
                        Return (One)
                    }
                    Case (0x27258086)
                    {
                        Return (One)
                    }
                    Case (0x885210EC)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (WWST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x73608086)
                    {
                        Return (One)
                    }
                    Case (0x75608086)
                    {
                        Return (One)
                    }
                    Case (0x4D7514C3)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        If (WIST ())
        {
            PowerResource (WRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    If ((DCAP & 0x10000000))
                    {
                        Local0 = DCTR /* \_SB_.PC00.RP03.PXSX.DCTR */
                        Local0 |= 0x8000
                        DCTR = Local0
                    }
                }
            }

            Name (SPLX, Package (0x02)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (SPLC, 0, Serialized)
            {
                DerefOf (SPLX [One]) [Zero] = DOM1 /* \DOM1 */
                DerefOf (SPLX [One]) [One] = LIM1 /* \LIM1 */
                DerefOf (SPLX [One]) [0x02] = TIM1 /* \TIM1 */
                Return (SPLX) /* \_SB_.PC00.RP03.PXSX.SPLX */
            }

            Name (WANX, Package (0x03)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (WAND, 0, Serialized)
            {
                DerefOf (WANX [One]) [Zero] = Zero
                DerefOf (WANX [One]) [One] = TRD0 /* \TRD0 */
                DerefOf (WANX [One]) [0x02] = TRL0 /* \TRL0 */
                DerefOf (WANX [0x02]) [Zero] = One
                DerefOf (WANX [0x02]) [One] = TRD1 /* \TRD1 */
                DerefOf (WANX [0x02]) [0x02] = TRL1 /* \TRL1 */
                Return (WANX) /* \_SB_.PC00.RP03.PXSX.WANX */
            }

            Name (WRDX, Package (0x02)
            {
                Zero, 
                Package (0x02)
                {
                    0x80000000, 
                    0x8000
                }
            })
            Method (WRDD, 0, Serialized)
            {
                DerefOf (WRDX [One]) [Zero] = WDM1 /* \WDM1 */
                DerefOf (WRDX [One]) [One] = CID1 /* \CID1 */
                Return (WRDX) /* \_SB_.PC00.RP03.PXSX.WRDX */
            }

            Name (WRDY, Package (0x02)
            {
                One, 
                Package (0x18)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WRDS, 0, Serialized)
            {
                DerefOf (WRDY [One]) [One] = STXE /* \STXE */
                DerefOf (WRDY [One]) [0x02] = ST10 /* \ST10 */
                DerefOf (WRDY [One]) [0x03] = ST11 /* \ST11 */
                DerefOf (WRDY [One]) [0x04] = ST12 /* \ST12 */
                DerefOf (WRDY [One]) [0x05] = ST13 /* \ST13 */
                DerefOf (WRDY [One]) [0x06] = ST14 /* \ST14 */
                DerefOf (WRDY [One]) [0x07] = ST15 /* \ST15 */
                DerefOf (WRDY [One]) [0x08] = ST16 /* \ST16 */
                DerefOf (WRDY [One]) [0x09] = ST17 /* \ST17 */
                DerefOf (WRDY [One]) [0x0A] = ST18 /* \ST18 */
                DerefOf (WRDY [One]) [0x0B] = ST19 /* \ST19 */
                DerefOf (WRDY [One]) [0x0C] = ST50 /* \ST50 */
                DerefOf (WRDY [One]) [0x0D] = ST51 /* \ST51 */
                DerefOf (WRDY [One]) [0x0E] = ST52 /* \ST52 */
                DerefOf (WRDY [One]) [0x0F] = ST53 /* \ST53 */
                DerefOf (WRDY [One]) [0x10] = ST54 /* \ST54 */
                DerefOf (WRDY [One]) [0x11] = ST55 /* \ST55 */
                DerefOf (WRDY [One]) [0x12] = ST56 /* \ST56 */
                DerefOf (WRDY [One]) [0x13] = ST57 /* \ST57 */
                DerefOf (WRDY [One]) [0x14] = ST58 /* \ST58 */
                DerefOf (WRDY [One]) [0x15] = ST59 /* \ST59 */
                DerefOf (WRDY [One]) [0x16] = ST5A /* \ST5A */
                DerefOf (WRDY [One]) [0x17] = ST5B /* \ST5B */
                Return (WRDY) /* \_SB_.PC00.RP03.PXSX.WRDY */
            }

            Name (EWRY, Package (0x02)
            {
                One, 
                Package (0x45)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (EWRD, 0, Serialized)
            {
                DerefOf (EWRY [One]) [One] = STDE /* \STDE */
                DerefOf (EWRY [One]) [0x02] = STRS /* \STRS */
                DerefOf (EWRY [One]) [0x03] = ST20 /* \ST20 */
                DerefOf (EWRY [One]) [0x04] = ST21 /* \ST21 */
                DerefOf (EWRY [One]) [0x05] = ST22 /* \ST22 */
                DerefOf (EWRY [One]) [0x06] = ST23 /* \ST23 */
                DerefOf (EWRY [One]) [0x07] = ST24 /* \ST24 */
                DerefOf (EWRY [One]) [0x08] = ST25 /* \ST25 */
                DerefOf (EWRY [One]) [0x09] = ST26 /* \ST26 */
                DerefOf (EWRY [One]) [0x0A] = ST27 /* \ST27 */
                DerefOf (EWRY [One]) [0x0B] = ST28 /* \ST28 */
                DerefOf (EWRY [One]) [0x0C] = ST29 /* \ST29 */
                DerefOf (EWRY [One]) [0x0D] = ST60 /* \ST60 */
                DerefOf (EWRY [One]) [0x0E] = ST61 /* \ST61 */
                DerefOf (EWRY [One]) [0x0F] = ST62 /* \ST62 */
                DerefOf (EWRY [One]) [0x10] = ST63 /* \ST63 */
                DerefOf (EWRY [One]) [0x11] = ST64 /* \ST64 */
                DerefOf (EWRY [One]) [0x12] = ST65 /* \ST65 */
                DerefOf (EWRY [One]) [0x13] = ST66 /* \ST66 */
                DerefOf (EWRY [One]) [0x14] = ST67 /* \ST67 */
                DerefOf (EWRY [One]) [0x15] = ST68 /* \ST68 */
                DerefOf (EWRY [One]) [0x16] = ST69 /* \ST69 */
                DerefOf (EWRY [One]) [0x17] = ST6A /* \ST6A */
                DerefOf (EWRY [One]) [0x18] = ST6B /* \ST6B */
                DerefOf (EWRY [One]) [0x19] = ST30 /* \ST30 */
                DerefOf (EWRY [One]) [0x1A] = ST31 /* \ST31 */
                DerefOf (EWRY [One]) [0x1B] = ST32 /* \ST32 */
                DerefOf (EWRY [One]) [0x1C] = ST33 /* \ST33 */
                DerefOf (EWRY [One]) [0x1D] = ST34 /* \ST34 */
                DerefOf (EWRY [One]) [0x1E] = ST35 /* \ST35 */
                DerefOf (EWRY [One]) [0x1F] = ST36 /* \ST36 */
                DerefOf (EWRY [One]) [0x20] = ST37 /* \ST37 */
                DerefOf (EWRY [One]) [0x21] = ST38 /* \ST38 */
                DerefOf (EWRY [One]) [0x22] = ST39 /* \ST39 */
                DerefOf (EWRY [One]) [0x23] = ST70 /* \ST70 */
                DerefOf (EWRY [One]) [0x24] = ST71 /* \ST71 */
                DerefOf (EWRY [One]) [0x25] = ST72 /* \ST72 */
                DerefOf (EWRY [One]) [0x26] = ST73 /* \ST73 */
                DerefOf (EWRY [One]) [0x27] = ST74 /* \ST74 */
                DerefOf (EWRY [One]) [0x28] = ST75 /* \ST75 */
                DerefOf (EWRY [One]) [0x29] = ST76 /* \ST76 */
                DerefOf (EWRY [One]) [0x2A] = ST77 /* \ST77 */
                DerefOf (EWRY [One]) [0x2B] = ST78 /* \ST78 */
                DerefOf (EWRY [One]) [0x2C] = ST79 /* \ST79 */
                DerefOf (EWRY [One]) [0x2D] = ST7A /* \ST7A */
                DerefOf (EWRY [One]) [0x2E] = ST7B /* \ST7B */
                DerefOf (EWRY [One]) [0x2F] = ST40 /* \ST40 */
                DerefOf (EWRY [One]) [0x30] = ST41 /* \ST41 */
                DerefOf (EWRY [One]) [0x31] = ST42 /* \ST42 */
                DerefOf (EWRY [One]) [0x32] = ST43 /* \ST43 */
                DerefOf (EWRY [One]) [0x33] = ST44 /* \ST44 */
                DerefOf (EWRY [One]) [0x34] = ST45 /* \ST45 */
                DerefOf (EWRY [One]) [0x35] = ST46 /* \ST46 */
                DerefOf (EWRY [One]) [0x36] = ST47 /* \ST47 */
                DerefOf (EWRY [One]) [0x37] = ST48 /* \ST48 */
                DerefOf (EWRY [One]) [0x38] = ST49 /* \ST49 */
                DerefOf (EWRY [One]) [0x39] = ST80 /* \ST80 */
                DerefOf (EWRY [One]) [0x3A] = ST81 /* \ST81 */
                DerefOf (EWRY [One]) [0x3B] = ST82 /* \ST82 */
                DerefOf (EWRY [One]) [0x3C] = ST83 /* \ST83 */
                DerefOf (EWRY [One]) [0x3D] = ST84 /* \ST84 */
                DerefOf (EWRY [One]) [0x3E] = ST85 /* \ST85 */
                DerefOf (EWRY [One]) [0x3F] = ST86 /* \ST86 */
                DerefOf (EWRY [One]) [0x40] = ST87 /* \ST87 */
                DerefOf (EWRY [One]) [0x41] = ST88 /* \ST88 */
                DerefOf (EWRY [One]) [0x42] = ST89 /* \ST89 */
                DerefOf (EWRY [One]) [0x43] = ST8A /* \ST8A */
                DerefOf (EWRY [One]) [0x44] = ST8B /* \ST8B */
                Return (EWRY) /* \_SB_.PC00.RP03.PXSX.EWRY */
            }

            Name (WGDY, Package (0x02)
            {
                0x02, 
                Package (0x1C)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WGDS, 0, Serialized)
            {
                DerefOf (WGDY [One]) [One] = SD11 /* \SD11 */
                DerefOf (WGDY [One]) [0x02] = SD12 /* \SD12 */
                DerefOf (WGDY [One]) [0x03] = SD13 /* \SD13 */
                DerefOf (WGDY [One]) [0x04] = SD14 /* \SD14 */
                DerefOf (WGDY [One]) [0x05] = SD15 /* \SD15 */
                DerefOf (WGDY [One]) [0x06] = SD16 /* \SD16 */
                DerefOf (WGDY [One]) [0x07] = SD17 /* \SD17 */
                DerefOf (WGDY [One]) [0x08] = SD18 /* \SD18 */
                DerefOf (WGDY [One]) [0x09] = SD19 /* \SD19 */
                DerefOf (WGDY [One]) [0x0A] = SD21 /* \SD21 */
                DerefOf (WGDY [One]) [0x0B] = SD22 /* \SD22 */
                DerefOf (WGDY [One]) [0x0C] = SD23 /* \SD23 */
                DerefOf (WGDY [One]) [0x0D] = SD24 /* \SD24 */
                DerefOf (WGDY [One]) [0x0E] = SD25 /* \SD25 */
                DerefOf (WGDY [One]) [0x0F] = SD26 /* \SD26 */
                DerefOf (WGDY [One]) [0x10] = SD27 /* \SD27 */
                DerefOf (WGDY [One]) [0x11] = SD28 /* \SD28 */
                DerefOf (WGDY [One]) [0x12] = SD29 /* \SD29 */
                DerefOf (WGDY [One]) [0x13] = SD31 /* \SD31 */
                DerefOf (WGDY [One]) [0x14] = SD32 /* \SD32 */
                DerefOf (WGDY [One]) [0x15] = SD33 /* \SD33 */
                DerefOf (WGDY [One]) [0x16] = SD34 /* \SD34 */
                DerefOf (WGDY [One]) [0x17] = SD35 /* \SD35 */
                DerefOf (WGDY [One]) [0x18] = SD36 /* \SD36 */
                DerefOf (WGDY [One]) [0x19] = SD37 /* \SD37 */
                DerefOf (WGDY [One]) [0x1A] = SD38 /* \SD38 */
                DerefOf (WGDY [One]) [0x1B] = SD39 /* \SD39 */
                Return (WGDY) /* \_SB_.PC00.RP03.PXSX.WGDY */
            }

            Name (ECKY, Package (0x02)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    Zero
                }
            })
            Method (ECKV, 0, Serialized)
            {
                DerefOf (ECKY [One]) [One] = CECV /* \CECV */
                Return (ECKY) /* \_SB_.PC00.RP03.PXSX.ECKY */
            }

            Name (PPAY, Package (0x02)
            {
                One, 
                Package (0x18)
                {
                    0x07, 
                    Zero, 
                    0x18, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x18, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28
                }
            })
            Method (PPAG, 0, Serialized)
            {
                DerefOf (PPAY [One]) [One] = WAGE /* \WAGE */
                DerefOf (PPAY [One]) [0x02] = AGA1 /* \AGA1 */
                DerefOf (PPAY [One]) [0x03] = AGA2 /* \AGA2 */
                DerefOf (PPAY [One]) [0x04] = AGA3 /* \AGA3 */
                DerefOf (PPAY [One]) [0x05] = AGA4 /* \AGA4 */
                DerefOf (PPAY [One]) [0x06] = AGA5 /* \AGA5 */
                DerefOf (PPAY [One]) [0x07] = AGA6 /* \AGA6 */
                DerefOf (PPAY [One]) [0x08] = AGA7 /* \AGA7 */
                DerefOf (PPAY [One]) [0x09] = AGA8 /* \AGA8 */
                DerefOf (PPAY [One]) [0x0A] = AGA9 /* \AGA9 */
                DerefOf (PPAY [One]) [0x0B] = AGAA /* \AGAA */
                DerefOf (PPAY [One]) [0x0C] = AGAB /* \AGAB */
                DerefOf (PPAY [One]) [0x0D] = AGB1 /* \AGB1 */
                DerefOf (PPAY [One]) [0x0E] = AGB2 /* \AGB2 */
                DerefOf (PPAY [One]) [0x0F] = AGB3 /* \AGB3 */
                DerefOf (PPAY [One]) [0x10] = AGB4 /* \AGB4 */
                DerefOf (PPAY [One]) [0x11] = AGB5 /* \AGB5 */
                DerefOf (PPAY [One]) [0x12] = AGB6 /* \AGB6 */
                DerefOf (PPAY [One]) [0x13] = AGB7 /* \AGB7 */
                DerefOf (PPAY [One]) [0x14] = AGB8 /* \AGB8 */
                DerefOf (PPAY [One]) [0x15] = AGB9 /* \AGB9 */
                DerefOf (PPAY [One]) [0x16] = AGBA /* \AGBA */
                DerefOf (PPAY [One]) [0x17] = AGBB /* \AGBB */
                Return (PPAY) /* \_SB_.PC00.RP03.PXSX.PPAY */
            }

            Name (SADX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    0x80000000
                }, 

                Package (0x02)
                {
                    0x12, 
                    0x80000000
                }
            })
            Method (SADS, 0, Serialized)
            {
                DerefOf (SADX [One]) [One] = ATDV /* \ATDV */
                DerefOf (SADX [0x02]) [One] = ATDV /* \ATDV */
                Return (SADX) /* \_SB_.PC00.RP03.PXSX.SADX */
            }

            Name (GPCX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }, 

                Package (0x02)
                {
                    0x12, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }
            })
            Method (GPC, 0, Serialized)
            {
                Return (GPCX) /* \_SB_.PC00.RP03.PXSX.GPCX */
            }
        }

        If (((WWEN != Zero) && (WWRP == SLOT)))
        {
            Method (SHRF, 0, NotSerialized)
            {
                PSD0 (SLOT)
                SPCO (WCLK, One)
                SGOV (WFCP, PFCP)
                Sleep (TN2B)
                SGOV (WBRS, (~PBRS & One))
                Sleep (TB2R)
                SGOV (PRST, (~WPRP & One))
                L23D ()
            }

            Method (_RST, 0, Serialized)  // _RST: Device Reset
            {
                If ((WWEN == 0x02))
                {
                    Local0 = Acquire (WWMT, 0x03E8)
                    If ((Local0 == Zero))
                    {
                        ADBG ("Start WWAN FLDR")
                        DL23 ()
                        SGOV (WBRS, PBRS)
                        Sleep (TBTG)
                        SHRF ()
                        ADBG ("End WWAN FLDR")
                        Release (WWMT)
                    }
                }
                Else
                {
                    SGOV (WBRS, PBRS)
                    Sleep (0xC8)
                    Notify (PXSX, One) // Device Check
                    SGOV (PRST, (~WPRP & One))
                    SGOV (WBRS, (~PBRS & One))
                    Sleep (0xC8)
                    Local0 = Zero
                    While ((LASX == Zero))
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    Sleep (0x0A)
                    Notify (PXSX, One) // Device Check
                }
            }

            PowerResource (MRST, 0x05, 0x0000)
            {
                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    Return (One)
                }

                Method (_ON, 0, Serialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                {
                }

                Method (_RST, 0, Serialized)  // _RST: Device Reset
                {
                    Local0 = Acquire (WWMT, 0x03E8)
                    If ((Local0 == Zero))
                    {
                        ADBG ("Start WWAN PR _RST")
                        DL23 ()
                        SGOV (WBRS, PBRS)
                        SPCO (WCLK, Zero)
                        Sleep (TB2F)
                        SGOV (WFCP, (~PFCP & One))
                        Sleep (TFDI)
                        SHRF ()
                        Release (WWMT)
                    }
                }
            }
        }

        If ((WIST () || ((WWEN != Zero) && (WWRP == SLOT))))
        {
            PowerResource (DRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    If ((DCAP & 0x10000000))
                    {
                        Local0 = DCTR /* \_SB_.PC00.RP03.PXSX.DCTR */
                        Local0 |= 0x8000
                        DCTR = Local0
                    }
                }
            }

            Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
            {
                If (WIST ())
                {
                    If (CondRefOf (WRST))
                    {
                        Return (Package (0x01)
                        {
                            WRST
                        })
                    }
                }

                If (((WWEN != Zero) && (WWRP == SLOT)))
                {
                    If (CondRefOf (MRST))
                    {
                        Return (Package (0x01)
                        {
                            MRST
                        })
                    }
                }

                Return (Package (0x01)
                {
                    DRST
                })
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (WIST ())
                {
                    If ((Arg0 == ToUUID ("f21202bf-8f78-4dc6-a5b3-1f738e285ade") /* Unknown UUID */))
                    {
                        If ((Arg2 == Zero))
                        {
                            If ((Arg1 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x0F                                             // .
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }
                        }

                        If ((Arg2 == One))
                        {
                            Local0 = ACSD /* \ACSD */
                            Return (Local0)
                        }

                        If ((Arg2 == 0x02))
                        {
                            Local0 = I5BS /* \I5BS */
                            Return (Local0)
                        }

                        If ((Arg2 == 0x03))
                        {
                            Local0 = UHBS /* \UHBS */
                            Return (Local0)
                        }

                        Return (Zero)
                    }
                }

                If (((WWEN != Zero) && (WWRP == SLOT)))
                {
                    If ((Arg0 == ToUUID ("bad01b75-22a8-4f48-8792-bdde9467747d") /* Unknown UUID */))
                    {
                        If ((Arg2 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x09                                             // .
                            })
                        }

                        If ((Arg2 == One)) {}
                        If ((Arg2 == 0x02)) {}
                        If ((Arg2 == 0x03))
                        {
                            If ((WRTO == One)) {}
                            ElseIf ((WRTO == 0x03)) {}
                            Else
                            {
                            }

                            Return (WRTO) /* \WRTO */
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }

    Scope (_SB.PC00.RP04.PXSX)
    {
        OperationRegion (RPXX, SystemMemory, GMIO (^_ADR (), _ADR), 0x10)
        Field (RPXX, AnyAcc, NoLock, Preserve)
        {
            VDID,   32
        }

        OperationRegion (FLDR, SystemMemory, (GMIO (^_ADR (), _ADR) + 0x44), 0x06)
        Field (FLDR, ByteAcc, NoLock, Preserve)
        {
            DCAP,   32, 
            DCTR,   16
        }

        Method (WIST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x095A8086)
                    {
                        Return (One)
                    }
                    Case (0x095B8086)
                    {
                        Return (One)
                    }
                    Case (0x31658086)
                    {
                        Return (One)
                    }
                    Case (0x31668086)
                    {
                        Return (One)
                    }
                    Case (0x08B18086)
                    {
                        Return (One)
                    }
                    Case (0x08B28086)
                    {
                        Return (One)
                    }
                    Case (0x08B38086)
                    {
                        Return (One)
                    }
                    Case (0x08B48086)
                    {
                        Return (One)
                    }
                    Case (0x24F38086)
                    {
                        Return (One)
                    }
                    Case (0x24F48086)
                    {
                        Return (One)
                    }
                    Case (0x24F58086)
                    {
                        Return (One)
                    }
                    Case (0x24F68086)
                    {
                        Return (One)
                    }
                    Case (0x24FD8086)
                    {
                        Return (One)
                    }
                    Case (0x24FB8086)
                    {
                        Return (One)
                    }
                    Case (0x25268086)
                    {
                        Return (One)
                    }
                    Case (0x271B8086)
                    {
                        Return (One)
                    }
                    Case (0x27238086)
                    {
                        Return (One)
                    }
                    Case (0x27258086)
                    {
                        Return (One)
                    }
                    Case (0x885210EC)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (WWST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x73608086)
                    {
                        Return (One)
                    }
                    Case (0x75608086)
                    {
                        Return (One)
                    }
                    Case (0x4D7514C3)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        If (WIST ())
        {
            PowerResource (WRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    If ((DCAP & 0x10000000))
                    {
                        Local0 = DCTR /* \_SB_.PC00.RP04.PXSX.DCTR */
                        Local0 |= 0x8000
                        DCTR = Local0
                    }
                }
            }

            Name (SPLX, Package (0x02)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (SPLC, 0, Serialized)
            {
                DerefOf (SPLX [One]) [Zero] = DOM1 /* \DOM1 */
                DerefOf (SPLX [One]) [One] = LIM1 /* \LIM1 */
                DerefOf (SPLX [One]) [0x02] = TIM1 /* \TIM1 */
                Return (SPLX) /* \_SB_.PC00.RP04.PXSX.SPLX */
            }

            Name (WANX, Package (0x03)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (WAND, 0, Serialized)
            {
                DerefOf (WANX [One]) [Zero] = Zero
                DerefOf (WANX [One]) [One] = TRD0 /* \TRD0 */
                DerefOf (WANX [One]) [0x02] = TRL0 /* \TRL0 */
                DerefOf (WANX [0x02]) [Zero] = One
                DerefOf (WANX [0x02]) [One] = TRD1 /* \TRD1 */
                DerefOf (WANX [0x02]) [0x02] = TRL1 /* \TRL1 */
                Return (WANX) /* \_SB_.PC00.RP04.PXSX.WANX */
            }

            Name (WRDX, Package (0x02)
            {
                Zero, 
                Package (0x02)
                {
                    0x80000000, 
                    0x8000
                }
            })
            Method (WRDD, 0, Serialized)
            {
                DerefOf (WRDX [One]) [Zero] = WDM1 /* \WDM1 */
                DerefOf (WRDX [One]) [One] = CID1 /* \CID1 */
                Return (WRDX) /* \_SB_.PC00.RP04.PXSX.WRDX */
            }

            Name (WRDY, Package (0x02)
            {
                One, 
                Package (0x18)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WRDS, 0, Serialized)
            {
                DerefOf (WRDY [One]) [One] = STXE /* \STXE */
                DerefOf (WRDY [One]) [0x02] = ST10 /* \ST10 */
                DerefOf (WRDY [One]) [0x03] = ST11 /* \ST11 */
                DerefOf (WRDY [One]) [0x04] = ST12 /* \ST12 */
                DerefOf (WRDY [One]) [0x05] = ST13 /* \ST13 */
                DerefOf (WRDY [One]) [0x06] = ST14 /* \ST14 */
                DerefOf (WRDY [One]) [0x07] = ST15 /* \ST15 */
                DerefOf (WRDY [One]) [0x08] = ST16 /* \ST16 */
                DerefOf (WRDY [One]) [0x09] = ST17 /* \ST17 */
                DerefOf (WRDY [One]) [0x0A] = ST18 /* \ST18 */
                DerefOf (WRDY [One]) [0x0B] = ST19 /* \ST19 */
                DerefOf (WRDY [One]) [0x0C] = ST50 /* \ST50 */
                DerefOf (WRDY [One]) [0x0D] = ST51 /* \ST51 */
                DerefOf (WRDY [One]) [0x0E] = ST52 /* \ST52 */
                DerefOf (WRDY [One]) [0x0F] = ST53 /* \ST53 */
                DerefOf (WRDY [One]) [0x10] = ST54 /* \ST54 */
                DerefOf (WRDY [One]) [0x11] = ST55 /* \ST55 */
                DerefOf (WRDY [One]) [0x12] = ST56 /* \ST56 */
                DerefOf (WRDY [One]) [0x13] = ST57 /* \ST57 */
                DerefOf (WRDY [One]) [0x14] = ST58 /* \ST58 */
                DerefOf (WRDY [One]) [0x15] = ST59 /* \ST59 */
                DerefOf (WRDY [One]) [0x16] = ST5A /* \ST5A */
                DerefOf (WRDY [One]) [0x17] = ST5B /* \ST5B */
                Return (WRDY) /* \_SB_.PC00.RP04.PXSX.WRDY */
            }

            Name (EWRY, Package (0x02)
            {
                One, 
                Package (0x45)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (EWRD, 0, Serialized)
            {
                DerefOf (EWRY [One]) [One] = STDE /* \STDE */
                DerefOf (EWRY [One]) [0x02] = STRS /* \STRS */
                DerefOf (EWRY [One]) [0x03] = ST20 /* \ST20 */
                DerefOf (EWRY [One]) [0x04] = ST21 /* \ST21 */
                DerefOf (EWRY [One]) [0x05] = ST22 /* \ST22 */
                DerefOf (EWRY [One]) [0x06] = ST23 /* \ST23 */
                DerefOf (EWRY [One]) [0x07] = ST24 /* \ST24 */
                DerefOf (EWRY [One]) [0x08] = ST25 /* \ST25 */
                DerefOf (EWRY [One]) [0x09] = ST26 /* \ST26 */
                DerefOf (EWRY [One]) [0x0A] = ST27 /* \ST27 */
                DerefOf (EWRY [One]) [0x0B] = ST28 /* \ST28 */
                DerefOf (EWRY [One]) [0x0C] = ST29 /* \ST29 */
                DerefOf (EWRY [One]) [0x0D] = ST60 /* \ST60 */
                DerefOf (EWRY [One]) [0x0E] = ST61 /* \ST61 */
                DerefOf (EWRY [One]) [0x0F] = ST62 /* \ST62 */
                DerefOf (EWRY [One]) [0x10] = ST63 /* \ST63 */
                DerefOf (EWRY [One]) [0x11] = ST64 /* \ST64 */
                DerefOf (EWRY [One]) [0x12] = ST65 /* \ST65 */
                DerefOf (EWRY [One]) [0x13] = ST66 /* \ST66 */
                DerefOf (EWRY [One]) [0x14] = ST67 /* \ST67 */
                DerefOf (EWRY [One]) [0x15] = ST68 /* \ST68 */
                DerefOf (EWRY [One]) [0x16] = ST69 /* \ST69 */
                DerefOf (EWRY [One]) [0x17] = ST6A /* \ST6A */
                DerefOf (EWRY [One]) [0x18] = ST6B /* \ST6B */
                DerefOf (EWRY [One]) [0x19] = ST30 /* \ST30 */
                DerefOf (EWRY [One]) [0x1A] = ST31 /* \ST31 */
                DerefOf (EWRY [One]) [0x1B] = ST32 /* \ST32 */
                DerefOf (EWRY [One]) [0x1C] = ST33 /* \ST33 */
                DerefOf (EWRY [One]) [0x1D] = ST34 /* \ST34 */
                DerefOf (EWRY [One]) [0x1E] = ST35 /* \ST35 */
                DerefOf (EWRY [One]) [0x1F] = ST36 /* \ST36 */
                DerefOf (EWRY [One]) [0x20] = ST37 /* \ST37 */
                DerefOf (EWRY [One]) [0x21] = ST38 /* \ST38 */
                DerefOf (EWRY [One]) [0x22] = ST39 /* \ST39 */
                DerefOf (EWRY [One]) [0x23] = ST70 /* \ST70 */
                DerefOf (EWRY [One]) [0x24] = ST71 /* \ST71 */
                DerefOf (EWRY [One]) [0x25] = ST72 /* \ST72 */
                DerefOf (EWRY [One]) [0x26] = ST73 /* \ST73 */
                DerefOf (EWRY [One]) [0x27] = ST74 /* \ST74 */
                DerefOf (EWRY [One]) [0x28] = ST75 /* \ST75 */
                DerefOf (EWRY [One]) [0x29] = ST76 /* \ST76 */
                DerefOf (EWRY [One]) [0x2A] = ST77 /* \ST77 */
                DerefOf (EWRY [One]) [0x2B] = ST78 /* \ST78 */
                DerefOf (EWRY [One]) [0x2C] = ST79 /* \ST79 */
                DerefOf (EWRY [One]) [0x2D] = ST7A /* \ST7A */
                DerefOf (EWRY [One]) [0x2E] = ST7B /* \ST7B */
                DerefOf (EWRY [One]) [0x2F] = ST40 /* \ST40 */
                DerefOf (EWRY [One]) [0x30] = ST41 /* \ST41 */
                DerefOf (EWRY [One]) [0x31] = ST42 /* \ST42 */
                DerefOf (EWRY [One]) [0x32] = ST43 /* \ST43 */
                DerefOf (EWRY [One]) [0x33] = ST44 /* \ST44 */
                DerefOf (EWRY [One]) [0x34] = ST45 /* \ST45 */
                DerefOf (EWRY [One]) [0x35] = ST46 /* \ST46 */
                DerefOf (EWRY [One]) [0x36] = ST47 /* \ST47 */
                DerefOf (EWRY [One]) [0x37] = ST48 /* \ST48 */
                DerefOf (EWRY [One]) [0x38] = ST49 /* \ST49 */
                DerefOf (EWRY [One]) [0x39] = ST80 /* \ST80 */
                DerefOf (EWRY [One]) [0x3A] = ST81 /* \ST81 */
                DerefOf (EWRY [One]) [0x3B] = ST82 /* \ST82 */
                DerefOf (EWRY [One]) [0x3C] = ST83 /* \ST83 */
                DerefOf (EWRY [One]) [0x3D] = ST84 /* \ST84 */
                DerefOf (EWRY [One]) [0x3E] = ST85 /* \ST85 */
                DerefOf (EWRY [One]) [0x3F] = ST86 /* \ST86 */
                DerefOf (EWRY [One]) [0x40] = ST87 /* \ST87 */
                DerefOf (EWRY [One]) [0x41] = ST88 /* \ST88 */
                DerefOf (EWRY [One]) [0x42] = ST89 /* \ST89 */
                DerefOf (EWRY [One]) [0x43] = ST8A /* \ST8A */
                DerefOf (EWRY [One]) [0x44] = ST8B /* \ST8B */
                Return (EWRY) /* \_SB_.PC00.RP04.PXSX.EWRY */
            }

            Name (WGDY, Package (0x02)
            {
                0x02, 
                Package (0x1C)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WGDS, 0, Serialized)
            {
                DerefOf (WGDY [One]) [One] = SD11 /* \SD11 */
                DerefOf (WGDY [One]) [0x02] = SD12 /* \SD12 */
                DerefOf (WGDY [One]) [0x03] = SD13 /* \SD13 */
                DerefOf (WGDY [One]) [0x04] = SD14 /* \SD14 */
                DerefOf (WGDY [One]) [0x05] = SD15 /* \SD15 */
                DerefOf (WGDY [One]) [0x06] = SD16 /* \SD16 */
                DerefOf (WGDY [One]) [0x07] = SD17 /* \SD17 */
                DerefOf (WGDY [One]) [0x08] = SD18 /* \SD18 */
                DerefOf (WGDY [One]) [0x09] = SD19 /* \SD19 */
                DerefOf (WGDY [One]) [0x0A] = SD21 /* \SD21 */
                DerefOf (WGDY [One]) [0x0B] = SD22 /* \SD22 */
                DerefOf (WGDY [One]) [0x0C] = SD23 /* \SD23 */
                DerefOf (WGDY [One]) [0x0D] = SD24 /* \SD24 */
                DerefOf (WGDY [One]) [0x0E] = SD25 /* \SD25 */
                DerefOf (WGDY [One]) [0x0F] = SD26 /* \SD26 */
                DerefOf (WGDY [One]) [0x10] = SD27 /* \SD27 */
                DerefOf (WGDY [One]) [0x11] = SD28 /* \SD28 */
                DerefOf (WGDY [One]) [0x12] = SD29 /* \SD29 */
                DerefOf (WGDY [One]) [0x13] = SD31 /* \SD31 */
                DerefOf (WGDY [One]) [0x14] = SD32 /* \SD32 */
                DerefOf (WGDY [One]) [0x15] = SD33 /* \SD33 */
                DerefOf (WGDY [One]) [0x16] = SD34 /* \SD34 */
                DerefOf (WGDY [One]) [0x17] = SD35 /* \SD35 */
                DerefOf (WGDY [One]) [0x18] = SD36 /* \SD36 */
                DerefOf (WGDY [One]) [0x19] = SD37 /* \SD37 */
                DerefOf (WGDY [One]) [0x1A] = SD38 /* \SD38 */
                DerefOf (WGDY [One]) [0x1B] = SD39 /* \SD39 */
                Return (WGDY) /* \_SB_.PC00.RP04.PXSX.WGDY */
            }

            Name (ECKY, Package (0x02)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    Zero
                }
            })
            Method (ECKV, 0, Serialized)
            {
                DerefOf (ECKY [One]) [One] = CECV /* \CECV */
                Return (ECKY) /* \_SB_.PC00.RP04.PXSX.ECKY */
            }

            Name (PPAY, Package (0x02)
            {
                One, 
                Package (0x18)
                {
                    0x07, 
                    Zero, 
                    0x18, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x18, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28
                }
            })
            Method (PPAG, 0, Serialized)
            {
                DerefOf (PPAY [One]) [One] = WAGE /* \WAGE */
                DerefOf (PPAY [One]) [0x02] = AGA1 /* \AGA1 */
                DerefOf (PPAY [One]) [0x03] = AGA2 /* \AGA2 */
                DerefOf (PPAY [One]) [0x04] = AGA3 /* \AGA3 */
                DerefOf (PPAY [One]) [0x05] = AGA4 /* \AGA4 */
                DerefOf (PPAY [One]) [0x06] = AGA5 /* \AGA5 */
                DerefOf (PPAY [One]) [0x07] = AGA6 /* \AGA6 */
                DerefOf (PPAY [One]) [0x08] = AGA7 /* \AGA7 */
                DerefOf (PPAY [One]) [0x09] = AGA8 /* \AGA8 */
                DerefOf (PPAY [One]) [0x0A] = AGA9 /* \AGA9 */
                DerefOf (PPAY [One]) [0x0B] = AGAA /* \AGAA */
                DerefOf (PPAY [One]) [0x0C] = AGAB /* \AGAB */
                DerefOf (PPAY [One]) [0x0D] = AGB1 /* \AGB1 */
                DerefOf (PPAY [One]) [0x0E] = AGB2 /* \AGB2 */
                DerefOf (PPAY [One]) [0x0F] = AGB3 /* \AGB3 */
                DerefOf (PPAY [One]) [0x10] = AGB4 /* \AGB4 */
                DerefOf (PPAY [One]) [0x11] = AGB5 /* \AGB5 */
                DerefOf (PPAY [One]) [0x12] = AGB6 /* \AGB6 */
                DerefOf (PPAY [One]) [0x13] = AGB7 /* \AGB7 */
                DerefOf (PPAY [One]) [0x14] = AGB8 /* \AGB8 */
                DerefOf (PPAY [One]) [0x15] = AGB9 /* \AGB9 */
                DerefOf (PPAY [One]) [0x16] = AGBA /* \AGBA */
                DerefOf (PPAY [One]) [0x17] = AGBB /* \AGBB */
                Return (PPAY) /* \_SB_.PC00.RP04.PXSX.PPAY */
            }

            Name (SADX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    0x80000000
                }, 

                Package (0x02)
                {
                    0x12, 
                    0x80000000
                }
            })
            Method (SADS, 0, Serialized)
            {
                DerefOf (SADX [One]) [One] = ATDV /* \ATDV */
                DerefOf (SADX [0x02]) [One] = ATDV /* \ATDV */
                Return (SADX) /* \_SB_.PC00.RP04.PXSX.SADX */
            }

            Name (GPCX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }, 

                Package (0x02)
                {
                    0x12, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }
            })
            Method (GPC, 0, Serialized)
            {
                Return (GPCX) /* \_SB_.PC00.RP04.PXSX.GPCX */
            }
        }

        If (((WWEN != Zero) && (WWRP == SLOT)))
        {
            Method (SHRF, 0, NotSerialized)
            {
                PSD0 (SLOT)
                SPCO (WCLK, One)
                SGOV (WFCP, PFCP)
                Sleep (TN2B)
                SGOV (WBRS, (~PBRS & One))
                Sleep (TB2R)
                SGOV (PRST, (~WPRP & One))
                L23D ()
            }

            Method (_RST, 0, Serialized)  // _RST: Device Reset
            {
                If ((WWEN == 0x02))
                {
                    Local0 = Acquire (WWMT, 0x03E8)
                    If ((Local0 == Zero))
                    {
                        ADBG ("Start WWAN FLDR")
                        DL23 ()
                        SGOV (WBRS, PBRS)
                        Sleep (TBTG)
                        SHRF ()
                        ADBG ("End WWAN FLDR")
                        Release (WWMT)
                    }
                }
                Else
                {
                    SGOV (WBRS, PBRS)
                    Sleep (0xC8)
                    Notify (PXSX, One) // Device Check
                    SGOV (PRST, (~WPRP & One))
                    SGOV (WBRS, (~PBRS & One))
                    Sleep (0xC8)
                    Local0 = Zero
                    While ((LASX == Zero))
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    Sleep (0x0A)
                    Notify (PXSX, One) // Device Check
                }
            }

            PowerResource (MRST, 0x05, 0x0000)
            {
                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    Return (One)
                }

                Method (_ON, 0, Serialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                {
                }

                Method (_RST, 0, Serialized)  // _RST: Device Reset
                {
                    Local0 = Acquire (WWMT, 0x03E8)
                    If ((Local0 == Zero))
                    {
                        ADBG ("Start WWAN PR _RST")
                        DL23 ()
                        SGOV (WBRS, PBRS)
                        SPCO (WCLK, Zero)
                        Sleep (TB2F)
                        SGOV (WFCP, (~PFCP & One))
                        Sleep (TFDI)
                        SHRF ()
                        Release (WWMT)
                    }
                }
            }
        }

        If ((WIST () || ((WWEN != Zero) && (WWRP == SLOT))))
        {
            PowerResource (DRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    If ((DCAP & 0x10000000))
                    {
                        Local0 = DCTR /* \_SB_.PC00.RP04.PXSX.DCTR */
                        Local0 |= 0x8000
                        DCTR = Local0
                    }
                }
            }

            Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
            {
                If (WIST ())
                {
                    If (CondRefOf (WRST))
                    {
                        Return (Package (0x01)
                        {
                            WRST
                        })
                    }
                }

                If (((WWEN != Zero) && (WWRP == SLOT)))
                {
                    If (CondRefOf (MRST))
                    {
                        Return (Package (0x01)
                        {
                            MRST
                        })
                    }
                }

                Return (Package (0x01)
                {
                    DRST
                })
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (WIST ())
                {
                    If ((Arg0 == ToUUID ("f21202bf-8f78-4dc6-a5b3-1f738e285ade") /* Unknown UUID */))
                    {
                        If ((Arg2 == Zero))
                        {
                            If ((Arg1 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x0F                                             // .
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }
                        }

                        If ((Arg2 == One))
                        {
                            Local0 = ACSD /* \ACSD */
                            Return (Local0)
                        }

                        If ((Arg2 == 0x02))
                        {
                            Local0 = I5BS /* \I5BS */
                            Return (Local0)
                        }

                        If ((Arg2 == 0x03))
                        {
                            Local0 = UHBS /* \UHBS */
                            Return (Local0)
                        }

                        Return (Zero)
                    }
                }

                If (((WWEN != Zero) && (WWRP == SLOT)))
                {
                    If ((Arg0 == ToUUID ("bad01b75-22a8-4f48-8792-bdde9467747d") /* Unknown UUID */))
                    {
                        If ((Arg2 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x09                                             // .
                            })
                        }

                        If ((Arg2 == One)) {}
                        If ((Arg2 == 0x02)) {}
                        If ((Arg2 == 0x03))
                        {
                            If ((WRTO == One)) {}
                            ElseIf ((WRTO == 0x03)) {}
                            Else
                            {
                            }

                            Return (WRTO) /* \WRTO */
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }

    Scope (_SB.PC00.RP05.PXSX)
    {
        OperationRegion (RPXX, SystemMemory, GMIO (^_ADR (), _ADR), 0x10)
        Field (RPXX, AnyAcc, NoLock, Preserve)
        {
            VDID,   32
        }

        OperationRegion (FLDR, SystemMemory, (GMIO (^_ADR (), _ADR) + 0x44), 0x06)
        Field (FLDR, ByteAcc, NoLock, Preserve)
        {
            DCAP,   32, 
            DCTR,   16
        }

        Method (WIST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x095A8086)
                    {
                        Return (One)
                    }
                    Case (0x095B8086)
                    {
                        Return (One)
                    }
                    Case (0x31658086)
                    {
                        Return (One)
                    }
                    Case (0x31668086)
                    {
                        Return (One)
                    }
                    Case (0x08B18086)
                    {
                        Return (One)
                    }
                    Case (0x08B28086)
                    {
                        Return (One)
                    }
                    Case (0x08B38086)
                    {
                        Return (One)
                    }
                    Case (0x08B48086)
                    {
                        Return (One)
                    }
                    Case (0x24F38086)
                    {
                        Return (One)
                    }
                    Case (0x24F48086)
                    {
                        Return (One)
                    }
                    Case (0x24F58086)
                    {
                        Return (One)
                    }
                    Case (0x24F68086)
                    {
                        Return (One)
                    }
                    Case (0x24FD8086)
                    {
                        Return (One)
                    }
                    Case (0x24FB8086)
                    {
                        Return (One)
                    }
                    Case (0x25268086)
                    {
                        Return (One)
                    }
                    Case (0x271B8086)
                    {
                        Return (One)
                    }
                    Case (0x27238086)
                    {
                        Return (One)
                    }
                    Case (0x27258086)
                    {
                        Return (One)
                    }
                    Case (0x885210EC)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (WWST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x73608086)
                    {
                        Return (One)
                    }
                    Case (0x75608086)
                    {
                        Return (One)
                    }
                    Case (0x4D7514C3)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        If (WIST ())
        {
            PowerResource (WRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    If ((DCAP & 0x10000000))
                    {
                        Local0 = DCTR /* \_SB_.PC00.RP05.PXSX.DCTR */
                        Local0 |= 0x8000
                        DCTR = Local0
                    }
                }
            }

            Name (SPLX, Package (0x02)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (SPLC, 0, Serialized)
            {
                DerefOf (SPLX [One]) [Zero] = DOM1 /* \DOM1 */
                DerefOf (SPLX [One]) [One] = LIM1 /* \LIM1 */
                DerefOf (SPLX [One]) [0x02] = TIM1 /* \TIM1 */
                Return (SPLX) /* \_SB_.PC00.RP05.PXSX.SPLX */
            }

            Name (WANX, Package (0x03)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (WAND, 0, Serialized)
            {
                DerefOf (WANX [One]) [Zero] = Zero
                DerefOf (WANX [One]) [One] = TRD0 /* \TRD0 */
                DerefOf (WANX [One]) [0x02] = TRL0 /* \TRL0 */
                DerefOf (WANX [0x02]) [Zero] = One
                DerefOf (WANX [0x02]) [One] = TRD1 /* \TRD1 */
                DerefOf (WANX [0x02]) [0x02] = TRL1 /* \TRL1 */
                Return (WANX) /* \_SB_.PC00.RP05.PXSX.WANX */
            }

            Name (WRDX, Package (0x02)
            {
                Zero, 
                Package (0x02)
                {
                    0x80000000, 
                    0x8000
                }
            })
            Method (WRDD, 0, Serialized)
            {
                DerefOf (WRDX [One]) [Zero] = WDM1 /* \WDM1 */
                DerefOf (WRDX [One]) [One] = CID1 /* \CID1 */
                Return (WRDX) /* \_SB_.PC00.RP05.PXSX.WRDX */
            }

            Name (WRDY, Package (0x02)
            {
                One, 
                Package (0x18)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WRDS, 0, Serialized)
            {
                DerefOf (WRDY [One]) [One] = STXE /* \STXE */
                DerefOf (WRDY [One]) [0x02] = ST10 /* \ST10 */
                DerefOf (WRDY [One]) [0x03] = ST11 /* \ST11 */
                DerefOf (WRDY [One]) [0x04] = ST12 /* \ST12 */
                DerefOf (WRDY [One]) [0x05] = ST13 /* \ST13 */
                DerefOf (WRDY [One]) [0x06] = ST14 /* \ST14 */
                DerefOf (WRDY [One]) [0x07] = ST15 /* \ST15 */
                DerefOf (WRDY [One]) [0x08] = ST16 /* \ST16 */
                DerefOf (WRDY [One]) [0x09] = ST17 /* \ST17 */
                DerefOf (WRDY [One]) [0x0A] = ST18 /* \ST18 */
                DerefOf (WRDY [One]) [0x0B] = ST19 /* \ST19 */
                DerefOf (WRDY [One]) [0x0C] = ST50 /* \ST50 */
                DerefOf (WRDY [One]) [0x0D] = ST51 /* \ST51 */
                DerefOf (WRDY [One]) [0x0E] = ST52 /* \ST52 */
                DerefOf (WRDY [One]) [0x0F] = ST53 /* \ST53 */
                DerefOf (WRDY [One]) [0x10] = ST54 /* \ST54 */
                DerefOf (WRDY [One]) [0x11] = ST55 /* \ST55 */
                DerefOf (WRDY [One]) [0x12] = ST56 /* \ST56 */
                DerefOf (WRDY [One]) [0x13] = ST57 /* \ST57 */
                DerefOf (WRDY [One]) [0x14] = ST58 /* \ST58 */
                DerefOf (WRDY [One]) [0x15] = ST59 /* \ST59 */
                DerefOf (WRDY [One]) [0x16] = ST5A /* \ST5A */
                DerefOf (WRDY [One]) [0x17] = ST5B /* \ST5B */
                Return (WRDY) /* \_SB_.PC00.RP05.PXSX.WRDY */
            }

            Name (EWRY, Package (0x02)
            {
                One, 
                Package (0x45)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (EWRD, 0, Serialized)
            {
                DerefOf (EWRY [One]) [One] = STDE /* \STDE */
                DerefOf (EWRY [One]) [0x02] = STRS /* \STRS */
                DerefOf (EWRY [One]) [0x03] = ST20 /* \ST20 */
                DerefOf (EWRY [One]) [0x04] = ST21 /* \ST21 */
                DerefOf (EWRY [One]) [0x05] = ST22 /* \ST22 */
                DerefOf (EWRY [One]) [0x06] = ST23 /* \ST23 */
                DerefOf (EWRY [One]) [0x07] = ST24 /* \ST24 */
                DerefOf (EWRY [One]) [0x08] = ST25 /* \ST25 */
                DerefOf (EWRY [One]) [0x09] = ST26 /* \ST26 */
                DerefOf (EWRY [One]) [0x0A] = ST27 /* \ST27 */
                DerefOf (EWRY [One]) [0x0B] = ST28 /* \ST28 */
                DerefOf (EWRY [One]) [0x0C] = ST29 /* \ST29 */
                DerefOf (EWRY [One]) [0x0D] = ST60 /* \ST60 */
                DerefOf (EWRY [One]) [0x0E] = ST61 /* \ST61 */
                DerefOf (EWRY [One]) [0x0F] = ST62 /* \ST62 */
                DerefOf (EWRY [One]) [0x10] = ST63 /* \ST63 */
                DerefOf (EWRY [One]) [0x11] = ST64 /* \ST64 */
                DerefOf (EWRY [One]) [0x12] = ST65 /* \ST65 */
                DerefOf (EWRY [One]) [0x13] = ST66 /* \ST66 */
                DerefOf (EWRY [One]) [0x14] = ST67 /* \ST67 */
                DerefOf (EWRY [One]) [0x15] = ST68 /* \ST68 */
                DerefOf (EWRY [One]) [0x16] = ST69 /* \ST69 */
                DerefOf (EWRY [One]) [0x17] = ST6A /* \ST6A */
                DerefOf (EWRY [One]) [0x18] = ST6B /* \ST6B */
                DerefOf (EWRY [One]) [0x19] = ST30 /* \ST30 */
                DerefOf (EWRY [One]) [0x1A] = ST31 /* \ST31 */
                DerefOf (EWRY [One]) [0x1B] = ST32 /* \ST32 */
                DerefOf (EWRY [One]) [0x1C] = ST33 /* \ST33 */
                DerefOf (EWRY [One]) [0x1D] = ST34 /* \ST34 */
                DerefOf (EWRY [One]) [0x1E] = ST35 /* \ST35 */
                DerefOf (EWRY [One]) [0x1F] = ST36 /* \ST36 */
                DerefOf (EWRY [One]) [0x20] = ST37 /* \ST37 */
                DerefOf (EWRY [One]) [0x21] = ST38 /* \ST38 */
                DerefOf (EWRY [One]) [0x22] = ST39 /* \ST39 */
                DerefOf (EWRY [One]) [0x23] = ST70 /* \ST70 */
                DerefOf (EWRY [One]) [0x24] = ST71 /* \ST71 */
                DerefOf (EWRY [One]) [0x25] = ST72 /* \ST72 */
                DerefOf (EWRY [One]) [0x26] = ST73 /* \ST73 */
                DerefOf (EWRY [One]) [0x27] = ST74 /* \ST74 */
                DerefOf (EWRY [One]) [0x28] = ST75 /* \ST75 */
                DerefOf (EWRY [One]) [0x29] = ST76 /* \ST76 */
                DerefOf (EWRY [One]) [0x2A] = ST77 /* \ST77 */
                DerefOf (EWRY [One]) [0x2B] = ST78 /* \ST78 */
                DerefOf (EWRY [One]) [0x2C] = ST79 /* \ST79 */
                DerefOf (EWRY [One]) [0x2D] = ST7A /* \ST7A */
                DerefOf (EWRY [One]) [0x2E] = ST7B /* \ST7B */
                DerefOf (EWRY [One]) [0x2F] = ST40 /* \ST40 */
                DerefOf (EWRY [One]) [0x30] = ST41 /* \ST41 */
                DerefOf (EWRY [One]) [0x31] = ST42 /* \ST42 */
                DerefOf (EWRY [One]) [0x32] = ST43 /* \ST43 */
                DerefOf (EWRY [One]) [0x33] = ST44 /* \ST44 */
                DerefOf (EWRY [One]) [0x34] = ST45 /* \ST45 */
                DerefOf (EWRY [One]) [0x35] = ST46 /* \ST46 */
                DerefOf (EWRY [One]) [0x36] = ST47 /* \ST47 */
                DerefOf (EWRY [One]) [0x37] = ST48 /* \ST48 */
                DerefOf (EWRY [One]) [0x38] = ST49 /* \ST49 */
                DerefOf (EWRY [One]) [0x39] = ST80 /* \ST80 */
                DerefOf (EWRY [One]) [0x3A] = ST81 /* \ST81 */
                DerefOf (EWRY [One]) [0x3B] = ST82 /* \ST82 */
                DerefOf (EWRY [One]) [0x3C] = ST83 /* \ST83 */
                DerefOf (EWRY [One]) [0x3D] = ST84 /* \ST84 */
                DerefOf (EWRY [One]) [0x3E] = ST85 /* \ST85 */
                DerefOf (EWRY [One]) [0x3F] = ST86 /* \ST86 */
                DerefOf (EWRY [One]) [0x40] = ST87 /* \ST87 */
                DerefOf (EWRY [One]) [0x41] = ST88 /* \ST88 */
                DerefOf (EWRY [One]) [0x42] = ST89 /* \ST89 */
                DerefOf (EWRY [One]) [0x43] = ST8A /* \ST8A */
                DerefOf (EWRY [One]) [0x44] = ST8B /* \ST8B */
                Return (EWRY) /* \_SB_.PC00.RP05.PXSX.EWRY */
            }

            Name (WGDY, Package (0x02)
            {
                0x02, 
                Package (0x1C)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WGDS, 0, Serialized)
            {
                DerefOf (WGDY [One]) [One] = SD11 /* \SD11 */
                DerefOf (WGDY [One]) [0x02] = SD12 /* \SD12 */
                DerefOf (WGDY [One]) [0x03] = SD13 /* \SD13 */
                DerefOf (WGDY [One]) [0x04] = SD14 /* \SD14 */
                DerefOf (WGDY [One]) [0x05] = SD15 /* \SD15 */
                DerefOf (WGDY [One]) [0x06] = SD16 /* \SD16 */
                DerefOf (WGDY [One]) [0x07] = SD17 /* \SD17 */
                DerefOf (WGDY [One]) [0x08] = SD18 /* \SD18 */
                DerefOf (WGDY [One]) [0x09] = SD19 /* \SD19 */
                DerefOf (WGDY [One]) [0x0A] = SD21 /* \SD21 */
                DerefOf (WGDY [One]) [0x0B] = SD22 /* \SD22 */
                DerefOf (WGDY [One]) [0x0C] = SD23 /* \SD23 */
                DerefOf (WGDY [One]) [0x0D] = SD24 /* \SD24 */
                DerefOf (WGDY [One]) [0x0E] = SD25 /* \SD25 */
                DerefOf (WGDY [One]) [0x0F] = SD26 /* \SD26 */
                DerefOf (WGDY [One]) [0x10] = SD27 /* \SD27 */
                DerefOf (WGDY [One]) [0x11] = SD28 /* \SD28 */
                DerefOf (WGDY [One]) [0x12] = SD29 /* \SD29 */
                DerefOf (WGDY [One]) [0x13] = SD31 /* \SD31 */
                DerefOf (WGDY [One]) [0x14] = SD32 /* \SD32 */
                DerefOf (WGDY [One]) [0x15] = SD33 /* \SD33 */
                DerefOf (WGDY [One]) [0x16] = SD34 /* \SD34 */
                DerefOf (WGDY [One]) [0x17] = SD35 /* \SD35 */
                DerefOf (WGDY [One]) [0x18] = SD36 /* \SD36 */
                DerefOf (WGDY [One]) [0x19] = SD37 /* \SD37 */
                DerefOf (WGDY [One]) [0x1A] = SD38 /* \SD38 */
                DerefOf (WGDY [One]) [0x1B] = SD39 /* \SD39 */
                Return (WGDY) /* \_SB_.PC00.RP05.PXSX.WGDY */
            }

            Name (ECKY, Package (0x02)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    Zero
                }
            })
            Method (ECKV, 0, Serialized)
            {
                DerefOf (ECKY [One]) [One] = CECV /* \CECV */
                Return (ECKY) /* \_SB_.PC00.RP05.PXSX.ECKY */
            }

            Name (PPAY, Package (0x02)
            {
                One, 
                Package (0x18)
                {
                    0x07, 
                    Zero, 
                    0x18, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x18, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28
                }
            })
            Method (PPAG, 0, Serialized)
            {
                DerefOf (PPAY [One]) [One] = WAGE /* \WAGE */
                DerefOf (PPAY [One]) [0x02] = AGA1 /* \AGA1 */
                DerefOf (PPAY [One]) [0x03] = AGA2 /* \AGA2 */
                DerefOf (PPAY [One]) [0x04] = AGA3 /* \AGA3 */
                DerefOf (PPAY [One]) [0x05] = AGA4 /* \AGA4 */
                DerefOf (PPAY [One]) [0x06] = AGA5 /* \AGA5 */
                DerefOf (PPAY [One]) [0x07] = AGA6 /* \AGA6 */
                DerefOf (PPAY [One]) [0x08] = AGA7 /* \AGA7 */
                DerefOf (PPAY [One]) [0x09] = AGA8 /* \AGA8 */
                DerefOf (PPAY [One]) [0x0A] = AGA9 /* \AGA9 */
                DerefOf (PPAY [One]) [0x0B] = AGAA /* \AGAA */
                DerefOf (PPAY [One]) [0x0C] = AGAB /* \AGAB */
                DerefOf (PPAY [One]) [0x0D] = AGB1 /* \AGB1 */
                DerefOf (PPAY [One]) [0x0E] = AGB2 /* \AGB2 */
                DerefOf (PPAY [One]) [0x0F] = AGB3 /* \AGB3 */
                DerefOf (PPAY [One]) [0x10] = AGB4 /* \AGB4 */
                DerefOf (PPAY [One]) [0x11] = AGB5 /* \AGB5 */
                DerefOf (PPAY [One]) [0x12] = AGB6 /* \AGB6 */
                DerefOf (PPAY [One]) [0x13] = AGB7 /* \AGB7 */
                DerefOf (PPAY [One]) [0x14] = AGB8 /* \AGB8 */
                DerefOf (PPAY [One]) [0x15] = AGB9 /* \AGB9 */
                DerefOf (PPAY [One]) [0x16] = AGBA /* \AGBA */
                DerefOf (PPAY [One]) [0x17] = AGBB /* \AGBB */
                Return (PPAY) /* \_SB_.PC00.RP05.PXSX.PPAY */
            }

            Name (SADX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    0x80000000
                }, 

                Package (0x02)
                {
                    0x12, 
                    0x80000000
                }
            })
            Method (SADS, 0, Serialized)
            {
                DerefOf (SADX [One]) [One] = ATDV /* \ATDV */
                DerefOf (SADX [0x02]) [One] = ATDV /* \ATDV */
                Return (SADX) /* \_SB_.PC00.RP05.PXSX.SADX */
            }

            Name (GPCX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }, 

                Package (0x02)
                {
                    0x12, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }
            })
            Method (GPC, 0, Serialized)
            {
                Return (GPCX) /* \_SB_.PC00.RP05.PXSX.GPCX */
            }
        }

        If (((WWEN != Zero) && (WWRP == SLOT)))
        {
            Method (SHRF, 0, NotSerialized)
            {
                PSD0 (SLOT)
                SPCO (WCLK, One)
                SGOV (WFCP, PFCP)
                Sleep (TN2B)
                SGOV (WBRS, (~PBRS & One))
                Sleep (TB2R)
                SGOV (PRST, (~WPRP & One))
                L23D ()
            }

            Method (_RST, 0, Serialized)  // _RST: Device Reset
            {
                If ((WWEN == 0x02))
                {
                    Local0 = Acquire (WWMT, 0x03E8)
                    If ((Local0 == Zero))
                    {
                        ADBG ("Start WWAN FLDR")
                        DL23 ()
                        SGOV (WBRS, PBRS)
                        Sleep (TBTG)
                        SHRF ()
                        ADBG ("End WWAN FLDR")
                        Release (WWMT)
                    }
                }
                Else
                {
                    SGOV (WBRS, PBRS)
                    Sleep (0xC8)
                    Notify (PXSX, One) // Device Check
                    SGOV (PRST, (~WPRP & One))
                    SGOV (WBRS, (~PBRS & One))
                    Sleep (0xC8)
                    Local0 = Zero
                    While ((LASX == Zero))
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    Sleep (0x0A)
                    Notify (PXSX, One) // Device Check
                }
            }

            PowerResource (MRST, 0x05, 0x0000)
            {
                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    Return (One)
                }

                Method (_ON, 0, Serialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                {
                }

                Method (_RST, 0, Serialized)  // _RST: Device Reset
                {
                    Local0 = Acquire (WWMT, 0x03E8)
                    If ((Local0 == Zero))
                    {
                        ADBG ("Start WWAN PR _RST")
                        DL23 ()
                        SGOV (WBRS, PBRS)
                        SPCO (WCLK, Zero)
                        Sleep (TB2F)
                        SGOV (WFCP, (~PFCP & One))
                        Sleep (TFDI)
                        SHRF ()
                        Release (WWMT)
                    }
                }
            }
        }

        If ((WIST () || ((WWEN != Zero) && (WWRP == SLOT))))
        {
            PowerResource (DRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    If ((DCAP & 0x10000000))
                    {
                        Local0 = DCTR /* \_SB_.PC00.RP05.PXSX.DCTR */
                        Local0 |= 0x8000
                        DCTR = Local0
                    }
                }
            }

            Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
            {
                If (WIST ())
                {
                    If (CondRefOf (WRST))
                    {
                        Return (Package (0x01)
                        {
                            WRST
                        })
                    }
                }

                If (((WWEN != Zero) && (WWRP == SLOT)))
                {
                    If (CondRefOf (MRST))
                    {
                        Return (Package (0x01)
                        {
                            MRST
                        })
                    }
                }

                Return (Package (0x01)
                {
                    DRST
                })
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (WIST ())
                {
                    If ((Arg0 == ToUUID ("f21202bf-8f78-4dc6-a5b3-1f738e285ade") /* Unknown UUID */))
                    {
                        If ((Arg2 == Zero))
                        {
                            If ((Arg1 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x0F                                             // .
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }
                        }

                        If ((Arg2 == One))
                        {
                            Local0 = ACSD /* \ACSD */
                            Return (Local0)
                        }

                        If ((Arg2 == 0x02))
                        {
                            Local0 = I5BS /* \I5BS */
                            Return (Local0)
                        }

                        If ((Arg2 == 0x03))
                        {
                            Local0 = UHBS /* \UHBS */
                            Return (Local0)
                        }

                        Return (Zero)
                    }
                }

                If (((WWEN != Zero) && (WWRP == SLOT)))
                {
                    If ((Arg0 == ToUUID ("bad01b75-22a8-4f48-8792-bdde9467747d") /* Unknown UUID */))
                    {
                        If ((Arg2 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x09                                             // .
                            })
                        }

                        If ((Arg2 == One)) {}
                        If ((Arg2 == 0x02)) {}
                        If ((Arg2 == 0x03))
                        {
                            If ((WRTO == One)) {}
                            ElseIf ((WRTO == 0x03)) {}
                            Else
                            {
                            }

                            Return (WRTO) /* \WRTO */
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }

    Scope (_SB.PC00.RP06.PXSX)
    {
        OperationRegion (RPXX, SystemMemory, GMIO (^_ADR (), _ADR), 0x10)
        Field (RPXX, AnyAcc, NoLock, Preserve)
        {
            VDID,   32
        }

        OperationRegion (FLDR, SystemMemory, (GMIO (^_ADR (), _ADR) + 0x44), 0x06)
        Field (FLDR, ByteAcc, NoLock, Preserve)
        {
            DCAP,   32, 
            DCTR,   16
        }

        Method (WIST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x095A8086)
                    {
                        Return (One)
                    }
                    Case (0x095B8086)
                    {
                        Return (One)
                    }
                    Case (0x31658086)
                    {
                        Return (One)
                    }
                    Case (0x31668086)
                    {
                        Return (One)
                    }
                    Case (0x08B18086)
                    {
                        Return (One)
                    }
                    Case (0x08B28086)
                    {
                        Return (One)
                    }
                    Case (0x08B38086)
                    {
                        Return (One)
                    }
                    Case (0x08B48086)
                    {
                        Return (One)
                    }
                    Case (0x24F38086)
                    {
                        Return (One)
                    }
                    Case (0x24F48086)
                    {
                        Return (One)
                    }
                    Case (0x24F58086)
                    {
                        Return (One)
                    }
                    Case (0x24F68086)
                    {
                        Return (One)
                    }
                    Case (0x24FD8086)
                    {
                        Return (One)
                    }
                    Case (0x24FB8086)
                    {
                        Return (One)
                    }
                    Case (0x25268086)
                    {
                        Return (One)
                    }
                    Case (0x271B8086)
                    {
                        Return (One)
                    }
                    Case (0x27238086)
                    {
                        Return (One)
                    }
                    Case (0x27258086)
                    {
                        Return (One)
                    }
                    Case (0x885210EC)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (WWST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x73608086)
                    {
                        Return (One)
                    }
                    Case (0x75608086)
                    {
                        Return (One)
                    }
                    Case (0x4D7514C3)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        If (WIST ())
        {
            PowerResource (WRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    If ((DCAP & 0x10000000))
                    {
                        Local0 = DCTR /* \_SB_.PC00.RP06.PXSX.DCTR */
                        Local0 |= 0x8000
                        DCTR = Local0
                    }
                }
            }

            Name (SPLX, Package (0x02)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (SPLC, 0, Serialized)
            {
                DerefOf (SPLX [One]) [Zero] = DOM1 /* \DOM1 */
                DerefOf (SPLX [One]) [One] = LIM1 /* \LIM1 */
                DerefOf (SPLX [One]) [0x02] = TIM1 /* \TIM1 */
                Return (SPLX) /* \_SB_.PC00.RP06.PXSX.SPLX */
            }

            Name (WANX, Package (0x03)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (WAND, 0, Serialized)
            {
                DerefOf (WANX [One]) [Zero] = Zero
                DerefOf (WANX [One]) [One] = TRD0 /* \TRD0 */
                DerefOf (WANX [One]) [0x02] = TRL0 /* \TRL0 */
                DerefOf (WANX [0x02]) [Zero] = One
                DerefOf (WANX [0x02]) [One] = TRD1 /* \TRD1 */
                DerefOf (WANX [0x02]) [0x02] = TRL1 /* \TRL1 */
                Return (WANX) /* \_SB_.PC00.RP06.PXSX.WANX */
            }

            Name (WRDX, Package (0x02)
            {
                Zero, 
                Package (0x02)
                {
                    0x80000000, 
                    0x8000
                }
            })
            Method (WRDD, 0, Serialized)
            {
                DerefOf (WRDX [One]) [Zero] = WDM1 /* \WDM1 */
                DerefOf (WRDX [One]) [One] = CID1 /* \CID1 */
                Return (WRDX) /* \_SB_.PC00.RP06.PXSX.WRDX */
            }

            Name (WRDY, Package (0x02)
            {
                One, 
                Package (0x18)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WRDS, 0, Serialized)
            {
                DerefOf (WRDY [One]) [One] = STXE /* \STXE */
                DerefOf (WRDY [One]) [0x02] = ST10 /* \ST10 */
                DerefOf (WRDY [One]) [0x03] = ST11 /* \ST11 */
                DerefOf (WRDY [One]) [0x04] = ST12 /* \ST12 */
                DerefOf (WRDY [One]) [0x05] = ST13 /* \ST13 */
                DerefOf (WRDY [One]) [0x06] = ST14 /* \ST14 */
                DerefOf (WRDY [One]) [0x07] = ST15 /* \ST15 */
                DerefOf (WRDY [One]) [0x08] = ST16 /* \ST16 */
                DerefOf (WRDY [One]) [0x09] = ST17 /* \ST17 */
                DerefOf (WRDY [One]) [0x0A] = ST18 /* \ST18 */
                DerefOf (WRDY [One]) [0x0B] = ST19 /* \ST19 */
                DerefOf (WRDY [One]) [0x0C] = ST50 /* \ST50 */
                DerefOf (WRDY [One]) [0x0D] = ST51 /* \ST51 */
                DerefOf (WRDY [One]) [0x0E] = ST52 /* \ST52 */
                DerefOf (WRDY [One]) [0x0F] = ST53 /* \ST53 */
                DerefOf (WRDY [One]) [0x10] = ST54 /* \ST54 */
                DerefOf (WRDY [One]) [0x11] = ST55 /* \ST55 */
                DerefOf (WRDY [One]) [0x12] = ST56 /* \ST56 */
                DerefOf (WRDY [One]) [0x13] = ST57 /* \ST57 */
                DerefOf (WRDY [One]) [0x14] = ST58 /* \ST58 */
                DerefOf (WRDY [One]) [0x15] = ST59 /* \ST59 */
                DerefOf (WRDY [One]) [0x16] = ST5A /* \ST5A */
                DerefOf (WRDY [One]) [0x17] = ST5B /* \ST5B */
                Return (WRDY) /* \_SB_.PC00.RP06.PXSX.WRDY */
            }

            Name (EWRY, Package (0x02)
            {
                One, 
                Package (0x45)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (EWRD, 0, Serialized)
            {
                DerefOf (EWRY [One]) [One] = STDE /* \STDE */
                DerefOf (EWRY [One]) [0x02] = STRS /* \STRS */
                DerefOf (EWRY [One]) [0x03] = ST20 /* \ST20 */
                DerefOf (EWRY [One]) [0x04] = ST21 /* \ST21 */
                DerefOf (EWRY [One]) [0x05] = ST22 /* \ST22 */
                DerefOf (EWRY [One]) [0x06] = ST23 /* \ST23 */
                DerefOf (EWRY [One]) [0x07] = ST24 /* \ST24 */
                DerefOf (EWRY [One]) [0x08] = ST25 /* \ST25 */
                DerefOf (EWRY [One]) [0x09] = ST26 /* \ST26 */
                DerefOf (EWRY [One]) [0x0A] = ST27 /* \ST27 */
                DerefOf (EWRY [One]) [0x0B] = ST28 /* \ST28 */
                DerefOf (EWRY [One]) [0x0C] = ST29 /* \ST29 */
                DerefOf (EWRY [One]) [0x0D] = ST60 /* \ST60 */
                DerefOf (EWRY [One]) [0x0E] = ST61 /* \ST61 */
                DerefOf (EWRY [One]) [0x0F] = ST62 /* \ST62 */
                DerefOf (EWRY [One]) [0x10] = ST63 /* \ST63 */
                DerefOf (EWRY [One]) [0x11] = ST64 /* \ST64 */
                DerefOf (EWRY [One]) [0x12] = ST65 /* \ST65 */
                DerefOf (EWRY [One]) [0x13] = ST66 /* \ST66 */
                DerefOf (EWRY [One]) [0x14] = ST67 /* \ST67 */
                DerefOf (EWRY [One]) [0x15] = ST68 /* \ST68 */
                DerefOf (EWRY [One]) [0x16] = ST69 /* \ST69 */
                DerefOf (EWRY [One]) [0x17] = ST6A /* \ST6A */
                DerefOf (EWRY [One]) [0x18] = ST6B /* \ST6B */
                DerefOf (EWRY [One]) [0x19] = ST30 /* \ST30 */
                DerefOf (EWRY [One]) [0x1A] = ST31 /* \ST31 */
                DerefOf (EWRY [One]) [0x1B] = ST32 /* \ST32 */
                DerefOf (EWRY [One]) [0x1C] = ST33 /* \ST33 */
                DerefOf (EWRY [One]) [0x1D] = ST34 /* \ST34 */
                DerefOf (EWRY [One]) [0x1E] = ST35 /* \ST35 */
                DerefOf (EWRY [One]) [0x1F] = ST36 /* \ST36 */
                DerefOf (EWRY [One]) [0x20] = ST37 /* \ST37 */
                DerefOf (EWRY [One]) [0x21] = ST38 /* \ST38 */
                DerefOf (EWRY [One]) [0x22] = ST39 /* \ST39 */
                DerefOf (EWRY [One]) [0x23] = ST70 /* \ST70 */
                DerefOf (EWRY [One]) [0x24] = ST71 /* \ST71 */
                DerefOf (EWRY [One]) [0x25] = ST72 /* \ST72 */
                DerefOf (EWRY [One]) [0x26] = ST73 /* \ST73 */
                DerefOf (EWRY [One]) [0x27] = ST74 /* \ST74 */
                DerefOf (EWRY [One]) [0x28] = ST75 /* \ST75 */
                DerefOf (EWRY [One]) [0x29] = ST76 /* \ST76 */
                DerefOf (EWRY [One]) [0x2A] = ST77 /* \ST77 */
                DerefOf (EWRY [One]) [0x2B] = ST78 /* \ST78 */
                DerefOf (EWRY [One]) [0x2C] = ST79 /* \ST79 */
                DerefOf (EWRY [One]) [0x2D] = ST7A /* \ST7A */
                DerefOf (EWRY [One]) [0x2E] = ST7B /* \ST7B */
                DerefOf (EWRY [One]) [0x2F] = ST40 /* \ST40 */
                DerefOf (EWRY [One]) [0x30] = ST41 /* \ST41 */
                DerefOf (EWRY [One]) [0x31] = ST42 /* \ST42 */
                DerefOf (EWRY [One]) [0x32] = ST43 /* \ST43 */
                DerefOf (EWRY [One]) [0x33] = ST44 /* \ST44 */
                DerefOf (EWRY [One]) [0x34] = ST45 /* \ST45 */
                DerefOf (EWRY [One]) [0x35] = ST46 /* \ST46 */
                DerefOf (EWRY [One]) [0x36] = ST47 /* \ST47 */
                DerefOf (EWRY [One]) [0x37] = ST48 /* \ST48 */
                DerefOf (EWRY [One]) [0x38] = ST49 /* \ST49 */
                DerefOf (EWRY [One]) [0x39] = ST80 /* \ST80 */
                DerefOf (EWRY [One]) [0x3A] = ST81 /* \ST81 */
                DerefOf (EWRY [One]) [0x3B] = ST82 /* \ST82 */
                DerefOf (EWRY [One]) [0x3C] = ST83 /* \ST83 */
                DerefOf (EWRY [One]) [0x3D] = ST84 /* \ST84 */
                DerefOf (EWRY [One]) [0x3E] = ST85 /* \ST85 */
                DerefOf (EWRY [One]) [0x3F] = ST86 /* \ST86 */
                DerefOf (EWRY [One]) [0x40] = ST87 /* \ST87 */
                DerefOf (EWRY [One]) [0x41] = ST88 /* \ST88 */
                DerefOf (EWRY [One]) [0x42] = ST89 /* \ST89 */
                DerefOf (EWRY [One]) [0x43] = ST8A /* \ST8A */
                DerefOf (EWRY [One]) [0x44] = ST8B /* \ST8B */
                Return (EWRY) /* \_SB_.PC00.RP06.PXSX.EWRY */
            }

            Name (WGDY, Package (0x02)
            {
                0x02, 
                Package (0x1C)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WGDS, 0, Serialized)
            {
                DerefOf (WGDY [One]) [One] = SD11 /* \SD11 */
                DerefOf (WGDY [One]) [0x02] = SD12 /* \SD12 */
                DerefOf (WGDY [One]) [0x03] = SD13 /* \SD13 */
                DerefOf (WGDY [One]) [0x04] = SD14 /* \SD14 */
                DerefOf (WGDY [One]) [0x05] = SD15 /* \SD15 */
                DerefOf (WGDY [One]) [0x06] = SD16 /* \SD16 */
                DerefOf (WGDY [One]) [0x07] = SD17 /* \SD17 */
                DerefOf (WGDY [One]) [0x08] = SD18 /* \SD18 */
                DerefOf (WGDY [One]) [0x09] = SD19 /* \SD19 */
                DerefOf (WGDY [One]) [0x0A] = SD21 /* \SD21 */
                DerefOf (WGDY [One]) [0x0B] = SD22 /* \SD22 */
                DerefOf (WGDY [One]) [0x0C] = SD23 /* \SD23 */
                DerefOf (WGDY [One]) [0x0D] = SD24 /* \SD24 */
                DerefOf (WGDY [One]) [0x0E] = SD25 /* \SD25 */
                DerefOf (WGDY [One]) [0x0F] = SD26 /* \SD26 */
                DerefOf (WGDY [One]) [0x10] = SD27 /* \SD27 */
                DerefOf (WGDY [One]) [0x11] = SD28 /* \SD28 */
                DerefOf (WGDY [One]) [0x12] = SD29 /* \SD29 */
                DerefOf (WGDY [One]) [0x13] = SD31 /* \SD31 */
                DerefOf (WGDY [One]) [0x14] = SD32 /* \SD32 */
                DerefOf (WGDY [One]) [0x15] = SD33 /* \SD33 */
                DerefOf (WGDY [One]) [0x16] = SD34 /* \SD34 */
                DerefOf (WGDY [One]) [0x17] = SD35 /* \SD35 */
                DerefOf (WGDY [One]) [0x18] = SD36 /* \SD36 */
                DerefOf (WGDY [One]) [0x19] = SD37 /* \SD37 */
                DerefOf (WGDY [One]) [0x1A] = SD38 /* \SD38 */
                DerefOf (WGDY [One]) [0x1B] = SD39 /* \SD39 */
                Return (WGDY) /* \_SB_.PC00.RP06.PXSX.WGDY */
            }

            Name (ECKY, Package (0x02)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    Zero
                }
            })
            Method (ECKV, 0, Serialized)
            {
                DerefOf (ECKY [One]) [One] = CECV /* \CECV */
                Return (ECKY) /* \_SB_.PC00.RP06.PXSX.ECKY */
            }

            Name (PPAY, Package (0x02)
            {
                One, 
                Package (0x18)
                {
                    0x07, 
                    Zero, 
                    0x18, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x18, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28
                }
            })
            Method (PPAG, 0, Serialized)
            {
                DerefOf (PPAY [One]) [One] = WAGE /* \WAGE */
                DerefOf (PPAY [One]) [0x02] = AGA1 /* \AGA1 */
                DerefOf (PPAY [One]) [0x03] = AGA2 /* \AGA2 */
                DerefOf (PPAY [One]) [0x04] = AGA3 /* \AGA3 */
                DerefOf (PPAY [One]) [0x05] = AGA4 /* \AGA4 */
                DerefOf (PPAY [One]) [0x06] = AGA5 /* \AGA5 */
                DerefOf (PPAY [One]) [0x07] = AGA6 /* \AGA6 */
                DerefOf (PPAY [One]) [0x08] = AGA7 /* \AGA7 */
                DerefOf (PPAY [One]) [0x09] = AGA8 /* \AGA8 */
                DerefOf (PPAY [One]) [0x0A] = AGA9 /* \AGA9 */
                DerefOf (PPAY [One]) [0x0B] = AGAA /* \AGAA */
                DerefOf (PPAY [One]) [0x0C] = AGAB /* \AGAB */
                DerefOf (PPAY [One]) [0x0D] = AGB1 /* \AGB1 */
                DerefOf (PPAY [One]) [0x0E] = AGB2 /* \AGB2 */
                DerefOf (PPAY [One]) [0x0F] = AGB3 /* \AGB3 */
                DerefOf (PPAY [One]) [0x10] = AGB4 /* \AGB4 */
                DerefOf (PPAY [One]) [0x11] = AGB5 /* \AGB5 */
                DerefOf (PPAY [One]) [0x12] = AGB6 /* \AGB6 */
                DerefOf (PPAY [One]) [0x13] = AGB7 /* \AGB7 */
                DerefOf (PPAY [One]) [0x14] = AGB8 /* \AGB8 */
                DerefOf (PPAY [One]) [0x15] = AGB9 /* \AGB9 */
                DerefOf (PPAY [One]) [0x16] = AGBA /* \AGBA */
                DerefOf (PPAY [One]) [0x17] = AGBB /* \AGBB */
                Return (PPAY) /* \_SB_.PC00.RP06.PXSX.PPAY */
            }

            Name (SADX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    0x80000000
                }, 

                Package (0x02)
                {
                    0x12, 
                    0x80000000
                }
            })
            Method (SADS, 0, Serialized)
            {
                DerefOf (SADX [One]) [One] = ATDV /* \ATDV */
                DerefOf (SADX [0x02]) [One] = ATDV /* \ATDV */
                Return (SADX) /* \_SB_.PC00.RP06.PXSX.SADX */
            }

            Name (GPCX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }, 

                Package (0x02)
                {
                    0x12, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }
            })
            Method (GPC, 0, Serialized)
            {
                Return (GPCX) /* \_SB_.PC00.RP06.PXSX.GPCX */
            }
        }

        If (((WWEN != Zero) && (WWRP == SLOT)))
        {
            Method (SHRF, 0, NotSerialized)
            {
                PSD0 (SLOT)
                SPCO (WCLK, One)
                SGOV (WFCP, PFCP)
                Sleep (TN2B)
                SGOV (WBRS, (~PBRS & One))
                Sleep (TB2R)
                SGOV (PRST, (~WPRP & One))
                L23D ()
            }

            Method (_RST, 0, Serialized)  // _RST: Device Reset
            {
                If ((WWEN == 0x02))
                {
                    Local0 = Acquire (WWMT, 0x03E8)
                    If ((Local0 == Zero))
                    {
                        ADBG ("Start WWAN FLDR")
                        DL23 ()
                        SGOV (WBRS, PBRS)
                        Sleep (TBTG)
                        SHRF ()
                        ADBG ("End WWAN FLDR")
                        Release (WWMT)
                    }
                }
                Else
                {
                    SGOV (WBRS, PBRS)
                    Sleep (0xC8)
                    Notify (PXSX, One) // Device Check
                    SGOV (PRST, (~WPRP & One))
                    SGOV (WBRS, (~PBRS & One))
                    Sleep (0xC8)
                    Local0 = Zero
                    While ((LASX == Zero))
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    Sleep (0x0A)
                    Notify (PXSX, One) // Device Check
                }
            }

            PowerResource (MRST, 0x05, 0x0000)
            {
                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    Return (One)
                }

                Method (_ON, 0, Serialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                {
                }

                Method (_RST, 0, Serialized)  // _RST: Device Reset
                {
                    Local0 = Acquire (WWMT, 0x03E8)
                    If ((Local0 == Zero))
                    {
                        ADBG ("Start WWAN PR _RST")
                        DL23 ()
                        SGOV (WBRS, PBRS)
                        SPCO (WCLK, Zero)
                        Sleep (TB2F)
                        SGOV (WFCP, (~PFCP & One))
                        Sleep (TFDI)
                        SHRF ()
                        Release (WWMT)
                    }
                }
            }
        }

        If ((WIST () || ((WWEN != Zero) && (WWRP == SLOT))))
        {
            PowerResource (DRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    If ((DCAP & 0x10000000))
                    {
                        Local0 = DCTR /* \_SB_.PC00.RP06.PXSX.DCTR */
                        Local0 |= 0x8000
                        DCTR = Local0
                    }
                }
            }

            Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
            {
                If (WIST ())
                {
                    If (CondRefOf (WRST))
                    {
                        Return (Package (0x01)
                        {
                            WRST
                        })
                    }
                }

                If (((WWEN != Zero) && (WWRP == SLOT)))
                {
                    If (CondRefOf (MRST))
                    {
                        Return (Package (0x01)
                        {
                            MRST
                        })
                    }
                }

                Return (Package (0x01)
                {
                    DRST
                })
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (WIST ())
                {
                    If ((Arg0 == ToUUID ("f21202bf-8f78-4dc6-a5b3-1f738e285ade") /* Unknown UUID */))
                    {
                        If ((Arg2 == Zero))
                        {
                            If ((Arg1 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x0F                                             // .
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }
                        }

                        If ((Arg2 == One))
                        {
                            Local0 = ACSD /* \ACSD */
                            Return (Local0)
                        }

                        If ((Arg2 == 0x02))
                        {
                            Local0 = I5BS /* \I5BS */
                            Return (Local0)
                        }

                        If ((Arg2 == 0x03))
                        {
                            Local0 = UHBS /* \UHBS */
                            Return (Local0)
                        }

                        Return (Zero)
                    }
                }

                If (((WWEN != Zero) && (WWRP == SLOT)))
                {
                    If ((Arg0 == ToUUID ("bad01b75-22a8-4f48-8792-bdde9467747d") /* Unknown UUID */))
                    {
                        If ((Arg2 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x09                                             // .
                            })
                        }

                        If ((Arg2 == One)) {}
                        If ((Arg2 == 0x02)) {}
                        If ((Arg2 == 0x03))
                        {
                            If ((WRTO == One)) {}
                            ElseIf ((WRTO == 0x03)) {}
                            Else
                            {
                            }

                            Return (WRTO) /* \WRTO */
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }

    Scope (_SB.PC00.RP07.PXSX)
    {
        OperationRegion (RPXX, SystemMemory, GMIO (^_ADR (), _ADR), 0x10)
        Field (RPXX, AnyAcc, NoLock, Preserve)
        {
            VDID,   32
        }

        OperationRegion (FLDR, SystemMemory, (GMIO (^_ADR (), _ADR) + 0x44), 0x06)
        Field (FLDR, ByteAcc, NoLock, Preserve)
        {
            DCAP,   32, 
            DCTR,   16
        }

        Method (WIST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x095A8086)
                    {
                        Return (One)
                    }
                    Case (0x095B8086)
                    {
                        Return (One)
                    }
                    Case (0x31658086)
                    {
                        Return (One)
                    }
                    Case (0x31668086)
                    {
                        Return (One)
                    }
                    Case (0x08B18086)
                    {
                        Return (One)
                    }
                    Case (0x08B28086)
                    {
                        Return (One)
                    }
                    Case (0x08B38086)
                    {
                        Return (One)
                    }
                    Case (0x08B48086)
                    {
                        Return (One)
                    }
                    Case (0x24F38086)
                    {
                        Return (One)
                    }
                    Case (0x24F48086)
                    {
                        Return (One)
                    }
                    Case (0x24F58086)
                    {
                        Return (One)
                    }
                    Case (0x24F68086)
                    {
                        Return (One)
                    }
                    Case (0x24FD8086)
                    {
                        Return (One)
                    }
                    Case (0x24FB8086)
                    {
                        Return (One)
                    }
                    Case (0x25268086)
                    {
                        Return (One)
                    }
                    Case (0x271B8086)
                    {
                        Return (One)
                    }
                    Case (0x27238086)
                    {
                        Return (One)
                    }
                    Case (0x27258086)
                    {
                        Return (One)
                    }
                    Case (0x885210EC)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (WWST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x73608086)
                    {
                        Return (One)
                    }
                    Case (0x75608086)
                    {
                        Return (One)
                    }
                    Case (0x4D7514C3)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        If (WIST ())
        {
            PowerResource (WRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    If ((DCAP & 0x10000000))
                    {
                        Local0 = DCTR /* \_SB_.PC00.RP07.PXSX.DCTR */
                        Local0 |= 0x8000
                        DCTR = Local0
                    }
                }
            }

            Name (SPLX, Package (0x02)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (SPLC, 0, Serialized)
            {
                DerefOf (SPLX [One]) [Zero] = DOM1 /* \DOM1 */
                DerefOf (SPLX [One]) [One] = LIM1 /* \LIM1 */
                DerefOf (SPLX [One]) [0x02] = TIM1 /* \TIM1 */
                Return (SPLX) /* \_SB_.PC00.RP07.PXSX.SPLX */
            }

            Name (WANX, Package (0x03)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (WAND, 0, Serialized)
            {
                DerefOf (WANX [One]) [Zero] = Zero
                DerefOf (WANX [One]) [One] = TRD0 /* \TRD0 */
                DerefOf (WANX [One]) [0x02] = TRL0 /* \TRL0 */
                DerefOf (WANX [0x02]) [Zero] = One
                DerefOf (WANX [0x02]) [One] = TRD1 /* \TRD1 */
                DerefOf (WANX [0x02]) [0x02] = TRL1 /* \TRL1 */
                Return (WANX) /* \_SB_.PC00.RP07.PXSX.WANX */
            }

            Name (WRDX, Package (0x02)
            {
                Zero, 
                Package (0x02)
                {
                    0x80000000, 
                    0x8000
                }
            })
            Method (WRDD, 0, Serialized)
            {
                DerefOf (WRDX [One]) [Zero] = WDM1 /* \WDM1 */
                DerefOf (WRDX [One]) [One] = CID1 /* \CID1 */
                Return (WRDX) /* \_SB_.PC00.RP07.PXSX.WRDX */
            }

            Name (WRDY, Package (0x02)
            {
                One, 
                Package (0x18)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WRDS, 0, Serialized)
            {
                DerefOf (WRDY [One]) [One] = STXE /* \STXE */
                DerefOf (WRDY [One]) [0x02] = ST10 /* \ST10 */
                DerefOf (WRDY [One]) [0x03] = ST11 /* \ST11 */
                DerefOf (WRDY [One]) [0x04] = ST12 /* \ST12 */
                DerefOf (WRDY [One]) [0x05] = ST13 /* \ST13 */
                DerefOf (WRDY [One]) [0x06] = ST14 /* \ST14 */
                DerefOf (WRDY [One]) [0x07] = ST15 /* \ST15 */
                DerefOf (WRDY [One]) [0x08] = ST16 /* \ST16 */
                DerefOf (WRDY [One]) [0x09] = ST17 /* \ST17 */
                DerefOf (WRDY [One]) [0x0A] = ST18 /* \ST18 */
                DerefOf (WRDY [One]) [0x0B] = ST19 /* \ST19 */
                DerefOf (WRDY [One]) [0x0C] = ST50 /* \ST50 */
                DerefOf (WRDY [One]) [0x0D] = ST51 /* \ST51 */
                DerefOf (WRDY [One]) [0x0E] = ST52 /* \ST52 */
                DerefOf (WRDY [One]) [0x0F] = ST53 /* \ST53 */
                DerefOf (WRDY [One]) [0x10] = ST54 /* \ST54 */
                DerefOf (WRDY [One]) [0x11] = ST55 /* \ST55 */
                DerefOf (WRDY [One]) [0x12] = ST56 /* \ST56 */
                DerefOf (WRDY [One]) [0x13] = ST57 /* \ST57 */
                DerefOf (WRDY [One]) [0x14] = ST58 /* \ST58 */
                DerefOf (WRDY [One]) [0x15] = ST59 /* \ST59 */
                DerefOf (WRDY [One]) [0x16] = ST5A /* \ST5A */
                DerefOf (WRDY [One]) [0x17] = ST5B /* \ST5B */
                Return (WRDY) /* \_SB_.PC00.RP07.PXSX.WRDY */
            }

            Name (EWRY, Package (0x02)
            {
                One, 
                Package (0x45)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (EWRD, 0, Serialized)
            {
                DerefOf (EWRY [One]) [One] = STDE /* \STDE */
                DerefOf (EWRY [One]) [0x02] = STRS /* \STRS */
                DerefOf (EWRY [One]) [0x03] = ST20 /* \ST20 */
                DerefOf (EWRY [One]) [0x04] = ST21 /* \ST21 */
                DerefOf (EWRY [One]) [0x05] = ST22 /* \ST22 */
                DerefOf (EWRY [One]) [0x06] = ST23 /* \ST23 */
                DerefOf (EWRY [One]) [0x07] = ST24 /* \ST24 */
                DerefOf (EWRY [One]) [0x08] = ST25 /* \ST25 */
                DerefOf (EWRY [One]) [0x09] = ST26 /* \ST26 */
                DerefOf (EWRY [One]) [0x0A] = ST27 /* \ST27 */
                DerefOf (EWRY [One]) [0x0B] = ST28 /* \ST28 */
                DerefOf (EWRY [One]) [0x0C] = ST29 /* \ST29 */
                DerefOf (EWRY [One]) [0x0D] = ST60 /* \ST60 */
                DerefOf (EWRY [One]) [0x0E] = ST61 /* \ST61 */
                DerefOf (EWRY [One]) [0x0F] = ST62 /* \ST62 */
                DerefOf (EWRY [One]) [0x10] = ST63 /* \ST63 */
                DerefOf (EWRY [One]) [0x11] = ST64 /* \ST64 */
                DerefOf (EWRY [One]) [0x12] = ST65 /* \ST65 */
                DerefOf (EWRY [One]) [0x13] = ST66 /* \ST66 */
                DerefOf (EWRY [One]) [0x14] = ST67 /* \ST67 */
                DerefOf (EWRY [One]) [0x15] = ST68 /* \ST68 */
                DerefOf (EWRY [One]) [0x16] = ST69 /* \ST69 */
                DerefOf (EWRY [One]) [0x17] = ST6A /* \ST6A */
                DerefOf (EWRY [One]) [0x18] = ST6B /* \ST6B */
                DerefOf (EWRY [One]) [0x19] = ST30 /* \ST30 */
                DerefOf (EWRY [One]) [0x1A] = ST31 /* \ST31 */
                DerefOf (EWRY [One]) [0x1B] = ST32 /* \ST32 */
                DerefOf (EWRY [One]) [0x1C] = ST33 /* \ST33 */
                DerefOf (EWRY [One]) [0x1D] = ST34 /* \ST34 */
                DerefOf (EWRY [One]) [0x1E] = ST35 /* \ST35 */
                DerefOf (EWRY [One]) [0x1F] = ST36 /* \ST36 */
                DerefOf (EWRY [One]) [0x20] = ST37 /* \ST37 */
                DerefOf (EWRY [One]) [0x21] = ST38 /* \ST38 */
                DerefOf (EWRY [One]) [0x22] = ST39 /* \ST39 */
                DerefOf (EWRY [One]) [0x23] = ST70 /* \ST70 */
                DerefOf (EWRY [One]) [0x24] = ST71 /* \ST71 */
                DerefOf (EWRY [One]) [0x25] = ST72 /* \ST72 */
                DerefOf (EWRY [One]) [0x26] = ST73 /* \ST73 */
                DerefOf (EWRY [One]) [0x27] = ST74 /* \ST74 */
                DerefOf (EWRY [One]) [0x28] = ST75 /* \ST75 */
                DerefOf (EWRY [One]) [0x29] = ST76 /* \ST76 */
                DerefOf (EWRY [One]) [0x2A] = ST77 /* \ST77 */
                DerefOf (EWRY [One]) [0x2B] = ST78 /* \ST78 */
                DerefOf (EWRY [One]) [0x2C] = ST79 /* \ST79 */
                DerefOf (EWRY [One]) [0x2D] = ST7A /* \ST7A */
                DerefOf (EWRY [One]) [0x2E] = ST7B /* \ST7B */
                DerefOf (EWRY [One]) [0x2F] = ST40 /* \ST40 */
                DerefOf (EWRY [One]) [0x30] = ST41 /* \ST41 */
                DerefOf (EWRY [One]) [0x31] = ST42 /* \ST42 */
                DerefOf (EWRY [One]) [0x32] = ST43 /* \ST43 */
                DerefOf (EWRY [One]) [0x33] = ST44 /* \ST44 */
                DerefOf (EWRY [One]) [0x34] = ST45 /* \ST45 */
                DerefOf (EWRY [One]) [0x35] = ST46 /* \ST46 */
                DerefOf (EWRY [One]) [0x36] = ST47 /* \ST47 */
                DerefOf (EWRY [One]) [0x37] = ST48 /* \ST48 */
                DerefOf (EWRY [One]) [0x38] = ST49 /* \ST49 */
                DerefOf (EWRY [One]) [0x39] = ST80 /* \ST80 */
                DerefOf (EWRY [One]) [0x3A] = ST81 /* \ST81 */
                DerefOf (EWRY [One]) [0x3B] = ST82 /* \ST82 */
                DerefOf (EWRY [One]) [0x3C] = ST83 /* \ST83 */
                DerefOf (EWRY [One]) [0x3D] = ST84 /* \ST84 */
                DerefOf (EWRY [One]) [0x3E] = ST85 /* \ST85 */
                DerefOf (EWRY [One]) [0x3F] = ST86 /* \ST86 */
                DerefOf (EWRY [One]) [0x40] = ST87 /* \ST87 */
                DerefOf (EWRY [One]) [0x41] = ST88 /* \ST88 */
                DerefOf (EWRY [One]) [0x42] = ST89 /* \ST89 */
                DerefOf (EWRY [One]) [0x43] = ST8A /* \ST8A */
                DerefOf (EWRY [One]) [0x44] = ST8B /* \ST8B */
                Return (EWRY) /* \_SB_.PC00.RP07.PXSX.EWRY */
            }

            Name (WGDY, Package (0x02)
            {
                0x02, 
                Package (0x1C)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WGDS, 0, Serialized)
            {
                DerefOf (WGDY [One]) [One] = SD11 /* \SD11 */
                DerefOf (WGDY [One]) [0x02] = SD12 /* \SD12 */
                DerefOf (WGDY [One]) [0x03] = SD13 /* \SD13 */
                DerefOf (WGDY [One]) [0x04] = SD14 /* \SD14 */
                DerefOf (WGDY [One]) [0x05] = SD15 /* \SD15 */
                DerefOf (WGDY [One]) [0x06] = SD16 /* \SD16 */
                DerefOf (WGDY [One]) [0x07] = SD17 /* \SD17 */
                DerefOf (WGDY [One]) [0x08] = SD18 /* \SD18 */
                DerefOf (WGDY [One]) [0x09] = SD19 /* \SD19 */
                DerefOf (WGDY [One]) [0x0A] = SD21 /* \SD21 */
                DerefOf (WGDY [One]) [0x0B] = SD22 /* \SD22 */
                DerefOf (WGDY [One]) [0x0C] = SD23 /* \SD23 */
                DerefOf (WGDY [One]) [0x0D] = SD24 /* \SD24 */
                DerefOf (WGDY [One]) [0x0E] = SD25 /* \SD25 */
                DerefOf (WGDY [One]) [0x0F] = SD26 /* \SD26 */
                DerefOf (WGDY [One]) [0x10] = SD27 /* \SD27 */
                DerefOf (WGDY [One]) [0x11] = SD28 /* \SD28 */
                DerefOf (WGDY [One]) [0x12] = SD29 /* \SD29 */
                DerefOf (WGDY [One]) [0x13] = SD31 /* \SD31 */
                DerefOf (WGDY [One]) [0x14] = SD32 /* \SD32 */
                DerefOf (WGDY [One]) [0x15] = SD33 /* \SD33 */
                DerefOf (WGDY [One]) [0x16] = SD34 /* \SD34 */
                DerefOf (WGDY [One]) [0x17] = SD35 /* \SD35 */
                DerefOf (WGDY [One]) [0x18] = SD36 /* \SD36 */
                DerefOf (WGDY [One]) [0x19] = SD37 /* \SD37 */
                DerefOf (WGDY [One]) [0x1A] = SD38 /* \SD38 */
                DerefOf (WGDY [One]) [0x1B] = SD39 /* \SD39 */
                Return (WGDY) /* \_SB_.PC00.RP07.PXSX.WGDY */
            }

            Name (ECKY, Package (0x02)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    Zero
                }
            })
            Method (ECKV, 0, Serialized)
            {
                DerefOf (ECKY [One]) [One] = CECV /* \CECV */
                Return (ECKY) /* \_SB_.PC00.RP07.PXSX.ECKY */
            }

            Name (PPAY, Package (0x02)
            {
                One, 
                Package (0x18)
                {
                    0x07, 
                    Zero, 
                    0x18, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x18, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28
                }
            })
            Method (PPAG, 0, Serialized)
            {
                DerefOf (PPAY [One]) [One] = WAGE /* \WAGE */
                DerefOf (PPAY [One]) [0x02] = AGA1 /* \AGA1 */
                DerefOf (PPAY [One]) [0x03] = AGA2 /* \AGA2 */
                DerefOf (PPAY [One]) [0x04] = AGA3 /* \AGA3 */
                DerefOf (PPAY [One]) [0x05] = AGA4 /* \AGA4 */
                DerefOf (PPAY [One]) [0x06] = AGA5 /* \AGA5 */
                DerefOf (PPAY [One]) [0x07] = AGA6 /* \AGA6 */
                DerefOf (PPAY [One]) [0x08] = AGA7 /* \AGA7 */
                DerefOf (PPAY [One]) [0x09] = AGA8 /* \AGA8 */
                DerefOf (PPAY [One]) [0x0A] = AGA9 /* \AGA9 */
                DerefOf (PPAY [One]) [0x0B] = AGAA /* \AGAA */
                DerefOf (PPAY [One]) [0x0C] = AGAB /* \AGAB */
                DerefOf (PPAY [One]) [0x0D] = AGB1 /* \AGB1 */
                DerefOf (PPAY [One]) [0x0E] = AGB2 /* \AGB2 */
                DerefOf (PPAY [One]) [0x0F] = AGB3 /* \AGB3 */
                DerefOf (PPAY [One]) [0x10] = AGB4 /* \AGB4 */
                DerefOf (PPAY [One]) [0x11] = AGB5 /* \AGB5 */
                DerefOf (PPAY [One]) [0x12] = AGB6 /* \AGB6 */
                DerefOf (PPAY [One]) [0x13] = AGB7 /* \AGB7 */
                DerefOf (PPAY [One]) [0x14] = AGB8 /* \AGB8 */
                DerefOf (PPAY [One]) [0x15] = AGB9 /* \AGB9 */
                DerefOf (PPAY [One]) [0x16] = AGBA /* \AGBA */
                DerefOf (PPAY [One]) [0x17] = AGBB /* \AGBB */
                Return (PPAY) /* \_SB_.PC00.RP07.PXSX.PPAY */
            }

            Name (SADX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    0x80000000
                }, 

                Package (0x02)
                {
                    0x12, 
                    0x80000000
                }
            })
            Method (SADS, 0, Serialized)
            {
                DerefOf (SADX [One]) [One] = ATDV /* \ATDV */
                DerefOf (SADX [0x02]) [One] = ATDV /* \ATDV */
                Return (SADX) /* \_SB_.PC00.RP07.PXSX.SADX */
            }

            Name (GPCX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }, 

                Package (0x02)
                {
                    0x12, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }
            })
            Method (GPC, 0, Serialized)
            {
                Return (GPCX) /* \_SB_.PC00.RP07.PXSX.GPCX */
            }
        }

        If (((WWEN != Zero) && (WWRP == SLOT)))
        {
            Method (SHRF, 0, NotSerialized)
            {
                PSD0 (SLOT)
                SPCO (WCLK, One)
                SGOV (WFCP, PFCP)
                Sleep (TN2B)
                SGOV (WBRS, (~PBRS & One))
                Sleep (TB2R)
                SGOV (PRST, (~WPRP & One))
                L23D ()
            }

            Method (_RST, 0, Serialized)  // _RST: Device Reset
            {
                If ((WWEN == 0x02))
                {
                    Local0 = Acquire (WWMT, 0x03E8)
                    If ((Local0 == Zero))
                    {
                        ADBG ("Start WWAN FLDR")
                        DL23 ()
                        SGOV (WBRS, PBRS)
                        Sleep (TBTG)
                        SHRF ()
                        ADBG ("End WWAN FLDR")
                        Release (WWMT)
                    }
                }
                Else
                {
                    SGOV (WBRS, PBRS)
                    Sleep (0xC8)
                    Notify (PXSX, One) // Device Check
                    SGOV (PRST, (~WPRP & One))
                    SGOV (WBRS, (~PBRS & One))
                    Sleep (0xC8)
                    Local0 = Zero
                    While ((LASX == Zero))
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    Sleep (0x0A)
                    Notify (PXSX, One) // Device Check
                }
            }

            PowerResource (MRST, 0x05, 0x0000)
            {
                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    Return (One)
                }

                Method (_ON, 0, Serialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                {
                }

                Method (_RST, 0, Serialized)  // _RST: Device Reset
                {
                    Local0 = Acquire (WWMT, 0x03E8)
                    If ((Local0 == Zero))
                    {
                        ADBG ("Start WWAN PR _RST")
                        DL23 ()
                        SGOV (WBRS, PBRS)
                        SPCO (WCLK, Zero)
                        Sleep (TB2F)
                        SGOV (WFCP, (~PFCP & One))
                        Sleep (TFDI)
                        SHRF ()
                        Release (WWMT)
                    }
                }
            }
        }

        If ((WIST () || ((WWEN != Zero) && (WWRP == SLOT))))
        {
            PowerResource (DRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    If ((DCAP & 0x10000000))
                    {
                        Local0 = DCTR /* \_SB_.PC00.RP07.PXSX.DCTR */
                        Local0 |= 0x8000
                        DCTR = Local0
                    }
                }
            }

            Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
            {
                If (WIST ())
                {
                    If (CondRefOf (WRST))
                    {
                        Return (Package (0x01)
                        {
                            WRST
                        })
                    }
                }

                If (((WWEN != Zero) && (WWRP == SLOT)))
                {
                    If (CondRefOf (MRST))
                    {
                        Return (Package (0x01)
                        {
                            MRST
                        })
                    }
                }

                Return (Package (0x01)
                {
                    DRST
                })
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (WIST ())
                {
                    If ((Arg0 == ToUUID ("f21202bf-8f78-4dc6-a5b3-1f738e285ade") /* Unknown UUID */))
                    {
                        If ((Arg2 == Zero))
                        {
                            If ((Arg1 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x0F                                             // .
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }
                        }

                        If ((Arg2 == One))
                        {
                            Local0 = ACSD /* \ACSD */
                            Return (Local0)
                        }

                        If ((Arg2 == 0x02))
                        {
                            Local0 = I5BS /* \I5BS */
                            Return (Local0)
                        }

                        If ((Arg2 == 0x03))
                        {
                            Local0 = UHBS /* \UHBS */
                            Return (Local0)
                        }

                        Return (Zero)
                    }
                }

                If (((WWEN != Zero) && (WWRP == SLOT)))
                {
                    If ((Arg0 == ToUUID ("bad01b75-22a8-4f48-8792-bdde9467747d") /* Unknown UUID */))
                    {
                        If ((Arg2 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x09                                             // .
                            })
                        }

                        If ((Arg2 == One)) {}
                        If ((Arg2 == 0x02)) {}
                        If ((Arg2 == 0x03))
                        {
                            If ((WRTO == One)) {}
                            ElseIf ((WRTO == 0x03)) {}
                            Else
                            {
                            }

                            Return (WRTO) /* \WRTO */
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }

    Scope (_SB.PC00.RP08.PXSX)
    {
        OperationRegion (RPXX, SystemMemory, GMIO (^_ADR (), _ADR), 0x10)
        Field (RPXX, AnyAcc, NoLock, Preserve)
        {
            VDID,   32
        }

        OperationRegion (FLDR, SystemMemory, (GMIO (^_ADR (), _ADR) + 0x44), 0x06)
        Field (FLDR, ByteAcc, NoLock, Preserve)
        {
            DCAP,   32, 
            DCTR,   16
        }

        Method (WIST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x095A8086)
                    {
                        Return (One)
                    }
                    Case (0x095B8086)
                    {
                        Return (One)
                    }
                    Case (0x31658086)
                    {
                        Return (One)
                    }
                    Case (0x31668086)
                    {
                        Return (One)
                    }
                    Case (0x08B18086)
                    {
                        Return (One)
                    }
                    Case (0x08B28086)
                    {
                        Return (One)
                    }
                    Case (0x08B38086)
                    {
                        Return (One)
                    }
                    Case (0x08B48086)
                    {
                        Return (One)
                    }
                    Case (0x24F38086)
                    {
                        Return (One)
                    }
                    Case (0x24F48086)
                    {
                        Return (One)
                    }
                    Case (0x24F58086)
                    {
                        Return (One)
                    }
                    Case (0x24F68086)
                    {
                        Return (One)
                    }
                    Case (0x24FD8086)
                    {
                        Return (One)
                    }
                    Case (0x24FB8086)
                    {
                        Return (One)
                    }
                    Case (0x25268086)
                    {
                        Return (One)
                    }
                    Case (0x271B8086)
                    {
                        Return (One)
                    }
                    Case (0x27238086)
                    {
                        Return (One)
                    }
                    Case (0x27258086)
                    {
                        Return (One)
                    }
                    Case (0x885210EC)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (WWST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x73608086)
                    {
                        Return (One)
                    }
                    Case (0x75608086)
                    {
                        Return (One)
                    }
                    Case (0x4D7514C3)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        If (WIST ())
        {
            PowerResource (WRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    If ((DCAP & 0x10000000))
                    {
                        Local0 = DCTR /* \_SB_.PC00.RP08.PXSX.DCTR */
                        Local0 |= 0x8000
                        DCTR = Local0
                    }
                }
            }

            Name (SPLX, Package (0x02)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (SPLC, 0, Serialized)
            {
                DerefOf (SPLX [One]) [Zero] = DOM1 /* \DOM1 */
                DerefOf (SPLX [One]) [One] = LIM1 /* \LIM1 */
                DerefOf (SPLX [One]) [0x02] = TIM1 /* \TIM1 */
                Return (SPLX) /* \_SB_.PC00.RP08.PXSX.SPLX */
            }

            Name (WANX, Package (0x03)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (WAND, 0, Serialized)
            {
                DerefOf (WANX [One]) [Zero] = Zero
                DerefOf (WANX [One]) [One] = TRD0 /* \TRD0 */
                DerefOf (WANX [One]) [0x02] = TRL0 /* \TRL0 */
                DerefOf (WANX [0x02]) [Zero] = One
                DerefOf (WANX [0x02]) [One] = TRD1 /* \TRD1 */
                DerefOf (WANX [0x02]) [0x02] = TRL1 /* \TRL1 */
                Return (WANX) /* \_SB_.PC00.RP08.PXSX.WANX */
            }

            Name (WRDX, Package (0x02)
            {
                Zero, 
                Package (0x02)
                {
                    0x80000000, 
                    0x8000
                }
            })
            Method (WRDD, 0, Serialized)
            {
                DerefOf (WRDX [One]) [Zero] = WDM1 /* \WDM1 */
                DerefOf (WRDX [One]) [One] = CID1 /* \CID1 */
                Return (WRDX) /* \_SB_.PC00.RP08.PXSX.WRDX */
            }

            Name (WRDY, Package (0x02)
            {
                One, 
                Package (0x18)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WRDS, 0, Serialized)
            {
                DerefOf (WRDY [One]) [One] = STXE /* \STXE */
                DerefOf (WRDY [One]) [0x02] = ST10 /* \ST10 */
                DerefOf (WRDY [One]) [0x03] = ST11 /* \ST11 */
                DerefOf (WRDY [One]) [0x04] = ST12 /* \ST12 */
                DerefOf (WRDY [One]) [0x05] = ST13 /* \ST13 */
                DerefOf (WRDY [One]) [0x06] = ST14 /* \ST14 */
                DerefOf (WRDY [One]) [0x07] = ST15 /* \ST15 */
                DerefOf (WRDY [One]) [0x08] = ST16 /* \ST16 */
                DerefOf (WRDY [One]) [0x09] = ST17 /* \ST17 */
                DerefOf (WRDY [One]) [0x0A] = ST18 /* \ST18 */
                DerefOf (WRDY [One]) [0x0B] = ST19 /* \ST19 */
                DerefOf (WRDY [One]) [0x0C] = ST50 /* \ST50 */
                DerefOf (WRDY [One]) [0x0D] = ST51 /* \ST51 */
                DerefOf (WRDY [One]) [0x0E] = ST52 /* \ST52 */
                DerefOf (WRDY [One]) [0x0F] = ST53 /* \ST53 */
                DerefOf (WRDY [One]) [0x10] = ST54 /* \ST54 */
                DerefOf (WRDY [One]) [0x11] = ST55 /* \ST55 */
                DerefOf (WRDY [One]) [0x12] = ST56 /* \ST56 */
                DerefOf (WRDY [One]) [0x13] = ST57 /* \ST57 */
                DerefOf (WRDY [One]) [0x14] = ST58 /* \ST58 */
                DerefOf (WRDY [One]) [0x15] = ST59 /* \ST59 */
                DerefOf (WRDY [One]) [0x16] = ST5A /* \ST5A */
                DerefOf (WRDY [One]) [0x17] = ST5B /* \ST5B */
                Return (WRDY) /* \_SB_.PC00.RP08.PXSX.WRDY */
            }

            Name (EWRY, Package (0x02)
            {
                One, 
                Package (0x45)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (EWRD, 0, Serialized)
            {
                DerefOf (EWRY [One]) [One] = STDE /* \STDE */
                DerefOf (EWRY [One]) [0x02] = STRS /* \STRS */
                DerefOf (EWRY [One]) [0x03] = ST20 /* \ST20 */
                DerefOf (EWRY [One]) [0x04] = ST21 /* \ST21 */
                DerefOf (EWRY [One]) [0x05] = ST22 /* \ST22 */
                DerefOf (EWRY [One]) [0x06] = ST23 /* \ST23 */
                DerefOf (EWRY [One]) [0x07] = ST24 /* \ST24 */
                DerefOf (EWRY [One]) [0x08] = ST25 /* \ST25 */
                DerefOf (EWRY [One]) [0x09] = ST26 /* \ST26 */
                DerefOf (EWRY [One]) [0x0A] = ST27 /* \ST27 */
                DerefOf (EWRY [One]) [0x0B] = ST28 /* \ST28 */
                DerefOf (EWRY [One]) [0x0C] = ST29 /* \ST29 */
                DerefOf (EWRY [One]) [0x0D] = ST60 /* \ST60 */
                DerefOf (EWRY [One]) [0x0E] = ST61 /* \ST61 */
                DerefOf (EWRY [One]) [0x0F] = ST62 /* \ST62 */
                DerefOf (EWRY [One]) [0x10] = ST63 /* \ST63 */
                DerefOf (EWRY [One]) [0x11] = ST64 /* \ST64 */
                DerefOf (EWRY [One]) [0x12] = ST65 /* \ST65 */
                DerefOf (EWRY [One]) [0x13] = ST66 /* \ST66 */
                DerefOf (EWRY [One]) [0x14] = ST67 /* \ST67 */
                DerefOf (EWRY [One]) [0x15] = ST68 /* \ST68 */
                DerefOf (EWRY [One]) [0x16] = ST69 /* \ST69 */
                DerefOf (EWRY [One]) [0x17] = ST6A /* \ST6A */
                DerefOf (EWRY [One]) [0x18] = ST6B /* \ST6B */
                DerefOf (EWRY [One]) [0x19] = ST30 /* \ST30 */
                DerefOf (EWRY [One]) [0x1A] = ST31 /* \ST31 */
                DerefOf (EWRY [One]) [0x1B] = ST32 /* \ST32 */
                DerefOf (EWRY [One]) [0x1C] = ST33 /* \ST33 */
                DerefOf (EWRY [One]) [0x1D] = ST34 /* \ST34 */
                DerefOf (EWRY [One]) [0x1E] = ST35 /* \ST35 */
                DerefOf (EWRY [One]) [0x1F] = ST36 /* \ST36 */
                DerefOf (EWRY [One]) [0x20] = ST37 /* \ST37 */
                DerefOf (EWRY [One]) [0x21] = ST38 /* \ST38 */
                DerefOf (EWRY [One]) [0x22] = ST39 /* \ST39 */
                DerefOf (EWRY [One]) [0x23] = ST70 /* \ST70 */
                DerefOf (EWRY [One]) [0x24] = ST71 /* \ST71 */
                DerefOf (EWRY [One]) [0x25] = ST72 /* \ST72 */
                DerefOf (EWRY [One]) [0x26] = ST73 /* \ST73 */
                DerefOf (EWRY [One]) [0x27] = ST74 /* \ST74 */
                DerefOf (EWRY [One]) [0x28] = ST75 /* \ST75 */
                DerefOf (EWRY [One]) [0x29] = ST76 /* \ST76 */
                DerefOf (EWRY [One]) [0x2A] = ST77 /* \ST77 */
                DerefOf (EWRY [One]) [0x2B] = ST78 /* \ST78 */
                DerefOf (EWRY [One]) [0x2C] = ST79 /* \ST79 */
                DerefOf (EWRY [One]) [0x2D] = ST7A /* \ST7A */
                DerefOf (EWRY [One]) [0x2E] = ST7B /* \ST7B */
                DerefOf (EWRY [One]) [0x2F] = ST40 /* \ST40 */
                DerefOf (EWRY [One]) [0x30] = ST41 /* \ST41 */
                DerefOf (EWRY [One]) [0x31] = ST42 /* \ST42 */
                DerefOf (EWRY [One]) [0x32] = ST43 /* \ST43 */
                DerefOf (EWRY [One]) [0x33] = ST44 /* \ST44 */
                DerefOf (EWRY [One]) [0x34] = ST45 /* \ST45 */
                DerefOf (EWRY [One]) [0x35] = ST46 /* \ST46 */
                DerefOf (EWRY [One]) [0x36] = ST47 /* \ST47 */
                DerefOf (EWRY [One]) [0x37] = ST48 /* \ST48 */
                DerefOf (EWRY [One]) [0x38] = ST49 /* \ST49 */
                DerefOf (EWRY [One]) [0x39] = ST80 /* \ST80 */
                DerefOf (EWRY [One]) [0x3A] = ST81 /* \ST81 */
                DerefOf (EWRY [One]) [0x3B] = ST82 /* \ST82 */
                DerefOf (EWRY [One]) [0x3C] = ST83 /* \ST83 */
                DerefOf (EWRY [One]) [0x3D] = ST84 /* \ST84 */
                DerefOf (EWRY [One]) [0x3E] = ST85 /* \ST85 */
                DerefOf (EWRY [One]) [0x3F] = ST86 /* \ST86 */
                DerefOf (EWRY [One]) [0x40] = ST87 /* \ST87 */
                DerefOf (EWRY [One]) [0x41] = ST88 /* \ST88 */
                DerefOf (EWRY [One]) [0x42] = ST89 /* \ST89 */
                DerefOf (EWRY [One]) [0x43] = ST8A /* \ST8A */
                DerefOf (EWRY [One]) [0x44] = ST8B /* \ST8B */
                Return (EWRY) /* \_SB_.PC00.RP08.PXSX.EWRY */
            }

            Name (WGDY, Package (0x02)
            {
                0x02, 
                Package (0x1C)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WGDS, 0, Serialized)
            {
                DerefOf (WGDY [One]) [One] = SD11 /* \SD11 */
                DerefOf (WGDY [One]) [0x02] = SD12 /* \SD12 */
                DerefOf (WGDY [One]) [0x03] = SD13 /* \SD13 */
                DerefOf (WGDY [One]) [0x04] = SD14 /* \SD14 */
                DerefOf (WGDY [One]) [0x05] = SD15 /* \SD15 */
                DerefOf (WGDY [One]) [0x06] = SD16 /* \SD16 */
                DerefOf (WGDY [One]) [0x07] = SD17 /* \SD17 */
                DerefOf (WGDY [One]) [0x08] = SD18 /* \SD18 */
                DerefOf (WGDY [One]) [0x09] = SD19 /* \SD19 */
                DerefOf (WGDY [One]) [0x0A] = SD21 /* \SD21 */
                DerefOf (WGDY [One]) [0x0B] = SD22 /* \SD22 */
                DerefOf (WGDY [One]) [0x0C] = SD23 /* \SD23 */
                DerefOf (WGDY [One]) [0x0D] = SD24 /* \SD24 */
                DerefOf (WGDY [One]) [0x0E] = SD25 /* \SD25 */
                DerefOf (WGDY [One]) [0x0F] = SD26 /* \SD26 */
                DerefOf (WGDY [One]) [0x10] = SD27 /* \SD27 */
                DerefOf (WGDY [One]) [0x11] = SD28 /* \SD28 */
                DerefOf (WGDY [One]) [0x12] = SD29 /* \SD29 */
                DerefOf (WGDY [One]) [0x13] = SD31 /* \SD31 */
                DerefOf (WGDY [One]) [0x14] = SD32 /* \SD32 */
                DerefOf (WGDY [One]) [0x15] = SD33 /* \SD33 */
                DerefOf (WGDY [One]) [0x16] = SD34 /* \SD34 */
                DerefOf (WGDY [One]) [0x17] = SD35 /* \SD35 */
                DerefOf (WGDY [One]) [0x18] = SD36 /* \SD36 */
                DerefOf (WGDY [One]) [0x19] = SD37 /* \SD37 */
                DerefOf (WGDY [One]) [0x1A] = SD38 /* \SD38 */
                DerefOf (WGDY [One]) [0x1B] = SD39 /* \SD39 */
                Return (WGDY) /* \_SB_.PC00.RP08.PXSX.WGDY */
            }

            Name (ECKY, Package (0x02)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    Zero
                }
            })
            Method (ECKV, 0, Serialized)
            {
                DerefOf (ECKY [One]) [One] = CECV /* \CECV */
                Return (ECKY) /* \_SB_.PC00.RP08.PXSX.ECKY */
            }

            Name (PPAY, Package (0x02)
            {
                One, 
                Package (0x18)
                {
                    0x07, 
                    Zero, 
                    0x18, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x18, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28
                }
            })
            Method (PPAG, 0, Serialized)
            {
                DerefOf (PPAY [One]) [One] = WAGE /* \WAGE */
                DerefOf (PPAY [One]) [0x02] = AGA1 /* \AGA1 */
                DerefOf (PPAY [One]) [0x03] = AGA2 /* \AGA2 */
                DerefOf (PPAY [One]) [0x04] = AGA3 /* \AGA3 */
                DerefOf (PPAY [One]) [0x05] = AGA4 /* \AGA4 */
                DerefOf (PPAY [One]) [0x06] = AGA5 /* \AGA5 */
                DerefOf (PPAY [One]) [0x07] = AGA6 /* \AGA6 */
                DerefOf (PPAY [One]) [0x08] = AGA7 /* \AGA7 */
                DerefOf (PPAY [One]) [0x09] = AGA8 /* \AGA8 */
                DerefOf (PPAY [One]) [0x0A] = AGA9 /* \AGA9 */
                DerefOf (PPAY [One]) [0x0B] = AGAA /* \AGAA */
                DerefOf (PPAY [One]) [0x0C] = AGAB /* \AGAB */
                DerefOf (PPAY [One]) [0x0D] = AGB1 /* \AGB1 */
                DerefOf (PPAY [One]) [0x0E] = AGB2 /* \AGB2 */
                DerefOf (PPAY [One]) [0x0F] = AGB3 /* \AGB3 */
                DerefOf (PPAY [One]) [0x10] = AGB4 /* \AGB4 */
                DerefOf (PPAY [One]) [0x11] = AGB5 /* \AGB5 */
                DerefOf (PPAY [One]) [0x12] = AGB6 /* \AGB6 */
                DerefOf (PPAY [One]) [0x13] = AGB7 /* \AGB7 */
                DerefOf (PPAY [One]) [0x14] = AGB8 /* \AGB8 */
                DerefOf (PPAY [One]) [0x15] = AGB9 /* \AGB9 */
                DerefOf (PPAY [One]) [0x16] = AGBA /* \AGBA */
                DerefOf (PPAY [One]) [0x17] = AGBB /* \AGBB */
                Return (PPAY) /* \_SB_.PC00.RP08.PXSX.PPAY */
            }

            Name (SADX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    0x80000000
                }, 

                Package (0x02)
                {
                    0x12, 
                    0x80000000
                }
            })
            Method (SADS, 0, Serialized)
            {
                DerefOf (SADX [One]) [One] = ATDV /* \ATDV */
                DerefOf (SADX [0x02]) [One] = ATDV /* \ATDV */
                Return (SADX) /* \_SB_.PC00.RP08.PXSX.SADX */
            }

            Name (GPCX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }, 

                Package (0x02)
                {
                    0x12, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }
            })
            Method (GPC, 0, Serialized)
            {
                Return (GPCX) /* \_SB_.PC00.RP08.PXSX.GPCX */
            }
        }

        If (((WWEN != Zero) && (WWRP == SLOT)))
        {
            Method (SHRF, 0, NotSerialized)
            {
                PSD0 (SLOT)
                SPCO (WCLK, One)
                SGOV (WFCP, PFCP)
                Sleep (TN2B)
                SGOV (WBRS, (~PBRS & One))
                Sleep (TB2R)
                SGOV (PRST, (~WPRP & One))
                L23D ()
            }

            Method (_RST, 0, Serialized)  // _RST: Device Reset
            {
                If ((WWEN == 0x02))
                {
                    Local0 = Acquire (WWMT, 0x03E8)
                    If ((Local0 == Zero))
                    {
                        ADBG ("Start WWAN FLDR")
                        DL23 ()
                        SGOV (WBRS, PBRS)
                        Sleep (TBTG)
                        SHRF ()
                        ADBG ("End WWAN FLDR")
                        Release (WWMT)
                    }
                }
                Else
                {
                    SGOV (WBRS, PBRS)
                    Sleep (0xC8)
                    Notify (PXSX, One) // Device Check
                    SGOV (PRST, (~WPRP & One))
                    SGOV (WBRS, (~PBRS & One))
                    Sleep (0xC8)
                    Local0 = Zero
                    While ((LASX == Zero))
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    Sleep (0x0A)
                    Notify (PXSX, One) // Device Check
                }
            }

            PowerResource (MRST, 0x05, 0x0000)
            {
                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    Return (One)
                }

                Method (_ON, 0, Serialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                {
                }

                Method (_RST, 0, Serialized)  // _RST: Device Reset
                {
                    Local0 = Acquire (WWMT, 0x03E8)
                    If ((Local0 == Zero))
                    {
                        ADBG ("Start WWAN PR _RST")
                        DL23 ()
                        SGOV (WBRS, PBRS)
                        SPCO (WCLK, Zero)
                        Sleep (TB2F)
                        SGOV (WFCP, (~PFCP & One))
                        Sleep (TFDI)
                        SHRF ()
                        Release (WWMT)
                    }
                }
            }
        }

        If ((WIST () || ((WWEN != Zero) && (WWRP == SLOT))))
        {
            PowerResource (DRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    If ((DCAP & 0x10000000))
                    {
                        Local0 = DCTR /* \_SB_.PC00.RP08.PXSX.DCTR */
                        Local0 |= 0x8000
                        DCTR = Local0
                    }
                }
            }

            Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
            {
                If (WIST ())
                {
                    If (CondRefOf (WRST))
                    {
                        Return (Package (0x01)
                        {
                            WRST
                        })
                    }
                }

                If (((WWEN != Zero) && (WWRP == SLOT)))
                {
                    If (CondRefOf (MRST))
                    {
                        Return (Package (0x01)
                        {
                            MRST
                        })
                    }
                }

                Return (Package (0x01)
                {
                    DRST
                })
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (WIST ())
                {
                    If ((Arg0 == ToUUID ("f21202bf-8f78-4dc6-a5b3-1f738e285ade") /* Unknown UUID */))
                    {
                        If ((Arg2 == Zero))
                        {
                            If ((Arg1 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x0F                                             // .
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }
                        }

                        If ((Arg2 == One))
                        {
                            Local0 = ACSD /* \ACSD */
                            Return (Local0)
                        }

                        If ((Arg2 == 0x02))
                        {
                            Local0 = I5BS /* \I5BS */
                            Return (Local0)
                        }

                        If ((Arg2 == 0x03))
                        {
                            Local0 = UHBS /* \UHBS */
                            Return (Local0)
                        }

                        Return (Zero)
                    }
                }

                If (((WWEN != Zero) && (WWRP == SLOT)))
                {
                    If ((Arg0 == ToUUID ("bad01b75-22a8-4f48-8792-bdde9467747d") /* Unknown UUID */))
                    {
                        If ((Arg2 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x09                                             // .
                            })
                        }

                        If ((Arg2 == One)) {}
                        If ((Arg2 == 0x02)) {}
                        If ((Arg2 == 0x03))
                        {
                            If ((WRTO == One)) {}
                            ElseIf ((WRTO == 0x03)) {}
                            Else
                            {
                            }

                            Return (WRTO) /* \WRTO */
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }

    Scope (_SB.PC00.RP09.PXSX)
    {
        OperationRegion (RPXX, SystemMemory, GMIO (^_ADR (), _ADR), 0x10)
        Field (RPXX, AnyAcc, NoLock, Preserve)
        {
            VDID,   32
        }

        OperationRegion (FLDR, SystemMemory, (GMIO (^_ADR (), _ADR) + 0x44), 0x06)
        Field (FLDR, ByteAcc, NoLock, Preserve)
        {
            DCAP,   32, 
            DCTR,   16
        }

        Method (WIST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x095A8086)
                    {
                        Return (One)
                    }
                    Case (0x095B8086)
                    {
                        Return (One)
                    }
                    Case (0x31658086)
                    {
                        Return (One)
                    }
                    Case (0x31668086)
                    {
                        Return (One)
                    }
                    Case (0x08B18086)
                    {
                        Return (One)
                    }
                    Case (0x08B28086)
                    {
                        Return (One)
                    }
                    Case (0x08B38086)
                    {
                        Return (One)
                    }
                    Case (0x08B48086)
                    {
                        Return (One)
                    }
                    Case (0x24F38086)
                    {
                        Return (One)
                    }
                    Case (0x24F48086)
                    {
                        Return (One)
                    }
                    Case (0x24F58086)
                    {
                        Return (One)
                    }
                    Case (0x24F68086)
                    {
                        Return (One)
                    }
                    Case (0x24FD8086)
                    {
                        Return (One)
                    }
                    Case (0x24FB8086)
                    {
                        Return (One)
                    }
                    Case (0x25268086)
                    {
                        Return (One)
                    }
                    Case (0x271B8086)
                    {
                        Return (One)
                    }
                    Case (0x27238086)
                    {
                        Return (One)
                    }
                    Case (0x27258086)
                    {
                        Return (One)
                    }
                    Case (0x885210EC)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (WWST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x73608086)
                    {
                        Return (One)
                    }
                    Case (0x75608086)
                    {
                        Return (One)
                    }
                    Case (0x4D7514C3)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        If (WIST ())
        {
            PowerResource (WRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    If ((DCAP & 0x10000000))
                    {
                        Local0 = DCTR /* \_SB_.PC00.RP09.PXSX.DCTR */
                        Local0 |= 0x8000
                        DCTR = Local0
                    }
                }
            }

            Name (SPLX, Package (0x02)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (SPLC, 0, Serialized)
            {
                DerefOf (SPLX [One]) [Zero] = DOM1 /* \DOM1 */
                DerefOf (SPLX [One]) [One] = LIM1 /* \LIM1 */
                DerefOf (SPLX [One]) [0x02] = TIM1 /* \TIM1 */
                Return (SPLX) /* \_SB_.PC00.RP09.PXSX.SPLX */
            }

            Name (WANX, Package (0x03)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (WAND, 0, Serialized)
            {
                DerefOf (WANX [One]) [Zero] = Zero
                DerefOf (WANX [One]) [One] = TRD0 /* \TRD0 */
                DerefOf (WANX [One]) [0x02] = TRL0 /* \TRL0 */
                DerefOf (WANX [0x02]) [Zero] = One
                DerefOf (WANX [0x02]) [One] = TRD1 /* \TRD1 */
                DerefOf (WANX [0x02]) [0x02] = TRL1 /* \TRL1 */
                Return (WANX) /* \_SB_.PC00.RP09.PXSX.WANX */
            }

            Name (WRDX, Package (0x02)
            {
                Zero, 
                Package (0x02)
                {
                    0x80000000, 
                    0x8000
                }
            })
            Method (WRDD, 0, Serialized)
            {
                DerefOf (WRDX [One]) [Zero] = WDM1 /* \WDM1 */
                DerefOf (WRDX [One]) [One] = CID1 /* \CID1 */
                Return (WRDX) /* \_SB_.PC00.RP09.PXSX.WRDX */
            }

            Name (WRDY, Package (0x02)
            {
                One, 
                Package (0x18)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WRDS, 0, Serialized)
            {
                DerefOf (WRDY [One]) [One] = STXE /* \STXE */
                DerefOf (WRDY [One]) [0x02] = ST10 /* \ST10 */
                DerefOf (WRDY [One]) [0x03] = ST11 /* \ST11 */
                DerefOf (WRDY [One]) [0x04] = ST12 /* \ST12 */
                DerefOf (WRDY [One]) [0x05] = ST13 /* \ST13 */
                DerefOf (WRDY [One]) [0x06] = ST14 /* \ST14 */
                DerefOf (WRDY [One]) [0x07] = ST15 /* \ST15 */
                DerefOf (WRDY [One]) [0x08] = ST16 /* \ST16 */
                DerefOf (WRDY [One]) [0x09] = ST17 /* \ST17 */
                DerefOf (WRDY [One]) [0x0A] = ST18 /* \ST18 */
                DerefOf (WRDY [One]) [0x0B] = ST19 /* \ST19 */
                DerefOf (WRDY [One]) [0x0C] = ST50 /* \ST50 */
                DerefOf (WRDY [One]) [0x0D] = ST51 /* \ST51 */
                DerefOf (WRDY [One]) [0x0E] = ST52 /* \ST52 */
                DerefOf (WRDY [One]) [0x0F] = ST53 /* \ST53 */
                DerefOf (WRDY [One]) [0x10] = ST54 /* \ST54 */
                DerefOf (WRDY [One]) [0x11] = ST55 /* \ST55 */
                DerefOf (WRDY [One]) [0x12] = ST56 /* \ST56 */
                DerefOf (WRDY [One]) [0x13] = ST57 /* \ST57 */
                DerefOf (WRDY [One]) [0x14] = ST58 /* \ST58 */
                DerefOf (WRDY [One]) [0x15] = ST59 /* \ST59 */
                DerefOf (WRDY [One]) [0x16] = ST5A /* \ST5A */
                DerefOf (WRDY [One]) [0x17] = ST5B /* \ST5B */
                Return (WRDY) /* \_SB_.PC00.RP09.PXSX.WRDY */
            }

            Name (EWRY, Package (0x02)
            {
                One, 
                Package (0x45)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (EWRD, 0, Serialized)
            {
                DerefOf (EWRY [One]) [One] = STDE /* \STDE */
                DerefOf (EWRY [One]) [0x02] = STRS /* \STRS */
                DerefOf (EWRY [One]) [0x03] = ST20 /* \ST20 */
                DerefOf (EWRY [One]) [0x04] = ST21 /* \ST21 */
                DerefOf (EWRY [One]) [0x05] = ST22 /* \ST22 */
                DerefOf (EWRY [One]) [0x06] = ST23 /* \ST23 */
                DerefOf (EWRY [One]) [0x07] = ST24 /* \ST24 */
                DerefOf (EWRY [One]) [0x08] = ST25 /* \ST25 */
                DerefOf (EWRY [One]) [0x09] = ST26 /* \ST26 */
                DerefOf (EWRY [One]) [0x0A] = ST27 /* \ST27 */
                DerefOf (EWRY [One]) [0x0B] = ST28 /* \ST28 */
                DerefOf (EWRY [One]) [0x0C] = ST29 /* \ST29 */
                DerefOf (EWRY [One]) [0x0D] = ST60 /* \ST60 */
                DerefOf (EWRY [One]) [0x0E] = ST61 /* \ST61 */
                DerefOf (EWRY [One]) [0x0F] = ST62 /* \ST62 */
                DerefOf (EWRY [One]) [0x10] = ST63 /* \ST63 */
                DerefOf (EWRY [One]) [0x11] = ST64 /* \ST64 */
                DerefOf (EWRY [One]) [0x12] = ST65 /* \ST65 */
                DerefOf (EWRY [One]) [0x13] = ST66 /* \ST66 */
                DerefOf (EWRY [One]) [0x14] = ST67 /* \ST67 */
                DerefOf (EWRY [One]) [0x15] = ST68 /* \ST68 */
                DerefOf (EWRY [One]) [0x16] = ST69 /* \ST69 */
                DerefOf (EWRY [One]) [0x17] = ST6A /* \ST6A */
                DerefOf (EWRY [One]) [0x18] = ST6B /* \ST6B */
                DerefOf (EWRY [One]) [0x19] = ST30 /* \ST30 */
                DerefOf (EWRY [One]) [0x1A] = ST31 /* \ST31 */
                DerefOf (EWRY [One]) [0x1B] = ST32 /* \ST32 */
                DerefOf (EWRY [One]) [0x1C] = ST33 /* \ST33 */
                DerefOf (EWRY [One]) [0x1D] = ST34 /* \ST34 */
                DerefOf (EWRY [One]) [0x1E] = ST35 /* \ST35 */
                DerefOf (EWRY [One]) [0x1F] = ST36 /* \ST36 */
                DerefOf (EWRY [One]) [0x20] = ST37 /* \ST37 */
                DerefOf (EWRY [One]) [0x21] = ST38 /* \ST38 */
                DerefOf (EWRY [One]) [0x22] = ST39 /* \ST39 */
                DerefOf (EWRY [One]) [0x23] = ST70 /* \ST70 */
                DerefOf (EWRY [One]) [0x24] = ST71 /* \ST71 */
                DerefOf (EWRY [One]) [0x25] = ST72 /* \ST72 */
                DerefOf (EWRY [One]) [0x26] = ST73 /* \ST73 */
                DerefOf (EWRY [One]) [0x27] = ST74 /* \ST74 */
                DerefOf (EWRY [One]) [0x28] = ST75 /* \ST75 */
                DerefOf (EWRY [One]) [0x29] = ST76 /* \ST76 */
                DerefOf (EWRY [One]) [0x2A] = ST77 /* \ST77 */
                DerefOf (EWRY [One]) [0x2B] = ST78 /* \ST78 */
                DerefOf (EWRY [One]) [0x2C] = ST79 /* \ST79 */
                DerefOf (EWRY [One]) [0x2D] = ST7A /* \ST7A */
                DerefOf (EWRY [One]) [0x2E] = ST7B /* \ST7B */
                DerefOf (EWRY [One]) [0x2F] = ST40 /* \ST40 */
                DerefOf (EWRY [One]) [0x30] = ST41 /* \ST41 */
                DerefOf (EWRY [One]) [0x31] = ST42 /* \ST42 */
                DerefOf (EWRY [One]) [0x32] = ST43 /* \ST43 */
                DerefOf (EWRY [One]) [0x33] = ST44 /* \ST44 */
                DerefOf (EWRY [One]) [0x34] = ST45 /* \ST45 */
                DerefOf (EWRY [One]) [0x35] = ST46 /* \ST46 */
                DerefOf (EWRY [One]) [0x36] = ST47 /* \ST47 */
                DerefOf (EWRY [One]) [0x37] = ST48 /* \ST48 */
                DerefOf (EWRY [One]) [0x38] = ST49 /* \ST49 */
                DerefOf (EWRY [One]) [0x39] = ST80 /* \ST80 */
                DerefOf (EWRY [One]) [0x3A] = ST81 /* \ST81 */
                DerefOf (EWRY [One]) [0x3B] = ST82 /* \ST82 */
                DerefOf (EWRY [One]) [0x3C] = ST83 /* \ST83 */
                DerefOf (EWRY [One]) [0x3D] = ST84 /* \ST84 */
                DerefOf (EWRY [One]) [0x3E] = ST85 /* \ST85 */
                DerefOf (EWRY [One]) [0x3F] = ST86 /* \ST86 */
                DerefOf (EWRY [One]) [0x40] = ST87 /* \ST87 */
                DerefOf (EWRY [One]) [0x41] = ST88 /* \ST88 */
                DerefOf (EWRY [One]) [0x42] = ST89 /* \ST89 */
                DerefOf (EWRY [One]) [0x43] = ST8A /* \ST8A */
                DerefOf (EWRY [One]) [0x44] = ST8B /* \ST8B */
                Return (EWRY) /* \_SB_.PC00.RP09.PXSX.EWRY */
            }

            Name (WGDY, Package (0x02)
            {
                0x02, 
                Package (0x1C)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WGDS, 0, Serialized)
            {
                DerefOf (WGDY [One]) [One] = SD11 /* \SD11 */
                DerefOf (WGDY [One]) [0x02] = SD12 /* \SD12 */
                DerefOf (WGDY [One]) [0x03] = SD13 /* \SD13 */
                DerefOf (WGDY [One]) [0x04] = SD14 /* \SD14 */
                DerefOf (WGDY [One]) [0x05] = SD15 /* \SD15 */
                DerefOf (WGDY [One]) [0x06] = SD16 /* \SD16 */
                DerefOf (WGDY [One]) [0x07] = SD17 /* \SD17 */
                DerefOf (WGDY [One]) [0x08] = SD18 /* \SD18 */
                DerefOf (WGDY [One]) [0x09] = SD19 /* \SD19 */
                DerefOf (WGDY [One]) [0x0A] = SD21 /* \SD21 */
                DerefOf (WGDY [One]) [0x0B] = SD22 /* \SD22 */
                DerefOf (WGDY [One]) [0x0C] = SD23 /* \SD23 */
                DerefOf (WGDY [One]) [0x0D] = SD24 /* \SD24 */
                DerefOf (WGDY [One]) [0x0E] = SD25 /* \SD25 */
                DerefOf (WGDY [One]) [0x0F] = SD26 /* \SD26 */
                DerefOf (WGDY [One]) [0x10] = SD27 /* \SD27 */
                DerefOf (WGDY [One]) [0x11] = SD28 /* \SD28 */
                DerefOf (WGDY [One]) [0x12] = SD29 /* \SD29 */
                DerefOf (WGDY [One]) [0x13] = SD31 /* \SD31 */
                DerefOf (WGDY [One]) [0x14] = SD32 /* \SD32 */
                DerefOf (WGDY [One]) [0x15] = SD33 /* \SD33 */
                DerefOf (WGDY [One]) [0x16] = SD34 /* \SD34 */
                DerefOf (WGDY [One]) [0x17] = SD35 /* \SD35 */
                DerefOf (WGDY [One]) [0x18] = SD36 /* \SD36 */
                DerefOf (WGDY [One]) [0x19] = SD37 /* \SD37 */
                DerefOf (WGDY [One]) [0x1A] = SD38 /* \SD38 */
                DerefOf (WGDY [One]) [0x1B] = SD39 /* \SD39 */
                Return (WGDY) /* \_SB_.PC00.RP09.PXSX.WGDY */
            }

            Name (ECKY, Package (0x02)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    Zero
                }
            })
            Method (ECKV, 0, Serialized)
            {
                DerefOf (ECKY [One]) [One] = CECV /* \CECV */
                Return (ECKY) /* \_SB_.PC00.RP09.PXSX.ECKY */
            }

            Name (PPAY, Package (0x02)
            {
                One, 
                Package (0x18)
                {
                    0x07, 
                    Zero, 
                    0x18, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x18, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28
                }
            })
            Method (PPAG, 0, Serialized)
            {
                DerefOf (PPAY [One]) [One] = WAGE /* \WAGE */
                DerefOf (PPAY [One]) [0x02] = AGA1 /* \AGA1 */
                DerefOf (PPAY [One]) [0x03] = AGA2 /* \AGA2 */
                DerefOf (PPAY [One]) [0x04] = AGA3 /* \AGA3 */
                DerefOf (PPAY [One]) [0x05] = AGA4 /* \AGA4 */
                DerefOf (PPAY [One]) [0x06] = AGA5 /* \AGA5 */
                DerefOf (PPAY [One]) [0x07] = AGA6 /* \AGA6 */
                DerefOf (PPAY [One]) [0x08] = AGA7 /* \AGA7 */
                DerefOf (PPAY [One]) [0x09] = AGA8 /* \AGA8 */
                DerefOf (PPAY [One]) [0x0A] = AGA9 /* \AGA9 */
                DerefOf (PPAY [One]) [0x0B] = AGAA /* \AGAA */
                DerefOf (PPAY [One]) [0x0C] = AGAB /* \AGAB */
                DerefOf (PPAY [One]) [0x0D] = AGB1 /* \AGB1 */
                DerefOf (PPAY [One]) [0x0E] = AGB2 /* \AGB2 */
                DerefOf (PPAY [One]) [0x0F] = AGB3 /* \AGB3 */
                DerefOf (PPAY [One]) [0x10] = AGB4 /* \AGB4 */
                DerefOf (PPAY [One]) [0x11] = AGB5 /* \AGB5 */
                DerefOf (PPAY [One]) [0x12] = AGB6 /* \AGB6 */
                DerefOf (PPAY [One]) [0x13] = AGB7 /* \AGB7 */
                DerefOf (PPAY [One]) [0x14] = AGB8 /* \AGB8 */
                DerefOf (PPAY [One]) [0x15] = AGB9 /* \AGB9 */
                DerefOf (PPAY [One]) [0x16] = AGBA /* \AGBA */
                DerefOf (PPAY [One]) [0x17] = AGBB /* \AGBB */
                Return (PPAY) /* \_SB_.PC00.RP09.PXSX.PPAY */
            }

            Name (SADX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    0x80000000
                }, 

                Package (0x02)
                {
                    0x12, 
                    0x80000000
                }
            })
            Method (SADS, 0, Serialized)
            {
                DerefOf (SADX [One]) [One] = ATDV /* \ATDV */
                DerefOf (SADX [0x02]) [One] = ATDV /* \ATDV */
                Return (SADX) /* \_SB_.PC00.RP09.PXSX.SADX */
            }

            Name (GPCX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }, 

                Package (0x02)
                {
                    0x12, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }
            })
            Method (GPC, 0, Serialized)
            {
                Return (GPCX) /* \_SB_.PC00.RP09.PXSX.GPCX */
            }
        }

        If (((WWEN != Zero) && (WWRP == SLOT)))
        {
            Method (SHRF, 0, NotSerialized)
            {
                PSD0 (SLOT)
                SPCO (WCLK, One)
                SGOV (WFCP, PFCP)
                Sleep (TN2B)
                SGOV (WBRS, (~PBRS & One))
                Sleep (TB2R)
                SGOV (PRST, (~WPRP & One))
                L23D ()
            }

            Method (_RST, 0, Serialized)  // _RST: Device Reset
            {
                If ((WWEN == 0x02))
                {
                    Local0 = Acquire (WWMT, 0x03E8)
                    If ((Local0 == Zero))
                    {
                        ADBG ("Start WWAN FLDR")
                        DL23 ()
                        SGOV (WBRS, PBRS)
                        Sleep (TBTG)
                        SHRF ()
                        ADBG ("End WWAN FLDR")
                        Release (WWMT)
                    }
                }
                Else
                {
                    SGOV (WBRS, PBRS)
                    Sleep (0xC8)
                    Notify (PXSX, One) // Device Check
                    SGOV (PRST, (~WPRP & One))
                    SGOV (WBRS, (~PBRS & One))
                    Sleep (0xC8)
                    Local0 = Zero
                    While ((LASX == Zero))
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    Sleep (0x0A)
                    Notify (PXSX, One) // Device Check
                }
            }

            PowerResource (MRST, 0x05, 0x0000)
            {
                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    Return (One)
                }

                Method (_ON, 0, Serialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                {
                }

                Method (_RST, 0, Serialized)  // _RST: Device Reset
                {
                    Local0 = Acquire (WWMT, 0x03E8)
                    If ((Local0 == Zero))
                    {
                        ADBG ("Start WWAN PR _RST")
                        DL23 ()
                        SGOV (WBRS, PBRS)
                        SPCO (WCLK, Zero)
                        Sleep (TB2F)
                        SGOV (WFCP, (~PFCP & One))
                        Sleep (TFDI)
                        SHRF ()
                        Release (WWMT)
                    }
                }
            }
        }

        If ((WIST () || ((WWEN != Zero) && (WWRP == SLOT))))
        {
            PowerResource (DRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    If ((DCAP & 0x10000000))
                    {
                        Local0 = DCTR /* \_SB_.PC00.RP09.PXSX.DCTR */
                        Local0 |= 0x8000
                        DCTR = Local0
                    }
                }
            }

            Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
            {
                If (WIST ())
                {
                    If (CondRefOf (WRST))
                    {
                        Return (Package (0x01)
                        {
                            WRST
                        })
                    }
                }

                If (((WWEN != Zero) && (WWRP == SLOT)))
                {
                    If (CondRefOf (MRST))
                    {
                        Return (Package (0x01)
                        {
                            MRST
                        })
                    }
                }

                Return (Package (0x01)
                {
                    DRST
                })
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (WIST ())
                {
                    If ((Arg0 == ToUUID ("f21202bf-8f78-4dc6-a5b3-1f738e285ade") /* Unknown UUID */))
                    {
                        If ((Arg2 == Zero))
                        {
                            If ((Arg1 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x0F                                             // .
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }
                        }

                        If ((Arg2 == One))
                        {
                            Local0 = ACSD /* \ACSD */
                            Return (Local0)
                        }

                        If ((Arg2 == 0x02))
                        {
                            Local0 = I5BS /* \I5BS */
                            Return (Local0)
                        }

                        If ((Arg2 == 0x03))
                        {
                            Local0 = UHBS /* \UHBS */
                            Return (Local0)
                        }

                        Return (Zero)
                    }
                }

                If (((WWEN != Zero) && (WWRP == SLOT)))
                {
                    If ((Arg0 == ToUUID ("bad01b75-22a8-4f48-8792-bdde9467747d") /* Unknown UUID */))
                    {
                        If ((Arg2 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x09                                             // .
                            })
                        }

                        If ((Arg2 == One)) {}
                        If ((Arg2 == 0x02)) {}
                        If ((Arg2 == 0x03))
                        {
                            If ((WRTO == One)) {}
                            ElseIf ((WRTO == 0x03)) {}
                            Else
                            {
                            }

                            Return (WRTO) /* \WRTO */
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }

    Scope (_SB.PC00.RP10.PXSX)
    {
        OperationRegion (RPXX, SystemMemory, GMIO (^_ADR (), _ADR), 0x10)
        Field (RPXX, AnyAcc, NoLock, Preserve)
        {
            VDID,   32
        }

        OperationRegion (FLDR, SystemMemory, (GMIO (^_ADR (), _ADR) + 0x44), 0x06)
        Field (FLDR, ByteAcc, NoLock, Preserve)
        {
            DCAP,   32, 
            DCTR,   16
        }

        Method (WIST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x095A8086)
                    {
                        Return (One)
                    }
                    Case (0x095B8086)
                    {
                        Return (One)
                    }
                    Case (0x31658086)
                    {
                        Return (One)
                    }
                    Case (0x31668086)
                    {
                        Return (One)
                    }
                    Case (0x08B18086)
                    {
                        Return (One)
                    }
                    Case (0x08B28086)
                    {
                        Return (One)
                    }
                    Case (0x08B38086)
                    {
                        Return (One)
                    }
                    Case (0x08B48086)
                    {
                        Return (One)
                    }
                    Case (0x24F38086)
                    {
                        Return (One)
                    }
                    Case (0x24F48086)
                    {
                        Return (One)
                    }
                    Case (0x24F58086)
                    {
                        Return (One)
                    }
                    Case (0x24F68086)
                    {
                        Return (One)
                    }
                    Case (0x24FD8086)
                    {
                        Return (One)
                    }
                    Case (0x24FB8086)
                    {
                        Return (One)
                    }
                    Case (0x25268086)
                    {
                        Return (One)
                    }
                    Case (0x271B8086)
                    {
                        Return (One)
                    }
                    Case (0x27238086)
                    {
                        Return (One)
                    }
                    Case (0x27258086)
                    {
                        Return (One)
                    }
                    Case (0x885210EC)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (WWST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x73608086)
                    {
                        Return (One)
                    }
                    Case (0x75608086)
                    {
                        Return (One)
                    }
                    Case (0x4D7514C3)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        If (WIST ())
        {
            PowerResource (WRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    If ((DCAP & 0x10000000))
                    {
                        Local0 = DCTR /* \_SB_.PC00.RP10.PXSX.DCTR */
                        Local0 |= 0x8000
                        DCTR = Local0
                    }
                }
            }

            Name (SPLX, Package (0x02)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (SPLC, 0, Serialized)
            {
                DerefOf (SPLX [One]) [Zero] = DOM1 /* \DOM1 */
                DerefOf (SPLX [One]) [One] = LIM1 /* \LIM1 */
                DerefOf (SPLX [One]) [0x02] = TIM1 /* \TIM1 */
                Return (SPLX) /* \_SB_.PC00.RP10.PXSX.SPLX */
            }

            Name (WANX, Package (0x03)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (WAND, 0, Serialized)
            {
                DerefOf (WANX [One]) [Zero] = Zero
                DerefOf (WANX [One]) [One] = TRD0 /* \TRD0 */
                DerefOf (WANX [One]) [0x02] = TRL0 /* \TRL0 */
                DerefOf (WANX [0x02]) [Zero] = One
                DerefOf (WANX [0x02]) [One] = TRD1 /* \TRD1 */
                DerefOf (WANX [0x02]) [0x02] = TRL1 /* \TRL1 */
                Return (WANX) /* \_SB_.PC00.RP10.PXSX.WANX */
            }

            Name (WRDX, Package (0x02)
            {
                Zero, 
                Package (0x02)
                {
                    0x80000000, 
                    0x8000
                }
            })
            Method (WRDD, 0, Serialized)
            {
                DerefOf (WRDX [One]) [Zero] = WDM1 /* \WDM1 */
                DerefOf (WRDX [One]) [One] = CID1 /* \CID1 */
                Return (WRDX) /* \_SB_.PC00.RP10.PXSX.WRDX */
            }

            Name (WRDY, Package (0x02)
            {
                One, 
                Package (0x18)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WRDS, 0, Serialized)
            {
                DerefOf (WRDY [One]) [One] = STXE /* \STXE */
                DerefOf (WRDY [One]) [0x02] = ST10 /* \ST10 */
                DerefOf (WRDY [One]) [0x03] = ST11 /* \ST11 */
                DerefOf (WRDY [One]) [0x04] = ST12 /* \ST12 */
                DerefOf (WRDY [One]) [0x05] = ST13 /* \ST13 */
                DerefOf (WRDY [One]) [0x06] = ST14 /* \ST14 */
                DerefOf (WRDY [One]) [0x07] = ST15 /* \ST15 */
                DerefOf (WRDY [One]) [0x08] = ST16 /* \ST16 */
                DerefOf (WRDY [One]) [0x09] = ST17 /* \ST17 */
                DerefOf (WRDY [One]) [0x0A] = ST18 /* \ST18 */
                DerefOf (WRDY [One]) [0x0B] = ST19 /* \ST19 */
                DerefOf (WRDY [One]) [0x0C] = ST50 /* \ST50 */
                DerefOf (WRDY [One]) [0x0D] = ST51 /* \ST51 */
                DerefOf (WRDY [One]) [0x0E] = ST52 /* \ST52 */
                DerefOf (WRDY [One]) [0x0F] = ST53 /* \ST53 */
                DerefOf (WRDY [One]) [0x10] = ST54 /* \ST54 */
                DerefOf (WRDY [One]) [0x11] = ST55 /* \ST55 */
                DerefOf (WRDY [One]) [0x12] = ST56 /* \ST56 */
                DerefOf (WRDY [One]) [0x13] = ST57 /* \ST57 */
                DerefOf (WRDY [One]) [0x14] = ST58 /* \ST58 */
                DerefOf (WRDY [One]) [0x15] = ST59 /* \ST59 */
                DerefOf (WRDY [One]) [0x16] = ST5A /* \ST5A */
                DerefOf (WRDY [One]) [0x17] = ST5B /* \ST5B */
                Return (WRDY) /* \_SB_.PC00.RP10.PXSX.WRDY */
            }

            Name (EWRY, Package (0x02)
            {
                One, 
                Package (0x45)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (EWRD, 0, Serialized)
            {
                DerefOf (EWRY [One]) [One] = STDE /* \STDE */
                DerefOf (EWRY [One]) [0x02] = STRS /* \STRS */
                DerefOf (EWRY [One]) [0x03] = ST20 /* \ST20 */
                DerefOf (EWRY [One]) [0x04] = ST21 /* \ST21 */
                DerefOf (EWRY [One]) [0x05] = ST22 /* \ST22 */
                DerefOf (EWRY [One]) [0x06] = ST23 /* \ST23 */
                DerefOf (EWRY [One]) [0x07] = ST24 /* \ST24 */
                DerefOf (EWRY [One]) [0x08] = ST25 /* \ST25 */
                DerefOf (EWRY [One]) [0x09] = ST26 /* \ST26 */
                DerefOf (EWRY [One]) [0x0A] = ST27 /* \ST27 */
                DerefOf (EWRY [One]) [0x0B] = ST28 /* \ST28 */
                DerefOf (EWRY [One]) [0x0C] = ST29 /* \ST29 */
                DerefOf (EWRY [One]) [0x0D] = ST60 /* \ST60 */
                DerefOf (EWRY [One]) [0x0E] = ST61 /* \ST61 */
                DerefOf (EWRY [One]) [0x0F] = ST62 /* \ST62 */
                DerefOf (EWRY [One]) [0x10] = ST63 /* \ST63 */
                DerefOf (EWRY [One]) [0x11] = ST64 /* \ST64 */
                DerefOf (EWRY [One]) [0x12] = ST65 /* \ST65 */
                DerefOf (EWRY [One]) [0x13] = ST66 /* \ST66 */
                DerefOf (EWRY [One]) [0x14] = ST67 /* \ST67 */
                DerefOf (EWRY [One]) [0x15] = ST68 /* \ST68 */
                DerefOf (EWRY [One]) [0x16] = ST69 /* \ST69 */
                DerefOf (EWRY [One]) [0x17] = ST6A /* \ST6A */
                DerefOf (EWRY [One]) [0x18] = ST6B /* \ST6B */
                DerefOf (EWRY [One]) [0x19] = ST30 /* \ST30 */
                DerefOf (EWRY [One]) [0x1A] = ST31 /* \ST31 */
                DerefOf (EWRY [One]) [0x1B] = ST32 /* \ST32 */
                DerefOf (EWRY [One]) [0x1C] = ST33 /* \ST33 */
                DerefOf (EWRY [One]) [0x1D] = ST34 /* \ST34 */
                DerefOf (EWRY [One]) [0x1E] = ST35 /* \ST35 */
                DerefOf (EWRY [One]) [0x1F] = ST36 /* \ST36 */
                DerefOf (EWRY [One]) [0x20] = ST37 /* \ST37 */
                DerefOf (EWRY [One]) [0x21] = ST38 /* \ST38 */
                DerefOf (EWRY [One]) [0x22] = ST39 /* \ST39 */
                DerefOf (EWRY [One]) [0x23] = ST70 /* \ST70 */
                DerefOf (EWRY [One]) [0x24] = ST71 /* \ST71 */
                DerefOf (EWRY [One]) [0x25] = ST72 /* \ST72 */
                DerefOf (EWRY [One]) [0x26] = ST73 /* \ST73 */
                DerefOf (EWRY [One]) [0x27] = ST74 /* \ST74 */
                DerefOf (EWRY [One]) [0x28] = ST75 /* \ST75 */
                DerefOf (EWRY [One]) [0x29] = ST76 /* \ST76 */
                DerefOf (EWRY [One]) [0x2A] = ST77 /* \ST77 */
                DerefOf (EWRY [One]) [0x2B] = ST78 /* \ST78 */
                DerefOf (EWRY [One]) [0x2C] = ST79 /* \ST79 */
                DerefOf (EWRY [One]) [0x2D] = ST7A /* \ST7A */
                DerefOf (EWRY [One]) [0x2E] = ST7B /* \ST7B */
                DerefOf (EWRY [One]) [0x2F] = ST40 /* \ST40 */
                DerefOf (EWRY [One]) [0x30] = ST41 /* \ST41 */
                DerefOf (EWRY [One]) [0x31] = ST42 /* \ST42 */
                DerefOf (EWRY [One]) [0x32] = ST43 /* \ST43 */
                DerefOf (EWRY [One]) [0x33] = ST44 /* \ST44 */
                DerefOf (EWRY [One]) [0x34] = ST45 /* \ST45 */
                DerefOf (EWRY [One]) [0x35] = ST46 /* \ST46 */
                DerefOf (EWRY [One]) [0x36] = ST47 /* \ST47 */
                DerefOf (EWRY [One]) [0x37] = ST48 /* \ST48 */
                DerefOf (EWRY [One]) [0x38] = ST49 /* \ST49 */
                DerefOf (EWRY [One]) [0x39] = ST80 /* \ST80 */
                DerefOf (EWRY [One]) [0x3A] = ST81 /* \ST81 */
                DerefOf (EWRY [One]) [0x3B] = ST82 /* \ST82 */
                DerefOf (EWRY [One]) [0x3C] = ST83 /* \ST83 */
                DerefOf (EWRY [One]) [0x3D] = ST84 /* \ST84 */
                DerefOf (EWRY [One]) [0x3E] = ST85 /* \ST85 */
                DerefOf (EWRY [One]) [0x3F] = ST86 /* \ST86 */
                DerefOf (EWRY [One]) [0x40] = ST87 /* \ST87 */
                DerefOf (EWRY [One]) [0x41] = ST88 /* \ST88 */
                DerefOf (EWRY [One]) [0x42] = ST89 /* \ST89 */
                DerefOf (EWRY [One]) [0x43] = ST8A /* \ST8A */
                DerefOf (EWRY [One]) [0x44] = ST8B /* \ST8B */
                Return (EWRY) /* \_SB_.PC00.RP10.PXSX.EWRY */
            }

            Name (WGDY, Package (0x02)
            {
                0x02, 
                Package (0x1C)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WGDS, 0, Serialized)
            {
                DerefOf (WGDY [One]) [One] = SD11 /* \SD11 */
                DerefOf (WGDY [One]) [0x02] = SD12 /* \SD12 */
                DerefOf (WGDY [One]) [0x03] = SD13 /* \SD13 */
                DerefOf (WGDY [One]) [0x04] = SD14 /* \SD14 */
                DerefOf (WGDY [One]) [0x05] = SD15 /* \SD15 */
                DerefOf (WGDY [One]) [0x06] = SD16 /* \SD16 */
                DerefOf (WGDY [One]) [0x07] = SD17 /* \SD17 */
                DerefOf (WGDY [One]) [0x08] = SD18 /* \SD18 */
                DerefOf (WGDY [One]) [0x09] = SD19 /* \SD19 */
                DerefOf (WGDY [One]) [0x0A] = SD21 /* \SD21 */
                DerefOf (WGDY [One]) [0x0B] = SD22 /* \SD22 */
                DerefOf (WGDY [One]) [0x0C] = SD23 /* \SD23 */
                DerefOf (WGDY [One]) [0x0D] = SD24 /* \SD24 */
                DerefOf (WGDY [One]) [0x0E] = SD25 /* \SD25 */
                DerefOf (WGDY [One]) [0x0F] = SD26 /* \SD26 */
                DerefOf (WGDY [One]) [0x10] = SD27 /* \SD27 */
                DerefOf (WGDY [One]) [0x11] = SD28 /* \SD28 */
                DerefOf (WGDY [One]) [0x12] = SD29 /* \SD29 */
                DerefOf (WGDY [One]) [0x13] = SD31 /* \SD31 */
                DerefOf (WGDY [One]) [0x14] = SD32 /* \SD32 */
                DerefOf (WGDY [One]) [0x15] = SD33 /* \SD33 */
                DerefOf (WGDY [One]) [0x16] = SD34 /* \SD34 */
                DerefOf (WGDY [One]) [0x17] = SD35 /* \SD35 */
                DerefOf (WGDY [One]) [0x18] = SD36 /* \SD36 */
                DerefOf (WGDY [One]) [0x19] = SD37 /* \SD37 */
                DerefOf (WGDY [One]) [0x1A] = SD38 /* \SD38 */
                DerefOf (WGDY [One]) [0x1B] = SD39 /* \SD39 */
                Return (WGDY) /* \_SB_.PC00.RP10.PXSX.WGDY */
            }

            Name (ECKY, Package (0x02)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    Zero
                }
            })
            Method (ECKV, 0, Serialized)
            {
                DerefOf (ECKY [One]) [One] = CECV /* \CECV */
                Return (ECKY) /* \_SB_.PC00.RP10.PXSX.ECKY */
            }

            Name (PPAY, Package (0x02)
            {
                One, 
                Package (0x18)
                {
                    0x07, 
                    Zero, 
                    0x18, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x18, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28
                }
            })
            Method (PPAG, 0, Serialized)
            {
                DerefOf (PPAY [One]) [One] = WAGE /* \WAGE */
                DerefOf (PPAY [One]) [0x02] = AGA1 /* \AGA1 */
                DerefOf (PPAY [One]) [0x03] = AGA2 /* \AGA2 */
                DerefOf (PPAY [One]) [0x04] = AGA3 /* \AGA3 */
                DerefOf (PPAY [One]) [0x05] = AGA4 /* \AGA4 */
                DerefOf (PPAY [One]) [0x06] = AGA5 /* \AGA5 */
                DerefOf (PPAY [One]) [0x07] = AGA6 /* \AGA6 */
                DerefOf (PPAY [One]) [0x08] = AGA7 /* \AGA7 */
                DerefOf (PPAY [One]) [0x09] = AGA8 /* \AGA8 */
                DerefOf (PPAY [One]) [0x0A] = AGA9 /* \AGA9 */
                DerefOf (PPAY [One]) [0x0B] = AGAA /* \AGAA */
                DerefOf (PPAY [One]) [0x0C] = AGAB /* \AGAB */
                DerefOf (PPAY [One]) [0x0D] = AGB1 /* \AGB1 */
                DerefOf (PPAY [One]) [0x0E] = AGB2 /* \AGB2 */
                DerefOf (PPAY [One]) [0x0F] = AGB3 /* \AGB3 */
                DerefOf (PPAY [One]) [0x10] = AGB4 /* \AGB4 */
                DerefOf (PPAY [One]) [0x11] = AGB5 /* \AGB5 */
                DerefOf (PPAY [One]) [0x12] = AGB6 /* \AGB6 */
                DerefOf (PPAY [One]) [0x13] = AGB7 /* \AGB7 */
                DerefOf (PPAY [One]) [0x14] = AGB8 /* \AGB8 */
                DerefOf (PPAY [One]) [0x15] = AGB9 /* \AGB9 */
                DerefOf (PPAY [One]) [0x16] = AGBA /* \AGBA */
                DerefOf (PPAY [One]) [0x17] = AGBB /* \AGBB */
                Return (PPAY) /* \_SB_.PC00.RP10.PXSX.PPAY */
            }

            Name (SADX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    0x80000000
                }, 

                Package (0x02)
                {
                    0x12, 
                    0x80000000
                }
            })
            Method (SADS, 0, Serialized)
            {
                DerefOf (SADX [One]) [One] = ATDV /* \ATDV */
                DerefOf (SADX [0x02]) [One] = ATDV /* \ATDV */
                Return (SADX) /* \_SB_.PC00.RP10.PXSX.SADX */
            }

            Name (GPCX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }, 

                Package (0x02)
                {
                    0x12, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }
            })
            Method (GPC, 0, Serialized)
            {
                Return (GPCX) /* \_SB_.PC00.RP10.PXSX.GPCX */
            }
        }

        If (((WWEN != Zero) && (WWRP == SLOT)))
        {
            Method (SHRF, 0, NotSerialized)
            {
                PSD0 (SLOT)
                SPCO (WCLK, One)
                SGOV (WFCP, PFCP)
                Sleep (TN2B)
                SGOV (WBRS, (~PBRS & One))
                Sleep (TB2R)
                SGOV (PRST, (~WPRP & One))
                L23D ()
            }

            Method (_RST, 0, Serialized)  // _RST: Device Reset
            {
                If ((WWEN == 0x02))
                {
                    Local0 = Acquire (WWMT, 0x03E8)
                    If ((Local0 == Zero))
                    {
                        ADBG ("Start WWAN FLDR")
                        DL23 ()
                        SGOV (WBRS, PBRS)
                        Sleep (TBTG)
                        SHRF ()
                        ADBG ("End WWAN FLDR")
                        Release (WWMT)
                    }
                }
                Else
                {
                    SGOV (WBRS, PBRS)
                    Sleep (0xC8)
                    Notify (PXSX, One) // Device Check
                    SGOV (PRST, (~WPRP & One))
                    SGOV (WBRS, (~PBRS & One))
                    Sleep (0xC8)
                    Local0 = Zero
                    While ((LASX == Zero))
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    Sleep (0x0A)
                    Notify (PXSX, One) // Device Check
                }
            }

            PowerResource (MRST, 0x05, 0x0000)
            {
                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    Return (One)
                }

                Method (_ON, 0, Serialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                {
                }

                Method (_RST, 0, Serialized)  // _RST: Device Reset
                {
                    Local0 = Acquire (WWMT, 0x03E8)
                    If ((Local0 == Zero))
                    {
                        ADBG ("Start WWAN PR _RST")
                        DL23 ()
                        SGOV (WBRS, PBRS)
                        SPCO (WCLK, Zero)
                        Sleep (TB2F)
                        SGOV (WFCP, (~PFCP & One))
                        Sleep (TFDI)
                        SHRF ()
                        Release (WWMT)
                    }
                }
            }
        }

        If ((WIST () || ((WWEN != Zero) && (WWRP == SLOT))))
        {
            PowerResource (DRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    If ((DCAP & 0x10000000))
                    {
                        Local0 = DCTR /* \_SB_.PC00.RP10.PXSX.DCTR */
                        Local0 |= 0x8000
                        DCTR = Local0
                    }
                }
            }

            Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
            {
                If (WIST ())
                {
                    If (CondRefOf (WRST))
                    {
                        Return (Package (0x01)
                        {
                            WRST
                        })
                    }
                }

                If (((WWEN != Zero) && (WWRP == SLOT)))
                {
                    If (CondRefOf (MRST))
                    {
                        Return (Package (0x01)
                        {
                            MRST
                        })
                    }
                }

                Return (Package (0x01)
                {
                    DRST
                })
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (WIST ())
                {
                    If ((Arg0 == ToUUID ("f21202bf-8f78-4dc6-a5b3-1f738e285ade") /* Unknown UUID */))
                    {
                        If ((Arg2 == Zero))
                        {
                            If ((Arg1 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x0F                                             // .
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }
                        }

                        If ((Arg2 == One))
                        {
                            Local0 = ACSD /* \ACSD */
                            Return (Local0)
                        }

                        If ((Arg2 == 0x02))
                        {
                            Local0 = I5BS /* \I5BS */
                            Return (Local0)
                        }

                        If ((Arg2 == 0x03))
                        {
                            Local0 = UHBS /* \UHBS */
                            Return (Local0)
                        }

                        Return (Zero)
                    }
                }

                If (((WWEN != Zero) && (WWRP == SLOT)))
                {
                    If ((Arg0 == ToUUID ("bad01b75-22a8-4f48-8792-bdde9467747d") /* Unknown UUID */))
                    {
                        If ((Arg2 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x09                                             // .
                            })
                        }

                        If ((Arg2 == One)) {}
                        If ((Arg2 == 0x02)) {}
                        If ((Arg2 == 0x03))
                        {
                            If ((WRTO == One)) {}
                            ElseIf ((WRTO == 0x03)) {}
                            Else
                            {
                            }

                            Return (WRTO) /* \WRTO */
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }

    Scope (_SB.PC00.RP11.PXSX)
    {
        OperationRegion (RPXX, SystemMemory, GMIO (^_ADR (), _ADR), 0x10)
        Field (RPXX, AnyAcc, NoLock, Preserve)
        {
            VDID,   32
        }

        OperationRegion (FLDR, SystemMemory, (GMIO (^_ADR (), _ADR) + 0x44), 0x06)
        Field (FLDR, ByteAcc, NoLock, Preserve)
        {
            DCAP,   32, 
            DCTR,   16
        }

        Method (WIST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x095A8086)
                    {
                        Return (One)
                    }
                    Case (0x095B8086)
                    {
                        Return (One)
                    }
                    Case (0x31658086)
                    {
                        Return (One)
                    }
                    Case (0x31668086)
                    {
                        Return (One)
                    }
                    Case (0x08B18086)
                    {
                        Return (One)
                    }
                    Case (0x08B28086)
                    {
                        Return (One)
                    }
                    Case (0x08B38086)
                    {
                        Return (One)
                    }
                    Case (0x08B48086)
                    {
                        Return (One)
                    }
                    Case (0x24F38086)
                    {
                        Return (One)
                    }
                    Case (0x24F48086)
                    {
                        Return (One)
                    }
                    Case (0x24F58086)
                    {
                        Return (One)
                    }
                    Case (0x24F68086)
                    {
                        Return (One)
                    }
                    Case (0x24FD8086)
                    {
                        Return (One)
                    }
                    Case (0x24FB8086)
                    {
                        Return (One)
                    }
                    Case (0x25268086)
                    {
                        Return (One)
                    }
                    Case (0x271B8086)
                    {
                        Return (One)
                    }
                    Case (0x27238086)
                    {
                        Return (One)
                    }
                    Case (0x27258086)
                    {
                        Return (One)
                    }
                    Case (0x885210EC)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (WWST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x73608086)
                    {
                        Return (One)
                    }
                    Case (0x75608086)
                    {
                        Return (One)
                    }
                    Case (0x4D7514C3)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        If (WIST ())
        {
            PowerResource (WRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    If ((DCAP & 0x10000000))
                    {
                        Local0 = DCTR /* \_SB_.PC00.RP11.PXSX.DCTR */
                        Local0 |= 0x8000
                        DCTR = Local0
                    }
                }
            }

            Name (SPLX, Package (0x02)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (SPLC, 0, Serialized)
            {
                DerefOf (SPLX [One]) [Zero] = DOM1 /* \DOM1 */
                DerefOf (SPLX [One]) [One] = LIM1 /* \LIM1 */
                DerefOf (SPLX [One]) [0x02] = TIM1 /* \TIM1 */
                Return (SPLX) /* \_SB_.PC00.RP11.PXSX.SPLX */
            }

            Name (WANX, Package (0x03)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (WAND, 0, Serialized)
            {
                DerefOf (WANX [One]) [Zero] = Zero
                DerefOf (WANX [One]) [One] = TRD0 /* \TRD0 */
                DerefOf (WANX [One]) [0x02] = TRL0 /* \TRL0 */
                DerefOf (WANX [0x02]) [Zero] = One
                DerefOf (WANX [0x02]) [One] = TRD1 /* \TRD1 */
                DerefOf (WANX [0x02]) [0x02] = TRL1 /* \TRL1 */
                Return (WANX) /* \_SB_.PC00.RP11.PXSX.WANX */
            }

            Name (WRDX, Package (0x02)
            {
                Zero, 
                Package (0x02)
                {
                    0x80000000, 
                    0x8000
                }
            })
            Method (WRDD, 0, Serialized)
            {
                DerefOf (WRDX [One]) [Zero] = WDM1 /* \WDM1 */
                DerefOf (WRDX [One]) [One] = CID1 /* \CID1 */
                Return (WRDX) /* \_SB_.PC00.RP11.PXSX.WRDX */
            }

            Name (WRDY, Package (0x02)
            {
                One, 
                Package (0x18)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WRDS, 0, Serialized)
            {
                DerefOf (WRDY [One]) [One] = STXE /* \STXE */
                DerefOf (WRDY [One]) [0x02] = ST10 /* \ST10 */
                DerefOf (WRDY [One]) [0x03] = ST11 /* \ST11 */
                DerefOf (WRDY [One]) [0x04] = ST12 /* \ST12 */
                DerefOf (WRDY [One]) [0x05] = ST13 /* \ST13 */
                DerefOf (WRDY [One]) [0x06] = ST14 /* \ST14 */
                DerefOf (WRDY [One]) [0x07] = ST15 /* \ST15 */
                DerefOf (WRDY [One]) [0x08] = ST16 /* \ST16 */
                DerefOf (WRDY [One]) [0x09] = ST17 /* \ST17 */
                DerefOf (WRDY [One]) [0x0A] = ST18 /* \ST18 */
                DerefOf (WRDY [One]) [0x0B] = ST19 /* \ST19 */
                DerefOf (WRDY [One]) [0x0C] = ST50 /* \ST50 */
                DerefOf (WRDY [One]) [0x0D] = ST51 /* \ST51 */
                DerefOf (WRDY [One]) [0x0E] = ST52 /* \ST52 */
                DerefOf (WRDY [One]) [0x0F] = ST53 /* \ST53 */
                DerefOf (WRDY [One]) [0x10] = ST54 /* \ST54 */
                DerefOf (WRDY [One]) [0x11] = ST55 /* \ST55 */
                DerefOf (WRDY [One]) [0x12] = ST56 /* \ST56 */
                DerefOf (WRDY [One]) [0x13] = ST57 /* \ST57 */
                DerefOf (WRDY [One]) [0x14] = ST58 /* \ST58 */
                DerefOf (WRDY [One]) [0x15] = ST59 /* \ST59 */
                DerefOf (WRDY [One]) [0x16] = ST5A /* \ST5A */
                DerefOf (WRDY [One]) [0x17] = ST5B /* \ST5B */
                Return (WRDY) /* \_SB_.PC00.RP11.PXSX.WRDY */
            }

            Name (EWRY, Package (0x02)
            {
                One, 
                Package (0x45)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (EWRD, 0, Serialized)
            {
                DerefOf (EWRY [One]) [One] = STDE /* \STDE */
                DerefOf (EWRY [One]) [0x02] = STRS /* \STRS */
                DerefOf (EWRY [One]) [0x03] = ST20 /* \ST20 */
                DerefOf (EWRY [One]) [0x04] = ST21 /* \ST21 */
                DerefOf (EWRY [One]) [0x05] = ST22 /* \ST22 */
                DerefOf (EWRY [One]) [0x06] = ST23 /* \ST23 */
                DerefOf (EWRY [One]) [0x07] = ST24 /* \ST24 */
                DerefOf (EWRY [One]) [0x08] = ST25 /* \ST25 */
                DerefOf (EWRY [One]) [0x09] = ST26 /* \ST26 */
                DerefOf (EWRY [One]) [0x0A] = ST27 /* \ST27 */
                DerefOf (EWRY [One]) [0x0B] = ST28 /* \ST28 */
                DerefOf (EWRY [One]) [0x0C] = ST29 /* \ST29 */
                DerefOf (EWRY [One]) [0x0D] = ST60 /* \ST60 */
                DerefOf (EWRY [One]) [0x0E] = ST61 /* \ST61 */
                DerefOf (EWRY [One]) [0x0F] = ST62 /* \ST62 */
                DerefOf (EWRY [One]) [0x10] = ST63 /* \ST63 */
                DerefOf (EWRY [One]) [0x11] = ST64 /* \ST64 */
                DerefOf (EWRY [One]) [0x12] = ST65 /* \ST65 */
                DerefOf (EWRY [One]) [0x13] = ST66 /* \ST66 */
                DerefOf (EWRY [One]) [0x14] = ST67 /* \ST67 */
                DerefOf (EWRY [One]) [0x15] = ST68 /* \ST68 */
                DerefOf (EWRY [One]) [0x16] = ST69 /* \ST69 */
                DerefOf (EWRY [One]) [0x17] = ST6A /* \ST6A */
                DerefOf (EWRY [One]) [0x18] = ST6B /* \ST6B */
                DerefOf (EWRY [One]) [0x19] = ST30 /* \ST30 */
                DerefOf (EWRY [One]) [0x1A] = ST31 /* \ST31 */
                DerefOf (EWRY [One]) [0x1B] = ST32 /* \ST32 */
                DerefOf (EWRY [One]) [0x1C] = ST33 /* \ST33 */
                DerefOf (EWRY [One]) [0x1D] = ST34 /* \ST34 */
                DerefOf (EWRY [One]) [0x1E] = ST35 /* \ST35 */
                DerefOf (EWRY [One]) [0x1F] = ST36 /* \ST36 */
                DerefOf (EWRY [One]) [0x20] = ST37 /* \ST37 */
                DerefOf (EWRY [One]) [0x21] = ST38 /* \ST38 */
                DerefOf (EWRY [One]) [0x22] = ST39 /* \ST39 */
                DerefOf (EWRY [One]) [0x23] = ST70 /* \ST70 */
                DerefOf (EWRY [One]) [0x24] = ST71 /* \ST71 */
                DerefOf (EWRY [One]) [0x25] = ST72 /* \ST72 */
                DerefOf (EWRY [One]) [0x26] = ST73 /* \ST73 */
                DerefOf (EWRY [One]) [0x27] = ST74 /* \ST74 */
                DerefOf (EWRY [One]) [0x28] = ST75 /* \ST75 */
                DerefOf (EWRY [One]) [0x29] = ST76 /* \ST76 */
                DerefOf (EWRY [One]) [0x2A] = ST77 /* \ST77 */
                DerefOf (EWRY [One]) [0x2B] = ST78 /* \ST78 */
                DerefOf (EWRY [One]) [0x2C] = ST79 /* \ST79 */
                DerefOf (EWRY [One]) [0x2D] = ST7A /* \ST7A */
                DerefOf (EWRY [One]) [0x2E] = ST7B /* \ST7B */
                DerefOf (EWRY [One]) [0x2F] = ST40 /* \ST40 */
                DerefOf (EWRY [One]) [0x30] = ST41 /* \ST41 */
                DerefOf (EWRY [One]) [0x31] = ST42 /* \ST42 */
                DerefOf (EWRY [One]) [0x32] = ST43 /* \ST43 */
                DerefOf (EWRY [One]) [0x33] = ST44 /* \ST44 */
                DerefOf (EWRY [One]) [0x34] = ST45 /* \ST45 */
                DerefOf (EWRY [One]) [0x35] = ST46 /* \ST46 */
                DerefOf (EWRY [One]) [0x36] = ST47 /* \ST47 */
                DerefOf (EWRY [One]) [0x37] = ST48 /* \ST48 */
                DerefOf (EWRY [One]) [0x38] = ST49 /* \ST49 */
                DerefOf (EWRY [One]) [0x39] = ST80 /* \ST80 */
                DerefOf (EWRY [One]) [0x3A] = ST81 /* \ST81 */
                DerefOf (EWRY [One]) [0x3B] = ST82 /* \ST82 */
                DerefOf (EWRY [One]) [0x3C] = ST83 /* \ST83 */
                DerefOf (EWRY [One]) [0x3D] = ST84 /* \ST84 */
                DerefOf (EWRY [One]) [0x3E] = ST85 /* \ST85 */
                DerefOf (EWRY [One]) [0x3F] = ST86 /* \ST86 */
                DerefOf (EWRY [One]) [0x40] = ST87 /* \ST87 */
                DerefOf (EWRY [One]) [0x41] = ST88 /* \ST88 */
                DerefOf (EWRY [One]) [0x42] = ST89 /* \ST89 */
                DerefOf (EWRY [One]) [0x43] = ST8A /* \ST8A */
                DerefOf (EWRY [One]) [0x44] = ST8B /* \ST8B */
                Return (EWRY) /* \_SB_.PC00.RP11.PXSX.EWRY */
            }

            Name (WGDY, Package (0x02)
            {
                0x02, 
                Package (0x1C)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WGDS, 0, Serialized)
            {
                DerefOf (WGDY [One]) [One] = SD11 /* \SD11 */
                DerefOf (WGDY [One]) [0x02] = SD12 /* \SD12 */
                DerefOf (WGDY [One]) [0x03] = SD13 /* \SD13 */
                DerefOf (WGDY [One]) [0x04] = SD14 /* \SD14 */
                DerefOf (WGDY [One]) [0x05] = SD15 /* \SD15 */
                DerefOf (WGDY [One]) [0x06] = SD16 /* \SD16 */
                DerefOf (WGDY [One]) [0x07] = SD17 /* \SD17 */
                DerefOf (WGDY [One]) [0x08] = SD18 /* \SD18 */
                DerefOf (WGDY [One]) [0x09] = SD19 /* \SD19 */
                DerefOf (WGDY [One]) [0x0A] = SD21 /* \SD21 */
                DerefOf (WGDY [One]) [0x0B] = SD22 /* \SD22 */
                DerefOf (WGDY [One]) [0x0C] = SD23 /* \SD23 */
                DerefOf (WGDY [One]) [0x0D] = SD24 /* \SD24 */
                DerefOf (WGDY [One]) [0x0E] = SD25 /* \SD25 */
                DerefOf (WGDY [One]) [0x0F] = SD26 /* \SD26 */
                DerefOf (WGDY [One]) [0x10] = SD27 /* \SD27 */
                DerefOf (WGDY [One]) [0x11] = SD28 /* \SD28 */
                DerefOf (WGDY [One]) [0x12] = SD29 /* \SD29 */
                DerefOf (WGDY [One]) [0x13] = SD31 /* \SD31 */
                DerefOf (WGDY [One]) [0x14] = SD32 /* \SD32 */
                DerefOf (WGDY [One]) [0x15] = SD33 /* \SD33 */
                DerefOf (WGDY [One]) [0x16] = SD34 /* \SD34 */
                DerefOf (WGDY [One]) [0x17] = SD35 /* \SD35 */
                DerefOf (WGDY [One]) [0x18] = SD36 /* \SD36 */
                DerefOf (WGDY [One]) [0x19] = SD37 /* \SD37 */
                DerefOf (WGDY [One]) [0x1A] = SD38 /* \SD38 */
                DerefOf (WGDY [One]) [0x1B] = SD39 /* \SD39 */
                Return (WGDY) /* \_SB_.PC00.RP11.PXSX.WGDY */
            }

            Name (ECKY, Package (0x02)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    Zero
                }
            })
            Method (ECKV, 0, Serialized)
            {
                DerefOf (ECKY [One]) [One] = CECV /* \CECV */
                Return (ECKY) /* \_SB_.PC00.RP11.PXSX.ECKY */
            }

            Name (PPAY, Package (0x02)
            {
                One, 
                Package (0x18)
                {
                    0x07, 
                    Zero, 
                    0x18, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x18, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28
                }
            })
            Method (PPAG, 0, Serialized)
            {
                DerefOf (PPAY [One]) [One] = WAGE /* \WAGE */
                DerefOf (PPAY [One]) [0x02] = AGA1 /* \AGA1 */
                DerefOf (PPAY [One]) [0x03] = AGA2 /* \AGA2 */
                DerefOf (PPAY [One]) [0x04] = AGA3 /* \AGA3 */
                DerefOf (PPAY [One]) [0x05] = AGA4 /* \AGA4 */
                DerefOf (PPAY [One]) [0x06] = AGA5 /* \AGA5 */
                DerefOf (PPAY [One]) [0x07] = AGA6 /* \AGA6 */
                DerefOf (PPAY [One]) [0x08] = AGA7 /* \AGA7 */
                DerefOf (PPAY [One]) [0x09] = AGA8 /* \AGA8 */
                DerefOf (PPAY [One]) [0x0A] = AGA9 /* \AGA9 */
                DerefOf (PPAY [One]) [0x0B] = AGAA /* \AGAA */
                DerefOf (PPAY [One]) [0x0C] = AGAB /* \AGAB */
                DerefOf (PPAY [One]) [0x0D] = AGB1 /* \AGB1 */
                DerefOf (PPAY [One]) [0x0E] = AGB2 /* \AGB2 */
                DerefOf (PPAY [One]) [0x0F] = AGB3 /* \AGB3 */
                DerefOf (PPAY [One]) [0x10] = AGB4 /* \AGB4 */
                DerefOf (PPAY [One]) [0x11] = AGB5 /* \AGB5 */
                DerefOf (PPAY [One]) [0x12] = AGB6 /* \AGB6 */
                DerefOf (PPAY [One]) [0x13] = AGB7 /* \AGB7 */
                DerefOf (PPAY [One]) [0x14] = AGB8 /* \AGB8 */
                DerefOf (PPAY [One]) [0x15] = AGB9 /* \AGB9 */
                DerefOf (PPAY [One]) [0x16] = AGBA /* \AGBA */
                DerefOf (PPAY [One]) [0x17] = AGBB /* \AGBB */
                Return (PPAY) /* \_SB_.PC00.RP11.PXSX.PPAY */
            }

            Name (SADX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    0x80000000
                }, 

                Package (0x02)
                {
                    0x12, 
                    0x80000000
                }
            })
            Method (SADS, 0, Serialized)
            {
                DerefOf (SADX [One]) [One] = ATDV /* \ATDV */
                DerefOf (SADX [0x02]) [One] = ATDV /* \ATDV */
                Return (SADX) /* \_SB_.PC00.RP11.PXSX.SADX */
            }

            Name (GPCX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }, 

                Package (0x02)
                {
                    0x12, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }
            })
            Method (GPC, 0, Serialized)
            {
                Return (GPCX) /* \_SB_.PC00.RP11.PXSX.GPCX */
            }
        }

        If (((WWEN != Zero) && (WWRP == SLOT)))
        {
            Method (SHRF, 0, NotSerialized)
            {
                PSD0 (SLOT)
                SPCO (WCLK, One)
                SGOV (WFCP, PFCP)
                Sleep (TN2B)
                SGOV (WBRS, (~PBRS & One))
                Sleep (TB2R)
                SGOV (PRST, (~WPRP & One))
                L23D ()
            }

            Method (_RST, 0, Serialized)  // _RST: Device Reset
            {
                If ((WWEN == 0x02))
                {
                    Local0 = Acquire (WWMT, 0x03E8)
                    If ((Local0 == Zero))
                    {
                        ADBG ("Start WWAN FLDR")
                        DL23 ()
                        SGOV (WBRS, PBRS)
                        Sleep (TBTG)
                        SHRF ()
                        ADBG ("End WWAN FLDR")
                        Release (WWMT)
                    }
                }
                Else
                {
                    SGOV (WBRS, PBRS)
                    Sleep (0xC8)
                    Notify (PXSX, One) // Device Check
                    SGOV (PRST, (~WPRP & One))
                    SGOV (WBRS, (~PBRS & One))
                    Sleep (0xC8)
                    Local0 = Zero
                    While ((LASX == Zero))
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    Sleep (0x0A)
                    Notify (PXSX, One) // Device Check
                }
            }

            PowerResource (MRST, 0x05, 0x0000)
            {
                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    Return (One)
                }

                Method (_ON, 0, Serialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                {
                }

                Method (_RST, 0, Serialized)  // _RST: Device Reset
                {
                    Local0 = Acquire (WWMT, 0x03E8)
                    If ((Local0 == Zero))
                    {
                        ADBG ("Start WWAN PR _RST")
                        DL23 ()
                        SGOV (WBRS, PBRS)
                        SPCO (WCLK, Zero)
                        Sleep (TB2F)
                        SGOV (WFCP, (~PFCP & One))
                        Sleep (TFDI)
                        SHRF ()
                        Release (WWMT)
                    }
                }
            }
        }

        If ((WIST () || ((WWEN != Zero) && (WWRP == SLOT))))
        {
            PowerResource (DRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    If ((DCAP & 0x10000000))
                    {
                        Local0 = DCTR /* \_SB_.PC00.RP11.PXSX.DCTR */
                        Local0 |= 0x8000
                        DCTR = Local0
                    }
                }
            }

            Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
            {
                If (WIST ())
                {
                    If (CondRefOf (WRST))
                    {
                        Return (Package (0x01)
                        {
                            WRST
                        })
                    }
                }

                If (((WWEN != Zero) && (WWRP == SLOT)))
                {
                    If (CondRefOf (MRST))
                    {
                        Return (Package (0x01)
                        {
                            MRST
                        })
                    }
                }

                Return (Package (0x01)
                {
                    DRST
                })
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (WIST ())
                {
                    If ((Arg0 == ToUUID ("f21202bf-8f78-4dc6-a5b3-1f738e285ade") /* Unknown UUID */))
                    {
                        If ((Arg2 == Zero))
                        {
                            If ((Arg1 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x0F                                             // .
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }
                        }

                        If ((Arg2 == One))
                        {
                            Local0 = ACSD /* \ACSD */
                            Return (Local0)
                        }

                        If ((Arg2 == 0x02))
                        {
                            Local0 = I5BS /* \I5BS */
                            Return (Local0)
                        }

                        If ((Arg2 == 0x03))
                        {
                            Local0 = UHBS /* \UHBS */
                            Return (Local0)
                        }

                        Return (Zero)
                    }
                }

                If (((WWEN != Zero) && (WWRP == SLOT)))
                {
                    If ((Arg0 == ToUUID ("bad01b75-22a8-4f48-8792-bdde9467747d") /* Unknown UUID */))
                    {
                        If ((Arg2 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x09                                             // .
                            })
                        }

                        If ((Arg2 == One)) {}
                        If ((Arg2 == 0x02)) {}
                        If ((Arg2 == 0x03))
                        {
                            If ((WRTO == One)) {}
                            ElseIf ((WRTO == 0x03)) {}
                            Else
                            {
                            }

                            Return (WRTO) /* \WRTO */
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }

    Scope (_SB.PC00.RP12.PXSX)
    {
        OperationRegion (RPXX, SystemMemory, GMIO (^_ADR (), _ADR), 0x10)
        Field (RPXX, AnyAcc, NoLock, Preserve)
        {
            VDID,   32
        }

        OperationRegion (FLDR, SystemMemory, (GMIO (^_ADR (), _ADR) + 0x44), 0x06)
        Field (FLDR, ByteAcc, NoLock, Preserve)
        {
            DCAP,   32, 
            DCTR,   16
        }

        Method (WIST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x095A8086)
                    {
                        Return (One)
                    }
                    Case (0x095B8086)
                    {
                        Return (One)
                    }
                    Case (0x31658086)
                    {
                        Return (One)
                    }
                    Case (0x31668086)
                    {
                        Return (One)
                    }
                    Case (0x08B18086)
                    {
                        Return (One)
                    }
                    Case (0x08B28086)
                    {
                        Return (One)
                    }
                    Case (0x08B38086)
                    {
                        Return (One)
                    }
                    Case (0x08B48086)
                    {
                        Return (One)
                    }
                    Case (0x24F38086)
                    {
                        Return (One)
                    }
                    Case (0x24F48086)
                    {
                        Return (One)
                    }
                    Case (0x24F58086)
                    {
                        Return (One)
                    }
                    Case (0x24F68086)
                    {
                        Return (One)
                    }
                    Case (0x24FD8086)
                    {
                        Return (One)
                    }
                    Case (0x24FB8086)
                    {
                        Return (One)
                    }
                    Case (0x25268086)
                    {
                        Return (One)
                    }
                    Case (0x271B8086)
                    {
                        Return (One)
                    }
                    Case (0x27238086)
                    {
                        Return (One)
                    }
                    Case (0x27258086)
                    {
                        Return (One)
                    }
                    Case (0x885210EC)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (WWST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x73608086)
                    {
                        Return (One)
                    }
                    Case (0x75608086)
                    {
                        Return (One)
                    }
                    Case (0x4D7514C3)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        If (WIST ())
        {
            PowerResource (WRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    If ((DCAP & 0x10000000))
                    {
                        Local0 = DCTR /* \_SB_.PC00.RP12.PXSX.DCTR */
                        Local0 |= 0x8000
                        DCTR = Local0
                    }
                }
            }

            Name (SPLX, Package (0x02)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (SPLC, 0, Serialized)
            {
                DerefOf (SPLX [One]) [Zero] = DOM1 /* \DOM1 */
                DerefOf (SPLX [One]) [One] = LIM1 /* \LIM1 */
                DerefOf (SPLX [One]) [0x02] = TIM1 /* \TIM1 */
                Return (SPLX) /* \_SB_.PC00.RP12.PXSX.SPLX */
            }

            Name (WANX, Package (0x03)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (WAND, 0, Serialized)
            {
                DerefOf (WANX [One]) [Zero] = Zero
                DerefOf (WANX [One]) [One] = TRD0 /* \TRD0 */
                DerefOf (WANX [One]) [0x02] = TRL0 /* \TRL0 */
                DerefOf (WANX [0x02]) [Zero] = One
                DerefOf (WANX [0x02]) [One] = TRD1 /* \TRD1 */
                DerefOf (WANX [0x02]) [0x02] = TRL1 /* \TRL1 */
                Return (WANX) /* \_SB_.PC00.RP12.PXSX.WANX */
            }

            Name (WRDX, Package (0x02)
            {
                Zero, 
                Package (0x02)
                {
                    0x80000000, 
                    0x8000
                }
            })
            Method (WRDD, 0, Serialized)
            {
                DerefOf (WRDX [One]) [Zero] = WDM1 /* \WDM1 */
                DerefOf (WRDX [One]) [One] = CID1 /* \CID1 */
                Return (WRDX) /* \_SB_.PC00.RP12.PXSX.WRDX */
            }

            Name (WRDY, Package (0x02)
            {
                One, 
                Package (0x18)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WRDS, 0, Serialized)
            {
                DerefOf (WRDY [One]) [One] = STXE /* \STXE */
                DerefOf (WRDY [One]) [0x02] = ST10 /* \ST10 */
                DerefOf (WRDY [One]) [0x03] = ST11 /* \ST11 */
                DerefOf (WRDY [One]) [0x04] = ST12 /* \ST12 */
                DerefOf (WRDY [One]) [0x05] = ST13 /* \ST13 */
                DerefOf (WRDY [One]) [0x06] = ST14 /* \ST14 */
                DerefOf (WRDY [One]) [0x07] = ST15 /* \ST15 */
                DerefOf (WRDY [One]) [0x08] = ST16 /* \ST16 */
                DerefOf (WRDY [One]) [0x09] = ST17 /* \ST17 */
                DerefOf (WRDY [One]) [0x0A] = ST18 /* \ST18 */
                DerefOf (WRDY [One]) [0x0B] = ST19 /* \ST19 */
                DerefOf (WRDY [One]) [0x0C] = ST50 /* \ST50 */
                DerefOf (WRDY [One]) [0x0D] = ST51 /* \ST51 */
                DerefOf (WRDY [One]) [0x0E] = ST52 /* \ST52 */
                DerefOf (WRDY [One]) [0x0F] = ST53 /* \ST53 */
                DerefOf (WRDY [One]) [0x10] = ST54 /* \ST54 */
                DerefOf (WRDY [One]) [0x11] = ST55 /* \ST55 */
                DerefOf (WRDY [One]) [0x12] = ST56 /* \ST56 */
                DerefOf (WRDY [One]) [0x13] = ST57 /* \ST57 */
                DerefOf (WRDY [One]) [0x14] = ST58 /* \ST58 */
                DerefOf (WRDY [One]) [0x15] = ST59 /* \ST59 */
                DerefOf (WRDY [One]) [0x16] = ST5A /* \ST5A */
                DerefOf (WRDY [One]) [0x17] = ST5B /* \ST5B */
                Return (WRDY) /* \_SB_.PC00.RP12.PXSX.WRDY */
            }

            Name (EWRY, Package (0x02)
            {
                One, 
                Package (0x45)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (EWRD, 0, Serialized)
            {
                DerefOf (EWRY [One]) [One] = STDE /* \STDE */
                DerefOf (EWRY [One]) [0x02] = STRS /* \STRS */
                DerefOf (EWRY [One]) [0x03] = ST20 /* \ST20 */
                DerefOf (EWRY [One]) [0x04] = ST21 /* \ST21 */
                DerefOf (EWRY [One]) [0x05] = ST22 /* \ST22 */
                DerefOf (EWRY [One]) [0x06] = ST23 /* \ST23 */
                DerefOf (EWRY [One]) [0x07] = ST24 /* \ST24 */
                DerefOf (EWRY [One]) [0x08] = ST25 /* \ST25 */
                DerefOf (EWRY [One]) [0x09] = ST26 /* \ST26 */
                DerefOf (EWRY [One]) [0x0A] = ST27 /* \ST27 */
                DerefOf (EWRY [One]) [0x0B] = ST28 /* \ST28 */
                DerefOf (EWRY [One]) [0x0C] = ST29 /* \ST29 */
                DerefOf (EWRY [One]) [0x0D] = ST60 /* \ST60 */
                DerefOf (EWRY [One]) [0x0E] = ST61 /* \ST61 */
                DerefOf (EWRY [One]) [0x0F] = ST62 /* \ST62 */
                DerefOf (EWRY [One]) [0x10] = ST63 /* \ST63 */
                DerefOf (EWRY [One]) [0x11] = ST64 /* \ST64 */
                DerefOf (EWRY [One]) [0x12] = ST65 /* \ST65 */
                DerefOf (EWRY [One]) [0x13] = ST66 /* \ST66 */
                DerefOf (EWRY [One]) [0x14] = ST67 /* \ST67 */
                DerefOf (EWRY [One]) [0x15] = ST68 /* \ST68 */
                DerefOf (EWRY [One]) [0x16] = ST69 /* \ST69 */
                DerefOf (EWRY [One]) [0x17] = ST6A /* \ST6A */
                DerefOf (EWRY [One]) [0x18] = ST6B /* \ST6B */
                DerefOf (EWRY [One]) [0x19] = ST30 /* \ST30 */
                DerefOf (EWRY [One]) [0x1A] = ST31 /* \ST31 */
                DerefOf (EWRY [One]) [0x1B] = ST32 /* \ST32 */
                DerefOf (EWRY [One]) [0x1C] = ST33 /* \ST33 */
                DerefOf (EWRY [One]) [0x1D] = ST34 /* \ST34 */
                DerefOf (EWRY [One]) [0x1E] = ST35 /* \ST35 */
                DerefOf (EWRY [One]) [0x1F] = ST36 /* \ST36 */
                DerefOf (EWRY [One]) [0x20] = ST37 /* \ST37 */
                DerefOf (EWRY [One]) [0x21] = ST38 /* \ST38 */
                DerefOf (EWRY [One]) [0x22] = ST39 /* \ST39 */
                DerefOf (EWRY [One]) [0x23] = ST70 /* \ST70 */
                DerefOf (EWRY [One]) [0x24] = ST71 /* \ST71 */
                DerefOf (EWRY [One]) [0x25] = ST72 /* \ST72 */
                DerefOf (EWRY [One]) [0x26] = ST73 /* \ST73 */
                DerefOf (EWRY [One]) [0x27] = ST74 /* \ST74 */
                DerefOf (EWRY [One]) [0x28] = ST75 /* \ST75 */
                DerefOf (EWRY [One]) [0x29] = ST76 /* \ST76 */
                DerefOf (EWRY [One]) [0x2A] = ST77 /* \ST77 */
                DerefOf (EWRY [One]) [0x2B] = ST78 /* \ST78 */
                DerefOf (EWRY [One]) [0x2C] = ST79 /* \ST79 */
                DerefOf (EWRY [One]) [0x2D] = ST7A /* \ST7A */
                DerefOf (EWRY [One]) [0x2E] = ST7B /* \ST7B */
                DerefOf (EWRY [One]) [0x2F] = ST40 /* \ST40 */
                DerefOf (EWRY [One]) [0x30] = ST41 /* \ST41 */
                DerefOf (EWRY [One]) [0x31] = ST42 /* \ST42 */
                DerefOf (EWRY [One]) [0x32] = ST43 /* \ST43 */
                DerefOf (EWRY [One]) [0x33] = ST44 /* \ST44 */
                DerefOf (EWRY [One]) [0x34] = ST45 /* \ST45 */
                DerefOf (EWRY [One]) [0x35] = ST46 /* \ST46 */
                DerefOf (EWRY [One]) [0x36] = ST47 /* \ST47 */
                DerefOf (EWRY [One]) [0x37] = ST48 /* \ST48 */
                DerefOf (EWRY [One]) [0x38] = ST49 /* \ST49 */
                DerefOf (EWRY [One]) [0x39] = ST80 /* \ST80 */
                DerefOf (EWRY [One]) [0x3A] = ST81 /* \ST81 */
                DerefOf (EWRY [One]) [0x3B] = ST82 /* \ST82 */
                DerefOf (EWRY [One]) [0x3C] = ST83 /* \ST83 */
                DerefOf (EWRY [One]) [0x3D] = ST84 /* \ST84 */
                DerefOf (EWRY [One]) [0x3E] = ST85 /* \ST85 */
                DerefOf (EWRY [One]) [0x3F] = ST86 /* \ST86 */
                DerefOf (EWRY [One]) [0x40] = ST87 /* \ST87 */
                DerefOf (EWRY [One]) [0x41] = ST88 /* \ST88 */
                DerefOf (EWRY [One]) [0x42] = ST89 /* \ST89 */
                DerefOf (EWRY [One]) [0x43] = ST8A /* \ST8A */
                DerefOf (EWRY [One]) [0x44] = ST8B /* \ST8B */
                Return (EWRY) /* \_SB_.PC00.RP12.PXSX.EWRY */
            }

            Name (WGDY, Package (0x02)
            {
                0x02, 
                Package (0x1C)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WGDS, 0, Serialized)
            {
                DerefOf (WGDY [One]) [One] = SD11 /* \SD11 */
                DerefOf (WGDY [One]) [0x02] = SD12 /* \SD12 */
                DerefOf (WGDY [One]) [0x03] = SD13 /* \SD13 */
                DerefOf (WGDY [One]) [0x04] = SD14 /* \SD14 */
                DerefOf (WGDY [One]) [0x05] = SD15 /* \SD15 */
                DerefOf (WGDY [One]) [0x06] = SD16 /* \SD16 */
                DerefOf (WGDY [One]) [0x07] = SD17 /* \SD17 */
                DerefOf (WGDY [One]) [0x08] = SD18 /* \SD18 */
                DerefOf (WGDY [One]) [0x09] = SD19 /* \SD19 */
                DerefOf (WGDY [One]) [0x0A] = SD21 /* \SD21 */
                DerefOf (WGDY [One]) [0x0B] = SD22 /* \SD22 */
                DerefOf (WGDY [One]) [0x0C] = SD23 /* \SD23 */
                DerefOf (WGDY [One]) [0x0D] = SD24 /* \SD24 */
                DerefOf (WGDY [One]) [0x0E] = SD25 /* \SD25 */
                DerefOf (WGDY [One]) [0x0F] = SD26 /* \SD26 */
                DerefOf (WGDY [One]) [0x10] = SD27 /* \SD27 */
                DerefOf (WGDY [One]) [0x11] = SD28 /* \SD28 */
                DerefOf (WGDY [One]) [0x12] = SD29 /* \SD29 */
                DerefOf (WGDY [One]) [0x13] = SD31 /* \SD31 */
                DerefOf (WGDY [One]) [0x14] = SD32 /* \SD32 */
                DerefOf (WGDY [One]) [0x15] = SD33 /* \SD33 */
                DerefOf (WGDY [One]) [0x16] = SD34 /* \SD34 */
                DerefOf (WGDY [One]) [0x17] = SD35 /* \SD35 */
                DerefOf (WGDY [One]) [0x18] = SD36 /* \SD36 */
                DerefOf (WGDY [One]) [0x19] = SD37 /* \SD37 */
                DerefOf (WGDY [One]) [0x1A] = SD38 /* \SD38 */
                DerefOf (WGDY [One]) [0x1B] = SD39 /* \SD39 */
                Return (WGDY) /* \_SB_.PC00.RP12.PXSX.WGDY */
            }

            Name (ECKY, Package (0x02)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    Zero
                }
            })
            Method (ECKV, 0, Serialized)
            {
                DerefOf (ECKY [One]) [One] = CECV /* \CECV */
                Return (ECKY) /* \_SB_.PC00.RP12.PXSX.ECKY */
            }

            Name (PPAY, Package (0x02)
            {
                One, 
                Package (0x18)
                {
                    0x07, 
                    Zero, 
                    0x18, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x18, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28
                }
            })
            Method (PPAG, 0, Serialized)
            {
                DerefOf (PPAY [One]) [One] = WAGE /* \WAGE */
                DerefOf (PPAY [One]) [0x02] = AGA1 /* \AGA1 */
                DerefOf (PPAY [One]) [0x03] = AGA2 /* \AGA2 */
                DerefOf (PPAY [One]) [0x04] = AGA3 /* \AGA3 */
                DerefOf (PPAY [One]) [0x05] = AGA4 /* \AGA4 */
                DerefOf (PPAY [One]) [0x06] = AGA5 /* \AGA5 */
                DerefOf (PPAY [One]) [0x07] = AGA6 /* \AGA6 */
                DerefOf (PPAY [One]) [0x08] = AGA7 /* \AGA7 */
                DerefOf (PPAY [One]) [0x09] = AGA8 /* \AGA8 */
                DerefOf (PPAY [One]) [0x0A] = AGA9 /* \AGA9 */
                DerefOf (PPAY [One]) [0x0B] = AGAA /* \AGAA */
                DerefOf (PPAY [One]) [0x0C] = AGAB /* \AGAB */
                DerefOf (PPAY [One]) [0x0D] = AGB1 /* \AGB1 */
                DerefOf (PPAY [One]) [0x0E] = AGB2 /* \AGB2 */
                DerefOf (PPAY [One]) [0x0F] = AGB3 /* \AGB3 */
                DerefOf (PPAY [One]) [0x10] = AGB4 /* \AGB4 */
                DerefOf (PPAY [One]) [0x11] = AGB5 /* \AGB5 */
                DerefOf (PPAY [One]) [0x12] = AGB6 /* \AGB6 */
                DerefOf (PPAY [One]) [0x13] = AGB7 /* \AGB7 */
                DerefOf (PPAY [One]) [0x14] = AGB8 /* \AGB8 */
                DerefOf (PPAY [One]) [0x15] = AGB9 /* \AGB9 */
                DerefOf (PPAY [One]) [0x16] = AGBA /* \AGBA */
                DerefOf (PPAY [One]) [0x17] = AGBB /* \AGBB */
                Return (PPAY) /* \_SB_.PC00.RP12.PXSX.PPAY */
            }

            Name (SADX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    0x80000000
                }, 

                Package (0x02)
                {
                    0x12, 
                    0x80000000
                }
            })
            Method (SADS, 0, Serialized)
            {
                DerefOf (SADX [One]) [One] = ATDV /* \ATDV */
                DerefOf (SADX [0x02]) [One] = ATDV /* \ATDV */
                Return (SADX) /* \_SB_.PC00.RP12.PXSX.SADX */
            }

            Name (GPCX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }, 

                Package (0x02)
                {
                    0x12, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }
            })
            Method (GPC, 0, Serialized)
            {
                Return (GPCX) /* \_SB_.PC00.RP12.PXSX.GPCX */
            }
        }

        If (((WWEN != Zero) && (WWRP == SLOT)))
        {
            Method (SHRF, 0, NotSerialized)
            {
                PSD0 (SLOT)
                SPCO (WCLK, One)
                SGOV (WFCP, PFCP)
                Sleep (TN2B)
                SGOV (WBRS, (~PBRS & One))
                Sleep (TB2R)
                SGOV (PRST, (~WPRP & One))
                L23D ()
            }

            Method (_RST, 0, Serialized)  // _RST: Device Reset
            {
                If ((WWEN == 0x02))
                {
                    Local0 = Acquire (WWMT, 0x03E8)
                    If ((Local0 == Zero))
                    {
                        ADBG ("Start WWAN FLDR")
                        DL23 ()
                        SGOV (WBRS, PBRS)
                        Sleep (TBTG)
                        SHRF ()
                        ADBG ("End WWAN FLDR")
                        Release (WWMT)
                    }
                }
                Else
                {
                    SGOV (WBRS, PBRS)
                    Sleep (0xC8)
                    Notify (PXSX, One) // Device Check
                    SGOV (PRST, (~WPRP & One))
                    SGOV (WBRS, (~PBRS & One))
                    Sleep (0xC8)
                    Local0 = Zero
                    While ((LASX == Zero))
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    Sleep (0x0A)
                    Notify (PXSX, One) // Device Check
                }
            }

            PowerResource (MRST, 0x05, 0x0000)
            {
                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    Return (One)
                }

                Method (_ON, 0, Serialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                {
                }

                Method (_RST, 0, Serialized)  // _RST: Device Reset
                {
                    Local0 = Acquire (WWMT, 0x03E8)
                    If ((Local0 == Zero))
                    {
                        ADBG ("Start WWAN PR _RST")
                        DL23 ()
                        SGOV (WBRS, PBRS)
                        SPCO (WCLK, Zero)
                        Sleep (TB2F)
                        SGOV (WFCP, (~PFCP & One))
                        Sleep (TFDI)
                        SHRF ()
                        Release (WWMT)
                    }
                }
            }
        }

        If ((WIST () || ((WWEN != Zero) && (WWRP == SLOT))))
        {
            PowerResource (DRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    If ((DCAP & 0x10000000))
                    {
                        Local0 = DCTR /* \_SB_.PC00.RP12.PXSX.DCTR */
                        Local0 |= 0x8000
                        DCTR = Local0
                    }
                }
            }

            Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
            {
                If (WIST ())
                {
                    If (CondRefOf (WRST))
                    {
                        Return (Package (0x01)
                        {
                            WRST
                        })
                    }
                }

                If (((WWEN != Zero) && (WWRP == SLOT)))
                {
                    If (CondRefOf (MRST))
                    {
                        Return (Package (0x01)
                        {
                            MRST
                        })
                    }
                }

                Return (Package (0x01)
                {
                    DRST
                })
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (WIST ())
                {
                    If ((Arg0 == ToUUID ("f21202bf-8f78-4dc6-a5b3-1f738e285ade") /* Unknown UUID */))
                    {
                        If ((Arg2 == Zero))
                        {
                            If ((Arg1 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x0F                                             // .
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }
                        }

                        If ((Arg2 == One))
                        {
                            Local0 = ACSD /* \ACSD */
                            Return (Local0)
                        }

                        If ((Arg2 == 0x02))
                        {
                            Local0 = I5BS /* \I5BS */
                            Return (Local0)
                        }

                        If ((Arg2 == 0x03))
                        {
                            Local0 = UHBS /* \UHBS */
                            Return (Local0)
                        }

                        Return (Zero)
                    }
                }

                If (((WWEN != Zero) && (WWRP == SLOT)))
                {
                    If ((Arg0 == ToUUID ("bad01b75-22a8-4f48-8792-bdde9467747d") /* Unknown UUID */))
                    {
                        If ((Arg2 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x09                                             // .
                            })
                        }

                        If ((Arg2 == One)) {}
                        If ((Arg2 == 0x02)) {}
                        If ((Arg2 == 0x03))
                        {
                            If ((WRTO == One)) {}
                            ElseIf ((WRTO == 0x03)) {}
                            Else
                            {
                            }

                            Return (WRTO) /* \WRTO */
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }

    Scope (_SB.PC00.RP13.PXSX)
    {
        OperationRegion (RPXX, SystemMemory, GMIO (^_ADR (), _ADR), 0x10)
        Field (RPXX, AnyAcc, NoLock, Preserve)
        {
            VDID,   32
        }

        OperationRegion (FLDR, SystemMemory, (GMIO (^_ADR (), _ADR) + 0x44), 0x06)
        Field (FLDR, ByteAcc, NoLock, Preserve)
        {
            DCAP,   32, 
            DCTR,   16
        }

        Method (WIST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x095A8086)
                    {
                        Return (One)
                    }
                    Case (0x095B8086)
                    {
                        Return (One)
                    }
                    Case (0x31658086)
                    {
                        Return (One)
                    }
                    Case (0x31668086)
                    {
                        Return (One)
                    }
                    Case (0x08B18086)
                    {
                        Return (One)
                    }
                    Case (0x08B28086)
                    {
                        Return (One)
                    }
                    Case (0x08B38086)
                    {
                        Return (One)
                    }
                    Case (0x08B48086)
                    {
                        Return (One)
                    }
                    Case (0x24F38086)
                    {
                        Return (One)
                    }
                    Case (0x24F48086)
                    {
                        Return (One)
                    }
                    Case (0x24F58086)
                    {
                        Return (One)
                    }
                    Case (0x24F68086)
                    {
                        Return (One)
                    }
                    Case (0x24FD8086)
                    {
                        Return (One)
                    }
                    Case (0x24FB8086)
                    {
                        Return (One)
                    }
                    Case (0x25268086)
                    {
                        Return (One)
                    }
                    Case (0x271B8086)
                    {
                        Return (One)
                    }
                    Case (0x27238086)
                    {
                        Return (One)
                    }
                    Case (0x27258086)
                    {
                        Return (One)
                    }
                    Case (0x885210EC)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (WWST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x73608086)
                    {
                        Return (One)
                    }
                    Case (0x75608086)
                    {
                        Return (One)
                    }
                    Case (0x4D7514C3)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        If (WIST ())
        {
            PowerResource (WRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    If ((DCAP & 0x10000000))
                    {
                        Local0 = DCTR /* \_SB_.PC00.RP13.PXSX.DCTR */
                        Local0 |= 0x8000
                        DCTR = Local0
                    }
                }
            }

            Name (SPLX, Package (0x02)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (SPLC, 0, Serialized)
            {
                DerefOf (SPLX [One]) [Zero] = DOM1 /* \DOM1 */
                DerefOf (SPLX [One]) [One] = LIM1 /* \LIM1 */
                DerefOf (SPLX [One]) [0x02] = TIM1 /* \TIM1 */
                Return (SPLX) /* \_SB_.PC00.RP13.PXSX.SPLX */
            }

            Name (WANX, Package (0x03)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (WAND, 0, Serialized)
            {
                DerefOf (WANX [One]) [Zero] = Zero
                DerefOf (WANX [One]) [One] = TRD0 /* \TRD0 */
                DerefOf (WANX [One]) [0x02] = TRL0 /* \TRL0 */
                DerefOf (WANX [0x02]) [Zero] = One
                DerefOf (WANX [0x02]) [One] = TRD1 /* \TRD1 */
                DerefOf (WANX [0x02]) [0x02] = TRL1 /* \TRL1 */
                Return (WANX) /* \_SB_.PC00.RP13.PXSX.WANX */
            }

            Name (WRDX, Package (0x02)
            {
                Zero, 
                Package (0x02)
                {
                    0x80000000, 
                    0x8000
                }
            })
            Method (WRDD, 0, Serialized)
            {
                DerefOf (WRDX [One]) [Zero] = WDM1 /* \WDM1 */
                DerefOf (WRDX [One]) [One] = CID1 /* \CID1 */
                Return (WRDX) /* \_SB_.PC00.RP13.PXSX.WRDX */
            }

            Name (WRDY, Package (0x02)
            {
                One, 
                Package (0x18)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WRDS, 0, Serialized)
            {
                DerefOf (WRDY [One]) [One] = STXE /* \STXE */
                DerefOf (WRDY [One]) [0x02] = ST10 /* \ST10 */
                DerefOf (WRDY [One]) [0x03] = ST11 /* \ST11 */
                DerefOf (WRDY [One]) [0x04] = ST12 /* \ST12 */
                DerefOf (WRDY [One]) [0x05] = ST13 /* \ST13 */
                DerefOf (WRDY [One]) [0x06] = ST14 /* \ST14 */
                DerefOf (WRDY [One]) [0x07] = ST15 /* \ST15 */
                DerefOf (WRDY [One]) [0x08] = ST16 /* \ST16 */
                DerefOf (WRDY [One]) [0x09] = ST17 /* \ST17 */
                DerefOf (WRDY [One]) [0x0A] = ST18 /* \ST18 */
                DerefOf (WRDY [One]) [0x0B] = ST19 /* \ST19 */
                DerefOf (WRDY [One]) [0x0C] = ST50 /* \ST50 */
                DerefOf (WRDY [One]) [0x0D] = ST51 /* \ST51 */
                DerefOf (WRDY [One]) [0x0E] = ST52 /* \ST52 */
                DerefOf (WRDY [One]) [0x0F] = ST53 /* \ST53 */
                DerefOf (WRDY [One]) [0x10] = ST54 /* \ST54 */
                DerefOf (WRDY [One]) [0x11] = ST55 /* \ST55 */
                DerefOf (WRDY [One]) [0x12] = ST56 /* \ST56 */
                DerefOf (WRDY [One]) [0x13] = ST57 /* \ST57 */
                DerefOf (WRDY [One]) [0x14] = ST58 /* \ST58 */
                DerefOf (WRDY [One]) [0x15] = ST59 /* \ST59 */
                DerefOf (WRDY [One]) [0x16] = ST5A /* \ST5A */
                DerefOf (WRDY [One]) [0x17] = ST5B /* \ST5B */
                Return (WRDY) /* \_SB_.PC00.RP13.PXSX.WRDY */
            }

            Name (EWRY, Package (0x02)
            {
                One, 
                Package (0x45)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (EWRD, 0, Serialized)
            {
                DerefOf (EWRY [One]) [One] = STDE /* \STDE */
                DerefOf (EWRY [One]) [0x02] = STRS /* \STRS */
                DerefOf (EWRY [One]) [0x03] = ST20 /* \ST20 */
                DerefOf (EWRY [One]) [0x04] = ST21 /* \ST21 */
                DerefOf (EWRY [One]) [0x05] = ST22 /* \ST22 */
                DerefOf (EWRY [One]) [0x06] = ST23 /* \ST23 */
                DerefOf (EWRY [One]) [0x07] = ST24 /* \ST24 */
                DerefOf (EWRY [One]) [0x08] = ST25 /* \ST25 */
                DerefOf (EWRY [One]) [0x09] = ST26 /* \ST26 */
                DerefOf (EWRY [One]) [0x0A] = ST27 /* \ST27 */
                DerefOf (EWRY [One]) [0x0B] = ST28 /* \ST28 */
                DerefOf (EWRY [One]) [0x0C] = ST29 /* \ST29 */
                DerefOf (EWRY [One]) [0x0D] = ST60 /* \ST60 */
                DerefOf (EWRY [One]) [0x0E] = ST61 /* \ST61 */
                DerefOf (EWRY [One]) [0x0F] = ST62 /* \ST62 */
                DerefOf (EWRY [One]) [0x10] = ST63 /* \ST63 */
                DerefOf (EWRY [One]) [0x11] = ST64 /* \ST64 */
                DerefOf (EWRY [One]) [0x12] = ST65 /* \ST65 */
                DerefOf (EWRY [One]) [0x13] = ST66 /* \ST66 */
                DerefOf (EWRY [One]) [0x14] = ST67 /* \ST67 */
                DerefOf (EWRY [One]) [0x15] = ST68 /* \ST68 */
                DerefOf (EWRY [One]) [0x16] = ST69 /* \ST69 */
                DerefOf (EWRY [One]) [0x17] = ST6A /* \ST6A */
                DerefOf (EWRY [One]) [0x18] = ST6B /* \ST6B */
                DerefOf (EWRY [One]) [0x19] = ST30 /* \ST30 */
                DerefOf (EWRY [One]) [0x1A] = ST31 /* \ST31 */
                DerefOf (EWRY [One]) [0x1B] = ST32 /* \ST32 */
                DerefOf (EWRY [One]) [0x1C] = ST33 /* \ST33 */
                DerefOf (EWRY [One]) [0x1D] = ST34 /* \ST34 */
                DerefOf (EWRY [One]) [0x1E] = ST35 /* \ST35 */
                DerefOf (EWRY [One]) [0x1F] = ST36 /* \ST36 */
                DerefOf (EWRY [One]) [0x20] = ST37 /* \ST37 */
                DerefOf (EWRY [One]) [0x21] = ST38 /* \ST38 */
                DerefOf (EWRY [One]) [0x22] = ST39 /* \ST39 */
                DerefOf (EWRY [One]) [0x23] = ST70 /* \ST70 */
                DerefOf (EWRY [One]) [0x24] = ST71 /* \ST71 */
                DerefOf (EWRY [One]) [0x25] = ST72 /* \ST72 */
                DerefOf (EWRY [One]) [0x26] = ST73 /* \ST73 */
                DerefOf (EWRY [One]) [0x27] = ST74 /* \ST74 */
                DerefOf (EWRY [One]) [0x28] = ST75 /* \ST75 */
                DerefOf (EWRY [One]) [0x29] = ST76 /* \ST76 */
                DerefOf (EWRY [One]) [0x2A] = ST77 /* \ST77 */
                DerefOf (EWRY [One]) [0x2B] = ST78 /* \ST78 */
                DerefOf (EWRY [One]) [0x2C] = ST79 /* \ST79 */
                DerefOf (EWRY [One]) [0x2D] = ST7A /* \ST7A */
                DerefOf (EWRY [One]) [0x2E] = ST7B /* \ST7B */
                DerefOf (EWRY [One]) [0x2F] = ST40 /* \ST40 */
                DerefOf (EWRY [One]) [0x30] = ST41 /* \ST41 */
                DerefOf (EWRY [One]) [0x31] = ST42 /* \ST42 */
                DerefOf (EWRY [One]) [0x32] = ST43 /* \ST43 */
                DerefOf (EWRY [One]) [0x33] = ST44 /* \ST44 */
                DerefOf (EWRY [One]) [0x34] = ST45 /* \ST45 */
                DerefOf (EWRY [One]) [0x35] = ST46 /* \ST46 */
                DerefOf (EWRY [One]) [0x36] = ST47 /* \ST47 */
                DerefOf (EWRY [One]) [0x37] = ST48 /* \ST48 */
                DerefOf (EWRY [One]) [0x38] = ST49 /* \ST49 */
                DerefOf (EWRY [One]) [0x39] = ST80 /* \ST80 */
                DerefOf (EWRY [One]) [0x3A] = ST81 /* \ST81 */
                DerefOf (EWRY [One]) [0x3B] = ST82 /* \ST82 */
                DerefOf (EWRY [One]) [0x3C] = ST83 /* \ST83 */
                DerefOf (EWRY [One]) [0x3D] = ST84 /* \ST84 */
                DerefOf (EWRY [One]) [0x3E] = ST85 /* \ST85 */
                DerefOf (EWRY [One]) [0x3F] = ST86 /* \ST86 */
                DerefOf (EWRY [One]) [0x40] = ST87 /* \ST87 */
                DerefOf (EWRY [One]) [0x41] = ST88 /* \ST88 */
                DerefOf (EWRY [One]) [0x42] = ST89 /* \ST89 */
                DerefOf (EWRY [One]) [0x43] = ST8A /* \ST8A */
                DerefOf (EWRY [One]) [0x44] = ST8B /* \ST8B */
                Return (EWRY) /* \_SB_.PC00.RP13.PXSX.EWRY */
            }

            Name (WGDY, Package (0x02)
            {
                0x02, 
                Package (0x1C)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WGDS, 0, Serialized)
            {
                DerefOf (WGDY [One]) [One] = SD11 /* \SD11 */
                DerefOf (WGDY [One]) [0x02] = SD12 /* \SD12 */
                DerefOf (WGDY [One]) [0x03] = SD13 /* \SD13 */
                DerefOf (WGDY [One]) [0x04] = SD14 /* \SD14 */
                DerefOf (WGDY [One]) [0x05] = SD15 /* \SD15 */
                DerefOf (WGDY [One]) [0x06] = SD16 /* \SD16 */
                DerefOf (WGDY [One]) [0x07] = SD17 /* \SD17 */
                DerefOf (WGDY [One]) [0x08] = SD18 /* \SD18 */
                DerefOf (WGDY [One]) [0x09] = SD19 /* \SD19 */
                DerefOf (WGDY [One]) [0x0A] = SD21 /* \SD21 */
                DerefOf (WGDY [One]) [0x0B] = SD22 /* \SD22 */
                DerefOf (WGDY [One]) [0x0C] = SD23 /* \SD23 */
                DerefOf (WGDY [One]) [0x0D] = SD24 /* \SD24 */
                DerefOf (WGDY [One]) [0x0E] = SD25 /* \SD25 */
                DerefOf (WGDY [One]) [0x0F] = SD26 /* \SD26 */
                DerefOf (WGDY [One]) [0x10] = SD27 /* \SD27 */
                DerefOf (WGDY [One]) [0x11] = SD28 /* \SD28 */
                DerefOf (WGDY [One]) [0x12] = SD29 /* \SD29 */
                DerefOf (WGDY [One]) [0x13] = SD31 /* \SD31 */
                DerefOf (WGDY [One]) [0x14] = SD32 /* \SD32 */
                DerefOf (WGDY [One]) [0x15] = SD33 /* \SD33 */
                DerefOf (WGDY [One]) [0x16] = SD34 /* \SD34 */
                DerefOf (WGDY [One]) [0x17] = SD35 /* \SD35 */
                DerefOf (WGDY [One]) [0x18] = SD36 /* \SD36 */
                DerefOf (WGDY [One]) [0x19] = SD37 /* \SD37 */
                DerefOf (WGDY [One]) [0x1A] = SD38 /* \SD38 */
                DerefOf (WGDY [One]) [0x1B] = SD39 /* \SD39 */
                Return (WGDY) /* \_SB_.PC00.RP13.PXSX.WGDY */
            }

            Name (ECKY, Package (0x02)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    Zero
                }
            })
            Method (ECKV, 0, Serialized)
            {
                DerefOf (ECKY [One]) [One] = CECV /* \CECV */
                Return (ECKY) /* \_SB_.PC00.RP13.PXSX.ECKY */
            }

            Name (PPAY, Package (0x02)
            {
                One, 
                Package (0x18)
                {
                    0x07, 
                    Zero, 
                    0x18, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x18, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28
                }
            })
            Method (PPAG, 0, Serialized)
            {
                DerefOf (PPAY [One]) [One] = WAGE /* \WAGE */
                DerefOf (PPAY [One]) [0x02] = AGA1 /* \AGA1 */
                DerefOf (PPAY [One]) [0x03] = AGA2 /* \AGA2 */
                DerefOf (PPAY [One]) [0x04] = AGA3 /* \AGA3 */
                DerefOf (PPAY [One]) [0x05] = AGA4 /* \AGA4 */
                DerefOf (PPAY [One]) [0x06] = AGA5 /* \AGA5 */
                DerefOf (PPAY [One]) [0x07] = AGA6 /* \AGA6 */
                DerefOf (PPAY [One]) [0x08] = AGA7 /* \AGA7 */
                DerefOf (PPAY [One]) [0x09] = AGA8 /* \AGA8 */
                DerefOf (PPAY [One]) [0x0A] = AGA9 /* \AGA9 */
                DerefOf (PPAY [One]) [0x0B] = AGAA /* \AGAA */
                DerefOf (PPAY [One]) [0x0C] = AGAB /* \AGAB */
                DerefOf (PPAY [One]) [0x0D] = AGB1 /* \AGB1 */
                DerefOf (PPAY [One]) [0x0E] = AGB2 /* \AGB2 */
                DerefOf (PPAY [One]) [0x0F] = AGB3 /* \AGB3 */
                DerefOf (PPAY [One]) [0x10] = AGB4 /* \AGB4 */
                DerefOf (PPAY [One]) [0x11] = AGB5 /* \AGB5 */
                DerefOf (PPAY [One]) [0x12] = AGB6 /* \AGB6 */
                DerefOf (PPAY [One]) [0x13] = AGB7 /* \AGB7 */
                DerefOf (PPAY [One]) [0x14] = AGB8 /* \AGB8 */
                DerefOf (PPAY [One]) [0x15] = AGB9 /* \AGB9 */
                DerefOf (PPAY [One]) [0x16] = AGBA /* \AGBA */
                DerefOf (PPAY [One]) [0x17] = AGBB /* \AGBB */
                Return (PPAY) /* \_SB_.PC00.RP13.PXSX.PPAY */
            }

            Name (SADX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    0x80000000
                }, 

                Package (0x02)
                {
                    0x12, 
                    0x80000000
                }
            })
            Method (SADS, 0, Serialized)
            {
                DerefOf (SADX [One]) [One] = ATDV /* \ATDV */
                DerefOf (SADX [0x02]) [One] = ATDV /* \ATDV */
                Return (SADX) /* \_SB_.PC00.RP13.PXSX.SADX */
            }

            Name (GPCX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }, 

                Package (0x02)
                {
                    0x12, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }
            })
            Method (GPC, 0, Serialized)
            {
                Return (GPCX) /* \_SB_.PC00.RP13.PXSX.GPCX */
            }
        }

        If (((WWEN != Zero) && (WWRP == SLOT)))
        {
            Method (SHRF, 0, NotSerialized)
            {
                PSD0 (SLOT)
                SPCO (WCLK, One)
                SGOV (WFCP, PFCP)
                Sleep (TN2B)
                SGOV (WBRS, (~PBRS & One))
                Sleep (TB2R)
                SGOV (PRST, (~WPRP & One))
                L23D ()
            }

            Method (_RST, 0, Serialized)  // _RST: Device Reset
            {
                If ((WWEN == 0x02))
                {
                    Local0 = Acquire (WWMT, 0x03E8)
                    If ((Local0 == Zero))
                    {
                        ADBG ("Start WWAN FLDR")
                        DL23 ()
                        SGOV (WBRS, PBRS)
                        Sleep (TBTG)
                        SHRF ()
                        ADBG ("End WWAN FLDR")
                        Release (WWMT)
                    }
                }
                Else
                {
                    SGOV (WBRS, PBRS)
                    Sleep (0xC8)
                    Notify (PXSX, One) // Device Check
                    SGOV (PRST, (~WPRP & One))
                    SGOV (WBRS, (~PBRS & One))
                    Sleep (0xC8)
                    Local0 = Zero
                    While ((LASX == Zero))
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    Sleep (0x0A)
                    Notify (PXSX, One) // Device Check
                }
            }

            PowerResource (MRST, 0x05, 0x0000)
            {
                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    Return (One)
                }

                Method (_ON, 0, Serialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                {
                }

                Method (_RST, 0, Serialized)  // _RST: Device Reset
                {
                    Local0 = Acquire (WWMT, 0x03E8)
                    If ((Local0 == Zero))
                    {
                        ADBG ("Start WWAN PR _RST")
                        DL23 ()
                        SGOV (WBRS, PBRS)
                        SPCO (WCLK, Zero)
                        Sleep (TB2F)
                        SGOV (WFCP, (~PFCP & One))
                        Sleep (TFDI)
                        SHRF ()
                        Release (WWMT)
                    }
                }
            }
        }

        If ((WIST () || ((WWEN != Zero) && (WWRP == SLOT))))
        {
            PowerResource (DRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    If ((DCAP & 0x10000000))
                    {
                        Local0 = DCTR /* \_SB_.PC00.RP13.PXSX.DCTR */
                        Local0 |= 0x8000
                        DCTR = Local0
                    }
                }
            }

            Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
            {
                If (WIST ())
                {
                    If (CondRefOf (WRST))
                    {
                        Return (Package (0x01)
                        {
                            WRST
                        })
                    }
                }

                If (((WWEN != Zero) && (WWRP == SLOT)))
                {
                    If (CondRefOf (MRST))
                    {
                        Return (Package (0x01)
                        {
                            MRST
                        })
                    }
                }

                Return (Package (0x01)
                {
                    DRST
                })
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (WIST ())
                {
                    If ((Arg0 == ToUUID ("f21202bf-8f78-4dc6-a5b3-1f738e285ade") /* Unknown UUID */))
                    {
                        If ((Arg2 == Zero))
                        {
                            If ((Arg1 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x0F                                             // .
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }
                        }

                        If ((Arg2 == One))
                        {
                            Local0 = ACSD /* \ACSD */
                            Return (Local0)
                        }

                        If ((Arg2 == 0x02))
                        {
                            Local0 = I5BS /* \I5BS */
                            Return (Local0)
                        }

                        If ((Arg2 == 0x03))
                        {
                            Local0 = UHBS /* \UHBS */
                            Return (Local0)
                        }

                        Return (Zero)
                    }
                }

                If (((WWEN != Zero) && (WWRP == SLOT)))
                {
                    If ((Arg0 == ToUUID ("bad01b75-22a8-4f48-8792-bdde9467747d") /* Unknown UUID */))
                    {
                        If ((Arg2 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x09                                             // .
                            })
                        }

                        If ((Arg2 == One)) {}
                        If ((Arg2 == 0x02)) {}
                        If ((Arg2 == 0x03))
                        {
                            If ((WRTO == One)) {}
                            ElseIf ((WRTO == 0x03)) {}
                            Else
                            {
                            }

                            Return (WRTO) /* \WRTO */
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }

    Scope (_SB.PC00.RP14.PXSX)
    {
        OperationRegion (RPXX, SystemMemory, GMIO (^_ADR (), _ADR), 0x10)
        Field (RPXX, AnyAcc, NoLock, Preserve)
        {
            VDID,   32
        }

        OperationRegion (FLDR, SystemMemory, (GMIO (^_ADR (), _ADR) + 0x44), 0x06)
        Field (FLDR, ByteAcc, NoLock, Preserve)
        {
            DCAP,   32, 
            DCTR,   16
        }

        Method (WIST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x095A8086)
                    {
                        Return (One)
                    }
                    Case (0x095B8086)
                    {
                        Return (One)
                    }
                    Case (0x31658086)
                    {
                        Return (One)
                    }
                    Case (0x31668086)
                    {
                        Return (One)
                    }
                    Case (0x08B18086)
                    {
                        Return (One)
                    }
                    Case (0x08B28086)
                    {
                        Return (One)
                    }
                    Case (0x08B38086)
                    {
                        Return (One)
                    }
                    Case (0x08B48086)
                    {
                        Return (One)
                    }
                    Case (0x24F38086)
                    {
                        Return (One)
                    }
                    Case (0x24F48086)
                    {
                        Return (One)
                    }
                    Case (0x24F58086)
                    {
                        Return (One)
                    }
                    Case (0x24F68086)
                    {
                        Return (One)
                    }
                    Case (0x24FD8086)
                    {
                        Return (One)
                    }
                    Case (0x24FB8086)
                    {
                        Return (One)
                    }
                    Case (0x25268086)
                    {
                        Return (One)
                    }
                    Case (0x271B8086)
                    {
                        Return (One)
                    }
                    Case (0x27238086)
                    {
                        Return (One)
                    }
                    Case (0x27258086)
                    {
                        Return (One)
                    }
                    Case (0x885210EC)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (WWST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x73608086)
                    {
                        Return (One)
                    }
                    Case (0x75608086)
                    {
                        Return (One)
                    }
                    Case (0x4D7514C3)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        If (WIST ())
        {
            PowerResource (WRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    If ((DCAP & 0x10000000))
                    {
                        Local0 = DCTR /* \_SB_.PC00.RP14.PXSX.DCTR */
                        Local0 |= 0x8000
                        DCTR = Local0
                    }
                }
            }

            Name (SPLX, Package (0x02)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (SPLC, 0, Serialized)
            {
                DerefOf (SPLX [One]) [Zero] = DOM1 /* \DOM1 */
                DerefOf (SPLX [One]) [One] = LIM1 /* \LIM1 */
                DerefOf (SPLX [One]) [0x02] = TIM1 /* \TIM1 */
                Return (SPLX) /* \_SB_.PC00.RP14.PXSX.SPLX */
            }

            Name (WANX, Package (0x03)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (WAND, 0, Serialized)
            {
                DerefOf (WANX [One]) [Zero] = Zero
                DerefOf (WANX [One]) [One] = TRD0 /* \TRD0 */
                DerefOf (WANX [One]) [0x02] = TRL0 /* \TRL0 */
                DerefOf (WANX [0x02]) [Zero] = One
                DerefOf (WANX [0x02]) [One] = TRD1 /* \TRD1 */
                DerefOf (WANX [0x02]) [0x02] = TRL1 /* \TRL1 */
                Return (WANX) /* \_SB_.PC00.RP14.PXSX.WANX */
            }

            Name (WRDX, Package (0x02)
            {
                Zero, 
                Package (0x02)
                {
                    0x80000000, 
                    0x8000
                }
            })
            Method (WRDD, 0, Serialized)
            {
                DerefOf (WRDX [One]) [Zero] = WDM1 /* \WDM1 */
                DerefOf (WRDX [One]) [One] = CID1 /* \CID1 */
                Return (WRDX) /* \_SB_.PC00.RP14.PXSX.WRDX */
            }

            Name (WRDY, Package (0x02)
            {
                One, 
                Package (0x18)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WRDS, 0, Serialized)
            {
                DerefOf (WRDY [One]) [One] = STXE /* \STXE */
                DerefOf (WRDY [One]) [0x02] = ST10 /* \ST10 */
                DerefOf (WRDY [One]) [0x03] = ST11 /* \ST11 */
                DerefOf (WRDY [One]) [0x04] = ST12 /* \ST12 */
                DerefOf (WRDY [One]) [0x05] = ST13 /* \ST13 */
                DerefOf (WRDY [One]) [0x06] = ST14 /* \ST14 */
                DerefOf (WRDY [One]) [0x07] = ST15 /* \ST15 */
                DerefOf (WRDY [One]) [0x08] = ST16 /* \ST16 */
                DerefOf (WRDY [One]) [0x09] = ST17 /* \ST17 */
                DerefOf (WRDY [One]) [0x0A] = ST18 /* \ST18 */
                DerefOf (WRDY [One]) [0x0B] = ST19 /* \ST19 */
                DerefOf (WRDY [One]) [0x0C] = ST50 /* \ST50 */
                DerefOf (WRDY [One]) [0x0D] = ST51 /* \ST51 */
                DerefOf (WRDY [One]) [0x0E] = ST52 /* \ST52 */
                DerefOf (WRDY [One]) [0x0F] = ST53 /* \ST53 */
                DerefOf (WRDY [One]) [0x10] = ST54 /* \ST54 */
                DerefOf (WRDY [One]) [0x11] = ST55 /* \ST55 */
                DerefOf (WRDY [One]) [0x12] = ST56 /* \ST56 */
                DerefOf (WRDY [One]) [0x13] = ST57 /* \ST57 */
                DerefOf (WRDY [One]) [0x14] = ST58 /* \ST58 */
                DerefOf (WRDY [One]) [0x15] = ST59 /* \ST59 */
                DerefOf (WRDY [One]) [0x16] = ST5A /* \ST5A */
                DerefOf (WRDY [One]) [0x17] = ST5B /* \ST5B */
                Return (WRDY) /* \_SB_.PC00.RP14.PXSX.WRDY */
            }

            Name (EWRY, Package (0x02)
            {
                One, 
                Package (0x45)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (EWRD, 0, Serialized)
            {
                DerefOf (EWRY [One]) [One] = STDE /* \STDE */
                DerefOf (EWRY [One]) [0x02] = STRS /* \STRS */
                DerefOf (EWRY [One]) [0x03] = ST20 /* \ST20 */
                DerefOf (EWRY [One]) [0x04] = ST21 /* \ST21 */
                DerefOf (EWRY [One]) [0x05] = ST22 /* \ST22 */
                DerefOf (EWRY [One]) [0x06] = ST23 /* \ST23 */
                DerefOf (EWRY [One]) [0x07] = ST24 /* \ST24 */
                DerefOf (EWRY [One]) [0x08] = ST25 /* \ST25 */
                DerefOf (EWRY [One]) [0x09] = ST26 /* \ST26 */
                DerefOf (EWRY [One]) [0x0A] = ST27 /* \ST27 */
                DerefOf (EWRY [One]) [0x0B] = ST28 /* \ST28 */
                DerefOf (EWRY [One]) [0x0C] = ST29 /* \ST29 */
                DerefOf (EWRY [One]) [0x0D] = ST60 /* \ST60 */
                DerefOf (EWRY [One]) [0x0E] = ST61 /* \ST61 */
                DerefOf (EWRY [One]) [0x0F] = ST62 /* \ST62 */
                DerefOf (EWRY [One]) [0x10] = ST63 /* \ST63 */
                DerefOf (EWRY [One]) [0x11] = ST64 /* \ST64 */
                DerefOf (EWRY [One]) [0x12] = ST65 /* \ST65 */
                DerefOf (EWRY [One]) [0x13] = ST66 /* \ST66 */
                DerefOf (EWRY [One]) [0x14] = ST67 /* \ST67 */
                DerefOf (EWRY [One]) [0x15] = ST68 /* \ST68 */
                DerefOf (EWRY [One]) [0x16] = ST69 /* \ST69 */
                DerefOf (EWRY [One]) [0x17] = ST6A /* \ST6A */
                DerefOf (EWRY [One]) [0x18] = ST6B /* \ST6B */
                DerefOf (EWRY [One]) [0x19] = ST30 /* \ST30 */
                DerefOf (EWRY [One]) [0x1A] = ST31 /* \ST31 */
                DerefOf (EWRY [One]) [0x1B] = ST32 /* \ST32 */
                DerefOf (EWRY [One]) [0x1C] = ST33 /* \ST33 */
                DerefOf (EWRY [One]) [0x1D] = ST34 /* \ST34 */
                DerefOf (EWRY [One]) [0x1E] = ST35 /* \ST35 */
                DerefOf (EWRY [One]) [0x1F] = ST36 /* \ST36 */
                DerefOf (EWRY [One]) [0x20] = ST37 /* \ST37 */
                DerefOf (EWRY [One]) [0x21] = ST38 /* \ST38 */
                DerefOf (EWRY [One]) [0x22] = ST39 /* \ST39 */
                DerefOf (EWRY [One]) [0x23] = ST70 /* \ST70 */
                DerefOf (EWRY [One]) [0x24] = ST71 /* \ST71 */
                DerefOf (EWRY [One]) [0x25] = ST72 /* \ST72 */
                DerefOf (EWRY [One]) [0x26] = ST73 /* \ST73 */
                DerefOf (EWRY [One]) [0x27] = ST74 /* \ST74 */
                DerefOf (EWRY [One]) [0x28] = ST75 /* \ST75 */
                DerefOf (EWRY [One]) [0x29] = ST76 /* \ST76 */
                DerefOf (EWRY [One]) [0x2A] = ST77 /* \ST77 */
                DerefOf (EWRY [One]) [0x2B] = ST78 /* \ST78 */
                DerefOf (EWRY [One]) [0x2C] = ST79 /* \ST79 */
                DerefOf (EWRY [One]) [0x2D] = ST7A /* \ST7A */
                DerefOf (EWRY [One]) [0x2E] = ST7B /* \ST7B */
                DerefOf (EWRY [One]) [0x2F] = ST40 /* \ST40 */
                DerefOf (EWRY [One]) [0x30] = ST41 /* \ST41 */
                DerefOf (EWRY [One]) [0x31] = ST42 /* \ST42 */
                DerefOf (EWRY [One]) [0x32] = ST43 /* \ST43 */
                DerefOf (EWRY [One]) [0x33] = ST44 /* \ST44 */
                DerefOf (EWRY [One]) [0x34] = ST45 /* \ST45 */
                DerefOf (EWRY [One]) [0x35] = ST46 /* \ST46 */
                DerefOf (EWRY [One]) [0x36] = ST47 /* \ST47 */
                DerefOf (EWRY [One]) [0x37] = ST48 /* \ST48 */
                DerefOf (EWRY [One]) [0x38] = ST49 /* \ST49 */
                DerefOf (EWRY [One]) [0x39] = ST80 /* \ST80 */
                DerefOf (EWRY [One]) [0x3A] = ST81 /* \ST81 */
                DerefOf (EWRY [One]) [0x3B] = ST82 /* \ST82 */
                DerefOf (EWRY [One]) [0x3C] = ST83 /* \ST83 */
                DerefOf (EWRY [One]) [0x3D] = ST84 /* \ST84 */
                DerefOf (EWRY [One]) [0x3E] = ST85 /* \ST85 */
                DerefOf (EWRY [One]) [0x3F] = ST86 /* \ST86 */
                DerefOf (EWRY [One]) [0x40] = ST87 /* \ST87 */
                DerefOf (EWRY [One]) [0x41] = ST88 /* \ST88 */
                DerefOf (EWRY [One]) [0x42] = ST89 /* \ST89 */
                DerefOf (EWRY [One]) [0x43] = ST8A /* \ST8A */
                DerefOf (EWRY [One]) [0x44] = ST8B /* \ST8B */
                Return (EWRY) /* \_SB_.PC00.RP14.PXSX.EWRY */
            }

            Name (WGDY, Package (0x02)
            {
                0x02, 
                Package (0x1C)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WGDS, 0, Serialized)
            {
                DerefOf (WGDY [One]) [One] = SD11 /* \SD11 */
                DerefOf (WGDY [One]) [0x02] = SD12 /* \SD12 */
                DerefOf (WGDY [One]) [0x03] = SD13 /* \SD13 */
                DerefOf (WGDY [One]) [0x04] = SD14 /* \SD14 */
                DerefOf (WGDY [One]) [0x05] = SD15 /* \SD15 */
                DerefOf (WGDY [One]) [0x06] = SD16 /* \SD16 */
                DerefOf (WGDY [One]) [0x07] = SD17 /* \SD17 */
                DerefOf (WGDY [One]) [0x08] = SD18 /* \SD18 */
                DerefOf (WGDY [One]) [0x09] = SD19 /* \SD19 */
                DerefOf (WGDY [One]) [0x0A] = SD21 /* \SD21 */
                DerefOf (WGDY [One]) [0x0B] = SD22 /* \SD22 */
                DerefOf (WGDY [One]) [0x0C] = SD23 /* \SD23 */
                DerefOf (WGDY [One]) [0x0D] = SD24 /* \SD24 */
                DerefOf (WGDY [One]) [0x0E] = SD25 /* \SD25 */
                DerefOf (WGDY [One]) [0x0F] = SD26 /* \SD26 */
                DerefOf (WGDY [One]) [0x10] = SD27 /* \SD27 */
                DerefOf (WGDY [One]) [0x11] = SD28 /* \SD28 */
                DerefOf (WGDY [One]) [0x12] = SD29 /* \SD29 */
                DerefOf (WGDY [One]) [0x13] = SD31 /* \SD31 */
                DerefOf (WGDY [One]) [0x14] = SD32 /* \SD32 */
                DerefOf (WGDY [One]) [0x15] = SD33 /* \SD33 */
                DerefOf (WGDY [One]) [0x16] = SD34 /* \SD34 */
                DerefOf (WGDY [One]) [0x17] = SD35 /* \SD35 */
                DerefOf (WGDY [One]) [0x18] = SD36 /* \SD36 */
                DerefOf (WGDY [One]) [0x19] = SD37 /* \SD37 */
                DerefOf (WGDY [One]) [0x1A] = SD38 /* \SD38 */
                DerefOf (WGDY [One]) [0x1B] = SD39 /* \SD39 */
                Return (WGDY) /* \_SB_.PC00.RP14.PXSX.WGDY */
            }

            Name (ECKY, Package (0x02)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    Zero
                }
            })
            Method (ECKV, 0, Serialized)
            {
                DerefOf (ECKY [One]) [One] = CECV /* \CECV */
                Return (ECKY) /* \_SB_.PC00.RP14.PXSX.ECKY */
            }

            Name (PPAY, Package (0x02)
            {
                One, 
                Package (0x18)
                {
                    0x07, 
                    Zero, 
                    0x18, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x18, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28
                }
            })
            Method (PPAG, 0, Serialized)
            {
                DerefOf (PPAY [One]) [One] = WAGE /* \WAGE */
                DerefOf (PPAY [One]) [0x02] = AGA1 /* \AGA1 */
                DerefOf (PPAY [One]) [0x03] = AGA2 /* \AGA2 */
                DerefOf (PPAY [One]) [0x04] = AGA3 /* \AGA3 */
                DerefOf (PPAY [One]) [0x05] = AGA4 /* \AGA4 */
                DerefOf (PPAY [One]) [0x06] = AGA5 /* \AGA5 */
                DerefOf (PPAY [One]) [0x07] = AGA6 /* \AGA6 */
                DerefOf (PPAY [One]) [0x08] = AGA7 /* \AGA7 */
                DerefOf (PPAY [One]) [0x09] = AGA8 /* \AGA8 */
                DerefOf (PPAY [One]) [0x0A] = AGA9 /* \AGA9 */
                DerefOf (PPAY [One]) [0x0B] = AGAA /* \AGAA */
                DerefOf (PPAY [One]) [0x0C] = AGAB /* \AGAB */
                DerefOf (PPAY [One]) [0x0D] = AGB1 /* \AGB1 */
                DerefOf (PPAY [One]) [0x0E] = AGB2 /* \AGB2 */
                DerefOf (PPAY [One]) [0x0F] = AGB3 /* \AGB3 */
                DerefOf (PPAY [One]) [0x10] = AGB4 /* \AGB4 */
                DerefOf (PPAY [One]) [0x11] = AGB5 /* \AGB5 */
                DerefOf (PPAY [One]) [0x12] = AGB6 /* \AGB6 */
                DerefOf (PPAY [One]) [0x13] = AGB7 /* \AGB7 */
                DerefOf (PPAY [One]) [0x14] = AGB8 /* \AGB8 */
                DerefOf (PPAY [One]) [0x15] = AGB9 /* \AGB9 */
                DerefOf (PPAY [One]) [0x16] = AGBA /* \AGBA */
                DerefOf (PPAY [One]) [0x17] = AGBB /* \AGBB */
                Return (PPAY) /* \_SB_.PC00.RP14.PXSX.PPAY */
            }

            Name (SADX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    0x80000000
                }, 

                Package (0x02)
                {
                    0x12, 
                    0x80000000
                }
            })
            Method (SADS, 0, Serialized)
            {
                DerefOf (SADX [One]) [One] = ATDV /* \ATDV */
                DerefOf (SADX [0x02]) [One] = ATDV /* \ATDV */
                Return (SADX) /* \_SB_.PC00.RP14.PXSX.SADX */
            }

            Name (GPCX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }, 

                Package (0x02)
                {
                    0x12, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }
            })
            Method (GPC, 0, Serialized)
            {
                Return (GPCX) /* \_SB_.PC00.RP14.PXSX.GPCX */
            }
        }

        If (((WWEN != Zero) && (WWRP == SLOT)))
        {
            Method (SHRF, 0, NotSerialized)
            {
                PSD0 (SLOT)
                SPCO (WCLK, One)
                SGOV (WFCP, PFCP)
                Sleep (TN2B)
                SGOV (WBRS, (~PBRS & One))
                Sleep (TB2R)
                SGOV (PRST, (~WPRP & One))
                L23D ()
            }

            Method (_RST, 0, Serialized)  // _RST: Device Reset
            {
                If ((WWEN == 0x02))
                {
                    Local0 = Acquire (WWMT, 0x03E8)
                    If ((Local0 == Zero))
                    {
                        ADBG ("Start WWAN FLDR")
                        DL23 ()
                        SGOV (WBRS, PBRS)
                        Sleep (TBTG)
                        SHRF ()
                        ADBG ("End WWAN FLDR")
                        Release (WWMT)
                    }
                }
                Else
                {
                    SGOV (WBRS, PBRS)
                    Sleep (0xC8)
                    Notify (PXSX, One) // Device Check
                    SGOV (PRST, (~WPRP & One))
                    SGOV (WBRS, (~PBRS & One))
                    Sleep (0xC8)
                    Local0 = Zero
                    While ((LASX == Zero))
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    Sleep (0x0A)
                    Notify (PXSX, One) // Device Check
                }
            }

            PowerResource (MRST, 0x05, 0x0000)
            {
                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    Return (One)
                }

                Method (_ON, 0, Serialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                {
                }

                Method (_RST, 0, Serialized)  // _RST: Device Reset
                {
                    Local0 = Acquire (WWMT, 0x03E8)
                    If ((Local0 == Zero))
                    {
                        ADBG ("Start WWAN PR _RST")
                        DL23 ()
                        SGOV (WBRS, PBRS)
                        SPCO (WCLK, Zero)
                        Sleep (TB2F)
                        SGOV (WFCP, (~PFCP & One))
                        Sleep (TFDI)
                        SHRF ()
                        Release (WWMT)
                    }
                }
            }
        }

        If ((WIST () || ((WWEN != Zero) && (WWRP == SLOT))))
        {
            PowerResource (DRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    If ((DCAP & 0x10000000))
                    {
                        Local0 = DCTR /* \_SB_.PC00.RP14.PXSX.DCTR */
                        Local0 |= 0x8000
                        DCTR = Local0
                    }
                }
            }

            Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
            {
                If (WIST ())
                {
                    If (CondRefOf (WRST))
                    {
                        Return (Package (0x01)
                        {
                            WRST
                        })
                    }
                }

                If (((WWEN != Zero) && (WWRP == SLOT)))
                {
                    If (CondRefOf (MRST))
                    {
                        Return (Package (0x01)
                        {
                            MRST
                        })
                    }
                }

                Return (Package (0x01)
                {
                    DRST
                })
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (WIST ())
                {
                    If ((Arg0 == ToUUID ("f21202bf-8f78-4dc6-a5b3-1f738e285ade") /* Unknown UUID */))
                    {
                        If ((Arg2 == Zero))
                        {
                            If ((Arg1 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x0F                                             // .
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }
                        }

                        If ((Arg2 == One))
                        {
                            Local0 = ACSD /* \ACSD */
                            Return (Local0)
                        }

                        If ((Arg2 == 0x02))
                        {
                            Local0 = I5BS /* \I5BS */
                            Return (Local0)
                        }

                        If ((Arg2 == 0x03))
                        {
                            Local0 = UHBS /* \UHBS */
                            Return (Local0)
                        }

                        Return (Zero)
                    }
                }

                If (((WWEN != Zero) && (WWRP == SLOT)))
                {
                    If ((Arg0 == ToUUID ("bad01b75-22a8-4f48-8792-bdde9467747d") /* Unknown UUID */))
                    {
                        If ((Arg2 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x09                                             // .
                            })
                        }

                        If ((Arg2 == One)) {}
                        If ((Arg2 == 0x02)) {}
                        If ((Arg2 == 0x03))
                        {
                            If ((WRTO == One)) {}
                            ElseIf ((WRTO == 0x03)) {}
                            Else
                            {
                            }

                            Return (WRTO) /* \WRTO */
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }

    Scope (_SB.PC00.RP15.PXSX)
    {
        OperationRegion (RPXX, SystemMemory, GMIO (^_ADR (), _ADR), 0x10)
        Field (RPXX, AnyAcc, NoLock, Preserve)
        {
            VDID,   32
        }

        OperationRegion (FLDR, SystemMemory, (GMIO (^_ADR (), _ADR) + 0x44), 0x06)
        Field (FLDR, ByteAcc, NoLock, Preserve)
        {
            DCAP,   32, 
            DCTR,   16
        }

        Method (WIST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x095A8086)
                    {
                        Return (One)
                    }
                    Case (0x095B8086)
                    {
                        Return (One)
                    }
                    Case (0x31658086)
                    {
                        Return (One)
                    }
                    Case (0x31668086)
                    {
                        Return (One)
                    }
                    Case (0x08B18086)
                    {
                        Return (One)
                    }
                    Case (0x08B28086)
                    {
                        Return (One)
                    }
                    Case (0x08B38086)
                    {
                        Return (One)
                    }
                    Case (0x08B48086)
                    {
                        Return (One)
                    }
                    Case (0x24F38086)
                    {
                        Return (One)
                    }
                    Case (0x24F48086)
                    {
                        Return (One)
                    }
                    Case (0x24F58086)
                    {
                        Return (One)
                    }
                    Case (0x24F68086)
                    {
                        Return (One)
                    }
                    Case (0x24FD8086)
                    {
                        Return (One)
                    }
                    Case (0x24FB8086)
                    {
                        Return (One)
                    }
                    Case (0x25268086)
                    {
                        Return (One)
                    }
                    Case (0x271B8086)
                    {
                        Return (One)
                    }
                    Case (0x27238086)
                    {
                        Return (One)
                    }
                    Case (0x27258086)
                    {
                        Return (One)
                    }
                    Case (0x885210EC)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (WWST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x73608086)
                    {
                        Return (One)
                    }
                    Case (0x75608086)
                    {
                        Return (One)
                    }
                    Case (0x4D7514C3)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        If (WIST ())
        {
            PowerResource (WRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    If ((DCAP & 0x10000000))
                    {
                        Local0 = DCTR /* \_SB_.PC00.RP15.PXSX.DCTR */
                        Local0 |= 0x8000
                        DCTR = Local0
                    }
                }
            }

            Name (SPLX, Package (0x02)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (SPLC, 0, Serialized)
            {
                DerefOf (SPLX [One]) [Zero] = DOM1 /* \DOM1 */
                DerefOf (SPLX [One]) [One] = LIM1 /* \LIM1 */
                DerefOf (SPLX [One]) [0x02] = TIM1 /* \TIM1 */
                Return (SPLX) /* \_SB_.PC00.RP15.PXSX.SPLX */
            }

            Name (WANX, Package (0x03)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (WAND, 0, Serialized)
            {
                DerefOf (WANX [One]) [Zero] = Zero
                DerefOf (WANX [One]) [One] = TRD0 /* \TRD0 */
                DerefOf (WANX [One]) [0x02] = TRL0 /* \TRL0 */
                DerefOf (WANX [0x02]) [Zero] = One
                DerefOf (WANX [0x02]) [One] = TRD1 /* \TRD1 */
                DerefOf (WANX [0x02]) [0x02] = TRL1 /* \TRL1 */
                Return (WANX) /* \_SB_.PC00.RP15.PXSX.WANX */
            }

            Name (WRDX, Package (0x02)
            {
                Zero, 
                Package (0x02)
                {
                    0x80000000, 
                    0x8000
                }
            })
            Method (WRDD, 0, Serialized)
            {
                DerefOf (WRDX [One]) [Zero] = WDM1 /* \WDM1 */
                DerefOf (WRDX [One]) [One] = CID1 /* \CID1 */
                Return (WRDX) /* \_SB_.PC00.RP15.PXSX.WRDX */
            }

            Name (WRDY, Package (0x02)
            {
                One, 
                Package (0x18)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WRDS, 0, Serialized)
            {
                DerefOf (WRDY [One]) [One] = STXE /* \STXE */
                DerefOf (WRDY [One]) [0x02] = ST10 /* \ST10 */
                DerefOf (WRDY [One]) [0x03] = ST11 /* \ST11 */
                DerefOf (WRDY [One]) [0x04] = ST12 /* \ST12 */
                DerefOf (WRDY [One]) [0x05] = ST13 /* \ST13 */
                DerefOf (WRDY [One]) [0x06] = ST14 /* \ST14 */
                DerefOf (WRDY [One]) [0x07] = ST15 /* \ST15 */
                DerefOf (WRDY [One]) [0x08] = ST16 /* \ST16 */
                DerefOf (WRDY [One]) [0x09] = ST17 /* \ST17 */
                DerefOf (WRDY [One]) [0x0A] = ST18 /* \ST18 */
                DerefOf (WRDY [One]) [0x0B] = ST19 /* \ST19 */
                DerefOf (WRDY [One]) [0x0C] = ST50 /* \ST50 */
                DerefOf (WRDY [One]) [0x0D] = ST51 /* \ST51 */
                DerefOf (WRDY [One]) [0x0E] = ST52 /* \ST52 */
                DerefOf (WRDY [One]) [0x0F] = ST53 /* \ST53 */
                DerefOf (WRDY [One]) [0x10] = ST54 /* \ST54 */
                DerefOf (WRDY [One]) [0x11] = ST55 /* \ST55 */
                DerefOf (WRDY [One]) [0x12] = ST56 /* \ST56 */
                DerefOf (WRDY [One]) [0x13] = ST57 /* \ST57 */
                DerefOf (WRDY [One]) [0x14] = ST58 /* \ST58 */
                DerefOf (WRDY [One]) [0x15] = ST59 /* \ST59 */
                DerefOf (WRDY [One]) [0x16] = ST5A /* \ST5A */
                DerefOf (WRDY [One]) [0x17] = ST5B /* \ST5B */
                Return (WRDY) /* \_SB_.PC00.RP15.PXSX.WRDY */
            }

            Name (EWRY, Package (0x02)
            {
                One, 
                Package (0x45)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (EWRD, 0, Serialized)
            {
                DerefOf (EWRY [One]) [One] = STDE /* \STDE */
                DerefOf (EWRY [One]) [0x02] = STRS /* \STRS */
                DerefOf (EWRY [One]) [0x03] = ST20 /* \ST20 */
                DerefOf (EWRY [One]) [0x04] = ST21 /* \ST21 */
                DerefOf (EWRY [One]) [0x05] = ST22 /* \ST22 */
                DerefOf (EWRY [One]) [0x06] = ST23 /* \ST23 */
                DerefOf (EWRY [One]) [0x07] = ST24 /* \ST24 */
                DerefOf (EWRY [One]) [0x08] = ST25 /* \ST25 */
                DerefOf (EWRY [One]) [0x09] = ST26 /* \ST26 */
                DerefOf (EWRY [One]) [0x0A] = ST27 /* \ST27 */
                DerefOf (EWRY [One]) [0x0B] = ST28 /* \ST28 */
                DerefOf (EWRY [One]) [0x0C] = ST29 /* \ST29 */
                DerefOf (EWRY [One]) [0x0D] = ST60 /* \ST60 */
                DerefOf (EWRY [One]) [0x0E] = ST61 /* \ST61 */
                DerefOf (EWRY [One]) [0x0F] = ST62 /* \ST62 */
                DerefOf (EWRY [One]) [0x10] = ST63 /* \ST63 */
                DerefOf (EWRY [One]) [0x11] = ST64 /* \ST64 */
                DerefOf (EWRY [One]) [0x12] = ST65 /* \ST65 */
                DerefOf (EWRY [One]) [0x13] = ST66 /* \ST66 */
                DerefOf (EWRY [One]) [0x14] = ST67 /* \ST67 */
                DerefOf (EWRY [One]) [0x15] = ST68 /* \ST68 */
                DerefOf (EWRY [One]) [0x16] = ST69 /* \ST69 */
                DerefOf (EWRY [One]) [0x17] = ST6A /* \ST6A */
                DerefOf (EWRY [One]) [0x18] = ST6B /* \ST6B */
                DerefOf (EWRY [One]) [0x19] = ST30 /* \ST30 */
                DerefOf (EWRY [One]) [0x1A] = ST31 /* \ST31 */
                DerefOf (EWRY [One]) [0x1B] = ST32 /* \ST32 */
                DerefOf (EWRY [One]) [0x1C] = ST33 /* \ST33 */
                DerefOf (EWRY [One]) [0x1D] = ST34 /* \ST34 */
                DerefOf (EWRY [One]) [0x1E] = ST35 /* \ST35 */
                DerefOf (EWRY [One]) [0x1F] = ST36 /* \ST36 */
                DerefOf (EWRY [One]) [0x20] = ST37 /* \ST37 */
                DerefOf (EWRY [One]) [0x21] = ST38 /* \ST38 */
                DerefOf (EWRY [One]) [0x22] = ST39 /* \ST39 */
                DerefOf (EWRY [One]) [0x23] = ST70 /* \ST70 */
                DerefOf (EWRY [One]) [0x24] = ST71 /* \ST71 */
                DerefOf (EWRY [One]) [0x25] = ST72 /* \ST72 */
                DerefOf (EWRY [One]) [0x26] = ST73 /* \ST73 */
                DerefOf (EWRY [One]) [0x27] = ST74 /* \ST74 */
                DerefOf (EWRY [One]) [0x28] = ST75 /* \ST75 */
                DerefOf (EWRY [One]) [0x29] = ST76 /* \ST76 */
                DerefOf (EWRY [One]) [0x2A] = ST77 /* \ST77 */
                DerefOf (EWRY [One]) [0x2B] = ST78 /* \ST78 */
                DerefOf (EWRY [One]) [0x2C] = ST79 /* \ST79 */
                DerefOf (EWRY [One]) [0x2D] = ST7A /* \ST7A */
                DerefOf (EWRY [One]) [0x2E] = ST7B /* \ST7B */
                DerefOf (EWRY [One]) [0x2F] = ST40 /* \ST40 */
                DerefOf (EWRY [One]) [0x30] = ST41 /* \ST41 */
                DerefOf (EWRY [One]) [0x31] = ST42 /* \ST42 */
                DerefOf (EWRY [One]) [0x32] = ST43 /* \ST43 */
                DerefOf (EWRY [One]) [0x33] = ST44 /* \ST44 */
                DerefOf (EWRY [One]) [0x34] = ST45 /* \ST45 */
                DerefOf (EWRY [One]) [0x35] = ST46 /* \ST46 */
                DerefOf (EWRY [One]) [0x36] = ST47 /* \ST47 */
                DerefOf (EWRY [One]) [0x37] = ST48 /* \ST48 */
                DerefOf (EWRY [One]) [0x38] = ST49 /* \ST49 */
                DerefOf (EWRY [One]) [0x39] = ST80 /* \ST80 */
                DerefOf (EWRY [One]) [0x3A] = ST81 /* \ST81 */
                DerefOf (EWRY [One]) [0x3B] = ST82 /* \ST82 */
                DerefOf (EWRY [One]) [0x3C] = ST83 /* \ST83 */
                DerefOf (EWRY [One]) [0x3D] = ST84 /* \ST84 */
                DerefOf (EWRY [One]) [0x3E] = ST85 /* \ST85 */
                DerefOf (EWRY [One]) [0x3F] = ST86 /* \ST86 */
                DerefOf (EWRY [One]) [0x40] = ST87 /* \ST87 */
                DerefOf (EWRY [One]) [0x41] = ST88 /* \ST88 */
                DerefOf (EWRY [One]) [0x42] = ST89 /* \ST89 */
                DerefOf (EWRY [One]) [0x43] = ST8A /* \ST8A */
                DerefOf (EWRY [One]) [0x44] = ST8B /* \ST8B */
                Return (EWRY) /* \_SB_.PC00.RP15.PXSX.EWRY */
            }

            Name (WGDY, Package (0x02)
            {
                0x02, 
                Package (0x1C)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WGDS, 0, Serialized)
            {
                DerefOf (WGDY [One]) [One] = SD11 /* \SD11 */
                DerefOf (WGDY [One]) [0x02] = SD12 /* \SD12 */
                DerefOf (WGDY [One]) [0x03] = SD13 /* \SD13 */
                DerefOf (WGDY [One]) [0x04] = SD14 /* \SD14 */
                DerefOf (WGDY [One]) [0x05] = SD15 /* \SD15 */
                DerefOf (WGDY [One]) [0x06] = SD16 /* \SD16 */
                DerefOf (WGDY [One]) [0x07] = SD17 /* \SD17 */
                DerefOf (WGDY [One]) [0x08] = SD18 /* \SD18 */
                DerefOf (WGDY [One]) [0x09] = SD19 /* \SD19 */
                DerefOf (WGDY [One]) [0x0A] = SD21 /* \SD21 */
                DerefOf (WGDY [One]) [0x0B] = SD22 /* \SD22 */
                DerefOf (WGDY [One]) [0x0C] = SD23 /* \SD23 */
                DerefOf (WGDY [One]) [0x0D] = SD24 /* \SD24 */
                DerefOf (WGDY [One]) [0x0E] = SD25 /* \SD25 */
                DerefOf (WGDY [One]) [0x0F] = SD26 /* \SD26 */
                DerefOf (WGDY [One]) [0x10] = SD27 /* \SD27 */
                DerefOf (WGDY [One]) [0x11] = SD28 /* \SD28 */
                DerefOf (WGDY [One]) [0x12] = SD29 /* \SD29 */
                DerefOf (WGDY [One]) [0x13] = SD31 /* \SD31 */
                DerefOf (WGDY [One]) [0x14] = SD32 /* \SD32 */
                DerefOf (WGDY [One]) [0x15] = SD33 /* \SD33 */
                DerefOf (WGDY [One]) [0x16] = SD34 /* \SD34 */
                DerefOf (WGDY [One]) [0x17] = SD35 /* \SD35 */
                DerefOf (WGDY [One]) [0x18] = SD36 /* \SD36 */
                DerefOf (WGDY [One]) [0x19] = SD37 /* \SD37 */
                DerefOf (WGDY [One]) [0x1A] = SD38 /* \SD38 */
                DerefOf (WGDY [One]) [0x1B] = SD39 /* \SD39 */
                Return (WGDY) /* \_SB_.PC00.RP15.PXSX.WGDY */
            }

            Name (ECKY, Package (0x02)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    Zero
                }
            })
            Method (ECKV, 0, Serialized)
            {
                DerefOf (ECKY [One]) [One] = CECV /* \CECV */
                Return (ECKY) /* \_SB_.PC00.RP15.PXSX.ECKY */
            }

            Name (PPAY, Package (0x02)
            {
                One, 
                Package (0x18)
                {
                    0x07, 
                    Zero, 
                    0x18, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x18, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28
                }
            })
            Method (PPAG, 0, Serialized)
            {
                DerefOf (PPAY [One]) [One] = WAGE /* \WAGE */
                DerefOf (PPAY [One]) [0x02] = AGA1 /* \AGA1 */
                DerefOf (PPAY [One]) [0x03] = AGA2 /* \AGA2 */
                DerefOf (PPAY [One]) [0x04] = AGA3 /* \AGA3 */
                DerefOf (PPAY [One]) [0x05] = AGA4 /* \AGA4 */
                DerefOf (PPAY [One]) [0x06] = AGA5 /* \AGA5 */
                DerefOf (PPAY [One]) [0x07] = AGA6 /* \AGA6 */
                DerefOf (PPAY [One]) [0x08] = AGA7 /* \AGA7 */
                DerefOf (PPAY [One]) [0x09] = AGA8 /* \AGA8 */
                DerefOf (PPAY [One]) [0x0A] = AGA9 /* \AGA9 */
                DerefOf (PPAY [One]) [0x0B] = AGAA /* \AGAA */
                DerefOf (PPAY [One]) [0x0C] = AGAB /* \AGAB */
                DerefOf (PPAY [One]) [0x0D] = AGB1 /* \AGB1 */
                DerefOf (PPAY [One]) [0x0E] = AGB2 /* \AGB2 */
                DerefOf (PPAY [One]) [0x0F] = AGB3 /* \AGB3 */
                DerefOf (PPAY [One]) [0x10] = AGB4 /* \AGB4 */
                DerefOf (PPAY [One]) [0x11] = AGB5 /* \AGB5 */
                DerefOf (PPAY [One]) [0x12] = AGB6 /* \AGB6 */
                DerefOf (PPAY [One]) [0x13] = AGB7 /* \AGB7 */
                DerefOf (PPAY [One]) [0x14] = AGB8 /* \AGB8 */
                DerefOf (PPAY [One]) [0x15] = AGB9 /* \AGB9 */
                DerefOf (PPAY [One]) [0x16] = AGBA /* \AGBA */
                DerefOf (PPAY [One]) [0x17] = AGBB /* \AGBB */
                Return (PPAY) /* \_SB_.PC00.RP15.PXSX.PPAY */
            }

            Name (SADX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    0x80000000
                }, 

                Package (0x02)
                {
                    0x12, 
                    0x80000000
                }
            })
            Method (SADS, 0, Serialized)
            {
                DerefOf (SADX [One]) [One] = ATDV /* \ATDV */
                DerefOf (SADX [0x02]) [One] = ATDV /* \ATDV */
                Return (SADX) /* \_SB_.PC00.RP15.PXSX.SADX */
            }

            Name (GPCX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }, 

                Package (0x02)
                {
                    0x12, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }
            })
            Method (GPC, 0, Serialized)
            {
                Return (GPCX) /* \_SB_.PC00.RP15.PXSX.GPCX */
            }
        }

        If (((WWEN != Zero) && (WWRP == SLOT)))
        {
            Method (SHRF, 0, NotSerialized)
            {
                PSD0 (SLOT)
                SPCO (WCLK, One)
                SGOV (WFCP, PFCP)
                Sleep (TN2B)
                SGOV (WBRS, (~PBRS & One))
                Sleep (TB2R)
                SGOV (PRST, (~WPRP & One))
                L23D ()
            }

            Method (_RST, 0, Serialized)  // _RST: Device Reset
            {
                If ((WWEN == 0x02))
                {
                    Local0 = Acquire (WWMT, 0x03E8)
                    If ((Local0 == Zero))
                    {
                        ADBG ("Start WWAN FLDR")
                        DL23 ()
                        SGOV (WBRS, PBRS)
                        Sleep (TBTG)
                        SHRF ()
                        ADBG ("End WWAN FLDR")
                        Release (WWMT)
                    }
                }
                Else
                {
                    SGOV (WBRS, PBRS)
                    Sleep (0xC8)
                    Notify (PXSX, One) // Device Check
                    SGOV (PRST, (~WPRP & One))
                    SGOV (WBRS, (~PBRS & One))
                    Sleep (0xC8)
                    Local0 = Zero
                    While ((LASX == Zero))
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    Sleep (0x0A)
                    Notify (PXSX, One) // Device Check
                }
            }

            PowerResource (MRST, 0x05, 0x0000)
            {
                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    Return (One)
                }

                Method (_ON, 0, Serialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                {
                }

                Method (_RST, 0, Serialized)  // _RST: Device Reset
                {
                    Local0 = Acquire (WWMT, 0x03E8)
                    If ((Local0 == Zero))
                    {
                        ADBG ("Start WWAN PR _RST")
                        DL23 ()
                        SGOV (WBRS, PBRS)
                        SPCO (WCLK, Zero)
                        Sleep (TB2F)
                        SGOV (WFCP, (~PFCP & One))
                        Sleep (TFDI)
                        SHRF ()
                        Release (WWMT)
                    }
                }
            }
        }

        If ((WIST () || ((WWEN != Zero) && (WWRP == SLOT))))
        {
            PowerResource (DRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    If ((DCAP & 0x10000000))
                    {
                        Local0 = DCTR /* \_SB_.PC00.RP15.PXSX.DCTR */
                        Local0 |= 0x8000
                        DCTR = Local0
                    }
                }
            }

            Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
            {
                If (WIST ())
                {
                    If (CondRefOf (WRST))
                    {
                        Return (Package (0x01)
                        {
                            WRST
                        })
                    }
                }

                If (((WWEN != Zero) && (WWRP == SLOT)))
                {
                    If (CondRefOf (MRST))
                    {
                        Return (Package (0x01)
                        {
                            MRST
                        })
                    }
                }

                Return (Package (0x01)
                {
                    DRST
                })
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (WIST ())
                {
                    If ((Arg0 == ToUUID ("f21202bf-8f78-4dc6-a5b3-1f738e285ade") /* Unknown UUID */))
                    {
                        If ((Arg2 == Zero))
                        {
                            If ((Arg1 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x0F                                             // .
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }
                        }

                        If ((Arg2 == One))
                        {
                            Local0 = ACSD /* \ACSD */
                            Return (Local0)
                        }

                        If ((Arg2 == 0x02))
                        {
                            Local0 = I5BS /* \I5BS */
                            Return (Local0)
                        }

                        If ((Arg2 == 0x03))
                        {
                            Local0 = UHBS /* \UHBS */
                            Return (Local0)
                        }

                        Return (Zero)
                    }
                }

                If (((WWEN != Zero) && (WWRP == SLOT)))
                {
                    If ((Arg0 == ToUUID ("bad01b75-22a8-4f48-8792-bdde9467747d") /* Unknown UUID */))
                    {
                        If ((Arg2 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x09                                             // .
                            })
                        }

                        If ((Arg2 == One)) {}
                        If ((Arg2 == 0x02)) {}
                        If ((Arg2 == 0x03))
                        {
                            If ((WRTO == One)) {}
                            ElseIf ((WRTO == 0x03)) {}
                            Else
                            {
                            }

                            Return (WRTO) /* \WRTO */
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }

    Scope (_SB.PC00.RP16.PXSX)
    {
        OperationRegion (RPXX, SystemMemory, GMIO (^_ADR (), _ADR), 0x10)
        Field (RPXX, AnyAcc, NoLock, Preserve)
        {
            VDID,   32
        }

        OperationRegion (FLDR, SystemMemory, (GMIO (^_ADR (), _ADR) + 0x44), 0x06)
        Field (FLDR, ByteAcc, NoLock, Preserve)
        {
            DCAP,   32, 
            DCTR,   16
        }

        Method (WIST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x095A8086)
                    {
                        Return (One)
                    }
                    Case (0x095B8086)
                    {
                        Return (One)
                    }
                    Case (0x31658086)
                    {
                        Return (One)
                    }
                    Case (0x31668086)
                    {
                        Return (One)
                    }
                    Case (0x08B18086)
                    {
                        Return (One)
                    }
                    Case (0x08B28086)
                    {
                        Return (One)
                    }
                    Case (0x08B38086)
                    {
                        Return (One)
                    }
                    Case (0x08B48086)
                    {
                        Return (One)
                    }
                    Case (0x24F38086)
                    {
                        Return (One)
                    }
                    Case (0x24F48086)
                    {
                        Return (One)
                    }
                    Case (0x24F58086)
                    {
                        Return (One)
                    }
                    Case (0x24F68086)
                    {
                        Return (One)
                    }
                    Case (0x24FD8086)
                    {
                        Return (One)
                    }
                    Case (0x24FB8086)
                    {
                        Return (One)
                    }
                    Case (0x25268086)
                    {
                        Return (One)
                    }
                    Case (0x271B8086)
                    {
                        Return (One)
                    }
                    Case (0x27238086)
                    {
                        Return (One)
                    }
                    Case (0x27258086)
                    {
                        Return (One)
                    }
                    Case (0x885210EC)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (WWST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x73608086)
                    {
                        Return (One)
                    }
                    Case (0x75608086)
                    {
                        Return (One)
                    }
                    Case (0x4D7514C3)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        If (WIST ())
        {
            PowerResource (WRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    If ((DCAP & 0x10000000))
                    {
                        Local0 = DCTR /* \_SB_.PC00.RP16.PXSX.DCTR */
                        Local0 |= 0x8000
                        DCTR = Local0
                    }
                }
            }

            Name (SPLX, Package (0x02)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (SPLC, 0, Serialized)
            {
                DerefOf (SPLX [One]) [Zero] = DOM1 /* \DOM1 */
                DerefOf (SPLX [One]) [One] = LIM1 /* \LIM1 */
                DerefOf (SPLX [One]) [0x02] = TIM1 /* \TIM1 */
                Return (SPLX) /* \_SB_.PC00.RP16.PXSX.SPLX */
            }

            Name (WANX, Package (0x03)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (WAND, 0, Serialized)
            {
                DerefOf (WANX [One]) [Zero] = Zero
                DerefOf (WANX [One]) [One] = TRD0 /* \TRD0 */
                DerefOf (WANX [One]) [0x02] = TRL0 /* \TRL0 */
                DerefOf (WANX [0x02]) [Zero] = One
                DerefOf (WANX [0x02]) [One] = TRD1 /* \TRD1 */
                DerefOf (WANX [0x02]) [0x02] = TRL1 /* \TRL1 */
                Return (WANX) /* \_SB_.PC00.RP16.PXSX.WANX */
            }

            Name (WRDX, Package (0x02)
            {
                Zero, 
                Package (0x02)
                {
                    0x80000000, 
                    0x8000
                }
            })
            Method (WRDD, 0, Serialized)
            {
                DerefOf (WRDX [One]) [Zero] = WDM1 /* \WDM1 */
                DerefOf (WRDX [One]) [One] = CID1 /* \CID1 */
                Return (WRDX) /* \_SB_.PC00.RP16.PXSX.WRDX */
            }

            Name (WRDY, Package (0x02)
            {
                One, 
                Package (0x18)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WRDS, 0, Serialized)
            {
                DerefOf (WRDY [One]) [One] = STXE /* \STXE */
                DerefOf (WRDY [One]) [0x02] = ST10 /* \ST10 */
                DerefOf (WRDY [One]) [0x03] = ST11 /* \ST11 */
                DerefOf (WRDY [One]) [0x04] = ST12 /* \ST12 */
                DerefOf (WRDY [One]) [0x05] = ST13 /* \ST13 */
                DerefOf (WRDY [One]) [0x06] = ST14 /* \ST14 */
                DerefOf (WRDY [One]) [0x07] = ST15 /* \ST15 */
                DerefOf (WRDY [One]) [0x08] = ST16 /* \ST16 */
                DerefOf (WRDY [One]) [0x09] = ST17 /* \ST17 */
                DerefOf (WRDY [One]) [0x0A] = ST18 /* \ST18 */
                DerefOf (WRDY [One]) [0x0B] = ST19 /* \ST19 */
                DerefOf (WRDY [One]) [0x0C] = ST50 /* \ST50 */
                DerefOf (WRDY [One]) [0x0D] = ST51 /* \ST51 */
                DerefOf (WRDY [One]) [0x0E] = ST52 /* \ST52 */
                DerefOf (WRDY [One]) [0x0F] = ST53 /* \ST53 */
                DerefOf (WRDY [One]) [0x10] = ST54 /* \ST54 */
                DerefOf (WRDY [One]) [0x11] = ST55 /* \ST55 */
                DerefOf (WRDY [One]) [0x12] = ST56 /* \ST56 */
                DerefOf (WRDY [One]) [0x13] = ST57 /* \ST57 */
                DerefOf (WRDY [One]) [0x14] = ST58 /* \ST58 */
                DerefOf (WRDY [One]) [0x15] = ST59 /* \ST59 */
                DerefOf (WRDY [One]) [0x16] = ST5A /* \ST5A */
                DerefOf (WRDY [One]) [0x17] = ST5B /* \ST5B */
                Return (WRDY) /* \_SB_.PC00.RP16.PXSX.WRDY */
            }

            Name (EWRY, Package (0x02)
            {
                One, 
                Package (0x45)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (EWRD, 0, Serialized)
            {
                DerefOf (EWRY [One]) [One] = STDE /* \STDE */
                DerefOf (EWRY [One]) [0x02] = STRS /* \STRS */
                DerefOf (EWRY [One]) [0x03] = ST20 /* \ST20 */
                DerefOf (EWRY [One]) [0x04] = ST21 /* \ST21 */
                DerefOf (EWRY [One]) [0x05] = ST22 /* \ST22 */
                DerefOf (EWRY [One]) [0x06] = ST23 /* \ST23 */
                DerefOf (EWRY [One]) [0x07] = ST24 /* \ST24 */
                DerefOf (EWRY [One]) [0x08] = ST25 /* \ST25 */
                DerefOf (EWRY [One]) [0x09] = ST26 /* \ST26 */
                DerefOf (EWRY [One]) [0x0A] = ST27 /* \ST27 */
                DerefOf (EWRY [One]) [0x0B] = ST28 /* \ST28 */
                DerefOf (EWRY [One]) [0x0C] = ST29 /* \ST29 */
                DerefOf (EWRY [One]) [0x0D] = ST60 /* \ST60 */
                DerefOf (EWRY [One]) [0x0E] = ST61 /* \ST61 */
                DerefOf (EWRY [One]) [0x0F] = ST62 /* \ST62 */
                DerefOf (EWRY [One]) [0x10] = ST63 /* \ST63 */
                DerefOf (EWRY [One]) [0x11] = ST64 /* \ST64 */
                DerefOf (EWRY [One]) [0x12] = ST65 /* \ST65 */
                DerefOf (EWRY [One]) [0x13] = ST66 /* \ST66 */
                DerefOf (EWRY [One]) [0x14] = ST67 /* \ST67 */
                DerefOf (EWRY [One]) [0x15] = ST68 /* \ST68 */
                DerefOf (EWRY [One]) [0x16] = ST69 /* \ST69 */
                DerefOf (EWRY [One]) [0x17] = ST6A /* \ST6A */
                DerefOf (EWRY [One]) [0x18] = ST6B /* \ST6B */
                DerefOf (EWRY [One]) [0x19] = ST30 /* \ST30 */
                DerefOf (EWRY [One]) [0x1A] = ST31 /* \ST31 */
                DerefOf (EWRY [One]) [0x1B] = ST32 /* \ST32 */
                DerefOf (EWRY [One]) [0x1C] = ST33 /* \ST33 */
                DerefOf (EWRY [One]) [0x1D] = ST34 /* \ST34 */
                DerefOf (EWRY [One]) [0x1E] = ST35 /* \ST35 */
                DerefOf (EWRY [One]) [0x1F] = ST36 /* \ST36 */
                DerefOf (EWRY [One]) [0x20] = ST37 /* \ST37 */
                DerefOf (EWRY [One]) [0x21] = ST38 /* \ST38 */
                DerefOf (EWRY [One]) [0x22] = ST39 /* \ST39 */
                DerefOf (EWRY [One]) [0x23] = ST70 /* \ST70 */
                DerefOf (EWRY [One]) [0x24] = ST71 /* \ST71 */
                DerefOf (EWRY [One]) [0x25] = ST72 /* \ST72 */
                DerefOf (EWRY [One]) [0x26] = ST73 /* \ST73 */
                DerefOf (EWRY [One]) [0x27] = ST74 /* \ST74 */
                DerefOf (EWRY [One]) [0x28] = ST75 /* \ST75 */
                DerefOf (EWRY [One]) [0x29] = ST76 /* \ST76 */
                DerefOf (EWRY [One]) [0x2A] = ST77 /* \ST77 */
                DerefOf (EWRY [One]) [0x2B] = ST78 /* \ST78 */
                DerefOf (EWRY [One]) [0x2C] = ST79 /* \ST79 */
                DerefOf (EWRY [One]) [0x2D] = ST7A /* \ST7A */
                DerefOf (EWRY [One]) [0x2E] = ST7B /* \ST7B */
                DerefOf (EWRY [One]) [0x2F] = ST40 /* \ST40 */
                DerefOf (EWRY [One]) [0x30] = ST41 /* \ST41 */
                DerefOf (EWRY [One]) [0x31] = ST42 /* \ST42 */
                DerefOf (EWRY [One]) [0x32] = ST43 /* \ST43 */
                DerefOf (EWRY [One]) [0x33] = ST44 /* \ST44 */
                DerefOf (EWRY [One]) [0x34] = ST45 /* \ST45 */
                DerefOf (EWRY [One]) [0x35] = ST46 /* \ST46 */
                DerefOf (EWRY [One]) [0x36] = ST47 /* \ST47 */
                DerefOf (EWRY [One]) [0x37] = ST48 /* \ST48 */
                DerefOf (EWRY [One]) [0x38] = ST49 /* \ST49 */
                DerefOf (EWRY [One]) [0x39] = ST80 /* \ST80 */
                DerefOf (EWRY [One]) [0x3A] = ST81 /* \ST81 */
                DerefOf (EWRY [One]) [0x3B] = ST82 /* \ST82 */
                DerefOf (EWRY [One]) [0x3C] = ST83 /* \ST83 */
                DerefOf (EWRY [One]) [0x3D] = ST84 /* \ST84 */
                DerefOf (EWRY [One]) [0x3E] = ST85 /* \ST85 */
                DerefOf (EWRY [One]) [0x3F] = ST86 /* \ST86 */
                DerefOf (EWRY [One]) [0x40] = ST87 /* \ST87 */
                DerefOf (EWRY [One]) [0x41] = ST88 /* \ST88 */
                DerefOf (EWRY [One]) [0x42] = ST89 /* \ST89 */
                DerefOf (EWRY [One]) [0x43] = ST8A /* \ST8A */
                DerefOf (EWRY [One]) [0x44] = ST8B /* \ST8B */
                Return (EWRY) /* \_SB_.PC00.RP16.PXSX.EWRY */
            }

            Name (WGDY, Package (0x02)
            {
                0x02, 
                Package (0x1C)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WGDS, 0, Serialized)
            {
                DerefOf (WGDY [One]) [One] = SD11 /* \SD11 */
                DerefOf (WGDY [One]) [0x02] = SD12 /* \SD12 */
                DerefOf (WGDY [One]) [0x03] = SD13 /* \SD13 */
                DerefOf (WGDY [One]) [0x04] = SD14 /* \SD14 */
                DerefOf (WGDY [One]) [0x05] = SD15 /* \SD15 */
                DerefOf (WGDY [One]) [0x06] = SD16 /* \SD16 */
                DerefOf (WGDY [One]) [0x07] = SD17 /* \SD17 */
                DerefOf (WGDY [One]) [0x08] = SD18 /* \SD18 */
                DerefOf (WGDY [One]) [0x09] = SD19 /* \SD19 */
                DerefOf (WGDY [One]) [0x0A] = SD21 /* \SD21 */
                DerefOf (WGDY [One]) [0x0B] = SD22 /* \SD22 */
                DerefOf (WGDY [One]) [0x0C] = SD23 /* \SD23 */
                DerefOf (WGDY [One]) [0x0D] = SD24 /* \SD24 */
                DerefOf (WGDY [One]) [0x0E] = SD25 /* \SD25 */
                DerefOf (WGDY [One]) [0x0F] = SD26 /* \SD26 */
                DerefOf (WGDY [One]) [0x10] = SD27 /* \SD27 */
                DerefOf (WGDY [One]) [0x11] = SD28 /* \SD28 */
                DerefOf (WGDY [One]) [0x12] = SD29 /* \SD29 */
                DerefOf (WGDY [One]) [0x13] = SD31 /* \SD31 */
                DerefOf (WGDY [One]) [0x14] = SD32 /* \SD32 */
                DerefOf (WGDY [One]) [0x15] = SD33 /* \SD33 */
                DerefOf (WGDY [One]) [0x16] = SD34 /* \SD34 */
                DerefOf (WGDY [One]) [0x17] = SD35 /* \SD35 */
                DerefOf (WGDY [One]) [0x18] = SD36 /* \SD36 */
                DerefOf (WGDY [One]) [0x19] = SD37 /* \SD37 */
                DerefOf (WGDY [One]) [0x1A] = SD38 /* \SD38 */
                DerefOf (WGDY [One]) [0x1B] = SD39 /* \SD39 */
                Return (WGDY) /* \_SB_.PC00.RP16.PXSX.WGDY */
            }

            Name (ECKY, Package (0x02)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    Zero
                }
            })
            Method (ECKV, 0, Serialized)
            {
                DerefOf (ECKY [One]) [One] = CECV /* \CECV */
                Return (ECKY) /* \_SB_.PC00.RP16.PXSX.ECKY */
            }

            Name (PPAY, Package (0x02)
            {
                One, 
                Package (0x18)
                {
                    0x07, 
                    Zero, 
                    0x18, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x18, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28
                }
            })
            Method (PPAG, 0, Serialized)
            {
                DerefOf (PPAY [One]) [One] = WAGE /* \WAGE */
                DerefOf (PPAY [One]) [0x02] = AGA1 /* \AGA1 */
                DerefOf (PPAY [One]) [0x03] = AGA2 /* \AGA2 */
                DerefOf (PPAY [One]) [0x04] = AGA3 /* \AGA3 */
                DerefOf (PPAY [One]) [0x05] = AGA4 /* \AGA4 */
                DerefOf (PPAY [One]) [0x06] = AGA5 /* \AGA5 */
                DerefOf (PPAY [One]) [0x07] = AGA6 /* \AGA6 */
                DerefOf (PPAY [One]) [0x08] = AGA7 /* \AGA7 */
                DerefOf (PPAY [One]) [0x09] = AGA8 /* \AGA8 */
                DerefOf (PPAY [One]) [0x0A] = AGA9 /* \AGA9 */
                DerefOf (PPAY [One]) [0x0B] = AGAA /* \AGAA */
                DerefOf (PPAY [One]) [0x0C] = AGAB /* \AGAB */
                DerefOf (PPAY [One]) [0x0D] = AGB1 /* \AGB1 */
                DerefOf (PPAY [One]) [0x0E] = AGB2 /* \AGB2 */
                DerefOf (PPAY [One]) [0x0F] = AGB3 /* \AGB3 */
                DerefOf (PPAY [One]) [0x10] = AGB4 /* \AGB4 */
                DerefOf (PPAY [One]) [0x11] = AGB5 /* \AGB5 */
                DerefOf (PPAY [One]) [0x12] = AGB6 /* \AGB6 */
                DerefOf (PPAY [One]) [0x13] = AGB7 /* \AGB7 */
                DerefOf (PPAY [One]) [0x14] = AGB8 /* \AGB8 */
                DerefOf (PPAY [One]) [0x15] = AGB9 /* \AGB9 */
                DerefOf (PPAY [One]) [0x16] = AGBA /* \AGBA */
                DerefOf (PPAY [One]) [0x17] = AGBB /* \AGBB */
                Return (PPAY) /* \_SB_.PC00.RP16.PXSX.PPAY */
            }

            Name (SADX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    0x80000000
                }, 

                Package (0x02)
                {
                    0x12, 
                    0x80000000
                }
            })
            Method (SADS, 0, Serialized)
            {
                DerefOf (SADX [One]) [One] = ATDV /* \ATDV */
                DerefOf (SADX [0x02]) [One] = ATDV /* \ATDV */
                Return (SADX) /* \_SB_.PC00.RP16.PXSX.SADX */
            }

            Name (GPCX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }, 

                Package (0x02)
                {
                    0x12, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }
            })
            Method (GPC, 0, Serialized)
            {
                Return (GPCX) /* \_SB_.PC00.RP16.PXSX.GPCX */
            }
        }

        If (((WWEN != Zero) && (WWRP == SLOT)))
        {
            Method (SHRF, 0, NotSerialized)
            {
                PSD0 (SLOT)
                SPCO (WCLK, One)
                SGOV (WFCP, PFCP)
                Sleep (TN2B)
                SGOV (WBRS, (~PBRS & One))
                Sleep (TB2R)
                SGOV (PRST, (~WPRP & One))
                L23D ()
            }

            Method (_RST, 0, Serialized)  // _RST: Device Reset
            {
                If ((WWEN == 0x02))
                {
                    Local0 = Acquire (WWMT, 0x03E8)
                    If ((Local0 == Zero))
                    {
                        ADBG ("Start WWAN FLDR")
                        DL23 ()
                        SGOV (WBRS, PBRS)
                        Sleep (TBTG)
                        SHRF ()
                        ADBG ("End WWAN FLDR")
                        Release (WWMT)
                    }
                }
                Else
                {
                    SGOV (WBRS, PBRS)
                    Sleep (0xC8)
                    Notify (PXSX, One) // Device Check
                    SGOV (PRST, (~WPRP & One))
                    SGOV (WBRS, (~PBRS & One))
                    Sleep (0xC8)
                    Local0 = Zero
                    While ((LASX == Zero))
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    Sleep (0x0A)
                    Notify (PXSX, One) // Device Check
                }
            }

            PowerResource (MRST, 0x05, 0x0000)
            {
                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    Return (One)
                }

                Method (_ON, 0, Serialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                {
                }

                Method (_RST, 0, Serialized)  // _RST: Device Reset
                {
                    Local0 = Acquire (WWMT, 0x03E8)
                    If ((Local0 == Zero))
                    {
                        ADBG ("Start WWAN PR _RST")
                        DL23 ()
                        SGOV (WBRS, PBRS)
                        SPCO (WCLK, Zero)
                        Sleep (TB2F)
                        SGOV (WFCP, (~PFCP & One))
                        Sleep (TFDI)
                        SHRF ()
                        Release (WWMT)
                    }
                }
            }
        }

        If ((WIST () || ((WWEN != Zero) && (WWRP == SLOT))))
        {
            PowerResource (DRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    If ((DCAP & 0x10000000))
                    {
                        Local0 = DCTR /* \_SB_.PC00.RP16.PXSX.DCTR */
                        Local0 |= 0x8000
                        DCTR = Local0
                    }
                }
            }

            Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
            {
                If (WIST ())
                {
                    If (CondRefOf (WRST))
                    {
                        Return (Package (0x01)
                        {
                            WRST
                        })
                    }
                }

                If (((WWEN != Zero) && (WWRP == SLOT)))
                {
                    If (CondRefOf (MRST))
                    {
                        Return (Package (0x01)
                        {
                            MRST
                        })
                    }
                }

                Return (Package (0x01)
                {
                    DRST
                })
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (WIST ())
                {
                    If ((Arg0 == ToUUID ("f21202bf-8f78-4dc6-a5b3-1f738e285ade") /* Unknown UUID */))
                    {
                        If ((Arg2 == Zero))
                        {
                            If ((Arg1 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x0F                                             // .
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }
                        }

                        If ((Arg2 == One))
                        {
                            Local0 = ACSD /* \ACSD */
                            Return (Local0)
                        }

                        If ((Arg2 == 0x02))
                        {
                            Local0 = I5BS /* \I5BS */
                            Return (Local0)
                        }

                        If ((Arg2 == 0x03))
                        {
                            Local0 = UHBS /* \UHBS */
                            Return (Local0)
                        }

                        Return (Zero)
                    }
                }

                If (((WWEN != Zero) && (WWRP == SLOT)))
                {
                    If ((Arg0 == ToUUID ("bad01b75-22a8-4f48-8792-bdde9467747d") /* Unknown UUID */))
                    {
                        If ((Arg2 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x09                                             // .
                            })
                        }

                        If ((Arg2 == One)) {}
                        If ((Arg2 == 0x02)) {}
                        If ((Arg2 == 0x03))
                        {
                            If ((WRTO == One)) {}
                            ElseIf ((WRTO == 0x03)) {}
                            Else
                            {
                            }

                            Return (WRTO) /* \WRTO */
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }

    Scope (_SB.PC00.RP17.PXSX)
    {
        OperationRegion (RPXX, SystemMemory, GMIO (^_ADR (), _ADR), 0x10)
        Field (RPXX, AnyAcc, NoLock, Preserve)
        {
            VDID,   32
        }

        OperationRegion (FLDR, SystemMemory, (GMIO (^_ADR (), _ADR) + 0x44), 0x06)
        Field (FLDR, ByteAcc, NoLock, Preserve)
        {
            DCAP,   32, 
            DCTR,   16
        }

        Method (WIST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x095A8086)
                    {
                        Return (One)
                    }
                    Case (0x095B8086)
                    {
                        Return (One)
                    }
                    Case (0x31658086)
                    {
                        Return (One)
                    }
                    Case (0x31668086)
                    {
                        Return (One)
                    }
                    Case (0x08B18086)
                    {
                        Return (One)
                    }
                    Case (0x08B28086)
                    {
                        Return (One)
                    }
                    Case (0x08B38086)
                    {
                        Return (One)
                    }
                    Case (0x08B48086)
                    {
                        Return (One)
                    }
                    Case (0x24F38086)
                    {
                        Return (One)
                    }
                    Case (0x24F48086)
                    {
                        Return (One)
                    }
                    Case (0x24F58086)
                    {
                        Return (One)
                    }
                    Case (0x24F68086)
                    {
                        Return (One)
                    }
                    Case (0x24FD8086)
                    {
                        Return (One)
                    }
                    Case (0x24FB8086)
                    {
                        Return (One)
                    }
                    Case (0x25268086)
                    {
                        Return (One)
                    }
                    Case (0x271B8086)
                    {
                        Return (One)
                    }
                    Case (0x27238086)
                    {
                        Return (One)
                    }
                    Case (0x27258086)
                    {
                        Return (One)
                    }
                    Case (0x885210EC)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (WWST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x73608086)
                    {
                        Return (One)
                    }
                    Case (0x75608086)
                    {
                        Return (One)
                    }
                    Case (0x4D7514C3)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        If (WIST ())
        {
            PowerResource (WRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    If ((DCAP & 0x10000000))
                    {
                        Local0 = DCTR /* \_SB_.PC00.RP17.PXSX.DCTR */
                        Local0 |= 0x8000
                        DCTR = Local0
                    }
                }
            }

            Name (SPLX, Package (0x02)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (SPLC, 0, Serialized)
            {
                DerefOf (SPLX [One]) [Zero] = DOM1 /* \DOM1 */
                DerefOf (SPLX [One]) [One] = LIM1 /* \LIM1 */
                DerefOf (SPLX [One]) [0x02] = TIM1 /* \TIM1 */
                Return (SPLX) /* \_SB_.PC00.RP17.PXSX.SPLX */
            }

            Name (WANX, Package (0x03)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (WAND, 0, Serialized)
            {
                DerefOf (WANX [One]) [Zero] = Zero
                DerefOf (WANX [One]) [One] = TRD0 /* \TRD0 */
                DerefOf (WANX [One]) [0x02] = TRL0 /* \TRL0 */
                DerefOf (WANX [0x02]) [Zero] = One
                DerefOf (WANX [0x02]) [One] = TRD1 /* \TRD1 */
                DerefOf (WANX [0x02]) [0x02] = TRL1 /* \TRL1 */
                Return (WANX) /* \_SB_.PC00.RP17.PXSX.WANX */
            }

            Name (WRDX, Package (0x02)
            {
                Zero, 
                Package (0x02)
                {
                    0x80000000, 
                    0x8000
                }
            })
            Method (WRDD, 0, Serialized)
            {
                DerefOf (WRDX [One]) [Zero] = WDM1 /* \WDM1 */
                DerefOf (WRDX [One]) [One] = CID1 /* \CID1 */
                Return (WRDX) /* \_SB_.PC00.RP17.PXSX.WRDX */
            }

            Name (WRDY, Package (0x02)
            {
                One, 
                Package (0x18)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WRDS, 0, Serialized)
            {
                DerefOf (WRDY [One]) [One] = STXE /* \STXE */
                DerefOf (WRDY [One]) [0x02] = ST10 /* \ST10 */
                DerefOf (WRDY [One]) [0x03] = ST11 /* \ST11 */
                DerefOf (WRDY [One]) [0x04] = ST12 /* \ST12 */
                DerefOf (WRDY [One]) [0x05] = ST13 /* \ST13 */
                DerefOf (WRDY [One]) [0x06] = ST14 /* \ST14 */
                DerefOf (WRDY [One]) [0x07] = ST15 /* \ST15 */
                DerefOf (WRDY [One]) [0x08] = ST16 /* \ST16 */
                DerefOf (WRDY [One]) [0x09] = ST17 /* \ST17 */
                DerefOf (WRDY [One]) [0x0A] = ST18 /* \ST18 */
                DerefOf (WRDY [One]) [0x0B] = ST19 /* \ST19 */
                DerefOf (WRDY [One]) [0x0C] = ST50 /* \ST50 */
                DerefOf (WRDY [One]) [0x0D] = ST51 /* \ST51 */
                DerefOf (WRDY [One]) [0x0E] = ST52 /* \ST52 */
                DerefOf (WRDY [One]) [0x0F] = ST53 /* \ST53 */
                DerefOf (WRDY [One]) [0x10] = ST54 /* \ST54 */
                DerefOf (WRDY [One]) [0x11] = ST55 /* \ST55 */
                DerefOf (WRDY [One]) [0x12] = ST56 /* \ST56 */
                DerefOf (WRDY [One]) [0x13] = ST57 /* \ST57 */
                DerefOf (WRDY [One]) [0x14] = ST58 /* \ST58 */
                DerefOf (WRDY [One]) [0x15] = ST59 /* \ST59 */
                DerefOf (WRDY [One]) [0x16] = ST5A /* \ST5A */
                DerefOf (WRDY [One]) [0x17] = ST5B /* \ST5B */
                Return (WRDY) /* \_SB_.PC00.RP17.PXSX.WRDY */
            }

            Name (EWRY, Package (0x02)
            {
                One, 
                Package (0x45)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (EWRD, 0, Serialized)
            {
                DerefOf (EWRY [One]) [One] = STDE /* \STDE */
                DerefOf (EWRY [One]) [0x02] = STRS /* \STRS */
                DerefOf (EWRY [One]) [0x03] = ST20 /* \ST20 */
                DerefOf (EWRY [One]) [0x04] = ST21 /* \ST21 */
                DerefOf (EWRY [One]) [0x05] = ST22 /* \ST22 */
                DerefOf (EWRY [One]) [0x06] = ST23 /* \ST23 */
                DerefOf (EWRY [One]) [0x07] = ST24 /* \ST24 */
                DerefOf (EWRY [One]) [0x08] = ST25 /* \ST25 */
                DerefOf (EWRY [One]) [0x09] = ST26 /* \ST26 */
                DerefOf (EWRY [One]) [0x0A] = ST27 /* \ST27 */
                DerefOf (EWRY [One]) [0x0B] = ST28 /* \ST28 */
                DerefOf (EWRY [One]) [0x0C] = ST29 /* \ST29 */
                DerefOf (EWRY [One]) [0x0D] = ST60 /* \ST60 */
                DerefOf (EWRY [One]) [0x0E] = ST61 /* \ST61 */
                DerefOf (EWRY [One]) [0x0F] = ST62 /* \ST62 */
                DerefOf (EWRY [One]) [0x10] = ST63 /* \ST63 */
                DerefOf (EWRY [One]) [0x11] = ST64 /* \ST64 */
                DerefOf (EWRY [One]) [0x12] = ST65 /* \ST65 */
                DerefOf (EWRY [One]) [0x13] = ST66 /* \ST66 */
                DerefOf (EWRY [One]) [0x14] = ST67 /* \ST67 */
                DerefOf (EWRY [One]) [0x15] = ST68 /* \ST68 */
                DerefOf (EWRY [One]) [0x16] = ST69 /* \ST69 */
                DerefOf (EWRY [One]) [0x17] = ST6A /* \ST6A */
                DerefOf (EWRY [One]) [0x18] = ST6B /* \ST6B */
                DerefOf (EWRY [One]) [0x19] = ST30 /* \ST30 */
                DerefOf (EWRY [One]) [0x1A] = ST31 /* \ST31 */
                DerefOf (EWRY [One]) [0x1B] = ST32 /* \ST32 */
                DerefOf (EWRY [One]) [0x1C] = ST33 /* \ST33 */
                DerefOf (EWRY [One]) [0x1D] = ST34 /* \ST34 */
                DerefOf (EWRY [One]) [0x1E] = ST35 /* \ST35 */
                DerefOf (EWRY [One]) [0x1F] = ST36 /* \ST36 */
                DerefOf (EWRY [One]) [0x20] = ST37 /* \ST37 */
                DerefOf (EWRY [One]) [0x21] = ST38 /* \ST38 */
                DerefOf (EWRY [One]) [0x22] = ST39 /* \ST39 */
                DerefOf (EWRY [One]) [0x23] = ST70 /* \ST70 */
                DerefOf (EWRY [One]) [0x24] = ST71 /* \ST71 */
                DerefOf (EWRY [One]) [0x25] = ST72 /* \ST72 */
                DerefOf (EWRY [One]) [0x26] = ST73 /* \ST73 */
                DerefOf (EWRY [One]) [0x27] = ST74 /* \ST74 */
                DerefOf (EWRY [One]) [0x28] = ST75 /* \ST75 */
                DerefOf (EWRY [One]) [0x29] = ST76 /* \ST76 */
                DerefOf (EWRY [One]) [0x2A] = ST77 /* \ST77 */
                DerefOf (EWRY [One]) [0x2B] = ST78 /* \ST78 */
                DerefOf (EWRY [One]) [0x2C] = ST79 /* \ST79 */
                DerefOf (EWRY [One]) [0x2D] = ST7A /* \ST7A */
                DerefOf (EWRY [One]) [0x2E] = ST7B /* \ST7B */
                DerefOf (EWRY [One]) [0x2F] = ST40 /* \ST40 */
                DerefOf (EWRY [One]) [0x30] = ST41 /* \ST41 */
                DerefOf (EWRY [One]) [0x31] = ST42 /* \ST42 */
                DerefOf (EWRY [One]) [0x32] = ST43 /* \ST43 */
                DerefOf (EWRY [One]) [0x33] = ST44 /* \ST44 */
                DerefOf (EWRY [One]) [0x34] = ST45 /* \ST45 */
                DerefOf (EWRY [One]) [0x35] = ST46 /* \ST46 */
                DerefOf (EWRY [One]) [0x36] = ST47 /* \ST47 */
                DerefOf (EWRY [One]) [0x37] = ST48 /* \ST48 */
                DerefOf (EWRY [One]) [0x38] = ST49 /* \ST49 */
                DerefOf (EWRY [One]) [0x39] = ST80 /* \ST80 */
                DerefOf (EWRY [One]) [0x3A] = ST81 /* \ST81 */
                DerefOf (EWRY [One]) [0x3B] = ST82 /* \ST82 */
                DerefOf (EWRY [One]) [0x3C] = ST83 /* \ST83 */
                DerefOf (EWRY [One]) [0x3D] = ST84 /* \ST84 */
                DerefOf (EWRY [One]) [0x3E] = ST85 /* \ST85 */
                DerefOf (EWRY [One]) [0x3F] = ST86 /* \ST86 */
                DerefOf (EWRY [One]) [0x40] = ST87 /* \ST87 */
                DerefOf (EWRY [One]) [0x41] = ST88 /* \ST88 */
                DerefOf (EWRY [One]) [0x42] = ST89 /* \ST89 */
                DerefOf (EWRY [One]) [0x43] = ST8A /* \ST8A */
                DerefOf (EWRY [One]) [0x44] = ST8B /* \ST8B */
                Return (EWRY) /* \_SB_.PC00.RP17.PXSX.EWRY */
            }

            Name (WGDY, Package (0x02)
            {
                0x02, 
                Package (0x1C)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WGDS, 0, Serialized)
            {
                DerefOf (WGDY [One]) [One] = SD11 /* \SD11 */
                DerefOf (WGDY [One]) [0x02] = SD12 /* \SD12 */
                DerefOf (WGDY [One]) [0x03] = SD13 /* \SD13 */
                DerefOf (WGDY [One]) [0x04] = SD14 /* \SD14 */
                DerefOf (WGDY [One]) [0x05] = SD15 /* \SD15 */
                DerefOf (WGDY [One]) [0x06] = SD16 /* \SD16 */
                DerefOf (WGDY [One]) [0x07] = SD17 /* \SD17 */
                DerefOf (WGDY [One]) [0x08] = SD18 /* \SD18 */
                DerefOf (WGDY [One]) [0x09] = SD19 /* \SD19 */
                DerefOf (WGDY [One]) [0x0A] = SD21 /* \SD21 */
                DerefOf (WGDY [One]) [0x0B] = SD22 /* \SD22 */
                DerefOf (WGDY [One]) [0x0C] = SD23 /* \SD23 */
                DerefOf (WGDY [One]) [0x0D] = SD24 /* \SD24 */
                DerefOf (WGDY [One]) [0x0E] = SD25 /* \SD25 */
                DerefOf (WGDY [One]) [0x0F] = SD26 /* \SD26 */
                DerefOf (WGDY [One]) [0x10] = SD27 /* \SD27 */
                DerefOf (WGDY [One]) [0x11] = SD28 /* \SD28 */
                DerefOf (WGDY [One]) [0x12] = SD29 /* \SD29 */
                DerefOf (WGDY [One]) [0x13] = SD31 /* \SD31 */
                DerefOf (WGDY [One]) [0x14] = SD32 /* \SD32 */
                DerefOf (WGDY [One]) [0x15] = SD33 /* \SD33 */
                DerefOf (WGDY [One]) [0x16] = SD34 /* \SD34 */
                DerefOf (WGDY [One]) [0x17] = SD35 /* \SD35 */
                DerefOf (WGDY [One]) [0x18] = SD36 /* \SD36 */
                DerefOf (WGDY [One]) [0x19] = SD37 /* \SD37 */
                DerefOf (WGDY [One]) [0x1A] = SD38 /* \SD38 */
                DerefOf (WGDY [One]) [0x1B] = SD39 /* \SD39 */
                Return (WGDY) /* \_SB_.PC00.RP17.PXSX.WGDY */
            }

            Name (ECKY, Package (0x02)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    Zero
                }
            })
            Method (ECKV, 0, Serialized)
            {
                DerefOf (ECKY [One]) [One] = CECV /* \CECV */
                Return (ECKY) /* \_SB_.PC00.RP17.PXSX.ECKY */
            }

            Name (PPAY, Package (0x02)
            {
                One, 
                Package (0x18)
                {
                    0x07, 
                    Zero, 
                    0x18, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x18, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28
                }
            })
            Method (PPAG, 0, Serialized)
            {
                DerefOf (PPAY [One]) [One] = WAGE /* \WAGE */
                DerefOf (PPAY [One]) [0x02] = AGA1 /* \AGA1 */
                DerefOf (PPAY [One]) [0x03] = AGA2 /* \AGA2 */
                DerefOf (PPAY [One]) [0x04] = AGA3 /* \AGA3 */
                DerefOf (PPAY [One]) [0x05] = AGA4 /* \AGA4 */
                DerefOf (PPAY [One]) [0x06] = AGA5 /* \AGA5 */
                DerefOf (PPAY [One]) [0x07] = AGA6 /* \AGA6 */
                DerefOf (PPAY [One]) [0x08] = AGA7 /* \AGA7 */
                DerefOf (PPAY [One]) [0x09] = AGA8 /* \AGA8 */
                DerefOf (PPAY [One]) [0x0A] = AGA9 /* \AGA9 */
                DerefOf (PPAY [One]) [0x0B] = AGAA /* \AGAA */
                DerefOf (PPAY [One]) [0x0C] = AGAB /* \AGAB */
                DerefOf (PPAY [One]) [0x0D] = AGB1 /* \AGB1 */
                DerefOf (PPAY [One]) [0x0E] = AGB2 /* \AGB2 */
                DerefOf (PPAY [One]) [0x0F] = AGB3 /* \AGB3 */
                DerefOf (PPAY [One]) [0x10] = AGB4 /* \AGB4 */
                DerefOf (PPAY [One]) [0x11] = AGB5 /* \AGB5 */
                DerefOf (PPAY [One]) [0x12] = AGB6 /* \AGB6 */
                DerefOf (PPAY [One]) [0x13] = AGB7 /* \AGB7 */
                DerefOf (PPAY [One]) [0x14] = AGB8 /* \AGB8 */
                DerefOf (PPAY [One]) [0x15] = AGB9 /* \AGB9 */
                DerefOf (PPAY [One]) [0x16] = AGBA /* \AGBA */
                DerefOf (PPAY [One]) [0x17] = AGBB /* \AGBB */
                Return (PPAY) /* \_SB_.PC00.RP17.PXSX.PPAY */
            }

            Name (SADX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    0x80000000
                }, 

                Package (0x02)
                {
                    0x12, 
                    0x80000000
                }
            })
            Method (SADS, 0, Serialized)
            {
                DerefOf (SADX [One]) [One] = ATDV /* \ATDV */
                DerefOf (SADX [0x02]) [One] = ATDV /* \ATDV */
                Return (SADX) /* \_SB_.PC00.RP17.PXSX.SADX */
            }

            Name (GPCX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }, 

                Package (0x02)
                {
                    0x12, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }
            })
            Method (GPC, 0, Serialized)
            {
                Return (GPCX) /* \_SB_.PC00.RP17.PXSX.GPCX */
            }
        }

        If (((WWEN != Zero) && (WWRP == SLOT)))
        {
            Method (SHRF, 0, NotSerialized)
            {
                PSD0 (SLOT)
                SPCO (WCLK, One)
                SGOV (WFCP, PFCP)
                Sleep (TN2B)
                SGOV (WBRS, (~PBRS & One))
                Sleep (TB2R)
                SGOV (PRST, (~WPRP & One))
                L23D ()
            }

            Method (_RST, 0, Serialized)  // _RST: Device Reset
            {
                If ((WWEN == 0x02))
                {
                    Local0 = Acquire (WWMT, 0x03E8)
                    If ((Local0 == Zero))
                    {
                        ADBG ("Start WWAN FLDR")
                        DL23 ()
                        SGOV (WBRS, PBRS)
                        Sleep (TBTG)
                        SHRF ()
                        ADBG ("End WWAN FLDR")
                        Release (WWMT)
                    }
                }
                Else
                {
                    SGOV (WBRS, PBRS)
                    Sleep (0xC8)
                    Notify (PXSX, One) // Device Check
                    SGOV (PRST, (~WPRP & One))
                    SGOV (WBRS, (~PBRS & One))
                    Sleep (0xC8)
                    Local0 = Zero
                    While ((LASX == Zero))
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    Sleep (0x0A)
                    Notify (PXSX, One) // Device Check
                }
            }

            PowerResource (MRST, 0x05, 0x0000)
            {
                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    Return (One)
                }

                Method (_ON, 0, Serialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                {
                }

                Method (_RST, 0, Serialized)  // _RST: Device Reset
                {
                    Local0 = Acquire (WWMT, 0x03E8)
                    If ((Local0 == Zero))
                    {
                        ADBG ("Start WWAN PR _RST")
                        DL23 ()
                        SGOV (WBRS, PBRS)
                        SPCO (WCLK, Zero)
                        Sleep (TB2F)
                        SGOV (WFCP, (~PFCP & One))
                        Sleep (TFDI)
                        SHRF ()
                        Release (WWMT)
                    }
                }
            }
        }

        If ((WIST () || ((WWEN != Zero) && (WWRP == SLOT))))
        {
            PowerResource (DRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    If ((DCAP & 0x10000000))
                    {
                        Local0 = DCTR /* \_SB_.PC00.RP17.PXSX.DCTR */
                        Local0 |= 0x8000
                        DCTR = Local0
                    }
                }
            }

            Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
            {
                If (WIST ())
                {
                    If (CondRefOf (WRST))
                    {
                        Return (Package (0x01)
                        {
                            WRST
                        })
                    }
                }

                If (((WWEN != Zero) && (WWRP == SLOT)))
                {
                    If (CondRefOf (MRST))
                    {
                        Return (Package (0x01)
                        {
                            MRST
                        })
                    }
                }

                Return (Package (0x01)
                {
                    DRST
                })
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (WIST ())
                {
                    If ((Arg0 == ToUUID ("f21202bf-8f78-4dc6-a5b3-1f738e285ade") /* Unknown UUID */))
                    {
                        If ((Arg2 == Zero))
                        {
                            If ((Arg1 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x0F                                             // .
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }
                        }

                        If ((Arg2 == One))
                        {
                            Local0 = ACSD /* \ACSD */
                            Return (Local0)
                        }

                        If ((Arg2 == 0x02))
                        {
                            Local0 = I5BS /* \I5BS */
                            Return (Local0)
                        }

                        If ((Arg2 == 0x03))
                        {
                            Local0 = UHBS /* \UHBS */
                            Return (Local0)
                        }

                        Return (Zero)
                    }
                }

                If (((WWEN != Zero) && (WWRP == SLOT)))
                {
                    If ((Arg0 == ToUUID ("bad01b75-22a8-4f48-8792-bdde9467747d") /* Unknown UUID */))
                    {
                        If ((Arg2 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x09                                             // .
                            })
                        }

                        If ((Arg2 == One)) {}
                        If ((Arg2 == 0x02)) {}
                        If ((Arg2 == 0x03))
                        {
                            If ((WRTO == One)) {}
                            ElseIf ((WRTO == 0x03)) {}
                            Else
                            {
                            }

                            Return (WRTO) /* \WRTO */
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }

    Scope (_SB.PC00.RP18.PXSX)
    {
        OperationRegion (RPXX, SystemMemory, GMIO (^_ADR (), _ADR), 0x10)
        Field (RPXX, AnyAcc, NoLock, Preserve)
        {
            VDID,   32
        }

        OperationRegion (FLDR, SystemMemory, (GMIO (^_ADR (), _ADR) + 0x44), 0x06)
        Field (FLDR, ByteAcc, NoLock, Preserve)
        {
            DCAP,   32, 
            DCTR,   16
        }

        Method (WIST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x095A8086)
                    {
                        Return (One)
                    }
                    Case (0x095B8086)
                    {
                        Return (One)
                    }
                    Case (0x31658086)
                    {
                        Return (One)
                    }
                    Case (0x31668086)
                    {
                        Return (One)
                    }
                    Case (0x08B18086)
                    {
                        Return (One)
                    }
                    Case (0x08B28086)
                    {
                        Return (One)
                    }
                    Case (0x08B38086)
                    {
                        Return (One)
                    }
                    Case (0x08B48086)
                    {
                        Return (One)
                    }
                    Case (0x24F38086)
                    {
                        Return (One)
                    }
                    Case (0x24F48086)
                    {
                        Return (One)
                    }
                    Case (0x24F58086)
                    {
                        Return (One)
                    }
                    Case (0x24F68086)
                    {
                        Return (One)
                    }
                    Case (0x24FD8086)
                    {
                        Return (One)
                    }
                    Case (0x24FB8086)
                    {
                        Return (One)
                    }
                    Case (0x25268086)
                    {
                        Return (One)
                    }
                    Case (0x271B8086)
                    {
                        Return (One)
                    }
                    Case (0x27238086)
                    {
                        Return (One)
                    }
                    Case (0x27258086)
                    {
                        Return (One)
                    }
                    Case (0x885210EC)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (WWST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x73608086)
                    {
                        Return (One)
                    }
                    Case (0x75608086)
                    {
                        Return (One)
                    }
                    Case (0x4D7514C3)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        If (WIST ())
        {
            PowerResource (WRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    If ((DCAP & 0x10000000))
                    {
                        Local0 = DCTR /* \_SB_.PC00.RP18.PXSX.DCTR */
                        Local0 |= 0x8000
                        DCTR = Local0
                    }
                }
            }

            Name (SPLX, Package (0x02)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (SPLC, 0, Serialized)
            {
                DerefOf (SPLX [One]) [Zero] = DOM1 /* \DOM1 */
                DerefOf (SPLX [One]) [One] = LIM1 /* \LIM1 */
                DerefOf (SPLX [One]) [0x02] = TIM1 /* \TIM1 */
                Return (SPLX) /* \_SB_.PC00.RP18.PXSX.SPLX */
            }

            Name (WANX, Package (0x03)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (WAND, 0, Serialized)
            {
                DerefOf (WANX [One]) [Zero] = Zero
                DerefOf (WANX [One]) [One] = TRD0 /* \TRD0 */
                DerefOf (WANX [One]) [0x02] = TRL0 /* \TRL0 */
                DerefOf (WANX [0x02]) [Zero] = One
                DerefOf (WANX [0x02]) [One] = TRD1 /* \TRD1 */
                DerefOf (WANX [0x02]) [0x02] = TRL1 /* \TRL1 */
                Return (WANX) /* \_SB_.PC00.RP18.PXSX.WANX */
            }

            Name (WRDX, Package (0x02)
            {
                Zero, 
                Package (0x02)
                {
                    0x80000000, 
                    0x8000
                }
            })
            Method (WRDD, 0, Serialized)
            {
                DerefOf (WRDX [One]) [Zero] = WDM1 /* \WDM1 */
                DerefOf (WRDX [One]) [One] = CID1 /* \CID1 */
                Return (WRDX) /* \_SB_.PC00.RP18.PXSX.WRDX */
            }

            Name (WRDY, Package (0x02)
            {
                One, 
                Package (0x18)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WRDS, 0, Serialized)
            {
                DerefOf (WRDY [One]) [One] = STXE /* \STXE */
                DerefOf (WRDY [One]) [0x02] = ST10 /* \ST10 */
                DerefOf (WRDY [One]) [0x03] = ST11 /* \ST11 */
                DerefOf (WRDY [One]) [0x04] = ST12 /* \ST12 */
                DerefOf (WRDY [One]) [0x05] = ST13 /* \ST13 */
                DerefOf (WRDY [One]) [0x06] = ST14 /* \ST14 */
                DerefOf (WRDY [One]) [0x07] = ST15 /* \ST15 */
                DerefOf (WRDY [One]) [0x08] = ST16 /* \ST16 */
                DerefOf (WRDY [One]) [0x09] = ST17 /* \ST17 */
                DerefOf (WRDY [One]) [0x0A] = ST18 /* \ST18 */
                DerefOf (WRDY [One]) [0x0B] = ST19 /* \ST19 */
                DerefOf (WRDY [One]) [0x0C] = ST50 /* \ST50 */
                DerefOf (WRDY [One]) [0x0D] = ST51 /* \ST51 */
                DerefOf (WRDY [One]) [0x0E] = ST52 /* \ST52 */
                DerefOf (WRDY [One]) [0x0F] = ST53 /* \ST53 */
                DerefOf (WRDY [One]) [0x10] = ST54 /* \ST54 */
                DerefOf (WRDY [One]) [0x11] = ST55 /* \ST55 */
                DerefOf (WRDY [One]) [0x12] = ST56 /* \ST56 */
                DerefOf (WRDY [One]) [0x13] = ST57 /* \ST57 */
                DerefOf (WRDY [One]) [0x14] = ST58 /* \ST58 */
                DerefOf (WRDY [One]) [0x15] = ST59 /* \ST59 */
                DerefOf (WRDY [One]) [0x16] = ST5A /* \ST5A */
                DerefOf (WRDY [One]) [0x17] = ST5B /* \ST5B */
                Return (WRDY) /* \_SB_.PC00.RP18.PXSX.WRDY */
            }

            Name (EWRY, Package (0x02)
            {
                One, 
                Package (0x45)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (EWRD, 0, Serialized)
            {
                DerefOf (EWRY [One]) [One] = STDE /* \STDE */
                DerefOf (EWRY [One]) [0x02] = STRS /* \STRS */
                DerefOf (EWRY [One]) [0x03] = ST20 /* \ST20 */
                DerefOf (EWRY [One]) [0x04] = ST21 /* \ST21 */
                DerefOf (EWRY [One]) [0x05] = ST22 /* \ST22 */
                DerefOf (EWRY [One]) [0x06] = ST23 /* \ST23 */
                DerefOf (EWRY [One]) [0x07] = ST24 /* \ST24 */
                DerefOf (EWRY [One]) [0x08] = ST25 /* \ST25 */
                DerefOf (EWRY [One]) [0x09] = ST26 /* \ST26 */
                DerefOf (EWRY [One]) [0x0A] = ST27 /* \ST27 */
                DerefOf (EWRY [One]) [0x0B] = ST28 /* \ST28 */
                DerefOf (EWRY [One]) [0x0C] = ST29 /* \ST29 */
                DerefOf (EWRY [One]) [0x0D] = ST60 /* \ST60 */
                DerefOf (EWRY [One]) [0x0E] = ST61 /* \ST61 */
                DerefOf (EWRY [One]) [0x0F] = ST62 /* \ST62 */
                DerefOf (EWRY [One]) [0x10] = ST63 /* \ST63 */
                DerefOf (EWRY [One]) [0x11] = ST64 /* \ST64 */
                DerefOf (EWRY [One]) [0x12] = ST65 /* \ST65 */
                DerefOf (EWRY [One]) [0x13] = ST66 /* \ST66 */
                DerefOf (EWRY [One]) [0x14] = ST67 /* \ST67 */
                DerefOf (EWRY [One]) [0x15] = ST68 /* \ST68 */
                DerefOf (EWRY [One]) [0x16] = ST69 /* \ST69 */
                DerefOf (EWRY [One]) [0x17] = ST6A /* \ST6A */
                DerefOf (EWRY [One]) [0x18] = ST6B /* \ST6B */
                DerefOf (EWRY [One]) [0x19] = ST30 /* \ST30 */
                DerefOf (EWRY [One]) [0x1A] = ST31 /* \ST31 */
                DerefOf (EWRY [One]) [0x1B] = ST32 /* \ST32 */
                DerefOf (EWRY [One]) [0x1C] = ST33 /* \ST33 */
                DerefOf (EWRY [One]) [0x1D] = ST34 /* \ST34 */
                DerefOf (EWRY [One]) [0x1E] = ST35 /* \ST35 */
                DerefOf (EWRY [One]) [0x1F] = ST36 /* \ST36 */
                DerefOf (EWRY [One]) [0x20] = ST37 /* \ST37 */
                DerefOf (EWRY [One]) [0x21] = ST38 /* \ST38 */
                DerefOf (EWRY [One]) [0x22] = ST39 /* \ST39 */
                DerefOf (EWRY [One]) [0x23] = ST70 /* \ST70 */
                DerefOf (EWRY [One]) [0x24] = ST71 /* \ST71 */
                DerefOf (EWRY [One]) [0x25] = ST72 /* \ST72 */
                DerefOf (EWRY [One]) [0x26] = ST73 /* \ST73 */
                DerefOf (EWRY [One]) [0x27] = ST74 /* \ST74 */
                DerefOf (EWRY [One]) [0x28] = ST75 /* \ST75 */
                DerefOf (EWRY [One]) [0x29] = ST76 /* \ST76 */
                DerefOf (EWRY [One]) [0x2A] = ST77 /* \ST77 */
                DerefOf (EWRY [One]) [0x2B] = ST78 /* \ST78 */
                DerefOf (EWRY [One]) [0x2C] = ST79 /* \ST79 */
                DerefOf (EWRY [One]) [0x2D] = ST7A /* \ST7A */
                DerefOf (EWRY [One]) [0x2E] = ST7B /* \ST7B */
                DerefOf (EWRY [One]) [0x2F] = ST40 /* \ST40 */
                DerefOf (EWRY [One]) [0x30] = ST41 /* \ST41 */
                DerefOf (EWRY [One]) [0x31] = ST42 /* \ST42 */
                DerefOf (EWRY [One]) [0x32] = ST43 /* \ST43 */
                DerefOf (EWRY [One]) [0x33] = ST44 /* \ST44 */
                DerefOf (EWRY [One]) [0x34] = ST45 /* \ST45 */
                DerefOf (EWRY [One]) [0x35] = ST46 /* \ST46 */
                DerefOf (EWRY [One]) [0x36] = ST47 /* \ST47 */
                DerefOf (EWRY [One]) [0x37] = ST48 /* \ST48 */
                DerefOf (EWRY [One]) [0x38] = ST49 /* \ST49 */
                DerefOf (EWRY [One]) [0x39] = ST80 /* \ST80 */
                DerefOf (EWRY [One]) [0x3A] = ST81 /* \ST81 */
                DerefOf (EWRY [One]) [0x3B] = ST82 /* \ST82 */
                DerefOf (EWRY [One]) [0x3C] = ST83 /* \ST83 */
                DerefOf (EWRY [One]) [0x3D] = ST84 /* \ST84 */
                DerefOf (EWRY [One]) [0x3E] = ST85 /* \ST85 */
                DerefOf (EWRY [One]) [0x3F] = ST86 /* \ST86 */
                DerefOf (EWRY [One]) [0x40] = ST87 /* \ST87 */
                DerefOf (EWRY [One]) [0x41] = ST88 /* \ST88 */
                DerefOf (EWRY [One]) [0x42] = ST89 /* \ST89 */
                DerefOf (EWRY [One]) [0x43] = ST8A /* \ST8A */
                DerefOf (EWRY [One]) [0x44] = ST8B /* \ST8B */
                Return (EWRY) /* \_SB_.PC00.RP18.PXSX.EWRY */
            }

            Name (WGDY, Package (0x02)
            {
                0x02, 
                Package (0x1C)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WGDS, 0, Serialized)
            {
                DerefOf (WGDY [One]) [One] = SD11 /* \SD11 */
                DerefOf (WGDY [One]) [0x02] = SD12 /* \SD12 */
                DerefOf (WGDY [One]) [0x03] = SD13 /* \SD13 */
                DerefOf (WGDY [One]) [0x04] = SD14 /* \SD14 */
                DerefOf (WGDY [One]) [0x05] = SD15 /* \SD15 */
                DerefOf (WGDY [One]) [0x06] = SD16 /* \SD16 */
                DerefOf (WGDY [One]) [0x07] = SD17 /* \SD17 */
                DerefOf (WGDY [One]) [0x08] = SD18 /* \SD18 */
                DerefOf (WGDY [One]) [0x09] = SD19 /* \SD19 */
                DerefOf (WGDY [One]) [0x0A] = SD21 /* \SD21 */
                DerefOf (WGDY [One]) [0x0B] = SD22 /* \SD22 */
                DerefOf (WGDY [One]) [0x0C] = SD23 /* \SD23 */
                DerefOf (WGDY [One]) [0x0D] = SD24 /* \SD24 */
                DerefOf (WGDY [One]) [0x0E] = SD25 /* \SD25 */
                DerefOf (WGDY [One]) [0x0F] = SD26 /* \SD26 */
                DerefOf (WGDY [One]) [0x10] = SD27 /* \SD27 */
                DerefOf (WGDY [One]) [0x11] = SD28 /* \SD28 */
                DerefOf (WGDY [One]) [0x12] = SD29 /* \SD29 */
                DerefOf (WGDY [One]) [0x13] = SD31 /* \SD31 */
                DerefOf (WGDY [One]) [0x14] = SD32 /* \SD32 */
                DerefOf (WGDY [One]) [0x15] = SD33 /* \SD33 */
                DerefOf (WGDY [One]) [0x16] = SD34 /* \SD34 */
                DerefOf (WGDY [One]) [0x17] = SD35 /* \SD35 */
                DerefOf (WGDY [One]) [0x18] = SD36 /* \SD36 */
                DerefOf (WGDY [One]) [0x19] = SD37 /* \SD37 */
                DerefOf (WGDY [One]) [0x1A] = SD38 /* \SD38 */
                DerefOf (WGDY [One]) [0x1B] = SD39 /* \SD39 */
                Return (WGDY) /* \_SB_.PC00.RP18.PXSX.WGDY */
            }

            Name (ECKY, Package (0x02)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    Zero
                }
            })
            Method (ECKV, 0, Serialized)
            {
                DerefOf (ECKY [One]) [One] = CECV /* \CECV */
                Return (ECKY) /* \_SB_.PC00.RP18.PXSX.ECKY */
            }

            Name (PPAY, Package (0x02)
            {
                One, 
                Package (0x18)
                {
                    0x07, 
                    Zero, 
                    0x18, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x18, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28
                }
            })
            Method (PPAG, 0, Serialized)
            {
                DerefOf (PPAY [One]) [One] = WAGE /* \WAGE */
                DerefOf (PPAY [One]) [0x02] = AGA1 /* \AGA1 */
                DerefOf (PPAY [One]) [0x03] = AGA2 /* \AGA2 */
                DerefOf (PPAY [One]) [0x04] = AGA3 /* \AGA3 */
                DerefOf (PPAY [One]) [0x05] = AGA4 /* \AGA4 */
                DerefOf (PPAY [One]) [0x06] = AGA5 /* \AGA5 */
                DerefOf (PPAY [One]) [0x07] = AGA6 /* \AGA6 */
                DerefOf (PPAY [One]) [0x08] = AGA7 /* \AGA7 */
                DerefOf (PPAY [One]) [0x09] = AGA8 /* \AGA8 */
                DerefOf (PPAY [One]) [0x0A] = AGA9 /* \AGA9 */
                DerefOf (PPAY [One]) [0x0B] = AGAA /* \AGAA */
                DerefOf (PPAY [One]) [0x0C] = AGAB /* \AGAB */
                DerefOf (PPAY [One]) [0x0D] = AGB1 /* \AGB1 */
                DerefOf (PPAY [One]) [0x0E] = AGB2 /* \AGB2 */
                DerefOf (PPAY [One]) [0x0F] = AGB3 /* \AGB3 */
                DerefOf (PPAY [One]) [0x10] = AGB4 /* \AGB4 */
                DerefOf (PPAY [One]) [0x11] = AGB5 /* \AGB5 */
                DerefOf (PPAY [One]) [0x12] = AGB6 /* \AGB6 */
                DerefOf (PPAY [One]) [0x13] = AGB7 /* \AGB7 */
                DerefOf (PPAY [One]) [0x14] = AGB8 /* \AGB8 */
                DerefOf (PPAY [One]) [0x15] = AGB9 /* \AGB9 */
                DerefOf (PPAY [One]) [0x16] = AGBA /* \AGBA */
                DerefOf (PPAY [One]) [0x17] = AGBB /* \AGBB */
                Return (PPAY) /* \_SB_.PC00.RP18.PXSX.PPAY */
            }

            Name (SADX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    0x80000000
                }, 

                Package (0x02)
                {
                    0x12, 
                    0x80000000
                }
            })
            Method (SADS, 0, Serialized)
            {
                DerefOf (SADX [One]) [One] = ATDV /* \ATDV */
                DerefOf (SADX [0x02]) [One] = ATDV /* \ATDV */
                Return (SADX) /* \_SB_.PC00.RP18.PXSX.SADX */
            }

            Name (GPCX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }, 

                Package (0x02)
                {
                    0x12, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }
            })
            Method (GPC, 0, Serialized)
            {
                Return (GPCX) /* \_SB_.PC00.RP18.PXSX.GPCX */
            }
        }

        If (((WWEN != Zero) && (WWRP == SLOT)))
        {
            Method (SHRF, 0, NotSerialized)
            {
                PSD0 (SLOT)
                SPCO (WCLK, One)
                SGOV (WFCP, PFCP)
                Sleep (TN2B)
                SGOV (WBRS, (~PBRS & One))
                Sleep (TB2R)
                SGOV (PRST, (~WPRP & One))
                L23D ()
            }

            Method (_RST, 0, Serialized)  // _RST: Device Reset
            {
                If ((WWEN == 0x02))
                {
                    Local0 = Acquire (WWMT, 0x03E8)
                    If ((Local0 == Zero))
                    {
                        ADBG ("Start WWAN FLDR")
                        DL23 ()
                        SGOV (WBRS, PBRS)
                        Sleep (TBTG)
                        SHRF ()
                        ADBG ("End WWAN FLDR")
                        Release (WWMT)
                    }
                }
                Else
                {
                    SGOV (WBRS, PBRS)
                    Sleep (0xC8)
                    Notify (PXSX, One) // Device Check
                    SGOV (PRST, (~WPRP & One))
                    SGOV (WBRS, (~PBRS & One))
                    Sleep (0xC8)
                    Local0 = Zero
                    While ((LASX == Zero))
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    Sleep (0x0A)
                    Notify (PXSX, One) // Device Check
                }
            }

            PowerResource (MRST, 0x05, 0x0000)
            {
                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    Return (One)
                }

                Method (_ON, 0, Serialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                {
                }

                Method (_RST, 0, Serialized)  // _RST: Device Reset
                {
                    Local0 = Acquire (WWMT, 0x03E8)
                    If ((Local0 == Zero))
                    {
                        ADBG ("Start WWAN PR _RST")
                        DL23 ()
                        SGOV (WBRS, PBRS)
                        SPCO (WCLK, Zero)
                        Sleep (TB2F)
                        SGOV (WFCP, (~PFCP & One))
                        Sleep (TFDI)
                        SHRF ()
                        Release (WWMT)
                    }
                }
            }
        }

        If ((WIST () || ((WWEN != Zero) && (WWRP == SLOT))))
        {
            PowerResource (DRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    If ((DCAP & 0x10000000))
                    {
                        Local0 = DCTR /* \_SB_.PC00.RP18.PXSX.DCTR */
                        Local0 |= 0x8000
                        DCTR = Local0
                    }
                }
            }

            Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
            {
                If (WIST ())
                {
                    If (CondRefOf (WRST))
                    {
                        Return (Package (0x01)
                        {
                            WRST
                        })
                    }
                }

                If (((WWEN != Zero) && (WWRP == SLOT)))
                {
                    If (CondRefOf (MRST))
                    {
                        Return (Package (0x01)
                        {
                            MRST
                        })
                    }
                }

                Return (Package (0x01)
                {
                    DRST
                })
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (WIST ())
                {
                    If ((Arg0 == ToUUID ("f21202bf-8f78-4dc6-a5b3-1f738e285ade") /* Unknown UUID */))
                    {
                        If ((Arg2 == Zero))
                        {
                            If ((Arg1 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x0F                                             // .
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }
                        }

                        If ((Arg2 == One))
                        {
                            Local0 = ACSD /* \ACSD */
                            Return (Local0)
                        }

                        If ((Arg2 == 0x02))
                        {
                            Local0 = I5BS /* \I5BS */
                            Return (Local0)
                        }

                        If ((Arg2 == 0x03))
                        {
                            Local0 = UHBS /* \UHBS */
                            Return (Local0)
                        }

                        Return (Zero)
                    }
                }

                If (((WWEN != Zero) && (WWRP == SLOT)))
                {
                    If ((Arg0 == ToUUID ("bad01b75-22a8-4f48-8792-bdde9467747d") /* Unknown UUID */))
                    {
                        If ((Arg2 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x09                                             // .
                            })
                        }

                        If ((Arg2 == One)) {}
                        If ((Arg2 == 0x02)) {}
                        If ((Arg2 == 0x03))
                        {
                            If ((WRTO == One)) {}
                            ElseIf ((WRTO == 0x03)) {}
                            Else
                            {
                            }

                            Return (WRTO) /* \WRTO */
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }

    Scope (_SB.PC00.RP19.PXSX)
    {
        OperationRegion (RPXX, SystemMemory, GMIO (^_ADR (), _ADR), 0x10)
        Field (RPXX, AnyAcc, NoLock, Preserve)
        {
            VDID,   32
        }

        OperationRegion (FLDR, SystemMemory, (GMIO (^_ADR (), _ADR) + 0x44), 0x06)
        Field (FLDR, ByteAcc, NoLock, Preserve)
        {
            DCAP,   32, 
            DCTR,   16
        }

        Method (WIST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x095A8086)
                    {
                        Return (One)
                    }
                    Case (0x095B8086)
                    {
                        Return (One)
                    }
                    Case (0x31658086)
                    {
                        Return (One)
                    }
                    Case (0x31668086)
                    {
                        Return (One)
                    }
                    Case (0x08B18086)
                    {
                        Return (One)
                    }
                    Case (0x08B28086)
                    {
                        Return (One)
                    }
                    Case (0x08B38086)
                    {
                        Return (One)
                    }
                    Case (0x08B48086)
                    {
                        Return (One)
                    }
                    Case (0x24F38086)
                    {
                        Return (One)
                    }
                    Case (0x24F48086)
                    {
                        Return (One)
                    }
                    Case (0x24F58086)
                    {
                        Return (One)
                    }
                    Case (0x24F68086)
                    {
                        Return (One)
                    }
                    Case (0x24FD8086)
                    {
                        Return (One)
                    }
                    Case (0x24FB8086)
                    {
                        Return (One)
                    }
                    Case (0x25268086)
                    {
                        Return (One)
                    }
                    Case (0x271B8086)
                    {
                        Return (One)
                    }
                    Case (0x27238086)
                    {
                        Return (One)
                    }
                    Case (0x27258086)
                    {
                        Return (One)
                    }
                    Case (0x885210EC)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (WWST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x73608086)
                    {
                        Return (One)
                    }
                    Case (0x75608086)
                    {
                        Return (One)
                    }
                    Case (0x4D7514C3)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        If (WIST ())
        {
            PowerResource (WRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    If ((DCAP & 0x10000000))
                    {
                        Local0 = DCTR /* \_SB_.PC00.RP19.PXSX.DCTR */
                        Local0 |= 0x8000
                        DCTR = Local0
                    }
                }
            }

            Name (SPLX, Package (0x02)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (SPLC, 0, Serialized)
            {
                DerefOf (SPLX [One]) [Zero] = DOM1 /* \DOM1 */
                DerefOf (SPLX [One]) [One] = LIM1 /* \LIM1 */
                DerefOf (SPLX [One]) [0x02] = TIM1 /* \TIM1 */
                Return (SPLX) /* \_SB_.PC00.RP19.PXSX.SPLX */
            }

            Name (WANX, Package (0x03)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (WAND, 0, Serialized)
            {
                DerefOf (WANX [One]) [Zero] = Zero
                DerefOf (WANX [One]) [One] = TRD0 /* \TRD0 */
                DerefOf (WANX [One]) [0x02] = TRL0 /* \TRL0 */
                DerefOf (WANX [0x02]) [Zero] = One
                DerefOf (WANX [0x02]) [One] = TRD1 /* \TRD1 */
                DerefOf (WANX [0x02]) [0x02] = TRL1 /* \TRL1 */
                Return (WANX) /* \_SB_.PC00.RP19.PXSX.WANX */
            }

            Name (WRDX, Package (0x02)
            {
                Zero, 
                Package (0x02)
                {
                    0x80000000, 
                    0x8000
                }
            })
            Method (WRDD, 0, Serialized)
            {
                DerefOf (WRDX [One]) [Zero] = WDM1 /* \WDM1 */
                DerefOf (WRDX [One]) [One] = CID1 /* \CID1 */
                Return (WRDX) /* \_SB_.PC00.RP19.PXSX.WRDX */
            }

            Name (WRDY, Package (0x02)
            {
                One, 
                Package (0x18)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WRDS, 0, Serialized)
            {
                DerefOf (WRDY [One]) [One] = STXE /* \STXE */
                DerefOf (WRDY [One]) [0x02] = ST10 /* \ST10 */
                DerefOf (WRDY [One]) [0x03] = ST11 /* \ST11 */
                DerefOf (WRDY [One]) [0x04] = ST12 /* \ST12 */
                DerefOf (WRDY [One]) [0x05] = ST13 /* \ST13 */
                DerefOf (WRDY [One]) [0x06] = ST14 /* \ST14 */
                DerefOf (WRDY [One]) [0x07] = ST15 /* \ST15 */
                DerefOf (WRDY [One]) [0x08] = ST16 /* \ST16 */
                DerefOf (WRDY [One]) [0x09] = ST17 /* \ST17 */
                DerefOf (WRDY [One]) [0x0A] = ST18 /* \ST18 */
                DerefOf (WRDY [One]) [0x0B] = ST19 /* \ST19 */
                DerefOf (WRDY [One]) [0x0C] = ST50 /* \ST50 */
                DerefOf (WRDY [One]) [0x0D] = ST51 /* \ST51 */
                DerefOf (WRDY [One]) [0x0E] = ST52 /* \ST52 */
                DerefOf (WRDY [One]) [0x0F] = ST53 /* \ST53 */
                DerefOf (WRDY [One]) [0x10] = ST54 /* \ST54 */
                DerefOf (WRDY [One]) [0x11] = ST55 /* \ST55 */
                DerefOf (WRDY [One]) [0x12] = ST56 /* \ST56 */
                DerefOf (WRDY [One]) [0x13] = ST57 /* \ST57 */
                DerefOf (WRDY [One]) [0x14] = ST58 /* \ST58 */
                DerefOf (WRDY [One]) [0x15] = ST59 /* \ST59 */
                DerefOf (WRDY [One]) [0x16] = ST5A /* \ST5A */
                DerefOf (WRDY [One]) [0x17] = ST5B /* \ST5B */
                Return (WRDY) /* \_SB_.PC00.RP19.PXSX.WRDY */
            }

            Name (EWRY, Package (0x02)
            {
                One, 
                Package (0x45)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (EWRD, 0, Serialized)
            {
                DerefOf (EWRY [One]) [One] = STDE /* \STDE */
                DerefOf (EWRY [One]) [0x02] = STRS /* \STRS */
                DerefOf (EWRY [One]) [0x03] = ST20 /* \ST20 */
                DerefOf (EWRY [One]) [0x04] = ST21 /* \ST21 */
                DerefOf (EWRY [One]) [0x05] = ST22 /* \ST22 */
                DerefOf (EWRY [One]) [0x06] = ST23 /* \ST23 */
                DerefOf (EWRY [One]) [0x07] = ST24 /* \ST24 */
                DerefOf (EWRY [One]) [0x08] = ST25 /* \ST25 */
                DerefOf (EWRY [One]) [0x09] = ST26 /* \ST26 */
                DerefOf (EWRY [One]) [0x0A] = ST27 /* \ST27 */
                DerefOf (EWRY [One]) [0x0B] = ST28 /* \ST28 */
                DerefOf (EWRY [One]) [0x0C] = ST29 /* \ST29 */
                DerefOf (EWRY [One]) [0x0D] = ST60 /* \ST60 */
                DerefOf (EWRY [One]) [0x0E] = ST61 /* \ST61 */
                DerefOf (EWRY [One]) [0x0F] = ST62 /* \ST62 */
                DerefOf (EWRY [One]) [0x10] = ST63 /* \ST63 */
                DerefOf (EWRY [One]) [0x11] = ST64 /* \ST64 */
                DerefOf (EWRY [One]) [0x12] = ST65 /* \ST65 */
                DerefOf (EWRY [One]) [0x13] = ST66 /* \ST66 */
                DerefOf (EWRY [One]) [0x14] = ST67 /* \ST67 */
                DerefOf (EWRY [One]) [0x15] = ST68 /* \ST68 */
                DerefOf (EWRY [One]) [0x16] = ST69 /* \ST69 */
                DerefOf (EWRY [One]) [0x17] = ST6A /* \ST6A */
                DerefOf (EWRY [One]) [0x18] = ST6B /* \ST6B */
                DerefOf (EWRY [One]) [0x19] = ST30 /* \ST30 */
                DerefOf (EWRY [One]) [0x1A] = ST31 /* \ST31 */
                DerefOf (EWRY [One]) [0x1B] = ST32 /* \ST32 */
                DerefOf (EWRY [One]) [0x1C] = ST33 /* \ST33 */
                DerefOf (EWRY [One]) [0x1D] = ST34 /* \ST34 */
                DerefOf (EWRY [One]) [0x1E] = ST35 /* \ST35 */
                DerefOf (EWRY [One]) [0x1F] = ST36 /* \ST36 */
                DerefOf (EWRY [One]) [0x20] = ST37 /* \ST37 */
                DerefOf (EWRY [One]) [0x21] = ST38 /* \ST38 */
                DerefOf (EWRY [One]) [0x22] = ST39 /* \ST39 */
                DerefOf (EWRY [One]) [0x23] = ST70 /* \ST70 */
                DerefOf (EWRY [One]) [0x24] = ST71 /* \ST71 */
                DerefOf (EWRY [One]) [0x25] = ST72 /* \ST72 */
                DerefOf (EWRY [One]) [0x26] = ST73 /* \ST73 */
                DerefOf (EWRY [One]) [0x27] = ST74 /* \ST74 */
                DerefOf (EWRY [One]) [0x28] = ST75 /* \ST75 */
                DerefOf (EWRY [One]) [0x29] = ST76 /* \ST76 */
                DerefOf (EWRY [One]) [0x2A] = ST77 /* \ST77 */
                DerefOf (EWRY [One]) [0x2B] = ST78 /* \ST78 */
                DerefOf (EWRY [One]) [0x2C] = ST79 /* \ST79 */
                DerefOf (EWRY [One]) [0x2D] = ST7A /* \ST7A */
                DerefOf (EWRY [One]) [0x2E] = ST7B /* \ST7B */
                DerefOf (EWRY [One]) [0x2F] = ST40 /* \ST40 */
                DerefOf (EWRY [One]) [0x30] = ST41 /* \ST41 */
                DerefOf (EWRY [One]) [0x31] = ST42 /* \ST42 */
                DerefOf (EWRY [One]) [0x32] = ST43 /* \ST43 */
                DerefOf (EWRY [One]) [0x33] = ST44 /* \ST44 */
                DerefOf (EWRY [One]) [0x34] = ST45 /* \ST45 */
                DerefOf (EWRY [One]) [0x35] = ST46 /* \ST46 */
                DerefOf (EWRY [One]) [0x36] = ST47 /* \ST47 */
                DerefOf (EWRY [One]) [0x37] = ST48 /* \ST48 */
                DerefOf (EWRY [One]) [0x38] = ST49 /* \ST49 */
                DerefOf (EWRY [One]) [0x39] = ST80 /* \ST80 */
                DerefOf (EWRY [One]) [0x3A] = ST81 /* \ST81 */
                DerefOf (EWRY [One]) [0x3B] = ST82 /* \ST82 */
                DerefOf (EWRY [One]) [0x3C] = ST83 /* \ST83 */
                DerefOf (EWRY [One]) [0x3D] = ST84 /* \ST84 */
                DerefOf (EWRY [One]) [0x3E] = ST85 /* \ST85 */
                DerefOf (EWRY [One]) [0x3F] = ST86 /* \ST86 */
                DerefOf (EWRY [One]) [0x40] = ST87 /* \ST87 */
                DerefOf (EWRY [One]) [0x41] = ST88 /* \ST88 */
                DerefOf (EWRY [One]) [0x42] = ST89 /* \ST89 */
                DerefOf (EWRY [One]) [0x43] = ST8A /* \ST8A */
                DerefOf (EWRY [One]) [0x44] = ST8B /* \ST8B */
                Return (EWRY) /* \_SB_.PC00.RP19.PXSX.EWRY */
            }

            Name (WGDY, Package (0x02)
            {
                0x02, 
                Package (0x1C)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WGDS, 0, Serialized)
            {
                DerefOf (WGDY [One]) [One] = SD11 /* \SD11 */
                DerefOf (WGDY [One]) [0x02] = SD12 /* \SD12 */
                DerefOf (WGDY [One]) [0x03] = SD13 /* \SD13 */
                DerefOf (WGDY [One]) [0x04] = SD14 /* \SD14 */
                DerefOf (WGDY [One]) [0x05] = SD15 /* \SD15 */
                DerefOf (WGDY [One]) [0x06] = SD16 /* \SD16 */
                DerefOf (WGDY [One]) [0x07] = SD17 /* \SD17 */
                DerefOf (WGDY [One]) [0x08] = SD18 /* \SD18 */
                DerefOf (WGDY [One]) [0x09] = SD19 /* \SD19 */
                DerefOf (WGDY [One]) [0x0A] = SD21 /* \SD21 */
                DerefOf (WGDY [One]) [0x0B] = SD22 /* \SD22 */
                DerefOf (WGDY [One]) [0x0C] = SD23 /* \SD23 */
                DerefOf (WGDY [One]) [0x0D] = SD24 /* \SD24 */
                DerefOf (WGDY [One]) [0x0E] = SD25 /* \SD25 */
                DerefOf (WGDY [One]) [0x0F] = SD26 /* \SD26 */
                DerefOf (WGDY [One]) [0x10] = SD27 /* \SD27 */
                DerefOf (WGDY [One]) [0x11] = SD28 /* \SD28 */
                DerefOf (WGDY [One]) [0x12] = SD29 /* \SD29 */
                DerefOf (WGDY [One]) [0x13] = SD31 /* \SD31 */
                DerefOf (WGDY [One]) [0x14] = SD32 /* \SD32 */
                DerefOf (WGDY [One]) [0x15] = SD33 /* \SD33 */
                DerefOf (WGDY [One]) [0x16] = SD34 /* \SD34 */
                DerefOf (WGDY [One]) [0x17] = SD35 /* \SD35 */
                DerefOf (WGDY [One]) [0x18] = SD36 /* \SD36 */
                DerefOf (WGDY [One]) [0x19] = SD37 /* \SD37 */
                DerefOf (WGDY [One]) [0x1A] = SD38 /* \SD38 */
                DerefOf (WGDY [One]) [0x1B] = SD39 /* \SD39 */
                Return (WGDY) /* \_SB_.PC00.RP19.PXSX.WGDY */
            }

            Name (ECKY, Package (0x02)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    Zero
                }
            })
            Method (ECKV, 0, Serialized)
            {
                DerefOf (ECKY [One]) [One] = CECV /* \CECV */
                Return (ECKY) /* \_SB_.PC00.RP19.PXSX.ECKY */
            }

            Name (PPAY, Package (0x02)
            {
                One, 
                Package (0x18)
                {
                    0x07, 
                    Zero, 
                    0x18, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x18, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28
                }
            })
            Method (PPAG, 0, Serialized)
            {
                DerefOf (PPAY [One]) [One] = WAGE /* \WAGE */
                DerefOf (PPAY [One]) [0x02] = AGA1 /* \AGA1 */
                DerefOf (PPAY [One]) [0x03] = AGA2 /* \AGA2 */
                DerefOf (PPAY [One]) [0x04] = AGA3 /* \AGA3 */
                DerefOf (PPAY [One]) [0x05] = AGA4 /* \AGA4 */
                DerefOf (PPAY [One]) [0x06] = AGA5 /* \AGA5 */
                DerefOf (PPAY [One]) [0x07] = AGA6 /* \AGA6 */
                DerefOf (PPAY [One]) [0x08] = AGA7 /* \AGA7 */
                DerefOf (PPAY [One]) [0x09] = AGA8 /* \AGA8 */
                DerefOf (PPAY [One]) [0x0A] = AGA9 /* \AGA9 */
                DerefOf (PPAY [One]) [0x0B] = AGAA /* \AGAA */
                DerefOf (PPAY [One]) [0x0C] = AGAB /* \AGAB */
                DerefOf (PPAY [One]) [0x0D] = AGB1 /* \AGB1 */
                DerefOf (PPAY [One]) [0x0E] = AGB2 /* \AGB2 */
                DerefOf (PPAY [One]) [0x0F] = AGB3 /* \AGB3 */
                DerefOf (PPAY [One]) [0x10] = AGB4 /* \AGB4 */
                DerefOf (PPAY [One]) [0x11] = AGB5 /* \AGB5 */
                DerefOf (PPAY [One]) [0x12] = AGB6 /* \AGB6 */
                DerefOf (PPAY [One]) [0x13] = AGB7 /* \AGB7 */
                DerefOf (PPAY [One]) [0x14] = AGB8 /* \AGB8 */
                DerefOf (PPAY [One]) [0x15] = AGB9 /* \AGB9 */
                DerefOf (PPAY [One]) [0x16] = AGBA /* \AGBA */
                DerefOf (PPAY [One]) [0x17] = AGBB /* \AGBB */
                Return (PPAY) /* \_SB_.PC00.RP19.PXSX.PPAY */
            }

            Name (SADX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    0x80000000
                }, 

                Package (0x02)
                {
                    0x12, 
                    0x80000000
                }
            })
            Method (SADS, 0, Serialized)
            {
                DerefOf (SADX [One]) [One] = ATDV /* \ATDV */
                DerefOf (SADX [0x02]) [One] = ATDV /* \ATDV */
                Return (SADX) /* \_SB_.PC00.RP19.PXSX.SADX */
            }

            Name (GPCX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }, 

                Package (0x02)
                {
                    0x12, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }
            })
            Method (GPC, 0, Serialized)
            {
                Return (GPCX) /* \_SB_.PC00.RP19.PXSX.GPCX */
            }
        }

        If (((WWEN != Zero) && (WWRP == SLOT)))
        {
            Method (SHRF, 0, NotSerialized)
            {
                PSD0 (SLOT)
                SPCO (WCLK, One)
                SGOV (WFCP, PFCP)
                Sleep (TN2B)
                SGOV (WBRS, (~PBRS & One))
                Sleep (TB2R)
                SGOV (PRST, (~WPRP & One))
                L23D ()
            }

            Method (_RST, 0, Serialized)  // _RST: Device Reset
            {
                If ((WWEN == 0x02))
                {
                    Local0 = Acquire (WWMT, 0x03E8)
                    If ((Local0 == Zero))
                    {
                        ADBG ("Start WWAN FLDR")
                        DL23 ()
                        SGOV (WBRS, PBRS)
                        Sleep (TBTG)
                        SHRF ()
                        ADBG ("End WWAN FLDR")
                        Release (WWMT)
                    }
                }
                Else
                {
                    SGOV (WBRS, PBRS)
                    Sleep (0xC8)
                    Notify (PXSX, One) // Device Check
                    SGOV (PRST, (~WPRP & One))
                    SGOV (WBRS, (~PBRS & One))
                    Sleep (0xC8)
                    Local0 = Zero
                    While ((LASX == Zero))
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    Sleep (0x0A)
                    Notify (PXSX, One) // Device Check
                }
            }

            PowerResource (MRST, 0x05, 0x0000)
            {
                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    Return (One)
                }

                Method (_ON, 0, Serialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                {
                }

                Method (_RST, 0, Serialized)  // _RST: Device Reset
                {
                    Local0 = Acquire (WWMT, 0x03E8)
                    If ((Local0 == Zero))
                    {
                        ADBG ("Start WWAN PR _RST")
                        DL23 ()
                        SGOV (WBRS, PBRS)
                        SPCO (WCLK, Zero)
                        Sleep (TB2F)
                        SGOV (WFCP, (~PFCP & One))
                        Sleep (TFDI)
                        SHRF ()
                        Release (WWMT)
                    }
                }
            }
        }

        If ((WIST () || ((WWEN != Zero) && (WWRP == SLOT))))
        {
            PowerResource (DRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    If ((DCAP & 0x10000000))
                    {
                        Local0 = DCTR /* \_SB_.PC00.RP19.PXSX.DCTR */
                        Local0 |= 0x8000
                        DCTR = Local0
                    }
                }
            }

            Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
            {
                If (WIST ())
                {
                    If (CondRefOf (WRST))
                    {
                        Return (Package (0x01)
                        {
                            WRST
                        })
                    }
                }

                If (((WWEN != Zero) && (WWRP == SLOT)))
                {
                    If (CondRefOf (MRST))
                    {
                        Return (Package (0x01)
                        {
                            MRST
                        })
                    }
                }

                Return (Package (0x01)
                {
                    DRST
                })
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (WIST ())
                {
                    If ((Arg0 == ToUUID ("f21202bf-8f78-4dc6-a5b3-1f738e285ade") /* Unknown UUID */))
                    {
                        If ((Arg2 == Zero))
                        {
                            If ((Arg1 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x0F                                             // .
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }
                        }

                        If ((Arg2 == One))
                        {
                            Local0 = ACSD /* \ACSD */
                            Return (Local0)
                        }

                        If ((Arg2 == 0x02))
                        {
                            Local0 = I5BS /* \I5BS */
                            Return (Local0)
                        }

                        If ((Arg2 == 0x03))
                        {
                            Local0 = UHBS /* \UHBS */
                            Return (Local0)
                        }

                        Return (Zero)
                    }
                }

                If (((WWEN != Zero) && (WWRP == SLOT)))
                {
                    If ((Arg0 == ToUUID ("bad01b75-22a8-4f48-8792-bdde9467747d") /* Unknown UUID */))
                    {
                        If ((Arg2 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x09                                             // .
                            })
                        }

                        If ((Arg2 == One)) {}
                        If ((Arg2 == 0x02)) {}
                        If ((Arg2 == 0x03))
                        {
                            If ((WRTO == One)) {}
                            ElseIf ((WRTO == 0x03)) {}
                            Else
                            {
                            }

                            Return (WRTO) /* \WRTO */
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }

    Scope (_SB.PC00.RP20.PXSX)
    {
        OperationRegion (RPXX, SystemMemory, GMIO (^_ADR (), _ADR), 0x10)
        Field (RPXX, AnyAcc, NoLock, Preserve)
        {
            VDID,   32
        }

        OperationRegion (FLDR, SystemMemory, (GMIO (^_ADR (), _ADR) + 0x44), 0x06)
        Field (FLDR, ByteAcc, NoLock, Preserve)
        {
            DCAP,   32, 
            DCTR,   16
        }

        Method (WIST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x095A8086)
                    {
                        Return (One)
                    }
                    Case (0x095B8086)
                    {
                        Return (One)
                    }
                    Case (0x31658086)
                    {
                        Return (One)
                    }
                    Case (0x31668086)
                    {
                        Return (One)
                    }
                    Case (0x08B18086)
                    {
                        Return (One)
                    }
                    Case (0x08B28086)
                    {
                        Return (One)
                    }
                    Case (0x08B38086)
                    {
                        Return (One)
                    }
                    Case (0x08B48086)
                    {
                        Return (One)
                    }
                    Case (0x24F38086)
                    {
                        Return (One)
                    }
                    Case (0x24F48086)
                    {
                        Return (One)
                    }
                    Case (0x24F58086)
                    {
                        Return (One)
                    }
                    Case (0x24F68086)
                    {
                        Return (One)
                    }
                    Case (0x24FD8086)
                    {
                        Return (One)
                    }
                    Case (0x24FB8086)
                    {
                        Return (One)
                    }
                    Case (0x25268086)
                    {
                        Return (One)
                    }
                    Case (0x271B8086)
                    {
                        Return (One)
                    }
                    Case (0x27238086)
                    {
                        Return (One)
                    }
                    Case (0x27258086)
                    {
                        Return (One)
                    }
                    Case (0x885210EC)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (WWST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x73608086)
                    {
                        Return (One)
                    }
                    Case (0x75608086)
                    {
                        Return (One)
                    }
                    Case (0x4D7514C3)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        If (WIST ())
        {
            PowerResource (WRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    If ((DCAP & 0x10000000))
                    {
                        Local0 = DCTR /* \_SB_.PC00.RP20.PXSX.DCTR */
                        Local0 |= 0x8000
                        DCTR = Local0
                    }
                }
            }

            Name (SPLX, Package (0x02)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (SPLC, 0, Serialized)
            {
                DerefOf (SPLX [One]) [Zero] = DOM1 /* \DOM1 */
                DerefOf (SPLX [One]) [One] = LIM1 /* \LIM1 */
                DerefOf (SPLX [One]) [0x02] = TIM1 /* \TIM1 */
                Return (SPLX) /* \_SB_.PC00.RP20.PXSX.SPLX */
            }

            Name (WANX, Package (0x03)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (WAND, 0, Serialized)
            {
                DerefOf (WANX [One]) [Zero] = Zero
                DerefOf (WANX [One]) [One] = TRD0 /* \TRD0 */
                DerefOf (WANX [One]) [0x02] = TRL0 /* \TRL0 */
                DerefOf (WANX [0x02]) [Zero] = One
                DerefOf (WANX [0x02]) [One] = TRD1 /* \TRD1 */
                DerefOf (WANX [0x02]) [0x02] = TRL1 /* \TRL1 */
                Return (WANX) /* \_SB_.PC00.RP20.PXSX.WANX */
            }

            Name (WRDX, Package (0x02)
            {
                Zero, 
                Package (0x02)
                {
                    0x80000000, 
                    0x8000
                }
            })
            Method (WRDD, 0, Serialized)
            {
                DerefOf (WRDX [One]) [Zero] = WDM1 /* \WDM1 */
                DerefOf (WRDX [One]) [One] = CID1 /* \CID1 */
                Return (WRDX) /* \_SB_.PC00.RP20.PXSX.WRDX */
            }

            Name (WRDY, Package (0x02)
            {
                One, 
                Package (0x18)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WRDS, 0, Serialized)
            {
                DerefOf (WRDY [One]) [One] = STXE /* \STXE */
                DerefOf (WRDY [One]) [0x02] = ST10 /* \ST10 */
                DerefOf (WRDY [One]) [0x03] = ST11 /* \ST11 */
                DerefOf (WRDY [One]) [0x04] = ST12 /* \ST12 */
                DerefOf (WRDY [One]) [0x05] = ST13 /* \ST13 */
                DerefOf (WRDY [One]) [0x06] = ST14 /* \ST14 */
                DerefOf (WRDY [One]) [0x07] = ST15 /* \ST15 */
                DerefOf (WRDY [One]) [0x08] = ST16 /* \ST16 */
                DerefOf (WRDY [One]) [0x09] = ST17 /* \ST17 */
                DerefOf (WRDY [One]) [0x0A] = ST18 /* \ST18 */
                DerefOf (WRDY [One]) [0x0B] = ST19 /* \ST19 */
                DerefOf (WRDY [One]) [0x0C] = ST50 /* \ST50 */
                DerefOf (WRDY [One]) [0x0D] = ST51 /* \ST51 */
                DerefOf (WRDY [One]) [0x0E] = ST52 /* \ST52 */
                DerefOf (WRDY [One]) [0x0F] = ST53 /* \ST53 */
                DerefOf (WRDY [One]) [0x10] = ST54 /* \ST54 */
                DerefOf (WRDY [One]) [0x11] = ST55 /* \ST55 */
                DerefOf (WRDY [One]) [0x12] = ST56 /* \ST56 */
                DerefOf (WRDY [One]) [0x13] = ST57 /* \ST57 */
                DerefOf (WRDY [One]) [0x14] = ST58 /* \ST58 */
                DerefOf (WRDY [One]) [0x15] = ST59 /* \ST59 */
                DerefOf (WRDY [One]) [0x16] = ST5A /* \ST5A */
                DerefOf (WRDY [One]) [0x17] = ST5B /* \ST5B */
                Return (WRDY) /* \_SB_.PC00.RP20.PXSX.WRDY */
            }

            Name (EWRY, Package (0x02)
            {
                One, 
                Package (0x45)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (EWRD, 0, Serialized)
            {
                DerefOf (EWRY [One]) [One] = STDE /* \STDE */
                DerefOf (EWRY [One]) [0x02] = STRS /* \STRS */
                DerefOf (EWRY [One]) [0x03] = ST20 /* \ST20 */
                DerefOf (EWRY [One]) [0x04] = ST21 /* \ST21 */
                DerefOf (EWRY [One]) [0x05] = ST22 /* \ST22 */
                DerefOf (EWRY [One]) [0x06] = ST23 /* \ST23 */
                DerefOf (EWRY [One]) [0x07] = ST24 /* \ST24 */
                DerefOf (EWRY [One]) [0x08] = ST25 /* \ST25 */
                DerefOf (EWRY [One]) [0x09] = ST26 /* \ST26 */
                DerefOf (EWRY [One]) [0x0A] = ST27 /* \ST27 */
                DerefOf (EWRY [One]) [0x0B] = ST28 /* \ST28 */
                DerefOf (EWRY [One]) [0x0C] = ST29 /* \ST29 */
                DerefOf (EWRY [One]) [0x0D] = ST60 /* \ST60 */
                DerefOf (EWRY [One]) [0x0E] = ST61 /* \ST61 */
                DerefOf (EWRY [One]) [0x0F] = ST62 /* \ST62 */
                DerefOf (EWRY [One]) [0x10] = ST63 /* \ST63 */
                DerefOf (EWRY [One]) [0x11] = ST64 /* \ST64 */
                DerefOf (EWRY [One]) [0x12] = ST65 /* \ST65 */
                DerefOf (EWRY [One]) [0x13] = ST66 /* \ST66 */
                DerefOf (EWRY [One]) [0x14] = ST67 /* \ST67 */
                DerefOf (EWRY [One]) [0x15] = ST68 /* \ST68 */
                DerefOf (EWRY [One]) [0x16] = ST69 /* \ST69 */
                DerefOf (EWRY [One]) [0x17] = ST6A /* \ST6A */
                DerefOf (EWRY [One]) [0x18] = ST6B /* \ST6B */
                DerefOf (EWRY [One]) [0x19] = ST30 /* \ST30 */
                DerefOf (EWRY [One]) [0x1A] = ST31 /* \ST31 */
                DerefOf (EWRY [One]) [0x1B] = ST32 /* \ST32 */
                DerefOf (EWRY [One]) [0x1C] = ST33 /* \ST33 */
                DerefOf (EWRY [One]) [0x1D] = ST34 /* \ST34 */
                DerefOf (EWRY [One]) [0x1E] = ST35 /* \ST35 */
                DerefOf (EWRY [One]) [0x1F] = ST36 /* \ST36 */
                DerefOf (EWRY [One]) [0x20] = ST37 /* \ST37 */
                DerefOf (EWRY [One]) [0x21] = ST38 /* \ST38 */
                DerefOf (EWRY [One]) [0x22] = ST39 /* \ST39 */
                DerefOf (EWRY [One]) [0x23] = ST70 /* \ST70 */
                DerefOf (EWRY [One]) [0x24] = ST71 /* \ST71 */
                DerefOf (EWRY [One]) [0x25] = ST72 /* \ST72 */
                DerefOf (EWRY [One]) [0x26] = ST73 /* \ST73 */
                DerefOf (EWRY [One]) [0x27] = ST74 /* \ST74 */
                DerefOf (EWRY [One]) [0x28] = ST75 /* \ST75 */
                DerefOf (EWRY [One]) [0x29] = ST76 /* \ST76 */
                DerefOf (EWRY [One]) [0x2A] = ST77 /* \ST77 */
                DerefOf (EWRY [One]) [0x2B] = ST78 /* \ST78 */
                DerefOf (EWRY [One]) [0x2C] = ST79 /* \ST79 */
                DerefOf (EWRY [One]) [0x2D] = ST7A /* \ST7A */
                DerefOf (EWRY [One]) [0x2E] = ST7B /* \ST7B */
                DerefOf (EWRY [One]) [0x2F] = ST40 /* \ST40 */
                DerefOf (EWRY [One]) [0x30] = ST41 /* \ST41 */
                DerefOf (EWRY [One]) [0x31] = ST42 /* \ST42 */
                DerefOf (EWRY [One]) [0x32] = ST43 /* \ST43 */
                DerefOf (EWRY [One]) [0x33] = ST44 /* \ST44 */
                DerefOf (EWRY [One]) [0x34] = ST45 /* \ST45 */
                DerefOf (EWRY [One]) [0x35] = ST46 /* \ST46 */
                DerefOf (EWRY [One]) [0x36] = ST47 /* \ST47 */
                DerefOf (EWRY [One]) [0x37] = ST48 /* \ST48 */
                DerefOf (EWRY [One]) [0x38] = ST49 /* \ST49 */
                DerefOf (EWRY [One]) [0x39] = ST80 /* \ST80 */
                DerefOf (EWRY [One]) [0x3A] = ST81 /* \ST81 */
                DerefOf (EWRY [One]) [0x3B] = ST82 /* \ST82 */
                DerefOf (EWRY [One]) [0x3C] = ST83 /* \ST83 */
                DerefOf (EWRY [One]) [0x3D] = ST84 /* \ST84 */
                DerefOf (EWRY [One]) [0x3E] = ST85 /* \ST85 */
                DerefOf (EWRY [One]) [0x3F] = ST86 /* \ST86 */
                DerefOf (EWRY [One]) [0x40] = ST87 /* \ST87 */
                DerefOf (EWRY [One]) [0x41] = ST88 /* \ST88 */
                DerefOf (EWRY [One]) [0x42] = ST89 /* \ST89 */
                DerefOf (EWRY [One]) [0x43] = ST8A /* \ST8A */
                DerefOf (EWRY [One]) [0x44] = ST8B /* \ST8B */
                Return (EWRY) /* \_SB_.PC00.RP20.PXSX.EWRY */
            }

            Name (WGDY, Package (0x02)
            {
                0x02, 
                Package (0x1C)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WGDS, 0, Serialized)
            {
                DerefOf (WGDY [One]) [One] = SD11 /* \SD11 */
                DerefOf (WGDY [One]) [0x02] = SD12 /* \SD12 */
                DerefOf (WGDY [One]) [0x03] = SD13 /* \SD13 */
                DerefOf (WGDY [One]) [0x04] = SD14 /* \SD14 */
                DerefOf (WGDY [One]) [0x05] = SD15 /* \SD15 */
                DerefOf (WGDY [One]) [0x06] = SD16 /* \SD16 */
                DerefOf (WGDY [One]) [0x07] = SD17 /* \SD17 */
                DerefOf (WGDY [One]) [0x08] = SD18 /* \SD18 */
                DerefOf (WGDY [One]) [0x09] = SD19 /* \SD19 */
                DerefOf (WGDY [One]) [0x0A] = SD21 /* \SD21 */
                DerefOf (WGDY [One]) [0x0B] = SD22 /* \SD22 */
                DerefOf (WGDY [One]) [0x0C] = SD23 /* \SD23 */
                DerefOf (WGDY [One]) [0x0D] = SD24 /* \SD24 */
                DerefOf (WGDY [One]) [0x0E] = SD25 /* \SD25 */
                DerefOf (WGDY [One]) [0x0F] = SD26 /* \SD26 */
                DerefOf (WGDY [One]) [0x10] = SD27 /* \SD27 */
                DerefOf (WGDY [One]) [0x11] = SD28 /* \SD28 */
                DerefOf (WGDY [One]) [0x12] = SD29 /* \SD29 */
                DerefOf (WGDY [One]) [0x13] = SD31 /* \SD31 */
                DerefOf (WGDY [One]) [0x14] = SD32 /* \SD32 */
                DerefOf (WGDY [One]) [0x15] = SD33 /* \SD33 */
                DerefOf (WGDY [One]) [0x16] = SD34 /* \SD34 */
                DerefOf (WGDY [One]) [0x17] = SD35 /* \SD35 */
                DerefOf (WGDY [One]) [0x18] = SD36 /* \SD36 */
                DerefOf (WGDY [One]) [0x19] = SD37 /* \SD37 */
                DerefOf (WGDY [One]) [0x1A] = SD38 /* \SD38 */
                DerefOf (WGDY [One]) [0x1B] = SD39 /* \SD39 */
                Return (WGDY) /* \_SB_.PC00.RP20.PXSX.WGDY */
            }

            Name (ECKY, Package (0x02)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    Zero
                }
            })
            Method (ECKV, 0, Serialized)
            {
                DerefOf (ECKY [One]) [One] = CECV /* \CECV */
                Return (ECKY) /* \_SB_.PC00.RP20.PXSX.ECKY */
            }

            Name (PPAY, Package (0x02)
            {
                One, 
                Package (0x18)
                {
                    0x07, 
                    Zero, 
                    0x18, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x18, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28
                }
            })
            Method (PPAG, 0, Serialized)
            {
                DerefOf (PPAY [One]) [One] = WAGE /* \WAGE */
                DerefOf (PPAY [One]) [0x02] = AGA1 /* \AGA1 */
                DerefOf (PPAY [One]) [0x03] = AGA2 /* \AGA2 */
                DerefOf (PPAY [One]) [0x04] = AGA3 /* \AGA3 */
                DerefOf (PPAY [One]) [0x05] = AGA4 /* \AGA4 */
                DerefOf (PPAY [One]) [0x06] = AGA5 /* \AGA5 */
                DerefOf (PPAY [One]) [0x07] = AGA6 /* \AGA6 */
                DerefOf (PPAY [One]) [0x08] = AGA7 /* \AGA7 */
                DerefOf (PPAY [One]) [0x09] = AGA8 /* \AGA8 */
                DerefOf (PPAY [One]) [0x0A] = AGA9 /* \AGA9 */
                DerefOf (PPAY [One]) [0x0B] = AGAA /* \AGAA */
                DerefOf (PPAY [One]) [0x0C] = AGAB /* \AGAB */
                DerefOf (PPAY [One]) [0x0D] = AGB1 /* \AGB1 */
                DerefOf (PPAY [One]) [0x0E] = AGB2 /* \AGB2 */
                DerefOf (PPAY [One]) [0x0F] = AGB3 /* \AGB3 */
                DerefOf (PPAY [One]) [0x10] = AGB4 /* \AGB4 */
                DerefOf (PPAY [One]) [0x11] = AGB5 /* \AGB5 */
                DerefOf (PPAY [One]) [0x12] = AGB6 /* \AGB6 */
                DerefOf (PPAY [One]) [0x13] = AGB7 /* \AGB7 */
                DerefOf (PPAY [One]) [0x14] = AGB8 /* \AGB8 */
                DerefOf (PPAY [One]) [0x15] = AGB9 /* \AGB9 */
                DerefOf (PPAY [One]) [0x16] = AGBA /* \AGBA */
                DerefOf (PPAY [One]) [0x17] = AGBB /* \AGBB */
                Return (PPAY) /* \_SB_.PC00.RP20.PXSX.PPAY */
            }

            Name (SADX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    0x80000000
                }, 

                Package (0x02)
                {
                    0x12, 
                    0x80000000
                }
            })
            Method (SADS, 0, Serialized)
            {
                DerefOf (SADX [One]) [One] = ATDV /* \ATDV */
                DerefOf (SADX [0x02]) [One] = ATDV /* \ATDV */
                Return (SADX) /* \_SB_.PC00.RP20.PXSX.SADX */
            }

            Name (GPCX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }, 

                Package (0x02)
                {
                    0x12, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }
            })
            Method (GPC, 0, Serialized)
            {
                Return (GPCX) /* \_SB_.PC00.RP20.PXSX.GPCX */
            }
        }

        If (((WWEN != Zero) && (WWRP == SLOT)))
        {
            Method (SHRF, 0, NotSerialized)
            {
                PSD0 (SLOT)
                SPCO (WCLK, One)
                SGOV (WFCP, PFCP)
                Sleep (TN2B)
                SGOV (WBRS, (~PBRS & One))
                Sleep (TB2R)
                SGOV (PRST, (~WPRP & One))
                L23D ()
            }

            Method (_RST, 0, Serialized)  // _RST: Device Reset
            {
                If ((WWEN == 0x02))
                {
                    Local0 = Acquire (WWMT, 0x03E8)
                    If ((Local0 == Zero))
                    {
                        ADBG ("Start WWAN FLDR")
                        DL23 ()
                        SGOV (WBRS, PBRS)
                        Sleep (TBTG)
                        SHRF ()
                        ADBG ("End WWAN FLDR")
                        Release (WWMT)
                    }
                }
                Else
                {
                    SGOV (WBRS, PBRS)
                    Sleep (0xC8)
                    Notify (PXSX, One) // Device Check
                    SGOV (PRST, (~WPRP & One))
                    SGOV (WBRS, (~PBRS & One))
                    Sleep (0xC8)
                    Local0 = Zero
                    While ((LASX == Zero))
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    Sleep (0x0A)
                    Notify (PXSX, One) // Device Check
                }
            }

            PowerResource (MRST, 0x05, 0x0000)
            {
                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    Return (One)
                }

                Method (_ON, 0, Serialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                {
                }

                Method (_RST, 0, Serialized)  // _RST: Device Reset
                {
                    Local0 = Acquire (WWMT, 0x03E8)
                    If ((Local0 == Zero))
                    {
                        ADBG ("Start WWAN PR _RST")
                        DL23 ()
                        SGOV (WBRS, PBRS)
                        SPCO (WCLK, Zero)
                        Sleep (TB2F)
                        SGOV (WFCP, (~PFCP & One))
                        Sleep (TFDI)
                        SHRF ()
                        Release (WWMT)
                    }
                }
            }
        }

        If ((WIST () || ((WWEN != Zero) && (WWRP == SLOT))))
        {
            PowerResource (DRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    If ((DCAP & 0x10000000))
                    {
                        Local0 = DCTR /* \_SB_.PC00.RP20.PXSX.DCTR */
                        Local0 |= 0x8000
                        DCTR = Local0
                    }
                }
            }

            Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
            {
                If (WIST ())
                {
                    If (CondRefOf (WRST))
                    {
                        Return (Package (0x01)
                        {
                            WRST
                        })
                    }
                }

                If (((WWEN != Zero) && (WWRP == SLOT)))
                {
                    If (CondRefOf (MRST))
                    {
                        Return (Package (0x01)
                        {
                            MRST
                        })
                    }
                }

                Return (Package (0x01)
                {
                    DRST
                })
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (WIST ())
                {
                    If ((Arg0 == ToUUID ("f21202bf-8f78-4dc6-a5b3-1f738e285ade") /* Unknown UUID */))
                    {
                        If ((Arg2 == Zero))
                        {
                            If ((Arg1 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x0F                                             // .
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }
                        }

                        If ((Arg2 == One))
                        {
                            Local0 = ACSD /* \ACSD */
                            Return (Local0)
                        }

                        If ((Arg2 == 0x02))
                        {
                            Local0 = I5BS /* \I5BS */
                            Return (Local0)
                        }

                        If ((Arg2 == 0x03))
                        {
                            Local0 = UHBS /* \UHBS */
                            Return (Local0)
                        }

                        Return (Zero)
                    }
                }

                If (((WWEN != Zero) && (WWRP == SLOT)))
                {
                    If ((Arg0 == ToUUID ("bad01b75-22a8-4f48-8792-bdde9467747d") /* Unknown UUID */))
                    {
                        If ((Arg2 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x09                                             // .
                            })
                        }

                        If ((Arg2 == One)) {}
                        If ((Arg2 == 0x02)) {}
                        If ((Arg2 == 0x03))
                        {
                            If ((WRTO == One)) {}
                            ElseIf ((WRTO == 0x03)) {}
                            Else
                            {
                            }

                            Return (WRTO) /* \WRTO */
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }

    Scope (_SB.PC00.RP21.PXSX)
    {
        OperationRegion (RPXX, SystemMemory, GMIO (^_ADR (), _ADR), 0x10)
        Field (RPXX, AnyAcc, NoLock, Preserve)
        {
            VDID,   32
        }

        OperationRegion (FLDR, SystemMemory, (GMIO (^_ADR (), _ADR) + 0x44), 0x06)
        Field (FLDR, ByteAcc, NoLock, Preserve)
        {
            DCAP,   32, 
            DCTR,   16
        }

        Method (WIST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x095A8086)
                    {
                        Return (One)
                    }
                    Case (0x095B8086)
                    {
                        Return (One)
                    }
                    Case (0x31658086)
                    {
                        Return (One)
                    }
                    Case (0x31668086)
                    {
                        Return (One)
                    }
                    Case (0x08B18086)
                    {
                        Return (One)
                    }
                    Case (0x08B28086)
                    {
                        Return (One)
                    }
                    Case (0x08B38086)
                    {
                        Return (One)
                    }
                    Case (0x08B48086)
                    {
                        Return (One)
                    }
                    Case (0x24F38086)
                    {
                        Return (One)
                    }
                    Case (0x24F48086)
                    {
                        Return (One)
                    }
                    Case (0x24F58086)
                    {
                        Return (One)
                    }
                    Case (0x24F68086)
                    {
                        Return (One)
                    }
                    Case (0x24FD8086)
                    {
                        Return (One)
                    }
                    Case (0x24FB8086)
                    {
                        Return (One)
                    }
                    Case (0x25268086)
                    {
                        Return (One)
                    }
                    Case (0x271B8086)
                    {
                        Return (One)
                    }
                    Case (0x27238086)
                    {
                        Return (One)
                    }
                    Case (0x27258086)
                    {
                        Return (One)
                    }
                    Case (0x885210EC)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (WWST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x73608086)
                    {
                        Return (One)
                    }
                    Case (0x75608086)
                    {
                        Return (One)
                    }
                    Case (0x4D7514C3)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        If (WIST ())
        {
            PowerResource (WRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    If ((DCAP & 0x10000000))
                    {
                        Local0 = DCTR /* \_SB_.PC00.RP21.PXSX.DCTR */
                        Local0 |= 0x8000
                        DCTR = Local0
                    }
                }
            }

            Name (SPLX, Package (0x02)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (SPLC, 0, Serialized)
            {
                DerefOf (SPLX [One]) [Zero] = DOM1 /* \DOM1 */
                DerefOf (SPLX [One]) [One] = LIM1 /* \LIM1 */
                DerefOf (SPLX [One]) [0x02] = TIM1 /* \TIM1 */
                Return (SPLX) /* \_SB_.PC00.RP21.PXSX.SPLX */
            }

            Name (WANX, Package (0x03)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (WAND, 0, Serialized)
            {
                DerefOf (WANX [One]) [Zero] = Zero
                DerefOf (WANX [One]) [One] = TRD0 /* \TRD0 */
                DerefOf (WANX [One]) [0x02] = TRL0 /* \TRL0 */
                DerefOf (WANX [0x02]) [Zero] = One
                DerefOf (WANX [0x02]) [One] = TRD1 /* \TRD1 */
                DerefOf (WANX [0x02]) [0x02] = TRL1 /* \TRL1 */
                Return (WANX) /* \_SB_.PC00.RP21.PXSX.WANX */
            }

            Name (WRDX, Package (0x02)
            {
                Zero, 
                Package (0x02)
                {
                    0x80000000, 
                    0x8000
                }
            })
            Method (WRDD, 0, Serialized)
            {
                DerefOf (WRDX [One]) [Zero] = WDM1 /* \WDM1 */
                DerefOf (WRDX [One]) [One] = CID1 /* \CID1 */
                Return (WRDX) /* \_SB_.PC00.RP21.PXSX.WRDX */
            }

            Name (WRDY, Package (0x02)
            {
                One, 
                Package (0x18)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WRDS, 0, Serialized)
            {
                DerefOf (WRDY [One]) [One] = STXE /* \STXE */
                DerefOf (WRDY [One]) [0x02] = ST10 /* \ST10 */
                DerefOf (WRDY [One]) [0x03] = ST11 /* \ST11 */
                DerefOf (WRDY [One]) [0x04] = ST12 /* \ST12 */
                DerefOf (WRDY [One]) [0x05] = ST13 /* \ST13 */
                DerefOf (WRDY [One]) [0x06] = ST14 /* \ST14 */
                DerefOf (WRDY [One]) [0x07] = ST15 /* \ST15 */
                DerefOf (WRDY [One]) [0x08] = ST16 /* \ST16 */
                DerefOf (WRDY [One]) [0x09] = ST17 /* \ST17 */
                DerefOf (WRDY [One]) [0x0A] = ST18 /* \ST18 */
                DerefOf (WRDY [One]) [0x0B] = ST19 /* \ST19 */
                DerefOf (WRDY [One]) [0x0C] = ST50 /* \ST50 */
                DerefOf (WRDY [One]) [0x0D] = ST51 /* \ST51 */
                DerefOf (WRDY [One]) [0x0E] = ST52 /* \ST52 */
                DerefOf (WRDY [One]) [0x0F] = ST53 /* \ST53 */
                DerefOf (WRDY [One]) [0x10] = ST54 /* \ST54 */
                DerefOf (WRDY [One]) [0x11] = ST55 /* \ST55 */
                DerefOf (WRDY [One]) [0x12] = ST56 /* \ST56 */
                DerefOf (WRDY [One]) [0x13] = ST57 /* \ST57 */
                DerefOf (WRDY [One]) [0x14] = ST58 /* \ST58 */
                DerefOf (WRDY [One]) [0x15] = ST59 /* \ST59 */
                DerefOf (WRDY [One]) [0x16] = ST5A /* \ST5A */
                DerefOf (WRDY [One]) [0x17] = ST5B /* \ST5B */
                Return (WRDY) /* \_SB_.PC00.RP21.PXSX.WRDY */
            }

            Name (EWRY, Package (0x02)
            {
                One, 
                Package (0x45)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (EWRD, 0, Serialized)
            {
                DerefOf (EWRY [One]) [One] = STDE /* \STDE */
                DerefOf (EWRY [One]) [0x02] = STRS /* \STRS */
                DerefOf (EWRY [One]) [0x03] = ST20 /* \ST20 */
                DerefOf (EWRY [One]) [0x04] = ST21 /* \ST21 */
                DerefOf (EWRY [One]) [0x05] = ST22 /* \ST22 */
                DerefOf (EWRY [One]) [0x06] = ST23 /* \ST23 */
                DerefOf (EWRY [One]) [0x07] = ST24 /* \ST24 */
                DerefOf (EWRY [One]) [0x08] = ST25 /* \ST25 */
                DerefOf (EWRY [One]) [0x09] = ST26 /* \ST26 */
                DerefOf (EWRY [One]) [0x0A] = ST27 /* \ST27 */
                DerefOf (EWRY [One]) [0x0B] = ST28 /* \ST28 */
                DerefOf (EWRY [One]) [0x0C] = ST29 /* \ST29 */
                DerefOf (EWRY [One]) [0x0D] = ST60 /* \ST60 */
                DerefOf (EWRY [One]) [0x0E] = ST61 /* \ST61 */
                DerefOf (EWRY [One]) [0x0F] = ST62 /* \ST62 */
                DerefOf (EWRY [One]) [0x10] = ST63 /* \ST63 */
                DerefOf (EWRY [One]) [0x11] = ST64 /* \ST64 */
                DerefOf (EWRY [One]) [0x12] = ST65 /* \ST65 */
                DerefOf (EWRY [One]) [0x13] = ST66 /* \ST66 */
                DerefOf (EWRY [One]) [0x14] = ST67 /* \ST67 */
                DerefOf (EWRY [One]) [0x15] = ST68 /* \ST68 */
                DerefOf (EWRY [One]) [0x16] = ST69 /* \ST69 */
                DerefOf (EWRY [One]) [0x17] = ST6A /* \ST6A */
                DerefOf (EWRY [One]) [0x18] = ST6B /* \ST6B */
                DerefOf (EWRY [One]) [0x19] = ST30 /* \ST30 */
                DerefOf (EWRY [One]) [0x1A] = ST31 /* \ST31 */
                DerefOf (EWRY [One]) [0x1B] = ST32 /* \ST32 */
                DerefOf (EWRY [One]) [0x1C] = ST33 /* \ST33 */
                DerefOf (EWRY [One]) [0x1D] = ST34 /* \ST34 */
                DerefOf (EWRY [One]) [0x1E] = ST35 /* \ST35 */
                DerefOf (EWRY [One]) [0x1F] = ST36 /* \ST36 */
                DerefOf (EWRY [One]) [0x20] = ST37 /* \ST37 */
                DerefOf (EWRY [One]) [0x21] = ST38 /* \ST38 */
                DerefOf (EWRY [One]) [0x22] = ST39 /* \ST39 */
                DerefOf (EWRY [One]) [0x23] = ST70 /* \ST70 */
                DerefOf (EWRY [One]) [0x24] = ST71 /* \ST71 */
                DerefOf (EWRY [One]) [0x25] = ST72 /* \ST72 */
                DerefOf (EWRY [One]) [0x26] = ST73 /* \ST73 */
                DerefOf (EWRY [One]) [0x27] = ST74 /* \ST74 */
                DerefOf (EWRY [One]) [0x28] = ST75 /* \ST75 */
                DerefOf (EWRY [One]) [0x29] = ST76 /* \ST76 */
                DerefOf (EWRY [One]) [0x2A] = ST77 /* \ST77 */
                DerefOf (EWRY [One]) [0x2B] = ST78 /* \ST78 */
                DerefOf (EWRY [One]) [0x2C] = ST79 /* \ST79 */
                DerefOf (EWRY [One]) [0x2D] = ST7A /* \ST7A */
                DerefOf (EWRY [One]) [0x2E] = ST7B /* \ST7B */
                DerefOf (EWRY [One]) [0x2F] = ST40 /* \ST40 */
                DerefOf (EWRY [One]) [0x30] = ST41 /* \ST41 */
                DerefOf (EWRY [One]) [0x31] = ST42 /* \ST42 */
                DerefOf (EWRY [One]) [0x32] = ST43 /* \ST43 */
                DerefOf (EWRY [One]) [0x33] = ST44 /* \ST44 */
                DerefOf (EWRY [One]) [0x34] = ST45 /* \ST45 */
                DerefOf (EWRY [One]) [0x35] = ST46 /* \ST46 */
                DerefOf (EWRY [One]) [0x36] = ST47 /* \ST47 */
                DerefOf (EWRY [One]) [0x37] = ST48 /* \ST48 */
                DerefOf (EWRY [One]) [0x38] = ST49 /* \ST49 */
                DerefOf (EWRY [One]) [0x39] = ST80 /* \ST80 */
                DerefOf (EWRY [One]) [0x3A] = ST81 /* \ST81 */
                DerefOf (EWRY [One]) [0x3B] = ST82 /* \ST82 */
                DerefOf (EWRY [One]) [0x3C] = ST83 /* \ST83 */
                DerefOf (EWRY [One]) [0x3D] = ST84 /* \ST84 */
                DerefOf (EWRY [One]) [0x3E] = ST85 /* \ST85 */
                DerefOf (EWRY [One]) [0x3F] = ST86 /* \ST86 */
                DerefOf (EWRY [One]) [0x40] = ST87 /* \ST87 */
                DerefOf (EWRY [One]) [0x41] = ST88 /* \ST88 */
                DerefOf (EWRY [One]) [0x42] = ST89 /* \ST89 */
                DerefOf (EWRY [One]) [0x43] = ST8A /* \ST8A */
                DerefOf (EWRY [One]) [0x44] = ST8B /* \ST8B */
                Return (EWRY) /* \_SB_.PC00.RP21.PXSX.EWRY */
            }

            Name (WGDY, Package (0x02)
            {
                0x02, 
                Package (0x1C)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WGDS, 0, Serialized)
            {
                DerefOf (WGDY [One]) [One] = SD11 /* \SD11 */
                DerefOf (WGDY [One]) [0x02] = SD12 /* \SD12 */
                DerefOf (WGDY [One]) [0x03] = SD13 /* \SD13 */
                DerefOf (WGDY [One]) [0x04] = SD14 /* \SD14 */
                DerefOf (WGDY [One]) [0x05] = SD15 /* \SD15 */
                DerefOf (WGDY [One]) [0x06] = SD16 /* \SD16 */
                DerefOf (WGDY [One]) [0x07] = SD17 /* \SD17 */
                DerefOf (WGDY [One]) [0x08] = SD18 /* \SD18 */
                DerefOf (WGDY [One]) [0x09] = SD19 /* \SD19 */
                DerefOf (WGDY [One]) [0x0A] = SD21 /* \SD21 */
                DerefOf (WGDY [One]) [0x0B] = SD22 /* \SD22 */
                DerefOf (WGDY [One]) [0x0C] = SD23 /* \SD23 */
                DerefOf (WGDY [One]) [0x0D] = SD24 /* \SD24 */
                DerefOf (WGDY [One]) [0x0E] = SD25 /* \SD25 */
                DerefOf (WGDY [One]) [0x0F] = SD26 /* \SD26 */
                DerefOf (WGDY [One]) [0x10] = SD27 /* \SD27 */
                DerefOf (WGDY [One]) [0x11] = SD28 /* \SD28 */
                DerefOf (WGDY [One]) [0x12] = SD29 /* \SD29 */
                DerefOf (WGDY [One]) [0x13] = SD31 /* \SD31 */
                DerefOf (WGDY [One]) [0x14] = SD32 /* \SD32 */
                DerefOf (WGDY [One]) [0x15] = SD33 /* \SD33 */
                DerefOf (WGDY [One]) [0x16] = SD34 /* \SD34 */
                DerefOf (WGDY [One]) [0x17] = SD35 /* \SD35 */
                DerefOf (WGDY [One]) [0x18] = SD36 /* \SD36 */
                DerefOf (WGDY [One]) [0x19] = SD37 /* \SD37 */
                DerefOf (WGDY [One]) [0x1A] = SD38 /* \SD38 */
                DerefOf (WGDY [One]) [0x1B] = SD39 /* \SD39 */
                Return (WGDY) /* \_SB_.PC00.RP21.PXSX.WGDY */
            }

            Name (ECKY, Package (0x02)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    Zero
                }
            })
            Method (ECKV, 0, Serialized)
            {
                DerefOf (ECKY [One]) [One] = CECV /* \CECV */
                Return (ECKY) /* \_SB_.PC00.RP21.PXSX.ECKY */
            }

            Name (PPAY, Package (0x02)
            {
                One, 
                Package (0x18)
                {
                    0x07, 
                    Zero, 
                    0x18, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x18, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28
                }
            })
            Method (PPAG, 0, Serialized)
            {
                DerefOf (PPAY [One]) [One] = WAGE /* \WAGE */
                DerefOf (PPAY [One]) [0x02] = AGA1 /* \AGA1 */
                DerefOf (PPAY [One]) [0x03] = AGA2 /* \AGA2 */
                DerefOf (PPAY [One]) [0x04] = AGA3 /* \AGA3 */
                DerefOf (PPAY [One]) [0x05] = AGA4 /* \AGA4 */
                DerefOf (PPAY [One]) [0x06] = AGA5 /* \AGA5 */
                DerefOf (PPAY [One]) [0x07] = AGA6 /* \AGA6 */
                DerefOf (PPAY [One]) [0x08] = AGA7 /* \AGA7 */
                DerefOf (PPAY [One]) [0x09] = AGA8 /* \AGA8 */
                DerefOf (PPAY [One]) [0x0A] = AGA9 /* \AGA9 */
                DerefOf (PPAY [One]) [0x0B] = AGAA /* \AGAA */
                DerefOf (PPAY [One]) [0x0C] = AGAB /* \AGAB */
                DerefOf (PPAY [One]) [0x0D] = AGB1 /* \AGB1 */
                DerefOf (PPAY [One]) [0x0E] = AGB2 /* \AGB2 */
                DerefOf (PPAY [One]) [0x0F] = AGB3 /* \AGB3 */
                DerefOf (PPAY [One]) [0x10] = AGB4 /* \AGB4 */
                DerefOf (PPAY [One]) [0x11] = AGB5 /* \AGB5 */
                DerefOf (PPAY [One]) [0x12] = AGB6 /* \AGB6 */
                DerefOf (PPAY [One]) [0x13] = AGB7 /* \AGB7 */
                DerefOf (PPAY [One]) [0x14] = AGB8 /* \AGB8 */
                DerefOf (PPAY [One]) [0x15] = AGB9 /* \AGB9 */
                DerefOf (PPAY [One]) [0x16] = AGBA /* \AGBA */
                DerefOf (PPAY [One]) [0x17] = AGBB /* \AGBB */
                Return (PPAY) /* \_SB_.PC00.RP21.PXSX.PPAY */
            }

            Name (SADX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    0x80000000
                }, 

                Package (0x02)
                {
                    0x12, 
                    0x80000000
                }
            })
            Method (SADS, 0, Serialized)
            {
                DerefOf (SADX [One]) [One] = ATDV /* \ATDV */
                DerefOf (SADX [0x02]) [One] = ATDV /* \ATDV */
                Return (SADX) /* \_SB_.PC00.RP21.PXSX.SADX */
            }

            Name (GPCX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }, 

                Package (0x02)
                {
                    0x12, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }
            })
            Method (GPC, 0, Serialized)
            {
                Return (GPCX) /* \_SB_.PC00.RP21.PXSX.GPCX */
            }
        }

        If (((WWEN != Zero) && (WWRP == SLOT)))
        {
            Method (SHRF, 0, NotSerialized)
            {
                PSD0 (SLOT)
                SPCO (WCLK, One)
                SGOV (WFCP, PFCP)
                Sleep (TN2B)
                SGOV (WBRS, (~PBRS & One))
                Sleep (TB2R)
                SGOV (PRST, (~WPRP & One))
                L23D ()
            }

            Method (_RST, 0, Serialized)  // _RST: Device Reset
            {
                If ((WWEN == 0x02))
                {
                    Local0 = Acquire (WWMT, 0x03E8)
                    If ((Local0 == Zero))
                    {
                        ADBG ("Start WWAN FLDR")
                        DL23 ()
                        SGOV (WBRS, PBRS)
                        Sleep (TBTG)
                        SHRF ()
                        ADBG ("End WWAN FLDR")
                        Release (WWMT)
                    }
                }
                Else
                {
                    SGOV (WBRS, PBRS)
                    Sleep (0xC8)
                    Notify (PXSX, One) // Device Check
                    SGOV (PRST, (~WPRP & One))
                    SGOV (WBRS, (~PBRS & One))
                    Sleep (0xC8)
                    Local0 = Zero
                    While ((LASX == Zero))
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    Sleep (0x0A)
                    Notify (PXSX, One) // Device Check
                }
            }

            PowerResource (MRST, 0x05, 0x0000)
            {
                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    Return (One)
                }

                Method (_ON, 0, Serialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                {
                }

                Method (_RST, 0, Serialized)  // _RST: Device Reset
                {
                    Local0 = Acquire (WWMT, 0x03E8)
                    If ((Local0 == Zero))
                    {
                        ADBG ("Start WWAN PR _RST")
                        DL23 ()
                        SGOV (WBRS, PBRS)
                        SPCO (WCLK, Zero)
                        Sleep (TB2F)
                        SGOV (WFCP, (~PFCP & One))
                        Sleep (TFDI)
                        SHRF ()
                        Release (WWMT)
                    }
                }
            }
        }

        If ((WIST () || ((WWEN != Zero) && (WWRP == SLOT))))
        {
            PowerResource (DRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    If ((DCAP & 0x10000000))
                    {
                        Local0 = DCTR /* \_SB_.PC00.RP21.PXSX.DCTR */
                        Local0 |= 0x8000
                        DCTR = Local0
                    }
                }
            }

            Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
            {
                If (WIST ())
                {
                    If (CondRefOf (WRST))
                    {
                        Return (Package (0x01)
                        {
                            WRST
                        })
                    }
                }

                If (((WWEN != Zero) && (WWRP == SLOT)))
                {
                    If (CondRefOf (MRST))
                    {
                        Return (Package (0x01)
                        {
                            MRST
                        })
                    }
                }

                Return (Package (0x01)
                {
                    DRST
                })
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (WIST ())
                {
                    If ((Arg0 == ToUUID ("f21202bf-8f78-4dc6-a5b3-1f738e285ade") /* Unknown UUID */))
                    {
                        If ((Arg2 == Zero))
                        {
                            If ((Arg1 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x0F                                             // .
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }
                        }

                        If ((Arg2 == One))
                        {
                            Local0 = ACSD /* \ACSD */
                            Return (Local0)
                        }

                        If ((Arg2 == 0x02))
                        {
                            Local0 = I5BS /* \I5BS */
                            Return (Local0)
                        }

                        If ((Arg2 == 0x03))
                        {
                            Local0 = UHBS /* \UHBS */
                            Return (Local0)
                        }

                        Return (Zero)
                    }
                }

                If (((WWEN != Zero) && (WWRP == SLOT)))
                {
                    If ((Arg0 == ToUUID ("bad01b75-22a8-4f48-8792-bdde9467747d") /* Unknown UUID */))
                    {
                        If ((Arg2 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x09                                             // .
                            })
                        }

                        If ((Arg2 == One)) {}
                        If ((Arg2 == 0x02)) {}
                        If ((Arg2 == 0x03))
                        {
                            If ((WRTO == One)) {}
                            ElseIf ((WRTO == 0x03)) {}
                            Else
                            {
                            }

                            Return (WRTO) /* \WRTO */
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }

    Scope (_SB.PC00.RP22.PXSX)
    {
        OperationRegion (RPXX, SystemMemory, GMIO (^_ADR (), _ADR), 0x10)
        Field (RPXX, AnyAcc, NoLock, Preserve)
        {
            VDID,   32
        }

        OperationRegion (FLDR, SystemMemory, (GMIO (^_ADR (), _ADR) + 0x44), 0x06)
        Field (FLDR, ByteAcc, NoLock, Preserve)
        {
            DCAP,   32, 
            DCTR,   16
        }

        Method (WIST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x095A8086)
                    {
                        Return (One)
                    }
                    Case (0x095B8086)
                    {
                        Return (One)
                    }
                    Case (0x31658086)
                    {
                        Return (One)
                    }
                    Case (0x31668086)
                    {
                        Return (One)
                    }
                    Case (0x08B18086)
                    {
                        Return (One)
                    }
                    Case (0x08B28086)
                    {
                        Return (One)
                    }
                    Case (0x08B38086)
                    {
                        Return (One)
                    }
                    Case (0x08B48086)
                    {
                        Return (One)
                    }
                    Case (0x24F38086)
                    {
                        Return (One)
                    }
                    Case (0x24F48086)
                    {
                        Return (One)
                    }
                    Case (0x24F58086)
                    {
                        Return (One)
                    }
                    Case (0x24F68086)
                    {
                        Return (One)
                    }
                    Case (0x24FD8086)
                    {
                        Return (One)
                    }
                    Case (0x24FB8086)
                    {
                        Return (One)
                    }
                    Case (0x25268086)
                    {
                        Return (One)
                    }
                    Case (0x271B8086)
                    {
                        Return (One)
                    }
                    Case (0x27238086)
                    {
                        Return (One)
                    }
                    Case (0x27258086)
                    {
                        Return (One)
                    }
                    Case (0x885210EC)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (WWST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x73608086)
                    {
                        Return (One)
                    }
                    Case (0x75608086)
                    {
                        Return (One)
                    }
                    Case (0x4D7514C3)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        If (WIST ())
        {
            PowerResource (WRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    If ((DCAP & 0x10000000))
                    {
                        Local0 = DCTR /* \_SB_.PC00.RP22.PXSX.DCTR */
                        Local0 |= 0x8000
                        DCTR = Local0
                    }
                }
            }

            Name (SPLX, Package (0x02)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (SPLC, 0, Serialized)
            {
                DerefOf (SPLX [One]) [Zero] = DOM1 /* \DOM1 */
                DerefOf (SPLX [One]) [One] = LIM1 /* \LIM1 */
                DerefOf (SPLX [One]) [0x02] = TIM1 /* \TIM1 */
                Return (SPLX) /* \_SB_.PC00.RP22.PXSX.SPLX */
            }

            Name (WANX, Package (0x03)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (WAND, 0, Serialized)
            {
                DerefOf (WANX [One]) [Zero] = Zero
                DerefOf (WANX [One]) [One] = TRD0 /* \TRD0 */
                DerefOf (WANX [One]) [0x02] = TRL0 /* \TRL0 */
                DerefOf (WANX [0x02]) [Zero] = One
                DerefOf (WANX [0x02]) [One] = TRD1 /* \TRD1 */
                DerefOf (WANX [0x02]) [0x02] = TRL1 /* \TRL1 */
                Return (WANX) /* \_SB_.PC00.RP22.PXSX.WANX */
            }

            Name (WRDX, Package (0x02)
            {
                Zero, 
                Package (0x02)
                {
                    0x80000000, 
                    0x8000
                }
            })
            Method (WRDD, 0, Serialized)
            {
                DerefOf (WRDX [One]) [Zero] = WDM1 /* \WDM1 */
                DerefOf (WRDX [One]) [One] = CID1 /* \CID1 */
                Return (WRDX) /* \_SB_.PC00.RP22.PXSX.WRDX */
            }

            Name (WRDY, Package (0x02)
            {
                One, 
                Package (0x18)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WRDS, 0, Serialized)
            {
                DerefOf (WRDY [One]) [One] = STXE /* \STXE */
                DerefOf (WRDY [One]) [0x02] = ST10 /* \ST10 */
                DerefOf (WRDY [One]) [0x03] = ST11 /* \ST11 */
                DerefOf (WRDY [One]) [0x04] = ST12 /* \ST12 */
                DerefOf (WRDY [One]) [0x05] = ST13 /* \ST13 */
                DerefOf (WRDY [One]) [0x06] = ST14 /* \ST14 */
                DerefOf (WRDY [One]) [0x07] = ST15 /* \ST15 */
                DerefOf (WRDY [One]) [0x08] = ST16 /* \ST16 */
                DerefOf (WRDY [One]) [0x09] = ST17 /* \ST17 */
                DerefOf (WRDY [One]) [0x0A] = ST18 /* \ST18 */
                DerefOf (WRDY [One]) [0x0B] = ST19 /* \ST19 */
                DerefOf (WRDY [One]) [0x0C] = ST50 /* \ST50 */
                DerefOf (WRDY [One]) [0x0D] = ST51 /* \ST51 */
                DerefOf (WRDY [One]) [0x0E] = ST52 /* \ST52 */
                DerefOf (WRDY [One]) [0x0F] = ST53 /* \ST53 */
                DerefOf (WRDY [One]) [0x10] = ST54 /* \ST54 */
                DerefOf (WRDY [One]) [0x11] = ST55 /* \ST55 */
                DerefOf (WRDY [One]) [0x12] = ST56 /* \ST56 */
                DerefOf (WRDY [One]) [0x13] = ST57 /* \ST57 */
                DerefOf (WRDY [One]) [0x14] = ST58 /* \ST58 */
                DerefOf (WRDY [One]) [0x15] = ST59 /* \ST59 */
                DerefOf (WRDY [One]) [0x16] = ST5A /* \ST5A */
                DerefOf (WRDY [One]) [0x17] = ST5B /* \ST5B */
                Return (WRDY) /* \_SB_.PC00.RP22.PXSX.WRDY */
            }

            Name (EWRY, Package (0x02)
            {
                One, 
                Package (0x45)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (EWRD, 0, Serialized)
            {
                DerefOf (EWRY [One]) [One] = STDE /* \STDE */
                DerefOf (EWRY [One]) [0x02] = STRS /* \STRS */
                DerefOf (EWRY [One]) [0x03] = ST20 /* \ST20 */
                DerefOf (EWRY [One]) [0x04] = ST21 /* \ST21 */
                DerefOf (EWRY [One]) [0x05] = ST22 /* \ST22 */
                DerefOf (EWRY [One]) [0x06] = ST23 /* \ST23 */
                DerefOf (EWRY [One]) [0x07] = ST24 /* \ST24 */
                DerefOf (EWRY [One]) [0x08] = ST25 /* \ST25 */
                DerefOf (EWRY [One]) [0x09] = ST26 /* \ST26 */
                DerefOf (EWRY [One]) [0x0A] = ST27 /* \ST27 */
                DerefOf (EWRY [One]) [0x0B] = ST28 /* \ST28 */
                DerefOf (EWRY [One]) [0x0C] = ST29 /* \ST29 */
                DerefOf (EWRY [One]) [0x0D] = ST60 /* \ST60 */
                DerefOf (EWRY [One]) [0x0E] = ST61 /* \ST61 */
                DerefOf (EWRY [One]) [0x0F] = ST62 /* \ST62 */
                DerefOf (EWRY [One]) [0x10] = ST63 /* \ST63 */
                DerefOf (EWRY [One]) [0x11] = ST64 /* \ST64 */
                DerefOf (EWRY [One]) [0x12] = ST65 /* \ST65 */
                DerefOf (EWRY [One]) [0x13] = ST66 /* \ST66 */
                DerefOf (EWRY [One]) [0x14] = ST67 /* \ST67 */
                DerefOf (EWRY [One]) [0x15] = ST68 /* \ST68 */
                DerefOf (EWRY [One]) [0x16] = ST69 /* \ST69 */
                DerefOf (EWRY [One]) [0x17] = ST6A /* \ST6A */
                DerefOf (EWRY [One]) [0x18] = ST6B /* \ST6B */
                DerefOf (EWRY [One]) [0x19] = ST30 /* \ST30 */
                DerefOf (EWRY [One]) [0x1A] = ST31 /* \ST31 */
                DerefOf (EWRY [One]) [0x1B] = ST32 /* \ST32 */
                DerefOf (EWRY [One]) [0x1C] = ST33 /* \ST33 */
                DerefOf (EWRY [One]) [0x1D] = ST34 /* \ST34 */
                DerefOf (EWRY [One]) [0x1E] = ST35 /* \ST35 */
                DerefOf (EWRY [One]) [0x1F] = ST36 /* \ST36 */
                DerefOf (EWRY [One]) [0x20] = ST37 /* \ST37 */
                DerefOf (EWRY [One]) [0x21] = ST38 /* \ST38 */
                DerefOf (EWRY [One]) [0x22] = ST39 /* \ST39 */
                DerefOf (EWRY [One]) [0x23] = ST70 /* \ST70 */
                DerefOf (EWRY [One]) [0x24] = ST71 /* \ST71 */
                DerefOf (EWRY [One]) [0x25] = ST72 /* \ST72 */
                DerefOf (EWRY [One]) [0x26] = ST73 /* \ST73 */
                DerefOf (EWRY [One]) [0x27] = ST74 /* \ST74 */
                DerefOf (EWRY [One]) [0x28] = ST75 /* \ST75 */
                DerefOf (EWRY [One]) [0x29] = ST76 /* \ST76 */
                DerefOf (EWRY [One]) [0x2A] = ST77 /* \ST77 */
                DerefOf (EWRY [One]) [0x2B] = ST78 /* \ST78 */
                DerefOf (EWRY [One]) [0x2C] = ST79 /* \ST79 */
                DerefOf (EWRY [One]) [0x2D] = ST7A /* \ST7A */
                DerefOf (EWRY [One]) [0x2E] = ST7B /* \ST7B */
                DerefOf (EWRY [One]) [0x2F] = ST40 /* \ST40 */
                DerefOf (EWRY [One]) [0x30] = ST41 /* \ST41 */
                DerefOf (EWRY [One]) [0x31] = ST42 /* \ST42 */
                DerefOf (EWRY [One]) [0x32] = ST43 /* \ST43 */
                DerefOf (EWRY [One]) [0x33] = ST44 /* \ST44 */
                DerefOf (EWRY [One]) [0x34] = ST45 /* \ST45 */
                DerefOf (EWRY [One]) [0x35] = ST46 /* \ST46 */
                DerefOf (EWRY [One]) [0x36] = ST47 /* \ST47 */
                DerefOf (EWRY [One]) [0x37] = ST48 /* \ST48 */
                DerefOf (EWRY [One]) [0x38] = ST49 /* \ST49 */
                DerefOf (EWRY [One]) [0x39] = ST80 /* \ST80 */
                DerefOf (EWRY [One]) [0x3A] = ST81 /* \ST81 */
                DerefOf (EWRY [One]) [0x3B] = ST82 /* \ST82 */
                DerefOf (EWRY [One]) [0x3C] = ST83 /* \ST83 */
                DerefOf (EWRY [One]) [0x3D] = ST84 /* \ST84 */
                DerefOf (EWRY [One]) [0x3E] = ST85 /* \ST85 */
                DerefOf (EWRY [One]) [0x3F] = ST86 /* \ST86 */
                DerefOf (EWRY [One]) [0x40] = ST87 /* \ST87 */
                DerefOf (EWRY [One]) [0x41] = ST88 /* \ST88 */
                DerefOf (EWRY [One]) [0x42] = ST89 /* \ST89 */
                DerefOf (EWRY [One]) [0x43] = ST8A /* \ST8A */
                DerefOf (EWRY [One]) [0x44] = ST8B /* \ST8B */
                Return (EWRY) /* \_SB_.PC00.RP22.PXSX.EWRY */
            }

            Name (WGDY, Package (0x02)
            {
                0x02, 
                Package (0x1C)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WGDS, 0, Serialized)
            {
                DerefOf (WGDY [One]) [One] = SD11 /* \SD11 */
                DerefOf (WGDY [One]) [0x02] = SD12 /* \SD12 */
                DerefOf (WGDY [One]) [0x03] = SD13 /* \SD13 */
                DerefOf (WGDY [One]) [0x04] = SD14 /* \SD14 */
                DerefOf (WGDY [One]) [0x05] = SD15 /* \SD15 */
                DerefOf (WGDY [One]) [0x06] = SD16 /* \SD16 */
                DerefOf (WGDY [One]) [0x07] = SD17 /* \SD17 */
                DerefOf (WGDY [One]) [0x08] = SD18 /* \SD18 */
                DerefOf (WGDY [One]) [0x09] = SD19 /* \SD19 */
                DerefOf (WGDY [One]) [0x0A] = SD21 /* \SD21 */
                DerefOf (WGDY [One]) [0x0B] = SD22 /* \SD22 */
                DerefOf (WGDY [One]) [0x0C] = SD23 /* \SD23 */
                DerefOf (WGDY [One]) [0x0D] = SD24 /* \SD24 */
                DerefOf (WGDY [One]) [0x0E] = SD25 /* \SD25 */
                DerefOf (WGDY [One]) [0x0F] = SD26 /* \SD26 */
                DerefOf (WGDY [One]) [0x10] = SD27 /* \SD27 */
                DerefOf (WGDY [One]) [0x11] = SD28 /* \SD28 */
                DerefOf (WGDY [One]) [0x12] = SD29 /* \SD29 */
                DerefOf (WGDY [One]) [0x13] = SD31 /* \SD31 */
                DerefOf (WGDY [One]) [0x14] = SD32 /* \SD32 */
                DerefOf (WGDY [One]) [0x15] = SD33 /* \SD33 */
                DerefOf (WGDY [One]) [0x16] = SD34 /* \SD34 */
                DerefOf (WGDY [One]) [0x17] = SD35 /* \SD35 */
                DerefOf (WGDY [One]) [0x18] = SD36 /* \SD36 */
                DerefOf (WGDY [One]) [0x19] = SD37 /* \SD37 */
                DerefOf (WGDY [One]) [0x1A] = SD38 /* \SD38 */
                DerefOf (WGDY [One]) [0x1B] = SD39 /* \SD39 */
                Return (WGDY) /* \_SB_.PC00.RP22.PXSX.WGDY */
            }

            Name (ECKY, Package (0x02)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    Zero
                }
            })
            Method (ECKV, 0, Serialized)
            {
                DerefOf (ECKY [One]) [One] = CECV /* \CECV */
                Return (ECKY) /* \_SB_.PC00.RP22.PXSX.ECKY */
            }

            Name (PPAY, Package (0x02)
            {
                One, 
                Package (0x18)
                {
                    0x07, 
                    Zero, 
                    0x18, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x18, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28
                }
            })
            Method (PPAG, 0, Serialized)
            {
                DerefOf (PPAY [One]) [One] = WAGE /* \WAGE */
                DerefOf (PPAY [One]) [0x02] = AGA1 /* \AGA1 */
                DerefOf (PPAY [One]) [0x03] = AGA2 /* \AGA2 */
                DerefOf (PPAY [One]) [0x04] = AGA3 /* \AGA3 */
                DerefOf (PPAY [One]) [0x05] = AGA4 /* \AGA4 */
                DerefOf (PPAY [One]) [0x06] = AGA5 /* \AGA5 */
                DerefOf (PPAY [One]) [0x07] = AGA6 /* \AGA6 */
                DerefOf (PPAY [One]) [0x08] = AGA7 /* \AGA7 */
                DerefOf (PPAY [One]) [0x09] = AGA8 /* \AGA8 */
                DerefOf (PPAY [One]) [0x0A] = AGA9 /* \AGA9 */
                DerefOf (PPAY [One]) [0x0B] = AGAA /* \AGAA */
                DerefOf (PPAY [One]) [0x0C] = AGAB /* \AGAB */
                DerefOf (PPAY [One]) [0x0D] = AGB1 /* \AGB1 */
                DerefOf (PPAY [One]) [0x0E] = AGB2 /* \AGB2 */
                DerefOf (PPAY [One]) [0x0F] = AGB3 /* \AGB3 */
                DerefOf (PPAY [One]) [0x10] = AGB4 /* \AGB4 */
                DerefOf (PPAY [One]) [0x11] = AGB5 /* \AGB5 */
                DerefOf (PPAY [One]) [0x12] = AGB6 /* \AGB6 */
                DerefOf (PPAY [One]) [0x13] = AGB7 /* \AGB7 */
                DerefOf (PPAY [One]) [0x14] = AGB8 /* \AGB8 */
                DerefOf (PPAY [One]) [0x15] = AGB9 /* \AGB9 */
                DerefOf (PPAY [One]) [0x16] = AGBA /* \AGBA */
                DerefOf (PPAY [One]) [0x17] = AGBB /* \AGBB */
                Return (PPAY) /* \_SB_.PC00.RP22.PXSX.PPAY */
            }

            Name (SADX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    0x80000000
                }, 

                Package (0x02)
                {
                    0x12, 
                    0x80000000
                }
            })
            Method (SADS, 0, Serialized)
            {
                DerefOf (SADX [One]) [One] = ATDV /* \ATDV */
                DerefOf (SADX [0x02]) [One] = ATDV /* \ATDV */
                Return (SADX) /* \_SB_.PC00.RP22.PXSX.SADX */
            }

            Name (GPCX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }, 

                Package (0x02)
                {
                    0x12, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }
            })
            Method (GPC, 0, Serialized)
            {
                Return (GPCX) /* \_SB_.PC00.RP22.PXSX.GPCX */
            }
        }

        If (((WWEN != Zero) && (WWRP == SLOT)))
        {
            Method (SHRF, 0, NotSerialized)
            {
                PSD0 (SLOT)
                SPCO (WCLK, One)
                SGOV (WFCP, PFCP)
                Sleep (TN2B)
                SGOV (WBRS, (~PBRS & One))
                Sleep (TB2R)
                SGOV (PRST, (~WPRP & One))
                L23D ()
            }

            Method (_RST, 0, Serialized)  // _RST: Device Reset
            {
                If ((WWEN == 0x02))
                {
                    Local0 = Acquire (WWMT, 0x03E8)
                    If ((Local0 == Zero))
                    {
                        ADBG ("Start WWAN FLDR")
                        DL23 ()
                        SGOV (WBRS, PBRS)
                        Sleep (TBTG)
                        SHRF ()
                        ADBG ("End WWAN FLDR")
                        Release (WWMT)
                    }
                }
                Else
                {
                    SGOV (WBRS, PBRS)
                    Sleep (0xC8)
                    Notify (PXSX, One) // Device Check
                    SGOV (PRST, (~WPRP & One))
                    SGOV (WBRS, (~PBRS & One))
                    Sleep (0xC8)
                    Local0 = Zero
                    While ((LASX == Zero))
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    Sleep (0x0A)
                    Notify (PXSX, One) // Device Check
                }
            }

            PowerResource (MRST, 0x05, 0x0000)
            {
                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    Return (One)
                }

                Method (_ON, 0, Serialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                {
                }

                Method (_RST, 0, Serialized)  // _RST: Device Reset
                {
                    Local0 = Acquire (WWMT, 0x03E8)
                    If ((Local0 == Zero))
                    {
                        ADBG ("Start WWAN PR _RST")
                        DL23 ()
                        SGOV (WBRS, PBRS)
                        SPCO (WCLK, Zero)
                        Sleep (TB2F)
                        SGOV (WFCP, (~PFCP & One))
                        Sleep (TFDI)
                        SHRF ()
                        Release (WWMT)
                    }
                }
            }
        }

        If ((WIST () || ((WWEN != Zero) && (WWRP == SLOT))))
        {
            PowerResource (DRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    If ((DCAP & 0x10000000))
                    {
                        Local0 = DCTR /* \_SB_.PC00.RP22.PXSX.DCTR */
                        Local0 |= 0x8000
                        DCTR = Local0
                    }
                }
            }

            Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
            {
                If (WIST ())
                {
                    If (CondRefOf (WRST))
                    {
                        Return (Package (0x01)
                        {
                            WRST
                        })
                    }
                }

                If (((WWEN != Zero) && (WWRP == SLOT)))
                {
                    If (CondRefOf (MRST))
                    {
                        Return (Package (0x01)
                        {
                            MRST
                        })
                    }
                }

                Return (Package (0x01)
                {
                    DRST
                })
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (WIST ())
                {
                    If ((Arg0 == ToUUID ("f21202bf-8f78-4dc6-a5b3-1f738e285ade") /* Unknown UUID */))
                    {
                        If ((Arg2 == Zero))
                        {
                            If ((Arg1 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x0F                                             // .
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }
                        }

                        If ((Arg2 == One))
                        {
                            Local0 = ACSD /* \ACSD */
                            Return (Local0)
                        }

                        If ((Arg2 == 0x02))
                        {
                            Local0 = I5BS /* \I5BS */
                            Return (Local0)
                        }

                        If ((Arg2 == 0x03))
                        {
                            Local0 = UHBS /* \UHBS */
                            Return (Local0)
                        }

                        Return (Zero)
                    }
                }

                If (((WWEN != Zero) && (WWRP == SLOT)))
                {
                    If ((Arg0 == ToUUID ("bad01b75-22a8-4f48-8792-bdde9467747d") /* Unknown UUID */))
                    {
                        If ((Arg2 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x09                                             // .
                            })
                        }

                        If ((Arg2 == One)) {}
                        If ((Arg2 == 0x02)) {}
                        If ((Arg2 == 0x03))
                        {
                            If ((WRTO == One)) {}
                            ElseIf ((WRTO == 0x03)) {}
                            Else
                            {
                            }

                            Return (WRTO) /* \WRTO */
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }

    Scope (_SB.PC00.RP23.PXSX)
    {
        OperationRegion (RPXX, SystemMemory, GMIO (^_ADR (), _ADR), 0x10)
        Field (RPXX, AnyAcc, NoLock, Preserve)
        {
            VDID,   32
        }

        OperationRegion (FLDR, SystemMemory, (GMIO (^_ADR (), _ADR) + 0x44), 0x06)
        Field (FLDR, ByteAcc, NoLock, Preserve)
        {
            DCAP,   32, 
            DCTR,   16
        }

        Method (WIST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x095A8086)
                    {
                        Return (One)
                    }
                    Case (0x095B8086)
                    {
                        Return (One)
                    }
                    Case (0x31658086)
                    {
                        Return (One)
                    }
                    Case (0x31668086)
                    {
                        Return (One)
                    }
                    Case (0x08B18086)
                    {
                        Return (One)
                    }
                    Case (0x08B28086)
                    {
                        Return (One)
                    }
                    Case (0x08B38086)
                    {
                        Return (One)
                    }
                    Case (0x08B48086)
                    {
                        Return (One)
                    }
                    Case (0x24F38086)
                    {
                        Return (One)
                    }
                    Case (0x24F48086)
                    {
                        Return (One)
                    }
                    Case (0x24F58086)
                    {
                        Return (One)
                    }
                    Case (0x24F68086)
                    {
                        Return (One)
                    }
                    Case (0x24FD8086)
                    {
                        Return (One)
                    }
                    Case (0x24FB8086)
                    {
                        Return (One)
                    }
                    Case (0x25268086)
                    {
                        Return (One)
                    }
                    Case (0x271B8086)
                    {
                        Return (One)
                    }
                    Case (0x27238086)
                    {
                        Return (One)
                    }
                    Case (0x27258086)
                    {
                        Return (One)
                    }
                    Case (0x885210EC)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (WWST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x73608086)
                    {
                        Return (One)
                    }
                    Case (0x75608086)
                    {
                        Return (One)
                    }
                    Case (0x4D7514C3)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        If (WIST ())
        {
            PowerResource (WRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    If ((DCAP & 0x10000000))
                    {
                        Local0 = DCTR /* \_SB_.PC00.RP23.PXSX.DCTR */
                        Local0 |= 0x8000
                        DCTR = Local0
                    }
                }
            }

            Name (SPLX, Package (0x02)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (SPLC, 0, Serialized)
            {
                DerefOf (SPLX [One]) [Zero] = DOM1 /* \DOM1 */
                DerefOf (SPLX [One]) [One] = LIM1 /* \LIM1 */
                DerefOf (SPLX [One]) [0x02] = TIM1 /* \TIM1 */
                Return (SPLX) /* \_SB_.PC00.RP23.PXSX.SPLX */
            }

            Name (WANX, Package (0x03)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (WAND, 0, Serialized)
            {
                DerefOf (WANX [One]) [Zero] = Zero
                DerefOf (WANX [One]) [One] = TRD0 /* \TRD0 */
                DerefOf (WANX [One]) [0x02] = TRL0 /* \TRL0 */
                DerefOf (WANX [0x02]) [Zero] = One
                DerefOf (WANX [0x02]) [One] = TRD1 /* \TRD1 */
                DerefOf (WANX [0x02]) [0x02] = TRL1 /* \TRL1 */
                Return (WANX) /* \_SB_.PC00.RP23.PXSX.WANX */
            }

            Name (WRDX, Package (0x02)
            {
                Zero, 
                Package (0x02)
                {
                    0x80000000, 
                    0x8000
                }
            })
            Method (WRDD, 0, Serialized)
            {
                DerefOf (WRDX [One]) [Zero] = WDM1 /* \WDM1 */
                DerefOf (WRDX [One]) [One] = CID1 /* \CID1 */
                Return (WRDX) /* \_SB_.PC00.RP23.PXSX.WRDX */
            }

            Name (WRDY, Package (0x02)
            {
                One, 
                Package (0x18)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WRDS, 0, Serialized)
            {
                DerefOf (WRDY [One]) [One] = STXE /* \STXE */
                DerefOf (WRDY [One]) [0x02] = ST10 /* \ST10 */
                DerefOf (WRDY [One]) [0x03] = ST11 /* \ST11 */
                DerefOf (WRDY [One]) [0x04] = ST12 /* \ST12 */
                DerefOf (WRDY [One]) [0x05] = ST13 /* \ST13 */
                DerefOf (WRDY [One]) [0x06] = ST14 /* \ST14 */
                DerefOf (WRDY [One]) [0x07] = ST15 /* \ST15 */
                DerefOf (WRDY [One]) [0x08] = ST16 /* \ST16 */
                DerefOf (WRDY [One]) [0x09] = ST17 /* \ST17 */
                DerefOf (WRDY [One]) [0x0A] = ST18 /* \ST18 */
                DerefOf (WRDY [One]) [0x0B] = ST19 /* \ST19 */
                DerefOf (WRDY [One]) [0x0C] = ST50 /* \ST50 */
                DerefOf (WRDY [One]) [0x0D] = ST51 /* \ST51 */
                DerefOf (WRDY [One]) [0x0E] = ST52 /* \ST52 */
                DerefOf (WRDY [One]) [0x0F] = ST53 /* \ST53 */
                DerefOf (WRDY [One]) [0x10] = ST54 /* \ST54 */
                DerefOf (WRDY [One]) [0x11] = ST55 /* \ST55 */
                DerefOf (WRDY [One]) [0x12] = ST56 /* \ST56 */
                DerefOf (WRDY [One]) [0x13] = ST57 /* \ST57 */
                DerefOf (WRDY [One]) [0x14] = ST58 /* \ST58 */
                DerefOf (WRDY [One]) [0x15] = ST59 /* \ST59 */
                DerefOf (WRDY [One]) [0x16] = ST5A /* \ST5A */
                DerefOf (WRDY [One]) [0x17] = ST5B /* \ST5B */
                Return (WRDY) /* \_SB_.PC00.RP23.PXSX.WRDY */
            }

            Name (EWRY, Package (0x02)
            {
                One, 
                Package (0x45)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (EWRD, 0, Serialized)
            {
                DerefOf (EWRY [One]) [One] = STDE /* \STDE */
                DerefOf (EWRY [One]) [0x02] = STRS /* \STRS */
                DerefOf (EWRY [One]) [0x03] = ST20 /* \ST20 */
                DerefOf (EWRY [One]) [0x04] = ST21 /* \ST21 */
                DerefOf (EWRY [One]) [0x05] = ST22 /* \ST22 */
                DerefOf (EWRY [One]) [0x06] = ST23 /* \ST23 */
                DerefOf (EWRY [One]) [0x07] = ST24 /* \ST24 */
                DerefOf (EWRY [One]) [0x08] = ST25 /* \ST25 */
                DerefOf (EWRY [One]) [0x09] = ST26 /* \ST26 */
                DerefOf (EWRY [One]) [0x0A] = ST27 /* \ST27 */
                DerefOf (EWRY [One]) [0x0B] = ST28 /* \ST28 */
                DerefOf (EWRY [One]) [0x0C] = ST29 /* \ST29 */
                DerefOf (EWRY [One]) [0x0D] = ST60 /* \ST60 */
                DerefOf (EWRY [One]) [0x0E] = ST61 /* \ST61 */
                DerefOf (EWRY [One]) [0x0F] = ST62 /* \ST62 */
                DerefOf (EWRY [One]) [0x10] = ST63 /* \ST63 */
                DerefOf (EWRY [One]) [0x11] = ST64 /* \ST64 */
                DerefOf (EWRY [One]) [0x12] = ST65 /* \ST65 */
                DerefOf (EWRY [One]) [0x13] = ST66 /* \ST66 */
                DerefOf (EWRY [One]) [0x14] = ST67 /* \ST67 */
                DerefOf (EWRY [One]) [0x15] = ST68 /* \ST68 */
                DerefOf (EWRY [One]) [0x16] = ST69 /* \ST69 */
                DerefOf (EWRY [One]) [0x17] = ST6A /* \ST6A */
                DerefOf (EWRY [One]) [0x18] = ST6B /* \ST6B */
                DerefOf (EWRY [One]) [0x19] = ST30 /* \ST30 */
                DerefOf (EWRY [One]) [0x1A] = ST31 /* \ST31 */
                DerefOf (EWRY [One]) [0x1B] = ST32 /* \ST32 */
                DerefOf (EWRY [One]) [0x1C] = ST33 /* \ST33 */
                DerefOf (EWRY [One]) [0x1D] = ST34 /* \ST34 */
                DerefOf (EWRY [One]) [0x1E] = ST35 /* \ST35 */
                DerefOf (EWRY [One]) [0x1F] = ST36 /* \ST36 */
                DerefOf (EWRY [One]) [0x20] = ST37 /* \ST37 */
                DerefOf (EWRY [One]) [0x21] = ST38 /* \ST38 */
                DerefOf (EWRY [One]) [0x22] = ST39 /* \ST39 */
                DerefOf (EWRY [One]) [0x23] = ST70 /* \ST70 */
                DerefOf (EWRY [One]) [0x24] = ST71 /* \ST71 */
                DerefOf (EWRY [One]) [0x25] = ST72 /* \ST72 */
                DerefOf (EWRY [One]) [0x26] = ST73 /* \ST73 */
                DerefOf (EWRY [One]) [0x27] = ST74 /* \ST74 */
                DerefOf (EWRY [One]) [0x28] = ST75 /* \ST75 */
                DerefOf (EWRY [One]) [0x29] = ST76 /* \ST76 */
                DerefOf (EWRY [One]) [0x2A] = ST77 /* \ST77 */
                DerefOf (EWRY [One]) [0x2B] = ST78 /* \ST78 */
                DerefOf (EWRY [One]) [0x2C] = ST79 /* \ST79 */
                DerefOf (EWRY [One]) [0x2D] = ST7A /* \ST7A */
                DerefOf (EWRY [One]) [0x2E] = ST7B /* \ST7B */
                DerefOf (EWRY [One]) [0x2F] = ST40 /* \ST40 */
                DerefOf (EWRY [One]) [0x30] = ST41 /* \ST41 */
                DerefOf (EWRY [One]) [0x31] = ST42 /* \ST42 */
                DerefOf (EWRY [One]) [0x32] = ST43 /* \ST43 */
                DerefOf (EWRY [One]) [0x33] = ST44 /* \ST44 */
                DerefOf (EWRY [One]) [0x34] = ST45 /* \ST45 */
                DerefOf (EWRY [One]) [0x35] = ST46 /* \ST46 */
                DerefOf (EWRY [One]) [0x36] = ST47 /* \ST47 */
                DerefOf (EWRY [One]) [0x37] = ST48 /* \ST48 */
                DerefOf (EWRY [One]) [0x38] = ST49 /* \ST49 */
                DerefOf (EWRY [One]) [0x39] = ST80 /* \ST80 */
                DerefOf (EWRY [One]) [0x3A] = ST81 /* \ST81 */
                DerefOf (EWRY [One]) [0x3B] = ST82 /* \ST82 */
                DerefOf (EWRY [One]) [0x3C] = ST83 /* \ST83 */
                DerefOf (EWRY [One]) [0x3D] = ST84 /* \ST84 */
                DerefOf (EWRY [One]) [0x3E] = ST85 /* \ST85 */
                DerefOf (EWRY [One]) [0x3F] = ST86 /* \ST86 */
                DerefOf (EWRY [One]) [0x40] = ST87 /* \ST87 */
                DerefOf (EWRY [One]) [0x41] = ST88 /* \ST88 */
                DerefOf (EWRY [One]) [0x42] = ST89 /* \ST89 */
                DerefOf (EWRY [One]) [0x43] = ST8A /* \ST8A */
                DerefOf (EWRY [One]) [0x44] = ST8B /* \ST8B */
                Return (EWRY) /* \_SB_.PC00.RP23.PXSX.EWRY */
            }

            Name (WGDY, Package (0x02)
            {
                0x02, 
                Package (0x1C)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WGDS, 0, Serialized)
            {
                DerefOf (WGDY [One]) [One] = SD11 /* \SD11 */
                DerefOf (WGDY [One]) [0x02] = SD12 /* \SD12 */
                DerefOf (WGDY [One]) [0x03] = SD13 /* \SD13 */
                DerefOf (WGDY [One]) [0x04] = SD14 /* \SD14 */
                DerefOf (WGDY [One]) [0x05] = SD15 /* \SD15 */
                DerefOf (WGDY [One]) [0x06] = SD16 /* \SD16 */
                DerefOf (WGDY [One]) [0x07] = SD17 /* \SD17 */
                DerefOf (WGDY [One]) [0x08] = SD18 /* \SD18 */
                DerefOf (WGDY [One]) [0x09] = SD19 /* \SD19 */
                DerefOf (WGDY [One]) [0x0A] = SD21 /* \SD21 */
                DerefOf (WGDY [One]) [0x0B] = SD22 /* \SD22 */
                DerefOf (WGDY [One]) [0x0C] = SD23 /* \SD23 */
                DerefOf (WGDY [One]) [0x0D] = SD24 /* \SD24 */
                DerefOf (WGDY [One]) [0x0E] = SD25 /* \SD25 */
                DerefOf (WGDY [One]) [0x0F] = SD26 /* \SD26 */
                DerefOf (WGDY [One]) [0x10] = SD27 /* \SD27 */
                DerefOf (WGDY [One]) [0x11] = SD28 /* \SD28 */
                DerefOf (WGDY [One]) [0x12] = SD29 /* \SD29 */
                DerefOf (WGDY [One]) [0x13] = SD31 /* \SD31 */
                DerefOf (WGDY [One]) [0x14] = SD32 /* \SD32 */
                DerefOf (WGDY [One]) [0x15] = SD33 /* \SD33 */
                DerefOf (WGDY [One]) [0x16] = SD34 /* \SD34 */
                DerefOf (WGDY [One]) [0x17] = SD35 /* \SD35 */
                DerefOf (WGDY [One]) [0x18] = SD36 /* \SD36 */
                DerefOf (WGDY [One]) [0x19] = SD37 /* \SD37 */
                DerefOf (WGDY [One]) [0x1A] = SD38 /* \SD38 */
                DerefOf (WGDY [One]) [0x1B] = SD39 /* \SD39 */
                Return (WGDY) /* \_SB_.PC00.RP23.PXSX.WGDY */
            }

            Name (ECKY, Package (0x02)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    Zero
                }
            })
            Method (ECKV, 0, Serialized)
            {
                DerefOf (ECKY [One]) [One] = CECV /* \CECV */
                Return (ECKY) /* \_SB_.PC00.RP23.PXSX.ECKY */
            }

            Name (PPAY, Package (0x02)
            {
                One, 
                Package (0x18)
                {
                    0x07, 
                    Zero, 
                    0x18, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x18, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28
                }
            })
            Method (PPAG, 0, Serialized)
            {
                DerefOf (PPAY [One]) [One] = WAGE /* \WAGE */
                DerefOf (PPAY [One]) [0x02] = AGA1 /* \AGA1 */
                DerefOf (PPAY [One]) [0x03] = AGA2 /* \AGA2 */
                DerefOf (PPAY [One]) [0x04] = AGA3 /* \AGA3 */
                DerefOf (PPAY [One]) [0x05] = AGA4 /* \AGA4 */
                DerefOf (PPAY [One]) [0x06] = AGA5 /* \AGA5 */
                DerefOf (PPAY [One]) [0x07] = AGA6 /* \AGA6 */
                DerefOf (PPAY [One]) [0x08] = AGA7 /* \AGA7 */
                DerefOf (PPAY [One]) [0x09] = AGA8 /* \AGA8 */
                DerefOf (PPAY [One]) [0x0A] = AGA9 /* \AGA9 */
                DerefOf (PPAY [One]) [0x0B] = AGAA /* \AGAA */
                DerefOf (PPAY [One]) [0x0C] = AGAB /* \AGAB */
                DerefOf (PPAY [One]) [0x0D] = AGB1 /* \AGB1 */
                DerefOf (PPAY [One]) [0x0E] = AGB2 /* \AGB2 */
                DerefOf (PPAY [One]) [0x0F] = AGB3 /* \AGB3 */
                DerefOf (PPAY [One]) [0x10] = AGB4 /* \AGB4 */
                DerefOf (PPAY [One]) [0x11] = AGB5 /* \AGB5 */
                DerefOf (PPAY [One]) [0x12] = AGB6 /* \AGB6 */
                DerefOf (PPAY [One]) [0x13] = AGB7 /* \AGB7 */
                DerefOf (PPAY [One]) [0x14] = AGB8 /* \AGB8 */
                DerefOf (PPAY [One]) [0x15] = AGB9 /* \AGB9 */
                DerefOf (PPAY [One]) [0x16] = AGBA /* \AGBA */
                DerefOf (PPAY [One]) [0x17] = AGBB /* \AGBB */
                Return (PPAY) /* \_SB_.PC00.RP23.PXSX.PPAY */
            }

            Name (SADX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    0x80000000
                }, 

                Package (0x02)
                {
                    0x12, 
                    0x80000000
                }
            })
            Method (SADS, 0, Serialized)
            {
                DerefOf (SADX [One]) [One] = ATDV /* \ATDV */
                DerefOf (SADX [0x02]) [One] = ATDV /* \ATDV */
                Return (SADX) /* \_SB_.PC00.RP23.PXSX.SADX */
            }

            Name (GPCX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }, 

                Package (0x02)
                {
                    0x12, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }
            })
            Method (GPC, 0, Serialized)
            {
                Return (GPCX) /* \_SB_.PC00.RP23.PXSX.GPCX */
            }
        }

        If (((WWEN != Zero) && (WWRP == SLOT)))
        {
            Method (SHRF, 0, NotSerialized)
            {
                PSD0 (SLOT)
                SPCO (WCLK, One)
                SGOV (WFCP, PFCP)
                Sleep (TN2B)
                SGOV (WBRS, (~PBRS & One))
                Sleep (TB2R)
                SGOV (PRST, (~WPRP & One))
                L23D ()
            }

            Method (_RST, 0, Serialized)  // _RST: Device Reset
            {
                If ((WWEN == 0x02))
                {
                    Local0 = Acquire (WWMT, 0x03E8)
                    If ((Local0 == Zero))
                    {
                        ADBG ("Start WWAN FLDR")
                        DL23 ()
                        SGOV (WBRS, PBRS)
                        Sleep (TBTG)
                        SHRF ()
                        ADBG ("End WWAN FLDR")
                        Release (WWMT)
                    }
                }
                Else
                {
                    SGOV (WBRS, PBRS)
                    Sleep (0xC8)
                    Notify (PXSX, One) // Device Check
                    SGOV (PRST, (~WPRP & One))
                    SGOV (WBRS, (~PBRS & One))
                    Sleep (0xC8)
                    Local0 = Zero
                    While ((LASX == Zero))
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    Sleep (0x0A)
                    Notify (PXSX, One) // Device Check
                }
            }

            PowerResource (MRST, 0x05, 0x0000)
            {
                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    Return (One)
                }

                Method (_ON, 0, Serialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                {
                }

                Method (_RST, 0, Serialized)  // _RST: Device Reset
                {
                    Local0 = Acquire (WWMT, 0x03E8)
                    If ((Local0 == Zero))
                    {
                        ADBG ("Start WWAN PR _RST")
                        DL23 ()
                        SGOV (WBRS, PBRS)
                        SPCO (WCLK, Zero)
                        Sleep (TB2F)
                        SGOV (WFCP, (~PFCP & One))
                        Sleep (TFDI)
                        SHRF ()
                        Release (WWMT)
                    }
                }
            }
        }

        If ((WIST () || ((WWEN != Zero) && (WWRP == SLOT))))
        {
            PowerResource (DRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    If ((DCAP & 0x10000000))
                    {
                        Local0 = DCTR /* \_SB_.PC00.RP23.PXSX.DCTR */
                        Local0 |= 0x8000
                        DCTR = Local0
                    }
                }
            }

            Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
            {
                If (WIST ())
                {
                    If (CondRefOf (WRST))
                    {
                        Return (Package (0x01)
                        {
                            WRST
                        })
                    }
                }

                If (((WWEN != Zero) && (WWRP == SLOT)))
                {
                    If (CondRefOf (MRST))
                    {
                        Return (Package (0x01)
                        {
                            MRST
                        })
                    }
                }

                Return (Package (0x01)
                {
                    DRST
                })
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (WIST ())
                {
                    If ((Arg0 == ToUUID ("f21202bf-8f78-4dc6-a5b3-1f738e285ade") /* Unknown UUID */))
                    {
                        If ((Arg2 == Zero))
                        {
                            If ((Arg1 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x0F                                             // .
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }
                        }

                        If ((Arg2 == One))
                        {
                            Local0 = ACSD /* \ACSD */
                            Return (Local0)
                        }

                        If ((Arg2 == 0x02))
                        {
                            Local0 = I5BS /* \I5BS */
                            Return (Local0)
                        }

                        If ((Arg2 == 0x03))
                        {
                            Local0 = UHBS /* \UHBS */
                            Return (Local0)
                        }

                        Return (Zero)
                    }
                }

                If (((WWEN != Zero) && (WWRP == SLOT)))
                {
                    If ((Arg0 == ToUUID ("bad01b75-22a8-4f48-8792-bdde9467747d") /* Unknown UUID */))
                    {
                        If ((Arg2 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x09                                             // .
                            })
                        }

                        If ((Arg2 == One)) {}
                        If ((Arg2 == 0x02)) {}
                        If ((Arg2 == 0x03))
                        {
                            If ((WRTO == One)) {}
                            ElseIf ((WRTO == 0x03)) {}
                            Else
                            {
                            }

                            Return (WRTO) /* \WRTO */
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }

    Scope (_SB.PC00.RP24.PXSX)
    {
        OperationRegion (RPXX, SystemMemory, GMIO (^_ADR (), _ADR), 0x10)
        Field (RPXX, AnyAcc, NoLock, Preserve)
        {
            VDID,   32
        }

        OperationRegion (FLDR, SystemMemory, (GMIO (^_ADR (), _ADR) + 0x44), 0x06)
        Field (FLDR, ByteAcc, NoLock, Preserve)
        {
            DCAP,   32, 
            DCTR,   16
        }

        Method (WIST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x095A8086)
                    {
                        Return (One)
                    }
                    Case (0x095B8086)
                    {
                        Return (One)
                    }
                    Case (0x31658086)
                    {
                        Return (One)
                    }
                    Case (0x31668086)
                    {
                        Return (One)
                    }
                    Case (0x08B18086)
                    {
                        Return (One)
                    }
                    Case (0x08B28086)
                    {
                        Return (One)
                    }
                    Case (0x08B38086)
                    {
                        Return (One)
                    }
                    Case (0x08B48086)
                    {
                        Return (One)
                    }
                    Case (0x24F38086)
                    {
                        Return (One)
                    }
                    Case (0x24F48086)
                    {
                        Return (One)
                    }
                    Case (0x24F58086)
                    {
                        Return (One)
                    }
                    Case (0x24F68086)
                    {
                        Return (One)
                    }
                    Case (0x24FD8086)
                    {
                        Return (One)
                    }
                    Case (0x24FB8086)
                    {
                        Return (One)
                    }
                    Case (0x25268086)
                    {
                        Return (One)
                    }
                    Case (0x271B8086)
                    {
                        Return (One)
                    }
                    Case (0x27238086)
                    {
                        Return (One)
                    }
                    Case (0x27258086)
                    {
                        Return (One)
                    }
                    Case (0x885210EC)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (WWST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x73608086)
                    {
                        Return (One)
                    }
                    Case (0x75608086)
                    {
                        Return (One)
                    }
                    Case (0x4D7514C3)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        If (WIST ())
        {
            PowerResource (WRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    If ((DCAP & 0x10000000))
                    {
                        Local0 = DCTR /* \_SB_.PC00.RP24.PXSX.DCTR */
                        Local0 |= 0x8000
                        DCTR = Local0
                    }
                }
            }

            Name (SPLX, Package (0x02)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (SPLC, 0, Serialized)
            {
                DerefOf (SPLX [One]) [Zero] = DOM1 /* \DOM1 */
                DerefOf (SPLX [One]) [One] = LIM1 /* \LIM1 */
                DerefOf (SPLX [One]) [0x02] = TIM1 /* \TIM1 */
                Return (SPLX) /* \_SB_.PC00.RP24.PXSX.SPLX */
            }

            Name (WANX, Package (0x03)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (WAND, 0, Serialized)
            {
                DerefOf (WANX [One]) [Zero] = Zero
                DerefOf (WANX [One]) [One] = TRD0 /* \TRD0 */
                DerefOf (WANX [One]) [0x02] = TRL0 /* \TRL0 */
                DerefOf (WANX [0x02]) [Zero] = One
                DerefOf (WANX [0x02]) [One] = TRD1 /* \TRD1 */
                DerefOf (WANX [0x02]) [0x02] = TRL1 /* \TRL1 */
                Return (WANX) /* \_SB_.PC00.RP24.PXSX.WANX */
            }

            Name (WRDX, Package (0x02)
            {
                Zero, 
                Package (0x02)
                {
                    0x80000000, 
                    0x8000
                }
            })
            Method (WRDD, 0, Serialized)
            {
                DerefOf (WRDX [One]) [Zero] = WDM1 /* \WDM1 */
                DerefOf (WRDX [One]) [One] = CID1 /* \CID1 */
                Return (WRDX) /* \_SB_.PC00.RP24.PXSX.WRDX */
            }

            Name (WRDY, Package (0x02)
            {
                One, 
                Package (0x18)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WRDS, 0, Serialized)
            {
                DerefOf (WRDY [One]) [One] = STXE /* \STXE */
                DerefOf (WRDY [One]) [0x02] = ST10 /* \ST10 */
                DerefOf (WRDY [One]) [0x03] = ST11 /* \ST11 */
                DerefOf (WRDY [One]) [0x04] = ST12 /* \ST12 */
                DerefOf (WRDY [One]) [0x05] = ST13 /* \ST13 */
                DerefOf (WRDY [One]) [0x06] = ST14 /* \ST14 */
                DerefOf (WRDY [One]) [0x07] = ST15 /* \ST15 */
                DerefOf (WRDY [One]) [0x08] = ST16 /* \ST16 */
                DerefOf (WRDY [One]) [0x09] = ST17 /* \ST17 */
                DerefOf (WRDY [One]) [0x0A] = ST18 /* \ST18 */
                DerefOf (WRDY [One]) [0x0B] = ST19 /* \ST19 */
                DerefOf (WRDY [One]) [0x0C] = ST50 /* \ST50 */
                DerefOf (WRDY [One]) [0x0D] = ST51 /* \ST51 */
                DerefOf (WRDY [One]) [0x0E] = ST52 /* \ST52 */
                DerefOf (WRDY [One]) [0x0F] = ST53 /* \ST53 */
                DerefOf (WRDY [One]) [0x10] = ST54 /* \ST54 */
                DerefOf (WRDY [One]) [0x11] = ST55 /* \ST55 */
                DerefOf (WRDY [One]) [0x12] = ST56 /* \ST56 */
                DerefOf (WRDY [One]) [0x13] = ST57 /* \ST57 */
                DerefOf (WRDY [One]) [0x14] = ST58 /* \ST58 */
                DerefOf (WRDY [One]) [0x15] = ST59 /* \ST59 */
                DerefOf (WRDY [One]) [0x16] = ST5A /* \ST5A */
                DerefOf (WRDY [One]) [0x17] = ST5B /* \ST5B */
                Return (WRDY) /* \_SB_.PC00.RP24.PXSX.WRDY */
            }

            Name (EWRY, Package (0x02)
            {
                One, 
                Package (0x45)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (EWRD, 0, Serialized)
            {
                DerefOf (EWRY [One]) [One] = STDE /* \STDE */
                DerefOf (EWRY [One]) [0x02] = STRS /* \STRS */
                DerefOf (EWRY [One]) [0x03] = ST20 /* \ST20 */
                DerefOf (EWRY [One]) [0x04] = ST21 /* \ST21 */
                DerefOf (EWRY [One]) [0x05] = ST22 /* \ST22 */
                DerefOf (EWRY [One]) [0x06] = ST23 /* \ST23 */
                DerefOf (EWRY [One]) [0x07] = ST24 /* \ST24 */
                DerefOf (EWRY [One]) [0x08] = ST25 /* \ST25 */
                DerefOf (EWRY [One]) [0x09] = ST26 /* \ST26 */
                DerefOf (EWRY [One]) [0x0A] = ST27 /* \ST27 */
                DerefOf (EWRY [One]) [0x0B] = ST28 /* \ST28 */
                DerefOf (EWRY [One]) [0x0C] = ST29 /* \ST29 */
                DerefOf (EWRY [One]) [0x0D] = ST60 /* \ST60 */
                DerefOf (EWRY [One]) [0x0E] = ST61 /* \ST61 */
                DerefOf (EWRY [One]) [0x0F] = ST62 /* \ST62 */
                DerefOf (EWRY [One]) [0x10] = ST63 /* \ST63 */
                DerefOf (EWRY [One]) [0x11] = ST64 /* \ST64 */
                DerefOf (EWRY [One]) [0x12] = ST65 /* \ST65 */
                DerefOf (EWRY [One]) [0x13] = ST66 /* \ST66 */
                DerefOf (EWRY [One]) [0x14] = ST67 /* \ST67 */
                DerefOf (EWRY [One]) [0x15] = ST68 /* \ST68 */
                DerefOf (EWRY [One]) [0x16] = ST69 /* \ST69 */
                DerefOf (EWRY [One]) [0x17] = ST6A /* \ST6A */
                DerefOf (EWRY [One]) [0x18] = ST6B /* \ST6B */
                DerefOf (EWRY [One]) [0x19] = ST30 /* \ST30 */
                DerefOf (EWRY [One]) [0x1A] = ST31 /* \ST31 */
                DerefOf (EWRY [One]) [0x1B] = ST32 /* \ST32 */
                DerefOf (EWRY [One]) [0x1C] = ST33 /* \ST33 */
                DerefOf (EWRY [One]) [0x1D] = ST34 /* \ST34 */
                DerefOf (EWRY [One]) [0x1E] = ST35 /* \ST35 */
                DerefOf (EWRY [One]) [0x1F] = ST36 /* \ST36 */
                DerefOf (EWRY [One]) [0x20] = ST37 /* \ST37 */
                DerefOf (EWRY [One]) [0x21] = ST38 /* \ST38 */
                DerefOf (EWRY [One]) [0x22] = ST39 /* \ST39 */
                DerefOf (EWRY [One]) [0x23] = ST70 /* \ST70 */
                DerefOf (EWRY [One]) [0x24] = ST71 /* \ST71 */
                DerefOf (EWRY [One]) [0x25] = ST72 /* \ST72 */
                DerefOf (EWRY [One]) [0x26] = ST73 /* \ST73 */
                DerefOf (EWRY [One]) [0x27] = ST74 /* \ST74 */
                DerefOf (EWRY [One]) [0x28] = ST75 /* \ST75 */
                DerefOf (EWRY [One]) [0x29] = ST76 /* \ST76 */
                DerefOf (EWRY [One]) [0x2A] = ST77 /* \ST77 */
                DerefOf (EWRY [One]) [0x2B] = ST78 /* \ST78 */
                DerefOf (EWRY [One]) [0x2C] = ST79 /* \ST79 */
                DerefOf (EWRY [One]) [0x2D] = ST7A /* \ST7A */
                DerefOf (EWRY [One]) [0x2E] = ST7B /* \ST7B */
                DerefOf (EWRY [One]) [0x2F] = ST40 /* \ST40 */
                DerefOf (EWRY [One]) [0x30] = ST41 /* \ST41 */
                DerefOf (EWRY [One]) [0x31] = ST42 /* \ST42 */
                DerefOf (EWRY [One]) [0x32] = ST43 /* \ST43 */
                DerefOf (EWRY [One]) [0x33] = ST44 /* \ST44 */
                DerefOf (EWRY [One]) [0x34] = ST45 /* \ST45 */
                DerefOf (EWRY [One]) [0x35] = ST46 /* \ST46 */
                DerefOf (EWRY [One]) [0x36] = ST47 /* \ST47 */
                DerefOf (EWRY [One]) [0x37] = ST48 /* \ST48 */
                DerefOf (EWRY [One]) [0x38] = ST49 /* \ST49 */
                DerefOf (EWRY [One]) [0x39] = ST80 /* \ST80 */
                DerefOf (EWRY [One]) [0x3A] = ST81 /* \ST81 */
                DerefOf (EWRY [One]) [0x3B] = ST82 /* \ST82 */
                DerefOf (EWRY [One]) [0x3C] = ST83 /* \ST83 */
                DerefOf (EWRY [One]) [0x3D] = ST84 /* \ST84 */
                DerefOf (EWRY [One]) [0x3E] = ST85 /* \ST85 */
                DerefOf (EWRY [One]) [0x3F] = ST86 /* \ST86 */
                DerefOf (EWRY [One]) [0x40] = ST87 /* \ST87 */
                DerefOf (EWRY [One]) [0x41] = ST88 /* \ST88 */
                DerefOf (EWRY [One]) [0x42] = ST89 /* \ST89 */
                DerefOf (EWRY [One]) [0x43] = ST8A /* \ST8A */
                DerefOf (EWRY [One]) [0x44] = ST8B /* \ST8B */
                Return (EWRY) /* \_SB_.PC00.RP24.PXSX.EWRY */
            }

            Name (WGDY, Package (0x02)
            {
                0x02, 
                Package (0x1C)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WGDS, 0, Serialized)
            {
                DerefOf (WGDY [One]) [One] = SD11 /* \SD11 */
                DerefOf (WGDY [One]) [0x02] = SD12 /* \SD12 */
                DerefOf (WGDY [One]) [0x03] = SD13 /* \SD13 */
                DerefOf (WGDY [One]) [0x04] = SD14 /* \SD14 */
                DerefOf (WGDY [One]) [0x05] = SD15 /* \SD15 */
                DerefOf (WGDY [One]) [0x06] = SD16 /* \SD16 */
                DerefOf (WGDY [One]) [0x07] = SD17 /* \SD17 */
                DerefOf (WGDY [One]) [0x08] = SD18 /* \SD18 */
                DerefOf (WGDY [One]) [0x09] = SD19 /* \SD19 */
                DerefOf (WGDY [One]) [0x0A] = SD21 /* \SD21 */
                DerefOf (WGDY [One]) [0x0B] = SD22 /* \SD22 */
                DerefOf (WGDY [One]) [0x0C] = SD23 /* \SD23 */
                DerefOf (WGDY [One]) [0x0D] = SD24 /* \SD24 */
                DerefOf (WGDY [One]) [0x0E] = SD25 /* \SD25 */
                DerefOf (WGDY [One]) [0x0F] = SD26 /* \SD26 */
                DerefOf (WGDY [One]) [0x10] = SD27 /* \SD27 */
                DerefOf (WGDY [One]) [0x11] = SD28 /* \SD28 */
                DerefOf (WGDY [One]) [0x12] = SD29 /* \SD29 */
                DerefOf (WGDY [One]) [0x13] = SD31 /* \SD31 */
                DerefOf (WGDY [One]) [0x14] = SD32 /* \SD32 */
                DerefOf (WGDY [One]) [0x15] = SD33 /* \SD33 */
                DerefOf (WGDY [One]) [0x16] = SD34 /* \SD34 */
                DerefOf (WGDY [One]) [0x17] = SD35 /* \SD35 */
                DerefOf (WGDY [One]) [0x18] = SD36 /* \SD36 */
                DerefOf (WGDY [One]) [0x19] = SD37 /* \SD37 */
                DerefOf (WGDY [One]) [0x1A] = SD38 /* \SD38 */
                DerefOf (WGDY [One]) [0x1B] = SD39 /* \SD39 */
                Return (WGDY) /* \_SB_.PC00.RP24.PXSX.WGDY */
            }

            Name (ECKY, Package (0x02)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    Zero
                }
            })
            Method (ECKV, 0, Serialized)
            {
                DerefOf (ECKY [One]) [One] = CECV /* \CECV */
                Return (ECKY) /* \_SB_.PC00.RP24.PXSX.ECKY */
            }

            Name (PPAY, Package (0x02)
            {
                One, 
                Package (0x18)
                {
                    0x07, 
                    Zero, 
                    0x18, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x18, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28
                }
            })
            Method (PPAG, 0, Serialized)
            {
                DerefOf (PPAY [One]) [One] = WAGE /* \WAGE */
                DerefOf (PPAY [One]) [0x02] = AGA1 /* \AGA1 */
                DerefOf (PPAY [One]) [0x03] = AGA2 /* \AGA2 */
                DerefOf (PPAY [One]) [0x04] = AGA3 /* \AGA3 */
                DerefOf (PPAY [One]) [0x05] = AGA4 /* \AGA4 */
                DerefOf (PPAY [One]) [0x06] = AGA5 /* \AGA5 */
                DerefOf (PPAY [One]) [0x07] = AGA6 /* \AGA6 */
                DerefOf (PPAY [One]) [0x08] = AGA7 /* \AGA7 */
                DerefOf (PPAY [One]) [0x09] = AGA8 /* \AGA8 */
                DerefOf (PPAY [One]) [0x0A] = AGA9 /* \AGA9 */
                DerefOf (PPAY [One]) [0x0B] = AGAA /* \AGAA */
                DerefOf (PPAY [One]) [0x0C] = AGAB /* \AGAB */
                DerefOf (PPAY [One]) [0x0D] = AGB1 /* \AGB1 */
                DerefOf (PPAY [One]) [0x0E] = AGB2 /* \AGB2 */
                DerefOf (PPAY [One]) [0x0F] = AGB3 /* \AGB3 */
                DerefOf (PPAY [One]) [0x10] = AGB4 /* \AGB4 */
                DerefOf (PPAY [One]) [0x11] = AGB5 /* \AGB5 */
                DerefOf (PPAY [One]) [0x12] = AGB6 /* \AGB6 */
                DerefOf (PPAY [One]) [0x13] = AGB7 /* \AGB7 */
                DerefOf (PPAY [One]) [0x14] = AGB8 /* \AGB8 */
                DerefOf (PPAY [One]) [0x15] = AGB9 /* \AGB9 */
                DerefOf (PPAY [One]) [0x16] = AGBA /* \AGBA */
                DerefOf (PPAY [One]) [0x17] = AGBB /* \AGBB */
                Return (PPAY) /* \_SB_.PC00.RP24.PXSX.PPAY */
            }

            Name (SADX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    0x80000000
                }, 

                Package (0x02)
                {
                    0x12, 
                    0x80000000
                }
            })
            Method (SADS, 0, Serialized)
            {
                DerefOf (SADX [One]) [One] = ATDV /* \ATDV */
                DerefOf (SADX [0x02]) [One] = ATDV /* \ATDV */
                Return (SADX) /* \_SB_.PC00.RP24.PXSX.SADX */
            }

            Name (GPCX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }, 

                Package (0x02)
                {
                    0x12, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }
            })
            Method (GPC, 0, Serialized)
            {
                Return (GPCX) /* \_SB_.PC00.RP24.PXSX.GPCX */
            }
        }

        If (((WWEN != Zero) && (WWRP == SLOT)))
        {
            Method (SHRF, 0, NotSerialized)
            {
                PSD0 (SLOT)
                SPCO (WCLK, One)
                SGOV (WFCP, PFCP)
                Sleep (TN2B)
                SGOV (WBRS, (~PBRS & One))
                Sleep (TB2R)
                SGOV (PRST, (~WPRP & One))
                L23D ()
            }

            Method (_RST, 0, Serialized)  // _RST: Device Reset
            {
                If ((WWEN == 0x02))
                {
                    Local0 = Acquire (WWMT, 0x03E8)
                    If ((Local0 == Zero))
                    {
                        ADBG ("Start WWAN FLDR")
                        DL23 ()
                        SGOV (WBRS, PBRS)
                        Sleep (TBTG)
                        SHRF ()
                        ADBG ("End WWAN FLDR")
                        Release (WWMT)
                    }
                }
                Else
                {
                    SGOV (WBRS, PBRS)
                    Sleep (0xC8)
                    Notify (PXSX, One) // Device Check
                    SGOV (PRST, (~WPRP & One))
                    SGOV (WBRS, (~PBRS & One))
                    Sleep (0xC8)
                    Local0 = Zero
                    While ((LASX == Zero))
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    Sleep (0x0A)
                    Notify (PXSX, One) // Device Check
                }
            }

            PowerResource (MRST, 0x05, 0x0000)
            {
                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    Return (One)
                }

                Method (_ON, 0, Serialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                {
                }

                Method (_RST, 0, Serialized)  // _RST: Device Reset
                {
                    Local0 = Acquire (WWMT, 0x03E8)
                    If ((Local0 == Zero))
                    {
                        ADBG ("Start WWAN PR _RST")
                        DL23 ()
                        SGOV (WBRS, PBRS)
                        SPCO (WCLK, Zero)
                        Sleep (TB2F)
                        SGOV (WFCP, (~PFCP & One))
                        Sleep (TFDI)
                        SHRF ()
                        Release (WWMT)
                    }
                }
            }
        }

        If ((WIST () || ((WWEN != Zero) && (WWRP == SLOT))))
        {
            PowerResource (DRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    If ((DCAP & 0x10000000))
                    {
                        Local0 = DCTR /* \_SB_.PC00.RP24.PXSX.DCTR */
                        Local0 |= 0x8000
                        DCTR = Local0
                    }
                }
            }

            Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
            {
                If (WIST ())
                {
                    If (CondRefOf (WRST))
                    {
                        Return (Package (0x01)
                        {
                            WRST
                        })
                    }
                }

                If (((WWEN != Zero) && (WWRP == SLOT)))
                {
                    If (CondRefOf (MRST))
                    {
                        Return (Package (0x01)
                        {
                            MRST
                        })
                    }
                }

                Return (Package (0x01)
                {
                    DRST
                })
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (WIST ())
                {
                    If ((Arg0 == ToUUID ("f21202bf-8f78-4dc6-a5b3-1f738e285ade") /* Unknown UUID */))
                    {
                        If ((Arg2 == Zero))
                        {
                            If ((Arg1 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x0F                                             // .
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }
                        }

                        If ((Arg2 == One))
                        {
                            Local0 = ACSD /* \ACSD */
                            Return (Local0)
                        }

                        If ((Arg2 == 0x02))
                        {
                            Local0 = I5BS /* \I5BS */
                            Return (Local0)
                        }

                        If ((Arg2 == 0x03))
                        {
                            Local0 = UHBS /* \UHBS */
                            Return (Local0)
                        }

                        Return (Zero)
                    }
                }

                If (((WWEN != Zero) && (WWRP == SLOT)))
                {
                    If ((Arg0 == ToUUID ("bad01b75-22a8-4f48-8792-bdde9467747d") /* Unknown UUID */))
                    {
                        If ((Arg2 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x09                                             // .
                            })
                        }

                        If ((Arg2 == One)) {}
                        If ((Arg2 == 0x02)) {}
                        If ((Arg2 == 0x03))
                        {
                            If ((WRTO == One)) {}
                            ElseIf ((WRTO == 0x03)) {}
                            Else
                            {
                            }

                            Return (WRTO) /* \WRTO */
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }

    Scope (_SB)
    {
        Name (PDAT, Zero)
        Name (DSSI, Zero)
        Method (DSSV, 0, Serialized)
        {
            PDAT = SDAB /* \SDAB */
            PDAT <<= 0x10
            PDAT |= SDAA /* \_SB_.PDAT */
        }

        Device (WFDE)
        {
            Name (_HID, "PNP0C14" /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "SampleDev")  // _UID: Unique ID
            Name (_WDG, Buffer (0x3C)
            {
                /* 0000 */  0xEF, 0x9D, 0xC4, 0x2B, 0x15, 0x7B, 0x05, 0x4F,  // ...+.{.O
                /* 0008 */  0x8B, 0xB7, 0xEE, 0x37, 0xB9, 0x54, 0x7C, 0x0B,  // ...7.T|.
                /* 0010 */  0x44, 0x45, 0x01, 0x02, 0x3E, 0xA3, 0xFE, 0xA6,  // DE..>...
                /* 0018 */  0xBF, 0xDA, 0xF5, 0x46, 0xBF, 0xC8, 0x46, 0x0D,  // ...F..F.
                /* 0020 */  0x96, 0x1B, 0xEC, 0x9F, 0xD0, 0x00, 0x01, 0x08,  // ........
                /* 0028 */  0x21, 0x12, 0x90, 0x05, 0x66, 0xD5, 0xD1, 0x11,  // !...f...
                /* 0030 */  0xB2, 0xF0, 0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10,  // ......).
                /* 0038 */  0x43, 0x43, 0x01, 0x00                           // CC..
            })
            Method (WMDE, 3, NotSerialized)
            {
                If ((Arg1 == One))
                {
                    Return (One)
                }

                If ((Arg1 == 0x02))
                {
                    If ((DSSI == Zero))
                    {
                        DSSV ()
                        DSSI = One
                    }

                    Return (One)
                }

                If ((Arg1 == 0x03))
                {
                    Return (PDAT) /* \_SB_.PDAT */
                }

                Return (Zero)
            }

            Method (_WED, 1, NotSerialized)  // _Wxx: Wake Event, xx=0x00-0xFF
            {
                If ((Arg0 == 0xD0))
                {
                    Return (PDAT) /* \_SB_.PDAT */
                }

                Return (Zero)
            }

            Name (WQCC, Buffer (0x043D)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0x2D, 0x04, 0x00, 0x00, 0xB4, 0x0F, 0x00, 0x00,  // -.......
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0x28, 0xCE, 0x87, 0x00, 0x01, 0x06, 0x18, 0x42,  // (......B
                /* 0020 */  0x10, 0x07, 0x10, 0x22, 0x21, 0x04, 0x12, 0x01,  // ..."!...
                /* 0028 */  0xA1, 0xC8, 0x2C, 0x0C, 0x86, 0x10, 0x38, 0x2E,  // ..,...8.
                /* 0030 */  0x24, 0x15, 0x07, 0x85, 0x12, 0x02, 0xA1, 0xFE,  // $.......
                /* 0038 */  0x04, 0xF2, 0x2B, 0x00, 0xA1, 0x43, 0x01, 0x32,  // ..+..C.2
                /* 0040 */  0x05, 0x18, 0x14, 0xE0, 0x14, 0x41, 0x04, 0xBD,  // .....A..
                /* 0048 */  0x0A, 0xB0, 0x29, 0xC0, 0xA4, 0x00, 0x8B, 0x02,  // ..).....
                /* 0050 */  0xB4, 0x0B, 0xB0, 0x2C, 0x40, 0xB7, 0x00, 0xE9,  // ...,@...
                /* 0058 */  0xB0, 0x44, 0x24, 0x38, 0x4A, 0x0C, 0x38, 0x4A,  // .D$8J.8J
                /* 0060 */  0x27, 0xB6, 0x70, 0xC3, 0x06, 0x2F, 0x14, 0x45,  // '.p../.E
                /* 0068 */  0x33, 0x88, 0x92, 0xA0, 0x72, 0x01, 0xBE, 0x11,  // 3...r...
                /* 0070 */  0x04, 0x5E, 0xAE, 0x00, 0xC9, 0x13, 0x90, 0x66,  // .^.....f
                /* 0078 */  0x01, 0x86, 0x05, 0x58, 0x17, 0x20, 0x7B, 0x08,  // ...X. {.
                /* 0080 */  0x54, 0xEA, 0x10, 0x50, 0x72, 0x86, 0x80, 0x1A,  // T..Pr...
                /* 0088 */  0x40, 0xAB, 0x13, 0x10, 0x7E, 0xA5, 0x53, 0x42,  // @...~.SB
                /* 0090 */  0x12, 0x84, 0x33, 0x56, 0xF1, 0xF8, 0x9A, 0x45,  // ..3V...E
                /* 0098 */  0xD3, 0x73, 0x92, 0x73, 0x0C, 0x39, 0x1E, 0x17,  // .s.s.9..
                /* 00A0 */  0x7A, 0x10, 0x3C, 0x84, 0x04, 0x10, 0x26, 0x7B,  // z.<...&{
                /* 00A8 */  0xC8, 0x92, 0x0D, 0x83, 0xD2, 0x30, 0x16, 0xEA,  // .....0..
                /* 00B0 */  0x62, 0xD4, 0xA8, 0x91, 0xB2, 0x01, 0x19, 0xA2,  // b.......
                /* 00B8 */  0x24, 0x38, 0xD4, 0xA8, 0x3D, 0xBB, 0xE6, 0xC7,  // $8..=...
                /* 00C0 */  0xA1, 0xD9, 0xB5, 0x3D, 0x16, 0x02, 0xC9, 0xA4,  // ...=....
                /* 00C8 */  0x0D, 0x05, 0x25, 0x05, 0x42, 0xC2, 0x67, 0x4A,  // ..%.B.gJ
                /* 00D0 */  0x66, 0x14, 0xF1, 0x48, 0x0D, 0x93, 0xC0, 0xA3,  // f..H....
                /* 00D8 */  0x88, 0xEC, 0x19, 0x46, 0x63, 0xD0, 0xD8, 0x61,  // ...Fc..a
                /* 00E0 */  0x78, 0x98, 0xC1, 0x0E, 0xE2, 0x30, 0x8E, 0x39,  // x....0.9
                /* 00E8 */  0x72, 0x02, 0x4F, 0xE8, 0x48, 0x8F, 0xBC, 0xB0,  // r.O.H...
                /* 00F0 */  0x79, 0x0A, 0x35, 0x46, 0x73, 0x50, 0x04, 0xFF,  // y.5FsP..
                /* 00F8 */  0x51, 0x00, 0x2B, 0x11, 0x56, 0xA3, 0x8D, 0x7D,  // Q.+.V..}
                /* 0100 */  0xBE, 0x1E, 0xCD, 0xC1, 0xC6, 0x38, 0x82, 0xE3,  // .....8..
                /* 0108 */  0x4A, 0xF0, 0xFF, 0x0F, 0x13, 0xA4, 0xF7, 0xE9,  // J.......
                /* 0110 */  0x10, 0x41, 0x78, 0x12, 0x3D, 0x0B, 0x61, 0xF5,  // .Ax.=.a.
                /* 0118 */  0x0C, 0x24, 0x9C, 0x10, 0xC7, 0xCD, 0x61, 0x0E,  // .$....a.
                /* 0120 */  0x58, 0x83, 0x40, 0xC9, 0x80, 0x10, 0xE4, 0x33,  // X.@....3
                /* 0128 */  0xC1, 0xD1, 0x99, 0xC0, 0xEE, 0x8F, 0x02, 0xD2,  // ........
                /* 0130 */  0x26, 0x40, 0xE3, 0x1D, 0x40, 0x20, 0x9D, 0x21,  // &@..@ .!
                /* 0138 */  0x08, 0xA4, 0xAD, 0xC1, 0x08, 0xA6, 0x42, 0x28,  // ......B(
                /* 0140 */  0xA1, 0x1C, 0x55, 0x38, 0x5B, 0x43, 0x11, 0x90,  // ..U8[C..
                /* 0148 */  0x6F, 0x05, 0xAF, 0x0F, 0xA1, 0xD8, 0xD4, 0x42,  // o......B
                /* 0150 */  0x1E, 0x5B, 0x90, 0xC6, 0xC0, 0x84, 0x1C, 0x2C,  // .[.....,
                /* 0158 */  0x4C, 0xBC, 0xF6, 0x17, 0xC2, 0x1E, 0x12, 0x3A,  // L......:
                /* 0160 */  0x0B, 0x38, 0xD2, 0x68, 0x50, 0x07, 0x05, 0x9F,  // .8.hP...
                /* 0168 */  0x07, 0x7C, 0x16, 0x78, 0x3E, 0xF0, 0xA8, 0x0E,  // .|.x>...
                /* 0170 */  0xCD, 0x83, 0x3B, 0xB0, 0xC7, 0x87, 0x07, 0x01,  // ..;.....
                /* 0178 */  0x0F, 0x99, 0xDD, 0x10, 0x7C, 0xAE, 0xF0, 0xC9,  // ....|...
                /* 0180 */  0x00, 0xEF, 0x1A, 0x50, 0x57, 0x82, 0x07, 0x02,  // ...PW...
                /* 0188 */  0x36, 0x46, 0xC3, 0xF1, 0x21, 0x7A, 0xB8, 0xE1,  // 6F..!z..
                /* 0190 */  0x4E, 0xE0, 0x10, 0x19, 0xA0, 0x67, 0xF5, 0x2C,  // N....g.,
                /* 0198 */  0x80, 0x1D, 0xD6, 0xC9, 0x3C, 0x08, 0xBC, 0x4B,  // ....<..K
                /* 01A0 */  0x34, 0x7B, 0x8B, 0x20, 0x04, 0xC7, 0xE3, 0x0B,  // 4{. ....
                /* 01A8 */  0x04, 0x9B, 0x70, 0x02, 0xCB, 0x1F, 0x04, 0x6A,  // ..p....j
                /* 01B0 */  0x64, 0x86, 0xF6, 0x74, 0x4F, 0xEB, 0x45, 0xC0,  // d..tO.E.
                /* 01B8 */  0x07, 0x00, 0x13, 0x58, 0x2C, 0x84, 0x14, 0x40,  // ...X,..@
                /* 01C0 */  0x68, 0x3C, 0xE0, 0x57, 0x7C, 0xE8, 0x20, 0xB7,  // h<.W|. .
                /* 01C8 */  0x05, 0xCF, 0xD7, 0x47, 0x13, 0xE6, 0x64, 0x3C,  // ...G..d<
                /* 01D0 */  0xA8, 0x51, 0xF8, 0x14, 0x10, 0xEE, 0xBC, 0x4D,  // .Q.....M
                /* 01D8 */  0xE0, 0xC0, 0x10, 0xFA, 0x5F, 0x58, 0xD4, 0x31,  // ...._X.1
                /* 01E0 */  0x85, 0x9F, 0x26, 0xE8, 0x41, 0x82, 0xA1, 0xB2,  // ..&.A...
                /* 01E8 */  0xFF, 0x3F, 0xC4, 0x91, 0x9C, 0x90, 0x3F, 0x2B,  // .?....?+
                /* 01F0 */  0x1E, 0x18, 0x7C, 0xC1, 0xA7, 0x08, 0x20, 0x03,  // ..|... .
                /* 01F8 */  0x83, 0xBB, 0x42, 0xB0, 0x01, 0xC3, 0xBF, 0x4C,  // ..B....L
                /* 0200 */  0x18, 0xD8, 0x17, 0x89, 0xCA, 0x20, 0xC9, 0x91,  // ..... ..
                /* 0208 */  0xE3, 0x89, 0x06, 0x0C, 0xE8, 0x7D, 0x0E, 0x56,  // .....}.V
                /* 0210 */  0x87, 0x16, 0x83, 0xF9, 0x3E, 0x13, 0xEC, 0xE5,  // ....>...
                /* 0218 */  0xA1, 0x47, 0x20, 0xDD, 0x59, 0xAC, 0x15, 0x42,  // .G .Y..B
                /* 0220 */  0x38, 0xAF, 0x30, 0x3E, 0xD6, 0x00, 0x93, 0x51,  // 8.0>...Q
                /* 0228 */  0x3F, 0xD6, 0x80, 0xED, 0xE4, 0x03, 0x67, 0x00,  // ?.....g.
                /* 0230 */  0x3C, 0x8E, 0x09, 0x10, 0x26, 0xFA, 0x5D, 0x20,  // <...&.] 
                /* 0238 */  0x29, 0x0F, 0x04, 0x0A, 0xE3, 0x23, 0x0D, 0x70,  // )....#.p
                /* 0240 */  0xF9, 0xFF, 0x1F, 0x69, 0x80, 0xDF, 0xC9, 0x00,  // ...i....
                /* 0248 */  0x77, 0x7A, 0x00, 0xCF, 0x84, 0x5E, 0x2B, 0xD8,  // wz...^+.
                /* 0250 */  0xFD, 0xC1, 0xE3, 0x08, 0x12, 0x38, 0xC2, 0x13,  // .....8..
                /* 0258 */  0x11, 0x39, 0xD1, 0x40, 0x3E, 0x35, 0x3C, 0xC2,  // .9.@>5<.
                /* 0260 */  0x3C, 0x07, 0x9C, 0xCE, 0xE1, 0x1C, 0xC9, 0x43,  // <......C
                /* 0268 */  0xC0, 0xEB, 0x8C, 0xBD, 0x21, 0xE9, 0x1E, 0xF3,  // ....!...
                /* 0270 */  0x3A, 0x63, 0xAC, 0x40, 0x27, 0x15, 0xC5, 0xF7,  // :c.@'...
                /* 0278 */  0x99, 0x50, 0x11, 0xA2, 0x45, 0x09, 0x19, 0xE1,  // .P..E...
                /* 0280 */  0x15, 0x22, 0xA4, 0x91, 0xA3, 0x45, 0x8C, 0x12,  // ."...E..
                /* 0288 */  0x3F, 0x64, 0x9C, 0x27, 0x1A, 0x16, 0xEB, 0x28,  // ?d.'...(
                /* 0290 */  0xA0, 0xF3, 0x87, 0x4F, 0x34, 0x80, 0xDF, 0xFF,  // ...O4...
                /* 0298 */  0xFF, 0x89, 0x06, 0xFC, 0xF2, 0x4E, 0x24, 0xA0,  // .....N$.
                /* 02A0 */  0x3B, 0x36, 0x79, 0x0E, 0x21, 0x9E, 0x46, 0x80,  // ;6y.!.F.
                /* 02A8 */  0x8B, 0xF4, 0x47, 0x87, 0x4E, 0x75, 0x64, 0xA1,  // ..G.Nud.
                /* 02B0 */  0xB2, 0xB1, 0x50, 0x0F, 0x82, 0x0A, 0x3F, 0x21,  // ..P...?!
                /* 02B8 */  0xE8, 0xAC, 0x12, 0x37, 0xE6, 0xAB, 0xCA, 0x6B,  // ...7...k
                /* 02C0 */  0x84, 0x4F, 0x6B, 0xBE, 0x4B, 0xB0, 0x41, 0x0B,  // .Ok.K.A.
                /* 02C8 */  0x4E, 0xA7, 0x3D, 0x2E, 0x93, 0x42, 0x22, 0x21,  // N.=..B"!
                /* 02D0 */  0x34, 0x20, 0xC3, 0x59, 0x16, 0x1C, 0x05, 0xF1,  // 4 .Y....
                /* 02D8 */  0xE8, 0x7D, 0xE2, 0xF3, 0x51, 0x08, 0x6E, 0xC4,  // .}..Q.n.
                /* 02E0 */  0xA3, 0x10, 0x3D, 0x2D, 0xE0, 0xC7, 0x72, 0x64,  // ..=-..rd
                /* 02E8 */  0x27, 0xE6, 0x59, 0xF8, 0x70, 0x87, 0x3B, 0x72,  // '.Y.p.;r
                /* 02F0 */  0xC0, 0x1D, 0x1C, 0x5B, 0xE1, 0xF1, 0xFB, 0x02,  // ...[....
                /* 02F8 */  0x10, 0xE4, 0x7C, 0x83, 0x9D, 0xAC, 0x51, 0x5E,  // ..|...Q^
                /* 0300 */  0x11, 0x3C, 0x42, 0xEC, 0x60, 0x7C, 0x4C, 0xE2,  // .<B.`|L.
                /* 0308 */  0xE3, 0xF0, 0xD5, 0xE0, 0x7D, 0xC6, 0x04, 0xEC,  // ....}...
                /* 0310 */  0x0C, 0x04, 0x9E, 0xFF, 0xFF, 0x19, 0x88, 0x0B,  // ........
                /* 0318 */  0x3C, 0x22, 0x80, 0x02, 0xC8, 0x97, 0x02, 0x1F,  // <"......
                /* 0320 */  0x11, 0x1E, 0x0C, 0xD8, 0x1C, 0x9E, 0x12, 0x7C,  // .......|
                /* 0328 */  0xC4, 0x61, 0xF0, 0x3C, 0xDA, 0xA8, 0xA8, 0xAC,  // .a.<....
                /* 0330 */  0x71, 0xA1, 0x06, 0xEB, 0x33, 0x0C, 0xC3, 0x3E,  // q...3..>
                /* 0338 */  0x4F, 0x5F, 0x9A, 0x8E, 0xD2, 0xC7, 0x29, 0x0C,  // O_....).
                /* 0340 */  0xAC, 0x87, 0xCF, 0x61, 0x8D, 0x16, 0xF6, 0xA8,  // ...a....
                /* 0348 */  0x9F, 0x24, 0x7C, 0x0B, 0xF1, 0xCC, 0x8C, 0x11,  // .$|.....
                /* 0350 */  0xD6, 0x47, 0x00, 0x20, 0x76, 0x7C, 0x40, 0x9D,  // .G. v|@.
                /* 0358 */  0x79, 0x7C, 0x6E, 0xF0, 0x88, 0x22, 0x9E, 0xE7,  // y|n.."..
                /* 0360 */  0xDB, 0x8F, 0x2F, 0x1B, 0xA7, 0xE4, 0x01, 0x59,  // ../....Y
                /* 0368 */  0xE2, 0xE9, 0x01, 0x25, 0x8E, 0x42, 0xD2, 0x4E,  // ...%.B.N
                /* 0370 */  0x0F, 0x28, 0x31, 0x70, 0x14, 0xC4, 0xA7, 0x07,  // .(1p....
                /* 0378 */  0x07, 0x3D, 0x3D, 0x40, 0x0F, 0x76, 0x7A, 0x00,  // .==@.vz.
                /* 0380 */  0xC5, 0xA9, 0x00, 0x37, 0x56, 0xB8, 0x63, 0xF3,  // ...7V.c.
                /* 0388 */  0x21, 0xCC, 0x73, 0xC3, 0x1E, 0x1C, 0xC0, 0xF2,  // !.s.....
                /* 0390 */  0xFF, 0x3F, 0x38, 0x00, 0xDF, 0xE1, 0xFA, 0xE0,  // .?8.....
                /* 0398 */  0x00, 0xAE, 0x33, 0x80, 0x0F, 0x0E, 0xE0, 0x3A,  // ..3....:
                /* 03A0 */  0x6E, 0x82, 0x67, 0xF4, 0xEC, 0x08, 0xF3, 0x88,  // n.g.....
                /* 03A8 */  0x63, 0xAC, 0x73, 0x7D, 0xE4, 0xF1, 0x09, 0x00,  // c.s}....
                /* 03B0 */  0x8E, 0x98, 0x73, 0x03, 0x6A, 0xB8, 0x96, 0x7B,  // ..s.j..{
                /* 03B8 */  0x8A, 0x41, 0xDC, 0x11, 0x30, 0x07, 0x18, 0x1F,  // .A..0...
                /* 03C0 */  0x1B, 0xB8, 0x40, 0x0A, 0xC9, 0x3B, 0x36, 0xA0,  // ..@..;6.
                /* 03C8 */  0x04, 0xC1, 0x51, 0x10, 0x8F, 0xD1, 0x61, 0x8F,  // ..Q...a.
                /* 03D0 */  0x0D, 0xD0, 0xC3, 0x1D, 0x1B, 0x40, 0x71, 0xFC,  // .....@q.
                /* 03D8 */  0xC1, 0x9F, 0x38, 0xE0, 0x9F, 0xC3, 0xE0, 0x1C,  // ..8.....
                /* 03E0 */  0x1C, 0xF8, 0xFF, 0xFF, 0xE0, 0x00, 0xF8, 0x08,  // ........
                /* 03E8 */  0x75, 0x70, 0x00, 0x1D, 0x2C, 0x3F, 0x38, 0x80,  // up..,?8.
                /* 03F0 */  0x67, 0xFC, 0xC0, 0x43, 0xA1, 0x4D, 0x9F, 0x1A,  // g..C.M..
                /* 03F8 */  0x8D, 0x5A, 0x35, 0x28, 0x53, 0xA3, 0x4C, 0x83,  // .Z5(S.L.
                /* 0400 */  0x5A, 0x7D, 0x2A, 0x35, 0x66, 0xCC, 0xC6, 0x91,  // Z}*5f...
                /* 0408 */  0x01, 0x25, 0x64, 0x55, 0x1A, 0x96, 0x63, 0x80,  // .%dU..c.
                /* 0410 */  0xF0, 0x47, 0x82, 0x40, 0x1C, 0xD5, 0x02, 0x20,  // .G.@... 
                /* 0418 */  0x8B, 0xE2, 0x01, 0x88, 0x09, 0x59, 0x92, 0x40,  // .....Y.@
                /* 0420 */  0x1C, 0xEF, 0xA8, 0x28, 0x23, 0xE7, 0x06, 0x83,  // ...(#...
                /* 0428 */  0x08, 0xC8, 0x71, 0xD7, 0x28, 0x20, 0x87, 0x07,  // ..q.( ..
                /* 0430 */  0x11, 0x90, 0xE3, 0xAF, 0x43, 0x40, 0x16, 0xA3,  // ....C@..
                /* 0438 */  0x03, 0x88, 0xFD, 0xFF, 0x01                     // .....
            })
        }

        Device (WFTE)
        {
            Name (_HID, "PNP0C14" /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "TestDev")  // _UID: Unique ID
            Name (_WDG, Buffer (0x28)
            {
                /* 0000 */  0x7F, 0xAB, 0x13, 0x1F, 0x20, 0x62, 0x10, 0x42,  // .... b.B
                /* 0008 */  0x8F, 0x8E, 0x8B, 0xB5, 0xE7, 0x1E, 0xE9, 0x69,  // .......i
                /* 0010 */  0x54, 0x45, 0x01, 0x02, 0x21, 0x12, 0x90, 0x05,  // TE..!...
                /* 0018 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  // f.......
                /* 0020 */  0xC9, 0x06, 0x29, 0x10, 0x43, 0x43, 0x01, 0x00   // ..).CC..
            })
            Method (WMTE, 3, NotSerialized)
            {
                If ((Arg1 == One))
                {
                    PDAT = Arg2
                    Notify (WFDE, 0xD0) // Hardware-Specific
                    Return (PDAT) /* \_SB_.PDAT */
                }

                Return (Zero)
            }

            Name (WQCC, Buffer (0x02F1)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0xE1, 0x02, 0x00, 0x00, 0xC2, 0x06, 0x00, 0x00,  // ........
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0xA8, 0x5D, 0x83, 0x00, 0x01, 0x06, 0x18, 0x42,  // .].....B
                /* 0020 */  0x20, 0x14, 0x03, 0x89, 0xC0, 0xA2, 0x69, 0x24,  //  .....i$
                /* 0028 */  0xC7, 0x01, 0x0C, 0x86, 0xCB, 0x72, 0x20, 0xE4,  // .....r .
                /* 0030 */  0x82, 0x89, 0x09, 0x10, 0x01, 0x21, 0xAF, 0x02,  // .....!..
                /* 0038 */  0x6C, 0x0A, 0x30, 0x09, 0xA2, 0xFE, 0xFD, 0x21,  // l.0....!
                /* 0040 */  0x4A, 0x82, 0x43, 0x09, 0x81, 0x90, 0x64, 0x01,  // J.C...d.
                /* 0048 */  0xE6, 0x05, 0xE8, 0x16, 0x60, 0x58, 0x80, 0x6D,  // ....`X.m
                /* 0050 */  0x01, 0xA6, 0x05, 0x38, 0x86, 0xA4, 0xD2, 0xC0,  // ...8....
                /* 0058 */  0x29, 0x81, 0xA5, 0x40, 0x48, 0xB8, 0x00, 0xE5,  // )..@H...
                /* 0060 */  0x02, 0x7C, 0x0B, 0xD0, 0x8E, 0x28, 0xDC, 0x96,  // .|...(..
                /* 0068 */  0x61, 0x44, 0xE0, 0x51, 0x44, 0xB6, 0x50, 0x34,  // aD.QD.P4
                /* 0070 */  0x0A, 0x8D, 0x1D, 0x86, 0x65, 0x82, 0x69, 0x10,  // ....e.i.
                /* 0078 */  0x87, 0x51, 0x36, 0xB2, 0x08, 0x3C, 0xA1, 0x4E,  // .Q6..<.N
                /* 0080 */  0x05, 0xC8, 0x15, 0x20, 0x4C, 0x80, 0x78, 0x54,  // ... L.xT
                /* 0088 */  0x61, 0x34, 0x07, 0x45, 0x20, 0x43, 0x63, 0xC4,  // a4.E Cc.
                /* 0090 */  0x40, 0x48, 0x22, 0xAC, 0x9C, 0x63, 0x6B, 0x14,  // @H"..ck.
                /* 0098 */  0xA7, 0x71, 0x34, 0xA5, 0x63, 0x68, 0x04, 0xC7,  // .q4.ch..
                /* 00A0 */  0x75, 0x40, 0x06, 0xE9, 0x7D, 0x3A, 0x44, 0xD0,  // u@..}:D.
                /* 00A8 */  0x84, 0x34, 0x8A, 0x68, 0x21, 0xA2, 0x04, 0x3D,  // .4.h!..=
                /* 00B0 */  0x8E, 0x20, 0x81, 0x23, 0x24, 0x30, 0xCC, 0x31,  // . .#$0.1
                /* 00B8 */  0x60, 0x64, 0x40, 0xC8, 0xB3, 0x00, 0xEB, 0x83,  // `d@.....
                /* 00C0 */  0x23, 0x04, 0x76, 0x2F, 0xC0, 0x98, 0x00, 0x8D,  // #.v/....
                /* 00C8 */  0x10, 0x72, 0x26, 0xC0, 0xA0, 0x00, 0x85, 0x02,  // .r&.....
                /* 00D0 */  0xBC, 0xC1, 0xC8, 0x96, 0x00, 0x6D, 0x02, 0x94,  // .....m..
                /* 00D8 */  0x21, 0x68, 0x4A, 0x51, 0x0E, 0x2A, 0x48, 0xB8,  // !hJQ.*H.
                /* 00E0 */  0x28, 0x16, 0x87, 0x26, 0x88, 0x16, 0x51, 0x08,  // (..&..Q.
                /* 00E8 */  0x68, 0x84, 0xD6, 0x60, 0x84, 0x1B, 0x2E, 0x46,  // h..`...F
                /* 00F0 */  0x84, 0x93, 0x8B, 0x1C, 0xA2, 0xFD, 0x41, 0x90,  // ......A.
                /* 00F8 */  0x68, 0x47, 0x01, 0x49, 0x00, 0x51, 0xA4, 0xD1,  // hG.I.Q..
                /* 0100 */  0xA0, 0x86, 0x9F, 0xE0, 0x71, 0xC0, 0x47, 0x81,  // ....q.G.
                /* 0108 */  0x93, 0x3B, 0xA9, 0x13, 0x33, 0xC8, 0x89, 0x1D,  // .;..3...
                /* 0110 */  0x5D, 0x9D, 0xE7, 0x00, 0x32, 0x62, 0x86, 0x95,  // ]...2b..
                /* 0118 */  0xE0, 0xD7, 0xC0, 0x07, 0x03, 0xBC, 0x6B, 0x40,  // ......k@
                /* 0120 */  0xDD, 0x08, 0x9E, 0x07, 0xD8, 0x30, 0xC3, 0x61,  // .....0.a
                /* 0128 */  0x86, 0xE8, 0xD1, 0x86, 0xFB, 0xFF, 0x9F, 0xC0,  // ........
                /* 0130 */  0x21, 0x32, 0x40, 0x0F, 0xED, 0x51, 0x00, 0xEB,  // !2@..Q..
                /* 0138 */  0x70, 0x32, 0x3A, 0x07, 0x94, 0x2A, 0xC0, 0xEC,  // p2:..*..
                /* 0140 */  0x99, 0x40, 0x33, 0x4B, 0x70, 0x3C, 0x3E, 0x00,  // .@3Kp<>.
                /* 0148 */  0x78, 0x3E, 0x27, 0x9C, 0xC0, 0xF2, 0x07, 0x81,  // x>'.....
                /* 0150 */  0x1A, 0x99, 0xA1, 0x3D, 0xE3, 0xD3, 0x7A, 0x0F,  // ...=..z.
                /* 0158 */  0xF0, 0xF1, 0xE0, 0xB0, 0x98, 0x58, 0x08, 0x29,  // .....X.)
                /* 0160 */  0x80, 0xD0, 0x78, 0xC0, 0xAF, 0xF8, 0x68, 0x20,  // ..x...h 
                /* 0168 */  0x84, 0x97, 0x05, 0xCF, 0xD7, 0x87, 0x04, 0x03,  // ........
                /* 0170 */  0x63, 0x07, 0x64, 0xBF, 0x02, 0x10, 0x82, 0xBF,  // c.d.....
                /* 0178 */  0x2E, 0x1C, 0xD1, 0x43, 0x43, 0x84, 0x04, 0x2F,  // ...CC../
                /* 0180 */  0x03, 0x47, 0x50, 0x29, 0xBE, 0xB0, 0x0E, 0x21,  // .GP)...!
                /* 0188 */  0x46, 0xA4, 0x18, 0x51, 0x82, 0xD4, 0x0A, 0xA1,  // F..Q....
                /* 0190 */  0xE9, 0x87, 0x49, 0x50, 0xE4, 0xC9, 0x01, 0x3D,  // ..IP...=
                /* 0198 */  0x02, 0x8E, 0x77, 0x02, 0xC7, 0x13, 0xD9, 0xE3,  // ..w.....
                /* 01A0 */  0x89, 0x72, 0x12, 0x07, 0xE4, 0x33, 0x85, 0x11,  // .r...3..
                /* 01A8 */  0x4E, 0xF3, 0x51, 0xE2, 0xD1, 0xC2, 0x9A, 0x67,  // N.Q....g
                /* 01B0 */  0xA4, 0x13, 0xC3, 0x39, 0xBD, 0x0D, 0x98, 0xA0,  // ...9....
                /* 01B8 */  0xB2, 0xE7, 0x80, 0x8E, 0x1F, 0x56, 0x05, 0x22,  // .....V."
                /* 01C0 */  0x1B, 0x4B, 0xF5, 0x39, 0x83, 0x6A, 0x5E, 0xAE,  // .K.9.j^.
                /* 01C8 */  0x46, 0x74, 0xCC, 0xC7, 0xEA, 0x11, 0x9C, 0xB4,  // Ft......
                /* 01D0 */  0xA7, 0x17, 0xD9, 0x4A, 0xC1, 0x04, 0xEC, 0x61,  // ...J...a
                /* 01D8 */  0x5B, 0x23, 0x85, 0xD4, 0xD0, 0x68, 0x3C, 0x06,  // [#...h<.
                /* 01E0 */  0x77, 0xFE, 0x13, 0x09, 0x05, 0x31, 0xA0, 0xC3,  // w....1..
                /* 01E8 */  0x41, 0xC8, 0xC9, 0x49, 0x00, 0xA5, 0x62, 0xBC,  // A..I..b.
                /* 01F0 */  0xE4, 0x68, 0xC1, 0x08, 0xA6, 0x81, 0xD0, 0xDD,  // .h......
                /* 01F8 */  0xC1, 0xF3, 0xF3, 0x3D, 0x80, 0xDF, 0x4C, 0x7C,  // ...=..L|
                /* 0200 */  0x32, 0x30, 0xB0, 0xEF, 0x13, 0x6F, 0x1C, 0xF0,  // 20...o..
                /* 0208 */  0xFF, 0xFF, 0x37, 0x0E, 0x36, 0x09, 0x8C, 0x9A,  // ..7.6...
                /* 0210 */  0x23, 0x04, 0x9D, 0x02, 0xBF, 0x00, 0xBC, 0x0A,  // #.......
                /* 0218 */  0x98, 0xC0, 0xBA, 0x2E, 0x06, 0xD0, 0x4F, 0x1D,  // ......O.
                /* 0220 */  0x1E, 0xA8, 0xAF, 0x1C, 0x67, 0x63, 0x7D, 0x07,  // ....gc}.
                /* 0228 */  0x03, 0x50, 0x00, 0xF9, 0x22, 0xE0, 0x93, 0xC1,  // .P.."...
                /* 0230 */  0xC3, 0x00, 0xBB, 0x19, 0x18, 0x26, 0x9A, 0xD1,  // .....&..
                /* 0238 */  0xB9, 0xA8, 0x69, 0xA3, 0x64, 0xC0, 0x68, 0xDA,  // ..i.d.h.
                /* 0240 */  0x06, 0xF1, 0xB4, 0x1D, 0x71, 0xDA, 0x68, 0x68,  // ....q.hh
                /* 0248 */  0x5F, 0x05, 0x7C, 0x11, 0x70, 0xA8, 0x61, 0xD3,  // _.|.p.a.
                /* 0250 */  0x3B, 0x07, 0x7E, 0xAE, 0x67, 0x16, 0xD0, 0x93,  // ;.~.g...
                /* 0258 */  0xF0, 0x91, 0xE4, 0xB8, 0xC1, 0x32, 0x0A, 0x06,  // .....2..
                /* 0260 */  0x1E, 0x24, 0x8E, 0x47, 0xC1, 0x26, 0xCE, 0x07,  // .$.G.&..
                /* 0268 */  0xE0, 0x89, 0xF3, 0x71, 0xF9, 0x86, 0x01, 0x7F,  // ...q....
                /* 0270 */  0xE4, 0x58, 0x82, 0x02, 0x67, 0x0E, 0x72, 0x78,  // .X..g.rx
                /* 0278 */  0x4C, 0xB0, 0x51, 0x51, 0x59, 0xE3, 0x42, 0x8D,  // L.QQY.B.
                /* 0280 */  0xD2, 0x57, 0x20, 0x86, 0x7D, 0x82, 0x16, 0x3D,  // .W .}..=
                /* 0288 */  0x48, 0x9D, 0x2F, 0x0E, 0xEA, 0x69, 0xC4, 0x63,  // H./..i.c
                /* 0290 */  0x33, 0xAC, 0xC7, 0xFD, 0xFF, 0x0F, 0x8B, 0x41,  // 3......A
                /* 0298 */  0x0B, 0x7B, 0xB8, 0x2F, 0x22, 0x3E, 0xC5, 0x78,  // .{./">.x
                /* 02A0 */  0x66, 0xC6, 0x08, 0xEB, 0xB1, 0x7B, 0x40, 0x8F,  // f....{@.
                /* 02A8 */  0x10, 0xE0, 0x01, 0x7B, 0x35, 0x39, 0xD3, 0x07,  // ...{59..
                /* 02B0 */  0x97, 0x3F, 0x8E, 0xEA, 0x20, 0x74, 0xDF, 0xE0,  // .?.. t..
                /* 02B8 */  0x28, 0x21, 0x1E, 0x38, 0x30, 0x04, 0x15, 0xDA,  // (!.80...
                /* 02C0 */  0xF4, 0xA9, 0xD1, 0xA8, 0x55, 0x83, 0x32, 0x35,  // ....U.25
                /* 02C8 */  0xCA, 0x34, 0xA8, 0xD5, 0xA7, 0x52, 0x63, 0xC6,  // .4...Rc.
                /* 02D0 */  0x3C, 0x5C, 0x8E, 0xE8, 0x41, 0x81, 0xBC, 0x13,  // <\..A...
                /* 02D8 */  0x34, 0x42, 0x87, 0x00, 0xA1, 0x42, 0x9E, 0x08,  // 4B...B..
                /* 02E0 */  0x32, 0x72, 0x0F, 0x31, 0x88, 0x80, 0xAC, 0xCC,  // 2r.1....
                /* 02E8 */  0x02, 0x10, 0xD3, 0x09, 0x22, 0x20, 0xFF, 0xFF,  // ...." ..
                /* 02F0 */  0x01                                             // .
            })
        }

        Method (USSV, 1, Serialized)
        {
            PDAT = Arg0
        }

        Method (GSSV, 0, Serialized)
        {
            Return (PDAT) /* \_SB_.PDAT */
        }
    }

    Scope (_SB.PC00.RP01.PXSX)
    {
        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    Scope (_SB.PC00.RP02.PXSX)
    {
        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    Scope (_SB.PC00.RP03.PXSX)
    {
        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    Scope (_SB.PC00.RP04.PXSX)
    {
        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    Scope (_SB.PC00.RP05.PXSX)
    {
        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    Scope (_SB.PC00.RP06.PXSX)
    {
        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    Scope (_SB.PC00.RP07.PXSX)
    {
        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    Scope (_SB.PC00.RP08.PXSX)
    {
        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    Scope (_SB.PC00.RP09.PXSX)
    {
        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    Scope (_SB.PC00.RP10.PXSX)
    {
        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    Scope (_SB.PC00.RP11.PXSX)
    {
        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    Scope (_SB.PC00.RP12.PXSX)
    {
        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    Scope (_SB.PC00.RP13.PXSX)
    {
        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    Scope (_SB.PC00.RP14.PXSX)
    {
        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    Scope (_SB.PC00.RP15.PXSX)
    {
        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    Scope (_SB.PC00.RP16.PXSX)
    {
        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    Scope (_SB.PC00.RP17.PXSX)
    {
        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    Scope (_SB.PC00.RP18.PXSX)
    {
        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    Scope (_SB.PC00.RP19.PXSX)
    {
        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    Scope (_SB.PC00.RP20.PXSX)
    {
        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    Scope (_SB.PC00.RP21.PXSX)
    {
        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    Scope (_SB.PC00.RP22.PXSX)
    {
        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    Scope (_SB.PC00.RP23.PXSX)
    {
        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    Scope (_SB.PC00.RP24.PXSX)
    {
        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    Scope (_SB.PC00.PEG0.PEGP)
    {
        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    If (CondRefOf (\_SB.PC00.PEG2))
    {
        Scope (_SB.PC00.PEG2.PEGP)
        {
            OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
            Field (PCCX, ByteAcc, NoLock, Preserve)
            {
                PIXX,   8, 
                SCCX,   8, 
                BCCX,   8
            }

            Method (PAHC, 0, Serialized)
            {
                If ((BCCX == One))
                {
                    If ((SCCX == 0x06))
                    {
                        If ((PIXX == One))
                        {
                            Return (One)
                        }
                    }
                }

                Return (Zero)
            }

            Method (PNVM, 0, Serialized)
            {
                If ((BCCX == One))
                {
                    If ((SCCX == 0x08))
                    {
                        If ((PIXX == 0x02))
                        {
                            Return (One)
                        }
                    }
                }

                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PC00.PEG3))
    {
        Scope (_SB.PC00.PEG3.PEGP)
        {
            OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
            Field (PCCX, ByteAcc, NoLock, Preserve)
            {
                PIXX,   8, 
                SCCX,   8, 
                BCCX,   8
            }

            Method (PAHC, 0, Serialized)
            {
                If ((BCCX == One))
                {
                    If ((SCCX == 0x06))
                    {
                        If ((PIXX == One))
                        {
                            Return (One)
                        }
                    }
                }

                Return (Zero)
            }

            Method (PNVM, 0, Serialized)
            {
                If ((BCCX == One))
                {
                    If ((SCCX == 0x08))
                    {
                        If ((PIXX == 0x02))
                        {
                            Return (One)
                        }
                    }
                }

                Return (Zero)
            }
        }
    }

    Scope (_SB)
    {
        Device (PEPD)
        {
            Name (_HID, "INT33A1" /* Intel Power Engine */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0D80") /* Windows-compatible System Power Management Controller */)  // _CID: Compatible ID
            Name (_UID, One)  // _UID: Unique ID
            Name (LBUF, Buffer (0xC0) {})
            Name (PPD0, Package (0x03)
            {
                "\\_SB.PC00.SAT0", 
                Zero, 
                Package (0x02)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0xFF, 
                        Zero, 
                        0x81
                    }
                }
            })
            Name (PPD3, Package (0x03)
            {
                "\\_SB.PC00.SAT0", 
                Zero, 
                Package (0x02)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0xFF, 
                        0x03
                    }
                }
            })
            Name (WWD3, Package (0x03)
            {
                "\\_SB.PC00.RP04", 
                Zero, 
                Package (0x02)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0xFF, 
                        0x03
                    }
                }
            })
            Name (HDD3, Package (0x03)
            {
                "\\_SB.PC00.HDAS", 
                Zero, 
                Package (0x02)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0xFF, 
                        0x03
                    }
                }
            })
            Name (HDD0, Package (0x03)
            {
                "\\_SB.PC00.HDAS", 
                Zero, 
                Package (0x02)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0xFF, 
                        Zero, 
                        0x81
                    }
                }
            })
            Name (DEVY, Package (0x5B)
            {
                Package (0x03)
                {
                    "\\_SB.PR00", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR01", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR02", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR03", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR04", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR05", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR06", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR07", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.GFX0", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.SAT0", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.UA00", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.UA01", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.I2C0", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.I2C1", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.XHCI", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.HDAS", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.PEMC", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.PSDC", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.I2C2", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.I2C3", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.I2C4", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.I2C5", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.UA02", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.SPI0", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.SPI1", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP01.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP02.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP03.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP04.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP05.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP06.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP07.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP08.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP09.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP10.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP11.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP12.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP13.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP14.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP15.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP16.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP17", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP18.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP19.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP20.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.SAT0.VOL0", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR08", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR09", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR10", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR11", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR12", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR13", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR14", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR15", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.SPI2", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.CNVW", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.IPU0", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.HECI", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.GLAN", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.PEG0.PEGP", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.THC0", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.THC1", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.HDAS.IDA", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "USB\\VID_8087&PID_0AC9&MI*", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x02
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.I2C6", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP04", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.TXHC", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.TXDC", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.TRP0", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.TRP1", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.TRP2", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.TRP3", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC01.TRP0", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC01.TRP1", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC01.TRP2", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC01.TRP3", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.TDM0", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.TDM1", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.GNA0", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.VMD0", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP21.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP22.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP23.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP24.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.PEG0", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP09", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.PEG1.PEGP", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.PEG2.PEGP", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.PEG3.PEGP", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.HEC3", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.PEG1", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }
            })
            Name (BCCD, Package (0x1D)
            {
                Package (0x02)
                {
                    "\\_SB.PC00.SAT0", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0x58, 
                                One
                            }, 

                            0x3E80
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PC00.SAT0.PRT0", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0x58, 
                                One
                            }, 

                            0x3E80
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PC00.SAT0.PRT1", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0x58, 
                                One
                            }, 

                            0x3E80
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PC00.SAT0.PRT2", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0x58, 
                                One
                            }, 

                            0x3E80
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PC00.SAT0.PRT3", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0x58, 
                                One
                            }, 

                            0x3E80
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PC00.RP01.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0x58, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PC00.RP02.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0x58, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PC00.RP03.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0x58, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PC00.RP04.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0x58, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PC00.RP05.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0x58, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PC00.RP06.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0x58, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PC00.RP07.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0x58, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PC00.RP08.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0x58, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PC00.RP09.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0x58, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PC00.RP10.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0x58, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PC00.RP11.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0x58, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PC00.RP12.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0x58, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PC00.RP13.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0x58, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PC00.RP14.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0x58, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PC00.RP15.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0x58, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PC00.RP16.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0x58, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PC00.RP17.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0x58, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PC00.RP18.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0x58, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PC00.RP19.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0x58, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PC00.RP20.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0x58, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PC00.RP21.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0x58, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PC00.RP22.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0x58, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PC00.RP23.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0x58, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PC00.RP24.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0x58, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }
            })
            OperationRegion (LS0I, SystemMemory, LPMR, 0xC0)
            Field (LS0I, ByteAcc, Lock, Preserve)
            {
                L0IX,   1536
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((OSYS >= 0x07DF) || ((OSYS >= 0x07DC) && (
                    S0ID == One))))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("c4eb40a0-6cd2-11e2-bcfd-0800200c9a66") /* Unknown UUID */))
                {
                    If ((Arg2 == Zero))
                    {
                        Return (Buffer (One)
                        {
                             0x7F                                             // .
                        })
                    }

                    If ((Arg2 == One))
                    {
                        If ((S0ID == Zero))
                        {
                            Return (Package (0x00) {})
                        }

                        If (((PEPC & One) == One))
                        {
                            If (((PEPC & 0x03) == One))
                            {
                                DEVY [0x09] = PPD0 /* \_SB_.PEPD.PPD0 */
                            }
                            ElseIf (((PEPC & 0x03) == 0x03))
                            {
                                DEVY [0x09] = PPD3 /* \_SB_.PEPD.PPD3 */
                            }

                            DerefOf (DEVY [0x09]) [One] = One
                        }
                        ElseIf (((PEPC & 0x03) == 0x02))
                        {
                            DerefOf (DEVY [0x2D]) [One] = One
                        }

                        If (((PEPC & 0x10) == 0x10))
                        {
                            If ((^^PC00.RP01.PXSX.PAHC () || ^^PC00.RP01.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x19]) [One] = One
                            }

                            If ((^^PC00.RP02.PXSX.PAHC () || ^^PC00.RP02.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x1A]) [One] = One
                            }

                            If ((^^PC00.RP03.PXSX.PAHC () || ^^PC00.RP03.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x1B]) [One] = One
                            }

                            If ((^^PC00.RP04.PXSX.PAHC () || ^^PC00.RP04.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x1C]) [One] = One
                            }

                            If ((^^PC00.RP05.PXSX.PAHC () || ^^PC00.RP05.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x1D]) [One] = One
                            }

                            If ((^^PC00.RP06.PXSX.PAHC () || ^^PC00.RP06.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x1E]) [One] = One
                            }

                            If ((^^PC00.RP07.PXSX.PAHC () || ^^PC00.RP07.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x1F]) [One] = One
                            }

                            If ((^^PC00.RP08.PXSX.PAHC () || ^^PC00.RP08.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x20]) [One] = One
                            }

                            If ((^^PC00.RP09.PXSX.PAHC () || ^^PC00.RP09.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x21]) [One] = One
                            }

                            If ((^^PC00.RP10.PXSX.PAHC () || ^^PC00.RP10.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x22]) [One] = One
                            }

                            If ((^^PC00.RP11.PXSX.PAHC () || ^^PC00.RP11.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x23]) [One] = One
                            }

                            If ((^^PC00.RP12.PXSX.PAHC () || ^^PC00.RP12.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x24]) [One] = One
                            }

                            If ((^^PC00.RP13.PXSX.PAHC () || ^^PC00.RP13.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x25]) [One] = One
                            }

                            If ((^^PC00.RP14.PXSX.PAHC () || ^^PC00.RP14.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x26]) [One] = One
                            }

                            If ((^^PC00.RP15.PXSX.PAHC () || ^^PC00.RP15.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x27]) [One] = One
                            }

                            If ((^^PC00.RP16.PXSX.PAHC () || ^^PC00.RP16.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x28]) [One] = One
                            }

                            If ((^^PC00.RP17.PXSX.PAHC () || ^^PC00.RP17.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x29]) [One] = One
                            }

                            If ((^^PC00.RP18.PXSX.PAHC () || ^^PC00.RP18.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x2A]) [One] = One
                            }

                            If ((^^PC00.RP19.PXSX.PAHC () || ^^PC00.RP19.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x2B]) [One] = One
                            }

                            If ((^^PC00.RP20.PXSX.PAHC () || ^^PC00.RP20.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x2C]) [One] = One
                            }

                            If ((^^PC00.RP21.PXSX.PAHC () || ^^PC00.RP21.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x50]) [One] = One
                            }

                            If ((^^PC00.RP22.PXSX.PAHC () || ^^PC00.RP22.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x51]) [One] = One
                            }

                            If ((^^PC00.RP23.PXSX.PAHC () || ^^PC00.RP23.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x52]) [One] = One
                            }

                            If ((^^PC00.RP24.PXSX.PAHC () || ^^PC00.RP24.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x53]) [One] = One
                            }
                        }

                        If (((OSYS >= 0x07DF) && (WRTO != Zero)))
                        {
                            If (^^PC00.RP04.PXSX.WWST ())
                            {
                                If ((WRTO == 0x03))
                                {
                                    WWD3 [Zero] = "\\_SB.PC00.RP04"
                                    DEVY [0x41] = WWD3 /* \_SB_.PEPD.WWD3 */
                                    DerefOf (DEVY [0x41]) [One] = One
                                }

                                If ((WRTO == One))
                                {
                                    DerefOf (DEVY [0x3F]) [One] = One
                                }
                            }
                            ElseIf (^^PC00.RP09.PXSX.WWST ())
                            {
                                If ((WRTO == 0x03))
                                {
                                    WWD3 [Zero] = "\\_SB.PC00.RP09"
                                    DEVY [0x55] = WWD3 /* \_SB_.PEPD.WWD3 */
                                    DerefOf (DEVY [0x55]) [One] = One
                                }

                                If ((WRTO == One))
                                {
                                    DerefOf (DEVY [0x3F]) [One] = One
                                }
                            }
                        }

                        If (((PEPC & 0x04) == Zero))
                        {
                            DerefOf (DEVY [0x0A]) [One] = Zero
                        }

                        If (((PEPC & 0x08) == Zero))
                        {
                            DerefOf (DEVY [0x0B]) [One] = Zero
                        }

                        If (((PEPC & 0x10) == Zero)) {}
                        If (((PEPC & 0x20) == Zero))
                        {
                            DerefOf (DEVY [0x0C]) [One] = Zero
                        }

                        If (((PEPC & 0x40) == Zero))
                        {
                            DerefOf (DEVY [0x0D]) [One] = Zero
                        }

                        If (((PEPC & 0x80) == Zero))
                        {
                            DerefOf (DEVY [0x0E]) [One] = Zero
                        }

                        If (((PEPC & 0x0100) == 0x0100))
                        {
                            If (((PEPC & 0x0300) == 0x0100))
                            {
                                DEVY [0x0F] = HDD0 /* \_SB_.PEPD.HDD0 */
                            }
                            ElseIf (((PEPC & 0x0300) == 0x0300))
                            {
                                DEVY [0x0F] = HDD3 /* \_SB_.PEPD.HDD3 */
                            }

                            DerefOf (DEVY [0x0F]) [One] = One
                        }

                        If (((PEPC & 0x0400) == Zero))
                        {
                            DerefOf (DEVY [0x08]) [One] = Zero
                        }

                        If ((TCNT >= One))
                        {
                            DerefOf (DEVY [Zero]) [One] = One
                        }

                        If ((TCNT >= 0x02))
                        {
                            DerefOf (DEVY [One]) [One] = One
                        }

                        If ((TCNT >= 0x03))
                        {
                            DerefOf (DEVY [0x02]) [One] = One
                        }

                        If ((TCNT >= 0x04))
                        {
                            DerefOf (DEVY [0x03]) [One] = One
                        }

                        If ((TCNT >= 0x05))
                        {
                            DerefOf (DEVY [0x04]) [One] = One
                        }

                        If ((TCNT >= 0x06))
                        {
                            DerefOf (DEVY [0x05]) [One] = One
                        }

                        If ((TCNT >= 0x07))
                        {
                            DerefOf (DEVY [0x06]) [One] = One
                        }

                        If ((TCNT >= 0x08))
                        {
                            DerefOf (DEVY [0x07]) [One] = One
                        }

                        If ((TCNT >= 0x09))
                        {
                            DerefOf (DEVY [0x2E]) [One] = One
                        }

                        If ((TCNT >= 0x0A))
                        {
                            DerefOf (DEVY [0x2F]) [One] = One
                        }

                        If ((TCNT >= 0x0B))
                        {
                            DerefOf (DEVY [0x30]) [One] = One
                        }

                        If ((TCNT >= 0x0C))
                        {
                            DerefOf (DEVY [0x31]) [One] = One
                        }

                        If ((TCNT >= 0x0D))
                        {
                            DerefOf (DEVY [0x32]) [One] = One
                        }

                        If ((TCNT >= 0x0E))
                        {
                            DerefOf (DEVY [0x33]) [One] = One
                        }

                        If ((TCNT >= 0x0F))
                        {
                            DerefOf (DEVY [0x34]) [One] = One
                        }

                        If ((TCNT >= 0x10))
                        {
                            DerefOf (DEVY [0x35]) [One] = One
                        }

                        If (((PEPC & 0x0800) == Zero))
                        {
                            DerefOf (DEVY [Zero]) [One] = Zero
                            DerefOf (DEVY [One]) [One] = Zero
                            DerefOf (DEVY [0x02]) [One] = Zero
                            DerefOf (DEVY [0x03]) [One] = Zero
                            DerefOf (DEVY [0x04]) [One] = Zero
                            DerefOf (DEVY [0x05]) [One] = Zero
                            DerefOf (DEVY [0x06]) [One] = Zero
                            DerefOf (DEVY [0x07]) [One] = Zero
                            DerefOf (DEVY [0x2E]) [One] = Zero
                            DerefOf (DEVY [0x2F]) [One] = Zero
                            DerefOf (DEVY [0x30]) [One] = Zero
                            DerefOf (DEVY [0x31]) [One] = Zero
                            DerefOf (DEVY [0x32]) [One] = Zero
                            DerefOf (DEVY [0x33]) [One] = Zero
                            DerefOf (DEVY [0x34]) [One] = Zero
                            DerefOf (DEVY [0x35]) [One] = Zero
                        }

                        If ((((PEPC & 0x1000) == Zero) || (EMCE == Zero)))
                        {
                            DerefOf (DEVY [0x10]) [One] = Zero
                        }

                        If ((((PEPC & 0x2000) == Zero) || (SDCE == Zero)))
                        {
                            DerefOf (DEVY [0x11]) [One] = Zero
                        }

                        If (((PEPC & 0x4000) == Zero))
                        {
                            DerefOf (DEVY [0x12]) [One] = Zero
                        }

                        If (((PEPC & 0x8000) == Zero))
                        {
                            DerefOf (DEVY [0x13]) [One] = Zero
                        }

                        If (((PEPC & 0x00010000) == Zero))
                        {
                            DerefOf (DEVY [0x14]) [One] = Zero
                        }

                        If (((PEPC & 0x00020000) == Zero))
                        {
                            DerefOf (DEVY [0x15]) [One] = Zero
                        }

                        If (((PEPC & 0x00040000) == Zero))
                        {
                            DerefOf (DEVY [0x16]) [One] = Zero
                        }

                        If (((PEPC & 0x00080000) == Zero))
                        {
                            DerefOf (DEVY [0x17]) [One] = Zero
                        }

                        If (((PEPC & 0x00100000) == Zero))
                        {
                            DerefOf (DEVY [0x18]) [One] = Zero
                        }

                        If (((PEPC & 0x00200000) == Zero))
                        {
                            DerefOf (DEVY [0x36]) [One] = Zero
                        }

                        If (((PEPC & 0x00400000) == Zero))
                        {
                            DerefOf (DEVY [0x38]) [One] = Zero
                        }

                        If (((PEPC & 0x00800000) == Zero))
                        {
                            DerefOf (DEVY [0x39]) [One] = Zero
                        }

                        If ((((PEPC & 0x01000000) == Zero) || (GBES == Zero)))
                        {
                            DerefOf (DEVY [0x3A]) [One] = Zero
                        }

                        If (((PEPC & 0x02000000) != Zero))
                        {
                            If ((^^PC00.PEG0.PEGP.PAHC () || ^^PC00.PEG0.PEGP.PNVM ()))
                            {
                                DerefOf (DEVY [0x3B]) [One] = One
                            }

                            If (CondRefOf (\_SB.PC00.PEG2))
                            {
                                If ((^^PC00.PEG2.PEGP.PAHC () || ^^PC00.PEG2.PEGP.PNVM ()))
                                {
                                    DerefOf (DEVY [0x57]) [One] = One
                                }
                            }

                            If (CondRefOf (\_SB.PC00.PEG3))
                            {
                                If ((^^PC00.PEG3.PEGP.PAHC () || ^^PC00.PEG3.PEGP.PNVM ()))
                                {
                                    DerefOf (DEVY [0x58]) [One] = One
                                }
                            }
                        }

                        If (((PEPC & 0x04000000) == Zero))
                        {
                            DerefOf (DEVY [0x3C]) [One] = Zero
                        }

                        If (((PEPC & 0x08000000) == Zero))
                        {
                            DerefOf (DEVY [0x3D]) [One] = Zero
                        }

                        DerefOf (DEVY [0x3E]) [One] = Zero
                        If (((PEPC & 0x20000000) == Zero))
                        {
                            DerefOf (DEVY [0x40]) [One] = Zero
                        }

                        If (((PEPC & 0x40000000) != Zero))
                        {
                            If ((THCE == One))
                            {
                                DerefOf (DEVY [0x42]) [One] = One
                            }

                            If ((TDCE == One))
                            {
                                DerefOf (DEVY [0x43]) [One] = One
                            }

                            If (CondRefOf (\_SB.PC01))
                            {
                                If ((TRE0 == One))
                                {
                                    DerefOf (DEVY [0x48]) [One] = One
                                }

                                If ((TRE1 == One))
                                {
                                    DerefOf (DEVY [0x49]) [One] = One
                                }

                                If ((TRE2 == One))
                                {
                                    DerefOf (DEVY [0x4A]) [One] = One
                                }

                                If ((TRE3 == One))
                                {
                                    DerefOf (DEVY [0x4B]) [One] = One
                                }
                            }
                            Else
                            {
                                If ((TRE0 == One))
                                {
                                    DerefOf (DEVY [0x44]) [One] = One
                                }

                                If ((TRE1 == One))
                                {
                                    DerefOf (DEVY [0x45]) [One] = One
                                }

                                If ((TRE2 == One))
                                {
                                    DerefOf (DEVY [0x46]) [One] = One
                                }

                                If ((TRE3 == One))
                                {
                                    DerefOf (DEVY [0x47]) [One] = One
                                }
                            }

                            If ((DME0 == One))
                            {
                                DerefOf (DEVY [0x4C]) [One] = One
                            }

                            If ((DME1 == One))
                            {
                                DerefOf (DEVY [0x4D]) [One] = One
                            }
                        }

                        If (((PEPC & 0x80000000) == Zero))
                        {
                            DerefOf (DEVY [0x4E]) [One] = Zero
                        }

                        If (((PEPC & 0x0000000100000000) == Zero))
                        {
                            DerefOf (DEVY [0x4F]) [One] = Zero
                        }

                        If (((PEPC & 0x0000000200000000) != Zero))
                        {
                            DerefOf (DEVY [0x54]) [One] = One
                        }

                        If (((PEPC & 0x0000000400000000) == Zero))
                        {
                            DerefOf (DEVY [0x59]) [One] = Zero
                        }

                        If (((PEPC & 0x0000000800000000) != Zero))
                        {
                            DerefOf (DEVY [0x5A]) [One] = One
                        }

                        If ((OSYS >= 0x07DF))
                        {
                            If (^^PC00.RP01.PXSX.WIST ())
                            {
                                DerefOf (DerefOf (DerefOf (DEVY [0x19]) [0x02]
                                    ) [One]) [One] = 0x03
                                DerefOf (DerefOf (DerefOf (DEVY [0x19]) [0x02]
                                    ) [One]) [0x02] = Zero
                                DerefOf (DEVY [0x19]) [One] = One
                            }

                            If (^^PC00.RP02.PXSX.WIST ())
                            {
                                DerefOf (DerefOf (DerefOf (DEVY [0x1A]) [0x02]
                                    ) [One]) [One] = 0x03
                                DerefOf (DerefOf (DerefOf (DEVY [0x1A]) [0x02]
                                    ) [One]) [0x02] = Zero
                                DerefOf (DEVY [0x1A]) [One] = One
                            }

                            If (^^PC00.RP03.PXSX.WIST ())
                            {
                                DerefOf (DerefOf (DerefOf (DEVY [0x1B]) [0x02]
                                    ) [One]) [One] = 0x03
                                DerefOf (DerefOf (DerefOf (DEVY [0x1B]) [0x02]
                                    ) [One]) [0x02] = Zero
                                DerefOf (DEVY [0x1B]) [One] = One
                            }

                            If (^^PC00.RP04.PXSX.WIST ())
                            {
                                DerefOf (DerefOf (DerefOf (DEVY [0x1C]) [0x02]
                                    ) [One]) [One] = 0x03
                                DerefOf (DerefOf (DerefOf (DEVY [0x1C]) [0x02]
                                    ) [One]) [0x02] = Zero
                                DerefOf (DEVY [0x1C]) [One] = One
                            }

                            If (^^PC00.RP05.PXSX.WIST ())
                            {
                                DerefOf (DerefOf (DerefOf (DEVY [0x1D]) [0x02]
                                    ) [One]) [One] = 0x03
                                DerefOf (DerefOf (DerefOf (DEVY [0x1D]) [0x02]
                                    ) [One]) [0x02] = Zero
                                DerefOf (DEVY [0x1D]) [One] = One
                            }

                            If (^^PC00.RP06.PXSX.WIST ())
                            {
                                DerefOf (DerefOf (DerefOf (DEVY [0x1E]) [0x02]
                                    ) [One]) [One] = 0x03
                                DerefOf (DerefOf (DerefOf (DEVY [0x1E]) [0x02]
                                    ) [One]) [0x02] = Zero
                                DerefOf (DEVY [0x1E]) [One] = One
                            }

                            If (^^PC00.RP07.PXSX.WIST ())
                            {
                                DerefOf (DerefOf (DerefOf (DEVY [0x1F]) [0x02]
                                    ) [One]) [One] = 0x03
                                DerefOf (DerefOf (DerefOf (DEVY [0x1F]) [0x02]
                                    ) [One]) [0x02] = Zero
                                DerefOf (DEVY [0x1F]) [One] = One
                            }

                            If (^^PC00.RP08.PXSX.WIST ())
                            {
                                DerefOf (DerefOf (DerefOf (DEVY [0x20]) [0x02]
                                    ) [One]) [One] = 0x03
                                DerefOf (DerefOf (DerefOf (DEVY [0x20]) [0x02]
                                    ) [One]) [0x02] = Zero
                                DerefOf (DEVY [0x20]) [One] = One
                            }

                            If (^^PC00.RP09.PXSX.WIST ())
                            {
                                DerefOf (DerefOf (DerefOf (DEVY [0x21]) [0x02]
                                    ) [One]) [One] = 0x03
                                DerefOf (DerefOf (DerefOf (DEVY [0x21]) [0x02]
                                    ) [One]) [0x02] = Zero
                                DerefOf (DEVY [0x21]) [One] = One
                            }

                            If (^^PC00.RP10.PXSX.WIST ())
                            {
                                DerefOf (DerefOf (DerefOf (DEVY [0x22]) [0x02]
                                    ) [One]) [One] = 0x03
                                DerefOf (DerefOf (DerefOf (DEVY [0x22]) [0x02]
                                    ) [One]) [0x02] = Zero
                                DerefOf (DEVY [0x22]) [One] = One
                            }

                            If (^^PC00.RP11.PXSX.WIST ())
                            {
                                DerefOf (DerefOf (DerefOf (DEVY [0x23]) [0x02]
                                    ) [One]) [One] = 0x03
                                DerefOf (DerefOf (DerefOf (DEVY [0x23]) [0x02]
                                    ) [One]) [0x02] = Zero
                                DerefOf (DEVY [0x23]) [One] = One
                            }

                            If (^^PC00.RP12.PXSX.WIST ())
                            {
                                DerefOf (DerefOf (DerefOf (DEVY [0x24]) [0x02]
                                    ) [One]) [One] = 0x03
                                DerefOf (DerefOf (DerefOf (DEVY [0x24]) [0x02]
                                    ) [One]) [0x02] = Zero
                                DerefOf (DEVY [0x24]) [One] = One
                            }

                            If (^^PC00.RP13.PXSX.WIST ())
                            {
                                DerefOf (DerefOf (DerefOf (DEVY [0x25]) [0x02]
                                    ) [One]) [One] = 0x03
                                DerefOf (DerefOf (DerefOf (DEVY [0x25]) [0x02]
                                    ) [One]) [0x02] = Zero
                                DerefOf (DEVY [0x25]) [One] = One
                            }

                            If (^^PC00.RP14.PXSX.WIST ())
                            {
                                DerefOf (DerefOf (DerefOf (DEVY [0x26]) [0x02]
                                    ) [One]) [One] = 0x03
                                DerefOf (DerefOf (DerefOf (DEVY [0x26]) [0x02]
                                    ) [One]) [0x02] = Zero
                                DerefOf (DEVY [0x26]) [One] = One
                            }

                            If (^^PC00.RP15.PXSX.WIST ())
                            {
                                DerefOf (DerefOf (DerefOf (DEVY [0x27]) [0x02]
                                    ) [One]) [One] = 0x03
                                DerefOf (DerefOf (DerefOf (DEVY [0x27]) [0x02]
                                    ) [One]) [0x02] = Zero
                                DerefOf (DEVY [0x27]) [One] = One
                            }

                            If (^^PC00.RP16.PXSX.WIST ())
                            {
                                DerefOf (DerefOf (DerefOf (DEVY [0x28]) [0x02]
                                    ) [One]) [One] = 0x03
                                DerefOf (DerefOf (DerefOf (DEVY [0x28]) [0x02]
                                    ) [One]) [0x02] = Zero
                                DerefOf (DEVY [0x28]) [One] = One
                            }

                            If (^^PC00.RP17.PXSX.WIST ())
                            {
                                DerefOf (DerefOf (DerefOf (DEVY [0x29]) [0x02]
                                    ) [One]) [One] = 0x03
                                DerefOf (DerefOf (DerefOf (DEVY [0x29]) [0x02]
                                    ) [One]) [0x02] = Zero
                                DerefOf (DEVY [0x29]) [One] = One
                            }

                            If (^^PC00.RP18.PXSX.WIST ())
                            {
                                DerefOf (DerefOf (DerefOf (DEVY [0x2A]) [0x02]
                                    ) [One]) [One] = 0x03
                                DerefOf (DerefOf (DerefOf (DEVY [0x2A]) [0x02]
                                    ) [One]) [0x02] = Zero
                                DerefOf (DEVY [0x2A]) [One] = One
                            }

                            If (^^PC00.RP19.PXSX.WIST ())
                            {
                                DerefOf (DerefOf (DerefOf (DEVY [0x2B]) [0x02]
                                    ) [One]) [One] = 0x03
                                DerefOf (DerefOf (DerefOf (DEVY [0x2B]) [0x02]
                                    ) [One]) [0x02] = Zero
                                DerefOf (DEVY [0x2B]) [One] = One
                            }

                            If (^^PC00.RP20.PXSX.WIST ())
                            {
                                DerefOf (DerefOf (DerefOf (DEVY [0x2C]) [0x02]
                                    ) [One]) [One] = 0x03
                                DerefOf (DerefOf (DerefOf (DEVY [0x2C]) [0x02]
                                    ) [One]) [0x02] = Zero
                                DerefOf (DEVY [0x2C]) [One] = One
                            }

                            If (^^PC00.RP21.PXSX.WIST ())
                            {
                                DerefOf (DerefOf (DerefOf (DEVY [0x50]) [0x02]
                                    ) [One]) [One] = 0x03
                                DerefOf (DerefOf (DerefOf (DEVY [0x50]) [0x02]
                                    ) [One]) [0x02] = Zero
                                DerefOf (DEVY [0x50]) [One] = One
                            }

                            If (^^PC00.RP22.PXSX.WIST ())
                            {
                                DerefOf (DerefOf (DerefOf (DEVY [0x51]) [0x02]
                                    ) [One]) [One] = 0x03
                                DerefOf (DerefOf (DerefOf (DEVY [0x51]) [0x02]
                                    ) [One]) [0x02] = Zero
                                DerefOf (DEVY [0x51]) [One] = One
                            }

                            If (^^PC00.RP23.PXSX.WIST ())
                            {
                                DerefOf (DerefOf (DerefOf (DEVY [0x52]) [0x02]
                                    ) [One]) [One] = 0x03
                                DerefOf (DerefOf (DerefOf (DEVY [0x52]) [0x02]
                                    ) [One]) [0x02] = Zero
                                DerefOf (DEVY [0x52]) [One] = One
                            }

                            If (^^PC00.RP24.PXSX.WIST ())
                            {
                                DerefOf (DerefOf (DerefOf (DEVY [0x53]) [0x02]
                                    ) [One]) [One] = 0x03
                                DerefOf (DerefOf (DerefOf (DEVY [0x53]) [0x02]
                                    ) [One]) [0x02] = Zero
                                DerefOf (DEVY [0x53]) [One] = One
                            }

                            If ((^^PC00.CNVW.VDID != 0xFFFFFFFF))
                            {
                                DerefOf (DerefOf (DerefOf (DEVY [0x37]) [0x02]
                                    ) [One]) [One] = 0x03
                                DerefOf (DerefOf (DerefOf (DEVY [0x37]) [0x02]
                                    ) [One]) [0x02] = Zero
                                DerefOf (DEVY [0x37]) [One] = One
                            }
                        }

                        Return (DEVY) /* \_SB_.PEPD.DEVY */
                    }

                    If ((Arg2 == 0x02))
                    {
                        Return (BCCD) /* \_SB_.PEPD.BCCD */
                    }

                    If ((Arg2 == 0x03))
                    {
                        If ((S0ID == One))
                        {
                            D8XH (Zero, 0xC5)
                            D8XH (One, Zero)
                        }
                    }

                    If ((Arg2 == 0x04))
                    {
                        If ((S0ID == One))
                        {
                            D8XH (Zero, 0xC5)
                            D8XH (One, 0xAB)
                        }
                    }

                    If ((Arg2 == 0x05))
                    {
                        If ((S0ID == One))
                        {
                            GUAM (One)
                        }

                        If (ECON) {}
                        If (CondRefOf (\_SB.PC00.TXHC))
                        {
                            ^^PC00.DPOF = One
                        }
                    }

                    If ((Arg2 == 0x06))
                    {
                        If ((S0ID == One))
                        {
                            GUAM (Zero)
                        }

                        If (ECON) {}
                        If (CondRefOf (\_SB.PC00.TXHC))
                        {
                            ^^PC00.DPOF = Zero
                        }
                    }
                }

                If ((Arg0 == ToUUID ("57a6512e-3979-4e9d-9708-ff13b2508972") /* Unknown UUID */))
                {
                    If ((Arg2 == Zero))
                    {
                        Return (Buffer (One)
                        {
                             0x03                                             // .
                        })
                    }

                    If ((Arg2 == One))
                    {
                        LBUF = L0IX /* \_SB_.PEPD.L0IX */
                        Return (LBUF) /* \_SB_.PEPD.LBUF */
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }

    Device (PSM)
    {
        Name (_HID, EisaId ("INT3420") /* Intel Bluetooth RF Kill */)  // _HID: Hardware ID
        Name (_UID, Zero)  // _UID: Unique ID
        Name (_STR, Unicode ("Power Sharing Manager"))  // _STR: Description String
        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((PSME == One))
            {
                Return (0x0F)
            }
            Else
            {
                Return (Zero)
            }
        }

        Name (SPLX, Package (0x02)
        {
            Zero, 
            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }
        })
        Method (SPLC, 0, Serialized)
        {
            DerefOf (SPLX [One]) [Zero] = PDT1 /* \PDT1 */
            DerefOf (SPLX [One]) [One] = PLM1 /* \PLM1 */
            DerefOf (SPLX [One]) [0x02] = PTW1 /* \PTW1 */
            Return (SPLX) /* \PSM_.SPLX */
        }

        Name (DPLX, Package (0x02)
        {
            Zero, 
            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                Package (0x06)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            }
        })
        Method (DPLC, 0, Serialized)
        {
            DerefOf (DPLX [One]) [Zero] = DDT1 /* \DDT1 */
            DerefOf (DPLX [One]) [One] = DDP1 /* \DDP1 */
            DerefOf (DerefOf (DPLX [One]) [0x02]) [Zero]
                 = DLI1 /* \DLI1 */
            DerefOf (DerefOf (DPLX [One]) [0x02]) [One]
                 = DPL1 /* \DPL1 */
            DerefOf (DerefOf (DPLX [One]) [0x02]) [0x02]
                 = DTW1 /* \DTW1 */
            DerefOf (DerefOf (DPLX [One]) [0x02]) [0x03]
                 = DMI1 /* \DMI1 */
            DerefOf (DerefOf (DPLX [One]) [0x02]) [0x04]
                 = DMA1 /* \DMA1 */
            DerefOf (DerefOf (DPLX [One]) [0x02]) [0x05]
                 = DMT1 /* \DMT1 */
            Return (DPLX) /* \PSM_.DPLX */
        }
    }

    Scope (_SB)
    {
        Method (BTRK, 1, Serialized)
        {
            SGOV (GBTK, Arg0)
        }

        Method (GBTR, 0, NotSerialized)
        {
            Return (GGOV (GBTK))
        }
    }

    If (\_SB.PC00.CNIP ())
    {
        Scope (_SB.PC00.CNVW)
        {
            Name (SPLX, Package (0x02)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (SPLC, 0, Serialized)
            {
                DerefOf (SPLX [One]) [Zero] = DOM1 /* \DOM1 */
                DerefOf (SPLX [One]) [One] = LIM1 /* \LIM1 */
                DerefOf (SPLX [One]) [0x02] = TIM1 /* \TIM1 */
                Return (SPLX) /* \_SB_.PC00.CNVW.SPLX */
            }

            Name (WANX, Package (0x03)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (WAND, 0, Serialized)
            {
                DerefOf (WANX [One]) [Zero] = Zero
                DerefOf (WANX [One]) [One] = TRD0 /* \TRD0 */
                DerefOf (WANX [One]) [0x02] = TRL0 /* \TRL0 */
                DerefOf (WANX [0x02]) [Zero] = One
                DerefOf (WANX [0x02]) [One] = TRD1 /* \TRD1 */
                DerefOf (WANX [0x02]) [0x02] = TRL1 /* \TRL1 */
                Return (WANX) /* \_SB_.PC00.CNVW.WANX */
            }

            Name (WRDX, Package (0x02)
            {
                Zero, 
                Package (0x02)
                {
                    0x80000000, 
                    0x8000
                }
            })
            Method (WRDD, 0, Serialized)
            {
                DerefOf (WRDX [One]) [Zero] = WDM1 /* \WDM1 */
                DerefOf (WRDX [One]) [One] = CID1 /* \CID1 */
                Return (WRDX) /* \_SB_.PC00.CNVW.WRDX */
            }

            Name (WRDY, Package (0x02)
            {
                One, 
                Package (0x18)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WRDS, 0, Serialized)
            {
                DerefOf (WRDY [One]) [One] = STXE /* \STXE */
                DerefOf (WRDY [One]) [0x02] = ST10 /* \ST10 */
                DerefOf (WRDY [One]) [0x03] = ST11 /* \ST11 */
                DerefOf (WRDY [One]) [0x04] = ST12 /* \ST12 */
                DerefOf (WRDY [One]) [0x05] = ST13 /* \ST13 */
                DerefOf (WRDY [One]) [0x06] = ST14 /* \ST14 */
                DerefOf (WRDY [One]) [0x07] = ST15 /* \ST15 */
                DerefOf (WRDY [One]) [0x08] = ST16 /* \ST16 */
                DerefOf (WRDY [One]) [0x09] = ST17 /* \ST17 */
                DerefOf (WRDY [One]) [0x0A] = ST18 /* \ST18 */
                DerefOf (WRDY [One]) [0x0B] = ST19 /* \ST19 */
                DerefOf (WRDY [One]) [0x0C] = ST50 /* \ST50 */
                DerefOf (WRDY [One]) [0x0D] = ST51 /* \ST51 */
                DerefOf (WRDY [One]) [0x0E] = ST52 /* \ST52 */
                DerefOf (WRDY [One]) [0x0F] = ST53 /* \ST53 */
                DerefOf (WRDY [One]) [0x10] = ST54 /* \ST54 */
                DerefOf (WRDY [One]) [0x11] = ST55 /* \ST55 */
                DerefOf (WRDY [One]) [0x12] = ST56 /* \ST56 */
                DerefOf (WRDY [One]) [0x13] = ST57 /* \ST57 */
                DerefOf (WRDY [One]) [0x14] = ST58 /* \ST58 */
                DerefOf (WRDY [One]) [0x15] = ST59 /* \ST59 */
                DerefOf (WRDY [One]) [0x16] = ST5A /* \ST5A */
                DerefOf (WRDY [One]) [0x17] = ST5B /* \ST5B */
                Return (WRDY) /* \_SB_.PC00.CNVW.WRDY */
            }

            Name (EWRY, Package (0x02)
            {
                One, 
                Package (0x45)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (EWRD, 0, Serialized)
            {
                DerefOf (EWRY [One]) [One] = STDE /* \STDE */
                DerefOf (EWRY [One]) [0x02] = STRS /* \STRS */
                DerefOf (EWRY [One]) [0x03] = ST20 /* \ST20 */
                DerefOf (EWRY [One]) [0x04] = ST21 /* \ST21 */
                DerefOf (EWRY [One]) [0x05] = ST22 /* \ST22 */
                DerefOf (EWRY [One]) [0x06] = ST23 /* \ST23 */
                DerefOf (EWRY [One]) [0x07] = ST24 /* \ST24 */
                DerefOf (EWRY [One]) [0x08] = ST25 /* \ST25 */
                DerefOf (EWRY [One]) [0x09] = ST26 /* \ST26 */
                DerefOf (EWRY [One]) [0x0A] = ST27 /* \ST27 */
                DerefOf (EWRY [One]) [0x0B] = ST28 /* \ST28 */
                DerefOf (EWRY [One]) [0x0C] = ST29 /* \ST29 */
                DerefOf (EWRY [One]) [0x0D] = ST60 /* \ST60 */
                DerefOf (EWRY [One]) [0x0E] = ST61 /* \ST61 */
                DerefOf (EWRY [One]) [0x0F] = ST62 /* \ST62 */
                DerefOf (EWRY [One]) [0x10] = ST63 /* \ST63 */
                DerefOf (EWRY [One]) [0x11] = ST64 /* \ST64 */
                DerefOf (EWRY [One]) [0x12] = ST65 /* \ST65 */
                DerefOf (EWRY [One]) [0x13] = ST66 /* \ST66 */
                DerefOf (EWRY [One]) [0x14] = ST67 /* \ST67 */
                DerefOf (EWRY [One]) [0x15] = ST68 /* \ST68 */
                DerefOf (EWRY [One]) [0x16] = ST69 /* \ST69 */
                DerefOf (EWRY [One]) [0x17] = ST6A /* \ST6A */
                DerefOf (EWRY [One]) [0x18] = ST6B /* \ST6B */
                DerefOf (EWRY [One]) [0x19] = ST30 /* \ST30 */
                DerefOf (EWRY [One]) [0x1A] = ST31 /* \ST31 */
                DerefOf (EWRY [One]) [0x1B] = ST32 /* \ST32 */
                DerefOf (EWRY [One]) [0x1C] = ST33 /* \ST33 */
                DerefOf (EWRY [One]) [0x1D] = ST34 /* \ST34 */
                DerefOf (EWRY [One]) [0x1E] = ST35 /* \ST35 */
                DerefOf (EWRY [One]) [0x1F] = ST36 /* \ST36 */
                DerefOf (EWRY [One]) [0x20] = ST37 /* \ST37 */
                DerefOf (EWRY [One]) [0x21] = ST38 /* \ST38 */
                DerefOf (EWRY [One]) [0x22] = ST39 /* \ST39 */
                DerefOf (EWRY [One]) [0x23] = ST70 /* \ST70 */
                DerefOf (EWRY [One]) [0x24] = ST71 /* \ST71 */
                DerefOf (EWRY [One]) [0x25] = ST72 /* \ST72 */
                DerefOf (EWRY [One]) [0x26] = ST73 /* \ST73 */
                DerefOf (EWRY [One]) [0x27] = ST74 /* \ST74 */
                DerefOf (EWRY [One]) [0x28] = ST75 /* \ST75 */
                DerefOf (EWRY [One]) [0x29] = ST76 /* \ST76 */
                DerefOf (EWRY [One]) [0x2A] = ST77 /* \ST77 */
                DerefOf (EWRY [One]) [0x2B] = ST78 /* \ST78 */
                DerefOf (EWRY [One]) [0x2C] = ST79 /* \ST79 */
                DerefOf (EWRY [One]) [0x2D] = ST7A /* \ST7A */
                DerefOf (EWRY [One]) [0x2E] = ST7B /* \ST7B */
                DerefOf (EWRY [One]) [0x2F] = ST40 /* \ST40 */
                DerefOf (EWRY [One]) [0x30] = ST41 /* \ST41 */
                DerefOf (EWRY [One]) [0x31] = ST42 /* \ST42 */
                DerefOf (EWRY [One]) [0x32] = ST43 /* \ST43 */
                DerefOf (EWRY [One]) [0x33] = ST44 /* \ST44 */
                DerefOf (EWRY [One]) [0x34] = ST45 /* \ST45 */
                DerefOf (EWRY [One]) [0x35] = ST46 /* \ST46 */
                DerefOf (EWRY [One]) [0x36] = ST47 /* \ST47 */
                DerefOf (EWRY [One]) [0x37] = ST48 /* \ST48 */
                DerefOf (EWRY [One]) [0x38] = ST49 /* \ST49 */
                DerefOf (EWRY [One]) [0x39] = ST80 /* \ST80 */
                DerefOf (EWRY [One]) [0x3A] = ST81 /* \ST81 */
                DerefOf (EWRY [One]) [0x3B] = ST82 /* \ST82 */
                DerefOf (EWRY [One]) [0x3C] = ST83 /* \ST83 */
                DerefOf (EWRY [One]) [0x3D] = ST84 /* \ST84 */
                DerefOf (EWRY [One]) [0x3E] = ST85 /* \ST85 */
                DerefOf (EWRY [One]) [0x3F] = ST86 /* \ST86 */
                DerefOf (EWRY [One]) [0x40] = ST87 /* \ST87 */
                DerefOf (EWRY [One]) [0x41] = ST88 /* \ST88 */
                DerefOf (EWRY [One]) [0x42] = ST89 /* \ST89 */
                DerefOf (EWRY [One]) [0x43] = ST8A /* \ST8A */
                DerefOf (EWRY [One]) [0x44] = ST8B /* \ST8B */
                Return (EWRY) /* \_SB_.PC00.CNVW.EWRY */
            }

            Name (WGDY, Package (0x02)
            {
                0x02, 
                Package (0x1C)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WGDS, 0, Serialized)
            {
                DerefOf (WGDY [One]) [One] = SD11 /* \SD11 */
                DerefOf (WGDY [One]) [0x02] = SD12 /* \SD12 */
                DerefOf (WGDY [One]) [0x03] = SD13 /* \SD13 */
                DerefOf (WGDY [One]) [0x04] = SD14 /* \SD14 */
                DerefOf (WGDY [One]) [0x05] = SD15 /* \SD15 */
                DerefOf (WGDY [One]) [0x06] = SD16 /* \SD16 */
                DerefOf (WGDY [One]) [0x07] = SD17 /* \SD17 */
                DerefOf (WGDY [One]) [0x08] = SD18 /* \SD18 */
                DerefOf (WGDY [One]) [0x09] = SD19 /* \SD19 */
                DerefOf (WGDY [One]) [0x0A] = SD21 /* \SD21 */
                DerefOf (WGDY [One]) [0x0B] = SD22 /* \SD22 */
                DerefOf (WGDY [One]) [0x0C] = SD23 /* \SD23 */
                DerefOf (WGDY [One]) [0x0D] = SD24 /* \SD24 */
                DerefOf (WGDY [One]) [0x0E] = SD25 /* \SD25 */
                DerefOf (WGDY [One]) [0x0F] = SD26 /* \SD26 */
                DerefOf (WGDY [One]) [0x10] = SD27 /* \SD27 */
                DerefOf (WGDY [One]) [0x11] = SD28 /* \SD28 */
                DerefOf (WGDY [One]) [0x12] = SD29 /* \SD29 */
                DerefOf (WGDY [One]) [0x13] = SD31 /* \SD31 */
                DerefOf (WGDY [One]) [0x14] = SD32 /* \SD32 */
                DerefOf (WGDY [One]) [0x15] = SD33 /* \SD33 */
                DerefOf (WGDY [One]) [0x16] = SD34 /* \SD34 */
                DerefOf (WGDY [One]) [0x17] = SD35 /* \SD35 */
                DerefOf (WGDY [One]) [0x18] = SD36 /* \SD36 */
                DerefOf (WGDY [One]) [0x19] = SD37 /* \SD37 */
                DerefOf (WGDY [One]) [0x1A] = SD38 /* \SD38 */
                DerefOf (WGDY [One]) [0x1B] = SD39 /* \SD39 */
                Return (WGDY) /* \_SB_.PC00.CNVW.WGDY */
            }

            Name (ECKY, Package (0x02)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    Zero
                }
            })
            Method (ECKV, 0, Serialized)
            {
                DerefOf (ECKY [One]) [One] = CECV /* \CECV */
                Return (ECKY) /* \_SB_.PC00.CNVW.ECKY */
            }

            Name (PPAY, Package (0x02)
            {
                One, 
                Package (0x18)
                {
                    0x07, 
                    Zero, 
                    0x18, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x18, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28
                }
            })
            Method (PPAG, 0, Serialized)
            {
                DerefOf (PPAY [One]) [One] = WAGE /* \WAGE */
                DerefOf (PPAY [One]) [0x02] = AGA1 /* \AGA1 */
                DerefOf (PPAY [One]) [0x03] = AGA2 /* \AGA2 */
                DerefOf (PPAY [One]) [0x04] = AGA3 /* \AGA3 */
                DerefOf (PPAY [One]) [0x05] = AGA4 /* \AGA4 */
                DerefOf (PPAY [One]) [0x06] = AGA5 /* \AGA5 */
                DerefOf (PPAY [One]) [0x07] = AGA6 /* \AGA6 */
                DerefOf (PPAY [One]) [0x08] = AGA7 /* \AGA7 */
                DerefOf (PPAY [One]) [0x09] = AGA8 /* \AGA8 */
                DerefOf (PPAY [One]) [0x0A] = AGA9 /* \AGA9 */
                DerefOf (PPAY [One]) [0x0B] = AGAA /* \AGAA */
                DerefOf (PPAY [One]) [0x0C] = AGAB /* \AGAB */
                DerefOf (PPAY [One]) [0x0D] = AGB1 /* \AGB1 */
                DerefOf (PPAY [One]) [0x0E] = AGB2 /* \AGB2 */
                DerefOf (PPAY [One]) [0x0F] = AGB3 /* \AGB3 */
                DerefOf (PPAY [One]) [0x10] = AGB4 /* \AGB4 */
                DerefOf (PPAY [One]) [0x11] = AGB5 /* \AGB5 */
                DerefOf (PPAY [One]) [0x12] = AGB6 /* \AGB6 */
                DerefOf (PPAY [One]) [0x13] = AGB7 /* \AGB7 */
                DerefOf (PPAY [One]) [0x14] = AGB8 /* \AGB8 */
                DerefOf (PPAY [One]) [0x15] = AGB9 /* \AGB9 */
                DerefOf (PPAY [One]) [0x16] = AGBA /* \AGBA */
                DerefOf (PPAY [One]) [0x17] = AGBB /* \AGBB */
                Return (PPAY) /* \_SB_.PC00.CNVW.PPAY */
            }

            Name (SADX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    0x80000000
                }, 

                Package (0x02)
                {
                    0x12, 
                    0x80000000
                }
            })
            Method (SADS, 0, Serialized)
            {
                DerefOf (SADX [One]) [One] = ATDV /* \ATDV */
                DerefOf (SADX [0x02]) [One] = ATDV /* \ATDV */
                Return (SADX) /* \_SB_.PC00.CNVW.SADX */
            }

            Name (GPCX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }, 

                Package (0x02)
                {
                    0x12, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }
            })
            Method (GPC, 0, Serialized)
            {
                Return (GPCX) /* \_SB_.PC00.CNVW.GPCX */
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("f21202bf-8f78-4dc6-a5b3-1f738e285ade") /* Unknown UUID */))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x0F                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Local0 = ACSD /* \ACSD */
                        Return (Local0)
                    }

                    If ((Arg2 == 0x02))
                    {
                        Local0 = I5BS /* \I5BS */
                        Return (Local0)
                    }

                    If ((Arg2 == 0x03))
                    {
                        Local0 = UHBS /* \UHBS */
                        Return (Local0)
                    }

                    Return (Zero)
                }
            }
        }

        If ((PCHS == 0x02))
        {
            Scope (_SB.PC00.XHCI.RHUB.HS10)
            {
                Name (SADX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        0x80000000
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        0x80000000
                    }
                })
                Method (SADS, 0, Serialized)
                {
                    DerefOf (SADX [One]) [One] = ATDV /* \ATDV */
                    DerefOf (SADX [0x02]) [One] = ATDV /* \ATDV */
                    Return (SADX) /* \_SB_.PC00.XHCI.RHUB.HS10.SADX */
                }

                Name (BRDY, Package (0x02)
                {
                    Zero, 
                    Package (0x08)
                    {
                        0x12, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (BRDS, 0, Serialized)
                {
                    DerefOf (BRDY [One]) [One] = BTSE /* \BTSE */
                    DerefOf (BRDY [One]) [0x02] = BTBR /* \BTBR */
                    DerefOf (BRDY [One]) [0x03] = BED2 /* \BED2 */
                    DerefOf (BRDY [One]) [0x04] = BED3 /* \BED3 */
                    DerefOf (BRDY [One]) [0x05] = BTLE /* \BTLE */
                    DerefOf (BRDY [One]) [0x06] = BTL2 /* \BTL2 */
                    DerefOf (BRDY [One]) [0x07] = BTLL /* \BTLL */
                    Return (BRDY) /* \_SB_.PC00.XHCI.RHUB.HS10.BRDY */
                }

                Name (ECKY, Package (0x02)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x12, 
                        Zero
                    }
                })
                Method (ECKV, 0, Serialized)
                {
                    DerefOf (ECKY [One]) [One] = CECV /* \CECV */
                    Return (ECKY) /* \_SB_.PC00.XHCI.RHUB.HS10.ECKY */
                }

                Name (RDLY, 0x69)
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("aa10f4e0-81ac-4233-abf6-3b2ac50e28d9") /* Unknown UUID */))
                    {
                        If ((Arg2 == Zero))
                        {
                            If ((Arg1 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                             // .
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }
                        }

                        If ((Arg2 == One))
                        {
                            RDLY = Arg3
                        }

                        Return (Zero)
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                PowerResource (BTRT, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        Local0 = Acquire (CNMT, 0x03E8)
                        If ((Local0 == Zero))
                        {
                            BTRK (Zero)
                            Sleep (RDLY)
                            BTRK (One)
                            Sleep (RDLY)
                        }

                        Release (CNMT)
                    }
                }

                Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
                {
                    Return (Package (0x01)
                    {
                        BTRT
                    })
                }

                Name (GPCX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }
                })
                Method (GPC, 0, Serialized)
                {
                    Return (GPCX) /* \_SB_.PC00.XHCI.RHUB.HS10.GPCX */
                }
            }
        }
        Else
        {
            Scope (_SB.PC00.XHCI.RHUB.HS14)
            {
                Name (SADX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        0x80000000
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        0x80000000
                    }
                })
                Method (SADS, 0, Serialized)
                {
                    DerefOf (SADX [One]) [One] = ATDV /* \ATDV */
                    DerefOf (SADX [0x02]) [One] = ATDV /* \ATDV */
                    Return (SADX) /* \_SB_.PC00.XHCI.RHUB.HS14.SADX */
                }

                Name (BRDY, Package (0x02)
                {
                    Zero, 
                    Package (0x08)
                    {
                        0x12, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (BRDS, 0, Serialized)
                {
                    DerefOf (BRDY [One]) [One] = BTSE /* \BTSE */
                    DerefOf (BRDY [One]) [0x02] = BTBR /* \BTBR */
                    DerefOf (BRDY [One]) [0x03] = BED2 /* \BED2 */
                    DerefOf (BRDY [One]) [0x04] = BED3 /* \BED3 */
                    DerefOf (BRDY [One]) [0x05] = BTLE /* \BTLE */
                    DerefOf (BRDY [One]) [0x06] = BTL2 /* \BTL2 */
                    DerefOf (BRDY [One]) [0x07] = BTLL /* \BTLL */
                    Return (BRDY) /* \_SB_.PC00.XHCI.RHUB.HS14.BRDY */
                }

                Name (ECKY, Package (0x02)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x12, 
                        Zero
                    }
                })
                Method (ECKV, 0, Serialized)
                {
                    DerefOf (ECKY [One]) [One] = CECV /* \CECV */
                    Return (ECKY) /* \_SB_.PC00.XHCI.RHUB.HS14.ECKY */
                }

                Name (RDLY, 0x69)
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("aa10f4e0-81ac-4233-abf6-3b2ac50e28d9") /* Unknown UUID */))
                    {
                        If ((Arg2 == Zero))
                        {
                            If ((Arg1 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                             // .
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }
                        }

                        If ((Arg2 == One))
                        {
                            RDLY = Arg3
                        }

                        Return (Zero)
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                PowerResource (BTRT, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        Local0 = Acquire (CNMT, 0x03E8)
                        If ((Local0 == Zero))
                        {
                            BTRK (Zero)
                            Sleep (RDLY)
                            BTRK (One)
                            Sleep (RDLY)
                        }

                        Release (CNMT)
                    }
                }

                Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
                {
                    Return (Package (0x01)
                    {
                        BTRT
                    })
                }

                Name (GPCX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }
                })
                Method (GPC, 0, Serialized)
                {
                    Return (GPCX) /* \_SB_.PC00.XHCI.RHUB.HS14.GPCX */
                }
            }
        }
    }

    Scope (_SB.PC00.UA00)
    {
        Device (BTH0)
        {
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                Return ("INT33E1")
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                SHPO (GBTI, One)
                SHPO (GBTK, One)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (SBFG, ResourceTemplate ()
                {
                    UartSerialBusV2 (0x0001C200, DataBitsEight, StopBitsOne,
                        0xC0, LittleEndian, ParityTypeNone, FlowControlHardware,
                        0x0020, 0x0020, "\\_SB.PC00.UA00",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                    GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                        "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0000
                        }
                    GpioInt (Edge, ActiveLow, ExclusiveAndWake, PullDefault, 0x0000,
                        "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0000
                        }
                })
                CreateWordField (SBFG, 0x5F, INT3)
                CreateWordField (SBFG, 0x3C, KIL3)
                INT3 = GNUM (GBTI)
                KIL3 = GNUM (GBTK)
                Name (SBFI, ResourceTemplate ()
                {
                    UartSerialBusV2 (0x0001C200, DataBitsEight, StopBitsOne,
                        0xC0, LittleEndian, ParityTypeNone, FlowControlHardware,
                        0x0020, 0x0020, "\\_SB.PC00.UA00",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                    GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                        "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0000
                        }
                    Interrupt (ResourceConsumer, Edge, ActiveLow, ExclusiveAndWake, ,, _Y44)
                    {
                        0x00000000,
                    }
                })
                CreateDWordField (SBFI, \_SB.PC00.UA00.BTH0._CRS._Y44._INT, INT4)  // _INT: Interrupts
                CreateWordField (SBFI, 0x3C, KIL4)
                INT4 = INUM (GBTI)
                KIL4 = GNUM (GBTK)
                If ((SDM9 == Zero))
                {
                    Return (SBFG) /* \_SB_.PC00.UA00.BTH0._CRS.SBFG */
                }
                Else
                {
                    Return (SBFI) /* \_SB_.PC00.UA00.BTH0._CRS.SBFI */
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((SDS9 != 0x02))
                {
                    Return (Zero)
                }

                Return (0x0F)
            }

            Name (_S0W, 0x02)  // _S0W: S0 Device Wake State
        }

        Name (BRDY, Package (0x02)
        {
            Zero, 
            Package (0x08)
            {
                0x12, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80
            }
        })
        Method (BRDS, 0, Serialized)
        {
            DerefOf (BRDY [One]) [One] = BTSE /* \BTSE */
            DerefOf (BRDY [One]) [0x02] = BTBR /* \BTBR */
            DerefOf (BRDY [One]) [0x03] = BED2 /* \BED2 */
            DerefOf (BRDY [One]) [0x04] = BED3 /* \BED3 */
            DerefOf (BRDY [One]) [0x05] = BTLE /* \BTLE */
            DerefOf (BRDY [One]) [0x06] = BTL2 /* \BTL2 */
            DerefOf (BRDY [One]) [0x07] = BTLL /* \BTLL */
            Return (BRDY) /* \_SB_.PC00.UA00.BRDY */
        }

        Name (ECKY, Package (0x02)
        {
            Zero, 
            Package (0x02)
            {
                0x12, 
                Zero
            }
        })
        Method (ECKV, 0, Serialized)
        {
            DerefOf (ECKY [One]) [One] = CECV /* \CECV */
            Return (ECKY) /* \_SB_.PC00.UA00.ECKY */
        }

        Name (GPCX, Package (0x03)
        {
            Zero, 
            Package (0x02)
            {
                0x07, 
                Package (0x03)
                {
                    Zero, 
                    Zero, 
                    Zero
                }
            }, 

            Package (0x02)
            {
                0x12, 
                Package (0x03)
                {
                    Zero, 
                    Zero, 
                    Zero
                }
            }
        })
        Method (GPC, 0, Serialized)
        {
            Return (GPCX) /* \_SB_.PC00.UA00.GPCX */
        }
    }

    Scope (_SB.PC00)
    {
        Name (HIDG, ToUUID ("3cdff6f7-4267-4555-ad05-b30a3d8938de") /* HID I2C Device */)
        Name (TP7G, ToUUID ("ef87eb82-f951-46da-84ec-14871ac6f84b") /* Unknown UUID */)
        Method (HIDD, 5, Serialized)
        {
            If ((Arg0 == HIDG))
            {
                If ((Arg2 == Zero))
                {
                    If ((Arg1 == One))
                    {
                        Return (Buffer (One)
                        {
                             0x03                                             // .
                        })
                    }
                }

                If ((Arg2 == One))
                {
                    Return (Arg4)
                }
            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }

        Method (TP7D, 6, Serialized)
        {
            If ((Arg0 == TP7G))
            {
                If ((Arg2 == Zero))
                {
                    If ((Arg1 == One))
                    {
                        Return (Buffer (One)
                        {
                             0x03                                             // .
                        })
                    }
                }

                If ((Arg2 == One))
                {
                    Return (ConcatenateResTemplate (Arg4, Arg5))
                }
            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }

        Method (I2CM, 3, Serialized)
        {
            Switch (ToInteger (Arg0))
            {
                Case (Zero)
                {
                    Name (IIC0, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C0",
                            0x00, ResourceConsumer, _Y45, Exclusive,
                            )
                    })
                    CreateWordField (IIC0, \_SB.PC00.I2CM._Y45._ADR, DAD0)  // _ADR: Address
                    CreateDWordField (IIC0, \_SB.PC00.I2CM._Y45._SPE, DSP0)  // _SPE: Speed
                    DAD0 = Arg1
                    DSP0 = Arg2
                    Return (IIC0) /* \_SB_.PC00.I2CM.IIC0 */
                }
                Case (One)
                {
                    Name (IIC1, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C1",
                            0x00, ResourceConsumer, _Y46, Exclusive,
                            )
                    })
                    CreateWordField (IIC1, \_SB.PC00.I2CM._Y46._ADR, DAD1)  // _ADR: Address
                    CreateDWordField (IIC1, \_SB.PC00.I2CM._Y46._SPE, DSP1)  // _SPE: Speed
                    DAD1 = Arg1
                    DSP1 = Arg2
                    Return (IIC1) /* \_SB_.PC00.I2CM.IIC1 */
                }
                Case (0x02)
                {
                    Name (IIC2, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C2",
                            0x00, ResourceConsumer, _Y47, Exclusive,
                            )
                    })
                    CreateWordField (IIC2, \_SB.PC00.I2CM._Y47._ADR, DAD2)  // _ADR: Address
                    CreateDWordField (IIC2, \_SB.PC00.I2CM._Y47._SPE, DSP2)  // _SPE: Speed
                    DAD2 = Arg1
                    DSP2 = Arg2
                    Return (IIC2) /* \_SB_.PC00.I2CM.IIC2 */
                }
                Case (0x03)
                {
                    Name (IIC3, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C3",
                            0x00, ResourceConsumer, _Y48, Exclusive,
                            )
                    })
                    CreateWordField (IIC3, \_SB.PC00.I2CM._Y48._ADR, DAD3)  // _ADR: Address
                    CreateDWordField (IIC3, \_SB.PC00.I2CM._Y48._SPE, DSP3)  // _SPE: Speed
                    DAD3 = Arg1
                    DSP3 = Arg2
                    Return (IIC3) /* \_SB_.PC00.I2CM.IIC3 */
                }
                Case (0x04)
                {
                    Name (IIC4, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C4",
                            0x00, ResourceConsumer, _Y49, Exclusive,
                            )
                    })
                    CreateWordField (IIC4, \_SB.PC00.I2CM._Y49._ADR, DAD4)  // _ADR: Address
                    CreateDWordField (IIC4, \_SB.PC00.I2CM._Y49._SPE, DSP4)  // _SPE: Speed
                    DAD4 = Arg1
                    DSP4 = Arg2
                    Return (IIC4) /* \_SB_.PC00.I2CM.IIC4 */
                }
                Case (0x05)
                {
                    Name (IIC5, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C5",
                            0x00, ResourceConsumer, _Y4A, Exclusive,
                            )
                    })
                    CreateWordField (IIC5, \_SB.PC00.I2CM._Y4A._ADR, DAD5)  // _ADR: Address
                    CreateDWordField (IIC5, \_SB.PC00.I2CM._Y4A._SPE, DSP5)  // _SPE: Speed
                    DAD5 = Arg1
                    DSP5 = Arg2
                    Return (IIC5) /* \_SB_.PC00.I2CM.IIC5 */
                }
                Default
                {
                    Return (Zero)
                }

            }
        }

        Method (SPIM, 3, Serialized)
        {
            Switch (ToInteger (Arg0))
            {
                Case (0x07)
                {
                    Name (IIC7, ResourceTemplate ()
                    {
                        SpiSerialBusV2 (0x0000, PolarityLow, FourWireMode, 0x08,
                            ControllerInitiated, 0x00989680, ClockPolarityLow,
                            ClockPhaseFirst, "\\_SB.PC00.SPI1",
                            0x00, ResourceConsumer, _Y4B, Exclusive,
                            )
                    })
                    CreateWordField (IIC7, \_SB.PC00.SPIM._Y4B._PHA, DPH7)  // _PHA: Clock Phase
                    CreateDWordField (IIC7, \_SB.PC00.SPIM._Y4B._SPE, DSP7)  // _SPE: Speed
                    DPH7 = Arg1
                    DSP7 = Arg2
                    Return (IIC7) /* \_SB_.PC00.SPIM.IIC7 */
                }
                Case (0x08)
                {
                    Name (IIC8, ResourceTemplate ()
                    {
                        SpiSerialBusV2 (0x0000, PolarityLow, FourWireMode, 0x08,
                            ControllerInitiated, 0x00989680, ClockPolarityLow,
                            ClockPhaseFirst, "\\_SB.PC00.SPI2",
                            0x00, ResourceConsumer, _Y4C, Exclusive,
                            )
                    })
                    CreateWordField (IIC8, \_SB.PC00.SPIM._Y4C._PHA, DPH8)  // _PHA: Clock Phase
                    CreateDWordField (IIC8, \_SB.PC00.SPIM._Y4C._SPE, DSP8)  // _SPE: Speed
                    DPH8 = Arg1
                    DSP8 = Arg2
                    Return (IIC8) /* \_SB_.PC00.SPIM.IIC8 */
                }
                Default
                {
                    Return (Zero)
                }

            }
        }

        Method (UCMM, 1, Serialized)
        {
            Switch (ToInteger (Arg0))
            {
                Case (Zero)
                {
                    Name (UCM0, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0038, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C0",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        I2cSerialBusV2 (0x003F, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C0",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        I2cSerialBusV2 (0x0020, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C0",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        I2cSerialBusV2 (0x0027, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C0",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    Return (UCM0) /* \_SB_.PC00.UCMM.UCM0 */
                }
                Case (One)
                {
                    Name (UCM1, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0038, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C1",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        I2cSerialBusV2 (0x003F, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C1",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        I2cSerialBusV2 (0x0020, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C1",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        I2cSerialBusV2 (0x0027, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C1",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    Return (UCM1) /* \_SB_.PC00.UCMM.UCM1 */
                }
                Case (0x02)
                {
                    Name (UCM2, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0038, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C2",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        I2cSerialBusV2 (0x003F, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C2",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        I2cSerialBusV2 (0x0020, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C2",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        I2cSerialBusV2 (0x0027, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C2",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    Return (UCM2) /* \_SB_.PC00.UCMM.UCM2 */
                }
                Case (0x03)
                {
                    Name (UCM3, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0038, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C3",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        I2cSerialBusV2 (0x003F, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C3",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        I2cSerialBusV2 (0x0020, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C3",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        I2cSerialBusV2 (0x0027, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C3",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    Return (UCM3) /* \_SB_.PC00.UCMM.UCM3 */
                }
                Default
                {
                    Return (Zero)
                }

            }
        }
    }

    Scope (_SB.PC00.I2C0)
    {
        Name (I2CN, Zero)
        Name (I2CX, Zero)
        I2CN = SDS0 /* \SDS0 */
        I2CX = Zero
    }

    Scope (_SB.PC00.I2C1)
    {
        Name (I2CN, Zero)
        Name (I2CX, Zero)
        I2CN = SDS1 /* \SDS1 */
        I2CX = One
        Device (TPD0)
        {
            Name (HID2, Zero)
            Name (SBFB, ResourceTemplate ()
            {
                I2cSerialBusV2 (0x002C, ControllerInitiated, 0x00061A80,
                    AddressingMode7Bit, "\\_SB.PC00.I2C1",
                    0x00, ResourceConsumer, _Y4D, Exclusive,
                    )
            })
            Name (SBFG, ResourceTemplate ()
            {
                GpioInt (Level, ActiveLow, ExclusiveAndWake, PullDefault, 0x0000,
                    "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x0000
                    }
            })
            Name (SBFI, ResourceTemplate ()
            {
                Interrupt (ResourceConsumer, Level, ActiveLow, ExclusiveAndWake, ,, _Y4E)
                {
                    0x00000000,
                }
            })
            CreateWordField (SBFB, \_SB.PC00.I2C1.TPD0._Y4D._ADR, BADR)  // _ADR: Address
            CreateDWordField (SBFB, \_SB.PC00.I2C1.TPD0._Y4D._SPE, SPED)  // _SPE: Speed
            CreateWordField (SBFG, 0x17, INT1)
            CreateDWordField (SBFI, \_SB.PC00.I2C1.TPD0._Y4E._INT, INT2)  // _INT: Interrupts
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If ((OSYS < 0x07DC))
                {
                    SRXO (0x0805000B, One)
                }

                INT1 = GNUM (0x0805000B)
                INT2 = INUM (0x0805000B)
                If ((TPDM == Zero))
                {
                    SHPO (0x0805000B, One)
                }

                If ((TPTY == One))
                {
                    _HID = "MSFT0001"
                    _SUB = "ELAN0001"
                    BADR = 0x15
                    HID2 = One
                    Return (Zero)
                }

                If ((TPTY == 0x02))
                {
                    _HID = "MSFT0001"
                    _SUB = "SYNA0001"
                    BADR = 0x2C
                    HID2 = 0x20
                    Return (Zero)
                }
            }

            Name (_HID, "XXXX0000")  // _HID: Hardware ID
            Name (_CID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _CID: Compatible ID
            Name (_SUB, "XXXX0000")  // _SUB: Subsystem ID
            Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == HIDG))
                {
                    Return (HIDD (Arg0, Arg1, Arg2, Arg3, HID2))
                }

                If ((Arg0 == TP7G))
                {
                    Return (TP7D (Arg0, Arg1, Arg2, Arg3, SBFB, SBFG))
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TPTY == Zero))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (0x0F)
                }
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                If ((OSYS < 0x07DC))
                {
                    Return (SBFI) /* \_SB_.PC00.I2C1.TPD0.SBFI */
                }

                If ((TPDM == Zero))
                {
                    Return (ConcatenateResTemplate (I2CM (I2CX, BADR, SPED), SBFG))
                }

                Return (ConcatenateResTemplate (I2CM (I2CX, BADR, SPED), SBFI))
            }

            Method (TPRD, 0, Serialized)
            {
                Return (^^^LPCB.EC0.ECTP) /* \_SB_.PC00.LPCB.EC0_.ECTP */
            }

            Method (TPWR, 1, Serialized)
            {
                ^^^LPCB.EC0.ECTP = Arg0
            }
        }
    }

    Scope (_SB.PC00.I2C2)
    {
        Name (I2CN, Zero)
        Name (I2CX, Zero)
        I2CN = SDS2 /* \SDS2 */
        I2CX = 0x02
    }

    Scope (_SB.PC00.I2C3)
    {
        Name (I2CN, Zero)
        Name (I2CX, Zero)
        I2CN = SDS3 /* \SDS3 */
        I2CX = 0x03
    }

    Scope (_SB.PC00.SPI1)
    {
        Name (SPIP, Zero)
        Name (SPIX, Zero)
        SPIP = SDS7 /* \SDS7 */
        SPIX = 0x07
        Device (FPNT)
        {
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                If ((FPTT == One))
                {
                    Return ("FPC1011")
                }

                If ((FPTT == 0x02))
                {
                    Return ("FPC1020")
                }

                If ((FPTT == 0x03))
                {
                    Return ("VFSI6101")
                }

                If ((FPTT == 0x04))
                {
                    Return ("VFSI7500")
                }

                If ((FPTT == 0x05))
                {
                    Return ("EGIS0300")
                }

                If ((FPTT == 0x06))
                {
                    Return ("FPC1021")
                }

                Return ("DUMY0000")
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                SHPO (GFPI, One)
                SHPO (GFPS, One)
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((FPTT != Zero) && (SPIP == One)))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BBUF, ResourceTemplate ()
                {
                    GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                        "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0008
                        }
                })
                Name (IBUF, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Level, ActiveLow, ExclusiveAndWake, ,, _Y4F)
                    {
                        0x00000000,
                    }
                })
                Name (GBUF, ResourceTemplate ()
                {
                    GpioInt (Level, ActiveLow, ExclusiveAndWake, PullDefault, 0x0000,
                        "\\_SB.GPI0", 0x00, ResourceConsumer, _Y50,
                        )
                        {   // Pin list
                            0x0000
                        }
                })
                Name (UBUF, ResourceTemplate ()
                {
                    GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionInputOnly,
                        "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0000
                        }
                })
                CreateWordField (BBUF, 0x17, SPIN)
                CreateWordField (GBUF, 0x17, GPIN)
                CreateDWordField (IBUF, \_SB.PC00.SPI1.FPNT._CRS._Y4F._INT, IPIN)  // _INT: Interrupts
                CreateWordField (UBUF, 0x17, UPIN)
                CreateBitField (IBUF, \_SB.PC00.SPI1.FPNT._CRS._Y4F._LL, ILVL)  // _LL_: Low Level
                CreateBitField (IBUF, \_SB.PC00.SPI1.FPNT._CRS._Y4F._HE, ITRG)  // _HE_: High-Edge
                CreateField (GBUF, \_SB.PC00.SPI1.FPNT._CRS._Y50._POL, 0x02, GLVL)  // _POL: Polarity
                CreateBitField (GBUF, \_SB.PC00.SPI1.FPNT._CRS._Y50._MOD, GTRG)  // _MOD: Mode
                SPIN = GNUM (GFPS)
                GPIN = GNUM (GFPI)
                IPIN = INUM (GFPI)
                UPIN = GNUM (GFPI)
                If (((FPTT == 0x02) || (FPTT == 0x06)))
                {
                    ILVL = Zero
                    ITRG = One
                    GLVL = Zero
                    GTRG = One
                }

                If ((FPTT == 0x04))
                {
                    ILVL = Zero
                    ITRG = One
                }

                Switch (ToInteger (FPTT))
                {
                    Case (One)
                    {
                        Local1 = 0x00989680
                        Local0 = Zero
                    }
                    Case (0x02)
                    {
                        Local1 = 0x002DC6C0
                        Local0 = Zero
                    }
                    Case (0x03)
                    {
                        Local1 = 0x007A1200
                        Local0 = One
                    }
                    Case (0x04)
                    {
                        Local1 = 0x007A1200
                        Local0 = Zero
                    }
                    Case (0x05)
                    {
                        Local1 = 0x00F42400
                        Local0 = Zero
                    }
                    Case (0x06)
                    {
                        Local1 = 0x002DC6C0
                        Local0 = Zero
                    }
                    Default
                    {
                        Local1 = Zero
                        Local0 = Zero
                    }

                }

                If ((FPTT == One))
                {
                    Return (ConcatenateResTemplate (SPIM (SPIX, Local0, Local1), BBUF))
                }

                If (((FPTT == 0x04) && (FPTM == Zero)))
                {
                    Return (ConcatenateResTemplate (ConcatenateResTemplate (SPIM (SPIX, Local0, Local1), BBUF), ConcatenateResTemplate (UBUF, GBUF
                        )))
                }

                If (((FPTT == 0x04) && (FPTM != Zero)))
                {
                    Return (ConcatenateResTemplate (ConcatenateResTemplate (SPIM (SPIX, Local0, Local1), BBUF), ConcatenateResTemplate (UBUF, IBUF
                        )))
                }

                If ((FPTM == Zero))
                {
                    Return (ConcatenateResTemplate (ConcatenateResTemplate (SPIM (SPIX, Local0, Local1), BBUF), GBUF))
                }

                Return (ConcatenateResTemplate (ConcatenateResTemplate (SPIM (SPIX, Local0, Local1), BBUF), IBUF))
            }
        }
    }

    Scope (_SB.PC00.SPI2)
    {
        Name (SPIP, Zero)
        Name (SPIX, Zero)
        SPIP = SDS8 /* \SDS8 */
        SPIX = 0x08
        Device (FPNT)
        {
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                If ((FPTT == One))
                {
                    Return ("FPC1011")
                }

                If ((FPTT == 0x02))
                {
                    Return ("FPC1020")
                }

                If ((FPTT == 0x03))
                {
                    Return ("VFSI6101")
                }

                If ((FPTT == 0x04))
                {
                    Return ("VFSI7500")
                }

                If ((FPTT == 0x05))
                {
                    Return ("EGIS0300")
                }

                If ((FPTT == 0x06))
                {
                    Return ("FPC1021")
                }

                Return ("DUMY0000")
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                SHPO (GFPI, One)
                SHPO (GFPS, One)
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((FPTT != Zero) && (SPIP == One)))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BBUF, ResourceTemplate ()
                {
                    GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                        "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0008
                        }
                })
                Name (IBUF, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Level, ActiveLow, ExclusiveAndWake, ,, _Y51)
                    {
                        0x00000000,
                    }
                })
                Name (GBUF, ResourceTemplate ()
                {
                    GpioInt (Level, ActiveLow, ExclusiveAndWake, PullDefault, 0x0000,
                        "\\_SB.GPI0", 0x00, ResourceConsumer, _Y52,
                        )
                        {   // Pin list
                            0x0000
                        }
                })
                Name (UBUF, ResourceTemplate ()
                {
                    GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionInputOnly,
                        "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0000
                        }
                })
                CreateWordField (BBUF, 0x17, SPIN)
                CreateWordField (GBUF, 0x17, GPIN)
                CreateDWordField (IBUF, \_SB.PC00.SPI2.FPNT._CRS._Y51._INT, IPIN)  // _INT: Interrupts
                CreateWordField (UBUF, 0x17, UPIN)
                CreateBitField (IBUF, \_SB.PC00.SPI2.FPNT._CRS._Y51._LL, ILVL)  // _LL_: Low Level
                CreateBitField (IBUF, \_SB.PC00.SPI2.FPNT._CRS._Y51._HE, ITRG)  // _HE_: High-Edge
                CreateField (GBUF, \_SB.PC00.SPI2.FPNT._CRS._Y52._POL, 0x02, GLVL)  // _POL: Polarity
                CreateBitField (GBUF, \_SB.PC00.SPI2.FPNT._CRS._Y52._MOD, GTRG)  // _MOD: Mode
                SPIN = GNUM (GFPS)
                GPIN = GNUM (GFPI)
                IPIN = INUM (GFPI)
                UPIN = GNUM (GFPI)
                If (((FPTT == 0x02) || (FPTT == 0x06)))
                {
                    ILVL = Zero
                    ITRG = One
                    GLVL = Zero
                    GTRG = One
                }

                If ((FPTT == 0x04))
                {
                    ILVL = Zero
                    ITRG = One
                }

                Switch (ToInteger (FPTT))
                {
                    Case (One)
                    {
                        Local1 = 0x00989680
                        Local0 = Zero
                    }
                    Case (0x02)
                    {
                        Local1 = 0x002DC6C0
                        Local0 = Zero
                    }
                    Case (0x03)
                    {
                        Local1 = 0x007A1200
                        Local0 = One
                    }
                    Case (0x04)
                    {
                        Local1 = 0x007A1200
                        Local0 = Zero
                    }
                    Case (0x05)
                    {
                        Local1 = 0x00F42400
                        Local0 = Zero
                    }
                    Case (0x06)
                    {
                        Local1 = 0x002DC6C0
                        Local0 = Zero
                    }
                    Default
                    {
                        Local1 = Zero
                        Local0 = Zero
                    }

                }

                If ((FPTT == One))
                {
                    Return (ConcatenateResTemplate (SPIM (SPIX, Local0, Local1), BBUF))
                }

                If (((FPTT == 0x04) && (FPTM == Zero)))
                {
                    Return (ConcatenateResTemplate (ConcatenateResTemplate (SPIM (SPIX, Local0, Local1), BBUF), ConcatenateResTemplate (UBUF, GBUF
                        )))
                }

                If (((FPTT == 0x04) && (FPTM != Zero)))
                {
                    Return (ConcatenateResTemplate (ConcatenateResTemplate (SPIM (SPIX, Local0, Local1), BBUF), ConcatenateResTemplate (UBUF, IBUF
                        )))
                }

                If ((FPTM == Zero))
                {
                    Return (ConcatenateResTemplate (ConcatenateResTemplate (SPIM (SPIX, Local0, Local1), BBUF), GBUF))
                }

                Return (ConcatenateResTemplate (ConcatenateResTemplate (SPIM (SPIX, Local0, Local1), BBUF), IBUF))
            }
        }
    }

    Scope (_SB.PC00.HDAS)
    {
        Method (PPMS, 1, Serialized)
        {
            If ((Arg0 == ToUUID ("7c708106-3aff-40fe-88be-8c999b3f7445") /* Unknown UUID */))
            {
                Return ((ADPM & 0x04))
            }

            If ((Arg0 == ToUUID ("ec774fa9-28d3-424a-90e4-69f984f1eeb7") /* Unknown UUID */))
            {
                Return ((ADPM & 0x0100))
            }

            If ((Arg0 == ACCG (AG1L, AG1H)))
            {
                Return ((ADPM & 0x20000000))
            }

            If ((Arg0 == ACCG (AG2L, AG2H)))
            {
                Return ((ADPM & 0x40000000))
            }

            If ((Arg0 == ACCG (AG3L, AG3H)))
            {
                Return ((ADPM & 0x80000000))
            }

            If ((Arg0 == ToUUID ("b489c2de-0f96-42e1-8a2d-c25b5091ee49") /* Unknown UUID */))
            {
                Return ((ADPM & One))
            }

            If ((Arg0 == ToUUID ("e1284052-8664-4fe4-a353-3878f72704c3") /* Unknown UUID */))
            {
                Return ((ADPM & 0x02))
            }

            If ((Arg0 == ToUUID ("849f0d73-1678-4d57-8c78-61c548253993") /* Unknown UUID */))
            {
                Return ((ADPM & 0x08))
            }

            If ((Arg0 == ToUUID ("347297c3-a6d5-40db-8120-ace66babf491") /* Unknown UUID */))
            {
                Return ((ADPM & 0x10))
            }

            If ((Arg0 == ToUUID ("bd70ce66-7cee-4277-a91a-d6368feaf83d") /* Unknown UUID */))
            {
                Return ((ADPM & 0x20))
            }

            If ((Arg0 == ToUUID ("c75061f3-f2b2-4dcc-8f9f-82abb4131e66") /* Unknown UUID */))
            {
                Return ((ADPM & 0x40))
            }

            If ((Arg0 == ToUUID ("b3573eff-6441-4a75-91f7-4281eec4597d") /* Unknown UUID */))
            {
                Return ((ADPM & 0x80))
            }

            If ((Arg0 == ToUUID ("d46f9d72-81a4-47fd-b301-8e39d17c0981") /* Unknown UUID */))
            {
                Return ((ADPM & 0x0200))
            }

            If ((Arg0 == ToUUID ("f3578986-4400-4adf-ae7e-cd433cd3f26e") /* Unknown UUID */))
            {
                Return ((ADPM & 0x0400))
            }

            If ((Arg0 == ToUUID ("2c093145-5895-4699-9ddb-6fefdc77e85d") /* Unknown UUID */))
            {
                Return ((ADPM & 0x0800))
            }

            If ((Arg0 == ToUUID ("b55eba24-8349-4dad-afc7-8489d23c93ef") /* Unknown UUID */))
            {
                Return ((ADPM & 0x1000))
            }

            If ((Arg0 == ToUUID ("7111001f-d35f-44d9-81d2-7ac685bed3d7") /* Unknown UUID */))
            {
                Return ((ADPM & 0x2000))
            }

            If ((Arg0 == ToUUID ("88373a01-16a5-469d-a39a-bdeb594178b8") /* Unknown UUID */))
            {
                Return ((ADPM & 0x4000))
            }

            If ((Arg0 == ToUUID ("54cab206-82cb-4b67-a1ee-fcd45c126dc8") /* Unknown UUID */))
            {
                Return ((ADPM & 0x8000))
            }

            If ((Arg0 == ToUUID ("70002307-da3e-4e0b-ba03-4c72314b2aaa") /* Unknown UUID */))
            {
                Return ((ADPM & 0x00010000))
            }

            If ((Arg0 == ToUUID ("7aea5e24-e5e9-4d6d-b88f-b505c1acab11") /* Unknown UUID */))
            {
                Return ((ADPM & 0x00020000))
            }

            Return (Zero)
        }

        Method (ACCG, 2, NotSerialized)
        {
            Name (GBUF, Buffer (0x10) {})
            Concatenate (Arg0, Arg1, GBUF) /* \_SB_.PC00.HDAS.ACCG.GBUF */
            Return (GBUF) /* \_SB_.PC00.HDAS.ACCG.GBUF */
        }
    }

    Scope (\)
    {
        PowerResource (PIN, 0x00, 0x0000)
        {
            Method (STA, 1, Serialized)
            {
                If ((\_SB.GGOV (DerefOf (Arg0 [Zero])) == DerefOf (Arg0 [One]
                    )))
                {
                    Return (One)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (ON, 1, Serialized)
            {
                \_SB.SGOV (DerefOf (Arg0 [Zero]), DerefOf (Arg0 [One]))
            }

            Method (OFF, 1, Serialized)
            {
                \_SB.SGOV (DerefOf (Arg0 [Zero]), ~DerefOf (Arg0 [One])
                    )
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (Zero)
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
            }
        }
    }

    Scope (_SB)
    {
        Name (C0PF, Package (0x01)
        {
            Buffer (0x14)
            {
                /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x20, 0x03, 0xD0, 0x07,  // .... ...
                /* 0008 */  0x41, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x80, 0x01,  // A.......
                /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
            }
        })
        Name (C1PF, Package (0x01)
        {
            Buffer (0x14)
            {
                /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x20, 0x03, 0xD0, 0x07,  // .... ...
                /* 0008 */  0x41, 0x0E, 0x00, 0x00, 0x04, 0x00, 0x80, 0x01,  // A.......
                /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
            }
        })
    }

    Scope (\)
    {
        Method (PLD1, 0, Serialized)
        {
            Return (\_SB.C0PF)
        }
    }

    Scope (\)
    {
        Method (PLD2, 0, Serialized)
        {
            Return (\_SB.C1PF)
        }
    }

    Scope (_SB.PC00.THC0)
    {
        Device (TLC1)
        {
            Name (_ADR, One)  // _ADR: Address
            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
            {
                Return (C0PF) /* \_SB_.C0PF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }
        }

        Device (TLC2)
        {
            Name (_ADR, 0x02)  // _ADR: Address
            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
            {
                Return (C0PF) /* \_SB_.C0PF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }
        }

        Device (TLC3)
        {
            Name (_ADR, 0x03)  // _ADR: Address
            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
            {
                Return (C0PF) /* \_SB_.C0PF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }
        }
    }

    Scope (_SB.PC00.THC1)
    {
        Device (TLC1)
        {
            Name (_ADR, One)  // _ADR: Address
            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
            {
                Return (C1PF) /* \_SB_.C1PF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }
        }

        Device (TLC2)
        {
            Name (_ADR, 0x02)  // _ADR: Address
            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
            {
                Return (C1PF) /* \_SB_.C1PF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }
        }

        Device (TLC3)
        {
            Name (_ADR, 0x03)  // _ADR: Address
            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
            {
                Return (C1PF) /* \_SB_.C1PF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }
        }
    }

    If ((VMDE == One))
    {
        Name (VDSD, One)
        Scope (_SB.PC00)
        {
            Device (VMD0)
            {
                Name (_ADR, 0x000E0000)  // _ADR: Address
                If (CondRefOf (\VDSD))
                {
                    If ((VDSD == One))
                    {
                        Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                        {
                            ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "StorageD3Enable", 
                                    One
                                }
                            }
                        })
                    }
                }

                Method (CBAR, 3, Serialized)
                {
                    Name (VCFB, Zero)
                    VCFB = XBAS /* \XBAS */
                    VCFB |= Zero
                    VCFB |= 0x00070000
                    VCFB |= Zero
                    OperationRegion (VCFG, SystemMemory, VCFB, 0x0100)
                    Field (VCFG, DWordAcc, NoLock, Preserve)
                    {
                        Offset (0x10), 
                        BAR0,   64
                    }

                    Name (DCFB, Zero)
                    DCFB = BAR0 /* \_SB_.PC00.VMD0.CBAR.BAR0 */
                    DCFB &= 0xFFFFFFFFFFFFFFF0
                    DCFB |= (Arg0 << 0x14)
                    DCFB |= (Arg1 << 0x0F)
                    DCFB |= (Arg2 << 0x0C)
                    Return (DCFB) /* \_SB_.PC00.VMD0.CBAR.DCFB */
                }

                Device (NVDR)
                {
                    Name (_ADR, One)  // _ADR: Address
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((DPMS == One))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        If ((Arg0 == ToUUID ("a3316317-e8b6-4adf-96e8-94d94a51a38e") /* Unknown UUID */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Switch (ToInteger (Arg1))
                                    {
                                        Case (One)
                                        {
                                            Return (0x03)
                                        }
                                        Default
                                        {
                                            Return (Zero)
                                        }

                                    }
                                }
                                Case (One)
                                {
                                    Name (PPAR, Package (0x01)
                                    {
                                        Buffer (0x18) {}
                                    })
                                    CreateWordField (DerefOf (PPAR [Zero]), Zero, DPM0)
                                    CreateWordField (DerefOf (PPAR [Zero]), 0x02, DPM1)
                                    CreateDWordField (DerefOf (PPAR [Zero]), 0x04, DPM2)
                                    CreateQWordField (DerefOf (PPAR [Zero]), 0x08, DPM3)
                                    CreateQWordField (DerefOf (PPAR [Zero]), 0x10, DPM4)
                                    If ((DPMS == Zero))
                                    {
                                        DPM0 = 0x02
                                        DPM1 = Zero
                                        DPM3 = Zero
                                        DPM4 = Zero
                                        Return (PPAR) /* \_SB_.PC00.VMD0.NVDR._DSM.PPAR */
                                    }
                                    Else
                                    {
                                        DPM0 = Zero
                                        DPM1 = Zero
                                        DPM3 = PMSA /* \PMSA */
                                        DPM4 = PMRL /* \PMRL */
                                        Return (PPAR) /* \_SB_.PC00.VMD0.NVDR._DSM.PPAR */
                                    }
                                }

                            }
                        }
                        Else
                        {
                            Return (^^^^NVDR._DSM (Arg0, Arg1, Arg2, Arg3))
                        }
                    }

                    Device (NVD1)
                    {
                        Name (_ADR, 0x02)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If ((DPMS == One))
                            {
                                Return (0x0F)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Method (_LSI, 0, NotSerialized)  // _LSI: Label Storage Information
                        {
                            Return (\_SB.NVDR.NVD1._LSI ())
                        }

                        Method (_LSR, 2, Serialized)  // _LSR: Label Storage Read
                        {
                            Return (\_SB.NVDR.NVD1._LSR (Arg0, Arg1))
                        }

                        Method (_LSW, 3, Serialized)  // _LSW: Label Storage Write
                        {
                            Return (\_SB.NVDR.NVD1._LSW (Arg0, Arg1, Arg2))
                        }

                        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                        {
                            Return (\_SB.NVDR.NVD1._DSM (Arg0, Arg1, Arg2, Arg3))
                        }
                    }
                }

                Device (RP01)
                {
                    Name (RPD, 0x1C)
                    Name (RPF, Zero)
                    Name (RSPT, One)
                    Name (RSPI, Zero)
                    Name (_ADR, 0x80E0FFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        If ((ID3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = One
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((NCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (RP02)
                {
                    Name (RPD, 0x1C)
                    Name (RPF, One)
                    Name (RSPT, One)
                    Name (RSPI, One)
                    Name (_ADR, 0x80E1FFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        If ((ID3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = One
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((NCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (RP03)
                {
                    Name (RPD, 0x1C)
                    Name (RPF, 0x02)
                    Name (RSPT, One)
                    Name (RSPI, 0x02)
                    Name (_ADR, 0x80E2FFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        If ((ID3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = One
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((NCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (RP04)
                {
                    Name (RPD, 0x1C)
                    Name (RPF, 0x03)
                    Name (RSPT, One)
                    Name (RSPI, 0x03)
                    Name (_ADR, 0x80E3FFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        If ((ID3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = One
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((NCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (RP05)
                {
                    Name (RPD, 0x1C)
                    Name (RPF, 0x04)
                    Name (RSPT, One)
                    Name (RSPI, 0x04)
                    Name (_ADR, 0x80E4FFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        If ((ID3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = One
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((NCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (RP06)
                {
                    Name (RPD, 0x1C)
                    Name (RPF, 0x05)
                    Name (RSPT, One)
                    Name (RSPI, 0x05)
                    Name (_ADR, 0x80E5FFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        If ((ID3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = One
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((NCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (RP07)
                {
                    Name (RPD, 0x1C)
                    Name (RPF, 0x06)
                    Name (RSPT, One)
                    Name (RSPI, 0x06)
                    Name (_ADR, 0x80E6FFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        If ((ID3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = One
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((NCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (RP08)
                {
                    Name (RPD, 0x1C)
                    Name (RPF, 0x07)
                    Name (RSPT, One)
                    Name (RSPI, 0x07)
                    Name (_ADR, 0x80E7FFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        If ((ID3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = One
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((NCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (RP09)
                {
                    Name (RPD, 0x1D)
                    Name (RPF, Zero)
                    Name (RSPT, One)
                    Name (RSPI, 0x08)
                    Name (_ADR, 0x80E8FFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        If ((ID3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = One
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((NCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (RP10)
                {
                    Name (RPD, 0x1D)
                    Name (RPF, One)
                    Name (RSPT, One)
                    Name (RSPI, 0x09)
                    Name (_ADR, 0x80E9FFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        If ((ID3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = One
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((NCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (RP11)
                {
                    Name (RPD, 0x1D)
                    Name (RPF, 0x02)
                    Name (RSPT, One)
                    Name (RSPI, 0x0A)
                    Name (_ADR, 0x80EAFFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        If ((ID3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = One
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((NCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (RP12)
                {
                    Name (RPD, 0x1D)
                    Name (RPF, 0x03)
                    Name (RSPT, One)
                    Name (RSPI, 0x0B)
                    Name (_ADR, 0x80EBFFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        If ((ID3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = One
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((NCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (RP13)
                {
                    Name (RPD, 0x1D)
                    Name (RPF, 0x04)
                    Name (RSPT, One)
                    Name (RSPI, 0x0C)
                    Name (_ADR, 0x80ECFFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        If ((ID3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = One
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((NCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (RP14)
                {
                    Name (RPD, 0x1D)
                    Name (RPF, 0x05)
                    Name (RSPT, One)
                    Name (RSPI, 0x0D)
                    Name (_ADR, 0x80EDFFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        If ((ID3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = One
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((NCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (RP15)
                {
                    Name (RPD, 0x1D)
                    Name (RPF, 0x06)
                    Name (RSPT, One)
                    Name (RSPI, 0x0E)
                    Name (_ADR, 0x80EEFFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        If ((ID3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = One
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((NCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (RP16)
                {
                    Name (RPD, 0x1D)
                    Name (RPF, 0x07)
                    Name (RSPT, One)
                    Name (RSPI, 0x0F)
                    Name (_ADR, 0x80EFFFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        If ((ID3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = One
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((NCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (RP17)
                {
                    Name (RPD, 0x1B)
                    Name (RPF, Zero)
                    Name (RSPT, One)
                    Name (RSPI, 0x10)
                    Name (_ADR, 0x80D8FFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        If ((ID3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = One
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((NCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (RP18)
                {
                    Name (RPD, 0x1B)
                    Name (RPF, One)
                    Name (RSPT, One)
                    Name (RSPI, 0x11)
                    Name (_ADR, 0x80D9FFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        If ((ID3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = One
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((NCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (RP19)
                {
                    Name (RPD, 0x1B)
                    Name (RPF, 0x02)
                    Name (RSPT, One)
                    Name (RSPI, 0x12)
                    Name (_ADR, 0x80DAFFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        If ((ID3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = One
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((NCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (RP20)
                {
                    Name (RPD, 0x1B)
                    Name (RPF, 0x03)
                    Name (RSPT, One)
                    Name (RSPI, 0x13)
                    Name (_ADR, 0x80DBFFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        If ((ID3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = One
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((NCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (RP21)
                {
                    Name (RPD, 0x1B)
                    Name (RPF, 0x04)
                    Name (RSPT, One)
                    Name (RSPI, 0x14)
                    Name (_ADR, 0x80DCFFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        If ((ID3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = One
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((NCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (RP22)
                {
                    Name (RPD, 0x1B)
                    Name (RPF, 0x05)
                    Name (RSPT, One)
                    Name (RSPI, 0x15)
                    Name (_ADR, 0x80DDFFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        If ((ID3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = One
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((NCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (RP23)
                {
                    Name (RPD, 0x1B)
                    Name (RPF, 0x06)
                    Name (RSPT, One)
                    Name (RSPI, 0x16)
                    Name (_ADR, 0x80DEFFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        If ((ID3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = One
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((NCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (RP24)
                {
                    Name (RPD, 0x1B)
                    Name (RPF, 0x07)
                    Name (RSPT, One)
                    Name (RSPI, 0x17)
                    Name (_ADR, 0x80DFFFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        If ((ID3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = One
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((NCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (PEG0)
                {
                    Name (RPD, 0x06)
                    Name (RPF, Zero)
                    Name (RSPT, 0x02)
                    Name (RSPI, Zero)
                    Name (_ADR, 0x8030FFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        If ((ID3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = One
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((NCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (PEG1)
                {
                    Name (RPD, One)
                    Name (RPF, Zero)
                    Name (RSPT, 0x02)
                    Name (RSPI, One)
                    Name (_ADR, 0x8008FFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        If ((ID3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = One
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((NCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (PEG2)
                {
                    Name (RPD, One)
                    Name (RPF, One)
                    Name (RSPT, 0x02)
                    Name (RSPI, 0x02)
                    Name (_ADR, 0x8009FFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        If ((ID3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = One
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((NCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (PEG3)
                {
                    Name (RPD, One)
                    Name (RPF, 0x02)
                    Name (RSPT, 0x02)
                    Name (RSPI, 0x03)
                    Name (_ADR, 0x800AFFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        If ((ID3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        ID3C = Zero
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        ID3C = One
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = One
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        DCFB = CBAR (Zero, RPD, RPF)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            Offset (0xE0), 
                            NCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If ((NCB0 != One))
                        {
                            Return (Zero)
                        }

                        L23R = One
                        Local0 = Zero
                        While (L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        NCB0 = Zero
                        Local0 = Zero
                        While ((LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }

                Device (PRT0)
                {
                    Name (RSPT, Zero)
                    Name (RSPI, Zero)
                    Name (_ADR, 0x00B8FFF0)  // _ADR: Address
                    Name (SD3C, Zero)
                    Method (VS3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VSON, 0, Serialized)
                    {
                        If ((SD3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        Sleep (0x10)
                        SD3C = Zero
                    }

                    Method (VSOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        VDOF (RSPT, RSPI)
                        SD3C = One
                    }
                }

                Device (PRT1)
                {
                    Name (RSPT, Zero)
                    Name (RSPI, One)
                    Name (_ADR, 0x00B8FFF1)  // _ADR: Address
                    Name (SD3C, Zero)
                    Method (VS3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VSON, 0, Serialized)
                    {
                        If ((SD3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        Sleep (0x10)
                        SD3C = Zero
                    }

                    Method (VSOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        VDOF (RSPT, RSPI)
                        SD3C = One
                    }
                }

                Device (PRT2)
                {
                    Name (RSPT, Zero)
                    Name (RSPI, 0x02)
                    Name (_ADR, 0x00B8FFF2)  // _ADR: Address
                    Name (SD3C, Zero)
                    Method (VS3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VSON, 0, Serialized)
                    {
                        If ((SD3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        Sleep (0x10)
                        SD3C = Zero
                    }

                    Method (VSOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        VDOF (RSPT, RSPI)
                        SD3C = One
                    }
                }

                Device (PRT3)
                {
                    Name (RSPT, Zero)
                    Name (RSPI, 0x03)
                    Name (_ADR, 0x00B8FFF3)  // _ADR: Address
                    Name (SD3C, Zero)
                    Method (VS3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VSON, 0, Serialized)
                    {
                        If ((SD3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        Sleep (0x10)
                        SD3C = Zero
                    }

                    Method (VSOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        VDOF (RSPT, RSPI)
                        SD3C = One
                    }
                }

                Device (PRT4)
                {
                    Name (RSPT, Zero)
                    Name (RSPI, 0x04)
                    Name (_ADR, 0x00B8FFF4)  // _ADR: Address
                    Name (SD3C, Zero)
                    Method (VS3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VSON, 0, Serialized)
                    {
                        If ((SD3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        Sleep (0x10)
                        SD3C = Zero
                    }

                    Method (VSOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        VDOF (RSPT, RSPI)
                        SD3C = One
                    }
                }

                Device (PRT5)
                {
                    Name (RSPT, Zero)
                    Name (RSPI, 0x05)
                    Name (_ADR, 0x00B8FFF5)  // _ADR: Address
                    Name (SD3C, Zero)
                    Method (VS3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VSON, 0, Serialized)
                    {
                        If ((SD3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        Sleep (0x10)
                        SD3C = Zero
                    }

                    Method (VSOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        VDOF (RSPT, RSPI)
                        SD3C = One
                    }
                }

                Device (PRT6)
                {
                    Name (RSPT, Zero)
                    Name (RSPI, 0x06)
                    Name (_ADR, 0x00B8FFF6)  // _ADR: Address
                    Name (SD3C, Zero)
                    Method (VS3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VSON, 0, Serialized)
                    {
                        If ((SD3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        Sleep (0x10)
                        SD3C = Zero
                    }

                    Method (VSOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        VDOF (RSPT, RSPI)
                        SD3C = One
                    }
                }

                Device (PRT7)
                {
                    Name (RSPT, Zero)
                    Name (RSPI, 0x07)
                    Name (_ADR, 0x00B8FFF7)  // _ADR: Address
                    Name (SD3C, Zero)
                    Method (VS3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VSON, 0, Serialized)
                    {
                        If ((SD3C == Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        Sleep (0x10)
                        SD3C = Zero
                    }

                    Method (VSOF, 0, Serialized)
                    {
                        If (!D3CV (RSPT, RSPI))
                        {
                            Return (Zero)
                        }

                        VDOF (RSPT, RSPI)
                        SD3C = One
                    }
                }

                Name (VLVN, Zero)
                Name (VV0D, Package (0x20)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Name (VV1D, Package (0x20)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Name (VV2D, Package (0x20)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Name (VV3D, Package (0x20)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Name (VD3A, Zero)
                Name (VV0S, Zero)
                Name (VV1S, Zero)
                Name (VV2S, Zero)
                Name (VV3S, Zero)
                Method (SVRP, 3, NotSerialized)
                {
                    Local0 = (SizeOf (Arg0) - One)
                    ADBG (Concatenate ("Volume size is: ", Local0))
                    If ((Local0 > 0x20))
                    {
                        ADBG ("Volume size over 32")
                        Return (Zero)
                    }

                    Arg2 = Local0
                    Local1 = Zero
                    While ((Local1 < Local0))
                    {
                        Arg1 [Local1] = DerefOf (Arg0 [(Local1 + One)]
                            )
                        ADBG (Concatenate ("Adding to volume: ", ToHexString (DerefOf (Arg1 [Local1]))))
                        Local1++
                    }
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("9cd9cddd-8845-4afd-8392-31c4eb87cabd") /* Unknown UUID */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (RBUF, Buffer (One)
                                {
                                     0x00                                             // .
                                })
                                CreateByteField (RBUF, Zero, SFUN)
                                SFUN = 0x3F
                                Return (RBUF) /* \_SB_.PC00.VMD0._DSM.RBUF */
                            }
                            Case (One)
                            {
                                VLVN = ToInteger (DerefOf (Arg3 [Zero]))
                                If ((VLVN == Zero))
                                {
                                    SVRP (Arg3, VV0D, RefOf (VV0S))
                                    Return (Zero)
                                }
                                ElseIf ((VLVN == One))
                                {
                                    SVRP (Arg3, VV1D, RefOf (VV1S))
                                    Return (Zero)
                                }
                                ElseIf ((VLVN == 0x02))
                                {
                                    SVRP (Arg3, VV2D, RefOf (VV2S))
                                    Return (Zero)
                                }
                                ElseIf ((VLVN == 0x03))
                                {
                                    SVRP (Arg3, VV3D, RefOf (VV3S))
                                    Return (Zero)
                                }
                                Else
                                {
                                    Return (One)
                                }
                            }
                            Case (0x02)
                            {
                                Name (VVON, Package (0x20)
                                {
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero
                                })
                                Local0 = SizeOf (Arg3)
                                Local1 = Zero
                                If ((Local0 <= 0x20))
                                {
                                    While ((Local1 < Local0))
                                    {
                                        VVON [Local1] = ToInteger (DerefOf (Arg3 [Local1]))
                                        Local1++
                                    }

                                    VLON (Local0, VVON)
                                    Return (Zero)
                                }
                            }
                            Case (0x03)
                            {
                                Name (VVOF, Package (0x20)
                                {
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero
                                })
                                Local0 = SizeOf (Arg3)
                                Local1 = Zero
                                If ((Local0 <= 0x20))
                                {
                                    While ((Local1 < Local0))
                                    {
                                        VVOF [Local1] = ToInteger (DerefOf (Arg3 [Local1]))
                                        Local1++
                                    }

                                    VLOF (Local0, VVOF)
                                    Return (Zero)
                                }
                            }
                            Case (0x04)
                            {
                                Return (Zero)
                            }
                            Case (0x05)
                            {
                                VD3A = DerefOf (Arg3 [Zero])
                                Return (Zero)
                            }
                            Default
                            {
                                Return (0x02)
                            }

                        }
                    }
                }

                Method (VLON, 2, Serialized)
                {
                    Name (DRVA, Zero)
                    Local1 = Arg0
                    Local0 = Zero
                    While ((Local1 > Local0))
                    {
                        DRVA = ToInteger (DerefOf (Arg1 [Local0]))
                        Switch (ToInteger (DRVA))
                        {
                            Case (0x80E0FFFF)
                            {
                                If ((HBSL & One))
                                {
                                    If (D3CV (^RP01.RSPT, ^RP01.RSPI))
                                    {
                                        PSD0 (^RP03.RSPI)
                                        HBCM (^RP03.RSPI, One)
                                    }
                                }

                                ^RP01.VPON ()
                                If ((HBSL & One))
                                {
                                    If (D3CV (^RP01.RSPT, ^RP01.RSPI))
                                    {
                                        ^RP03.RLA ()
                                        Sleep (0x64)
                                    }
                                }
                            }
                            Case (0x80E1FFFF)
                            {
                                ^RP02.VPON ()
                            }
                            Case (0x80E2FFFF)
                            {
                                If ((HBSL & One)) {}
                                Else
                                {
                                    ^RP03.VPON ()
                                }
                            }
                            Case (0x80E3FFFF)
                            {
                                ^RP04.VPON ()
                            }
                            Case (0x80E4FFFF)
                            {
                                If ((HBSL & 0x02))
                                {
                                    If (D3CV (^RP05.RSPT, ^RP05.RSPI))
                                    {
                                        PSD0 (^RP07.RSPI)
                                        HBCM (^RP07.RSPI, One)
                                    }
                                }

                                ^RP05.VPON ()
                                If ((HBSL & 0x02))
                                {
                                    If (D3CV (^RP05.RSPT, ^RP05.RSPI))
                                    {
                                        ^RP07.RLA ()
                                        Sleep (0x64)
                                    }
                                }
                            }
                            Case (0x80E5FFFF)
                            {
                                ^RP06.VPON ()
                            }
                            Case (0x80E6FFFF)
                            {
                                If ((HBSL & 0x02)) {}
                                Else
                                {
                                    ^RP07.VPON ()
                                }
                            }
                            Case (0x80E7FFFF)
                            {
                                ^RP08.VPON ()
                            }
                            Case (0x80E8FFFF)
                            {
                                If ((HBSL & 0x04))
                                {
                                    If (D3CV (^RP09.RSPT, ^RP09.RSPI))
                                    {
                                        PSD0 (^RP11.RSPI)
                                        HBCM (^RP11.RSPI, One)
                                    }
                                }

                                ^RP09.VPON ()
                                If ((HBSL & 0x04))
                                {
                                    If (D3CV (^RP09.RSPT, ^RP09.RSPI))
                                    {
                                        ^RP11.RLA ()
                                        Sleep (0x64)
                                    }
                                }
                            }
                            Case (0x80E9FFFF)
                            {
                                ^RP10.VPON ()
                            }
                            Case (0x80EAFFFF)
                            {
                                If ((HBSL & 0x04)) {}
                                Else
                                {
                                    ^RP11.VPON ()
                                }
                            }
                            Case (0x80EBFFFF)
                            {
                                ^RP12.VPON ()
                            }
                            Case (0x80ECFFFF)
                            {
                                If ((HBSL & 0x08))
                                {
                                    If (D3CV (^RP13.RSPT, ^RP13.RSPI))
                                    {
                                        PSD0 (^RP15.RSPI)
                                        HBCM (^RP15.RSPI, One)
                                    }
                                }

                                ^RP13.VPON ()
                                If ((HBSL & 0x08))
                                {
                                    If (D3CV (^RP13.RSPT, ^RP13.RSPI))
                                    {
                                        ^RP15.RLA ()
                                        Sleep (0x64)
                                    }
                                }
                            }
                            Case (0x80EDFFFF)
                            {
                                ^RP14.VPON ()
                            }
                            Case (0x80EEFFFF)
                            {
                                If ((HBSL & 0x08)) {}
                                Else
                                {
                                    ^RP15.VPON ()
                                }
                            }
                            Case (0x80EFFFFF)
                            {
                                ^RP16.VPON ()
                            }
                            Case (0x80D8FFFF)
                            {
                                If ((HBSL & 0x10))
                                {
                                    If (D3CV (^RP17.RSPT, ^RP17.RSPI))
                                    {
                                        PSD0 (^RP19.RSPI)
                                        HBCM (^RP19.RSPI, One)
                                    }
                                }

                                ^RP17.VPON ()
                                If ((HBSL & 0x10))
                                {
                                    If (D3CV (^RP17.RSPT, ^RP17.RSPI))
                                    {
                                        ^RP19.RLA ()
                                        Sleep (0x64)
                                    }
                                }
                            }
                            Case (0x80D9FFFF)
                            {
                                ^RP18.VPON ()
                            }
                            Case (0x80DAFFFF)
                            {
                                If ((HBSL & 0x10)) {}
                                Else
                                {
                                    ^RP19.VPON ()
                                }
                            }
                            Case (0x80DBFFFF)
                            {
                                ^RP20.VPON ()
                            }
                            Case (0x80DCFFFF)
                            {
                                If ((HBSL & 0x20))
                                {
                                    If (D3CV (^RP21.RSPT, ^RP21.RSPI))
                                    {
                                        PSD0 (^RP23.RSPI)
                                        HBCM (^RP23.RSPI, One)
                                    }
                                }

                                ^RP21.VPON ()
                                If ((HBSL & 0x20))
                                {
                                    If (D3CV (^RP21.RSPT, ^RP21.RSPI))
                                    {
                                        ^RP23.RLA ()
                                        Sleep (0x64)
                                    }
                                }
                            }
                            Case (0x000000080DDAFFFF)
                            {
                                ^RP22.VPON ()
                            }
                            Case (0x80DEFFFF)
                            {
                                If ((HBSL & 0x20)) {}
                                Else
                                {
                                    ^RP23.VPON ()
                                }
                            }
                            Case (0x80DFFFFF)
                            {
                                ^RP24.VPON ()
                            }
                            Case (0x8030FFFF)
                            {
                                ^PEG0.VPON ()
                            }
                            Case (0x8008FFFF)
                            {
                                ^PEG1.VPON ()
                            }
                            Case (0x8009FFFF)
                            {
                                ^PEG2.VPON ()
                            }
                            Case (0x800AFFFF)
                            {
                                ^PEG3.VPON ()
                            }
                            Case (0x00B8FFF0)
                            {
                                ^PRT0.VSON ()
                            }
                            Case (0x00B8FFF1)
                            {
                                ^PRT1.VSON ()
                            }
                            Case (0x00B8FFF2)
                            {
                                ^PRT2.VSON ()
                            }
                            Case (0x00B8FFF3)
                            {
                                ^PRT3.VSON ()
                            }
                            Case (0x00B8FFF4)
                            {
                                ^PRT4.VSON ()
                            }
                            Case (0x00B8FFF5)
                            {
                                ^PRT5.VSON ()
                            }
                            Case (0x00B8FFF6)
                            {
                                ^PRT6.VSON ()
                            }
                            Case (0x00B8FFF7)
                            {
                                ^PRT7.VSON ()
                            }

                        }

                        Local0++
                    }
                }

                Method (VLOF, 2, Serialized)
                {
                    Name (DRVA, Zero)
                    Local1 = Arg0
                    Local0 = Zero
                    While ((Local1 > Local0))
                    {
                        DRVA = ToInteger (DerefOf (Arg1 [Local0]))
                        Switch (ToInteger (DRVA))
                        {
                            Case (0x80E0FFFF)
                            {
                                If ((HBSL & One))
                                {
                                    If (D3CV (^RP01.RSPT, ^RP01.RSPI))
                                    {
                                        ^RP03.RL23 ()
                                        PSD3 (^RP03.RSPI)
                                        HBCM (^RP03.RSPI, Zero)
                                    }
                                }

                                ^RP01.VPOF ()
                            }
                            Case (0x80E1FFFF)
                            {
                                ^RP02.VPOF ()
                            }
                            Case (0x80E2FFFF)
                            {
                                If ((HBSL & One)) {}
                                Else
                                {
                                    ^RP03.VPOF ()
                                }
                            }
                            Case (0x80E3FFFF)
                            {
                                ^RP04.VPOF ()
                            }
                            Case (0x80E4FFFF)
                            {
                                If ((HBSL & 0x02))
                                {
                                    If (D3CV (^RP05.RSPT, ^RP05.RSPI))
                                    {
                                        ^RP07.RL23 ()
                                        PSD3 (^RP07.RSPI)
                                        HBCM (^RP07.RSPI, Zero)
                                    }
                                }

                                ^RP05.VPOF ()
                            }
                            Case (0x80E5FFFF)
                            {
                                ^RP06.VPOF ()
                            }
                            Case (0x80E6FFFF)
                            {
                                If ((HBSL & 0x02)) {}
                                Else
                                {
                                    ^RP07.VPOF ()
                                }
                            }
                            Case (0x80E7FFFF)
                            {
                                ^RP08.VPOF ()
                            }
                            Case (0x80E8FFFF)
                            {
                                If ((HBSL & 0x04))
                                {
                                    If (D3CV (^RP09.RSPT, ^RP09.RSPI))
                                    {
                                        ^RP11.RL23 ()
                                        PSD3 (^RP11.RSPI)
                                        HBCM (^RP11.RSPI, Zero)
                                    }
                                }

                                ^RP09.VPOF ()
                            }
                            Case (0x80E9FFFF)
                            {
                                ^RP10.VPOF ()
                            }
                            Case (0x80EAFFFF)
                            {
                                If ((HBSL & 0x04)) {}
                                Else
                                {
                                    ^RP11.VPOF ()
                                }
                            }
                            Case (0x80EBFFFF)
                            {
                                ^RP12.VPOF ()
                            }
                            Case (0x80ECFFFF)
                            {
                                If ((HBSL & 0x08))
                                {
                                    If (D3CV (^RP13.RSPT, ^RP13.RSPI))
                                    {
                                        ^RP15.RL23 ()
                                        PSD3 (^RP15.RSPI)
                                        HBCM (^RP15.RSPI, Zero)
                                    }
                                }

                                ^RP13.VPOF ()
                            }
                            Case (0x80EDFFFF)
                            {
                                ^RP14.VPOF ()
                            }
                            Case (0x80EEFFFF)
                            {
                                If ((HBSL & 0x08)) {}
                                Else
                                {
                                    ^RP15.VPOF ()
                                }
                            }
                            Case (0x80EFFFFF)
                            {
                                ^RP16.VPOF ()
                            }
                            Case (0x80D8FFFF)
                            {
                                If ((HBSL & 0x10))
                                {
                                    If (D3CV (^RP17.RSPT, ^RP17.RSPI))
                                    {
                                        ^RP19.RL23 ()
                                        PSD3 (^RP19.RSPI)
                                        HBCM (^RP19.RSPI, Zero)
                                    }
                                }

                                ^RP17.VPOF ()
                            }
                            Case (0x80D9FFFF)
                            {
                                ^RP18.VPOF ()
                            }
                            Case (0x80DAFFFF)
                            {
                                If ((HBSL & 0x10)) {}
                                Else
                                {
                                    ^RP19.VPOF ()
                                }
                            }
                            Case (0x80DBFFFF)
                            {
                                ^RP20.VPOF ()
                            }
                            Case (0x80DCFFFF)
                            {
                                If ((HBSL & 0x20))
                                {
                                    If (D3CV (^RP21.RSPT, ^RP21.RSPI))
                                    {
                                        ^RP23.RL23 ()
                                        PSD3 (^RP23.RSPI)
                                        HBCM (^RP23.RSPI, Zero)
                                    }
                                }

                                ^RP21.VPOF ()
                            }
                            Case (0x000000080DDAFFFF)
                            {
                                ^RP22.VPOF ()
                            }
                            Case (0x80DEFFFF)
                            {
                                If ((HBSL & 0x20)) {}
                                Else
                                {
                                    ^RP23.VPOF ()
                                }
                            }
                            Case (0x80DFFFFF)
                            {
                                ^RP24.VPOF ()
                            }
                            Case (0x8030FFFF)
                            {
                                ^PEG0.VPOF ()
                            }
                            Case (0x8008FFFF)
                            {
                                ^PEG1.VPOF ()
                            }
                            Case (0x8009FFFF)
                            {
                                ^PEG2.VPOF ()
                            }
                            Case (0x800AFFFF)
                            {
                                ^PEG3.VPOF ()
                            }
                            Case (0x00B8FFF0)
                            {
                                ^PRT0.VSOF ()
                            }
                            Case (0x00B8FFF1)
                            {
                                ^PRT1.VSOF ()
                            }
                            Case (0x00B8FFF2)
                            {
                                ^PRT2.VSOF ()
                            }
                            Case (0x00B8FFF3)
                            {
                                ^PRT3.VSOF ()
                            }
                            Case (0x00B8FFF4)
                            {
                                ^PRT4.VSOF ()
                            }
                            Case (0x00B8FFF5)
                            {
                                ^PRT5.VSOF ()
                            }
                            Case (0x00B8FFF6)
                            {
                                ^PRT6.VSOF ()
                            }
                            Case (0x00B8FFF7)
                            {
                                ^PRT7.VSOF ()
                            }

                        }

                        Local0++
                    }
                }

                Method (IVRM, 1, NotSerialized)
                {
                    Local0 = Zero
                    While ((VV0S > Local0))
                    {
                        If ((Arg0 == ToInteger (DerefOf (VV0D [Local0]))))
                        {
                            Return (One)
                        }

                        Local0++
                    }

                    Local0 = Zero
                    While ((VV1S > Local0))
                    {
                        If ((Arg0 == ToInteger (DerefOf (VV1D [Local0]))))
                        {
                            Return (One)
                        }

                        Local0++
                    }

                    Local0 = Zero
                    While ((VV2S > Local0))
                    {
                        If ((Arg0 == ToInteger (DerefOf (VV2D [Local0]))))
                        {
                            Return (One)
                        }

                        Local0++
                    }

                    Local0 = Zero
                    While ((VV3S > Local0))
                    {
                        If ((Arg0 == ToInteger (DerefOf (VV3D [Local0]))))
                        {
                            Return (One)
                        }

                        Local0++
                    }

                    Return (Zero)
                }

                Method (VD3C, 1, NotSerialized)
                {
                    Return ((VD3A && IVRM (Arg0)))
                }

                Device (VOL0)
                {
                    Name (_ADR, 0x0080FFFF)  // _ADR: Address
                    If ((RTD3 != Zero))
                    {
                        Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                        {
                            Return (Package (0x01)
                            {
                                V0PR
                            })
                        }
                    }

                    If ((RTD3 != Zero))
                    {
                        Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                        {
                            Return (Package (0x01)
                            {
                                V0PR
                            })
                        }
                    }

                    If ((RTD3 != Zero))
                    {
                        PowerResource (V0PR, 0x04, 0x0000)
                        {
                            Name (_STA, One)  // _STA: Status
                            Method (_ON, 0, NotSerialized)  // _ON_: Power On
                            {
                                If (VD3A)
                                {
                                    VLON (VV0S, VV0D)
                                    _STA = One
                                }
                                Else
                                {
                                }
                            }

                            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                            {
                                If (VD3A)
                                {
                                    VLOF (VV0S, VV0D)
                                    _STA = Zero
                                }
                                Else
                                {
                                }
                            }
                        }
                    }
                }

                Device (VOL1)
                {
                    Name (_ADR, 0x0081FFFF)  // _ADR: Address
                    If ((RTD3 != Zero))
                    {
                        Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                        {
                            Return (Package (0x01)
                            {
                                V1PR
                            })
                        }
                    }

                    If ((RTD3 != Zero))
                    {
                        Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                        {
                            Return (Package (0x01)
                            {
                                V1PR
                            })
                        }
                    }

                    If ((RTD3 != Zero))
                    {
                        PowerResource (V1PR, 0x04, 0x0000)
                        {
                            Name (_STA, One)  // _STA: Status
                            Method (_ON, 0, NotSerialized)  // _ON_: Power On
                            {
                                If (VD3A)
                                {
                                    VLON (VV1S, VV1D)
                                    _STA = One
                                }
                                Else
                                {
                                }
                            }

                            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                            {
                                If (VD3A)
                                {
                                    VLOF (VV1S, VV1D)
                                    _STA = Zero
                                }
                                Else
                                {
                                }
                            }
                        }
                    }
                }

                Device (VOL2)
                {
                    Name (_ADR, 0x0082FFFF)  // _ADR: Address
                    If ((RTD3 != Zero))
                    {
                        Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                        {
                            Return (Package (0x01)
                            {
                                V2PR
                            })
                        }
                    }

                    If ((RTD3 != Zero))
                    {
                        Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                        {
                            Return (Package (0x01)
                            {
                                V2PR
                            })
                        }
                    }

                    If ((RTD3 != Zero))
                    {
                        PowerResource (V2PR, 0x04, 0x0000)
                        {
                            Name (_STA, One)  // _STA: Status
                            Method (_ON, 0, NotSerialized)  // _ON_: Power On
                            {
                                If (VD3A)
                                {
                                    VLON (VV2S, VV2D)
                                    _STA = One
                                }
                                Else
                                {
                                }
                            }

                            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                            {
                                If (VD3A)
                                {
                                    VLOF (VV2S, VV2D)
                                    _STA = Zero
                                }
                                Else
                                {
                                }
                            }
                        }
                    }
                }

                Device (VOL3)
                {
                    Name (_ADR, 0x0083FFFF)  // _ADR: Address
                    If ((RTD3 != Zero))
                    {
                        Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                        {
                            Return (Package (0x01)
                            {
                                V3PR
                            })
                        }
                    }

                    If ((RTD3 != Zero))
                    {
                        Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                        {
                            Return (Package (0x01)
                            {
                                V3PR
                            })
                        }
                    }

                    If ((RTD3 != Zero))
                    {
                        PowerResource (V3PR, 0x04, 0x0000)
                        {
                            Name (_STA, One)  // _STA: Status
                            Method (_ON, 0, NotSerialized)  // _ON_: Power On
                            {
                                If (VD3A)
                                {
                                    VLON (VV3S, VV3D)
                                    _STA = One
                                }
                                Else
                                {
                                }
                            }

                            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                            {
                                If (VD3A)
                                {
                                    VLOF (VV3S, VV3D)
                                    _STA = Zero
                                }
                                Else
                                {
                                }
                            }
                        }
                    }
                }

                Method (D3CV, 2, Serialized)
                {
                    Switch (ToInteger (Arg0))
                    {
                        Case (Zero)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Zero)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT0.SPOF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (One)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT1.SPOF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x02)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT2.SPOF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x03)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT3.SPOF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x04)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT4.SPOF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x05)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT5.SPOF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x06)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT6.SPOF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x07)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT7.SPOF))
                                    {
                                        Return (One)
                                    }
                                }

                            }
                        }
                        Case (One)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Zero)
                                {
                                    If (CondRefOf (\_SB.PC00.RP01.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (One)
                                {
                                    If (CondRefOf (\_SB.PC00.RP02.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x02)
                                {
                                    If (CondRefOf (\_SB.PC00.RP03.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x03)
                                {
                                    If (CondRefOf (\_SB.PC00.RP04.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x04)
                                {
                                    If (CondRefOf (\_SB.PC00.RP05.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x05)
                                {
                                    If (CondRefOf (\_SB.PC00.RP06.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x06)
                                {
                                    If (CondRefOf (\_SB.PC00.RP07.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x07)
                                {
                                    If (CondRefOf (\_SB.PC00.RP08.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x08)
                                {
                                    If (CondRefOf (\_SB.PC00.RP09.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x09)
                                {
                                    If (CondRefOf (\_SB.PC00.RP10.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x0A)
                                {
                                    If (CondRefOf (\_SB.PC00.RP11.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x0B)
                                {
                                    If (CondRefOf (\_SB.PC00.RP12.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x0C)
                                {
                                    If (CondRefOf (\_SB.PC00.RP13.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x0D)
                                {
                                    If (CondRefOf (\_SB.PC00.RP14.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x0E)
                                {
                                    If (CondRefOf (\_SB.PC00.RP15.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x0F)
                                {
                                    If (CondRefOf (\_SB.PC00.RP16.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x10)
                                {
                                    If (CondRefOf (\_SB.PC00.RP17.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x11)
                                {
                                    If (CondRefOf (\_SB.PC00.RP18.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x12)
                                {
                                    If (CondRefOf (\_SB.PC00.RP19.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x13)
                                {
                                    If (CondRefOf (\_SB.PC00.RP20.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x14)
                                {
                                    If (CondRefOf (\_SB.PC00.RP21.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x15)
                                {
                                    If (CondRefOf (\_SB.PC00.RP22.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x16)
                                {
                                    If (CondRefOf (\_SB.PC00.RP23.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x17)
                                {
                                    If (CondRefOf (\_SB.PC00.RP24.POFF))
                                    {
                                        Return (One)
                                    }
                                }

                            }
                        }
                        Case (0x02)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Zero)
                                {
                                    If (CondRefOf (\_SB.PC00.PEG0.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (One)
                                {
                                    If (CondRefOf (\_SB.PC00.PEG1.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x02)
                                {
                                    If (CondRefOf (\_SB.PC00.PEG2.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x03)
                                {
                                    If (CondRefOf (\_SB.PC00.PEG3.POFF))
                                    {
                                        Return (One)
                                    }
                                }

                            }
                        }

                    }

                    Return (Zero)
                }

                Method (VDON, 2, Serialized)
                {
                    Switch (ToInteger (Arg0))
                    {
                        Case (Zero)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Zero)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT0.SPON))
                                    {
                                        ^^SAT0.PRT0.SPON ()
                                    }
                                }
                                Case (One)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT1.SPON))
                                    {
                                        ^^SAT0.PRT1.SPON ()
                                    }
                                }
                                Case (0x02)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT2.SPON))
                                    {
                                        ^^SAT0.PRT2.SPON ()
                                    }
                                }
                                Case (0x03)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT3.SPON))
                                    {
                                        ^^SAT0.PRT3.SPON ()
                                    }
                                }
                                Case (0x04)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT4.SPON))
                                    {
                                        ^^SAT0.PRT4.SPON ()
                                    }
                                }
                                Case (0x05)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT5.SPON))
                                    {
                                        ^^SAT0.PRT5.SPON ()
                                    }
                                }
                                Case (0x06)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT6.SPON))
                                    {
                                        ^^SAT0.PRT6.SPON ()
                                    }
                                }
                                Case (0x07)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT7.SPON))
                                    {
                                        ^^SAT0.PRT7.SPON ()
                                    }
                                }

                            }
                        }
                        Case (One)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Zero)
                                {
                                    If (CondRefOf (\_SB.PC00.RP01.PON))
                                    {
                                        ^^RP01.PON ()
                                    }
                                }
                                Case (One)
                                {
                                    If (CondRefOf (\_SB.PC00.RP02.PON))
                                    {
                                        ^^RP02.PON ()
                                    }
                                }
                                Case (0x02)
                                {
                                    If (CondRefOf (\_SB.PC00.RP03.PON))
                                    {
                                        ^^RP03.PON ()
                                    }
                                }
                                Case (0x03)
                                {
                                    If (CondRefOf (\_SB.PC00.RP04.PON))
                                    {
                                        ^^RP04.PON ()
                                    }
                                }
                                Case (0x04)
                                {
                                    If (CondRefOf (\_SB.PC00.RP05.PON))
                                    {
                                        ^^RP05.PON ()
                                    }
                                }
                                Case (0x05)
                                {
                                    If (CondRefOf (\_SB.PC00.RP06.PON))
                                    {
                                        ^^RP06.PON ()
                                    }
                                }
                                Case (0x06)
                                {
                                    If (CondRefOf (\_SB.PC00.RP07.PON))
                                    {
                                        ^^RP07.PON ()
                                    }
                                }
                                Case (0x07)
                                {
                                    If (CondRefOf (\_SB.PC00.RP08.PON))
                                    {
                                        ^^RP08.PON ()
                                    }
                                }
                                Case (0x08)
                                {
                                    If (CondRefOf (\_SB.PC00.RP09.PON))
                                    {
                                        ^^RP09.PON ()
                                    }
                                }
                                Case (0x09)
                                {
                                    If (CondRefOf (\_SB.PC00.RP10.PON))
                                    {
                                        ^^RP10.PON ()
                                    }
                                }
                                Case (0x0A)
                                {
                                    If (CondRefOf (\_SB.PC00.RP11.PON))
                                    {
                                        ^^RP11.PON ()
                                    }
                                }
                                Case (0x0B)
                                {
                                    If (CondRefOf (\_SB.PC00.RP12.PON))
                                    {
                                        ^^RP12.PON ()
                                    }
                                }
                                Case (0x0C)
                                {
                                    If (CondRefOf (\_SB.PC00.RP13.PON))
                                    {
                                        ^^RP13.PON ()
                                    }
                                }
                                Case (0x0D)
                                {
                                    If (CondRefOf (\_SB.PC00.RP14.PON))
                                    {
                                        ^^RP14.PON ()
                                    }
                                }
                                Case (0x0E)
                                {
                                    If (CondRefOf (\_SB.PC00.RP15.PON))
                                    {
                                        ^^RP15.PON ()
                                    }
                                }
                                Case (0x0F)
                                {
                                    If (CondRefOf (\_SB.PC00.RP16.PON))
                                    {
                                        ^^RP16.PON ()
                                    }
                                }
                                Case (0x10)
                                {
                                    If (CondRefOf (\_SB.PC00.RP17.PON))
                                    {
                                        ^^RP17.PON ()
                                    }
                                }
                                Case (0x11)
                                {
                                    If (CondRefOf (\_SB.PC00.RP18.PON))
                                    {
                                        ^^RP18.PON ()
                                    }
                                }
                                Case (0x12)
                                {
                                    If (CondRefOf (\_SB.PC00.RP19.PON))
                                    {
                                        ^^RP19.PON ()
                                    }
                                }
                                Case (0x13)
                                {
                                    If (CondRefOf (\_SB.PC00.RP20.PON))
                                    {
                                        ^^RP20.PON ()
                                    }
                                }
                                Case (0x14)
                                {
                                    If (CondRefOf (\_SB.PC00.RP21.PON))
                                    {
                                        ^^RP21.PON ()
                                    }
                                }
                                Case (0x15)
                                {
                                    If (CondRefOf (\_SB.PC00.RP22.PON))
                                    {
                                        ^^RP22.PON ()
                                    }
                                }
                                Case (0x16)
                                {
                                    If (CondRefOf (\_SB.PC00.RP23.PON))
                                    {
                                        ^^RP23.PON ()
                                    }
                                }
                                Case (0x17)
                                {
                                    If (CondRefOf (\_SB.PC00.RP24.PON))
                                    {
                                        ^^RP24.PON ()
                                    }
                                }

                            }
                        }
                        Case (0x02)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Zero)
                                {
                                    If (CondRefOf (\_SB.PC00.PEG0.PON))
                                    {
                                        ^^PEG0.PON ()
                                    }
                                }
                                Case (One)
                                {
                                    If (CondRefOf (\_SB.PC00.PEG1.PON))
                                    {
                                        ^^PEG1.PON ()
                                    }
                                }
                                Case (0x02)
                                {
                                    If (CondRefOf (\_SB.PC00.PEG2.PON))
                                    {
                                        ^^PEG2.PON ()
                                    }
                                }
                                Case (0x03)
                                {
                                    If (CondRefOf (\_SB.PC00.PEG3.PON))
                                    {
                                        ^^PEG3.PON ()
                                    }
                                }

                            }
                        }

                    }
                }

                Method (VDOF, 2, Serialized)
                {
                    Switch (ToInteger (Arg0))
                    {
                        Case (Zero)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Zero)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT0.SPOF))
                                    {
                                        ^^SAT0.PRT0.SPOF ()
                                    }
                                }
                                Case (One)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT1.SPOF))
                                    {
                                        ^^SAT0.PRT1.SPOF ()
                                    }
                                }
                                Case (0x02)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT2.SPOF))
                                    {
                                        ^^SAT0.PRT2.SPOF ()
                                    }
                                }
                                Case (0x03)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT3.SPOF))
                                    {
                                        ^^SAT0.PRT3.SPOF ()
                                    }
                                }
                                Case (0x04)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT4.SPOF))
                                    {
                                        ^^SAT0.PRT4.SPOF ()
                                    }
                                }
                                Case (0x05)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT5.SPOF))
                                    {
                                        ^^SAT0.PRT5.SPOF ()
                                    }
                                }
                                Case (0x06)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT6.SPOF))
                                    {
                                        ^^SAT0.PRT6.SPOF ()
                                    }
                                }
                                Case (0x07)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT7.SPOF))
                                    {
                                        ^^SAT0.PRT7.SPOF ()
                                    }
                                }

                            }
                        }
                        Case (One)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Zero)
                                {
                                    If (CondRefOf (\_SB.PC00.RP01.POFF))
                                    {
                                        ^^RP01.POFF ()
                                    }
                                }
                                Case (One)
                                {
                                    If (CondRefOf (\_SB.PC00.RP02.POFF))
                                    {
                                        ^^RP02.POFF ()
                                    }
                                }
                                Case (0x02)
                                {
                                    If (CondRefOf (\_SB.PC00.RP03.POFF))
                                    {
                                        ^^RP03.POFF ()
                                    }
                                }
                                Case (0x03)
                                {
                                    If (CondRefOf (\_SB.PC00.RP04.POFF))
                                    {
                                        ^^RP04.POFF ()
                                    }
                                }
                                Case (0x04)
                                {
                                    If (CondRefOf (\_SB.PC00.RP05.POFF))
                                    {
                                        ^^RP05.POFF ()
                                    }
                                }
                                Case (0x05)
                                {
                                    If (CondRefOf (\_SB.PC00.RP06.POFF))
                                    {
                                        ^^RP06.POFF ()
                                    }
                                }
                                Case (0x06)
                                {
                                    If (CondRefOf (\_SB.PC00.RP07.POFF))
                                    {
                                        ^^RP07.POFF ()
                                    }
                                }
                                Case (0x07)
                                {
                                    If (CondRefOf (\_SB.PC00.RP08.POFF))
                                    {
                                        ^^RP08.POFF ()
                                    }
                                }
                                Case (0x08)
                                {
                                    If (CondRefOf (\_SB.PC00.RP09.POFF))
                                    {
                                        ^^RP09.POFF ()
                                    }
                                }
                                Case (0x09)
                                {
                                    If (CondRefOf (\_SB.PC00.RP10.POFF))
                                    {
                                        ^^RP10.POFF ()
                                    }
                                }
                                Case (0x0A)
                                {
                                    If (CondRefOf (\_SB.PC00.RP11.POFF))
                                    {
                                        ^^RP11.POFF ()
                                    }
                                }
                                Case (0x0B)
                                {
                                    If (CondRefOf (\_SB.PC00.RP12.POFF))
                                    {
                                        ^^RP12.POFF ()
                                    }
                                }
                                Case (0x0C)
                                {
                                    If (CondRefOf (\_SB.PC00.RP13.POFF))
                                    {
                                        ^^RP13.POFF ()
                                    }
                                }
                                Case (0x0D)
                                {
                                    If (CondRefOf (\_SB.PC00.RP14.POFF))
                                    {
                                        ^^RP14.POFF ()
                                    }
                                }
                                Case (0x0E)
                                {
                                    If (CondRefOf (\_SB.PC00.RP15.POFF))
                                    {
                                        ^^RP15.POFF ()
                                    }
                                }
                                Case (0x0F)
                                {
                                    If (CondRefOf (\_SB.PC00.RP16.POFF))
                                    {
                                        ^^RP16.POFF ()
                                    }
                                }
                                Case (0x10)
                                {
                                    If (CondRefOf (\_SB.PC00.RP17.POFF))
                                    {
                                        ^^RP17.POFF ()
                                    }
                                }
                                Case (0x11)
                                {
                                    If (CondRefOf (\_SB.PC00.RP18.POFF))
                                    {
                                        ^^RP18.POFF ()
                                    }
                                }
                                Case (0x12)
                                {
                                    If (CondRefOf (\_SB.PC00.RP19.POFF))
                                    {
                                        ^^RP19.POFF ()
                                    }
                                }
                                Case (0x13)
                                {
                                    If (CondRefOf (\_SB.PC00.RP20.POFF))
                                    {
                                        ^^RP20.POFF ()
                                    }
                                }
                                Case (0x14)
                                {
                                    If (CondRefOf (\_SB.PC00.RP21.POFF))
                                    {
                                        ^^RP21.POFF ()
                                    }
                                }
                                Case (0x15)
                                {
                                    If (CondRefOf (\_SB.PC00.RP22.POFF))
                                    {
                                        ^^RP22.POFF ()
                                    }
                                }
                                Case (0x16)
                                {
                                    If (CondRefOf (\_SB.PC00.RP23.POFF))
                                    {
                                        ^^RP23.POFF ()
                                    }
                                }
                                Case (0x17)
                                {
                                    If (CondRefOf (\_SB.PC00.RP24.POFF))
                                    {
                                        ^^RP24.POFF ()
                                    }
                                }

                            }
                        }
                        Case (0x02)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Zero)
                                {
                                    If (CondRefOf (\_SB.PC00.PEG0.POFF))
                                    {
                                        ^^PEG0.POFF ()
                                    }
                                }
                                Case (One)
                                {
                                    If (CondRefOf (\_SB.PC00.PEG1.POFF))
                                    {
                                        ^^PEG1.POFF ()
                                    }
                                }
                                Case (0x02)
                                {
                                    If (CondRefOf (\_SB.PC00.PEG2.POFF))
                                    {
                                        ^^PEG2.POFF ()
                                    }
                                }
                                Case (0x03)
                                {
                                    If (CondRefOf (\_SB.PC00.PEG3.POFF))
                                    {
                                        ^^PEG3.POFF ()
                                    }
                                }

                            }
                        }

                    }
                }
            }
        }
    }

    Scope (_SB.PC00.I2C2)
    {
        Device (SPKR)
        {
            Name (_HID, "CLSA0101")  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0040, ControllerInitiated, 0x000F4240,
                        AddressingMode7Bit, "\\_SB.PC00.I2C2",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                    I2cSerialBusV2 (0x0041, ControllerInitiated, 0x000F4240,
                        AddressingMode7Bit, "\\_SB.PC00.I2C2",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                    GpioIo (Exclusive, PullDown, 0x0000, 0x0000, IoRestrictionOutputOnly,
                        "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0000
                        }
                    GpioIo (Shared, PullUp, 0x0064, 0x0000, IoRestrictionInputOnly,
                        "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0000
                        }
                    GpioIo (Exclusive, PullUp, 0x0000, 0x0000, IoRestrictionInputOnly,
                        "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0000
                        }
                    GpioInt (Edge, ActiveBoth, Shared, PullUp, 0x0064,
                        "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0000
                        }
                })
                CreateWordField (RBUF, 0x59, RSTN)
                CreateWordField (RBUF, 0x7C, IN1N)
                CreateWordField (RBUF, 0x9F, SIDN)
                CreateWordField (RBUF, 0xC2, IN2N)
                RSTN = 0xE5
                IN1N = 0xE6
                SIDN = 0x0D
                IN2N = 0xE6
                Return (RBUF) /* \_SB_.PC00.I2C2.SPKR._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MCSK == 0x04))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
            }
        }
    }

    If (((PSWP != Zero) && (RPNB == 0x05)))
    {
        Scope (_SB.PC00.RP05)
        {
            Method (PPRW, 0, NotSerialized)
            {
                Return (GPRW (GGPE (PSWP), 0x04))
            }
        }
    }

    If ((((PSW2 != Zero) && (RPN2 == 0x08)) || (
        (WLWK != Zero) && (WLRP == 0x08))))
    {
        Scope (_SB.PC00.RP08)
        {
            Method (PPRW, 0, NotSerialized)
            {
                If (((PSW2 != Zero) && (RPN2 == 0x08)))
                {
                    Return (GPRW (GGPE (PSW2), 0x04))
                }

                If (((WLWK != Zero) && (WLRP == 0x08)))
                {
                    Return (GPRW (GGPE (WLWK), 0x04))
                }
            }
        }
    }

    If (((WLWK != Zero) && (WLRP == 0x03)))
    {
        Scope (_SB.PC00.RP03)
        {
            Method (PPRW, 0, NotSerialized)
            {
                Return (GPRW (GGPE (WLWK), 0x04))
            }
        }
    }

    If (((WWKP != Zero) && (WWRP == 0x04)))
    {
        Scope (_SB.PC00.RP04)
        {
            Method (PPRW, 0, NotSerialized)
            {
                Return (GPRW (GGPE (WWKP), 0x04))
            }
        }
    }

    If (((WWKP != Zero) && (WWRP == 0x09)))
    {
        Scope (_SB.PC00.RP09)
        {
            Method (PPRW, 0, NotSerialized)
            {
                Return (GPRW (GGPE (WWKP), 0x04))
            }
        }
    }

    Name (_S0, Package (0x04)  // _S0_: S0 System State
    {
        Zero, 
        Zero, 
        Zero, 
        Zero
    })
    If (SS1)
    {
        Name (_S1, Package (0x04)  // _S1_: S1 System State
        {
            One, 
            Zero, 
            Zero, 
            Zero
        })
    }

    If (SS3)
    {
        Name (_S3, Package (0x04)  // _S3_: S3 System State
        {
            0x05, 
            Zero, 
            Zero, 
            Zero
        })
    }

    If (SS4)
    {
        Name (_S4, Package (0x04)  // _S4_: S4 System State
        {
            0x06, 
            Zero, 
            Zero, 
            Zero
        })
    }

    Name (_S5, Package (0x04)  // _S5_: S5 System State
    {
        0x07, 
        Zero, 
        Zero, 
        Zero
    })
    Method (PTS, 1, NotSerialized)
    {
        If (Arg0) {}
    }

    Method (WAK, 1, NotSerialized)
    {
    }
}



FACP
----
[000h 0000   4]                    Signature : "FACP"    [Fixed ACPI Description Table (FADT)]
[004h 0004   4]                 Table Length : 00000114
[008h 0008   1]                     Revision : 06
[009h 0009   1]                     Checksum : 3A
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "CB-01   "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "ACPI"
[020h 0032   4]        Asl Compiler Revision : 00040000

[024h 0036   4]                 FACS Address : 45A62000
[028h 0040   4]                 DSDT Address : 45B7B000
[02Ch 0044   1]                        Model : 00
[02Dh 0045   1]                   PM Profile : 02 [Mobile]
[02Eh 0046   2]                SCI Interrupt : 0009
[030h 0048   4]             SMI Command Port : 000000B2
[034h 0052   1]            ACPI Enable Value : A0
[035h 0053   1]           ACPI Disable Value : A1
[036h 0054   1]               S4BIOS Command : 00
[037h 0055   1]              P-State Control : 00
[038h 0056   4]     PM1A Event Block Address : 00000000
[03Ch 0060   4]     PM1B Event Block Address : 00000000
[040h 0064   4]   PM1A Control Block Address : 00000000
[044h 0068   4]   PM1B Control Block Address : 00000000
[048h 0072   4]    PM2 Control Block Address : 00000000
[04Ch 0076   4]       PM Timer Block Address : 00001808
[050h 0080   4]           GPE0 Block Address : 00001860
[054h 0084   4]           GPE1 Block Address : 00000000
[058h 0088   1]       PM1 Event Block Length : 04
[059h 0089   1]     PM1 Control Block Length : 02
[05Ah 0090   1]     PM2 Control Block Length : 01
[05Bh 0091   1]        PM Timer Block Length : 04
[05Ch 0092   1]            GPE0 Block Length : 20
[05Dh 0093   1]            GPE1 Block Length : 00
[05Eh 0094   1]             GPE1 Base Offset : 10
[05Fh 0095   1]                 _CST Support : 00
[060h 0096   2]                   C2 Latency : 0065
[062h 0098   2]                   C3 Latency : 03E9
[064h 0100   2]               CPU Cache Size : 0000
[066h 0102   2]           Cache Flush Stride : 0000
[068h 0104   1]            Duty Cycle Offset : 01
[069h 0105   1]             Duty Cycle Width : 03
[06Ah 0106   1]          RTC Day Alarm Index : 0D
[06Bh 0107   1]        RTC Month Alarm Index : 00
[06Ch 0108   1]            RTC Century Index : 32
[06Dh 0109   2]   Boot Flags (decoded below) : 0013
               Legacy Devices Supported (V2) : 1
            8042 Present on ports 60/64 (V2) : 1
                        VGA Not Present (V4) : 0
                      MSI Not Supported (V4) : 0
                PCIe ASPM Not Supported (V4) : 1
                   CMOS RTC Not Present (V5) : 0
[06Fh 0111   1]                     Reserved : 00
[070h 0112   4]        Flags (decoded below) : 0000C6E5
      WBINVD instruction is operational (V1) : 1
              WBINVD flushes all caches (V1) : 0
                    All CPUs support C1 (V1) : 1
                  C2 works on MP system (V1) : 0
            Control Method Power Button (V1) : 0
            Control Method Sleep Button (V1) : 1
        RTC wake not in fixed reg space (V1) : 1
            RTC can wake system from S4 (V1) : 1
                        32-bit PM Timer (V1) : 0
                      Docking Supported (V1) : 1
               Reset Register Supported (V2) : 1
                            Sealed Case (V3) : 0
                    Headless - No Video (V3) : 0
        Use native instr after SLP_TYPx (V3) : 0
              PCIEXP_WAK Bits Supported (V4) : 1
                     Use Platform Timer (V4) : 1
               RTC_STS valid on S4 wake (V4) : 0
                Remote Power-on capable (V4) : 0
                 Use APIC Cluster Model (V4) : 0
     Use APIC Physical Destination Mode (V4) : 0
                       Hardware Reduced (V5) : 0
                      Low Power S0 Idle (V5) : 0

[074h 0116  12]               Reset Register : [Generic Address Structure]
[074h 0116   1]                     Space ID : 01 [SystemIO]
[075h 0117   1]                    Bit Width : 08
[076h 0118   1]                   Bit Offset : 00
[077h 0119   1]         Encoded Access Width : 01 [Byte Access:8]
[078h 0120   8]                      Address : 00000000000000B2

[080h 0128   1]         Value to cause reset : FB
[081h 0129   2]    ARM Flags (decoded below) : 0000
                              PSCI Compliant : 0
                       Must use HVC for PSCI : 0

[083h 0131   1]          FADT Minor Revision : 01
[084h 0132   8]                 FACS Address : 0000000000000000
[08Ch 0140   8]                 DSDT Address : 0000000045B7B000
[094h 0148  12]             PM1A Event Block : [Generic Address Structure]
[094h 0148   1]                     Space ID : 01 [SystemIO]
[095h 0149   1]                    Bit Width : 20
[096h 0150   1]                   Bit Offset : 00
[097h 0151   1]         Encoded Access Width : 02 [Word Access:16]
[098h 0152   8]                      Address : 0000000000001800

[0A0h 0160  12]             PM1B Event Block : [Generic Address Structure]
[0A0h 0160   1]                     Space ID : 00 [SystemMemory]
[0A1h 0161   1]                    Bit Width : 00
[0A2h 0162   1]                   Bit Offset : 00
[0A3h 0163   1]         Encoded Access Width : 02 [Word Access:16]
[0A4h 0164   8]                      Address : 0000000000000000

[0ACh 0172  12]           PM1A Control Block : [Generic Address Structure]
[0ACh 0172   1]                     Space ID : 01 [SystemIO]
[0ADh 0173   1]                    Bit Width : 10
[0AEh 0174   1]                   Bit Offset : 00
[0AFh 0175   1]         Encoded Access Width : 02 [Word Access:16]
[0B0h 0176   8]                      Address : 0000000000001804

[0B8h 0184  12]           PM1B Control Block : [Generic Address Structure]
[0B8h 0184   1]                     Space ID : 00 [SystemMemory]
[0B9h 0185   1]                    Bit Width : 00
[0BAh 0186   1]                   Bit Offset : 00
[0BBh 0187   1]         Encoded Access Width : 02 [Word Access:16]
[0BCh 0188   8]                      Address : 0000000000000000

[0C4h 0196  12]            PM2 Control Block : [Generic Address Structure]
[0C4h 0196   1]                     Space ID : 01 [SystemIO]
[0C5h 0197   1]                    Bit Width : 08
[0C6h 0198   1]                   Bit Offset : 00
[0C7h 0199   1]         Encoded Access Width : 01 [Byte Access:8]
[0C8h 0200   8]                      Address : 0000000000001850

[0D0h 0208  12]               PM Timer Block : [Generic Address Structure]
[0D0h 0208   1]                     Space ID : 01 [SystemIO]
[0D1h 0209   1]                    Bit Width : 20
[0D2h 0210   1]                   Bit Offset : 00
[0D3h 0211   1]         Encoded Access Width : 03 [DWord Access:32]
[0D4h 0212   8]                      Address : 0000000000001808

[0DCh 0220  12]                   GPE0 Block : [Generic Address Structure]
[0DCh 0220   1]                     Space ID : 01 [SystemIO]
[0DDh 0221   1]                    Bit Width : 00
[0DEh 0222   1]                   Bit Offset : 00
[0DFh 0223   1]         Encoded Access Width : 01 [Byte Access:8]
[0E0h 0224   8]                      Address : 0000000000001860

[0E8h 0232  12]                   GPE1 Block : [Generic Address Structure]
[0E8h 0232   1]                     Space ID : 00 [SystemMemory]
[0E9h 0233   1]                    Bit Width : 00
[0EAh 0234   1]                   Bit Offset : 00
[0EBh 0235   1]         Encoded Access Width : 01 [Byte Access:8]
[0ECh 0236   8]                      Address : 0000000000000000


[0F4h 0244  12]       Sleep Control Register : [Generic Address Structure]
[0F4h 0244   1]                     Space ID : 01 [SystemIO]
[0F5h 0245   1]                    Bit Width : 08
[0F6h 0246   1]                   Bit Offset : 00
[0F7h 0247   1]         Encoded Access Width : 03 [DWord Access:32]
[0F8h 0248   8]                      Address : 0000000000001804

[100h 0256  12]        Sleep Status Register : [Generic Address Structure]
[100h 0256   1]                     Space ID : 01 [SystemIO]
[101h 0257   1]                    Bit Width : 08
[102h 0258   1]                   Bit Offset : 00
[103h 0259   1]         Encoded Access Width : 03 [DWord Access:32]
[104h 0260   8]                      Address : 0000000000001800

[10Ch 0268   8]                Hypervisor ID : 0000000000000000

Raw Table Data: Length 276 (0x114)

    0000: 46 41 43 50 14 01 00 00 06 3A 4C 45 4E 4F 56 4F  // FACP.....:LENOVO
    0010: 43 42 2D 30 31 20 20 20 01 00 00 00 41 43 50 49  // CB-01   ....ACPI
    0020: 00 00 04 00 00 20 A6 45 00 B0 B7 45 00 02 09 00  // ..... .E...E....
    0030: B2 00 00 00 A0 A1 00 00 00 00 00 00 00 00 00 00  // ................
    0040: 00 00 00 00 00 00 00 00 00 00 00 00 08 18 00 00  // ................
    0050: 60 18 00 00 00 00 00 00 04 02 01 04 20 00 10 00  // `........... ...
    0060: 65 00 E9 03 00 00 00 00 01 03 0D 00 32 13 00 00  // e...........2...
    0070: E5 C6 00 00 01 08 00 01 B2 00 00 00 00 00 00 00  // ................
    0080: FB 00 00 01 00 00 00 00 00 00 00 00 00 B0 B7 45  // ...............E
    0090: 00 00 00 00 01 20 00 02 00 18 00 00 00 00 00 00  // ..... ..........
    00A0: 00 00 00 02 00 00 00 00 00 00 00 00 01 10 00 02  // ................
    00B0: 04 18 00 00 00 00 00 00 00 00 00 02 00 00 00 00  // ................
    00C0: 00 00 00 00 01 08 00 01 50 18 00 00 00 00 00 00  // ........P.......
    00D0: 01 20 00 03 08 18 00 00 00 00 00 00 01 00 00 01  // . ..............
    00E0: 60 18 00 00 00 00 00 00 00 00 00 01 00 00 00 00  // `...............
    00F0: 00 00 00 00 01 08 00 03 04 18 00 00 00 00 00 00  // ................
    0100: 01 08 00 03 00 18 00 00 00 00 00 00 00 00 00 00  // ................
    0110: 00 00 00 00                                      // ....


FACS
----
[000h 0000   4]                    Signature : "FACS"
[004h 0004   4]                       Length : 00000040
[008h 0008   4]           Hardware Signature : F149FF68
[00Ch 0012   4]    32 Firmware Waking Vector : 00000000
[010h 0016   4]                  Global Lock : 00000000
[014h 0020   4]        Flags (decoded below) : 00000000
                      S4BIOS Support Present : 0
                  64-bit Wake Supported (V2) : 0
[018h 0024   8]    64 Firmware Waking Vector : 0000000000000000
[020h 0032   1]                      Version : 02
[021h 0033   3]                     Reserved : 000000
[024h 0036   4]    OspmFlags (decoded below) : 00000000
               64-bit Wake Env Required (V2) : 0

Raw Table Data: Length 64 (0x40)

    0000: 46 41 43 53 40 00 00 00 68 FF 49 F1 00 00 00 00  // FACS@...h.I.....
    0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0020: 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


FPDT
----
[000h 0000   4]                    Signature : "FPDT"    [Firmware Performance Data Table]
[004h 0004   4]                 Table Length : 00000044
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 2B
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "CB-01   "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "ACPI"
[020h 0032   4]        Asl Compiler Revision : 00040000


[024h 0036   2]                Subtable Type : 0000
[026h 0038   1]                       Length : 10
[027h 0039   1]                     Revision : 01
[028h 0040   4]                     Reserved : 00000000
[02Ch 0044   8]     FPDT Boot Record Address : 0000000044300000

[034h 0052   2]                Subtable Type : 0001
[036h 0054   1]                       Length : 10
[037h 0055   1]                     Revision : 01
[038h 0056   4]                     Reserved : 00000000
[03Ch 0060   8]          S3PT Record Address : 00000000442FF000

Raw Table Data: Length 68 (0x44)

    0000: 46 50 44 54 44 00 00 00 01 2B 4C 45 4E 4F 56 4F  // FPDTD....+LENOVO
    0010: 43 42 2D 30 31 20 20 20 01 00 00 00 41 43 50 49  // CB-01   ....ACPI
    0020: 00 00 04 00 00 00 10 01 00 00 00 00 00 00 30 44  // ..............0D
    0030: 00 00 00 00 01 00 10 01 00 00 00 00 00 F0 2F 44  // ............../D
    0040: 00 00 00 00                                      // ....


HPET
----
[000h 0000   4]                    Signature : "HPET"    [High Precision Event Timer Table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : F7
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "CB-01   "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "ACPI"
[020h 0032   4]        Asl Compiler Revision : 00040000

[024h 0036   4]            Hardware Block ID : 8086A201

[028h 0040  12]         Timer Block Register : [Generic Address Structure]
[028h 0040   1]                     Space ID : 00 [SystemMemory]
[029h 0041   1]                    Bit Width : 40
[02Ah 0042   1]                   Bit Offset : 00
[02Bh 0043   1]         Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044   8]                      Address : 00000000FED00000

[034h 0052   1]              Sequence Number : 00
[035h 0053   2]          Minimum Clock Ticks : 0080
[037h 0055   1]        Flags (decoded below) : 00
                             4K Page Protect : 0
                            64K Page Protect : 0

Raw Table Data: Length 56 (0x38)

    0000: 48 50 45 54 38 00 00 00 01 F7 4C 45 4E 4F 56 4F  // HPET8.....LENOVO
    0010: 43 42 2D 30 31 20 20 20 01 00 00 00 41 43 50 49  // CB-01   ....ACPI
    0020: 00 00 04 00 01 A2 86 80 00 40 00 00 00 00 D0 FE  // .........@......
    0030: 00 00 00 00 00 80 00 00                          // ........


LPIT
----
[000h 0000   4]                    Signature : "LPIT"    [Low Power Idle Table]
[004h 0004   4]                 Table Length : 000000CC
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 54
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "CB-01   "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "ACPI"
[020h 0032   4]        Asl Compiler Revision : 00040000

[024h 0036   4]                Subtable Type : 00000000 [Native C-state Idle Structure]
[028h 0040   4]                       Length : 00000038
[02Ch 0044   2]                    Unique ID : 0000
[02Eh 0046   2]                     Reserved : 0000
[030h 0048   4]        Flags (decoded below) : 00000000
                              State Disabled : 0
                                  No Counter : 0

[034h 0052  12]                Entry Trigger : [Generic Address Structure]
[034h 0052   1]                     Space ID : 7F [FunctionalFixedHW]
[035h 0053   1]                    Bit Width : 01
[036h 0054   1]                   Bit Offset : 02
[037h 0055   1]         Encoded Access Width : 00 [Undefined/Legacy]
[038h 0056   8]                      Address : 0000000000000060

[040h 0064   4]                    Residency : 00007530
[044h 0068   4]                      Latency : 00000BB8
[048h 0072  12]            Residency Counter : [Generic Address Structure]
[048h 0072   1]                     Space ID : 7F [FunctionalFixedHW]
[049h 0073   1]                    Bit Width : 40
[04Ah 0074   1]                   Bit Offset : 00
[04Bh 0075   1]         Encoded Access Width : 00 [Undefined/Legacy]
[04Ch 0076   8]                      Address : 0000000000000632

[054h 0084   8]            Counter Frequency : 0000000000000000

[05Ch 0092   4]                Subtable Type : 00000000 [Native C-state Idle Structure]
[060h 0096   4]                       Length : 00000038
[064h 0100   2]                    Unique ID : 0001
[066h 0102   2]                     Reserved : 0000
[068h 0104   4]        Flags (decoded below) : 00000000
                              State Disabled : 0
                                  No Counter : 0

[06Ch 0108  12]                Entry Trigger : [Generic Address Structure]
[06Ch 0108   1]                     Space ID : 7F [FunctionalFixedHW]
[06Dh 0109   1]                    Bit Width : 01
[06Eh 0110   1]                   Bit Offset : 02
[06Fh 0111   1]         Encoded Access Width : 00 [Undefined/Legacy]
[070h 0112   8]                      Address : 0000000000000060

[078h 0120   4]                    Residency : 00007530
[07Ch 0124   4]                      Latency : 00000BB8
[080h 0128  12]            Residency Counter : [Generic Address Structure]
[080h 0128   1]                     Space ID : 00 [SystemMemory]
[081h 0129   1]                    Bit Width : 20
[082h 0130   1]                   Bit Offset : 00
[083h 0131   1]         Encoded Access Width : 03 [DWord Access:32]
[084h 0132   8]                      Address : 00000000FE00193C

[08Ch 0140   8]            Counter Frequency : 0000000000002005

[094h 0148   4]                Subtable Type : 00000000 [Native C-state Idle Structure]
[098h 0152   4]                       Length : 00000038
[09Ch 0156   2]                    Unique ID : 0002
[09Eh 0158   2]                     Reserved : 0000
[0A0h 0160   4]        Flags (decoded below) : 00000001
                              State Disabled : 1
                                  No Counter : 0

[0A4h 0164  12]                Entry Trigger : [Generic Address Structure]
[0A4h 0164   1]                     Space ID : 7F [FunctionalFixedHW]
[0A5h 0165   1]                    Bit Width : 01
[0A6h 0166   1]                   Bit Offset : 02
[0A7h 0167   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0A8h 0168   8]                      Address : 0000000000000060

[0B0h 0176   4]                    Residency : 00007530
[0B4h 0180   4]                      Latency : 00000BB8
[0B8h 0184  12]            Residency Counter : [Generic Address Structure]
[0B8h 0184   1]                     Space ID : 00 [SystemMemory]
[0B9h 0185   1]                    Bit Width : 20
[0BAh 0186   1]                   Bit Offset : 00
[0BBh 0187   1]         Encoded Access Width : 03 [DWord Access:32]
[0BCh 0188   8]                      Address : 00000000000000FF

[0C4h 0196   8]            Counter Frequency : 0000000000000000


Raw Table Data: Length 204 (0xCC)

    0000: 4C 50 49 54 CC 00 00 00 01 54 4C 45 4E 4F 56 4F  // LPIT.....TLENOVO
    0010: 43 42 2D 30 31 20 20 20 01 00 00 00 41 43 50 49  // CB-01   ....ACPI
    0020: 00 00 04 00 00 00 00 00 38 00 00 00 00 00 00 00  // ........8.......
    0030: 00 00 00 00 7F 01 02 00 60 00 00 00 00 00 00 00  // ........`.......
    0040: 30 75 00 00 B8 0B 00 00 7F 40 00 00 32 06 00 00  // 0u.......@..2...
    0050: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0060: 38 00 00 00 01 00 00 00 00 00 00 00 7F 01 02 00  // 8...............
    0070: 60 00 00 00 00 00 00 00 30 75 00 00 B8 0B 00 00  // `.......0u......
    0080: 00 20 00 03 3C 19 00 FE 00 00 00 00 05 20 00 00  // . ..<........ ..
    0090: 00 00 00 00 00 00 00 00 38 00 00 00 02 00 00 00  // ........8.......
    00A0: 01 00 00 00 7F 01 02 00 60 00 00 00 00 00 00 00  // ........`.......
    00B0: 30 75 00 00 B8 0B 00 00 00 20 00 03 FF 00 00 00  // 0u....... ......
    00C0: 00 00 00 00 00 00 00 00 00 00 00 00              // ............


MCFG
----
[000h 0000   4]                    Signature : "MCFG"    [Memory Mapped Configuration Table]
[004h 0004   4]                 Table Length : 0000003C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 7F
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "CB-01   "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "ACPI"
[020h 0032   4]        Asl Compiler Revision : 00040000

[024h 0036   8]                     Reserved : 0000000000000000

[02Ch 0044   8]                 Base Address : 00000000C0000000
[034h 0052   2]         Segment Group Number : 0000
[036h 0054   1]             Start Bus Number : 00
[037h 0055   1]               End Bus Number : FF
[038h 0056   4]                     Reserved : 00000000

Raw Table Data: Length 60 (0x3C)

    0000: 4D 43 46 47 3C 00 00 00 01 7F 4C 45 4E 4F 56 4F  // MCFG<.....LENOVO
    0010: 43 42 2D 30 31 20 20 20 01 00 00 00 41 43 50 49  // CB-01   ....ACPI
    0020: 00 00 04 00 00 00 00 00 00 00 00 00 00 00 00 C0  // ................
    0030: 00 00 00 00 00 00 00 FF 00 00 00 00              // ............


MSDM
----
[000h 0000   4]                    Signature : "MSDM"    [Microsoft Data Management Table]
[004h 0004   4]                 Table Length : 00000055
[008h 0008   1]                     Revision : 03
[009h 0009   1]                     Checksum : 8E
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "CB-01   "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "ACPI"
[020h 0032   4]        Asl Compiler Revision : 00040000

[024h 0036  49] Software Licensing Structure : \
    45 45 53 54 00 00 00 00 61 0A 00 00 00 00 00 00 \
    E0 AC FF 20 7C 7F 00 00 E0 AC FF 20 7C 7F 00 00 \
    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \
    00 

Raw Table Data: Length 85 (0x55)

    0000: 4D 53 44 4D 55 00 00 00 03 8E 4C 45 4E 4F 56 4F  // MSDMU.....LENOVO
    0010: 43 42 2D 30 31 20 20 20 01 00 00 00 41 43 50 49  // CB-01   ....ACPI
    0020: 00 00 04 00 01 00 00 00 00 00 00 00 01 00 00 00  // ................
    0030: 00 00 00 00 1D 00 00 00 4E 4D 38 38 43 2D 4D 36  // ........NM88C-M6
    0040: 50 58 48 2D 47 42 33 46 57 2D 4B 42 4B 4D 50 2D  // PXH-GB3FW-KBKMP-
    0050: 32 37 4A 34 38                                   // 27J48


NHLT
----
[000h 0000   4]                    Signature : "NHLT"    
[004h 0004   4]                 Table Length : 0000002D
[008h 0008   1]                     Revision : 00
[009h 0009   1]                     Checksum : F9
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "CB-01   "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "ACPI"
[020h 0032   4]        Asl Compiler Revision : 00040000


**** Unknown ACPI table signature [NHLT]


Raw Table Data: Length 45 (0x2D)

    0000: 4E 48 4C 54 2D 00 00 00 00 F9 4C 45 4E 4F 56 4F  // NHLT-.....LENOVO
    0010: 43 42 2D 30 31 20 20 20 01 00 00 00 41 43 50 49  // CB-01   ....ACPI
    0020: 00 00 04 00 00 04 00 00 00 DE AD BE EF           // .............


PTDT
----
[000h 0000   4]                    Signature : "PTDT"    
[004h 0004   4]                 Table Length : 00000CFE
[008h 0008   1]                     Revision : 00
[009h 0009   1]                     Checksum : 3B
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "CB-01   "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "ACPI"
[020h 0032   4]        Asl Compiler Revision : 00040000


**** Unknown ACPI table signature [PTDT]


Raw Table Data: Length 3326 (0xCFE)

    0000: 50 54 44 54 FE 0C 00 00 00 3B 4C 45 4E 4F 56 4F  // PTDT.....;LENOVO
    0010: 43 42 2D 30 31 20 20 20 01 00 00 00 41 43 50 49  // CB-01   ....ACPI
    0020: 00 00 04 00 00 00 56 00 01 00 00 00 50 00 4B 00  // ......V.....P.K.
    0030: 0A 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0040: 00 00 00 00 FD 7C 09 27 E5 46 39 4E B8 E4 33 E4  // .....|.'.F9N..3.
    0050: 39 A1 3E AF 46 00 53 00 50 00 20 00 42 00 69 00  // 9.>.F.S.P. .B.i.
    0060: 6E 00 61 00 72 00 79 00 20 00 56 00 65 00 72 00  // n.a.r.y. .V.e.r.
    0070: 73 00 69 00 6F 00 6E 00 00 00 00 00 48 00 01 00  // s.i.o.n.....H...
    0080: 00 00 61 10 00 17 00 00 00 00 00 00 00 00 00 00  // ..a.............
    0090: 00 00 00 00 00 00 00 00 00 00 6E 97 23 E8 BA 63  // ..........n.#..c
    00A0: 14 41 B6 4B 81 12 72 8D 4E 03 47 00 4F 00 50 00  // .A.K..r.N.G.O.P.
    00B0: 20 00 56 00 65 00 72 00 73 00 69 00 6F 00 6E 00  //  .V.e.r.s.i.o.n.
    00C0: 00 00 00 00 62 00 01 00 00 00 20 00 26 00 08 00  // ....b..... .&...
    00D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00E0: 00 00 3E A6 C1 64 2D BA DE 41 96 55 2F 70 FE 61  // ..>..d-..A.U/p.a
    00F0: 8F 00 52 00 65 00 66 00 65 00 72 00 65 00 6E 00  // ..R.e.f.e.r.e.n.
    0100: 63 00 65 00 20 00 43 00 6F 00 64 00 65 00 20 00  // c.e. .C.o.d.e. .
    0110: 2D 00 20 00 49 00 43 00 4C 00 20 00 50 00 43 00  // -. .I.C.L. .P.C.
    0120: 48 00 00 00 00 00 50 00 01 00 00 00 FF FF FF FF  // H.....P.........
    0130: FF 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0140: 00 00 00 00 ED CB 99 21 3E 4D EF 45 85 D1 E1 BA  // .......!>M.E....
    0150: D5 A3 70 A9 50 00 43 00 48 00 2D 00 43 00 52 00  // ..p.P.C.H.-.C.R.
    0160: 49 00 44 00 20 00 53 00 74 00 61 00 74 00 75 00  // I.D. .S.t.a.t.u.
    0170: 73 00 00 00 00 00 60 00 01 00 00 00 11 00 FF FF  // s.....`.........
    0180: FF 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0190: 00 00 00 00 61 73 3F A8 FA FE D6 42 8B 32 95 F2  // ....as?....B.2..
    01A0: 98 9B F6 D4 50 00 43 00 48 00 2D 00 43 00 52 00  // ....P.C.H.-.C.R.
    01B0: 49 00 44 00 20 00 4F 00 72 00 69 00 67 00 69 00  // I.D. .O.r.i.g.i.
    01C0: 6E 00 61 00 6C 00 20 00 56 00 61 00 6C 00 75 00  // n.a.l. .V.a.l.u.
    01D0: 65 00 00 00 00 00 56 00 01 00 00 00 11 00 FF FF  // e.....V.........
    01E0: FF 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    01F0: 00 00 00 00 16 A7 4C D8 D3 7E 4B 4C B1 D5 2B 8C  // ......L..~KL..+.
    0200: 27 4A 19 F1 50 00 43 00 48 00 2D 00 43 00 52 00  // 'J..P.C.H.-.C.R.
    0210: 49 00 44 00 20 00 4E 00 65 00 77 00 20 00 56 00  // I.D. .N.e.w. .V.
    0220: 61 00 6C 00 75 00 65 00 00 00 00 00 56 00 01 00  // a.l.u.e.....V...
    0230: 00 00 00 00 00 46 02 00 00 00 00 00 00 00 00 00  // .....F..........
    0240: 00 00 00 00 00 00 00 00 00 00 BF 95 B0 E9 E2 DE  // ................
    0250: C9 4A 87 78 9E 41 FB 86 C4 36 4F 00 50 00 52 00  // .J.x.A...6O.P.R.
    0260: 4F 00 4D 00 20 00 2D 00 20 00 52 00 53 00 54 00  // O.M. .-. .R.S.T.
    0270: 20 00 2D 00 20 00 52 00 41 00 49 00 44 00 00 00  //  .-. .R.A.I.D...
    0280: 00 00 66 00 01 00 00 00 00 00 00 00 06 00 00 00  // ..f.............
    0290: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    02A0: 67 DD 85 E3 03 8F 72 48 AB 47 3C A1 14 BE 1E 52  // g.....rH.G<....R
    02B0: 49 00 43 00 4C 00 20 00 50 00 43 00 48 00 20 00  // I.C.L. .P.C.H. .
    02C0: 4C 00 50 00 20 00 41 00 78 00 20 00 48 00 73 00  // L.P. .A.x. .H.s.
    02D0: 69 00 6F 00 20 00 56 00 65 00 72 00 73 00 69 00  // i.o. .V.e.r.s.i.
    02E0: 6F 00 6E 00 00 00 00 00 66 00 01 00 00 00 00 00  // o.n.....f.......
    02F0: 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0300: 00 00 00 00 00 00 98 49 65 CD CA 2C C5 45 AD 5D  // .......Ie..,.E.]
    0310: 78 EB 6E F4 FE D0 49 00 43 00 4C 00 20 00 50 00  // x.n...I.C.L. .P.
    0320: 43 00 48 00 20 00 4C 00 50 00 20 00 42 00 78 00  // C.H. .L.P. .B.x.
    0330: 20 00 48 00 73 00 69 00 6F 00 20 00 56 00 65 00  //  .H.s.i.o. .V.e.
    0340: 72 00 73 00 69 00 6F 00 6E 00 00 00 00 00 66 00  // r.s.i.o.n.....f.
    0350: 01 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00  // ................
    0360: 00 00 00 00 00 00 00 00 00 00 00 00 C5 B4 01 37  // ...............7
    0370: 75 50 BB 4F 94 F1 4C A1 C4 B1 1A 7E 49 00 43 00  // uP.O..L....~I.C.
    0380: 4C 00 20 00 50 00 43 00 48 00 20 00 4C 00 50 00  // L. .P.C.H. .L.P.
    0390: 20 00 43 00 78 00 20 00 48 00 73 00 69 00 6F 00  //  .C.x. .H.s.i.o.
    03A0: 20 00 56 00 65 00 72 00 73 00 69 00 6F 00 6E 00  //  .V.e.r.s.i.o.n.
    03B0: 00 00 00 00 66 00 01 00 00 00 00 00 00 00 01 00  // ....f...........
    03C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    03D0: 00 00 08 9D 95 1E 39 B9 F7 40 BC DD 91 E9 1E 50  // ......9..@.....P
    03E0: 60 47 49 00 43 00 4C 00 20 00 50 00 43 00 48 00  // `GI.C.L. .P.C.H.
    03F0: 20 00 4C 00 50 00 20 00 44 00 78 00 20 00 48 00  //  .L.P. .D.x. .H.
    0400: 73 00 69 00 6F 00 20 00 56 00 65 00 72 00 73 00  // s.i.o. .V.e.r.s.
    0410: 69 00 6F 00 6E 00 00 00 00 00 64 00 01 00 00 00  // i.o.n.....d.....
    0420: 00 00 00 00 05 00 00 00 00 00 00 00 00 00 00 00  // ................
    0430: 00 00 00 00 00 00 00 00 CC A2 93 D2 DA F0 75 49  // ..............uI
    0440: AD F6 32 65 C5 9A 22 BD 49 00 43 00 4C 00 20 00  // ..2e..".I.C.L. .
    0450: 50 00 43 00 48 00 20 00 4E 00 20 00 41 00 78 00  // P.C.H. .N. .A.x.
    0460: 20 00 48 00 73 00 69 00 6F 00 20 00 56 00 65 00  //  .H.s.i.o. .V.e.
    0470: 72 00 73 00 69 00 6F 00 6E 00 00 00 00 00 64 00  // r.s.i.o.n.....d.
    0480: 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00  // ................
    0490: 00 00 00 00 00 00 00 00 00 00 00 00 74 23 BB 4A  // ............t#.J
    04A0: 7E 76 7A 41 A3 65 78 99 4B D0 F6 37 49 00 43 00  // ~vzA.ex.K..7I.C.
    04B0: 4C 00 20 00 50 00 43 00 48 00 20 00 4E 00 20 00  // L. .P.C.H. .N. .
    04C0: 42 00 78 00 20 00 48 00 73 00 69 00 6F 00 20 00  // B.x. .H.s.i.o. .
    04D0: 56 00 65 00 72 00 73 00 69 00 6F 00 6E 00 00 00  // V.e.r.s.i.o.n...
    04E0: 00 00 76 00 01 00 00 00 20 00 26 00 08 00 00 00  // ..v..... .&.....
    04F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0500: 9D AF D8 38 3D 0F 48 4E A3 6B FA FD 68 61 48 A0  // ...8=.HN.k..haH.
    0510: 52 00 65 00 66 00 65 00 72 00 65 00 6E 00 63 00  // R.e.f.e.r.e.n.c.
    0520: 65 00 20 00 43 00 6F 00 64 00 65 00 20 00 2D 00  // e. .C.o.d.e. .-.
    0530: 20 00 53 00 41 00 20 00 2D 00 20 00 53 00 79 00  //  .S.A. .-. .S.y.
    0540: 73 00 74 00 65 00 6D 00 20 00 41 00 67 00 65 00  // s.t.e.m. .A.g.e.
    0550: 6E 00 74 00 00 00 00 00 5A 00 01 00 00 00 01 00  // n.t.....Z.......
    0560: 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0570: 00 00 00 00 00 00 E6 6E 25 73 90 A9 13 4B 8A BA  // .......n%s...K..
    0580: 76 E2 2C 3E 99 3C 52 00 65 00 66 00 65 00 72 00  // v.,>.<R.e.f.e.r.
    0590: 65 00 6E 00 63 00 65 00 20 00 43 00 6F 00 64 00  // e.n.c.e. .C.o.d.
    05A0: 65 00 20 00 2D 00 20 00 4D 00 52 00 43 00 00 00  // e. .-. .M.R.C...
    05B0: 00 00 54 00 01 00 00 00 20 00 26 00 08 00 00 00  // ..T..... .&.....
    05C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    05D0: 12 5B 2B FA 24 31 DE 43 84 E6 C4 11 4E 88 1F 43  // .[+.$1.C....N..C
    05E0: 53 00 41 00 20 00 2D 00 20 00 50 00 43 00 49 00  // S.A. .-. .P.C.I.
    05F0: 65 00 20 00 56 00 65 00 72 00 73 00 69 00 6F 00  // e. .V.e.r.s.i.o.
    0600: 6E 00 00 00 00 00 4E 00 01 00 00 00 FF FF FF FF  // n.....N.........
    0610: FF 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0620: 00 00 00 00 E7 63 A4 47 6D 19 77 45 B5 36 3B 9A  // .....c.Gm.wE.6;.
    0630: 85 B7 38 4B 53 00 41 00 2D 00 43 00 52 00 49 00  // ..8KS.A.-.C.R.I.
    0640: 44 00 20 00 53 00 74 00 61 00 74 00 75 00 73 00  // D. .S.t.a.t.u.s.
    0650: 00 00 00 00 5E 00 01 00 00 00 05 00 00 00 00 00  // ....^...........
    0660: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0670: 00 00 21 E0 3C 3D 65 CE F5 A2 A2 F5 00 8B 2B BB  // ..!.<=e.......+.
    0680: 0C A2 53 00 41 00 2D 00 43 00 52 00 49 00 44 00  // ..S.A.-.C.R.I.D.
    0690: 20 00 4F 00 72 00 69 00 67 00 69 00 6E 00 61 00  //  .O.r.i.g.i.n.a.
    06A0: 6C 00 20 00 56 00 61 00 6C 00 75 00 65 00 00 00  // l. .V.a.l.u.e...
    06B0: 00 00 54 00 01 00 00 00 05 00 00 00 00 00 00 00  // ..T.............
    06C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    06D0: 3C FF A3 84 65 CE 8D 44 81 C4 1A 62 A8 A9 C3 6E  // <...e..D...b...n
    06E0: 53 00 41 00 2D 00 43 00 52 00 49 00 44 00 20 00  // S.A.-.C.R.I.D. .
    06F0: 4E 00 65 00 77 00 20 00 56 00 61 00 6C 00 75 00  // N.e.w. .V.a.l.u.
    0700: 65 00 00 00 00 00 4C 00 01 00 00 00 FF FF FF FF  // e.....L.........
    0710: FF 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0720: 00 00 00 00 3E 15 50 FA 27 66 14 47 92 20 B8 C7  // ....>.P.'f.G. ..
    0730: 1D AB 42 9A 4F 00 50 00 52 00 4F 00 4D 00 20 00  // ..B.O.P.R.O.M. .
    0740: 2D 00 20 00 56 00 42 00 49 00 4F 00 53 00 00 00  // -. .V.B.I.O.S...
    0750: 00 00 5A 00 01 00 00 00 20 00 26 00 08 00 00 00  // ..Z..... .&.....
    0760: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0770: B9 78 77 87 22 CF 6A 47 97 A1 27 53 0D 9A FE 42  // .xw.".jG..'S...B
    0780: 52 00 65 00 66 00 65 00 72 00 65 00 6E 00 63 00  // R.e.f.e.r.e.n.c.
    0790: 65 00 20 00 43 00 6F 00 64 00 65 00 20 00 2D 00  // e. .C.o.d.e. .-.
    07A0: 20 00 43 00 50 00 55 00 00 00 00 00 4C 00 01 00  //  .C.P.U.....L...
    07B0: 00 00 3C 00 00 00 00 00 00 00 00 00 00 00 00 00  // ..<.............
    07C0: 00 00 00 00 00 00 00 00 00 00 F3 FE 72 DA 2B 78  // ............r.+x
    07D0: 38 4C 85 40 2C 90 21 7C 16 73 75 00 43 00 6F 00  // 8L.@,.!|.su.C.o.
    07E0: 64 00 65 00 20 00 56 00 65 00 72 00 73 00 69 00  // d.e. .V.e.r.s.i.
    07F0: 6F 00 6E 00 00 00 00 00 50 00 01 00 00 00 FF FF  // o.n.....P.......
    0800: FF FF FF 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0810: 00 00 00 00 00 00 AC 3D 64 EC B9 AB 5F 46 83 A6  // .......=d..._F..
    0820: A8 57 E1 D0 3B A2 54 00 58 00 54 00 20 00 41 00  // .W..;.T.X.T. .A.
    0830: 43 00 4D 00 20 00 76 00 65 00 72 00 73 00 69 00  // C.M. .v.e.r.s.i.
    0840: 6F 00 6E 00 00 00 00 00 58 00 01 00 00 00 20 00  // o.n.....X..... .
    0850: 26 00 08 00 00 00 00 00 00 00 00 00 00 00 00 00  // &...............
    0860: 00 00 00 00 00 00 60 C4 58 68 BA 15 AB 4E B6 7C  // ......`.Xh...N.|
    0870: 00 53 FF CD ED 54 52 00 65 00 66 00 65 00 72 00  // .S...TR.e.f.e.r.
    0880: 65 00 6E 00 63 00 65 00 20 00 43 00 6F 00 64 00  // e.n.c.e. .C.o.d.
    0890: 65 00 20 00 2D 00 20 00 4D 00 45 00 00 00 00 00  // e. .-. .M.E.....
    08A0: 4A 00 01 00 00 00 FF FF FF FF FF 00 00 00 00 00  // J...............
    08B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 5D 2D  // ..............]-
    08C0: 9A D3 1E 17 A1 4D B8 4D F0 FC DE 7C C4 31 4D 00  // .....M.M...|.1M.
    08D0: 45 00 42 00 78 00 20 00 76 00 65 00 72 00 73 00  // E.B.x. .v.e.r.s.
    08E0: 69 00 6F 00 6E 00 00 00 00 00 58 00 01 00 00 00  // i.o.n.....X.....
    08F0: F0 06 1E 00 0F 00 00 00 00 00 00 00 00 00 00 00  // ................
    0900: 00 00 00 00 00 00 00 00 5D A2 2B A6 FC FF C6 4A  // ........].+....J
    0910: A9 0E 24 57 AC 0E 47 7E 4D 00 45 00 20 00 46 00  // ..$W..G~M.E. .F.
    0920: 69 00 72 00 6D 00 77 00 61 00 72 00 65 00 20 00  // i.r.m.w.a.r.e. .
    0930: 56 00 65 00 72 00 73 00 69 00 6F 00 6E 00 00 00  // V.e.r.s.i.o.n...
    0940: 00 00 50 00 01 00 00 00 FF FF FF FF FF 00 00 00  // ..P.............
    0950: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0960: D6 3F 8C 98 B2 92 A0 41 B5 C3 78 A5 CD 47 12 F7  // .?.....A..x..G..
    0970: 4C 00 61 00 6E 00 20 00 50 00 68 00 79 00 20 00  // L.a.n. .P.h.y. .
    0980: 56 00 65 00 72 00 73 00 69 00 6F 00 6E 00 00 00  // V.e.r.s.i.o.n...
    0990: 00 00 60 00 01 00 00 00 FF FF FF FF FF 00 00 00  // ..`.............
    09A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    09B0: EB A3 19 C5 2A 6D D0 47 AA D3 5E B0 06 B6 31 21  // ....*m.G..^...1!
    09C0: 53 00 65 00 6E 00 73 00 6F 00 72 00 20 00 46 00  // S.e.n.s.o.r. .F.
    09D0: 69 00 72 00 6D 00 77 00 61 00 72 00 65 00 20 00  // i.r.m.w.a.r.e. .
    09E0: 56 00 65 00 72 00 73 00 69 00 6F 00 6E 00 00 00  // V.e.r.s.i.o.n...
    09F0: 00 00 54 00 01 00 00 00 FF FF FF FF FF 00 00 00  // ..T.............
    0A00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A10: 7D 25 EC E1 D4 43 5B 41 95 03 9E C0 4A C5 61 58  // }%...C[A....J.aX
    0A20: 44 00 65 00 62 00 75 00 67 00 20 00 4D 00 6F 00  // D.e.b.u.g. .M.o.
    0A30: 64 00 65 00 20 00 53 00 74 00 61 00 74 00 75 00  // d.e. .S.t.a.t.u.
    0A40: 73 00 00 00 00 00 60 00 01 00 00 00 FF FF FF FF  // s.....`.........
    0A50: FF 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A60: 00 00 00 00 1F 12 23 E3 0C E6 D8 43 8E 0F 69 D9  // ......#....C..i.
    0A70: D7 DA B3 A0 50 00 65 00 72 00 66 00 6F 00 72 00  // ....P.e.r.f.o.r.
    0A80: 6D 00 61 00 6E 00 63 00 65 00 20 00 4D 00 6F 00  // m.a.n.c.e. .M.o.
    0A90: 64 00 65 00 20 00 53 00 74 00 61 00 74 00 75 00  // d.e. .S.t.a.t.u.
    0AA0: 73 00 00 00 00 00 4C 00 01 00 00 00 FF FF FF FF  // s.....L.........
    0AB0: FF 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0AC0: 00 00 00 00 EF DE 0C AB 27 0B 2B 4C B6 B7 9B 73  // ........'.+L...s
    0AD0: 40 43 E3 DE 44 00 65 00 62 00 75 00 67 00 20 00  // @C..D.e.b.u.g. .
    0AE0: 55 00 73 00 65 00 20 00 55 00 53 00 42 00 00 00  // U.s.e. .U.S.B...
    0AF0: 00 00 62 00 01 00 00 00 FF FF FF FF FF 00 00 00  // ..b.............
    0B00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B10: EA C4 11 BB 28 69 6C 4F B3 48 72 C0 CF C9 D0 4D  // ....(ilO.Hr....M
    0B20: 49 00 43 00 43 00 20 00 4F 00 76 00 65 00 72 00  // I.C.C. .O.v.e.r.
    0B30: 63 00 6C 00 6F 00 63 00 6B 00 69 00 6E 00 67 00  // c.l.o.c.k.i.n.g.
    0B40: 20 00 56 00 65 00 72 00 73 00 69 00 6F 00 6E 00  //  .V.e.r.s.i.o.n.
    0B50: 00 00 00 00 4C 00 01 00 00 00 00 00 00 2F 01 00  // ....L......../..
    0B60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B70: 00 00 89 55 28 03 37 1E 72 4B A5 F9 70 D1 AD AE  // ...U(.7.rK..p...
    0B80: 5D 34 45 00 43 00 20 00 46 00 57 00 20 00 56 00  // ]4E.C. .F.W. .V.
    0B90: 65 00 72 00 73 00 69 00 6F 00 6E 00 00 00 00 00  // e.r.s.i.o.n.....
    0BA0: 56 00 01 00 00 00 FF FF FF FF FF 00 00 00 00 00  // V...............
    0BB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 FF F3  // ................
    0BC0: 9A DD 6E E2 91 41 BE 2C 4B 9F 43 ED C9 D9 52 00  // ..n..A.,K.C...R.
    0BD0: 6F 00 79 00 61 00 6C 00 20 00 50 00 61 00 72 00  // o.y.a.l. .P.a.r.
    0BE0: 6B 00 20 00 56 00 65 00 72 00 73 00 69 00 6F 00  // k. .V.e.r.s.i.o.
    0BF0: 6E 00 00 00 00 00 5A 00 01 00 00 00 00 00 02 05  // n.....Z.........
    0C00: 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0C10: 00 00 00 00 E3 C8 81 33 2C B9 AC 4B B6 C6 43 90  // .......3,..K..C.
    0C20: 91 1E 93 4D 45 00 44 00 4B 00 49 00 49 00 20 00  // ...ME.D.K.I.I. .
    0C30: 53 00 74 00 61 00 62 00 6C 00 65 00 20 00 56 00  // S.t.a.b.l.e. .V.
    0C40: 65 00 72 00 73 00 69 00 6F 00 6E 00 00 00 00 00  // e.r.s.i.o.n.....
    0C50: 52 00 01 00 00 00 00 00 03 07 00 00 00 00 00 00  // R...............
    0C60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 B4 CD  // ................
    0C70: 7D 42 33 1C 2B 4F B7 36 F8 DA BE 9E 9A CD 50 00  // }B3.+O.6......P.
    0C80: 6C 00 61 00 74 00 66 00 6F 00 72 00 6D 00 20 00  // l.a.t.f.o.r.m. .
    0C90: 56 00 65 00 72 00 73 00 69 00 6F 00 6E 00 00 00  // V.e.r.s.i.o.n...
    0CA0: 00 00 5E 00 01 00 00 00 0F 00 00 02 00 00 00 00  // ..^.............
    0CB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0CC0: 86 BC B0 CC CD 1B 6F 47 AA BE E1 91 59 24 4B FD  // ......oG....Y$K.
    0CD0: 43 00 6C 00 69 00 65 00 6E 00 74 00 20 00 53 00  // C.l.i.e.n.t. .S.
    0CE0: 69 00 6C 00 69 00 63 00 6F 00 6E 00 20 00 56 00  // i.l.i.c.o.n. .V.
    0CF0: 65 00 72 00 73 00 69 00 6F 00 6E 00 00 00        // e.r.s.i.o.n...


SSDT1
-----
DefinitionBlock ("", "SSDT", 2, "LENOVO", "CB-01   ", 0x00000001)
{
    External (_SB_.PC00, DeviceObj)
    External (_SB_.PC00.GFX0, DeviceObj)
    External (_SB_.PC00.GFX0.HDOS, MethodObj)    // 0 Arguments
    External (_SB_.PC00.GFX0.HNOT, MethodObj)    // 1 Arguments
    External (_SB_.PC00.IMMC, MethodObj)    // 5 Arguments
    External (ASLB, UnknownObj)
    External (BRTL, UnknownObj)
    External (CPSC, UnknownObj)
    External (CSTE, UnknownObj)
    External (DID1, UnknownObj)
    External (DID2, UnknownObj)
    External (DID3, UnknownObj)
    External (DID4, UnknownObj)
    External (DID5, UnknownObj)
    External (DID6, UnknownObj)
    External (DID7, UnknownObj)
    External (DID8, UnknownObj)
    External (DID9, UnknownObj)
    External (DIDA, UnknownObj)
    External (DIDB, UnknownObj)
    External (DIDC, UnknownObj)
    External (DIDD, UnknownObj)
    External (DIDE, UnknownObj)
    External (DIDF, UnknownObj)
    External (DIDX, UnknownObj)
    External (DIDY, UnknownObj)
    External (DSEN, UnknownObj)
    External (ECON, IntObj)
    External (EDPV, UnknownObj)
    External (GUAM, MethodObj)    // 1 Arguments
    External (HGMD, UnknownObj)
    External (HVCO, UnknownObj)
    External (IBIA, UnknownObj)
    External (IBTT, UnknownObj)
    External (IDMS, UnknownObj)
    External (IF1E, UnknownObj)
    External (IPAT, UnknownObj)
    External (IPSC, UnknownObj)
    External (IPTP, UnknownObj)
    External (ISSC, UnknownObj)
    External (KSV0, UnknownObj)
    External (KSV1, UnknownObj)
    External (LIDS, UnknownObj)
    External (NDID, UnknownObj)
    External (NSTE, UnknownObj)
    External (NXD1, UnknownObj)
    External (NXD2, UnknownObj)
    External (NXD3, UnknownObj)
    External (NXD4, UnknownObj)
    External (NXD5, UnknownObj)
    External (NXD6, UnknownObj)
    External (NXD7, UnknownObj)
    External (NXD8, UnknownObj)
    External (NXDX, UnknownObj)
    External (NXDY, UnknownObj)
    External (OSYS, IntObj)
    External (PAVP, UnknownObj)
    External (PBCL, MethodObj)    // 0 Arguments
    External (PCON, UnknownObj)
    External (PDI0, UnknownObj)
    External (PDI1, UnknownObj)
    External (PDIW, UnknownObj)
    External (PLD1, MethodObj)    // 0 Arguments
    External (PLD2, MethodObj)    // 0 Arguments
    External (PNHM, IntObj)
    External (S0ID, UnknownObj)

    Scope (\_SB.PC00.GFX0)
    {
        Name (DPLD, Package (0x01)
        {
            Buffer (0x14)
            {
                /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x20, 0x03, 0xD0, 0x07,  // .... ...
                /* 0008 */  0x41, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x80, 0x01,  // A.......
                /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
            }
        })
        Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
        {
            DSEN = (Arg0 & 0x07)
            If (((Arg0 & 0x03) == Zero))
            {
                If (CondRefOf (HDOS))
                {
                    HDOS ()
                }
            }
        }

        Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
        {
            NDID = 0x02
            If ((DIDL != Zero))
            {
                DID1 = SDDL (DIDL)
            }

            If ((DDL2 != Zero))
            {
                DID2 = SDDL (DDL2)
            }

            If ((DDL3 != Zero))
            {
                DID3 = SDDL (DDL3)
            }

            If ((DDL4 != Zero))
            {
                DID4 = SDDL (DDL4)
            }

            If ((DDL5 != Zero))
            {
                DID5 = SDDL (DDL5)
            }

            If ((DDL6 != Zero))
            {
                DID6 = SDDL (DDL6)
            }

            If ((DDL7 != Zero))
            {
                DID7 = SDDL (DDL7)
            }

            If ((DDL8 != Zero))
            {
                DID8 = SDDL (DDL8)
            }

            If ((DDL9 != Zero))
            {
                DID9 = SDDL (DDL9)
            }

            If ((DD10 != Zero))
            {
                DIDA = SDDL (DD10)
            }

            If ((DD11 != Zero))
            {
                DIDB = SDDL (DD11)
            }

            If ((DD12 != Zero))
            {
                DIDC = SDDL (DD12)
            }

            If ((DD13 != Zero))
            {
                DIDD = SDDL (DD13)
            }

            If ((DD14 != Zero))
            {
                DIDE = SDDL (DD14)
            }

            If ((DD15 != Zero))
            {
                DIDF = SDDL (DD15)
            }

            If ((NDID == One))
            {
                Name (TMP1, Package (0x01)
                {
                    0xFFFFFFFF
                })
                If ((IPTP == One))
                {
                    TMP1 [Zero] = 0x00023480
                }
                Else
                {
                    TMP1 [Zero] = (0x00010000 | DID1)
                }

                Return (TMP1) /* \_SB_.PC00.GFX0._DOD.TMP1 */
            }

            If ((NDID == 0x02))
            {
                Name (TMP2, Package (0x02)
                {
                    0xFFFFFFFF, 
                    0xFFFFFFFF
                })
                TMP2 [Zero] = (0x00010000 | DID1)
                If ((IPTP == One))
                {
                    TMP2 [One] = 0x00023480
                }
                Else
                {
                    TMP2 [One] = (0x00010000 | DID2)
                }

                Return (TMP2) /* \_SB_.PC00.GFX0._DOD.TMP2 */
            }

            If ((NDID == 0x03))
            {
                Name (TMP3, Package (0x03)
                {
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF
                })
                TMP3 [Zero] = (0x00010000 | DID1)
                TMP3 [One] = (0x00010000 | DID2)
                If ((IPTP == One))
                {
                    TMP3 [0x02] = 0x00023480
                }
                Else
                {
                    TMP3 [0x02] = (0x00010000 | DID3)
                }

                Return (TMP3) /* \_SB_.PC00.GFX0._DOD.TMP3 */
            }

            If ((NDID == 0x04))
            {
                Name (TMP4, Package (0x04)
                {
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF
                })
                TMP4 [Zero] = (0x00010000 | DID1)
                TMP4 [One] = (0x00010000 | DID2)
                TMP4 [0x02] = (0x00010000 | DID3)
                If ((IPTP == One))
                {
                    TMP4 [0x03] = 0x00023480
                }
                Else
                {
                    TMP4 [0x03] = (0x00010000 | DID4)
                }

                Return (TMP4) /* \_SB_.PC00.GFX0._DOD.TMP4 */
            }

            If ((NDID == 0x05))
            {
                Name (TMP5, Package (0x05)
                {
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF
                })
                TMP5 [Zero] = (0x00010000 | DID1)
                TMP5 [One] = (0x00010000 | DID2)
                TMP5 [0x02] = (0x00010000 | DID3)
                TMP5 [0x03] = (0x00010000 | DID4)
                If ((IPTP == One))
                {
                    TMP5 [0x04] = 0x00023480
                }
                Else
                {
                    TMP5 [0x04] = (0x00010000 | DID5)
                }

                Return (TMP5) /* \_SB_.PC00.GFX0._DOD.TMP5 */
            }

            If ((NDID == 0x06))
            {
                Name (TMP6, Package (0x06)
                {
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF
                })
                TMP6 [Zero] = (0x00010000 | DID1)
                TMP6 [One] = (0x00010000 | DID2)
                TMP6 [0x02] = (0x00010000 | DID3)
                TMP6 [0x03] = (0x00010000 | DID4)
                TMP6 [0x04] = (0x00010000 | DID5)
                If ((IPTP == One))
                {
                    TMP6 [0x05] = 0x00023480
                }
                Else
                {
                    TMP6 [0x05] = (0x00010000 | DID6)
                }

                Return (TMP6) /* \_SB_.PC00.GFX0._DOD.TMP6 */
            }

            If ((NDID == 0x07))
            {
                Name (TMP7, Package (0x07)
                {
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF
                })
                TMP7 [Zero] = (0x00010000 | DID1)
                TMP7 [One] = (0x00010000 | DID2)
                TMP7 [0x02] = (0x00010000 | DID3)
                TMP7 [0x03] = (0x00010000 | DID4)
                TMP7 [0x04] = (0x00010000 | DID5)
                TMP7 [0x05] = (0x00010000 | DID6)
                If ((IPTP == One))
                {
                    TMP7 [0x06] = 0x00023480
                }
                Else
                {
                    TMP7 [0x06] = (0x00010000 | DID7)
                }

                Return (TMP7) /* \_SB_.PC00.GFX0._DOD.TMP7 */
            }

            If ((NDID == 0x08))
            {
                Name (TMP8, Package (0x08)
                {
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF
                })
                TMP8 [Zero] = (0x00010000 | DID1)
                TMP8 [One] = (0x00010000 | DID2)
                TMP8 [0x02] = (0x00010000 | DID3)
                TMP8 [0x03] = (0x00010000 | DID4)
                TMP8 [0x04] = (0x00010000 | DID5)
                TMP8 [0x05] = (0x00010000 | DID6)
                TMP8 [0x06] = (0x00010000 | DID7)
                If ((IPTP == One))
                {
                    TMP8 [0x07] = 0x00023480
                }
                Else
                {
                    TMP8 [0x07] = (0x00010000 | DID8)
                }

                Return (TMP8) /* \_SB_.PC00.GFX0._DOD.TMP8 */
            }

            If ((NDID == 0x09))
            {
                Name (TMP9, Package (0x09)
                {
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF
                })
                TMP9 [Zero] = (0x00010000 | DID1)
                TMP9 [One] = (0x00010000 | DID2)
                TMP9 [0x02] = (0x00010000 | DID3)
                TMP9 [0x03] = (0x00010000 | DID4)
                TMP9 [0x04] = (0x00010000 | DID5)
                TMP9 [0x05] = (0x00010000 | DID6)
                TMP9 [0x06] = (0x00010000 | DID7)
                TMP9 [0x07] = (0x00010000 | DID8)
                If ((IPTP == One))
                {
                    TMP9 [0x08] = 0x00023480
                }
                Else
                {
                    TMP9 [0x08] = (0x00010000 | DID9)
                }

                Return (TMP9) /* \_SB_.PC00.GFX0._DOD.TMP9 */
            }

            If ((NDID == 0x0A))
            {
                Name (TMPA, Package (0x0A)
                {
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF
                })
                TMPA [Zero] = (0x00010000 | DID1)
                TMPA [One] = (0x00010000 | DID2)
                TMPA [0x02] = (0x00010000 | DID3)
                TMPA [0x03] = (0x00010000 | DID4)
                TMPA [0x04] = (0x00010000 | DID5)
                TMPA [0x05] = (0x00010000 | DID6)
                TMPA [0x06] = (0x00010000 | DID7)
                TMPA [0x07] = (0x00010000 | DID8)
                TMPA [0x08] = (0x00010000 | DID9)
                If ((IPTP == One))
                {
                    TMPA [0x09] = 0x00023480
                }
                Else
                {
                    TMPA [0x09] = (0x00010000 | DIDA)
                }

                Return (TMPA) /* \_SB_.PC00.GFX0._DOD.TMPA */
            }

            If ((NDID == 0x0B))
            {
                Name (TMPB, Package (0x0B)
                {
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF
                })
                TMPB [Zero] = (0x00010000 | DID1)
                TMPB [One] = (0x00010000 | DID2)
                TMPB [0x02] = (0x00010000 | DID3)
                TMPB [0x03] = (0x00010000 | DID4)
                TMPB [0x04] = (0x00010000 | DID5)
                TMPB [0x05] = (0x00010000 | DID6)
                TMPB [0x06] = (0x00010000 | DID7)
                TMPB [0x07] = (0x00010000 | DID8)
                TMPB [0x08] = (0x00010000 | DID9)
                TMPB [0x09] = (0x00010000 | DIDA)
                If ((IPTP == One))
                {
                    TMPB [0x0A] = 0x00023480
                }
                Else
                {
                    TMPB [0x0A] = (0x00010000 | DIDB)
                }

                Return (TMPB) /* \_SB_.PC00.GFX0._DOD.TMPB */
            }

            If ((NDID == 0x0C))
            {
                Name (TMPC, Package (0x0C)
                {
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF
                })
                TMPC [Zero] = (0x00010000 | DID1)
                TMPC [One] = (0x00010000 | DID2)
                TMPC [0x02] = (0x00010000 | DID3)
                TMPC [0x03] = (0x00010000 | DID4)
                TMPC [0x04] = (0x00010000 | DID5)
                TMPC [0x05] = (0x00010000 | DID6)
                TMPC [0x06] = (0x00010000 | DID7)
                TMPC [0x07] = (0x00010000 | DID8)
                TMPC [0x08] = (0x00010000 | DID9)
                TMPC [0x09] = (0x00010000 | DIDA)
                TMPC [0x0A] = (0x00010000 | DIDB)
                If ((IPTP == One))
                {
                    TMPC [0x0B] = 0x00023480
                }
                Else
                {
                    TMPC [0x0B] = (0x00010000 | DIDC)
                }

                Return (TMPC) /* \_SB_.PC00.GFX0._DOD.TMPC */
            }

            If ((NDID == 0x0D))
            {
                Name (TMPD, Package (0x0D)
                {
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF
                })
                TMPD [Zero] = (0x00010000 | DID1)
                TMPD [One] = (0x00010000 | DID2)
                TMPD [0x02] = (0x00010000 | DID3)
                TMPD [0x03] = (0x00010000 | DID4)
                TMPD [0x04] = (0x00010000 | DID5)
                TMPD [0x05] = (0x00010000 | DID6)
                TMPD [0x06] = (0x00010000 | DID7)
                TMPD [0x07] = (0x00010000 | DID8)
                TMPD [0x08] = (0x00010000 | DID9)
                TMPD [0x09] = (0x00010000 | DIDA)
                TMPD [0x0A] = (0x00010000 | DIDB)
                TMPD [0x0B] = (0x00010000 | DIDC)
                If ((IPTP == One))
                {
                    TMPD [0x0C] = 0x00023480
                }
                Else
                {
                    TMPD [0x0C] = (0x00010000 | DIDD)
                }

                Return (TMPD) /* \_SB_.PC00.GFX0._DOD.TMPD */
            }

            If ((NDID == 0x0E))
            {
                Name (TMPE, Package (0x0E)
                {
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF
                })
                TMPE [Zero] = (0x00010000 | DID1)
                TMPE [One] = (0x00010000 | DID2)
                TMPE [0x02] = (0x00010000 | DID3)
                TMPE [0x03] = (0x00010000 | DID4)
                TMPE [0x04] = (0x00010000 | DID5)
                TMPE [0x05] = (0x00010000 | DID6)
                TMPE [0x06] = (0x00010000 | DID7)
                TMPE [0x07] = (0x00010000 | DID8)
                TMPE [0x08] = (0x00010000 | DID9)
                TMPE [0x09] = (0x00010000 | DIDA)
                TMPE [0x0A] = (0x00010000 | DIDB)
                TMPE [0x0B] = (0x00010000 | DIDC)
                TMPE [0x0C] = (0x00010000 | DIDD)
                If ((IPTP == One))
                {
                    TMPE [0x0D] = 0x00023480
                }
                Else
                {
                    TMPE [0x0D] = (0x00010000 | DIDE)
                }

                Return (TMPE) /* \_SB_.PC00.GFX0._DOD.TMPE */
            }

            If ((NDID == 0x0F))
            {
                Name (TMPF, Package (0x0F)
                {
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF
                })
                TMPF [Zero] = (0x00010000 | DID1)
                TMPF [One] = (0x00010000 | DID2)
                TMPF [0x02] = (0x00010000 | DID3)
                TMPF [0x03] = (0x00010000 | DID4)
                TMPF [0x04] = (0x00010000 | DID5)
                TMPF [0x05] = (0x00010000 | DID6)
                TMPF [0x06] = (0x00010000 | DID7)
                TMPF [0x07] = (0x00010000 | DID8)
                TMPF [0x08] = (0x00010000 | DID9)
                TMPF [0x09] = (0x00010000 | DIDA)
                TMPF [0x0A] = (0x00010000 | DIDB)
                TMPF [0x0B] = (0x00010000 | DIDC)
                TMPF [0x0C] = (0x00010000 | DIDD)
                TMPF [0x0D] = (0x00010000 | DIDE)
                If ((IPTP == One))
                {
                    TMPF [0x0E] = 0x00023480
                }
                Else
                {
                    TMPF [0x0E] = (0x00010000 | DIDF)
                }

                Return (TMPF) /* \_SB_.PC00.GFX0._DOD.TMPF */
            }

            If ((NDID == 0x10))
            {
                Name (TMPG, Package (0x10)
                {
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF
                })
                TMPG [Zero] = (0x00010000 | DID1)
                TMPG [One] = (0x00010000 | DID2)
                TMPG [0x02] = (0x00010000 | DID3)
                TMPG [0x03] = (0x00010000 | DID4)
                TMPG [0x04] = (0x00010000 | DID5)
                TMPG [0x05] = (0x00010000 | DID6)
                TMPG [0x06] = (0x00010000 | DID7)
                TMPG [0x07] = (0x00010000 | DID8)
                TMPG [0x08] = (0x00010000 | DID9)
                TMPG [0x09] = (0x00010000 | DIDA)
                TMPG [0x0A] = (0x00010000 | DIDB)
                TMPG [0x0B] = (0x00010000 | DIDC)
                TMPG [0x0C] = (0x00010000 | DIDD)
                TMPG [0x0D] = (0x00010000 | DIDE)
                TMPG [0x0E] = (0x00010000 | DIDF)
                TMPG [0x0F] = 0x00023480
                Return (TMPG) /* \_SB_.PC00.GFX0._DOD.TMPG */
            }

            Return (Package (0x01)
            {
                0x0400
            })
        }

        Device (DD01)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DID1) == 0x0400))
                {
                    EDPV = One
                    NXDX = NXD1 /* External reference */
                    DIDX = DID1 /* External reference */
                    Return (One)
                }

                If ((DID1 == Zero))
                {
                    Return (One)
                }
                Else
                {
                    Return ((0xFFFF & DID1))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                Return (CDDS (DID1))
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((HGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXD1) /* External reference */
                }

                Return (NDDS (DID1))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }
        }

        Device (DD02)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DID2) == 0x0400))
                {
                    If (((0x0F & DID2) == One))
                    {
                        EDPV = 0x02
                        NXDY = NXD2 /* External reference */
                        DIDY = DID2 /* External reference */
                        Return (0x02)
                    }

                    EDPV = 0x02
                    NXDX = NXD2 /* External reference */
                    DIDX = DID2 /* External reference */
                    Return (0x02)
                }

                If ((DID2 == Zero))
                {
                    Return (0x02)
                }
                Else
                {
                    Return ((0xFFFF & DID2))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((LIDS == Zero))
                {
                    Return (Zero)
                }

                Return (CDDS (DID2))
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((HGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXD2) /* External reference */
                }

                Return (NDDS (DID2))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }
        }

        Device (DD03)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DID3) == 0x0400))
                {
                    EDPV = 0x03
                    NXDX = NXD3 /* External reference */
                    DIDX = DID3 /* External reference */
                    Return (0x03)
                }

                If ((DID3 == Zero))
                {
                    Return (0x03)
                }
                Else
                {
                    Return ((0xFFFF & DID3))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((DID3 == Zero))
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (CDDS (DID3))
                }
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((HGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXD3) /* External reference */
                }

                Return (NDDS (DID3))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }
        }

        Device (DD04)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DID4) == 0x0400))
                {
                    EDPV = 0x04
                    NXDX = NXD4 /* External reference */
                    DIDX = DID4 /* External reference */
                    Return (0x04)
                }

                If ((DID4 == Zero))
                {
                    Return (0x04)
                }
                Else
                {
                    Return ((0xFFFF & DID4))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((DID4 == Zero))
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (CDDS (DID4))
                }
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((HGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXD4) /* External reference */
                }

                Return (NDDS (DID4))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }
        }

        Device (DD05)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DID5) == 0x0400))
                {
                    EDPV = 0x05
                    NXDX = NXD5 /* External reference */
                    DIDX = DID5 /* External reference */
                    Return (0x05)
                }

                If ((DID5 == Zero))
                {
                    Return (0x05)
                }
                Else
                {
                    Return ((0xFFFF & DID5))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((DID5 == Zero))
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (CDDS (DID5))
                }
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((HGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXD5) /* External reference */
                }

                Return (NDDS (DID5))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }
        }

        Device (DD06)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DID6) == 0x0400))
                {
                    EDPV = 0x06
                    NXDX = NXD6 /* External reference */
                    DIDX = DID6 /* External reference */
                    Return (0x06)
                }

                If ((DID6 == Zero))
                {
                    Return (0x06)
                }
                Else
                {
                    Return ((0xFFFF & DID6))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((DID6 == Zero))
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (CDDS (DID6))
                }
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((HGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXD6) /* External reference */
                }

                Return (NDDS (DID6))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }
        }

        Device (DD07)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DID7) == 0x0400))
                {
                    EDPV = 0x07
                    NXDX = NXD7 /* External reference */
                    DIDX = DID7 /* External reference */
                    Return (0x07)
                }

                If ((DID7 == Zero))
                {
                    Return (0x07)
                }
                Else
                {
                    Return ((0xFFFF & DID7))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((DID7 == Zero))
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (CDDS (DID7))
                }
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((HGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXD7) /* External reference */
                }

                Return (NDDS (DID7))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }
        }

        Device (DD08)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DID8) == 0x0400))
                {
                    EDPV = 0x08
                    NXDX = NXD8 /* External reference */
                    DIDX = DID8 /* External reference */
                    Return (0x08)
                }

                If ((DID8 == Zero))
                {
                    Return (0x08)
                }
                Else
                {
                    Return ((0xFFFF & DID8))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((DID8 == Zero))
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (CDDS (DID8))
                }
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((HGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXD8) /* External reference */
                }

                Return (NDDS (DID8))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }
        }

        Device (DD09)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DID9) == 0x0400))
                {
                    EDPV = 0x09
                    NXDX = NXD8 /* External reference */
                    DIDX = DID9 /* External reference */
                    Return (0x09)
                }

                If ((DID9 == Zero))
                {
                    Return (0x09)
                }
                Else
                {
                    Return ((0xFFFF & DID9))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((DID9 == Zero))
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (CDDS (DID9))
                }
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((HGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXD8) /* External reference */
                }

                Return (NDDS (DID9))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }
        }

        Device (DD0A)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DIDA) == 0x0400))
                {
                    EDPV = 0x0A
                    NXDX = NXD8 /* External reference */
                    DIDX = DIDA /* External reference */
                    Return (0x0A)
                }

                If ((DIDA == Zero))
                {
                    Return (0x0A)
                }
                Else
                {
                    Return ((0xFFFF & DIDA))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((DIDA == Zero))
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (CDDS (DIDA))
                }
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((HGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXD8) /* External reference */
                }

                Return (NDDS (DIDA))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }
        }

        Device (DD0B)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DIDB) == 0x0400))
                {
                    EDPV = 0x0B
                    NXDX = NXD8 /* External reference */
                    DIDX = DIDB /* External reference */
                    Return (0x0B)
                }

                If ((DIDB == Zero))
                {
                    Return (0x0B)
                }
                Else
                {
                    Return ((0xFFFF & DIDB))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((DIDB == Zero))
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (CDDS (DIDB))
                }
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((HGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXD8) /* External reference */
                }

                Return (NDDS (DIDB))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }
        }

        Device (DD0C)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DIDC) == 0x0400))
                {
                    EDPV = 0x0C
                    NXDX = NXD8 /* External reference */
                    DIDX = DIDC /* External reference */
                    Return (0x0C)
                }

                If ((DIDC == Zero))
                {
                    Return (0x0C)
                }
                Else
                {
                    Return ((0xFFFF & DIDC))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((DIDC == Zero))
                {
                    Return (0x0C)
                }
                Else
                {
                    Return (CDDS (DIDC))
                }
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((HGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXD8) /* External reference */
                }

                Return (NDDS (DIDC))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }
        }

        Device (DD0D)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DIDD) == 0x0400))
                {
                    EDPV = 0x0D
                    NXDX = NXD8 /* External reference */
                    DIDX = DIDD /* External reference */
                    Return (0x0D)
                }

                If ((DIDD == Zero))
                {
                    Return (0x0D)
                }
                Else
                {
                    Return ((0xFFFF & DIDD))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((DIDD == Zero))
                {
                    Return (0x0D)
                }
                Else
                {
                    Return (CDDS (DIDD))
                }
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((HGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXD8) /* External reference */
                }

                Return (NDDS (DIDD))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }
        }

        Device (DD0E)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DIDE) == 0x0400))
                {
                    EDPV = 0x0E
                    NXDX = NXD8 /* External reference */
                    DIDX = DIDE /* External reference */
                    Return (0x0E)
                }

                If ((DIDE == Zero))
                {
                    Return (0x0E)
                }
                Else
                {
                    Return ((0xFFFF & DIDE))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((DIDE == Zero))
                {
                    Return (0x0E)
                }
                Else
                {
                    Return (CDDS (DIDE))
                }
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((HGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXD8) /* External reference */
                }

                Return (NDDS (DIDE))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }
        }

        Device (DD0F)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DIDF) == 0x0400))
                {
                    EDPV = 0x0F
                    NXDX = NXD8 /* External reference */
                    DIDX = DIDF /* External reference */
                    Return (0x0F)
                }

                If ((DIDF == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return ((0xFFFF & DIDF))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((DIDC == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (CDDS (DIDF))
                }
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((HGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXD8) /* External reference */
                }

                Return (NDDS (DIDF))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }
        }

        Device (DD1F)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If ((EDPV == Zero))
                {
                    Return (0x1F)
                }
                Else
                {
                    Return ((0xFFFF & DIDX))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((EDPV == Zero))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (CDDS (DIDX))
                }
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((HGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXDX) /* External reference */
                }

                Return (NDDS (DIDX))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }

            Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
            {
                If (CondRefOf (\PBCL))
                {
                    Return (PBCL ())
                }
                Else
                {
                    Return (Package (0x67)
                    {
                        0x50, 
                        0x32, 
                        Zero, 
                        One, 
                        0x02, 
                        0x03, 
                        0x04, 
                        0x05, 
                        0x06, 
                        0x07, 
                        0x08, 
                        0x09, 
                        0x0A, 
                        0x0B, 
                        0x0C, 
                        0x0D, 
                        0x0E, 
                        0x0F, 
                        0x10, 
                        0x11, 
                        0x12, 
                        0x13, 
                        0x14, 
                        0x15, 
                        0x16, 
                        0x17, 
                        0x18, 
                        0x19, 
                        0x1A, 
                        0x1B, 
                        0x1C, 
                        0x1D, 
                        0x1E, 
                        0x1F, 
                        0x20, 
                        0x21, 
                        0x22, 
                        0x23, 
                        0x24, 
                        0x25, 
                        0x26, 
                        0x27, 
                        0x28, 
                        0x29, 
                        0x2A, 
                        0x2B, 
                        0x2C, 
                        0x2D, 
                        0x2E, 
                        0x2F, 
                        0x30, 
                        0x31, 
                        0x32, 
                        0x33, 
                        0x34, 
                        0x35, 
                        0x36, 
                        0x37, 
                        0x38, 
                        0x39, 
                        0x3A, 
                        0x3B, 
                        0x3C, 
                        0x3D, 
                        0x3E, 
                        0x3F, 
                        0x40, 
                        0x41, 
                        0x42, 
                        0x43, 
                        0x44, 
                        0x45, 
                        0x46, 
                        0x47, 
                        0x48, 
                        0x49, 
                        0x4A, 
                        0x4B, 
                        0x4C, 
                        0x4D, 
                        0x4E, 
                        0x4F, 
                        0x50, 
                        0x51, 
                        0x52, 
                        0x53, 
                        0x54, 
                        0x55, 
                        0x56, 
                        0x57, 
                        0x58, 
                        0x59, 
                        0x5A, 
                        0x5B, 
                        0x5C, 
                        0x5D, 
                        0x5E, 
                        0x5F, 
                        0x60, 
                        0x61, 
                        0x62, 
                        0x63, 
                        0x64
                    })
                }
            }

            Method (_BCM, 1, NotSerialized)  // _BCM: Brightness Control Method
            {
                If (((Arg0 >= Zero) && (Arg0 <= 0x64)))
                {
                    \_SB.PC00.GFX0.AINT (One, Arg0)
                    BRTL = Arg0
                }
            }

            Method (_BQC, 0, NotSerialized)  // _BQC: Brightness Query Current
            {
                Return (BRTL) /* External reference */
            }

            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
            {
                If (CondRefOf (\PLD1))
                {
                    Return (PLD1 ())
                }
                Else
                {
                    Return (DPLD) /* \_SB_.PC00.GFX0.DPLD */
                }
            }
        }

        Device (DD2F)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If ((EDPV == Zero))
                {
                    Return (0x1F)
                }

                If ((EDPV == One))
                {
                    Return (0x1F)
                }
                Else
                {
                    Return ((0xFFFF & DIDY))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((EDPV == Zero))
                {
                    Return (Zero)
                }

                If ((EDPV == One))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (CDDS (DIDY))
                }
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((HGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXDY) /* External reference */
                }

                Return (NDDS (DIDY))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }

            Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
            {
                If (CondRefOf (\PBCL))
                {
                    Return (PBCL ())
                }
                Else
                {
                    Return (Package (0x67)
                    {
                        0x50, 
                        0x32, 
                        Zero, 
                        One, 
                        0x02, 
                        0x03, 
                        0x04, 
                        0x05, 
                        0x06, 
                        0x07, 
                        0x08, 
                        0x09, 
                        0x0A, 
                        0x0B, 
                        0x0C, 
                        0x0D, 
                        0x0E, 
                        0x0F, 
                        0x10, 
                        0x11, 
                        0x12, 
                        0x13, 
                        0x14, 
                        0x15, 
                        0x16, 
                        0x17, 
                        0x18, 
                        0x19, 
                        0x1A, 
                        0x1B, 
                        0x1C, 
                        0x1D, 
                        0x1E, 
                        0x1F, 
                        0x20, 
                        0x21, 
                        0x22, 
                        0x23, 
                        0x24, 
                        0x25, 
                        0x26, 
                        0x27, 
                        0x28, 
                        0x29, 
                        0x2A, 
                        0x2B, 
                        0x2C, 
                        0x2D, 
                        0x2E, 
                        0x2F, 
                        0x30, 
                        0x31, 
                        0x32, 
                        0x33, 
                        0x34, 
                        0x35, 
                        0x36, 
                        0x37, 
                        0x38, 
                        0x39, 
                        0x3A, 
                        0x3B, 
                        0x3C, 
                        0x3D, 
                        0x3E, 
                        0x3F, 
                        0x40, 
                        0x41, 
                        0x42, 
                        0x43, 
                        0x44, 
                        0x45, 
                        0x46, 
                        0x47, 
                        0x48, 
                        0x49, 
                        0x4A, 
                        0x4B, 
                        0x4C, 
                        0x4D, 
                        0x4E, 
                        0x4F, 
                        0x50, 
                        0x51, 
                        0x52, 
                        0x53, 
                        0x54, 
                        0x55, 
                        0x56, 
                        0x57, 
                        0x58, 
                        0x59, 
                        0x5A, 
                        0x5B, 
                        0x5C, 
                        0x5D, 
                        0x5E, 
                        0x5F, 
                        0x60, 
                        0x61, 
                        0x62, 
                        0x63, 
                        0x64
                    })
                }
            }

            Method (_BCM, 1, NotSerialized)  // _BCM: Brightness Control Method
            {
                If (((Arg0 >= Zero) && (Arg0 <= 0x64)))
                {
                    \_SB.PC00.GFX0.AINT (One, Arg0)
                    BRTL = Arg0
                }
            }

            Method (_BQC, 0, NotSerialized)  // _BQC: Brightness Query Current
            {
                Return (BRTL) /* External reference */
            }

            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
            {
                If (CondRefOf (\PLD2))
                {
                    Return (PLD2 ())
                }
                Else
                {
                    Return (DPLD) /* \_SB_.PC00.GFX0.DPLD */
                }
            }
        }

        Method (SDDL, 1, NotSerialized)
        {
            NDID++
            Local0 = (Arg0 & 0x0F0F)
            Local1 = (0x80000000 | Local0)
            If ((DIDL == Local0))
            {
                Return (Local1)
            }

            If ((DDL2 == Local0))
            {
                Return (Local1)
            }

            If ((DDL3 == Local0))
            {
                Return (Local1)
            }

            If ((DDL4 == Local0))
            {
                Return (Local1)
            }

            If ((DDL5 == Local0))
            {
                Return (Local1)
            }

            If ((DDL6 == Local0))
            {
                Return (Local1)
            }

            If ((DDL7 == Local0))
            {
                Return (Local1)
            }

            If ((DDL8 == Local0))
            {
                Return (Local1)
            }

            If ((DDL9 == Local0))
            {
                Return (Local1)
            }

            If ((DD10 == Local0))
            {
                Return (Local1)
            }

            If ((DD11 == Local0))
            {
                Return (Local1)
            }

            If ((DD12 == Local0))
            {
                Return (Local1)
            }

            If ((DD13 == Local0))
            {
                Return (Local1)
            }

            If ((DD14 == Local0))
            {
                Return (Local1)
            }

            If ((DD15 == Local0))
            {
                Return (Local1)
            }

            Return (Zero)
        }

        Method (CDDS, 1, NotSerialized)
        {
            Local0 = (Arg0 & 0x0F0F)
            If ((Zero == Local0))
            {
                Return (0x1D)
            }

            If ((CADL == Local0))
            {
                Return (0x1F)
            }

            If ((CAL2 == Local0))
            {
                Return (0x1F)
            }

            If ((CAL3 == Local0))
            {
                Return (0x1F)
            }

            If ((CAL4 == Local0))
            {
                Return (0x1F)
            }

            If ((CAL5 == Local0))
            {
                Return (0x1F)
            }

            If ((CAL6 == Local0))
            {
                Return (0x1F)
            }

            If ((CAL7 == Local0))
            {
                Return (0x1F)
            }

            If ((CAL8 == Local0))
            {
                Return (0x1F)
            }

            Return (0x1D)
        }

        Method (NDDS, 1, NotSerialized)
        {
            Local0 = (Arg0 & 0x0F0F)
            If ((Zero == Local0))
            {
                Return (Zero)
            }

            If ((NADL == Local0))
            {
                Return (One)
            }

            If ((NDL2 == Local0))
            {
                Return (One)
            }

            If ((NDL3 == Local0))
            {
                Return (One)
            }

            If ((NDL4 == Local0))
            {
                Return (One)
            }

            If ((NDL5 == Local0))
            {
                Return (One)
            }

            If ((NDL6 == Local0))
            {
                Return (One)
            }

            If ((NDL7 == Local0))
            {
                Return (One)
            }

            If ((NDL8 == Local0))
            {
                Return (One)
            }

            Return (Zero)
        }

        Method (DSST, 1, NotSerialized)
        {
            If (((Arg0 & 0xC0000000) == 0xC0000000))
            {
                CSTE = NSTE /* External reference */
            }
        }

        Scope (\_SB.PC00)
        {
            OperationRegion (MCHP, PCI_Config, 0x40, 0xC0)
            Field (MCHP, AnyAcc, NoLock, Preserve)
            {
                Offset (0x14), 
                AUDE,   8, 
                Offset (0x60), 
                TASM,   10, 
                Offset (0x62)
            }
        }

        OperationRegion (IGDP, PCI_Config, 0x40, 0xC0)
        Field (IGDP, AnyAcc, NoLock, Preserve)
        {
            Offset (0x10), 
                ,   1, 
            GIVD,   1, 
                ,   2, 
            GUMA,   3, 
            Offset (0x12), 
            Offset (0x14), 
                ,   4, 
            GMFN,   1, 
            Offset (0x18), 
            Offset (0xA4), 
            ASLE,   8, 
            Offset (0xA8), 
            GSSE,   1, 
            GSSB,   14, 
            GSES,   1, 
            Offset (0xB0), 
                ,   12, 
            CDVL,   1, 
            Offset (0xB2), 
            Offset (0xB5), 
            LBPC,   8, 
            Offset (0xBC), 
            ASLS,   32
        }

        OperationRegion (IGDM, SystemMemory, ASLB, 0x2000)
        Field (IGDM, AnyAcc, NoLock, Preserve)
        {
            SIGN,   128, 
            SIZE,   32, 
            OVER,   32, 
            SVER,   256, 
            VVER,   128, 
            GVER,   128, 
            MBOX,   32, 
            DMOD,   32, 
            PCON,   32, 
            DVER,   64, 
            Offset (0x100), 
            DRDY,   32, 
            CSTS,   32, 
            CEVT,   32, 
            Offset (0x120), 
            DIDL,   32, 
            DDL2,   32, 
            DDL3,   32, 
            DDL4,   32, 
            DDL5,   32, 
            DDL6,   32, 
            DDL7,   32, 
            DDL8,   32, 
            CPDL,   32, 
            CPL2,   32, 
            CPL3,   32, 
            CPL4,   32, 
            CPL5,   32, 
            CPL6,   32, 
            CPL7,   32, 
            CPL8,   32, 
            CADL,   32, 
            CAL2,   32, 
            CAL3,   32, 
            CAL4,   32, 
            CAL5,   32, 
            CAL6,   32, 
            CAL7,   32, 
            CAL8,   32, 
            NADL,   32, 
            NDL2,   32, 
            NDL3,   32, 
            NDL4,   32, 
            NDL5,   32, 
            NDL6,   32, 
            NDL7,   32, 
            NDL8,   32, 
            ASLP,   32, 
            TIDX,   32, 
            CHPD,   32, 
            CLID,   32, 
            CDCK,   32, 
            SXSW,   32, 
            EVTS,   32, 
            CNOT,   32, 
            NRDY,   32, 
            DDL9,   32, 
            DD10,   32, 
            DD11,   32, 
            DD12,   32, 
            DD13,   32, 
            DD14,   32, 
            DD15,   32, 
            CPL9,   32, 
            CP10,   32, 
            CP11,   32, 
            CP12,   32, 
            CP13,   32, 
            CP14,   32, 
            CP15,   32, 
            Offset (0x200), 
            SCIE,   1, 
            GEFC,   4, 
            GXFC,   3, 
            GESF,   8, 
            Offset (0x204), 
            PARM,   32, 
            DSLP,   32, 
            Offset (0x300), 
            ARDY,   32, 
            ASLC,   32, 
            TCHE,   32, 
            ALSI,   32, 
            BCLP,   32, 
            PFIT,   32, 
            CBLV,   32, 
            BCLM,   320, 
            CPFM,   32, 
            EPFM,   32, 
            PLUT,   592, 
            PFMB,   32, 
            CCDV,   32, 
            PCFT,   32, 
            SROT,   32, 
            IUER,   32, 
            FDSS,   64, 
            FDSP,   32, 
            STAT,   32, 
            RVDA,   64, 
            RVDS,   32, 
            Offset (0x400), 
            RVBT,   49152, 
            PHED,   32, 
            BDDC,   2048
        }

        Name (DBTB, Package (0x15)
        {
            Zero, 
            0x07, 
            0x38, 
            0x01C0, 
            0x0E00, 
            0x3F, 
            0x01C7, 
            0x0E07, 
            0x01F8, 
            0x0E38, 
            0x0FC0, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            0x7000, 
            0x7007, 
            0x7038, 
            0x71C0, 
            0x7E00
        })
        Name (CDCT, Package (0x05)
        {
            Package (0x02)
            {
                0xE4, 
                0x0140
            }, 

            Package (0x02)
            {
                0xDE, 
                0x014D
            }, 

            Package (0x02)
            {
                0xDE, 
                0x014D
            }, 

            Package (0x02)
            {
                Zero, 
                Zero
            }, 

            Package (0x02)
            {
                0xDE, 
                0x014D
            }
        })
        Name (SUCC, One)
        Name (NVLD, 0x02)
        Name (CRIT, 0x04)
        Name (NCRT, 0x06)
        Method (GSCI, 0, Serialized)
        {
            Method (GBDA, 0, Serialized)
            {
                If ((GESF == Zero))
                {
                    PARM = 0x0659
                    GESF = Zero
                    Return (SUCC) /* \_SB_.PC00.GFX0.SUCC */
                }

                If ((GESF == One))
                {
                    PARM = 0x00300482
                    If ((S0ID == One))
                    {
                        PARM |= 0x0100
                    }

                    GESF = Zero
                    Return (SUCC) /* \_SB_.PC00.GFX0.SUCC */
                }

                If ((GESF == 0x04))
                {
                    PARM &= 0xEFFF0000
                    PARM &= (DerefOf (DBTB [IBTT]) << 0x10)
                    PARM |= IBTT /* \_SB_.PC00.GFX0.PARM */
                    GESF = Zero
                    Return (SUCC) /* \_SB_.PC00.GFX0.SUCC */
                }

                If ((GESF == 0x05))
                {
                    PARM = IPSC /* External reference */
                    PARM |= (IPAT << 0x08)
                    PARM += 0x0100
                    PARM |= (LIDS << 0x10)
                    PARM += 0x00010000
                    PARM |= (IBIA << 0x14)
                    GESF = Zero
                    Return (SUCC) /* \_SB_.PC00.GFX0.SUCC */
                }

                If ((GESF == 0x07))
                {
                    PARM = GIVD /* \_SB_.PC00.GFX0.GIVD */
                    PARM ^= One
                    PARM |= (GMFN << One)
                    PARM |= 0x1800
                    PARM |= (IDMS << 0x11)
                    PARM |= (DerefOf (DerefOf (CDCT [HVCO]) [CDVL]) << 
                        0x15) /* \_SB_.PC00.GFX0.PARM */
                    GESF = One
                    Return (SUCC) /* \_SB_.PC00.GFX0.SUCC */
                }

                If ((GESF == 0x0A))
                {
                    PARM = Zero
                    If (ISSC)
                    {
                        PARM |= 0x03
                    }

                    GESF = Zero
                    Return (SUCC) /* \_SB_.PC00.GFX0.SUCC */
                }

                If ((GESF == 0x0B))
                {
                    PARM = KSV0 /* External reference */
                    GESF = KSV1 /* External reference */
                    Return (SUCC) /* \_SB_.PC00.GFX0.SUCC */
                }

                GESF = Zero
                Return (CRIT) /* \_SB_.PC00.GFX0.CRIT */
            }

            Method (SBCB, 0, Serialized)
            {
                If ((GESF == Zero))
                {
                    PARM = Zero
                    PARM = 0x000F87DD
                    GESF = Zero
                    Return (SUCC) /* \_SB_.PC00.GFX0.SUCC */
                }

                If ((GESF == One))
                {
                    GESF = Zero
                    PARM = Zero
                    Return (SUCC) /* \_SB_.PC00.GFX0.SUCC */
                }

                If ((GESF == 0x03))
                {
                    GESF = Zero
                    PARM = Zero
                    Return (SUCC) /* \_SB_.PC00.GFX0.SUCC */
                }

                If ((GESF == 0x04))
                {
                    GESF = Zero
                    PARM = Zero
                    Return (SUCC) /* \_SB_.PC00.GFX0.SUCC */
                }

                If ((GESF == 0x05))
                {
                    GESF = Zero
                    PARM = Zero
                    Return (SUCC) /* \_SB_.PC00.GFX0.SUCC */
                }

                If ((GESF == 0x07))
                {
                    If (((S0ID == One) && (OSYS < 0x07DF)))
                    {
                        If (((PARM & 0xFF) == One))
                        {
                            \GUAM (One)
                        }

                        If (((PARM & 0xFF) == Zero))
                        {
                            \GUAM (Zero)
                        }
                    }

                    If ((PARM == Zero))
                    {
                        Local0 = CLID /* \_SB_.PC00.GFX0.CLID */
                        If ((0x80000000 & Local0))
                        {
                            CLID &= 0x0F
                            GLID (CLID)
                        }
                    }

                    GESF = Zero
                    PARM = Zero
                    Return (SUCC) /* \_SB_.PC00.GFX0.SUCC */
                }

                If ((GESF == 0x08))
                {
                    GESF = Zero
                    PARM = Zero
                    Return (SUCC) /* \_SB_.PC00.GFX0.SUCC */
                }

                If ((GESF == 0x09))
                {
                    IBTT = (PARM & 0xFF)
                    GESF = Zero
                    PARM = Zero
                    Return (SUCC) /* \_SB_.PC00.GFX0.SUCC */
                }

                If ((GESF == 0x0A))
                {
                    IPSC = (PARM & 0xFF)
                    If (((PARM >> 0x08) & 0xFF))
                    {
                        IPAT = ((PARM >> 0x08) & 0xFF)
                        IPAT--
                    }

                    IBIA = ((PARM >> 0x14) & 0x07)
                    GESF = Zero
                    PARM = Zero
                    Return (SUCC) /* \_SB_.PC00.GFX0.SUCC */
                }

                If ((GESF == 0x0B))
                {
                    IF1E = ((PARM >> One) & One)
                    If ((PARM & 0x0001E000))
                    {
                        IDMS = ((PARM >> 0x0D) & 0x0F)
                    }
                    Else
                    {
                        IDMS = ((PARM >> 0x11) & 0x0F)
                    }

                    GESF = Zero
                    PARM = Zero
                    Return (SUCC) /* \_SB_.PC00.GFX0.SUCC */
                }

                If ((GESF == 0x10))
                {
                    GESF = Zero
                    PARM = Zero
                    Return (SUCC) /* \_SB_.PC00.GFX0.SUCC */
                }

                If ((GESF == 0x11))
                {
                    PARM = (LIDS << 0x08)
                    PARM += 0x0100
                    GESF = Zero
                    Return (SUCC) /* \_SB_.PC00.GFX0.SUCC */
                }

                If ((GESF == 0x12))
                {
                    If ((PARM & One))
                    {
                        If (((PARM >> One) == One))
                        {
                            ISSC = One
                        }
                        Else
                        {
                            GESF = Zero
                            Return (CRIT) /* \_SB_.PC00.GFX0.CRIT */
                        }
                    }
                    Else
                    {
                        ISSC = Zero
                    }

                    GESF = Zero
                    PARM = Zero
                    Return (SUCC) /* \_SB_.PC00.GFX0.SUCC */
                }

                If ((GESF == 0x13))
                {
                    GESF = Zero
                    PARM = Zero
                    Return (SUCC) /* \_SB_.PC00.GFX0.SUCC */
                }

                If ((GESF == 0x14))
                {
                    PAVP = (PARM & 0x0F)
                    GESF = Zero
                    PARM = Zero
                    Return (SUCC) /* \_SB_.PC00.GFX0.SUCC */
                }

                GESF = Zero
                Return (SUCC) /* \_SB_.PC00.GFX0.SUCC */
            }

            If ((GEFC == 0x04))
            {
                GXFC = GBDA ()
            }

            If ((GEFC == 0x06))
            {
                GXFC = SBCB ()
            }

            GEFC = Zero
            CPSC = One
            GSSE = Zero
            SCIE = Zero
            Return (Zero)
        }

        Method (PDRD, 0, NotSerialized)
        {
            Return (!DRDY)
        }

        Method (PSTS, 0, NotSerialized)
        {
            If ((CSTS > 0x02))
            {
                Sleep (ASLP)
            }

            Return ((CSTS == 0x03))
        }

        Method (GNOT, 2, NotSerialized)
        {
            If (PDRD ())
            {
                Return (One)
            }

            CEVT = Arg0
            CSTS = 0x03
            If (((CHPD == Zero) && (Arg1 == Zero)))
            {
                Notify (\_SB.PC00.GFX0, Arg1)
            }

            If (CondRefOf (HNOT))
            {
                HNOT (Arg0)
            }
            Else
            {
                Notify (\_SB.PC00.GFX0, 0x80) // Status Change
            }

            Return (Zero)
        }

        Method (GHDS, 1, NotSerialized)
        {
            TIDX = Arg0
            Return (GNOT (One, Zero))
        }

        Method (GLID, 1, NotSerialized)
        {
            If ((Arg0 == One))
            {
                CLID = 0x03
            }
            Else
            {
                CLID = Arg0
            }

            If (GNOT (0x02, Zero))
            {
                CLID |= 0x80000000
                Return (One)
            }

            Return (Zero)
        }

        Method (GDCK, 1, NotSerialized)
        {
            CDCK = Arg0
            Return (GNOT (0x04, Zero))
        }

        Method (PARD, 0, NotSerialized)
        {
            If (!ARDY)
            {
                Sleep (ASLP)
            }

            Return (!ARDY)
        }

        Method (IUEH, 1, Serialized)
        {
            IUER &= 0xC0
            IUER ^= (One << Arg0)
            If ((Arg0 <= 0x04))
            {
                Return (AINT (0x05, Zero))
            }
            Else
            {
                Return (AINT (Arg0, Zero))
            }
        }

        Method (AINT, 2, NotSerialized)
        {
            If (!(TCHE & (One << Arg0)))
            {
                Return (One)
            }

            If (PARD ())
            {
                Return (One)
            }

            If (((Arg0 >= 0x05) && (Arg0 <= 0x07)))
            {
                ASLC = (One << Arg0)
                ASLE = One
                Local2 = Zero
                While (((Local2 < 0xFA) && (ASLC != Zero)))
                {
                    Sleep (0x04)
                    Local2++
                }

                Return (Zero)
            }

            If ((Arg0 == 0x02))
            {
                If (CPFM)
                {
                    Local0 = (CPFM & 0x0F)
                    Local1 = (EPFM & 0x0F)
                    If ((Local0 == One))
                    {
                        If ((Local1 & 0x06))
                        {
                            PFIT = 0x06
                        }
                        ElseIf ((Local1 & 0x08))
                        {
                            PFIT = 0x08
                        }
                        Else
                        {
                            PFIT = One
                        }
                    }

                    If ((Local0 == 0x06))
                    {
                        If ((Local1 & 0x08))
                        {
                            PFIT = 0x08
                        }
                        ElseIf ((Local1 & One))
                        {
                            PFIT = One
                        }
                        Else
                        {
                            PFIT = 0x06
                        }
                    }

                    If ((Local0 == 0x08))
                    {
                        If ((Local1 & One))
                        {
                            PFIT = One
                        }
                        ElseIf ((Local1 & 0x06))
                        {
                            PFIT = 0x06
                        }
                        Else
                        {
                            PFIT = 0x08
                        }
                    }
                }
                Else
                {
                    PFIT ^= 0x07
                }

                PFIT |= 0x80000000
                ASLC = 0x04
            }
            ElseIf ((Arg0 == One))
            {
                BCLP = ((Arg1 * 0xFF) / 0x64)
                BCLP |= 0x80000000
                ASLC = 0x02
            }
            ElseIf ((Arg0 == Zero))
            {
                ALSI = Arg1
                ASLC = One
            }
            Else
            {
                Return (One)
            }

            ASLE = One
            Return (Zero)
        }

        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("3e5b41c6-eb1d-4260-9d15-c71fbadae414") /* Unknown UUID */))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        If ((Arg1 == One))
                        {
                            Debug = "iGfx Supported Functions Bitmap "
                            If (((PCON & 0x0180) == 0x0180))
                            {
                                If (((PDIW && One) && CondRefOf (PDIW)))
                                {
                                    Return (0x0011E7FF)
                                }
                            }

                            Return (0x0001E7FF)
                        }
                    }
                    Case (One)
                    {
                        If ((Arg1 == One))
                        {
                            Debug = " Adapter Power State Notification "
                            If (((S0ID == One) && (OSYS < 0x07DF)))
                            {
                                If (((DerefOf (Arg3 [Zero]) & 0xFF) == One))
                                {
                                    \GUAM (One)
                                }

                                Local0 = (DerefOf (Arg3 [One]) & 0xFF)
                                If ((Local0 == Zero))
                                {
                                    \GUAM (Zero)
                                }
                            }

                            If ((DerefOf (Arg3 [Zero]) == Zero))
                            {
                                Local0 = CLID /* \_SB_.PC00.GFX0.CLID */
                                If ((0x80000000 & Local0))
                                {
                                    CLID &= 0x0F
                                    GLID (CLID)
                                }
                            }

                            Return (One)
                        }
                    }
                    Case (0x02)
                    {
                        If ((Arg1 == One))
                        {
                            Debug = "Display Power State Notification "
                            Return (One)
                        }
                    }
                    Case (0x03)
                    {
                        If ((Arg1 == One))
                        {
                            Debug = "BIOS POST Completion Notification "
                            Return (One)
                        }
                    }
                    Case (0x04)
                    {
                        If ((Arg1 == One))
                        {
                            Debug = "Pre-Hires Set Mode "
                            Return (One)
                        }
                    }
                    Case (0x05)
                    {
                        If ((Arg1 == One))
                        {
                            Debug = "Post-Hires Set Mode "
                            Return (One)
                        }
                    }
                    Case (0x06)
                    {
                        If ((Arg1 == One))
                        {
                            Debug = "SetDisplayDeviceNotification"
                            Return (One)
                        }
                    }
                    Case (0x07)
                    {
                        If ((Arg1 == One))
                        {
                            Debug = "SetBootDevicePreference "
                            IBTT = (DerefOf (Arg3 [Zero]) & 0xFF)
                            Return (One)
                        }
                    }
                    Case (0x08)
                    {
                        If ((Arg1 == One))
                        {
                            Debug = "SetPanelPreference "
                            IPSC = (DerefOf (Arg3 [Zero]) & 0xFF)
                            If ((DerefOf (Arg3 [One]) & 0xFF))
                            {
                                IPAT = (DerefOf (Arg3 [One]) & 0xFF)
                                IPAT--
                            }

                            IBIA = ((DerefOf (Arg3 [0x02]) >> 0x04) & 0x07)
                            Return (One)
                        }
                    }
                    Case (0x09)
                    {
                        If ((Arg1 == One))
                        {
                            Debug = "FullScreenDOS "
                            Return (One)
                        }
                    }
                    Case (0x0A)
                    {
                        If ((Arg1 == One))
                        {
                            Debug = "APM Complete "
                            Local0 = (LIDS << 0x08)
                            Local0 += 0x0100
                            Return (Local0)
                        }
                    }
                    Case (0x0D)
                    {
                        If ((Arg1 == One))
                        {
                            Debug = "GetBootDisplayPreference "
                            Local0 = ((DerefOf (Arg3 [0x03]) << 0x18) | (DerefOf (
                                Arg3 [0x02]) << 0x10))
                            Local0 &= 0xEFFF0000
                            Local0 &= (DerefOf (DBTB [IBTT]) << 0x10)
                            Local0 |= IBTT
                            Return (Local0)
                        }
                    }
                    Case (0x0E)
                    {
                        If ((Arg1 == One))
                        {
                            Debug = "GetPanelDetails "
                            Local0 = IPSC /* External reference */
                            Local0 |= (IPAT << 0x08)
                            Local0 += 0x0100
                            Local0 |= (LIDS << 0x10)
                            Local0 += 0x00010000
                            Local0 |= (IBIA << 0x14)
                            Return (Local0)
                        }
                    }
                    Case (0x0F)
                    {
                        If ((Arg1 == One))
                        {
                            Debug = "GetInternalGraphics "
                            Local0 = GIVD /* \_SB_.PC00.GFX0.GIVD */
                            Local0 ^= One
                            Local0 |= (GMFN << One)
                            Local0 |= 0x1800
                            Local0 |= (IDMS << 0x11)
                            Local0 |= (DerefOf (DerefOf (CDCT [HVCO]) [CDVL]) << 
                                0x15)
                            Return (Local0)
                        }
                    }
                    Case (0x10)
                    {
                        If ((Arg1 == One))
                        {
                            Debug = "GetAKSV "
                            Name (KSVP, Package (0x02)
                            {
                                0x80000000, 
                                0x8000
                            })
                            KSVP [Zero] = KSV0 /* External reference */
                            KSVP [One] = KSV1 /* External reference */
                            Return (KSVP) /* \_SB_.PC00.GFX0._DSM.KSVP */
                        }
                    }
                    Case (0x14)
                    {
                        Name (OPTS, Buffer (0x04)
                        {
                             0x00, 0x00, 0x00, 0x00                           // ....
                        })
                        CreateByteField (OPTS, Zero, CMST)
                        CreateByteField (OPTS, One, RTB1)
                        Name (GEDB, Buffer (0x0A)
                        {
                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x00, 0x00                                       // ..
                        })
                        CreateDWordField (GEDB, Zero, GEDF)
                        CreateByteField (GEDB, 0x04, GESF)
                        Sleep (PDI0)
                        OPTS = \_SB.PC00.IMMC (0x08, PDI1, Zero, Zero, Zero)
                        GESF = CMST /* \_SB_.PC00.GFX0._DSM.CMST */
                        GEDF = RTB1 /* \_SB_.PC00.GFX0._DSM.RTB1 */
                        Return (GEDB) /* \_SB_.PC00.GFX0._DSM.GEDB */
                    }

                }
            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }
    }
}



SSDT10
------
DefinitionBlock ("", "SSDT", 2, "LENOVO", "CB-01   ", 0x00000001)
{
    External (_SB_.OSCP, IntObj)
    External (_SB_.PR00, DeviceObj)
    External (_SB_.PR01, DeviceObj)
    External (_SB_.PR02, DeviceObj)
    External (_SB_.PR03, DeviceObj)
    External (_SB_.PR04, DeviceObj)
    External (_SB_.PR05, DeviceObj)
    External (_SB_.PR06, DeviceObj)
    External (_SB_.PR07, DeviceObj)
    External (_SB_.PR08, DeviceObj)
    External (_SB_.PR09, DeviceObj)
    External (_SB_.PR10, DeviceObj)
    External (_SB_.PR11, DeviceObj)
    External (_SB_.PR12, DeviceObj)
    External (_SB_.PR13, DeviceObj)
    External (_SB_.PR14, DeviceObj)
    External (_SB_.PR15, DeviceObj)
    External (_SB_.PR16, DeviceObj)
    External (_SB_.PR17, DeviceObj)
    External (_SB_.PR18, DeviceObj)
    External (_SB_.PR19, DeviceObj)
    External (_SB_.PR20, DeviceObj)
    External (_SB_.PR21, DeviceObj)
    External (_SB_.PR22, DeviceObj)
    External (_SB_.PR23, DeviceObj)
    External (OSYS, UnknownObj)

    Scope (\)
    {
        Name (SSDT, Package (0x1B)
        {
            "CPU0IST ", 
            0x452FD118, 
            0x0000051E, 
            "APIST   ", 
            0x45259418, 
            0x000008E7, 
            "CPU0CST ", 
            0x45258698, 
            0x00000386, 
            "APCST   ", 
            0x45257018, 
            0x0000048A, 
            "CPU0HWP ", 
            0x45259018, 
            0x0000028B, 
            "APHWP   ", 
            0x45257698, 
            0x0000048A, 
            "HWPLVT  ", 
            0x80000000, 
            0x80000000, 
            "CPU0PSD ", 
            0x452FD798, 
            0x000001C6, 
            "APPSD   ", 
            0x45258018, 
            0x000004D4
        })
        Name (\PF00, 0x80000000)
        Name (\PF01, 0x80000000)
        Name (\PF02, 0x80000000)
        Name (\PF03, 0x80000000)
        Name (\PF04, 0x80000000)
        Name (\PF05, 0x80000000)
        Name (\PF06, 0x80000000)
        Name (\PF07, 0x80000000)
        Name (\PF08, 0x80000000)
        Name (\PF09, 0x80000000)
        Name (\PF10, 0x80000000)
        Name (\PF11, 0x80000000)
        Name (\PF12, 0x80000000)
        Name (\PF13, 0x80000000)
        Name (\PF14, 0x80000000)
        Name (\PF15, 0x80000000)
        Name (\PF16, 0x80000000)
        Name (\PF17, 0x80000000)
        Name (\PF18, 0x80000000)
        Name (\PF19, 0x80000000)
        Name (\PF20, 0x80000000)
        Name (\PF21, 0x80000000)
        Name (\PF22, 0x80000000)
        Name (\PF23, 0x80000000)
        Name (\SDTL, Zero)
    }

    Scope (\_SB)
    {
        Name (CTPC, Zero)
        OperationRegion (PNVS, SystemMemory, 0x45B2D000, 0x0065)
        Field (PNVS, AnyAcc, Lock, Preserve)
        {
            PGRV,   8, 
            CFGD,   32, 
            Offset (0x06), 
            ACRT,   8, 
            APSV,   8, 
            AAC0,   8, 
            CPID,   32, 
            CPPC,   8, 
            CLVL,   8, 
            CBMI,   8, 
            PL10,   16, 
            PL11,   16, 
            PL12,   16, 
            PL20,   16, 
            PL21,   16, 
            PL22,   16, 
            PLW0,   8, 
            PLW1,   8, 
            PLW2,   8, 
            CTC0,   8, 
            CTC1,   8, 
            CTC2,   8, 
            TAR0,   8, 
            TAR1,   8, 
            TAR2,   8, 
            PPC0,   8, 
            PPC1,   8, 
            PPC2,   8, 
            Offset (0x29), 
            C6MW,   8, 
            C7MW,   8, 
            CDMW,   8, 
            Offset (0x2E), 
            C6LT,   16, 
            C7LT,   16, 
            CDLT,   16, 
            CDLV,   16, 
            CDPW,   16, 
            MPMF,   8, 
            DTSE,   8, 
            DTSF,   8, 
            PDTS,   8, 
            PKGA,   8, 
            DSIA,   16, 
            DSIL,   8, 
            DSAE,   8, 
            EPCS,   8, 
            EMNA,   64, 
            ELNG,   64, 
            HWPV,   8, 
            HWPI,   8, 
            DTSI,   8, 
            LMPS,   8, 
            ITBM,   8, 
            ITBD,   8, 
            ITBI,   8, 
            ITBS,   8, 
            OBIN,   8, 
            TXTE,   8, 
            HWPE,   8, 
            HTRO,   8, 
            CORE,   32, 
            MDID,   8, 
            SCNT,   8, 
            BCNT,   8
        }

        OperationRegion (BGNV, SystemMemory, 0xFFFF0000, 0xAA55)
        Field (BGNV, AnyAcc, Lock, Preserve)
        {
            BGMA,   64, 
            BGMS,   8, 
            BGIA,   16, 
            BGIL,   16
        }

        OperationRegion (IO_D, SystemIO, \_SB.DSIA, \_SB.DSIL)
        Field (IO_D, ByteAcc, NoLock, Preserve)
        {
            TRPD,   8
        }

        If (CondRefOf (\_SB.BGIL))
        {
            If ((\_SB.BGIL != Zero))
            {
                OperationRegion (IO_P, SystemIO, \_SB.BGIA, \_SB.BGIL)
                Field (IO_P, ByteAcc, NoLock, Preserve)
                {
                    TRPF,   8
                }
            }
        }
    }

    Scope (\_SB.PR00)
    {
        Name (HI0, Zero)
        Name (HC0, Zero)
        Name (HW0, Zero)
        Name (HW2, Zero)
        Name (HP0, Zero)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (CPDC, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Local3 = Buffer (0x04)
                {
                     0x00, 0x00, 0x00, 0x00                           // ....
                }
            Concatenate (Local3, TEMP, Local2)
            Return (COSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2))
        }

        Method (COSC, 4, NotSerialized)
        {
            CreateDWordField (Arg3, Zero, STS0)
            CreateDWordField (Arg0, Zero, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Local0 = ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */
            CreateDWordField (Local0, Zero, EID0)
            CreateDWordField (Local0, 0x04, EID1)
            CreateDWordField (Local0, 0x08, EID2)
            CreateDWordField (Local0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 = 0x06
                Return (Arg3)
            }

            If ((Arg1 != One))
            {
                STS0 = 0x0A
                Return (Arg3)
            }

            Return (Arg3)
        }

        Method (GCAP, 1, Serialized)
        {
            CreateDWordField (Arg0, Zero, STS0)
            CreateDWordField (Arg0, 0x04, CAP0)
            If (((STS0 == 0x06) || (STS0 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS0 & One))
            {
                CAP0 &= 0x0BFF
                Return (Zero)
            }

            PF00 = ((PF00 & 0x7FFFFFFF) | CAP0) /* \_SB_.PR00.GCAP.CAP0 */
            If ((CFGD & 0x72))
            {
                If ((((CFGD & 0x0200) && (PF00 & 0x18)) && !
                    (SDTL & 0x02)))
                {
                    SDTL |= 0x02
                    OperationRegion (CST0, SystemMemory, DerefOf (SSDT [0x07]), DerefOf (SSDT [0x08]))
                    Load (CST0, HC0) /* \_SB_.PR00.HC0_ */
                }
            }

            If (((PF00 & 0x09) == 0x09))
            {
                If (((CFGD & One) && !(SDTL & 0x08)))
                {
                    SDTL |= 0x08
                    OperationRegion (IST0, SystemMemory, DerefOf (SSDT [One]), DerefOf (SSDT [0x02]))
                    Load (IST0, HI0) /* \_SB_.PR00.HI0_ */
                }
            }

            If ((((CFGD & One) || (CFGD & 0x00400000)) && !
                (SDTL & 0x0100)))
            {
                SDTL |= 0x0100
                OperationRegion (PSD0, SystemMemory, DerefOf (SSDT [0x16]), DerefOf (SSDT [0x17]))
                Load (PSD0, HP0) /* \_SB_.PR00.HP0_ */
            }

            If ((OSYS >= 0x07DF))
            {
                If (((CFGD & 0x00400000) && !(SDTL & 0x40)))
                {
                    If ((\_SB.OSCP & 0x40))
                    {
                        SDTL |= 0x40
                        OperationRegion (HWP0, SystemMemory, DerefOf (SSDT [0x0D]), DerefOf (SSDT [0x0E]))
                        Load (HWP0, HW0) /* \_SB_.PR00.HW0_ */
                    }

                    If ((\_SB.OSCP & 0x20))
                    {
                        If (!(\_SB.OSCP & 0x40))
                        {
                            HWPV = Zero
                        }
                    }

                    If ((\_SB.OSCP & 0x40))
                    {
                        HWPV = 0x02
                    }
                }
            }

            Return (Zero)
        }
    }

    Scope (\_SB.PR01)
    {
        Name (HI1, Zero)
        Name (HC1, Zero)
        Name (HW1, Zero)
        Name (HP1, Zero)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_SB.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, ST01)
            CreateDWordField (Arg0, 0x04, CP01)
            If (((ST01 == 0x06) || (ST01 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST01 & One))
            {
                CP01 &= 0x0BFF
                Return (Zero)
            }

            PF01 = ((PF01 & 0x7FFFFFFF) | CP01) /* \_SB_.PR01.GCAP.CP01 */
            If (((PF01 & 0x09) == 0x09))
            {
                APPT ()
            }

            If ((\_SB.OSCP & 0x20))
            {
                HWPT ()
            }

            If ((((PF01 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
            {
                APPS ()
            }

            If ((PF01 & 0x18))
            {
                APCT ()
            }

            PF00 = PF01 /* \PF01 */
            Return (Zero)
        }

        Method (APCT, 0, Serialized)
        {
            If (((CFGD & 0x72) && !(SDTL & 0x20)))
            {
                SDTL |= 0x20
                OperationRegion (CST1, SystemMemory, DerefOf (SSDT [0x0A]), DerefOf (SSDT [0x0B]))
                Load (CST1, HC1) /* \_SB_.PR01.HC1_ */
            }
        }

        Method (APPT, 0, Serialized)
        {
            If (((CFGD & One) && !(SDTL & 0x10)))
            {
                SDTL |= 0x10
                OperationRegion (IST1, SystemMemory, DerefOf (SSDT [0x04]), DerefOf (SSDT [0x05]))
                Load (IST1, HI1) /* \_SB_.PR01.HI1_ */
            }
        }

        Method (APPS, 0, Serialized)
        {
            If ((((CFGD & One) || (CFGD & 0x00400000)) && !
                (SDTL & 0x0200)))
            {
                SDTL |= 0x0200
                OperationRegion (PSD1, SystemMemory, DerefOf (SSDT [0x19]), DerefOf (SSDT [0x1A]))
                Load (PSD1, HP1) /* \_SB_.PR01.HP1_ */
            }
        }

        Method (HWPT, 0, Serialized)
        {
            If ((OSYS >= 0x07DF))
            {
                If (((CFGD & 0x00400000) && !(SDTL & 0x80)))
                {
                    SDTL |= 0x80
                    OperationRegion (HWP1, SystemMemory, DerefOf (SSDT [0x10]), DerefOf (SSDT [0x11]))
                    Load (HWP1, HW1) /* \_SB_.PR01.HW1_ */
                }
            }
        }
    }

    Scope (\_SB.PR02)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_SB.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, ST02)
            CreateDWordField (Arg0, 0x04, CP02)
            If (((ST02 == 0x06) || (ST02 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST02 & One))
            {
                CP02 &= 0x0BFF
                Return (Zero)
            }

            PF02 = ((PF02 & 0x7FFFFFFF) | CP02) /* \_SB_.PR02.GCAP.CP02 */
            If (((PF02 & 0x09) == 0x09))
            {
                \_SB.PR01.APPT ()
            }

            If ((\_SB.OSCP & 0x20))
            {
                \_SB.PR01.HWPT ()
            }

            If ((((PF02 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
            {
                \_SB.PR01.APPS ()
            }

            If ((PF02 & 0x18))
            {
                \_SB.PR01.APCT ()
            }

            PF00 = PF02 /* \PF02 */
            Return (Zero)
        }
    }

    Scope (\_SB.PR03)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_SB.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, ST03)
            CreateDWordField (Arg0, 0x04, CP03)
            If (((ST03 == 0x06) || (ST03 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST03 & One))
            {
                CP03 &= 0x0BFF
                Return (Zero)
            }

            PF03 = ((PF03 & 0x7FFFFFFF) | CP03) /* \_SB_.PR03.GCAP.CP03 */
            If (((PF03 & 0x09) == 0x09))
            {
                \_SB.PR01.APPT ()
            }

            If ((\_SB.OSCP & 0x20))
            {
                \_SB.PR01.HWPT ()
            }

            If ((((PF03 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
            {
                \_SB.PR01.APPS ()
            }

            If ((PF03 & 0x18))
            {
                \_SB.PR01.APCT ()
            }

            PF00 = PF03 /* \PF03 */
            Return (Zero)
        }
    }

    Scope (\_SB.PR04)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_SB.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, ST04)
            CreateDWordField (Arg0, 0x04, CP04)
            If (((ST04 == 0x06) || (ST04 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST04 & One))
            {
                CP04 &= 0x0BFF
                Return (Zero)
            }

            PF04 = ((PF04 & 0x7FFFFFFF) | CP04) /* \_SB_.PR04.GCAP.CP04 */
            If (((PF04 & 0x09) == 0x09))
            {
                \_SB.PR01.APPT ()
            }

            If ((\_SB.OSCP & 0x20))
            {
                \_SB.PR01.HWPT ()
            }

            If ((((PF04 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
            {
                \_SB.PR01.APPS ()
            }

            If ((PF04 & 0x18))
            {
                \_SB.PR01.APCT ()
            }

            PF00 = PF04 /* \PF04 */
            Return (Zero)
        }
    }

    Scope (\_SB.PR05)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_SB.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, ST05)
            CreateDWordField (Arg0, 0x04, CP05)
            If (((ST05 == 0x06) || (ST05 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST05 & One))
            {
                CP05 &= 0x0BFF
                Return (Zero)
            }

            PF05 = ((PF05 & 0x7FFFFFFF) | CP05) /* \_SB_.PR05.GCAP.CP05 */
            If (((PF05 & 0x09) == 0x09))
            {
                \_SB.PR01.APPT ()
            }

            If ((\_SB.OSCP & 0x20))
            {
                \_SB.PR01.HWPT ()
            }

            If ((((PF05 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
            {
                \_SB.PR01.APPS ()
            }

            If ((PF05 & 0x18))
            {
                \_SB.PR01.APCT ()
            }

            PF00 = PF05 /* \PF05 */
            Return (Zero)
        }
    }

    Scope (\_SB.PR06)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_SB.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, ST06)
            CreateDWordField (Arg0, 0x04, CP06)
            If (((ST06 == 0x06) || (ST06 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST06 & One))
            {
                CP06 &= 0x0BFF
                Return (Zero)
            }

            PF06 = ((PF06 & 0x7FFFFFFF) | CP06) /* \_SB_.PR06.GCAP.CP06 */
            If (((PF06 & 0x09) == 0x09))
            {
                \_SB.PR01.APPT ()
            }

            If ((\_SB.OSCP & 0x20))
            {
                \_SB.PR01.HWPT ()
            }

            If ((((PF06 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
            {
                \_SB.PR01.APPS ()
            }

            If ((PF06 & 0x18))
            {
                \_SB.PR01.APCT ()
            }

            PF00 = PF06 /* \PF06 */
            Return (Zero)
        }
    }

    Scope (\_SB.PR07)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_SB.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, ST07)
            CreateDWordField (Arg0, 0x04, CP07)
            If (((ST07 == 0x06) || (ST07 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST07 & One))
            {
                CP07 &= 0x0BFF
                Return (Zero)
            }

            PF07 = ((PF07 & 0x7FFFFFFF) | CP07) /* \_SB_.PR07.GCAP.CP07 */
            If (((PF07 & 0x09) == 0x09))
            {
                \_SB.PR01.APPT ()
            }

            If ((\_SB.OSCP & 0x20))
            {
                \_SB.PR01.HWPT ()
            }

            If ((((PF07 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
            {
                \_SB.PR01.APPS ()
            }

            If ((PF07 & 0x18))
            {
                \_SB.PR01.APCT ()
            }

            PF00 = PF07 /* \PF07 */
            Return (Zero)
        }
    }

    Scope (\_SB.PR08)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_SB.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, ST08)
            CreateDWordField (Arg0, 0x04, CP08)
            If (((ST08 == 0x06) || (ST08 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST08 & One))
            {
                CP08 &= 0x0BFF
                Return (Zero)
            }

            PF08 = ((PF08 & 0x7FFFFFFF) | CP08) /* \_SB_.PR08.GCAP.CP08 */
            If (((PF08 & 0x09) == 0x09))
            {
                \_SB.PR01.APPT ()
            }

            If ((\_SB.OSCP & 0x20))
            {
                \_SB.PR01.HWPT ()
            }

            If ((((PF08 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
            {
                \_SB.PR01.APPS ()
            }

            If ((PF08 & 0x18))
            {
                \_SB.PR01.APCT ()
            }

            PF00 = PF08 /* \PF08 */
            Return (Zero)
        }
    }

    Scope (\_SB.PR09)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_SB.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, ST09)
            CreateDWordField (Arg0, 0x04, CP09)
            If (((ST09 == 0x06) || (ST09 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST09 & One))
            {
                CP09 &= 0x0BFF
                Return (Zero)
            }

            PF09 = ((PF09 & 0x7FFFFFFF) | CP09) /* \_SB_.PR09.GCAP.CP09 */
            If (((PF09 & 0x09) == 0x09))
            {
                \_SB.PR01.APPT ()
            }

            If ((\_SB.OSCP & 0x20))
            {
                \_SB.PR01.HWPT ()
            }

            If ((((PF09 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
            {
                \_SB.PR01.APPS ()
            }

            If ((PF09 & 0x18))
            {
                \_SB.PR01.APCT ()
            }

            PF00 = PF09 /* \PF09 */
            Return (Zero)
        }
    }

    Scope (\_SB.PR10)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_SB.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, ST10)
            CreateDWordField (Arg0, 0x04, CP10)
            If (((ST10 == 0x06) || (ST10 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST10 & One))
            {
                CP10 = (ST10 & 0x0BFF)
                Return (Zero)
            }

            PF10 = ((PF10 & 0x7FFFFFFF) | CP10) /* \_SB_.PR10.GCAP.CP10 */
            If (((PF10 & 0x09) == 0x09))
            {
                \_SB.PR01.APPT ()
            }

            If ((\_SB.OSCP & 0x20))
            {
                \_SB.PR01.HWPT ()
            }

            If ((((PF10 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
            {
                \_SB.PR01.APPS ()
            }

            If ((PF10 & 0x18))
            {
                \_SB.PR01.APCT ()
            }

            PF00 = PF10 /* \PF10 */
            Return (Zero)
        }
    }

    Scope (\_SB.PR11)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_SB.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, ST11)
            CreateDWordField (Arg0, 0x04, CP11)
            If (((ST11 == 0x06) || (ST11 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST11 & One))
            {
                CP11 = (ST11 & 0x0BFF)
                Return (Zero)
            }

            PF11 = ((PF11 & 0x7FFFFFFF) | CP11) /* \_SB_.PR11.GCAP.CP11 */
            If (((PF11 & 0x09) == 0x09))
            {
                \_SB.PR01.APPT ()
            }

            If ((\_SB.OSCP & 0x20))
            {
                \_SB.PR01.HWPT ()
            }

            If ((((PF11 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
            {
                \_SB.PR01.APPS ()
            }

            If ((PF11 & 0x18))
            {
                \_SB.PR01.APCT ()
            }

            PF00 = PF11 /* \PF11 */
            Return (Zero)
        }
    }

    Scope (\_SB.PR12)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_SB.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, ST12)
            CreateDWordField (Arg0, 0x04, CP12)
            If (((ST12 == 0x06) || (ST12 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST12 & One))
            {
                CP12 = (ST12 & 0x0BFF)
                Return (Zero)
            }

            PF12 = ((PF12 & 0x7FFFFFFF) | CP12) /* \_SB_.PR12.GCAP.CP12 */
            If (((PF12 & 0x09) == 0x09))
            {
                \_SB.PR01.APPT ()
            }

            If ((\_SB.OSCP & 0x20))
            {
                \_SB.PR01.HWPT ()
            }

            If ((((PF12 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
            {
                \_SB.PR01.APPS ()
            }

            If ((PF12 & 0x18))
            {
                \_SB.PR01.APCT ()
            }

            PF00 = PF12 /* \PF12 */
            Return (Zero)
        }
    }

    Scope (\_SB.PR13)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_SB.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, ST13)
            CreateDWordField (Arg0, 0x04, CP13)
            If (((ST13 == 0x06) || (ST13 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST13 & One))
            {
                CP13 = (ST13 & 0x0BFF)
                Return (Zero)
            }

            PF13 = ((PF13 & 0x7FFFFFFF) | CP13) /* \_SB_.PR13.GCAP.CP13 */
            If (((PF13 & 0x09) == 0x09))
            {
                \_SB.PR01.APPT ()
            }

            If ((\_SB.OSCP & 0x20))
            {
                \_SB.PR01.HWPT ()
            }

            If ((((PF13 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
            {
                \_SB.PR01.APPS ()
            }

            If ((PF13 & 0x18))
            {
                \_SB.PR01.APCT ()
            }

            PF00 = PF13 /* \PF13 */
            Return (Zero)
        }
    }

    Scope (\_SB.PR14)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_SB.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, ST14)
            CreateDWordField (Arg0, 0x04, CP14)
            If (((ST14 == 0x06) || (ST14 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST14 & One))
            {
                CP14 = (ST14 & 0x0BFF)
                Return (Zero)
            }

            PF14 = ((PF14 & 0x7FFFFFFF) | CP14) /* \_SB_.PR14.GCAP.CP14 */
            If (((PF14 & 0x09) == 0x09))
            {
                \_SB.PR01.APPT ()
            }

            If ((\_SB.OSCP & 0x20))
            {
                \_SB.PR01.HWPT ()
            }

            If ((((PF14 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
            {
                \_SB.PR01.APPS ()
            }

            If ((PF14 & 0x18))
            {
                \_SB.PR01.APCT ()
            }

            PF00 = PF14 /* \PF14 */
            Return (Zero)
        }
    }

    Scope (\_SB.PR15)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_SB.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, ST15)
            CreateDWordField (Arg0, 0x04, CP15)
            If (((ST15 == 0x06) || (ST15 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST15 & One))
            {
                CP15 = (ST15 & 0x0BFF)
                Return (Zero)
            }

            PF15 = ((PF15 & 0x7FFFFFFF) | CP15) /* \_SB_.PR15.GCAP.CP15 */
            If (((PF15 & 0x09) == 0x09))
            {
                \_SB.PR01.APPT ()
            }

            If ((\_SB.OSCP & 0x20))
            {
                \_SB.PR01.HWPT ()
            }

            If ((((PF15 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
            {
                \_SB.PR01.APPS ()
            }

            If ((PF15 & 0x18))
            {
                \_SB.PR01.APCT ()
            }

            PF00 = PF15 /* \PF15 */
            Return (Zero)
        }
    }

    Scope (\_SB.PR16)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_SB.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, ST16)
            CreateDWordField (Arg0, 0x04, CP16)
            If (((ST16 == 0x06) || (ST16 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST16 & One))
            {
                CP16 = (ST16 & 0x0BFF)
                Return (Zero)
            }

            PF16 = ((PF15 & 0x7FFFFFFF) | CP16) /* \_SB_.PR16.GCAP.CP16 */
            If (((PF16 & 0x09) == 0x09))
            {
                \_SB.PR01.APPT ()
            }

            If ((\_SB.OSCP & 0x20))
            {
                \_SB.PR01.HWPT ()
            }

            If ((((PF16 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
            {
                \_SB.PR01.APPS ()
            }

            If ((PF16 & 0x18))
            {
                \_SB.PR01.APCT ()
            }

            PF00 = PF16 /* \PF16 */
            Return (Zero)
        }
    }

    Scope (\_SB.PR17)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_SB.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, ST17)
            CreateDWordField (Arg0, 0x04, CP17)
            If (((ST17 == 0x06) || (ST17 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST17 & One))
            {
                CP17 = (ST17 & 0x0BFF)
                Return (Zero)
            }

            PF17 = ((PF17 & 0x7FFFFFFF) | CP17) /* \_SB_.PR17.GCAP.CP17 */
            If (((PF17 & 0x09) == 0x09))
            {
                \_SB.PR01.APPT ()
            }

            If ((\_SB.OSCP & 0x20))
            {
                \_SB.PR01.HWPT ()
            }

            If ((((PF17 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
            {
                \_SB.PR01.APPS ()
            }

            If ((PF17 & 0x18))
            {
                \_SB.PR01.APCT ()
            }

            PF00 = PF17 /* \PF17 */
            Return (Zero)
        }
    }

    Scope (\_SB.PR18)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_SB.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, ST18)
            CreateDWordField (Arg0, 0x04, CP18)
            If (((ST18 == 0x06) || (ST18 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST18 & One))
            {
                CP18 = (ST18 & 0x0BFF)
                Return (Zero)
            }

            PF18 = ((PF18 & 0x7FFFFFFF) | CP18) /* \_SB_.PR18.GCAP.CP18 */
            If (((PF18 & 0x09) == 0x09))
            {
                \_SB.PR01.APPT ()
            }

            If ((\_SB.OSCP & 0x20))
            {
                \_SB.PR01.HWPT ()
            }

            If ((((PF18 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
            {
                \_SB.PR01.APPS ()
            }

            If ((PF18 & 0x18))
            {
                \_SB.PR01.APCT ()
            }

            PF00 = PF18 /* \PF18 */
            Return (Zero)
        }
    }

    Scope (\_SB.PR19)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_SB.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, ST19)
            CreateDWordField (Arg0, 0x04, CP19)
            If (((ST19 == 0x06) || (ST19 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST19 & One))
            {
                CP19 = (ST19 & 0x0BFF)
                Return (Zero)
            }

            PF19 = ((PF19 & 0x7FFFFFFF) | CP19) /* \_SB_.PR19.GCAP.CP19 */
            If (((PF19 & 0x09) == 0x09))
            {
                \_SB.PR01.APPT ()
            }

            If ((\_SB.OSCP & 0x20))
            {
                \_SB.PR01.HWPT ()
            }

            If ((((PF19 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
            {
                \_SB.PR01.APPS ()
            }

            If ((PF19 & 0x18))
            {
                \_SB.PR01.APCT ()
            }

            PF00 = PF19 /* \PF19 */
            Return (Zero)
        }
    }

    Scope (\_SB.PR20)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_SB.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, ST20)
            CreateDWordField (Arg0, 0x04, CP20)
            If (((ST20 == 0x06) || (ST20 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST20 & One))
            {
                CP20 = (ST20 & 0x0BFF)
                Return (Zero)
            }

            PF20 = ((PF20 & 0x7FFFFFFF) | CP20) /* \_SB_.PR20.GCAP.CP20 */
            If (((PF20 & 0x09) == 0x09))
            {
                \_SB.PR01.APPT ()
            }

            If ((\_SB.OSCP & 0x20))
            {
                \_SB.PR01.HWPT ()
            }

            If ((((PF20 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
            {
                \_SB.PR01.APPS ()
            }

            If ((PF20 & 0x18))
            {
                \_SB.PR01.APCT ()
            }

            PF00 = PF20 /* \PF20 */
            Return (Zero)
        }
    }

    Scope (\_SB.PR21)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_SB.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, ST21)
            CreateDWordField (Arg0, 0x04, CP21)
            If (((ST21 == 0x06) || (ST21 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST21 & One))
            {
                CP21 = (ST21 & 0x0BFF)
                Return (Zero)
            }

            PF21 = ((PF21 & 0x7FFFFFFF) | CP21) /* \_SB_.PR21.GCAP.CP21 */
            If (((PF21 & 0x09) == 0x09))
            {
                \_SB.PR01.APPT ()
            }

            If ((\_SB.OSCP & 0x21))
            {
                \_SB.PR01.HWPT ()
            }

            If ((((PF21 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
            {
                \_SB.PR01.APPS ()
            }

            If ((PF21 & 0x18))
            {
                \_SB.PR01.APCT ()
            }

            PF00 = PF21 /* \PF21 */
            Return (Zero)
        }
    }

    Scope (\_SB.PR22)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_SB.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, ST22)
            CreateDWordField (Arg0, 0x04, CP22)
            If (((ST22 == 0x06) || (ST22 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST22 & One))
            {
                CP22 = (ST22 & 0x0BFF)
                Return (Zero)
            }

            PF22 = ((PF22 & 0x7FFFFFFF) | CP22) /* \_SB_.PR22.GCAP.CP22 */
            If (((PF22 & 0x09) == 0x09))
            {
                \_SB.PR01.APPT ()
            }

            If ((\_SB.OSCP & 0x20))
            {
                \_SB.PR01.HWPT ()
            }

            If ((((PF22 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
            {
                \_SB.PR01.APPS ()
            }

            If ((PF22 & 0x18))
            {
                \_SB.PR01.APCT ()
            }

            PF00 = PF22 /* \PF22 */
            Return (Zero)
        }
    }

    Scope (\_SB.PR23)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_SB.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, ST23)
            CreateDWordField (Arg0, 0x04, CP23)
            If (((ST23 == 0x06) || (ST23 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST23 & One))
            {
                CP23 = (ST23 & 0x0BFF)
                Return (Zero)
            }

            PF23 = ((PF23 & 0x7FFFFFFF) | CP23) /* \_SB_.PR23.GCAP.CP23 */
            If (((PF23 & 0x09) == 0x09))
            {
                \_SB.PR01.APPT ()
            }

            If ((\_SB.OSCP & 0x20))
            {
                \_SB.PR01.HWPT ()
            }

            If ((((PF23 & 0x09) == 0x09) || (\_SB.OSCP & 0x20)))
            {
                \_SB.PR01.APPS ()
            }

            If ((PF23 & 0x18))
            {
                \_SB.PR01.APCT ()
            }

            PF00 = PF23 /* \PF23 */
            Return (Zero)
        }
    }

    Scope (\_SB)
    {
        If ((TXTE == One))
        {
            Device (ACM)
            {
                Name (_HID, "INTC1025")  // _HID: Hardware ID
                Method (_CID, 0, NotSerialized)  // _CID: Compatible ID
                {
                    Local0 = (CPID & 0xFFFFFFF0)
                    If (((Local0 == 0x000806C0) || (Local0 == 0x000806D0)))
                    {
                        Return ("INT_TGL_SINIT")
                    }

                    If (((Local0 == 0x000A0680) || (Local0 == 0x000A0670)))
                    {
                        Return ("INT_RKL_SINIT")
                    }

                    Return ("INT_UNK_SINIT")
                }
            }
        }
    }
}



SSDT11
------
DefinitionBlock ("", "SSDT", 2, "PmRef", "Cpu0Psd", 0x00003000)
{
    External (_SB_.CFGD, FieldUnitObj)
    External (_SB_.PR00, DeviceObj)
    External (BCNT, UnknownObj)
    External (CORE, UnknownObj)
    External (HTRO, UnknownObj)
    External (MDID, UnknownObj)
    External (PF00, IntObj)
    External (SCNT, UnknownObj)
    External (TCNT, FieldUnitObj)

    Scope (\_SB.PR00)
    {
        Method (GPSD, 1, NotSerialized)
        {
            Name (HPSD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    Zero, 
                    Zero, 
                    0xFE, 
                    0x80
                }
            })
            Name (SPSD, Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    Zero, 
                    Zero, 
                    0xFC, 
                    0x80
                }
            })
            If (((\_SB.CFGD & 0x02000000) && (\_SB.CFGD & 0x00400000)))
            {
                DerefOf (HPSD [Zero]) [0x02] = Arg0
                DerefOf (HPSD [Zero]) [0x04] = One
            }
            ElseIf (HTRO)
            {
                If (((CORE >> Arg0) & One))
                {
                    DerefOf (HPSD [Zero]) [0x04] = SCNT /* External reference */
                    DerefOf (SPSD [Zero]) [0x04] = SCNT /* External reference */
                    If ((MDID && One))
                    {
                        DerefOf (HPSD [Zero]) [0x02] = 0xFF
                    }
                    ElseIf ((MDID && 0x02))
                    {
                        DerefOf (HPSD [Zero]) [0x02] = 0xFE
                    }
                }
                Else
                {
                    DerefOf (HPSD [Zero]) [0x04] = BCNT /* External reference */
                    DerefOf (SPSD [Zero]) [0x04] = BCNT /* External reference */
                }
            }
            Else
            {
                DerefOf (HPSD [Zero]) [0x04] = TCNT /* External reference */
                DerefOf (SPSD [Zero]) [0x04] = TCNT /* External reference */
            }

            If ((PF00 & 0x0800))
            {
                Return (HPSD) /* \_SB_.PR00.GPSD.HPSD */
            }

            Return (SPSD) /* \_SB_.PR00.GPSD.SPSD */
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (GPSD (Zero))
        }
    }
}



SSDT12
------
DefinitionBlock ("", "SSDT", 2, "LENOVO", "CB-01   ", 0x00000001)
{
    External (_SB_.PC00.LPCB.EC0_.CHKS, MethodObj)    // 0 Arguments
    External (_SB_.PC00.LPCB.EC0_.ECAV, UnknownObj)
    External (_SB_.PC00.LPCB.EC0_.LFCM, UnknownObj)
    External (_SB_.PC00.XHCI.RHUB, DeviceObj)
    External (ADBG, MethodObj)    // 1 Arguments
    External (P8XH, MethodObj)    // 2 Arguments
    External (TBTS, UnknownObj)
    External (TP1D, UnknownObj)
    External (TP1P, UnknownObj)
    External (TP1T, UnknownObj)
    External (TP2D, UnknownObj)
    External (TP2P, UnknownObj)
    External (TP2T, UnknownObj)
    External (TP3D, UnknownObj)
    External (TP3P, UnknownObj)
    External (TP3T, UnknownObj)
    External (TP4D, UnknownObj)
    External (TP4P, UnknownObj)
    External (TP4T, UnknownObj)
    External (TP5D, UnknownObj)
    External (TP5P, UnknownObj)
    External (TP5T, UnknownObj)
    External (TP6D, UnknownObj)
    External (TP6P, UnknownObj)
    External (TP6T, UnknownObj)
    External (TTUP, UnknownObj)
    External (UBCB, UnknownObj)
    External (UCMS, UnknownObj)
    External (USTC, UnknownObj)
    External (XDCE, UnknownObj)

    Scope (\_SB)
    {
        Device (UBTC)
        {
            Name (_HID, EisaId ("USBC000"))  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0CA0"))  // _CID: Compatible ID
            Name (_UID, Zero)  // _UID: Unique ID
            Name (_DDN, "USB Type C")  // _DDN: DOS Device Name
            Name (_ADR, One)  // _ADR: Address
            OperationRegion (PRT0, SystemIO, 0x80, 0x02)
            Field (PRT0, WordAcc, Lock, Preserve)
            {
                P80B,   16
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                Sleep (0x03E8)
                Sleep (0x64)
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                Sleep (0x03E8)
                Sleep (0x64)
            }

            OperationRegion (ECMS, SystemIO, 0x72, 0x02)
            Field (ECMS, ByteAcc, Lock, Preserve)
            {
                INDX,   8, 
                DATA,   8
            }

            Method (RECM, 1, Serialized)
            {
                INDX = Arg0
                Return (DATA) /* \_SB_.UBTC.DATA */
            }

            Method (WECM, 2, Serialized)
            {
                INDX = Arg0
                DATA = Arg1
            }

            Method (ECMF, 1, Serialized)
            {
                INDX = RECM (0x67)
                DATA = Arg0
                WECM (0x67, (RECM (0x67) + One))
            }

            Name (CRS, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y00)
            })
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                CreateDWordField (CRS, \_SB.UBTC._Y00._BAS, CBAS)  // _BAS: Base Address
                CBAS = UBCB /* External reference */
                Return (CRS) /* \_SB_.UBTC.CRS_ */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((USTC == One))
                {
                    If ((UCMS == One))
                    {
                        Return (0x0F)
                    }
                }

                Return (0x0F)
            }

            Method (RUCC, 2, Serialized)
            {
                Switch (ToInteger (Arg0))
                {
                    Case (One)
                    {
                        If ((Arg1 == One))
                        {
                            Return (\_SB.UBTC.CR01._UPC ())
                        }
                        Else
                        {
                            Return (\_SB.UBTC.CR01._PLD ())
                        }
                    }
                    Case (0x02)
                    {
                        If ((Arg1 == One))
                        {
                            Return (\_SB.UBTC.CR02._UPC ())
                        }
                        Else
                        {
                            Return (\_SB.UBTC.CR02._PLD ())
                        }
                    }
                    Case (0x03)
                    {
                        If ((Arg1 == One))
                        {
                            Return (\_SB.UBTC.CR03._UPC ())
                        }
                        Else
                        {
                            Return (\_SB.UBTC.CR03._PLD ())
                        }
                    }
                    Case (0x04)
                    {
                        If ((Arg1 == One))
                        {
                            Return (\_SB.UBTC.CR04._UPC ())
                        }
                        Else
                        {
                            Return (\_SB.UBTC.CR04._PLD ())
                        }
                    }
                    Case (0x05)
                    {
                        If ((Arg1 == One))
                        {
                            Return (\_SB.UBTC.CR05._UPC ())
                        }
                        Else
                        {
                            Return (\_SB.UBTC.CR05._PLD ())
                        }
                    }
                    Case (0x06)
                    {
                        If ((Arg1 == One))
                        {
                            Return (\_SB.UBTC.CR06._UPC ())
                        }
                        Else
                        {
                            Return (\_SB.UBTC.CR06._PLD ())
                        }
                    }
                    Default
                    {
                        If ((Arg1 == One))
                        {
                            Return (TUPC (Zero))
                        }
                        Else
                        {
                            Return (TPLD (Zero, Zero))
                        }
                    }

                }
            }

            Method (FPMN, 1, Serialized)
            {
                Switch (ToInteger (Arg0))
                {
                    Case (One)
                    {
                        Local0 = (TP1D >> One)
                        Local0 &= 0x03
                        Local1 = (TP1D & One)
                        Local2 = TP1P /* External reference */
                        Local3 = TP1T /* External reference */
                    }
                    Case (0x02)
                    {
                        Local0 = (TP2D >> One)
                        Local0 &= 0x03
                        Local1 = (TP2D & One)
                        Local2 = TP2P /* External reference */
                        Local3 = TP2T /* External reference */
                    }
                    Case (0x03)
                    {
                        Local0 = (TP3D >> One)
                        Local0 &= 0x03
                        Local1 = (TP3D & One)
                        Local2 = TP3P /* External reference */
                        Local3 = TP3T /* External reference */
                    }
                    Case (0x04)
                    {
                        Local0 = (TP4D >> One)
                        Local0 &= 0x03
                        Local1 = (TP4D & One)
                        Local2 = TP4P /* External reference */
                        Local3 = TP4T /* External reference */
                    }
                    Case (0x05)
                    {
                        Local0 = (TP5D >> One)
                        Local0 &= 0x03
                        Local1 = (TP5D & One)
                        Local2 = TP5P /* External reference */
                        Local3 = TP5T /* External reference */
                    }
                    Case (0x06)
                    {
                        Local0 = (TP6D >> One)
                        Local0 &= 0x03
                        Local1 = (TP6D & One)
                        Local2 = TP6P /* External reference */
                        Local3 = TP6T /* External reference */
                    }
                    Default
                    {
                        Local0 = 0xFF
                        Local1 = Zero
                        Local2 = Zero
                        Local3 = Zero
                    }

                }

                If ((Local0 == Zero))
                {
                    Return (Local2)
                }
                ElseIf (((Local0 == One) || (Local0 == 0x02)))
                {
                    If ((Local1 == One))
                    {
                        Return (Local2)
                    }
                    Else
                    {
                        Return (Local3)
                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (TPLD, 2, Serialized)
            {
                Name (PCKG, Package (0x01)
                {
                    Buffer (0x10) {}
                })
                CreateField (DerefOf (PCKG [Zero]), Zero, 0x07, REV)
                REV = One
                CreateField (DerefOf (PCKG [Zero]), 0x40, One, VISI)
                VISI = Arg0
                CreateField (DerefOf (PCKG [Zero]), 0x57, 0x08, GPOS)
                GPOS = Arg1
                CreateField (DerefOf (PCKG [Zero]), 0x4A, 0x04, SHAP)
                SHAP = One
                CreateField (DerefOf (PCKG [Zero]), 0x20, 0x10, WID)
                WID = 0x08
                CreateField (DerefOf (PCKG [Zero]), 0x30, 0x10, HGT)
                HGT = 0x03
                Return (PCKG) /* \_SB_.UBTC.TPLD.PCKG */
            }

            Method (TUPC, 1, Serialized)
            {
                Name (PCKG, Package (0x04)
                {
                    One, 
                    Zero, 
                    Zero, 
                    Zero
                })
                PCKG [One] = Arg0
                Return (PCKG) /* \_SB_.UBTC.TUPC.PCKG */
            }

            If ((TTUP >= One))
            {
                Device (CR01)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (TPLD (One, 0x03))
                    }

                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (TUPC (0x0A))
                    }
                }
            }

            If ((TTUP >= 0x02))
            {
                Device (CR02)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (TPLD (One, 0x05))
                    }

                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (TUPC (0x0A))
                    }
                }
            }

            If ((TTUP >= 0x03))
            {
                Device (CR03)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (TPLD (One, FPMN (0x03)))
                    }

                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (TUPC (0x09))
                    }
                }
            }

            If ((TTUP >= 0x04))
            {
                Device (CR04)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (TPLD (One, FPMN (0x04)))
                    }

                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (TUPC (0x09))
                    }
                }
            }

            If ((TTUP >= 0x05))
            {
                Device (CR05)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (TPLD (One, FPMN (0x05)))
                    }

                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (TUPC (0x09))
                    }
                }
            }

            If ((TTUP >= 0x06))
            {
                Device (CR06)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (TPLD (One, FPMN (0x06)))
                    }

                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (TUPC (0x09))
                    }
                }
            }

            OperationRegion (E9FF, SystemMemory, 0xFE0B0980, 0x10)
            Field (E9FF, AnyAcc, Lock, Preserve)
            {
                Offset (0x09), 
                EC89,   8
            }

            OperationRegion (USBC, SystemMemory, UBCB, 0x38)
            Field (USBC, ByteAcc, Lock, Preserve)
            {
                VER1,   8, 
                VER2,   8, 
                RSV1,   8, 
                RSV2,   8, 
                CCI0,   8, 
                CCI1,   8, 
                CCI2,   8, 
                CCI3,   8, 
                CTL0,   8, 
                CTL1,   8, 
                CTL2,   8, 
                CTL3,   8, 
                CTL4,   8, 
                CTL5,   8, 
                CTL6,   8, 
                CTL7,   8, 
                MGI0,   8, 
                MGI1,   8, 
                MGI2,   8, 
                MGI3,   8, 
                MGI4,   8, 
                MGI5,   8, 
                MGI6,   8, 
                MGI7,   8, 
                MGI8,   8, 
                MGI9,   8, 
                MGIA,   8, 
                MGIB,   8, 
                MGIC,   8, 
                MGID,   8, 
                MGIE,   8, 
                MGIF,   8, 
                MGO0,   8, 
                MGO1,   8, 
                MGO2,   8, 
                MGO3,   8, 
                MGO4,   8, 
                MGO5,   8, 
                MGO6,   8, 
                MGO7,   8, 
                MGO8,   8, 
                MGO9,   8, 
                MGOA,   8, 
                MGOB,   8, 
                MGOC,   8, 
                MGOD,   8, 
                MGOE,   8, 
                MGOF,   8
            }

            OperationRegion (ECSM, SystemMemory, 0xFE0B0460, 0x30)
            Field (ECSM, AnyAcc, Lock, Preserve)
            {
                HMPR,   8, 
                    ,   7, 
                HMDN,   1, 
                HADD,   8, 
                HCMD,   8, 
                HD00,   8, 
                HD01,   8, 
                HD02,   8, 
                HD03,   8, 
                HD04,   8, 
                HD05,   8, 
                HD06,   8, 
                HD07,   8, 
                HD08,   8, 
                HD09,   8, 
                HD0A,   8, 
                HD0B,   8, 
                HD0C,   8, 
                HD0D,   8, 
                HD0E,   8, 
                HD0F,   8, 
                Offset (0x24), 
                HCNT,   8
            }

            Mutex (UBSY, 0x00)
            Method (ECWR, 0, Serialized)
            {
                P80B = 0x4C
                If (\_SB.PC00.LPCB.EC0.ECAV)
                {
                    If ((Acquire (\_SB.PC00.LPCB.EC0.LFCM, 0xA000) == Zero))
                    {
                        Acquire (UBSY, 0xFFFF)
                        \_SB.PC00.LPCB.EC0.CHKS ()
                        HADD = 0x02
                        Sleep (One)
                        HCMD = 0x06
                        Sleep (One)
                        HD00 = MGO0 /* \_SB_.UBTC.MGO0 */
                        Sleep (One)
                        HD01 = MGO1 /* \_SB_.UBTC.MGO1 */
                        Sleep (One)
                        HD02 = MGO2 /* \_SB_.UBTC.MGO2 */
                        Sleep (One)
                        HD03 = MGO3 /* \_SB_.UBTC.MGO3 */
                        Sleep (One)
                        HD04 = MGO4 /* \_SB_.UBTC.MGO4 */
                        Sleep (One)
                        HD05 = MGO5 /* \_SB_.UBTC.MGO5 */
                        Sleep (One)
                        HD06 = MGO6 /* \_SB_.UBTC.MGO6 */
                        Sleep (One)
                        HD07 = MGO7 /* \_SB_.UBTC.MGO7 */
                        Sleep (One)
                        HD08 = MGO8 /* \_SB_.UBTC.MGO8 */
                        Sleep (One)
                        HD09 = MGO9 /* \_SB_.UBTC.MGO9 */
                        Sleep (One)
                        HD0A = MGOA /* \_SB_.UBTC.MGOA */
                        Sleep (One)
                        HD0B = MGOB /* \_SB_.UBTC.MGOB */
                        Sleep (One)
                        HD0C = MGOC /* \_SB_.UBTC.MGOC */
                        Sleep (One)
                        HD0D = MGOD /* \_SB_.UBTC.MGOD */
                        Sleep (One)
                        HD0E = MGOE /* \_SB_.UBTC.MGOE */
                        Sleep (One)
                        HD0F = MGOF /* \_SB_.UBTC.MGOF */
                        Sleep (One)
                        HCNT = 0x10
                        Sleep (One)
                        HMPR = 0x0A
                        EC89 = 0x08
                        \_SB.PC00.LPCB.EC0.CHKS ()
                        HADD = 0x02
                        Sleep (One)
                        HCMD = 0x04
                        Sleep (One)
                        HD00 = CTL0 /* \_SB_.UBTC.CTL0 */
                        Sleep (One)
                        HD01 = CTL1 /* \_SB_.UBTC.CTL1 */
                        Sleep (One)
                        HD02 = CTL2 /* \_SB_.UBTC.CTL2 */
                        Sleep (One)
                        HD03 = CTL3 /* \_SB_.UBTC.CTL3 */
                        Sleep (One)
                        HD04 = CTL4 /* \_SB_.UBTC.CTL4 */
                        Sleep (One)
                        HD05 = CTL5 /* \_SB_.UBTC.CTL5 */
                        Sleep (One)
                        HD06 = CTL6 /* \_SB_.UBTC.CTL6 */
                        Sleep (One)
                        HD07 = CTL7 /* \_SB_.UBTC.CTL7 */
                        Sleep (One)
                        HCNT = 0x08
                        Sleep (One)
                        HMPR = 0x0A
                        EC89 = 0x08
                        Sleep (One)
                        \_SB.PC00.LPCB.EC0.CHKS ()
                        Release (UBSY)
                        Release (\_SB.PC00.LPCB.EC0.LFCM)
                    }
                }

                P80B = 0x4D
            }

            Method (ECRD, 0, Serialized)
            {
                P80B = 0x4E
                If (\_SB.PC00.LPCB.EC0.ECAV)
                {
                    If ((Acquire (\_SB.PC00.LPCB.EC0.LFCM, 0xA000) == Zero))
                    {
                        Acquire (UBSY, 0xFFFF)
                        \_SB.PC00.LPCB.EC0.CHKS ()
                        HADD = 0x02
                        Sleep (One)
                        HCMD = 0x05
                        Sleep (One)
                        HCNT = 0x10
                        Sleep (One)
                        HMPR = 0x0B
                        EC89 = 0x07
                        P8XH (Zero, 0xED)
                        Sleep (One)
                        \_SB.PC00.LPCB.EC0.CHKS ()
                        MGI0 = HD00 /* \_SB_.UBTC.HD00 */
                        Sleep (One)
                        MGI1 = HD01 /* \_SB_.UBTC.HD01 */
                        Sleep (One)
                        MGI2 = HD02 /* \_SB_.UBTC.HD02 */
                        Sleep (One)
                        MGI3 = HD03 /* \_SB_.UBTC.HD03 */
                        Sleep (One)
                        MGI4 = HD04 /* \_SB_.UBTC.HD04 */
                        Sleep (One)
                        MGI5 = HD05 /* \_SB_.UBTC.HD05 */
                        Sleep (One)
                        MGI6 = HD06 /* \_SB_.UBTC.HD06 */
                        Sleep (One)
                        MGI7 = HD07 /* \_SB_.UBTC.HD07 */
                        Sleep (One)
                        MGI8 = HD08 /* \_SB_.UBTC.HD08 */
                        Sleep (One)
                        MGI9 = HD09 /* \_SB_.UBTC.HD09 */
                        Sleep (One)
                        MGIA = HD0A /* \_SB_.UBTC.HD0A */
                        Sleep (One)
                        MGIB = HD0B /* \_SB_.UBTC.HD0B */
                        Sleep (One)
                        MGIC = HD0C /* \_SB_.UBTC.HD0C */
                        Sleep (One)
                        MGID = HD0D /* \_SB_.UBTC.HD0D */
                        Sleep (One)
                        MGIE = HD0E /* \_SB_.UBTC.HD0E */
                        Sleep (One)
                        MGIF = HD0F /* \_SB_.UBTC.HD0F */
                        Sleep (One)
                        \_SB.PC00.LPCB.EC0.CHKS ()
                        HADD = 0x02
                        Sleep (One)
                        HCMD = 0x03
                        Sleep (One)
                        HCNT = 0x04
                        Sleep (One)
                        HMPR = 0x0B
                        EC89 = 0x07
                        P8XH (Zero, 0xEC)
                        Sleep (One)
                        \_SB.PC00.LPCB.EC0.CHKS ()
                        CCI0 = HD00 /* \_SB_.UBTC.HD00 */
                        Sleep (One)
                        CCI1 = HD01 /* \_SB_.UBTC.HD01 */
                        Sleep (One)
                        CCI2 = HD02 /* \_SB_.UBTC.HD02 */
                        Sleep (One)
                        CCI3 = HD03 /* \_SB_.UBTC.HD03 */
                        Sleep (One)
                        \_SB.PC00.LPCB.EC0.CHKS ()
                        Release (UBSY)
                        Release (\_SB.PC00.LPCB.EC0.LFCM)
                    }
                }

                P80B = 0x4F
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("6f8398c2-7ca4-11e4-ad36-631042b5008f") /* Unknown UUID */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Return (Buffer (One)
                            {
                                 0x0F                                             // .
                            })
                        }
                        Case (One)
                        {
                            ECWR ()
                            Sleep (0x0A)
                            ADBG ("OPM write to EC")
                        }
                        Case (0x02)
                        {
                            ECRD ()
                            Sleep (0x0A)
                        }
                        Case (0x03)
                        {
                            ADBG ("xDCI FN EN/DIS Status")
                            Return (XDCE) /* External reference */
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }
}



SSDT13
------
DefinitionBlock ("", "SSDT", 2, "LENOVO", "CB-01   ", 0x00000001)
{
    External (_SB_.PC00.PEG0.PEGP, DeviceObj)
    External (_SB_.PC00.PEG1, UnknownObj)
    External (_SB_.PC00.PEG1.PEGP, DeviceObj)
    External (_SB_.PC00.PGOF, MethodObj)    // 1 Arguments
    External (_SB_.PC00.PGON, MethodObj)    // 1 Arguments
    External (GBAS, UnknownObj)
    External (HGMD, UnknownObj)
    External (SGGP, UnknownObj)

    Scope (\_SB.PC00.PEG1.PEGP)
    {
        Method (_ON, 0, Serialized)  // _ON_: Power On
        {
            \_SB.PC00.PGON (One)
            Notify (\_SB.PC00.PEG1, Zero) // Bus Check
        }

        Method (_OFF, 0, Serialized)  // _OFF: Power Off
        {
            \_SB.PC00.PGOF (One)
            Notify (\_SB.PC00.PEG1, Zero) // Bus Check
        }
    }
}



SSDT14
------
DefinitionBlock ("", "SSDT", 2, "LENOVO", "CB-01   ", 0x00000001)
{
    Scope (\_SB)
    {
        Device (TPM)
        {
            Name (_HID, "INTC6000")  // _HID: Hardware ID
            Name (_CID, "MSFT0101" /* TPM 2.0 Security Device */)  // _CID: Compatible ID
            Name (_STR, Unicode ("TPM 2.0 Device"))  // _STR: Description String
            OperationRegion (SMIP, SystemIO, 0xB2, One)
            Field (SMIP, ByteAcc, NoLock, Preserve)
            {
                IOB2,   8
            }

            OperationRegion (TPMR, SystemMemory, 0xFED40000, 0x5000)
            Field (TPMR, AnyAcc, NoLock, Preserve)
            {
                ACC0,   8, 
                Offset (0x08), 
                INTE,   32, 
                INTV,   8, 
                Offset (0x10), 
                INTS,   32, 
                INTF,   32, 
                STS0,   32, 
                Offset (0x24), 
                FIFO,   32, 
                Offset (0x30), 
                TID0,   32, 
                Offset (0x40), 
                CREQ,   32, 
                CSTS,   32, 
                Offset (0x4C), 
                HCMD,   32
            }

            OperationRegion (TNVS, SystemMemory, 0x45A7C000, 0x30)
            Field (TNVS, AnyAcc, NoLock, Preserve)
            {
                PPIN,   8, 
                PPIP,   32, 
                PPRP,   32, 
                PPRQ,   32, 
                PPRM,   32, 
                LPPR,   32, 
                FRET,   32, 
                MCIN,   8, 
                MCIP,   32, 
                MORD,   32, 
                MRET,   32, 
                CAIN,   8, 
                UCRQ,   32, 
                IRQN,   32, 
                SFRB,   8
            }

            Name (RESS, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0xFED40000,         // Address Base
                    0x00005000,         // Address Length
                    )
                Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
                {
                    0x00000001,
                    0x00000002,
                    0x00000003,
                    0x00000004,
                    0x00000005,
                    0x00000006,
                    0x00000007,
                    0x00000008,
                    0x00000009,
                    0x0000000A,
                }
            })
            Name (RESL, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0xFED40000,         // Address Base
                    0x00005000,         // Address Length
                    )
                Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
                {
                    0x00000001,
                    0x00000002,
                    0x00000003,
                    0x00000004,
                    0x00000005,
                    0x00000006,
                    0x00000007,
                    0x00000008,
                    0x00000009,
                    0x0000000A,
                    0x0000000B,
                    0x0000000C,
                    0x0000000D,
                    0x0000000E,
                    0x0000000F,
                }
            })
            Name (RES0, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0xFED40000,         // Address Base
                    0x00005000,         // Address Length
                    )
                Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, _Y00)
                {
                    0x0000000C,
                }
            })
            Name (RES1, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0xFED40000,         // Address Base
                    0x00005000,         // Address Length
                    )
            })
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                If ((IRQN == Zero))
                {
                    Return (RES1) /* \_SB_.TPM_.RES1 */
                }
                Else
                {
                    CreateDWordField (RES0, \_SB.TPM._Y00._INT, LIRQ)  // _INT: Interrupts
                    LIRQ = IRQN /* \_SB_.TPM_.IRQN */
                    Return (RES0) /* \_SB_.TPM_.RES0 */
                }
            }

            OperationRegion (CONA, SystemMemory, 0x45A7C030, 0x30)
            Field (CONA, DWordAcc, NoLock, Preserve)
            {
                HRTB,   32, 
                ERRR,   32, 
                CLFG,   32, 
                STA1,   32, 
                AccessAs (QWordAcc, 0x00), 
                INTC,   64, 
                AccessAs (DWordAcc, 0x00), 
                CMSZ,   32, 
                AccessAs (QWordAcc, 0x00), 
                CMDB,   64, 
                AccessAs (DWordAcc, 0x00), 
                RPSZ,   32, 
                AccessAs (QWordAcc, 0x00), 
                RESP,   64
            }

            OperationRegion (STRT, SystemMemory, 0x45A7C060, 0x04)
            Field (STRT, AnyAcc, NoLock, Preserve)
            {
                SMTD,   32
            }

            Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
            {
                If ((IRQN != Zero))
                {
                    CreateDWordField (Arg0, 0x11, IRQ0)
                    CreateDWordField (RES0, \_SB.TPM._Y00._INT, LIRQ)  // _INT: Interrupts
                    LIRQ = IRQ0 /* \_SB_.TPM_._SRS.IRQ0 */
                    IRQN = IRQ0 /* \_SB_.TPM_._SRS.IRQ0 */
                    CreateBitField (Arg0, 0x79, ITRG)
                    CreateBitField (RES0, \_SB.TPM._Y00._HE, LTRG)  // _HE_: High-Edge
                    LTRG = ITRG /* \_SB_.TPM_._SRS.ITRG */
                    CreateBitField (Arg0, 0x7A, ILVL)
                    CreateBitField (RES0, \_SB.TPM._Y00._LL, LLVL)  // _LL_: Low Level
                    LLVL = ILVL /* \_SB_.TPM_._SRS.ILVL */
                    If ((((TID0 & 0x0F) == Zero) || ((TID0 & 0x0F
                        ) == 0x0F)))
                    {
                        If ((IRQ0 < 0x10))
                        {
                            INTV = (IRQ0 & 0x0F)
                        }

                        If ((ITRG == One))
                        {
                            INTE |= 0x10
                        }
                        Else
                        {
                            INTE &= 0xFFFFFFEF
                        }

                        If ((ILVL == Zero))
                        {
                            INTE |= 0x08
                        }
                        Else
                        {
                            INTE &= 0xFFFFFFF7
                        }
                    }
                }
            }

            Method (_PRS, 0, Serialized)  // _PRS: Possible Resource Settings
            {
                If ((IRQN == Zero))
                {
                    Return (RES1) /* \_SB_.TPM_.RES1 */
                }
                ElseIf ((SFRB == Zero))
                {
                    Return (RESL) /* \_SB_.TPM_.RESL */
                }
                Else
                {
                    Return (RESS) /* \_SB_.TPM_.RESS */
                }
            }

            Method (PTS, 1, Serialized)
            {
                If (((Arg0 < 0x06) && (Arg0 > 0x03)))
                {
                    If (!(MORD & 0x10))
                    {
                        MCIP = 0x02
                        IOB2 = MCIN /* \_SB_.TPM_.MCIN */
                    }
                }

                Return (Zero)
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((ACC0 == 0xFF))
                {
                    Return (Zero)
                }

                Return (0x0F)
            }

            Method (HINF, 1, Serialized)
            {
                Switch (ToInteger (Arg0))
                {
                    Case (Zero)
                    {
                        Return (Buffer (One)
                        {
                             0x03                                             // .
                        })
                    }
                    Case (One)
                    {
                        Name (TPMV, Package (0x02)
                        {
                            One, 
                            Package (0x02)
                            {
                                0x02, 
                                Zero
                            }
                        })
                        If ((_STA () == Zero))
                        {
                            Return (Package (0x01)
                            {
                                Zero
                            })
                        }

                        Return (TPMV) /* \_SB_.TPM_.HINF.TPMV */
                    }
                    Default
                    {
                        BreakPoint
                    }

                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Name (TPM2, Package (0x02)
            {
                Zero, 
                Zero
            })
            Name (TPM3, Package (0x03)
            {
                Zero, 
                Zero, 
                Zero
            })
            Method (TPPI, 2, Serialized)
            {
                Switch (ToInteger (Arg0))
                {
                    Case (Zero)
                    {
                        Return (Buffer (0x02)
                        {
                             0xFF, 0x01                                       // ..
                        })
                    }
                    Case (One)
                    {
                        Return ("1.3")
                    }
                    Case (0x02)
                    {
                        PPRQ = DerefOf (Arg1 [Zero])
                        PPRM = Zero
                        PPIP = 0x02
                        IOB2 = PPIN /* \_SB_.TPM_.PPIN */
                        Return (FRET) /* \_SB_.TPM_.FRET */
                    }
                    Case (0x03)
                    {
                        TPM2 [One] = PPRQ /* \_SB_.TPM_.PPRQ */
                        Return (TPM2) /* \_SB_.TPM_.TPM2 */
                    }
                    Case (0x04)
                    {
                        Return (0x02)
                    }
                    Case (0x05)
                    {
                        PPIP = 0x05
                        IOB2 = PPIN /* \_SB_.TPM_.PPIN */
                        TPM3 [One] = LPPR /* \_SB_.TPM_.LPPR */
                        TPM3 [0x02] = PPRP /* \_SB_.TPM_.PPRP */
                        Return (TPM3) /* \_SB_.TPM_.TPM3 */
                    }
                    Case (0x06)
                    {
                        Return (0x03)
                    }
                    Case (0x07)
                    {
                        PPIP = 0x07
                        PPRQ = DerefOf (Arg1 [Zero])
                        PPRM = Zero
                        If ((PPRQ == 0x17))
                        {
                            PPRM = DerefOf (Arg1 [One])
                        }

                        IOB2 = PPIN /* \_SB_.TPM_.PPIN */
                        Return (FRET) /* \_SB_.TPM_.FRET */
                    }
                    Case (0x08)
                    {
                        PPIP = 0x08
                        UCRQ = DerefOf (Arg1 [Zero])
                        IOB2 = PPIN /* \_SB_.TPM_.PPIN */
                        Return (FRET) /* \_SB_.TPM_.FRET */
                    }
                    Default
                    {
                        BreakPoint
                    }

                }

                Return (One)
            }

            Method (TMCI, 2, Serialized)
            {
                Switch (ToInteger (Arg0))
                {
                    Case (Zero)
                    {
                        Return (Buffer (One)
                        {
                             0x03                                             // .
                        })
                    }
                    Case (One)
                    {
                        MORD = DerefOf (Arg1 [Zero])
                        MCIP = One
                        IOB2 = MCIN /* \_SB_.TPM_.MCIN */
                        Return (MRET) /* \_SB_.TPM_.MRET */
                    }
                    Default
                    {
                        BreakPoint
                    }

                }

                Return (One)
            }

            Method (OASM, 1, Serialized)
            {
                Switch (ToInteger (Arg0))
                {
                    Case (Zero)
                    {
                        Return (Buffer (One)
                        {
                             0x03                                             // .
                        })
                    }
                    Case (One)
                    {
                        Name (WTME, Zero)
                        If ((SMTD == 0x07))
                        {
                            CREQ = One
                            While (((WTME <= 0xC8) && ((CSTS & 0x02) != 
                                Zero)))
                            {
                                Sleep (One)
                                WTME++
                            }

                            HCMD = 0x02
                        }
                        Else
                        {
                            IOB2 = CAIN /* \_SB_.TPM_.CAIN */
                            While ((STA1 == One))
                            {
                                If (((STS0 & 0x90) == 0x90))
                                {
                                    IOB2 = CAIN /* \_SB_.TPM_.CAIN */
                                    Return (Zero)
                                }

                                If ((CLFG == One))
                                {
                                    If ((WTME == 0x00015F90))
                                    {
                                        Break
                                    }

                                    WTME++
                                }

                                Sleep (One)
                            }

                            STA1 = Zero
                            Return (Zero)
                        }
                    }
                    Default
                    {
                        BreakPoint
                    }

                }

                Return (One)
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("cf8e16a5-c1e8-4e25-b712-4f54a96702c8") /* Unknown UUID */))
                {
                    Return (HINF (Arg2))
                }

                If ((Arg0 == ToUUID ("3dddfaa6-361b-4eb4-a424-8d10089d1653") /* Physical Presence Interface */))
                {
                    Return (TPPI (Arg2, Arg3))
                }

                If ((Arg0 == ToUUID ("376054ed-cc13-4675-901c-4756d7f2d45d") /* Unknown UUID */))
                {
                    Return (TMCI (Arg2, Arg3))
                }

                If ((Arg0 == ToUUID ("6bbf6cab-5463-4714-b7cd-f0203c0368d4") /* Unknown UUID */))
                {
                    Return (OASM (Arg2))
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }
}



SSDT15
------
DefinitionBlock ("", "SSDT", 1, "LENOVO", "CB-01   ", 0x00000001)
{
    External (_SB_.GGIV, MethodObj)    // 1 Arguments
    External (_SB_.GGOV, MethodObj)    // 1 Arguments
    External (_SB_.PC00, DeviceObj)
    External (_SB_.PC00.HGOF, MethodObj)    // 0 Arguments
    External (_SB_.PC00.HGON, MethodObj)    // 0 Arguments
    External (_SB_.PC00.LPCB.EC0_.CTMD, UnknownObj)
    External (_SB_.PC00.LPCB.EC0_.LFCM, UnknownObj)
    External (_SB_.PC00.LPCB.EC0_.PCBS, UnknownObj)
    External (_SB_.PC00.LPCB.EC0_.PCBV, UnknownObj)
    External (_SB_.PC00.LPCB.EC0_.PRRO, UnknownObj)
    External (_SB_.PC00.LPCB.EC0_.PRWO, UnknownObj)
    External (_SB_.PC00.LPCB.EC0_.SPBL, UnknownObj)
    External (_SB_.PC00.LPCB.EC0_.SPMO, UnknownObj)
    External (_SB_.PC00.PEG1, DeviceObj)
    External (_SB_.PC00.PEG1.PEGP, DeviceObj)
    External (_SB_.PC00.PGOF, MethodObj)    // 1 Arguments
    External (_SB_.PC00.PGON, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RTDS, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RTEN, MethodObj)    // 1 Arguments
    External (_SB_.PC00.SGPO, MethodObj)    // 5 Arguments
    External (_SB_.PR00, DeviceObj)
    External (_SB_.PR01, DeviceObj)
    External (_SB_.PR02, DeviceObj)
    External (_SB_.PR03, DeviceObj)
    External (_SB_.PR04, DeviceObj)
    External (_SB_.PR05, DeviceObj)
    External (_SB_.PR06, DeviceObj)
    External (_SB_.PR07, DeviceObj)
    External (_SB_.PR08, DeviceObj)
    External (_SB_.PR09, DeviceObj)
    External (_SB_.PR10, DeviceObj)
    External (_SB_.PR11, DeviceObj)
    External (_SB_.PR12, DeviceObj)
    External (_SB_.PR13, DeviceObj)
    External (_SB_.PR14, DeviceObj)
    External (_SB_.PR15, DeviceObj)
    External (_SB_.PR16, DeviceObj)
    External (_SB_.PR17, DeviceObj)
    External (_SB_.PR18, DeviceObj)
    External (_SB_.PR19, DeviceObj)
    External (_SB_.PR20, DeviceObj)
    External (_SB_.PR21, DeviceObj)
    External (_SB_.PR22, DeviceObj)
    External (_SB_.PR23, DeviceObj)
    External (_SB_.SGOV, MethodObj)    // 2 Arguments
    External (BCTP, UnknownObj)
    External (BDDN, UnknownObj)
    External (CCPL, UnknownObj)
    External (CPPL, UnknownObj)
    External (DSMF, UnknownObj)
    External (DTGP, UnknownObj)
    External (GSNM, IntObj)
    External (GTYP, IntObj)
    External (HRA0, UnknownObj)
    External (HRA1, UnknownObj)
    External (HRA2, UnknownObj)
    External (HRA3, UnknownObj)
    External (HRE0, UnknownObj)
    External (HRE1, UnknownObj)
    External (HRE2, UnknownObj)
    External (HRE3, UnknownObj)
    External (HRG0, UnknownObj)
    External (HRG1, UnknownObj)
    External (HRG2, UnknownObj)
    External (HRG3, UnknownObj)
    External (LDDC, UnknownObj)
    External (LTGP, UnknownObj)
    External (MCSK, IntObj)
    External (P1GP, UnknownObj)
    External (P2GP, UnknownObj)
    External (P3GP, UnknownObj)
    External (PMID, IntObj)
    External (PPID, IntObj)
    External (RPIN, UnknownObj)
    External (SGGP, UnknownObj)
    External (SMBA, UnknownObj)
    External (SMBB, UnknownObj)
    External (TCNT, FieldUnitObj)

    Scope (\_SB.PC00)
    {
        OperationRegion (HGOP, SystemMemory, 0x452FDF18, 0x00000011)
        Field (HGOP, AnyAcc, Lock, Preserve)
        {
            DGDA,   32, 
            DGBA,   32, 
            DGPV,   16, 
            OPTF,   8, 
            NVGE,   8, 
            DSSV,   32, 
            DISM,   8
        }
    }

    Scope (\_SB.PC00.PEG1.PEGP)
    {
        OperationRegion (VBOR, SystemMemory, 0x45A1F018, 0x00040004)
        Field (VBOR, DWordAcc, Lock, Preserve)
        {
            RVBS,   32, 
            VBS1,   262144, 
            VBS2,   262144, 
            VBS3,   262144, 
            VBS4,   262144, 
            VBS5,   262144, 
            VBS6,   262144, 
            VBS7,   262144, 
            VBS8,   262144
        }
    }

    Scope (\_SB.PC00.PEG1.PEGP)
    {
        OperationRegion (NOPR, SystemMemory, 0x45A1C018, 0x00002027)
        Field (NOPR, AnyAcc, Lock, Preserve)
        {
            DHPS,   8, 
            DPCS,   8, 
            GPSS,   8, 
            VENS,   8, 
            NBCS,   8, 
            GC6S,   8, 
            NVSR,   8, 
            NPCS,   8, 
            SLVS,   8, 
            PBCM,   8, 
            EXMD,   8, 
            MXBS,   32, 
            MXMB,   32768, 
            SMXS,   32, 
            SMXB,   32768, 
            FBEN,   32, 
            ENVT,   32, 
            PWGD,   32, 
            DMMP,   32, 
            DLRP,   32
        }
    }

    Scope (\_SB.PC00.PEG1)
    {
        OperationRegion (RPCX, SystemMemory, \_SB.PC00.DGBA, 0x1000)
        Field (RPCX, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            CMDR,   8, 
            Offset (0x19), 
            PRBN,   8, 
            Offset (0x4A), 
            CEDR,   1, 
            Offset (0x69), 
                ,   2, 
            LREN,   1, 
            Offset (0xA4), 
            D0ST,   2
        }
    }

    Scope (\_SB.PC00.PEG1.PEGP)
    {
        Name (LTRE, Zero)
        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            Return (0x0F)
        }

        OperationRegion (PCIM, SystemMemory, \_SB.PC00.DGDA, 0x1000)
        Field (PCIM, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            CMDR,   8, 
            VGAR,   2008, 
            Offset (0x48B), 
                ,   1, 
            HDAE,   1
        }

        OperationRegion (DGPU, SystemMemory, \_SB.PC00.DGDA, 0x0100)
        Field (DGPU, DWordAcc, NoLock, Preserve)
        {
            Offset (0x40), 
            SSSV,   32
        }

        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("a486d8f8-0bda-471b-a72b-6042a6b5bee0") /* Unknown UUID */))
            {
                Return (\_SB.PC00.PEG1.PEGP.NVOP (Arg0, Arg1, Arg2, Arg3))
            }

            If ((Arg0 == ToUUID ("a3132d01-8cda-49ba-a52e-bc9d46df6b81") /* Unknown UUID */))
            {
                If ((\_SB.PC00.PEG1.PEGP.GPSS != Zero))
                {
                    Return (\_SB.PC00.PEG1.PEGP.GPS (Arg0, Arg1, Arg2, Arg3))
                }
            }

            If ((Arg0 == ToUUID ("cbeca351-067b-4924-9cbd-b46b00b86f34") /* Unknown UUID */))
            {
                If ((\_SB.PC00.PEG1.PEGP.GC6S != Zero))
                {
                    Return (\_SB.PC00.PEG1.PEGP.NVJT (Arg0, Arg1, Arg2, Arg3))
                }
            }

            If ((Arg0 == ToUUID ("d4a50b75-65c7-46f7-bfb7-41514cea0244") /* Unknown UUID */))
            {
                If ((\_SB.PC00.PEG1.PEGP.NBCS != Zero))
                {
                    Return (\_SB.PC00.PEG1.PEGP.NBCI (Arg0, Arg1, Arg2, Arg3))
                }
            }

            If ((Arg0 == ToUUID ("4004a400-917d-4cf2-b89c-79b62fd55665") /* Unknown UUID */)) {}
            Return (0x80000001)
        }
    }

    Scope (\_SB.PC00.PEG1.PEGP)
    {
        Name (VGAB, Buffer (0xFB)
        {
             0x00                                             // .
        })
        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
        {
            If ((DGPS != Zero))
            {
                If (CondRefOf (\_SB.PC00.PGON))
                {
                    \_SB.PC00.PGON (One)
                }

                If (CondRefOf (\_SB.PC00.HGON))
                {
                    \_SB.PC00.HGON ()
                }

                If ((GPRF != One))
                {
                    VGAR = VGAB /* \_SB_.PC00.PEG1.PEGP.VGAB */
                }

                DGPS = Zero
            }
        }

        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
        {
            If ((OMPR == 0x03))
            {
                If ((GPRF != One))
                {
                    VGAB = VGAR /* \_SB_.PC00.PEG1.PEGP.VGAR */
                }

                If (CondRefOf (\_SB.PC00.PGOF))
                {
                    \_SB.PC00.PGOF (One)
                }

                If (CondRefOf (\_SB.PC00.HGOF))
                {
                    \_SB.PC00.HGOF ()
                }

                DGPS = One
                OMPR = 0x02
            }
        }

        Name (DGPS, Zero)
        Name (OMPR, 0x02)
        Name (GPRF, Zero)
        Name (DPST, One)
        Method (NVOP, 4, Serialized)
        {
            Debug = "------- NV OPTIMUS DSM --------"
            If ((Arg1 != 0x0100))
            {
                Return (0x80000001)
            }

            Switch (ToInteger (Arg2))
            {
                Case (Zero)
                {
                    Debug = "   NVOP fun0 NVOP_FUNC_SUPPORT"
                    Return (Buffer (0x04)
                    {
                         0x01, 0x00, 0x00, 0x0C                           // ....
                    })
                }
                Case (0x1A)
                {
                    Debug = "   NVOP fun26 NVOP_FUNC_OPTIMUSCAPS"
                    CreateField (Arg3, Zero, One, FLCH)
                    CreateField (Arg3, One, One, DVSR)
                    CreateField (Arg3, 0x02, One, DVSC)
                    CreateField (Arg3, 0x18, 0x02, OPCE)
                    If ((ToInteger (FLCH) && (ToInteger (OPCE) != OMPR)))
                    {
                        OMPR = ToInteger (OPCE)
                    }

                    Local0 = Buffer (0x04)
                        {
                             0x00, 0x00, 0x00, 0x00                           // ....
                        }
                    CreateField (Local0, Zero, One, OPEN)
                    CreateField (Local0, 0x03, 0x02, CGCS)
                    CreateField (Local0, 0x06, One, SHPC)
                    CreateField (Local0, 0x08, One, SNSR)
                    CreateField (Local0, 0x18, 0x03, DGPC)
                    CreateField (Local0, 0x1B, 0x02, OHAC)
                    OPEN = One
                    SHPC = One
                    DGPC = One
                    OHAC = 0x03
                    If (ToInteger (DVSC))
                    {
                        If (ToInteger (DVSR))
                        {
                            GPRF = One
                        }
                        Else
                        {
                            GPRF = Zero
                        }
                    }

                    SNSR = GPRF /* \_SB_.PC00.PEG1.PEGP.GPRF */
                    If ((DGPS == Zero))
                    {
                        CGCS = 0x03
                    }
                    Else
                    {
                        CGCS = Zero
                    }

                    Return (Local0)
                }
                Case (0x1B)
                {
                    Debug = "   NVOP fun27 NVOP_FUNC_OPTIMUSFLAGS"
                    CreateField (Arg3, Zero, One, OACC)
                    CreateField (Arg3, One, One, UOAC)
                    CreateField (Arg3, 0x02, 0x08, OPDA)
                    CreateField (Arg3, 0x0A, One, OPDE)
                    Local1 = Zero
                    Local1 = \_SB.PC00.PEG1.PEGP.HDAE
                    Return (Local1)
                }
                Default
                {
                    Return (0x80000002)
                }

            }
        }
    }

    Scope (\_SB.PC00.PEG1.PEGP)
    {
        Name (NLIM, Zero)
        Name (PSLS, Zero)
        Name (GPSP, Buffer (0x28) {})
        CreateDWordField (GPSP, Zero, RETN)
        CreateDWordField (GPSP, 0x04, VRV1)
        CreateDWordField (GPSP, 0x08, TGPU)
        CreateDWordField (GPSP, 0x0C, PDTS)
        CreateDWordField (GPSP, 0x10, SFAN)
        CreateDWordField (GPSP, 0x14, SKNT)
        CreateDWordField (GPSP, 0x18, CPUE)
        CreateDWordField (GPSP, 0x1C, TMP1)
        CreateDWordField (GPSP, 0x20, TMP2)
        Method (GPS, 4, Serialized)
        {
            Debug = "------- NV GPS DSM --------"
            If ((Arg1 != 0x0200))
            {
                Return (0x80000002)
            }

            Switch (ToInteger (Arg2))
            {
                Case (Zero)
                {
                    Debug = "   GPS fun 0"
                    Return (Buffer (0x08)
                    {
                         0x01, 0x00, 0x08, 0x00, 0x01, 0x04, 0x00, 0x00   // ........
                    })
                }
                Case (0x13)
                {
                    Debug = "   GPS fun 19"
                    CreateDWordField (Arg3, Zero, TEMP)
                    If ((TEMP == Zero))
                    {
                        Return (0x04)
                    }

                    If ((TEMP && 0x04))
                    {
                        Return (0x04)
                    }
                }
                Case (0x20)
                {
                    Debug = "   GPS fun 32"
                    Name (RET1, Zero)
                    CreateBitField (Arg3, 0x02, SPBI)
                    If (NLIM)
                    {
                        RET1 |= One
                    }

                    If (PSLS)
                    {
                        RET1 |= 0x02
                    }

                    Return (RET1) /* \_SB_.PC00.PEG1.PEGP.GPS_.RET1 */
                }
                Case (0x2A)
                {
                    Debug = "   GPS fun 42"
                    CreateField (Arg3, Zero, 0x04, PSH0)
                    CreateBitField (Arg3, 0x08, GPUT)
                    VRV1 = 0x00010000
                    Switch (ToInteger (PSH0))
                    {
                        Case (Zero)
                        {
                            Return (GPSP) /* \_SB_.PC00.PEG1.PEGP.GPSP */
                        }
                        Case (One)
                        {
                            RETN = 0x0100
                            RETN |= ToInteger (PSH0)
                            Return (GPSP) /* \_SB_.PC00.PEG1.PEGP.GPSP */
                        }
                        Case (0x02)
                        {
                            RETN = 0x0102
                            TGPU = Zero
                            Return (GPSP) /* \_SB_.PC00.PEG1.PEGP.GPSP */
                        }

                    }
                }
                Default
                {
                    Return (0x80000002)
                }

            }

            Return (0x80000002)
        }
    }

    Scope (\_SB.PC00)
    {
        Name (TDGC, Zero)
        Name (DGCX, Zero)
        Name (TGPC, Buffer (0x04)
        {
             0x00                                             // .
        })
        Method (GC6I, 0, Serialized)
        {
            Debug = "   JT GC6I"
            \_SB.PC00.PEG1.PEGP.LTRE = \_SB.PC00.PEG1.LREN
            \_SB.PC00.RTDS (RPIN)
            Sleep (0x0A)
            Switch (RPIN)
            {
                Case (Zero)
                {
                    \_SB.PC00.SGPO (SGGP, HRE0, HRG0, HRA0, One)
                }
                Case (One)
                {
                    \_SB.PC00.SGPO (P1GP, HRE1, HRG1, HRA1, One)
                }
                Case (0x02)
                {
                    \_SB.PC00.SGPO (P2GP, HRE2, HRG2, HRA2, One)
                }
                Case (0x03)
                {
                    \_SB.PC00.SGPO (P3GP, HRE3, HRG3, HRA3, One)
                }

            }
        }

        Method (GC6O, 0, Serialized)
        {
            Debug = "   JT GC6O"
            Switch (RPIN)
            {
                Case (Zero)
                {
                    \_SB.PC00.SGPO (SGGP, HRE0, HRG0, HRA0, Zero)
                }
                Case (One)
                {
                    \_SB.PC00.SGPO (P1GP, HRE1, HRG1, HRA1, Zero)
                }
                Case (0x02)
                {
                    \_SB.PC00.SGPO (P2GP, HRE2, HRG2, HRA2, Zero)
                }
                Case (0x03)
                {
                    \_SB.PC00.SGPO (P3GP, HRE3, HRG3, HRA3, Zero)
                }

            }

            \_SB.PC00.RTEN (RPIN)
            \_SB.PC00.PEG1.CMDR |= 0x04
            \_SB.PC00.PEG1.LREN = \_SB.PC00.PEG1.PEGP.LTRE
            \_SB.PC00.PEG1.CEDR = One
        }
    }

    Scope (\_SB.PC00.PEG1.PEGP)
    {
        Method (NVJT, 4, Serialized)
        {
            Debug = "------- NV JT DSM --------"
            If ((ToInteger (Arg1) < 0x0100))
            {
                Return (0x80000001)
            }

            Switch (ToInteger (Arg2))
            {
                Case (Zero)
                {
                    Debug = "   JT fun0 JT_FUNC_SUPPORT"
                    Return (Buffer (0x04)
                    {
                         0x1B, 0x00, 0x00, 0x00                           // ....
                    })
                }
                Case (One)
                {
                    Debug = "   JT fun1 JT_FUNC_CAPS"
                    Name (JTCA, Buffer (0x04)
                    {
                         0x00                                             // .
                    })
                    CreateField (JTCA, Zero, One, JTEN)
                    CreateField (JTCA, One, 0x02, SREN)
                    CreateField (JTCA, 0x03, 0x02, PLPR)
                    CreateField (JTCA, 0x05, One, SRPR)
                    CreateField (JTCA, 0x06, 0x02, FBPR)
                    CreateField (JTCA, 0x08, 0x02, GUPR)
                    CreateField (JTCA, 0x0A, One, GC6R)
                    CreateField (JTCA, 0x0B, One, PTRH)
                    CreateField (JTCA, 0x0D, One, MHYB)
                    CreateField (JTCA, 0x0E, One, RPCL)
                    CreateField (JTCA, 0x0F, 0x02, GC6V)
                    CreateField (JTCA, 0x11, One, GEIS)
                    CreateField (JTCA, 0x12, One, GSWS)
                    CreateField (JTCA, 0x14, 0x0C, JTRV)
                    JTEN = One
                    GC6R = Zero
                    RPCL = One
                    SREN = One
                    FBPR = Zero
                    MHYB = One
                    GC6V = 0x02
                    JTRV = 0x0200
                    Return (JTCA) /* \_SB_.PC00.PEG1.PEGP.NVJT.JTCA */
                }
                Case (0x02)
                {
                    Debug = "   JT fun2 JT_FUNC_POLICYSELECT"
                    Return (0x80000002)
                }
                Case (0x03)
                {
                    Debug = "   JT fun3 JT_FUNC_POWERCONTROL"
                    CreateField (Arg3, Zero, 0x03, GPPC)
                    CreateField (Arg3, 0x04, One, PLPC)
                    CreateField (Arg3, 0x07, One, ECOC)
                    CreateField (Arg3, 0x0E, 0x02, DFGC)
                    CreateField (Arg3, 0x10, 0x03, GPCX)
                    \_SB.PC00.TGPC = Arg3
                    If (((ToInteger (GPPC) != Zero) || (ToInteger (DFGC
                        ) != Zero)))
                    {
                        \_SB.PC00.TDGC = ToInteger (DFGC)
                        \_SB.PC00.DGCX = ToInteger (GPCX)
                    }

                    Name (JTPC, Buffer (0x04)
                    {
                         0x00                                             // .
                    })
                    CreateField (JTPC, Zero, 0x03, GUPS)
                    CreateField (JTPC, 0x03, One, GPWO)
                    CreateField (JTPC, 0x07, One, PLST)
                    If ((ToInteger (DFGC) != Zero))
                    {
                        GPWO = One
                        GUPS = One
                        Return (JTPC) /* \_SB_.PC00.PEG1.PEGP.NVJT.JTPC */
                    }

                    Debug = "   JT fun3 GPPC="
                    Debug = ToInteger (GPPC)
                    If ((ToInteger (GPPC) == One))
                    {
                        \_SB.PC00.GC6I ()
                        PLST = One
                        GUPS = Zero
                    }
                    ElseIf ((ToInteger (GPPC) == 0x02))
                    {
                        \_SB.PC00.GC6I ()
                        If ((ToInteger (PLPC) == Zero))
                        {
                            PLST = Zero
                        }

                        GUPS = Zero
                    }
                    ElseIf ((ToInteger (GPPC) == 0x03))
                    {
                        \_SB.PC00.GC6O ()
                        If ((ToInteger (PLPC) != Zero))
                        {
                            PLST = Zero
                        }

                        GPWO = One
                        GUPS = One
                    }
                    ElseIf ((ToInteger (GPPC) == 0x04))
                    {
                        \_SB.PC00.GC6O ()
                        If ((ToInteger (PLPC) != Zero))
                        {
                            PLST = Zero
                        }

                        GPWO = One
                        GUPS = One
                    }
                    ElseIf ((\_SB.GGIV (PWGD) == One))
                    {
                        Debug = "   JT GETS() return 0x1"
                        GPWO = One
                        GUPS = One
                    }
                    Else
                    {
                        Debug = "   JT GETS() return 0x3"
                        GPWO = Zero
                        GUPS = 0x03
                    }

                    Return (JTPC) /* \_SB_.PC00.PEG1.PEGP.NVJT.JTPC */
                }
                Case (0x04)
                {
                    Debug = "   JT fun4 JT_FUNC_PLATPOLICY"
                    CreateField (Arg3, 0x02, One, PAUD)
                    CreateField (Arg3, 0x03, One, PADM)
                    CreateField (Arg3, 0x04, 0x04, PDGS)
                    Local0 = Zero
                    Local0 = (\_SB.PC00.PEG1.PEGP.HDAE << 0x02)
                    Return (Local0)
                }

            }

            Return (0x80000002)
        }
    }

    Name (GSD1, Buffer (0xCD)
    {
        /* 0000 */  0xCC, 0x22, 0x22, 0x6E, 0x95, 0x62, 0xCC, 0x31,  // .""n.b.1
        /* 0008 */  0x52, 0x44, 0xCD, 0x00, 0x00, 0x00, 0x00, 0x01,  // RD......
        /* 0010 */  0x00, 0x00, 0x00, 0x00, 0xDE, 0x10, 0x00, 0x00,  // ........
        /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 0020 */  0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x00,  // ......4.
        /* 0028 */  0x00, 0x00, 0x01, 0x00, 0x47, 0x00, 0x00, 0x00,  // ....G...
        /* 0030 */  0x02, 0x00, 0x45, 0x00, 0x00, 0x00, 0x03, 0x00,  // ..E.....
        /* 0038 */  0x7D, 0x00, 0x00, 0x00, 0x04, 0x00, 0x7B, 0x00,  // }.....{.
        /* 0040 */  0x00, 0x00, 0x05, 0x00, 0x79, 0x00, 0x00, 0x00,  // ....y...
        /* 0048 */  0x06, 0x00, 0x77, 0x00, 0x00, 0x00, 0x07, 0x00,  // ..w.....
        /* 0050 */  0x75, 0x00, 0x00, 0x00, 0x08, 0x00, 0x73, 0x00,  // u.....s.
        /* 0058 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xD9, 0x1C,  // ........
        /* 0060 */  0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,  // ........
        /* 0068 */  0x41, 0x5D, 0xC9, 0x00, 0x01, 0x24, 0x2E, 0x00,  // A]...$..
        /* 0070 */  0x02, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x01,  // ........
        /* 0078 */  0x00, 0x00, 0x00, 0xD9, 0x1C, 0x04, 0x00, 0x00,  // ........
        /* 0080 */  0x00, 0x04, 0x00, 0x00, 0x00, 0xE0, 0x7C, 0x97,  // ......|.
        /* 0088 */  0x01, 0xC0, 0x3D, 0x9C, 0x01, 0xC4, 0xD5, 0xC4,  // ..=.....
        /* 0090 */  0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //  .......
        /* 0098 */  0x00, 0x14, 0x00, 0x00, 0x00, 0x31, 0x00, 0x36,  // .....1.6
        /* 00A0 */  0x00, 0x35, 0x00, 0x2A, 0x00, 0x31, 0x00, 0x34,  // .5.*.1.4
        /* 00A8 */  0x00, 0x35, 0x00, 0x34, 0x00, 0x35, 0x00, 0x00,  // .5.4.5..
        /* 00B0 */  0x00, 0x60, 0x68, 0x9E, 0x35, 0x00, 0x00, 0x00,  // .`h.5...
        /* 00B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 00C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 00C8 */  0x00, 0x00, 0x00, 0x00, 0x00                     // .....
    })
    Name (GSD2, Buffer (0xDF)
    {
        /* 0000 */  0x31, 0x70, 0x69, 0x27, 0x43, 0xDC, 0x49, 0xDF,  // 1pi'C.I.
        /* 0008 */  0x52, 0x44, 0xDF, 0x00, 0x00, 0x00, 0x00, 0x01,  // RD......
        /* 0010 */  0x00, 0x00, 0x00, 0x00, 0xDE, 0x10, 0x00, 0x00,  // ........
        /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 0020 */  0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x00,  // ......4.
        /* 0028 */  0x00, 0x00, 0x01, 0x00, 0x47, 0x00, 0x00, 0x00,  // ....G...
        /* 0030 */  0x02, 0x00, 0x45, 0x00, 0x00, 0x00, 0x03, 0x00,  // ..E.....
        /* 0038 */  0x8F, 0x00, 0x00, 0x00, 0x04, 0x00, 0x8D, 0x00,  // ........
        /* 0040 */  0x00, 0x00, 0x05, 0x00, 0x8B, 0x00, 0x00, 0x00,  // ........
        /* 0048 */  0x06, 0x00, 0x89, 0x00, 0x00, 0x00, 0x07, 0x00,  // ........
        /* 0050 */  0x87, 0x00, 0x00, 0x00, 0x08, 0x00, 0x85, 0x00,  // ........
        /* 0058 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xD9, 0x1C,  // ........
        /* 0060 */  0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,  // ........
        /* 0068 */  0x41, 0x5D, 0xC9, 0x00, 0x01, 0x24, 0x2E, 0x00,  // A]...$..
        /* 0070 */  0x02, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x01,  // ........
        /* 0078 */  0x00, 0x00, 0x00, 0xD9, 0x1C, 0x04, 0x00, 0x00,  // ........
        /* 0080 */  0x00, 0x04, 0x00, 0x00, 0x00, 0xE0, 0x7C, 0x97,  // ......|.
        /* 0088 */  0x01, 0xC0, 0x3D, 0x9C, 0x01, 0xC4, 0xD5, 0xC4,  // ..=.....
        /* 0090 */  0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 2.......
        /* 0098 */  0x00, 0x26, 0x00, 0x00, 0x00, 0x31, 0x00, 0x36,  // .&...1.6
        /* 00A0 */  0x00, 0x35, 0x00, 0x2A, 0x00, 0x31, 0x00, 0x34,  // .5.*.1.4
        /* 00A8 */  0x00, 0x35, 0x00, 0x34, 0x00, 0x35, 0x00, 0x3B,  // .5.4.5.;
        /* 00B0 */  0x00, 0x36, 0x00, 0x30, 0x00, 0x2A, 0x00, 0x34,  // .6.0.*.4
        /* 00B8 */  0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30,  // .0.0.0.0
        /* 00C0 */  0x00, 0x00, 0x00, 0x60, 0x68, 0x9E, 0x35, 0x00,  // ...`h.5.
        /* 00C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 00D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 00D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00         // .......
    })
    Name (BODR, Buffer (0xDF)
    {
        /* 0000 */  0x31, 0x70, 0x69, 0x27, 0x43, 0xDC, 0x49, 0xDF,  // 1pi'C.I.
        /* 0008 */  0x52, 0x44, 0xDF, 0x00, 0x00, 0x00, 0x00, 0x01,  // RD......
        /* 0010 */  0x00, 0x00, 0x00, 0x00, 0xDE, 0x10, 0x00, 0x00,  // ........
        /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 0020 */  0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x00,  // ......4.
        /* 0028 */  0x00, 0x00, 0x01, 0x00, 0x47, 0x00, 0x00, 0x00,  // ....G...
        /* 0030 */  0x02, 0x00, 0x45, 0x00, 0x00, 0x00, 0x03, 0x00,  // ..E.....
        /* 0038 */  0x8F, 0x00, 0x00, 0x00, 0x04, 0x00, 0x8D, 0x00,  // ........
        /* 0040 */  0x00, 0x00, 0x05, 0x00, 0x8B, 0x00, 0x00, 0x00,  // ........
        /* 0048 */  0x06, 0x00, 0x89, 0x00, 0x00, 0x00, 0x07, 0x00,  // ........
        /* 0050 */  0x87, 0x00, 0x00, 0x00, 0x08, 0x00, 0x85, 0x00,  // ........
        /* 0058 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xD9, 0x1C,  // ........
        /* 0060 */  0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,  // ........
        /* 0068 */  0x41, 0x5D, 0xC9, 0x00, 0x01, 0x24, 0x2E, 0x00,  // A]...$..
        /* 0070 */  0x02, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x01,  // ........
        /* 0078 */  0x00, 0x00, 0x00, 0xD9, 0x1C, 0x04, 0x00, 0x00,  // ........
        /* 0080 */  0x00, 0x04, 0x00, 0x00, 0x00, 0xE0, 0x7C, 0x97,  // ......|.
        /* 0088 */  0x01, 0xC0, 0x3D, 0x9C, 0x01, 0xC4, 0xD5, 0xC4,  // ..=.....
        /* 0090 */  0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 2.......
        /* 0098 */  0x00, 0x26, 0x00, 0x00, 0x00, 0x31, 0x00, 0x36,  // .&...1.6
        /* 00A0 */  0x00, 0x35, 0x00, 0x2A, 0x00, 0x31, 0x00, 0x34,  // .5.*.1.4
        /* 00A8 */  0x00, 0x35, 0x00, 0x34, 0x00, 0x35, 0x00, 0x3B,  // .5.4.5.;
        /* 00B0 */  0x00, 0x36, 0x00, 0x30, 0x00, 0x2A, 0x00, 0x34,  // .6.0.*.4
        /* 00B8 */  0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30,  // .0.0.0.0
        /* 00C0 */  0x00, 0x00, 0x00, 0x60, 0x68, 0x9E, 0x35, 0x00,  // ...`h.5.
        /* 00C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 00D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 00D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00         // .......
    })
    Name (BOD2, Buffer (0xCD)
    {
        /* 0000 */  0xCC, 0x22, 0x22, 0x6E, 0x95, 0x62, 0xCC, 0x31,  // .""n.b.1
        /* 0008 */  0x52, 0x44, 0xCD, 0x00, 0x00, 0x00, 0x00, 0x01,  // RD......
        /* 0010 */  0x00, 0x00, 0x00, 0x00, 0xDE, 0x10, 0x00, 0x00,  // ........
        /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 0020 */  0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x00,  // ......4.
        /* 0028 */  0x00, 0x00, 0x01, 0x00, 0x47, 0x00, 0x00, 0x00,  // ....G...
        /* 0030 */  0x02, 0x00, 0x45, 0x00, 0x00, 0x00, 0x03, 0x00,  // ..E.....
        /* 0038 */  0x7D, 0x00, 0x00, 0x00, 0x04, 0x00, 0x7B, 0x00,  // }.....{.
        /* 0040 */  0x00, 0x00, 0x05, 0x00, 0x79, 0x00, 0x00, 0x00,  // ....y...
        /* 0048 */  0x06, 0x00, 0x77, 0x00, 0x00, 0x00, 0x07, 0x00,  // ..w.....
        /* 0050 */  0x75, 0x00, 0x00, 0x00, 0x08, 0x00, 0x73, 0x00,  // u.....s.
        /* 0058 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xD9, 0x1C,  // ........
        /* 0060 */  0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,  // ........
        /* 0068 */  0x41, 0x5D, 0xC9, 0x00, 0x01, 0x24, 0x2E, 0x00,  // A]...$..
        /* 0070 */  0x02, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x01,  // ........
        /* 0078 */  0x00, 0x00, 0x00, 0xD9, 0x1C, 0x04, 0x00, 0x00,  // ........
        /* 0080 */  0x00, 0x04, 0x00, 0x00, 0x00, 0xE0, 0x7C, 0x97,  // ......|.
        /* 0088 */  0x01, 0xC0, 0x3D, 0x9C, 0x01, 0xC4, 0xD5, 0xC4,  // ..=.....
        /* 0090 */  0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //  .......
        /* 0098 */  0x00, 0x14, 0x00, 0x00, 0x00, 0x31, 0x00, 0x36,  // .....1.6
        /* 00A0 */  0x00, 0x35, 0x00, 0x2A, 0x00, 0x31, 0x00, 0x34,  // .5.*.1.4
        /* 00A8 */  0x00, 0x35, 0x00, 0x34, 0x00, 0x35, 0x00, 0x00,  // .5.4.5..
        /* 00B0 */  0x00, 0x60, 0x68, 0x9E, 0x35, 0x00, 0x00, 0x00,  // .`h.5...
        /* 00B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 00C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 00C8 */  0x00, 0x00, 0x00, 0x00, 0x00                     // .....
    })
    Name (CSDR, Buffer (0xE1)
    {
        /* 0000 */  0x0A, 0x87, 0xAD, 0x03, 0x53, 0x3B, 0x31, 0xDC,  // ....S;1.
        /* 0008 */  0x52, 0x44, 0xE1, 0x00, 0x00, 0x00, 0x00, 0x01,  // RD......
        /* 0010 */  0x00, 0x00, 0x00, 0x00, 0xDE, 0x10, 0x00, 0x00,  // ........
        /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 0020 */  0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x00,  // ......4.
        /* 0028 */  0x00, 0x00, 0x01, 0x00, 0x47, 0x00, 0x00, 0x00,  // ....G...
        /* 0030 */  0x02, 0x00, 0x45, 0x00, 0x00, 0x00, 0x03, 0x00,  // ..E.....
        /* 0038 */  0x91, 0x00, 0x00, 0x00, 0x04, 0x00, 0x8F, 0x00,  // ........
        /* 0040 */  0x00, 0x00, 0x05, 0x00, 0x8D, 0x00, 0x00, 0x00,  // ........
        /* 0048 */  0x06, 0x00, 0x8B, 0x00, 0x00, 0x00, 0x07, 0x00,  // ........
        /* 0050 */  0x89, 0x00, 0x00, 0x00, 0x08, 0x00, 0x87, 0x00,  // ........
        /* 0058 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xD9, 0x1C,  // ........
        /* 0060 */  0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,  // ........
        /* 0068 */  0x41, 0x5D, 0xC9, 0x00, 0x01, 0x24, 0x2E, 0x00,  // A]...$..
        /* 0070 */  0x02, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x01,  // ........
        /* 0078 */  0x00, 0x00, 0x00, 0xD9, 0x1C, 0x04, 0x00, 0x00,  // ........
        /* 0080 */  0x00, 0x04, 0x00, 0x00, 0x00, 0xE0, 0x7C, 0x97,  // ......|.
        /* 0088 */  0x01, 0xC0, 0x3D, 0x9C, 0x01, 0xC4, 0xD5, 0xC4,  // ..=.....
        /* 0090 */  0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 4.......
        /* 0098 */  0x00, 0x28, 0x00, 0x00, 0x00, 0x31, 0x00, 0x36,  // .(...1.6
        /* 00A0 */  0x00, 0x35, 0x00, 0x2A, 0x00, 0x31, 0x00, 0x34,  // .5.*.1.4
        /* 00A8 */  0x00, 0x35, 0x00, 0x34, 0x00, 0x35, 0x00, 0x3B,  // .5.4.5.;
        /* 00B0 */  0x00, 0x20, 0x00, 0x36, 0x00, 0x30, 0x00, 0x2A,  // . .6.0.*
        /* 00B8 */  0x00, 0x31, 0x00, 0x36, 0x00, 0x36, 0x00, 0x36,  // .1.6.6.6
        /* 00C0 */  0x00, 0x36, 0x00, 0x00, 0x00, 0x60, 0x68, 0x9E,  // .6...`h.
        /* 00C8 */  0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 5.......
        /* 00D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 00D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 00E0 */  0x00                                             // .
    })
    Name (CSD2, Buffer (0xDF)
    {
        /* 0000 */  0x6D, 0x77, 0x4C, 0x96, 0xBA, 0x09, 0xCD, 0x3F,  // mwL....?
        /* 0008 */  0x52, 0x44, 0xDF, 0x00, 0x00, 0x00, 0x00, 0x01,  // RD......
        /* 0010 */  0x00, 0x00, 0x00, 0x00, 0xDE, 0x10, 0x00, 0x00,  // ........
        /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 0020 */  0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x00,  // ......4.
        /* 0028 */  0x00, 0x00, 0x01, 0x00, 0x47, 0x00, 0x00, 0x00,  // ....G...
        /* 0030 */  0x02, 0x00, 0x45, 0x00, 0x00, 0x00, 0x03, 0x00,  // ..E.....
        /* 0038 */  0x8F, 0x00, 0x00, 0x00, 0x04, 0x00, 0x8D, 0x00,  // ........
        /* 0040 */  0x00, 0x00, 0x05, 0x00, 0x8B, 0x00, 0x00, 0x00,  // ........
        /* 0048 */  0x06, 0x00, 0x89, 0x00, 0x00, 0x00, 0x07, 0x00,  // ........
        /* 0050 */  0x87, 0x00, 0x00, 0x00, 0x08, 0x00, 0x85, 0x00,  // ........
        /* 0058 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xD9, 0x1C,  // ........
        /* 0060 */  0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,  // ........
        /* 0068 */  0x41, 0x5D, 0xC9, 0x00, 0x01, 0x24, 0x2E, 0x00,  // A]...$..
        /* 0070 */  0x02, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x01,  // ........
        /* 0078 */  0x00, 0x00, 0x00, 0xD9, 0x1C, 0x04, 0x00, 0x00,  // ........
        /* 0080 */  0x00, 0x04, 0x00, 0x00, 0x00, 0xE0, 0x7C, 0x97,  // ......|.
        /* 0088 */  0x01, 0xC0, 0x3D, 0x9C, 0x01, 0xC4, 0xD5, 0xC4,  // ..=.....
        /* 0090 */  0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 2.......
        /* 0098 */  0x00, 0x26, 0x00, 0x00, 0x00, 0x31, 0x00, 0x36,  // .&...1.6
        /* 00A0 */  0x00, 0x35, 0x00, 0x2A, 0x00, 0x31, 0x00, 0x34,  // .5.*.1.4
        /* 00A8 */  0x00, 0x35, 0x00, 0x34, 0x00, 0x35, 0x00, 0x3B,  // .5.4.5.;
        /* 00B0 */  0x00, 0x36, 0x00, 0x30, 0x00, 0x2A, 0x00, 0x33,  // .6.0.*.3
        /* 00B8 */  0x00, 0x37, 0x00, 0x30, 0x00, 0x33, 0x00, 0x37,  // .7.0.3.7
        /* 00C0 */  0x00, 0x00, 0x00, 0x60, 0x68, 0x9E, 0x35, 0x00,  // ...`h.5.
        /* 00C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 00D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 00D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00         // .......
    })
    Name (AUD1, Buffer (0xCD)
    {
        /* 0000 */  0xCC, 0x22, 0x22, 0x6E, 0x95, 0x62, 0xCC, 0x31,  // .""n.b.1
        /* 0008 */  0x52, 0x44, 0xCD, 0x00, 0x00, 0x00, 0x00, 0x01,  // RD......
        /* 0010 */  0x00, 0x00, 0x00, 0x00, 0xDE, 0x10, 0x00, 0x00,  // ........
        /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 0020 */  0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x00,  // ......4.
        /* 0028 */  0x00, 0x00, 0x01, 0x00, 0x47, 0x00, 0x00, 0x00,  // ....G...
        /* 0030 */  0x02, 0x00, 0x45, 0x00, 0x00, 0x00, 0x03, 0x00,  // ..E.....
        /* 0038 */  0x7D, 0x00, 0x00, 0x00, 0x04, 0x00, 0x7B, 0x00,  // }.....{.
        /* 0040 */  0x00, 0x00, 0x05, 0x00, 0x79, 0x00, 0x00, 0x00,  // ....y...
        /* 0048 */  0x06, 0x00, 0x77, 0x00, 0x00, 0x00, 0x07, 0x00,  // ..w.....
        /* 0050 */  0x75, 0x00, 0x00, 0x00, 0x08, 0x00, 0x73, 0x00,  // u.....s.
        /* 0058 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xD9, 0x1C,  // ........
        /* 0060 */  0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,  // ........
        /* 0068 */  0x41, 0x5D, 0xC9, 0x00, 0x01, 0x24, 0x2E, 0x00,  // A]...$..
        /* 0070 */  0x02, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x01,  // ........
        /* 0078 */  0x00, 0x00, 0x00, 0xD9, 0x1C, 0x04, 0x00, 0x00,  // ........
        /* 0080 */  0x00, 0x04, 0x00, 0x00, 0x00, 0xE0, 0x7C, 0x97,  // ......|.
        /* 0088 */  0x01, 0xC0, 0x3D, 0x9C, 0x01, 0xC4, 0xD5, 0xC4,  // ..=.....
        /* 0090 */  0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //  .......
        /* 0098 */  0x00, 0x14, 0x00, 0x00, 0x00, 0x31, 0x00, 0x36,  // .....1.6
        /* 00A0 */  0x00, 0x35, 0x00, 0x2A, 0x00, 0x31, 0x00, 0x34,  // .5.*.1.4
        /* 00A8 */  0x00, 0x35, 0x00, 0x34, 0x00, 0x35, 0x00, 0x00,  // .5.4.5..
        /* 00B0 */  0x00, 0x60, 0x68, 0x9E, 0x35, 0x00, 0x00, 0x00,  // .`h.5...
        /* 00B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 00C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 00C8 */  0x00, 0x00, 0x00, 0x00, 0x00                     // .....
    })
    Name (BOD3, Buffer (0xDF)
    {
        /* 0000 */  0x31, 0x70, 0x69, 0x27, 0x43, 0xDC, 0x49, 0xDF,  // 1pi'C.I.
        /* 0008 */  0x52, 0x44, 0xDF, 0x00, 0x00, 0x00, 0x00, 0x01,  // RD......
        /* 0010 */  0x00, 0x00, 0x00, 0x00, 0xDE, 0x10, 0x00, 0x00,  // ........
        /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 0020 */  0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x00,  // ......4.
        /* 0028 */  0x00, 0x00, 0x01, 0x00, 0x47, 0x00, 0x00, 0x00,  // ....G...
        /* 0030 */  0x02, 0x00, 0x45, 0x00, 0x00, 0x00, 0x03, 0x00,  // ..E.....
        /* 0038 */  0x8F, 0x00, 0x00, 0x00, 0x04, 0x00, 0x8D, 0x00,  // ........
        /* 0040 */  0x00, 0x00, 0x05, 0x00, 0x8B, 0x00, 0x00, 0x00,  // ........
        /* 0048 */  0x06, 0x00, 0x89, 0x00, 0x00, 0x00, 0x07, 0x00,  // ........
        /* 0050 */  0x87, 0x00, 0x00, 0x00, 0x08, 0x00, 0x85, 0x00,  // ........
        /* 0058 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xD9, 0x1C,  // ........
        /* 0060 */  0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,  // ........
        /* 0068 */  0x41, 0x5D, 0xC9, 0x00, 0x01, 0x24, 0x2E, 0x00,  // A]...$..
        /* 0070 */  0x02, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x01,  // ........
        /* 0078 */  0x00, 0x00, 0x00, 0xD9, 0x1C, 0x04, 0x00, 0x00,  // ........
        /* 0080 */  0x00, 0x04, 0x00, 0x00, 0x00, 0xE0, 0x7C, 0x97,  // ......|.
        /* 0088 */  0x01, 0xC0, 0x3D, 0x9C, 0x01, 0xC4, 0xD5, 0xC4,  // ..=.....
        /* 0090 */  0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 2.......
        /* 0098 */  0x00, 0x26, 0x00, 0x00, 0x00, 0x31, 0x00, 0x36,  // .&...1.6
        /* 00A0 */  0x00, 0x35, 0x00, 0x2A, 0x00, 0x31, 0x00, 0x34,  // .5.*.1.4
        /* 00A8 */  0x00, 0x35, 0x00, 0x34, 0x00, 0x35, 0x00, 0x3B,  // .5.4.5.;
        /* 00B0 */  0x00, 0x36, 0x00, 0x30, 0x00, 0x2A, 0x00, 0x34,  // .6.0.*.4
        /* 00B8 */  0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30,  // .0.0.0.0
        /* 00C0 */  0x00, 0x00, 0x00, 0x60, 0x68, 0x9E, 0x35, 0x00,  // ...`h.5.
        /* 00C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 00D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 00D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00         // .......
    })
    Name (A5E3, Buffer (0xD5)
    {
        /* 0000 */  0x02, 0x71, 0x05, 0x06, 0xF8, 0x7B, 0x5C, 0x16,  // .q...{\.
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
        /* 0058 */  0x37, 0x31, 0x34, 0x35, 0x34, 0x35, 0x20, 0x20,  // 714545  
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x38, 0x33, 0x24,  //    - 83$
        /* 0068 */  0x3B, 0x2B, 0x31, 0x5B, 0x4F, 0x57, 0x47, 0x54,  // ;+1[OWGT
        /* 0070 */  0x58, 0x4E, 0x38, 0x54, 0x5B, 0x20, 0x2F, 0x54,  // XN8T[ /T
        /* 0078 */  0x2D, 0x5B, 0x25, 0x57, 0x2A, 0x31, 0x38, 0x4C,  // -[%W*18L
        /* 0080 */  0x3B, 0x26, 0x27, 0x24, 0x38, 0x2B, 0x46, 0x38,  // ;&'$8+F8
        /* 0088 */  0x3E, 0x34, 0x57, 0x20, 0x4F, 0x20, 0x2D, 0x20,  // >4W O - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (B5E3, Buffer (0xD5)
    {
        /* 0000 */  0x9E, 0x12, 0x7D, 0xD9, 0x34, 0xDF, 0x34, 0x85,  // ..}.4.4.
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
        /* 0058 */  0x37, 0x31, 0x34, 0x35, 0x33, 0x37, 0x20, 0x20,  // 714537  
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x39, 0x34, 0x25,  //    - 94%
        /* 0068 */  0x38, 0x2A, 0x30, 0x58, 0x4C, 0x56, 0x46, 0x57,  // 8*0XLVFW
        /* 0070 */  0x5B, 0x4D, 0x39, 0x55, 0x5A, 0x23, 0x50, 0x55,  // [M9UZ#PU
        /* 0078 */  0x2C, 0x58, 0x24, 0x54, 0x2B, 0x30, 0x27, 0x4F,  // ,X$T+0'O
        /* 0080 */  0x3A, 0x25, 0x24, 0x25, 0x3F, 0x2E, 0x34, 0x39,  // :%$%?.49
        /* 0088 */  0x30, 0x32, 0x49, 0x23, 0x43, 0x20, 0x2D, 0x20,  // 02I#C - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (L5E3, Buffer (0xD5)
    {
        /* 0000 */  0x20, 0xE0, 0xD6, 0x12, 0x50, 0x6A, 0x1D, 0x53,  //  ...Pj.S
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
        /* 0058 */  0x37, 0x31, 0x34, 0x35, 0x32, 0x34, 0x20, 0x20,  // 714524  
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x44, 0x30, 0x21,  //    - D0!
        /* 0068 */  0x3C, 0x36, 0x2C, 0x54, 0x40, 0x52, 0x5A, 0x53,  // <6,T@RZS
        /* 0070 */  0x57, 0x49, 0x44, 0x51, 0x56, 0x3F, 0x2C, 0x49,  // WIDQV?,I
        /* 0078 */  0x20, 0x54, 0x38, 0x28, 0x27, 0x4D, 0x3B, 0x4B,  //  T8('M;K
        /* 0080 */  0x36, 0x21, 0x58, 0x21, 0x3B, 0x22, 0x48, 0x36,  // 6!X!;"H6
        /* 0088 */  0x35, 0x4D, 0x5A, 0x57, 0x42, 0x20, 0x2D, 0x20,  // 5MZWB - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (A5E5, Buffer (0xD5)
    {
        /* 0000 */  0xCC, 0x68, 0x0D, 0xDC, 0xAE, 0xD8, 0xA0, 0x07,  // .h......
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
        /* 0058 */  0x37, 0x31, 0x34, 0x35, 0x34, 0x34, 0x20, 0x20,  // 714544  
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x46, 0x32, 0x23,  //    - F2#
        /* 0068 */  0x3A, 0x28, 0x2E, 0x5A, 0x4E, 0x54, 0x58, 0x55,  // :(.ZNTXU
        /* 0070 */  0x59, 0x4F, 0x46, 0x53, 0x54, 0x21, 0x2E, 0x4B,  // YOFST!.K
        /* 0078 */  0x22, 0x5A, 0x3B, 0x24, 0x5D, 0x4F, 0x39, 0x4D,  // "Z;$]O9M
        /* 0080 */  0x38, 0x27, 0x26, 0x22, 0x3A, 0x28, 0x38, 0x37,  // 8'&":(87
        /* 0088 */  0x31, 0x35, 0x56, 0x21, 0x4C, 0x20, 0x2D, 0x20,  // 15V!L - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (B5E5, Buffer (0xD5)
    {
        /* 0000 */  0x1D, 0x1E, 0xAE, 0x1E, 0x89, 0xDA, 0xF5, 0x52,  // .......R
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
        /* 0058 */  0x37, 0x31, 0x34, 0x35, 0x33, 0x35, 0x20, 0x20,  // 714535  
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x46, 0x32, 0x23,  //    - F2#
        /* 0068 */  0x3A, 0x28, 0x2E, 0x5A, 0x4E, 0x54, 0x58, 0x55,  // :(.ZNTXU
        /* 0070 */  0x59, 0x4F, 0x46, 0x53, 0x54, 0x21, 0x2E, 0x4B,  // YOFST!.K
        /* 0078 */  0x22, 0x5A, 0x3B, 0x24, 0x5D, 0x4F, 0x39, 0x4D,  // "Z;$]O9M
        /* 0080 */  0x38, 0x27, 0x26, 0x22, 0x3A, 0x2C, 0x4B, 0x37,  // 8'&":,K7
        /* 0088 */  0x3E, 0x30, 0x57, 0x21, 0x41, 0x20, 0x2D, 0x20,  // >0W!A - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (L5E5, Buffer (0xD5)
    {
        /* 0000 */  0x3B, 0x98, 0xEA, 0x8A, 0x12, 0xAD, 0x64, 0x48,  // ;.....dH
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
        /* 0058 */  0x37, 0x31, 0x34, 0x35, 0x32, 0x30, 0x20, 0x20,  // 714520  
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x40, 0x4A, 0x2B,  //    - @J+
        /* 0068 */  0x35, 0x3E, 0x25, 0x2E, 0x5D, 0x26, 0x57, 0x45,  // 5>%.]&WE
        /* 0070 */  0x46, 0x59, 0x53, 0x3F, 0x21, 0x48, 0x37, 0x32,  // FYS?!H72
        /* 0078 */  0x4B, 0x3C, 0x47, 0x40, 0x3F, 0x51, 0x59, 0x2A,  // K<G@?QY*
        /* 0080 */  0x59, 0x42, 0x3A, 0x4F, 0x54, 0x46, 0x23, 0x2D,  // YB:OTF#-
        /* 0088 */  0x2D, 0x25, 0x35, 0x2A, 0x39, 0x20, 0x2D, 0x20,  // -%5*9 - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (A5P0, Buffer (0xD5)
    {
        /* 0000 */  0x36, 0x2A, 0x58, 0x18, 0xB0, 0x1E, 0xFF, 0x65,  // 6*X....e
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
        /* 0058 */  0x37, 0x31, 0x34, 0x35, 0x34, 0x37, 0x20, 0x20,  // 714547  
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x3A, 0x35, 0x26,  //    - :5&
        /* 0068 */  0x39, 0x2D, 0x33, 0x59, 0x4D, 0x59, 0x45, 0x56,  // 9-3YMYEV
        /* 0070 */  0x5A, 0x33, 0x3A, 0x56, 0x59, 0x22, 0x51, 0x56,  // Z3:VY"QV
        /* 0078 */  0x2F, 0x59, 0x27, 0x26, 0x2E, 0x33, 0x26, 0x4E,  // /Y'&.3&N
        /* 0080 */  0x3D, 0x24, 0x26, 0x26, 0x49, 0x2D, 0x44, 0x3A,  // =$&&I-D:
        /* 0088 */  0x3C, 0x36, 0x49, 0x22, 0x49, 0x20, 0x2D, 0x20,  // <6I"I - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (B5P0, Buffer (0xD5)
    {
        /* 0000 */  0x80, 0xFC, 0xDB, 0xEC, 0xC3, 0x6F, 0x8A, 0x87,  // .....o..
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
        /* 0058 */  0x37, 0x31, 0x34, 0x35, 0x34, 0x30, 0x20, 0x20,  // 714540  
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x42, 0x4C, 0x2D,  //    - BL-
        /* 0068 */  0x33, 0x30, 0x27, 0x2C, 0x5B, 0x28, 0x55, 0x47,  // 30',[(UG
        /* 0070 */  0x48, 0x5F, 0x55, 0x21, 0x27, 0x4A, 0x39, 0x3C,  // H_U!'J9<
        /* 0078 */  0x55, 0x22, 0x40, 0x43, 0x4F, 0x53, 0x47, 0x2C,  // U"@COSG,
        /* 0080 */  0x5B, 0x40, 0x3B, 0x40, 0x22, 0x40, 0x2C, 0x50,  // [@;@"@,P
        /* 0088 */  0x26, 0x27, 0x3C, 0x54, 0x36, 0x20, 0x2D, 0x20,  // &'<T6 - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (L5P0, Buffer (0xD5)
    {
        /* 0000 */  0x74, 0x80, 0x14, 0xF6, 0x69, 0x71, 0x60, 0xBD,  // t...iq`.
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
        /* 0058 */  0x37, 0x31, 0x34, 0x35, 0x32, 0x36, 0x20, 0x20,  // 714526  
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x46, 0x32, 0x23,  //    - F2#
        /* 0068 */  0x3A, 0x28, 0x2E, 0x5A, 0x4E, 0x54, 0x58, 0x55,  // :(.ZNTXU
        /* 0070 */  0x59, 0x4F, 0x46, 0x53, 0x54, 0x21, 0x2E, 0x4B,  // YOFST!.K
        /* 0078 */  0x22, 0x5A, 0x3A, 0x25, 0x2B, 0x4F, 0x39, 0x4D,  // "Z:%+O9M
        /* 0080 */  0x38, 0x27, 0x25, 0x23, 0x4E, 0x2C, 0x4A, 0x34,  // 8'%#N,J4
        /* 0088 */  0x37, 0x30, 0x58, 0x59, 0x4C, 0x20, 0x2D, 0x20,  // 70XYL - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (A5PD, Buffer (0xD5)
    {
        /* 0000 */  0xD2, 0x88, 0x1A, 0x41, 0xC7, 0x6D, 0x90, 0x8F,  // ...A.m..
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
        /* 0058 */  0x37, 0x31, 0x34, 0x35, 0x34, 0x39, 0x20, 0x20,  // 714549  
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x3C, 0x37, 0x58,  //    - <7X
        /* 0068 */  0x27, 0x2F, 0x35, 0x5F, 0x4B, 0x5B, 0x43, 0x58,  // '/5_K[CX
        /* 0070 */  0x5C, 0x31, 0x3C, 0x58, 0x5F, 0x24, 0x53, 0x50,  // \1<X_$SP
        /* 0078 */  0x29, 0x5F, 0x21, 0x20, 0x2B, 0x35, 0x24, 0x50,  // )_! +5$P
        /* 0080 */  0x3F, 0x2A, 0x20, 0x58, 0x36, 0x2F, 0x42, 0x3C,  // ?* X6/B<
        /* 0088 */  0x3A, 0x30, 0x4B, 0x24, 0x4B, 0x20, 0x2D, 0x20,  // :0K$K - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (B5PD, Buffer (0xD5)
    {
        /* 0000 */  0x1A, 0x9A, 0x87, 0x1A, 0x4F, 0x82, 0xDC, 0x65,  // ....O..e
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
        /* 0058 */  0x37, 0x31, 0x34, 0x35, 0x34, 0x31, 0x20, 0x20,  // 714541  
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x43, 0x4D, 0x2E,  //    - CM.
        /* 0068 */  0x30, 0x33, 0x26, 0x2D, 0x58, 0x2B, 0x54, 0x46,  // 03&-X+TF
        /* 0070 */  0x4B, 0x5E, 0x56, 0x22, 0x26, 0x4D, 0x3A, 0x3D,  // K^V"&M:=
        /* 0078 */  0x54, 0x23, 0x43, 0x42, 0x4B, 0x52, 0x46, 0x2F,  // T#CBKRF/
        /* 0080 */  0x5A, 0x47, 0x45, 0x41, 0x5E, 0x43, 0x2F, 0x51,  // ZGEA^C/Q
        /* 0088 */  0x59, 0x28, 0x3F, 0x57, 0x37, 0x20, 0x2D, 0x20,  // Y(?W7 - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (L5PD, Buffer (0xD5)
    {
        /* 0000 */  0x1F, 0x70, 0x2F, 0x86, 0x6B, 0x62, 0xC2, 0x9B,  // .p/.kb..
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
        /* 0058 */  0x37, 0x31, 0x34, 0x35, 0x33, 0x31, 0x20, 0x20,  // 714531  
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x42, 0x4C, 0x2D,  //    - BL-
        /* 0068 */  0x33, 0x30, 0x27, 0x2C, 0x5B, 0x28, 0x55, 0x47,  // 30',[(UG
        /* 0070 */  0x48, 0x5F, 0x55, 0x21, 0x27, 0x4A, 0x39, 0x3C,  // H_U!'J9<
        /* 0078 */  0x55, 0x22, 0x40, 0x43, 0x48, 0x53, 0x47, 0x2C,  // U"@CHSG,
        /* 0080 */  0x5B, 0x40, 0x3B, 0x40, 0x5F, 0x40, 0x2D, 0x53,  // [@;@_@-S
        /* 0088 */  0x2F, 0x27, 0x33, 0x2C, 0x3B, 0x20, 0x2D, 0x20,  // /'3,; - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (A5P1, Buffer (0xD5)
    {
        /* 0000 */  0xBA, 0xD7, 0xDA, 0xCB, 0x2F, 0xCA, 0xB9, 0x97,  // ..../...
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
        /* 0058 */  0x37, 0x31, 0x34, 0x35, 0x34, 0x36, 0x20, 0x20,  // 714546  
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x39, 0x34, 0x25,  //    - 94%
        /* 0068 */  0x38, 0x2A, 0x30, 0x58, 0x4C, 0x56, 0x46, 0x57,  // 8*0XLVFW
        /* 0070 */  0x5B, 0x4D, 0x39, 0x55, 0x5A, 0x23, 0x50, 0x55,  // [M9UZ#PU
        /* 0078 */  0x2C, 0x58, 0x24, 0x27, 0x2B, 0x30, 0x27, 0x4F,  // ,X$'+0'O
        /* 0080 */  0x3A, 0x25, 0x27, 0x25, 0x4E, 0x2A, 0x47, 0x39,  // :%'%N*G9
        /* 0088 */  0x3F, 0x37, 0x48, 0x23, 0x4E, 0x20, 0x2D, 0x20,  // ?7H#N - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (B5P1, Buffer (0xD5)
    {
        /* 0000 */  0x88, 0x8C, 0x13, 0x6B, 0xC8, 0xA3, 0x8A, 0x19,  // ...k....
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
        /* 0058 */  0x37, 0x31, 0x34, 0x35, 0x33, 0x39, 0x20, 0x20,  // 714539  
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x3B, 0x36, 0x27,  //    - ;6'
        /* 0068 */  0x26, 0x2C, 0x32, 0x5E, 0x4A, 0x58, 0x44, 0x59,  // &,2^JXDY
        /* 0070 */  0x5D, 0x32, 0x3B, 0x57, 0x58, 0x25, 0x52, 0x57,  // ]2;WX%RW
        /* 0078 */  0x2E, 0x5E, 0x26, 0x21, 0x2D, 0x32, 0x25, 0x51,  // .^&!-2%Q
        /* 0080 */  0x3C, 0x2B, 0x21, 0x27, 0x4C, 0x28, 0x36, 0x3B,  // <+!'L(6;
        /* 0088 */  0x32, 0x34, 0x4B, 0x25, 0x45, 0x20, 0x2D, 0x20,  // 24K%E - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (L5P1, Buffer (0xD5)
    {
        /* 0000 */  0xF8, 0x70, 0x1E, 0x82, 0xAA, 0x66, 0xA8, 0x0D,  // .p...f..
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
        /* 0058 */  0x37, 0x31, 0x34, 0x35, 0x32, 0x35, 0x20, 0x20,  // 714525  
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x45, 0x31, 0x22,  //    - E1"
        /* 0068 */  0x3D, 0x29, 0x2F, 0x55, 0x41, 0x55, 0x59, 0x52,  // =)/UAUYR
        /* 0070 */  0x56, 0x48, 0x45, 0x52, 0x55, 0x3E, 0x2D, 0x4A,  // VHERU>-J
        /* 0078 */  0x23, 0x55, 0x3B, 0x5A, 0x28, 0x4C, 0x3A, 0x4A,  // #U;Z(L:J
        /* 0080 */  0x39, 0x20, 0x5A, 0x22, 0x4B, 0x2D, 0x49, 0x35,  // 9 Z"K-I5
        /* 0088 */  0x36, 0x4E, 0x5B, 0x56, 0x4D, 0x20, 0x2D, 0x20,  // 6N[VM - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (A5G6, Buffer (0xD5)
    {
        /* 0000 */  0xDC, 0xF6, 0x15, 0xEA, 0x95, 0x48, 0x28, 0xD7,  // .....H(.
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
        /* 0058 */  0x37, 0x31, 0x34, 0x35, 0x35, 0x30, 0x20, 0x20,  // 714550  
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x43, 0x4D, 0x2E,  //    - CM.
        /* 0068 */  0x30, 0x33, 0x26, 0x2D, 0x58, 0x2B, 0x54, 0x46,  // 03&-X+TF
        /* 0070 */  0x4B, 0x5E, 0x56, 0x22, 0x26, 0x4D, 0x3A, 0x3D,  // K^V"&M:=
        /* 0078 */  0x54, 0x20, 0x30, 0x43, 0x3A, 0x52, 0x46, 0x2F,  // T 0C:RF/
        /* 0080 */  0x5A, 0x47, 0x46, 0x4E, 0x23, 0x47, 0x5C, 0x51,  // ZGFN#G\Q
        /* 0088 */  0x56, 0x2D, 0x3E, 0x57, 0x3A, 0x20, 0x2D, 0x20,  // V->W: - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (B5G6, Buffer (0xD5)
    {
        /* 0000 */  0x83, 0x28, 0x49, 0x56, 0x78, 0x92, 0xB5, 0x20,  // .(IVx.. 
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
        /* 0058 */  0x37, 0x31, 0x34, 0x35, 0x34, 0x32, 0x20, 0x20,  // 714542  
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x44, 0x30, 0x21,  //    - D0!
        /* 0068 */  0x3C, 0x36, 0x2C, 0x54, 0x40, 0x52, 0x5A, 0x53,  // <6,T@RZS
        /* 0070 */  0x57, 0x49, 0x44, 0x51, 0x56, 0x3F, 0x2C, 0x49,  // WIDQV?,I
        /* 0078 */  0x20, 0x57, 0x4B, 0x5A, 0x53, 0x4D, 0x3B, 0x4B,  //  WKZSM;K
        /* 0080 */  0x36, 0x21, 0x58, 0x2E, 0x4C, 0x22, 0x49, 0x35,  // 6!X.L"I5
        /* 0088 */  0x3C, 0x4D, 0x55, 0x2F, 0x4F, 0x20, 0x2D, 0x20,  // <MU/O - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (L5G6, Buffer (0xD5)
    {
        /* 0000 */  0x52, 0xD1, 0x21, 0xF7, 0x3A, 0xF8, 0xBC, 0x7B,  // R.!.:..{
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
        /* 0058 */  0x37, 0x31, 0x34, 0x35, 0x33, 0x33, 0x20, 0x20,  // 714533  
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x44, 0x30, 0x21,  //    - D0!
        /* 0068 */  0x3C, 0x36, 0x2C, 0x54, 0x40, 0x52, 0x5A, 0x53,  // <6,T@RZS
        /* 0070 */  0x57, 0x49, 0x44, 0x51, 0x56, 0x3F, 0x2C, 0x49,  // WIDQV?,I
        /* 0078 */  0x20, 0x57, 0x4B, 0x5A, 0x53, 0x4D, 0x3B, 0x4B,  //  WKZSM;K
        /* 0080 */  0x36, 0x21, 0x58, 0x2E, 0x4C, 0x22, 0x48, 0x36,  // 6!X.L"H6
        /* 0088 */  0x35, 0x4D, 0x5A, 0x57, 0x42, 0x20, 0x2D, 0x20,  // 5MZWB - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (A539, Buffer (0xD5)
    {
        /* 0000 */  0xEA, 0x5A, 0x9F, 0x33, 0x1C, 0x7C, 0x0C, 0x75,  // .Z.3.|.u
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
        /* 0058 */  0x37, 0x31, 0x35, 0x30, 0x32, 0x39, 0x20, 0x20,  // 715029  
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x45, 0x31, 0x22,  //    - E1"
        /* 0068 */  0x3D, 0x29, 0x2F, 0x54, 0x41, 0x55, 0x59, 0x52,  // =)/TAUYR
        /* 0070 */  0x56, 0x48, 0x45, 0x52, 0x55, 0x3E, 0x2D, 0x4A,  // VHERU>-J
        /* 0078 */  0x23, 0x55, 0x3B, 0x29, 0x28, 0x4C, 0x3A, 0x4A,  // #U;)(L:J
        /* 0080 */  0x39, 0x20, 0x59, 0x22, 0x3A, 0x29, 0x3B, 0x36,  // 9 Y":);6
        /* 0088 */  0x30, 0x4B, 0x55, 0x2E, 0x4D, 0x20, 0x2D, 0x20,  // 0KU.M - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (B539, Buffer (0xD5)
    {
        /* 0000 */  0x83, 0x49, 0x7B, 0xC6, 0x19, 0x31, 0xEF, 0x9A,  // .I{..1..
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
        /* 0058 */  0x37, 0x31, 0x35, 0x30, 0x33, 0x39, 0x20, 0x20,  // 715039  
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x46, 0x32, 0x23,  //    - F2#
        /* 0068 */  0x3A, 0x28, 0x2E, 0x5B, 0x4E, 0x54, 0x58, 0x55,  // :(.[NTXU
        /* 0070 */  0x59, 0x4F, 0x46, 0x53, 0x54, 0x21, 0x2E, 0x4B,  // YOFST!.K
        /* 0078 */  0x22, 0x5A, 0x3A, 0x56, 0x29, 0x4F, 0x39, 0x4D,  // "Z:V)O9M
        /* 0080 */  0x38, 0x27, 0x26, 0x23, 0x39, 0x2C, 0x4B, 0x37,  // 8'&#9,K7
        /* 0088 */  0x3E, 0x30, 0x57, 0x21, 0x41, 0x20, 0x2D, 0x20,  // >0W!A - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (L539, Buffer (0xD5)
    {
        /* 0000 */  0x7B, 0xF1, 0xB4, 0x74, 0x9D, 0xD7, 0x61, 0x43,  // {..t..aC
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
        /* 0058 */  0x37, 0x31, 0x35, 0x30, 0x33, 0x35, 0x20, 0x20,  // 715035  
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x42, 0x4C, 0x2D,  //    - BL-
        /* 0068 */  0x33, 0x30, 0x27, 0x2D, 0x5B, 0x28, 0x55, 0x47,  // 30'-[(UG
        /* 0070 */  0x48, 0x5F, 0x55, 0x21, 0x27, 0x4A, 0x39, 0x3C,  // H_U!'J9<
        /* 0078 */  0x55, 0x22, 0x40, 0x30, 0x4D, 0x53, 0x47, 0x2C,  // U"@0MSG,
        /* 0080 */  0x5B, 0x40, 0x38, 0x40, 0x55, 0x40, 0x2D, 0x53,  // [@8@U@-S
        /* 0088 */  0x2F, 0x27, 0x33, 0x2C, 0x3B, 0x20, 0x2D, 0x20,  // /'3,; - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (A559, Buffer (0xD5)
    {
        /* 0000 */  0xFA, 0xA2, 0x9A, 0xC4, 0x91, 0x09, 0xDD, 0xA8,  // ........
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
        /* 0058 */  0x37, 0x31, 0x35, 0x30, 0x32, 0x38, 0x20, 0x20,  // 715028  
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x44, 0x30, 0x21,  //    - D0!
        /* 0068 */  0x3C, 0x36, 0x2C, 0x55, 0x40, 0x52, 0x5A, 0x53,  // <6,U@RZS
        /* 0070 */  0x57, 0x49, 0x44, 0x51, 0x56, 0x3F, 0x2C, 0x49,  // WIDQV?,I
        /* 0078 */  0x20, 0x54, 0x39, 0x5A, 0x53, 0x4D, 0x3B, 0x4B,  //  T9ZSM;K
        /* 0080 */  0x36, 0x21, 0x58, 0x20, 0x38, 0x26, 0x3A, 0x35,  // 6!X 8&:5
        /* 0088 */  0x33, 0x48, 0x54, 0x2F, 0x42, 0x20, 0x2D, 0x20,  // 3HT/B - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (B559, Buffer (0xD5)
    {
        /* 0000 */  0x74, 0xAC, 0x17, 0x01, 0xED, 0x9A, 0x75, 0xC7,  // t.....u.
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
        /* 0058 */  0x37, 0x31, 0x35, 0x30, 0x33, 0x38, 0x20, 0x20,  // 715038  
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x45, 0x31, 0x22,  //    - E1"
        /* 0068 */  0x3D, 0x29, 0x2F, 0x54, 0x41, 0x55, 0x59, 0x52,  // =)/TAUYR
        /* 0070 */  0x56, 0x48, 0x45, 0x52, 0x55, 0x3E, 0x2D, 0x4A,  // VHERU>-J
        /* 0078 */  0x23, 0x55, 0x3A, 0x5B, 0x5C, 0x4C, 0x3A, 0x4A,  // #U:[\L:J
        /* 0080 */  0x39, 0x20, 0x59, 0x23, 0x39, 0x2D, 0x48, 0x36,  // 9 Y#9-H6
        /* 0088 */  0x3F, 0x4E, 0x54, 0x2E, 0x40, 0x20, 0x2D, 0x20,  // ?NT.@ - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (L559, Buffer (0xD5)
    {
        /* 0000 */  0x4F, 0xE1, 0xB0, 0x00, 0xF5, 0x1F, 0x98, 0x3D,  // O......=
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
        /* 0058 */  0x37, 0x31, 0x35, 0x30, 0x33, 0x34, 0x20, 0x20,  // 715034  
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x41, 0x4B, 0x2C,  //    - AK,
        /* 0068 */  0x32, 0x31, 0x24, 0x2E, 0x5A, 0x29, 0x56, 0x44,  // 21$.Z)VD
        /* 0070 */  0x49, 0x58, 0x54, 0x20, 0x20, 0x4B, 0x38, 0x33,  // IXT  K83
        /* 0078 */  0x4A, 0x3D, 0x40, 0x41, 0x38, 0x50, 0x58, 0x2D,  // J=@A8PX-
        /* 0080 */  0x58, 0x41, 0x3B, 0x4E, 0x55, 0x41, 0x2C, 0x2C,  // XA;NUA,,
        /* 0088 */  0x2E, 0x26, 0x32, 0x2D, 0x38, 0x20, 0x2D, 0x20,  // .&2-8 - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (A509, Buffer (0xD5)
    {
        /* 0000 */  0xBA, 0x8A, 0x32, 0xA1, 0xE8, 0x48, 0x1A, 0x2E,  // ..2..H..
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
        /* 0058 */  0x37, 0x31, 0x35, 0x30, 0x33, 0x31, 0x20, 0x20,  // 715031  
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x4E, 0x48, 0x29,  //    - NH)
        /* 0068 */  0x37, 0x3C, 0x23, 0x29, 0x5F, 0x24, 0x29, 0x43,  // 7<#)_$)C
        /* 0070 */  0x44, 0x5B, 0x51, 0x3D, 0x23, 0x46, 0x35, 0x30,  // D[Q=#F50
        /* 0078 */  0x49, 0x3E, 0x44, 0x47, 0x4B, 0x2F, 0x5B, 0x28,  // I>DGK/[(
        /* 0080 */  0x57, 0x5C, 0x3F, 0x4C, 0x26, 0x40, 0x53, 0x2C,  // W\?L&@S,
        /* 0088 */  0x2D, 0x26, 0x39, 0x50, 0x3F, 0x20, 0x2D, 0x20,  // -&9P? - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (B509, Buffer (0xD5)
    {
        /* 0000 */  0x0A, 0x57, 0x7A, 0x9A, 0x21, 0x21, 0x3B, 0x0D,  // .Wz.!!;.
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
        /* 0058 */  0x37, 0x31, 0x35, 0x30, 0x34, 0x31, 0x20, 0x20,  // 715041  
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x4F, 0x49, 0x2A,  //    - OI*
        /* 0068 */  0x34, 0x3F, 0x22, 0x28, 0x5C, 0x27, 0x28, 0x42,  // 4?"(\'(B
        /* 0070 */  0x47, 0x5A, 0x52, 0x3E, 0x22, 0x49, 0x36, 0x31,  // GZR>"I61
        /* 0078 */  0x48, 0x3F, 0x47, 0x46, 0x48, 0x2E, 0x5A, 0x2B,  // H?GFH.Z+
        /* 0080 */  0x56, 0x43, 0x3E, 0x4D, 0x27, 0x47, 0x23, 0x2D,  // VC>M'G#-
        /* 0088 */  0x25, 0x24, 0x3B, 0x53, 0x33, 0x20, 0x2D, 0x20,  // %$;S3 - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (L509, Buffer (0xD5)
    {
        /* 0000 */  0xDE, 0xBD, 0x57, 0x18, 0x3F, 0x06, 0xCE, 0xF2,  // ..W.?...
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
        /* 0058 */  0x37, 0x31, 0x35, 0x30, 0x33, 0x37, 0x20, 0x20,  // 715037  
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x44, 0x30, 0x21,  //    - D0!
        /* 0068 */  0x3C, 0x36, 0x2C, 0x55, 0x40, 0x52, 0x5A, 0x53,  // <6,U@RZS
        /* 0070 */  0x57, 0x49, 0x44, 0x51, 0x56, 0x3F, 0x2C, 0x49,  // WIDQV?,I
        /* 0078 */  0x20, 0x54, 0x38, 0x5B, 0x25, 0x4D, 0x3B, 0x4B,  //  T8[%M;K
        /* 0080 */  0x36, 0x21, 0x5B, 0x21, 0x4C, 0x22, 0x48, 0x36,  // 6![!L"H6
        /* 0088 */  0x35, 0x4D, 0x5A, 0x57, 0x42, 0x20, 0x2D, 0x20,  // 5MZWB - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (A519, Buffer (0xD5)
    {
        /* 0000 */  0xDB, 0x26, 0x37, 0x5A, 0xAF, 0xE1, 0x87, 0x11,  // .&7Z....
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
        /* 0058 */  0x37, 0x31, 0x35, 0x30, 0x33, 0x30, 0x20, 0x20,  // 715030  
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x4D, 0x47, 0x28,  //    - MG(
        /* 0068 */  0x36, 0x3D, 0x20, 0x2A, 0x5E, 0x25, 0x2A, 0x40,  // 6= *^%*@
        /* 0070 */  0x45, 0x54, 0x50, 0x3C, 0x3C, 0x47, 0x34, 0x37,  // ETP<<G47
        /* 0078 */  0x4E, 0x39, 0x45, 0x44, 0x48, 0x2C, 0x5C, 0x29,  // N9EDH,\)
        /* 0080 */  0x54, 0x5D, 0x3C, 0x4B, 0x23, 0x41, 0x52, 0x2B,  // T]<K#AR+
        /* 0088 */  0x2C, 0x27, 0x38, 0x51, 0x3C, 0x20, 0x2D, 0x20,  // ,'8Q< - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (B519, Buffer (0xD5)
    {
        /* 0000 */  0x6F, 0x29, 0x4D, 0x84, 0x03, 0xED, 0x51, 0x38,  // o)M...Q8
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
        /* 0058 */  0x37, 0x31, 0x35, 0x30, 0x34, 0x30, 0x20, 0x20,  // 715040  
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x4E, 0x48, 0x29,  //    - NH)
        /* 0068 */  0x37, 0x3C, 0x23, 0x29, 0x5F, 0x24, 0x29, 0x43,  // 7<#)_$)C
        /* 0070 */  0x44, 0x5B, 0x51, 0x3D, 0x23, 0x46, 0x35, 0x30,  // D[Q=#F50
        /* 0078 */  0x49, 0x3E, 0x44, 0x47, 0x49, 0x2F, 0x5B, 0x28,  // I>DGI/[(
        /* 0080 */  0x57, 0x5C, 0x3F, 0x4C, 0x20, 0x44, 0x20, 0x2C,  // W\?L D ,
        /* 0088 */  0x22, 0x23, 0x38, 0x50, 0x32, 0x20, 0x2D, 0x20,  // "#8P2 - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (L519, Buffer (0xD5)
    {
        /* 0000 */  0x00, 0x47, 0x4A, 0x3C, 0xD6, 0x63, 0x30, 0x51,  // .GJ<.c0Q
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
        /* 0058 */  0x37, 0x31, 0x35, 0x30, 0x33, 0x36, 0x20, 0x20,  // 715036  
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x43, 0x4D, 0x2E,  //    - CM.
        /* 0068 */  0x30, 0x33, 0x26, 0x2C, 0x58, 0x2B, 0x54, 0x46,  // 03&,X+TF
        /* 0070 */  0x4B, 0x5E, 0x56, 0x22, 0x26, 0x4D, 0x3A, 0x3D,  // K^V"&M:=
        /* 0078 */  0x54, 0x23, 0x43, 0x42, 0x4E, 0x52, 0x46, 0x2F,  // T#CBNRF/
        /* 0080 */  0x5A, 0x47, 0x45, 0x41, 0x25, 0x43, 0x2E, 0x52,  // ZGEA%C.R
        /* 0088 */  0x50, 0x28, 0x30, 0x2F, 0x3A, 0x20, 0x2D, 0x20,  // P(0/: - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (BPE3, Buffer (0xD5)
    {
        /* 0000 */  0xA8, 0x4B, 0x38, 0x77, 0x88, 0x78, 0xC6, 0x65,  // .K8w.x.e
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
        /* 0058 */  0x37, 0x31, 0x39, 0x32, 0x37, 0x38, 0x20, 0x20,  // 719278  
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x30, 0x3B, 0x5C,  //    - 0;\
        /* 0068 */  0x23, 0x23, 0x39, 0x43, 0x34, 0x5F, 0x4F, 0x5C,  // ##9C4_O\
        /* 0070 */  0x20, 0x35, 0x30, 0x5C, 0x43, 0x28, 0x57, 0x5C,  //  50\C(W\
        /* 0078 */  0x35, 0x43, 0x2D, 0x5F, 0x52, 0x39, 0x20, 0x54,  // 5C-_R9 T
        /* 0080 */  0x42, 0x2E, 0x2C, 0x5C, 0x26, 0x37, 0x3D, 0x20,  // B.,\&7= 
        /* 0088 */  0x29, 0x39, 0x4E, 0x59, 0x36, 0x20, 0x2D, 0x20,  // )9NY6 - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (CPE3, Buffer (0xD5)
    {
        /* 0000 */  0xC7, 0x58, 0xB3, 0x2C, 0xCA, 0xA9, 0xAA, 0x2F,  // .X.,.../
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
        /* 0058 */  0x37, 0x32, 0x39, 0x35, 0x36, 0x33, 0x20, 0x20,  // 729563  
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x3E, 0x39, 0x5A,  //    - >9Z
        /* 0068 */  0x25, 0x21, 0x37, 0x5D, 0x36, 0x5D, 0x41, 0x5A,  // %!7]6]AZ
        /* 0070 */  0x5E, 0x37, 0x3E, 0x5A, 0x5D, 0x26, 0x55, 0x52,  // ^7>Z]&UR
        /* 0078 */  0x2B, 0x5D, 0x23, 0x51, 0x50, 0x37, 0x22, 0x52,  // +]#QP7"R
        /* 0080 */  0x40, 0x28, 0x22, 0x5A, 0x24, 0x46, 0x40, 0x3E,  // @("Z$F@>
        /* 0088 */  0x4B, 0x36, 0x43, 0x2F, 0x37, 0x20, 0x2D, 0x20,  // K6C/7 - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (BPE5, Buffer (0xD5)
    {
        /* 0000 */  0xB2, 0x7B, 0x3B, 0xB0, 0x9C, 0xF1, 0x36, 0x9E,  // .{;...6.
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
        /* 0058 */  0x37, 0x31, 0x39, 0x32, 0x36, 0x37, 0x20, 0x20,  // 719267  
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x3E, 0x39, 0x5A,  //    - >9Z
        /* 0068 */  0x25, 0x21, 0x37, 0x5D, 0x36, 0x5D, 0x41, 0x5A,  // %!7]6]AZ
        /* 0070 */  0x5E, 0x37, 0x3E, 0x5A, 0x5D, 0x26, 0x55, 0x52,  // ^7>Z]&UR
        /* 0078 */  0x2B, 0x5D, 0x22, 0x23, 0x24, 0x37, 0x22, 0x52,  // +]"#$7"R
        /* 0080 */  0x40, 0x28, 0x22, 0x5A, 0x25, 0x35, 0x33, 0x3E,  // @("Z%53>
        /* 0088 */  0x37, 0x37, 0x4C, 0x27, 0x34, 0x20, 0x2D, 0x20,  // 77L'4 - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (CPE5, Buffer (0xD5)
    {
        /* 0000 */  0x0A, 0xF3, 0xF3, 0x9E, 0x07, 0x30, 0xF2, 0x35,  // .....0.5
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
        /* 0058 */  0x37, 0x32, 0x39, 0x35, 0x36, 0x31, 0x20, 0x20,  // 729561  
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x3C, 0x37, 0x58,  //    - <7X
        /* 0068 */  0x27, 0x2F, 0x35, 0x5F, 0x4B, 0x5B, 0x43, 0x58,  // '/5_K[CX
        /* 0070 */  0x5C, 0x31, 0x3C, 0x58, 0x5F, 0x24, 0x53, 0x50,  // \1<X_$SP
        /* 0078 */  0x29, 0x5F, 0x20, 0x21, 0x5A, 0x35, 0x24, 0x50,  // )_ !Z5$P
        /* 0080 */  0x3F, 0x2A, 0x20, 0x58, 0x3B, 0x58, 0x42, 0x3C,  // ?* X;XB<
        /* 0088 */  0x49, 0x34, 0x45, 0x2D, 0x48, 0x20, 0x2D, 0x20,  // I4E-H - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (BPP0, Buffer (0xD5)
    {
        /* 0000 */  0xA3, 0xC2, 0x45, 0xF9, 0xFC, 0x7C, 0xFE, 0x89,  // ..E..|..
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
        /* 0058 */  0x37, 0x31, 0x39, 0x32, 0x38, 0x35, 0x20, 0x20,  // 719285  
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x3E, 0x39, 0x5A,  //    - >9Z
        /* 0068 */  0x25, 0x21, 0x37, 0x5D, 0x36, 0x5D, 0x41, 0x5A,  // %!7]6]AZ
        /* 0070 */  0x5E, 0x37, 0x3E, 0x5A, 0x5D, 0x26, 0x55, 0x52,  // ^7>Z]&UR
        /* 0078 */  0x2B, 0x5D, 0x23, 0x22, 0x52, 0x37, 0x22, 0x52,  // +]#"R7"R
        /* 0080 */  0x40, 0x28, 0x22, 0x5A, 0x26, 0x35, 0x33, 0x3E,  // @("Z&53>
        /* 0088 */  0x37, 0x37, 0x4C, 0x27, 0x34, 0x20, 0x2D, 0x20,  // 77L'4 - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (CPP0, Buffer (0xD5)
    {
        /* 0000 */  0x08, 0x55, 0x34, 0xDF, 0x1F, 0xE3, 0x36, 0xD9,  // .U4...6.
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
        /* 0058 */  0x37, 0x32, 0x39, 0x35, 0x36, 0x37, 0x20, 0x20,  // 729567  
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x32, 0x3D, 0x5E,  //    - 2=^
        /* 0068 */  0x21, 0x25, 0x3B, 0x41, 0x32, 0x41, 0x4D, 0x5E,  // !%;A2AM^
        /* 0070 */  0x22, 0x3B, 0x32, 0x5E, 0x41, 0x2A, 0x59, 0x5E,  // ";2^A*Y^
        /* 0078 */  0x37, 0x41, 0x2F, 0x2E, 0x56, 0x3B, 0x2E, 0x56,  // 7A/.V;.V
        /* 0080 */  0x44, 0x2C, 0x2E, 0x5E, 0x22, 0x44, 0x3C, 0x54,  // D,.^"D<T
        /* 0088 */  0x57, 0x3A, 0x4F, 0x53, 0x33, 0x20, 0x2D, 0x20,  // W:OS3 - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (BPP1, Buffer (0xD5)
    {
        /* 0000 */  0xC1, 0x16, 0xD0, 0x2B, 0x12, 0x06, 0x70, 0x1E,  // ...+..p.
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
        /* 0058 */  0x37, 0x31, 0x39, 0x32, 0x38, 0x33, 0x20, 0x20,  // 719283  
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x3C, 0x37, 0x58,  //    - <7X
        /* 0068 */  0x27, 0x2F, 0x35, 0x5F, 0x4B, 0x5B, 0x43, 0x58,  // '/5_K[CX
        /* 0070 */  0x5C, 0x31, 0x3C, 0x58, 0x5F, 0x24, 0x53, 0x50,  // \1<X_$SP
        /* 0078 */  0x29, 0x5F, 0x21, 0x20, 0x2E, 0x35, 0x24, 0x50,  // )_! .5$P
        /* 0080 */  0x3F, 0x2A, 0x20, 0x58, 0x39, 0x2B, 0x31, 0x3C,  // ?* X9+1<
        /* 0088 */  0x35, 0x35, 0x4A, 0x25, 0x4B, 0x20, 0x2D, 0x20,  // 55J%K - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (CPP1, Buffer (0xD5)
    {
        /* 0000 */  0x53, 0xF9, 0x09, 0x7A, 0xB8, 0x5D, 0x29, 0x66,  // S..z.])f
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
        /* 0058 */  0x37, 0x32, 0x39, 0x35, 0x36, 0x35, 0x20, 0x20,  // 729565  
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x30, 0x3B, 0x5C,  //    - 0;\
        /* 0068 */  0x23, 0x23, 0x39, 0x43, 0x34, 0x5F, 0x4F, 0x5C,  // ##9C4_O\
        /* 0070 */  0x20, 0x35, 0x30, 0x5C, 0x43, 0x28, 0x57, 0x5C,  //  50\C(W\
        /* 0078 */  0x35, 0x43, 0x2D, 0x2C, 0x52, 0x39, 0x20, 0x54,  // 5C-,R9 T
        /* 0080 */  0x42, 0x2E, 0x2C, 0x5C, 0x25, 0x44, 0x4E, 0x20,  // B.,\%DN 
        /* 0088 */  0x55, 0x38, 0x41, 0x51, 0x35, 0x20, 0x2D, 0x20,  // U8AQ5 - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (BP39, Buffer (0xD5)
    {
        /* 0000 */  0x52, 0x32, 0xE7, 0x12, 0x76, 0xD6, 0xE1, 0x55,  // R2..v..U
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
        /* 0058 */  0x37, 0x31, 0x39, 0x32, 0x38, 0x38, 0x20, 0x20,  // 719288  
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x31, 0x3C, 0x5D,  //    - 1<]
        /* 0068 */  0x20, 0x22, 0x38, 0x41, 0x35, 0x5E, 0x4E, 0x5F,  //  "8A5^N_
        /* 0070 */  0x23, 0x34, 0x31, 0x5D, 0x42, 0x2B, 0x58, 0x5D,  // #41]B+X]
        /* 0078 */  0x34, 0x40, 0x2C, 0x5C, 0x53, 0x38, 0x2F, 0x57,  // 4@,\S8/W
        /* 0080 */  0x45, 0x2D, 0x2F, 0x5D, 0x21, 0x36, 0x3C, 0x21,  // E-/]!6<!
        /* 0088 */  0x28, 0x3A, 0x41, 0x5A, 0x31, 0x20, 0x2D, 0x20,  // (:AZ1 - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (CP39, Buffer (0xD5)
    {
        /* 0000 */  0x28, 0x52, 0xDF, 0x70, 0x2F, 0xCB, 0x5A, 0x22,  // (R.p/.Z"
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
        /* 0058 */  0x37, 0x32, 0x39, 0x35, 0x35, 0x38, 0x20, 0x20,  // 729558  
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x32, 0x3D, 0x5E,  //    - 2=^
        /* 0068 */  0x21, 0x25, 0x3B, 0x40, 0x32, 0x41, 0x4D, 0x5E,  // !%;@2AM^
        /* 0070 */  0x22, 0x3B, 0x32, 0x5E, 0x41, 0x2A, 0x59, 0x5E,  // ";2^A*Y^
        /* 0078 */  0x37, 0x41, 0x2F, 0x5D, 0x54, 0x3B, 0x2E, 0x56,  // 7A/]T;.V
        /* 0080 */  0x44, 0x2C, 0x2E, 0x5E, 0x20, 0x42, 0x4C, 0x22,  // D,.^ BL"
        /* 0088 */  0x57, 0x3A, 0x4F, 0x53, 0x33, 0x20, 0x2D, 0x20,  // W:OS3 - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (BP59, Buffer (0xD5)
    {
        /* 0000 */  0x95, 0x47, 0x41, 0xE8, 0xC9, 0xB6, 0x72, 0x0F,  // .GA...r.
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
        /* 0058 */  0x37, 0x31, 0x39, 0x32, 0x38, 0x37, 0x20, 0x20,  // 719287  
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x30, 0x3B, 0x5C,  //    - 0;\
        /* 0068 */  0x23, 0x23, 0x39, 0x42, 0x34, 0x5F, 0x4F, 0x5C,  // ##9B4_O\
        /* 0070 */  0x20, 0x35, 0x30, 0x5C, 0x43, 0x28, 0x57, 0x5C,  //  50\C(W\
        /* 0078 */  0x35, 0x43, 0x2C, 0x2D, 0x26, 0x39, 0x20, 0x54,  // 5C,-&9 T
        /* 0080 */  0x42, 0x2E, 0x2C, 0x5C, 0x27, 0x37, 0x3D, 0x20,  // B.,\'7= 
        /* 0088 */  0x29, 0x39, 0x4E, 0x59, 0x36, 0x20, 0x2D, 0x20,  // )9NY6 - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (CP59, Buffer (0xD5)
    {
        /* 0000 */  0x2B, 0x62, 0x1A, 0x64, 0xA4, 0x01, 0xA9, 0x5B,  // +b.d...[
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
        /* 0058 */  0x37, 0x32, 0x39, 0x35, 0x34, 0x38, 0x20, 0x20,  // 729548  
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x31, 0x3C, 0x5D,  //    - 1<]
        /* 0068 */  0x20, 0x22, 0x38, 0x41, 0x35, 0x5E, 0x4E, 0x5F,  //  "8A5^N_
        /* 0070 */  0x23, 0x34, 0x31, 0x5D, 0x42, 0x2B, 0x58, 0x5D,  // #41]B+X]
        /* 0078 */  0x34, 0x40, 0x2D, 0x2E, 0x27, 0x38, 0x2F, 0x57,  // 4@-.'8/W
        /* 0080 */  0x45, 0x2D, 0x2F, 0x5D, 0x20, 0x45, 0x4F, 0x21,  // E-/] EO!
        /* 0088 */  0x54, 0x3B, 0x4E, 0x52, 0x32, 0x20, 0x2D, 0x20,  // T;NR2 - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (BP09, Buffer (0xD5)
    {
        /* 0000 */  0xB8, 0xCE, 0x03, 0x20, 0x09, 0xA6, 0x67, 0x33,  // ... ..g3
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
        /* 0058 */  0x37, 0x31, 0x39, 0x32, 0x39, 0x34, 0x20, 0x20,  // 719294  
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x3E, 0x39, 0x5A,  //    - >9Z
        /* 0068 */  0x25, 0x21, 0x37, 0x5C, 0x36, 0x5D, 0x41, 0x5A,  // %!7\6]AZ
        /* 0070 */  0x5E, 0x37, 0x3E, 0x5A, 0x5D, 0x26, 0x55, 0x52,  // ^7>Z]&UR
        /* 0078 */  0x2B, 0x5D, 0x23, 0x22, 0x52, 0x37, 0x22, 0x52,  // +]#"R7"R
        /* 0080 */  0x40, 0x28, 0x22, 0x5A, 0x26, 0x35, 0x33, 0x3E,  // @("Z&53>
        /* 0088 */  0x37, 0x37, 0x4C, 0x27, 0x34, 0x20, 0x2D, 0x20,  // 77L'4 - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (CP09, Buffer (0xD5)
    {
        /* 0000 */  0x9B, 0xF7, 0xE4, 0xA6, 0xF2, 0xFE, 0xCD, 0x5F,  // ......._
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
        /* 0058 */  0x37, 0x32, 0x39, 0x35, 0x36, 0x30, 0x20, 0x20,  // 729560  
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x3B, 0x36, 0x27,  //    - ;6'
        /* 0068 */  0x26, 0x2C, 0x32, 0x5F, 0x4A, 0x58, 0x44, 0x59,  // &,2_JXDY
        /* 0070 */  0x5D, 0x32, 0x3B, 0x57, 0x58, 0x25, 0x52, 0x57,  // ]2;WX%RW
        /* 0078 */  0x2E, 0x5E, 0x26, 0x21, 0x2F, 0x32, 0x25, 0x51,  // .^&!/2%Q
        /* 0080 */  0x3C, 0x2B, 0x21, 0x27, 0x39, 0x5B, 0x45, 0x3B,  // <+!'9[E;
        /* 0088 */  0x4E, 0x35, 0x44, 0x2C, 0x4B, 0x20, 0x2D, 0x20,  // N5D,K - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (BP19, Buffer (0xD5)
    {
        /* 0000 */  0xFE, 0x91, 0xFB, 0x02, 0xB7, 0x4D, 0x36, 0x12,  // .....M6.
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
        /* 0058 */  0x37, 0x31, 0x39, 0x32, 0x39, 0x32, 0x20, 0x20,  // 719292  
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x3C, 0x37, 0x58,  //    - <7X
        /* 0068 */  0x27, 0x2F, 0x35, 0x5E, 0x4B, 0x5B, 0x43, 0x58,  // '/5^K[CX
        /* 0070 */  0x5C, 0x31, 0x3C, 0x58, 0x5F, 0x24, 0x53, 0x50,  // \1<X_$SP
        /* 0078 */  0x29, 0x5F, 0x21, 0x20, 0x2E, 0x35, 0x24, 0x50,  // )_! .5$P
        /* 0080 */  0x3F, 0x2A, 0x20, 0x58, 0x39, 0x2B, 0x31, 0x3C,  // ?* X9+1<
        /* 0088 */  0x35, 0x35, 0x4A, 0x25, 0x4B, 0x20, 0x2D, 0x20,  // 55J%K - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (CP19, Buffer (0xD5)
    {
        /* 0000 */  0x7D, 0xCC, 0xC0, 0x02, 0x66, 0x67, 0x9C, 0x69,  // }...fg.i
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
        /* 0058 */  0x37, 0x32, 0x39, 0x35, 0x35, 0x39, 0x20, 0x20,  // 729559  
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x33, 0x3E, 0x5F,  //    - 3>_
        /* 0068 */  0x2E, 0x24, 0x3A, 0x47, 0x33, 0x40, 0x4C, 0x21,  // .$:G3@L!
        /* 0070 */  0x25, 0x3A, 0x33, 0x5F, 0x40, 0x2D, 0x5A, 0x5F,  // %:3_@-Z_
        /* 0078 */  0x36, 0x46, 0x2E, 0x29, 0x55, 0x3A, 0x2D, 0x59,  // 6F.)U:-Y
        /* 0080 */  0x47, 0x53, 0x29, 0x5F, 0x20, 0x43, 0x4D, 0x23,  // GS)_ CM#
        /* 0088 */  0x56, 0x3D, 0x4C, 0x54, 0x30, 0x20, 0x2D, 0x20,  // V=LT0 - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (B739, Buffer (0xD5)
    {
        /* 0000 */  0x45, 0xB9, 0xFD, 0x15, 0x34, 0x59, 0xB2, 0xE3,  // E...4Y..
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
        /* 0058 */  0x37, 0x31, 0x35, 0x30, 0x37, 0x39, 0x20, 0x20,  // 715079  
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x3B, 0x36, 0x27,  //    - ;6'
        /* 0068 */  0x26, 0x2C, 0x32, 0x5F, 0x4A, 0x58, 0x44, 0x59,  // &,2_JXDY
        /* 0070 */  0x5D, 0x32, 0x3B, 0x57, 0x58, 0x25, 0x52, 0x57,  // ]2;WX%RW
        /* 0078 */  0x2E, 0x5E, 0x26, 0x52, 0x2D, 0x32, 0x25, 0x51,  // .^&R-2%Q
        /* 0080 */  0x3C, 0x2B, 0x22, 0x27, 0x3E, 0x28, 0x36, 0x3B,  // <+"'>(6;
        /* 0088 */  0x32, 0x34, 0x4B, 0x24, 0x48, 0x20, 0x2D, 0x20,  // 24K$H - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (C739, Buffer (0xD5)
    {
        /* 0000 */  0xC6, 0xAD, 0x94, 0x25, 0xE9, 0x2F, 0x5A, 0x42,  // ...%./ZB
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
        /* 0058 */  0x37, 0x32, 0x39, 0x35, 0x34, 0x37, 0x20, 0x20,  // 729547  
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x30, 0x3B, 0x5C,  //    - 0;\
        /* 0068 */  0x23, 0x23, 0x39, 0x42, 0x34, 0x5F, 0x4F, 0x5C,  // ##9B4_O\
        /* 0070 */  0x20, 0x35, 0x30, 0x5C, 0x43, 0x28, 0x57, 0x5C,  //  50\C(W\
        /* 0078 */  0x35, 0x43, 0x2D, 0x5F, 0x52, 0x39, 0x20, 0x54,  // 5C-_R9 T
        /* 0080 */  0x42, 0x2E, 0x2F, 0x5C, 0x23, 0x44, 0x4E, 0x20,  // B./\#DN 
        /* 0088 */  0x55, 0x38, 0x41, 0x51, 0x35, 0x20, 0x2D, 0x20,  // U8AQ5 - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (B759, Buffer (0xD5)
    {
        /* 0000 */  0xD6, 0x4E, 0xB8, 0x0D, 0x9E, 0xCE, 0x8D, 0x2F,  // .N...../
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
        /* 0058 */  0x37, 0x31, 0x35, 0x30, 0x37, 0x38, 0x20, 0x20,  // 715078  
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x3A, 0x35, 0x26,  //    - :5&
        /* 0068 */  0x39, 0x2D, 0x33, 0x58, 0x4D, 0x59, 0x45, 0x56,  // 9-3XMYEV
        /* 0070 */  0x5A, 0x33, 0x3A, 0x56, 0x59, 0x22, 0x51, 0x56,  // Z3:VY"QV
        /* 0078 */  0x2F, 0x59, 0x26, 0x27, 0x58, 0x33, 0x26, 0x4E,  // /Y&'X3&N
        /* 0080 */  0x3D, 0x24, 0x25, 0x26, 0x4C, 0x29, 0x37, 0x3A,  // =$%&L)7:
        /* 0088 */  0x33, 0x33, 0x48, 0x23, 0x49, 0x20, 0x2D, 0x20,  // 33H#I - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (C759, Buffer (0xD5)
    {
        /* 0000 */  0x5F, 0x3B, 0x71, 0x4E, 0x7D, 0x32, 0xCD, 0x52,  // _;qN}2.R
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
        /* 0058 */  0x37, 0x32, 0x39, 0x35, 0x34, 0x36, 0x20, 0x20,  // 729546  
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x3F, 0x3A, 0x5B,  //    - ?:[
        /* 0068 */  0x22, 0x20, 0x36, 0x43, 0x37, 0x5C, 0x40, 0x5D,  // " 6C7\@]
        /* 0070 */  0x21, 0x36, 0x3F, 0x5B, 0x5C, 0x29, 0x56, 0x53,  // !6?[\)VS
        /* 0078 */  0x2A, 0x42, 0x23, 0x2C, 0x25, 0x36, 0x21, 0x55,  // *B#,%6!U
        /* 0080 */  0x43, 0x2F, 0x2E, 0x5B, 0x53, 0x47, 0x41, 0x3F,  // C/.[SGA?
        /* 0088 */  0x4A, 0x39, 0x40, 0x50, 0x34, 0x20, 0x2D, 0x20,  // J9@P4 - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (B779, Buffer (0xD5)
    {
        /* 0000 */  0x21, 0x1E, 0xC3, 0x41, 0x15, 0x8D, 0xFE, 0x3E,  // !..A...>
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
        /* 0058 */  0x37, 0x31, 0x35, 0x30, 0x37, 0x36, 0x20, 0x20,  // 715076  
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x38, 0x33, 0x24,  //    - 83$
        /* 0068 */  0x3B, 0x2B, 0x31, 0x5A, 0x4F, 0x57, 0x47, 0x54,  // ;+1ZOWGT
        /* 0070 */  0x58, 0x4E, 0x38, 0x54, 0x5B, 0x20, 0x2F, 0x54,  // XN8T[ /T
        /* 0078 */  0x2D, 0x5B, 0x24, 0x25, 0x59, 0x31, 0x38, 0x4C,  // -[$%Y18L
        /* 0080 */  0x3B, 0x26, 0x27, 0x24, 0x3F, 0x2F, 0x35, 0x38,  // ;&'$?/58
        /* 0088 */  0x31, 0x31, 0x56, 0x21, 0x4F, 0x20, 0x2D, 0x20,  // 11V!O - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (C779, Buffer (0xD5)
    {
        /* 0000 */  0x3C, 0x8A, 0x8B, 0x0C, 0xBC, 0x03, 0xB8, 0x8B,  // <.......
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
        /* 0058 */  0x37, 0x32, 0x39, 0x35, 0x34, 0x35, 0x20, 0x20,  // 729545  
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x3E, 0x39, 0x5A,  //    - >9Z
        /* 0068 */  0x25, 0x21, 0x37, 0x5C, 0x36, 0x5D, 0x41, 0x5A,  // %!7\6]AZ
        /* 0070 */  0x5E, 0x37, 0x3E, 0x5A, 0x5D, 0x26, 0x55, 0x52,  // ^7>Z]&UR
        /* 0078 */  0x2B, 0x5D, 0x22, 0x23, 0x23, 0x37, 0x22, 0x52,  // +]"##7"R
        /* 0080 */  0x40, 0x28, 0x21, 0x5A, 0x25, 0x46, 0x40, 0x3E,  // @(!Z%F@>
        /* 0088 */  0x4B, 0x36, 0x43, 0x2F, 0x37, 0x20, 0x2D, 0x20,  // K6C/7 - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (D53B, Buffer (0xD5)
    {
        /* 0000 */  0x0D, 0xF2, 0x0F, 0x64, 0x92, 0x6D, 0x1B, 0xDD,  // ...d.m..
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
        /* 0058 */  0x37, 0x35, 0x32, 0x36, 0x32, 0x32, 0x20, 0x20,  // 752622  
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x45, 0x31, 0x22,  //    - E1"
        /* 0068 */  0x3D, 0x29, 0x2F, 0x55, 0x41, 0x55, 0x59, 0x52,  // =)/UAUYR
        /* 0070 */  0x56, 0x48, 0x45, 0x52, 0x55, 0x3E, 0x2D, 0x4A,  // VHERU>-J
        /* 0078 */  0x23, 0x55, 0x3B, 0x29, 0x28, 0x4C, 0x3A, 0x4A,  // #U;)(L:J
        /* 0080 */  0x39, 0x20, 0x59, 0x22, 0x3A, 0x2D, 0x48, 0x36,  // 9 Y":-H6
        /* 0088 */  0x3F, 0x4E, 0x2C, 0x25, 0x3C, 0x20, 0x2D, 0x20,  // ?N,%< - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (D55B, Buffer (0xD5)
    {
        /* 0000 */  0x3F, 0x41, 0x01, 0xE9, 0x92, 0x42, 0x98, 0x23,  // ?A...B.#
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
        /* 0058 */  0x37, 0x35, 0x32, 0x36, 0x32, 0x31, 0x20, 0x20,  // 752621  
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x44, 0x30, 0x21,  //    - D0!
        /* 0068 */  0x3C, 0x36, 0x2C, 0x54, 0x40, 0x52, 0x5A, 0x53,  // <6,T@RZS
        /* 0070 */  0x57, 0x49, 0x44, 0x51, 0x56, 0x3F, 0x2C, 0x49,  // WIDQV?,I
        /* 0078 */  0x20, 0x54, 0x39, 0x5A, 0x53, 0x4D, 0x3B, 0x4B,  //  T9ZSM;K
        /* 0080 */  0x36, 0x21, 0x58, 0x20, 0x38, 0x22, 0x49, 0x35,  // 6!X 8"I5
        /* 0088 */  0x3C, 0x4D, 0x2D, 0x24, 0x33, 0x20, 0x2D, 0x20,  // <M-$3 - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (D50B, Buffer (0xD5)
    {
        /* 0000 */  0x0B, 0x7C, 0xDA, 0x21, 0xB2, 0xD3, 0xDA, 0x65,  // .|.!...e
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
        /* 0058 */  0x37, 0x35, 0x32, 0x36, 0x32, 0x34, 0x20, 0x20,  // 752624  
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x38, 0x33, 0x24,  //    - 83$
        /* 0068 */  0x3B, 0x2B, 0x31, 0x5B, 0x4F, 0x57, 0x47, 0x54,  // ;+1[OWGT
        /* 0070 */  0x58, 0x4E, 0x38, 0x54, 0x5B, 0x20, 0x2F, 0x54,  // XN8T[ /T
        /* 0078 */  0x2D, 0x5B, 0x25, 0x24, 0x28, 0x31, 0x38, 0x4C,  // -[%$(18L
        /* 0080 */  0x3B, 0x26, 0x24, 0x24, 0x4F, 0x2F, 0x35, 0x38,  // ;&$$O/58
        /* 0088 */  0x31, 0x31, 0x2E, 0x2B, 0x3E, 0x20, 0x2D, 0x20,  // 11.+> - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (D5DB, Buffer (0xD5)
    {
        /* 0000 */  0x62, 0x39, 0xD8, 0xB6, 0x17, 0x75, 0x16, 0xC6,  // b9...u..
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
        /* 0058 */  0x37, 0x35, 0x32, 0x36, 0x32, 0x35, 0x20, 0x20,  // 752625  
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x39, 0x34, 0x25,  //    - 94%
        /* 0068 */  0x38, 0x2A, 0x30, 0x58, 0x4C, 0x56, 0x46, 0x57,  // 8*0XLVFW
        /* 0070 */  0x5B, 0x4D, 0x39, 0x55, 0x5A, 0x23, 0x50, 0x55,  // [M9UZ#PU
        /* 0078 */  0x2C, 0x58, 0x24, 0x27, 0x2E, 0x30, 0x27, 0x4F,  // ,X$'.0'O
        /* 0080 */  0x3A, 0x25, 0x27, 0x25, 0x35, 0x2E, 0x34, 0x39,  // :%'%5.49
        /* 0088 */  0x30, 0x32, 0x31, 0x28, 0x3F, 0x20, 0x2D, 0x20,  // 021(? - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (D51B, Buffer (0xD5)
    {
        /* 0000 */  0x06, 0xFB, 0xCC, 0x6D, 0x4B, 0x34, 0x62, 0x2C,  // ...mK4b,
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
        /* 0058 */  0x37, 0x35, 0x32, 0x36, 0x32, 0x33, 0x20, 0x20,  // 752623  
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x46, 0x32, 0x23,  //    - F2#
        /* 0068 */  0x3A, 0x28, 0x2E, 0x5A, 0x4E, 0x54, 0x58, 0x55,  // :(.ZNTXU
        /* 0070 */  0x59, 0x4F, 0x46, 0x53, 0x54, 0x21, 0x2E, 0x4B,  // YOFST!.K
        /* 0078 */  0x22, 0x5A, 0x3A, 0x25, 0x29, 0x4F, 0x39, 0x4D,  // "Z:%)O9M
        /* 0080 */  0x38, 0x27, 0x25, 0x23, 0x48, 0x2C, 0x4B, 0x37,  // 8'%#H,K7
        /* 0088 */  0x3E, 0x30, 0x2F, 0x2A, 0x3D, 0x20, 0x2D, 0x20,  // >0/*= - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (D5GB, Buffer (0xD5)
    {
        /* 0000 */  0xC6, 0xB5, 0xEE, 0x39, 0x88, 0xE4, 0xC0, 0x90,  // ...9....
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
        /* 0058 */  0x37, 0x35, 0x32, 0x36, 0x32, 0x30, 0x20, 0x20,  // 752620  
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x43, 0x4D, 0x2E,  //    - CM.
        /* 0068 */  0x30, 0x33, 0x26, 0x2D, 0x58, 0x2B, 0x54, 0x46,  // 03&-X+TF
        /* 0070 */  0x4B, 0x5E, 0x56, 0x22, 0x26, 0x4D, 0x3A, 0x3D,  // K^V"&M:=
        /* 0078 */  0x54, 0x20, 0x30, 0x43, 0x3A, 0x52, 0x46, 0x2F,  // T 0C:RF/
        /* 0080 */  0x5A, 0x47, 0x46, 0x4E, 0x23, 0x43, 0x2F, 0x51,  // ZGFN#C/Q
        /* 0088 */  0x59, 0x28, 0x47, 0x5C, 0x4B, 0x20, 0x2D, 0x20,  // Y(G\K - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (D73B, Buffer (0xD5)
    {
        /* 0000 */  0xB0, 0xA2, 0x1A, 0xE8, 0x1A, 0x82, 0x68, 0x28,  // ......h(
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
        /* 0058 */  0x37, 0x35, 0x32, 0x36, 0x32, 0x38, 0x20, 0x20,  // 752628  
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x3C, 0x37, 0x58,  //    - <7X
        /* 0068 */  0x27, 0x2F, 0x35, 0x5E, 0x4B, 0x5B, 0x43, 0x58,  // '/5^K[CX
        /* 0070 */  0x5C, 0x31, 0x3C, 0x58, 0x5F, 0x24, 0x53, 0x50,  // \1<X_$SP
        /* 0078 */  0x29, 0x5F, 0x21, 0x53, 0x2E, 0x35, 0x24, 0x50,  // )_!S.5$P
        /* 0080 */  0x3F, 0x2A, 0x23, 0x58, 0x3C, 0x2B, 0x31, 0x3C,  // ?*#X<+1<
        /* 0088 */  0x35, 0x35, 0x32, 0x2F, 0x3A, 0x20, 0x2D, 0x20,  // 552/: - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (D75B, Buffer (0xD5)
    {
        /* 0000 */  0x1E, 0x22, 0xD3, 0xA6, 0xFC, 0x2B, 0x99, 0x05,  // ."...+..
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
        /* 0058 */  0x37, 0x35, 0x32, 0x36, 0x32, 0x37, 0x20, 0x20,  // 752627  
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x3B, 0x36, 0x27,  //    - ;6'
        /* 0068 */  0x26, 0x2C, 0x32, 0x5F, 0x4A, 0x58, 0x44, 0x59,  // &,2_JXDY
        /* 0070 */  0x5D, 0x32, 0x3B, 0x57, 0x58, 0x25, 0x52, 0x57,  // ]2;WX%RW
        /* 0078 */  0x2E, 0x5E, 0x27, 0x20, 0x59, 0x32, 0x25, 0x51,  // .^' Y2%Q
        /* 0080 */  0x3C, 0x2B, 0x22, 0x26, 0x3E, 0x28, 0x36, 0x3B,  // <+"&>(6;
        /* 0088 */  0x32, 0x34, 0x33, 0x2E, 0x39, 0x20, 0x2D, 0x20,  // 243.9 - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (D70B, Buffer (0xD5)
    {
        /* 0000 */  0x9D, 0x11, 0xFF, 0xDE, 0xA1, 0xCD, 0x76, 0xEB,  // ......v.
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
        /* 0058 */  0x37, 0x35, 0x32, 0x36, 0x33, 0x31, 0x20, 0x20,  // 752631  
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x45, 0x31, 0x22,  //    - E1"
        /* 0068 */  0x3D, 0x29, 0x2F, 0x54, 0x41, 0x55, 0x59, 0x52,  // =)/TAUYR
        /* 0070 */  0x56, 0x48, 0x45, 0x52, 0x55, 0x3E, 0x2D, 0x4A,  // VHERU>-J
        /* 0078 */  0x23, 0x55, 0x3B, 0x5A, 0x2A, 0x4C, 0x3A, 0x4A,  // #U;Z*L:J
        /* 0080 */  0x39, 0x20, 0x5A, 0x22, 0x4D, 0x2D, 0x48, 0x36,  // 9 Z"M-H6
        /* 0088 */  0x3F, 0x4E, 0x2C, 0x25, 0x3C, 0x20, 0x2D, 0x20,  // ?N,%< - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (D71B, Buffer (0xD5)
    {
        /* 0000 */  0x04, 0x6C, 0x57, 0xCA, 0x41, 0x18, 0xB0, 0x53,  // .lW.A..S
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
        /* 0058 */  0x37, 0x35, 0x32, 0x36, 0x32, 0x39, 0x20, 0x20,  // 752629  
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x3D, 0x38, 0x59,  //    - =8Y
        /* 0068 */  0x24, 0x2E, 0x34, 0x5D, 0x48, 0x5A, 0x42, 0x5B,  // $.4]HZB[
        /* 0070 */  0x5F, 0x30, 0x3D, 0x59, 0x5E, 0x27, 0x54, 0x51,  // _0=Y^'TQ
        /* 0078 */  0x28, 0x5C, 0x20, 0x23, 0x2F, 0x34, 0x23, 0x53,  // (\ #/4#S
        /* 0080 */  0x41, 0x29, 0x23, 0x59, 0x52, 0x2A, 0x30, 0x3D,  // A)#YR*0=
        /* 0088 */  0x34, 0x36, 0x35, 0x2C, 0x44, 0x20, 0x2D, 0x20,  // 465,D - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (D53C, Buffer (0xD5)
    {
        /* 0000 */  0xBB, 0x92, 0xD1, 0xB3, 0x28, 0xCE, 0x73, 0x21,  // ....(.s!
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
        /* 0058 */  0x37, 0x35, 0x32, 0x36, 0x34, 0x31, 0x20, 0x20,  // 752641  
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x46, 0x32, 0x23,  //    - F2#
        /* 0068 */  0x3A, 0x28, 0x2E, 0x5A, 0x4E, 0x54, 0x58, 0x55,  // :(.ZNTXU
        /* 0070 */  0x59, 0x4F, 0x46, 0x53, 0x54, 0x21, 0x2E, 0x4B,  // YOFST!.K
        /* 0078 */  0x22, 0x5A, 0x3A, 0x56, 0x29, 0x4F, 0x39, 0x4D,  // "Z:V)O9M
        /* 0080 */  0x38, 0x27, 0x26, 0x23, 0x39, 0x5F, 0x38, 0x37,  // 8'&#9_87
        /* 0088 */  0x42, 0x31, 0x5B, 0x28, 0x4E, 0x20, 0x2D, 0x20,  // B1[(N - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (D55C, Buffer (0xD5)
    {
        /* 0000 */  0xB0, 0x44, 0xB1, 0x5A, 0xAF, 0xAF, 0x8D, 0xEF,  // .D.Z....
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
        /* 0058 */  0x37, 0x35, 0x32, 0x36, 0x34, 0x30, 0x20, 0x20,  // 752640  
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x45, 0x31, 0x22,  //    - E1"
        /* 0068 */  0x3D, 0x29, 0x2F, 0x55, 0x41, 0x55, 0x59, 0x52,  // =)/UAUYR
        /* 0070 */  0x56, 0x48, 0x45, 0x52, 0x55, 0x3E, 0x2D, 0x4A,  // VHERU>-J
        /* 0078 */  0x23, 0x55, 0x3A, 0x5B, 0x5C, 0x4C, 0x3A, 0x4A,  // #U:[\L:J
        /* 0080 */  0x39, 0x20, 0x59, 0x23, 0x39, 0x5E, 0x3B, 0x36,  // 9 Y#9^;6
        /* 0088 */  0x43, 0x4F, 0x58, 0x27, 0x4F, 0x20, 0x2D, 0x20,  // COX'O - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (D50C, Buffer (0xD5)
    {
        /* 0000 */  0x04, 0x7D, 0xE3, 0x52, 0xB8, 0xA1, 0x95, 0xF2,  // .}.R....
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
        /* 0058 */  0x37, 0x35, 0x32, 0x36, 0x34, 0x33, 0x20, 0x20,  // 752643  
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x39, 0x34, 0x25,  //    - 94%
        /* 0068 */  0x38, 0x2A, 0x30, 0x58, 0x4C, 0x56, 0x46, 0x57,  // 8*0XLVFW
        /* 0070 */  0x5B, 0x4D, 0x39, 0x55, 0x5A, 0x23, 0x50, 0x55,  // [M9UZ#PU
        /* 0078 */  0x2C, 0x58, 0x24, 0x27, 0x29, 0x30, 0x27, 0x4F,  // ,X$')0'O
        /* 0080 */  0x3A, 0x25, 0x27, 0x25, 0x48, 0x5D, 0x47, 0x39,  // :%'%H]G9
        /* 0088 */  0x4C, 0x33, 0x45, 0x2A, 0x4C, 0x20, 0x2D, 0x20,  // L3E*L - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (D5DC, Buffer (0xD5)
    {
        /* 0000 */  0xA8, 0x5D, 0xAE, 0xAD, 0x2F, 0x23, 0x7C, 0x01,  // .]../#|.
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
        /* 0058 */  0x37, 0x35, 0x32, 0x36, 0x34, 0x34, 0x20, 0x20,  // 752644  
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x3A, 0x35, 0x26,  //    - :5&
        /* 0068 */  0x39, 0x2D, 0x33, 0x59, 0x4D, 0x59, 0x45, 0x56,  // 9-3YMYEV
        /* 0070 */  0x5A, 0x33, 0x3A, 0x56, 0x59, 0x22, 0x51, 0x56,  // Z3:VY"QV
        /* 0078 */  0x2F, 0x59, 0x27, 0x26, 0x29, 0x33, 0x26, 0x4E,  // /Y'&)3&N
        /* 0080 */  0x3D, 0x24, 0x26, 0x26, 0x34, 0x5A, 0x44, 0x3A,  // =$&&4ZD:
        /* 0088 */  0x4F, 0x32, 0x44, 0x2B, 0x4B, 0x20, 0x2D, 0x20,  // O2D+K - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (D51C, Buffer (0xD5)
    {
        /* 0000 */  0x1F, 0x3E, 0x64, 0x5A, 0x44, 0x48, 0x0A, 0x3E,  // .>dZDH.>
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
        /* 0058 */  0x37, 0x35, 0x32, 0x36, 0x34, 0x32, 0x20, 0x20,  // 752642  
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x38, 0x33, 0x24,  //    - 83$
        /* 0068 */  0x3B, 0x2B, 0x31, 0x5B, 0x4F, 0x57, 0x47, 0x54,  // ;+1[OWGT
        /* 0070 */  0x58, 0x4E, 0x38, 0x54, 0x5B, 0x20, 0x2F, 0x54,  // XN8T[ /T
        /* 0078 */  0x2D, 0x5B, 0x25, 0x24, 0x2A, 0x31, 0x38, 0x4C,  // -[%$*18L
        /* 0080 */  0x3B, 0x26, 0x24, 0x24, 0x49, 0x5C, 0x46, 0x38,  // ;&$$I\F8
        /* 0088 */  0x4D, 0x30, 0x5A, 0x29, 0x4D, 0x20, 0x2D, 0x20,  // M0Z)M - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (D5GC, Buffer (0xD5)
    {
        /* 0000 */  0x88, 0xA6, 0x73, 0xEF, 0x2E, 0x30, 0xF7, 0x51,  // ..s..0.Q
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
        /* 0058 */  0x37, 0x35, 0x32, 0x36, 0x34, 0x35, 0x20, 0x20,  // 752645  
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x3B, 0x36, 0x27,  //    - ;6'
        /* 0068 */  0x26, 0x2C, 0x32, 0x5E, 0x4A, 0x58, 0x44, 0x59,  // &,2^JXDY
        /* 0070 */  0x5D, 0x32, 0x3B, 0x57, 0x58, 0x25, 0x52, 0x57,  // ]2;WX%RW
        /* 0078 */  0x2E, 0x5D, 0x55, 0x20, 0x59, 0x32, 0x25, 0x51,  // .]U Y2%Q
        /* 0080 */  0x3C, 0x2B, 0x22, 0x28, 0x4A, 0x5B, 0x45, 0x3B,  // <+"(J[E;
        /* 0088 */  0x4E, 0x35, 0x47, 0x2C, 0x4A, 0x20, 0x2D, 0x20,  // N5G,J - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (D73C, Buffer (0xD5)
    {
        /* 0000 */  0x49, 0xBC, 0xB8, 0xB1, 0x85, 0x21, 0xD1, 0xF7,  // I....!..
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
        /* 0058 */  0x37, 0x35, 0x32, 0x36, 0x34, 0x37, 0x20, 0x20,  // 752647  
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x3D, 0x38, 0x59,  //    - =8Y
        /* 0068 */  0x24, 0x2E, 0x34, 0x5D, 0x48, 0x5A, 0x42, 0x5B,  // $.4]HZB[
        /* 0070 */  0x5F, 0x30, 0x3D, 0x59, 0x5E, 0x27, 0x54, 0x51,  // _0=Y^'TQ
        /* 0078 */  0x28, 0x5C, 0x20, 0x50, 0x2F, 0x34, 0x23, 0x53,  // (\ P/4#S
        /* 0080 */  0x41, 0x29, 0x20, 0x59, 0x23, 0x59, 0x43, 0x3D,  // A) Y#YC=
        /* 0088 */  0x48, 0x37, 0x41, 0x2E, 0x37, 0x20, 0x2D, 0x20,  // H7A.7 - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (D75C, Buffer (0xD5)
    {
        /* 0000 */  0x1D, 0xDF, 0xDC, 0x3D, 0x9A, 0xDE, 0x16, 0x94,  // ...=....
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
        /* 0058 */  0x37, 0x35, 0x32, 0x36, 0x34, 0x36, 0x20, 0x20,  // 752646  
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x3C, 0x37, 0x58,  //    - <7X
        /* 0068 */  0x27, 0x2F, 0x35, 0x5E, 0x4B, 0x5B, 0x43, 0x58,  // '/5^K[CX
        /* 0070 */  0x5C, 0x31, 0x3C, 0x58, 0x5F, 0x24, 0x53, 0x50,  // \1<X_$SP
        /* 0078 */  0x29, 0x5F, 0x20, 0x21, 0x5A, 0x35, 0x24, 0x50,  // )_ !Z5$P
        /* 0080 */  0x3F, 0x2A, 0x23, 0x59, 0x3F, 0x58, 0x42, 0x3C,  // ?*#Y?XB<
        /* 0088 */  0x49, 0x34, 0x46, 0x2D, 0x49, 0x20, 0x2D, 0x20,  // I4F-I - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (D70C, Buffer (0xD5)
    {
        /* 0000 */  0x99, 0xFC, 0xC4, 0xCC, 0xDA, 0x4B, 0x51, 0x97,  // .....KQ.
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
        /* 0058 */  0x37, 0x35, 0x32, 0x36, 0x34, 0x39, 0x20, 0x20,  // 752649  
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x3F, 0x3A, 0x5B,  //    - ?:[
        /* 0068 */  0x22, 0x20, 0x36, 0x43, 0x37, 0x5C, 0x40, 0x5D,  // " 6C7\@]
        /* 0070 */  0x21, 0x36, 0x3F, 0x5B, 0x5C, 0x29, 0x56, 0x53,  // !6?[\)VS
        /* 0078 */  0x2A, 0x42, 0x22, 0x2D, 0x53, 0x36, 0x21, 0x55,  // *B"-S6!U
        /* 0080 */  0x43, 0x2F, 0x2D, 0x5B, 0x56, 0x47, 0x41, 0x3F,  // C/-[VGA?
        /* 0088 */  0x4A, 0x39, 0x43, 0x50, 0x35, 0x20, 0x2D, 0x20,  // J9CP5 - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (D71C, Buffer (0xD5)
    {
        /* 0000 */  0xAA, 0xF9, 0xF8, 0x07, 0x95, 0xDC, 0x5D, 0xC5,  // ......].
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
        /* 0058 */  0x37, 0x35, 0x32, 0x36, 0x34, 0x38, 0x20, 0x20,  // 752648  
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x3E, 0x39, 0x5A,  //    - >9Z
        /* 0068 */  0x25, 0x21, 0x37, 0x5C, 0x36, 0x5D, 0x41, 0x5A,  // %!7\6]AZ
        /* 0070 */  0x5E, 0x37, 0x3E, 0x5A, 0x5D, 0x26, 0x55, 0x52,  // ^7>Z]&UR
        /* 0078 */  0x2B, 0x5D, 0x23, 0x22, 0x50, 0x37, 0x22, 0x52,  // +]#"P7"R
        /* 0080 */  0x40, 0x28, 0x22, 0x5A, 0x53, 0x46, 0x40, 0x3E,  // @("ZSF@>
        /* 0088 */  0x4B, 0x36, 0x40, 0x2F, 0x36, 0x20, 0x2D, 0x20,  // K6@/6 - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (E53C, Buffer (0xD5)
    {
        /* 0000 */  0x33, 0xBC, 0xD6, 0xD8, 0x6A, 0x79, 0x8D, 0x82,  // 3...jy..
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
        /* 0058 */  0x37, 0x36, 0x38, 0x32, 0x38, 0x31, 0x20, 0x20,  // 768281  
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x3E, 0x39, 0x5A,  //    - >9Z
        /* 0068 */  0x25, 0x21, 0x37, 0x5D, 0x36, 0x5D, 0x41, 0x5A,  // %!7]6]AZ
        /* 0070 */  0x5E, 0x37, 0x3E, 0x5A, 0x5D, 0x26, 0x55, 0x52,  // ^7>Z]&UR
        /* 0078 */  0x2B, 0x5D, 0x23, 0x51, 0x50, 0x37, 0x22, 0x52,  // +]#QP7"R
        /* 0080 */  0x40, 0x28, 0x22, 0x5A, 0x24, 0x46, 0x40, 0x3E,  // @("Z$F@>
        /* 0088 */  0x4B, 0x36, 0x43, 0x2F, 0x43, 0x20, 0x2D, 0x20,  // K6C/C - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (E55C, Buffer (0xD5)
    {
        /* 0000 */  0x15, 0x22, 0x28, 0x34, 0x3A, 0x34, 0xC5, 0xF1,  // ."(4:4..
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
        /* 0058 */  0x37, 0x36, 0x38, 0x32, 0x38, 0x30, 0x20, 0x20,  // 768280  
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x3D, 0x38, 0x59,  //    - =8Y
        /* 0068 */  0x24, 0x2E, 0x34, 0x5C, 0x48, 0x5A, 0x42, 0x5B,  // $.4\HZB[
        /* 0070 */  0x5F, 0x30, 0x3D, 0x59, 0x5E, 0x27, 0x54, 0x51,  // _0=Y^'TQ
        /* 0078 */  0x28, 0x5C, 0x21, 0x22, 0x5B, 0x34, 0x23, 0x53,  // (\!"[4#S
        /* 0080 */  0x41, 0x29, 0x23, 0x59, 0x24, 0x59, 0x43, 0x3D,  // A)#Y$YC=
        /* 0088 */  0x48, 0x37, 0x42, 0x2E, 0x42, 0x20, 0x2D, 0x20,  // H7B.B - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (E50C, Buffer (0xD5)
    {
        /* 0000 */  0x59, 0x26, 0x31, 0xF1, 0x1E, 0x1E, 0xBF, 0xC6,  // Y&1.....
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
        /* 0058 */  0x37, 0x36, 0x38, 0x32, 0x39, 0x31, 0x20, 0x20,  // 768291  
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x3F, 0x3A, 0x5B,  //    - ?:[
        /* 0068 */  0x22, 0x20, 0x36, 0x42, 0x37, 0x5C, 0x40, 0x5D,  // " 6B7\@]
        /* 0070 */  0x21, 0x36, 0x3F, 0x5B, 0x5C, 0x29, 0x56, 0x53,  // !6?[\)VS
        /* 0078 */  0x2A, 0x42, 0x22, 0x2D, 0x53, 0x36, 0x21, 0x55,  // *B"-S6!U
        /* 0080 */  0x43, 0x2F, 0x2D, 0x5B, 0x25, 0x47, 0x41, 0x3F,  // C/-[%GA?
        /* 0088 */  0x4A, 0x39, 0x40, 0x50, 0x40, 0x20, 0x2D, 0x20,  // J9@P@ - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (E51C, Buffer (0xD5)
    {
        /* 0000 */  0x50, 0x35, 0x1F, 0xA1, 0x7D, 0xA1, 0x20, 0x9F,  // P5..}. .
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
        /* 0058 */  0x37, 0x36, 0x38, 0x32, 0x38, 0x32, 0x20, 0x20,  // 768282  
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x3F, 0x3A, 0x5B,  //    - ?:[
        /* 0068 */  0x22, 0x20, 0x36, 0x42, 0x37, 0x5C, 0x40, 0x5D,  // " 6B7\@]
        /* 0070 */  0x21, 0x36, 0x3F, 0x5B, 0x5C, 0x29, 0x56, 0x53,  // !6?[\)VS
        /* 0078 */  0x2A, 0x42, 0x22, 0x2D, 0x51, 0x36, 0x21, 0x55,  // *B"-Q6!U
        /* 0080 */  0x43, 0x2F, 0x2D, 0x5B, 0x24, 0x47, 0x41, 0x3F,  // C/-[$GA?
        /* 0088 */  0x4A, 0x39, 0x40, 0x50, 0x40, 0x20, 0x2D, 0x20,  // J9@P@ - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (E93C, Buffer (0xD5)
    {
        /* 0000 */  0x70, 0x7A, 0xC4, 0x94, 0xF7, 0xF6, 0x17, 0x7A,  // pz.....z
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
        /* 0058 */  0x37, 0x36, 0x38, 0x32, 0x39, 0x34, 0x20, 0x20,  // 768294  
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x32, 0x3D, 0x5E,  //    - 2=^
        /* 0068 */  0x21, 0x25, 0x3B, 0x40, 0x32, 0x41, 0x4D, 0x5E,  // !%;@2AM^
        /* 0070 */  0x22, 0x3B, 0x32, 0x5E, 0x41, 0x2A, 0x59, 0x5E,  // ";2^A*Y^
        /* 0078 */  0x37, 0x41, 0x2F, 0x5D, 0x54, 0x3B, 0x2E, 0x56,  // 7A/]T;.V
        /* 0080 */  0x44, 0x2C, 0x2E, 0x5E, 0x20, 0x42, 0x4C, 0x22,  // D,.^ BL"
        /* 0088 */  0x57, 0x3A, 0x4F, 0x53, 0x47, 0x20, 0x2D, 0x20,  // W:OSG - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (E95C, Buffer (0xD5)
    {
        /* 0000 */  0xC8, 0xCF, 0xAE, 0x5A, 0x72, 0xF0, 0x51, 0x77,  // ...Zr.Qw
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
        /* 0058 */  0x37, 0x36, 0x38, 0x32, 0x39, 0x32, 0x20, 0x20,  // 768292  
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x30, 0x3B, 0x5C,  //    - 0;\
        /* 0068 */  0x23, 0x23, 0x39, 0x42, 0x34, 0x5F, 0x4F, 0x5C,  // ##9B4_O\
        /* 0070 */  0x20, 0x35, 0x30, 0x5C, 0x43, 0x28, 0x57, 0x5C,  //  50\C(W\
        /* 0078 */  0x35, 0x43, 0x2C, 0x2D, 0x26, 0x39, 0x20, 0x54,  // 5C,-&9 T
        /* 0080 */  0x42, 0x2E, 0x2C, 0x5C, 0x27, 0x44, 0x4E, 0x20,  // B.,\'DN 
        /* 0088 */  0x55, 0x38, 0x41, 0x51, 0x41, 0x20, 0x2D, 0x20,  // U8AQA - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (E90C, Buffer (0xD5)
    {
        /* 0000 */  0xAD, 0x68, 0x41, 0x4B, 0x06, 0x8E, 0x88, 0xF4,  // .hAK....
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
        /* 0058 */  0x37, 0x36, 0x38, 0x32, 0x32, 0x39, 0x37, 0x20,  // 7682297 
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x27, 0x53, 0x45,  //    - 'SE
        /* 0068 */  0x59, 0x4C, 0x54, 0x3C, 0x56, 0x3F, 0x2E, 0x3F,  // YLT<V?.?
        /* 0070 */  0x45, 0x5A, 0x54, 0x22, 0x24, 0x30, 0x20, 0x46,  // EZT"$0 F
        /* 0078 */  0x5E, 0x2F, 0x30, 0x52, 0x23, 0x46, 0x3F, 0x46,  // ^/0R#F?F
        /* 0080 */  0x34, 0x22, 0x5B, 0x22, 0x3D, 0x5C, 0x47, 0x3A,  // 4"["=\G:
        /* 0088 */  0x4E, 0x34, 0x42, 0x2F, 0x40, 0x20, 0x2D, 0x20,  // N4B/@ - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (E91C, Buffer (0xD5)
    {
        /* 0000 */  0xA0, 0xB9, 0xA0, 0xB9, 0xA0, 0xAD, 0x40, 0x4D,  // ......@M
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
        /* 0058 */  0x37, 0x36, 0x38, 0x32, 0x39, 0x36, 0x20, 0x20,  // 768296  
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x34, 0x3F, 0x50,  //    - 4?P
        /* 0068 */  0x2F, 0x27, 0x3D, 0x46, 0x30, 0x43, 0x4B, 0x20,  // /'=F0CK 
        /* 0070 */  0x24, 0x39, 0x34, 0x40, 0x47, 0x2C, 0x5B, 0x58,  // $94@G,[X
        /* 0078 */  0x31, 0x47, 0x29, 0x28, 0x56, 0x3D, 0x2C, 0x58,  // 1G)(V=,X
        /* 0080 */  0x46, 0x52, 0x28, 0x50, 0x21, 0x40, 0x4A, 0x24,  // FR(P!@J$
        /* 0088 */  0x51, 0x3C, 0x4D, 0x55, 0x45, 0x20, 0x2D, 0x20,  // Q<MUE - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (E73C, Buffer (0xD5)
    {
        /* 0000 */  0x9C, 0x52, 0x5A, 0xED, 0x0D, 0xAF, 0x33, 0x24,  // .RZ...3$
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
        /* 0058 */  0x37, 0x36, 0x38, 0x33, 0x30, 0x35, 0x20, 0x20,  // 768305  
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x3B, 0x36, 0x27,  //    - ;6'
        /* 0068 */  0x26, 0x2C, 0x32, 0x5F, 0x4A, 0x58, 0x44, 0x59,  // &,2_JXDY
        /* 0070 */  0x5D, 0x32, 0x3B, 0x57, 0x58, 0x25, 0x52, 0x57,  // ]2;WX%RW
        /* 0078 */  0x2E, 0x5E, 0x26, 0x52, 0x2D, 0x32, 0x25, 0x51,  // .^&R-2%Q
        /* 0080 */  0x3C, 0x2B, 0x22, 0x27, 0x3E, 0x5B, 0x45, 0x3B,  // <+"'>[E;
        /* 0088 */  0x4E, 0x35, 0x44, 0x2C, 0x3F, 0x20, 0x2D, 0x20,  // N5D,? - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (E75C, Buffer (0xD5)
    {
        /* 0000 */  0xFD, 0xC5, 0xAF, 0x77, 0x09, 0xEE, 0xF5, 0x07,  // ...w....
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
        /* 0058 */  0x37, 0x36, 0x38, 0x33, 0x30, 0x33, 0x20, 0x20,  // 768303  
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x39, 0x34, 0x25,  //    - 94%
        /* 0068 */  0x38, 0x2A, 0x30, 0x59, 0x4C, 0x56, 0x46, 0x57,  // 8*0YLVFW
        /* 0070 */  0x5B, 0x4D, 0x39, 0x55, 0x5A, 0x23, 0x50, 0x55,  // [M9UZ#PU
        /* 0078 */  0x2C, 0x58, 0x25, 0x26, 0x5F, 0x30, 0x27, 0x4F,  // ,X%&_0'O
        /* 0080 */  0x3A, 0x25, 0x24, 0x25, 0x4D, 0x5D, 0x47, 0x39,  // :%$%M]G9
        /* 0088 */  0x4C, 0x33, 0x46, 0x2A, 0x39, 0x20, 0x2D, 0x20,  // L3F*9 - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (E77C, Buffer (0xD5)
    {
        /* 0000 */  0x24, 0xAC, 0xEC, 0x34, 0x99, 0xC1, 0x96, 0xE3,  // $..4....
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
        /* 0058 */  0x37, 0x36, 0x38, 0x33, 0x30, 0x32, 0x20, 0x20,  // 768302  
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x38, 0x33, 0x24,  //    - 83$
        /* 0068 */  0x3B, 0x2B, 0x31, 0x5A, 0x4F, 0x57, 0x47, 0x54,  // ;+1ZOWGT
        /* 0070 */  0x58, 0x4E, 0x38, 0x54, 0x5B, 0x20, 0x2F, 0x54,  // XN8T[ /T
        /* 0078 */  0x2D, 0x5B, 0x24, 0x25, 0x59, 0x31, 0x38, 0x4C,  // -[$%Y18L
        /* 0080 */  0x3B, 0x26, 0x27, 0x24, 0x3F, 0x5C, 0x46, 0x38,  // ;&'$?\F8
        /* 0088 */  0x4D, 0x30, 0x59, 0x29, 0x38, 0x20, 0x2D, 0x20,  // M0Y)8 - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (F53B, Buffer (0xD5)
    {
        /* 0000 */  0xF1, 0xDF, 0x24, 0x29, 0x5A, 0x96, 0xAA, 0x13,  // ..$)Z...
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
        /* 0058 */  0x37, 0x38, 0x30, 0x35, 0x37, 0x36, 0x20, 0x20,  // 780576  
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x3F, 0x3A, 0x5B,  //    - ?:[
        /* 0068 */  0x22, 0x20, 0x36, 0x42, 0x37, 0x5C, 0x40, 0x5D,  // " 6B7\@]
        /* 0070 */  0x21, 0x36, 0x3F, 0x5B, 0x5C, 0x29, 0x56, 0x53,  // !6?[\)VS
        /* 0078 */  0x2A, 0x42, 0x22, 0x5E, 0x51, 0x36, 0x21, 0x55,  // *B"^Q6!U
        /* 0080 */  0x43, 0x2F, 0x2E, 0x5B, 0x21, 0x34, 0x32, 0x3F,  // C/.[!42?
        /* 0088 */  0x36, 0x38, 0x37, 0x51, 0x41, 0x20, 0x2D, 0x20,  // 687QA - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (F55B, Buffer (0xD5)
    {
        /* 0000 */  0x39, 0x3A, 0xB6, 0x41, 0x7F, 0x0D, 0xE9, 0xD0,  // 9:.A....
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
        /* 0058 */  0x37, 0x38, 0x30, 0x35, 0x37, 0x34, 0x20, 0x20,  // 780574  
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x3D, 0x38, 0x59,  //    - =8Y
        /* 0068 */  0x24, 0x2E, 0x34, 0x5C, 0x48, 0x5A, 0x42, 0x5B,  // $.4\HZB[
        /* 0070 */  0x5F, 0x30, 0x3D, 0x59, 0x5E, 0x27, 0x54, 0x51,  // _0=Y^'TQ
        /* 0078 */  0x28, 0x5C, 0x21, 0x22, 0x5B, 0x34, 0x23, 0x53,  // (\!"[4#S
        /* 0080 */  0x41, 0x29, 0x20, 0x58, 0x20, 0x2A, 0x30, 0x3D,  // A) X *0=
        /* 0088 */  0x34, 0x36, 0x35, 0x2F, 0x43, 0x20, 0x2D, 0x20,  // 465/C - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (F50B, Buffer (0xD5)
    {
        /* 0000 */  0xB5, 0xBC, 0x5A, 0x1A, 0x86, 0x98, 0x66, 0xC3,  // ..Z...f.
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
        /* 0058 */  0x37, 0x38, 0x30, 0x35, 0x38, 0x31, 0x20, 0x20,  // 780581  
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x3B, 0x36, 0x27,  //    - ;6'
        /* 0068 */  0x26, 0x2C, 0x32, 0x5E, 0x4A, 0x58, 0x44, 0x59,  // &,2^JXDY
        /* 0070 */  0x5D, 0x32, 0x3B, 0x57, 0x58, 0x25, 0x52, 0x57,  // ]2;WX%RW
        /* 0078 */  0x2E, 0x5E, 0x26, 0x21, 0x2F, 0x32, 0x25, 0x51,  // .^&!/2%Q
        /* 0080 */  0x3C, 0x2B, 0x21, 0x27, 0x4A, 0x28, 0x36, 0x3B,  // <+!'J(6;
        /* 0088 */  0x32, 0x34, 0x33, 0x2D, 0x3E, 0x20, 0x2D, 0x20,  // 243-> - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (F5DB, Buffer (0xD5)
    {
        /* 0000 */  0x28, 0x16, 0x4E, 0x1F, 0xE4, 0x26, 0xDA, 0x4F,  // (.N..&.O
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
        /* 0058 */  0x37, 0x38, 0x30, 0x35, 0x38, 0x32, 0x20, 0x20,  // 780582  
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x3C, 0x37, 0x58,  //    - <7X
        /* 0068 */  0x27, 0x2F, 0x35, 0x5F, 0x4B, 0x5B, 0x43, 0x58,  // '/5_K[CX
        /* 0070 */  0x5C, 0x31, 0x3C, 0x58, 0x5F, 0x24, 0x53, 0x50,  // \1<X_$SP
        /* 0078 */  0x29, 0x5F, 0x21, 0x20, 0x2B, 0x35, 0x24, 0x50,  // )_! +5$P
        /* 0080 */  0x3F, 0x2A, 0x20, 0x58, 0x36, 0x2B, 0x31, 0x3C,  // ?* X6+1<
        /* 0088 */  0x35, 0x35, 0x32, 0x2C, 0x3D, 0x20, 0x2D, 0x20,  // 552,= - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (F51B, Buffer (0xD5)
    {
        /* 0000 */  0xD9, 0xF1, 0x68, 0xC8, 0xB3, 0x0F, 0x66, 0x8D,  // ..h...f.
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
        /* 0058 */  0x37, 0x38, 0x30, 0x35, 0x37, 0x39, 0x20, 0x20,  // 780579  
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x32, 0x3D, 0x5E,  //    - 2=^
        /* 0068 */  0x21, 0x25, 0x3B, 0x41, 0x32, 0x41, 0x4D, 0x5E,  // !%;A2AM^
        /* 0070 */  0x22, 0x3B, 0x32, 0x5E, 0x41, 0x2A, 0x59, 0x5E,  // ";2^A*Y^
        /* 0078 */  0x37, 0x41, 0x2F, 0x2E, 0x54, 0x3B, 0x2E, 0x56,  // 7A/.T;.V
        /* 0080 */  0x44, 0x2C, 0x2E, 0x5E, 0x57, 0x31, 0x3F, 0x22,  // D,.^W1?"
        /* 0088 */  0x2B, 0x3B, 0x38, 0x52, 0x46, 0x20, 0x2D, 0x20,  // +;8RF - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (F93B, Buffer (0xD5)
    {
        /* 0000 */  0x6A, 0xDD, 0xCC, 0xF5, 0x23, 0xF7, 0x01, 0x83,  // j...#...
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
        /* 0058 */  0x37, 0x38, 0x30, 0x35, 0x38, 0x35, 0x20, 0x20,  // 780585  
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x3F, 0x3A, 0x5B,  //    - ?:[
        /* 0068 */  0x22, 0x20, 0x36, 0x43, 0x37, 0x5C, 0x40, 0x5D,  // " 6C7\@]
        /* 0070 */  0x21, 0x36, 0x3F, 0x5B, 0x5C, 0x29, 0x56, 0x53,  // !6?[\)VS
        /* 0078 */  0x2A, 0x42, 0x22, 0x5E, 0x51, 0x36, 0x21, 0x55,  // *B"^Q6!U
        /* 0080 */  0x43, 0x2F, 0x2E, 0x5B, 0x21, 0x34, 0x32, 0x3F,  // C/.[!42?
        /* 0088 */  0x36, 0x38, 0x37, 0x51, 0x41, 0x20, 0x2D, 0x20,  // 687QA - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (F95B, Buffer (0xD5)
    {
        /* 0000 */  0xD8, 0x2C, 0xAD, 0xC2, 0x58, 0x7D, 0x09, 0x4D,  // .,..X}.M
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
        /* 0058 */  0x37, 0x38, 0x30, 0x35, 0x38, 0x34, 0x20, 0x20,  // 780584  
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x3E, 0x39, 0x5A,  //    - >9Z
        /* 0068 */  0x25, 0x21, 0x37, 0x5C, 0x36, 0x5D, 0x41, 0x5A,  // %!7\6]AZ
        /* 0070 */  0x5E, 0x37, 0x3E, 0x5A, 0x5D, 0x26, 0x55, 0x52,  // ^7>Z]&UR
        /* 0078 */  0x2B, 0x5D, 0x22, 0x23, 0x24, 0x37, 0x22, 0x52,  // +]"#$7"R
        /* 0080 */  0x40, 0x28, 0x21, 0x5B, 0x21, 0x35, 0x33, 0x3E,  // @(![!53>
        /* 0088 */  0x37, 0x37, 0x34, 0x2E, 0x42, 0x20, 0x2D, 0x20,  // 774.B - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (F90B, Buffer (0xD5)
    {
        /* 0000 */  0xF1, 0xC3, 0x07, 0x70, 0xC0, 0x61, 0xCE, 0x3C,  // ...p.a.<
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
        /* 0058 */  0x37, 0x38, 0x30, 0x35, 0x38, 0x37, 0x20, 0x20,  // 780587  
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x31, 0x3C, 0x5D,  //    - 1<]
        /* 0068 */  0x20, 0x22, 0x38, 0x41, 0x35, 0x5E, 0x4E, 0x5F,  //  "8A5^N_
        /* 0070 */  0x23, 0x34, 0x31, 0x5D, 0x42, 0x2B, 0x58, 0x5D,  // #41]B+X]
        /* 0078 */  0x34, 0x40, 0x2C, 0x2F, 0x51, 0x38, 0x2F, 0x57,  // 4@,/Q8/W
        /* 0080 */  0x45, 0x2D, 0x2F, 0x5D, 0x50, 0x36, 0x3C, 0x21,  // E-/]P6<!
        /* 0088 */  0x28, 0x3A, 0x39, 0x53, 0x47, 0x20, 0x2D, 0x20,  // (:9SG - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (F91B, Buffer (0xD5)
    {
        /* 0000 */  0x62, 0x9F, 0xBB, 0x1E, 0x93, 0x4D, 0xB6, 0x2F,  // b....M./
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x32, 0x30, 0x30,  // NOVO 200
        /* 0058 */  0x37, 0x38, 0x30, 0x35, 0x38, 0x36, 0x20, 0x20,  // 780586  
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x30, 0x3B, 0x5C,  //    - 0;\
        /* 0068 */  0x23, 0x23, 0x39, 0x42, 0x34, 0x5F, 0x4F, 0x5C,  // ##9B4_O\
        /* 0070 */  0x20, 0x35, 0x30, 0x5C, 0x43, 0x28, 0x57, 0x5C,  //  50\C(W\
        /* 0078 */  0x35, 0x43, 0x2D, 0x2C, 0x52, 0x39, 0x20, 0x54,  // 5C-,R9 T
        /* 0080 */  0x42, 0x2E, 0x2C, 0x5C, 0x51, 0x37, 0x3D, 0x20,  // B.,\Q7= 
        /* 0088 */  0x29, 0x39, 0x36, 0x50, 0x40, 0x20, 0x2D, 0x20,  // )96P@ - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (G53A, Buffer (0xD5)
    {
        /* 0000 */  0x5C, 0x8C, 0x38, 0x3C, 0x63, 0x8A, 0xF5, 0xCD,  // \.8<c...
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x33, 0x34, 0x30,  // NOVO 340
        /* 0058 */  0x33, 0x37, 0x39, 0x33, 0x20, 0x20, 0x20, 0x20,  // 3793    
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x58, 0x51, 0x40,  //    - XQ@
        /* 0068 */  0x51, 0x53, 0x46, 0x4F, 0x3A, 0x47, 0x49, 0x20,  // QSFO:GI 
        /* 0070 */  0x22, 0x35, 0x3E, 0x58, 0x59, 0x20, 0x2D, 0x48,  // "5>XY -H
        /* 0078 */  0x27, 0x53, 0x33, 0x23, 0x3C, 0x5E, 0x4B, 0x39,  // 'S3#<^K9
        /* 0080 */  0x25, 0x4F, 0x41, 0x38, 0x5F, 0x4B, 0x5B, 0x53,  // %OA8_K[S
        /* 0088 */  0x57, 0x5A, 0x33, 0x55, 0x4E, 0x20, 0x2D, 0x20,  // WZ3UN - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (G55A, Buffer (0xD5)
    {
        /* 0000 */  0x64, 0x63, 0x71, 0x5B, 0x25, 0x61, 0x81, 0x06,  // dcq[%a..
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x33, 0x34, 0x30,  // NOVO 340
        /* 0058 */  0x33, 0x37, 0x39, 0x31, 0x20, 0x20, 0x20, 0x20,  // 3791    
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x26, 0x2F, 0x4E,  //    - &/N
        /* 0068 */  0x53, 0x51, 0x44, 0x49, 0x3C, 0x45, 0x4B, 0x5E,  // SQDI<EK^
        /* 0070 */  0x20, 0x37, 0x3C, 0x56, 0x5B, 0x3E, 0x2B, 0x4E,  //  7<V[>+N
        /* 0078 */  0x25, 0x2D, 0x30, 0x57, 0x4E, 0x5C, 0x4D, 0x37,  // %-0WN\M7
        /* 0080 */  0x23, 0x49, 0x43, 0x44, 0x5A, 0x49, 0x5D, 0x51,  // #ICDZI]Q
        /* 0088 */  0x29, 0x54, 0x35, 0x53, 0x48, 0x20, 0x2D, 0x20,  // )T5SH - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (G50A, Buffer (0xD5)
    {
        /* 0000 */  0x23, 0xD1, 0x83, 0x76, 0xA7, 0x15, 0xBB, 0xE6,  // #..v....
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x33, 0x34, 0x30,  // NOVO 340
        /* 0058 */  0x33, 0x37, 0x39, 0x35, 0x20, 0x20, 0x20, 0x20,  // 3795    
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x5A, 0x53, 0x42,  //    - ZSB
        /* 0068 */  0x5F, 0x55, 0x48, 0x32, 0x38, 0x49, 0x36, 0x22,  // _UH28I6"
        /* 0070 */  0x24, 0x3B, 0x30, 0x5A, 0x5F, 0x22, 0x2F, 0x4A,  // $;0Z_"/J
        /* 0078 */  0x21, 0x51, 0x3D, 0x52, 0x3C, 0x40, 0x49, 0x3B,  // !Q=R<@I;
        /* 0080 */  0x27, 0x4D, 0x4C, 0x3A, 0x2A, 0x4D, 0x59, 0x55,  // 'ML:*MYU
        /* 0088 */  0x55, 0x58, 0x31, 0x57, 0x4C, 0x20, 0x2D, 0x20,  // UX1WL - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (G5DA, Buffer (0xD5)
    {
        /* 0000 */  0xCB, 0x4C, 0xD6, 0x41, 0x74, 0x44, 0xEC, 0x58,  // .L.AtD.X
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x33, 0x34, 0x30,  // NOVO 340
        /* 0058 */  0x33, 0x37, 0x39, 0x39, 0x20, 0x20, 0x20, 0x20,  // 3799    
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x5E, 0x57, 0x46,  //    - ^WF
        /* 0068 */  0x5B, 0x49, 0x4C, 0x36, 0x24, 0x4D, 0x32, 0x26,  // [IL6$M2&
        /* 0070 */  0x28, 0x3F, 0x34, 0x5E, 0x43, 0x26, 0x53, 0x56,  // (?4^C&SV
        /* 0078 */  0x2D, 0x55, 0x39, 0x5E, 0x27, 0x44, 0x34, 0x3F,  // -U9^'D4?
        /* 0080 */  0x2B, 0x30, 0x48, 0x3E, 0x4B, 0x51, 0x25, 0x59,  // +0H>KQ%Y
        /* 0088 */  0x51, 0x5C, 0x3D, 0x4B, 0x50, 0x20, 0x2D, 0x20,  // Q\=KP - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (G51A, Buffer (0xD5)
    {
        /* 0000 */  0x7F, 0x67, 0x3E, 0x94, 0xF9, 0xFE, 0x7F, 0x71,  // .g>....q
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x33, 0x34, 0x30,  // NOVO 340
        /* 0058 */  0x33, 0x37, 0x39, 0x34, 0x20, 0x20, 0x20, 0x20,  // 3794    
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x59, 0x52, 0x41,  //    - YRA
        /* 0068 */  0x5E, 0x52, 0x49, 0x4C, 0x3B, 0x46, 0x37, 0x23,  // ^RIL;F7#
        /* 0070 */  0x25, 0x34, 0x3F, 0x59, 0x58, 0x23, 0x2E, 0x49,  // %4?YX#.I
        /* 0078 */  0x26, 0x50, 0x32, 0x53, 0x3D, 0x41, 0x4A, 0x38,  // &P2S=AJ8
        /* 0080 */  0x24, 0x4E, 0x4D, 0x39, 0x2F, 0x4A, 0x58, 0x54,  // $NM9/JXT
        /* 0088 */  0x54, 0x5B, 0x30, 0x54, 0x4F, 0x20, 0x2D, 0x20,  // T[0TO - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (G93A, Buffer (0xD5)
    {
        /* 0000 */  0xE9, 0x1C, 0x9A, 0xFA, 0x7E, 0xD4, 0xBF, 0xE4,  // ....~...
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x33, 0x34, 0x30,  // NOVO 340
        /* 0058 */  0x33, 0x38, 0x30, 0x36, 0x20, 0x20, 0x20, 0x20,  // 3806    
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x23, 0x2C, 0x4B,  //    - #,K
        /* 0068 */  0x54, 0x5C, 0x43, 0x4B, 0x31, 0x40, 0x4E, 0x5D,  // T\CK1@N]
        /* 0070 */  0x5F, 0x32, 0x39, 0x53, 0x56, 0x3D, 0x28, 0x43,  // _29SV=(C
        /* 0078 */  0x58, 0x2E, 0x34, 0x26, 0x37, 0x5B, 0x40, 0x32,  // X.4&7[@2
        /* 0080 */  0x5E, 0x44, 0x44, 0x42, 0x54, 0x44, 0x5E, 0x2E,  // ^DDBTD^.
        /* 0088 */  0x2A, 0x51, 0x36, 0x5E, 0x45, 0x20, 0x2D, 0x20,  // *Q6^E - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (G95A, Buffer (0xD5)
    {
        /* 0000 */  0x6A, 0x8D, 0x95, 0x00, 0x2B, 0x2C, 0xD0, 0x9E,  // j...+,..
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x33, 0x34, 0x30,  // NOVO 340
        /* 0058 */  0x33, 0x38, 0x30, 0x35, 0x20, 0x20, 0x20, 0x20,  // 3805    
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x22, 0x2B, 0x4A,  //    - "+J
        /* 0068 */  0x57, 0x5D, 0x40, 0x44, 0x30, 0x41, 0x4F, 0x5A,  // W]@D0AOZ
        /* 0070 */  0x5C, 0x33, 0x38, 0x52, 0x57, 0x3A, 0x27, 0x42,  // \38RW:'B
        /* 0078 */  0x59, 0x29, 0x34, 0x4B, 0x42, 0x58, 0x41, 0x33,  // Y)4KBXA3
        /* 0080 */  0x5F, 0x45, 0x47, 0x40, 0x56, 0x45, 0x51, 0x2D,  // _EG@VEQ-
        /* 0088 */  0x2D, 0x50, 0x48, 0x5F, 0x44, 0x20, 0x2D, 0x20,  // -PH_D - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (G90A, Buffer (0xD5)
    {
        /* 0000 */  0xD3, 0x53, 0x0B, 0x80, 0xA6, 0x05, 0xE5, 0x9A,  // .S......
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x33, 0x34, 0x30,  // NOVO 340
        /* 0058 */  0x33, 0x38, 0x31, 0x30, 0x20, 0x20, 0x20, 0x20,  // 3810    
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x2E, 0x27, 0x56,  //    - .'V
        /* 0068 */  0x2B, 0x59, 0x3D, 0x40, 0x34, 0x5D, 0x43, 0x56,  // +Y=@4]CV
        /* 0070 */  0x58, 0x48, 0x43, 0x2E, 0x53, 0x36, 0x23, 0x46,  // XHC.S6#F
        /* 0078 */  0x5D, 0x25, 0x4E, 0x4E, 0x30, 0x54, 0x45, 0x2F,  // ]%NN0TE/
        /* 0080 */  0x5B, 0x41, 0x39, 0x4D, 0x26, 0x41, 0x55, 0x29,  // [A9M&AU)
        /* 0088 */  0x21, 0x4C, 0x4C, 0x5B, 0x40, 0x20, 0x2D, 0x20,  // !LL[@ - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (G91A, Buffer (0xD5)
    {
        /* 0000 */  0x53, 0xC2, 0x7B, 0x99, 0x2E, 0x8F, 0x44, 0xE8,  // S.{...D.
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x33, 0x34, 0x30,  // NOVO 340
        /* 0058 */  0x33, 0x38, 0x30, 0x37, 0x20, 0x20, 0x20, 0x20,  // 3807    
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x24, 0x2D, 0x4C,  //    - $-L
        /* 0068 */  0x55, 0x5F, 0x42, 0x4A, 0x3E, 0x43, 0x4D, 0x5C,  // U_BJ>CM\
        /* 0070 */  0x5E, 0x31, 0x3A, 0x54, 0x55, 0x3C, 0x29, 0x4C,  // ^1:TU<)L
        /* 0078 */  0x5B, 0x2F, 0x37, 0x54, 0x38, 0x5A, 0x4F, 0x35,  // [/7T8ZO5
        /* 0080 */  0x21, 0x4B, 0x46, 0x43, 0x2A, 0x47, 0x5F, 0x2F,  // !KFC*G_/
        /* 0088 */  0x2B, 0x56, 0x37, 0x51, 0x4A, 0x20, 0x2D, 0x20,  // +V7QJ - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (H53B, Buffer (0xD5)
    {
        /* 0000 */  0x73, 0xBD, 0x25, 0xE1, 0x14, 0xC2, 0xC3, 0x2C,  // s.%....,
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x33, 0x34, 0x33,  // NOVO 343
        /* 0058 */  0x33, 0x32, 0x34, 0x31, 0x20, 0x20, 0x20, 0x20,  // 3241    
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x52, 0x2D, 0x5F,  //    - R-_
        /* 0068 */  0x27, 0x51, 0x3C, 0x45, 0x45, 0x5D, 0x34, 0x29,  // 'Q<EE]4)
        /* 0070 */  0x5C, 0x4C, 0x3D, 0x2E, 0x27, 0x38, 0x55, 0x32,  // \L=.'8U2
        /* 0078 */  0x5F, 0x28, 0x3D, 0x3D, 0x45, 0x56, 0x32, 0x5E,  // _(==EV2^
        /* 0080 */  0x5D, 0x43, 0x3C, 0x47, 0x25, 0x44, 0x21, 0x2A,  // ]C<G%D!*
        /* 0088 */  0x21, 0x3F, 0x3A, 0x52, 0x45, 0x20, 0x2D, 0x20,  // !?:RE - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (H55B, Buffer (0xD5)
    {
        /* 0000 */  0xEF, 0x5C, 0x87, 0xB6, 0x2B, 0x77, 0x8B, 0x4B,  // .\..+w.K
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x33, 0x34, 0x33,  // NOVO 343
        /* 0058 */  0x33, 0x32, 0x34, 0x30, 0x20, 0x20, 0x20, 0x20,  // 3240    
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x2E, 0x27, 0x56,  //    - .'V
        /* 0068 */  0x2B, 0x59, 0x3D, 0x41, 0x34, 0x5D, 0x43, 0x56,  // +Y=A4]CV
        /* 0070 */  0x58, 0x48, 0x43, 0x2E, 0x53, 0x36, 0x23, 0x46,  // XHC.S6#F
        /* 0078 */  0x5D, 0x25, 0x4F, 0x4F, 0x46, 0x54, 0x45, 0x2F,  // ]%OOFTE/
        /* 0080 */  0x5B, 0x41, 0x39, 0x4D, 0x56, 0x45, 0x26, 0x29,  // [A9MVE&)
        /* 0088 */  0x2E, 0x3E, 0x3B, 0x53, 0x44, 0x20, 0x2D, 0x20,  // .>;SD - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (H50B, Buffer (0xD5)
    {
        /* 0000 */  0x4F, 0xD6, 0x7A, 0x74, 0x62, 0xE8, 0x89, 0xC2,  // O.ztb...
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x33, 0x34, 0x33,  // NOVO 343
        /* 0058 */  0x33, 0x32, 0x34, 0x33, 0x20, 0x20, 0x20, 0x20,  // 3243    
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x21, 0x2A, 0x49,  //    - !*I
        /* 0068 */  0x56, 0x5A, 0x41, 0x44, 0x33, 0x5E, 0x40, 0x5B,  // VZAD3^@[
        /* 0070 */  0x5D, 0x4D, 0x46, 0x51, 0x50, 0x3B, 0x26, 0x41,  // ]MFQP;&A
        /* 0078 */  0x5E, 0x28, 0x4B, 0x4B, 0x37, 0x59, 0x42, 0x30,  // ^(KK7YB0
        /* 0080 */  0x5C, 0x46, 0x45, 0x40, 0x52, 0x46, 0x23, 0x2C,  // \FE@RF#,
        /* 0088 */  0x23, 0x21, 0x3C, 0x54, 0x43, 0x20, 0x2D, 0x20,  // #!<TC - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (H51B, Buffer (0xD5)
    {
        /* 0000 */  0x8D, 0x62, 0x8C, 0x94, 0x18, 0xE6, 0xA7, 0xDD,  // .b......
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x33, 0x34, 0x33,  // NOVO 343
        /* 0058 */  0x33, 0x32, 0x34, 0x32, 0x20, 0x20, 0x20, 0x20,  // 3242    
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x20, 0x29, 0x48,  //    -  )H
        /* 0068 */  0x29, 0x5B, 0x3F, 0x47, 0x32, 0x5F, 0x41, 0x58,  // )[?G2_AX
        /* 0070 */  0x5A, 0x4E, 0x45, 0x50, 0x51, 0x38, 0x25, 0x40,  // ZNEPQ8%@
        /* 0078 */  0x5F, 0x2B, 0x48, 0x48, 0x34, 0x56, 0x43, 0x31,  // _+HH4VC1
        /* 0080 */  0x5D, 0x47, 0x3B, 0x4F, 0x52, 0x47, 0x20, 0x2B,  // ]G;ORG +
        /* 0088 */  0x20, 0x20, 0x3D, 0x55, 0x42, 0x20, 0x2D, 0x20,  //   =UB - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (H93B, Buffer (0xD5)
    {
        /* 0000 */  0x8E, 0x0F, 0x4B, 0x28, 0xBE, 0x31, 0xDC, 0xF9,  // ..K(.1..
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x33, 0x34, 0x33,  // NOVO 343
        /* 0058 */  0x33, 0x32, 0x34, 0x36, 0x20, 0x20, 0x20, 0x20,  // 3246    
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x24, 0x2D, 0x4C,  //    - $-L
        /* 0068 */  0x55, 0x5F, 0x42, 0x4A, 0x3E, 0x43, 0x4D, 0x5C,  // U_BJ>CM\
        /* 0070 */  0x5E, 0x31, 0x3A, 0x54, 0x55, 0x3C, 0x29, 0x4C,  // ^1:TU<)L
        /* 0078 */  0x5B, 0x2F, 0x37, 0x27, 0x38, 0x5A, 0x4F, 0x35,  // [/7'8ZO5
        /* 0080 */  0x21, 0x4B, 0x46, 0x43, 0x5D, 0x43, 0x2C, 0x2F,  // !KFC]C,/
        /* 0088 */  0x24, 0x24, 0x40, 0x59, 0x4E, 0x20, 0x2D, 0x20,  // $$@YN - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (H95B, Buffer (0xD5)
    {
        /* 0000 */  0x2D, 0x7C, 0x2B, 0x38, 0x9F, 0x1E, 0xE0, 0xB2,  // -|+8....
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x33, 0x34, 0x33,  // NOVO 343
        /* 0058 */  0x33, 0x32, 0x34, 0x34, 0x20, 0x20, 0x20, 0x20,  // 3244    
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x22, 0x2B, 0x4A,  //    - "+J
        /* 0068 */  0x57, 0x5D, 0x40, 0x44, 0x30, 0x41, 0x4F, 0x5A,  // W]@D0AOZ
        /* 0070 */  0x5C, 0x33, 0x38, 0x52, 0x57, 0x3A, 0x27, 0x42,  // \38RW:'B
        /* 0078 */  0x59, 0x29, 0x34, 0x4B, 0x42, 0x58, 0x41, 0x33,  // Y)4KBXA3
        /* 0080 */  0x5F, 0x45, 0x44, 0x41, 0x52, 0x41, 0x22, 0x2D,  // _EDARA"-
        /* 0088 */  0x22, 0x22, 0x3F, 0x57, 0x40, 0x20, 0x2D, 0x20,  // ""?W@ - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (H90B, Buffer (0xD5)
    {
        /* 0000 */  0xFB, 0x7D, 0xE7, 0x83, 0x84, 0xA5, 0xE5, 0xB4,  // .}......
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x33, 0x34, 0x33,  // NOVO 343
        /* 0058 */  0x33, 0x32, 0x34, 0x38, 0x20, 0x20, 0x20, 0x20,  // 3248    
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x26, 0x2F, 0x4E,  //    - &/N
        /* 0068 */  0x53, 0x51, 0x44, 0x48, 0x3C, 0x45, 0x4B, 0x5E,  // SQDH<EK^
        /* 0070 */  0x20, 0x37, 0x3C, 0x56, 0x5B, 0x3E, 0x2B, 0x4E,  //  7<V[>+N
        /* 0078 */  0x25, 0x2D, 0x31, 0x56, 0x38, 0x5C, 0x4D, 0x37,  // %-1V8\M7
        /* 0080 */  0x23, 0x49, 0x40, 0x45, 0x5D, 0x4D, 0x2E, 0x51,  // #I@E]M.Q
        /* 0088 */  0x26, 0x26, 0x42, 0x5B, 0x4C, 0x20, 0x2D, 0x20,  // &&B[L - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (H91B, Buffer (0xD5)
    {
        /* 0000 */  0x87, 0x5A, 0xEA, 0x0F, 0x71, 0x49, 0xAE, 0xA4,  // .Z..qI..
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x33, 0x34, 0x33,  // NOVO 343
        /* 0058 */  0x33, 0x32, 0x34, 0x37, 0x20, 0x20, 0x20, 0x20,  // 3247    
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x25, 0x2E, 0x4D,  //    - %.M
        /* 0068 */  0x52, 0x5E, 0x45, 0x49, 0x3F, 0x42, 0x4C, 0x5F,  // R^EI?BL_
        /* 0070 */  0x21, 0x30, 0x3B, 0x55, 0x54, 0x3F, 0x2A, 0x4D,  // !0;UT?*M
        /* 0078 */  0x5A, 0x2C, 0x36, 0x57, 0x39, 0x5D, 0x4E, 0x34,  // Z,6W9]N4
        /* 0080 */  0x20, 0x4A, 0x41, 0x44, 0x5F, 0x42, 0x2F, 0x50,  //  JAD_B/P
        /* 0088 */  0x27, 0x25, 0x43, 0x58, 0x4F, 0x20, 0x2D, 0x20,  // '%CXO - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (H793, Buffer (0xD5)
    {
        /* 0000 */  0x9C, 0x36, 0x3A, 0x44, 0x5D, 0xEE, 0xCF, 0xD8,  // .6:D]...
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x33, 0x34, 0x33,  // NOVO 343
        /* 0058 */  0x33, 0x32, 0x33, 0x37, 0x20, 0x20, 0x20, 0x20,  // 3237    
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x24, 0x2D, 0x4C,  //    - $-L
        /* 0068 */  0x55, 0x5F, 0x42, 0x4A, 0x3E, 0x43, 0x4D, 0x5C,  // U_BJ>CM\
        /* 0070 */  0x5E, 0x31, 0x3A, 0x54, 0x55, 0x3C, 0x29, 0x4C,  // ^1:TU<)L
        /* 0078 */  0x5B, 0x2F, 0x37, 0x27, 0x38, 0x5A, 0x4F, 0x35,  // [/7'8ZO5
        /* 0080 */  0x21, 0x4B, 0x45, 0x43, 0x58, 0x43, 0x2C, 0x2F,  // !KECXC,/
        /* 0088 */  0x24, 0x24, 0x40, 0x59, 0x4E, 0x20, 0x2D, 0x20,  // $$@YN - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (H795, Buffer (0xD5)
    {
        /* 0000 */  0x97, 0x38, 0xF5, 0xAD, 0xAD, 0x83, 0x31, 0x6E,  // .8....1n
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x33, 0x34, 0x33,  // NOVO 343
        /* 0058 */  0x33, 0x32, 0x33, 0x35, 0x20, 0x20, 0x20, 0x20,  // 3235    
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x22, 0x2B, 0x4A,  //    - "+J
        /* 0068 */  0x57, 0x5D, 0x40, 0x44, 0x30, 0x41, 0x4F, 0x5A,  // W]@D0AOZ
        /* 0070 */  0x5C, 0x33, 0x38, 0x52, 0x57, 0x3A, 0x27, 0x42,  // \38RW:'B
        /* 0078 */  0x59, 0x29, 0x34, 0x4B, 0x42, 0x58, 0x41, 0x33,  // Y)4KBXA3
        /* 0080 */  0x5F, 0x45, 0x47, 0x41, 0x27, 0x41, 0x22, 0x2D,  // _EGA'A"-
        /* 0088 */  0x22, 0x22, 0x3F, 0x57, 0x40, 0x20, 0x2D, 0x20,  // ""?W@ - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Name (H797, Buffer (0xD5)
    {
        /* 0000 */  0x05, 0xBD, 0x2B, 0x98, 0x6C, 0xD4, 0xAC, 0x06,  // ..+.l...
        /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
        /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
        /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
        /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
        /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
        /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
        /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
        /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
        /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x4C, 0x45,  // m for LE
        /* 0050 */  0x4E, 0x4F, 0x56, 0x4F, 0x20, 0x33, 0x34, 0x33,  // NOVO 343
        /* 0058 */  0x33, 0x32, 0x33, 0x34, 0x20, 0x20, 0x20, 0x20,  // 3234    
        /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x21, 0x2A, 0x49,  //    - !*I
        /* 0068 */  0x56, 0x5A, 0x41, 0x45, 0x33, 0x5E, 0x40, 0x5B,  // VZAE3^@[
        /* 0070 */  0x5D, 0x4D, 0x46, 0x51, 0x50, 0x3B, 0x26, 0x41,  // ]MFQP;&A
        /* 0078 */  0x5E, 0x28, 0x4A, 0x4A, 0x46, 0x59, 0x42, 0x30,  // ^(JJFYB0
        /* 0080 */  0x5C, 0x46, 0x46, 0x40, 0x51, 0x46, 0x23, 0x2C,  // \FF@QF#,
        /* 0088 */  0x23, 0x21, 0x3C, 0x54, 0x43, 0x20, 0x2D, 0x20,  // #!<TC - 
        /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
        /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
        /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
        /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
        /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
        /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
        /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
        /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
        /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
    })
    Scope (\_SB.PC00.PEG1.PEGP)
    {
        Name (GSV1, Buffer (One)
        {
             0x00                                             // .
        })
        Name (GSV2, Buffer (One)
        {
             0x00                                             // .
        })
        Name (GSDR, Buffer (0xA1)
        {
            /* 0000 */  0x57, 0x74, 0xDC, 0x86, 0x75, 0x84, 0xEC, 0xE7,  // Wt..u...
            /* 0008 */  0x52, 0x44, 0xA1, 0x00, 0x00, 0x00, 0x00, 0x01,  // RD......
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0xDE, 0x10, 0x00, 0x00,  // ........
            /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0020 */  0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x00,  // ......4.
            /* 0028 */  0x00, 0x00, 0x01, 0x00, 0x47, 0x00, 0x00, 0x00,  // ....G...
            /* 0030 */  0x02, 0x00, 0x45, 0x00, 0x00, 0x00, 0x03, 0x00,  // ..E.....
            /* 0038 */  0x51, 0x00, 0x00, 0x00, 0x04, 0x00, 0x4F, 0x00,  // Q.....O.
            /* 0040 */  0x00, 0x00, 0x05, 0x00, 0x4D, 0x00, 0x00, 0x00,  // ....M...
            /* 0048 */  0x06, 0x00, 0x4B, 0x00, 0x00, 0x00, 0x07, 0x00,  // ..K.....
            /* 0050 */  0x49, 0x00, 0x00, 0x00, 0x08, 0x00, 0x47, 0x00,  // I.....G.
            /* 0058 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xD9, 0x1C,  // ........
            /* 0060 */  0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,  // ........
            /* 0068 */  0x41, 0x5D, 0xC9, 0x00, 0x01, 0x24, 0x2E, 0x00,  // A]...$..
            /* 0070 */  0x02, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x01,  // ........
            /* 0078 */  0x00, 0x00, 0x00, 0xD9, 0x1C, 0x04, 0x00, 0x00,  // ........
            /* 0080 */  0x00, 0x01, 0x00, 0x00, 0x00, 0x60, 0x68, 0x9E,  // .....`h.
            /* 0088 */  0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 5.......
            /* 0090 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0098 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00A0 */  0x00                                             // .
        })
        Method (NBCI, 4, Serialized)
        {
            Debug = "------- NV NBCI DSM --------"
            If ((Arg1 != 0x0102))
            {
                Debug = " NBCI DSM: NOT SUPPORTED!"
                Return (0x80000002)
            }

            If ((Arg2 == Zero))
            {
                If (((MCSK == 0x02) || (MCSK == 0x04)))
                {
                    Return (Buffer (0x04)
                    {
                         0x01, 0x00, 0x11, 0x00                           // ....
                    })
                }
                ElseIf ((MCSK == One))
                {
                    Return (Buffer (0x04)
                    {
                         0x01, 0x00, 0x01, 0x00                           // ....
                    })
                }
                Else
                {
                    Return (Buffer (0x04)
                    {
                         0x03, 0x00, 0x11, 0x00                           // ....
                    })
                }
            }

            If ((Arg2 == One))
            {
                Debug = "   NBCI fun1 NBCI_FUNC_PLATCAPS"
                Name (TEMP, Buffer (0x04)
                {
                     0x80, 0x01, 0x00, 0x00                           // ....
                })
                CreateDWordField (TEMP, Zero, STS0)
                STS0 |= Zero
                Return (TEMP) /* \_SB_.PC00.PEG1.PEGP.NBCI.TEMP */
            }

            If ((Arg2 == 0x10))
            {
                Debug = "   NBCI fun16 NBCI_FUNC_GETOBJBYTYPE"
                CreateWordField (Arg3, 0x02, BFF0)
                If ((BFF0 == 0x564B))
                {
                    Switch (GSNM)
                    {
                        Case (One)
                        {
                            Return (A5E3) /* \A5E3 */
                        }
                        Case (0x02)
                        {
                            Return (B5E3) /* \B5E3 */
                        }
                        Case (0x03)
                        {
                            Return (L5E3) /* \L5E3 */
                        }
                        Case (0x04)
                        {
                            Return (A5E5) /* \A5E5 */
                        }
                        Case (0x05)
                        {
                            Return (B5E5) /* \B5E5 */
                        }
                        Case (0x06)
                        {
                            Return (L5E5) /* \L5E5 */
                        }
                        Case (0x0A)
                        {
                            Return (A5P0) /* \A5P0 */
                        }
                        Case (0x0B)
                        {
                            Return (B5P0) /* \B5P0 */
                        }
                        Case (0x0C)
                        {
                            Return (L5P0) /* \L5P0 */
                        }
                        Case (0x0D)
                        {
                            Return (A5PD) /* \A5PD */
                        }
                        Case (0x0E)
                        {
                            Return (B5PD) /* \B5PD */
                        }
                        Case (0x0F)
                        {
                            Return (L5PD) /* \L5PD */
                        }
                        Case (0x10)
                        {
                            Return (A5P1) /* \A5P1 */
                        }
                        Case (0x11)
                        {
                            Return (B5P1) /* \B5P1 */
                        }
                        Case (0x12)
                        {
                            Return (L5P1) /* \L5P1 */
                        }
                        Case (0x13)
                        {
                            Return (A539) /* \A539 */
                        }
                        Case (0x14)
                        {
                            Return (B539) /* \B539 */
                        }
                        Case (0x15)
                        {
                            Return (L539) /* \L539 */
                        }
                        Case (0x16)
                        {
                            Return (A559) /* \A559 */
                        }
                        Case (0x17)
                        {
                            Return (B559) /* \B559 */
                        }
                        Case (0x18)
                        {
                            Return (L559) /* \L559 */
                        }
                        Case (0x19)
                        {
                            Return (A509) /* \A509 */
                        }
                        Case (0x1A)
                        {
                            Return (B509) /* \B509 */
                        }
                        Case (0x1B)
                        {
                            Return (L509) /* \L509 */
                        }
                        Case (0x1C)
                        {
                            Return (A519) /* \A519 */
                        }
                        Case (0x1D)
                        {
                            Return (B519) /* \B519 */
                        }
                        Case (0x1E)
                        {
                            Return (L519) /* \L519 */
                        }
                        Case (0x1F)
                        {
                            Return (BPE3) /* \BPE3 */
                        }
                        Case (0x20)
                        {
                            Return (CPE3) /* \CPE3 */
                        }
                        Case (0x21)
                        {
                            Return (BPE5) /* \BPE5 */
                        }
                        Case (0x22)
                        {
                            Return (CPE5) /* \CPE5 */
                        }
                        Case (0x23)
                        {
                            Return (BPP0) /* \BPP0 */
                        }
                        Case (0x24)
                        {
                            Return (CPP0) /* \CPP0 */
                        }
                        Case (0x25)
                        {
                            Return (BPP1) /* \BPP1 */
                        }
                        Case (0x26)
                        {
                            Return (CPP1) /* \CPP1 */
                        }
                        Case (0x27)
                        {
                            Return (BP39) /* \BP39 */
                        }
                        Case (0x28)
                        {
                            Return (CP39) /* \CP39 */
                        }
                        Case (0x29)
                        {
                            Return (BP59) /* \BP59 */
                        }
                        Case (0x2A)
                        {
                            Return (CP59) /* \CP59 */
                        }
                        Case (0x2B)
                        {
                            Return (BP09) /* \BP09 */
                        }
                        Case (0x2C)
                        {
                            Return (CP09) /* \CP09 */
                        }
                        Case (0x2D)
                        {
                            Return (BP19) /* \BP19 */
                        }
                        Case (0x2E)
                        {
                            Return (CP19) /* \CP19 */
                        }
                        Case (0x2F)
                        {
                            Return (B739) /* \B739 */
                        }
                        Case (0x30)
                        {
                            Return (C739) /* \C739 */
                        }
                        Case (0x31)
                        {
                            Return (B759) /* \B759 */
                        }
                        Case (0x32)
                        {
                            Return (C759) /* \C759 */
                        }
                        Case (0x33)
                        {
                            Return (B779) /* \B779 */
                        }
                        Case (0x34)
                        {
                            Return (C779) /* \C779 */
                        }
                        Case (0x35)
                        {
                            Return (D53B) /* \D53B */
                        }
                        Case (0x36)
                        {
                            Return (D55B) /* \D55B */
                        }
                        Case (0x37)
                        {
                            Return (D50B) /* \D50B */
                        }
                        Case (0x38)
                        {
                            Return (D5DB) /* \D5DB */
                        }
                        Case (0x39)
                        {
                            Return (D51B) /* \D51B */
                        }
                        Case (0x3B)
                        {
                            Return (D73B) /* \D73B */
                        }
                        Case (0x3C)
                        {
                            Return (D75B) /* \D75B */
                        }
                        Case (0x3D)
                        {
                            Return (D70B) /* \D70B */
                        }
                        Case (0x3E)
                        {
                            Return (D71B) /* \D71B */
                        }
                        Case (0x3F)
                        {
                            Return (D53C) /* \D53C */
                        }
                        Case (0x40)
                        {
                            Return (D55C) /* \D55C */
                        }
                        Case (0x41)
                        {
                            Return (D50C) /* \D50C */
                        }
                        Case (0x42)
                        {
                            Return (D5DC) /* \D5DC */
                        }
                        Case (0x43)
                        {
                            Return (D51C) /* \D51C */
                        }
                        Case (0x45)
                        {
                            Return (D73C) /* \D73C */
                        }
                        Case (0x46)
                        {
                            Return (D75C) /* \D75C */
                        }
                        Case (0x47)
                        {
                            Return (D70C) /* \D70C */
                        }
                        Case (0x48)
                        {
                            Return (D71C) /* \D71C */
                        }
                        Case (0x49)
                        {
                            Return (E53C) /* \E53C */
                        }
                        Case (0x4A)
                        {
                            Return (E55C) /* \E55C */
                        }
                        Case (0x4B)
                        {
                            Return (E50C) /* \E50C */
                        }
                        Case (0x4C)
                        {
                            Return (E51C) /* \E51C */
                        }
                        Case (0x4D)
                        {
                            Return (E93C) /* \E93C */
                        }
                        Case (0x4E)
                        {
                            Return (E95C) /* \E95C */
                        }
                        Case (0x4F)
                        {
                            Return (E90C) /* \E90C */
                        }
                        Case (0x50)
                        {
                            Return (E91C) /* \E91C */
                        }
                        Case (0x51)
                        {
                            Return (E73C) /* \E73C */
                        }
                        Case (0x52)
                        {
                            Return (E75C) /* \E75C */
                        }
                        Case (0x53)
                        {
                            Return (E77C) /* \E77C */
                        }
                        Case (0x54)
                        {
                            Return (F53B) /* \F53B */
                        }
                        Case (0x55)
                        {
                            Return (F55B) /* \F55B */
                        }
                        Case (0x56)
                        {
                            Return (F50B) /* \F50B */
                        }
                        Case (0x57)
                        {
                            Return (F5DB) /* \F5DB */
                        }
                        Case (0x58)
                        {
                            Return (F51B) /* \F51B */
                        }
                        Case (0x5A)
                        {
                            Return (F93B) /* \F93B */
                        }
                        Case (0x5B)
                        {
                            Return (F95B) /* \F95B */
                        }
                        Case (0x5C)
                        {
                            Return (F90B) /* \F90B */
                        }
                        Case (0x5D)
                        {
                            Return (F91B) /* \F91B */
                        }
                        Case (0x5E)
                        {
                            Return (G53A) /* \G53A */
                        }
                        Case (0x5F)
                        {
                            Return (G55A) /* \G55A */
                        }
                        Case (0x60)
                        {
                            Return (G50A) /* \G50A */
                        }
                        Case (0x61)
                        {
                            Return (G5DA) /* \G5DA */
                        }
                        Case (0x62)
                        {
                            Return (G51A) /* \G51A */
                        }
                        Case (0x64)
                        {
                            Return (G93A) /* \G93A */
                        }
                        Case (0x65)
                        {
                            Return (G95A) /* \G95A */
                        }
                        Case (0x66)
                        {
                            Return (G90A) /* \G90A */
                        }
                        Case (0x67)
                        {
                            Return (G91A) /* \G91A */
                        }
                        Case (0x68)
                        {
                            Return (H53B) /* \H53B */
                        }
                        Case (0x69)
                        {
                            Return (H55B) /* \H55B */
                        }
                        Case (0x6A)
                        {
                            Return (H50B) /* \H50B */
                        }
                        Case (0x6B)
                        {
                            Return (H51B) /* \H51B */
                        }
                        Case (0x6C)
                        {
                            Return (H93B) /* \H93B */
                        }
                        Case (0x6D)
                        {
                            Return (H95B) /* \H95B */
                        }
                        Case (0x6E)
                        {
                            Return (H90B) /* \H90B */
                        }
                        Case (0x6F)
                        {
                            Return (H90B) /* \H90B */
                        }
                        Case (0x70)
                        {
                            Return (H793) /* \H793 */
                        }
                        Case (0x71)
                        {
                            Return (H795) /* \H795 */
                        }
                        Case (0x72)
                        {
                            Return (H797) /* \H797 */
                        }

                    }
                }

                If ((BFF0 == 0x4452))
                {
                    If ((GSNM != Zero))
                    {
                        If (((MCSK == 0x02) || (MCSK == 0x04)))
                        {
                            If (((PMID == 0x6F0E) && (PPID == 0x160B)))
                            {
                                Return (CSD2) /* \CSD2 */
                            }
                            ElseIf (((PMID == 0xE509) && (PPID == 0x0A1F)))
                            {
                                Return (BOD3) /* \BOD3 */
                            }
                            Else
                            {
                                Return (GSD2) /* \GSD2 */
                            }
                        }
                        ElseIf (((PMID == 0xE509) && (PPID == 0x0A2D)))
                        {
                            Return (BODR) /* \BODR */
                        }
                        ElseIf (((PMID == 0xE509) && (PPID == 0x0A1C)))
                        {
                            Return (BOD2) /* \BOD2 */
                        }
                        ElseIf (((PMID == 0xAF06) && (PPID == 0xB69B)))
                        {
                            Return (AUD1) /* \AUD1 */
                        }
                        ElseIf (((PMID == 0x6F0E) && (PPID == 0x1507)))
                        {
                            Return (CSDR) /* \CSDR */
                        }
                        Else
                        {
                            Return (GSD1) /* \GSD1 */
                        }
                    }
                    Else
                    {
                        Return (GSDR) /* \_SB_.PC00.PEG1.PEGP.GSDR */
                    }
                }
            }

            If ((Arg2 == 0x14))
            {
                Debug = "   NBCI fun20 NBCI_FUNC_GETBACKLIGHT"
                If (((MCSK == 0x02) || (MCSK == 0x04)))
                {
                    Return (Package (0x20)
                    {
                        0x8000A450, 
                        0x0203, 
                        Zero, 
                        Zero, 
                        0x05, 
                        One, 
                        Package (0x04)
                        {
                            0x03E8, 
                            0x0A, 
                            0x03E8, 
                            Package (0x03)
                            {
                                0x0B, 
                                Package (0x0B)
                                {
                                    0x0A, 
                                    0x14, 
                                    0x1E, 
                                    0x32, 
                                    0x50, 
                                    0x78, 
                                    0xB4, 
                                    0x010E, 
                                    0x0186, 
                                    0x029E, 
                                    0x03E8
                                }, 

                                Package (0x0B)
                                {
                                    Zero, 
                                    0x64, 
                                    0xC8, 
                                    0x012C, 
                                    0x0190, 
                                    0x01F4, 
                                    0x0258, 
                                    0x02BC, 
                                    0x0320, 
                                    0x0384, 
                                    0x03E8
                                }
                            }
                        }
                    })
                }
                Else
                {
                    Return (Package (0x20)
                    {
                        0x8001A450, 
                        0x0200, 
                        Zero, 
                        Zero, 
                        0x05, 
                        One, 
                        0xC8, 
                        0x32, 
                        0x03E8, 
                        0x0B, 
                        0x32, 
                        0x64, 
                        0x96, 
                        0xC8, 
                        0x012C, 
                        0x0190, 
                        0x01FE, 
                        0x0276, 
                        0x02F8, 
                        0x0366, 
                        0x03E8, 
                        Zero, 
                        0x64, 
                        0xC8, 
                        0x012C, 
                        0x0190, 
                        0x01F4, 
                        0x0258, 
                        0x02BC, 
                        0x0320, 
                        0x0384, 
                        0x03E8
                    })
                }
            }
        }
    }

    Scope (\_SB)
    {
        Device (NPCF)
        {
            Name (ACBT, 0x50)
            Name (DCBT, Zero)
            Name (DBAC, Zero)
            Name (DBDC, One)
            Name (AMAT, 0x78)
            Name (AMIT, Zero)
            Name (ATPP, 0x0168)
            Name (DTPP, Zero)
            Name (IOBS, 0x0271)
            Name (CMPL, 0x33)
            Name (CNPL, 0x10)
            Name (HPCT, 0x02)
            Name (CDIS, Zero)
            Name (CUSL, Zero)
            Name (CUCT, Zero)
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                CDIS = Zero
                Return ("NVDA0820")
            }

            Name (_UID, "NPCF")  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((CDIS == One))
                {
                    Return (0x0D)
                }

                Return (0x0F)
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                CDIS = One
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("36b49710-2483-11e7-9598-0800200c9a66") /* Unknown UUID */))
                {
                    Return (NPCF (Arg0, Arg1, Arg2, Arg3))
                }
            }

            Method (NPCF, 4, Serialized)
            {
                Debug = "------- NVPCF DSM --------"
                If ((ToInteger (Arg1) != 0x0200))
                {
                    Return (0x80000001)
                }

                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Debug = "   NVPCF sub-func#0"
                        Return (Unicode ("G"))
                    }
                    Case (One)
                    {
                        Debug = "   NVPCF sub-func#1"
                        Return (Buffer (0x1B)
                        {
                            /* 0000 */  0x20, 0x03, 0x01, 0x00, 0x20, 0x05, 0x02, 0x0F,  //  ... ...
                            /* 0008 */  0x01, 0x64, 0x00, 0x01, 0x01, 0x00, 0x00, 0xE8,  // .d......
                            /* 0010 */  0x00, 0x00, 0x66, 0x0E, 0x00, 0x10, 0x00, 0x00,  // ..f.....
                            /* 0018 */  0x00, 0x00, 0xD3                                 // ...
                        })
                    }
                    Case (0x02)
                    {
                        Debug = "   NVPCF sub-func#2"
                        Name (PBD2, Buffer (0x31)
                        {
                             0x00                                             // .
                        })
                        CreateByteField (PBD2, Zero, PTV2)
                        CreateByteField (PBD2, One, PHB2)
                        CreateByteField (PBD2, 0x02, GSB2)
                        CreateByteField (PBD2, 0x03, CTB2)
                        CreateByteField (PBD2, 0x04, NCE2)
                        PTV2 = 0x20
                        PHB2 = 0x05
                        GSB2 = 0x10
                        CTB2 = 0x1C
                        NCE2 = One
                        CreateWordField (PBD2, 0x05, TGPA)
                        CreateWordField (PBD2, 0x07, TGPD)
                        CreateByteField (PBD2, 0x15, PC01)
                        CreateByteField (PBD2, 0x16, PC02)
                        CreateWordField (PBD2, 0x19, TPPA)
                        CreateWordField (PBD2, 0x1B, TPPD)
                        CreateWordField (PBD2, 0x1D, MAGA)
                        CreateWordField (PBD2, 0x1F, MAGD)
                        CreateWordField (PBD2, 0x21, MIGA)
                        CreateWordField (PBD2, 0x23, MIGD)
                        CreateDWordField (PBD2, 0x25, PA4O)
                        CreateDWordField (PBD2, 0x29, PA5O)
                        CreateDWordField (PBD2, 0x2D, PA6O)
                        CreateField (Arg3, 0x28, 0x02, NIGS)
                        CreateByteField (Arg3, 0x15, IORC)
                        CreateField (Arg3, 0xB0, One, CSSC)
                        If ((One == GTYP))
                        {
                            ACBT = 0x0118
                        }
                        ElseIf ((0x02 == GTYP))
                        {
                            ACBT = 0x0118
                        }
                        ElseIf ((0x03 == GTYP))
                        {
                            ACBT = 0x50
                        }
                        ElseIf ((0x04 == GTYP))
                        {
                            ACBT = 0xA0
                        }
                        ElseIf ((0x05 == GTYP))
                        {
                            ACBT = 0xA0
                        }
                        ElseIf ((0x06 == GTYP))
                        {
                            ACBT = 0xA0
                        }
                        ElseIf ((0x07 == GTYP))
                        {
                            ACBT = 0xA0
                        }
                        Else
                        {
                            ACBT = Zero
                        }

                        If ((\_SB.PC00.LPCB.EC0.CTMD == One))
                        {
                            ACBT = CCPL /* External reference */
                        }

                        If ((ToInteger (NIGS) == Zero))
                        {
                            If ((((MCSK == One) || (MCSK == 0x03)) && (GTYP == 0x03)))
                            {
                                LTGP = Zero
                            }

                            If (((((MCSK == One) || (MCSK == 0x03)) && (GTYP == 
                                0x02)) && (\_SB.PC00.LPCB.EC0.SPMO == Zero)))
                            {
                                DTGP = One
                            }

                            If ((((MCSK == 0x02) || (MCSK == 0x04)) && (\_SB.PC00.LPCB.EC0.SPMO == Zero)))
                            {
                                If (((((GTYP == 0x02) || (GTYP == 0x04)) || (GTYP == 
                                    0x06)) || (GTYP == 0x07)))
                                {
                                    DTGP = One
                                }
                            }

                            If ((\_SB.PC00.LPCB.EC0.SPMO == Zero))
                            {
                                If ((BCTP == One))
                                {
                                    DTGP = One
                                    LTGP = One
                                }
                            }

                            If ((LTGP == Zero))
                            {
                                ACBT = Zero
                            }

                            If ((DTGP == Zero))
                            {
                                DBAC = One
                                AMAT = Zero
                                ATPP = Zero
                            }
                            Else
                            {
                                DBAC = Zero
                                If ((\_SB.PC00.LPCB.EC0.CTMD == One))
                                {
                                    AMAT = CPPL /* External reference */
                                }
                                Else
                                {
                                    AMAT = 0x78
                                }

                                If ((((MCSK == 0x04) && (GTYP == 0x03)) && (\_SB.PC00.LPCB.EC0.SPMO == One)))
                                {
                                    ATPP = 0x01E0
                                }
                                Else
                                {
                                    ATPP = 0x0168
                                }
                            }

                            TGPA = ACBT /* \_SB_.NPCF.ACBT */
                            TGPD = DCBT /* \_SB_.NPCF.DCBT */
                            PC01 = Zero
                            PC02 = (DBAC | (DBDC << One))
                            TPPA = ATPP /* \_SB_.NPCF.ATPP */
                            TPPD = DTPP /* \_SB_.NPCF.DTPP */
                            MAGA = AMAT /* \_SB_.NPCF.AMAT */
                            MIGA = AMIT /* \_SB_.NPCF.AMIT */
                        }

                        If ((ToInteger (NIGS) == One))
                        {
                            If ((ToInteger (CSSC) == One)) {}
                            Else
                            {
                            }

                            TGPA = Zero
                            TGPD = Zero
                            PC01 = Zero
                            PC02 = Zero
                            TPPA = Zero
                            TPPD = Zero
                            MAGA = Zero
                            MIGA = Zero
                            MAGD = Zero
                            MIGD = Zero
                        }

                        Return (PBD2) /* \_SB_.NPCF.NPCF.PBD2 */
                    }
                    Case (0x03)
                    {
                        Debug = "   NVPCF sub-func#3"
                        Return (Buffer (0x3D)
                        {
                            /* 0000 */  0x11, 0x04, 0x13, 0x03, 0x00, 0xFF, 0x00, 0x28,  // .......(
                            /* 0008 */  0x2D, 0x2D, 0x33, 0x33, 0x39, 0x39, 0x3F, 0x3F,  // --3399??
                            /* 0010 */  0x45, 0x42, 0x4B, 0x46, 0x50, 0xFF, 0xFF, 0x05,  // EBKFP...
                            /* 0018 */  0xFF, 0x00, 0x3C, 0x41, 0x41, 0x46, 0xFF, 0xFF,  // ..<AAF..
                            /* 0020 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                            /* 0028 */  0xFF, 0xFF, 0x02, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                            /* 0030 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                            /* 0038 */  0x00, 0x30, 0x34, 0x34, 0x3A                     // .044:
                        })
                    }
                    Case (0x04)
                    {
                        Debug = "   NVPCF sub-func#4"
                        Return (Buffer (0x29)
                        {
                            /* 0000 */  0x11, 0x04, 0x25, 0x01, 0x05, 0x00, 0x01, 0x02,  // ..%.....
                            /* 0008 */  0x03, 0x04, 0x03, 0x01, 0x02, 0x03, 0x00, 0x02,  // ........
                            /* 0010 */  0x03, 0x00, 0x02, 0x03, 0x00, 0x02, 0x03, 0x00,  // ........
                            /* 0018 */  0x02, 0x03, 0x00, 0x02, 0x03, 0x01, 0x02, 0x03,  // ........
                            /* 0020 */  0x02, 0x02, 0x03, 0x03, 0x03, 0x03, 0x04, 0x04,  // ........
                            /* 0028 */  0x04                                             // .
                        })
                    }
                    Case (0x05)
                    {
                        Debug = "   NVPCF sub-func#5"
                        Name (PBD5, Buffer (0x28)
                        {
                             0x00                                             // .
                        })
                        CreateByteField (PBD5, Zero, PTV5)
                        CreateByteField (PBD5, One, PHB5)
                        CreateByteField (PBD5, 0x02, TEB5)
                        CreateByteField (PBD5, 0x03, NTE5)
                        PTV5 = 0x11
                        PHB5 = 0x04
                        TEB5 = 0x24
                        NTE5 = One
                        CreateDWordField (PBD5, 0x04, F5O0)
                        CreateDWordField (PBD5, 0x08, F5O1)
                        CreateDWordField (PBD5, 0x0C, F5O2)
                        CreateDWordField (PBD5, 0x10, F5O3)
                        CreateDWordField (PBD5, 0x14, F5O4)
                        CreateDWordField (PBD5, 0x18, F5O5)
                        CreateDWordField (PBD5, 0x1C, F5O6)
                        CreateDWordField (PBD5, 0x20, F5O7)
                        CreateDWordField (PBD5, 0x24, F5O8)
                        CreateField (Arg3, 0x20, 0x03, INC5)
                        CreateDWordField (Arg3, 0x08, F5P1)
                        CreateDWordField (Arg3, 0x0C, F5P2)
                        Switch (ToInteger (INC5))
                        {
                            Case (Zero)
                            {
                                F5O0 = Zero
                                F5O1 = Zero
                                F5O2 = Zero
                                F5O3 = Zero
                            }
                            Case (One)
                            {
                                F5O0 = Zero
                                F5O1 = Zero
                                F5O2 = Zero
                                F5O3 = Zero
                            }
                            Case (0x02)
                            {
                                F5O0 = Zero
                                F5O1 = Zero
                                F5O2 = Zero
                                F5O3 = Zero
                                F5O4 = Zero
                                F5O5 = Zero
                                F5O6 = Zero
                                F5O7 = Zero
                                F5O8 = Zero
                            }
                            Case (0x03)
                            {
                                CUSL = (F5P1 & 0xFF)
                            }
                            Case (0x04)
                            {
                                CUCT = F5P2 /* \_SB_.NPCF.NPCF.F5P2 */
                            }
                            Default
                            {
                                Return (0x80000002)
                            }

                        }

                        Return (PBD5) /* \_SB_.NPCF.NPCF.PBD5 */
                    }
                    Case (0x06)
                    {
                        Debug = "   NVPCF sub-func#6"
                        Name (PBD6, Buffer (0x11)
                        {
                             0x00                                             // .
                        })
                        CreateByteField (PBD6, Zero, CCHV)
                        CreateByteField (PBD6, One, CCHB)
                        CreateByteField (PBD6, 0x02, CCTB)
                        CreateByteField (PBD6, 0x03, RES0)
                        CreateByteField (PBD6, 0x04, RES1)
                        CCHV = 0x10
                        CCHB = 0x05
                        CCTB = 0x0C
                        CreateField (PBD6, 0x28, 0x02, F6O0)
                        CreateByteField (PBD6, 0x09, F6MP)
                        CreateByteField (PBD6, 0x0A, F6NP)
                        CreateDWordField (PBD6, 0x0D, F6O2)
                        CreateField (Arg3, 0x28, 0x02, INC6)
                        CreateByteField (Arg3, 0x09, NCHP)
                        Switch (ToInteger (INC6))
                        {
                            Case (Zero)
                            {
                                If ((IOBS != Zero))
                                {
                                    F6O0 = HPCT /* \_SB_.NPCF.HPCT */
                                    F6MP = CMPL /* \_SB_.NPCF.CMPL */
                                    F6NP = CNPL /* \_SB_.NPCF.CNPL */
                                    F6O2 = IOBS /* \_SB_.NPCF.IOBS */
                                }
                            }
                            Case (One)
                            {
                                If ((IOBS != Zero))
                                {
                                    OperationRegion (NVIO, SystemIO, IOBS, 0x10)
                                    Field (NVIO, ByteAcc, NoLock, Preserve)
                                    {
                                        CPUC,   8
                                    }

                                    CPUC = NCHP /* \_SB_.NPCF.NPCF.NCHP */
                                    F6MP = Zero
                                    F6NP = Zero
                                    F6O2 = Zero
                                    Notify (\_SB.PR00, 0x85) // Device-Specific
                                    Notify (\_SB.PR01, 0x85) // Device-Specific
                                    Notify (\_SB.PR02, 0x85) // Device-Specific
                                    Notify (\_SB.PR03, 0x85) // Device-Specific
                                    Notify (\_SB.PR04, 0x85) // Device-Specific
                                    Notify (\_SB.PR05, 0x85) // Device-Specific
                                    Notify (\_SB.PR06, 0x85) // Device-Specific
                                    Notify (\_SB.PR07, 0x85) // Device-Specific
                                    Notify (\_SB.PR08, 0x85) // Device-Specific
                                    Notify (\_SB.PR09, 0x85) // Device-Specific
                                    Notify (\_SB.PR10, 0x85) // Device-Specific
                                    Notify (\_SB.PR11, 0x85) // Device-Specific
                                    Notify (\_SB.PR12, 0x85) // Device-Specific
                                    Notify (\_SB.PR13, 0x85) // Device-Specific
                                    Notify (\_SB.PR14, 0x85) // Device-Specific
                                    Notify (\_SB.PR15, 0x85) // Device-Specific
                                    Notify (\_SB.PR16, 0x85) // Device-Specific
                                    Notify (\_SB.PR17, 0x85) // Device-Specific
                                    Notify (\_SB.PR18, 0x85) // Device-Specific
                                    Notify (\_SB.PR19, 0x85) // Device-Specific
                                }
                            }
                            Default
                            {
                                Return (0x80000002)
                            }

                        }

                        Return (PBD6) /* \_SB_.NPCF.NPCF.PBD6 */
                    }

                }

                Return (0x80000002)
            }
        }
    }

    Scope (\_SB.PC00.PEG1.PEGP)
    {
        Name (MMID, Package (0x02)
        {
            Package (0x03)
            {
                Zero, 
                "PS8461", 
                0x00010001
            }, 

            Package (0x03)
            {
                One, 
                "NON-MUX or Error", 
                Zero
            }
        })
        Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
        {
            Return (Package (0x01)
            {
                0x8000A450
            })
        }

        OperationRegion (SMIP, SystemIO, 0xB2, One)
        Field (SMIP, ByteAcc, NoLock, Preserve)
        {
            IOB2,   8
        }

        Device (EDP1)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                Return (0x8000A450)
            }

            Method (_DDC, 1, Serialized)  // _DDC: Display Data Current
            {
                If (((MCSK == One) || (MCSK == 0x03)))
                {
                    If ((Arg0 == One))
                    {
                        Return (BDDN) /* External reference */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Return (BDDN) /* External reference */
                    }
                }

                If (((MCSK == 0x02) || (MCSK == 0x04)))
                {
                    If ((Arg0 == 0x03))
                    {
                        Return (LDDC) /* External reference */
                    }
                }

                Return (Zero)
            }

            Method (MXDS, 1, NotSerialized)
            {
                Local0 = Arg0
                Local1 = (Local0 & 0x0F)
                Local2 = (Local0 & 0x10)
                If ((Local1 == Zero))
                {
                    If ((\_SB.GGOV (0x08050017) == Zero))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return (0x02)
                    }
                }
                ElseIf ((Local1 == One))
                {
                    If ((Local2 == 0x10))
                    {
                        \_SB.SGOV (0x08050017, One)
                    }
                    Else
                    {
                        \_SB.SGOV (0x08050017, Zero)
                    }

                    Return (One)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (MXDM, 1, NotSerialized)
            {
                Local0 = Arg0
                Local1 = (Local0 & 0x07)
                If ((Local1 == Zero))
                {
                    Local2 = DSMF /* External reference */
                    Return (Local2)
                }
                ElseIf ((Local1 < 0x05))
                {
                    DSMF = Local1
                    If ((DSMF == 0x02))
                    {
                        SMBB = 0x26
                        SMBA = 0xCA
                    }
                    ElseIf ((DSMF == 0x03))
                    {
                        SMBB = 0x25
                        SMBA = 0xCA
                    }
                }
                Else
                {
                    Return (Zero)
                }

                Return (One)
            }

            Method (MXID, 1, NotSerialized)
            {
                If ((Arg0 == Zero))
                {
                    Local0 = DerefOf (DerefOf (MMID [Zero]) [0x02])
                    Return (Local0)
                }
            }

            Method (LRST, 1, NotSerialized)
            {
                Local0 = Arg0
                Local1 = (Local0 & 0x07)
                If ((Local1 == Zero))
                {
                    If ((\_SB.PC00.LPCB.EC0.PRRO == Zero))
                    {
                        Return (One)
                    }
                    ElseIf ((\_SB.PC00.LPCB.EC0.PRRO == One))
                    {
                        Return (0x02)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
                ElseIf ((Local1 == One))
                {
                    \_SB.PC00.LPCB.EC0.PRWO = Zero
                }
                ElseIf ((Local1 == 0x02))
                {
                    \_SB.PC00.LPCB.EC0.PRWO = One
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (\_SB.PC00)
    {
        Device (AWMI)
        {
            Name (_HID, "PNP0C14" /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "0x00")  // _UID: Unique ID
            Name (_WDG, Buffer (0x28)
            {
                /* 0000 */  0x13, 0x96, 0x3E, 0x60, 0x25, 0xEF, 0x38, 0x43,  // ..>`%.8C
                /* 0008 */  0xA3, 0xD0, 0xC4, 0x61, 0x77, 0x51, 0x6D, 0xB7,  // ...awQm.
                /* 0010 */  0x41, 0x41, 0x01, 0x02, 0x21, 0x12, 0x90, 0x05,  // AA..!...
                /* 0018 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  // f.......
                /* 0020 */  0xC9, 0x06, 0x29, 0x10, 0x30, 0x30, 0x01, 0x00   // ..).00..
            })
            Name (WQ00, Buffer (0x037D)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0x6D, 0x03, 0x00, 0x00, 0x68, 0x0B, 0x00, 0x00,  // m...h...
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0x18, 0x59, 0x85, 0x00, 0x01, 0x06, 0x18, 0x42,  // .Y.....B
                /* 0020 */  0x20, 0x82, 0x02, 0x89, 0xC0, 0x82, 0x69, 0x24,  //  .....i$
                /* 0028 */  0xC7, 0x01, 0x0C, 0x46, 0x03, 0x88, 0xE4, 0x40,  // ...F...@
                /* 0030 */  0xC8, 0x05, 0x13, 0x13, 0x20, 0x02, 0x42, 0x5E,  // .... .B^
                /* 0038 */  0x05, 0xD8, 0x14, 0x60, 0x12, 0x44, 0xFD, 0xFB,  // ...`.D..
                /* 0040 */  0x43, 0x94, 0x04, 0x87, 0x12, 0x02, 0x21, 0x89,  // C.....!.
                /* 0048 */  0x02, 0xCC, 0x0B, 0xD0, 0x2D, 0xC0, 0xB0, 0x00,  // ....-...
                /* 0050 */  0xDB, 0x02, 0x4C, 0x0B, 0x70, 0x0C, 0x49, 0xA5,  // ..L.p.I.
                /* 0058 */  0x81, 0x53, 0x02, 0x4B, 0x81, 0x90, 0x50, 0x01,  // .S.K..P.
                /* 0060 */  0xCA, 0x05, 0xF8, 0x16, 0xA0, 0x1D, 0x51, 0x92,  // ......Q.
                /* 0068 */  0x05, 0x58, 0x86, 0x11, 0x81, 0x47, 0x11, 0xD9,  // .X...G..
                /* 0070 */  0x68, 0x1C, 0x1A, 0x3B, 0x0C, 0xCB, 0x04, 0xD3,  // h..;....
                /* 0078 */  0x20, 0x0E, 0xA3, 0x6C, 0x64, 0x11, 0x78, 0x42,  //  ..ld.xB
                /* 0080 */  0x9D, 0x0A, 0x90, 0x2B, 0x40, 0x98, 0x00, 0xF1,  // ...+@...
                /* 0088 */  0xA8, 0xC2, 0x68, 0x0E, 0x8A, 0x8C, 0x27, 0x34,  // ..h...'4
                /* 0090 */  0x46, 0x0C, 0x10, 0x81, 0xED, 0x1C, 0x5B, 0xA3,  // F.....[.
                /* 0098 */  0x38, 0x8D, 0xC2, 0x05, 0x48, 0xC7, 0xD0, 0x08,  // 8...H...
                /* 00A0 */  0x8E, 0xEB, 0x00, 0xB9, 0x20, 0x01, 0x1A, 0x05,  // .... ...
                /* 00A8 */  0x58, 0x07, 0x12, 0x60, 0x34, 0x0C, 0xC1, 0x81,  // X..`4...
                /* 00B0 */  0x1C, 0x01, 0x46, 0x06, 0x84, 0x3C, 0x43, 0x6A,  // ..F..<Cj
                /* 00B8 */  0x68, 0x26, 0xB0, 0x7B, 0x01, 0xDA, 0xC6, 0x22,  // h&.{..."
                /* 00C0 */  0x67, 0xB3, 0xD0, 0x60, 0xA2, 0x34, 0x86, 0x22,  // g..`.4."
                /* 00C8 */  0x5B, 0x30, 0xD2, 0x2C, 0x40, 0x99, 0x00, 0x6B,  // [0.,@..k
                /* 00D0 */  0x28, 0x1A, 0x52, 0xA0, 0x08, 0xC5, 0xA1, 0x68,  // (.R....h
                /* 00D8 */  0x66, 0x41, 0x22, 0x47, 0x8D, 0x72, 0x1C, 0xB1,  // fA"G.r..
                /* 00E0 */  0xA2, 0xDA, 0x1B, 0x82, 0x20, 0x83, 0x84, 0x09,  // .... ...
                /* 00E8 */  0x56, 0x31, 0x8C, 0xEC, 0x0F, 0x82, 0xC4, 0x3B,  // V1.....;
                /* 00F0 */  0x08, 0x48, 0x02, 0x88, 0x22, 0x8D, 0x06, 0x35,  // .H.."..5
                /* 00F8 */  0xF8, 0x04, 0x0F, 0x03, 0x1E, 0xD8, 0x41, 0x1D,  // ......A.
                /* 0100 */  0xDF, 0x69, 0x1D, 0xC3, 0x89, 0x79, 0x26, 0x75,  // .i...y&u
                /* 0108 */  0x9E, 0x02, 0xC8, 0x78, 0x19, 0x56, 0x82, 0x1F,  // ...x.V..
                /* 0110 */  0x03, 0x1F, 0x0B, 0xF0, 0xAE, 0x01, 0x75, 0x1F,  // ......u.
                /* 0118 */  0x78, 0x1A, 0x60, 0xF3, 0x0C, 0x87, 0x19, 0xA2,  // x.`.....
                /* 0120 */  0x47, 0x1C, 0xEE, 0x04, 0x0E, 0x91, 0xFD, 0xFF,  // G.......
                /* 0128 */  0x01, 0x3D, 0xAF, 0x07, 0x01, 0xAC, 0xC3, 0xC9,  // .=......
                /* 0130 */  0x68, 0xD6, 0xA5, 0x0A, 0x30, 0x7B, 0x22, 0x90,  // h...0{".
                /* 0138 */  0x45, 0x20, 0x8D, 0xC7, 0xC3, 0xF7, 0x7C, 0x4E,  // E ....|N
                /* 0140 */  0x38, 0x81, 0xE5, 0x0F, 0x02, 0x35, 0x32, 0x43,  // 8....52C
                /* 0148 */  0xDB, 0xE0, 0xF8, 0xE9, 0xE1, 0xE0, 0xB0, 0x98,  // ........
                /* 0150 */  0x58, 0x08, 0x29, 0x80, 0xD0, 0x78, 0xC0, 0x3F,  // X.)..x.?
                /* 0158 */  0xF1, 0x77, 0x82, 0x08, 0xAF, 0x0A, 0x9E, 0xAF,  // .w......
                /* 0160 */  0xCF, 0x0B, 0x06, 0xC6, 0x0E, 0xC8, 0x7E, 0x05,  // ......~.
                /* 0168 */  0x20, 0x04, 0x8F, 0x76, 0x44, 0x8F, 0x0C, 0x11,  //  ..vD...
                /* 0170 */  0x1E, 0x20, 0xB8, 0xC2, 0xD1, 0x91, 0xC9, 0x15,  // . ......
                /* 0178 */  0x3D, 0x2C, 0xA1, 0xBF, 0x2F, 0x18, 0xE1, 0xF4,  // =,../...
                /* 0180 */  0x8F, 0xE1, 0xCC, 0x7C, 0x34, 0x38, 0x6E, 0x8B,  // ...|48n.
                /* 0188 */  0x3C, 0x39, 0xA0, 0xC7, 0xC0, 0x31, 0x4F, 0xE1,  // <9...1O.
                /* 0190 */  0x88, 0xCE, 0xE7, 0x18, 0x8E, 0x28, 0xCA, 0x69,  // .....(.i
                /* 0198 */  0x1C, 0x92, 0xCF, 0x14, 0x86, 0xF7, 0x51, 0xE2,  // ......Q.
                /* 01A0 */  0xD1, 0xC2, 0x03, 0x38, 0xA7, 0x67, 0x86, 0xB3,  // ...8.g..
                /* 01A8 */  0x7A, 0x1F, 0x30, 0xC1, 0x40, 0x1E, 0xC6, 0xCA,  // z.0.@...
                /* 01B0 */  0x52, 0x3E, 0x09, 0x64, 0x63, 0xB1, 0x26, 0x90,  // R>.dc.&.
                /* 01B8 */  0x2C, 0x08, 0x65, 0xA2, 0xD2, 0x64, 0x70, 0x93,  // ,.e..dp.
                /* 01C0 */  0x82, 0x33, 0xBB, 0x20, 0x47, 0xEF, 0xB3, 0x84,  // .3. G...
                /* 01C8 */  0xD5, 0x03, 0xEB, 0x40, 0xE2, 0x31, 0x58, 0x37,  // ...@.1X7
                /* 01D0 */  0x85, 0x94, 0xD3, 0x68, 0x54, 0x1E, 0x84, 0xB5,  // ...hT...
                /* 01D8 */  0xC2, 0x08, 0xCE, 0x20, 0x3E, 0x2C, 0x38, 0x04,  // ... >,8.
                /* 01E0 */  0x84, 0x9C, 0x9C, 0x08, 0x50, 0xE7, 0x00, 0x5F,  // ....P.._
                /* 01E8 */  0x0C, 0x3C, 0xB8, 0x23, 0x79, 0x33, 0xF0, 0x48,  // .<.#y3.H
                /* 01F0 */  0x82, 0xB2, 0x61, 0xFA, 0x40, 0xC0, 0x0F, 0x28,  // ..a.@..(
                /* 01F8 */  0x86, 0x34, 0xB2, 0xD5, 0x00, 0xD2, 0xFF, 0x3F,  // .4.....?
                /* 0200 */  0x18, 0xBF, 0x0D, 0xBC, 0x7C, 0x98, 0xC0, 0xBA,  // ....|...
                /* 0208 */  0x2E, 0x05, 0xD0, 0x4F, 0x1C, 0x1E, 0xC1, 0x09,  // ...O....
                /* 0210 */  0x3E, 0x66, 0x3C, 0x6B, 0x1C, 0x12, 0xAC, 0x51,  // >f<k...Q
                /* 0218 */  0xE2, 0x86, 0x04, 0xD6, 0xA9, 0x7A, 0x48, 0x60,  // .....zH`
                /* 0220 */  0xD3, 0x77, 0x6C, 0x00, 0x05, 0x90, 0x2F, 0x09,  // .wl.../.
                /* 0228 */  0x56, 0x7A, 0x50, 0xA0, 0x63, 0x08, 0x11, 0x26,  // VzP.c..&
                /* 0230 */  0x9A, 0xD1, 0x79, 0x78, 0x74, 0x0A, 0xE3, 0xB8,  // ..yxt...
                /* 0238 */  0x43, 0xA2, 0x20, 0xBE, 0x14, 0x38, 0xCA, 0x54,  // C. ..8.T
                /* 0240 */  0xD1, 0x33, 0x31, 0xFE, 0x1B, 0x82, 0xAF, 0x0C,  // .31.....
                /* 0248 */  0x98, 0x6B, 0xCC, 0x3B, 0x09, 0xAC, 0x13, 0x43,  // .k.;...C
                /* 0250 */  0xC8, 0x88, 0x9E, 0x86, 0xE1, 0x3C, 0x59, 0x0E,  // .....<Y.
                /* 0258 */  0xE7, 0xEB, 0x00, 0x1F, 0x89, 0xEF, 0x1C, 0xF0,  // ........
                /* 0260 */  0x47, 0x8B, 0x25, 0x28, 0x70, 0xB6, 0x20, 0x87,  // G.%(p. .
                /* 0268 */  0xF7, 0xFF, 0x1F, 0x9E, 0x2E, 0x55, 0x16, 0x6E,  // .....U.n
                /* 0270 */  0x17, 0x74, 0x5C, 0xFC, 0x72, 0xE0, 0x2B, 0x08,  // .t\.r.+.
                /* 0278 */  0xC3, 0x3E, 0xD3, 0xA3, 0x79, 0x45, 0x38, 0xC3,  // .>..yE8.
                /* 0280 */  0xE7, 0x8D, 0x83, 0x7A, 0x3E, 0xF1, 0xB0, 0x0D,  // ...z>...
                /* 0288 */  0xEB, 0x91, 0x72, 0x58, 0xA3, 0x85, 0x3D, 0xE0,  // ..rX..=.
                /* 0290 */  0x57, 0x13, 0x9F, 0x6B, 0x3C, 0x33, 0x63, 0x84,  // W..k<3c.
                /* 0298 */  0xF5, 0x85, 0x06, 0x1C, 0x80, 0x78, 0xEF, 0x57,  // .....x.W
                /* 02A0 */  0x0F, 0x32, 0x01, 0x03, 0xB2, 0x63, 0x80, 0xEF,  // .2...c..
                /* 02A8 */  0x48, 0xE0, 0xF0, 0x38, 0x35, 0xE2, 0x6B, 0x9E,  // H..85.k.
                /* 02B0 */  0x02, 0xF1, 0x2C, 0x4E, 0xF5, 0x94, 0x63, 0x3C,  // ..,N..c<
                /* 02B8 */  0xC1, 0x3C, 0x8E, 0xC0, 0xC0, 0x3A, 0x35, 0xDF,  // .<...:5.
                /* 02C0 */  0x2C, 0x18, 0xCC, 0x7B, 0x10, 0x83, 0x78, 0x10,  // ,..{..x.
                /* 02C8 */  0x88, 0x92, 0xC0, 0x39, 0xAF, 0x28, 0xA8, 0x53,  // ...9.(.S
                /* 02D0 */  0x81, 0x73, 0x5D, 0x51, 0x40, 0x31, 0x9A, 0x37,  // .s]Q@1.7
                /* 02D8 */  0x05, 0x83, 0xBD, 0x18, 0x99, 0xC0, 0xFA, 0xEF,  // ........
                /* 02E0 */  0x28, 0x28, 0xE5, 0x14, 0xD2, 0x7E, 0x47, 0x41,  // ((...~GA
                /* 02E8 */  0xA9, 0xBD, 0xA3, 0x50, 0x10, 0x1F, 0x06, 0x9C,  // ...P....
                /* 02F0 */  0xE2, 0x1C, 0x81, 0xD6, 0x71, 0x47, 0x41, 0x4E,  // ....qGAN
                /* 02F8 */  0xC8, 0x87, 0x14, 0xE0, 0xF5, 0xFF, 0x3F, 0x45,  // ......?E
                /* 0300 */  0xE0, 0xA7, 0x04, 0xFB, 0x76, 0xF5, 0x92, 0x02,  // ....v...
                /* 0308 */  0xF0, 0x54, 0xC6, 0x25, 0x05, 0x34, 0xFF, 0xFF,  // .T.%.4..
                /* 0310 */  0x4B, 0x0A, 0x1F, 0x9B, 0x2F, 0x29, 0xC0, 0xF5,  // K.../)..
                /* 0318 */  0x1C, 0x88, 0xBB, 0xA4, 0x80, 0x0B, 0x34, 0x5A,  // ......4Z
                /* 0320 */  0xD0, 0xB3, 0xF2, 0x5C, 0x1E, 0x49, 0x02, 0xBD,  // ...\.I..
                /* 0328 */  0x92, 0xC0, 0xC1, 0x7A, 0x26, 0xC1, 0x2A, 0xB4,  // ...z&.*.
                /* 0330 */  0xE9, 0x53, 0xA3, 0x51, 0xAB, 0x06, 0x65, 0x6A,  // .S.Q..ej
                /* 0338 */  0x94, 0x69, 0x50, 0xAB, 0x4F, 0xA5, 0xC6, 0x8C,  // .iP.O...
                /* 0340 */  0x9D, 0x32, 0x2C, 0x61, 0xB1, 0x1A, 0xB6, 0x03,  // .2,a....
                /* 0348 */  0x80, 0xD0, 0xF0, 0x14, 0x32, 0x02, 0x22, 0x25,  // ....2."%
                /* 0350 */  0x2F, 0x42, 0x81, 0x11, 0x10, 0x01, 0x39, 0x0D,  // /B....9.
                /* 0358 */  0x10, 0x55, 0xFE, 0x06, 0x10, 0x90, 0x73, 0x80,  // .U....s.
                /* 0360 */  0x08, 0xC8, 0x21, 0x4F, 0x6B, 0x02, 0x72, 0x62,  // ..!Ok.rb
                /* 0368 */  0x10, 0x01, 0x59, 0xE9, 0x1A, 0x05, 0x64, 0xD9,  // ..Y...d.
                /* 0370 */  0x20, 0x02, 0xB2, 0x44, 0x13, 0x40, 0x4C, 0x30,  //  ..D.@L0
                /* 0378 */  0x88, 0x80, 0xFC, 0xFF, 0x07                     // .....
            })
            Method (WMAA, 3, Serialized)
            {
                Name (TEMP, Zero)
                CreateByteField (Arg2, Zero, MODF)
                CreateDWordField (Arg2, 0x04, LEDB)
                While (One)
                {
                    TEMP = Arg1
                    If ((TEMP == One))
                    {
                        If ((MODF == Zero))
                        {
                            Return (\_SB.PC00.LPCB.EC0.PCBV) /* External reference */
                        }
                        ElseIf ((MODF == One))
                        {
                            If ((Acquire (\_SB.PC00.LPCB.EC0.LFCM, 0xA000) == Zero))
                            {
                                \_SB.PC00.LPCB.EC0.PCBV = LEDB /* \_SB_.PC00.AWMI.WMAA.LEDB */
                                \_SB.PC00.LPCB.EC0.SPBL = One
                                Release (\_SB.PC00.LPCB.EC0.LFCM)
                            }

                            Return (Zero)
                        }
                        ElseIf ((MODF == 0x02))
                        {
                            Return (0x0320)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }
                    ElseIf ((TEMP == 0x02))
                    {
                        If ((MODF == Zero))
                        {
                            If (((MCSK == 0x02) || (MCSK == 0x04)))
                            {
                                Return (0x03)
                            }
                            Else
                            {
                                Return (0x02)
                            }
                        }
                        ElseIf ((MODF == One))
                        {
                            If ((LEDB < 0x03))
                            {
                                If ((Acquire (\_SB.PC00.LPCB.EC0.LFCM, 0xA000) == Zero))
                                {
                                    \_SB.PC00.LPCB.EC0.PCBS = LEDB /* \_SB_.PC00.AWMI.WMAA.LEDB */
                                    Release (\_SB.PC00.LPCB.EC0.LFCM)
                                }

                                Return (Zero)
                            }

                            Return (One)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }
                    Else
                    {
                        Return (One)
                    }

                    Break
                }
            }
        }
    }
}



SSDT16
------
DefinitionBlock ("", "SSDT", 2, "PmRef", "Cpu0Hwp", 0x00003000)
{
    External (_SB_.CFGD, IntObj)
    External (_SB_.HWPE, IntObj)
    External (_SB_.HWPV, IntObj)
    External (_SB_.ITBM, IntObj)
    External (_SB_.LMPS, IntObj)
    External (_SB_.OSCP, IntObj)
    External (_SB_.PR00, DeviceObj)
    External (_SB_.PR00.CPC2, PkgObj)
    External (CPC2, IntObj)
    External (TCNT, FieldUnitObj)

    Scope (\_SB.PR00)
    {
        Name (CPOC, Package (0x15)
        {
            0x15, 
            0x02, 
            0x2E, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000000000CE, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x0000000000000771, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x0000000000000771, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x0000000000000771, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x01,               // Bit Offset
                    0x0000000000000777, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000770, // Address
                    0x04,               // Access Size
                    )
            }, 

            One, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x0A,               // Bit Width
                    0x20,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            Zero
        })
        Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
        {
            If ((\_SB.CFGD & 0x01000000))
            {
                If (((\_SB.CFGD & 0x02000000) && (\_SB.ITBM == One)))
                {
                    Return (CPC2) /* External reference */
                }

                Return (CPOC) /* \_SB_.PR00.CPOC */
            }
            Else
            {
                If (((\_SB.CFGD & 0x02000000) && (\_SB.ITBM == Zero)))
                {
                    If ((\_SB.LMPS != Zero))
                    {
                        Return (CPOC) /* \_SB_.PR00.CPOC */
                    }
                }

                Return (CPC2) /* External reference */
            }
        }
    }
}



SSDT17
------
DefinitionBlock ("", "SSDT", 2, "PmRef", "Cpu0Cst", 0x00003001)
{
    External (_SB_.PR00, DeviceObj)
    External (C6LT, UnknownObj)
    External (C6MW, UnknownObj)
    External (C7LT, UnknownObj)
    External (C7MW, UnknownObj)
    External (CDLT, UnknownObj)
    External (CDLV, UnknownObj)
    External (CDMW, UnknownObj)
    External (CDPW, UnknownObj)
    External (CFGD, UnknownObj)
    External (FEMD, UnknownObj)
    External (FMBL, UnknownObj)
    External (PF00, UnknownObj)
    External (PFLV, UnknownObj)
    External (PWRS, UnknownObj)

    Scope (\_SB.PR00)
    {
        Name (C1TM, Package (0x04)
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            One, 
            One, 
            0x03E8
        })
        Name (C6TM, Package (0x04)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001815, // Address
                    ,)
            }, 

            0x02, 
            Zero, 
            0x015E
        })
        Name (C7TM, Package (0x04)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001816, // Address
                    ,)
            }, 

            0x02, 
            Zero, 
            0xC8
        })
        Name (CDTM, Package (0x04)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001816, // Address
                    ,)
            }, 

            0x03, 
            Zero, 
            Zero
        })
        Name (MWES, ResourceTemplate ()
        {
            Register (FFixedHW, 
                0x01,               // Bit Width
                0x02,               // Bit Offset
                0x0000000000000000, // Address
                0x01,               // Access Size
                )
        })
        Name (AC2V, Zero)
        Name (AC3V, Zero)
        Name (C3ST, Package (0x04)
        {
            0x03, 
            Package (0x00) {}, 
            Package (0x00) {}, 
            Package (0x00) {}
        })
        Name (C2ST, Package (0x03)
        {
            0x02, 
            Package (0x00) {}, 
            Package (0x00) {}
        })
        Name (C1ST, Package (0x02)
        {
            One, 
            Package (0x00) {}
        })
        Name (CSTF, Zero)
        Method (_CST, 0, Serialized)  // _CST: C-States
        {
            If (!CSTF)
            {
                C6TM [0x02] = C6LT /* External reference */
                C7TM [0x02] = C7LT /* External reference */
                CDTM [0x02] = CDLT /* External reference */
                CDTM [0x03] = CDPW /* External reference */
                DerefOf (CDTM [Zero]) [0x07] = CDLV /* External reference */
                If (((CFGD & 0x0800) && (PF00 & 0x0200)))
                {
                    C1TM [Zero] = MWES /* \_SB_.PR00.MWES */
                    C6TM [Zero] = MWES /* \_SB_.PR00.MWES */
                    C7TM [Zero] = MWES /* \_SB_.PR00.MWES */
                    CDTM [Zero] = MWES /* \_SB_.PR00.MWES */
                    DerefOf (C6TM [Zero]) [0x07] = C6MW /* External reference */
                    DerefOf (C7TM [Zero]) [0x07] = C7MW /* External reference */
                    DerefOf (CDTM [Zero]) [0x07] = CDMW /* External reference */
                }
                ElseIf (((CFGD & 0x0800) && (PF00 & 0x0100)))
                {
                    C1TM [Zero] = MWES /* \_SB_.PR00.MWES */
                }

                CSTF = Ones
            }

            AC2V = Zero
            AC3V = Zero
            C3ST [One] = C1TM /* \_SB_.PR00.C1TM */
            If ((CFGD & 0x20))
            {
                C3ST [0x02] = C7TM /* \_SB_.PR00.C7TM */
                AC2V = Ones
            }
            ElseIf ((CFGD & 0x10))
            {
                C3ST [0x02] = C6TM /* \_SB_.PR00.C6TM */
                AC2V = Ones
            }

            If ((CFGD & 0x4000))
            {
                C3ST [0x03] = CDTM /* \_SB_.PR00.CDTM */
                AC3V = Ones
            }

            If ((AC2V && AC3V))
            {
                Return (C3ST) /* \_SB_.PR00.C3ST */
            }
            ElseIf (AC2V)
            {
                C2ST [One] = DerefOf (C3ST [One])
                C2ST [0x02] = DerefOf (C3ST [0x02])
                Return (C2ST) /* \_SB_.PR00.C2ST */
            }
            ElseIf (AC3V)
            {
                C2ST [One] = DerefOf (C3ST [One])
                C2ST [0x02] = DerefOf (C3ST [0x03])
                DerefOf (C2ST [0x02]) [One] = 0x02
                Return (C2ST) /* \_SB_.PR00.C2ST */
            }
            Else
            {
                C1ST [One] = DerefOf (C3ST [One])
                Return (C1ST) /* \_SB_.PR00.C1ST */
            }
        }
    }
}



SSDT18
------
DefinitionBlock ("", "SSDT", 2, "PmRef", "ApCst", 0x00003000)
{
    External (_SB_.PR00._CST, UnknownObj)
    External (_SB_.PR01, DeviceObj)
    External (_SB_.PR02, DeviceObj)
    External (_SB_.PR03, DeviceObj)
    External (_SB_.PR04, DeviceObj)
    External (_SB_.PR05, DeviceObj)
    External (_SB_.PR06, DeviceObj)
    External (_SB_.PR07, DeviceObj)
    External (_SB_.PR08, DeviceObj)
    External (_SB_.PR09, DeviceObj)
    External (_SB_.PR10, DeviceObj)
    External (_SB_.PR11, DeviceObj)
    External (_SB_.PR12, DeviceObj)
    External (_SB_.PR13, DeviceObj)
    External (_SB_.PR14, DeviceObj)
    External (_SB_.PR15, DeviceObj)
    External (_SB_.PR16, DeviceObj)
    External (_SB_.PR17, DeviceObj)
    External (_SB_.PR18, DeviceObj)
    External (_SB_.PR19, DeviceObj)
    External (_SB_.PR20, DeviceObj)
    External (_SB_.PR21, DeviceObj)
    External (_SB_.PR22, DeviceObj)
    External (_SB_.PR23, DeviceObj)

    Scope (\_SB.PR01)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_SB.PR00._CST) /* External reference */
        }
    }

    Scope (\_SB.PR02)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_SB.PR00._CST) /* External reference */
        }
    }

    Scope (\_SB.PR03)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_SB.PR00._CST) /* External reference */
        }
    }

    Scope (\_SB.PR04)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_SB.PR00._CST) /* External reference */
        }
    }

    Scope (\_SB.PR05)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_SB.PR00._CST) /* External reference */
        }
    }

    Scope (\_SB.PR06)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_SB.PR00._CST) /* External reference */
        }
    }

    Scope (\_SB.PR07)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_SB.PR00._CST) /* External reference */
        }
    }

    Scope (\_SB.PR08)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_SB.PR00._CST) /* External reference */
        }
    }

    Scope (\_SB.PR09)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_SB.PR00._CST) /* External reference */
        }
    }

    Scope (\_SB.PR10)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_SB.PR00._CST) /* External reference */
        }
    }

    Scope (\_SB.PR11)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_SB.PR00._CST) /* External reference */
        }
    }

    Scope (\_SB.PR12)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_SB.PR00._CST) /* External reference */
        }
    }

    Scope (\_SB.PR13)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_SB.PR00._CST) /* External reference */
        }
    }

    Scope (\_SB.PR14)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_SB.PR00._CST) /* External reference */
        }
    }

    Scope (\_SB.PR15)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_SB.PR00._CST) /* External reference */
        }
    }

    Scope (\_SB.PR16)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_SB.PR00._CST) /* External reference */
        }
    }

    Scope (\_SB.PR17)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_SB.PR00._CST) /* External reference */
        }
    }

    Scope (\_SB.PR18)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_SB.PR00._CST) /* External reference */
        }
    }

    Scope (\_SB.PR19)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_SB.PR00._CST) /* External reference */
        }
    }

    Scope (\_SB.PR20)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_SB.PR00._CST) /* External reference */
        }
    }

    Scope (\_SB.PR21)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_SB.PR00._CST) /* External reference */
        }
    }

    Scope (\_SB.PR22)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_SB.PR00._CST) /* External reference */
        }
    }

    Scope (\_SB.PR23)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_SB.PR00._CST) /* External reference */
        }
    }
}



SSDT19
------
DefinitionBlock ("", "SSDT", 2, "PmRef", "ApHwp", 0x00003000)
{
    External (_SB_.PR00._CPC, MethodObj)    // 0 Arguments
    External (_SB_.PR01, DeviceObj)
    External (_SB_.PR02, DeviceObj)
    External (_SB_.PR03, DeviceObj)
    External (_SB_.PR04, DeviceObj)
    External (_SB_.PR05, DeviceObj)
    External (_SB_.PR06, DeviceObj)
    External (_SB_.PR07, DeviceObj)
    External (_SB_.PR08, DeviceObj)
    External (_SB_.PR09, DeviceObj)
    External (_SB_.PR10, DeviceObj)
    External (_SB_.PR11, DeviceObj)
    External (_SB_.PR12, DeviceObj)
    External (_SB_.PR13, DeviceObj)
    External (_SB_.PR14, DeviceObj)
    External (_SB_.PR15, DeviceObj)
    External (_SB_.PR16, DeviceObj)
    External (_SB_.PR17, DeviceObj)
    External (_SB_.PR18, DeviceObj)
    External (_SB_.PR19, DeviceObj)
    External (_SB_.PR20, DeviceObj)
    External (_SB_.PR21, DeviceObj)
    External (_SB_.PR22, DeviceObj)
    External (_SB_.PR23, DeviceObj)

    Scope (\_SB.PR01)
    {
        Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
        {
            Return (\_SB.PR00._CPC ())
        }
    }

    Scope (\_SB.PR02)
    {
        Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
        {
            Return (\_SB.PR00._CPC ())
        }
    }

    Scope (\_SB.PR03)
    {
        Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
        {
            Return (\_SB.PR00._CPC ())
        }
    }

    Scope (\_SB.PR04)
    {
        Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
        {
            Return (\_SB.PR00._CPC ())
        }
    }

    Scope (\_SB.PR05)
    {
        Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
        {
            Return (\_SB.PR00._CPC ())
        }
    }

    Scope (\_SB.PR06)
    {
        Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
        {
            Return (\_SB.PR00._CPC ())
        }
    }

    Scope (\_SB.PR07)
    {
        Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
        {
            Return (\_SB.PR00._CPC ())
        }
    }

    Scope (\_SB.PR08)
    {
        Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
        {
            Return (\_SB.PR00._CPC ())
        }
    }

    Scope (\_SB.PR09)
    {
        Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
        {
            Return (\_SB.PR00._CPC ())
        }
    }

    Scope (\_SB.PR10)
    {
        Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
        {
            Return (\_SB.PR00._CPC ())
        }
    }

    Scope (\_SB.PR11)
    {
        Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
        {
            Return (\_SB.PR00._CPC ())
        }
    }

    Scope (\_SB.PR12)
    {
        Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
        {
            Return (\_SB.PR00._CPC ())
        }
    }

    Scope (\_SB.PR13)
    {
        Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
        {
            Return (\_SB.PR00._CPC ())
        }
    }

    Scope (\_SB.PR14)
    {
        Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
        {
            Return (\_SB.PR00._CPC ())
        }
    }

    Scope (\_SB.PR15)
    {
        Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
        {
            Return (\_SB.PR00._CPC ())
        }
    }

    Scope (\_SB.PR16)
    {
        Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
        {
            Return (\_SB.PR00._CPC ())
        }
    }

    Scope (\_SB.PR17)
    {
        Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
        {
            Return (\_SB.PR00._CPC ())
        }
    }

    Scope (\_SB.PR18)
    {
        Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
        {
            Return (\_SB.PR00._CPC ())
        }
    }

    Scope (\_SB.PR19)
    {
        Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
        {
            Return (\_SB.PR00._CPC ())
        }
    }

    Scope (\_SB.PR20)
    {
        Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
        {
            Return (\_SB.PR00._CPC ())
        }
    }

    Scope (\_SB.PR21)
    {
        Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
        {
            Return (\_SB.PR00._CPC ())
        }
    }

    Scope (\_SB.PR22)
    {
        Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
        {
            Return (\_SB.PR00._CPC ())
        }
    }

    Scope (\_SB.PR23)
    {
        Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
        {
            Return (\_SB.PR00._CPC ())
        }
    }
}



SSDT2
-----
DefinitionBlock ("", "SSDT", 2, "LENOVO", "CB-01   ", 0x00000001)
{
    External (_SB_.AAC0, FieldUnitObj)
    External (_SB_.ACRT, FieldUnitObj)
    External (_SB_.APSV, FieldUnitObj)
    External (_SB_.CBMI, FieldUnitObj)
    External (_SB_.CFGD, FieldUnitObj)
    External (_SB_.CLVL, FieldUnitObj)
    External (_SB_.CPPC, FieldUnitObj)
    External (_SB_.CTC0, FieldUnitObj)
    External (_SB_.CTC1, FieldUnitObj)
    External (_SB_.CTC2, FieldUnitObj)
    External (_SB_.OSCP, IntObj)
    External (_SB_.PAGD, DeviceObj)
    External (_SB_.PAGD._PUR, PkgObj)
    External (_SB_.PAGD._STA, MethodObj)    // 0 Arguments
    External (_SB_.PC00, DeviceObj)
    External (_SB_.PC00.LPCB.EC0_, DeviceObj)
    External (_SB_.PC00.LPCB.EC0_.CHIS, IntObj)
    External (_SB_.PC00.LPCB.EC0_.CPUS, IntObj)
    External (_SB_.PC00.LPCB.EC0_.CPUT, IntObj)
    External (_SB_.PC00.LPCB.EC0_.ECAV, IntObj)
    External (_SB_.PC00.LPCB.EC0_.GPPW, IntObj)
    External (_SB_.PC00.LPCB.EC0_.GPUS, IntObj)
    External (_SB_.PC00.LPCB.EC0_.GPUT, IntObj)
    External (_SB_.PC00.LPCB.EC0_.LFCM, UnknownObj)
    External (_SB_.PC00.LPCB.EC0_.PCHT, IntObj)
    External (_SB_.PC00.LPCB.EC0_.SBTS, IntObj)
    External (_SB_.PC00.LPCB.H_EC.UVTH, FieldUnitObj)
    External (_SB_.PC00.MHBR, FieldUnitObj)
    External (_SB_.PC00.TCPU, DeviceObj)
    External (_SB_.PL10, FieldUnitObj)
    External (_SB_.PL11, FieldUnitObj)
    External (_SB_.PL12, FieldUnitObj)
    External (_SB_.PL20, FieldUnitObj)
    External (_SB_.PL21, FieldUnitObj)
    External (_SB_.PL22, FieldUnitObj)
    External (_SB_.PLW0, FieldUnitObj)
    External (_SB_.PLW1, FieldUnitObj)
    External (_SB_.PLW2, FieldUnitObj)
    External (_SB_.PR00, ProcessorObj)
    External (_SB_.PR00._PSS, MethodObj)    // 0 Arguments
    External (_SB_.PR00._TPC, IntObj)
    External (_SB_.PR00._TSD, MethodObj)    // 0 Arguments
    External (_SB_.PR00._TSS, MethodObj)    // 0 Arguments
    External (_SB_.PR00.LPSS, PkgObj)
    External (_SB_.PR00.TPSS, PkgObj)
    External (_SB_.PR00.TSMC, PkgObj)
    External (_SB_.PR00.TSMF, PkgObj)
    External (_SB_.PR01, ProcessorObj)
    External (_SB_.PR02, ProcessorObj)
    External (_SB_.PR03, ProcessorObj)
    External (_SB_.PR04, ProcessorObj)
    External (_SB_.PR05, ProcessorObj)
    External (_SB_.PR06, ProcessorObj)
    External (_SB_.PR07, ProcessorObj)
    External (_SB_.PR08, ProcessorObj)
    External (_SB_.PR09, ProcessorObj)
    External (_SB_.PR10, ProcessorObj)
    External (_SB_.PR11, ProcessorObj)
    External (_SB_.PR12, ProcessorObj)
    External (_SB_.PR13, ProcessorObj)
    External (_SB_.PR14, ProcessorObj)
    External (_SB_.PR15, ProcessorObj)
    External (_SB_.SLPB, DeviceObj)
    External (_SB_.TAR0, FieldUnitObj)
    External (_SB_.TAR1, FieldUnitObj)
    External (_SB_.TAR2, FieldUnitObj)
    External (_TZ_.ETMD, IntObj)
    External (_TZ_.TZ00, ThermalZoneObj)
    External (ACTT, IntObj)
    External (ATPC, IntObj)
    External (BATR, IntObj)
    External (CHGE, IntObj)
    External (CRTT, IntObj)
    External (DCFE, IntObj)
    External (DPTF, IntObj)
    External (ECON, IntObj)
    External (FND1, IntObj)
    External (GTYP, IntObj)
    External (HIDW, MethodObj)    // 4 Arguments
    External (HIWC, MethodObj)    // 1 Arguments
    External (IN34, IntObj)
    External (MCSK, IntObj)
    External (ODV0, IntObj)
    External (ODV1, IntObj)
    External (ODV2, IntObj)
    External (ODV3, IntObj)
    External (ODV4, IntObj)
    External (ODV5, IntObj)
    External (PCHE, FieldUnitObj)
    External (PF00, IntObj)
    External (PNHM, IntObj)
    External (PPPR, IntObj)
    External (PPSZ, IntObj)
    External (PSVT, IntObj)
    External (PTPC, IntObj)
    External (PVSD, IntObj)
    External (PWRE, IntObj)
    External (PWRS, IntObj)
    External (S2DE, IntObj)
    External (S3DE, IntObj)
    External (S4DE, IntObj)
    External (S5DE, IntObj)
    External (SADE, IntObj)
    External (SSP2, IntObj)
    External (SSP3, IntObj)
    External (SSP4, IntObj)
    External (SSP5, IntObj)
    External (TCNT, IntObj)
    External (TSOD, IntObj)

    Scope (\_SB)
    {
        Device (IETM)
        {
            Name (_HID, "INTC1040")  // _HID: Hardware ID
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (CondRefOf (HIWC))
                {
                    If (HIWC (Arg0))
                    {
                        If (CondRefOf (HIDW))
                        {
                            Return (HIDW (Arg0, Arg1, Arg2, Arg3))
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((\DPTF == One) && (\IN34 == One)))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Name (PTRP, Zero)
            Name (PSEM, Zero)
            Name (ATRP, Zero)
            Name (ASEM, Zero)
            Name (YTRP, Zero)
            Name (YSEM, Zero)
            Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
            {
                CreateDWordField (Arg3, Zero, STS1)
                CreateDWordField (Arg3, 0x04, CAP1)
                If ((Arg1 != One))
                {
                    STS1 &= 0xFFFFFF00
                    STS1 |= 0x0A
                    Return (Arg3)
                }

                If ((Arg2 != 0x02))
                {
                    STS1 &= 0xFFFFFF00
                    STS1 |= 0x02
                    Return (Arg3)
                }

                If (CondRefOf (\_SB.APSV))
                {
                    If ((PSEM == Zero))
                    {
                        PSEM = One
                        PTRP = \_SB.APSV /* External reference */
                    }
                }

                If (CondRefOf (\_SB.AAC0))
                {
                    If ((ASEM == Zero))
                    {
                        ASEM = One
                        ATRP = \_SB.AAC0 /* External reference */
                    }
                }

                If (CondRefOf (\_SB.ACRT))
                {
                    If ((YSEM == Zero))
                    {
                        YSEM = One
                        YTRP = \_SB.ACRT /* External reference */
                    }
                }

                If ((Arg0 == ToUUID ("b23ba85d-c8b7-3542-88de-8de2ffcfd698") /* Unknown UUID */))
                {
                    If (~(STS1 & One))
                    {
                        If ((CAP1 & One))
                        {
                            If ((CAP1 & 0x02))
                            {
                                \_SB.AAC0 = 0x6E
                                \_TZ.ETMD = Zero
                            }
                            Else
                            {
                                \_SB.AAC0 = ATRP /* \_SB_.IETM.ATRP */
                                \_TZ.ETMD = One
                            }

                            If ((CAP1 & 0x04))
                            {
                                \_SB.APSV = 0x6E
                            }
                            Else
                            {
                                \_SB.APSV = PTRP /* \_SB_.IETM.PTRP */
                            }

                            If ((CAP1 & 0x08))
                            {
                                \_SB.ACRT = 0xD2
                            }
                            Else
                            {
                                \_SB.ACRT = YTRP /* \_SB_.IETM.YTRP */
                            }
                        }
                        Else
                        {
                            \_SB.ACRT = YTRP /* \_SB_.IETM.YTRP */
                            \_SB.APSV = PTRP /* \_SB_.IETM.PTRP */
                            \_SB.AAC0 = ATRP /* \_SB_.IETM.ATRP */
                            \_TZ.ETMD = One
                        }

                        If (CondRefOf (\_TZ.TZ00))
                        {
                            Notify (\_TZ.TZ00, 0x81) // Information Change
                        }
                    }

                    Return (Arg3)
                }

                Return (Arg3)
            }

            Method (DCFG, 0, NotSerialized)
            {
                Return (\DCFE) /* External reference */
            }

            Name (ODVX, Package (0x06)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Method (ODVP, 0, Serialized)
            {
                ODVX [Zero] = \ODV0 /* External reference */
                ODVX [One] = \ODV1 /* External reference */
                ODVX [0x02] = \ODV2 /* External reference */
                ODVX [0x03] = \ODV3 /* External reference */
                ODVX [0x04] = \ODV4 /* External reference */
                ODVX [0x05] = \ODV5 /* External reference */
                Return (ODVX) /* \_SB_.IETM.ODVX */
            }
        }
    }

    Scope (\_SB.IETM)
    {
        Method (KTOC, 1, Serialized)
        {
            If ((Arg0 > 0x0AAC))
            {
                Return (((Arg0 - 0x0AAC) / 0x0A))
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (CTOK, 1, Serialized)
        {
            Return (((Arg0 * 0x0A) + 0x0AAC))
        }

        Method (C10K, 1, Serialized)
        {
            Name (TMP1, Buffer (0x10)
            {
                 0x00                                             // .
            })
            CreateByteField (TMP1, Zero, TMPL)
            CreateByteField (TMP1, One, TMPH)
            Local0 = (Arg0 + 0x0AAC)
            TMPL = (Local0 & 0xFF)
            TMPH = ((Local0 & 0xFF00) >> 0x08)
            ToInteger (TMP1, Local1)
            Return (Local1)
        }

        Method (K10C, 1, Serialized)
        {
            If ((Arg0 > 0x0AAC))
            {
                Return ((Arg0 - 0x0AAC))
            }
            Else
            {
                Return (Zero)
            }
        }
    }

    Scope (\_SB.PC00.TCPU)
    {
        Name (PFLG, Zero)
        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((\SADE == One))
            {
                Return (0x0F)
            }
            Else
            {
                Return (Zero)
            }
        }

        OperationRegion (CPWR, SystemMemory, ((MHBR << 0x0F) + 0x5000), 0x1000)
        Field (CPWR, ByteAcc, NoLock, Preserve)
        {
            Offset (0x930), 
            PTDP,   15, 
            Offset (0x932), 
            PMIN,   15, 
            Offset (0x934), 
            PMAX,   15, 
            Offset (0x936), 
            TMAX,   7, 
            Offset (0x938), 
            PWRU,   4, 
            Offset (0x939), 
            EGYU,   5, 
            Offset (0x93A), 
            TIMU,   4, 
            Offset (0x958), 
            Offset (0x95C), 
            LPMS,   1, 
            CTNL,   2, 
            Offset (0x978), 
            PCTP,   8, 
            Offset (0x998), 
            RP0C,   8, 
            RP1C,   8, 
            RPNC,   8, 
            Offset (0xF3C), 
            TRAT,   8, 
            Offset (0xF40), 
            PTD1,   15, 
            Offset (0xF42), 
            TRA1,   8, 
            Offset (0xF44), 
            PMX1,   15, 
            Offset (0xF46), 
            PMN1,   15, 
            Offset (0xF48), 
            PTD2,   15, 
            Offset (0xF4A), 
            TRA2,   8, 
            Offset (0xF4C), 
            PMX2,   15, 
            Offset (0xF4E), 
            PMN2,   15, 
            Offset (0xF50), 
            CTCL,   2, 
                ,   29, 
            CLCK,   1, 
            MNTR,   8
        }

        Name (XPCC, Zero)
        Method (PPCC, 0, Serialized)
        {
            If (((XPCC == Zero) && CondRefOf (\_SB.CBMI)))
            {
                Switch (ToInteger (\_SB.CBMI))
                {
                    Case (Zero)
                    {
                        If (((\_SB.CLVL >= One) && (\_SB.CLVL <= 0x03)))
                        {
                            CPL0 ()
                            XPCC = One
                        }
                    }
                    Case (One)
                    {
                        If (((\_SB.CLVL == 0x02) || (\_SB.CLVL == 0x03)))
                        {
                            CPL1 ()
                            XPCC = One
                        }
                    }
                    Case (0x02)
                    {
                        If ((\_SB.CLVL == 0x03))
                        {
                            CPL2 ()
                            XPCC = One
                        }
                    }

                }
            }

            Return (NPCC) /* \_SB_.PC00.TCPU.NPCC */
        }

        Name (NPCC, Package (0x03)
        {
            0x02, 
            Package (0x06)
            {
                Zero, 
                0x88B8, 
                0xAFC8, 
                0x6D60, 
                0x7D00, 
                0x03E8
            }, 

            Package (0x06)
            {
                One, 
                0xDBBA, 
                0xDBBA, 
                Zero, 
                Zero, 
                0x03E8
            }
        })
        Method (CPNU, 2, Serialized)
        {
            Name (CNVT, Zero)
            Name (PPUU, Zero)
            Name (RMDR, Zero)
            If ((PWRU == Zero))
            {
                PPUU = One
            }
            Else
            {
                PPUU = (PWRU-- << 0x02)
            }

            Divide (Arg0, PPUU, RMDR, CNVT) /* \_SB_.PC00.TCPU.CPNU.CNVT */
            If ((Arg1 == Zero))
            {
                Return (CNVT) /* \_SB_.PC00.TCPU.CPNU.CNVT */
            }
            Else
            {
                CNVT *= 0x03E8
                RMDR *= 0x03E8
                RMDR /= PPUU
                CNVT += RMDR /* \_SB_.PC00.TCPU.CPNU.RMDR */
                Return (CNVT) /* \_SB_.PC00.TCPU.CPNU.CNVT */
            }
        }

        Method (CPL0, 0, NotSerialized)
        {
            \_SB.PC00.TCPU.NPCC [Zero] = 0x02
            DerefOf (\_SB.PC00.TCPU.NPCC [One]) [Zero] = Zero
            DerefOf (\_SB.PC00.TCPU.NPCC [One]) [One] = 0x7D
            DerefOf (\_SB.PC00.TCPU.NPCC [One]) [0x02] = CPNU (\_SB.PL10, One)
            DerefOf (\_SB.PC00.TCPU.NPCC [One]) [0x03] = (\_SB.PLW0 * 0x03E8)
            DerefOf (\_SB.PC00.TCPU.NPCC [One]) [0x04] = ((\_SB.PLW0 * 0x03E8
                ) + 0x0FA0)
            DerefOf (\_SB.PC00.TCPU.NPCC [One]) [0x05] = PPSZ /* External reference */
            DerefOf (\_SB.PC00.TCPU.NPCC [0x02]) [Zero] = One
            DerefOf (\_SB.PC00.TCPU.NPCC [0x02]) [One] = CPNU (\_SB.PL20, One)
            DerefOf (\_SB.PC00.TCPU.NPCC [0x02]) [0x02] = CPNU (\_SB.PL20, One)
            DerefOf (\_SB.PC00.TCPU.NPCC [0x02]) [0x03] = Zero
            DerefOf (\_SB.PC00.TCPU.NPCC [0x02]) [0x04] = Zero
            DerefOf (\_SB.PC00.TCPU.NPCC [0x02]) [0x05] = PPSZ /* External reference */
        }

        Method (CPL1, 0, NotSerialized)
        {
            \_SB.PC00.TCPU.NPCC [Zero] = 0x02
            DerefOf (\_SB.PC00.TCPU.NPCC [One]) [Zero] = Zero
            DerefOf (\_SB.PC00.TCPU.NPCC [One]) [One] = 0x7D
            DerefOf (\_SB.PC00.TCPU.NPCC [One]) [0x02] = CPNU (\_SB.PL11, One)
            DerefOf (\_SB.PC00.TCPU.NPCC [One]) [0x03] = (\_SB.PLW1 * 0x03E8)
            DerefOf (\_SB.PC00.TCPU.NPCC [One]) [0x04] = ((\_SB.PLW1 * 0x03E8
                ) + 0x0FA0)
            DerefOf (\_SB.PC00.TCPU.NPCC [One]) [0x05] = PPSZ /* External reference */
            DerefOf (\_SB.PC00.TCPU.NPCC [0x02]) [Zero] = One
            DerefOf (\_SB.PC00.TCPU.NPCC [0x02]) [One] = CPNU (\_SB.PL21, One)
            DerefOf (\_SB.PC00.TCPU.NPCC [0x02]) [0x02] = CPNU (\_SB.PL21, One)
            DerefOf (\_SB.PC00.TCPU.NPCC [0x02]) [0x03] = Zero
            DerefOf (\_SB.PC00.TCPU.NPCC [0x02]) [0x04] = Zero
            DerefOf (\_SB.PC00.TCPU.NPCC [0x02]) [0x05] = PPSZ /* External reference */
        }

        Method (CPL2, 0, NotSerialized)
        {
            \_SB.PC00.TCPU.NPCC [Zero] = 0x02
            DerefOf (\_SB.PC00.TCPU.NPCC [One]) [Zero] = Zero
            DerefOf (\_SB.PC00.TCPU.NPCC [One]) [One] = 0x7D
            DerefOf (\_SB.PC00.TCPU.NPCC [One]) [0x02] = CPNU (\_SB.PL12, One)
            DerefOf (\_SB.PC00.TCPU.NPCC [One]) [0x03] = (\_SB.PLW2 * 0x03E8)
            DerefOf (\_SB.PC00.TCPU.NPCC [One]) [0x04] = ((\_SB.PLW2 * 0x03E8
                ) + 0x0FA0)
            DerefOf (\_SB.PC00.TCPU.NPCC [One]) [0x05] = PPSZ /* External reference */
            DerefOf (\_SB.PC00.TCPU.NPCC [0x02]) [Zero] = One
            DerefOf (\_SB.PC00.TCPU.NPCC [0x02]) [One] = CPNU (\_SB.PL22, One)
            DerefOf (\_SB.PC00.TCPU.NPCC [0x02]) [0x02] = CPNU (\_SB.PL22, One)
            DerefOf (\_SB.PC00.TCPU.NPCC [0x02]) [0x03] = Zero
            DerefOf (\_SB.PC00.TCPU.NPCC [0x02]) [0x04] = Zero
            DerefOf (\_SB.PC00.TCPU.NPCC [0x02]) [0x05] = PPSZ /* External reference */
        }

        Name (LSTM, Zero)
        Name (_PPC, Zero)  // _PPC: Performance Present Capabilities
        Method (SPPC, 1, Serialized)
        {
            If (CondRefOf (\_SB.CPPC))
            {
                \_SB.CPPC = Arg0
            }

            Switch (ToInteger (\TCNT))
            {
                Case (0x10)
                {
                    Notify (\_SB.PR00, 0x80) // Status Change
                    Notify (\_SB.PR01, 0x80) // Status Change
                    Notify (\_SB.PR02, 0x80) // Status Change
                    Notify (\_SB.PR03, 0x80) // Status Change
                    Notify (\_SB.PR04, 0x80) // Status Change
                    Notify (\_SB.PR05, 0x80) // Status Change
                    Notify (\_SB.PR06, 0x80) // Status Change
                    Notify (\_SB.PR07, 0x80) // Status Change
                    Notify (\_SB.PR08, 0x80) // Status Change
                    Notify (\_SB.PR09, 0x80) // Status Change
                    Notify (\_SB.PR10, 0x80) // Status Change
                    Notify (\_SB.PR11, 0x80) // Status Change
                    Notify (\_SB.PR12, 0x80) // Status Change
                    Notify (\_SB.PR13, 0x80) // Status Change
                    Notify (\_SB.PR14, 0x80) // Status Change
                    Notify (\_SB.PR15, 0x80) // Status Change
                }
                Case (0x0E)
                {
                    Notify (\_SB.PR00, 0x80) // Status Change
                    Notify (\_SB.PR01, 0x80) // Status Change
                    Notify (\_SB.PR02, 0x80) // Status Change
                    Notify (\_SB.PR03, 0x80) // Status Change
                    Notify (\_SB.PR04, 0x80) // Status Change
                    Notify (\_SB.PR05, 0x80) // Status Change
                    Notify (\_SB.PR06, 0x80) // Status Change
                    Notify (\_SB.PR07, 0x80) // Status Change
                    Notify (\_SB.PR08, 0x80) // Status Change
                    Notify (\_SB.PR09, 0x80) // Status Change
                    Notify (\_SB.PR10, 0x80) // Status Change
                    Notify (\_SB.PR11, 0x80) // Status Change
                    Notify (\_SB.PR12, 0x80) // Status Change
                    Notify (\_SB.PR13, 0x80) // Status Change
                }
                Case (0x0C)
                {
                    Notify (\_SB.PR00, 0x80) // Status Change
                    Notify (\_SB.PR01, 0x80) // Status Change
                    Notify (\_SB.PR02, 0x80) // Status Change
                    Notify (\_SB.PR03, 0x80) // Status Change
                    Notify (\_SB.PR04, 0x80) // Status Change
                    Notify (\_SB.PR05, 0x80) // Status Change
                    Notify (\_SB.PR06, 0x80) // Status Change
                    Notify (\_SB.PR07, 0x80) // Status Change
                    Notify (\_SB.PR08, 0x80) // Status Change
                    Notify (\_SB.PR09, 0x80) // Status Change
                    Notify (\_SB.PR10, 0x80) // Status Change
                    Notify (\_SB.PR11, 0x80) // Status Change
                }
                Case (0x0A)
                {
                    Notify (\_SB.PR00, 0x80) // Status Change
                    Notify (\_SB.PR01, 0x80) // Status Change
                    Notify (\_SB.PR02, 0x80) // Status Change
                    Notify (\_SB.PR03, 0x80) // Status Change
                    Notify (\_SB.PR04, 0x80) // Status Change
                    Notify (\_SB.PR05, 0x80) // Status Change
                    Notify (\_SB.PR06, 0x80) // Status Change
                    Notify (\_SB.PR07, 0x80) // Status Change
                    Notify (\_SB.PR08, 0x80) // Status Change
                    Notify (\_SB.PR09, 0x80) // Status Change
                }
                Case (0x08)
                {
                    Notify (\_SB.PR00, 0x80) // Status Change
                    Notify (\_SB.PR01, 0x80) // Status Change
                    Notify (\_SB.PR02, 0x80) // Status Change
                    Notify (\_SB.PR03, 0x80) // Status Change
                    Notify (\_SB.PR04, 0x80) // Status Change
                    Notify (\_SB.PR05, 0x80) // Status Change
                    Notify (\_SB.PR06, 0x80) // Status Change
                    Notify (\_SB.PR07, 0x80) // Status Change
                }
                Case (0x07)
                {
                    Notify (\_SB.PR00, 0x80) // Status Change
                    Notify (\_SB.PR01, 0x80) // Status Change
                    Notify (\_SB.PR02, 0x80) // Status Change
                    Notify (\_SB.PR03, 0x80) // Status Change
                    Notify (\_SB.PR04, 0x80) // Status Change
                    Notify (\_SB.PR05, 0x80) // Status Change
                    Notify (\_SB.PR06, 0x80) // Status Change
                }
                Case (0x06)
                {
                    Notify (\_SB.PR00, 0x80) // Status Change
                    Notify (\_SB.PR01, 0x80) // Status Change
                    Notify (\_SB.PR02, 0x80) // Status Change
                    Notify (\_SB.PR03, 0x80) // Status Change
                    Notify (\_SB.PR04, 0x80) // Status Change
                    Notify (\_SB.PR05, 0x80) // Status Change
                }
                Case (0x05)
                {
                    Notify (\_SB.PR00, 0x80) // Status Change
                    Notify (\_SB.PR01, 0x80) // Status Change
                    Notify (\_SB.PR02, 0x80) // Status Change
                    Notify (\_SB.PR03, 0x80) // Status Change
                    Notify (\_SB.PR04, 0x80) // Status Change
                }
                Case (0x04)
                {
                    Notify (\_SB.PR00, 0x80) // Status Change
                    Notify (\_SB.PR01, 0x80) // Status Change
                    Notify (\_SB.PR02, 0x80) // Status Change
                    Notify (\_SB.PR03, 0x80) // Status Change
                }
                Case (0x03)
                {
                    Notify (\_SB.PR00, 0x80) // Status Change
                    Notify (\_SB.PR01, 0x80) // Status Change
                    Notify (\_SB.PR02, 0x80) // Status Change
                }
                Case (0x02)
                {
                    Notify (\_SB.PR00, 0x80) // Status Change
                    Notify (\_SB.PR01, 0x80) // Status Change
                }
                Default
                {
                    Notify (\_SB.PR00, 0x80) // Status Change
                }

            }
        }

        Method (SPUR, 1, NotSerialized)
        {
            If ((Arg0 <= \TCNT))
            {
                If ((\_SB.PAGD._STA () == 0x0F))
                {
                    \_SB.PAGD._PUR [One] = Arg0
                    Notify (\_SB.PAGD, 0x80) // Status Change
                }
            }
        }

        Method (PCCC, 0, Serialized)
        {
            PCCX [Zero] = One
            Switch (ToInteger (CPNU (PTDP, Zero)))
            {
                Case (0x39)
                {
                    DerefOf (PCCX [One]) [Zero] = 0xA7F8
                    DerefOf (PCCX [One]) [One] = 0x00017318
                }
                Case (0x2F)
                {
                    DerefOf (PCCX [One]) [Zero] = 0x9858
                    DerefOf (PCCX [One]) [One] = 0x00014C08
                }
                Case (0x25)
                {
                    DerefOf (PCCX [One]) [Zero] = 0x7148
                    DerefOf (PCCX [One]) [One] = 0xD6D8
                }
                Case (0x19)
                {
                    DerefOf (PCCX [One]) [Zero] = 0x3E80
                    DerefOf (PCCX [One]) [One] = 0x7D00
                }
                Case (0x0F)
                {
                    DerefOf (PCCX [One]) [Zero] = 0x36B0
                    DerefOf (PCCX [One]) [One] = 0x7D00
                }
                Case (0x0B)
                {
                    DerefOf (PCCX [One]) [Zero] = 0x36B0
                    DerefOf (PCCX [One]) [One] = 0x61A8
                }
                Default
                {
                    DerefOf (PCCX [One]) [Zero] = 0xFF
                    DerefOf (PCCX [One]) [One] = 0xFF
                }

            }

            Return (PCCX) /* \_SB_.PC00.TCPU.PCCX */
        }

        Name (PCCX, Package (0x02)
        {
            0x80000000, 
            Package (0x02)
            {
                0x80000000, 
                0x80000000
            }
        })
        Name (KEFF, Package (0x1E)
        {
            Package (0x02)
            {
                0x01BC, 
                Zero
            }, 

            Package (0x02)
            {
                0x01CF, 
                0x27
            }, 

            Package (0x02)
            {
                0x01E1, 
                0x4B
            }, 

            Package (0x02)
            {
                0x01F3, 
                0x6C
            }, 

            Package (0x02)
            {
                0x0206, 
                0x8B
            }, 

            Package (0x02)
            {
                0x0218, 
                0xA8
            }, 

            Package (0x02)
            {
                0x022A, 
                0xC3
            }, 

            Package (0x02)
            {
                0x023D, 
                0xDD
            }, 

            Package (0x02)
            {
                0x024F, 
                0xF4
            }, 

            Package (0x02)
            {
                0x0261, 
                0x010B
            }, 

            Package (0x02)
            {
                0x0274, 
                0x011F
            }, 

            Package (0x02)
            {
                0x032C, 
                0x01BD
            }, 

            Package (0x02)
            {
                0x03D7, 
                0x0227
            }, 

            Package (0x02)
            {
                0x048B, 
                0x026D
            }, 

            Package (0x02)
            {
                0x053E, 
                0x02A1
            }, 

            Package (0x02)
            {
                0x05F7, 
                0x02C6
            }, 

            Package (0x02)
            {
                0x06A8, 
                0x02E6
            }, 

            Package (0x02)
            {
                0x075D, 
                0x02FF
            }, 

            Package (0x02)
            {
                0x0818, 
                0x0311
            }, 

            Package (0x02)
            {
                0x08CF, 
                0x0322
            }, 

            Package (0x02)
            {
                0x179C, 
                0x0381
            }, 

            Package (0x02)
            {
                0x2DDC, 
                0x039C
            }, 

            Package (0x02)
            {
                0x44A8, 
                0x039E
            }, 

            Package (0x02)
            {
                0x5C35, 
                0x0397
            }, 

            Package (0x02)
            {
                0x747D, 
                0x038D
            }, 

            Package (0x02)
            {
                0x8D7F, 
                0x0382
            }, 

            Package (0x02)
            {
                0xA768, 
                0x0376
            }, 

            Package (0x02)
            {
                0xC23B, 
                0x0369
            }, 

            Package (0x02)
            {
                0xDE26, 
                0x035A
            }, 

            Package (0x02)
            {
                0xFB7C, 
                0x034A
            }
        })
        Name (CEUP, Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        })
        Method (_TMP, 0, Serialized)  // _TMP: Temperature
        {
            Return (\_SB.IETM.CTOK (PCTP))
        }

        Method (_DTI, 1, NotSerialized)  // _DTI: Device Temperature Indication
        {
            LSTM = Arg0
            Notify (\_SB.PC00.TCPU, 0x91) // Device-Specific
        }

        Method (_NTT, 0, NotSerialized)  // _NTT: Notification Temperature Threshold
        {
            Return (0x0ADE)
        }

        Name (PTYP, Zero)
        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If (CondRefOf (\_SB.PR00._PSS))
            {
                Return (\_SB.PR00._PSS ())
            }
            Else
            {
                Return (Package (0x02)
                {
                    Package (0x06)
                    {
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x06)
                    {
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
            }
        }

        Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
        {
            If (CondRefOf (\_SB.PR00._TSS))
            {
                Return (\_SB.PR00._TSS ())
            }
            Else
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        One, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
            }
        }

        Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
        {
            If (CondRefOf (\_SB.PR00._TPC))
            {
                Return (\_SB.PR00._TPC) /* External reference */
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
        {
            If ((CondRefOf (\PF00) && (\PF00 != 0x80000000)))
            {
                If ((\PF00 & 0x04))
                {
                    Return (Package (0x02)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }
                    })
                }
                Else
                {
                    Return (Package (0x02)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x05,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000001810, // Address
                                ,)
                        }, 

                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x05,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000001810, // Address
                                ,)
                        }
                    })
                }
            }
            Else
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }
        }

        Method (_TSD, 0, NotSerialized)  // _TSD: Throttling State Dependencies
        {
            If (CondRefOf (\_SB.PR00._TSD))
            {
                Return (\_SB.PR00._TSD ())
            }
            Else
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        Zero, 
                        Zero, 
                        0xFC, 
                        Zero
                    }
                })
            }
        }

        Method (_TDL, 0, NotSerialized)  // _TDL: T-State Depth Limit
        {
            If ((CondRefOf (\_SB.PR00._TSS) && CondRefOf (\_SB.CFGD)))
            {
                If ((\_SB.CFGD & 0x2000))
                {
                    Return ((SizeOf (\_SB.PR00.TSMF) - One))
                }
                Else
                {
                    Return ((SizeOf (\_SB.PR00.TSMC) - One))
                }
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (_PDL, 0, NotSerialized)  // _PDL: P-state Depth Limit
        {
            If (CondRefOf (\_SB.PR00._PSS))
            {
                If ((\_SB.OSCP & 0x0400))
                {
                    Return ((SizeOf (\_SB.PR00.TPSS) - One))
                }
                Else
                {
                    Return ((SizeOf (\_SB.PR00.LPSS) - One))
                }
            }
            Else
            {
                Return (Zero)
            }
        }

        Name (TJMX, 0x6E)
        Method (_TSP, 0, Serialized)  // _TSP: Thermal Sampling Period
        {
            Return (Zero)
        }

        Method (_AC0, 0, Serialized)  // _ACx: Active Cooling, x=0-9
        {
            Local1 = \_SB.IETM.CTOK (TJMX)
            Local1 -= 0x0A
            If ((LSTM >= Local1))
            {
                Return ((Local1 - 0x14))
            }
            Else
            {
                Return (Local1)
            }
        }

        Method (_AC1, 0, Serialized)  // _ACx: Active Cooling, x=0-9
        {
            Local1 = \_SB.IETM.CTOK (TJMX)
            Local1 -= 0x1E
            If ((LSTM >= Local1))
            {
                Return ((Local1 - 0x14))
            }
            Else
            {
                Return (Local1)
            }
        }

        Method (_AC2, 0, Serialized)  // _ACx: Active Cooling, x=0-9
        {
            Local1 = \_SB.IETM.CTOK (TJMX)
            Local1 -= 0x28
            If ((LSTM >= Local1))
            {
                Return ((Local1 - 0x14))
            }
            Else
            {
                Return (Local1)
            }
        }

        Method (_AC3, 0, Serialized)  // _ACx: Active Cooling, x=0-9
        {
            Local1 = \_SB.IETM.CTOK (TJMX)
            Local1 -= 0x37
            If ((LSTM >= Local1))
            {
                Return ((Local1 - 0x14))
            }
            Else
            {
                Return (Local1)
            }
        }

        Method (_AC4, 0, Serialized)  // _ACx: Active Cooling, x=0-9
        {
            Local1 = \_SB.IETM.CTOK (TJMX)
            Local1 -= 0x46
            If ((LSTM >= Local1))
            {
                Return ((Local1 - 0x14))
            }
            Else
            {
                Return (Local1)
            }
        }

        Method (_PSV, 0, Serialized)  // _PSV: Passive Temperature
        {
            Return (\_SB.IETM.CTOK (TJMX))
        }

        Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
        {
            Return (\_SB.IETM.CTOK (TJMX))
        }

        Method (_CR3, 0, Serialized)  // _CR3: Warm/Standby Temperature
        {
            Return (\_SB.IETM.CTOK (TJMX))
        }

        Method (_HOT, 0, Serialized)  // _HOT: Hot Temperature
        {
            Return (\_SB.IETM.CTOK (TJMX))
        }

        Method (UVTH, 1, Serialized)
        {
        }
    }

    Scope (\_SB.IETM)
    {
        Name (CTSP, Package (0x01)
        {
            ToUUID ("e145970a-e4c1-4d73-900e-c9c5a69dd067") /* Unknown UUID */
        })
    }

    Scope (\_SB.PC00.TCPU)
    {
        Method (TDPL, 0, Serialized)
        {
            Name (AAAA, Zero)
            Name (BBBB, Zero)
            Name (CCCC, Zero)
            Local0 = CTNL /* \_SB_.PC00.TCPU.CTNL */
            If (((Local0 == One) || (Local0 == 0x02)))
            {
                Local0 = \_SB.CLVL /* External reference */
            }
            Else
            {
                Return (Package (0x01)
                {
                    Zero
                })
            }

            If ((CLCK == One))
            {
                Local0 = One
            }

            AAAA = CPNU (\_SB.PL10, One)
            BBBB = CPNU (\_SB.PL11, One)
            CCCC = CPNU (\_SB.PL12, One)
            Name (TMP1, Package (0x01)
            {
                Package (0x05)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Name (TMP2, Package (0x02)
            {
                Package (0x05)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x05)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Name (TMP3, Package (0x03)
            {
                Package (0x05)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x05)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x05)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            If ((Local0 == 0x03))
            {
                If ((AAAA > BBBB))
                {
                    If ((AAAA > CCCC))
                    {
                        If ((BBBB > CCCC))
                        {
                            Local3 = Zero
                            LEV0 = Zero
                            Local4 = One
                            LEV1 = One
                            Local5 = 0x02
                            LEV2 = 0x02
                        }
                        Else
                        {
                            Local3 = Zero
                            LEV0 = Zero
                            Local5 = One
                            LEV1 = 0x02
                            Local4 = 0x02
                            LEV2 = One
                        }
                    }
                    Else
                    {
                        Local5 = Zero
                        LEV0 = 0x02
                        Local3 = One
                        LEV1 = Zero
                        Local4 = 0x02
                        LEV2 = One
                    }
                }
                ElseIf ((BBBB > CCCC))
                {
                    If ((AAAA > CCCC))
                    {
                        Local4 = Zero
                        LEV0 = One
                        Local3 = One
                        LEV1 = Zero
                        Local5 = 0x02
                        LEV2 = 0x02
                    }
                    Else
                    {
                        Local4 = Zero
                        LEV0 = One
                        Local5 = One
                        LEV1 = 0x02
                        Local3 = 0x02
                        LEV2 = Zero
                    }
                }
                Else
                {
                    Local5 = Zero
                    LEV0 = 0x02
                    Local4 = One
                    LEV1 = One
                    Local3 = 0x02
                    LEV2 = Zero
                }

                Local1 = (\_SB.TAR0 + One)
                Local2 = (Local1 * 0x64)
                DerefOf (TMP3 [Local3]) [Zero] = AAAA /* \_SB_.PC00.TCPU.TDPL.AAAA */
                DerefOf (TMP3 [Local3]) [One] = Local2
                DerefOf (TMP3 [Local3]) [0x02] = \_SB.CTC0 /* External reference */
                DerefOf (TMP3 [Local3]) [0x03] = Local1
                DerefOf (TMP3 [Local3]) [0x04] = Zero
                Local1 = (\_SB.TAR1 + One)
                Local2 = (Local1 * 0x64)
                DerefOf (TMP3 [Local4]) [Zero] = BBBB /* \_SB_.PC00.TCPU.TDPL.BBBB */
                DerefOf (TMP3 [Local4]) [One] = Local2
                DerefOf (TMP3 [Local4]) [0x02] = \_SB.CTC1 /* External reference */
                DerefOf (TMP3 [Local4]) [0x03] = Local1
                DerefOf (TMP3 [Local4]) [0x04] = Zero
                Local1 = (\_SB.TAR2 + One)
                Local2 = (Local1 * 0x64)
                DerefOf (TMP3 [Local5]) [Zero] = CCCC /* \_SB_.PC00.TCPU.TDPL.CCCC */
                DerefOf (TMP3 [Local5]) [One] = Local2
                DerefOf (TMP3 [Local5]) [0x02] = \_SB.CTC2 /* External reference */
                DerefOf (TMP3 [Local5]) [0x03] = Local1
                DerefOf (TMP3 [Local5]) [0x04] = Zero
                Return (TMP3) /* \_SB_.PC00.TCPU.TDPL.TMP3 */
            }

            If ((Local0 == 0x02))
            {
                If ((AAAA > BBBB))
                {
                    Local3 = Zero
                    Local4 = One
                    LEV0 = Zero
                    LEV1 = One
                    LEV2 = Zero
                }
                Else
                {
                    Local4 = Zero
                    Local3 = One
                    LEV0 = One
                    LEV1 = Zero
                    LEV2 = Zero
                }

                Local1 = (\_SB.TAR0 + One)
                Local2 = (Local1 * 0x64)
                DerefOf (TMP2 [Local3]) [Zero] = AAAA /* \_SB_.PC00.TCPU.TDPL.AAAA */
                DerefOf (TMP2 [Local3]) [One] = Local2
                DerefOf (TMP2 [Local3]) [0x02] = \_SB.CTC0 /* External reference */
                DerefOf (TMP2 [Local3]) [0x03] = Local1
                DerefOf (TMP2 [Local3]) [0x04] = Zero
                Local1 = (\_SB.TAR1 + One)
                Local2 = (Local1 * 0x64)
                DerefOf (TMP2 [Local4]) [Zero] = BBBB /* \_SB_.PC00.TCPU.TDPL.BBBB */
                DerefOf (TMP2 [Local4]) [One] = Local2
                DerefOf (TMP2 [Local4]) [0x02] = \_SB.CTC1 /* External reference */
                DerefOf (TMP2 [Local4]) [0x03] = Local1
                DerefOf (TMP2 [Local4]) [0x04] = Zero
                Return (TMP2) /* \_SB_.PC00.TCPU.TDPL.TMP2 */
            }

            If ((Local0 == One))
            {
                Switch (ToInteger (\_SB.CBMI))
                {
                    Case (Zero)
                    {
                        Local1 = (\_SB.TAR0 + One)
                        Local2 = (Local1 * 0x64)
                        DerefOf (TMP1 [Zero]) [Zero] = AAAA /* \_SB_.PC00.TCPU.TDPL.AAAA */
                        DerefOf (TMP1 [Zero]) [One] = Local2
                        DerefOf (TMP1 [Zero]) [0x02] = \_SB.CTC0 /* External reference */
                        DerefOf (TMP1 [Zero]) [0x03] = Local1
                        DerefOf (TMP1 [Zero]) [0x04] = Zero
                        LEV0 = Zero
                        LEV1 = Zero
                        LEV2 = Zero
                    }
                    Case (One)
                    {
                        Local1 = (\_SB.TAR1 + One)
                        Local2 = (Local1 * 0x64)
                        DerefOf (TMP1 [Zero]) [Zero] = BBBB /* \_SB_.PC00.TCPU.TDPL.BBBB */
                        DerefOf (TMP1 [Zero]) [One] = Local2
                        DerefOf (TMP1 [Zero]) [0x02] = \_SB.CTC1 /* External reference */
                        DerefOf (TMP1 [Zero]) [0x03] = Local1
                        DerefOf (TMP1 [Zero]) [0x04] = Zero
                        LEV0 = One
                        LEV1 = One
                        LEV2 = One
                    }
                    Case (0x02)
                    {
                        Local1 = (\_SB.TAR2 + One)
                        Local2 = (Local1 * 0x64)
                        DerefOf (TMP1 [Zero]) [Zero] = CCCC /* \_SB_.PC00.TCPU.TDPL.CCCC */
                        DerefOf (TMP1 [Zero]) [One] = Local2
                        DerefOf (TMP1 [Zero]) [0x02] = \_SB.CTC2 /* External reference */
                        DerefOf (TMP1 [Zero]) [0x03] = Local1
                        DerefOf (TMP1 [Zero]) [0x04] = Zero
                        LEV0 = 0x02
                        LEV1 = 0x02
                        LEV2 = 0x02
                    }

                }

                Return (TMP1) /* \_SB_.PC00.TCPU.TDPL.TMP1 */
            }

            Return (Zero)
        }

        Name (MAXT, Zero)
        Method (TDPC, 0, NotSerialized)
        {
            Return (MAXT) /* \_SB_.PC00.TCPU.MAXT */
        }

        Name (LEV0, Zero)
        Name (LEV1, Zero)
        Name (LEV2, Zero)
        Method (STDP, 1, Serialized)
        {
            If ((Arg0 >= \_SB.CLVL))
            {
                Return (Zero)
            }

            Switch (ToInteger (Arg0))
            {
                Case (Zero)
                {
                    Local0 = LEV0 /* \_SB_.PC00.TCPU.LEV0 */
                }
                Case (One)
                {
                    Local0 = LEV1 /* \_SB_.PC00.TCPU.LEV1 */
                }
                Case (0x02)
                {
                    Local0 = LEV2 /* \_SB_.PC00.TCPU.LEV2 */
                }

            }

            Switch (ToInteger (Local0))
            {
                Case (Zero)
                {
                    CPL0 ()
                }
                Case (One)
                {
                    CPL1 ()
                }
                Case (0x02)
                {
                    CPL2 ()
                }

            }

            Notify (\_SB.PC00.TCPU, 0x83) // Device-Specific Change
        }
    }

    Scope (\_SB.IETM)
    {
        Name (PTTL, 0x14)
        Name (PSVT, Package (0x05)
        {
            0x02, 
            Package (0x0C)
            {
                \_SB.PC00.TCPU, 
                \_SB.PC00.LPCB.EC0.SEN3, 
                One, 
                0xC8, 
                0x0C6E, 
                0x0E, 
                0x000A0000, 
                "MAX", 
                One, 
                0x0A, 
                0x0A, 
                Zero
            }, 

            Package (0x0C)
            {
                \_SB.PC00.TCPU, 
                \_SB.PC00.LPCB.EC0.SEN3, 
                One, 
                0xC8, 
                0x0CA0, 
                0x0E, 
                0x000A0000, 
                One, 
                One, 
                0x0A, 
                0x0A, 
                Zero
            }, 

            Package (0x0C)
            {
                \_SB.PC00.TCPU, 
                \_SB.PC00.LPCB.EC0.SEN3, 
                One, 
                0xC8, 
                0x0CD2, 
                0x0E, 
                0x000A0000, 
                0x02, 
                One, 
                0x0A, 
                0x0A, 
                Zero
            }, 

            Package (0x0C)
            {
                \_SB.PC00.TCPU, 
                \_SB.PC00.LPCB.EC0.SEN3, 
                One, 
                0xC8, 
                0x0D36, 
                0x0E, 
                0x000A0000, 
                "MIN", 
                One, 
                0x0A, 
                0x0A, 
                Zero
            }
        })
    }

    Scope (\_SB.IETM)
    {
        Name (DP2P, Package (0x01)
        {
            ToUUID ("9e04115a-ae87-4d1c-9500-0f3e340bfe75") /* Unknown UUID */
        })
        Name (DPSP, Package (0x01)
        {
            ToUUID ("42a441d6-ae6a-462b-a84b-4a8ce79027d3") /* Unknown UUID */
        })
        Name (DASP, Package (0x01)
        {
            ToUUID ("3a95c389-e4b8-4629-a526-c52c88626bae") /* Unknown UUID */
        })
        Name (DA2P, Package (0x01)
        {
            ToUUID ("0e56fab6-bdfc-4e8c-8246-40ecfd4d74ea") /* Unknown UUID */
        })
        Name (DCSP, Package (0x01)
        {
            ToUUID ("97c68ae7-15fa-499c-b8c9-5da81d606e0a") /* Unknown UUID */
        })
        Name (RFIP, Package (0x01)
        {
            ToUUID ("c4ce1849-243a-49f3-b8d5-f97002f38e6a") /* Unknown UUID */
        })
        Name (POBP, Package (0x01)
        {
            ToUUID ("f5a35014-c209-46a4-993a-eb56de7530a1") /* Unknown UUID */
        })
        Name (DAPP, Package (0x01)
        {
            ToUUID ("63be270f-1c11-48fd-a6f7-3af253ff3e2d") /* Unknown UUID */
        })
        Name (DVSP, Package (0x01)
        {
            ToUUID ("6ed722a7-9240-48a5-b479-31eef723d7cf") /* Unknown UUID */
        })
        Name (DPID, Package (0x01)
        {
            ToUUID ("42496e14-bc1b-46e8-a798-ca915464426f") /* Unknown UUID */
        })
    }

    Scope (\_SB.PC00.LPCB.EC0)
    {
        Device (SEN1)
        {
            Name (_HID, EisaId ("INT3403") /* DPTF Temperature Sensor */)  // _HID: Hardware ID
            Name (_UID, "CPUS")  // _UID: Unique ID
            Name (_STR, Unicode ("Thermistor CPU"))  // _STR: Description String
            Name (PTYP, 0x03)
            Name (CTYP, Zero)
            Name (PFLG, Zero)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }

            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                If (\_SB.PC00.LPCB.EC0.ECAV)
                {
                    If ((Acquire (\_SB.PC00.LPCB.EC0.LFCM, 0xA000) == Zero))
                    {
                        Local0 = \_SB.IETM.C10K ((\_SB.PC00.LPCB.EC0.CPUS * 0x0A))
                        Release (\_SB.PC00.LPCB.EC0.LFCM)
                        Return (Local0)
                    }
                }
            }

            Name (PATC, 0x02)
            Method (PAT0, 1, Serialized)
            {
            }

            Method (PAT1, 1, Serialized)
            {
            }

            Name (GTSH, 0x14)
            Method (_TSP, 0, Serialized)  // _TSP: Thermal Sampling Period
            {
                Return (Zero)
            }
        }
    }

    Scope (\_SB.PC00.LPCB.EC0)
    {
        Device (SEN2)
        {
            Name (_HID, EisaId ("INT3403") /* DPTF Temperature Sensor */)  // _HID: Hardware ID
            Name (_UID, "CPUT")  // _UID: Unique ID
            Name (_STR, Unicode ("CPU DTS"))  // _STR: Description String
            Name (PTYP, 0x03)
            Name (CTYP, Zero)
            Name (PFLG, Zero)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }

            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                If (\_SB.PC00.LPCB.EC0.ECAV)
                {
                    If ((Acquire (\_SB.PC00.LPCB.EC0.LFCM, 0xA000) == Zero))
                    {
                        Local0 = \_SB.IETM.C10K ((\_SB.PC00.LPCB.EC0.CPUT * 0x0A))
                        Release (\_SB.PC00.LPCB.EC0.LFCM)
                        Return (Local0)
                    }
                }
            }

            Name (PATC, 0x02)
            Method (PAT0, 1, Serialized)
            {
            }

            Method (PAT1, 1, Serialized)
            {
            }

            Name (GTSH, 0x14)
            Method (_NTT, 0, NotSerialized)  // _NTT: Notification Temperature Threshold
            {
                Return (0x0ADE)
            }

            Method (_TSP, 0, Serialized)  // _TSP: Thermal Sampling Period
            {
                Return (Zero)
            }
        }
    }

    Scope (\_SB.PC00.LPCB.EC0)
    {
        Device (SEN3)
        {
            Name (_HID, EisaId ("INT3403") /* DPTF Temperature Sensor */)  // _HID: Hardware ID
            Name (_UID, "GPUS")  // _UID: Unique ID
            Name (_STR, Unicode ("Thermistor GPU"))  // _STR: Description String
            Name (PTYP, 0x03)
            Name (CTYP, Zero)
            Name (PFLG, Zero)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }

            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                If (\_SB.PC00.LPCB.EC0.ECAV)
                {
                    If ((Acquire (\_SB.PC00.LPCB.EC0.LFCM, 0xA000) == Zero))
                    {
                        Local0 = \_SB.IETM.C10K ((\_SB.PC00.LPCB.EC0.GPUS * 0x0A))
                        Release (\_SB.PC00.LPCB.EC0.LFCM)
                        Return (Local0)
                    }
                }
            }

            Name (PATC, 0x02)
            Method (PAT0, 1, Serialized)
            {
            }

            Method (PAT1, 1, Serialized)
            {
            }

            Name (GTSH, 0x14)
            Method (_NTT, 0, NotSerialized)  // _NTT: Notification Temperature Threshold
            {
            }

            Method (_TSP, 0, Serialized)  // _TSP: Thermal Sampling Period
            {
                Return (Zero)
            }
        }
    }

    Scope (\_SB.PC00.LPCB.EC0)
    {
        Device (SEN4)
        {
            Name (_HID, EisaId ("INT3403") /* DPTF Temperature Sensor */)  // _HID: Hardware ID
            Name (_UID, "GPUT")  // _UID: Unique ID
            Name (_STR, Unicode ("GPU DTS"))  // _STR: Description String
            Name (PTYP, 0x03)
            Name (CTYP, Zero)
            Name (PFLG, Zero)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }

            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                If (\_SB.PC00.LPCB.EC0.ECAV)
                {
                    If ((Acquire (\_SB.PC00.LPCB.EC0.LFCM, 0xA000) == Zero))
                    {
                        Local0 = \_SB.IETM.C10K ((\_SB.PC00.LPCB.EC0.GPUT * 0x0A))
                        Release (\_SB.PC00.LPCB.EC0.LFCM)
                        Return (Local0)
                    }
                }
            }

            Name (PATC, 0x02)
            Method (PAT0, 1, Serialized)
            {
            }

            Method (PAT1, 1, Serialized)
            {
            }

            Name (GTSH, 0x14)
            Method (_NTT, 0, NotSerialized)  // _NTT: Notification Temperature Threshold
            {
            }

            Method (_TSP, 0, Serialized)  // _TSP: Thermal Sampling Period
            {
                Return (Zero)
            }
        }
    }

    Scope (\_SB.PC00.LPCB.EC0)
    {
        Device (SEN5)
        {
            Name (_HID, EisaId ("INT3403") /* DPTF Temperature Sensor */)  // _HID: Hardware ID
            Name (_UID, "PCHT")  // _UID: Unique ID
            Name (_STR, Unicode ("PCH DTS"))  // _STR: Description String
            Name (PTYP, 0x03)
            Name (CTYP, Zero)
            Name (PFLG, Zero)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }

            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                If (\_SB.PC00.LPCB.EC0.ECAV)
                {
                    If ((Acquire (\_SB.PC00.LPCB.EC0.LFCM, 0xA000) == Zero))
                    {
                        Local0 = \_SB.IETM.C10K ((\_SB.PC00.LPCB.EC0.PCHT * 0x0A))
                        Release (\_SB.PC00.LPCB.EC0.LFCM)
                        Return (Local0)
                    }
                }
            }

            Name (PATC, 0x02)
            Method (PAT0, 1, Serialized)
            {
            }

            Method (PAT1, 1, Serialized)
            {
            }

            Name (GTSH, 0x14)
            Method (_TSP, 0, Serialized)  // _TSP: Thermal Sampling Period
            {
                Return (Zero)
            }
        }
    }

    Scope (\_SB.PC00.LPCB.EC0)
    {
        Device (SEN6)
        {
            Name (_HID, EisaId ("INT3403") /* DPTF Temperature Sensor */)  // _HID: Hardware ID
            Name (_UID, "CHIS")  // _UID: Unique ID
            Name (_STR, Unicode ("Thermistor CHIS"))  // _STR: Description String
            Name (PTYP, 0x03)
            Name (CTYP, Zero)
            Name (PFLG, Zero)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }

            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                If (\_SB.PC00.LPCB.EC0.ECAV)
                {
                    If ((Acquire (\_SB.PC00.LPCB.EC0.LFCM, 0xA000) == Zero))
                    {
                        Local0 = \_SB.IETM.C10K ((\_SB.PC00.LPCB.EC0.CHIS * 0x0A))
                        Release (\_SB.PC00.LPCB.EC0.LFCM)
                        Return (Local0)
                    }
                }
            }

            Name (PATC, 0x02)
            Method (PAT0, 1, Serialized)
            {
            }

            Method (PAT1, 1, Serialized)
            {
            }

            Name (GTSH, 0x14)
            Method (_TSP, 0, Serialized)  // _TSP: Thermal Sampling Period
            {
                Return (Zero)
            }
        }
    }

    Scope (\_SB.PC00.LPCB.EC0)
    {
        Device (SEN7)
        {
            Name (_HID, EisaId ("INT3403") /* DPTF Temperature Sensor */)  // _HID: Hardware ID
            Name (_UID, "SBTS")  // _UID: Unique ID
            Name (_STR, Unicode ("Thermistor Small board"))  // _STR: Description String
            Name (PTYP, 0x03)
            Name (CTYP, Zero)
            Name (PFLG, Zero)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }

            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                If (\_SB.PC00.LPCB.EC0.ECAV)
                {
                    If ((Acquire (\_SB.PC00.LPCB.EC0.LFCM, 0xA000) == Zero))
                    {
                        Local0 = \_SB.IETM.C10K ((\_SB.PC00.LPCB.EC0.SBTS * 0x0A))
                        Release (\_SB.PC00.LPCB.EC0.LFCM)
                        Return (Local0)
                    }
                }
            }

            Name (PATC, 0x02)
            Method (PAT0, 1, Serialized)
            {
            }

            Method (PAT1, 1, Serialized)
            {
            }

            Name (GTSH, 0x14)
            Method (_TSP, 0, Serialized)  // _TSP: Thermal Sampling Period
            {
                Return (Zero)
            }
        }
    }

    Scope (\_SB.PC00.LPCB.EC0)
    {
        Device (SEN8)
        {
            Name (_HID, EisaId ("INT3403") /* DPTF Temperature Sensor */)  // _HID: Hardware ID
            Name (_UID, "GPUP")  // _UID: Unique ID
            Name (_STR, Unicode ("GPU Power Sensor"))  // _STR: Description String
            Name (PTYP, 0x03)
            Name (CTYP, Zero)
            Name (PFLG, Zero)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }

            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                If (\_SB.PC00.LPCB.EC0.ECAV)
                {
                    If ((Acquire (\_SB.PC00.LPCB.EC0.LFCM, 0xA000) == Zero))
                    {
                        Local0 = \_SB.IETM.C10K ((\_SB.PC00.LPCB.EC0.GPPW * 0x0A))
                        Release (\_SB.PC00.LPCB.EC0.LFCM)
                        Return (Local0)
                    }
                }
            }

            Name (PATC, 0x02)
            Method (PAT0, 1, Serialized)
            {
            }

            Method (PAT1, 1, Serialized)
            {
            }

            Name (GTSH, 0x14)
            Method (_TSP, 0, Serialized)  // _TSP: Thermal Sampling Period
            {
                Return (Zero)
            }
        }
    }

    Scope (\_SB.IETM)
    {
        Method (GDDV, 0, Serialized)
        {
            If ((PVSD == 0x09))
            {
                If ((MCSK == 0x04))
                {
                    If ((GTYP == 0x02))
                    {
                        Return (Package (0x01)
                        {
                            Buffer (0x077F)
                            {
                                /* 0000 */  0xE5, 0x1F, 0x94, 0x00, 0x00, 0x00, 0x00, 0x02,  // ........
                                /* 0008 */  0x00, 0x00, 0x00, 0x40, 0x67, 0x64, 0x64, 0x76,  // ...@gddv
                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x4F, 0x45, 0x4D, 0x20,  // ....OEM 
                                /* 0030 */  0x45, 0x78, 0x70, 0x6F, 0x72, 0x74, 0x65, 0x64,  // Exported
                                /* 0038 */  0x20, 0x44, 0x61, 0x74, 0x61, 0x56, 0x61, 0x75,  //  DataVau
                                /* 0040 */  0x6C, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // lt......
                                /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0068 */  0x00, 0x00, 0x00, 0x00, 0x5C, 0x87, 0x29, 0x3E,  // ....\.)>
                                /* 0070 */  0xA2, 0xF3, 0x08, 0xF8, 0x74, 0x56, 0xF8, 0x40,  // ....tV.@
                                /* 0078 */  0x43, 0x13, 0x57, 0xB1, 0xCC, 0x5F, 0xEB, 0xEF,  // C.W.._..
                                /* 0080 */  0xFA, 0x18, 0x64, 0x86, 0x84, 0xA8, 0x6D, 0x41,  // ..d...mA
                                /* 0088 */  0xDC, 0xB7, 0xDE, 0xDC, 0xEB, 0x06, 0x00, 0x00,  // ........
                                /* 0090 */  0x52, 0x45, 0x50, 0x4F, 0x5D, 0x00, 0x00, 0x00,  // REPO]...
                                /* 0098 */  0x01, 0x2C, 0xAA, 0x00, 0x00, 0x00, 0x00, 0x00,  // .,......
                                /* 00A0 */  0x00, 0x00, 0x72, 0x87, 0xCD, 0xFF, 0x6D, 0x24,  // ..r...m$
                                /* 00A8 */  0x47, 0xDB, 0x3D, 0x24, 0x92, 0xB4, 0x16, 0x6F,  // G.=$...o
                                /* 00B0 */  0x45, 0xD8, 0xC3, 0xF5, 0x66, 0x14, 0x9F, 0x22,  // E...f.."
                                /* 00B8 */  0xD7, 0xF7, 0xDE, 0x67, 0x90, 0x9A, 0xA2, 0x0D,  // ...g....
                                /* 00C0 */  0x39, 0x25, 0xAD, 0xC3, 0x1A, 0xAD, 0x52, 0x0B,  // 9%....R.
                                /* 00C8 */  0x75, 0x38, 0xE1, 0xA4, 0x14, 0x41, 0x45, 0x89,  // u8...AE.
                                /* 00D0 */  0xF6, 0x09, 0xD6, 0x16, 0x22, 0xB6, 0xFB, 0xCF,  // ...."...
                                /* 00D8 */  0x35, 0x33, 0xC8, 0x5C, 0xE5, 0x84, 0x07, 0xAB,  // 53.\....
                                /* 00E0 */  0x3A, 0x0A, 0xB7, 0xF5, 0xDE, 0x78, 0xF8, 0xC5,  // :....x..
                                /* 00E8 */  0xC6, 0xF5, 0x06, 0xDC, 0x8B, 0x10, 0xD4, 0x0C,  // ........
                                /* 00F0 */  0xC3, 0xE9, 0x7D, 0xFD, 0x4F, 0x96, 0xAF, 0x3B,  // ..}.O..;
                                /* 00F8 */  0x9E, 0x49, 0xA4, 0xD1, 0xA4, 0xBE, 0x86, 0x73,  // .I.....s
                                /* 0100 */  0xB2, 0x12, 0xB1, 0x84, 0xAA, 0xB1, 0x3D, 0x3E,  // ......=>
                                /* 0108 */  0x99, 0x40, 0x95, 0x3B, 0x76, 0xCD, 0xA9, 0x59,  // .@.;v..Y
                                /* 0110 */  0xA3, 0x4F, 0x0F, 0x63, 0x5B, 0x8C, 0xD5, 0x9B,  // .O.c[...
                                /* 0118 */  0x44, 0x2D, 0x50, 0x6D, 0x88, 0xEE, 0x7B, 0x93,  // D-Pm..{.
                                /* 0120 */  0x2A, 0xC2, 0x64, 0x36, 0x6E, 0x00, 0x24, 0x91,  // *.d6n.$.
                                /* 0128 */  0xB9, 0xBF, 0xCB, 0x67, 0x33, 0xB8, 0xB1, 0x4F,  // ...g3..O
                                /* 0130 */  0x16, 0xC5, 0x29, 0xDD, 0xA4, 0xBB, 0xAB, 0x76,  // ..)....v
                                /* 0138 */  0x42, 0xF2, 0xB1, 0xB9, 0x5A, 0xCC, 0x20, 0x19,  // B...Z. .
                                /* 0140 */  0x4F, 0x5F, 0x26, 0x30, 0xE6, 0x05, 0xB6, 0x69,  // O_&0...i
                                /* 0148 */  0xEF, 0x57, 0x0D, 0x2A, 0xBA, 0x92, 0x01, 0xF3,  // .W.*....
                                /* 0150 */  0x15, 0xBF, 0x41, 0x26, 0x5D, 0x23, 0xA8, 0x07,  // ..A&]#..
                                /* 0158 */  0xD4, 0xA8, 0x6A, 0x5D, 0x74, 0xC3, 0x0C, 0x11,  // ..j]t...
                                /* 0160 */  0x0A, 0x2B, 0xFB, 0x10, 0xA7, 0x7F, 0x2F, 0x05,  // .+..../.
                                /* 0168 */  0x25, 0x77, 0xB5, 0x9B, 0x19, 0x4F, 0xB4, 0xA3,  // %w...O..
                                /* 0170 */  0x3A, 0xDD, 0xEA, 0x8A, 0xC9, 0xB8, 0x11, 0x16,  // :.......
                                /* 0178 */  0x03, 0xD6, 0x38, 0x0B, 0xE9, 0x38, 0x0E, 0x32,  // ..8..8.2
                                /* 0180 */  0x7C, 0xE9, 0x45, 0x6F, 0x97, 0x67, 0xA3, 0xC6,  // |.Eo.g..
                                /* 0188 */  0x2F, 0xB0, 0xB6, 0xC3, 0x0A, 0x18, 0xA8, 0x00,  // /.......
                                /* 0190 */  0x7E, 0x30, 0x2B, 0x32, 0xD4, 0x5F, 0x00, 0x3D,  // ~0+2._.=
                                /* 0198 */  0x96, 0x27, 0x7E, 0x72, 0x39, 0x3F, 0x9D, 0xCC,  // .'~r9?..
                                /* 01A0 */  0xF3, 0x6C, 0x93, 0xB9, 0x41, 0xDD, 0x58, 0xE7,  // .l..A.X.
                                /* 01A8 */  0xEE, 0x96, 0xC0, 0x63, 0xD1, 0xD3, 0x22, 0x39,  // ...c.."9
                                /* 01B0 */  0x52, 0x01, 0xB3, 0x05, 0xAE, 0x34, 0x1F, 0xCF,  // R....4..
                                /* 01B8 */  0x70, 0x94, 0xD1, 0x04, 0xB3, 0x60, 0x36, 0xF4,  // p....`6.
                                /* 01C0 */  0xC4, 0x6F, 0x36, 0xE7, 0x44, 0xE8, 0x99, 0xE1,  // .o6.D...
                                /* 01C8 */  0x75, 0x84, 0xA4, 0xDE, 0xB2, 0xF9, 0xAC, 0x34,  // u......4
                                /* 01D0 */  0x41, 0xD3, 0x0B, 0xB4, 0x1A, 0xCC, 0x87, 0x54,  // A......T
                                /* 01D8 */  0xDE, 0x65, 0xC4, 0x34, 0xCB, 0x29, 0x7C, 0xF4,  // .e.4.)|.
                                /* 01E0 */  0x8E, 0x48, 0x09, 0xD8, 0xA5, 0xEF, 0x0A, 0x64,  // .H.....d
                                /* 01E8 */  0xE0, 0x52, 0x2A, 0xE9, 0xB3, 0x5E, 0x26, 0x7C,  // .R*..^&|
                                /* 01F0 */  0xC2, 0xE9, 0xA6, 0x69, 0xFE, 0x15, 0x4C, 0xA1,  // ...i..L.
                                /* 01F8 */  0xDF, 0x9E, 0xBE, 0x9D, 0xFE, 0x7E, 0x4D, 0xF7,  // .....~M.
                                /* 0200 */  0x31, 0x25, 0x3B, 0x98, 0x8F, 0xCA, 0xA0, 0x71,  // 1%;....q
                                /* 0208 */  0x19, 0x08, 0xC4, 0x3C, 0x8E, 0x56, 0x6F, 0xB7,  // ...<.Vo.
                                /* 0210 */  0x94, 0x29, 0x44, 0x52, 0xEC, 0x00, 0xD0, 0xB0,  // .)DR....
                                /* 0218 */  0x25, 0x8B, 0x4B, 0xE7, 0x74, 0xC4, 0xC7, 0x0C,  // %.K.t...
                                /* 0220 */  0x4D, 0xD1, 0xEB, 0xD4, 0xDC, 0xED, 0x6F, 0x91,  // M.....o.
                                /* 0228 */  0x83, 0xBE, 0x9A, 0xA1, 0xDB, 0xBD, 0x0A, 0xD7,  // ........
                                /* 0230 */  0x6D, 0x28, 0xBB, 0xA6, 0x9B, 0x5A, 0xB5, 0x3F,  // m(...Z.?
                                /* 0238 */  0xFD, 0xF5, 0x9B, 0x47, 0x83, 0xCA, 0xFD, 0xAB,  // ...G....
                                /* 0240 */  0x3E, 0xCA, 0x69, 0xDA, 0xEE, 0x26, 0x1C, 0x81,  // >.i..&..
                                /* 0248 */  0xEC, 0xBB, 0x69, 0xDC, 0x05, 0xD7, 0x09, 0x9D,  // ..i.....
                                /* 0250 */  0x28, 0x53, 0x0E, 0x81, 0x32, 0xF4, 0x72, 0xB5,  // (S..2.r.
                                /* 0258 */  0x77, 0xCD, 0x39, 0xEF, 0x1E, 0x47, 0x69, 0x49,  // w.9..GiI
                                /* 0260 */  0x2A, 0xCA, 0xC7, 0x10, 0x4A, 0xE4, 0x30, 0x9C,  // *...J.0.
                                /* 0268 */  0xB8, 0xB0, 0xCA, 0xD2, 0x5F, 0xB7, 0xAC, 0x0C,  // ...._...
                                /* 0270 */  0xA1, 0xC9, 0x1E, 0x94, 0x63, 0xE5, 0xA7, 0xC0,  // ....c...
                                /* 0278 */  0x12, 0x4B, 0xA4, 0xA7, 0xF7, 0xF2, 0x86, 0xC6,  // .K......
                                /* 0280 */  0x36, 0x87, 0xED, 0x2B, 0x55, 0x52, 0xE0, 0x63,  // 6..+UR.c
                                /* 0288 */  0x54, 0x11, 0x68, 0xB0, 0x54, 0xBE, 0x01, 0xED,  // T.h.T...
                                /* 0290 */  0x3B, 0xB7, 0xDF, 0x5D, 0x7D, 0xB0, 0x88, 0x34,  // ;..]}..4
                                /* 0298 */  0xA7, 0x2A, 0x28, 0x5B, 0xC1, 0xCB, 0x55, 0xA6,  // .*([..U.
                                /* 02A0 */  0x98, 0xCC, 0x70, 0x2A, 0x4D, 0x66, 0xD9, 0x13,  // ..p*Mf..
                                /* 02A8 */  0xE8, 0x5E, 0xDE, 0xF5, 0xA6, 0xE9, 0x7A, 0x87,  // .^....z.
                                /* 02B0 */  0x38, 0xF5, 0x47, 0xFC, 0xE0, 0xF0, 0x11, 0x28,  // 8.G....(
                                /* 02B8 */  0x02, 0x1E, 0x99, 0x0D, 0xE6, 0x1E, 0x21, 0xB5,  // ......!.
                                /* 02C0 */  0x64, 0x4B, 0xCC, 0x3E, 0xAD, 0x72, 0xBF, 0x9E,  // dK.>.r..
                                /* 02C8 */  0xE7, 0x4F, 0x14, 0xFE, 0x7B, 0xCF, 0x5B, 0x60,  // .O..{.[`
                                /* 02D0 */  0x76, 0x7B, 0x56, 0xE8, 0x61, 0x5E, 0xBA, 0xD1,  // v{V.a^..
                                /* 02D8 */  0xF3, 0x81, 0x2C, 0xCA, 0x2F, 0xBF, 0x39, 0x72,  // ..,./.9r
                                /* 02E0 */  0xBF, 0xA8, 0x09, 0xC6, 0x26, 0x2A, 0x9A, 0x86,  // ....&*..
                                /* 02E8 */  0xD9, 0x2B, 0x0D, 0x11, 0x14, 0x4A, 0x90, 0x98,  // .+...J..
                                /* 02F0 */  0xE4, 0xA5, 0x8A, 0xC8, 0x67, 0x72, 0x0B, 0xC4,  // ....gr..
                                /* 02F8 */  0x25, 0xCE, 0xA0, 0x68, 0x59, 0xDD, 0xFA, 0x5F,  // %..hY.._
                                /* 0300 */  0x92, 0x68, 0xD6, 0x31, 0x17, 0x21, 0x2F, 0x85,  // .h.1.!/.
                                /* 0308 */  0x56, 0xFD, 0x20, 0xA8, 0xBB, 0xD1, 0x38, 0xDC,  // V. ...8.
                                /* 0310 */  0x87, 0xB6, 0xB7, 0xFD, 0xCE, 0x6B, 0xDB, 0xE5,  // .....k..
                                /* 0318 */  0x44, 0x01, 0xFC, 0x92, 0xB7, 0x9E, 0x05, 0xDC,  // D.......
                                /* 0320 */  0x4E, 0xBA, 0xFC, 0xF7, 0x6D, 0x92, 0x36, 0x3A,  // N...m.6:
                                /* 0328 */  0x5B, 0x58, 0xCE, 0xAE, 0x56, 0x45, 0xA6, 0x7E,  // [X..VE.~
                                /* 0330 */  0x31, 0x09, 0xFC, 0x7B, 0x75, 0x72, 0xF8, 0x67,  // 1..{ur.g
                                /* 0338 */  0x3E, 0xE2, 0xC4, 0xCA, 0x64, 0x96, 0x90, 0xC1,  // >...d...
                                /* 0340 */  0x94, 0x50, 0x73, 0x71, 0xA3, 0xD3, 0x1A, 0x96,  // .Psq....
                                /* 0348 */  0xCC, 0x24, 0xC8, 0x91, 0x9A, 0x95, 0x0A, 0x95,  // .$......
                                /* 0350 */  0x1D, 0x7E, 0x8A, 0x3F, 0x36, 0xD4, 0xFD, 0xBD,  // .~.?6...
                                /* 0358 */  0x1F, 0xF0, 0x17, 0x46, 0xE3, 0x33, 0x5A, 0x7E,  // ...F.3Z~
                                /* 0360 */  0x77, 0xF2, 0x20, 0x79, 0x48, 0x0F, 0xBA, 0x5E,  // w. yH..^
                                /* 0368 */  0x56, 0x66, 0x17, 0xDD, 0x91, 0x0E, 0x61, 0x52,  // Vf....aR
                                /* 0370 */  0xBD, 0xC2, 0x8B, 0xB5, 0xF5, 0xDD, 0xAF, 0xE8,  // ........
                                /* 0378 */  0xA1, 0x98, 0x6F, 0x9D, 0xF4, 0x0F, 0x06, 0x5C,  // ..o....\
                                /* 0380 */  0x3F, 0xC6, 0x78, 0x21, 0xC4, 0x53, 0x0C, 0x2E,  // ?.x!.S..
                                /* 0388 */  0x8B, 0x27, 0x20, 0x23, 0x78, 0x2F, 0x51, 0xEB,  // .' #x/Q.
                                /* 0390 */  0x93, 0x98, 0x78, 0xBB, 0xF3, 0x90, 0x4D, 0xDE,  // ..x...M.
                                /* 0398 */  0xC4, 0xEB, 0x42, 0xB7, 0xA3, 0x6A, 0xF5, 0x66,  // ..B..j.f
                                /* 03A0 */  0x05, 0xF0, 0x90, 0x5F, 0xEC, 0x3F, 0xA4, 0xC8,  // ..._.?..
                                /* 03A8 */  0xB0, 0x02, 0x82, 0xE4, 0x11, 0x47, 0xBA, 0x16,  // .....G..
                                /* 03B0 */  0xEE, 0x37, 0xC3, 0x6E, 0xE9, 0x90, 0xEB, 0x72,  // .7.n...r
                                /* 03B8 */  0xCA, 0xB7, 0xC2, 0x9E, 0x00, 0x8C, 0xAA, 0x59,  // .......Y
                                /* 03C0 */  0x3E, 0x4C, 0xEF, 0x76, 0x71, 0x9A, 0x7E, 0x8F,  // >L.vq.~.
                                /* 03C8 */  0xBB, 0x0A, 0xC2, 0xBB, 0xEB, 0x9D, 0x10, 0x63,  // .......c
                                /* 03D0 */  0x78, 0x8E, 0xC8, 0xD7, 0xA8, 0x6C, 0xAF, 0xD6,  // x....l..
                                /* 03D8 */  0xCB, 0x6B, 0x4A, 0xD7, 0xEE, 0x7F, 0x8D, 0xF1,  // .kJ.....
                                /* 03E0 */  0x1C, 0x6A, 0xA6, 0x4E, 0x75, 0xE0, 0xD3, 0xD9,  // .j.Nu...
                                /* 03E8 */  0xF0, 0x07, 0xEC, 0x0C, 0x79, 0xFD, 0xAF, 0x8A,  // ....y...
                                /* 03F0 */  0xBA, 0x88, 0xFF, 0x2E, 0xC4, 0x13, 0xD4, 0xD0,  // ........
                                /* 03F8 */  0xCD, 0xCA, 0xBC, 0x0C, 0x1D, 0x10, 0x9D, 0xB3,  // ........
                                /* 0400 */  0xB7, 0x1A, 0x23, 0x3B, 0xCB, 0x79, 0xD9, 0x5E,  // ..#;.y.^
                                /* 0408 */  0x7F, 0x90, 0xD4, 0x11, 0x13, 0x49, 0x6A, 0xF5,  // .....Ij.
                                /* 0410 */  0xEB, 0xE0, 0xA5, 0xF7, 0xF9, 0x58, 0xD1, 0xA2,  // .....X..
                                /* 0418 */  0x97, 0xE6, 0xB0, 0x85, 0xC5, 0x8C, 0x93, 0xE1,  // ........
                                /* 0420 */  0xEE, 0xBA, 0xBA, 0x24, 0xBC, 0x4E, 0xF4, 0x38,  // ...$.N.8
                                /* 0428 */  0xC6, 0x49, 0x93, 0x28, 0x56, 0xD5, 0x3A, 0x8F,  // .I.(V.:.
                                /* 0430 */  0x8B, 0x07, 0x3E, 0x56, 0x98, 0x71, 0x0B, 0x9D,  // ..>V.q..
                                /* 0438 */  0x94, 0xD1, 0xEC, 0x63, 0x79, 0xE2, 0x4A, 0xE4,  // ...cy.J.
                                /* 0440 */  0x03, 0x1C, 0xA0, 0x48, 0x9A, 0xF3, 0xA9, 0x33,  // ...H...3
                                /* 0448 */  0xEE, 0xB5, 0xDB, 0x05, 0x8E, 0x6D, 0x45, 0x66,  // .....mEf
                                /* 0450 */  0x9E, 0xF5, 0x5B, 0x9B, 0x5D, 0xA1, 0x52, 0x59,  // ..[.].RY
                                /* 0458 */  0x20, 0xD6, 0x18, 0x3A, 0x54, 0x52, 0x33, 0x6E,  //  ..:TR3n
                                /* 0460 */  0xE0, 0x6D, 0xA4, 0x94, 0xF4, 0x16, 0x7C, 0x2E,  // .m....|.
                                /* 0468 */  0x0F, 0x71, 0x36, 0xB9, 0xA6, 0xC9, 0x0B, 0x8D,  // .q6.....
                                /* 0470 */  0xA7, 0x06, 0xF9, 0x2F, 0xF7, 0xA3, 0xCA, 0x97,  // .../....
                                /* 0478 */  0xE6, 0x4E, 0x59, 0x51, 0x2A, 0x01, 0xAA, 0xBF,  // .NYQ*...
                                /* 0480 */  0x66, 0xD1, 0x02, 0x3F, 0xC2, 0x47, 0xB1, 0xE8,  // f..?.G..
                                /* 0488 */  0xA6, 0x86, 0x27, 0xDD, 0x71, 0xF4, 0x7F, 0x86,  // ..'.q...
                                /* 0490 */  0xB8, 0x3E, 0xAD, 0x92, 0xF6, 0xFA, 0xB3, 0xC0,  // .>......
                                /* 0498 */  0x25, 0xC0, 0xE0, 0x34, 0x70, 0xEB, 0x41, 0x86,  // %..4p.A.
                                /* 04A0 */  0xCD, 0x79, 0x3F, 0xDD, 0xB0, 0xFE, 0x1F, 0x50,  // .y?....P
                                /* 04A8 */  0xE9, 0xEF, 0x75, 0x66, 0x67, 0x7B, 0xF2, 0x31,  // ..ufg{.1
                                /* 04B0 */  0xD2, 0x75, 0xF8, 0x73, 0x82, 0xEC, 0xCB, 0x70,  // .u.s...p
                                /* 04B8 */  0x4E, 0x2F, 0x69, 0x40, 0x90, 0xA3, 0x47, 0xA9,  // N/i@..G.
                                /* 04C0 */  0x17, 0x29, 0x65, 0x6E, 0xA4, 0x94, 0x8E, 0xA6,  // .)en....
                                /* 04C8 */  0xED, 0x91, 0xAE, 0x36, 0xCE, 0x48, 0xAC, 0x55,  // ...6.H.U
                                /* 04D0 */  0xC4, 0x96, 0x1F, 0x68, 0xDC, 0x84, 0x17, 0xC5,  // ...h....
                                /* 04D8 */  0x2D, 0x8A, 0x2B, 0x46, 0xD4, 0xF4, 0x72, 0x61,  // -.+F..ra
                                /* 04E0 */  0xB5, 0x50, 0xAC, 0xC9, 0xC5, 0xA0, 0xDE, 0x33,  // .P.....3
                                /* 04E8 */  0x94, 0xF5, 0xC0, 0x6E, 0xD1, 0x62, 0xBE, 0xA5,  // ...n.b..
                                /* 04F0 */  0xD1, 0x18, 0x9F, 0xDF, 0x9E, 0x16, 0x99, 0x80,  // ........
                                /* 04F8 */  0x07, 0x76, 0xEA, 0x6E, 0xCE, 0xBD, 0x89, 0xA1,  // .v.n....
                                /* 0500 */  0x77, 0x95, 0x62, 0xBB, 0x82, 0xB2, 0x3F, 0xE4,  // w.b...?.
                                /* 0508 */  0xED, 0xB6, 0x0A, 0x52, 0x18, 0xDA, 0x67, 0x47,  // ...R..gG
                                /* 0510 */  0x19, 0x9D, 0xA2, 0xCF, 0x8F, 0x79, 0xF1, 0x06,  // .....y..
                                /* 0518 */  0x5A, 0xDC, 0x0F, 0x82, 0xC8, 0x00, 0x38, 0x2A,  // Z.....8*
                                /* 0520 */  0xE3, 0xAB, 0x23, 0x22, 0xB2, 0xE4, 0xB2, 0x8C,  // ..#"....
                                /* 0528 */  0x1E, 0x85, 0x75, 0x46, 0x23, 0xC7, 0xA4, 0x67,  // ..uF#..g
                                /* 0530 */  0x7F, 0x63, 0x2D, 0xDF, 0xF9, 0xDA, 0x5A, 0x7B,  // .c-...Z{
                                /* 0538 */  0x75, 0x28, 0xC0, 0x4F, 0x8E, 0xD4, 0xBE, 0x2D,  // u(.O...-
                                /* 0540 */  0xDD, 0xF0, 0x65, 0xB6, 0x35, 0x75, 0x73, 0x2E,  // ..e.5us.
                                /* 0548 */  0x73, 0x42, 0x82, 0xC4, 0x50, 0x74, 0x21, 0x65,  // sB..Pt!e
                                /* 0550 */  0x06, 0x43, 0xC7, 0x5F, 0x5B, 0xCB, 0xE3, 0xEE,  // .C._[...
                                /* 0558 */  0xF6, 0xB5, 0xD8, 0xCC, 0x30, 0x6B, 0xA7, 0xA7,  // ....0k..
                                /* 0560 */  0xF8, 0x18, 0xFF, 0xBE, 0x64, 0xF2, 0x20, 0xE9,  // ....d. .
                                /* 0568 */  0xBD, 0x0C, 0x9A, 0x51, 0x74, 0x68, 0x83, 0xDB,  // ...Qth..
                                /* 0570 */  0x4A, 0xB8, 0xA0, 0xDD, 0x13, 0xFE, 0xDC, 0x30,  // J......0
                                /* 0578 */  0x25, 0x16, 0x4B, 0x0A, 0xAE, 0xE0, 0x23, 0x9B,  // %.K...#.
                                /* 0580 */  0x4A, 0x88, 0x8C, 0x82, 0xAF, 0xD5, 0x67, 0xDA,  // J.....g.
                                /* 0588 */  0xBD, 0x7F, 0x6E, 0x0C, 0x71, 0x78, 0x83, 0xE2,  // ..n.qx..
                                /* 0590 */  0x9B, 0x34, 0x73, 0x5D, 0xFA, 0x08, 0x47, 0x50,  // .4s]..GP
                                /* 0598 */  0xA9, 0x15, 0x66, 0x7E, 0x17, 0x02, 0xFD, 0xB7,  // ..f~....
                                /* 05A0 */  0xC3, 0x49, 0xAE, 0x62, 0x0E, 0xF1, 0xA1, 0xF7,  // .I.b....
                                /* 05A8 */  0xD5, 0x52, 0xF0, 0x8B, 0x7B, 0xD2, 0x7B, 0x87,  // .R..{.{.
                                /* 05B0 */  0x0A, 0x2E, 0x99, 0x43, 0x93, 0xD1, 0x58, 0x25,  // ...C..X%
                                /* 05B8 */  0xE4, 0x18, 0x58, 0x93, 0xFF, 0xF3, 0x19, 0x48,  // ..X....H
                                /* 05C0 */  0xB4, 0xC1, 0xB1, 0x2B, 0x66, 0x6F, 0x8B, 0x17,  // ...+fo..
                                /* 05C8 */  0x9D, 0xB8, 0xBE, 0xBE, 0x66, 0x07, 0xCC, 0x66,  // ....f..f
                                /* 05D0 */  0x7C, 0x83, 0xCB, 0x6F, 0x84, 0xB6, 0x44, 0x7B,  // |..o..D{
                                /* 05D8 */  0x79, 0xF3, 0xD4, 0x2F, 0x71, 0xF2, 0x28, 0x6D,  // y../q.(m
                                /* 05E0 */  0x6E, 0xEB, 0x4B, 0xF6, 0x92, 0xAE, 0x19, 0x82,  // n.K.....
                                /* 05E8 */  0x85, 0xF3, 0x5F, 0x5D, 0x8D, 0xD1, 0x71, 0x17,  // .._]..q.
                                /* 05F0 */  0x84, 0xDC, 0x89, 0x69, 0xAC, 0x29, 0x1E, 0xAB,  // ...i.)..
                                /* 05F8 */  0x6E, 0x0C, 0x80, 0xEA, 0xEE, 0x07, 0xA5, 0x45,  // n......E
                                /* 0600 */  0xEF, 0x0B, 0x32, 0x94, 0x93, 0x21, 0x02, 0x20,  // ..2..!. 
                                /* 0608 */  0x87, 0x44, 0x00, 0xDD, 0x26, 0x43, 0x1E, 0x0D,  // .D..&C..
                                /* 0610 */  0x11, 0xF2, 0xE4, 0xA5, 0x45, 0x0E, 0xDD, 0xE0,  // ....E...
                                /* 0618 */  0x6F, 0xED, 0x08, 0x84, 0x22, 0x69, 0x3E, 0x0E,  // o..."i>.
                                /* 0620 */  0x6A, 0x55, 0x97, 0xD4, 0x47, 0xF8, 0x0E, 0x29,  // jU..G..)
                                /* 0628 */  0x57, 0x54, 0xC8, 0x2E, 0x26, 0x70, 0x5B, 0x4D,  // WT..&p[M
                                /* 0630 */  0xC5, 0xB3, 0x68, 0x47, 0x5E, 0xFE, 0x55, 0x84,  // ..hG^.U.
                                /* 0638 */  0x32, 0x10, 0x64, 0x9B, 0x33, 0x70, 0x6F, 0xC6,  // 2.d.3po.
                                /* 0640 */  0x9A, 0x56, 0x02, 0x85, 0xDE, 0xD8, 0x31, 0x06,  // .V....1.
                                /* 0648 */  0x6C, 0x1D, 0x9B, 0x7C, 0xA7, 0x81, 0x32, 0x44,  // l..|..2D
                                /* 0650 */  0x85, 0xF1, 0x4B, 0x74, 0xB7, 0x74, 0x0B, 0x5E,  // ..Kt.t.^
                                /* 0658 */  0xA2, 0x6E, 0x0B, 0x85, 0x12, 0x81, 0x10, 0x94,  // .n......
                                /* 0660 */  0x01, 0x72, 0x1B, 0x53, 0xD8, 0xD6, 0xC0, 0x54,  // .r.S...T
                                /* 0668 */  0x88, 0x02, 0xAF, 0xD2, 0x45, 0x39, 0xC3, 0x58,  // ....E9.X
                                /* 0670 */  0xDD, 0x0B, 0xA3, 0x42, 0xB4, 0xF9, 0x49, 0x59,  // ...B..IY
                                /* 0678 */  0xD7, 0xEE, 0x88, 0x8B, 0x48, 0xE4, 0x0D, 0xFF,  // ....H...
                                /* 0680 */  0x41, 0x3A, 0xEC, 0xDB, 0xDC, 0x84, 0x70, 0x11,  // A:....p.
                                /* 0688 */  0xF2, 0xFB, 0x56, 0xA6, 0xD1, 0x24, 0x7B, 0x90,  // ..V..${.
                                /* 0690 */  0x90, 0x48, 0xB4, 0xFF, 0xC7, 0xF8, 0xA0, 0x48,  // .H.....H
                                /* 0698 */  0x7F, 0xCC, 0x8B, 0x2E, 0x0E, 0xB7, 0x80, 0x87,  // ........
                                /* 06A0 */  0x54, 0x5B, 0xAA, 0x0C, 0x4B, 0xF2, 0x9A, 0x4B,  // T[..K..K
                                /* 06A8 */  0x91, 0xC4, 0x62, 0x90, 0xE3, 0x75, 0xE2, 0xDE,  // ..b..u..
                                /* 06B0 */  0x6E, 0x6A, 0x91, 0x6C, 0xA3, 0xB9, 0xCF, 0x5F,  // nj.l..._
                                /* 06B8 */  0xB7, 0x3E, 0x09, 0x8C, 0xA0, 0x20, 0xEC, 0x7F,  // .>... ..
                                /* 06C0 */  0x2F, 0xD2, 0xD7, 0xB3, 0xA8, 0x88, 0x27, 0x29,  // /.....')
                                /* 06C8 */  0x65, 0xBB, 0x7A, 0x46, 0xD6, 0x7B, 0xE4, 0x00,  // e.zF.{..
                                /* 06D0 */  0x44, 0x89, 0xA1, 0xE1, 0xA5, 0xEF, 0xC9, 0x8D,  // D.......
                                /* 06D8 */  0x24, 0x6B, 0xF3, 0xAD, 0x97, 0x61, 0xDF, 0x3B,  // $k...a.;
                                /* 06E0 */  0x77, 0xF5, 0x89, 0x51, 0x20, 0x0A, 0x81, 0x68,  // w..Q ..h
                                /* 06E8 */  0x19, 0x5E, 0x53, 0x5D, 0xDA, 0xF1, 0x6D, 0xF5,  // .^S]..m.
                                /* 06F0 */  0x80, 0x25, 0x6E, 0x92, 0x8F, 0xF7, 0x08, 0xA7,  // .%n.....
                                /* 06F8 */  0x28, 0xA5, 0x47, 0xE4, 0x04, 0xF8, 0x0B, 0xA6,  // (.G.....
                                /* 0700 */  0x37, 0xFE, 0x96, 0x1D, 0x0A, 0xDA, 0xFC, 0x7E,  // 7......~
                                /* 0708 */  0xD5, 0x9D, 0x81, 0xF1, 0xA2, 0xB6, 0x09, 0x86,  // ........
                                /* 0710 */  0xD2, 0x8C, 0xAA, 0x14, 0x02, 0xB6, 0x69, 0x28,  // ......i(
                                /* 0718 */  0x8C, 0xE9, 0x60, 0xD8, 0xEC, 0x0C, 0x37, 0xD3,  // ..`...7.
                                /* 0720 */  0xAA, 0x15, 0xAC, 0xE1, 0x53, 0x23, 0xB9, 0x9F,  // ....S#..
                                /* 0728 */  0xF3, 0x17, 0xCA, 0x5F, 0xE9, 0xF7, 0x7B, 0xC3,  // ..._..{.
                                /* 0730 */  0x63, 0x1E, 0x54, 0xC2, 0x3E, 0x98, 0xFD, 0x46,  // c.T.>..F
                                /* 0738 */  0xFC, 0x53, 0xA0, 0xDE, 0xD7, 0xCF, 0xF5, 0x2A,  // .S.....*
                                /* 0740 */  0xB7, 0x04, 0x5B, 0xE7, 0x14, 0xAD, 0x05, 0x99,  // ..[.....
                                /* 0748 */  0x56, 0x61, 0xC5, 0xBE, 0xF7, 0x22, 0x81, 0x52,  // Va...".R
                                /* 0750 */  0x52, 0xE9, 0x47, 0xD8, 0x15, 0xAE, 0x0D, 0x0E,  // R.G.....
                                /* 0758 */  0x0B, 0x5E, 0x76, 0xC3, 0xD0, 0xBB, 0xFD, 0x5F,  // .^v...._
                                /* 0760 */  0xF2, 0xF3, 0x5C, 0x81, 0x4A, 0xC1, 0x60, 0x31,  // ..\.J.`1
                                /* 0768 */  0xA2, 0xCB, 0xB1, 0xAA, 0xA1, 0xC8, 0x9F, 0xEC,  // ........
                                /* 0770 */  0x90, 0x35, 0x40, 0x93, 0xFB, 0x13, 0xC5, 0x9C,  // .5@.....
                                /* 0778 */  0x1D, 0x56, 0x15, 0x5C, 0x8F, 0x07, 0xDD         // .V.\...
                            }
                        })
                    }
                    ElseIf ((GTYP == 0x03))
                    {
                        Return (Package (0x01)
                        {
                            Buffer (0x077A)
                            {
                                /* 0000 */  0xE5, 0x1F, 0x94, 0x00, 0x00, 0x00, 0x00, 0x02,  // ........
                                /* 0008 */  0x00, 0x00, 0x00, 0x40, 0x67, 0x64, 0x64, 0x76,  // ...@gddv
                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x4F, 0x45, 0x4D, 0x20,  // ....OEM 
                                /* 0030 */  0x45, 0x78, 0x70, 0x6F, 0x72, 0x74, 0x65, 0x64,  // Exported
                                /* 0038 */  0x20, 0x44, 0x61, 0x74, 0x61, 0x56, 0x61, 0x75,  //  DataVau
                                /* 0040 */  0x6C, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // lt......
                                /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0068 */  0x00, 0x00, 0x00, 0x00, 0x04, 0xD4, 0x4F, 0x88,  // ......O.
                                /* 0070 */  0xF9, 0xA0, 0x7A, 0x9D, 0xD2, 0x58, 0x82, 0xCD,  // ..z..X..
                                /* 0078 */  0x6E, 0x5F, 0x33, 0x11, 0x77, 0x50, 0xAC, 0x7B,  // n_3.wP.{
                                /* 0080 */  0xAA, 0xCF, 0x41, 0xC2, 0x2D, 0x02, 0x0B, 0xB6,  // ..A.-...
                                /* 0088 */  0x6D, 0x0B, 0xF9, 0xE9, 0xE6, 0x06, 0x00, 0x00,  // m.......
                                /* 0090 */  0x52, 0x45, 0x50, 0x4F, 0x5D, 0x00, 0x00, 0x00,  // REPO]...
                                /* 0098 */  0x01, 0x2C, 0xAA, 0x00, 0x00, 0x00, 0x00, 0x00,  // .,......
                                /* 00A0 */  0x00, 0x00, 0x72, 0x87, 0xCD, 0xFF, 0x6D, 0x24,  // ..r...m$
                                /* 00A8 */  0x47, 0xDB, 0x3D, 0x24, 0x92, 0xB4, 0x16, 0x6F,  // G.=$...o
                                /* 00B0 */  0x45, 0xD8, 0xC3, 0xF5, 0x66, 0x14, 0x9F, 0x22,  // E...f.."
                                /* 00B8 */  0xD7, 0xF7, 0xDE, 0x67, 0x90, 0x9A, 0xA2, 0x0D,  // ...g....
                                /* 00C0 */  0x39, 0x25, 0xAD, 0xC3, 0x1A, 0xAD, 0x52, 0x0B,  // 9%....R.
                                /* 00C8 */  0x75, 0x38, 0xE1, 0xA4, 0x14, 0x44, 0xEA, 0xAD,  // u8...D..
                                /* 00D0 */  0xCB, 0xEC, 0x51, 0xF0, 0xFD, 0xEB, 0x4D, 0x14,  // ..Q...M.
                                /* 00D8 */  0xC1, 0x30, 0xA0, 0x6C, 0x4F, 0x30, 0xB3, 0xE1,  // .0.lO0..
                                /* 00E0 */  0xEB, 0x6F, 0x0E, 0x20, 0xBF, 0x49, 0xAB, 0x89,  // .o. .I..
                                /* 00E8 */  0x18, 0xAE, 0xF0, 0x7F, 0xB6, 0xAB, 0xB7, 0xBE,  // ........
                                /* 00F0 */  0xDD, 0xD3, 0xAA, 0xD1, 0x43, 0x75, 0x06, 0x0A,  // ....Cu..
                                /* 00F8 */  0x7C, 0xB8, 0xCF, 0x9E, 0xB4, 0xE0, 0x4D, 0x15,  // |.....M.
                                /* 0100 */  0x96, 0x74, 0x88, 0x7F, 0xA0, 0xFA, 0x14, 0x66,  // .t.....f
                                /* 0108 */  0xF9, 0x20, 0xAA, 0x24, 0x7F, 0x89, 0xD1, 0x16,  // . .$....
                                /* 0110 */  0x4A, 0x49, 0x52, 0xBB, 0x06, 0x4C, 0x97, 0x6E,  // JIR..L.n
                                /* 0118 */  0x66, 0x6A, 0xF7, 0x95, 0x6D, 0x82, 0xA3, 0xE4,  // fj..m...
                                /* 0120 */  0x1B, 0x4B, 0xF2, 0x4C, 0x1D, 0x6B, 0x54, 0xE3,  // .K.L.kT.
                                /* 0128 */  0x0C, 0x14, 0xC5, 0x6F, 0x84, 0x71, 0x1B, 0xE2,  // ...o.q..
                                /* 0130 */  0xCB, 0x4F, 0xEA, 0x4E, 0x10, 0x99, 0xBF, 0xA7,  // .O.N....
                                /* 0138 */  0x42, 0x71, 0x02, 0x05, 0x51, 0x66, 0xA6, 0xDF,  // Bq..Qf..
                                /* 0140 */  0xF5, 0x78, 0x08, 0x1E, 0x1F, 0xFB, 0xEB, 0x13,  // .x......
                                /* 0148 */  0x63, 0x80, 0xE3, 0x66, 0x4C, 0x46, 0x72, 0xC0,  // c..fLFr.
                                /* 0150 */  0x5F, 0x1B, 0xA1, 0x05, 0x48, 0x66, 0x6A, 0x5B,  // _...Hfj[
                                /* 0158 */  0x3C, 0xF5, 0x4C, 0x72, 0x15, 0xBF, 0xF7, 0xD5,  // <.Lr....
                                /* 0160 */  0x76, 0x83, 0xCB, 0xD1, 0x85, 0x14, 0x94, 0xDC,  // v.......
                                /* 0168 */  0xA6, 0x50, 0x29, 0x1E, 0x7C, 0x16, 0x6C, 0x5C,  // .P).|.l\
                                /* 0170 */  0xA3, 0xB6, 0x56, 0x3A, 0x59, 0x40, 0x5E, 0x07,  // ..V:Y@^.
                                /* 0178 */  0xC8, 0x08, 0x5D, 0x4A, 0xF4, 0x9A, 0xD1, 0x8C,  // ..]J....
                                /* 0180 */  0xFD, 0x2A, 0xE9, 0xF4, 0xCD, 0x2E, 0xC5, 0x9B,  // .*......
                                /* 0188 */  0xFE, 0x54, 0xF4, 0x9F, 0x71, 0x6F, 0x23, 0x7B,  // .T..qo#{
                                /* 0190 */  0x71, 0x0B, 0x83, 0xDE, 0x51, 0xCF, 0x10, 0x37,  // q...Q..7
                                /* 0198 */  0x15, 0x38, 0x9F, 0xA5, 0x7A, 0xB8, 0x12, 0x75,  // .8..z..u
                                /* 01A0 */  0xF2, 0x40, 0x60, 0x9F, 0x77, 0xF7, 0xF3, 0x07,  // .@`.w...
                                /* 01A8 */  0xBA, 0xC9, 0x2E, 0xC0, 0xEC, 0xC8, 0x30, 0xC4,  // ......0.
                                /* 01B0 */  0xE0, 0x71, 0x5F, 0xD5, 0x36, 0x4A, 0x04, 0x01,  // .q_.6J..
                                /* 01B8 */  0x47, 0xCB, 0x45, 0xCF, 0xC8, 0xA8, 0x7B, 0xBC,  // G.E...{.
                                /* 01C0 */  0xEE, 0x2F, 0x59, 0x11, 0x92, 0x15, 0x04, 0x63,  // ./Y....c
                                /* 01C8 */  0x5D, 0xC2, 0x03, 0x72, 0x0C, 0x71, 0x95, 0x7F,  // ]..r.q..
                                /* 01D0 */  0xF6, 0x61, 0xFB, 0xC9, 0xAD, 0x41, 0x4E, 0x81,  // .a...AN.
                                /* 01D8 */  0xDD, 0xAB, 0xD1, 0xA1, 0xF8, 0x66, 0x22, 0x06,  // .....f".
                                /* 01E0 */  0x86, 0xFE, 0xD8, 0x90, 0xF2, 0x8D, 0x45, 0x91,  // ......E.
                                /* 01E8 */  0x37, 0xEC, 0x67, 0x89, 0x4D, 0x4A, 0x58, 0xC0,  // 7.g.MJX.
                                /* 01F0 */  0x50, 0x0D, 0x89, 0xC3, 0xAE, 0x19, 0x49, 0xB7,  // P.....I.
                                /* 01F8 */  0xC7, 0xC5, 0xC1, 0xF0, 0x6B, 0x41, 0xC7, 0x2E,  // ....kA..
                                /* 0200 */  0xCF, 0x41, 0x14, 0xD9, 0x85, 0xC9, 0x78, 0x0E,  // .A....x.
                                /* 0208 */  0x87, 0xB5, 0xF2, 0xAA, 0x84, 0x47, 0x2C, 0x2B,  // .....G,+
                                /* 0210 */  0xF4, 0xAB, 0x0B, 0xFE, 0x5C, 0x8B, 0x15, 0xEC,  // ....\...
                                /* 0218 */  0x17, 0x9D, 0x8F, 0x2D, 0x86, 0x5F, 0x3A, 0x14,  // ...-._:.
                                /* 0220 */  0x23, 0x2A, 0x3A, 0x2E, 0x6E, 0xA6, 0xAA, 0xFC,  // #*:.n...
                                /* 0228 */  0xA3, 0x9F, 0x03, 0x31, 0x8D, 0x7E, 0x2A, 0x13,  // ...1.~*.
                                /* 0230 */  0xEB, 0xDF, 0x26, 0x21, 0x6D, 0x95, 0xB6, 0xC1,  // ..&!m...
                                /* 0238 */  0xC5, 0xF4, 0x6A, 0x69, 0x26, 0x5C, 0xF4, 0x25,  // ..ji&\.%
                                /* 0240 */  0x93, 0x2C, 0x62, 0xA2, 0x71, 0x51, 0x60, 0xD0,  // .,b.qQ`.
                                /* 0248 */  0x42, 0xED, 0x4F, 0xCF, 0xD0, 0x8F, 0xFC, 0x70,  // B.O....p
                                /* 0250 */  0x65, 0xA4, 0x04, 0x4C, 0xCE, 0xDC, 0x99, 0x37,  // e..L...7
                                /* 0258 */  0x59, 0xA2, 0x6E, 0x7D, 0x8D, 0x3E, 0x1E, 0x6F,  // Y.n}.>.o
                                /* 0260 */  0x38, 0xA7, 0x31, 0x95, 0x0B, 0x27, 0x5C, 0xD6,  // 8.1..'\.
                                /* 0268 */  0x64, 0x9B, 0x7E, 0x7A, 0x4F, 0x3C, 0x3D, 0x71,  // d.~zO<=q
                                /* 0270 */  0xE8, 0x39, 0x12, 0x84, 0xC1, 0x41, 0xD3, 0x88,  // .9...A..
                                /* 0278 */  0xF9, 0xF6, 0x5F, 0xD9, 0x1B, 0x7A, 0xA8, 0xCE,  // .._..z..
                                /* 0280 */  0xEC, 0x48, 0x39, 0xF3, 0x92, 0xF3, 0x06, 0x35,  // .H9....5
                                /* 0288 */  0xE5, 0xA8, 0x52, 0xF5, 0xD5, 0x81, 0xBB, 0x87,  // ..R.....
                                /* 0290 */  0x9D, 0x61, 0xD5, 0x91, 0x25, 0x06, 0x75, 0xF2,  // .a..%.u.
                                /* 0298 */  0x90, 0xBD, 0xB7, 0x5D, 0x26, 0x9A, 0x2E, 0x9A,  // ...]&...
                                /* 02A0 */  0x3C, 0xDC, 0xE8, 0x7C, 0x49, 0x52, 0x20, 0x5C,  // <..|IR \
                                /* 02A8 */  0x84, 0xC1, 0x2A, 0xD7, 0x75, 0xAF, 0xDA, 0x26,  // ..*.u..&
                                /* 02B0 */  0x35, 0xFF, 0xC2, 0x5B, 0xF7, 0xB7, 0x4A, 0x7E,  // 5..[..J~
                                /* 02B8 */  0x30, 0x12, 0x3F, 0x98, 0x97, 0x46, 0xA1, 0xD5,  // 0.?..F..
                                /* 02C0 */  0x76, 0x84, 0xE8, 0xD5, 0xC9, 0xD7, 0xC8, 0x80,  // v.......
                                /* 02C8 */  0x4E, 0x7C, 0x80, 0x4F, 0xD2, 0x38, 0xCE, 0x7C,  // N|.O.8.|
                                /* 02D0 */  0xA2, 0xD9, 0xFD, 0x0A, 0xAE, 0x24, 0x17, 0x20,  // .....$. 
                                /* 02D8 */  0x4D, 0xC0, 0xBE, 0x9F, 0x2C, 0x9C, 0x73, 0xFF,  // M...,.s.
                                /* 02E0 */  0xEA, 0x0A, 0xC4, 0xC2, 0xA9, 0x16, 0xE1, 0xC5,  // ........
                                /* 02E8 */  0x94, 0x5E, 0x17, 0xA7, 0xED, 0xD5, 0x07, 0x6B,  // .^.....k
                                /* 02F0 */  0x38, 0x53, 0x9E, 0x4B, 0x28, 0x4B, 0xD4, 0x6E,  // 8S.K(K.n
                                /* 02F8 */  0xF1, 0x68, 0x9E, 0xD7, 0x6A, 0xA5, 0x35, 0xAC,  // .h..j.5.
                                /* 0300 */  0x65, 0xCF, 0x9F, 0xE6, 0x9E, 0xEE, 0x7F, 0x33,  // e......3
                                /* 0308 */  0xBC, 0xBB, 0xE4, 0x3E, 0x15, 0x1E, 0x51, 0xE4,  // ...>..Q.
                                /* 0310 */  0xA1, 0xB2, 0xC4, 0x46, 0x3E, 0x2F, 0x46, 0x95,  // ...F>/F.
                                /* 0318 */  0x73, 0xC9, 0xFE, 0x54, 0x31, 0x49, 0xE0, 0x53,  // s..T1I.S
                                /* 0320 */  0x8A, 0xE7, 0xD4, 0x25, 0x00, 0xE1, 0xA2, 0x17,  // ...%....
                                /* 0328 */  0x8E, 0x6F, 0x11, 0x29, 0xBF, 0x6E, 0xAB, 0x1B,  // .o.).n..
                                /* 0330 */  0xB3, 0xB6, 0x43, 0x4C, 0x1F, 0x2E, 0xCD, 0x88,  // ..CL....
                                /* 0338 */  0x11, 0xE9, 0x12, 0x3E, 0x75, 0x45, 0x3E, 0x43,  // ...>uE>C
                                /* 0340 */  0x56, 0x9A, 0xE9, 0x0C, 0x7F, 0xF2, 0x45, 0x18,  // V.....E.
                                /* 0348 */  0x98, 0x39, 0xA0, 0xB3, 0xFF, 0xA7, 0xCD, 0x92,  // .9......
                                /* 0350 */  0xCF, 0xF1, 0xA8, 0x67, 0x31, 0x36, 0x61, 0x86,  // ...g16a.
                                /* 0358 */  0x59, 0xA4, 0xB2, 0x8D, 0x81, 0x98, 0xB3, 0x91,  // Y.......
                                /* 0360 */  0xC3, 0xD0, 0x10, 0x4B, 0x2F, 0xDC, 0x30, 0x53,  // ...K/.0S
                                /* 0368 */  0x4C, 0x2F, 0xD1, 0xF4, 0x5E, 0xEC, 0x67, 0x62,  // L/..^.gb
                                /* 0370 */  0x26, 0x02, 0x12, 0xF4, 0xCD, 0x15, 0xBF, 0x91,  // &.......
                                /* 0378 */  0x3D, 0x5D, 0x9F, 0xF2, 0x23, 0x83, 0xBC, 0x9C,  // =]..#...
                                /* 0380 */  0xE3, 0xEE, 0x16, 0x86, 0xD1, 0x37, 0xFB, 0xDD,  // .....7..
                                /* 0388 */  0xA6, 0xC8, 0x66, 0xCE, 0x6C, 0x6E, 0xB5, 0xBB,  // ..f.ln..
                                /* 0390 */  0x75, 0xE5, 0xDE, 0x19, 0x89, 0x0C, 0xF7, 0x0C,  // u.......
                                /* 0398 */  0x90, 0xD9, 0xB6, 0x12, 0x95, 0x92, 0x86, 0xD0,  // ........
                                /* 03A0 */  0x45, 0xBB, 0x79, 0x5F, 0x7E, 0xF6, 0x2E, 0xF9,  // E.y_~...
                                /* 03A8 */  0xA7, 0x3B, 0x97, 0xD1, 0xC0, 0x1E, 0x05, 0x92,  // .;......
                                /* 03B0 */  0x80, 0xC2, 0xB9, 0x0E, 0x75, 0x4B, 0x4A, 0x0A,  // ....uKJ.
                                /* 03B8 */  0x31, 0x54, 0x63, 0xA7, 0x32, 0x51, 0xBD, 0xC3,  // 1Tc.2Q..
                                /* 03C0 */  0x0E, 0x9E, 0x3C, 0x7A, 0xEF, 0x8D, 0xAB, 0x34,  // ..<z...4
                                /* 03C8 */  0xB4, 0x26, 0x6A, 0x67, 0xB4, 0xA6, 0x3A, 0x4A,  // .&jg..:J
                                /* 03D0 */  0xE9, 0xD1, 0x75, 0x92, 0x9F, 0x84, 0x34, 0x82,  // ..u...4.
                                /* 03D8 */  0x49, 0xBA, 0xB2, 0xE2, 0x87, 0xAE, 0x74, 0xCF,  // I.....t.
                                /* 03E0 */  0xAD, 0x67, 0x87, 0x67, 0x29, 0xE5, 0x89, 0xFA,  // .g.g)...
                                /* 03E8 */  0x46, 0xC1, 0x52, 0x2C, 0x46, 0xCA, 0x31, 0x79,  // F.R,F.1y
                                /* 03F0 */  0x48, 0xE6, 0xFE, 0xE1, 0x38, 0x37, 0x39, 0x61,  // H...879a
                                /* 03F8 */  0x59, 0x87, 0x5D, 0x9A, 0xD4, 0x25, 0xB0, 0xE3,  // Y.]..%..
                                /* 0400 */  0x09, 0xEF, 0x4B, 0x88, 0x4F, 0xBB, 0xFA, 0x72,  // ..K.O..r
                                /* 0408 */  0x74, 0x37, 0x1D, 0xD3, 0x06, 0x12, 0xE7, 0x36,  // t7.....6
                                /* 0410 */  0xCE, 0x15, 0xAB, 0xEF, 0xE8, 0x2B, 0x28, 0x5D,  // .....+(]
                                /* 0418 */  0xC7, 0x20, 0xA9, 0x53, 0x92, 0xA4, 0x10, 0xC6,  // . .S....
                                /* 0420 */  0x03, 0x99, 0x49, 0xFE, 0x8D, 0x71, 0x4E, 0x6C,  // ..I..qNl
                                /* 0428 */  0xE6, 0xA8, 0x85, 0xC5, 0xCC, 0x8F, 0xA2, 0x79,  // .......y
                                /* 0430 */  0xCA, 0xB9, 0x32, 0x5D, 0xB8, 0xC2, 0x7B, 0xAF,  // ..2]..{.
                                /* 0438 */  0x8A, 0x66, 0xE8, 0x51, 0x4C, 0x9E, 0xE8, 0x23,  // .f.QL..#
                                /* 0440 */  0x1F, 0x97, 0xE7, 0xB7, 0x7C, 0xFD, 0x8C, 0x3C,  // ....|..<
                                /* 0448 */  0xE3, 0x6D, 0x4F, 0x2F, 0x2B, 0xF3, 0x53, 0xB8,  // .mO/+.S.
                                /* 0450 */  0xE9, 0x9D, 0xF6, 0xC9, 0x86, 0x94, 0x65, 0x13,  // ......e.
                                /* 0458 */  0xFF, 0xC4, 0x80, 0xB1, 0xEC, 0xF6, 0x4A, 0xA8,  // ......J.
                                /* 0460 */  0x7E, 0x0A, 0xBA, 0x52, 0xA8, 0xA6, 0x62, 0x22,  // ~..R..b"
                                /* 0468 */  0x0F, 0x5D, 0x5B, 0x7B, 0xC2, 0xE7, 0x0D, 0xE6,  // .][{....
                                /* 0470 */  0x7C, 0x9C, 0xDB, 0x35, 0xEC, 0x19, 0x34, 0x99,  // |..5..4.
                                /* 0478 */  0xE1, 0x56, 0x16, 0x0A, 0xA0, 0x76, 0xED, 0xDD,  // .V...v..
                                /* 0480 */  0x0C, 0x07, 0xE3, 0x8F, 0x62, 0x65, 0xB3, 0x0E,  // ....be..
                                /* 0488 */  0xE0, 0x89, 0x1E, 0xED, 0x23, 0x0E, 0xCF, 0x2B,  // ....#..+
                                /* 0490 */  0xED, 0xF9, 0x94, 0x6D, 0x94, 0xFD, 0xDC, 0x83,  // ...m....
                                /* 0498 */  0x32, 0xF6, 0x66, 0xBA, 0xB9, 0xAF, 0x9F, 0x9E,  // 2.f.....
                                /* 04A0 */  0x3A, 0xC9, 0x41, 0x33, 0x3C, 0xAB, 0x2B, 0x2D,  // :.A3<.+-
                                /* 04A8 */  0xE7, 0x56, 0xEA, 0x82, 0xAF, 0x51, 0xA1, 0x45,  // .V...Q.E
                                /* 04B0 */  0x23, 0x51, 0xC6, 0x17, 0x09, 0x49, 0x6C, 0xBC,  // #Q...Il.
                                /* 04B8 */  0x93, 0x44, 0xAB, 0x0A, 0x56, 0x83, 0xF3, 0xF5,  // .D..V...
                                /* 04C0 */  0xDD, 0x07, 0x50, 0xFA, 0xCB, 0x7F, 0xEB, 0x2A,  // ..P....*
                                /* 04C8 */  0xE7, 0xF9, 0x81, 0x5A, 0xCC, 0x26, 0xED, 0x52,  // ...Z.&.R
                                /* 04D0 */  0xCD, 0x24, 0x8E, 0x42, 0x02, 0x3D, 0xD3, 0x54,  // .$.B.=.T
                                /* 04D8 */  0xC1, 0xFF, 0x10, 0x6E, 0x37, 0x98, 0xF3, 0x72,  // ...n7..r
                                /* 04E0 */  0x29, 0x3F, 0xC7, 0x54, 0x93, 0x72, 0x27, 0x22,  // )?.T.r'"
                                /* 04E8 */  0xED, 0xE6, 0x7A, 0x54, 0xE4, 0x18, 0x69, 0xC2,  // ..zT..i.
                                /* 04F0 */  0x3F, 0x60, 0x99, 0x46, 0xBA, 0x34, 0x34, 0xF5,  // ?`.F.44.
                                /* 04F8 */  0x3B, 0x61, 0x8D, 0xBE, 0x9B, 0x7D, 0xC9, 0x35,  // ;a...}.5
                                /* 0500 */  0x3C, 0xC1, 0x3C, 0x56, 0x40, 0x49, 0x35, 0x39,  // <.<V@I59
                                /* 0508 */  0x76, 0x45, 0x8D, 0xE9, 0x71, 0x28, 0x6E, 0xF5,  // vE..q(n.
                                /* 0510 */  0x50, 0x96, 0x77, 0xFB, 0xB0, 0x15, 0xDA, 0xFC,  // P.w.....
                                /* 0518 */  0x26, 0xCF, 0x86, 0xA7, 0x23, 0x7B, 0x8D, 0x49,  // &...#{.I
                                /* 0520 */  0xA1, 0x16, 0x8C, 0xBF, 0x69, 0x14, 0x81, 0xFC,  // ....i...
                                /* 0528 */  0xBF, 0xF5, 0x43, 0x16, 0xC1, 0xBB, 0xC6, 0x1C,  // ..C.....
                                /* 0530 */  0x60, 0xF3, 0xEA, 0xD6, 0x3F, 0x13, 0x33, 0x53,  // `...?.3S
                                /* 0538 */  0x7A, 0xB3, 0x0A, 0x9F, 0xCA, 0x40, 0x8B, 0xC1,  // z....@..
                                /* 0540 */  0x85, 0x50, 0x90, 0x38, 0x5B, 0x93, 0x58, 0x98,  // .P.8[.X.
                                /* 0548 */  0x3A, 0x13, 0xA8, 0xA9, 0x67, 0x74, 0x08, 0xA3,  // :...gt..
                                /* 0550 */  0xAB, 0x56, 0x62, 0xB5, 0x22, 0xC3, 0x3C, 0x14,  // .Vb.".<.
                                /* 0558 */  0xEA, 0xC4, 0x99, 0x8B, 0xE7, 0xE6, 0x5B, 0x42,  // ......[B
                                /* 0560 */  0xDC, 0x5E, 0x4F, 0x08, 0x62, 0x6E, 0x8F, 0xF5,  // .^O.bn..
                                /* 0568 */  0x4A, 0xF6, 0x54, 0xEA, 0x60, 0xFD, 0x55, 0x59,  // J.T.`.UY
                                /* 0570 */  0xFE, 0x20, 0x3A, 0xA4, 0x95, 0x48, 0x3A, 0x94,  // . :..H:.
                                /* 0578 */  0x67, 0xA8, 0xF3, 0x36, 0x4C, 0x7E, 0x00, 0xA8,  // g..6L~..
                                /* 0580 */  0x5A, 0x5B, 0xEE, 0x9B, 0x3D, 0x27, 0x4E, 0x73,  // Z[..='Ns
                                /* 0588 */  0x0D, 0xBC, 0xDF, 0x55, 0x65, 0x21, 0x17, 0x32,  // ...Ue!.2
                                /* 0590 */  0xAC, 0x5D, 0xF0, 0x8D, 0x91, 0x3B, 0x0B, 0x10,  // .]...;..
                                /* 0598 */  0xB9, 0x25, 0x9B, 0x9C, 0x4B, 0xED, 0xB0, 0x1C,  // .%..K...
                                /* 05A0 */  0x34, 0xA5, 0xFA, 0x64, 0x8F, 0xC2, 0x05, 0x1A,  // 4..d....
                                /* 05A8 */  0xB8, 0xD9, 0x10, 0x99, 0x6A, 0xD5, 0x4F, 0x65,  // ....j.Oe
                                /* 05B0 */  0x8F, 0xFC, 0x85, 0x86, 0x3B, 0x7F, 0x6C, 0x8C,  // ....;.l.
                                /* 05B8 */  0x5D, 0xAF, 0x95, 0x2E, 0x3F, 0x5C, 0xA1, 0x08,  // ]...?\..
                                /* 05C0 */  0x08, 0xDB, 0x9C, 0xE6, 0x80, 0x20, 0xF6, 0xF9,  // ..... ..
                                /* 05C8 */  0x80, 0xF4, 0xB3, 0xD5, 0xE4, 0x99, 0x97, 0xC5,  // ........
                                /* 05D0 */  0x4A, 0x54, 0x4C, 0x1C, 0xAE, 0x4D, 0xA3, 0xF2,  // JTL..M..
                                /* 05D8 */  0x2E, 0x3A, 0xF2, 0x77, 0xF1, 0x93, 0xE3, 0x8E,  // .:.w....
                                /* 05E0 */  0x7F, 0xA0, 0xED, 0x11, 0x1A, 0xE7, 0xA3, 0x05,  // ........
                                /* 05E8 */  0xAE, 0x14, 0xA3, 0x65, 0x99, 0xCA, 0x16, 0xC1,  // ...e....
                                /* 05F0 */  0x6D, 0x9B, 0x66, 0x44, 0x93, 0x0D, 0x3D, 0x78,  // m.fD..=x
                                /* 05F8 */  0xD1, 0xCF, 0xBD, 0x23, 0xF1, 0x43, 0xC8, 0x3D,  // ...#.C.=
                                /* 0600 */  0x4D, 0x84, 0x97, 0xAC, 0xBC, 0xE0, 0xA3, 0xDF,  // M.......
                                /* 0608 */  0xCE, 0xFE, 0xA0, 0x06, 0x10, 0xE7, 0x57, 0x09,  // ......W.
                                /* 0610 */  0x73, 0x86, 0xAE, 0x87, 0xF3, 0xE0, 0xE3, 0xA7,  // s.......
                                /* 0618 */  0xDF, 0x2B, 0xAB, 0x08, 0xEC, 0x41, 0xF7, 0xD7,  // .+...A..
                                /* 0620 */  0x31, 0xF7, 0x96, 0xF5, 0x95, 0xFF, 0x5B, 0x42,  // 1.....[B
                                /* 0628 */  0xF2, 0xA5, 0xF2, 0xEA, 0xDD, 0x19, 0xBF, 0x09,  // ........
                                /* 0630 */  0x73, 0xF7, 0x0A, 0x31, 0x61, 0xDF, 0x2E, 0xF4,  // s..1a...
                                /* 0638 */  0x99, 0xA8, 0xC3, 0x64, 0x67, 0xD2, 0xE7, 0x92,  // ...dg...
                                /* 0640 */  0x1C, 0x16, 0xDB, 0xD3, 0xBA, 0x46, 0xBB, 0x56,  // .....F.V
                                /* 0648 */  0x78, 0x67, 0xF4, 0x58, 0x8B, 0xD7, 0xEE, 0xB8,  // xg.X....
                                /* 0650 */  0x87, 0xB5, 0xC8, 0xC6, 0xC4, 0xD7, 0xDB, 0x63,  // .......c
                                /* 0658 */  0x8F, 0xB3, 0xE9, 0x82, 0x6E, 0x3F, 0xCE, 0x4F,  // ....n?.O
                                /* 0660 */  0xEA, 0xA4, 0x49, 0x56, 0xF3, 0xA2, 0x0B, 0xD3,  // ..IV....
                                /* 0668 */  0x93, 0x39, 0x76, 0xC3, 0xCF, 0x36, 0x5D, 0x00,  // .9v..6].
                                /* 0670 */  0x9E, 0x76, 0x77, 0x5A, 0x65, 0xB6, 0xE7, 0x39,  // .vwZe..9
                                /* 0678 */  0x41, 0x0B, 0x4E, 0xC9, 0x07, 0xBF, 0x4C, 0x26,  // A.N...L&
                                /* 0680 */  0xBE, 0x16, 0x11, 0xC4, 0x00, 0xA6, 0x65, 0xBC,  // ......e.
                                /* 0688 */  0x63, 0xA8, 0x20, 0x6B, 0x28, 0xEB, 0x50, 0x86,  // c. k(.P.
                                /* 0690 */  0x72, 0xFA, 0x1D, 0xEC, 0xBD, 0x84, 0x1B, 0xC4,  // r.......
                                /* 0698 */  0xE9, 0xC8, 0xD8, 0x9C, 0x86, 0xED, 0x56, 0xDA,  // ......V.
                                /* 06A0 */  0xE0, 0x23, 0xAA, 0x78, 0x75, 0xED, 0x6F, 0x0F,  // .#.xu.o.
                                /* 06A8 */  0xFF, 0xBD, 0x34, 0x8A, 0x46, 0xB3, 0xF9, 0x74,  // ..4.F..t
                                /* 06B0 */  0x36, 0x72, 0xF8, 0x1E, 0xCA, 0x29, 0x1C, 0xF7,  // 6r...)..
                                /* 06B8 */  0x4A, 0x45, 0xDF, 0xB3, 0x2D, 0x86, 0x6C, 0x64,  // JE..-.ld
                                /* 06C0 */  0x12, 0x19, 0xD4, 0xD7, 0x27, 0xA8, 0x22, 0x57,  // ....'."W
                                /* 06C8 */  0x86, 0xF5, 0xFE, 0x8F, 0xC1, 0xFE, 0x66, 0xEE,  // ......f.
                                /* 06D0 */  0xF7, 0xD1, 0x70, 0x3C, 0x3C, 0x62, 0x19, 0xDC,  // ..p<<b..
                                /* 06D8 */  0xE8, 0x16, 0xDB, 0x12, 0x34, 0xC1, 0xA0, 0x08,  // ....4...
                                /* 06E0 */  0xB7, 0xB7, 0xA8, 0xBF, 0xD3, 0x71, 0x71, 0x87,  // .....qq.
                                /* 06E8 */  0x53, 0xAA, 0xB3, 0x50, 0x7D, 0xE5, 0x93, 0x39,  // S..P}..9
                                /* 06F0 */  0xEE, 0x9D, 0xA7, 0x26, 0x08, 0x36, 0xAB, 0x6F,  // ...&.6.o
                                /* 06F8 */  0xC6, 0x0B, 0x86, 0xC2, 0x6E, 0xBB, 0x91, 0xAE,  // ....n...
                                /* 0700 */  0xD3, 0x73, 0xE7, 0x2C, 0x8C, 0x07, 0x86, 0x29,  // .s.,...)
                                /* 0708 */  0x70, 0x22, 0x24, 0x2C, 0x72, 0x8F, 0x4B, 0x62,  // p"$,r.Kb
                                /* 0710 */  0x30, 0xCB, 0xB6, 0x1C, 0x7B, 0xAD, 0xDC, 0x20,  // 0...{.. 
                                /* 0718 */  0x89, 0x23, 0x99, 0x71, 0xED, 0x70, 0x0F, 0x11,  // .#.q.p..
                                /* 0720 */  0x7E, 0x59, 0xAF, 0xB6, 0x60, 0x2F, 0xB7, 0x4A,  // ~Y..`/.J
                                /* 0728 */  0x91, 0x73, 0x54, 0x7A, 0x24, 0x90, 0xA4, 0x08,  // .sTz$...
                                /* 0730 */  0x98, 0xB6, 0x3A, 0xB8, 0x9A, 0x77, 0x40, 0xB5,  // ..:..w@.
                                /* 0738 */  0x78, 0x95, 0x4D, 0x22, 0xD4, 0x10, 0x6C, 0xAE,  // x.M"..l.
                                /* 0740 */  0xE4, 0xE2, 0x14, 0x2B, 0x7D, 0xEE, 0x23, 0xF3,  // ...+}.#.
                                /* 0748 */  0xB3, 0xEF, 0x8D, 0xE4, 0x83, 0x5D, 0x15, 0x62,  // .....].b
                                /* 0750 */  0x4C, 0xF7, 0x1E, 0x8A, 0x47, 0x61, 0xCE, 0xC3,  // L...Ga..
                                /* 0758 */  0x2B, 0x8A, 0x62, 0x34, 0x15, 0x14, 0x61, 0x94,  // +.b4..a.
                                /* 0760 */  0xC1, 0xAB, 0x27, 0x20, 0x5F, 0x5C, 0xF1, 0x4E,  // ..' _\.N
                                /* 0768 */  0x53, 0xA9, 0x72, 0xF1, 0x0A, 0x85, 0x9C, 0x79,  // S.r....y
                                /* 0770 */  0x24, 0x49, 0xA7, 0xE0, 0xF3, 0x3C, 0xD0, 0x7C,  // $I...<.|
                                /* 0778 */  0xEF, 0x31                                       // .1
                            }
                        })
                    }
                    ElseIf ((GTYP == One))
                    {
                        Return (Package (0x01)
                        {
                            Buffer (0x077F)
                            {
                                /* 0000 */  0xE5, 0x1F, 0x94, 0x00, 0x00, 0x00, 0x00, 0x02,  // ........
                                /* 0008 */  0x00, 0x00, 0x00, 0x40, 0x67, 0x64, 0x64, 0x76,  // ...@gddv
                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x4F, 0x45, 0x4D, 0x20,  // ....OEM 
                                /* 0030 */  0x45, 0x78, 0x70, 0x6F, 0x72, 0x74, 0x65, 0x64,  // Exported
                                /* 0038 */  0x20, 0x44, 0x61, 0x74, 0x61, 0x56, 0x61, 0x75,  //  DataVau
                                /* 0040 */  0x6C, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // lt......
                                /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0068 */  0x00, 0x00, 0x00, 0x00, 0x5C, 0x87, 0x29, 0x3E,  // ....\.)>
                                /* 0070 */  0xA2, 0xF3, 0x08, 0xF8, 0x74, 0x56, 0xF8, 0x40,  // ....tV.@
                                /* 0078 */  0x43, 0x13, 0x57, 0xB1, 0xCC, 0x5F, 0xEB, 0xEF,  // C.W.._..
                                /* 0080 */  0xFA, 0x18, 0x64, 0x86, 0x84, 0xA8, 0x6D, 0x41,  // ..d...mA
                                /* 0088 */  0xDC, 0xB7, 0xDE, 0xDC, 0xEB, 0x06, 0x00, 0x00,  // ........
                                /* 0090 */  0x52, 0x45, 0x50, 0x4F, 0x5D, 0x00, 0x00, 0x00,  // REPO]...
                                /* 0098 */  0x01, 0x2C, 0xAA, 0x00, 0x00, 0x00, 0x00, 0x00,  // .,......
                                /* 00A0 */  0x00, 0x00, 0x72, 0x87, 0xCD, 0xFF, 0x6D, 0x24,  // ..r...m$
                                /* 00A8 */  0x47, 0xDB, 0x3D, 0x24, 0x92, 0xB4, 0x16, 0x6F,  // G.=$...o
                                /* 00B0 */  0x45, 0xD8, 0xC3, 0xF5, 0x66, 0x14, 0x9F, 0x22,  // E...f.."
                                /* 00B8 */  0xD7, 0xF7, 0xDE, 0x67, 0x90, 0x9A, 0xA2, 0x0D,  // ...g....
                                /* 00C0 */  0x39, 0x25, 0xAD, 0xC3, 0x1A, 0xAD, 0x52, 0x0B,  // 9%....R.
                                /* 00C8 */  0x75, 0x38, 0xE1, 0xA4, 0x14, 0x41, 0x45, 0x89,  // u8...AE.
                                /* 00D0 */  0xF6, 0x09, 0xD6, 0x16, 0x22, 0xB6, 0xFB, 0xCF,  // ...."...
                                /* 00D8 */  0x35, 0x33, 0xC8, 0x5C, 0xE5, 0x84, 0x07, 0xAB,  // 53.\....
                                /* 00E0 */  0x3A, 0x0A, 0xB7, 0xF5, 0xDE, 0x78, 0xF8, 0xC5,  // :....x..
                                /* 00E8 */  0xC6, 0xF5, 0x06, 0xDC, 0x8B, 0x10, 0xD4, 0x0C,  // ........
                                /* 00F0 */  0xC3, 0xE9, 0x7D, 0xFD, 0x4F, 0x96, 0xAF, 0x3B,  // ..}.O..;
                                /* 00F8 */  0x9E, 0x49, 0xA4, 0xD1, 0xA4, 0xBE, 0x86, 0x73,  // .I.....s
                                /* 0100 */  0xB2, 0x12, 0xB1, 0x84, 0xAA, 0xB1, 0x3D, 0x3E,  // ......=>
                                /* 0108 */  0x99, 0x40, 0x95, 0x3B, 0x76, 0xCD, 0xA9, 0x59,  // .@.;v..Y
                                /* 0110 */  0xA3, 0x4F, 0x0F, 0x63, 0x5B, 0x8C, 0xD5, 0x9B,  // .O.c[...
                                /* 0118 */  0x44, 0x2D, 0x50, 0x6D, 0x88, 0xEE, 0x7B, 0x93,  // D-Pm..{.
                                /* 0120 */  0x2A, 0xC2, 0x64, 0x36, 0x6E, 0x00, 0x24, 0x91,  // *.d6n.$.
                                /* 0128 */  0xB9, 0xBF, 0xCB, 0x67, 0x33, 0xB8, 0xB1, 0x4F,  // ...g3..O
                                /* 0130 */  0x16, 0xC5, 0x29, 0xDD, 0xA4, 0xBB, 0xAB, 0x76,  // ..)....v
                                /* 0138 */  0x42, 0xF2, 0xB1, 0xB9, 0x5A, 0xCC, 0x20, 0x19,  // B...Z. .
                                /* 0140 */  0x4F, 0x5F, 0x26, 0x30, 0xE6, 0x05, 0xB6, 0x69,  // O_&0...i
                                /* 0148 */  0xEF, 0x57, 0x0D, 0x2A, 0xBA, 0x92, 0x01, 0xF3,  // .W.*....
                                /* 0150 */  0x15, 0xBF, 0x41, 0x26, 0x5D, 0x23, 0xA8, 0x07,  // ..A&]#..
                                /* 0158 */  0xD4, 0xA8, 0x6A, 0x5D, 0x74, 0xC3, 0x0C, 0x11,  // ..j]t...
                                /* 0160 */  0x0A, 0x2B, 0xFB, 0x10, 0xA7, 0x7F, 0x2F, 0x05,  // .+..../.
                                /* 0168 */  0x25, 0x77, 0xB5, 0x9B, 0x19, 0x4F, 0xB4, 0xA3,  // %w...O..
                                /* 0170 */  0x3A, 0xDD, 0xEA, 0x8A, 0xC9, 0xB8, 0x11, 0x16,  // :.......
                                /* 0178 */  0x03, 0xD6, 0x38, 0x0B, 0xE9, 0x38, 0x0E, 0x32,  // ..8..8.2
                                /* 0180 */  0x7C, 0xE9, 0x45, 0x6F, 0x97, 0x67, 0xA3, 0xC6,  // |.Eo.g..
                                /* 0188 */  0x2F, 0xB0, 0xB6, 0xC3, 0x0A, 0x18, 0xA8, 0x00,  // /.......
                                /* 0190 */  0x7E, 0x30, 0x2B, 0x32, 0xD4, 0x5F, 0x00, 0x3D,  // ~0+2._.=
                                /* 0198 */  0x96, 0x27, 0x7E, 0x72, 0x39, 0x3F, 0x9D, 0xCC,  // .'~r9?..
                                /* 01A0 */  0xF3, 0x6C, 0x93, 0xB9, 0x41, 0xDD, 0x58, 0xE7,  // .l..A.X.
                                /* 01A8 */  0xEE, 0x96, 0xC0, 0x63, 0xD1, 0xD3, 0x22, 0x39,  // ...c.."9
                                /* 01B0 */  0x52, 0x01, 0xB3, 0x05, 0xAE, 0x34, 0x1F, 0xCF,  // R....4..
                                /* 01B8 */  0x70, 0x94, 0xD1, 0x04, 0xB3, 0x60, 0x36, 0xF4,  // p....`6.
                                /* 01C0 */  0xC4, 0x6F, 0x36, 0xE7, 0x44, 0xE8, 0x99, 0xE1,  // .o6.D...
                                /* 01C8 */  0x75, 0x84, 0xA4, 0xDE, 0xB2, 0xF9, 0xAC, 0x34,  // u......4
                                /* 01D0 */  0x41, 0xD3, 0x0B, 0xB4, 0x1A, 0xCC, 0x87, 0x54,  // A......T
                                /* 01D8 */  0xDE, 0x65, 0xC4, 0x34, 0xCB, 0x29, 0x7C, 0xF4,  // .e.4.)|.
                                /* 01E0 */  0x8E, 0x48, 0x09, 0xD8, 0xA5, 0xEF, 0x0A, 0x64,  // .H.....d
                                /* 01E8 */  0xE0, 0x52, 0x2A, 0xE9, 0xB3, 0x5E, 0x26, 0x7C,  // .R*..^&|
                                /* 01F0 */  0xC2, 0xE9, 0xA6, 0x69, 0xFE, 0x15, 0x4C, 0xA1,  // ...i..L.
                                /* 01F8 */  0xDF, 0x9E, 0xBE, 0x9D, 0xFE, 0x7E, 0x4D, 0xF7,  // .....~M.
                                /* 0200 */  0x31, 0x25, 0x3B, 0x98, 0x8F, 0xCA, 0xA0, 0x71,  // 1%;....q
                                /* 0208 */  0x19, 0x08, 0xC4, 0x3C, 0x8E, 0x56, 0x6F, 0xB7,  // ...<.Vo.
                                /* 0210 */  0x94, 0x29, 0x44, 0x52, 0xEC, 0x00, 0xD0, 0xB0,  // .)DR....
                                /* 0218 */  0x25, 0x8B, 0x4B, 0xE7, 0x74, 0xC4, 0xC7, 0x0C,  // %.K.t...
                                /* 0220 */  0x4D, 0xD1, 0xEB, 0xD4, 0xDC, 0xED, 0x6F, 0x91,  // M.....o.
                                /* 0228 */  0x83, 0xBE, 0x9A, 0xA1, 0xDB, 0xBD, 0x0A, 0xD7,  // ........
                                /* 0230 */  0x6D, 0x28, 0xBB, 0xA6, 0x9B, 0x5A, 0xB5, 0x3F,  // m(...Z.?
                                /* 0238 */  0xFD, 0xF5, 0x9B, 0x47, 0x83, 0xCA, 0xFD, 0xAB,  // ...G....
                                /* 0240 */  0x3E, 0xCA, 0x69, 0xDA, 0xEE, 0x26, 0x1C, 0x81,  // >.i..&..
                                /* 0248 */  0xEC, 0xBB, 0x69, 0xDC, 0x05, 0xD7, 0x09, 0x9D,  // ..i.....
                                /* 0250 */  0x28, 0x53, 0x0E, 0x81, 0x32, 0xF4, 0x72, 0xB5,  // (S..2.r.
                                /* 0258 */  0x77, 0xCD, 0x39, 0xEF, 0x1E, 0x47, 0x69, 0x49,  // w.9..GiI
                                /* 0260 */  0x2A, 0xCA, 0xC7, 0x10, 0x4A, 0xE4, 0x30, 0x9C,  // *...J.0.
                                /* 0268 */  0xB8, 0xB0, 0xCA, 0xD2, 0x5F, 0xB7, 0xAC, 0x0C,  // ...._...
                                /* 0270 */  0xA1, 0xC9, 0x1E, 0x94, 0x63, 0xE5, 0xA7, 0xC0,  // ....c...
                                /* 0278 */  0x12, 0x4B, 0xA4, 0xA7, 0xF7, 0xF2, 0x86, 0xC6,  // .K......
                                /* 0280 */  0x36, 0x87, 0xED, 0x2B, 0x55, 0x52, 0xE0, 0x63,  // 6..+UR.c
                                /* 0288 */  0x54, 0x11, 0x68, 0xB0, 0x54, 0xBE, 0x01, 0xED,  // T.h.T...
                                /* 0290 */  0x3B, 0xB7, 0xDF, 0x5D, 0x7D, 0xB0, 0x88, 0x34,  // ;..]}..4
                                /* 0298 */  0xA7, 0x2A, 0x28, 0x5B, 0xC1, 0xCB, 0x55, 0xA6,  // .*([..U.
                                /* 02A0 */  0x98, 0xCC, 0x70, 0x2A, 0x4D, 0x66, 0xD9, 0x13,  // ..p*Mf..
                                /* 02A8 */  0xE8, 0x5E, 0xDE, 0xF5, 0xA6, 0xE9, 0x7A, 0x87,  // .^....z.
                                /* 02B0 */  0x38, 0xF5, 0x47, 0xFC, 0xE0, 0xF0, 0x11, 0x28,  // 8.G....(
                                /* 02B8 */  0x02, 0x1E, 0x99, 0x0D, 0xE6, 0x1E, 0x21, 0xB5,  // ......!.
                                /* 02C0 */  0x64, 0x4B, 0xCC, 0x3E, 0xAD, 0x72, 0xBF, 0x9E,  // dK.>.r..
                                /* 02C8 */  0xE7, 0x4F, 0x14, 0xFE, 0x7B, 0xCF, 0x5B, 0x60,  // .O..{.[`
                                /* 02D0 */  0x76, 0x7B, 0x56, 0xE8, 0x61, 0x5E, 0xBA, 0xD1,  // v{V.a^..
                                /* 02D8 */  0xF3, 0x81, 0x2C, 0xCA, 0x2F, 0xBF, 0x39, 0x72,  // ..,./.9r
                                /* 02E0 */  0xBF, 0xA8, 0x09, 0xC6, 0x26, 0x2A, 0x9A, 0x86,  // ....&*..
                                /* 02E8 */  0xD9, 0x2B, 0x0D, 0x11, 0x14, 0x4A, 0x90, 0x98,  // .+...J..
                                /* 02F0 */  0xE4, 0xA5, 0x8A, 0xC8, 0x67, 0x72, 0x0B, 0xC4,  // ....gr..
                                /* 02F8 */  0x25, 0xCE, 0xA0, 0x68, 0x59, 0xDD, 0xFA, 0x5F,  // %..hY.._
                                /* 0300 */  0x92, 0x68, 0xD6, 0x31, 0x17, 0x21, 0x2F, 0x85,  // .h.1.!/.
                                /* 0308 */  0x56, 0xFD, 0x20, 0xA8, 0xBB, 0xD1, 0x38, 0xDC,  // V. ...8.
                                /* 0310 */  0x87, 0xB6, 0xB7, 0xFD, 0xCE, 0x6B, 0xDB, 0xE5,  // .....k..
                                /* 0318 */  0x44, 0x01, 0xFC, 0x92, 0xB7, 0x9E, 0x05, 0xDC,  // D.......
                                /* 0320 */  0x4E, 0xBA, 0xFC, 0xF7, 0x6D, 0x92, 0x36, 0x3A,  // N...m.6:
                                /* 0328 */  0x5B, 0x58, 0xCE, 0xAE, 0x56, 0x45, 0xA6, 0x7E,  // [X..VE.~
                                /* 0330 */  0x31, 0x09, 0xFC, 0x7B, 0x75, 0x72, 0xF8, 0x67,  // 1..{ur.g
                                /* 0338 */  0x3E, 0xE2, 0xC4, 0xCA, 0x64, 0x96, 0x90, 0xC1,  // >...d...
                                /* 0340 */  0x94, 0x50, 0x73, 0x71, 0xA3, 0xD3, 0x1A, 0x96,  // .Psq....
                                /* 0348 */  0xCC, 0x24, 0xC8, 0x91, 0x9A, 0x95, 0x0A, 0x95,  // .$......
                                /* 0350 */  0x1D, 0x7E, 0x8A, 0x3F, 0x36, 0xD4, 0xFD, 0xBD,  // .~.?6...
                                /* 0358 */  0x1F, 0xF0, 0x17, 0x46, 0xE3, 0x33, 0x5A, 0x7E,  // ...F.3Z~
                                /* 0360 */  0x77, 0xF2, 0x20, 0x79, 0x48, 0x0F, 0xBA, 0x5E,  // w. yH..^
                                /* 0368 */  0x56, 0x66, 0x17, 0xDD, 0x91, 0x0E, 0x61, 0x52,  // Vf....aR
                                /* 0370 */  0xBD, 0xC2, 0x8B, 0xB5, 0xF5, 0xDD, 0xAF, 0xE8,  // ........
                                /* 0378 */  0xA1, 0x98, 0x6F, 0x9D, 0xF4, 0x0F, 0x06, 0x5C,  // ..o....\
                                /* 0380 */  0x3F, 0xC6, 0x78, 0x21, 0xC4, 0x53, 0x0C, 0x2E,  // ?.x!.S..
                                /* 0388 */  0x8B, 0x27, 0x20, 0x23, 0x78, 0x2F, 0x51, 0xEB,  // .' #x/Q.
                                /* 0390 */  0x93, 0x98, 0x78, 0xBB, 0xF3, 0x90, 0x4D, 0xDE,  // ..x...M.
                                /* 0398 */  0xC4, 0xEB, 0x42, 0xB7, 0xA3, 0x6A, 0xF5, 0x66,  // ..B..j.f
                                /* 03A0 */  0x05, 0xF0, 0x90, 0x5F, 0xEC, 0x3F, 0xA4, 0xC8,  // ..._.?..
                                /* 03A8 */  0xB0, 0x02, 0x82, 0xE4, 0x11, 0x47, 0xBA, 0x16,  // .....G..
                                /* 03B0 */  0xEE, 0x37, 0xC3, 0x6E, 0xE9, 0x90, 0xEB, 0x72,  // .7.n...r
                                /* 03B8 */  0xCA, 0xB7, 0xC2, 0x9E, 0x00, 0x8C, 0xAA, 0x59,  // .......Y
                                /* 03C0 */  0x3E, 0x4C, 0xEF, 0x76, 0x71, 0x9A, 0x7E, 0x8F,  // >L.vq.~.
                                /* 03C8 */  0xBB, 0x0A, 0xC2, 0xBB, 0xEB, 0x9D, 0x10, 0x63,  // .......c
                                /* 03D0 */  0x78, 0x8E, 0xC8, 0xD7, 0xA8, 0x6C, 0xAF, 0xD6,  // x....l..
                                /* 03D8 */  0xCB, 0x6B, 0x4A, 0xD7, 0xEE, 0x7F, 0x8D, 0xF1,  // .kJ.....
                                /* 03E0 */  0x1C, 0x6A, 0xA6, 0x4E, 0x75, 0xE0, 0xD3, 0xD9,  // .j.Nu...
                                /* 03E8 */  0xF0, 0x07, 0xEC, 0x0C, 0x79, 0xFD, 0xAF, 0x8A,  // ....y...
                                /* 03F0 */  0xBA, 0x88, 0xFF, 0x2E, 0xC4, 0x13, 0xD4, 0xD0,  // ........
                                /* 03F8 */  0xCD, 0xCA, 0xBC, 0x0C, 0x1D, 0x10, 0x9D, 0xB3,  // ........
                                /* 0400 */  0xB7, 0x1A, 0x23, 0x3B, 0xCB, 0x79, 0xD9, 0x5E,  // ..#;.y.^
                                /* 0408 */  0x7F, 0x90, 0xD4, 0x11, 0x13, 0x49, 0x6A, 0xF5,  // .....Ij.
                                /* 0410 */  0xEB, 0xE0, 0xA5, 0xF7, 0xF9, 0x58, 0xD1, 0xA2,  // .....X..
                                /* 0418 */  0x97, 0xE6, 0xB0, 0x85, 0xC5, 0x8C, 0x93, 0xE1,  // ........
                                /* 0420 */  0xEE, 0xBA, 0xBA, 0x24, 0xBC, 0x4E, 0xF4, 0x38,  // ...$.N.8
                                /* 0428 */  0xC6, 0x49, 0x93, 0x28, 0x56, 0xD5, 0x3A, 0x8F,  // .I.(V.:.
                                /* 0430 */  0x8B, 0x07, 0x3E, 0x56, 0x98, 0x71, 0x0B, 0x9D,  // ..>V.q..
                                /* 0438 */  0x94, 0xD1, 0xEC, 0x63, 0x79, 0xE2, 0x4A, 0xE4,  // ...cy.J.
                                /* 0440 */  0x03, 0x1C, 0xA0, 0x48, 0x9A, 0xF3, 0xA9, 0x33,  // ...H...3
                                /* 0448 */  0xEE, 0xB5, 0xDB, 0x05, 0x8E, 0x6D, 0x45, 0x66,  // .....mEf
                                /* 0450 */  0x9E, 0xF5, 0x5B, 0x9B, 0x5D, 0xA1, 0x52, 0x59,  // ..[.].RY
                                /* 0458 */  0x20, 0xD6, 0x18, 0x3A, 0x54, 0x52, 0x33, 0x6E,  //  ..:TR3n
                                /* 0460 */  0xE0, 0x6D, 0xA4, 0x94, 0xF4, 0x16, 0x7C, 0x2E,  // .m....|.
                                /* 0468 */  0x0F, 0x71, 0x36, 0xB9, 0xA6, 0xC9, 0x0B, 0x8D,  // .q6.....
                                /* 0470 */  0xA7, 0x06, 0xF9, 0x2F, 0xF7, 0xA3, 0xCA, 0x97,  // .../....
                                /* 0478 */  0xE6, 0x4E, 0x59, 0x51, 0x2A, 0x01, 0xAA, 0xBF,  // .NYQ*...
                                /* 0480 */  0x66, 0xD1, 0x02, 0x3F, 0xC2, 0x47, 0xB1, 0xE8,  // f..?.G..
                                /* 0488 */  0xA6, 0x86, 0x27, 0xDD, 0x71, 0xF4, 0x7F, 0x86,  // ..'.q...
                                /* 0490 */  0xB8, 0x3E, 0xAD, 0x92, 0xF6, 0xFA, 0xB3, 0xC0,  // .>......
                                /* 0498 */  0x25, 0xC0, 0xE0, 0x34, 0x70, 0xEB, 0x41, 0x86,  // %..4p.A.
                                /* 04A0 */  0xCD, 0x79, 0x3F, 0xDD, 0xB0, 0xFE, 0x1F, 0x50,  // .y?....P
                                /* 04A8 */  0xE9, 0xEF, 0x75, 0x66, 0x67, 0x7B, 0xF2, 0x31,  // ..ufg{.1
                                /* 04B0 */  0xD2, 0x75, 0xF8, 0x73, 0x82, 0xEC, 0xCB, 0x70,  // .u.s...p
                                /* 04B8 */  0x4E, 0x2F, 0x69, 0x40, 0x90, 0xA3, 0x47, 0xA9,  // N/i@..G.
                                /* 04C0 */  0x17, 0x29, 0x65, 0x6E, 0xA4, 0x94, 0x8E, 0xA6,  // .)en....
                                /* 04C8 */  0xED, 0x91, 0xAE, 0x36, 0xCE, 0x48, 0xAC, 0x55,  // ...6.H.U
                                /* 04D0 */  0xC4, 0x96, 0x1F, 0x68, 0xDC, 0x84, 0x17, 0xC5,  // ...h....
                                /* 04D8 */  0x2D, 0x8A, 0x2B, 0x46, 0xD4, 0xF4, 0x72, 0x61,  // -.+F..ra
                                /* 04E0 */  0xB5, 0x50, 0xAC, 0xC9, 0xC5, 0xA0, 0xDE, 0x33,  // .P.....3
                                /* 04E8 */  0x94, 0xF5, 0xC0, 0x6E, 0xD1, 0x62, 0xBE, 0xA5,  // ...n.b..
                                /* 04F0 */  0xD1, 0x18, 0x9F, 0xDF, 0x9E, 0x16, 0x99, 0x80,  // ........
                                /* 04F8 */  0x07, 0x76, 0xEA, 0x6E, 0xCE, 0xBD, 0x89, 0xA1,  // .v.n....
                                /* 0500 */  0x77, 0x95, 0x62, 0xBB, 0x82, 0xB2, 0x3F, 0xE4,  // w.b...?.
                                /* 0508 */  0xED, 0xB6, 0x0A, 0x52, 0x18, 0xDA, 0x67, 0x47,  // ...R..gG
                                /* 0510 */  0x19, 0x9D, 0xA2, 0xCF, 0x8F, 0x79, 0xF1, 0x06,  // .....y..
                                /* 0518 */  0x5A, 0xDC, 0x0F, 0x82, 0xC8, 0x00, 0x38, 0x2A,  // Z.....8*
                                /* 0520 */  0xE3, 0xAB, 0x23, 0x22, 0xB2, 0xE4, 0xB2, 0x8C,  // ..#"....
                                /* 0528 */  0x1E, 0x85, 0x75, 0x46, 0x23, 0xC7, 0xA4, 0x67,  // ..uF#..g
                                /* 0530 */  0x7F, 0x63, 0x2D, 0xDF, 0xF9, 0xDA, 0x5A, 0x7B,  // .c-...Z{
                                /* 0538 */  0x75, 0x28, 0xC0, 0x4F, 0x8E, 0xD4, 0xBE, 0x2D,  // u(.O...-
                                /* 0540 */  0xDD, 0xF0, 0x65, 0xB6, 0x35, 0x75, 0x73, 0x2E,  // ..e.5us.
                                /* 0548 */  0x73, 0x42, 0x82, 0xC4, 0x50, 0x74, 0x21, 0x65,  // sB..Pt!e
                                /* 0550 */  0x06, 0x43, 0xC7, 0x5F, 0x5B, 0xCB, 0xE3, 0xEE,  // .C._[...
                                /* 0558 */  0xF6, 0xB5, 0xD8, 0xCC, 0x30, 0x6B, 0xA7, 0xA7,  // ....0k..
                                /* 0560 */  0xF8, 0x18, 0xFF, 0xBE, 0x64, 0xF2, 0x20, 0xE9,  // ....d. .
                                /* 0568 */  0xBD, 0x0C, 0x9A, 0x51, 0x74, 0x68, 0x83, 0xDB,  // ...Qth..
                                /* 0570 */  0x4A, 0xB8, 0xA0, 0xDD, 0x13, 0xFE, 0xDC, 0x30,  // J......0
                                /* 0578 */  0x25, 0x16, 0x4B, 0x0A, 0xAE, 0xE0, 0x23, 0x9B,  // %.K...#.
                                /* 0580 */  0x4A, 0x88, 0x8C, 0x82, 0xAF, 0xD5, 0x67, 0xDA,  // J.....g.
                                /* 0588 */  0xBD, 0x7F, 0x6E, 0x0C, 0x71, 0x78, 0x83, 0xE2,  // ..n.qx..
                                /* 0590 */  0x9B, 0x34, 0x73, 0x5D, 0xFA, 0x08, 0x47, 0x50,  // .4s]..GP
                                /* 0598 */  0xA9, 0x15, 0x66, 0x7E, 0x17, 0x02, 0xFD, 0xB7,  // ..f~....
                                /* 05A0 */  0xC3, 0x49, 0xAE, 0x62, 0x0E, 0xF1, 0xA1, 0xF7,  // .I.b....
                                /* 05A8 */  0xD5, 0x52, 0xF0, 0x8B, 0x7B, 0xD2, 0x7B, 0x87,  // .R..{.{.
                                /* 05B0 */  0x0A, 0x2E, 0x99, 0x43, 0x93, 0xD1, 0x58, 0x25,  // ...C..X%
                                /* 05B8 */  0xE4, 0x18, 0x58, 0x93, 0xFF, 0xF3, 0x19, 0x48,  // ..X....H
                                /* 05C0 */  0xB4, 0xC1, 0xB1, 0x2B, 0x66, 0x6F, 0x8B, 0x17,  // ...+fo..
                                /* 05C8 */  0x9D, 0xB8, 0xBE, 0xBE, 0x66, 0x07, 0xCC, 0x66,  // ....f..f
                                /* 05D0 */  0x7C, 0x83, 0xCB, 0x6F, 0x84, 0xB6, 0x44, 0x7B,  // |..o..D{
                                /* 05D8 */  0x79, 0xF3, 0xD4, 0x2F, 0x71, 0xF2, 0x28, 0x6D,  // y../q.(m
                                /* 05E0 */  0x6E, 0xEB, 0x4B, 0xF6, 0x92, 0xAE, 0x19, 0x82,  // n.K.....
                                /* 05E8 */  0x85, 0xF3, 0x5F, 0x5D, 0x8D, 0xD1, 0x71, 0x17,  // .._]..q.
                                /* 05F0 */  0x84, 0xDC, 0x89, 0x69, 0xAC, 0x29, 0x1E, 0xAB,  // ...i.)..
                                /* 05F8 */  0x6E, 0x0C, 0x80, 0xEA, 0xEE, 0x07, 0xA5, 0x45,  // n......E
                                /* 0600 */  0xEF, 0x0B, 0x32, 0x94, 0x93, 0x21, 0x02, 0x20,  // ..2..!. 
                                /* 0608 */  0x87, 0x44, 0x00, 0xDD, 0x26, 0x43, 0x1E, 0x0D,  // .D..&C..
                                /* 0610 */  0x11, 0xF2, 0xE4, 0xA5, 0x45, 0x0E, 0xDD, 0xE0,  // ....E...
                                /* 0618 */  0x6F, 0xED, 0x08, 0x84, 0x22, 0x69, 0x3E, 0x0E,  // o..."i>.
                                /* 0620 */  0x6A, 0x55, 0x97, 0xD4, 0x47, 0xF8, 0x0E, 0x29,  // jU..G..)
                                /* 0628 */  0x57, 0x54, 0xC8, 0x2E, 0x26, 0x70, 0x5B, 0x4D,  // WT..&p[M
                                /* 0630 */  0xC5, 0xB3, 0x68, 0x47, 0x5E, 0xFE, 0x55, 0x84,  // ..hG^.U.
                                /* 0638 */  0x32, 0x10, 0x64, 0x9B, 0x33, 0x70, 0x6F, 0xC6,  // 2.d.3po.
                                /* 0640 */  0x9A, 0x56, 0x02, 0x85, 0xDE, 0xD8, 0x31, 0x06,  // .V....1.
                                /* 0648 */  0x6C, 0x1D, 0x9B, 0x7C, 0xA7, 0x81, 0x32, 0x44,  // l..|..2D
                                /* 0650 */  0x85, 0xF1, 0x4B, 0x74, 0xB7, 0x74, 0x0B, 0x5E,  // ..Kt.t.^
                                /* 0658 */  0xA2, 0x6E, 0x0B, 0x85, 0x12, 0x81, 0x10, 0x94,  // .n......
                                /* 0660 */  0x01, 0x72, 0x1B, 0x53, 0xD8, 0xD6, 0xC0, 0x54,  // .r.S...T
                                /* 0668 */  0x88, 0x02, 0xAF, 0xD2, 0x45, 0x39, 0xC3, 0x58,  // ....E9.X
                                /* 0670 */  0xDD, 0x0B, 0xA3, 0x42, 0xB4, 0xF9, 0x49, 0x59,  // ...B..IY
                                /* 0678 */  0xD7, 0xEE, 0x88, 0x8B, 0x48, 0xE4, 0x0D, 0xFF,  // ....H...
                                /* 0680 */  0x41, 0x3A, 0xEC, 0xDB, 0xDC, 0x84, 0x70, 0x11,  // A:....p.
                                /* 0688 */  0xF2, 0xFB, 0x56, 0xA6, 0xD1, 0x24, 0x7B, 0x90,  // ..V..${.
                                /* 0690 */  0x90, 0x48, 0xB4, 0xFF, 0xC7, 0xF8, 0xA0, 0x48,  // .H.....H
                                /* 0698 */  0x7F, 0xCC, 0x8B, 0x2E, 0x0E, 0xB7, 0x80, 0x87,  // ........
                                /* 06A0 */  0x54, 0x5B, 0xAA, 0x0C, 0x4B, 0xF2, 0x9A, 0x4B,  // T[..K..K
                                /* 06A8 */  0x91, 0xC4, 0x62, 0x90, 0xE3, 0x75, 0xE2, 0xDE,  // ..b..u..
                                /* 06B0 */  0x6E, 0x6A, 0x91, 0x6C, 0xA3, 0xB9, 0xCF, 0x5F,  // nj.l..._
                                /* 06B8 */  0xB7, 0x3E, 0x09, 0x8C, 0xA0, 0x20, 0xEC, 0x7F,  // .>... ..
                                /* 06C0 */  0x2F, 0xD2, 0xD7, 0xB3, 0xA8, 0x88, 0x27, 0x29,  // /.....')
                                /* 06C8 */  0x65, 0xBB, 0x7A, 0x46, 0xD6, 0x7B, 0xE4, 0x00,  // e.zF.{..
                                /* 06D0 */  0x44, 0x89, 0xA1, 0xE1, 0xA5, 0xEF, 0xC9, 0x8D,  // D.......
                                /* 06D8 */  0x24, 0x6B, 0xF3, 0xAD, 0x97, 0x61, 0xDF, 0x3B,  // $k...a.;
                                /* 06E0 */  0x77, 0xF5, 0x89, 0x51, 0x20, 0x0A, 0x81, 0x68,  // w..Q ..h
                                /* 06E8 */  0x19, 0x5E, 0x53, 0x5D, 0xDA, 0xF1, 0x6D, 0xF5,  // .^S]..m.
                                /* 06F0 */  0x80, 0x25, 0x6E, 0x92, 0x8F, 0xF7, 0x08, 0xA7,  // .%n.....
                                /* 06F8 */  0x28, 0xA5, 0x47, 0xE4, 0x04, 0xF8, 0x0B, 0xA6,  // (.G.....
                                /* 0700 */  0x37, 0xFE, 0x96, 0x1D, 0x0A, 0xDA, 0xFC, 0x7E,  // 7......~
                                /* 0708 */  0xD5, 0x9D, 0x81, 0xF1, 0xA2, 0xB6, 0x09, 0x86,  // ........
                                /* 0710 */  0xD2, 0x8C, 0xAA, 0x14, 0x02, 0xB6, 0x69, 0x28,  // ......i(
                                /* 0718 */  0x8C, 0xE9, 0x60, 0xD8, 0xEC, 0x0C, 0x37, 0xD3,  // ..`...7.
                                /* 0720 */  0xAA, 0x15, 0xAC, 0xE1, 0x53, 0x23, 0xB9, 0x9F,  // ....S#..
                                /* 0728 */  0xF3, 0x17, 0xCA, 0x5F, 0xE9, 0xF7, 0x7B, 0xC3,  // ..._..{.
                                /* 0730 */  0x63, 0x1E, 0x54, 0xC2, 0x3E, 0x98, 0xFD, 0x46,  // c.T.>..F
                                /* 0738 */  0xFC, 0x53, 0xA0, 0xDE, 0xD7, 0xCF, 0xF5, 0x2A,  // .S.....*
                                /* 0740 */  0xB7, 0x04, 0x5B, 0xE7, 0x14, 0xAD, 0x05, 0x99,  // ..[.....
                                /* 0748 */  0x56, 0x61, 0xC5, 0xBE, 0xF7, 0x22, 0x81, 0x52,  // Va...".R
                                /* 0750 */  0x52, 0xE9, 0x47, 0xD8, 0x15, 0xAE, 0x0D, 0x0E,  // R.G.....
                                /* 0758 */  0x0B, 0x5E, 0x76, 0xC3, 0xD0, 0xBB, 0xFD, 0x5F,  // .^v...._
                                /* 0760 */  0xF2, 0xF3, 0x5C, 0x81, 0x4A, 0xC1, 0x60, 0x31,  // ..\.J.`1
                                /* 0768 */  0xA2, 0xCB, 0xB1, 0xAA, 0xA1, 0xC8, 0x9F, 0xEC,  // ........
                                /* 0770 */  0x90, 0x35, 0x40, 0x93, 0xFB, 0x13, 0xC5, 0x9C,  // .5@.....
                                /* 0778 */  0x1D, 0x56, 0x15, 0x5C, 0x8F, 0x07, 0xDD         // .V.\...
                            }
                        })
                    }
                }
                ElseIf ((MCSK == 0x02))
                {
                    If ((GTYP == 0x02))
                    {
                        Return (Package (0x01)
                        {
                            Buffer (0x0671)
                            {
                                /* 0000 */  0xE5, 0x1F, 0x94, 0x00, 0x00, 0x00, 0x00, 0x02,  // ........
                                /* 0008 */  0x00, 0x00, 0x00, 0x40, 0x67, 0x64, 0x64, 0x76,  // ...@gddv
                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x4F, 0x45, 0x4D, 0x20,  // ....OEM 
                                /* 0030 */  0x45, 0x78, 0x70, 0x6F, 0x72, 0x74, 0x65, 0x64,  // Exported
                                /* 0038 */  0x20, 0x44, 0x61, 0x74, 0x61, 0x56, 0x61, 0x75,  //  DataVau
                                /* 0040 */  0x6C, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // lt......
                                /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0068 */  0x00, 0x00, 0x00, 0x00, 0x3E, 0x15, 0x92, 0x13,  // ....>...
                                /* 0070 */  0x19, 0xCB, 0x2F, 0xF3, 0xAB, 0x87, 0x91, 0xD7,  // ../.....
                                /* 0078 */  0x99, 0x7E, 0x03, 0xC1, 0x5B, 0xC3, 0x9B, 0x9D,  // .~..[...
                                /* 0080 */  0xCA, 0x01, 0x41, 0xBE, 0x07, 0xF7, 0x4A, 0xD9,  // ..A...J.
                                /* 0088 */  0x19, 0x8E, 0xFC, 0x97, 0xDD, 0x05, 0x00, 0x00,  // ........
                                /* 0090 */  0x52, 0x45, 0x50, 0x4F, 0x5D, 0x00, 0x00, 0x00,  // REPO]...
                                /* 0098 */  0x01, 0x1C, 0x8C, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 00A0 */  0x00, 0x00, 0x72, 0x87, 0xCD, 0xFF, 0x6D, 0x24,  // ..r...m$
                                /* 00A8 */  0x47, 0xDB, 0x3D, 0x24, 0x92, 0xB4, 0x16, 0x6F,  // G.=$...o
                                /* 00B0 */  0x45, 0xD8, 0xC3, 0xF5, 0x66, 0x14, 0x9F, 0x22,  // E...f.."
                                /* 00B8 */  0xD7, 0xF7, 0xDE, 0x67, 0x90, 0x9A, 0xA2, 0x0D,  // ...g....
                                /* 00C0 */  0x39, 0x25, 0xAD, 0xC3, 0x1A, 0xAD, 0x52, 0x0B,  // 9%....R.
                                /* 00C8 */  0x75, 0x38, 0xE1, 0xA4, 0x14, 0x43, 0x27, 0xFD,  // u8...C'.
                                /* 00D0 */  0xEC, 0x9C, 0x3A, 0xDA, 0x6A, 0xC3, 0x4B, 0x97,  // ..:.j.K.
                                /* 00D8 */  0x21, 0xF8, 0x7B, 0xFA, 0x20, 0x5C, 0x4C, 0x4F,  // !.{. \LO
                                /* 00E0 */  0x48, 0xEC, 0xE2, 0x21, 0xC6, 0xB7, 0xC8, 0x45,  // H..!...E
                                /* 00E8 */  0xB4, 0xF5, 0xA7, 0x82, 0xD1, 0xEC, 0xB8, 0xFA,  // ........
                                /* 00F0 */  0x1E, 0xE3, 0x6F, 0xA6, 0xFE, 0xAE, 0xFF, 0x3B,  // ..o....;
                                /* 00F8 */  0x64, 0x21, 0xF7, 0x45, 0x1A, 0xD9, 0xE3, 0x73,  // d!.E...s
                                /* 0100 */  0x28, 0x32, 0x4F, 0xCA, 0xF8, 0x08, 0x78, 0xF0,  // (2O...x.
                                /* 0108 */  0xC0, 0x78, 0x0D, 0xC6, 0x06, 0x87, 0x13, 0x5E,  // .x.....^
                                /* 0110 */  0xDA, 0xBC, 0x10, 0x33, 0x08, 0x2E, 0xD3, 0x18,  // ...3....
                                /* 0118 */  0xFB, 0x62, 0xBD, 0x83, 0x61, 0x9E, 0xCD, 0xF0,  // .b..a...
                                /* 0120 */  0x01, 0x3F, 0x71, 0xDD, 0x7D, 0x7C, 0x6D, 0x1B,  // .?q.}|m.
                                /* 0128 */  0x46, 0x09, 0x3E, 0x64, 0xE7, 0xBB, 0x4D, 0x13,  // F.>d..M.
                                /* 0130 */  0x7F, 0x7E, 0x62, 0x24, 0xCF, 0x68, 0x06, 0xB6,  // .~b$.h..
                                /* 0138 */  0x34, 0x6B, 0xD1, 0x6D, 0x7F, 0xC9, 0x79, 0xF0,  // 4k.m..y.
                                /* 0140 */  0xD5, 0xBC, 0x89, 0x8A, 0xC2, 0x54, 0x2B, 0xAA,  // .....T+.
                                /* 0148 */  0x08, 0x68, 0xA6, 0x68, 0xCF, 0x7D, 0x92, 0x60,  // .h.h.}.`
                                /* 0150 */  0xCA, 0xA8, 0xD7, 0x30, 0xDA, 0x94, 0x84, 0xEB,  // ...0....
                                /* 0158 */  0x56, 0x54, 0xF5, 0x9F, 0x79, 0xAA, 0x80, 0xCC,  // VT..y...
                                /* 0160 */  0x1E, 0x0B, 0xF1, 0x1F, 0x36, 0x2D, 0xFF, 0x7C,  // ....6-.|
                                /* 0168 */  0x54, 0xC6, 0x9E, 0xCD, 0xCF, 0x12, 0x1A, 0x57,  // T......W
                                /* 0170 */  0x16, 0x8F, 0x0B, 0x70, 0x6F, 0xDC, 0x1B, 0xB2,  // ...po...
                                /* 0178 */  0x0A, 0xCA, 0x4D, 0xA9, 0xA0, 0xC1, 0x28, 0x17,  // ..M...(.
                                /* 0180 */  0x26, 0x95, 0xA2, 0xC4, 0xAA, 0x35, 0xE5, 0xDB,  // &....5..
                                /* 0188 */  0x3A, 0xA2, 0x70, 0x31, 0x6A, 0xD9, 0xF4, 0x35,  // :.p1j..5
                                /* 0190 */  0xE8, 0x00, 0x67, 0xC2, 0x94, 0xBF, 0xB8, 0x53,  // ..g....S
                                /* 0198 */  0x4C, 0x86, 0x2C, 0x83, 0xDA, 0x3A, 0xE8, 0x61,  // L.,..:.a
                                /* 01A0 */  0xDF, 0x15, 0xB5, 0x2D, 0x20, 0xFE, 0x16, 0xDF,  // ...- ...
                                /* 01A8 */  0xB7, 0xD6, 0xAC, 0x3E, 0xDE, 0x11, 0x99, 0x52,  // ...>...R
                                /* 01B0 */  0x75, 0xE8, 0xA9, 0xC5, 0x4F, 0xC7, 0xB4, 0x40,  // u...O..@
                                /* 01B8 */  0xF8, 0xE2, 0xD7, 0xE0, 0xBA, 0x4B, 0xE1, 0x8E,  // .....K..
                                /* 01C0 */  0x8F, 0x41, 0x64, 0x4F, 0x7E, 0xB0, 0x8D, 0xEC,  // .AdO~...
                                /* 01C8 */  0xAA, 0xDA, 0x07, 0x65, 0x88, 0xA8, 0xFF, 0x03,  // ...e....
                                /* 01D0 */  0xDF, 0xC9, 0x06, 0xA6, 0xF0, 0x50, 0xCB, 0x1C,  // .....P..
                                /* 01D8 */  0x92, 0x03, 0xA8, 0x1E, 0x1A, 0xEA, 0x55, 0xE7,  // ......U.
                                /* 01E0 */  0x35, 0xEE, 0x35, 0x74, 0x07, 0x62, 0x00, 0x40,  // 5.5t.b.@
                                /* 01E8 */  0x4C, 0xB4, 0x7C, 0x14, 0xE2, 0x11, 0x8F, 0x3F,  // L.|....?
                                /* 01F0 */  0x15, 0xC2, 0x62, 0xBC, 0x73, 0x1B, 0xF7, 0x70,  // ..b.s..p
                                /* 01F8 */  0x6E, 0xB3, 0xB0, 0xAC, 0x86, 0xA3, 0xA0, 0xAE,  // n.......
                                /* 0200 */  0xD4, 0xBF, 0x5D, 0xA4, 0xAA, 0xC0, 0xCD, 0x3B,  // ..]....;
                                /* 0208 */  0xE6, 0x41, 0x9F, 0xB6, 0x27, 0x25, 0x19, 0x1E,  // .A..'%..
                                /* 0210 */  0x8E, 0xEF, 0xC1, 0x8F, 0xAC, 0xD9, 0x40, 0x3D,  // ......@=
                                /* 0218 */  0xD8, 0x02, 0xCD, 0x45, 0xC0, 0xE5, 0xD6, 0xD4,  // ...E....
                                /* 0220 */  0x24, 0xD5, 0x03, 0x23, 0x3E, 0x01, 0x36, 0xD8,  // $..#>.6.
                                /* 0228 */  0xFB, 0xD1, 0xBB, 0xC1, 0x44, 0xAB, 0x8E, 0x00,  // ....D...
                                /* 0230 */  0x21, 0xE2, 0x2D, 0xDE, 0x1F, 0xF9, 0x18, 0x04,  // !.-.....
                                /* 0238 */  0xFD, 0x27, 0x31, 0x74, 0x2E, 0x83, 0x8F, 0xEB,  // .'1t....
                                /* 0240 */  0xE3, 0x08, 0x46, 0xCC, 0x7B, 0x62, 0xDF, 0xC7,  // ..F.{b..
                                /* 0248 */  0xEF, 0x0E, 0x81, 0xB2, 0xA6, 0x17, 0x3D, 0x78,  // ......=x
                                /* 0250 */  0xDC, 0x66, 0x4D, 0x80, 0xB7, 0x08, 0x03, 0xB7,  // .fM.....
                                /* 0258 */  0x83, 0x45, 0xBD, 0xC7, 0x56, 0x9F, 0x07, 0xC3,  // .E..V...
                                /* 0260 */  0x93, 0x85, 0xEB, 0x6A, 0xD5, 0x31, 0x5F, 0xF7,  // ...j.1_.
                                /* 0268 */  0x2A, 0x9C, 0xFF, 0x22, 0x18, 0x3A, 0xF5, 0x13,  // *..".:..
                                /* 0270 */  0xA0, 0xB1, 0x4F, 0xF8, 0xB8, 0x10, 0x5E, 0x31,  // ..O...^1
                                /* 0278 */  0xE0, 0xC7, 0x9A, 0x66, 0xA0, 0x09, 0xEE, 0xC9,  // ...f....
                                /* 0280 */  0x20, 0x2E, 0x90, 0x2C, 0x4E, 0x0D, 0x5E, 0x19,  //  ..,N.^.
                                /* 0288 */  0xB4, 0x67, 0x38, 0xE4, 0xA3, 0x1D, 0xFA, 0xED,  // .g8.....
                                /* 0290 */  0x56, 0x0A, 0x32, 0x20, 0x19, 0xFD, 0x0A, 0x9F,  // V.2 ....
                                /* 0298 */  0xBC, 0xBA, 0x29, 0xAB, 0x72, 0xAE, 0xF6, 0x5C,  // ..).r..\
                                /* 02A0 */  0x8E, 0x19, 0xD4, 0x6F, 0x7C, 0x6B, 0xCE, 0xBF,  // ...o|k..
                                /* 02A8 */  0xA0, 0xA7, 0xFF, 0xE2, 0x12, 0xAC, 0xAC, 0xA4,  // ........
                                /* 02B0 */  0x69, 0x55, 0xB0, 0xB3, 0xF1, 0x66, 0xB2, 0xEC,  // iU...f..
                                /* 02B8 */  0xEB, 0x4A, 0x56, 0x30, 0xC0, 0x6F, 0x93, 0xDB,  // .JV0.o..
                                /* 02C0 */  0xA6, 0x54, 0x24, 0xC4, 0x29, 0xE7, 0xD7, 0xD4,  // .T$.)...
                                /* 02C8 */  0x0B, 0xC6, 0x2D, 0x1D, 0x33, 0x9C, 0xD1, 0xC2,  // ..-.3...
                                /* 02D0 */  0xCD, 0x42, 0x02, 0x0C, 0x47, 0xBD, 0x3F, 0x22,  // .B..G.?"
                                /* 02D8 */  0x85, 0x12, 0x62, 0x23, 0x3E, 0xAF, 0x9E, 0xD6,  // ..b#>...
                                /* 02E0 */  0xE6, 0x48, 0x20, 0x51, 0xC3, 0xB7, 0x0A, 0xF8,  // .H Q....
                                /* 02E8 */  0x29, 0x73, 0xD3, 0x88, 0x36, 0x9D, 0x62, 0x14,  // )s..6.b.
                                /* 02F0 */  0x9E, 0x1B, 0xC8, 0xDB, 0x99, 0xCA, 0xF7, 0xC0,  // ........
                                /* 02F8 */  0xB5, 0xA7, 0x88, 0xD4, 0x77, 0x0A, 0x09, 0x90,  // ....w...
                                /* 0300 */  0x31, 0x8C, 0x69, 0x9A, 0xC9, 0x8A, 0xD2, 0x26,  // 1.i....&
                                /* 0308 */  0x24, 0xAE, 0xF6, 0x8D, 0x48, 0xB0, 0x11, 0xB8,  // $...H...
                                /* 0310 */  0x7D, 0xC8, 0x34, 0x15, 0x4D, 0x34, 0xE1, 0xE7,  // }.4.M4..
                                /* 0318 */  0x54, 0xCE, 0x0B, 0x39, 0x3E, 0x40, 0xBB, 0x0E,  // T..9>@..
                                /* 0320 */  0xB0, 0x5E, 0x33, 0x74, 0x33, 0x15, 0x07, 0x7D,  // .^3t3..}
                                /* 0328 */  0x56, 0x4A, 0xBC, 0x10, 0x71, 0xA9, 0x7F, 0x7E,  // VJ..q..~
                                /* 0330 */  0xB8, 0xB0, 0xF3, 0x42, 0x69, 0x97, 0xF8, 0x2F,  // ...Bi../
                                /* 0338 */  0xC5, 0x66, 0x94, 0xA6, 0x12, 0x04, 0x0E, 0x0A,  // .f......
                                /* 0340 */  0x03, 0xDA, 0xBB, 0xBC, 0x48, 0x31, 0xC6, 0x6F,  // ....H1.o
                                /* 0348 */  0x01, 0x63, 0x54, 0xFB, 0x85, 0x86, 0xE9, 0xD3,  // .cT.....
                                /* 0350 */  0x68, 0xC8, 0xAC, 0x14, 0x8C, 0xC1, 0x2E, 0x7C,  // h......|
                                /* 0358 */  0x68, 0x06, 0x9C, 0xD1, 0x05, 0x7D, 0xB6, 0x30,  // h....}.0
                                /* 0360 */  0x10, 0x15, 0x8F, 0xFD, 0x92, 0x36, 0xE1, 0xBF,  // .....6..
                                /* 0368 */  0x1D, 0x81, 0xE5, 0xC5, 0x74, 0xEF, 0x9E, 0xAA,  // ....t...
                                /* 0370 */  0xF8, 0x4C, 0x55, 0xD0, 0xE3, 0x8A, 0x80, 0x08,  // .LU.....
                                /* 0378 */  0xE4, 0xC6, 0x02, 0xFA, 0xFF, 0x5E, 0xA3, 0x56,  // .....^.V
                                /* 0380 */  0xEA, 0xDC, 0x3D, 0xD4, 0x12, 0xC7, 0xBD, 0x2D,  // ..=....-
                                /* 0388 */  0x99, 0xCB, 0x2A, 0xF4, 0x2A, 0x0B, 0x73, 0x50,  // ..*.*.sP
                                /* 0390 */  0x4C, 0x8E, 0xBE, 0xFB, 0x74, 0x0E, 0xF7, 0x65,  // L...t..e
                                /* 0398 */  0x47, 0x7B, 0x42, 0x2F, 0x12, 0xCA, 0x50, 0x28,  // G{B/..P(
                                /* 03A0 */  0x48, 0xDB, 0x84, 0x04, 0xD1, 0x7C, 0x19, 0x20,  // H....|. 
                                /* 03A8 */  0xDF, 0xA7, 0x15, 0x63, 0x08, 0x06, 0xF9, 0xFA,  // ...c....
                                /* 03B0 */  0x37, 0x8F, 0xB7, 0x52, 0x75, 0x43, 0x14, 0x62,  // 7..RuC.b
                                /* 03B8 */  0xAD, 0x51, 0x63, 0xCA, 0xBB, 0x8C, 0x0F, 0xA1,  // .Qc.....
                                /* 03C0 */  0xA2, 0xC8, 0x15, 0x07, 0xE7, 0xF6, 0x64, 0xF9,  // ......d.
                                /* 03C8 */  0xDF, 0x45, 0x03, 0xD5, 0x28, 0xB0, 0xFD, 0xA0,  // .E..(...
                                /* 03D0 */  0x34, 0xB0, 0x1E, 0xCF, 0xC1, 0x19, 0xD5, 0x69,  // 4......i
                                /* 03D8 */  0x52, 0x6B, 0xB4, 0xB2, 0x02, 0xDB, 0xE9, 0x48,  // Rk.....H
                                /* 03E0 */  0x69, 0x4D, 0xFA, 0xC6, 0x4C, 0x64, 0xFF, 0xA2,  // iM..Ld..
                                /* 03E8 */  0xE4, 0x78, 0x8D, 0x89, 0xED, 0x5F, 0x60, 0x22,  // .x..._`"
                                /* 03F0 */  0x96, 0x6E, 0x77, 0xA1, 0x67, 0x49, 0x54, 0x47,  // .nw.gITG
                                /* 03F8 */  0xAC, 0xDE, 0x71, 0x67, 0x01, 0x6E, 0xCE, 0x6D,  // ..qg.n.m
                                /* 0400 */  0xEF, 0xDF, 0xA0, 0x5A, 0x8A, 0x1E, 0x2F, 0xCD,  // ...Z../.
                                /* 0408 */  0xB6, 0xFF, 0x00, 0xF6, 0x6D, 0xC6, 0xCC, 0xD6,  // ....m...
                                /* 0410 */  0xE6, 0x10, 0x3D, 0x56, 0x6B, 0xDB, 0xD1, 0x32,  // ..=Vk..2
                                /* 0418 */  0x11, 0x9B, 0xA8, 0x1D, 0x49, 0xB8, 0xA3, 0x0A,  // ....I...
                                /* 0420 */  0x58, 0x40, 0xE8, 0x77, 0x87, 0xDA, 0xE4, 0xCF,  // X@.w....
                                /* 0428 */  0xF6, 0xDD, 0xA3, 0x77, 0x32, 0x29, 0xEB, 0x50,  // ...w2).P
                                /* 0430 */  0xAA, 0xE3, 0x64, 0x26, 0xB0, 0xDB, 0x7F, 0xA0,  // ..d&....
                                /* 0438 */  0xFD, 0x2D, 0xA8, 0xCC, 0x40, 0xA4, 0x05, 0xDE,  // .-..@...
                                /* 0440 */  0xD3, 0x17, 0x17, 0x18, 0x28, 0x8F, 0x97, 0x10,  // ....(...
                                /* 0448 */  0x23, 0xCF, 0xC9, 0x14, 0x2A, 0x28, 0x5E, 0x3A,  // #...*(^:
                                /* 0450 */  0xB4, 0x3C, 0xD0, 0xAD, 0xCE, 0x8F, 0x28, 0x0C,  // .<....(.
                                /* 0458 */  0x9C, 0x5B, 0x59, 0x3E, 0x79, 0xB0, 0x62, 0x42,  // .[Y>y.bB
                                /* 0460 */  0x5B, 0x34, 0x1C, 0x3C, 0xA5, 0xBE, 0x2E, 0x0D,  // [4.<....
                                /* 0468 */  0xFF, 0x42, 0x75, 0xDC, 0x7C, 0xB8, 0x9A, 0xB0,  // .Bu.|...
                                /* 0470 */  0x99, 0xED, 0xF2, 0x59, 0x0A, 0x73, 0x75, 0x8A,  // ...Y.su.
                                /* 0478 */  0xEF, 0xA2, 0x53, 0xBA, 0x66, 0x13, 0x3F, 0xAD,  // ..S.f.?.
                                /* 0480 */  0x08, 0x10, 0xC1, 0x1B, 0x7B, 0x7C, 0x20, 0xDC,  // ....{| .
                                /* 0488 */  0xA4, 0x8C, 0x39, 0x93, 0xAF, 0xD0, 0xA8, 0xB0,  // ..9.....
                                /* 0490 */  0xAF, 0xAB, 0x93, 0xFB, 0x3D, 0xE1, 0x19, 0x21,  // ....=..!
                                /* 0498 */  0x8D, 0xF3, 0x60, 0x82, 0x0C, 0x71, 0x41, 0xD1,  // ..`..qA.
                                /* 04A0 */  0x91, 0x46, 0x32, 0xD3, 0x73, 0x11, 0x71, 0x5F,  // .F2.s.q_
                                /* 04A8 */  0x96, 0x3B, 0xE3, 0x12, 0xE9, 0xD6, 0x08, 0x9D,  // .;......
                                /* 04B0 */  0x6F, 0xFC, 0xE4, 0x3F, 0x07, 0x66, 0x89, 0xFD,  // o..?.f..
                                /* 04B8 */  0xFE, 0xFD, 0xF7, 0x9E, 0x82, 0xE3, 0x30, 0x27,  // ......0'
                                /* 04C0 */  0x37, 0x09, 0x82, 0x5B, 0x84, 0xFF, 0x75, 0x02,  // 7..[..u.
                                /* 04C8 */  0x7A, 0x87, 0x31, 0xE8, 0xC2, 0x5E, 0x8A, 0x3F,  // z.1..^.?
                                /* 04D0 */  0xBB, 0x72, 0x5E, 0x3E, 0x3D, 0xAC, 0x1F, 0xA1,  // .r^>=...
                                /* 04D8 */  0x3F, 0x5C, 0x12, 0xDC, 0x8F, 0x92, 0x6A, 0x8D,  // ?\....j.
                                /* 04E0 */  0x97, 0x45, 0x8C, 0xC5, 0x6D, 0xC1, 0x09, 0xE6,  // .E..m...
                                /* 04E8 */  0xD4, 0xC9, 0x08, 0x16, 0x4B, 0x66, 0x0A, 0xE5,  // ....Kf..
                                /* 04F0 */  0xCA, 0x7F, 0x3A, 0xE5, 0x3F, 0x4F, 0x93, 0xF1,  // ..:.?O..
                                /* 04F8 */  0x28, 0xFD, 0x49, 0x0C, 0x8E, 0x0D, 0x5A, 0xB4,  // (.I...Z.
                                /* 0500 */  0x28, 0x70, 0x98, 0xDF, 0x95, 0x78, 0xF1, 0x35,  // (p...x.5
                                /* 0508 */  0xB0, 0xC1, 0xCC, 0x6F, 0xDE, 0x36, 0x2D, 0x97,  // ...o.6-.
                                /* 0510 */  0x74, 0xDC, 0x88, 0xF8, 0x1E, 0x8C, 0x81, 0x6F,  // t......o
                                /* 0518 */  0x19, 0xC0, 0x86, 0xA5, 0x1B, 0xAA, 0x9C, 0x71,  // .......q
                                /* 0520 */  0x19, 0xB7, 0xEC, 0xEF, 0x5B, 0xC1, 0x57, 0xDD,  // ....[.W.
                                /* 0528 */  0x3E, 0x66, 0x0D, 0x62, 0x56, 0x24, 0xC1, 0xBE,  // >f.bV$..
                                /* 0530 */  0x87, 0x18, 0xDF, 0xEA, 0xF1, 0xC1, 0xA2, 0x3A,  // .......:
                                /* 0538 */  0x69, 0x6B, 0x8C, 0x9E, 0x77, 0xEA, 0x9A, 0x3B,  // ik..w..;
                                /* 0540 */  0x0A, 0x0A, 0xAB, 0x59, 0x1E, 0xE0, 0x4A, 0x6D,  // ...Y..Jm
                                /* 0548 */  0x62, 0x9C, 0x2E, 0x0B, 0xD4, 0x6B, 0xA9, 0xE9,  // b....k..
                                /* 0550 */  0xF1, 0x21, 0x1D, 0x45, 0x27, 0xB8, 0xC3, 0x91,  // .!.E'...
                                /* 0558 */  0x20, 0xAB, 0x5C, 0x23, 0x29, 0x5D, 0x2F, 0xAB,  //  .\#)]/.
                                /* 0560 */  0x17, 0x09, 0xAB, 0x93, 0xC7, 0xC5, 0xF0, 0x5B,  // .......[
                                /* 0568 */  0xAE, 0x72, 0xE7, 0x31, 0xA1, 0x45, 0x3F, 0x06,  // .r.1.E?.
                                /* 0570 */  0xA2, 0xDB, 0xF9, 0x52, 0x00, 0xE3, 0x1F, 0x3F,  // ...R...?
                                /* 0578 */  0xD8, 0x03, 0xB9, 0xC1, 0xA2, 0x32, 0x89, 0xC8,  // .....2..
                                /* 0580 */  0x9D, 0xE7, 0x7F, 0xE7, 0xA4, 0x0F, 0x11, 0xCE,  // ........
                                /* 0588 */  0xCE, 0x3D, 0xCD, 0xA2, 0x66, 0x14, 0xD9, 0x45,  // .=..f..E
                                /* 0590 */  0x74, 0x38, 0xBD, 0xDE, 0xB3, 0xE7, 0x8B, 0x24,  // t8.....$
                                /* 0598 */  0xD9, 0xEE, 0x73, 0xC3, 0x42, 0xAB, 0x93, 0xFB,  // ..s.B...
                                /* 05A0 */  0xD0, 0x9F, 0x47, 0x96, 0x62, 0x6C, 0xAE, 0x31,  // ..G.bl.1
                                /* 05A8 */  0x9A, 0x61, 0x09, 0xA4, 0x90, 0x0E, 0x95, 0x1C,  // .a......
                                /* 05B0 */  0xC0, 0xD3, 0x35, 0x98, 0x5F, 0x3B, 0xA6, 0x9E,  // ..5._;..
                                /* 05B8 */  0xF3, 0xEB, 0x68, 0xC6, 0xBB, 0xA7, 0xA4, 0xEC,  // ..h.....
                                /* 05C0 */  0x99, 0x39, 0x2C, 0xDB, 0xF7, 0xAD, 0xD1, 0xAE,  // .9,.....
                                /* 05C8 */  0x71, 0x58, 0x4A, 0x85, 0x0F, 0x02, 0x64, 0xA0,  // qXJ...d.
                                /* 05D0 */  0x5D, 0x84, 0xF4, 0xAB, 0xC0, 0x99, 0x0A, 0xF3,  // ].......
                                /* 05D8 */  0x59, 0x94, 0xCB, 0xDC, 0xC8, 0x54, 0x4C, 0x6D,  // Y....TLm
                                /* 05E0 */  0xA8, 0x99, 0xF5, 0xF8, 0xF0, 0xEE, 0xF9, 0x78,  // .......x
                                /* 05E8 */  0x6A, 0x12, 0x8F, 0x7E, 0xA4, 0x45, 0xBE, 0x5E,  // j..~.E.^
                                /* 05F0 */  0x21, 0x7A, 0x71, 0x53, 0xD9, 0x13, 0x8A, 0x90,  // !zqS....
                                /* 05F8 */  0x58, 0xA9, 0x6C, 0x4F, 0xE5, 0x7C, 0xA7, 0x1E,  // X.lO.|..
                                /* 0600 */  0x80, 0x3F, 0x8F, 0x2A, 0x60, 0x50, 0xFA, 0x65,  // .?.*`P.e
                                /* 0608 */  0x3D, 0xDD, 0xFC, 0x46, 0x60, 0xDC, 0x6C, 0x46,  // =..F`.lF
                                /* 0610 */  0x8A, 0x55, 0x46, 0xDE, 0xCA, 0xB0, 0x81, 0x8E,  // .UF.....
                                /* 0618 */  0xFE, 0x9C, 0x60, 0x6B, 0x80, 0x32, 0x68, 0x90,  // ..`k.2h.
                                /* 0620 */  0xED, 0xF5, 0x60, 0xE3, 0xBE, 0xB9, 0x66, 0x25,  // ..`...f%
                                /* 0628 */  0x40, 0x5F, 0xF7, 0x3F, 0x87, 0x24, 0x44, 0x7A,  // @_.?.$Dz
                                /* 0630 */  0xCF, 0x37, 0xA1, 0x17, 0x2A, 0x05, 0x73, 0x39,  // .7..*.s9
                                /* 0638 */  0xC8, 0x12, 0xB1, 0x24, 0x30, 0xED, 0xB1, 0x4F,  // ...$0..O
                                /* 0640 */  0xE4, 0x2F, 0x0A, 0x2C, 0x6C, 0xD9, 0xAA, 0x01,  // ./.,l...
                                /* 0648 */  0x09, 0x3A, 0xE8, 0xE2, 0x8E, 0xDC, 0x73, 0xDC,  // .:....s.
                                /* 0650 */  0x01, 0x48, 0x42, 0x0B, 0x81, 0xAE, 0x56, 0x45,  // .HB...VE
                                /* 0658 */  0x3E, 0x47, 0x52, 0x29, 0xE6, 0x7C, 0x3E, 0x49,  // >GR).|>I
                                /* 0660 */  0xAE, 0xEB, 0xC7, 0x2D, 0xD4, 0x55, 0x84, 0xC1,  // ...-.U..
                                /* 0668 */  0xFC, 0x37, 0x1D, 0x65, 0x86, 0x50, 0x5F, 0x43,  // .7.e.P_C
                                /* 0670 */  0x00                                             // .
                            }
                        })
                    }
                    ElseIf ((GTYP == 0x03))
                    {
                        Return (Package (0x01)
                        {
                            Buffer (0x06BB)
                            {
                                /* 0000 */  0xE5, 0x1F, 0x94, 0x00, 0x00, 0x00, 0x00, 0x02,  // ........
                                /* 0008 */  0x00, 0x00, 0x00, 0x40, 0x67, 0x64, 0x64, 0x76,  // ...@gddv
                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x4F, 0x45, 0x4D, 0x20,  // ....OEM 
                                /* 0030 */  0x45, 0x78, 0x70, 0x6F, 0x72, 0x74, 0x65, 0x64,  // Exported
                                /* 0038 */  0x20, 0x44, 0x61, 0x74, 0x61, 0x56, 0x61, 0x75,  //  DataVau
                                /* 0040 */  0x6C, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // lt......
                                /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0068 */  0x00, 0x00, 0x00, 0x00, 0x34, 0xE6, 0x9E, 0x1E,  // ....4...
                                /* 0070 */  0x2E, 0x0E, 0x47, 0xCB, 0x71, 0x1A, 0x24, 0x62,  // ..G.q.$b
                                /* 0078 */  0x6F, 0x70, 0x81, 0x78, 0xC7, 0xD9, 0x6F, 0xAC,  // op.x..o.
                                /* 0080 */  0x0C, 0xAF, 0x09, 0x96, 0x91, 0x32, 0x1C, 0x2F,  // .....2./
                                /* 0088 */  0x42, 0xA2, 0xF0, 0xBC, 0x27, 0x06, 0x00, 0x00,  // B...'...
                                /* 0090 */  0x52, 0x45, 0x50, 0x4F, 0x5D, 0x00, 0x00, 0x00,  // REPO]...
                                /* 0098 */  0x01, 0xFE, 0x8D, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 00A0 */  0x00, 0x00, 0x72, 0x87, 0xCD, 0xFF, 0x6D, 0x24,  // ..r...m$
                                /* 00A8 */  0x47, 0xDB, 0x3D, 0x24, 0x92, 0xB4, 0x16, 0x6F,  // G.=$...o
                                /* 00B0 */  0x45, 0xD8, 0xC3, 0xF5, 0x66, 0x14, 0x9F, 0x22,  // E...f.."
                                /* 00B8 */  0xD7, 0xF7, 0xDE, 0x67, 0x90, 0x9A, 0xA2, 0x0D,  // ...g....
                                /* 00C0 */  0x39, 0x25, 0xAD, 0xC3, 0x1A, 0xAD, 0x52, 0x0B,  // 9%....R.
                                /* 00C8 */  0x75, 0x38, 0xE1, 0xA4, 0x14, 0x44, 0x51, 0x3D,  // u8...DQ=
                                /* 00D0 */  0xA5, 0x7D, 0xDA, 0x6E, 0x5C, 0x3E, 0x10, 0xBD,  // .}.n\>..
                                /* 00D8 */  0x96, 0xE6, 0x47, 0x91, 0x05, 0xD0, 0xA8, 0x9F,  // ..G.....
                                /* 00E0 */  0x8A, 0x83, 0xE2, 0xA5, 0xDC, 0xF4, 0xAE, 0xC6,  // ........
                                /* 00E8 */  0xD5, 0x4B, 0x51, 0x8A, 0xD6, 0xE5, 0xF2, 0x7B,  // .KQ....{
                                /* 00F0 */  0xB2, 0x34, 0x0E, 0x72, 0x4A, 0x1D, 0x1B, 0x54,  // .4.rJ..T
                                /* 00F8 */  0x4C, 0x09, 0x01, 0xC7, 0xCB, 0x59, 0x29, 0xCF,  // L....Y).
                                /* 0100 */  0xFD, 0x23, 0x8A, 0x96, 0x2A, 0x7F, 0xB8, 0xA4,  // .#..*...
                                /* 0108 */  0x13, 0xD9, 0x88, 0x4D, 0xB5, 0x16, 0xDE, 0xBD,  // ...M....
                                /* 0110 */  0x4D, 0xA6, 0xB3, 0x0F, 0x60, 0xDC, 0x5C, 0x1A,  // M...`.\.
                                /* 0118 */  0x38, 0x23, 0xF7, 0xC2, 0x04, 0x81, 0x90, 0x12,  // 8#......
                                /* 0120 */  0xCA, 0x3F, 0x8D, 0x59, 0x15, 0xD1, 0x5E, 0xBA,  // .?.Y..^.
                                /* 0128 */  0xC5, 0xE3, 0x2C, 0x5F, 0x2A, 0x04, 0x9B, 0x70,  // ..,_*..p
                                /* 0130 */  0x00, 0xA5, 0x66, 0x21, 0xC0, 0x31, 0xDE, 0x55,  // ..f!.1.U
                                /* 0138 */  0x95, 0xD3, 0x33, 0x2B, 0xB9, 0xA1, 0x5A, 0x43,  // ..3+..ZC
                                /* 0140 */  0x2C, 0x2F, 0x42, 0xF9, 0x24, 0x20, 0xF5, 0x92,  // ,/B.$ ..
                                /* 0148 */  0xD7, 0xA5, 0xDE, 0xB6, 0xD7, 0xC7, 0x4E, 0xBA,  // ......N.
                                /* 0150 */  0x3F, 0x48, 0x48, 0x2B, 0x86, 0x9A, 0xBF, 0x96,  // ?HH+....
                                /* 0158 */  0x7C, 0x16, 0xBC, 0xDA, 0xEF, 0x28, 0x81, 0xA9,  // |....(..
                                /* 0160 */  0x8D, 0x58, 0x7C, 0x3F, 0x33, 0x48, 0xE2, 0xDC,  // .X|?3H..
                                /* 0168 */  0x5A, 0x15, 0xF0, 0xB8, 0x8A, 0x65, 0xF6, 0xD3,  // Z....e..
                                /* 0170 */  0xC5, 0x6C, 0xDE, 0x88, 0x40, 0xA2, 0xEB, 0xEA,  // .l..@...
                                /* 0178 */  0xD8, 0xCD, 0x95, 0x49, 0x62, 0x5B, 0xFE, 0xEA,  // ...Ib[..
                                /* 0180 */  0x9E, 0xC0, 0x23, 0xCC, 0xD7, 0x02, 0xA6, 0xE7,  // ..#.....
                                /* 0188 */  0xD7, 0xFC, 0x45, 0x1F, 0x85, 0x3E, 0xDE, 0x91,  // ..E..>..
                                /* 0190 */  0x91, 0x52, 0x06, 0xBB, 0x9E, 0x45, 0x54, 0x52,  // .R...ETR
                                /* 0198 */  0xCC, 0x9A, 0x72, 0x27, 0x3B, 0x3B, 0x95, 0xB4,  // ..r';;..
                                /* 01A0 */  0xBA, 0x24, 0x6D, 0x5E, 0x5D, 0x61, 0x20, 0xCE,  // .$m^]a .
                                /* 01A8 */  0x17, 0xCD, 0xFE, 0x8D, 0xDF, 0xE9, 0x69, 0x0D,  // ......i.
                                /* 01B0 */  0xAC, 0x77, 0x08, 0xDB, 0xAF, 0x0C, 0xE2, 0xC2,  // .w......
                                /* 01B8 */  0x99, 0x8C, 0x58, 0xFA, 0xFE, 0xD9, 0x90, 0x07,  // ..X.....
                                /* 01C0 */  0x46, 0xC9, 0xE3, 0x3B, 0xBC, 0x90, 0xD2, 0x9C,  // F..;....
                                /* 01C8 */  0x65, 0x55, 0xF5, 0x9E, 0x07, 0xFC, 0x15, 0xCF,  // eU......
                                /* 01D0 */  0x36, 0x38, 0x4C, 0x3A, 0xA5, 0x51, 0xFC, 0xD1,  // 68L:.Q..
                                /* 01D8 */  0x56, 0xA9, 0x1C, 0x83, 0xA6, 0xE2, 0xC2, 0xB6,  // V.......
                                /* 01E0 */  0xAC, 0x25, 0x72, 0xB8, 0x93, 0x39, 0x50, 0xBF,  // .%r..9P.
                                /* 01E8 */  0x4D, 0x0B, 0xE8, 0xE5, 0x62, 0xE3, 0x38, 0x21,  // M...b.8!
                                /* 01F0 */  0xCC, 0x86, 0x4E, 0x5A, 0x4F, 0xC6, 0x94, 0x74,  // ..NZO..t
                                /* 01F8 */  0xAB, 0x19, 0x25, 0xD7, 0x97, 0x15, 0x16, 0x0B,  // ..%.....
                                /* 0200 */  0x05, 0x70, 0x1B, 0xE8, 0xB3, 0xC0, 0xAB, 0x21,  // .p.....!
                                /* 0208 */  0x76, 0xE5, 0x82, 0xCF, 0x7F, 0xA9, 0x2C, 0xB0,  // v.....,.
                                /* 0210 */  0x80, 0xB1, 0xE1, 0x83, 0x1B, 0x6D, 0x31, 0xEC,  // .....m1.
                                /* 0218 */  0x1A, 0x62, 0xA6, 0xF6, 0xE9, 0x9B, 0x2A, 0xB9,  // .b....*.
                                /* 0220 */  0xE2, 0xD4, 0xF0, 0x55, 0x27, 0xC2, 0x36, 0x74,  // ...U'.6t
                                /* 0228 */  0x5C, 0x93, 0x1A, 0x65, 0x59, 0x62, 0x5B, 0xAA,  // \..eYb[.
                                /* 0230 */  0x0F, 0x4B, 0xD2, 0xF9, 0xC2, 0x56, 0xAC, 0x83,  // .K...V..
                                /* 0238 */  0x35, 0x99, 0x4C, 0x87, 0xC4, 0x55, 0x6F, 0xAE,  // 5.L..Uo.
                                /* 0240 */  0xA9, 0x8F, 0x8C, 0x1B, 0xED, 0xCB, 0xA5, 0xA7,  // ........
                                /* 0248 */  0xD0, 0xB5, 0xB7, 0x08, 0x6B, 0x58, 0x76, 0x63,  // ....kXvc
                                /* 0250 */  0xC3, 0xAD, 0xBC, 0xBB, 0x0B, 0x19, 0x0F, 0xF9,  // ........
                                /* 0258 */  0x43, 0xCB, 0x32, 0xF4, 0xE0, 0x79, 0xF0, 0x6D,  // C.2..y.m
                                /* 0260 */  0xB8, 0x6B, 0xD1, 0xE2, 0x6A, 0x31, 0xC1, 0x97,  // .k..j1..
                                /* 0268 */  0x60, 0x07, 0x35, 0x8E, 0x4A, 0x67, 0xD8, 0x8A,  // `.5.Jg..
                                /* 0270 */  0x8B, 0xDD, 0xD3, 0x33, 0x07, 0x42, 0x43, 0x4B,  // ...3.BCK
                                /* 0278 */  0x17, 0xC7, 0xC0, 0x82, 0x33, 0xC1, 0x60, 0xED,  // ....3.`.
                                /* 0280 */  0xBE, 0x83, 0x07, 0x2C, 0x0F, 0x10, 0x5A, 0x72,  // ...,..Zr
                                /* 0288 */  0x00, 0x4E, 0x76, 0xC3, 0x6F, 0x91, 0xD6, 0xB0,  // .Nv.o...
                                /* 0290 */  0xD5, 0xCB, 0xAA, 0x39, 0xAD, 0x42, 0x29, 0xFD,  // ...9.B).
                                /* 0298 */  0xF7, 0xC5, 0xFF, 0xBB, 0x6C, 0xF9, 0xC0, 0x6A,  // ....l..j
                                /* 02A0 */  0xB8, 0x81, 0x79, 0xDA, 0x68, 0x0D, 0xA3, 0x89,  // ..y.h...
                                /* 02A8 */  0x3E, 0xAF, 0x04, 0xD6, 0x5E, 0x49, 0x0E, 0x13,  // >...^I..
                                /* 02B0 */  0x23, 0x2F, 0xA1, 0x1F, 0xE6, 0x18, 0x2C, 0xE5,  // #/....,.
                                /* 02B8 */  0xB4, 0x25, 0xAD, 0xDB, 0xEE, 0xA6, 0x44, 0x80,  // .%....D.
                                /* 02C0 */  0x40, 0xEB, 0xD8, 0xC6, 0x44, 0x10, 0x53, 0x19,  // @...D.S.
                                /* 02C8 */  0x1A, 0x32, 0xF0, 0xAF, 0xB5, 0x7E, 0xB7, 0x9A,  // .2...~..
                                /* 02D0 */  0x25, 0x12, 0xD6, 0x89, 0xD9, 0x39, 0x78, 0x4B,  // %....9xK
                                /* 02D8 */  0x77, 0xAB, 0xE8, 0xB5, 0x76, 0xD3, 0xBF, 0x38,  // w...v..8
                                /* 02E0 */  0x42, 0xF8, 0xA9, 0xDC, 0x7E, 0x98, 0x21, 0x10,  // B...~.!.
                                /* 02E8 */  0xCF, 0x15, 0xC1, 0xDE, 0x76, 0xF4, 0x96, 0xAA,  // ....v...
                                /* 02F0 */  0x2B, 0x63, 0x82, 0x9B, 0x62, 0xAB, 0x43, 0x3C,  // +c..b.C<
                                /* 02F8 */  0x80, 0x72, 0x4A, 0x3C, 0xFD, 0x90, 0x3C, 0xC9,  // .rJ<..<.
                                /* 0300 */  0x03, 0xF0, 0x5C, 0x0B, 0xB2, 0xEC, 0x26, 0x3E,  // ..\...&>
                                /* 0308 */  0x8A, 0xEE, 0x40, 0x23, 0x3E, 0xC6, 0xFD, 0xBB,  // ..@#>...
                                /* 0310 */  0x48, 0x6C, 0x7B, 0xC4, 0xF2, 0x04, 0x53, 0x87,  // Hl{...S.
                                /* 0318 */  0xFE, 0xCA, 0xFC, 0xAD, 0xBE, 0x4C, 0xF7, 0xF9,  // .....L..
                                /* 0320 */  0xBB, 0xAF, 0xAB, 0x01, 0x88, 0x2C, 0x07, 0xE1,  // .....,..
                                /* 0328 */  0xD2, 0xE2, 0x5A, 0x1C, 0x16, 0x2C, 0x41, 0x29,  // ..Z..,A)
                                /* 0330 */  0xDF, 0xCD, 0xA1, 0xAB, 0x86, 0x42, 0x88, 0xC3,  // .....B..
                                /* 0338 */  0x97, 0x7D, 0x3A, 0x82, 0x1C, 0x10, 0xF5, 0xCC,  // .}:.....
                                /* 0340 */  0x2C, 0x71, 0x39, 0x03, 0xA9, 0xB7, 0xD9, 0x5E,  // ,q9....^
                                /* 0348 */  0x93, 0x75, 0xD9, 0x54, 0x0C, 0x6F, 0x0C, 0xD1,  // .u.T.o..
                                /* 0350 */  0xA9, 0xF9, 0x83, 0xEE, 0x15, 0x11, 0xE0, 0xE5,  // ........
                                /* 0358 */  0x03, 0x88, 0x89, 0x97, 0x9C, 0x44, 0xDD, 0xAC,  // .....D..
                                /* 0360 */  0xE0, 0x76, 0xED, 0x3D, 0xDD, 0x39, 0x2D, 0x4D,  // .v.=.9-M
                                /* 0368 */  0xC6, 0x55, 0x7A, 0xD6, 0x06, 0xC3, 0x6D, 0x4D,  // .Uz...mM
                                /* 0370 */  0xFC, 0x46, 0x8A, 0x6F, 0xC3, 0x57, 0xB4, 0x71,  // .F.o.W.q
                                /* 0378 */  0xC9, 0x51, 0x56, 0x48, 0x23, 0xA4, 0x5C, 0x3A,  // .QVH#.\:
                                /* 0380 */  0x1F, 0xD6, 0x2F, 0x60, 0x79, 0xFD, 0x67, 0x42,  // ../`y.gB
                                /* 0388 */  0x31, 0x77, 0xCB, 0x5E, 0x04, 0x4D, 0x64, 0x0E,  // 1w.^.Md.
                                /* 0390 */  0xB1, 0x60, 0xD5, 0x30, 0x81, 0x71, 0x40, 0x9C,  // .`.0.q@.
                                /* 0398 */  0xD1, 0xC4, 0xB1, 0x9A, 0x59, 0x68, 0xF0, 0x77,  // ....Yh.w
                                /* 03A0 */  0x79, 0x9A, 0xD6, 0xED, 0xCF, 0x9D, 0x52, 0x07,  // y.....R.
                                /* 03A8 */  0x8D, 0x9F, 0x69, 0xA4, 0x5A, 0x01, 0x8C, 0xDC,  // ..i.Z...
                                /* 03B0 */  0xD7, 0xAB, 0xF6, 0x64, 0x9E, 0xD9, 0x11, 0x0D,  // ...d....
                                /* 03B8 */  0xBE, 0x66, 0xD0, 0x13, 0x13, 0xC9, 0x58, 0xBE,  // .f....X.
                                /* 03C0 */  0xAC, 0x09, 0x62, 0xE9, 0x5B, 0x3C, 0x33, 0x6F,  // ..b.[<3o
                                /* 03C8 */  0xF0, 0x3F, 0x91, 0xDA, 0x21, 0x01, 0x0F, 0xC9,  // .?..!...
                                /* 03D0 */  0xC3, 0x5C, 0x95, 0x78, 0x72, 0x64, 0x1B, 0x16,  // .\.xrd..
                                /* 03D8 */  0x95, 0x4E, 0xD5, 0x29, 0xD1, 0xF8, 0x1B, 0x16,  // .N.)....
                                /* 03E0 */  0x0D, 0xC5, 0x7B, 0xA4, 0x73, 0x45, 0x64, 0x7C,  // ..{.sEd|
                                /* 03E8 */  0x09, 0xA9, 0x8C, 0xE4, 0x97, 0x4D, 0x52, 0xDA,  // .....MR.
                                /* 03F0 */  0x6A, 0x47, 0x54, 0xE6, 0x5C, 0xAA, 0x4E, 0xFA,  // jGT.\.N.
                                /* 03F8 */  0x69, 0x25, 0xA0, 0x47, 0xA3, 0xFB, 0x06, 0x37,  // i%.G...7
                                /* 0400 */  0xFF, 0x6E, 0xBB, 0xF0, 0xE9, 0x2A, 0xE7, 0xB4,  // .n...*..
                                /* 0408 */  0x33, 0xB3, 0xAF, 0x91, 0x69, 0xE5, 0x62, 0x85,  // 3...i.b.
                                /* 0410 */  0x80, 0x7F, 0x96, 0xC6, 0x9F, 0x32, 0xF5, 0x82,  // .....2..
                                /* 0418 */  0x14, 0xF3, 0xF5, 0x8F, 0x5A, 0x61, 0x72, 0xF0,  // ....Zar.
                                /* 0420 */  0x81, 0x83, 0xBF, 0x21, 0xAD, 0x7D, 0x22, 0x43,  // ...!.}"C
                                /* 0428 */  0xA8, 0xF2, 0xE8, 0xE5, 0x03, 0x76, 0x1A, 0xD3,  // .....v..
                                /* 0430 */  0xF9, 0x09, 0x3B, 0x3D, 0xD9, 0xD1, 0xFE, 0x03,  // ..;=....
                                /* 0438 */  0xD8, 0x8D, 0x47, 0x5D, 0x45, 0x32, 0xE7, 0xB8,  // ..G]E2..
                                /* 0440 */  0x62, 0x53, 0xEB, 0xBE, 0x98, 0x85, 0xC4, 0x33,  // bS.....3
                                /* 0448 */  0xA4, 0xEA, 0x7B, 0xD1, 0x5E, 0xAF, 0x3C, 0xEA,  // ..{.^.<.
                                /* 0450 */  0xD7, 0x51, 0xE0, 0x14, 0x43, 0x91, 0x10, 0xF8,  // .Q..C...
                                /* 0458 */  0xCF, 0x9A, 0x89, 0x09, 0x46, 0xC0, 0xAA, 0x01,  // ....F...
                                /* 0460 */  0x3A, 0x56, 0xC6, 0x81, 0x2F, 0x73, 0x33, 0x3D,  // :V../s3=
                                /* 0468 */  0x30, 0x8A, 0x50, 0xC3, 0xFB, 0xEF, 0x24, 0x23,  // 0.P...$#
                                /* 0470 */  0xB2, 0x52, 0xCD, 0x72, 0xED, 0xCA, 0xB6, 0x92,  // .R.r....
                                /* 0478 */  0x3F, 0xBA, 0x98, 0x3E, 0x3D, 0x91, 0xDA, 0xF3,  // ?..>=...
                                /* 0480 */  0x1B, 0x36, 0x50, 0x20, 0xAD, 0x32, 0x0C, 0x71,  // .6P .2.q
                                /* 0488 */  0x5D, 0x5A, 0x10, 0xAC, 0xC0, 0x69, 0xD9, 0x98,  // ]Z...i..
                                /* 0490 */  0x22, 0x9C, 0xDD, 0x0E, 0x2E, 0x3C, 0x34, 0xDA,  // "....<4.
                                /* 0498 */  0x2C, 0xFE, 0x27, 0xD1, 0x51, 0xD1, 0xE0, 0xF4,  // ,.'.Q...
                                /* 04A0 */  0xBB, 0xBC, 0x83, 0xD2, 0x17, 0xC3, 0x8F, 0x9A,  // ........
                                /* 04A8 */  0x34, 0x0E, 0x7E, 0xBC, 0xC8, 0xE0, 0x09, 0xB8,  // 4.~.....
                                /* 04B0 */  0x06, 0xFC, 0xE3, 0xF3, 0xCE, 0x6B, 0x76, 0xDA,  // .....kv.
                                /* 04B8 */  0x4F, 0x32, 0x1C, 0x04, 0x66, 0x99, 0x18, 0x51,  // O2..f..Q
                                /* 04C0 */  0x91, 0x4B, 0x23, 0x29, 0xB8, 0xB9, 0xCD, 0xC7,  // .K#)....
                                /* 04C8 */  0xBC, 0xF7, 0x1D, 0x6E, 0x19, 0x3C, 0x55, 0x0B,  // ...n.<U.
                                /* 04D0 */  0x2D, 0x8D, 0xBE, 0xC3, 0x7E, 0xA5, 0x08, 0x17,  // -...~...
                                /* 04D8 */  0x55, 0x00, 0x6F, 0x78, 0xA4, 0x44, 0x9C, 0xF2,  // U.ox.D..
                                /* 04E0 */  0xF6, 0xFD, 0x52, 0xF9, 0x0E, 0x11, 0xF1, 0x4E,  // ..R....N
                                /* 04E8 */  0x19, 0x21, 0x01, 0x75, 0x7F, 0x4C, 0x79, 0x1B,  // .!.u.Ly.
                                /* 04F0 */  0xCB, 0x69, 0xF2, 0x0C, 0x57, 0x0F, 0xBC, 0xB6,  // .i..W...
                                /* 04F8 */  0xB6, 0x03, 0xF7, 0x35, 0x82, 0xB7, 0x4C, 0xF5,  // ...5..L.
                                /* 0500 */  0xC6, 0xA3, 0x06, 0xFA, 0xD6, 0x0C, 0xB8, 0xCC,  // ........
                                /* 0508 */  0xBE, 0x53, 0x0E, 0xBC, 0x22, 0x03, 0x00, 0xDB,  // .S.."...
                                /* 0510 */  0x4D, 0x09, 0x75, 0x8D, 0x93, 0x7B, 0xE5, 0xBA,  // M.u..{..
                                /* 0518 */  0x7B, 0x44, 0x22, 0x97, 0x07, 0x89, 0xF1, 0x57,  // {D"....W
                                /* 0520 */  0x36, 0xAA, 0xC8, 0x97, 0x25, 0xEE, 0x46, 0x38,  // 6...%.F8
                                /* 0528 */  0xCC, 0xB8, 0xD1, 0x3E, 0x47, 0x46, 0xDA, 0x2E,  // ...>GF..
                                /* 0530 */  0x21, 0x39, 0xDA, 0xEE, 0x6A, 0xC8, 0xBE, 0x58,  // !9..j..X
                                /* 0538 */  0x63, 0x66, 0x87, 0xCA, 0x83, 0x73, 0x61, 0x80,  // cf...sa.
                                /* 0540 */  0x80, 0xAF, 0xD8, 0x0F, 0xD1, 0xA1, 0x59, 0xDD,  // ......Y.
                                /* 0548 */  0x0E, 0xDA, 0x62, 0xC1, 0x3F, 0xCD, 0xA9, 0x0E,  // ..b.?...
                                /* 0550 */  0x2F, 0x28, 0xAB, 0x34, 0x37, 0xB2, 0x51, 0x0A,  // /(.47.Q.
                                /* 0558 */  0xE5, 0xC0, 0xC8, 0xA4, 0x13, 0x4E, 0xF2, 0xEA,  // .....N..
                                /* 0560 */  0x82, 0x62, 0xA9, 0xAE, 0xBF, 0x33, 0xED, 0x89,  // .b...3..
                                /* 0568 */  0x92, 0x61, 0x33, 0xFC, 0x68, 0xC8, 0x53, 0xC1,  // .a3.h.S.
                                /* 0570 */  0xFD, 0x60, 0x88, 0x52, 0xE9, 0x6D, 0xE0, 0xE3,  // .`.R.m..
                                /* 0578 */  0xD7, 0xB5, 0x0C, 0x9C, 0x02, 0xDA, 0x7E, 0x65,  // ......~e
                                /* 0580 */  0x06, 0xED, 0x83, 0x11, 0xB1, 0x96, 0x52, 0x01,  // ......R.
                                /* 0588 */  0x97, 0x7C, 0x65, 0xF9, 0x96, 0x7A, 0x15, 0x07,  // .|e..z..
                                /* 0590 */  0x02, 0x1C, 0xFE, 0xFC, 0x3D, 0x3F, 0x72, 0xAD,  // ....=?r.
                                /* 0598 */  0xF3, 0x7C, 0x0D, 0x80, 0x0A, 0x31, 0x53, 0xA4,  // .|...1S.
                                /* 05A0 */  0x0C, 0xB2, 0x1F, 0xA9, 0x97, 0xED, 0xA1, 0x06,  // ........
                                /* 05A8 */  0xCF, 0xA9, 0xA2, 0x40, 0x99, 0xB8, 0x11, 0xCC,  // ...@....
                                /* 05B0 */  0xE9, 0x44, 0x04, 0x51, 0x21, 0x76, 0xF7, 0x75,  // .D.Q!v.u
                                /* 05B8 */  0xFB, 0x5B, 0xBC, 0x32, 0xE5, 0x33, 0x46, 0x77,  // .[.2.3Fw
                                /* 05C0 */  0x33, 0x7A, 0x86, 0x7A, 0x62, 0x46, 0xAB, 0xF1,  // 3z.zbF..
                                /* 05C8 */  0x6D, 0x4B, 0xEA, 0x60, 0x4D, 0xE1, 0x61, 0x0D,  // mK.`M.a.
                                /* 05D0 */  0x95, 0x80, 0xD7, 0x59, 0xEF, 0xDA, 0x87, 0x16,  // ...Y....
                                /* 05D8 */  0xD1, 0xFE, 0x8D, 0x32, 0x42, 0x17, 0x9E, 0xEB,  // ...2B...
                                /* 05E0 */  0x45, 0x03, 0x93, 0xB0, 0xBD, 0x6A, 0xE7, 0x59,  // E....j.Y
                                /* 05E8 */  0x09, 0x04, 0x74, 0x3A, 0x48, 0xD2, 0x19, 0x83,  // ..t:H...
                                /* 05F0 */  0x86, 0x4A, 0xE5, 0xCA, 0x7F, 0x74, 0x2D, 0xD0,  // .J...t-.
                                /* 05F8 */  0xAB, 0x79, 0x59, 0x90, 0x9A, 0xF4, 0xA4, 0xDA,  // .yY.....
                                /* 0600 */  0xE7, 0xDB, 0xBC, 0xC6, 0xB3, 0xDC, 0x85, 0xE0,  // ........
                                /* 0608 */  0x1D, 0x8C, 0x55, 0x05, 0x10, 0x70, 0xC3, 0xAA,  // ..U..p..
                                /* 0610 */  0xC2, 0xD0, 0x4E, 0x7F, 0xBA, 0xAA, 0x73, 0xD7,  // ..N...s.
                                /* 0618 */  0x0A, 0xE3, 0x33, 0x7C, 0x9C, 0x6B, 0xCE, 0xA2,  // ..3|.k..
                                /* 0620 */  0x42, 0x26, 0x16, 0x99, 0x7F, 0x1D, 0x5B, 0x11,  // B&....[.
                                /* 0628 */  0x17, 0x38, 0xC6, 0x79, 0x78, 0xBD, 0xC1, 0xC2,  // .8.yx...
                                /* 0630 */  0xDE, 0xB7, 0x6C, 0xD1, 0x7B, 0x8C, 0x14, 0xD7,  // ..l.{...
                                /* 0638 */  0xD7, 0x83, 0x4B, 0x8C, 0x82, 0x32, 0x2C, 0xE9,  // ..K..2,.
                                /* 0640 */  0x8D, 0x84, 0xFD, 0x11, 0x70, 0xB1, 0x76, 0x10,  // ....p.v.
                                /* 0648 */  0xD3, 0x5C, 0x0D, 0x24, 0xD8, 0x18, 0x17, 0x8E,  // .\.$....
                                /* 0650 */  0xCB, 0x66, 0xEF, 0x09, 0x24, 0xBF, 0x62, 0xA7,  // .f..$.b.
                                /* 0658 */  0x08, 0x29, 0x1F, 0x18, 0xA3, 0x42, 0x97, 0x1B,  // .)...B..
                                /* 0660 */  0x19, 0xF6, 0xD9, 0x6B, 0xAB, 0x30, 0xBF, 0x7B,  // ...k.0.{
                                /* 0668 */  0x87, 0x24, 0xBA, 0x32, 0x9A, 0x9C, 0xD3, 0x37,  // .$.2...7
                                /* 0670 */  0xBF, 0xC3, 0x8D, 0xEC, 0x0A, 0x62, 0x3F, 0xFF,  // .....b?.
                                /* 0678 */  0x82, 0xC9, 0xF6, 0xBD, 0x0C, 0x1A, 0x2F, 0x18,  // ....../.
                                /* 0680 */  0x52, 0xEC, 0xA6, 0x70, 0xCA, 0x3A, 0x5F, 0x5A,  // R..p.:_Z
                                /* 0688 */  0x38, 0x3E, 0x2D, 0xA5, 0x04, 0x88, 0x55, 0xEC,  // 8>-...U.
                                /* 0690 */  0x19, 0xC2, 0x06, 0xFA, 0x02, 0x22, 0xB6, 0x68,  // .....".h
                                /* 0698 */  0xEA, 0xE4, 0x4E, 0xF8, 0x18, 0xF9, 0x1C, 0x39,  // ..N....9
                                /* 06A0 */  0x85, 0x07, 0xEA, 0x1E, 0x8D, 0x04, 0x1A, 0x10,  // ........
                                /* 06A8 */  0xC7, 0x3E, 0x34, 0xD8, 0x81, 0xE7, 0x22, 0x5A,  // .>4..."Z
                                /* 06B0 */  0xD9, 0x68, 0xBB, 0xDE, 0x4E, 0x13, 0x7E, 0xC3,  // .h..N.~.
                                /* 06B8 */  0x74, 0x61, 0x4F                                 // taO
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x01)
                        {
                            Buffer (0x0680)
                            {
                                /* 0000 */  0xE5, 0x1F, 0x94, 0x00, 0x00, 0x00, 0x00, 0x02,  // ........
                                /* 0008 */  0x00, 0x00, 0x00, 0x40, 0x67, 0x64, 0x64, 0x76,  // ...@gddv
                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x4F, 0x45, 0x4D, 0x20,  // ....OEM 
                                /* 0030 */  0x45, 0x78, 0x70, 0x6F, 0x72, 0x74, 0x65, 0x64,  // Exported
                                /* 0038 */  0x20, 0x44, 0x61, 0x74, 0x61, 0x56, 0x61, 0x75,  //  DataVau
                                /* 0040 */  0x6C, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // lt......
                                /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0068 */  0x00, 0x00, 0x00, 0x00, 0x5E, 0xAB, 0xC7, 0x6E,  // ....^..n
                                /* 0070 */  0x18, 0xE4, 0x02, 0xD6, 0x9B, 0xED, 0xF1, 0xC6,  // ........
                                /* 0078 */  0xF1, 0xD9, 0x2A, 0x0D, 0x7E, 0x4F, 0x8E, 0x3C,  // ..*.~O.<
                                /* 0080 */  0xB7, 0xB3, 0xEF, 0x46, 0x23, 0xD0, 0xEE, 0x9D,  // ...F#...
                                /* 0088 */  0x64, 0xAD, 0x5B, 0xAA, 0xEC, 0x05, 0x00, 0x00,  // d.[.....
                                /* 0090 */  0x52, 0x45, 0x50, 0x4F, 0x5D, 0x00, 0x00, 0x00,  // REPO]...
                                /* 0098 */  0x01, 0xDA, 0x8C, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 00A0 */  0x00, 0x00, 0x72, 0x87, 0xCD, 0xFF, 0x6D, 0x24,  // ..r...m$
                                /* 00A8 */  0x47, 0xDB, 0x3D, 0x24, 0x92, 0xB4, 0x16, 0x6F,  // G.=$...o
                                /* 00B0 */  0x45, 0xD8, 0xC3, 0xF5, 0x66, 0x14, 0x9F, 0x22,  // E...f.."
                                /* 00B8 */  0xD7, 0xF7, 0xDE, 0x67, 0x90, 0x9A, 0xA2, 0x0D,  // ...g....
                                /* 00C0 */  0x39, 0x25, 0xAD, 0xC3, 0x1A, 0xAD, 0x52, 0x0B,  // 9%....R.
                                /* 00C8 */  0x75, 0x38, 0xE1, 0xA4, 0x14, 0x42, 0xA9, 0x25,  // u8...B.%
                                /* 00D0 */  0x69, 0xF6, 0xC7, 0x5A, 0xB7, 0x25, 0x81, 0xF5,  // i..Z.%..
                                /* 00D8 */  0x1C, 0x27, 0xD1, 0x3A, 0x78, 0x46, 0x23, 0xCC,  // .'.:xF#.
                                /* 00E0 */  0x1A, 0x4D, 0xC6, 0x10, 0x3B, 0x54, 0xDA, 0x81,  // .M..;T..
                                /* 00E8 */  0xF0, 0x8E, 0x97, 0xA4, 0xC9, 0x14, 0x01, 0x14,  // ........
                                /* 00F0 */  0x63, 0xB9, 0xB3, 0x91, 0x07, 0xFF, 0x72, 0xA0,  // c.....r.
                                /* 00F8 */  0x4A, 0x66, 0xEB, 0x52, 0x06, 0x98, 0x6C, 0x44,  // Jf.R..lD
                                /* 0100 */  0xEA, 0x97, 0x9B, 0x85, 0x69, 0x7C, 0x66, 0x3D,  // ....i|f=
                                /* 0108 */  0xE5, 0x48, 0x03, 0x33, 0x98, 0x71, 0xFE, 0x74,  // .H.3.q.t
                                /* 0110 */  0xE4, 0xC7, 0x6A, 0xB2, 0x75, 0xFE, 0x3E, 0xD1,  // ..j.u.>.
                                /* 0118 */  0x2F, 0xDA, 0x1F, 0xF4, 0x34, 0xFE, 0x43, 0x3E,  // /...4.C>
                                /* 0120 */  0x38, 0x36, 0xCB, 0xB2, 0x57, 0xEF, 0xE9, 0x26,  // 86..W..&
                                /* 0128 */  0x71, 0x64, 0x9D, 0x7B, 0x98, 0x5E, 0x7E, 0xFD,  // qd.{.^~.
                                /* 0130 */  0x7D, 0xBB, 0x92, 0x0F, 0x17, 0xF7, 0x1E, 0x4E,  // }......N
                                /* 0138 */  0xCE, 0xB7, 0x5A, 0xFD, 0x63, 0x3A, 0xB3, 0x18,  // ..Z.c:..
                                /* 0140 */  0xCE, 0x1C, 0x25, 0xC6, 0xE4, 0xFB, 0xED, 0x1F,  // ..%.....
                                /* 0148 */  0xE7, 0x12, 0xA1, 0x2B, 0xF7, 0x8F, 0xD8, 0x56,  // ...+...V
                                /* 0150 */  0x58, 0xCC, 0x86, 0x5A, 0xF1, 0xB4, 0xD7, 0xEB,  // X..Z....
                                /* 0158 */  0xAE, 0xAD, 0xD4, 0x36, 0x2F, 0x1E, 0x09, 0x13,  // ...6/...
                                /* 0160 */  0xCA, 0xC2, 0xFF, 0x94, 0x3E, 0x99, 0xC9, 0x51,  // ....>..Q
                                /* 0168 */  0xAB, 0xE6, 0x4A, 0x0C, 0x88, 0x9E, 0x52, 0xBD,  // ..J...R.
                                /* 0170 */  0x3B, 0xA1, 0x9B, 0x18, 0x34, 0xD4, 0xCD, 0x1E,  // ;...4...
                                /* 0178 */  0x8C, 0x45, 0xDA, 0xF0, 0x3E, 0x8A, 0x9C, 0x38,  // .E..>..8
                                /* 0180 */  0x78, 0x54, 0xCA, 0xED, 0x7E, 0x95, 0xA2, 0xC2,  // xT..~...
                                /* 0188 */  0x33, 0x26, 0x2A, 0x41, 0x0C, 0xA9, 0x5C, 0x7B,  // 3&*A..\{
                                /* 0190 */  0xF2, 0x2B, 0x89, 0x2E, 0xC9, 0x81, 0x93, 0x40,  // .+.....@
                                /* 0198 */  0x99, 0x33, 0x2C, 0xCF, 0x5A, 0xFF, 0x10, 0x7B,  // .3,.Z..{
                                /* 01A0 */  0x87, 0xC8, 0x4A, 0xC0, 0xD5, 0x35, 0x30, 0xD6,  // ..J..50.
                                /* 01A8 */  0x81, 0xE6, 0xC7, 0xB6, 0x4E, 0x60, 0xCD, 0xE2,  // ....N`..
                                /* 01B0 */  0x34, 0x81, 0x96, 0x53, 0x57, 0xFE, 0x15, 0x4F,  // 4..SW..O
                                /* 01B8 */  0xDC, 0x40, 0xE4, 0xDD, 0xCB, 0x78, 0xA0, 0xB0,  // .@...x..
                                /* 01C0 */  0x2C, 0xA2, 0xEB, 0x01, 0x4F, 0xCA, 0x45, 0x34,  // ,...O.E4
                                /* 01C8 */  0x54, 0xCB, 0x74, 0x49, 0xAF, 0x73, 0x6C, 0x78,  // T.tI.slx
                                /* 01D0 */  0x19, 0xA6, 0xFF, 0xDB, 0x7D, 0xA3, 0x41, 0xE5,  // ....}.A.
                                /* 01D8 */  0xBC, 0x7A, 0x54, 0x53, 0x55, 0x5C, 0x58, 0x4E,  // .zTSU\XN
                                /* 01E0 */  0x6B, 0x48, 0x32, 0x89, 0x41, 0x5F, 0x21, 0x34,  // kH2.A_!4
                                /* 01E8 */  0x70, 0xDF, 0x79, 0xA8, 0xA5, 0x2C, 0xC1, 0x5D,  // p.y..,.]
                                /* 01F0 */  0x31, 0x32, 0x6E, 0x10, 0x55, 0x78, 0x09, 0x1E,  // 12n.Ux..
                                /* 01F8 */  0x64, 0x84, 0x05, 0x63, 0x80, 0x76, 0x77, 0xA4,  // d..c.vw.
                                /* 0200 */  0xD8, 0x63, 0xDF, 0x6E, 0x38, 0x28, 0x22, 0x2A,  // .c.n8("*
                                /* 0208 */  0xDE, 0x7F, 0x27, 0x4E, 0x14, 0x05, 0x11, 0x33,  // ..'N...3
                                /* 0210 */  0xE8, 0x91, 0xF1, 0x13, 0xC8, 0x2F, 0x32, 0x13,  // ...../2.
                                /* 0218 */  0x25, 0xAD, 0xE0, 0x97, 0x07, 0x42, 0xFE, 0xB1,  // %....B..
                                /* 0220 */  0x73, 0xC8, 0xA3, 0x23, 0x5A, 0x94, 0x3D, 0xCB,  // s..#Z.=.
                                /* 0228 */  0x1C, 0x0A, 0x9C, 0x3D, 0xD8, 0xA9, 0x26, 0x49,  // ...=..&I
                                /* 0230 */  0x18, 0x16, 0x46, 0xFD, 0x8D, 0x0A, 0x1C, 0x31,  // ..F....1
                                /* 0238 */  0x45, 0x23, 0xE4, 0x76, 0xD4, 0xCF, 0xAF, 0x40,  // E#.v...@
                                /* 0240 */  0xCB, 0x1C, 0xCF, 0x08, 0x94, 0x61, 0x43, 0xED,  // .....aC.
                                /* 0248 */  0x52, 0xDC, 0x1D, 0x42, 0xEF, 0x2B, 0x05, 0x77,  // R..B.+.w
                                /* 0250 */  0x82, 0x4F, 0x5D, 0x8F, 0x3D, 0x1F, 0x60, 0x13,  // .O].=.`.
                                /* 0258 */  0x00, 0xF9, 0x3D, 0x81, 0x13, 0x49, 0x9E, 0x2C,  // ..=..I.,
                                /* 0260 */  0xFB, 0x3C, 0x41, 0x0D, 0xAF, 0xDF, 0xFD, 0x7C,  // .<A....|
                                /* 0268 */  0x9C, 0xB3, 0xD0, 0xF9, 0x96, 0x2A, 0x36, 0xEA,  // .....*6.
                                /* 0270 */  0x54, 0x9B, 0x89, 0x16, 0xB9, 0x97, 0xD9, 0x43,  // T......C
                                /* 0278 */  0x79, 0x23, 0x2A, 0xFE, 0x3B, 0xF7, 0x33, 0xDC,  // y#*.;.3.
                                /* 0280 */  0xED, 0x2B, 0xF0, 0x80, 0x4C, 0xF5, 0xFD, 0xBD,  // .+..L...
                                /* 0288 */  0xC0, 0x50, 0x3E, 0x03, 0xCA, 0x90, 0xE1, 0x51,  // .P>....Q
                                /* 0290 */  0x9D, 0x46, 0x90, 0xA9, 0xE9, 0x70, 0xA3, 0xAA,  // .F...p..
                                /* 0298 */  0x45, 0x6E, 0xC9, 0xBD, 0xFF, 0x45, 0x9E, 0xDC,  // En...E..
                                /* 02A0 */  0x2B, 0xD7, 0x7F, 0xBA, 0xC1, 0x69, 0xD5, 0xB6,  // +....i..
                                /* 02A8 */  0xF9, 0xE3, 0x98, 0xDE, 0xB2, 0xAC, 0x2C, 0x9C,  // ......,.
                                /* 02B0 */  0xF3, 0xAD, 0xED, 0x01, 0x07, 0xB4, 0xBF, 0x21,  // .......!
                                /* 02B8 */  0x9C, 0xE2, 0x3E, 0x29, 0x13, 0x0B, 0x5F, 0x9F,  // ..>).._.
                                /* 02C0 */  0x34, 0x0F, 0x45, 0xC1, 0xFE, 0x22, 0x22, 0x5F,  // 4.E..""_
                                /* 02C8 */  0x63, 0xE1, 0x9E, 0xD8, 0xD1, 0xD8, 0xFF, 0xE4,  // c.......
                                /* 02D0 */  0x9D, 0xAD, 0xB3, 0xF7, 0x0B, 0xA5, 0xDB, 0xF1,  // ........
                                /* 02D8 */  0xDB, 0xCA, 0xCF, 0x65, 0x0A, 0xF9, 0x98, 0xF6,  // ...e....
                                /* 02E0 */  0x91, 0x6F, 0xA4, 0xFC, 0xA4, 0xD3, 0xDD, 0xEF,  // .o......
                                /* 02E8 */  0x15, 0x98, 0x95, 0x1B, 0x90, 0x22, 0xCD, 0xC7,  // ....."..
                                /* 02F0 */  0x61, 0xB1, 0x7F, 0x83, 0x59, 0x67, 0xE6, 0x85,  // a...Yg..
                                /* 02F8 */  0x6A, 0xF2, 0x13, 0xD5, 0xF8, 0x08, 0x0E, 0x67,  // j......g
                                /* 0300 */  0x7E, 0x0D, 0x42, 0x6C, 0x7A, 0x67, 0x0E, 0xEB,  // ~.Blzg..
                                /* 0308 */  0xA6, 0x46, 0x61, 0xF4, 0x2F, 0x06, 0xB1, 0x94,  // .Fa./...
                                /* 0310 */  0xE8, 0xAE, 0x8C, 0x7B, 0x5A, 0x34, 0xD9, 0x85,  // ...{Z4..
                                /* 0318 */  0xAD, 0x37, 0xF4, 0xAE, 0x81, 0x85, 0xB9, 0x23,  // .7.....#
                                /* 0320 */  0xEF, 0x1B, 0x65, 0x3E, 0xFE, 0xFF, 0x29, 0x0C,  // ..e>..).
                                /* 0328 */  0x2A, 0xD2, 0xF4, 0xD6, 0xEB, 0x2C, 0x17, 0xB2,  // *....,..
                                /* 0330 */  0x73, 0x20, 0xBE, 0x12, 0x2C, 0x4C, 0x12, 0x2D,  // s ..,L.-
                                /* 0338 */  0xEC, 0x50, 0x41, 0xEC, 0x99, 0x9B, 0xFB, 0xBB,  // .PA.....
                                /* 0340 */  0x82, 0x4D, 0x93, 0x1C, 0xC7, 0x66, 0xE7, 0x27,  // .M...f.'
                                /* 0348 */  0x91, 0xF3, 0x49, 0x3B, 0x15, 0x15, 0x32, 0xDE,  // ..I;..2.
                                /* 0350 */  0xB5, 0x0F, 0x3A, 0xD2, 0x02, 0x3C, 0x58, 0x10,  // ..:..<X.
                                /* 0358 */  0x5F, 0x0F, 0x2A, 0xBE, 0x9A, 0x1B, 0x74, 0xC7,  // _.*...t.
                                /* 0360 */  0xCA, 0x56, 0x11, 0x21, 0x5C, 0xAD, 0x71, 0x85,  // .V.!\.q.
                                /* 0368 */  0x53, 0x15, 0xC1, 0xBF, 0x66, 0x2C, 0x86, 0x84,  // S...f,..
                                /* 0370 */  0x5C, 0xAB, 0xEE, 0x98, 0x14, 0x25, 0xE8, 0x07,  // \....%..
                                /* 0378 */  0x28, 0x01, 0xB7, 0x53, 0xC1, 0xB8, 0x70, 0x78,  // (..S..px
                                /* 0380 */  0x8F, 0x80, 0x6C, 0x8E, 0xC6, 0x4C, 0x01, 0x3A,  // ..l..L.:
                                /* 0388 */  0x7F, 0x89, 0x12, 0x73, 0x78, 0xDE, 0x5E, 0x1F,  // ...sx.^.
                                /* 0390 */  0x0F, 0x33, 0x7C, 0xB3, 0x91, 0x6C, 0xCA, 0x66,  // .3|..l.f
                                /* 0398 */  0x72, 0xDA, 0xA7, 0x83, 0x72, 0xDB, 0xAD, 0xF6,  // r...r...
                                /* 03A0 */  0xF3, 0xCC, 0xD7, 0xA7, 0xD7, 0x75, 0x17, 0xE4,  // .....u..
                                /* 03A8 */  0x05, 0x56, 0xBD, 0xCC, 0xEB, 0x7E, 0x27, 0x7B,  // .V...~'{
                                /* 03B0 */  0x22, 0x4F, 0xEE, 0xD6, 0xD7, 0x5F, 0x6B, 0x10,  // "O..._k.
                                /* 03B8 */  0xCE, 0xAE, 0x44, 0xEA, 0x72, 0x65, 0xC3, 0xC1,  // ..D.re..
                                /* 03C0 */  0xC4, 0xE2, 0x0C, 0x25, 0x30, 0xF4, 0x00, 0x47,  // ...%0..G
                                /* 03C8 */  0x31, 0xF8, 0x56, 0x8D, 0x47, 0xCA, 0x6D, 0x73,  // 1.V.G.ms
                                /* 03D0 */  0x4B, 0xBB, 0xAE, 0xA7, 0x4A, 0xC4, 0xAF, 0x32,  // K...J..2
                                /* 03D8 */  0xDF, 0xA5, 0x67, 0xCB, 0xBC, 0x41, 0xC1, 0x78,  // ..g..A.x
                                /* 03E0 */  0x3B, 0x58, 0x27, 0xCE, 0xA7, 0xA5, 0x29, 0xE7,  // ;X'...).
                                /* 03E8 */  0xCA, 0xCF, 0xEA, 0xA9, 0x13, 0xAE, 0xC4, 0xE4,  // ........
                                /* 03F0 */  0x0F, 0x8D, 0x3F, 0xCE, 0x8E, 0x4E, 0x11, 0x59,  // ..?..N.Y
                                /* 03F8 */  0x20, 0x33, 0x58, 0xF7, 0xC6, 0xA5, 0x78, 0x49,  //  3X...xI
                                /* 0400 */  0x26, 0x2D, 0x27, 0x13, 0xC2, 0x39, 0x48, 0xD6,  // &-'..9H.
                                /* 0408 */  0xA3, 0x22, 0xB5, 0x55, 0xBC, 0x22, 0xC3, 0xCF,  // .".U."..
                                /* 0410 */  0x90, 0x6A, 0xE1, 0x9E, 0x7C, 0x84, 0xCC, 0xC1,  // .j..|...
                                /* 0418 */  0xD7, 0x9F, 0x1F, 0x64, 0x63, 0x5E, 0xFE, 0x7A,  // ...dc^.z
                                /* 0420 */  0x82, 0x77, 0x1B, 0xB6, 0xD8, 0x40, 0x4E, 0x62,  // .w...@Nb
                                /* 0428 */  0x27, 0x01, 0x1F, 0x3B, 0x51, 0x30, 0xE3, 0x06,  // '..;Q0..
                                /* 0430 */  0xEF, 0x15, 0x23, 0xE6, 0x8F, 0x2C, 0xEC, 0xBD,  // ..#..,..
                                /* 0438 */  0x53, 0x85, 0xBE, 0xB5, 0x9D, 0x2C, 0x16, 0xC7,  // S....,..
                                /* 0440 */  0x59, 0x3B, 0x51, 0x8C, 0x0A, 0xEA, 0x18, 0x1E,  // Y;Q.....
                                /* 0448 */  0x66, 0xEA, 0x07, 0x94, 0xED, 0x57, 0x0F, 0xF8,  // f....W..
                                /* 0450 */  0x70, 0x5F, 0x8A, 0xC0, 0x45, 0x32, 0x0A, 0x69,  // p_..E2.i
                                /* 0458 */  0x26, 0x06, 0x3C, 0x38, 0x1E, 0x7C, 0x1F, 0xE2,  // &.<8.|..
                                /* 0460 */  0x5D, 0x71, 0xAD, 0x19, 0x1E, 0xD6, 0x25, 0x1E,  // ]q....%.
                                /* 0468 */  0x9F, 0x80, 0xB3, 0x18, 0x61, 0x82, 0x34, 0x9C,  // ....a.4.
                                /* 0470 */  0x12, 0xA9, 0x73, 0x4C, 0x2D, 0x25, 0x31, 0x6A,  // ..sL-%1j
                                /* 0478 */  0x0F, 0xAF, 0x7D, 0xC8, 0xD4, 0xAE, 0xBF, 0x08,  // ..}.....
                                /* 0480 */  0x74, 0x75, 0x0C, 0xCB, 0x80, 0x75, 0x85, 0x3B,  // tu...u.;
                                /* 0488 */  0x0B, 0x4D, 0x2B, 0x53, 0x27, 0x7E, 0xA5, 0x38,  // .M+S'~.8
                                /* 0490 */  0x0E, 0x78, 0xAA, 0x05, 0xC9, 0x45, 0x36, 0x63,  // .x...E6c
                                /* 0498 */  0x5F, 0xBF, 0x34, 0x71, 0xFF, 0x6A, 0xD7, 0xF3,  // _.4q.j..
                                /* 04A0 */  0xF4, 0xF4, 0xA2, 0x60, 0x5C, 0xD1, 0xE8, 0xF8,  // ...`\...
                                /* 04A8 */  0x9B, 0x17, 0x3B, 0x0B, 0x3F, 0xED, 0x7D, 0xC3,  // ..;.?.}.
                                /* 04B0 */  0xAF, 0x8A, 0x8C, 0xB7, 0x10, 0xA7, 0xFC, 0x17,  // ........
                                /* 04B8 */  0xA2, 0x38, 0x48, 0x03, 0xF4, 0x54, 0x0B, 0xEA,  // .8H..T..
                                /* 04C0 */  0xDB, 0x95, 0x8B, 0xFB, 0xDE, 0x4A, 0xA9, 0x44,  // .....J.D
                                /* 04C8 */  0x06, 0xC3, 0x7F, 0x7E, 0x76, 0xEC, 0xE0, 0x93,  // ...~v...
                                /* 04D0 */  0x8C, 0xF8, 0x3C, 0x82, 0x1B, 0x1D, 0x62, 0x57,  // ..<...bW
                                /* 04D8 */  0x5E, 0xBD, 0x88, 0x59, 0x92, 0xB3, 0x00, 0xDA,  // ^..Y....
                                /* 04E0 */  0xDB, 0x24, 0xDA, 0x42, 0x94, 0x50, 0x1E, 0xA0,  // .$.B.P..
                                /* 04E8 */  0x01, 0x4E, 0xEC, 0x20, 0xB1, 0x39, 0xF6, 0x3E,  // .N. .9.>
                                /* 04F0 */  0x7F, 0xE3, 0x6E, 0xFD, 0x2A, 0x30, 0x56, 0x49,  // ..n.*0VI
                                /* 04F8 */  0x4C, 0x40, 0xA4, 0xBE, 0x71, 0xA9, 0x38, 0x68,  // L@..q.8h
                                /* 0500 */  0x39, 0xA7, 0x8E, 0xE3, 0x00, 0xA5, 0xEC, 0xA9,  // 9.......
                                /* 0508 */  0x8D, 0xB4, 0x3B, 0x29, 0xBC, 0x14, 0x94, 0x73,  // ..;)...s
                                /* 0510 */  0xFE, 0x49, 0x6C, 0x60, 0x67, 0x41, 0x97, 0xBE,  // .Il`gA..
                                /* 0518 */  0xC1, 0x17, 0xB8, 0x56, 0x9A, 0x3A, 0xC0, 0x48,  // ...V.:.H
                                /* 0520 */  0x8A, 0x0B, 0x39, 0x33, 0x44, 0x26, 0xD4, 0xCB,  // ..93D&..
                                /* 0528 */  0x1D, 0x0D, 0x24, 0x3A, 0xBA, 0xC1, 0x27, 0xC2,  // ..$:..'.
                                /* 0530 */  0x24, 0xB5, 0x50, 0x29, 0x2D, 0x12, 0x27, 0x5C,  // $.P)-.'\
                                /* 0538 */  0xD2, 0x70, 0x66, 0xBE, 0x9F, 0x28, 0x43, 0x8A,  // .pf..(C.
                                /* 0540 */  0x9F, 0x81, 0xA3, 0x0C, 0xBD, 0x12, 0x95, 0x9D,  // ........
                                /* 0548 */  0xEC, 0xF3, 0x1E, 0xB8, 0x61, 0xDD, 0x17, 0x98,  // ....a...
                                /* 0550 */  0x2C, 0xF3, 0x97, 0x0D, 0x4B, 0x1A, 0x01, 0x97,  // ,...K...
                                /* 0558 */  0x71, 0xAF, 0x5D, 0xC9, 0x05, 0xF2, 0x7C, 0x40,  // q.]...|@
                                /* 0560 */  0x2B, 0x40, 0xFD, 0x2A, 0xD8, 0xFA, 0x68, 0xC8,  // +@.*..h.
                                /* 0568 */  0xE8, 0xE8, 0xF9, 0xE0, 0x10, 0x74, 0xC9, 0xF8,  // .....t..
                                /* 0570 */  0x9A, 0x91, 0xB0, 0xC2, 0x26, 0xE5, 0xD2, 0x54,  // ....&..T
                                /* 0578 */  0x6A, 0x46, 0xC7, 0x41, 0x14, 0x41, 0x27, 0x47,  // jF.A.A'G
                                /* 0580 */  0x7E, 0x66, 0xB4, 0x1F, 0x02, 0xA6, 0xBF, 0xF1,  // ~f......
                                /* 0588 */  0x1D, 0x4E, 0x67, 0xBE, 0x1D, 0x26, 0x1B, 0x07,  // .Ng..&..
                                /* 0590 */  0xD6, 0x2A, 0xB9, 0x39, 0xE3, 0xCC, 0xBB, 0x6E,  // .*.9...n
                                /* 0598 */  0x0D, 0xFE, 0xDA, 0xEE, 0x2B, 0x4A, 0x9F, 0x6F,  // ....+J.o
                                /* 05A0 */  0x7B, 0x0C, 0x41, 0x3C, 0x92, 0x67, 0xF5, 0xE1,  // {.A<.g..
                                /* 05A8 */  0x5D, 0xAD, 0x1A, 0xEF, 0x2F, 0x66, 0xFA, 0x08,  // ].../f..
                                /* 05B0 */  0xE1, 0xEC, 0x1C, 0x13, 0xA4, 0xAA, 0x96, 0xE1,  // ........
                                /* 05B8 */  0xC6, 0x1F, 0x66, 0x52, 0x72, 0x31, 0x37, 0x5D,  // ..fRr17]
                                /* 05C0 */  0x1C, 0xE4, 0x33, 0xB7, 0x6D, 0xA2, 0x67, 0x60,  // ..3.m.g`
                                /* 05C8 */  0xEA, 0xF4, 0xA4, 0xA5, 0x7B, 0x80, 0x47, 0x14,  // ....{.G.
                                /* 05D0 */  0xA4, 0x36, 0xEE, 0xE3, 0xA4, 0xF8, 0x07, 0x77,  // .6.....w
                                /* 05D8 */  0x8D, 0xCA, 0x62, 0xA8, 0x19, 0xF2, 0x63, 0x7A,  // ..b...cz
                                /* 05E0 */  0x15, 0x3B, 0x5F, 0xAA, 0x40, 0xA6, 0x94, 0x52,  // .;_.@..R
                                /* 05E8 */  0x05, 0xE8, 0xEC, 0x74, 0x63, 0xB4, 0x9F, 0x23,  // ...tc..#
                                /* 05F0 */  0x8C, 0xFF, 0xA1, 0x63, 0x22, 0xA2, 0xFE, 0xA3,  // ...c"...
                                /* 05F8 */  0x5F, 0x74, 0x08, 0x31, 0x42, 0x04, 0xE3, 0xE2,  // _t.1B...
                                /* 0600 */  0x94, 0x91, 0x96, 0x85, 0x65, 0x73, 0x72, 0xDF,  // ....esr.
                                /* 0608 */  0x23, 0xE5, 0x68, 0xEC, 0xE3, 0xBA, 0x30, 0xC3,  // #.h...0.
                                /* 0610 */  0xCE, 0x02, 0xDC, 0x38, 0xC5, 0x52, 0xAC, 0x97,  // ...8.R..
                                /* 0618 */  0xBE, 0x68, 0xDC, 0x82, 0xBF, 0xEA, 0x76, 0x6A,  // .h....vj
                                /* 0620 */  0x83, 0x02, 0x65, 0x39, 0xBC, 0xE5, 0xA6, 0xDB,  // ..e9....
                                /* 0628 */  0xE4, 0x0B, 0x05, 0x11, 0xEB, 0x54, 0x69, 0x15,  // .....Ti.
                                /* 0630 */  0x31, 0xDC, 0x32, 0x0C, 0x8A, 0x7F, 0x00, 0xA1,  // 1.2.....
                                /* 0638 */  0xCF, 0xF8, 0x09, 0x1E, 0xAA, 0x16, 0x16, 0x1E,  // ........
                                /* 0640 */  0x1B, 0x9B, 0x9F, 0x98, 0xE8, 0x35, 0x22, 0x3D,  // .....5"=
                                /* 0648 */  0xC6, 0x4F, 0xA4, 0x37, 0x5F, 0x75, 0xFE, 0x04,  // .O.7_u..
                                /* 0650 */  0x50, 0x22, 0xBC, 0x20, 0x1C, 0x02, 0x95, 0x08,  // P". ....
                                /* 0658 */  0xAC, 0x12, 0xD0, 0x27, 0xCC, 0x49, 0x15, 0x6C,  // ...'.I.l
                                /* 0660 */  0xDD, 0x85, 0x93, 0x0B, 0x4D, 0x0A, 0xE7, 0xB6,  // ....M...
                                /* 0668 */  0xEC, 0xE7, 0x5A, 0x3C, 0xDE, 0x2A, 0xB3, 0x60,  // ..Z<.*.`
                                /* 0670 */  0x3D, 0xB4, 0x72, 0xB4, 0x6F, 0x72, 0x24, 0x16,  // =.r.or$.
                                /* 0678 */  0xAE, 0xFC, 0x47, 0xB7, 0xC0, 0x69, 0x63, 0x72   // ..G..icr
                            }
                        })
                    }
                }
                ElseIf ((MCSK == One))
                {
                    If ((GTYP == 0x02))
                    {
                        Return (Package (0x01)
                        {
                            Buffer (0x060D)
                            {
                                /* 0000 */  0xE5, 0x1F, 0x94, 0x00, 0x00, 0x00, 0x00, 0x02,  // ........
                                /* 0008 */  0x00, 0x00, 0x00, 0x40, 0x67, 0x64, 0x64, 0x76,  // ...@gddv
                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x4F, 0x45, 0x4D, 0x20,  // ....OEM 
                                /* 0030 */  0x45, 0x78, 0x70, 0x6F, 0x72, 0x74, 0x65, 0x64,  // Exported
                                /* 0038 */  0x20, 0x44, 0x61, 0x74, 0x61, 0x56, 0x61, 0x75,  //  DataVau
                                /* 0040 */  0x6C, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // lt......
                                /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0068 */  0x00, 0x00, 0x00, 0x00, 0x41, 0x57, 0xC7, 0xD4,  // ....AW..
                                /* 0070 */  0xAE, 0xBC, 0xD8, 0xCA, 0x2C, 0x9A, 0xA7, 0xD1,  // ....,...
                                /* 0078 */  0x68, 0x39, 0x0B, 0xB0, 0xC2, 0x09, 0xAA, 0x9B,  // h9......
                                /* 0080 */  0x2D, 0x98, 0x27, 0xEC, 0x3C, 0xAE, 0x1F, 0xC6,  // -.'.<...
                                /* 0088 */  0x74, 0xEF, 0xB5, 0x45, 0x79, 0x05, 0x00, 0x00,  // t..Ey...
                                /* 0090 */  0x52, 0x45, 0x50, 0x4F, 0x5D, 0x00, 0x00, 0x00,  // REPO]...
                                /* 0098 */  0x01, 0x76, 0x77, 0x00, 0x00, 0x00, 0x00, 0x00,  // .vw.....
                                /* 00A0 */  0x00, 0x00, 0x72, 0x87, 0xCD, 0xFF, 0x6D, 0x24,  // ..r...m$
                                /* 00A8 */  0x47, 0xDB, 0x3D, 0x24, 0x92, 0xB4, 0x16, 0x6F,  // G.=$...o
                                /* 00B0 */  0x45, 0xD8, 0xC3, 0xF5, 0x66, 0x14, 0x9F, 0x22,  // E...f.."
                                /* 00B8 */  0xD7, 0xF7, 0xDE, 0x67, 0x90, 0x9A, 0xA2, 0x0D,  // ...g....
                                /* 00C0 */  0x39, 0x25, 0xAD, 0xC3, 0x1A, 0xAD, 0x52, 0x0B,  // 9%....R.
                                /* 00C8 */  0x75, 0x38, 0xE1, 0xA4, 0x14, 0x44, 0xB2, 0x25,  // u8...D.%
                                /* 00D0 */  0xEE, 0x38, 0x38, 0xFB, 0x53, 0x1B, 0x42, 0xBD,  // .88.S.B.
                                /* 00D8 */  0x19, 0x0C, 0xA0, 0x30, 0xEC, 0x0C, 0x4B, 0xAC,  // ...0..K.
                                /* 00E0 */  0x20, 0xF7, 0xB7, 0x49, 0x21, 0xAA, 0x52, 0x8E,  //  ..I!.R.
                                /* 00E8 */  0x9A, 0x2C, 0xB9, 0x12, 0x4D, 0x2A, 0x06, 0x4D,  // .,..M*.M
                                /* 00F0 */  0x91, 0x64, 0x48, 0x6F, 0xC8, 0x82, 0x4B, 0x5D,  // .dHo..K]
                                /* 00F8 */  0xBD, 0xCB, 0x49, 0xE3, 0x16, 0xBA, 0xB9, 0xBD,  // ..I.....
                                /* 0100 */  0x9A, 0x55, 0xD4, 0x19, 0x12, 0x14, 0x36, 0x29,  // .U....6)
                                /* 0108 */  0x50, 0xEB, 0x7B, 0x38, 0xB0, 0x8D, 0x0C, 0x44,  // P.{8...D
                                /* 0110 */  0x25, 0xD7, 0x7A, 0x02, 0xF7, 0xE2, 0xE4, 0xD3,  // %.z.....
                                /* 0118 */  0xBD, 0x98, 0x88, 0x13, 0x86, 0x25, 0xCF, 0xE8,  // .....%..
                                /* 0120 */  0x36, 0xC8, 0x85, 0x65, 0x2D, 0xBF, 0x69, 0xF1,  // 6..e-.i.
                                /* 0128 */  0x6D, 0xAA, 0x8A, 0xA4, 0x38, 0x5E, 0x79, 0x3D,  // m...8^y=
                                /* 0130 */  0xA2, 0x32, 0xF1, 0x9E, 0x03, 0x87, 0xFB, 0xB1,  // .2......
                                /* 0138 */  0xBE, 0xF4, 0x54, 0x68, 0x89, 0x66, 0xDF, 0xD0,  // ..Th.f..
                                /* 0140 */  0x66, 0x9E, 0xAE, 0x0E, 0x64, 0xFF, 0x06, 0x59,  // f...d..Y
                                /* 0148 */  0x54, 0x39, 0xAD, 0x93, 0x79, 0x8D, 0xC6, 0x22,  // T9..y.."
                                /* 0150 */  0xAC, 0x9C, 0xB2, 0xE3, 0x5D, 0xB9, 0x75, 0xD8,  // ....].u.
                                /* 0158 */  0x78, 0xDC, 0xDB, 0xEE, 0xF1, 0x5A, 0x16, 0xEE,  // x....Z..
                                /* 0160 */  0xDE, 0x19, 0xD4, 0xD6, 0xF1, 0x97, 0xCF, 0x06,  // ........
                                /* 0168 */  0x05, 0xCA, 0xAE, 0x35, 0x06, 0x8D, 0xBD, 0xEA,  // ...5....
                                /* 0170 */  0x48, 0xBC, 0x56, 0xF8, 0x04, 0x9A, 0x65, 0x96,  // H.V...e.
                                /* 0178 */  0x1D, 0xBE, 0xC2, 0x03, 0xDB, 0x94, 0x58, 0xB3,  // ......X.
                                /* 0180 */  0xCB, 0x43, 0x50, 0x14, 0xE7, 0xA7, 0xC9, 0x0B,  // .CP.....
                                /* 0188 */  0x34, 0x40, 0x1E, 0x1C, 0xC4, 0xC2, 0x1C, 0xC7,  // 4@......
                                /* 0190 */  0xD7, 0xFD, 0x61, 0x23, 0xAF, 0x06, 0x62, 0x8B,  // ..a#..b.
                                /* 0198 */  0xDF, 0xB9, 0xA5, 0xAD, 0xBA, 0x81, 0xCA, 0xDD,  // ........
                                /* 01A0 */  0x08, 0x80, 0x4E, 0x36, 0x37, 0x5A, 0xE4, 0xD6,  // ..N67Z..
                                /* 01A8 */  0xBC, 0x61, 0x93, 0xF9, 0x07, 0x91, 0x6D, 0x87,  // .a....m.
                                /* 01B0 */  0xF4, 0x79, 0x12, 0x5A, 0x66, 0xF1, 0xE1, 0xE8,  // .y.Zf...
                                /* 01B8 */  0x63, 0xEA, 0x9A, 0x42, 0x2D, 0x97, 0x23, 0xF3,  // c..B-.#.
                                /* 01C0 */  0x09, 0x56, 0xCB, 0x70, 0xAA, 0xC3, 0x38, 0x70,  // .V.p..8p
                                /* 01C8 */  0xE4, 0xDA, 0xF5, 0x7F, 0x61, 0x90, 0x0A, 0x11,  // ....a...
                                /* 01D0 */  0x87, 0x21, 0x10, 0x08, 0x62, 0xA0, 0x9F, 0x95,  // .!..b...
                                /* 01D8 */  0x10, 0x4F, 0x7C, 0xFE, 0x85, 0x4D, 0xB8, 0xAE,  // .O|..M..
                                /* 01E0 */  0x82, 0xFE, 0x67, 0x32, 0x1D, 0x5F, 0x08, 0xFF,  // ..g2._..
                                /* 01E8 */  0xF3, 0xC9, 0xB5, 0x60, 0xF1, 0x77, 0xE0, 0x32,  // ...`.w.2
                                /* 01F0 */  0x09, 0x91, 0x8C, 0x67, 0xB9, 0xEF, 0xBD, 0x76,  // ...g...v
                                /* 01F8 */  0x76, 0x76, 0x2C, 0x5D, 0x01, 0xB7, 0xE6, 0x5D,  // vv,]...]
                                /* 0200 */  0x6B, 0x65, 0xCC, 0xE4, 0x96, 0xA1, 0x45, 0xF3,  // ke....E.
                                /* 0208 */  0x9F, 0x31, 0x5D, 0x38, 0x14, 0x4F, 0x27, 0x62,  // .1]8.O'b
                                /* 0210 */  0x32, 0xEB, 0x9D, 0x4D, 0x2F, 0xD7, 0xEC, 0x98,  // 2..M/...
                                /* 0218 */  0xEB, 0xA1, 0xE3, 0x8B, 0x75, 0x75, 0xE9, 0x63,  // ....uu.c
                                /* 0220 */  0x95, 0x8D, 0x3C, 0x07, 0xF1, 0xB7, 0xC7, 0x2E,  // ..<.....
                                /* 0228 */  0x49, 0xE8, 0x3B, 0x3D, 0x0D, 0x4B, 0x3F, 0xAD,  // I.;=.K?.
                                /* 0230 */  0x88, 0xEE, 0xBE, 0x26, 0xCF, 0xA6, 0x1D, 0x3D,  // ...&...=
                                /* 0238 */  0xE6, 0x74, 0x08, 0x0C, 0xD3, 0xA9, 0x41, 0xF4,  // .t....A.
                                /* 0240 */  0x26, 0xA8, 0xC6, 0x98, 0xBE, 0x4B, 0x78, 0xFD,  // &....Kx.
                                /* 0248 */  0x80, 0x7C, 0x88, 0x1A, 0xD2, 0xC9, 0xE3, 0xEB,  // .|......
                                /* 0250 */  0xB1, 0x35, 0x16, 0xF6, 0xB7, 0x09, 0x0D, 0x48,  // .5.....H
                                /* 0258 */  0xB7, 0xF3, 0x69, 0xC3, 0xBA, 0x1F, 0x82, 0x1E,  // ..i.....
                                /* 0260 */  0x92, 0xA2, 0x5D, 0x2F, 0x96, 0x8A, 0x3F, 0x55,  // ..]/..?U
                                /* 0268 */  0x5D, 0xD3, 0x7D, 0xC3, 0xF6, 0xE6, 0xC7, 0xBF,  // ].}.....
                                /* 0270 */  0x19, 0xF4, 0xC4, 0xD7, 0x86, 0xD5, 0x20, 0x92,  // ...... .
                                /* 0278 */  0xEF, 0x35, 0x59, 0x4C, 0xB7, 0x5A, 0xDF, 0xD4,  // .5YL.Z..
                                /* 0280 */  0x38, 0x04, 0x45, 0xF1, 0x34, 0x11, 0x79, 0x1E,  // 8.E.4.y.
                                /* 0288 */  0x4D, 0x5A, 0x91, 0x7E, 0x89, 0x70, 0xAF, 0x3D,  // MZ.~.p.=
                                /* 0290 */  0x69, 0x2E, 0xF9, 0xFE, 0xE0, 0xE4, 0xAB, 0xB0,  // i.......
                                /* 0298 */  0x1C, 0x38, 0xB4, 0xA2, 0x2E, 0xAC, 0x4D, 0xD4,  // .8....M.
                                /* 02A0 */  0xD0, 0x70, 0xCC, 0xEF, 0xDC, 0xBA, 0xA9, 0x57,  // .p.....W
                                /* 02A8 */  0xC6, 0xD1, 0x74, 0x61, 0xF4, 0x42, 0x76, 0x7A,  // ..ta.Bvz
                                /* 02B0 */  0x64, 0xA6, 0x1A, 0xAF, 0x50, 0x36, 0xED, 0x5E,  // d...P6.^
                                /* 02B8 */  0xF2, 0xF6, 0xD7, 0xFA, 0x77, 0xC5, 0x73, 0x1E,  // ....w.s.
                                /* 02C0 */  0xCA, 0x83, 0xCA, 0xBF, 0x0D, 0x85, 0x0D, 0x01,  // ........
                                /* 02C8 */  0xE1, 0xBB, 0xCD, 0x0F, 0x3F, 0xAF, 0x1B, 0x2C,  // ....?..,
                                /* 02D0 */  0xC6, 0x5D, 0xE1, 0xC5, 0xD7, 0xEA, 0xD6, 0xCD,  // .]......
                                /* 02D8 */  0x43, 0xF4, 0x7B, 0x0D, 0x2B, 0xCD, 0x52, 0xD0,  // C.{.+.R.
                                /* 02E0 */  0x5D, 0xD6, 0x1B, 0x1B, 0x5E, 0x9C, 0xC1, 0xEB,  // ]...^...
                                /* 02E8 */  0x49, 0x73, 0x44, 0x75, 0xC7, 0xDC, 0x92, 0x5F,  // IsDu..._
                                /* 02F0 */  0xA9, 0xC9, 0xBF, 0xC9, 0xA8, 0xCF, 0xFB, 0x68,  // .......h
                                /* 02F8 */  0x27, 0xB6, 0x2B, 0x88, 0x89, 0xC2, 0xEC, 0x6C,  // '.+....l
                                /* 0300 */  0x71, 0x17, 0x64, 0xEE, 0xD8, 0x6F, 0x88, 0x41,  // q.d..o.A
                                /* 0308 */  0x17, 0x0B, 0x1E, 0xF2, 0x51, 0xC3, 0x48, 0x44,  // ....Q.HD
                                /* 0310 */  0xC7, 0x63, 0xFE, 0xB3, 0xB4, 0x88, 0x50, 0x95,  // .c....P.
                                /* 0318 */  0xC6, 0xC7, 0x5B, 0xE5, 0x6C, 0x25, 0xDB, 0x8A,  // ..[.l%..
                                /* 0320 */  0x84, 0x03, 0x3F, 0xDA, 0xF6, 0x43, 0x85, 0xC8,  // ..?..C..
                                /* 0328 */  0x76, 0xC9, 0x54, 0x7A, 0x60, 0x6C, 0xA9, 0xC1,  // v.Tz`l..
                                /* 0330 */  0xAE, 0xBF, 0x01, 0xED, 0x6D, 0xB1, 0xE2, 0xB8,  // ....m...
                                /* 0338 */  0xD2, 0x8B, 0x74, 0x35, 0x91, 0x44, 0x4A, 0x72,  // ..t5.DJr
                                /* 0340 */  0xA0, 0x30, 0x8A, 0x99, 0xCA, 0xBC, 0xB8, 0x02,  // .0......
                                /* 0348 */  0xAF, 0x9A, 0x26, 0x3E, 0x96, 0x88, 0x36, 0x0F,  // ..&>..6.
                                /* 0350 */  0xC6, 0x0B, 0x9E, 0x9E, 0x29, 0x03, 0xC9, 0xAF,  // ....)...
                                /* 0358 */  0xD5, 0xCC, 0x5C, 0x4A, 0x7A, 0x7B, 0xEA, 0xA5,  // ..\Jz{..
                                /* 0360 */  0x53, 0x39, 0x49, 0x13, 0x3F, 0x25, 0x78, 0x95,  // S9I.?%x.
                                /* 0368 */  0x99, 0x53, 0xE1, 0x5B, 0x2A, 0x5D, 0x54, 0x6B,  // .S.[*]Tk
                                /* 0370 */  0x38, 0x09, 0x77, 0x12, 0x61, 0x10, 0x0E, 0xFF,  // 8.w.a...
                                /* 0378 */  0x6A, 0x1B, 0x13, 0x88, 0x34, 0x35, 0x13, 0x3D,  // j...45.=
                                /* 0380 */  0x5E, 0x15, 0xD8, 0x8B, 0x68, 0x3B, 0xA0, 0x77,  // ^...h;.w
                                /* 0388 */  0x4B, 0x4E, 0xD7, 0xB6, 0xBF, 0x00, 0x7A, 0xAA,  // KN....z.
                                /* 0390 */  0x64, 0x80, 0xB1, 0x4A, 0x96, 0x77, 0x77, 0x7F,  // d..J.ww.
                                /* 0398 */  0xC0, 0x0F, 0xC1, 0x24, 0xDE, 0x66, 0x6D, 0x40,  // ...$.fm@
                                /* 03A0 */  0x03, 0x75, 0xFF, 0xBA, 0x44, 0xCB, 0xF2, 0x98,  // .u..D...
                                /* 03A8 */  0x9E, 0x72, 0x4D, 0xC0, 0x63, 0xEB, 0xD0, 0x85,  // .rM.c...
                                /* 03B0 */  0x82, 0xC8, 0x69, 0xAD, 0x58, 0x59, 0x1C, 0x7C,  // ..i.XY.|
                                /* 03B8 */  0x0B, 0x5E, 0x7A, 0x07, 0xFB, 0x86, 0x4F, 0x46,  // .^z...OF
                                /* 03C0 */  0xE6, 0x5A, 0x7B, 0xF1, 0x0B, 0xFD, 0x20, 0xE8,  // .Z{... .
                                /* 03C8 */  0x4C, 0x32, 0xA4, 0x67, 0x36, 0xB5, 0xC0, 0x7F,  // L2.g6...
                                /* 03D0 */  0x78, 0x5E, 0x69, 0xEB, 0x36, 0x2D, 0xE6, 0x99,  // x^i.6-..
                                /* 03D8 */  0xC5, 0xFE, 0x6C, 0x9D, 0x23, 0xDA, 0x3F, 0x54,  // ..l.#.?T
                                /* 03E0 */  0x49, 0xED, 0xB5, 0xBC, 0xB2, 0x21, 0x83, 0x55,  // I....!.U
                                /* 03E8 */  0xEA, 0xB4, 0xAA, 0xE1, 0x12, 0x2A, 0x01, 0x32,  // .....*.2
                                /* 03F0 */  0x75, 0x8B, 0x5A, 0x7B, 0xAC, 0x3F, 0xDC, 0xB4,  // u.Z{.?..
                                /* 03F8 */  0x85, 0x39, 0x56, 0xD3, 0xE3, 0xCA, 0xDE, 0x5A,  // .9V....Z
                                /* 0400 */  0x68, 0x45, 0x2E, 0xD1, 0xBD, 0x76, 0x6C, 0x7C,  // hE...vl|
                                /* 0408 */  0x9B, 0x16, 0x4D, 0x10, 0x83, 0x71, 0x22, 0xE1,  // ..M..q".
                                /* 0410 */  0x82, 0x18, 0x98, 0xCB, 0x65, 0xA2, 0xF7, 0x13,  // ....e...
                                /* 0418 */  0xCA, 0x29, 0x7F, 0xC0, 0x26, 0xF8, 0xCB, 0xEC,  // .)..&...
                                /* 0420 */  0x9F, 0x8B, 0x39, 0xB1, 0x57, 0x7E, 0xB6, 0x9D,  // ..9.W~..
                                /* 0428 */  0x5E, 0xE5, 0x93, 0x49, 0xDC, 0xE3, 0x85, 0x66,  // ^..I...f
                                /* 0430 */  0x8C, 0xF3, 0x72, 0x67, 0x1F, 0xB7, 0x53, 0xEF,  // ..rg..S.
                                /* 0438 */  0x2A, 0x69, 0x82, 0x15, 0x4A, 0x0C, 0x87, 0xF8,  // *i..J...
                                /* 0440 */  0x00, 0xA4, 0x56, 0xD2, 0x73, 0xD1, 0xA5, 0x1F,  // ..V.s...
                                /* 0448 */  0x4A, 0x1F, 0xF2, 0x89, 0x96, 0xB1, 0x5C, 0x2F,  // J.....\/
                                /* 0450 */  0x42, 0x7F, 0xF0, 0x38, 0x33, 0x22, 0xA0, 0x77,  // B..83".w
                                /* 0458 */  0x9D, 0x88, 0x53, 0x47, 0x61, 0x3D, 0x01, 0x06,  // ..SGa=..
                                /* 0460 */  0x1F, 0x7F, 0xF2, 0xD7, 0xAE, 0xED, 0x03, 0x29,  // .......)
                                /* 0468 */  0xF4, 0x97, 0x86, 0xAA, 0x66, 0x7F, 0x6B, 0x8D,  // ....f.k.
                                /* 0470 */  0x27, 0xE7, 0x16, 0x8F, 0xE6, 0xAA, 0x2B, 0xF4,  // '.....+.
                                /* 0478 */  0x66, 0x90, 0xD9, 0x6A, 0xD9, 0x56, 0x15, 0xDF,  // f..j.V..
                                /* 0480 */  0x4D, 0xA0, 0xC5, 0x24, 0xE6, 0xC7, 0xF2, 0x2A,  // M..$...*
                                /* 0488 */  0xE5, 0x06, 0x98, 0x67, 0x18, 0x6F, 0x84, 0xF6,  // ...g.o..
                                /* 0490 */  0x92, 0x96, 0x7A, 0x3C, 0xD2, 0xB4, 0x40, 0xA7,  // ..z<..@.
                                /* 0498 */  0xD4, 0x76, 0x15, 0x01, 0x64, 0x89, 0xB2, 0xBF,  // .v..d...
                                /* 04A0 */  0xAC, 0xA3, 0x49, 0x41, 0x4B, 0x2D, 0xB7, 0x36,  // ..IAK-.6
                                /* 04A8 */  0x45, 0x59, 0xB0, 0x63, 0x73, 0x60, 0x50, 0x0D,  // EY.cs`P.
                                /* 04B0 */  0x2B, 0x49, 0x3C, 0xC1, 0xD0, 0x0D, 0x68, 0x38,  // +I<...h8
                                /* 04B8 */  0x66, 0x7B, 0xC6, 0xA3, 0x2F, 0x2C, 0xE9, 0x2E,  // f{../,..
                                /* 04C0 */  0xCC, 0x04, 0x05, 0x76, 0xCF, 0x94, 0xC2, 0xC4,  // ...v....
                                /* 04C8 */  0xD1, 0xD8, 0x45, 0x5C, 0x73, 0x4F, 0xFB, 0xA1,  // ..E\sO..
                                /* 04D0 */  0x9E, 0x4C, 0x10, 0x5E, 0x8D, 0xC9, 0x1F, 0xF9,  // .L.^....
                                /* 04D8 */  0x5A, 0xA1, 0x54, 0xD2, 0x97, 0x0C, 0xC3, 0xA1,  // Z.T.....
                                /* 04E0 */  0x67, 0xAC, 0x9A, 0x1C, 0xDC, 0xBB, 0xEF, 0x10,  // g.......
                                /* 04E8 */  0x56, 0x22, 0xD4, 0x0D, 0x9C, 0x0D, 0x3F, 0xCA,  // V"....?.
                                /* 04F0 */  0x48, 0x24, 0x9A, 0xD1, 0x73, 0x40, 0xD1, 0xA2,  // H$..s@..
                                /* 04F8 */  0x92, 0x62, 0xDE, 0x87, 0x10, 0xE2, 0x80, 0xC7,  // .b......
                                /* 0500 */  0xCE, 0xE9, 0xF8, 0x09, 0xC8, 0x5D, 0x6C, 0xC6,  // .....]l.
                                /* 0508 */  0x6E, 0x9F, 0xB6, 0x9D, 0x00, 0xBD, 0x56, 0x4F,  // n.....VO
                                /* 0510 */  0x8D, 0x53, 0x27, 0x93, 0x8F, 0x1E, 0xCA, 0x9D,  // .S'.....
                                /* 0518 */  0xF9, 0xC8, 0x29, 0x52, 0x15, 0x8D, 0x43, 0x86,  // ..)R..C.
                                /* 0520 */  0xFF, 0x20, 0x9F, 0x7A, 0x28, 0x88, 0x0E, 0xF5,  // . .z(...
                                /* 0528 */  0xAE, 0x01, 0xC8, 0x56, 0xEC, 0x9C, 0x3D, 0x14,  // ...V..=.
                                /* 0530 */  0x02, 0x1F, 0x53, 0x91, 0xE9, 0x8B, 0xB0, 0x38,  // ..S....8
                                /* 0538 */  0x36, 0x2E, 0xE2, 0x4A, 0x86, 0xA3, 0x67, 0x20,  // 6..J..g 
                                /* 0540 */  0x14, 0x6C, 0xF5, 0x8A, 0xB9, 0x03, 0x37, 0xAB,  // .l....7.
                                /* 0548 */  0x4E, 0xAB, 0xA8, 0x1D, 0x1B, 0x08, 0x68, 0x7F,  // N.....h.
                                /* 0550 */  0xDA, 0x81, 0xAA, 0x09, 0x8D, 0xC2, 0x89, 0xA1,  // ........
                                /* 0558 */  0x70, 0xA3, 0xF4, 0x37, 0x03, 0x99, 0xE2, 0x28,  // p..7...(
                                /* 0560 */  0x2A, 0x77, 0x24, 0x2F, 0x59, 0x7B, 0xBC, 0x76,  // *w$/Y{.v
                                /* 0568 */  0xE0, 0xCC, 0x8D, 0xD6, 0xB5, 0x5D, 0xF6, 0x5C,  // .....].\
                                /* 0570 */  0x70, 0xA0, 0xD7, 0xAF, 0x60, 0xD5, 0xDF, 0x23,  // p...`..#
                                /* 0578 */  0x53, 0xF1, 0xA9, 0x47, 0xC3, 0xC7, 0x6F, 0x5E,  // S..G..o^
                                /* 0580 */  0x2A, 0xBC, 0x32, 0xB4, 0x5A, 0xD8, 0x21, 0xD4,  // *.2.Z.!.
                                /* 0588 */  0x5C, 0xBD, 0xAE, 0xFB, 0x63, 0xE8, 0x93, 0x4D,  // \...c..M
                                /* 0590 */  0x68, 0xDF, 0x90, 0x2A, 0xEC, 0x94, 0x59, 0x92,  // h..*..Y.
                                /* 0598 */  0xD8, 0xEF, 0x6F, 0x67, 0x56, 0xF4, 0x69, 0x0F,  // ..ogV.i.
                                /* 05A0 */  0x5F, 0x46, 0x7C, 0x71, 0x56, 0x31, 0x48, 0x57,  // _F|qV1HW
                                /* 05A8 */  0x02, 0xC4, 0xB6, 0x87, 0x9B, 0x95, 0xB4, 0x98,  // ........
                                /* 05B0 */  0x83, 0x93, 0x17, 0x23, 0xED, 0x3B, 0xF1, 0xE6,  // ...#.;..
                                /* 05B8 */  0xDC, 0x01, 0xC3, 0x17, 0x00, 0xB4, 0x9C, 0xAE,  // ........
                                /* 05C0 */  0x99, 0x2D, 0xB2, 0x40, 0x8C, 0xED, 0x0D, 0xA4,  // .-.@....
                                /* 05C8 */  0xB6, 0x14, 0x9E, 0xA9, 0x38, 0xA8, 0xC9, 0x55,  // ....8..U
                                /* 05D0 */  0xB3, 0x05, 0x46, 0xC7, 0xFC, 0x03, 0x5A, 0x14,  // ..F...Z.
                                /* 05D8 */  0xE7, 0x19, 0x19, 0x7E, 0xBB, 0x0A, 0x61, 0x33,  // ...~..a3
                                /* 05E0 */  0x07, 0x57, 0x1B, 0x66, 0xFA, 0x20, 0x6D, 0xA2,  // .W.f. m.
                                /* 05E8 */  0x2A, 0xB8, 0x1F, 0xCE, 0x7B, 0xB4, 0xDA, 0x93,  // *...{...
                                /* 05F0 */  0x96, 0x7D, 0x4F, 0x53, 0xC7, 0xDD, 0x72, 0x89,  // .}OS..r.
                                /* 05F8 */  0x73, 0x34, 0xAE, 0xB5, 0x3D, 0x18, 0xE4, 0xF8,  // s4..=...
                                /* 0600 */  0x54, 0xB4, 0xB3, 0xFB, 0x5D, 0xB7, 0xB7, 0x8A,  // T...]...
                                /* 0608 */  0x64, 0x36, 0xFA, 0x30, 0x00                     // d6.0.
                            }
                        })
                    }
                    ElseIf ((GTYP == 0x03))
                    {
                        Return (Package (0x01)
                        {
                            Buffer (0x0601)
                            {
                                /* 0000 */  0xE5, 0x1F, 0x94, 0x00, 0x00, 0x00, 0x00, 0x02,  // ........
                                /* 0008 */  0x00, 0x00, 0x00, 0x40, 0x67, 0x64, 0x64, 0x76,  // ...@gddv
                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x4F, 0x45, 0x4D, 0x20,  // ....OEM 
                                /* 0030 */  0x45, 0x78, 0x70, 0x6F, 0x72, 0x74, 0x65, 0x64,  // Exported
                                /* 0038 */  0x20, 0x44, 0x61, 0x74, 0x61, 0x56, 0x61, 0x75,  //  DataVau
                                /* 0040 */  0x6C, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // lt......
                                /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0068 */  0x00, 0x00, 0x00, 0x00, 0xBE, 0xA3, 0xC7, 0x4D,  // .......M
                                /* 0070 */  0x4F, 0x87, 0x7E, 0x2D, 0x56, 0x56, 0xD5, 0xC5,  // O.~-VV..
                                /* 0078 */  0x5C, 0xD6, 0x8A, 0x91, 0x80, 0xB4, 0x30, 0x2D,  // \.....0-
                                /* 0080 */  0x11, 0xC8, 0xCA, 0x34, 0xED, 0x12, 0xB6, 0xF0,  // ...4....
                                /* 0088 */  0xCD, 0x09, 0x1E, 0x24, 0x6D, 0x05, 0x00, 0x00,  // ...$m...
                                /* 0090 */  0x52, 0x45, 0x50, 0x4F, 0x5D, 0x00, 0x00, 0x00,  // REPO]...
                                /* 0098 */  0x01, 0x76, 0x77, 0x00, 0x00, 0x00, 0x00, 0x00,  // .vw.....
                                /* 00A0 */  0x00, 0x00, 0x72, 0x87, 0xCD, 0xFF, 0x6D, 0x24,  // ..r...m$
                                /* 00A8 */  0x47, 0xDB, 0x3D, 0x24, 0x92, 0xB4, 0x16, 0x6F,  // G.=$...o
                                /* 00B0 */  0x45, 0xD8, 0xC3, 0xF5, 0x66, 0x14, 0x9F, 0x22,  // E...f.."
                                /* 00B8 */  0xD7, 0xF7, 0xDE, 0x67, 0x90, 0x9A, 0xA2, 0x0D,  // ...g....
                                /* 00C0 */  0x39, 0x25, 0xAD, 0xC3, 0x1A, 0xAD, 0x52, 0x0B,  // 9%....R.
                                /* 00C8 */  0x75, 0x38, 0xE1, 0xA4, 0x14, 0x41, 0x45, 0x08,  // u8...AE.
                                /* 00D0 */  0xF2, 0x5A, 0xC1, 0x57, 0x81, 0x81, 0xD6, 0x4F,  // .Z.W...O
                                /* 00D8 */  0x2F, 0xEC, 0x4D, 0xCC, 0xB3, 0xAD, 0x34, 0xBF,  // /.M...4.
                                /* 00E0 */  0xE4, 0x07, 0x0A, 0xE7, 0x12, 0x60, 0xFB, 0x14,  // .....`..
                                /* 00E8 */  0x80, 0x05, 0x9B, 0x41, 0x5D, 0x62, 0x2A, 0xB1,  // ...A]b*.
                                /* 00F0 */  0x2C, 0x88, 0x43, 0x2C, 0x48, 0x3E, 0x59, 0xD8,  // ,.C,H>Y.
                                /* 00F8 */  0x88, 0x5F, 0x32, 0x5A, 0x21, 0xBD, 0x03, 0x4F,  // ._2Z!..O
                                /* 0100 */  0x25, 0xAF, 0x77, 0x15, 0xF7, 0xE1, 0x00, 0x6E,  // %.w....n
                                /* 0108 */  0x69, 0x04, 0xBC, 0x16, 0x3B, 0x66, 0x82, 0xE8,  // i...;f..
                                /* 0110 */  0x0F, 0x76, 0xF9, 0xB9, 0x73, 0x04, 0x0D, 0x5D,  // .v..s..]
                                /* 0118 */  0x73, 0x24, 0xC9, 0xE8, 0x9D, 0xFB, 0xBD, 0x84,  // s$......
                                /* 0120 */  0x12, 0xC5, 0xCC, 0x9A, 0x59, 0x62, 0x31, 0x94,  // ....Yb1.
                                /* 0128 */  0x46, 0xE1, 0xEA, 0xC0, 0xBC, 0x03, 0x39, 0x80,  // F.....9.
                                /* 0130 */  0xFB, 0xCA, 0x2D, 0x04, 0xDF, 0x67, 0x32, 0xC9,  // ..-..g2.
                                /* 0138 */  0xD5, 0x85, 0x72, 0xAC, 0x3C, 0x4B, 0xC6, 0x88,  // ..r.<K..
                                /* 0140 */  0x2C, 0xAF, 0xBD, 0x7E, 0xFE, 0xA4, 0xA7, 0x00,  // ,..~....
                                /* 0148 */  0x7D, 0x0C, 0xD3, 0x03, 0xFD, 0xFB, 0xDD, 0x26,  // }......&
                                /* 0150 */  0x77, 0x56, 0x8F, 0xEF, 0xD2, 0xD0, 0x42, 0x67,  // wV....Bg
                                /* 0158 */  0xEF, 0x5B, 0x69, 0x8A, 0x6A, 0x73, 0x57, 0xFA,  // .[i.jsW.
                                /* 0160 */  0x32, 0x0F, 0x4C, 0x13, 0xE6, 0x18, 0x83, 0xF8,  // 2.L.....
                                /* 0168 */  0xF8, 0x15, 0xD7, 0x6E, 0x0F, 0xB6, 0x02, 0x23,  // ...n...#
                                /* 0170 */  0xFC, 0x11, 0xD3, 0xE2, 0xF6, 0xAF, 0xDA, 0x3C,  // .......<
                                /* 0178 */  0xD1, 0x15, 0xF4, 0x2B, 0xCB, 0x24, 0xE5, 0x53,  // ...+.$.S
                                /* 0180 */  0x1D, 0xC1, 0x9E, 0xA2, 0x05, 0xCB, 0xBE, 0xD0,  // ........
                                /* 0188 */  0x3E, 0xE5, 0xB7, 0xE4, 0xF1, 0xBC, 0x30, 0x3D,  // >.....0=
                                /* 0190 */  0x0E, 0x8D, 0x0C, 0x4E, 0x3B, 0xA8, 0x81, 0x44,  // ...N;..D
                                /* 0198 */  0xC6, 0xE0, 0xB0, 0x62, 0xE0, 0xA7, 0x8C, 0x2F,  // ...b.../
                                /* 01A0 */  0xF0, 0x39, 0x7F, 0x70, 0x11, 0xC3, 0x92, 0xA6,  // .9.p....
                                /* 01A8 */  0x67, 0xB9, 0xCF, 0xB6, 0x19, 0xF3, 0xC8, 0x03,  // g.......
                                /* 01B0 */  0x29, 0x79, 0x06, 0x10, 0x1D, 0x7A, 0xEF, 0x41,  // )y...z.A
                                /* 01B8 */  0x5A, 0xE6, 0x84, 0x53, 0xF7, 0x00, 0xC0, 0x6A,  // Z..S...j
                                /* 01C0 */  0x1A, 0x00, 0xE6, 0x4E, 0x3F, 0xA4, 0x54, 0x65,  // ...N?.Te
                                /* 01C8 */  0x27, 0x54, 0x82, 0x06, 0xCC, 0x19, 0x89, 0xC2,  // 'T......
                                /* 01D0 */  0xF3, 0x3C, 0xDE, 0xCA, 0xFA, 0xAF, 0x1D, 0x5E,  // .<.....^
                                /* 01D8 */  0xC7, 0x32, 0xDC, 0x8C, 0x74, 0xD3, 0x48, 0xB5,  // .2..t.H.
                                /* 01E0 */  0x1B, 0x39, 0x36, 0x21, 0xA4, 0xF9, 0x9A, 0x32,  // .96!...2
                                /* 01E8 */  0xEA, 0x05, 0x1B, 0xA2, 0x2E, 0x10, 0x30, 0xA1,  // ......0.
                                /* 01F0 */  0x37, 0x5A, 0xFC, 0xD2, 0x02, 0xF7, 0x62, 0x35,  // 7Z....b5
                                /* 01F8 */  0x11, 0xFB, 0x7D, 0x57, 0x9F, 0x23, 0x28, 0x1B,  // ..}W.#(.
                                /* 0200 */  0x3E, 0x3B, 0x18, 0x29, 0xFE, 0xBF, 0xD2, 0x96,  // >;.)....
                                /* 0208 */  0xD6, 0xD7, 0x40, 0x66, 0x7C, 0xDB, 0xBA, 0xB1,  // ..@f|...
                                /* 0210 */  0x6C, 0x00, 0x1F, 0x80, 0x48, 0x40, 0xE6, 0x09,  // l...H@..
                                /* 0218 */  0x87, 0x06, 0x26, 0x80, 0x7F, 0x55, 0xF7, 0xA7,  // ..&..U..
                                /* 0220 */  0xE0, 0x33, 0x7B, 0xE7, 0xD0, 0xAB, 0x60, 0xC8,  // .3{...`.
                                /* 0228 */  0x43, 0xBA, 0x03, 0x21, 0x6A, 0xB9, 0x60, 0xFA,  // C..!j.`.
                                /* 0230 */  0xC6, 0xD7, 0x4A, 0x49, 0xE3, 0x7A, 0x1C, 0xC4,  // ..JI.z..
                                /* 0238 */  0x9D, 0xD6, 0x73, 0x63, 0xC8, 0xDC, 0x48, 0xD7,  // ..sc..H.
                                /* 0240 */  0xFC, 0x86, 0x8D, 0x58, 0xCC, 0xBB, 0xED, 0x76,  // ...X...v
                                /* 0248 */  0xB6, 0xDA, 0x93, 0xB9, 0x2E, 0xE7, 0xB2, 0x82,  // ........
                                /* 0250 */  0x8F, 0x02, 0xB2, 0x4A, 0xAE, 0x3C, 0xD0, 0x88,  // ...J.<..
                                /* 0258 */  0xE0, 0xC3, 0x6C, 0x3A, 0x0B, 0x2D, 0x18, 0xB3,  // ..l:.-..
                                /* 0260 */  0xF6, 0xDE, 0x6A, 0x74, 0xF0, 0xF8, 0xE6, 0xC5,  // ..jt....
                                /* 0268 */  0x41, 0x06, 0xC8, 0x26, 0x0E, 0xDD, 0xC9, 0xB2,  // A..&....
                                /* 0270 */  0x88, 0x8B, 0x9B, 0x4C, 0x85, 0x16, 0x98, 0x57,  // ...L...W
                                /* 0278 */  0xDB, 0xEB, 0x50, 0xDA, 0x15, 0x72, 0x96, 0xB3,  // ..P..r..
                                /* 0280 */  0x30, 0xC7, 0xE8, 0x2E, 0xC3, 0x23, 0x76, 0x24,  // 0....#v$
                                /* 0288 */  0x5C, 0x94, 0x9B, 0x9F, 0x7B, 0xB9, 0x89, 0x73,  // \...{..s
                                /* 0290 */  0xBF, 0xA7, 0x63, 0x9C, 0x10, 0xC3, 0xFF, 0x4C,  // ..c....L
                                /* 0298 */  0x57, 0x34, 0x7D, 0xDA, 0x58, 0x88, 0x4F, 0x5F,  // W4}.X.O_
                                /* 02A0 */  0xAC, 0x35, 0x26, 0x26, 0x67, 0xCB, 0x59, 0x65,  // .5&&g.Ye
                                /* 02A8 */  0x86, 0x36, 0x3F, 0x18, 0xA8, 0x9B, 0x6D, 0xE0,  // .6?...m.
                                /* 02B0 */  0xF0, 0xEB, 0xA9, 0xEF, 0x41, 0x90, 0xA0, 0xB3,  // ....A...
                                /* 02B8 */  0x25, 0xC0, 0x05, 0x3F, 0xCB, 0xB5, 0x01, 0x15,  // %..?....
                                /* 02C0 */  0xCE, 0x1F, 0xB2, 0x65, 0x14, 0x96, 0x8A, 0xEA,  // ...e....
                                /* 02C8 */  0x30, 0x93, 0x09, 0xF5, 0xF9, 0xD4, 0xA4, 0xC5,  // 0.......
                                /* 02D0 */  0xB4, 0x64, 0x07, 0xA4, 0xEA, 0x5C, 0xF2, 0xED,  // .d...\..
                                /* 02D8 */  0x17, 0xAB, 0x9D, 0x1A, 0x76, 0x04, 0x99, 0x2C,  // ....v..,
                                /* 02E0 */  0x81, 0x7F, 0xEF, 0x00, 0x8E, 0xE2, 0xE8, 0xCE,  // ........
                                /* 02E8 */  0xB9, 0x49, 0xFD, 0x3C, 0x13, 0x7D, 0xCA, 0xFF,  // .I.<.}..
                                /* 02F0 */  0xE6, 0xBC, 0xB8, 0x35, 0xD3, 0x03, 0x8B, 0x9B,  // ...5....
                                /* 02F8 */  0x52, 0x61, 0xC9, 0x0B, 0x30, 0xB3, 0xD8, 0x21,  // Ra..0..!
                                /* 0300 */  0xD9, 0x13, 0x12, 0x24, 0xA7, 0x2E, 0x83, 0x13,  // ...$....
                                /* 0308 */  0xC0, 0x48, 0xD3, 0x49, 0xF0, 0x07, 0xF0, 0xE1,  // .H.I....
                                /* 0310 */  0xF1, 0x0D, 0xAC, 0xB2, 0xDD, 0x70, 0x1B, 0x33,  // .....p.3
                                /* 0318 */  0x97, 0xE6, 0x5B, 0x0E, 0x22, 0x34, 0xBB, 0x93,  // ..[."4..
                                /* 0320 */  0x65, 0xEE, 0xD3, 0xCB, 0xD9, 0x5A, 0xA4, 0xCF,  // e....Z..
                                /* 0328 */  0xAD, 0x82, 0x8F, 0xB4, 0xCE, 0x64, 0x41, 0x56,  // .....dAV
                                /* 0330 */  0x85, 0xF0, 0xB8, 0x0F, 0x10, 0xD3, 0x0D, 0x3C,  // .......<
                                /* 0338 */  0x4D, 0x96, 0xAF, 0x51, 0x4D, 0x6D, 0x2F, 0x73,  // M..QMm/s
                                /* 0340 */  0x81, 0xCC, 0xC8, 0x11, 0x74, 0xA5, 0x77, 0xFD,  // ....t.w.
                                /* 0348 */  0xD1, 0x89, 0x41, 0x9B, 0xA3, 0x95, 0x97, 0x51,  // ..A....Q
                                /* 0350 */  0xB6, 0xFB, 0x59, 0x25, 0x5D, 0x2C, 0x55, 0x68,  // ..Y%],Uh
                                /* 0358 */  0x83, 0xFC, 0x6D, 0xEE, 0x7C, 0xA9, 0xD4, 0xA0,  // ..m.|...
                                /* 0360 */  0x72, 0xC2, 0xC0, 0xFC, 0x5D, 0xA2, 0x9D, 0xF3,  // r...]...
                                /* 0368 */  0xEE, 0x90, 0x9A, 0x06, 0x4A, 0xBC, 0xA6, 0x31,  // ....J..1
                                /* 0370 */  0xEC, 0x00, 0x8E, 0x3E, 0x17, 0xD5, 0x17, 0xB2,  // ...>....
                                /* 0378 */  0x22, 0xCD, 0x0B, 0x73, 0x25, 0xAE, 0xD9, 0xF8,  // "..s%...
                                /* 0380 */  0xBD, 0x2B, 0x57, 0x2E, 0xFC, 0x29, 0xA9, 0x45,  // .+W..).E
                                /* 0388 */  0xAD, 0xDB, 0xDE, 0x10, 0xD2, 0xBF, 0x22, 0x21,  // ......"!
                                /* 0390 */  0x14, 0xF6, 0x1C, 0x51, 0x4B, 0x12, 0x75, 0xB6,  // ...QK.u.
                                /* 0398 */  0x7C, 0x6C, 0x7F, 0x8B, 0xEB, 0x8C, 0xC2, 0xAB,  // |l......
                                /* 03A0 */  0xA6, 0x87, 0x2C, 0xA2, 0x83, 0x06, 0xA1, 0x03,  // ..,.....
                                /* 03A8 */  0x7D, 0xE0, 0x4B, 0xE1, 0xF9, 0xBB, 0xF2, 0xE9,  // }.K.....
                                /* 03B0 */  0xCA, 0x48, 0xB7, 0xAC, 0x62, 0xCF, 0x70, 0x0C,  // .H..b.p.
                                /* 03B8 */  0xE4, 0xC7, 0x1A, 0x31, 0xF8, 0xDB, 0x4C, 0x71,  // ...1..Lq
                                /* 03C0 */  0xBA, 0x40, 0xF0, 0xA4, 0x2E, 0xF6, 0x92, 0x05,  // .@......
                                /* 03C8 */  0x2D, 0x65, 0x17, 0x1C, 0x91, 0xB0, 0x7B, 0x63,  // -e....{c
                                /* 03D0 */  0x29, 0x20, 0x43, 0x5E, 0x82, 0xE7, 0x16, 0xEF,  // ) C^....
                                /* 03D8 */  0x48, 0x74, 0xD9, 0x58, 0x70, 0xF1, 0xE0, 0x10,  // Ht.Xp...
                                /* 03E0 */  0x07, 0x83, 0xBE, 0xBD, 0xD6, 0xF3, 0x08, 0x4E,  // .......N
                                /* 03E8 */  0xBC, 0xA5, 0xF7, 0xF1, 0xE1, 0x00, 0x57, 0xDD,  // ......W.
                                /* 03F0 */  0x15, 0xF0, 0xBF, 0x29, 0xC8, 0xAA, 0xC1, 0xC7,  // ...)....
                                /* 03F8 */  0xA3, 0x97, 0x3F, 0xE4, 0xB0, 0xAA, 0x8B, 0x9F,  // ..?.....
                                /* 0400 */  0x84, 0xD5, 0x63, 0x33, 0x5A, 0x81, 0x08, 0x2C,  // ..c3Z..,
                                /* 0408 */  0x8D, 0xBB, 0x98, 0xAC, 0xA7, 0x6D, 0xA9, 0x9B,  // .....m..
                                /* 0410 */  0x44, 0x77, 0x79, 0x19, 0x46, 0xE8, 0xC6, 0x70,  // Dwy.F..p
                                /* 0418 */  0x79, 0xC7, 0x9D, 0x17, 0xD1, 0x6E, 0xEE, 0x92,  // y....n..
                                /* 0420 */  0xC9, 0x58, 0xDE, 0x4C, 0x3F, 0xA1, 0x8C, 0x1A,  // .X.L?...
                                /* 0428 */  0xCF, 0x96, 0xCB, 0x50, 0x2C, 0x9D, 0xEC, 0x48,  // ...P,..H
                                /* 0430 */  0x29, 0xF7, 0xD7, 0x8F, 0x70, 0xDA, 0x4F, 0xA2,  // )...p.O.
                                /* 0438 */  0x3C, 0x72, 0x27, 0x74, 0x05, 0xC8, 0x51, 0xBE,  // <r't..Q.
                                /* 0440 */  0xC5, 0x76, 0x51, 0x8A, 0x7A, 0x14, 0x4B, 0xFC,  // .vQ.z.K.
                                /* 0448 */  0xC2, 0xE2, 0x26, 0x20, 0x6A, 0x01, 0xEB, 0x2A,  // ..& j..*
                                /* 0450 */  0x18, 0xF3, 0xA9, 0x61, 0x3F, 0x3B, 0xB4, 0x17,  // ...a?;..
                                /* 0458 */  0xFE, 0xB4, 0xB6, 0xFD, 0xD5, 0x62, 0x6D, 0x49,  // .....bmI
                                /* 0460 */  0x55, 0xC2, 0x4C, 0x80, 0x8D, 0xFC, 0x3A, 0x36,  // U.L...:6
                                /* 0468 */  0x79, 0x30, 0x76, 0xCE, 0x90, 0xA8, 0x4F, 0x2E,  // y0v...O.
                                /* 0470 */  0xC7, 0x8B, 0x67, 0x9C, 0x83, 0x24, 0x80, 0xDA,  // ..g..$..
                                /* 0478 */  0x35, 0x81, 0xBD, 0xF5, 0x2D, 0xB6, 0x30, 0xAC,  // 5...-.0.
                                /* 0480 */  0xA9, 0x23, 0x38, 0xB0, 0x34, 0x76, 0xCD, 0x92,  // .#8.4v..
                                /* 0488 */  0xEA, 0x66, 0x97, 0xA6, 0x46, 0x72, 0x68, 0x69,  // .f..Frhi
                                /* 0490 */  0xEC, 0xEF, 0x6E, 0x33, 0xAF, 0x7E, 0x2B, 0xB9,  // ..n3.~+.
                                /* 0498 */  0x49, 0x00, 0x72, 0x52, 0x21, 0x5B, 0x6A, 0xE0,  // I.rR![j.
                                /* 04A0 */  0x51, 0x92, 0xA2, 0x15, 0xA7, 0xE7, 0x17, 0xAD,  // Q.......
                                /* 04A8 */  0x02, 0x6F, 0x80, 0xDA, 0x9E, 0x3E, 0xA0, 0x45,  // .o...>.E
                                /* 04B0 */  0xCC, 0xDD, 0x21, 0x2C, 0x34, 0xE8, 0x0C, 0x12,  // ..!,4...
                                /* 04B8 */  0x8E, 0x6F, 0x0B, 0xF0, 0x35, 0x07, 0x11, 0x0E,  // .o..5...
                                /* 04C0 */  0x1D, 0x23, 0x68, 0x7B, 0xF1, 0x07, 0x64, 0x68,  // .#h{..dh
                                /* 04C8 */  0xAE, 0x60, 0x22, 0xE8, 0xC5, 0xF4, 0x8F, 0xEA,  // .`".....
                                /* 04D0 */  0x01, 0xC0, 0xD1, 0x0D, 0x29, 0x0D, 0xE8, 0xF8,  // ....)...
                                /* 04D8 */  0x81, 0xD8, 0x4F, 0x2B, 0x6C, 0x4F, 0x8A, 0x6A,  // ..O+lO.j
                                /* 04E0 */  0x8D, 0xE9, 0xFA, 0x72, 0x86, 0x56, 0xF9, 0x98,  // ...r.V..
                                /* 04E8 */  0xA9, 0x11, 0xBC, 0x08, 0x6D, 0xF0, 0x12, 0xE4,  // ....m...
                                /* 04F0 */  0xAC, 0xDB, 0xDA, 0xFB, 0x30, 0xF7, 0x6F, 0x7C,  // ....0.o|
                                /* 04F8 */  0xAA, 0x40, 0x28, 0xE7, 0x34, 0xAF, 0xE2, 0x6A,  // .@(.4..j
                                /* 0500 */  0x63, 0xBE, 0xE0, 0x07, 0x90, 0xC4, 0xEC, 0xF1,  // c.......
                                /* 0508 */  0x4B, 0x63, 0xB0, 0xF4, 0x4C, 0xAD, 0xA7, 0x55,  // Kc..L..U
                                /* 0510 */  0x2B, 0xDB, 0x67, 0x00, 0xA0, 0x34, 0xFA, 0xCE,  // +.g..4..
                                /* 0518 */  0x85, 0x5D, 0x03, 0xDD, 0x71, 0x8A, 0x1F, 0xBD,  // .]..q...
                                /* 0520 */  0x02, 0x0E, 0x88, 0xD7, 0x4B, 0x87, 0xC1, 0x01,  // ....K...
                                /* 0528 */  0x36, 0xFD, 0xA6, 0x22, 0x6E, 0x13, 0xAE, 0xB8,  // 6.."n...
                                /* 0530 */  0x81, 0xD6, 0xB6, 0xDF, 0x91, 0xCB, 0xAB, 0x57,  // .......W
                                /* 0538 */  0xA0, 0x5D, 0xB4, 0xAC, 0x4C, 0xF9, 0xCF, 0x97,  // .]..L...
                                /* 0540 */  0x02, 0x42, 0x55, 0xE8, 0x3B, 0xE0, 0x4A, 0xC3,  // .BU.;.J.
                                /* 0548 */  0xDD, 0xDD, 0x53, 0x70, 0xA6, 0xA7, 0x9B, 0xDB,  // ..Sp....
                                /* 0550 */  0x24, 0x40, 0xED, 0x33, 0x47, 0xF7, 0x97, 0xBF,  // $@.3G...
                                /* 0558 */  0x1B, 0x89, 0x4A, 0x30, 0x60, 0xC3, 0xBB, 0x08,  // ..J0`...
                                /* 0560 */  0x02, 0x2C, 0xCF, 0x37, 0x1C, 0x25, 0x40, 0xA6,  // .,.7.%@.
                                /* 0568 */  0xCF, 0x1E, 0x95, 0xBA, 0x66, 0x01, 0x06, 0x00,  // ....f...
                                /* 0570 */  0xA4, 0xCB, 0x3F, 0x1C, 0x80, 0xD0, 0xD7, 0xA8,  // ..?.....
                                /* 0578 */  0xF9, 0x46, 0x5E, 0x14, 0x7D, 0xB9, 0xB1, 0x0C,  // .F^.}...
                                /* 0580 */  0xAF, 0x3C, 0xAE, 0x9E, 0x52, 0x1F, 0xEC, 0x94,  // .<..R...
                                /* 0588 */  0x3D, 0x00, 0x2D, 0x70, 0x3B, 0xF2, 0x30, 0x84,  // =.-p;.0.
                                /* 0590 */  0x13, 0xDB, 0x56, 0xA0, 0x5A, 0x1A, 0xF7, 0x7F,  // ..V.Z...
                                /* 0598 */  0x2C, 0x1C, 0xD8, 0x25, 0x40, 0x7B, 0x95, 0xA2,  // ,..%@{..
                                /* 05A0 */  0x38, 0x74, 0x52, 0x66, 0xD8, 0x01, 0x8B, 0xC7,  // 8tRf....
                                /* 05A8 */  0xB2, 0x0D, 0x34, 0x82, 0x8B, 0x31, 0xE9, 0xE6,  // ..4..1..
                                /* 05B0 */  0xAF, 0x9D, 0x3D, 0xC4, 0xEA, 0x17, 0x6D, 0xE2,  // ..=...m.
                                /* 05B8 */  0x74, 0x14, 0xD1, 0xB8, 0x77, 0xB4, 0x39, 0xD7,  // t...w.9.
                                /* 05C0 */  0x64, 0x85, 0xCC, 0xD1, 0xE3, 0xB3, 0x8C, 0xA2,  // d.......
                                /* 05C8 */  0x01, 0xD9, 0x6A, 0x35, 0xEE, 0xE9, 0x26, 0x99,  // ..j5..&.
                                /* 05D0 */  0xF7, 0xAD, 0x42, 0xC5, 0x78, 0x8D, 0xC8, 0xC8,  // ..B.x...
                                /* 05D8 */  0x32, 0xDF, 0xBC, 0x59, 0xB9, 0xC1, 0x4E, 0x29,  // 2..Y..N)
                                /* 05E0 */  0x17, 0x47, 0xB9, 0x88, 0x13, 0xAB, 0x48, 0x90,  // .G....H.
                                /* 05E8 */  0x43, 0x04, 0x46, 0xDC, 0x3A, 0xE7, 0x96, 0xDF,  // C.F.:...
                                /* 05F0 */  0x64, 0xD1, 0x8F, 0xDE, 0xF3, 0x0E, 0x86, 0x2A,  // d......*
                                /* 05F8 */  0x46, 0x6A, 0xB6, 0x01, 0x7D, 0x83, 0xDB, 0x43,  // Fj..}..C
                                /* 0600 */  0x00                                             // .
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x01)
                        {
                            Buffer (0x05FB)
                            {
                                /* 0000 */  0xE5, 0x1F, 0x94, 0x00, 0x00, 0x00, 0x00, 0x02,  // ........
                                /* 0008 */  0x00, 0x00, 0x00, 0x40, 0x67, 0x64, 0x64, 0x76,  // ...@gddv
                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x4F, 0x45, 0x4D, 0x20,  // ....OEM 
                                /* 0030 */  0x45, 0x78, 0x70, 0x6F, 0x72, 0x74, 0x65, 0x64,  // Exported
                                /* 0038 */  0x20, 0x44, 0x61, 0x74, 0x61, 0x56, 0x61, 0x75,  //  DataVau
                                /* 0040 */  0x6C, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // lt......
                                /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0068 */  0x00, 0x00, 0x00, 0x00, 0x29, 0xF0, 0x8D, 0x88,  // ....)...
                                /* 0070 */  0x43, 0xB2, 0x3B, 0x3A, 0x3C, 0x2D, 0x6C, 0x79,  // C.;:<-ly
                                /* 0078 */  0xB8, 0xD1, 0x4D, 0x91, 0x19, 0x03, 0x9A, 0x15,  // ..M.....
                                /* 0080 */  0xDD, 0x5E, 0xCC, 0x8A, 0xDA, 0xC7, 0x7F, 0x40,  // .^.....@
                                /* 0088 */  0xAC, 0xF2, 0x1F, 0xF2, 0x67, 0x05, 0x00, 0x00,  // ....g...
                                /* 0090 */  0x52, 0x45, 0x50, 0x4F, 0x5D, 0x00, 0x00, 0x00,  // REPO]...
                                /* 0098 */  0x01, 0x7E, 0x77, 0x00, 0x00, 0x00, 0x00, 0x00,  // .~w.....
                                /* 00A0 */  0x00, 0x00, 0x72, 0x87, 0xCD, 0xFF, 0x6D, 0x24,  // ..r...m$
                                /* 00A8 */  0x47, 0xDB, 0x3D, 0x24, 0x92, 0xB4, 0x16, 0x6F,  // G.=$...o
                                /* 00B0 */  0x45, 0xD8, 0xC3, 0xF5, 0x66, 0x14, 0x9F, 0x22,  // E...f.."
                                /* 00B8 */  0xD7, 0xF7, 0xDE, 0x67, 0x90, 0x9A, 0xA2, 0x0D,  // ...g....
                                /* 00C0 */  0x39, 0x25, 0xAD, 0xC3, 0x1A, 0xAD, 0x52, 0x0B,  // 9%....R.
                                /* 00C8 */  0x75, 0x38, 0xE1, 0xA4, 0x14, 0x42, 0x4B, 0x56,  // u8...BKV
                                /* 00D0 */  0xA9, 0xEF, 0xE3, 0x12, 0xE0, 0x1E, 0x70, 0xD9,  // ......p.
                                /* 00D8 */  0x26, 0x5B, 0xDC, 0x4C, 0xA2, 0x54, 0xDC, 0x73,  // &[.L.T.s
                                /* 00E0 */  0xDD, 0xB6, 0x6C, 0xD5, 0xA1, 0xA8, 0x18, 0x0F,  // ..l.....
                                /* 00E8 */  0xBB, 0xC2, 0x75, 0xF3, 0xCD, 0xC3, 0x39, 0x6B,  // ..u...9k
                                /* 00F0 */  0x3B, 0x03, 0x5A, 0x10, 0x28, 0x2B, 0x12, 0x39,  // ;.Z.(+.9
                                /* 00F8 */  0x5E, 0x1B, 0x61, 0x76, 0x52, 0xDA, 0xB2, 0xB1,  // ^.avR...
                                /* 0100 */  0xA1, 0xE2, 0x61, 0xF3, 0xC1, 0xA4, 0xA7, 0x22,  // ..a...."
                                /* 0108 */  0xB5, 0x25, 0xCE, 0x96, 0x28, 0x1E, 0x67, 0xAA,  // .%..(.g.
                                /* 0110 */  0x41, 0xFF, 0xC9, 0x83, 0xB1, 0x26, 0x9D, 0xC9,  // A....&..
                                /* 0118 */  0x88, 0x08, 0xA9, 0x13, 0x9C, 0x33, 0xA6, 0x31,  // .....3.1
                                /* 0120 */  0xD8, 0xD0, 0xC6, 0x78, 0xBF, 0x35, 0x80, 0xF9,  // ...x.5..
                                /* 0128 */  0xEE, 0xBF, 0x16, 0x99, 0x0B, 0x3C, 0xAF, 0xFD,  // .....<..
                                /* 0130 */  0x05, 0x35, 0x2D, 0x74, 0x23, 0x01, 0xF5, 0x24,  // .5-t#..$
                                /* 0138 */  0xDB, 0xC2, 0x10, 0xFA, 0x22, 0x1A, 0x5D, 0x28,  // ....".](
                                /* 0140 */  0xEE, 0x85, 0x36, 0x1F, 0xEB, 0xF4, 0xA9, 0x6E,  // ..6....n
                                /* 0148 */  0x25, 0xE6, 0x33, 0x52, 0xFC, 0x5F, 0x78, 0x16,  // %.3R._x.
                                /* 0150 */  0x1B, 0x62, 0x8F, 0x7B, 0x8B, 0xB7, 0x5D, 0xD8,  // .b.{..].
                                /* 0158 */  0x1F, 0x31, 0x37, 0xAA, 0xBF, 0xFC, 0x10, 0xE9,  // .17.....
                                /* 0160 */  0x9C, 0x80, 0x1F, 0x71, 0xA8, 0xB1, 0x6B, 0x07,  // ...q..k.
                                /* 0168 */  0xB3, 0x4F, 0x93, 0x1A, 0x9F, 0xA8, 0x5A, 0xCE,  // .O....Z.
                                /* 0170 */  0x6C, 0xEA, 0xEE, 0x6B, 0x2E, 0xF5, 0xC4, 0x50,  // l..k...P
                                /* 0178 */  0xDF, 0xAD, 0xC4, 0xA1, 0xE5, 0x27, 0x34, 0x0C,  // .....'4.
                                /* 0180 */  0x32, 0x0A, 0xEE, 0xBB, 0xA2, 0x09, 0x3A, 0xEF,  // 2.....:.
                                /* 0188 */  0xB8, 0x7E, 0x6A, 0x59, 0x9E, 0xF8, 0x01, 0xC7,  // .~jY....
                                /* 0190 */  0xED, 0xFF, 0x22, 0xE0, 0x15, 0x47, 0xA9, 0x89,  // .."..G..
                                /* 0198 */  0xF5, 0x3F, 0xED, 0x0D, 0x94, 0xA5, 0xAE, 0xAE,  // .?......
                                /* 01A0 */  0xD0, 0x6A, 0xB5, 0x85, 0xAB, 0xEC, 0x85, 0x20,  // .j..... 
                                /* 01A8 */  0x15, 0x36, 0x72, 0x3A, 0x1B, 0x17, 0x65, 0x1F,  // .6r:..e.
                                /* 01B0 */  0x1A, 0xD8, 0x92, 0xEA, 0xFB, 0x8B, 0xD6, 0xE0,  // ........
                                /* 01B8 */  0x3F, 0x0E, 0x3B, 0x95, 0x74, 0x91, 0x4F, 0xCB,  // ?.;.t.O.
                                /* 01C0 */  0xA4, 0x19, 0xFB, 0x8E, 0x93, 0xD0, 0xA2, 0x3C,  // .......<
                                /* 01C8 */  0x4B, 0xAB, 0x10, 0x31, 0xFD, 0x66, 0x84, 0xA6,  // K..1.f..
                                /* 01D0 */  0x83, 0xF8, 0xC4, 0x24, 0xF5, 0x91, 0xEF, 0xD7,  // ...$....
                                /* 01D8 */  0x20, 0xCC, 0xBC, 0x54, 0x5F, 0xE1, 0xD9, 0x40,  //  ..T_..@
                                /* 01E0 */  0x97, 0xF5, 0xE8, 0x0A, 0x0E, 0x63, 0x62, 0xD8,  // .....cb.
                                /* 01E8 */  0xD7, 0xAF, 0x63, 0xAB, 0x51, 0xD4, 0x77, 0xEF,  // ..c.Q.w.
                                /* 01F0 */  0xBE, 0xC3, 0xD8, 0xAE, 0x30, 0xD0, 0xD8, 0x3B,  // ....0..;
                                /* 01F8 */  0xF5, 0xF8, 0x85, 0x2B, 0x3B, 0x7A, 0x97, 0xA8,  // ...+;z..
                                /* 0200 */  0x9D, 0xF7, 0x59, 0xB6, 0x49, 0x9A, 0x69, 0x63,  // ..Y.I.ic
                                /* 0208 */  0x1C, 0x41, 0x18, 0x21, 0xC8, 0xEE, 0x37, 0x87,  // .A.!..7.
                                /* 0210 */  0xD7, 0xD7, 0x8C, 0x89, 0xA1, 0xB1, 0xD3, 0x1A,  // ........
                                /* 0218 */  0x86, 0x08, 0x8F, 0x68, 0xE5, 0xF9, 0xAC, 0x53,  // ...h...S
                                /* 0220 */  0x76, 0x87, 0xEA, 0xD5, 0xBA, 0x03, 0xAF, 0xE4,  // v.......
                                /* 0228 */  0x2D, 0x93, 0x83, 0x92, 0xEF, 0x47, 0x59, 0x82,  // -....GY.
                                /* 0230 */  0x5F, 0x23, 0x75, 0xCD, 0xA9, 0x95, 0xEF, 0x17,  // _#u.....
                                /* 0238 */  0xE6, 0xF5, 0x72, 0xDA, 0x4B, 0x5D, 0x61, 0x37,  // ..r.K]a7
                                /* 0240 */  0x79, 0x35, 0x9E, 0xDE, 0x93, 0x18, 0x64, 0xD5,  // y5....d.
                                /* 0248 */  0x5C, 0x4F, 0xE8, 0x88, 0xB1, 0x9C, 0x01, 0x73,  // \O.....s
                                /* 0250 */  0xAB, 0x4E, 0x96, 0x99, 0x72, 0xBF, 0x72, 0xB9,  // .N..r.r.
                                /* 0258 */  0xC2, 0xB8, 0x13, 0xCF, 0x1F, 0x23, 0x64, 0x90,  // .....#d.
                                /* 0260 */  0xFB, 0x5A, 0x81, 0x45, 0x92, 0xF5, 0xA6, 0x55,  // .Z.E...U
                                /* 0268 */  0x54, 0x0D, 0xB7, 0x28, 0x46, 0x1C, 0xDC, 0x0B,  // T..(F...
                                /* 0270 */  0x80, 0x64, 0xED, 0x2B, 0x95, 0x49, 0xE9, 0x0D,  // .d.+.I..
                                /* 0278 */  0x7B, 0x54, 0x3B, 0xE7, 0xCD, 0xB3, 0xDA, 0xA6,  // {T;.....
                                /* 0280 */  0x09, 0xF4, 0x51, 0x72, 0x02, 0x9E, 0x43, 0x89,  // ..Qr..C.
                                /* 0288 */  0x89, 0xB8, 0x04, 0xFA, 0x55, 0xF7, 0x8D, 0xAE,  // ....U...
                                /* 0290 */  0x47, 0x43, 0xF8, 0x39, 0xF9, 0x9A, 0x57, 0x1B,  // GC.9..W.
                                /* 0298 */  0x91, 0x93, 0x35, 0x76, 0xAD, 0x7F, 0x26, 0xAC,  // ..5v..&.
                                /* 02A0 */  0xE1, 0xB2, 0x3A, 0x26, 0xD0, 0xB2, 0xE3, 0x9D,  // ..:&....
                                /* 02A8 */  0x17, 0xBD, 0x00, 0xEA, 0x6C, 0x05, 0x1A, 0x82,  // ....l...
                                /* 02B0 */  0xAC, 0x5F, 0x52, 0x5E, 0xDC, 0x70, 0x89, 0x71,  // ._R^.p.q
                                /* 02B8 */  0x21, 0xC7, 0x7F, 0xBA, 0x58, 0xAB, 0xA8, 0x47,  // !...X..G
                                /* 02C0 */  0x51, 0x09, 0xF5, 0x86, 0x36, 0x03, 0xA6, 0x50,  // Q...6..P
                                /* 02C8 */  0x2B, 0x70, 0x12, 0x80, 0x48, 0x9D, 0x26, 0x00,  // +p..H.&.
                                /* 02D0 */  0xD9, 0xB7, 0x9F, 0xA9, 0xAA, 0x27, 0x89, 0x3E,  // .....'.>
                                /* 02D8 */  0xCB, 0x87, 0x4A, 0x01, 0x82, 0x37, 0x1D, 0xCC,  // ..J..7..
                                /* 02E0 */  0x97, 0x9D, 0x62, 0xB3, 0x4A, 0x27, 0x00, 0x7D,  // ..b.J'.}
                                /* 02E8 */  0x50, 0x36, 0xA3, 0xE3, 0x77, 0x90, 0x73, 0x8A,  // P6..w.s.
                                /* 02F0 */  0x7B, 0x9C, 0x45, 0x1E, 0xD3, 0x7A, 0xBD, 0xC9,  // {.E..z..
                                /* 02F8 */  0x16, 0x22, 0xFB, 0x9A, 0xD0, 0x13, 0xFC, 0xB0,  // ."......
                                /* 0300 */  0x2B, 0x55, 0x86, 0x10, 0x28, 0xD7, 0x1E, 0xE3,  // +U..(...
                                /* 0308 */  0xB2, 0x2D, 0xAE, 0xCB, 0xEF, 0x98, 0x55, 0x8C,  // .-....U.
                                /* 0310 */  0x8B, 0xC4, 0x5E, 0x3E, 0xC7, 0x9E, 0x03, 0xB7,  // ..^>....
                                /* 0318 */  0x88, 0x82, 0x67, 0x63, 0x77, 0xFE, 0x68, 0x98,  // ..gcw.h.
                                /* 0320 */  0x8D, 0x2C, 0xE3, 0x55, 0x14, 0x6B, 0x7E, 0xC9,  // .,.U.k~.
                                /* 0328 */  0x49, 0xE4, 0x5D, 0xE8, 0xAB, 0x0D, 0xC8, 0x1A,  // I.].....
                                /* 0330 */  0x61, 0x9A, 0xA5, 0x02, 0xA3, 0x3E, 0x4C, 0x6A,  // a....>Lj
                                /* 0338 */  0x1C, 0x1C, 0x51, 0x7A, 0xBC, 0x16, 0x52, 0xF2,  // ..Qz..R.
                                /* 0340 */  0xD6, 0xE7, 0x4E, 0x60, 0xA2, 0xF8, 0x1B, 0x1C,  // ..N`....
                                /* 0348 */  0xC1, 0x5C, 0xED, 0x87, 0x67, 0x86, 0x4B, 0xDB,  // .\..g.K.
                                /* 0350 */  0x4E, 0x5B, 0x63, 0x3B, 0xA2, 0xC4, 0x72, 0x74,  // N[c;..rt
                                /* 0358 */  0x45, 0x84, 0x51, 0xD7, 0x2C, 0xDF, 0x9E, 0x58,  // E.Q.,..X
                                /* 0360 */  0xB5, 0xAA, 0x74, 0xE0, 0x71, 0x37, 0x60, 0x6D,  // ..t.q7`m
                                /* 0368 */  0xBE, 0x3F, 0x66, 0x13, 0x72, 0x6C, 0xFA, 0x15,  // .?f.rl..
                                /* 0370 */  0xB5, 0xF0, 0x80, 0xEF, 0xBE, 0x83, 0xD5, 0x07,  // ........
                                /* 0378 */  0x34, 0xAC, 0xB0, 0x2D, 0x7F, 0xFA, 0xF6, 0x35,  // 4..-...5
                                /* 0380 */  0xA7, 0x12, 0x71, 0xF6, 0x85, 0x25, 0xFF, 0x83,  // ..q..%..
                                /* 0388 */  0xAB, 0xF4, 0x8A, 0x8E, 0x8E, 0xF9, 0x0E, 0xFB,  // ........
                                /* 0390 */  0x11, 0x77, 0x51, 0xE4, 0xAD, 0x94, 0xCC, 0x81,  // .wQ.....
                                /* 0398 */  0xF3, 0xC3, 0xA2, 0xFD, 0x74, 0x09, 0xC9, 0xCB,  // ....t...
                                /* 03A0 */  0x82, 0x8B, 0x15, 0x71, 0x14, 0x1A, 0xAD, 0xA9,  // ...q....
                                /* 03A8 */  0xE4, 0x5F, 0x28, 0x89, 0x38, 0x53, 0x07, 0x68,  // ._(.8S.h
                                /* 03B0 */  0x64, 0x0B, 0xDE, 0x7F, 0x6B, 0xDF, 0x26, 0x75,  // d...k.&u
                                /* 03B8 */  0xE5, 0xD4, 0x83, 0x55, 0x51, 0x36, 0x67, 0x4A,  // ...UQ6gJ
                                /* 03C0 */  0xAF, 0xB6, 0x27, 0x24, 0x7D, 0xE1, 0xA9, 0x6C,  // ..'$}..l
                                /* 03C8 */  0x05, 0xEA, 0x01, 0x64, 0xC9, 0xD8, 0x17, 0x82,  // ...d....
                                /* 03D0 */  0x7F, 0x37, 0xC4, 0xFE, 0x04, 0x9E, 0x41, 0x7A,  // .7....Az
                                /* 03D8 */  0x99, 0x12, 0x9F, 0x3A, 0xAD, 0x25, 0x87, 0xAA,  // ...:.%..
                                /* 03E0 */  0xFB, 0xC0, 0x68, 0x6C, 0x9A, 0x44, 0xB2, 0xF0,  // ..hl.D..
                                /* 03E8 */  0xB7, 0x83, 0xB9, 0x03, 0x98, 0x75, 0xB0, 0xC6,  // .....u..
                                /* 03F0 */  0x73, 0xE1, 0x2F, 0xDC, 0xDC, 0xF1, 0x0F, 0xF7,  // s./.....
                                /* 03F8 */  0x87, 0xE3, 0xEE, 0x26, 0xB4, 0x71, 0xD2, 0xFA,  // ...&.q..
                                /* 0400 */  0xDE, 0x84, 0x2E, 0x5D, 0x11, 0x78, 0xDF, 0x9C,  // ...].x..
                                /* 0408 */  0xCD, 0xFB, 0xAF, 0x60, 0x2C, 0x3C, 0x66, 0x76,  // ...`,<fv
                                /* 0410 */  0xCC, 0xD9, 0xB3, 0xCF, 0xE3, 0x53, 0xB2, 0xD8,  // .....S..
                                /* 0418 */  0xB6, 0xBF, 0x39, 0xF3, 0x7F, 0x8A, 0x46, 0x54,  // ..9...FT
                                /* 0420 */  0x6D, 0x8C, 0xF8, 0xC9, 0x8A, 0x09, 0x42, 0x73,  // m.....Bs
                                /* 0428 */  0xDE, 0x96, 0xE9, 0xF9, 0x98, 0x29, 0xCC, 0x19,  // .....)..
                                /* 0430 */  0xCE, 0x53, 0x6C, 0xFA, 0xC9, 0x19, 0x5F, 0x67,  // .Sl..._g
                                /* 0438 */  0x30, 0x1E, 0x78, 0x45, 0x7D, 0xC0, 0xC6, 0x0E,  // 0.xE}...
                                /* 0440 */  0x85, 0xCB, 0xB9, 0x9B, 0xF9, 0x13, 0xAE, 0xA9,  // ........
                                /* 0448 */  0xA8, 0xE0, 0x65, 0x60, 0x14, 0x1D, 0xBA, 0x72,  // ..e`...r
                                /* 0450 */  0x0D, 0x5E, 0xA8, 0xD2, 0x8F, 0x2B, 0xA7, 0x2C,  // .^...+.,
                                /* 0458 */  0x8C, 0x8C, 0x05, 0x49, 0xAC, 0xF3, 0xD8, 0x4F,  // ...I...O
                                /* 0460 */  0x2A, 0x81, 0x81, 0x9D, 0x25, 0x32, 0x1E, 0xA4,  // *...%2..
                                /* 0468 */  0xA7, 0x79, 0xA4, 0x13, 0x8B, 0x9E, 0x34, 0x00,  // .y....4.
                                /* 0470 */  0x46, 0xE2, 0x47, 0x40, 0xA3, 0x49, 0x90, 0xCE,  // F.G@.I..
                                /* 0478 */  0xD2, 0x55, 0xE2, 0x2C, 0x86, 0x2A, 0x57, 0xD6,  // .U.,.*W.
                                /* 0480 */  0xE4, 0xB4, 0xA3, 0x49, 0x9F, 0x0C, 0xFC, 0x64,  // ...I...d
                                /* 0488 */  0xD5, 0xD4, 0x90, 0x90, 0x6F, 0x4E, 0xDD, 0x72,  // ....oN.r
                                /* 0490 */  0xA8, 0xE5, 0xEB, 0x9C, 0x00, 0xC2, 0x48, 0xE6,  // ......H.
                                /* 0498 */  0xE6, 0x9A, 0x4B, 0x01, 0x36, 0x06, 0xA9, 0x65,  // ..K.6..e
                                /* 04A0 */  0xC5, 0x06, 0x72, 0xF8, 0x8D, 0x9C, 0xF9, 0x75,  // ..r....u
                                /* 04A8 */  0x56, 0x1F, 0x03, 0xE1, 0x7F, 0x0B, 0xEE, 0xDC,  // V.......
                                /* 04B0 */  0x7C, 0xF6, 0x52, 0x72, 0x5D, 0xE8, 0x5A, 0x30,  // |.Rr].Z0
                                /* 04B8 */  0xE1, 0x53, 0x3D, 0x4D, 0x72, 0x5F, 0x6C, 0xA2,  // .S=Mr_l.
                                /* 04C0 */  0xAD, 0x95, 0x86, 0x85, 0x4C, 0x72, 0x48, 0x2E,  // ....LrH.
                                /* 04C8 */  0xE6, 0x34, 0xFB, 0x02, 0x63, 0xFA, 0xCA, 0x96,  // .4..c...
                                /* 04D0 */  0x74, 0x85, 0x90, 0xC7, 0xAF, 0x0C, 0xAC, 0xAE,  // t.......
                                /* 04D8 */  0xFB, 0xB7, 0x25, 0x45, 0x00, 0x40, 0x1F, 0x10,  // ..%E.@..
                                /* 04E0 */  0x59, 0xE5, 0xCA, 0x5B, 0x47, 0xDD, 0x75, 0x01,  // Y..[G.u.
                                /* 04E8 */  0xAB, 0x6E, 0xEF, 0xCA, 0x23, 0x57, 0x51, 0xCA,  // .n..#WQ.
                                /* 04F0 */  0xC0, 0x6E, 0x8C, 0x39, 0x59, 0x6D, 0x89, 0xAD,  // .n.9Ym..
                                /* 04F8 */  0x37, 0x29, 0x9E, 0xCE, 0x02, 0xA9, 0xC2, 0x3A,  // 7).....:
                                /* 0500 */  0x81, 0x33, 0x16, 0x49, 0x14, 0xA8, 0x89, 0xC3,  // .3.I....
                                /* 0508 */  0xF2, 0x14, 0x61, 0x00, 0x49, 0x3E, 0xA3, 0xC8,  // ..a.I>..
                                /* 0510 */  0x2C, 0x0B, 0x62, 0x7C, 0x19, 0xB0, 0x5F, 0x87,  // ,.b|.._.
                                /* 0518 */  0xF1, 0x3E, 0x73, 0x22, 0x3E, 0x5B, 0x42, 0x2A,  // .>s">[B*
                                /* 0520 */  0xDC, 0x18, 0x84, 0xA4, 0x6C, 0x7C, 0x32, 0x6A,  // ....l|2j
                                /* 0528 */  0x21, 0xB6, 0x22, 0x25, 0x53, 0x3D, 0xAA, 0x7F,  // !."%S=..
                                /* 0530 */  0x80, 0xF6, 0x46, 0x8D, 0x1A, 0xCA, 0xD7, 0x6B,  // ..F....k
                                /* 0538 */  0x27, 0xB6, 0x63, 0xC1, 0xD3, 0xF0, 0x94, 0x63,  // '.c....c
                                /* 0540 */  0x15, 0x5F, 0xB2, 0x13, 0x8A, 0xDF, 0x69, 0x7D,  // ._....i}
                                /* 0548 */  0x83, 0xAD, 0x3E, 0x88, 0x0D, 0x99, 0xBC, 0xE6,  // ..>.....
                                /* 0550 */  0xD5, 0x3D, 0xED, 0x54, 0xBB, 0x14, 0x98, 0xA6,  // .=.T....
                                /* 0558 */  0x24, 0x6A, 0x65, 0x0F, 0xFC, 0x6D, 0x88, 0x2D,  // $je..m.-
                                /* 0560 */  0x5B, 0x80, 0x7A, 0x4B, 0x99, 0x62, 0x70, 0xFF,  // [.zK.bp.
                                /* 0568 */  0xF3, 0x3B, 0xDB, 0x62, 0x75, 0xC5, 0x36, 0xB2,  // .;.bu.6.
                                /* 0570 */  0xAF, 0x28, 0x62, 0xA9, 0x35, 0xDC, 0xD0, 0x26,  // .(b.5..&
                                /* 0578 */  0x14, 0x67, 0x5B, 0xE8, 0xEB, 0xC3, 0x83, 0x90,  // .g[.....
                                /* 0580 */  0xC6, 0x88, 0x38, 0xC8, 0xC3, 0x9B, 0xD8, 0x0C,  // ..8.....
                                /* 0588 */  0xE0, 0x5D, 0x72, 0xBD, 0xF6, 0xC8, 0x2F, 0x19,  // .]r.../.
                                /* 0590 */  0xC5, 0x1F, 0xDA, 0x99, 0xDC, 0x31, 0x3D, 0xA7,  // .....1=.
                                /* 0598 */  0x02, 0xD6, 0xC4, 0x9D, 0x60, 0x24, 0x97, 0x4F,  // ....`$.O
                                /* 05A0 */  0x40, 0x53, 0xE2, 0x3F, 0xF8, 0x2E, 0x0D, 0x10,  // @S.?....
                                /* 05A8 */  0x52, 0x7F, 0xF1, 0x30, 0x05, 0x86, 0x45, 0x30,  // R..0..E0
                                /* 05B0 */  0x9E, 0x05, 0xC8, 0x90, 0x89, 0xFD, 0x43, 0x3C,  // ......C<
                                /* 05B8 */  0xF0, 0xDC, 0xE4, 0xE8, 0x14, 0xD9, 0x62, 0xC1,  // ......b.
                                /* 05C0 */  0x00, 0xE2, 0x87, 0x97, 0xB2, 0x7A, 0x1B, 0x46,  // .....z.F
                                /* 05C8 */  0x1A, 0xFB, 0x80, 0xBE, 0xFA, 0x4D, 0x30, 0xCB,  // .....M0.
                                /* 05D0 */  0x09, 0x1F, 0x32, 0xA3, 0xDD, 0xA1, 0x01, 0x7B,  // ..2....{
                                /* 05D8 */  0x0F, 0xC8, 0x39, 0x24, 0x72, 0x17, 0x76, 0x4A,  // ..9$r.vJ
                                /* 05E0 */  0xF6, 0x87, 0xD5, 0x51, 0xAD, 0xFA, 0x8B, 0xF9,  // ...Q....
                                /* 05E8 */  0xE5, 0x46, 0xFF, 0x8A, 0xEE, 0xA7, 0x53, 0x76,  // .F....Sv
                                /* 05F0 */  0x40, 0xCD, 0x97, 0x03, 0x59, 0xDE, 0x3F, 0x04,  // @...Y.?.
                                /* 05F8 */  0x3A, 0x21, 0xA8                                 // :!.
                            }
                        })
                    }
                }
                ElseIf ((MCSK == 0x03))
                {
                    If ((GTYP == 0x02))
                    {
                        Return (Package (0x01)
                        {
                            Buffer (0x05FB)
                            {
                                /* 0000 */  0xE5, 0x1F, 0x94, 0x00, 0x00, 0x00, 0x00, 0x02,  // ........
                                /* 0008 */  0x00, 0x00, 0x00, 0x40, 0x67, 0x64, 0x64, 0x76,  // ...@gddv
                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x4F, 0x45, 0x4D, 0x20,  // ....OEM 
                                /* 0030 */  0x45, 0x78, 0x70, 0x6F, 0x72, 0x74, 0x65, 0x64,  // Exported
                                /* 0038 */  0x20, 0x44, 0x61, 0x74, 0x61, 0x56, 0x61, 0x75,  //  DataVau
                                /* 0040 */  0x6C, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // lt......
                                /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0068 */  0x00, 0x00, 0x00, 0x00, 0x1F, 0x06, 0xD0, 0x66,  // .......f
                                /* 0070 */  0x90, 0x14, 0x36, 0xBF, 0x57, 0x1F, 0x77, 0xEE,  // ..6.W.w.
                                /* 0078 */  0x72, 0x79, 0xA2, 0x26, 0x2A, 0xB4, 0xF8, 0x0A,  // ry.&*...
                                /* 0080 */  0x1E, 0x58, 0x38, 0x75, 0x1F, 0xA2, 0xB9, 0x02,  // .X8u....
                                /* 0088 */  0xFD, 0x2F, 0x1C, 0x8C, 0x67, 0x05, 0x00, 0x00,  // ./..g...
                                /* 0090 */  0x52, 0x45, 0x50, 0x4F, 0x5D, 0x00, 0x00, 0x00,  // REPO]...
                                /* 0098 */  0x01, 0x76, 0x77, 0x00, 0x00, 0x00, 0x00, 0x00,  // .vw.....
                                /* 00A0 */  0x00, 0x00, 0x72, 0x87, 0xCD, 0xFF, 0x6D, 0x24,  // ..r...m$
                                /* 00A8 */  0x47, 0xDB, 0x3D, 0x24, 0x92, 0xB4, 0x16, 0x6F,  // G.=$...o
                                /* 00B0 */  0x45, 0xD8, 0xC3, 0xF5, 0x66, 0x14, 0x9F, 0x22,  // E...f.."
                                /* 00B8 */  0xD7, 0xF7, 0xDE, 0x67, 0x90, 0x9A, 0xA2, 0x0D,  // ...g....
                                /* 00C0 */  0x39, 0x25, 0xAD, 0xC3, 0x1A, 0xAD, 0x52, 0x0B,  // 9%....R.
                                /* 00C8 */  0x75, 0x38, 0xE1, 0xA4, 0x14, 0x44, 0x01, 0xD2,  // u8...D..
                                /* 00D0 */  0x19, 0x88, 0x0E, 0xC5, 0x34, 0x33, 0x46, 0x6B,  // ....43Fk
                                /* 00D8 */  0xD0, 0x19, 0x56, 0xEC, 0x8E, 0xC9, 0x5F, 0x1A,  // ..V..._.
                                /* 00E0 */  0xA6, 0xC9, 0x4C, 0xFC, 0x80, 0xD8, 0x9F, 0x6D,  // ..L....m
                                /* 00E8 */  0xC4, 0x30, 0x4A, 0x52, 0xC8, 0x5E, 0x89, 0xAD,  // .0JR.^..
                                /* 00F0 */  0xDB, 0xD9, 0xC0, 0x58, 0x9B, 0x29, 0xE7, 0xD5,  // ...X.)..
                                /* 00F8 */  0x0B, 0x85, 0x4D, 0xD9, 0x21, 0xFC, 0x73, 0x1F,  // ..M.!.s.
                                /* 0100 */  0xD6, 0x52, 0x09, 0xEA, 0x26, 0x1C, 0x22, 0x49,  // .R..&."I
                                /* 0108 */  0x12, 0xD2, 0x47, 0x77, 0x2C, 0x57, 0xBC, 0x5B,  // ..Gw,W.[
                                /* 0110 */  0xDD, 0x33, 0xF6, 0x50, 0x3A, 0x39, 0xF5, 0x6B,  // .3.P:9.k
                                /* 0118 */  0xDB, 0x1B, 0xB8, 0x80, 0xAE, 0xE9, 0xAB, 0xD7,  // ........
                                /* 0120 */  0xC6, 0x2D, 0xCC, 0xFC, 0xD6, 0x93, 0x93, 0x86,  // .-......
                                /* 0128 */  0xEA, 0x75, 0xB0, 0x84, 0x11, 0x11, 0xA3, 0x4F,  // .u.....O
                                /* 0130 */  0x9C, 0x84, 0x9E, 0x15, 0xB1, 0x55, 0x55, 0x4D,  // .....UUM
                                /* 0138 */  0x27, 0x5B, 0xB9, 0xA5, 0x51, 0x3B, 0x86, 0xE4,  // '[..Q;..
                                /* 0140 */  0x4E, 0x2E, 0xE8, 0x62, 0x09, 0xEF, 0x67, 0x41,  // N..b..gA
                                /* 0148 */  0xAD, 0xD8, 0xA6, 0x3C, 0xAD, 0x4E, 0xE5, 0xF5,  // ...<.N..
                                /* 0150 */  0x1F, 0x90, 0xC8, 0x00, 0xB6, 0x14, 0x2C, 0x6B,  // ......,k
                                /* 0158 */  0x2F, 0xC2, 0x94, 0x07, 0xAB, 0xEC, 0x6B, 0x8A,  // /.....k.
                                /* 0160 */  0x65, 0x14, 0x2B, 0xA6, 0x38, 0xCF, 0x8D, 0x27,  // e.+.8..'
                                /* 0168 */  0xEC, 0x8C, 0x07, 0xB6, 0x93, 0x83, 0x4C, 0x80,  // ......L.
                                /* 0170 */  0xB0, 0x57, 0x06, 0x71, 0x42, 0x24, 0x24, 0x66,  // .W.qB$$f
                                /* 0178 */  0xE7, 0x6E, 0xFC, 0x8B, 0xB7, 0xDC, 0xCD, 0x73,  // .n.....s
                                /* 0180 */  0x19, 0x55, 0xAA, 0x46, 0x13, 0x03, 0xFA, 0xD5,  // .U.F....
                                /* 0188 */  0x16, 0x09, 0x11, 0x8F, 0xE3, 0x18, 0x10, 0x57,  // .......W
                                /* 0190 */  0x53, 0x8B, 0x30, 0xC8, 0x89, 0xF2, 0xBB, 0xAD,  // S.0.....
                                /* 0198 */  0x28, 0x24, 0xD5, 0x01, 0xD8, 0x32, 0x39, 0x06,  // ($...29.
                                /* 01A0 */  0x36, 0x46, 0x53, 0xD1, 0xE0, 0x74, 0x8B, 0xBC,  // 6FS..t..
                                /* 01A8 */  0xDE, 0xDF, 0xC2, 0x0D, 0xDA, 0x87, 0xB9, 0x12,  // ........
                                /* 01B0 */  0x43, 0x66, 0xD8, 0xE6, 0x06, 0xEE, 0xA0, 0xED,  // Cf......
                                /* 01B8 */  0x0C, 0xFD, 0x7D, 0xDE, 0x3B, 0xCA, 0x34, 0x68,  // ..}.;.4h
                                /* 01C0 */  0x99, 0x46, 0x88, 0xE1, 0x30, 0x0D, 0xC4, 0x8E,  // .F..0...
                                /* 01C8 */  0x78, 0x9D, 0x6C, 0x58, 0x01, 0x31, 0xE2, 0x9B,  // x.lX.1..
                                /* 01D0 */  0x2E, 0xD2, 0xD4, 0x60, 0x30, 0x74, 0x0D, 0x2A,  // ...`0t.*
                                /* 01D8 */  0xAB, 0x47, 0x04, 0xAD, 0x0B, 0x22, 0xC3, 0xC0,  // .G..."..
                                /* 01E0 */  0xC5, 0x0B, 0x35, 0xCB, 0x28, 0x65, 0x09, 0xB8,  // ..5.(e..
                                /* 01E8 */  0x12, 0x6E, 0x55, 0x5F, 0x28, 0xE3, 0x40, 0x75,  // .nU_(.@u
                                /* 01F0 */  0xF1, 0x38, 0xC6, 0xB9, 0x7A, 0xBD, 0x32, 0x7B,  // .8..z.2{
                                /* 01F8 */  0x3D, 0x07, 0x9F, 0xA8, 0x28, 0xBE, 0x87, 0x2E,  // =...(...
                                /* 0200 */  0xC2, 0x1B, 0xF6, 0xAE, 0x39, 0xDB, 0x3F, 0xB2,  // ....9.?.
                                /* 0208 */  0xE9, 0x98, 0xA2, 0xDF, 0x7B, 0xFF, 0xFC, 0x87,  // ....{...
                                /* 0210 */  0xA1, 0x9C, 0xFA, 0x37, 0xBF, 0x64, 0xDB, 0xE0,  // ...7.d..
                                /* 0218 */  0x41, 0x63, 0xB8, 0xE8, 0xCF, 0x64, 0x45, 0x45,  // Ac...dEE
                                /* 0220 */  0x26, 0x87, 0x57, 0xB2, 0xF9, 0xC8, 0xF2, 0x48,  // &.W....H
                                /* 0228 */  0x85, 0x39, 0x39, 0xE9, 0xA2, 0xD3, 0xC7, 0xFC,  // .99.....
                                /* 0230 */  0x36, 0x5D, 0x90, 0x25, 0x9B, 0x86, 0x22, 0x17,  // 6].%..".
                                /* 0238 */  0xBC, 0xEB, 0xFB, 0x48, 0x67, 0x8C, 0x9E, 0x25,  // ...Hg..%
                                /* 0240 */  0xBE, 0x4C, 0xE3, 0x94, 0x58, 0x4A, 0x1B, 0x7B,  // .L..XJ.{
                                /* 0248 */  0x35, 0x0E, 0x8F, 0xB1, 0x9B, 0x38, 0xEF, 0x45,  // 5....8.E
                                /* 0250 */  0x00, 0x61, 0x0F, 0x23, 0x90, 0xE6, 0x96, 0x6B,  // .a.#...k
                                /* 0258 */  0xEB, 0x26, 0x5D, 0xCA, 0xB0, 0xB2, 0x7E, 0x39,  // .&]...~9
                                /* 0260 */  0xE8, 0x3C, 0xB4, 0x9E, 0xDA, 0x31, 0x23, 0xB0,  // .<...1#.
                                /* 0268 */  0xE6, 0xE0, 0x35, 0x1A, 0x87, 0x90, 0xF6, 0x95,  // ..5.....
                                /* 0270 */  0x3D, 0x6C, 0x89, 0x22, 0x84, 0xF8, 0xC5, 0x6D,  // =l."...m
                                /* 0278 */  0x5C, 0xD3, 0x4F, 0x47, 0x30, 0xAD, 0x98, 0x9C,  // \.OG0...
                                /* 0280 */  0x54, 0x8F, 0x62, 0xAA, 0x97, 0xAE, 0x47, 0xBC,  // T.b...G.
                                /* 0288 */  0xC7, 0xD8, 0x2E, 0xC7, 0x1C, 0xC8, 0xDC, 0x0E,  // ........
                                /* 0290 */  0x1E, 0x23, 0xD9, 0xAE, 0x82, 0x22, 0x9B, 0x31,  // .#...".1
                                /* 0298 */  0xB4, 0xBB, 0x43, 0xC7, 0x5A, 0xC0, 0x94, 0xC7,  // ..C.Z...
                                /* 02A0 */  0xEC, 0x79, 0x31, 0xD2, 0x27, 0x46, 0xFE, 0xF3,  // .y1.'F..
                                /* 02A8 */  0xE2, 0x44, 0x9D, 0x2E, 0x15, 0x38, 0xFE, 0x2B,  // .D...8.+
                                /* 02B0 */  0xCA, 0xA4, 0xE8, 0x5F, 0x78, 0x28, 0xC9, 0x21,  // ..._x(.!
                                /* 02B8 */  0x41, 0xBD, 0x13, 0x12, 0xCC, 0xD2, 0xEF, 0x89,  // A.......
                                /* 02C0 */  0x12, 0x93, 0x4B, 0xB6, 0xD0, 0x4C, 0xBB, 0x8C,  // ..K..L..
                                /* 02C8 */  0x10, 0xF4, 0x1C, 0x8F, 0x25, 0xAE, 0x40, 0x01,  // ....%.@.
                                /* 02D0 */  0x02, 0xC6, 0xA7, 0x6F, 0x86, 0x8A, 0xF4, 0xC9,  // ...o....
                                /* 02D8 */  0x0F, 0xE6, 0xB6, 0xB2, 0x80, 0xDA, 0x65, 0xAB,  // ......e.
                                /* 02E0 */  0x85, 0x18, 0x58, 0x9B, 0xD7, 0x7A, 0x30, 0x68,  // ..X..z0h
                                /* 02E8 */  0xE7, 0xE1, 0x0F, 0x14, 0x27, 0x1A, 0xF4, 0x28,  // ....'..(
                                /* 02F0 */  0xB5, 0x44, 0x82, 0x90, 0xC6, 0x1F, 0x5D, 0x10,  // .D....].
                                /* 02F8 */  0xD0, 0x23, 0xDF, 0x38, 0x42, 0x0B, 0x95, 0x59,  // .#.8B..Y
                                /* 0300 */  0x2D, 0xD5, 0xAB, 0x4E, 0xDF, 0x2E, 0xCE, 0x5E,  // -..N...^
                                /* 0308 */  0x1E, 0xAA, 0x26, 0x8F, 0xE0, 0x5C, 0x10, 0xF9,  // ..&..\..
                                /* 0310 */  0x70, 0xA3, 0x06, 0xFA, 0x8C, 0xE7, 0x7E, 0x9F,  // p.....~.
                                /* 0318 */  0x4E, 0x3C, 0xC1, 0x08, 0x5A, 0x6A, 0x60, 0xE9,  // N<..Zj`.
                                /* 0320 */  0x03, 0x07, 0x8A, 0xCD, 0xE0, 0x41, 0x47, 0x8E,  // .....AG.
                                /* 0328 */  0xB7, 0x3B, 0xA9, 0x8D, 0x57, 0x36, 0x43, 0xFA,  // .;..W6C.
                                /* 0330 */  0x5B, 0x35, 0x04, 0xF4, 0x55, 0x73, 0xB0, 0xB4,  // [5..Us..
                                /* 0338 */  0x53, 0xDF, 0x73, 0xE2, 0xB8, 0x17, 0x9B, 0xB1,  // S.s.....
                                /* 0340 */  0x45, 0x8B, 0xC0, 0x85, 0x8C, 0x5C, 0x7B, 0xD6,  // E....\{.
                                /* 0348 */  0xC1, 0xDF, 0x82, 0x08, 0x82, 0x6E, 0x36, 0x6D,  // .....n6m
                                /* 0350 */  0xDC, 0xAF, 0x98, 0xE8, 0xCD, 0xD3, 0x2C, 0xD9,  // ......,.
                                /* 0358 */  0xAA, 0x21, 0x27, 0x5F, 0x7E, 0x16, 0x61, 0x39,  // .!'_~.a9
                                /* 0360 */  0x03, 0xBE, 0x8D, 0xDA, 0x6F, 0x38, 0xF3, 0xCE,  // ....o8..
                                /* 0368 */  0xEF, 0xCC, 0x5B, 0xC0, 0xD3, 0xB4, 0x3C, 0xB1,  // ..[...<.
                                /* 0370 */  0x1D, 0x40, 0x25, 0xB7, 0x1A, 0xA1, 0x9C, 0xED,  // .@%.....
                                /* 0378 */  0xC6, 0x86, 0xF5, 0xC8, 0x1D, 0x47, 0x59, 0xAB,  // .....GY.
                                /* 0380 */  0x2A, 0xE0, 0x3B, 0xC1, 0x78, 0x41, 0x3E, 0x87,  // *.;.xA>.
                                /* 0388 */  0xB6, 0xD4, 0x57, 0x1C, 0xC3, 0x89, 0x2E, 0xF8,  // ..W.....
                                /* 0390 */  0xEB, 0xF0, 0xDE, 0xDE, 0x78, 0x9F, 0x60, 0x0C,  // ....x.`.
                                /* 0398 */  0x40, 0x50, 0xFA, 0x74, 0x61, 0x53, 0x8E, 0x5E,  // @P.taS.^
                                /* 03A0 */  0xD4, 0x8F, 0x1A, 0x83, 0x40, 0x80, 0xCA, 0x45,  // ....@..E
                                /* 03A8 */  0xE2, 0x1F, 0x4C, 0xF6, 0x9D, 0x25, 0x9D, 0xFC,  // ..L..%..
                                /* 03B0 */  0xC7, 0x3E, 0xC5, 0x32, 0x8D, 0xEE, 0xA8, 0x4A,  // .>.2...J
                                /* 03B8 */  0xE7, 0x02, 0x87, 0x3A, 0x70, 0x24, 0x9A, 0xF9,  // ...:p$..
                                /* 03C0 */  0x44, 0x60, 0x4D, 0x3F, 0x4D, 0xEA, 0xDB, 0x91,  // D`M?M...
                                /* 03C8 */  0xDB, 0x7A, 0xB3, 0x82, 0x35, 0x14, 0xA1, 0x78,  // .z..5..x
                                /* 03D0 */  0x7A, 0x76, 0x9C, 0x53, 0xA5, 0x45, 0xEF, 0x65,  // zv.S.E.e
                                /* 03D8 */  0xFE, 0x1A, 0x78, 0xFB, 0xC9, 0x5A, 0x37, 0x37,  // ..x..Z77
                                /* 03E0 */  0x10, 0x59, 0x52, 0xBF, 0xA1, 0xB4, 0x94, 0x00,  // .YR.....
                                /* 03E8 */  0x06, 0x8C, 0xD0, 0x6A, 0x19, 0x2B, 0x9E, 0x0B,  // ...j.+..
                                /* 03F0 */  0x0E, 0xCF, 0xC8, 0x81, 0x9D, 0x7C, 0xF7, 0x6A,  // .....|.j
                                /* 03F8 */  0x51, 0x0A, 0xF3, 0x49, 0xFD, 0xB6, 0x96, 0xC5,  // Q..I....
                                /* 0400 */  0xC9, 0x10, 0xAE, 0xC7, 0x8F, 0xB8, 0x01, 0xAC,  // ........
                                /* 0408 */  0x87, 0xAB, 0x33, 0x28, 0x66, 0xE3, 0x35, 0x5D,  // ..3(f.5]
                                /* 0410 */  0x4D, 0xF9, 0x70, 0xC6, 0x8D, 0x4E, 0x95, 0x43,  // M.p..N.C
                                /* 0418 */  0x1F, 0x71, 0x29, 0x0E, 0xDE, 0x68, 0xC3, 0x72,  // .q)..h.r
                                /* 0420 */  0x58, 0xCC, 0x80, 0x91, 0xCC, 0xBD, 0x03, 0x8E,  // X.......
                                /* 0428 */  0xB6, 0xB8, 0xC0, 0xBE, 0x32, 0x15, 0x25, 0x1F,  // ....2.%.
                                /* 0430 */  0xB7, 0x57, 0xED, 0xBF, 0xF8, 0x9B, 0xD7, 0x4E,  // .W.....N
                                /* 0438 */  0x24, 0x58, 0x4D, 0xCA, 0xB9, 0xEE, 0xE6, 0x67,  // $XM....g
                                /* 0440 */  0xCC, 0x84, 0x57, 0xA1, 0x27, 0x7F, 0x74, 0x0E,  // ..W.'.t.
                                /* 0448 */  0x3E, 0xA1, 0x1F, 0x10, 0x6D, 0xC3, 0xB0, 0xEB,  // >...m...
                                /* 0450 */  0x09, 0xB2, 0x75, 0x35, 0x4A, 0x04, 0x2D, 0xFB,  // ..u5J.-.
                                /* 0458 */  0x14, 0xD2, 0x53, 0xD0, 0xA8, 0x50, 0x4D, 0x3B,  // ..S..PM;
                                /* 0460 */  0x94, 0x63, 0x07, 0x7E, 0xAB, 0x24, 0x3A, 0x7F,  // .c.~.$:.
                                /* 0468 */  0x8A, 0xED, 0x75, 0x05, 0xEA, 0x15, 0x69, 0x41,  // ..u...iA
                                /* 0470 */  0xC0, 0x4D, 0xDC, 0x0E, 0x14, 0x81, 0x1A, 0x3A,  // .M.....:
                                /* 0478 */  0x40, 0xE8, 0xE3, 0x7F, 0xB7, 0xFF, 0xA3, 0x04,  // @.......
                                /* 0480 */  0x22, 0x9F, 0x6B, 0x9D, 0x8B, 0x1C, 0xCF, 0x9D,  // ".k.....
                                /* 0488 */  0x61, 0xF1, 0xD8, 0xEA, 0x50, 0x9E, 0xD1, 0x35,  // a...P..5
                                /* 0490 */  0xB2, 0x04, 0x59, 0x53, 0x96, 0xC8, 0x3D, 0x36,  // ..YS..=6
                                /* 0498 */  0xE5, 0x3F, 0x67, 0x22, 0x0B, 0x36, 0xBF, 0x80,  // .?g".6..
                                /* 04A0 */  0x4A, 0x89, 0x6B, 0x08, 0x64, 0x88, 0x1C, 0x39,  // J.k.d..9
                                /* 04A8 */  0x81, 0x21, 0x4A, 0xD1, 0xF5, 0x8B, 0xC4, 0x50,  // .!J....P
                                /* 04B0 */  0x6A, 0x53, 0x7A, 0x7E, 0x3A, 0xF0, 0xA1, 0x86,  // jSz~:...
                                /* 04B8 */  0x73, 0xC2, 0x3F, 0xA7, 0x5A, 0xA2, 0x26, 0x53,  // s.?.Z.&S
                                /* 04C0 */  0xCE, 0x00, 0x41, 0x7D, 0x8C, 0x09, 0x09, 0xE9,  // ..A}....
                                /* 04C8 */  0x15, 0x58, 0x81, 0x38, 0x00, 0x28, 0xA0, 0xD8,  // .X.8.(..
                                /* 04D0 */  0x27, 0x35, 0x25, 0xA2, 0x13, 0x1C, 0x19, 0x50,  // '5%....P
                                /* 04D8 */  0x3C, 0x57, 0x51, 0x4D, 0x4E, 0x1D, 0x27, 0xD3,  // <WQMN.'.
                                /* 04E0 */  0x92, 0xD6, 0x82, 0x27, 0x57, 0x4B, 0xA7, 0x2E,  // ...'WK..
                                /* 04E8 */  0x8B, 0x04, 0x91, 0xC8, 0x93, 0x5F, 0x51, 0x7F,  // ....._Q.
                                /* 04F0 */  0x65, 0x9A, 0x89, 0x84, 0xC5, 0x54, 0x5D, 0x11,  // e....T].
                                /* 04F8 */  0x50, 0x53, 0x45, 0x3B, 0x7C, 0xB0, 0x60, 0x28,  // PSE;|.`(
                                /* 0500 */  0x64, 0x65, 0x10, 0xC2, 0xB5, 0x3B, 0xE0, 0x7D,  // de...;.}
                                /* 0508 */  0x65, 0x30, 0xDB, 0x4A, 0xFC, 0xEF, 0xF4, 0x30,  // e0.J...0
                                /* 0510 */  0x11, 0x8A, 0x5A, 0x0D, 0x76, 0x26, 0x7F, 0x7D,  // ..Z.v&.}
                                /* 0518 */  0x35, 0x7E, 0x3B, 0xE4, 0x8D, 0x10, 0xC8, 0x49,  // 5~;....I
                                /* 0520 */  0x13, 0xAD, 0xDA, 0xFC, 0xCD, 0x06, 0x83, 0x23,  // .......#
                                /* 0528 */  0xF4, 0x80, 0x69, 0x8E, 0x82, 0xA0, 0xD9, 0x7C,  // ..i....|
                                /* 0530 */  0x77, 0xC8, 0x17, 0x45, 0x8E, 0x7C, 0xF6, 0x25,  // w..E.|.%
                                /* 0538 */  0x40, 0x25, 0x19, 0x5A, 0xC5, 0x94, 0x5F, 0x76,  // @%.Z.._v
                                /* 0540 */  0xF0, 0xEA, 0x78, 0x92, 0x4E, 0x83, 0x25, 0xA0,  // ..x.N.%.
                                /* 0548 */  0x4C, 0x6D, 0xA9, 0x3F, 0xBD, 0xD1, 0x65, 0x55,  // Lm.?..eU
                                /* 0550 */  0xDE, 0xDB, 0x59, 0xEA, 0xB4, 0x56, 0xE4, 0xE5,  // ..Y..V..
                                /* 0558 */  0x37, 0xB8, 0x7F, 0x55, 0xFD, 0x68, 0x1C, 0x28,  // 7..U.h.(
                                /* 0560 */  0x5F, 0x21, 0xEB, 0xEC, 0x10, 0x3C, 0x83, 0x61,  // _!...<.a
                                /* 0568 */  0x15, 0x37, 0xD1, 0xA1, 0x17, 0x6B, 0x0C, 0x7D,  // .7...k.}
                                /* 0570 */  0xAF, 0xAF, 0xFD, 0x72, 0xC8, 0x36, 0x28, 0x39,  // ...r.6(9
                                /* 0578 */  0x80, 0x3C, 0xCD, 0x81, 0xC8, 0x64, 0x45, 0xB7,  // .<...dE.
                                /* 0580 */  0x3B, 0x85, 0xD7, 0x89, 0x1F, 0xE1, 0xF0, 0x48,  // ;......H
                                /* 0588 */  0x61, 0x22, 0xDA, 0x29, 0xF4, 0x7A, 0xB3, 0xC4,  // a".).z..
                                /* 0590 */  0xAF, 0xD7, 0xC5, 0xD8, 0x61, 0xD6, 0xD5, 0x61,  // ....a..a
                                /* 0598 */  0xF6, 0x92, 0x61, 0x4F, 0x61, 0xAE, 0x81, 0xFC,  // ..aOa...
                                /* 05A0 */  0xEB, 0xAF, 0xF3, 0xD9, 0xFF, 0xA8, 0xEE, 0xEB,  // ........
                                /* 05A8 */  0x01, 0x35, 0x7E, 0xED, 0x59, 0xEE, 0x72, 0xB3,  // .5~.Y.r.
                                /* 05B0 */  0xFD, 0x47, 0x61, 0x5F, 0x00, 0x49, 0xD6, 0x24,  // .Ga_.I.$
                                /* 05B8 */  0x9D, 0xCD, 0x8D, 0x89, 0xB6, 0x5B, 0x7A, 0x6C,  // .....[zl
                                /* 05C0 */  0x61, 0xBF, 0x5C, 0xDD, 0x37, 0x6A, 0x57, 0xDA,  // a.\.7jW.
                                /* 05C8 */  0x6F, 0xAE, 0xD0, 0xAE, 0xB3, 0x41, 0x33, 0x1F,  // o....A3.
                                /* 05D0 */  0x96, 0x24, 0xFC, 0xEA, 0x19, 0x5B, 0xFF, 0x17,  // .$...[..
                                /* 05D8 */  0x99, 0xB4, 0x7B, 0x6A, 0xCF, 0xCE, 0x3E, 0x6A,  // ..{j..>j
                                /* 05E0 */  0x51, 0x22, 0x54, 0x37, 0x61, 0xE3, 0x3E, 0x1C,  // Q"T7a.>.
                                /* 05E8 */  0x96, 0x3D, 0x1B, 0xEB, 0x71, 0x4A, 0x50, 0xA0,  // .=..qJP.
                                /* 05F0 */  0x2C, 0xCA, 0xB1, 0x17, 0xF2, 0x7F, 0x64, 0xEC,  // ,.....d.
                                /* 05F8 */  0xB3, 0x2B, 0x00                                 // .+.
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x01)
                        {
                            Buffer (0x05FE)
                            {
                                /* 0000 */  0xE5, 0x1F, 0x94, 0x00, 0x00, 0x00, 0x00, 0x02,  // ........
                                /* 0008 */  0x00, 0x00, 0x00, 0x40, 0x67, 0x64, 0x64, 0x76,  // ...@gddv
                                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x4F, 0x45, 0x4D, 0x20,  // ....OEM 
                                /* 0030 */  0x45, 0x78, 0x70, 0x6F, 0x72, 0x74, 0x65, 0x64,  // Exported
                                /* 0038 */  0x20, 0x44, 0x61, 0x74, 0x61, 0x56, 0x61, 0x75,  //  DataVau
                                /* 0040 */  0x6C, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // lt......
                                /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0068 */  0x00, 0x00, 0x00, 0x00, 0xF2, 0x60, 0x77, 0xB0,  // .....`w.
                                /* 0070 */  0x27, 0x76, 0xF4, 0x16, 0x9C, 0xBD, 0x40, 0x4D,  // 'v....@M
                                /* 0078 */  0x4A, 0xC3, 0x70, 0xD1, 0x60, 0xE8, 0xF3, 0xE4,  // J.p.`...
                                /* 0080 */  0x1C, 0x66, 0xD6, 0x66, 0x42, 0x3C, 0x1C, 0x61,  // .f.fB<.a
                                /* 0088 */  0xA1, 0x0C, 0xC3, 0x7C, 0x6A, 0x05, 0x00, 0x00,  // ...|j...
                                /* 0090 */  0x52, 0x45, 0x50, 0x4F, 0x5D, 0x00, 0x00, 0x00,  // REPO]...
                                /* 0098 */  0x01, 0x7E, 0x77, 0x00, 0x00, 0x00, 0x00, 0x00,  // .~w.....
                                /* 00A0 */  0x00, 0x00, 0x72, 0x87, 0xCD, 0xFF, 0x6D, 0x24,  // ..r...m$
                                /* 00A8 */  0x47, 0xDB, 0x3D, 0x24, 0x92, 0xB4, 0x16, 0x6F,  // G.=$...o
                                /* 00B0 */  0x45, 0xD8, 0xC3, 0xF5, 0x66, 0x14, 0x9F, 0x22,  // E...f.."
                                /* 00B8 */  0xD7, 0xF7, 0xDE, 0x67, 0x90, 0x9A, 0xA2, 0x0D,  // ...g....
                                /* 00C0 */  0x39, 0x25, 0xAD, 0xC3, 0x1A, 0xAD, 0x52, 0x0B,  // 9%....R.
                                /* 00C8 */  0x75, 0x38, 0xE1, 0xA4, 0x14, 0x43, 0x73, 0x57,  // u8...CsW
                                /* 00D0 */  0xBA, 0xC3, 0x12, 0x9D, 0xE1, 0x8D, 0x91, 0x3D,  // .......=
                                /* 00D8 */  0xDE, 0xE2, 0x91, 0x30, 0xAB, 0xE3, 0xFB, 0x56,  // ...0...V
                                /* 00E0 */  0x6F, 0x04, 0x91, 0x29, 0x62, 0x70, 0xB0, 0x69,  // o..)bp.i
                                /* 00E8 */  0x2A, 0xD7, 0xE4, 0xBE, 0x2F, 0x93, 0xB8, 0xF4,  // *.../...
                                /* 00F0 */  0x83, 0x96, 0x9E, 0x25, 0x57, 0x42, 0x51, 0x1D,  // ...%WBQ.
                                /* 00F8 */  0x5C, 0xA7, 0x22, 0x4C, 0xB3, 0xAE, 0x4B, 0x8D,  // \."L..K.
                                /* 0100 */  0xD7, 0x74, 0x56, 0xF2, 0x90, 0x25, 0xDA, 0x23,  // .tV..%.#
                                /* 0108 */  0xB9, 0x6C, 0x83, 0x6A, 0xBF, 0xFE, 0xC1, 0x51,  // .l.j...Q
                                /* 0110 */  0x6C, 0x01, 0xDD, 0x00, 0x0C, 0x77, 0xFF, 0x59,  // l....w.Y
                                /* 0118 */  0xA4, 0x11, 0xF8, 0x1B, 0xD2, 0xE5, 0x5B, 0x4B,  // ......[K
                                /* 0120 */  0x64, 0x5E, 0x28, 0x76, 0x44, 0x42, 0x18, 0x2C,  // d^(vDB.,
                                /* 0128 */  0xA9, 0xF3, 0x3B, 0xD2, 0x88, 0x2A, 0xCF, 0x2A,  // ..;..*.*
                                /* 0130 */  0xFA, 0xA1, 0x29, 0x80, 0x9E, 0x5A, 0x7D, 0x64,  // ..)..Z}d
                                /* 0138 */  0x98, 0x39, 0x17, 0xCD, 0xCC, 0x98, 0xAD, 0xBA,  // .9......
                                /* 0140 */  0x02, 0x68, 0xF4, 0xC3, 0x3E, 0x2C, 0xFE, 0x0C,  // .h..>,..
                                /* 0148 */  0x33, 0x24, 0x1C, 0x5F, 0x0E, 0xB8, 0x81, 0x9A,  // 3$._....
                                /* 0150 */  0x6B, 0xEE, 0xCE, 0x35, 0x8C, 0x02, 0x9A, 0xA2,  // k..5....
                                /* 0158 */  0x6A, 0xD4, 0xA9, 0x91, 0xB5, 0xAF, 0x74, 0xAF,  // j.....t.
                                /* 0160 */  0x85, 0x68, 0xD2, 0x75, 0x36, 0x08, 0x8C, 0x5C,  // .h.u6..\
                                /* 0168 */  0xA4, 0xFF, 0x61, 0xB3, 0xDC, 0x3D, 0xAD, 0xAF,  // ..a..=..
                                /* 0170 */  0x38, 0xF2, 0x5E, 0x90, 0xED, 0x73, 0x52, 0x54,  // 8.^..sRT
                                /* 0178 */  0x29, 0x20, 0x94, 0x32, 0x2C, 0x08, 0x1A, 0xC0,  // ) .2,...
                                /* 0180 */  0x0E, 0xD5, 0x71, 0x8D, 0xB6, 0x3D, 0xD8, 0x16,  // ..q..=..
                                /* 0188 */  0x07, 0xDB, 0x78, 0xF5, 0xFC, 0x5E, 0x3C, 0x70,  // ..x..^<p
                                /* 0190 */  0xCA, 0xC1, 0x60, 0xC7, 0xEE, 0x12, 0xFC, 0xB3,  // ..`.....
                                /* 0198 */  0x3C, 0x7D, 0x7A, 0xE2, 0x16, 0x40, 0x42, 0xEA,  // <}z..@B.
                                /* 01A0 */  0xE9, 0xDA, 0x5E, 0xD8, 0x26, 0xD9, 0x58, 0x1E,  // ..^.&.X.
                                /* 01A8 */  0xCB, 0xA8, 0x2A, 0x42, 0x68, 0x26, 0x2B, 0xEE,  // ..*Bh&+.
                                /* 01B0 */  0x40, 0x2E, 0x46, 0x40, 0x1F, 0xC8, 0xD7, 0x2E,  // @.F@....
                                /* 01B8 */  0xAC, 0x43, 0xBC, 0xF8, 0x3A, 0x65, 0x0B, 0x05,  // .C..:e..
                                /* 01C0 */  0x9A, 0xC1, 0x8B, 0x10, 0xB0, 0xE1, 0xC5, 0x28,  // .......(
                                /* 01C8 */  0xAD, 0x67, 0xDA, 0x82, 0x58, 0xEF, 0xF7, 0xDD,  // .g..X...
                                /* 01D0 */  0xCA, 0x66, 0x48, 0xE5, 0xB9, 0xBB, 0x9E, 0x63,  // .fH....c
                                /* 01D8 */  0x80, 0x01, 0xE7, 0x68, 0x9E, 0x97, 0x46, 0x60,  // ...h..F`
                                /* 01E0 */  0x30, 0xF9, 0x40, 0x73, 0x0A, 0x54, 0xE5, 0xE5,  // 0.@s.T..
                                /* 01E8 */  0x50, 0xFD, 0x09, 0xDC, 0x7F, 0x6E, 0x8D, 0x2F,  // P....n./
                                /* 01F0 */  0x6B, 0xD9, 0xF4, 0xE9, 0xE7, 0x69, 0x79, 0xF9,  // k....iy.
                                /* 01F8 */  0x5A, 0x37, 0xB3, 0xC9, 0x73, 0x7B, 0x6F, 0x53,  // Z7..s{oS
                                /* 0200 */  0x54, 0x89, 0x20, 0x39, 0x18, 0xE2, 0xFE, 0x60,  // T. 9...`
                                /* 0208 */  0xF5, 0xA9, 0xB3, 0xEA, 0x76, 0x25, 0xB3, 0x4E,  // ....v%.N
                                /* 0210 */  0x4C, 0xC2, 0x3C, 0x3B, 0xE2, 0x11, 0xC6, 0x82,  // L.<;....
                                /* 0218 */  0x38, 0x19, 0x4D, 0xC7, 0x40, 0xD7, 0x2B, 0x8E,  // 8.M.@.+.
                                /* 0220 */  0x60, 0x20, 0xD7, 0xD1, 0x3F, 0xDC, 0x13, 0x71,  // ` ..?..q
                                /* 0228 */  0xA1, 0x10, 0x78, 0x43, 0x23, 0x92, 0x12, 0xEF,  // ..xC#...
                                /* 0230 */  0x1E, 0xB1, 0xB3, 0x5C, 0x59, 0x0E, 0x5C, 0x5D,  // ...\Y.\]
                                /* 0238 */  0x5B, 0x63, 0x01, 0xCE, 0xC7, 0xCC, 0x61, 0x1D,  // [c....a.
                                /* 0240 */  0xE4, 0xDC, 0x9C, 0x25, 0xAE, 0x28, 0xA2, 0xCD,  // ...%.(..
                                /* 0248 */  0x1E, 0x0F, 0xCB, 0xC7, 0xAE, 0x72, 0xCE, 0xD9,  // .....r..
                                /* 0250 */  0x00, 0x43, 0x92, 0xBB, 0x4B, 0x65, 0xBF, 0xC9,  // .C..Ke..
                                /* 0258 */  0x92, 0x06, 0x80, 0x5B, 0xD7, 0xCF, 0x14, 0xF4,  // ...[....
                                /* 0260 */  0xAC, 0x72, 0xA6, 0x1C, 0x69, 0x38, 0x04, 0x42,  // .r..i8.B
                                /* 0268 */  0xE8, 0xC1, 0xFF, 0x15, 0x56, 0xE4, 0xEC, 0xE5,  // ....V...
                                /* 0270 */  0xFB, 0x02, 0x69, 0x5B, 0x39, 0xC4, 0x4D, 0xFE,  // ..i[9.M.
                                /* 0278 */  0x84, 0xFB, 0x5A, 0xBB, 0x0F, 0x15, 0xA5, 0x96,  // ..Z.....
                                /* 0280 */  0x14, 0x50, 0xA7, 0xDB, 0xBB, 0x36, 0x00, 0xE0,  // .P...6..
                                /* 0288 */  0xF2, 0xDB, 0xF7, 0x4E, 0x20, 0xBC, 0x48, 0x92,  // ...N .H.
                                /* 0290 */  0x8B, 0x71, 0x86, 0xDC, 0x4C, 0x8D, 0x07, 0x0D,  // .q..L...
                                /* 0298 */  0x26, 0x08, 0x55, 0xEB, 0x83, 0x1D, 0x55, 0x21,  // &.U...U!
                                /* 02A0 */  0xF1, 0xE0, 0xDC, 0x4D, 0xD5, 0x22, 0x31, 0xD5,  // ...M."1.
                                /* 02A8 */  0x70, 0x87, 0xEE, 0x7E, 0xF8, 0x79, 0xFC, 0xF4,  // p..~.y..
                                /* 02B0 */  0xC4, 0xAA, 0x52, 0x58, 0xFB, 0xB6, 0x0F, 0x5D,  // ..RX...]
                                /* 02B8 */  0x2B, 0x68, 0x29, 0x98, 0x30, 0xC1, 0x01, 0x27,  // +h).0..'
                                /* 02C0 */  0x7A, 0x15, 0x2D, 0x8F, 0xB5, 0x6D, 0x63, 0x7D,  // z.-..mc}
                                /* 02C8 */  0x3B, 0xAA, 0xFA, 0x5E, 0x06, 0x37, 0xC0, 0x90,  // ;..^.7..
                                /* 02D0 */  0x24, 0xD0, 0x32, 0x4E, 0x29, 0xC9, 0xFD, 0x1B,  // $.2N)...
                                /* 02D8 */  0x23, 0x77, 0x36, 0x79, 0xFA, 0x80, 0xD3, 0x4E,  // #w6y...N
                                /* 02E0 */  0xCB, 0xC2, 0x79, 0x96, 0xF5, 0xB1, 0x72, 0x23,  // ..y...r#
                                /* 02E8 */  0x6B, 0xCF, 0xC1, 0x28, 0x9F, 0x14, 0x48, 0xC8,  // k..(..H.
                                /* 02F0 */  0xB7, 0x24, 0xBF, 0xD5, 0x08, 0xEC, 0x30, 0x1C,  // .$....0.
                                /* 02F8 */  0xC5, 0x42, 0x73, 0x2B, 0x21, 0xFB, 0xDD, 0xF1,  // .Bs+!...
                                /* 0300 */  0x67, 0x06, 0x8D, 0x73, 0x87, 0xA1, 0x73, 0x13,  // g..s..s.
                                /* 0308 */  0x5E, 0xA9, 0x1F, 0xF9, 0xF5, 0x23, 0xA6, 0xA7,  // ^....#..
                                /* 0310 */  0xA7, 0xA4, 0x1F, 0x9E, 0x7E, 0x5E, 0xCA, 0xD4,  // ....~^..
                                /* 0318 */  0xDD, 0x64, 0x7A, 0x69, 0xE4, 0xEE, 0x28, 0xCC,  // .dzi..(.
                                /* 0320 */  0xED, 0x22, 0x7E, 0x55, 0x27, 0x7E, 0x8D, 0xCF,  // ."~U'~..
                                /* 0328 */  0xEA, 0x87, 0x37, 0xB1, 0x5F, 0xFB, 0x7B, 0x75,  // ..7._.{u
                                /* 0330 */  0xEB, 0x1F, 0x66, 0x0E, 0x29, 0xA0, 0xA0, 0x9D,  // ..f.)...
                                /* 0338 */  0xF6, 0x17, 0xBE, 0x9E, 0x1B, 0xCF, 0xEB, 0x4A,  // .......J
                                /* 0340 */  0xB0, 0x04, 0x32, 0xF6, 0x86, 0xE7, 0xBC, 0x24,  // ..2....$
                                /* 0348 */  0xA2, 0xF0, 0xB7, 0xF6, 0x69, 0x18, 0xAA, 0x52,  // ....i..R
                                /* 0350 */  0x3A, 0xFB, 0x93, 0xF5, 0x37, 0x63, 0xB6, 0x2E,  // :...7c..
                                /* 0358 */  0x97, 0x99, 0x68, 0x5D, 0xF2, 0xED, 0x9E, 0x30,  // ..h]...0
                                /* 0360 */  0x0A, 0x5F, 0x34, 0xCA, 0xDB, 0x02, 0xA2, 0x43,  // ._4....C
                                /* 0368 */  0xB7, 0xA3, 0x3A, 0x9B, 0x18, 0x6A, 0x91, 0x52,  // ..:..j.R
                                /* 0370 */  0x14, 0x39, 0xB0, 0xEA, 0xE6, 0x0C, 0xD5, 0x5D,  // .9.....]
                                /* 0378 */  0x75, 0x24, 0xE5, 0xCF, 0x2A, 0xCD, 0x62, 0xF8,  // u$..*.b.
                                /* 0380 */  0x2C, 0xE6, 0x6A, 0x66, 0x50, 0x59, 0xB8, 0x25,  // ,.jfPY.%
                                /* 0388 */  0x55, 0xAD, 0x6B, 0x5D, 0xE7, 0x56, 0xB2, 0x00,  // U.k].V..
                                /* 0390 */  0x04, 0xD3, 0x87, 0xF9, 0x6B, 0x07, 0x58, 0x8A,  // ....k.X.
                                /* 0398 */  0xB7, 0xC8, 0x1A, 0xC8, 0x79, 0x0F, 0x54, 0x6C,  // ....y.Tl
                                /* 03A0 */  0x3B, 0x58, 0xC6, 0xEF, 0xFF, 0xF7, 0xFA, 0x0B,  // ;X......
                                /* 03A8 */  0x6D, 0x20, 0xBC, 0x7C, 0xE3, 0x64, 0xD5, 0xA5,  // m .|.d..
                                /* 03B0 */  0x95, 0x2A, 0x49, 0xE6, 0x2F, 0x85, 0x1E, 0x26,  // .*I./..&
                                /* 03B8 */  0x9D, 0xED, 0x59, 0x6B, 0x2E, 0xAA, 0x9F, 0x41,  // ..Yk...A
                                /* 03C0 */  0xC6, 0xAB, 0x59, 0x33, 0x6F, 0x03, 0x48, 0x33,  // ..Y3o.H3
                                /* 03C8 */  0x29, 0xC0, 0xD7, 0xB0, 0xE9, 0x09, 0xFF, 0xD3,  // ).......
                                /* 03D0 */  0xBE, 0x51, 0xAF, 0xA5, 0xE8, 0xB0, 0xA2, 0x88,  // .Q......
                                /* 03D8 */  0xF7, 0x95, 0xD3, 0xA2, 0x3A, 0x4D, 0x97, 0x60,  // ....:M.`
                                /* 03E0 */  0xFE, 0x89, 0x03, 0xEC, 0x55, 0xB7, 0xAC, 0x51,  // ....U..Q
                                /* 03E8 */  0x8B, 0x53, 0xC1, 0xE2, 0x48, 0xA0, 0x90, 0x84,  // .S..H...
                                /* 03F0 */  0xE4, 0xC8, 0x8A, 0x15, 0x7F, 0xD9, 0x4A, 0x7F,  // ......J.
                                /* 03F8 */  0x29, 0xE2, 0x7D, 0xC9, 0x28, 0xF0, 0x4D, 0xC2,  // ).}.(.M.
                                /* 0400 */  0xC5, 0x08, 0xE1, 0xEB, 0x8A, 0xC6, 0x32, 0x7D,  // ......2}
                                /* 0408 */  0xDA, 0x62, 0xC6, 0x98, 0x8D, 0x47, 0x3E, 0xB1,  // .b...G>.
                                /* 0410 */  0x09, 0xFF, 0x09, 0xC1, 0x72, 0xDC, 0xEA, 0xEB,  // ....r...
                                /* 0418 */  0xC6, 0xCD, 0x2C, 0xCB, 0x68, 0x94, 0x2E, 0x3C,  // ..,.h..<
                                /* 0420 */  0x8A, 0x26, 0x46, 0x1E, 0x41, 0x79, 0xB6, 0xC9,  // .&F.Ay..
                                /* 0428 */  0x81, 0x16, 0x95, 0xE4, 0x10, 0x87, 0xBC, 0xC5,  // ........
                                /* 0430 */  0x97, 0x87, 0x4A, 0xB1, 0xE9, 0xC7, 0x90, 0xBC,  // ..J.....
                                /* 0438 */  0xED, 0xFE, 0xDB, 0x42, 0x77, 0xF2, 0xC7, 0x3D,  // ...Bw..=
                                /* 0440 */  0xD8, 0xAC, 0x3D, 0x60, 0x35, 0x71, 0x56, 0xE6,  // ..=`5qV.
                                /* 0448 */  0x70, 0xF0, 0x1F, 0x7F, 0x1F, 0x78, 0x6D, 0x54,  // p....xmT
                                /* 0450 */  0xBF, 0xE3, 0x2A, 0xE8, 0x41, 0x64, 0x5D, 0xF9,  // ..*.Ad].
                                /* 0458 */  0xD9, 0xCA, 0x28, 0x8A, 0xB9, 0x4F, 0xF2, 0xCB,  // ..(..O..
                                /* 0460 */  0xEF, 0xE9, 0x63, 0xBC, 0x20, 0x01, 0x24, 0x21,  // ..c. .$!
                                /* 0468 */  0x75, 0x50, 0x46, 0x83, 0x27, 0x06, 0xB8, 0x99,  // uPF.'...
                                /* 0470 */  0xB1, 0xAF, 0xF9, 0xC2, 0x29, 0xA1, 0x85, 0xC9,  // ....)...
                                /* 0478 */  0x4B, 0xCA, 0x06, 0xF5, 0x51, 0x2A, 0x24, 0xD6,  // K...Q*$.
                                /* 0480 */  0x5B, 0x4B, 0x32, 0x24, 0x3A, 0xD6, 0x6F, 0x37,  // [K2$:.o7
                                /* 0488 */  0x3E, 0xB6, 0xEC, 0x66, 0x89, 0xC9, 0x3D, 0xBC,  // >..f..=.
                                /* 0490 */  0x59, 0x8B, 0xC3, 0xA0, 0xD4, 0x53, 0x72, 0x79,  // Y....Sry
                                /* 0498 */  0xD6, 0x73, 0x84, 0x6A, 0x26, 0xE3, 0xE0, 0x22,  // .s.j&.."
                                /* 04A0 */  0x4B, 0x50, 0xA7, 0x59, 0x60, 0x4E, 0xEE, 0xA3,  // KP.Y`N..
                                /* 04A8 */  0x7A, 0x33, 0x0E, 0xD4, 0x86, 0xF2, 0xFD, 0x33,  // z3.....3
                                /* 04B0 */  0xC5, 0x8D, 0xE6, 0x3A, 0xC5, 0xF4, 0x7F, 0xE2,  // ...:....
                                /* 04B8 */  0x7E, 0x58, 0x26, 0x31, 0x48, 0xC5, 0x67, 0x22,  // ~X&1H.g"
                                /* 04C0 */  0x23, 0x23, 0x26, 0x55, 0x06, 0x82, 0x1C, 0x1B,  // ##&U....
                                /* 04C8 */  0xE5, 0x3D, 0x18, 0xE3, 0xA4, 0x36, 0xC1, 0x83,  // .=...6..
                                /* 04D0 */  0xDA, 0x0F, 0xA6, 0xEB, 0x35, 0x44, 0x99, 0x08,  // ....5D..
                                /* 04D8 */  0x3D, 0x6B, 0xF7, 0x29, 0x7C, 0x6C, 0xAA, 0x8B,  // =k.)|l..
                                /* 04E0 */  0xA4, 0xF7, 0x2E, 0x99, 0x0F, 0x8D, 0x33, 0xE6,  // ......3.
                                /* 04E8 */  0x77, 0x9C, 0xE6, 0x02, 0x12, 0x56, 0x85, 0xB4,  // w....V..
                                /* 04F0 */  0x74, 0x86, 0xF5, 0x3F, 0x49, 0x76, 0x7E, 0xF7,  // t..?Iv~.
                                /* 04F8 */  0xA9, 0xF3, 0xD8, 0x07, 0xFD, 0xDB, 0xBA, 0xDB,  // ........
                                /* 0500 */  0x8B, 0x1D, 0xE9, 0xE5, 0xAC, 0x17, 0x5E, 0xA2,  // ......^.
                                /* 0508 */  0x61, 0x30, 0x8C, 0x7B, 0x86, 0x83, 0xE4, 0x07,  // a0.{....
                                /* 0510 */  0x10, 0x2B, 0xBF, 0x81, 0x44, 0xEE, 0xDC, 0x21,  // .+..D..!
                                /* 0518 */  0xA8, 0xA8, 0x60, 0xE7, 0x6A, 0xBD, 0x47, 0xFC,  // ..`.j.G.
                                /* 0520 */  0x94, 0x24, 0x30, 0x1B, 0xA4, 0x63, 0x4E, 0x1F,  // .$0..cN.
                                /* 0528 */  0x0C, 0x12, 0xC8, 0xA6, 0x46, 0x1D, 0x05, 0x32,  // ....F..2
                                /* 0530 */  0x68, 0xCA, 0x0B, 0x4B, 0x71, 0x4C, 0x32, 0x48,  // h..KqL2H
                                /* 0538 */  0xEC, 0xAB, 0x15, 0x57, 0x79, 0x9F, 0xFC, 0xA3,  // ...Wy...
                                /* 0540 */  0xE9, 0x32, 0xA4, 0xDD, 0xCB, 0x70, 0x1F, 0x08,  // .2...p..
                                /* 0548 */  0x36, 0x47, 0x94, 0xAA, 0xBA, 0x29, 0x5E, 0x1C,  // 6G...)^.
                                /* 0550 */  0xFE, 0x19, 0x18, 0xC2, 0x70, 0xA1, 0x42, 0xF8,  // ....p.B.
                                /* 0558 */  0x7A, 0x33, 0xC6, 0x05, 0xC5, 0x4F, 0x2D, 0xC0,  // z3...O-.
                                /* 0560 */  0x2A, 0x13, 0x77, 0x36, 0xC7, 0xCE, 0x3A, 0xA9,  // *.w6..:.
                                /* 0568 */  0x60, 0xCF, 0x5C, 0xBE, 0x7B, 0x98, 0xAB, 0xA2,  // `.\.{...
                                /* 0570 */  0x89, 0x96, 0x11, 0x0C, 0x22, 0x7A, 0x1F, 0xAC,  // ...."z..
                                /* 0578 */  0x8F, 0xA0, 0xC1, 0x66, 0x9E, 0xAE, 0x8E, 0x3D,  // ...f...=
                                /* 0580 */  0x36, 0x9E, 0xF5, 0x0A, 0x7A, 0x52, 0xA2, 0xE5,  // 6...zR..
                                /* 0588 */  0xF2, 0x2D, 0xC5, 0x3C, 0xEF, 0x92, 0x99, 0x29,  // .-.<...)
                                /* 0590 */  0x16, 0x3F, 0xDD, 0x35, 0x41, 0x1B, 0x1B, 0xF2,  // .?.5A...
                                /* 0598 */  0x6B, 0x4F, 0x8C, 0xCF, 0x38, 0x64, 0xE6, 0xA3,  // kO..8d..
                                /* 05A0 */  0xA8, 0x9B, 0x36, 0x00, 0xDD, 0x5D, 0x43, 0x08,  // ..6..]C.
                                /* 05A8 */  0xE6, 0x9C, 0xC1, 0x92, 0x54, 0x86, 0x41, 0x8E,  // ....T.A.
                                /* 05B0 */  0xA7, 0x52, 0xEF, 0x6F, 0x67, 0x5A, 0x67, 0x49,  // .R.ogZgI
                                /* 05B8 */  0xA9, 0x56, 0x83, 0x8B, 0xA3, 0x92, 0x19, 0xC0,  // .V......
                                /* 05C0 */  0xB2, 0x54, 0x60, 0x7B, 0x04, 0x40, 0xAA, 0x39,  // .T`{.@.9
                                /* 05C8 */  0x19, 0x88, 0x21, 0x2F, 0xB4, 0xDF, 0xE8, 0x62,  // ..!/...b
                                /* 05D0 */  0x55, 0x10, 0xB4, 0x9B, 0x55, 0xDD, 0xD7, 0xE2,  // U...U...
                                /* 05D8 */  0xE5, 0xA2, 0x99, 0x5C, 0x98, 0xC4, 0xE3, 0x61,  // ...\...a
                                /* 05E0 */  0x5E, 0x73, 0xC4, 0x95, 0x8B, 0xBC, 0x3E, 0x1A,  // ^s....>.
                                /* 05E8 */  0x04, 0xB1, 0x54, 0x96, 0x06, 0xF8, 0x27, 0x02,  // ..T...'.
                                /* 05F0 */  0xD5, 0xC9, 0xF7, 0xEA, 0xA4, 0x6B, 0x28, 0xB9,  // .....k(.
                                /* 05F8 */  0x9E, 0x60, 0xBD, 0x12, 0xB0, 0x16               // .`....
                            }
                        })
                    }
                }
            }
            ElseIf ((MCSK == 0x02))
            {
                If ((GTYP == 0x02))
                {
                    Return (Package (0x01)
                    {
                        Buffer (0x0671)
                        {
                            /* 0000 */  0xE5, 0x1F, 0x94, 0x00, 0x00, 0x00, 0x00, 0x02,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x40, 0x67, 0x64, 0x64, 0x76,  // ...@gddv
                            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x4F, 0x45, 0x4D, 0x20,  // ....OEM 
                            /* 0030 */  0x45, 0x78, 0x70, 0x6F, 0x72, 0x74, 0x65, 0x64,  // Exported
                            /* 0038 */  0x20, 0x44, 0x61, 0x74, 0x61, 0x56, 0x61, 0x75,  //  DataVau
                            /* 0040 */  0x6C, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // lt......
                            /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0068 */  0x00, 0x00, 0x00, 0x00, 0x12, 0xB9, 0x99, 0xBC,  // ........
                            /* 0070 */  0x05, 0x78, 0x0C, 0x94, 0x9D, 0x1D, 0x94, 0x19,  // .x......
                            /* 0078 */  0x0D, 0xB7, 0x92, 0xED, 0xCE, 0x4C, 0xB8, 0x0C,  // .....L..
                            /* 0080 */  0xD6, 0x17, 0x13, 0xB1, 0x47, 0x12, 0x25, 0x13,  // ....G.%.
                            /* 0088 */  0xBF, 0xB4, 0x89, 0x2D, 0xDD, 0x05, 0x00, 0x00,  // ...-....
                            /* 0090 */  0x52, 0x45, 0x50, 0x4F, 0x5D, 0x00, 0x00, 0x00,  // REPO]...
                            /* 0098 */  0x01, 0x1C, 0x8C, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 00A0 */  0x00, 0x00, 0x72, 0x87, 0xCD, 0xFF, 0x6D, 0x24,  // ..r...m$
                            /* 00A8 */  0x47, 0xDB, 0x3D, 0x24, 0x92, 0xB4, 0x16, 0x6F,  // G.=$...o
                            /* 00B0 */  0x45, 0xD8, 0xC3, 0xF5, 0x66, 0x14, 0x9F, 0x22,  // E...f.."
                            /* 00B8 */  0xD7, 0xF7, 0xDE, 0x67, 0x90, 0x9A, 0xA2, 0x0D,  // ...g....
                            /* 00C0 */  0x39, 0x25, 0xAD, 0xC3, 0x1A, 0xAD, 0x52, 0x0B,  // 9%....R.
                            /* 00C8 */  0x75, 0x38, 0xE1, 0xA4, 0x14, 0x41, 0x9F, 0x5B,  // u8...A.[
                            /* 00D0 */  0x6C, 0xA0, 0xF6, 0x0A, 0x5F, 0x46, 0xEF, 0xED,  // l..._F..
                            /* 00D8 */  0xCD, 0x0E, 0x81, 0xBB, 0x5E, 0xD4, 0x9A, 0xAB,  // ....^...
                            /* 00E0 */  0xB1, 0xEB, 0xA1, 0xFC, 0x02, 0xA5, 0x01, 0xF3,  // ........
                            /* 00E8 */  0x63, 0xB0, 0x9A, 0x68, 0x25, 0x3C, 0x1D, 0xA9,  // c..h%<..
                            /* 00F0 */  0x99, 0xE6, 0x2A, 0xA6, 0x62, 0x13, 0x64, 0x14,  // ..*.b.d.
                            /* 00F8 */  0x93, 0x95, 0xE8, 0x2A, 0xF9, 0x57, 0x95, 0x76,  // ...*.W.v
                            /* 0100 */  0x3F, 0x09, 0x0B, 0x75, 0xB9, 0xE7, 0x1B, 0x22,  // ?..u..."
                            /* 0108 */  0x86, 0x4C, 0xC6, 0x89, 0xD1, 0xD4, 0x81, 0xC2,  // .L......
                            /* 0110 */  0xD9, 0x41, 0x7E, 0x4C, 0x2D, 0xE0, 0x09, 0x48,  // .A~L-..H
                            /* 0118 */  0xCA, 0xEA, 0x4B, 0x5D, 0x47, 0x78, 0x50, 0x43,  // ..K]GxPC
                            /* 0120 */  0x96, 0x1C, 0x16, 0x2E, 0x5C, 0x9A, 0xDB, 0x67,  // ....\..g
                            /* 0128 */  0x71, 0x60, 0x72, 0x88, 0x6C, 0x65, 0x3D, 0x6D,  // q`r.le=m
                            /* 0130 */  0xB0, 0xFD, 0x91, 0x23, 0xEC, 0x73, 0x31, 0xF2,  // ...#.s1.
                            /* 0138 */  0xF4, 0x72, 0x44, 0xCC, 0x1D, 0xBF, 0x65, 0xF5,  // .rD...e.
                            /* 0140 */  0x93, 0x2D, 0xE6, 0x6E, 0x2B, 0x3B, 0xCB, 0xEE,  // .-.n+;..
                            /* 0148 */  0x71, 0xC4, 0xC3, 0x30, 0x66, 0x4E, 0x67, 0x3A,  // q..0fNg:
                            /* 0150 */  0xE1, 0x19, 0x6F, 0x08, 0xCE, 0x15, 0xDA, 0xEF,  // ..o.....
                            /* 0158 */  0xBF, 0xA5, 0xDA, 0xBB, 0x42, 0x36, 0x97, 0x29,  // ....B6.)
                            /* 0160 */  0x07, 0x78, 0xB5, 0x67, 0x27, 0x12, 0x38, 0x8E,  // .x.g'.8.
                            /* 0168 */  0x4C, 0x44, 0xD6, 0x45, 0xE6, 0xBD, 0x8C, 0x86,  // LD.E....
                            /* 0170 */  0x9B, 0x19, 0x1C, 0xFA, 0x84, 0x9F, 0x9A, 0xB0,  // ........
                            /* 0178 */  0x31, 0x5E, 0xFB, 0x59, 0xD7, 0x44, 0xE8, 0x7B,  // 1^.Y.D.{
                            /* 0180 */  0x89, 0x5F, 0x27, 0xD8, 0x67, 0x50, 0x31, 0x9C,  // ._'.gP1.
                            /* 0188 */  0x69, 0x20, 0x7B, 0xFB, 0x03, 0x25, 0xB6, 0x81,  // i {..%..
                            /* 0190 */  0x98, 0x72, 0x0D, 0x4F, 0x87, 0xB8, 0xA9, 0x5E,  // .r.O...^
                            /* 0198 */  0xD9, 0xA9, 0xFC, 0x24, 0xF3, 0xE8, 0x75, 0x8B,  // ...$..u.
                            /* 01A0 */  0xAD, 0x70, 0xAD, 0x1B, 0x80, 0xE3, 0x11, 0x85,  // .p......
                            /* 01A8 */  0xD6, 0x8E, 0xF4, 0x17, 0x22, 0x6E, 0x30, 0xF8,  // ...."n0.
                            /* 01B0 */  0x7D, 0xFB, 0xEC, 0x01, 0xBF, 0xE8, 0xC9, 0x50,  // }......P
                            /* 01B8 */  0x42, 0x48, 0x4C, 0x9C, 0xD9, 0x46, 0xCD, 0x2B,  // BHL..F.+
                            /* 01C0 */  0xEB, 0x55, 0xBB, 0x3D, 0xD8, 0x69, 0x26, 0xD0,  // .U.=.i&.
                            /* 01C8 */  0x86, 0x7D, 0x28, 0xF8, 0xF9, 0x7D, 0xBE, 0xDE,  // .}(..}..
                            /* 01D0 */  0x94, 0x91, 0x87, 0x6E, 0x99, 0xD5, 0xA9, 0xFB,  // ...n....
                            /* 01D8 */  0xCA, 0x26, 0x2F, 0x7C, 0xEB, 0xFA, 0x6A, 0x4D,  // .&/|..jM
                            /* 01E0 */  0x59, 0x4D, 0xF7, 0x49, 0xC8, 0xA5, 0xAF, 0x24,  // YM.I...$
                            /* 01E8 */  0xC6, 0xE7, 0x4B, 0x47, 0xDB, 0x55, 0x70, 0xBC,  // ..KG.Up.
                            /* 01F0 */  0x94, 0x0B, 0xFB, 0x22, 0x90, 0x87, 0x11, 0x82,  // ..."....
                            /* 01F8 */  0x57, 0xAE, 0xED, 0x06, 0xFD, 0xE5, 0x0A, 0xE5,  // W.......
                            /* 0200 */  0x08, 0x9E, 0x8A, 0x68, 0xE2, 0x14, 0x16, 0x66,  // ...h...f
                            /* 0208 */  0xF5, 0xB1, 0xDD, 0x2E, 0x2B, 0x52, 0xAF, 0x60,  // ....+R.`
                            /* 0210 */  0xCB, 0xB2, 0x38, 0xE1, 0xBE, 0x55, 0xD3, 0x10,  // ..8..U..
                            /* 0218 */  0x32, 0x1B, 0x73, 0x87, 0xF2, 0x3A, 0x82, 0x7C,  // 2.s..:.|
                            /* 0220 */  0x30, 0xE6, 0x60, 0xC3, 0x7A, 0x9A, 0x88, 0x30,  // 0.`.z..0
                            /* 0228 */  0x51, 0xDF, 0x06, 0xFF, 0x3B, 0xEA, 0x94, 0x8E,  // Q...;...
                            /* 0230 */  0x13, 0xC3, 0xF6, 0x19, 0x32, 0xC4, 0x63, 0xF5,  // ....2.c.
                            /* 0238 */  0x7C, 0x98, 0x41, 0x35, 0xD8, 0x75, 0xE0, 0xAE,  // |.A5.u..
                            /* 0240 */  0x88, 0xEC, 0xCA, 0xF4, 0xF3, 0x98, 0xB7, 0xC8,  // ........
                            /* 0248 */  0x27, 0x23, 0x36, 0xA4, 0xF0, 0xA3, 0xC8, 0x3A,  // '#6....:
                            /* 0250 */  0x09, 0x05, 0x7C, 0xA3, 0x01, 0xA5, 0x63, 0xED,  // ..|...c.
                            /* 0258 */  0x4D, 0x02, 0x8D, 0x3E, 0x8E, 0x3C, 0xB3, 0x01,  // M..>.<..
                            /* 0260 */  0x11, 0xBE, 0x97, 0x66, 0x1D, 0xFA, 0xBB, 0xC5,  // ...f....
                            /* 0268 */  0x94, 0x81, 0x82, 0x61, 0xA2, 0xD8, 0x09, 0xB3,  // ...a....
                            /* 0270 */  0x9A, 0xB6, 0x2A, 0x22, 0x03, 0x3B, 0xC0, 0x1E,  // ..*".;..
                            /* 0278 */  0x5C, 0x8F, 0xA4, 0x13, 0xEF, 0x15, 0x89, 0x0B,  // \.......
                            /* 0280 */  0xAB, 0x24, 0xF7, 0xB1, 0x7F, 0xB2, 0x84, 0x47,  // .$.....G
                            /* 0288 */  0x35, 0x50, 0xF3, 0xAB, 0x22, 0x8C, 0x9F, 0xD9,  // 5P.."...
                            /* 0290 */  0xCA, 0x9A, 0x0E, 0x0B, 0xDB, 0x36, 0x0A, 0x44,  // .....6.D
                            /* 0298 */  0xC7, 0xE7, 0x04, 0xCC, 0x76, 0x5D, 0x14, 0x57,  // ....v].W
                            /* 02A0 */  0x87, 0x09, 0x6E, 0x53, 0x91, 0x9E, 0x5A, 0x9C,  // ..nS..Z.
                            /* 02A8 */  0xBE, 0x26, 0x77, 0x08, 0x38, 0xF8, 0x74, 0x62,  // .&w.8.tb
                            /* 02B0 */  0xF9, 0x6D, 0x52, 0xA5, 0x2F, 0xA2, 0x65, 0x3F,  // .mR./.e?
                            /* 02B8 */  0xC7, 0x99, 0x15, 0xCA, 0x4F, 0x80, 0x40, 0x40,  // ....O.@@
                            /* 02C0 */  0x3A, 0xB0, 0x76, 0xD9, 0x51, 0x9C, 0x23, 0x47,  // :.v.Q.#G
                            /* 02C8 */  0x4D, 0x38, 0x4B, 0x87, 0xB4, 0x4A, 0x61, 0xAD,  // M8K..Ja.
                            /* 02D0 */  0x62, 0x1F, 0x81, 0xCD, 0x77, 0x9E, 0x03, 0x74,  // b...w..t
                            /* 02D8 */  0x09, 0x3E, 0xD5, 0x01, 0x54, 0xC0, 0x1F, 0xD8,  // .>..T...
                            /* 02E0 */  0x7D, 0x4C, 0xBD, 0x9E, 0x21, 0xF0, 0xCF, 0x93,  // }L..!...
                            /* 02E8 */  0x09, 0xB9, 0xC9, 0x9F, 0x60, 0x81, 0x17, 0x7F,  // ....`...
                            /* 02F0 */  0x27, 0x5D, 0x6C, 0x8A, 0x7C, 0x97, 0x27, 0xDC,  // ']l.|.'.
                            /* 02F8 */  0xAA, 0x63, 0x20, 0x59, 0x44, 0xF8, 0xE6, 0xC8,  // .c YD...
                            /* 0300 */  0x8B, 0x53, 0xE7, 0x11, 0xFA, 0xAE, 0xA2, 0x09,  // .S......
                            /* 0308 */  0xA2, 0x3B, 0xEB, 0x15, 0x48, 0xC6, 0x3A, 0x96,  // .;..H.:.
                            /* 0310 */  0x97, 0x40, 0x29, 0xF6, 0x9C, 0x7F, 0x2C, 0x38,  // .@)...,8
                            /* 0318 */  0x7B, 0xD9, 0x7E, 0xDF, 0xCB, 0x9A, 0x75, 0x65,  // {.~...ue
                            /* 0320 */  0xA1, 0x67, 0x1C, 0xCE, 0x0B, 0xA7, 0x14, 0x9A,  // .g......
                            /* 0328 */  0xDC, 0xED, 0x6A, 0xA7, 0xC1, 0x68, 0xC8, 0x0B,  // ..j..h..
                            /* 0330 */  0xC3, 0x77, 0x37, 0x2E, 0x37, 0x51, 0xAD, 0x9F,  // .w7.7Q..
                            /* 0338 */  0xD0, 0xB5, 0x2C, 0x76, 0x56, 0x1F, 0xB3, 0x22,  // ..,vV.."
                            /* 0340 */  0x2E, 0x0A, 0xB4, 0xFC, 0x14, 0x2A, 0x99, 0x0C,  // .....*..
                            /* 0348 */  0xA6, 0x4C, 0xE9, 0x26, 0x86, 0x29, 0xE9, 0x7F,  // .L.&.)..
                            /* 0350 */  0x75, 0x82, 0x08, 0x06, 0x71, 0x60, 0x32, 0x17,  // u...q`2.
                            /* 0358 */  0xCC, 0x3E, 0x82, 0x68, 0x6A, 0x10, 0x21, 0x36,  // .>.hj.!6
                            /* 0360 */  0xCF, 0x40, 0x7A, 0xDC, 0xBC, 0x51, 0x98, 0xF1,  // .@z..Q..
                            /* 0368 */  0xE5, 0x9B, 0x56, 0x47, 0xF1, 0xE6, 0x57, 0x45,  // ..VG..WE
                            /* 0370 */  0x29, 0xA2, 0x1E, 0x1F, 0xF2, 0x39, 0x3C, 0xB9,  // )....9<.
                            /* 0378 */  0x77, 0x8A, 0x2C, 0xAF, 0x84, 0x09, 0xED, 0x32,  // w.,....2
                            /* 0380 */  0x13, 0xBA, 0xFD, 0xC2, 0x81, 0xC5, 0x0B, 0xCE,  // ........
                            /* 0388 */  0x08, 0x1E, 0x9D, 0xDC, 0x00, 0xF6, 0x78, 0xD0,  // ......x.
                            /* 0390 */  0xAD, 0x95, 0x85, 0x4E, 0xB1, 0x77, 0x32, 0xA6,  // ...N.w2.
                            /* 0398 */  0xEC, 0x58, 0x19, 0xBE, 0x86, 0xD1, 0xC6, 0x99,  // .X......
                            /* 03A0 */  0x4B, 0x77, 0x4F, 0x8C, 0x16, 0x8B, 0x1D, 0xF1,  // KwO.....
                            /* 03A8 */  0xF6, 0xC0, 0xA4, 0x33, 0x43, 0xD1, 0xAF, 0x1F,  // ...3C...
                            /* 03B0 */  0xEA, 0x09, 0xA8, 0xEE, 0xE6, 0x62, 0xDE, 0x7D,  // .....b.}
                            /* 03B8 */  0xB8, 0x14, 0xFC, 0xEB, 0x98, 0x01, 0x53, 0x52,  // ......SR
                            /* 03C0 */  0xDF, 0xE7, 0x21, 0xB1, 0x6C, 0xCE, 0x6D, 0x3C,  // ..!.l.m<
                            /* 03C8 */  0xF2, 0xB9, 0x11, 0x8E, 0xCE, 0xD8, 0x7A, 0x5D,  // ......z]
                            /* 03D0 */  0xA0, 0x2D, 0xB6, 0x6F, 0x0B, 0xE4, 0x3F, 0x2D,  // .-.o..?-
                            /* 03D8 */  0x02, 0xB1, 0xC4, 0xE0, 0x62, 0x15, 0xBD, 0x35,  // ....b..5
                            /* 03E0 */  0x91, 0x6E, 0x99, 0x63, 0x81, 0x37, 0x62, 0xCF,  // .n.c.7b.
                            /* 03E8 */  0x92, 0x9E, 0x6E, 0x59, 0x39, 0xA0, 0x94, 0x67,  // ..nY9..g
                            /* 03F0 */  0x48, 0x0D, 0x82, 0x5F, 0xB5, 0x5F, 0xE2, 0x0A,  // H.._._..
                            /* 03F8 */  0xF7, 0xBE, 0xCF, 0x6B, 0x44, 0xA1, 0xCC, 0xC4,  // ...kD...
                            /* 0400 */  0xA7, 0xEF, 0xBD, 0x44, 0x1A, 0x22, 0x4C, 0xF1,  // ...D."L.
                            /* 0408 */  0xC3, 0xB1, 0xD6, 0x61, 0x19, 0xE7, 0xEE, 0x0E,  // ...a....
                            /* 0410 */  0x7D, 0x42, 0xDA, 0xA4, 0xD3, 0x56, 0x26, 0xA0,  // }B...V&.
                            /* 0418 */  0xAA, 0xE1, 0x54, 0x4F, 0x0B, 0xB9, 0x24, 0xAA,  // ..TO..$.
                            /* 0420 */  0x57, 0xF2, 0xCC, 0x71, 0x9D, 0xC0, 0x04, 0xB6,  // W..q....
                            /* 0428 */  0x89, 0x22, 0x37, 0x6E, 0x54, 0x89, 0x1C, 0x43,  // ."7nT..C
                            /* 0430 */  0xA9, 0x5C, 0xC6, 0x3F, 0x72, 0x82, 0xB5, 0x0B,  // .\.?r...
                            /* 0438 */  0x5D, 0x5A, 0x1C, 0xED, 0xDA, 0xB1, 0xE6, 0xC6,  // ]Z......
                            /* 0440 */  0x60, 0x5A, 0x52, 0xDE, 0x27, 0xA9, 0xF9, 0x0F,  // `ZR.'...
                            /* 0448 */  0x47, 0xB9, 0xFB, 0x8C, 0xCC, 0x47, 0xB7, 0xE8,  // G....G..
                            /* 0450 */  0x42, 0xD4, 0x8B, 0xBC, 0x0E, 0x2D, 0x69, 0x5D,  // B....-i]
                            /* 0458 */  0x28, 0x94, 0x42, 0x55, 0x2E, 0x85, 0x2D, 0x08,  // (.BU..-.
                            /* 0460 */  0x0D, 0xE7, 0xB1, 0xE2, 0xE4, 0xE5, 0xC5, 0xE1,  // ........
                            /* 0468 */  0x03, 0x72, 0x79, 0xD3, 0x86, 0xCB, 0xF6, 0x2A,  // .ry....*
                            /* 0470 */  0x1D, 0x20, 0x74, 0xCB, 0x86, 0xDD, 0x20, 0xEF,  // . t... .
                            /* 0478 */  0xCA, 0xE4, 0xD4, 0xFC, 0xAC, 0x8B, 0x97, 0xB5,  // ........
                            /* 0480 */  0x0C, 0x77, 0x15, 0xCF, 0xA4, 0x4C, 0x0D, 0x50,  // .w...L.P
                            /* 0488 */  0xD5, 0x38, 0x8D, 0x13, 0x84, 0xEE, 0xCF, 0x07,  // .8......
                            /* 0490 */  0xEE, 0x2C, 0x09, 0xD5, 0x92, 0x23, 0x49, 0xC7,  // .,...#I.
                            /* 0498 */  0xF8, 0x0B, 0x03, 0xEB, 0x38, 0x2D, 0xB9, 0xAE,  // ....8-..
                            /* 04A0 */  0x0C, 0x70, 0x54, 0xBC, 0x93, 0x9D, 0xC0, 0x08,  // .pT.....
                            /* 04A8 */  0x68, 0x16, 0xCC, 0x3C, 0xD6, 0x6A, 0x7D, 0xB9,  // h..<.j}.
                            /* 04B0 */  0x1F, 0xE6, 0xDD, 0x66, 0xAA, 0x30, 0xDB, 0x98,  // ...f.0..
                            /* 04B8 */  0x38, 0xF1, 0x13, 0x86, 0xD9, 0xD6, 0xE0, 0xCA,  // 8.......
                            /* 04C0 */  0x2A, 0x6D, 0xF4, 0x75, 0x06, 0x86, 0xCD, 0x1A,  // *m.u....
                            /* 04C8 */  0x51, 0x70, 0x11, 0x35, 0x13, 0x77, 0x6B, 0x8D,  // Qp.5.wk.
                            /* 04D0 */  0x25, 0xE7, 0xC3, 0x99, 0x6C, 0xC9, 0x7D, 0x4A,  // %...l.}J
                            /* 04D8 */  0x3D, 0xE3, 0x9D, 0x5B, 0x2A, 0x27, 0x98, 0xB2,  // =..[*'..
                            /* 04E0 */  0xE3, 0x9C, 0xD2, 0x41, 0x3C, 0x21, 0x95, 0x8E,  // ...A<!..
                            /* 04E8 */  0x5D, 0x31, 0x3B, 0x97, 0x46, 0x47, 0x66, 0x36,  // ]1;.FGf6
                            /* 04F0 */  0x43, 0x60, 0xFE, 0xB3, 0x13, 0x4E, 0x70, 0xEB,  // C`...Np.
                            /* 04F8 */  0xC7, 0xC2, 0xDB, 0xFF, 0x3C, 0x93, 0x59, 0x73,  // ....<.Ys
                            /* 0500 */  0x94, 0xEE, 0x49, 0x21, 0x1A, 0xCC, 0x17, 0x6A,  // ..I!...j
                            /* 0508 */  0xDB, 0xCC, 0xC5, 0x96, 0x9E, 0x5F, 0x4B, 0x15,  // ....._K.
                            /* 0510 */  0x1C, 0x94, 0xBB, 0x55, 0xE3, 0x05, 0xDA, 0x47,  // ...U...G
                            /* 0518 */  0x6F, 0xD2, 0x0B, 0xAB, 0x78, 0x9E, 0x0D, 0x32,  // o...x..2
                            /* 0520 */  0xC2, 0xFA, 0x3A, 0x9A, 0x19, 0x49, 0xDD, 0xC4,  // ..:..I..
                            /* 0528 */  0xCC, 0x08, 0xA0, 0xD4, 0x39, 0xAD, 0x90, 0x75,  // ....9..u
                            /* 0530 */  0xAE, 0xD8, 0xBE, 0x5F, 0x68, 0x86, 0x2B, 0x61,  // ..._h.+a
                            /* 0538 */  0x8D, 0x4C, 0x48, 0x1B, 0x71, 0xC3, 0xB3, 0xAA,  // .LH.q...
                            /* 0540 */  0x77, 0x86, 0x27, 0xB9, 0xF2, 0xA0, 0x41, 0x6C,  // w.'...Al
                            /* 0548 */  0xB3, 0x4D, 0x93, 0x74, 0x7C, 0x17, 0x0F, 0x3C,  // .M.t|..<
                            /* 0550 */  0x1C, 0x9F, 0x20, 0xA5, 0x3E, 0xB0, 0x80, 0xE3,  // .. .>...
                            /* 0558 */  0xD5, 0x28, 0x4B, 0xDF, 0xD2, 0x2B, 0x50, 0xDB,  // .(K..+P.
                            /* 0560 */  0x9F, 0x73, 0x84, 0x57, 0xD9, 0xA2, 0xA1, 0x60,  // .s.W...`
                            /* 0568 */  0xCA, 0x37, 0xA8, 0x6F, 0x0F, 0x17, 0xE3, 0xFB,  // .7.o....
                            /* 0570 */  0x14, 0x38, 0x94, 0x0C, 0xE5, 0x08, 0xDB, 0x33,  // .8.....3
                            /* 0578 */  0x61, 0x69, 0x25, 0xE0, 0x82, 0x03, 0x8D, 0xAA,  // ai%.....
                            /* 0580 */  0xB6, 0x7B, 0x8B, 0xC6, 0xBF, 0x63, 0x3E, 0x7C,  // .{...c>|
                            /* 0588 */  0x0E, 0x55, 0x01, 0xB3, 0xA2, 0x96, 0xF0, 0x2E,  // .U......
                            /* 0590 */  0x17, 0xC2, 0xC5, 0x5C, 0xAB, 0x56, 0x75, 0xAC,  // ...\.Vu.
                            /* 0598 */  0x10, 0xB1, 0xD7, 0xFE, 0x1C, 0x2A, 0x8B, 0xD4,  // .....*..
                            /* 05A0 */  0x01, 0xA8, 0x70, 0x5D, 0xFC, 0x9F, 0x93, 0xEB,  // ..p]....
                            /* 05A8 */  0x3F, 0x2A, 0x97, 0x3C, 0x66, 0xEC, 0x6B, 0xDF,  // ?*.<f.k.
                            /* 05B0 */  0x98, 0x60, 0x82, 0x0A, 0x90, 0xAC, 0x2A, 0x46,  // .`....*F
                            /* 05B8 */  0x01, 0x3D, 0x52, 0x5E, 0x2D, 0x6E, 0xC2, 0x88,  // .=R^-n..
                            /* 05C0 */  0x43, 0x43, 0xED, 0xC3, 0xEB, 0x36, 0xD6, 0xA9,  // CC...6..
                            /* 05C8 */  0x2C, 0x33, 0x9E, 0x0D, 0x89, 0x38, 0xC2, 0x43,  // ,3...8.C
                            /* 05D0 */  0xA9, 0x00, 0x06, 0xB6, 0x73, 0x98, 0xFE, 0x77,  // ....s..w
                            /* 05D8 */  0x62, 0x37, 0xEC, 0xBA, 0x7B, 0x5C, 0xD1, 0xA9,  // b7..{\..
                            /* 05E0 */  0x7B, 0xC6, 0x0F, 0x1B, 0x55, 0x12, 0x13, 0x76,  // {...U..v
                            /* 05E8 */  0xE0, 0x24, 0xFB, 0xFB, 0xE0, 0x0C, 0xD6, 0x1F,  // .$......
                            /* 05F0 */  0x11, 0x06, 0xB0, 0x0D, 0xE1, 0x52, 0xFC, 0x8C,  // .....R..
                            /* 05F8 */  0xE0, 0xD7, 0x90, 0x2B, 0xCF, 0x07, 0x33, 0x0C,  // ...+..3.
                            /* 0600 */  0xE6, 0xE2, 0x74, 0x81, 0x2F, 0xD4, 0x02, 0xBC,  // ..t./...
                            /* 0608 */  0x90, 0x5C, 0xB7, 0x16, 0x9C, 0xA2, 0x32, 0x11,  // .\....2.
                            /* 0610 */  0x9A, 0xF7, 0x5F, 0x3C, 0x90, 0x2C, 0x42, 0xC2,  // .._<.,B.
                            /* 0618 */  0x32, 0x73, 0x28, 0x5F, 0xAD, 0x8A, 0x96, 0x63,  // 2s(_...c
                            /* 0620 */  0x09, 0x38, 0x0C, 0x7E, 0xAA, 0xA3, 0x4F, 0x2F,  // .8.~..O/
                            /* 0628 */  0xCF, 0x74, 0x00, 0x8D, 0x08, 0x29, 0x3D, 0x8A,  // .t...)=.
                            /* 0630 */  0x74, 0xF0, 0x49, 0x3A, 0x98, 0x1F, 0xC2, 0x79,  // t.I:...y
                            /* 0638 */  0x2C, 0x7B, 0xD3, 0xCC, 0xA4, 0xF2, 0xDA, 0x87,  // ,{......
                            /* 0640 */  0xA4, 0x2C, 0x93, 0x66, 0xD1, 0xD6, 0x47, 0x3A,  // .,.f..G:
                            /* 0648 */  0x77, 0x5C, 0x1A, 0x58, 0x1E, 0x29, 0xBB, 0xBD,  // w\.X.)..
                            /* 0650 */  0x66, 0x03, 0x8A, 0xED, 0x93, 0x0D, 0x52, 0x2D,  // f.....R-
                            /* 0658 */  0x33, 0x21, 0x54, 0x28, 0x93, 0xB4, 0x40, 0xAD,  // 3!T(..@.
                            /* 0660 */  0x65, 0x1C, 0x67, 0x5E, 0x1B, 0x71, 0xB6, 0x3F,  // e.g^.q.?
                            /* 0668 */  0xF1, 0xA4, 0x77, 0x08, 0x11, 0x3A, 0x92, 0xFD,  // ..w..:..
                            /* 0670 */  0x93                                             // .
                        }
                    })
                }
                ElseIf ((GTYP == 0x03))
                {
                    Return (Package (0x01)
                    {
                        Buffer (0x06BC)
                        {
                            /* 0000 */  0xE5, 0x1F, 0x94, 0x00, 0x00, 0x00, 0x00, 0x02,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x40, 0x67, 0x64, 0x64, 0x76,  // ...@gddv
                            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x4F, 0x45, 0x4D, 0x20,  // ....OEM 
                            /* 0030 */  0x45, 0x78, 0x70, 0x6F, 0x72, 0x74, 0x65, 0x64,  // Exported
                            /* 0038 */  0x20, 0x44, 0x61, 0x74, 0x61, 0x56, 0x61, 0x75,  //  DataVau
                            /* 0040 */  0x6C, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // lt......
                            /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0068 */  0x00, 0x00, 0x00, 0x00, 0x8D, 0x6D, 0xDA, 0x45,  // .....m.E
                            /* 0070 */  0xCC, 0x4D, 0x9F, 0x44, 0xAC, 0x3A, 0xCE, 0xE8,  // .M.D.:..
                            /* 0078 */  0x2E, 0xC8, 0x3D, 0xB2, 0x48, 0xC4, 0x5A, 0x0B,  // ..=.H.Z.
                            /* 0080 */  0xB7, 0xA2, 0x5A, 0x55, 0xC8, 0xBC, 0xAA, 0x7A,  // ..ZU...z
                            /* 0088 */  0xE6, 0x72, 0x58, 0xF2, 0x28, 0x06, 0x00, 0x00,  // .rX.(...
                            /* 0090 */  0x52, 0x45, 0x50, 0x4F, 0x5D, 0x00, 0x00, 0x00,  // REPO]...
                            /* 0098 */  0x01, 0xFE, 0x8D, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 00A0 */  0x00, 0x00, 0x72, 0x87, 0xCD, 0xFF, 0x6D, 0x24,  // ..r...m$
                            /* 00A8 */  0x47, 0xDB, 0x3D, 0x24, 0x92, 0xB4, 0x16, 0x6F,  // G.=$...o
                            /* 00B0 */  0x45, 0xD8, 0xC3, 0xF5, 0x66, 0x14, 0x9F, 0x22,  // E...f.."
                            /* 00B8 */  0xD7, 0xF7, 0xDE, 0x67, 0x90, 0x9A, 0xA2, 0x0D,  // ...g....
                            /* 00C0 */  0x39, 0x25, 0xAD, 0xC3, 0x1A, 0xAD, 0x52, 0x0B,  // 9%....R.
                            /* 00C8 */  0x75, 0x38, 0xE1, 0xA4, 0x14, 0x41, 0xF4, 0xA8,  // u8...A..
                            /* 00D0 */  0xE6, 0x0B, 0x8A, 0xB4, 0xCC, 0x65, 0xFD, 0xA3,  // .....e..
                            /* 00D8 */  0x98, 0x13, 0x1C, 0x00, 0x7A, 0x11, 0xEB, 0x91,  // ....z...
                            /* 00E0 */  0x4B, 0x95, 0xBA, 0x24, 0x30, 0xC9, 0xF5, 0xD3,  // K..$0...
                            /* 00E8 */  0xD6, 0x99, 0xD9, 0x70, 0x15, 0x0F, 0x98, 0x94,  // ...p....
                            /* 00F0 */  0x62, 0x12, 0xF2, 0xC6, 0xB2, 0xEA, 0x4C, 0x0C,  // b.....L.
                            /* 00F8 */  0x61, 0xC6, 0x0E, 0x31, 0x45, 0x85, 0x46, 0x93,  // a..1E.F.
                            /* 0100 */  0xF0, 0xED, 0x70, 0xD9, 0x19, 0xA6, 0x45, 0x77,  // ..p...Ew
                            /* 0108 */  0xC2, 0xEE, 0x6B, 0xA7, 0xA3, 0xC5, 0x2F, 0xB0,  // ..k.../.
                            /* 0110 */  0xF0, 0xEA, 0x45, 0x53, 0xB7, 0x05, 0x53, 0x93,  // ..ES..S.
                            /* 0118 */  0xFF, 0x38, 0xD7, 0xBA, 0xE3, 0xF7, 0x06, 0x17,  // .8......
                            /* 0120 */  0x1A, 0x76, 0xBC, 0x82, 0x2E, 0x2A, 0xBA, 0x68,  // .v...*.h
                            /* 0128 */  0x57, 0x45, 0x1B, 0x4A, 0x22, 0x30, 0x4D, 0x26,  // WE.J"0M&
                            /* 0130 */  0x0C, 0x14, 0x85, 0x9B, 0x4D, 0x4D, 0xE1, 0xB0,  // ....MM..
                            /* 0138 */  0x1E, 0xC9, 0xBE, 0x8B, 0x33, 0x73, 0x5A, 0x4E,  // ....3sZN
                            /* 0140 */  0x9C, 0xB8, 0x62, 0x15, 0x0B, 0xC8, 0x26, 0xB4,  // ..b...&.
                            /* 0148 */  0xFA, 0xAD, 0xF3, 0x76, 0xDE, 0x51, 0x0B, 0xD1,  // ...v.Q..
                            /* 0150 */  0x11, 0xCB, 0x7E, 0x4B, 0x19, 0xCA, 0x88, 0x10,  // ..~K....
                            /* 0158 */  0xB0, 0xB4, 0x9A, 0xCF, 0x95, 0xAF, 0xC0, 0xDD,  // ........
                            /* 0160 */  0xAC, 0xBD, 0xE7, 0xE6, 0x5D, 0xF0, 0xBC, 0x4C,  // ....]..L
                            /* 0168 */  0x26, 0x9F, 0x01, 0x9F, 0x20, 0xEF, 0x6D, 0xC5,  // &... .m.
                            /* 0170 */  0x0D, 0x8E, 0x31, 0xE0, 0x8A, 0xD9, 0x88, 0x36,  // ..1....6
                            /* 0178 */  0xB6, 0xAB, 0x16, 0xF2, 0x63, 0x1A, 0x8B, 0xA2,  // ....c...
                            /* 0180 */  0x22, 0x66, 0x32, 0x86, 0xC0, 0x82, 0x59, 0x91,  // "f2...Y.
                            /* 0188 */  0x39, 0xC2, 0xCC, 0x1C, 0x25, 0x57, 0xC4, 0xCE,  // 9...%W..
                            /* 0190 */  0xED, 0x8B, 0xC4, 0xA9, 0x96, 0xFC, 0x88, 0x69,  // .......i
                            /* 0198 */  0x2A, 0x0F, 0x0C, 0xFA, 0x28, 0x24, 0x85, 0x9F,  // *...($..
                            /* 01A0 */  0xE6, 0x50, 0x57, 0x28, 0xE6, 0xAF, 0x9B, 0x50,  // .PW(...P
                            /* 01A8 */  0x51, 0x48, 0x5A, 0x0A, 0x58, 0x77, 0xA0, 0xFA,  // QHZ.Xw..
                            /* 01B0 */  0x60, 0xAA, 0x71, 0xDA, 0x9A, 0xBC, 0x23, 0xF4,  // `.q...#.
                            /* 01B8 */  0xF3, 0x5F, 0xA7, 0xF0, 0xFA, 0x99, 0x33, 0xF0,  // ._....3.
                            /* 01C0 */  0xA9, 0xB5, 0x2A, 0x25, 0x8C, 0xE2, 0xE3, 0x94,  // ..*%....
                            /* 01C8 */  0x7B, 0xFD, 0xF3, 0xED, 0x77, 0x11, 0xFA, 0xDB,  // {...w...
                            /* 01D0 */  0xC4, 0xD0, 0x04, 0x6B, 0x63, 0x2E, 0x35, 0x76,  // ...kc.5v
                            /* 01D8 */  0x06, 0xCA, 0x63, 0x97, 0xDD, 0xC5, 0xDA, 0x14,  // ..c.....
                            /* 01E0 */  0xFB, 0x3B, 0xF7, 0x2D, 0x4F, 0xFC, 0xCF, 0xFE,  // .;.-O...
                            /* 01E8 */  0x09, 0xEC, 0x42, 0x8E, 0xCE, 0x04, 0x8D, 0x50,  // ..B....P
                            /* 01F0 */  0x17, 0x93, 0xA5, 0xC7, 0xD9, 0xEF, 0x0F, 0x72,  // .......r
                            /* 01F8 */  0xD1, 0x98, 0x37, 0xB8, 0x88, 0xC5, 0x16, 0xA1,  // ..7.....
                            /* 0200 */  0x60, 0xF0, 0xA9, 0xC3, 0x3F, 0xBC, 0xC5, 0xB0,  // `...?...
                            /* 0208 */  0x2B, 0xA2, 0x78, 0xDE, 0x65, 0x68, 0x1D, 0x16,  // +.x.eh..
                            /* 0210 */  0x74, 0x77, 0x3F, 0xED, 0x1E, 0x79, 0x80, 0x8B,  // tw?..y..
                            /* 0218 */  0x85, 0x83, 0x05, 0x4C, 0xB0, 0xB2, 0x90, 0x17,  // ...L....
                            /* 0220 */  0xD7, 0xD1, 0x8E, 0x1D, 0x15, 0x82, 0xC4, 0x63,  // .......c
                            /* 0228 */  0xE3, 0x01, 0x50, 0x40, 0x30, 0xA2, 0x28, 0xAA,  // ..P@0.(.
                            /* 0230 */  0x2C, 0x1C, 0x79, 0x73, 0xD7, 0xC2, 0x9C, 0x86,  // ,.ys....
                            /* 0238 */  0xEA, 0x5F, 0x34, 0xD5, 0x3D, 0x21, 0x15, 0xFA,  // ._4.=!..
                            /* 0240 */  0xEA, 0x16, 0x97, 0xC9, 0x35, 0x34, 0xD6, 0xA8,  // ....54..
                            /* 0248 */  0x3F, 0xCC, 0x7C, 0x14, 0xEB, 0x85, 0x24, 0x15,  // ?.|...$.
                            /* 0250 */  0x83, 0x08, 0xE7, 0x2A, 0xCC, 0x59, 0xB2, 0x4E,  // ...*.Y.N
                            /* 0258 */  0x55, 0xBD, 0xA6, 0x83, 0x4A, 0xFA, 0xBF, 0x69,  // U...J..i
                            /* 0260 */  0xB6, 0xB1, 0x2E, 0x42, 0x41, 0x9A, 0x17, 0x8A,  // ...BA...
                            /* 0268 */  0x40, 0xF9, 0x85, 0x64, 0x19, 0xBF, 0x49, 0x31,  // @..d..I1
                            /* 0270 */  0x2C, 0xAC, 0x6E, 0x95, 0xD4, 0x77, 0x46, 0xAB,  // ,.n..wF.
                            /* 0278 */  0x23, 0xCD, 0x59, 0x10, 0xB0, 0x71, 0x5B, 0x84,  // #.Y..q[.
                            /* 0280 */  0xBC, 0xA5, 0x89, 0xFA, 0x55, 0x2F, 0x71, 0xE7,  // ....U/q.
                            /* 0288 */  0x18, 0x80, 0x57, 0x20, 0x0A, 0x5F, 0xAD, 0xBB,  // ..W ._..
                            /* 0290 */  0x7B, 0xA0, 0x50, 0x94, 0x6C, 0xE4, 0x5C, 0x1B,  // {.P.l.\.
                            /* 0298 */  0xD4, 0xA4, 0xA2, 0xCA, 0x51, 0xEF, 0x59, 0x82,  // ....Q.Y.
                            /* 02A0 */  0xDE, 0x76, 0x1B, 0x8A, 0xD4, 0x30, 0xB2, 0x64,  // .v...0.d
                            /* 02A8 */  0x9C, 0xE2, 0x22, 0x3A, 0x4C, 0x01, 0x3C, 0xFD,  // ..":L.<.
                            /* 02B0 */  0x8D, 0x9E, 0x28, 0xEA, 0x22, 0xC8, 0xFB, 0xC7,  // ..(."...
                            /* 02B8 */  0xFA, 0xA2, 0x15, 0xBD, 0x72, 0x3B, 0x2F, 0xD9,  // ....r;/.
                            /* 02C0 */  0xE1, 0xA8, 0x29, 0x2F, 0xB9, 0x26, 0xEB, 0xB3,  // ..)/.&..
                            /* 02C8 */  0x55, 0xB6, 0xD8, 0x85, 0xD4, 0xEF, 0x18, 0x44,  // U......D
                            /* 02D0 */  0x32, 0xB1, 0x4D, 0x97, 0xB7, 0x38, 0x77, 0x01,  // 2.M..8w.
                            /* 02D8 */  0x24, 0xE6, 0x0E, 0xC6, 0x48, 0x67, 0xC6, 0x08,  // $...Hg..
                            /* 02E0 */  0xD9, 0x83, 0xB5, 0xE8, 0xEE, 0xDA, 0xF8, 0x56,  // .......V
                            /* 02E8 */  0xA6, 0x69, 0x08, 0xD5, 0xC2, 0x5C, 0x74, 0xBD,  // .i...\t.
                            /* 02F0 */  0x85, 0xE3, 0x9C, 0x3C, 0x42, 0xA1, 0xFF, 0x44,  // ...<B..D
                            /* 02F8 */  0x0D, 0xF2, 0x13, 0xE5, 0x42, 0xD8, 0x24, 0xA5,  // ....B.$.
                            /* 0300 */  0xE8, 0xF8, 0x0C, 0x49, 0xFE, 0xBF, 0x0B, 0xFA,  // ...I....
                            /* 0308 */  0x75, 0x6C, 0x27, 0x5D, 0x85, 0xD0, 0x0E, 0x75,  // ul']...u
                            /* 0310 */  0x8C, 0x22, 0x0C, 0x89, 0x9F, 0x24, 0x3F, 0x8C,  // ."...$?.
                            /* 0318 */  0xD5, 0x4E, 0x4A, 0x4A, 0x79, 0x18, 0x77, 0x5E,  // .NJJy.w^
                            /* 0320 */  0xDD, 0xE1, 0x71, 0x06, 0xD3, 0xCA, 0x6D, 0xAF,  // ..q...m.
                            /* 0328 */  0x6E, 0x16, 0x5E, 0xBD, 0xF5, 0x4A, 0xC0, 0xD0,  // n.^..J..
                            /* 0330 */  0x15, 0xDA, 0xA9, 0x9D, 0x36, 0x19, 0x7D, 0x6A,  // ....6.}j
                            /* 0338 */  0x15, 0x03, 0xBB, 0x96, 0x83, 0xAB, 0x4E, 0x6F,  // ......No
                            /* 0340 */  0x80, 0xAC, 0xE2, 0x7D, 0x89, 0x55, 0x13, 0xD1,  // ...}.U..
                            /* 0348 */  0x2B, 0xC3, 0xAD, 0xFE, 0x5E, 0x56, 0x7B, 0xDC,  // +...^V{.
                            /* 0350 */  0x2E, 0xF5, 0x51, 0xF2, 0xCA, 0x7B, 0x69, 0xFA,  // ..Q..{i.
                            /* 0358 */  0x9A, 0x4D, 0xF1, 0x09, 0xB2, 0xFB, 0x8C, 0x34,  // .M.....4
                            /* 0360 */  0x36, 0x1A, 0xA4, 0xE0, 0xCF, 0x3D, 0x0E, 0x32,  // 6....=.2
                            /* 0368 */  0xBF, 0x10, 0x5E, 0xAE, 0x91, 0x5C, 0xC6, 0xC5,  // ..^..\..
                            /* 0370 */  0xB0, 0x27, 0x58, 0xCC, 0xF5, 0x80, 0x32, 0x6B,  // .'X...2k
                            /* 0378 */  0x0E, 0xD6, 0x05, 0x57, 0x77, 0x90, 0x70, 0xF9,  // ...Ww.p.
                            /* 0380 */  0x68, 0x8A, 0x9C, 0x49, 0x91, 0xFA, 0xAE, 0x1D,  // h..I....
                            /* 0388 */  0x07, 0x04, 0xFA, 0x41, 0x03, 0x17, 0x45, 0x32,  // ...A..E2
                            /* 0390 */  0x8E, 0x67, 0x51, 0x34, 0x3A, 0x32, 0xCA, 0xDB,  // .gQ4:2..
                            /* 0398 */  0x9D, 0x9A, 0xE2, 0x74, 0x6C, 0x24, 0xFF, 0xA4,  // ...tl$..
                            /* 03A0 */  0xDD, 0x45, 0xBC, 0x03, 0x14, 0x78, 0xCB, 0x3D,  // .E...x.=
                            /* 03A8 */  0x73, 0x6A, 0x01, 0x05, 0xBD, 0xE7, 0x66, 0x44,  // sj....fD
                            /* 03B0 */  0x55, 0xC7, 0xE9, 0x71, 0xB5, 0xDE, 0x7A, 0xFE,  // U..q..z.
                            /* 03B8 */  0xF2, 0xBC, 0xF5, 0x77, 0x67, 0x5A, 0xAA, 0xC3,  // ...wgZ..
                            /* 03C0 */  0x07, 0x41, 0x30, 0x59, 0x4C, 0xE8, 0x01, 0x08,  // .A0YL...
                            /* 03C8 */  0x28, 0xFB, 0x60, 0x68, 0x37, 0xEF, 0xDC, 0x4D,  // (.`h7..M
                            /* 03D0 */  0x81, 0x18, 0xF3, 0xA2, 0x11, 0x1D, 0x33, 0x2F,  // ......3/
                            /* 03D8 */  0xE5, 0xC0, 0xCD, 0x9E, 0xCF, 0xB1, 0xB6, 0xA5,  // ........
                            /* 03E0 */  0xCC, 0x96, 0xB7, 0x77, 0x7B, 0xC6, 0xD4, 0xCD,  // ...w{...
                            /* 03E8 */  0xEB, 0x17, 0xAF, 0xA5, 0xD0, 0xAC, 0x83, 0x46,  // .......F
                            /* 03F0 */  0xEA, 0x56, 0xD1, 0xFD, 0x6F, 0x84, 0xC3, 0x72,  // .V..o..r
                            /* 03F8 */  0x43, 0xC1, 0xDA, 0x9C, 0x04, 0xD4, 0xDB, 0x17,  // C.......
                            /* 0400 */  0x11, 0x8C, 0x2A, 0x93, 0xE2, 0x1E, 0x5F, 0x51,  // ..*..._Q
                            /* 0408 */  0x54, 0x2A, 0x4C, 0xAE, 0x15, 0x81, 0x40, 0x42,  // T*L...@B
                            /* 0410 */  0x4C, 0x94, 0x11, 0x0A, 0x9B, 0x34, 0x68, 0x01,  // L....4h.
                            /* 0418 */  0xFD, 0xBA, 0x1F, 0x7C, 0x48, 0x99, 0x37, 0xB5,  // ...|H.7.
                            /* 0420 */  0xAA, 0xE7, 0x78, 0xED, 0xCA, 0x7A, 0x15, 0x92,  // ..x..z..
                            /* 0428 */  0x3D, 0xC7, 0x97, 0x18, 0x41, 0x62, 0xC7, 0xB9,  // =...Ab..
                            /* 0430 */  0x81, 0x69, 0x1D, 0xD4, 0x66, 0x5A, 0xCF, 0x04,  // .i..fZ..
                            /* 0438 */  0x6F, 0x84, 0xD1, 0xBA, 0x13, 0x71, 0x0D, 0xEA,  // o....q..
                            /* 0440 */  0xEE, 0xEB, 0xC3, 0x76, 0xED, 0xAD, 0x7A, 0xD0,  // ...v..z.
                            /* 0448 */  0xD4, 0xAF, 0x42, 0x71, 0x5E, 0xB4, 0xC3, 0x31,  // ..Bq^..1
                            /* 0450 */  0xC2, 0x40, 0xDD, 0xFD, 0xB6, 0x4C, 0x3C, 0xDD,  // .@...L<.
                            /* 0458 */  0x7E, 0x88, 0xC4, 0x36, 0xCE, 0x20, 0xF4, 0x02,  // ~..6. ..
                            /* 0460 */  0x45, 0x76, 0xC9, 0x57, 0x91, 0xA7, 0xEC, 0x74,  // Ev.W...t
                            /* 0468 */  0x6A, 0xDC, 0xB4, 0xA6, 0x0B, 0xC6, 0x05, 0x2E,  // j.......
                            /* 0470 */  0x42, 0x79, 0xA9, 0x11, 0x21, 0x69, 0xA8, 0xFC,  // By..!i..
                            /* 0478 */  0xA6, 0x4E, 0x0E, 0xD1, 0x32, 0x8D, 0x76, 0x3F,  // .N..2.v?
                            /* 0480 */  0x05, 0x10, 0xF8, 0xDA, 0x6F, 0xD6, 0x71, 0xE8,  // ....o.q.
                            /* 0488 */  0xAE, 0xFE, 0x1F, 0x69, 0x20, 0x51, 0xB9, 0x09,  // ...i Q..
                            /* 0490 */  0x2A, 0x75, 0x5D, 0x43, 0xFE, 0xF5, 0xAF, 0xFA,  // *u]C....
                            /* 0498 */  0xD7, 0x73, 0xCD, 0x6C, 0xB1, 0x0E, 0x53, 0x66,  // .s.l..Sf
                            /* 04A0 */  0x4B, 0x85, 0x89, 0x71, 0x85, 0xF7, 0x4F, 0x7C,  // K..q..O|
                            /* 04A8 */  0x79, 0xB8, 0x4F, 0xB4, 0x73, 0xEB, 0x83, 0xBA,  // y.O.s...
                            /* 04B0 */  0x65, 0xE0, 0xCB, 0x69, 0x3F, 0x97, 0x56, 0x9A,  // e..i?.V.
                            /* 04B8 */  0xD5, 0x66, 0x42, 0xE5, 0x95, 0x7E, 0x4C, 0x71,  // .fB..~Lq
                            /* 04C0 */  0x34, 0x1F, 0xD5, 0x7B, 0x7E, 0x5B, 0x16, 0x7A,  // 4..{~[.z
                            /* 04C8 */  0xB3, 0xC9, 0x93, 0x76, 0x04, 0xB6, 0x13, 0xAB,  // ...v....
                            /* 04D0 */  0xE1, 0x72, 0x9F, 0x60, 0xF5, 0xA3, 0x6F, 0xB1,  // .r.`..o.
                            /* 04D8 */  0x62, 0x26, 0x2E, 0x0D, 0x79, 0x96, 0xEE, 0x25,  // b&..y..%
                            /* 04E0 */  0xE0, 0x71, 0x34, 0x39, 0xD0, 0xD7, 0xB3, 0x30,  // .q49...0
                            /* 04E8 */  0xB2, 0x62, 0x79, 0x1E, 0x43, 0x79, 0x5B, 0x7C,  // .by.Cy[|
                            /* 04F0 */  0x89, 0xF9, 0x13, 0x1A, 0xB0, 0x6B, 0x94, 0x28,  // .....k.(
                            /* 04F8 */  0x60, 0x31, 0xC3, 0x2E, 0x77, 0x3E, 0xE9, 0xD6,  // `1..w>..
                            /* 0500 */  0xF0, 0xFF, 0xB0, 0x24, 0xF6, 0x10, 0x75, 0xC6,  // ...$..u.
                            /* 0508 */  0x04, 0xAB, 0x85, 0x6A, 0xE6, 0xB8, 0xE2, 0x06,  // ...j....
                            /* 0510 */  0x03, 0x3F, 0x92, 0x44, 0x0C, 0x6F, 0xF0, 0xCB,  // .?.D.o..
                            /* 0518 */  0x4E, 0x1B, 0x0F, 0x30, 0xFF, 0x24, 0x6A, 0x63,  // N..0.$jc
                            /* 0520 */  0x69, 0xF4, 0x88, 0xA6, 0x54, 0xB9, 0xC7, 0x83,  // i...T...
                            /* 0528 */  0xDB, 0x4B, 0x0A, 0x3E, 0x48, 0x02, 0x62, 0xAE,  // .K.>H.b.
                            /* 0530 */  0xE1, 0xF5, 0xB6, 0x5B, 0x97, 0xF7, 0x84, 0x86,  // ...[....
                            /* 0538 */  0xDB, 0xBE, 0xBE, 0x55, 0x49, 0x6F, 0xBA, 0x63,  // ...UIo.c
                            /* 0540 */  0xCB, 0x45, 0xFE, 0x79, 0x7A, 0x11, 0xE9, 0x3F,  // .E.yz..?
                            /* 0548 */  0x39, 0xC7, 0xAE, 0xE4, 0xD5, 0xF0, 0xC3, 0xD2,  // 9.......
                            /* 0550 */  0x95, 0x37, 0xEC, 0xE9, 0xA9, 0x78, 0xEB, 0x7C,  // .7...x.|
                            /* 0558 */  0x68, 0x4A, 0xC4, 0x65, 0xFD, 0xF7, 0x2A, 0x02,  // hJ.e..*.
                            /* 0560 */  0xAD, 0xF2, 0x27, 0x65, 0x3E, 0x1B, 0xBE, 0x03,  // ..'e>...
                            /* 0568 */  0xB4, 0xF3, 0xE2, 0xDD, 0xD4, 0xF7, 0xCB, 0x83,  // ........
                            /* 0570 */  0x4F, 0x2F, 0x57, 0xA0, 0x33, 0x0E, 0x83, 0x24,  // O/W.3..$
                            /* 0578 */  0x23, 0x73, 0x2A, 0xFF, 0xD4, 0xD6, 0x08, 0x09,  // #s*.....
                            /* 0580 */  0x70, 0xE7, 0x03, 0x16, 0xE2, 0xC3, 0xE1, 0x0C,  // p.......
                            /* 0588 */  0xFB, 0x55, 0x57, 0x1F, 0xD6, 0xFA, 0x29, 0x2A,  // .UW...)*
                            /* 0590 */  0xA1, 0xC6, 0x5D, 0xE3, 0x4A, 0x2B, 0x07, 0x3D,  // ..].J+.=
                            /* 0598 */  0xD8, 0x52, 0x68, 0xCF, 0x14, 0x20, 0x6A, 0x18,  // .Rh.. j.
                            /* 05A0 */  0x34, 0x14, 0xC1, 0x0A, 0x95, 0x76, 0xCE, 0xC7,  // 4....v..
                            /* 05A8 */  0x21, 0xC0, 0xC8, 0xC5, 0xE1, 0x60, 0x3C, 0x8C,  // !....`<.
                            /* 05B0 */  0xFB, 0x16, 0x76, 0xE0, 0xFA, 0x67, 0x31, 0x31,  // ..v..g11
                            /* 05B8 */  0x26, 0xD0, 0x24, 0xC5, 0xFA, 0x5C, 0x93, 0x8D,  // &.$..\..
                            /* 05C0 */  0x1A, 0x52, 0x3E, 0x57, 0x29, 0xEB, 0x2A, 0xB4,  // .R>W).*.
                            /* 05C8 */  0x74, 0x15, 0xD0, 0xB8, 0xA1, 0x17, 0xC0, 0x1E,  // t.......
                            /* 05D0 */  0x06, 0x79, 0x90, 0x65, 0x03, 0x6C, 0x7D, 0x9C,  // .y.e.l}.
                            /* 05D8 */  0xD6, 0x68, 0x35, 0x6E, 0x59, 0x01, 0xB5, 0x7E,  // .h5nY..~
                            /* 05E0 */  0x30, 0x6B, 0x99, 0x69, 0x0A, 0xB0, 0x8A, 0xC5,  // 0k.i....
                            /* 05E8 */  0x68, 0x78, 0x55, 0x39, 0x4C, 0x7C, 0xFA, 0x7D,  // hxU9L|.}
                            /* 05F0 */  0x41, 0xFA, 0x64, 0xA8, 0xDD, 0x67, 0x7B, 0x88,  // A.d..g{.
                            /* 05F8 */  0x5B, 0xEF, 0x3C, 0x3E, 0x80, 0xFE, 0x0E, 0x68,  // [.<>...h
                            /* 0600 */  0xA4, 0x30, 0x48, 0x69, 0x82, 0xA2, 0xD5, 0xA7,  // .0Hi....
                            /* 0608 */  0x53, 0x16, 0xB5, 0x9A, 0x76, 0x9A, 0x44, 0xB2,  // S...v.D.
                            /* 0610 */  0x3B, 0x5B, 0x99, 0x80, 0x40, 0xA5, 0xAA, 0x83,  // ;[..@...
                            /* 0618 */  0xB6, 0x77, 0xE4, 0x82, 0x1A, 0x2A, 0xB1, 0x5B,  // .w...*.[
                            /* 0620 */  0xE3, 0x1B, 0x93, 0x08, 0x4E, 0xA9, 0x34, 0x19,  // ....N.4.
                            /* 0628 */  0x4D, 0xA6, 0xA6, 0xAA, 0x5F, 0x6B, 0xF1, 0x10,  // M..._k..
                            /* 0630 */  0xAE, 0xEA, 0x78, 0xA7, 0x69, 0x84, 0x40, 0x69,  // ..x.i.@i
                            /* 0638 */  0xE4, 0xA6, 0x3A, 0x08, 0x37, 0x1A, 0x1B, 0x08,  // ..:.7...
                            /* 0640 */  0x6B, 0x4F, 0xD4, 0x27, 0xB0, 0x61, 0xA3, 0xD8,  // kO.'.a..
                            /* 0648 */  0x5F, 0x72, 0xAB, 0x35, 0x65, 0x6A, 0xCC, 0xE6,  // _r.5ej..
                            /* 0650 */  0xD2, 0x6F, 0xFF, 0xD4, 0xB8, 0x6F, 0x4B, 0x5C,  // .o...oK\
                            /* 0658 */  0x6B, 0xAB, 0x79, 0xC3, 0x91, 0x83, 0x7B, 0x82,  // k.y...{.
                            /* 0660 */  0x94, 0xEA, 0x8D, 0x92, 0x5A, 0x34, 0x4F, 0x6D,  // ....Z4Om
                            /* 0668 */  0xD5, 0xE3, 0xA8, 0x6E, 0x8F, 0xBF, 0xE8, 0x77,  // ...n...w
                            /* 0670 */  0x21, 0x11, 0x68, 0x2B, 0x2E, 0x73, 0xAC, 0x46,  // !.h+.s.F
                            /* 0678 */  0xBC, 0xFD, 0x3F, 0x4C, 0x55, 0xF0, 0xAF, 0xE9,  // ..?LU...
                            /* 0680 */  0x85, 0x73, 0x7C, 0xE2, 0xB8, 0x2E, 0xBD, 0x0D,  // .s|.....
                            /* 0688 */  0x0D, 0x97, 0x4D, 0x48, 0xAF, 0x18, 0x38, 0xBF,  // ..MH..8.
                            /* 0690 */  0x81, 0x05, 0x17, 0xD0, 0x35, 0xD1, 0x4A, 0x1A,  // ....5.J.
                            /* 0698 */  0xE6, 0x0C, 0x5A, 0x05, 0x19, 0x87, 0x12, 0x61,  // ..Z....a
                            /* 06A0 */  0xB2, 0xA9, 0xDA, 0x79, 0x44, 0x46, 0xE0, 0xAA,  // ...yDF..
                            /* 06A8 */  0x6E, 0x53, 0x35, 0xAF, 0x3F, 0xFD, 0x7B, 0x62,  // nS5.?.{b
                            /* 06B0 */  0x3C, 0x75, 0x34, 0x86, 0xC2, 0x78, 0xCE, 0x87,  // <u4..x..
                            /* 06B8 */  0x60, 0xF5, 0x2D, 0x93                           // `.-.
                        }
                    })
                }
                Else
                {
                    Return (Package (0x01)
                    {
                        Buffer (0x0683)
                        {
                            /* 0000 */  0xE5, 0x1F, 0x94, 0x00, 0x00, 0x00, 0x00, 0x02,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x40, 0x67, 0x64, 0x64, 0x76,  // ...@gddv
                            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x4F, 0x45, 0x4D, 0x20,  // ....OEM 
                            /* 0030 */  0x45, 0x78, 0x70, 0x6F, 0x72, 0x74, 0x65, 0x64,  // Exported
                            /* 0038 */  0x20, 0x44, 0x61, 0x74, 0x61, 0x56, 0x61, 0x75,  //  DataVau
                            /* 0040 */  0x6C, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // lt......
                            /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0068 */  0x00, 0x00, 0x00, 0x00, 0xB7, 0x20, 0x70, 0xD6,  // ..... p.
                            /* 0070 */  0xFB, 0x8C, 0x7D, 0x13, 0xD3, 0x1F, 0x22, 0x24,  // ..}..."$
                            /* 0078 */  0x55, 0xEF, 0xE6, 0x2F, 0xB4, 0x6F, 0xF0, 0xBE,  // U../.o..
                            /* 0080 */  0x5F, 0x91, 0x9B, 0x23, 0xAE, 0x4D, 0x3B, 0xF0,  // _..#.M;.
                            /* 0088 */  0x5C, 0x48, 0x0B, 0x09, 0xEF, 0x05, 0x00, 0x00,  // \H......
                            /* 0090 */  0x52, 0x45, 0x50, 0x4F, 0x5D, 0x00, 0x00, 0x00,  // REPO]...
                            /* 0098 */  0x01, 0xDA, 0x8C, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 00A0 */  0x00, 0x00, 0x72, 0x87, 0xCD, 0xFF, 0x6D, 0x24,  // ..r...m$
                            /* 00A8 */  0x47, 0xDB, 0x3D, 0x24, 0x92, 0xB4, 0x16, 0x6F,  // G.=$...o
                            /* 00B0 */  0x45, 0xD8, 0xC3, 0xF5, 0x66, 0x14, 0x9F, 0x22,  // E...f.."
                            /* 00B8 */  0xD7, 0xF7, 0xDE, 0x67, 0x90, 0x9A, 0xA2, 0x0D,  // ...g....
                            /* 00C0 */  0x39, 0x25, 0xAD, 0xC3, 0x1A, 0xAD, 0x52, 0x0B,  // 9%....R.
                            /* 00C8 */  0x75, 0x38, 0xE1, 0xA4, 0x14, 0x41, 0x77, 0xBA,  // u8...Aw.
                            /* 00D0 */  0xAB, 0x05, 0x45, 0xF2, 0xEA, 0xAF, 0x56, 0x00,  // ..E...V.
                            /* 00D8 */  0x24, 0x22, 0x59, 0xF2, 0x73, 0x27, 0x1A, 0x0C,  // $"Y.s'..
                            /* 00E0 */  0x5D, 0xDF, 0x26, 0x09, 0x9D, 0xB1, 0xBE, 0xFD,  // ].&.....
                            /* 00E8 */  0x33, 0x1E, 0xB1, 0x27, 0xA3, 0xB2, 0x25, 0x33,  // 3..'..%3
                            /* 00F0 */  0x27, 0x8B, 0xF9, 0x1E, 0xE6, 0x5D, 0x2F, 0x0E,  // '....]/.
                            /* 00F8 */  0x1F, 0x15, 0xA7, 0x3A, 0xE1, 0x88, 0xEB, 0xA3,  // ...:....
                            /* 0100 */  0x4D, 0x5B, 0xD5, 0xFB, 0xF3, 0xE5, 0x7F, 0x0A,  // M[......
                            /* 0108 */  0x95, 0x85, 0x5D, 0x0B, 0xAC, 0x6F, 0x6C, 0x2A,  // ..]..ol*
                            /* 0110 */  0xC6, 0xED, 0x45, 0x17, 0xD7, 0x85, 0x67, 0x73,  // ..E...gs
                            /* 0118 */  0x81, 0x3F, 0xF1, 0x71, 0xF3, 0x9E, 0xE2, 0xAC,  // .?.q....
                            /* 0120 */  0x36, 0x7C, 0xBE, 0x4D, 0xB9, 0x7B, 0x93, 0x36,  // 6|.M.{.6
                            /* 0128 */  0x91, 0x4D, 0xCB, 0x9D, 0x40, 0x98, 0xE5, 0x00,  // .M..@...
                            /* 0130 */  0x66, 0xF2, 0x29, 0x58, 0x7C, 0xB0, 0x8B, 0xEC,  // f.)X|...
                            /* 0138 */  0x4B, 0x0F, 0xBE, 0x29, 0x11, 0x15, 0x24, 0xAE,  // K..)..$.
                            /* 0140 */  0xA5, 0x44, 0xAA, 0xDB, 0x27, 0x90, 0xC0, 0x2D,  // .D..'..-
                            /* 0148 */  0xC7, 0xDD, 0x98, 0x49, 0x9C, 0xD0, 0xA9, 0xD4,  // ...I....
                            /* 0150 */  0x4C, 0x34, 0xFF, 0x5B, 0xF1, 0xF1, 0x24, 0xB8,  // L4.[..$.
                            /* 0158 */  0x78, 0x91, 0xB8, 0xC9, 0x0E, 0x2E, 0xD2, 0x8E,  // x.......
                            /* 0160 */  0x3C, 0x89, 0x43, 0xE0, 0x91, 0x2B, 0xBE, 0x54,  // <.C..+.T
                            /* 0168 */  0x0F, 0x55, 0x51, 0x93, 0x67, 0xE0, 0x6A, 0xDC,  // .UQ.g.j.
                            /* 0170 */  0x6C, 0x33, 0xF3, 0x14, 0xD4, 0x54, 0x08, 0x37,  // l3...T.7
                            /* 0178 */  0x0E, 0x44, 0xBB, 0xAA, 0x25, 0x6A, 0x34, 0x3D,  // .D..%j4=
                            /* 0180 */  0x9A, 0x24, 0x9D, 0xE1, 0xBF, 0x0F, 0x7E, 0x1B,  // .$....~.
                            /* 0188 */  0x3A, 0x6C, 0xD9, 0x0D, 0xBE, 0x18, 0x51, 0x0E,  // :l....Q.
                            /* 0190 */  0x65, 0x4C, 0xAB, 0x0E, 0xEF, 0x28, 0x55, 0x3D,  // eL...(U=
                            /* 0198 */  0xEB, 0xA5, 0x6E, 0x23, 0xA1, 0x30, 0xF1, 0x60,  // ..n#.0.`
                            /* 01A0 */  0xE4, 0x17, 0x8C, 0x1E, 0xE2, 0xBD, 0x5B, 0x2A,  // ......[*
                            /* 01A8 */  0x89, 0xDF, 0x20, 0x78, 0x56, 0xFB, 0x49, 0x22,  // .. xV.I"
                            /* 01B0 */  0x75, 0xED, 0x41, 0x3A, 0xDC, 0xC8, 0x2D, 0x79,  // u.A:..-y
                            /* 01B8 */  0x10, 0x5B, 0xB9, 0x09, 0xA2, 0xF1, 0x56, 0x8B,  // .[....V.
                            /* 01C0 */  0xCD, 0x60, 0x1F, 0x05, 0x22, 0x60, 0x53, 0x75,  // .`.."`Su
                            /* 01C8 */  0x05, 0x0F, 0xA0, 0xFA, 0xEC, 0x4D, 0x8B, 0xB1,  // .....M..
                            /* 01D0 */  0xD6, 0xFC, 0x73, 0xC8, 0x1D, 0x14, 0x39, 0x94,  // ..s...9.
                            /* 01D8 */  0x16, 0x66, 0x15, 0xA9, 0xDC, 0x50, 0x4E, 0x66,  // .f...PNf
                            /* 01E0 */  0x89, 0x64, 0x1F, 0xCB, 0xA7, 0x16, 0x61, 0x74,  // .d....at
                            /* 01E8 */  0x72, 0x85, 0xB5, 0xF2, 0x22, 0x99, 0xBD, 0xA7,  // r..."...
                            /* 01F0 */  0x3B, 0x75, 0x78, 0xE3, 0x28, 0xDC, 0x70, 0x6C,  // ;ux.(.pl
                            /* 01F8 */  0x4A, 0x7F, 0x2A, 0x18, 0x71, 0x6E, 0x33, 0x24,  // J.*.qn3$
                            /* 0200 */  0x52, 0x1B, 0x46, 0x93, 0xF5, 0xF5, 0x63, 0xED,  // R.F...c.
                            /* 0208 */  0xD8, 0xE0, 0x11, 0x4B, 0xD5, 0x46, 0x4E, 0x49,  // ...K.FNI
                            /* 0210 */  0xBC, 0x44, 0x5C, 0xB3, 0xB9, 0x48, 0x2D, 0x81,  // .D\..H-.
                            /* 0218 */  0xAC, 0xF5, 0x4F, 0x19, 0xBA, 0x5E, 0x97, 0x8A,  // ..O..^..
                            /* 0220 */  0xFD, 0x5C, 0x5E, 0xA4, 0xBE, 0x6A, 0xE7, 0x81,  // .\^..j..
                            /* 0228 */  0x9F, 0xF8, 0xE2, 0xAD, 0xD0, 0x23, 0x40, 0x5D,  // .....#@]
                            /* 0230 */  0xBF, 0x9C, 0x36, 0x2D, 0xE3, 0xEC, 0x22, 0x00,  // ..6-..".
                            /* 0238 */  0x35, 0x29, 0x36, 0xF6, 0x82, 0x0C, 0x59, 0x40,  // 5)6...Y@
                            /* 0240 */  0x88, 0xDE, 0x58, 0x4E, 0xA4, 0xB9, 0xA4, 0x1C,  // ..XN....
                            /* 0248 */  0xAF, 0xB0, 0x3E, 0x6E, 0x29, 0x30, 0x86, 0xAF,  // ..>n)0..
                            /* 0250 */  0x97, 0x95, 0x21, 0x88, 0x9C, 0x3A, 0xB8, 0xE1,  // ..!..:..
                            /* 0258 */  0x69, 0xC7, 0x33, 0xE4, 0x63, 0x54, 0x5F, 0x31,  // i.3.cT_1
                            /* 0260 */  0x13, 0x4A, 0x06, 0xB0, 0x18, 0x0D, 0x01, 0xE9,  // .J......
                            /* 0268 */  0x34, 0x72, 0x23, 0x59, 0x38, 0x9C, 0x65, 0x12,  // 4r#Y8.e.
                            /* 0270 */  0x0A, 0x1A, 0x31, 0xE3, 0xDA, 0x14, 0xFA, 0xBB,  // ..1.....
                            /* 0278 */  0x9B, 0x5D, 0xD2, 0x1A, 0x46, 0x04, 0x5C, 0x05,  // .]..F.\.
                            /* 0280 */  0xA1, 0xB7, 0xE9, 0x09, 0xE9, 0xCD, 0xD5, 0x8A,  // ........
                            /* 0288 */  0xEF, 0x6B, 0x4E, 0xCA, 0x51, 0x19, 0x4B, 0x93,  // .kN.Q.K.
                            /* 0290 */  0xF0, 0x11, 0x67, 0xAE, 0x97, 0xEC, 0xF2, 0xA3,  // ..g.....
                            /* 0298 */  0xBF, 0xA7, 0x76, 0x3D, 0xE7, 0x24, 0x9F, 0xAE,  // ..v=.$..
                            /* 02A0 */  0x18, 0x2F, 0xA6, 0xE8, 0x1E, 0x0C, 0x10, 0xC3,  // ./......
                            /* 02A8 */  0x29, 0x66, 0x40, 0xC0, 0xA2, 0x19, 0xBD, 0x94,  // )f@.....
                            /* 02B0 */  0x80, 0x19, 0x5E, 0xF1, 0x21, 0x3B, 0xB6, 0x21,  // ..^.!;.!
                            /* 02B8 */  0x94, 0x9A, 0x88, 0xD2, 0x6F, 0x79, 0x91, 0x3E,  // ....oy.>
                            /* 02C0 */  0x81, 0x8C, 0x9E, 0x11, 0x92, 0x32, 0x08, 0x63,  // .....2.c
                            /* 02C8 */  0x8D, 0xD4, 0xAB, 0x61, 0x5C, 0x64, 0xE6, 0xAC,  // ...a\d..
                            /* 02D0 */  0x78, 0xCE, 0x4E, 0x1F, 0x60, 0xC6, 0x23, 0xAE,  // x.N.`.#.
                            /* 02D8 */  0x7E, 0x8B, 0x12, 0xE0, 0xBE, 0x63, 0xC7, 0x2A,  // ~....c.*
                            /* 02E0 */  0x0A, 0x44, 0xDD, 0xBE, 0x5A, 0x69, 0xD2, 0x36,  // .D..Zi.6
                            /* 02E8 */  0x49, 0x00, 0xCF, 0x5C, 0x4F, 0x3A, 0x45, 0xCA,  // I..\O:E.
                            /* 02F0 */  0xD8, 0x57, 0x4B, 0x83, 0xB8, 0x58, 0xA1, 0x16,  // .WK..X..
                            /* 02F8 */  0xD3, 0xA8, 0x70, 0x5D, 0x09, 0x97, 0x20, 0x15,  // ..p].. .
                            /* 0300 */  0xC9, 0x2E, 0x6E, 0xA7, 0x76, 0x28, 0x1F, 0x52,  // ..n.v(.R
                            /* 0308 */  0x6B, 0xCA, 0x04, 0xCB, 0x8E, 0x33, 0x96, 0x39,  // k....3.9
                            /* 0310 */  0xA0, 0xE8, 0xC6, 0x59, 0x98, 0xC5, 0x1C, 0x70,  // ...Y...p
                            /* 0318 */  0xEB, 0x45, 0xA7, 0x25, 0xB7, 0xD2, 0x62, 0x05,  // .E.%..b.
                            /* 0320 */  0x15, 0xE4, 0x1F, 0x44, 0x36, 0x27, 0x44, 0xBE,  // ...D6'D.
                            /* 0328 */  0xD1, 0xC3, 0x9B, 0x20, 0xB3, 0x85, 0xE7, 0xA0,  // ... ....
                            /* 0330 */  0x33, 0x56, 0xC4, 0x9A, 0x3F, 0xF0, 0x19, 0xCA,  // 3V..?...
                            /* 0338 */  0x80, 0x6C, 0x5A, 0xF7, 0x43, 0x73, 0xDB, 0x9E,  // .lZ.Cs..
                            /* 0340 */  0xDC, 0x27, 0x05, 0x22, 0x13, 0x96, 0x24, 0xBE,  // .'."..$.
                            /* 0348 */  0x66, 0xFA, 0xAF, 0x0E, 0x6E, 0x8B, 0x9F, 0x89,  // f...n...
                            /* 0350 */  0x08, 0x4E, 0x4C, 0xC3, 0x97, 0x12, 0x71, 0x92,  // .NL...q.
                            /* 0358 */  0x03, 0xE9, 0x7E, 0x30, 0x2C, 0xBB, 0x5A, 0x3B,  // ..~0,.Z;
                            /* 0360 */  0x4A, 0x12, 0x3D, 0x0B, 0xC3, 0xA8, 0xDF, 0xFC,  // J.=.....
                            /* 0368 */  0x0A, 0x23, 0x62, 0xFC, 0x72, 0x68, 0xD3, 0xB5,  // .#b.rh..
                            /* 0370 */  0x73, 0x4E, 0xBC, 0xC4, 0x48, 0x3C, 0x82, 0x41,  // sN..H<.A
                            /* 0378 */  0xE1, 0xA8, 0x39, 0x6C, 0x72, 0x9D, 0x24, 0xD2,  // ..9lr.$.
                            /* 0380 */  0x33, 0xE3, 0x4D, 0x73, 0xDD, 0x5E, 0x96, 0x64,  // 3.Ms.^.d
                            /* 0388 */  0xB6, 0xAE, 0xC8, 0x67, 0xE1, 0xE4, 0x51, 0xD2,  // ...g..Q.
                            /* 0390 */  0xAB, 0x88, 0x08, 0xC3, 0x8B, 0x74, 0xA9, 0x4C,  // .....t.L
                            /* 0398 */  0x43, 0xF3, 0x60, 0xFC, 0x78, 0x03, 0x70, 0x52,  // C.`.x.pR
                            /* 03A0 */  0x2E, 0xF1, 0x97, 0x3A, 0x4E, 0x85, 0xE2, 0xA0,  // ...:N...
                            /* 03A8 */  0x12, 0xDE, 0x15, 0x9D, 0x2A, 0x8A, 0xA9, 0xAD,  // ....*...
                            /* 03B0 */  0xF6, 0x08, 0x83, 0xC9, 0x3E, 0xA3, 0xE9, 0xF6,  // ....>...
                            /* 03B8 */  0x69, 0xFD, 0x64, 0x1D, 0x25, 0xF9, 0x9E, 0x33,  // i.d.%..3
                            /* 03C0 */  0x00, 0xEB, 0x29, 0x53, 0x67, 0x2E, 0x6C, 0x43,  // ..)Sg.lC
                            /* 03C8 */  0x9D, 0xE6, 0xC3, 0x60, 0xAA, 0x16, 0xCE, 0x0C,  // ...`....
                            /* 03D0 */  0x69, 0x23, 0x58, 0x56, 0x9B, 0x45, 0x9F, 0x06,  // i#XV.E..
                            /* 03D8 */  0xCA, 0xB9, 0xD2, 0x5F, 0xE2, 0xAA, 0xDD, 0x32,  // ..._...2
                            /* 03E0 */  0x0C, 0x64, 0xB3, 0x06, 0xB2, 0x94, 0xE4, 0x27,  // .d.....'
                            /* 03E8 */  0x30, 0xC5, 0xCE, 0x67, 0x33, 0x50, 0x51, 0xD4,  // 0..g3PQ.
                            /* 03F0 */  0x14, 0x27, 0x61, 0xED, 0x77, 0x03, 0x2C, 0x8D,  // .'a.w.,.
                            /* 03F8 */  0xF1, 0xA9, 0x2E, 0xAF, 0x75, 0x82, 0x35, 0x9E,  // ....u.5.
                            /* 0400 */  0x2F, 0xDC, 0x0D, 0x01, 0x6E, 0x72, 0x1E, 0x97,  // /...nr..
                            /* 0408 */  0xDF, 0x98, 0xC2, 0x73, 0x59, 0x73, 0xEE, 0x17,  // ...sYs..
                            /* 0410 */  0x78, 0x46, 0x64, 0x19, 0x72, 0x2E, 0xAA, 0x99,  // xFd.r...
                            /* 0418 */  0x7C, 0x40, 0x71, 0x6C, 0x94, 0xD8, 0x4C, 0xA0,  // |@ql..L.
                            /* 0420 */  0x37, 0x22, 0x10, 0x2C, 0xBE, 0xED, 0xFE, 0xF0,  // 7".,....
                            /* 0428 */  0x94, 0xAD, 0xEC, 0xD7, 0xB6, 0xE9, 0x1F, 0xA3,  // ........
                            /* 0430 */  0x27, 0xF0, 0x36, 0x99, 0xA6, 0x54, 0x1C, 0xB5,  // '.6..T..
                            /* 0438 */  0x34, 0x08, 0xB2, 0x03, 0x32, 0x51, 0x4A, 0xC3,  // 4...2QJ.
                            /* 0440 */  0x47, 0xD4, 0x19, 0x75, 0xBD, 0xA4, 0xBF, 0x5E,  // G..u...^
                            /* 0448 */  0x8B, 0xE3, 0xAF, 0x45, 0x07, 0xCA, 0x0D, 0x49,  // ...E...I
                            /* 0450 */  0xFD, 0xF4, 0xF6, 0x96, 0x2F, 0x9A, 0xFB, 0x75,  // ..../..u
                            /* 0458 */  0xC2, 0x68, 0x2C, 0xAF, 0xB5, 0x18, 0x2C, 0x07,  // .h,...,.
                            /* 0460 */  0x1D, 0x1C, 0x10, 0x51, 0x25, 0xD7, 0x92, 0x0F,  // ...Q%...
                            /* 0468 */  0x68, 0xE3, 0xA2, 0xC3, 0x1F, 0xFF, 0x1D, 0xCA,  // h.......
                            /* 0470 */  0x07, 0xAE, 0xC8, 0x1C, 0xE8, 0xCB, 0x4B, 0x90,  // ......K.
                            /* 0478 */  0x6B, 0xED, 0xF9, 0x5C, 0x2B, 0x96, 0x16, 0xB1,  // k..\+...
                            /* 0480 */  0xD3, 0x77, 0x8C, 0xDF, 0xEB, 0xDC, 0x2F, 0x33,  // .w..../3
                            /* 0488 */  0x00, 0xF4, 0xE8, 0x2F, 0x5A, 0x44, 0xED, 0x20,  // .../ZD. 
                            /* 0490 */  0x20, 0x62, 0x69, 0x0B, 0x37, 0x24, 0xEF, 0x2B,  //  bi.7$.+
                            /* 0498 */  0x39, 0xF3, 0xDF, 0x40, 0xD5, 0x5F, 0xC1, 0xAC,  // 9..@._..
                            /* 04A0 */  0x2A, 0x24, 0x5B, 0x5E, 0x78, 0xF1, 0x23, 0x81,  // *$[^x.#.
                            /* 04A8 */  0x55, 0xB1, 0x9F, 0xD6, 0x2A, 0xDE, 0x0D, 0xE2,  // U...*...
                            /* 04B0 */  0xAC, 0x54, 0xCE, 0xF8, 0x1C, 0x1D, 0x18, 0x76,  // .T.....v
                            /* 04B8 */  0xEE, 0x8D, 0xB1, 0xB9, 0x6D, 0x55, 0x21, 0x55,  // ....mU!U
                            /* 04C0 */  0x0F, 0x0E, 0x1A, 0x8D, 0x12, 0x3B, 0x0A, 0xD6,  // .....;..
                            /* 04C8 */  0x62, 0xE4, 0x56, 0x65, 0x95, 0xF8, 0x1B, 0xB6,  // b.Ve....
                            /* 04D0 */  0x58, 0x8A, 0xC8, 0xE2, 0xE4, 0x7B, 0x98, 0x10,  // X....{..
                            /* 04D8 */  0xE0, 0x8B, 0x38, 0x71, 0x53, 0x29, 0xDF, 0x79,  // ..8qS).y
                            /* 04E0 */  0xC3, 0x48, 0xF1, 0x16, 0x95, 0xCD, 0xE0, 0xFF,  // .H......
                            /* 04E8 */  0x56, 0x37, 0xEB, 0x18, 0x19, 0xBD, 0x9E, 0xFD,  // V7......
                            /* 04F0 */  0x4A, 0x6C, 0x1B, 0xE5, 0x5D, 0xFC, 0x09, 0xF8,  // Jl..]...
                            /* 04F8 */  0x97, 0x58, 0x4A, 0xFD, 0x86, 0xF2, 0xE9, 0xB4,  // .XJ.....
                            /* 0500 */  0x42, 0xE5, 0x1B, 0xCC, 0xA2, 0x83, 0x7A, 0xF3,  // B.....z.
                            /* 0508 */  0xCB, 0x11, 0x1F, 0x5C, 0x1C, 0xA9, 0xE3, 0xA5,  // ...\....
                            /* 0510 */  0xE9, 0x55, 0xBA, 0xD6, 0xC5, 0x17, 0xF3, 0x9B,  // .U......
                            /* 0518 */  0x64, 0xDF, 0x35, 0x26, 0xDC, 0x35, 0x12, 0xB4,  // d.5&.5..
                            /* 0520 */  0xC4, 0x5E, 0x09, 0xBA, 0x61, 0x6E, 0x78, 0xF7,  // .^..anx.
                            /* 0528 */  0x5F, 0x37, 0x31, 0xA6, 0x35, 0x71, 0xD6, 0x0D,  // _71.5q..
                            /* 0530 */  0x2C, 0x65, 0x2C, 0xF8, 0x40, 0xD1, 0x7E, 0x81,  // ,e,.@.~.
                            /* 0538 */  0x60, 0xFF, 0x72, 0x56, 0xEE, 0x24, 0x17, 0x32,  // `.rV.$.2
                            /* 0540 */  0xC5, 0x80, 0x75, 0x6E, 0x1D, 0x57, 0x09, 0x3A,  // ..un.W.:
                            /* 0548 */  0x6E, 0x0E, 0x7D, 0xEE, 0x12, 0x14, 0xB8, 0x6C,  // n.}....l
                            /* 0550 */  0xE2, 0x8C, 0x17, 0x9C, 0x2E, 0x40, 0x8F, 0x1F,  // .....@..
                            /* 0558 */  0xB0, 0xFE, 0x7D, 0xB3, 0xA5, 0xDD, 0x32, 0x93,  // ..}...2.
                            /* 0560 */  0xB1, 0x8D, 0x6B, 0x58, 0x53, 0x5A, 0x84, 0xA1,  // ..kXSZ..
                            /* 0568 */  0xEF, 0x7B, 0x7C, 0x2B, 0xDF, 0x36, 0x9A, 0x8A,  // .{|+.6..
                            /* 0570 */  0x27, 0xFD, 0x1F, 0x05, 0x89, 0x48, 0xCA, 0x70,  // '....H.p
                            /* 0578 */  0x91, 0xEE, 0xFC, 0x87, 0xF7, 0xCF, 0xA9, 0xFC,  // ........
                            /* 0580 */  0x43, 0x4A, 0x69, 0xB4, 0xDF, 0xF0, 0xC9, 0x02,  // CJi.....
                            /* 0588 */  0xC8, 0xC2, 0x1D, 0x6D, 0xE9, 0x30, 0xC6, 0xB0,  // ...m.0..
                            /* 0590 */  0xD3, 0x7D, 0x5F, 0x2F, 0x71, 0x93, 0x2C, 0xAA,  // .}_/q.,.
                            /* 0598 */  0x05, 0x00, 0x41, 0xD3, 0x59, 0x70, 0x34, 0xB1,  // ..A.Yp4.
                            /* 05A0 */  0xFB, 0x94, 0xB5, 0xEE, 0x72, 0x15, 0xD4, 0xF0,  // ....r...
                            /* 05A8 */  0x10, 0x96, 0xF0, 0xC9, 0x81, 0x5D, 0x17, 0x01,  // .....]..
                            /* 05B0 */  0x88, 0xC7, 0x46, 0xF4, 0x80, 0xF7, 0x19, 0x4D,  // ..F....M
                            /* 05B8 */  0x23, 0x9F, 0xEA, 0x0C, 0x59, 0x86, 0xD3, 0xEA,  // #...Y...
                            /* 05C0 */  0xD8, 0x0D, 0x63, 0x73, 0xD3, 0xBA, 0x67, 0x5C,  // ..cs..g\
                            /* 05C8 */  0x63, 0x53, 0x0B, 0x10, 0x92, 0x94, 0x09, 0xFD,  // cS......
                            /* 05D0 */  0x75, 0xB1, 0xC4, 0xF0, 0x24, 0xC6, 0x81, 0xFC,  // u...$...
                            /* 05D8 */  0xBE, 0x40, 0xBB, 0xA9, 0x95, 0xFD, 0x54, 0xAC,  // .@....T.
                            /* 05E0 */  0x61, 0x41, 0x28, 0x3A, 0x1A, 0x0A, 0xB1, 0x54,  // aA(:...T
                            /* 05E8 */  0x7E, 0x60, 0x4E, 0xEA, 0xC5, 0xE3, 0x2D, 0x44,  // ~`N...-D
                            /* 05F0 */  0x10, 0x1B, 0xBE, 0xF1, 0xE8, 0xB9, 0x9D, 0x6C,  // .......l
                            /* 05F8 */  0x36, 0xA8, 0xF2, 0x99, 0x8B, 0xBA, 0x85, 0xAF,  // 6.......
                            /* 0600 */  0x0B, 0xCF, 0x9B, 0x31, 0x6B, 0xF6, 0xB8, 0x11,  // ...1k...
                            /* 0608 */  0xFB, 0xC1, 0xAD, 0xD4, 0x4A, 0x9F, 0x6C, 0x31,  // ....J.l1
                            /* 0610 */  0x7C, 0xD7, 0x88, 0x81, 0x75, 0xF7, 0x3B, 0xA1,  // |...u.;.
                            /* 0618 */  0x70, 0xD7, 0x1D, 0x88, 0xF5, 0xF0, 0xD6, 0x96,  // p.......
                            /* 0620 */  0xCD, 0x9B, 0xA9, 0xFE, 0xB9, 0xAD, 0x3A, 0x38,  // ......:8
                            /* 0628 */  0xB6, 0x6C, 0x36, 0xE4, 0xEE, 0x71, 0x9D, 0x6D,  // .l6..q.m
                            /* 0630 */  0x3B, 0xF1, 0xD5, 0x97, 0x07, 0xD4, 0x5B, 0xE0,  // ;.....[.
                            /* 0638 */  0x93, 0x41, 0x24, 0x23, 0x06, 0x1F, 0x78, 0x71,  // .A$#..xq
                            /* 0640 */  0x0A, 0x31, 0x34, 0xC2, 0x3A, 0x78, 0xBC, 0x6F,  // .14.:x.o
                            /* 0648 */  0x59, 0xC3, 0xF5, 0x87, 0xFB, 0xE4, 0xAC, 0x93,  // Y.......
                            /* 0650 */  0x1E, 0xDE, 0x5B, 0x0A, 0x67, 0xF0, 0x68, 0x30,  // ..[.g.h0
                            /* 0658 */  0xE0, 0x5D, 0x2F, 0x50, 0xC5, 0xF2, 0xF9, 0x09,  // .]/P....
                            /* 0660 */  0x68, 0x61, 0x35, 0xAF, 0x34, 0x2F, 0x89, 0x71,  // ha5.4/.q
                            /* 0668 */  0x76, 0xAA, 0xAB, 0xBB, 0xC6, 0xA2, 0x3C, 0x70,  // v.....<p
                            /* 0670 */  0xEC, 0xD7, 0x0D, 0xC0, 0xDC, 0x50, 0x3D, 0x65,  // .....P=e
                            /* 0678 */  0x4E, 0xAD, 0x86, 0xC7, 0xD1, 0x7E, 0x6B, 0x51,  // N....~kQ
                            /* 0680 */  0xF8, 0xC3, 0x00                                 // ...
                        }
                    })
                }
            }
            ElseIf ((MCSK == One))
            {
                If ((GTYP == 0x02))
                {
                    Return (Package (0x01)
                    {
                        Buffer (0x060B)
                        {
                            /* 0000 */  0xE5, 0x1F, 0x94, 0x00, 0x00, 0x00, 0x00, 0x02,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x40, 0x67, 0x64, 0x64, 0x76,  // ...@gddv
                            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x4F, 0x45, 0x4D, 0x20,  // ....OEM 
                            /* 0030 */  0x45, 0x78, 0x70, 0x6F, 0x72, 0x74, 0x65, 0x64,  // Exported
                            /* 0038 */  0x20, 0x44, 0x61, 0x74, 0x61, 0x56, 0x61, 0x75,  //  DataVau
                            /* 0040 */  0x6C, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // lt......
                            /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0068 */  0x00, 0x00, 0x00, 0x00, 0x27, 0xB0, 0x0E, 0x21,  // ....'..!
                            /* 0070 */  0xF0, 0x88, 0x17, 0xEC, 0xE8, 0xEE, 0xA2, 0x74,  // .......t
                            /* 0078 */  0x5D, 0xA0, 0x16, 0x3B, 0x99, 0x62, 0xA2, 0x5A,  // ]..;.b.Z
                            /* 0080 */  0xEA, 0x62, 0x34, 0x0E, 0x44, 0x7D, 0x30, 0xE4,  // .b4.D}0.
                            /* 0088 */  0x51, 0xEA, 0xA7, 0x8F, 0x77, 0x05, 0x00, 0x00,  // Q...w...
                            /* 0090 */  0x52, 0x45, 0x50, 0x4F, 0x5D, 0x00, 0x00, 0x00,  // REPO]...
                            /* 0098 */  0x01, 0x76, 0x77, 0x00, 0x00, 0x00, 0x00, 0x00,  // .vw.....
                            /* 00A0 */  0x00, 0x00, 0x72, 0x87, 0xCD, 0xFF, 0x6D, 0x24,  // ..r...m$
                            /* 00A8 */  0x47, 0xDB, 0x3D, 0x24, 0x92, 0xB4, 0x16, 0x6F,  // G.=$...o
                            /* 00B0 */  0x45, 0xD8, 0xC3, 0xF5, 0x66, 0x14, 0x9F, 0x22,  // E...f.."
                            /* 00B8 */  0xD7, 0xF7, 0xDE, 0x67, 0x90, 0x9A, 0xA2, 0x0D,  // ...g....
                            /* 00C0 */  0x39, 0x25, 0xAD, 0xC3, 0x1A, 0xAD, 0x52, 0x0B,  // 9%....R.
                            /* 00C8 */  0x75, 0x38, 0xE1, 0xA4, 0x14, 0x41, 0x17, 0x48,  // u8...A.H
                            /* 00D0 */  0x4B, 0x59, 0xB3, 0x05, 0xB2, 0xBF, 0xE8, 0xD9,  // KY......
                            /* 00D8 */  0x49, 0x03, 0x98, 0x79, 0x67, 0x99, 0x4F, 0x5D,  // I..yg.O]
                            /* 00E0 */  0xE4, 0x06, 0x75, 0x47, 0x82, 0x7D, 0xB6, 0x99,  // ..uG.}..
                            /* 00E8 */  0x52, 0xE2, 0x81, 0x05, 0x17, 0x37, 0x7C, 0x46,  // R....7|F
                            /* 00F0 */  0xBF, 0xF3, 0x96, 0x94, 0x19, 0x6C, 0x3D, 0x54,  // .....l=T
                            /* 00F8 */  0xF5, 0x7B, 0x4A, 0xF7, 0x1D, 0xD9, 0x0C, 0xA1,  // .{J.....
                            /* 0100 */  0x82, 0x85, 0xA2, 0xEA, 0xCA, 0x86, 0x68, 0x14,  // ......h.
                            /* 0108 */  0xBA, 0xB2, 0x61, 0x81, 0x89, 0x37, 0xFA, 0x0B,  // ..a..7..
                            /* 0110 */  0x3F, 0xE3, 0xB4, 0x62, 0xF9, 0x44, 0xC9, 0x4A,  // ?..b.D.J
                            /* 0118 */  0xE4, 0x95, 0xE3, 0x15, 0x0E, 0x72, 0x3E, 0xB1,  // .....r>.
                            /* 0120 */  0xE6, 0x49, 0xF3, 0xC3, 0x37, 0x18, 0x3F, 0xB0,  // .I..7.?.
                            /* 0128 */  0x61, 0x0A, 0x32, 0x32, 0x16, 0xA0, 0xC7, 0x59,  // a.22...Y
                            /* 0130 */  0xCD, 0x29, 0xF6, 0x58, 0xBB, 0xEB, 0xA5, 0x72,  // .).X...r
                            /* 0138 */  0xA2, 0x44, 0x5A, 0x1B, 0xD4, 0x44, 0x55, 0xF2,  // .DZ..DU.
                            /* 0140 */  0xCE, 0x76, 0x09, 0x1E, 0x91, 0xA0, 0x7B, 0x5E,  // .v....{^
                            /* 0148 */  0x71, 0x38, 0x38, 0x73, 0x64, 0x93, 0x04, 0xBF,  // q88sd...
                            /* 0150 */  0x0A, 0x10, 0x2E, 0xD7, 0x0F, 0x35, 0xBE, 0xE8,  // .....5..
                            /* 0158 */  0x77, 0x52, 0x63, 0x02, 0x43, 0x38, 0xED, 0x72,  // wRc.C8.r
                            /* 0160 */  0xEC, 0xD9, 0x56, 0x60, 0x2C, 0x81, 0x5F, 0x1F,  // ..V`,._.
                            /* 0168 */  0xA2, 0x26, 0x92, 0xA3, 0x52, 0xB9, 0x95, 0x4C,  // .&..R..L
                            /* 0170 */  0x38, 0xEE, 0x8D, 0x4C, 0x3D, 0x60, 0x7B, 0x56,  // 8..L=`{V
                            /* 0178 */  0x26, 0x3A, 0x7D, 0xE8, 0x8B, 0x1D, 0x73, 0x3E,  // &:}...s>
                            /* 0180 */  0xFF, 0x3D, 0xE9, 0x00, 0xD7, 0x50, 0xCB, 0xA5,  // .=...P..
                            /* 0188 */  0x4F, 0x35, 0x43, 0xB0, 0xD3, 0x6E, 0xF8, 0x59,  // O5C..n.Y
                            /* 0190 */  0xC5, 0x56, 0x85, 0xDF, 0xF7, 0xB8, 0xF4, 0x00,  // .V......
                            /* 0198 */  0xC5, 0x96, 0x2E, 0x63, 0xB5, 0x95, 0xFC, 0xBC,  // ...c....
                            /* 01A0 */  0x8B, 0x87, 0x1B, 0x12, 0xBE, 0xA3, 0x62, 0x59,  // ......bY
                            /* 01A8 */  0xF8, 0xEE, 0x68, 0x42, 0x23, 0x98, 0x1C, 0x7C,  // ..hB#..|
                            /* 01B0 */  0x46, 0x0A, 0x12, 0x74, 0x5F, 0x85, 0x86, 0x86,  // F..t_...
                            /* 01B8 */  0xE3, 0xE7, 0xF1, 0x9D, 0x33, 0x50, 0x94, 0x0C,  // ....3P..
                            /* 01C0 */  0x42, 0x2C, 0xAE, 0x3B, 0x42, 0x12, 0x97, 0xA8,  // B,.;B...
                            /* 01C8 */  0x2B, 0xA4, 0x14, 0xC1, 0x31, 0x73, 0xF3, 0x5B,  // +...1s.[
                            /* 01D0 */  0xD0, 0xE0, 0x10, 0xF7, 0xB9, 0x38, 0xAC, 0x07,  // .....8..
                            /* 01D8 */  0xD0, 0x1B, 0x39, 0xBA, 0xAC, 0x99, 0x48, 0x57,  // ..9...HW
                            /* 01E0 */  0x78, 0xD8, 0x3C, 0xA2, 0xB4, 0x7E, 0xB0, 0x2E,  // x.<..~..
                            /* 01E8 */  0xDD, 0x51, 0x40, 0x11, 0x4E, 0x85, 0x8A, 0x97,  // .Q@.N...
                            /* 01F0 */  0x64, 0xDD, 0xBD, 0xB5, 0x79, 0xDF, 0x41, 0xF7,  // d...y.A.
                            /* 01F8 */  0xE7, 0x7D, 0xFF, 0xC4, 0x5A, 0xC4, 0x11, 0x20,  // .}..Z.. 
                            /* 0200 */  0x1F, 0xB4, 0xF8, 0xEC, 0xA5, 0xD1, 0xA8, 0x52,  // .......R
                            /* 0208 */  0x99, 0x03, 0x73, 0xE2, 0x9E, 0x80, 0xD7, 0x7A,  // ..s....z
                            /* 0210 */  0x41, 0xAC, 0x21, 0x35, 0x3B, 0x93, 0x5C, 0x56,  // A.!5;.\V
                            /* 0218 */  0x5E, 0x74, 0x2C, 0x16, 0xEF, 0xCB, 0x9E, 0x32,  // ^t,....2
                            /* 0220 */  0xD7, 0xEF, 0xB7, 0x62, 0x53, 0x26, 0xA2, 0xEC,  // ...bS&..
                            /* 0228 */  0x49, 0x5F, 0x8A, 0x8E, 0x43, 0x9C, 0x51, 0x04,  // I_..C.Q.
                            /* 0230 */  0x56, 0xA2, 0x84, 0xD8, 0x56, 0x10, 0xF6, 0x28,  // V...V..(
                            /* 0238 */  0xD4, 0x25, 0xEF, 0x92, 0xD6, 0x0A, 0xF4, 0x21,  // .%.....!
                            /* 0240 */  0xB3, 0x0C, 0x71, 0xA8, 0x77, 0x9B, 0xC0, 0x0F,  // ..q.w...
                            /* 0248 */  0x67, 0x7C, 0x67, 0x02, 0xC4, 0xDD, 0x7A, 0x2C,  // g|g...z,
                            /* 0250 */  0xC5, 0x46, 0x67, 0x40, 0xF7, 0x00, 0x52, 0x07,  // .Fg@..R.
                            /* 0258 */  0xC1, 0x0A, 0xEB, 0x94, 0xB5, 0x18, 0x55, 0xE4,  // ......U.
                            /* 0260 */  0xE4, 0x15, 0xA5, 0x04, 0x3A, 0x5E, 0x8E, 0xE7,  // ....:^..
                            /* 0268 */  0x51, 0x53, 0x0F, 0xC6, 0x7B, 0x7B, 0x95, 0x9C,  // QS..{{..
                            /* 0270 */  0x46, 0xE9, 0xBD, 0x05, 0x03, 0x10, 0x70, 0xE8,  // F.....p.
                            /* 0278 */  0x6D, 0xB9, 0xA3, 0xC9, 0xC5, 0x44, 0x7D, 0x70,  // m....D}p
                            /* 0280 */  0x86, 0xDA, 0xDD, 0x4A, 0x39, 0xDE, 0x76, 0xC7,  // ...J9.v.
                            /* 0288 */  0x31, 0x68, 0x9F, 0x4E, 0x78, 0x0D, 0x24, 0x32,  // 1h.Nx.$2
                            /* 0290 */  0xD3, 0x26, 0x32, 0x20, 0x40, 0xC4, 0x6D, 0x67,  // .&2 @.mg
                            /* 0298 */  0x1A, 0xE7, 0x6E, 0x06, 0x85, 0x53, 0xA7, 0x71,  // ..n..S.q
                            /* 02A0 */  0xBB, 0xDA, 0x08, 0xD1, 0x1E, 0xD5, 0xB6, 0x9D,  // ........
                            /* 02A8 */  0x6B, 0x8F, 0xB0, 0x6F, 0xC1, 0x6B, 0xB5, 0xF9,  // k..o.k..
                            /* 02B0 */  0xB2, 0x0E, 0xB5, 0xCF, 0x78, 0x97, 0x75, 0x36,  // ....x.u6
                            /* 02B8 */  0x15, 0x31, 0x87, 0x5C, 0x68, 0x46, 0x5A, 0xFA,  // .1.\hFZ.
                            /* 02C0 */  0x10, 0x91, 0x1F, 0x2A, 0x23, 0x4B, 0x30, 0x26,  // ...*#K0&
                            /* 02C8 */  0xB3, 0x75, 0x95, 0xF1, 0xD3, 0x51, 0xCA, 0x7E,  // .u...Q.~
                            /* 02D0 */  0xF3, 0xF8, 0xFF, 0xEF, 0xF9, 0x66, 0xD4, 0x8E,  // .....f..
                            /* 02D8 */  0x40, 0x49, 0xFA, 0xEA, 0x00, 0x7F, 0x39, 0x8F,  // @I....9.
                            /* 02E0 */  0x69, 0x1E, 0x89, 0x96, 0x67, 0xD7, 0xBA, 0x72,  // i...g..r
                            /* 02E8 */  0x82, 0x9C, 0x28, 0xAC, 0x57, 0x0E, 0x9F, 0x86,  // ..(.W...
                            /* 02F0 */  0x2F, 0x27, 0xF4, 0x1D, 0x3D, 0x76, 0x21, 0x5D,  // /'..=v!]
                            /* 02F8 */  0x1B, 0xF3, 0xDB, 0x42, 0x45, 0x88, 0x24, 0xA4,  // ...BE.$.
                            /* 0300 */  0xF4, 0x40, 0xBD, 0x07, 0x9A, 0xDC, 0xFE, 0x1B,  // .@......
                            /* 0308 */  0x57, 0x47, 0x5D, 0xEE, 0x01, 0x17, 0xF7, 0x1E,  // WG].....
                            /* 0310 */  0xA5, 0x0F, 0x36, 0x30, 0x9A, 0x1D, 0x87, 0x99,  // ..60....
                            /* 0318 */  0x78, 0x28, 0x93, 0x56, 0x80, 0x9F, 0x5C, 0x2D,  // x(.V..\-
                            /* 0320 */  0x74, 0x8B, 0x77, 0x1E, 0x6B, 0xAE, 0x76, 0xCB,  // t.w.k.v.
                            /* 0328 */  0x98, 0xD7, 0xE6, 0x45, 0xBA, 0x38, 0x60, 0xBD,  // ...E.8`.
                            /* 0330 */  0x5F, 0xA9, 0xC6, 0xAB, 0x4F, 0x33, 0xF1, 0x97,  // _...O3..
                            /* 0338 */  0x7F, 0x69, 0x0E, 0x5E, 0x24, 0x9F, 0x5E, 0x32,  // .i.^$.^2
                            /* 0340 */  0x15, 0x12, 0xB3, 0x82, 0x0D, 0xA5, 0x0C, 0xCA,  // ........
                            /* 0348 */  0x66, 0x29, 0xA3, 0xFF, 0x39, 0x23, 0x4D, 0x1A,  // f)..9#M.
                            /* 0350 */  0x77, 0xCF, 0x73, 0x1F, 0x7C, 0xAA, 0xC5, 0xDB,  // w.s.|...
                            /* 0358 */  0xCE, 0xD0, 0x0F, 0x51, 0xEB, 0xFE, 0x8E, 0x8E,  // ...Q....
                            /* 0360 */  0xF3, 0x92, 0x8F, 0x1E, 0x50, 0xB3, 0xC8, 0x83,  // ....P...
                            /* 0368 */  0x42, 0x6A, 0xDA, 0xBD, 0xFC, 0x55, 0xC5, 0x94,  // Bj...U..
                            /* 0370 */  0x91, 0x4D, 0x0D, 0xAA, 0xF3, 0x51, 0x45, 0x0D,  // .M...QE.
                            /* 0378 */  0xED, 0x02, 0xDD, 0x62, 0xCA, 0xF7, 0xEF, 0x92,  // ...b....
                            /* 0380 */  0xA6, 0x1B, 0xC7, 0x4E, 0xE5, 0xF9, 0x94, 0x9A,  // ...N....
                            /* 0388 */  0xBF, 0x2D, 0x10, 0x0E, 0x81, 0x5C, 0x73, 0xFB,  // .-...\s.
                            /* 0390 */  0x56, 0x22, 0xA1, 0x81, 0x0C, 0x3F, 0x72, 0x0C,  // V"...?r.
                            /* 0398 */  0x96, 0x8E, 0x17, 0x64, 0x77, 0x06, 0x20, 0xE8,  // ...dw. .
                            /* 03A0 */  0xEA, 0xAE, 0x3A, 0x7B, 0x80, 0x04, 0x74, 0xBC,  // ..:{..t.
                            /* 03A8 */  0x67, 0xF1, 0x58, 0x2E, 0xD1, 0xB8, 0x9A, 0xC0,  // g.X.....
                            /* 03B0 */  0x2C, 0x7E, 0x9E, 0xCB, 0x2A, 0xDA, 0x0E, 0xB6,  // ,~..*...
                            /* 03B8 */  0xA3, 0x1B, 0x15, 0x83, 0x3D, 0xCF, 0x83, 0x95,  // ....=...
                            /* 03C0 */  0x99, 0xF2, 0xC5, 0x53, 0x18, 0x22, 0x71, 0x01,  // ...S."q.
                            /* 03C8 */  0x0F, 0xCC, 0xEF, 0xBB, 0xC6, 0xBE, 0x00, 0xA9,  // ........
                            /* 03D0 */  0xB2, 0x46, 0xB0, 0x68, 0xAB, 0x00, 0x52, 0x4D,  // .F.h..RM
                            /* 03D8 */  0xF7, 0x8B, 0xA1, 0x21, 0xC3, 0xFF, 0x29, 0x40,  // ...!..)@
                            /* 03E0 */  0x73, 0x48, 0x25, 0x5D, 0xD4, 0x49, 0x6C, 0x18,  // sH%].Il.
                            /* 03E8 */  0x9B, 0x0C, 0xFE, 0x1B, 0x4B, 0x28, 0xA1, 0x5E,  // ....K(.^
                            /* 03F0 */  0x01, 0x6B, 0xAF, 0x71, 0xCE, 0xE8, 0x54, 0x32,  // .k.q..T2
                            /* 03F8 */  0xC4, 0xFB, 0xF9, 0xB3, 0xF9, 0x8A, 0x4C, 0xE0,  // ......L.
                            /* 0400 */  0x07, 0xA9, 0xF5, 0xBD, 0xF9, 0xCA, 0xE8, 0xF2,  // ........
                            /* 0408 */  0xE9, 0x11, 0xE8, 0x9E, 0x0C, 0xA0, 0xDB, 0x72,  // .......r
                            /* 0410 */  0x50, 0xDE, 0x73, 0x75, 0xF7, 0x31, 0xF6, 0x06,  // P.su.1..
                            /* 0418 */  0x37, 0xAC, 0x16, 0x17, 0x6A, 0x75, 0x77, 0xE7,  // 7...juw.
                            /* 0420 */  0x3E, 0x16, 0xB3, 0x8F, 0xFD, 0x6F, 0x83, 0xB0,  // >....o..
                            /* 0428 */  0x29, 0x98, 0xC0, 0x4C, 0xD4, 0xC5, 0x79, 0x18,  // )..L..y.
                            /* 0430 */  0xFE, 0x36, 0x65, 0x6E, 0x32, 0xEF, 0x9E, 0x49,  // .6en2..I
                            /* 0438 */  0xE1, 0xC3, 0xB7, 0xB9, 0xA4, 0x12, 0x63, 0x33,  // ......c3
                            /* 0440 */  0x8D, 0x5E, 0xF9, 0xDB, 0x76, 0x9B, 0xF0, 0x52,  // .^..v..R
                            /* 0448 */  0xCF, 0x28, 0xAD, 0x21, 0x20, 0x59, 0xC2, 0xCA,  // .(.! Y..
                            /* 0450 */  0x4B, 0x4D, 0x34, 0xBA, 0x61, 0x05, 0xB8, 0xC3,  // KM4.a...
                            /* 0458 */  0x58, 0x3F, 0x9B, 0x3A, 0x25, 0xCE, 0xAD, 0xFD,  // X?.:%...
                            /* 0460 */  0x30, 0xF7, 0x92, 0x2C, 0x15, 0xB6, 0x9B, 0xAD,  // 0..,....
                            /* 0468 */  0x32, 0xDA, 0x52, 0x38, 0x47, 0x68, 0x7F, 0xDC,  // 2.R8Gh..
                            /* 0470 */  0x0F, 0xD0, 0xC9, 0x57, 0xD0, 0xBD, 0x35, 0x36,  // ...W..56
                            /* 0478 */  0x24, 0xC5, 0xB1, 0xE9, 0x7C, 0xE1, 0xAA, 0xE8,  // $...|...
                            /* 0480 */  0x73, 0xD2, 0x1E, 0xBB, 0x9B, 0xF1, 0x0A, 0x4D,  // s......M
                            /* 0488 */  0x1A, 0x1A, 0xE2, 0x41, 0xCE, 0x68, 0x28, 0x48,  // ...A.h(H
                            /* 0490 */  0x4E, 0x06, 0x56, 0x7D, 0x17, 0x93, 0xC3, 0xF7,  // N.V}....
                            /* 0498 */  0x56, 0x5B, 0xE5, 0xAF, 0x97, 0xE5, 0x69, 0xD6,  // V[....i.
                            /* 04A0 */  0x79, 0xA9, 0x57, 0x25, 0xAD, 0x81, 0x69, 0xD5,  // y.W%..i.
                            /* 04A8 */  0x0D, 0xD9, 0xA9, 0x74, 0x2C, 0x90, 0xB0, 0xE3,  // ...t,...
                            /* 04B0 */  0xB7, 0x6C, 0x3B, 0x48, 0xE8, 0x32, 0xE6, 0xC9,  // .l;H.2..
                            /* 04B8 */  0xB2, 0x4D, 0xC1, 0x69, 0xE0, 0x10, 0x85, 0xF8,  // .M.i....
                            /* 04C0 */  0xD3, 0x10, 0x00, 0xF8, 0x59, 0xD4, 0xD7, 0xDF,  // ....Y...
                            /* 04C8 */  0x7F, 0x07, 0x93, 0x78, 0x92, 0x3E, 0x12, 0xF7,  // ...x.>..
                            /* 04D0 */  0x89, 0x11, 0x47, 0x42, 0x68, 0xE9, 0x00, 0xC7,  // ..GBh...
                            /* 04D8 */  0x60, 0xAC, 0x47, 0x8B, 0x3B, 0xE7, 0xD8, 0x83,  // `.G.;...
                            /* 04E0 */  0x25, 0x59, 0xEF, 0x9A, 0x25, 0x03, 0x69, 0xE6,  // %Y..%.i.
                            /* 04E8 */  0xF2, 0xDC, 0xD9, 0x39, 0xE4, 0xC4, 0x8A, 0x6A,  // ...9...j
                            /* 04F0 */  0xCA, 0xA7, 0x4B, 0xC7, 0xF8, 0xCD, 0xCB, 0x7C,  // ..K....|
                            /* 04F8 */  0x49, 0x10, 0xF9, 0xFA, 0x48, 0x20, 0x9B, 0xAF,  // I...H ..
                            /* 0500 */  0x54, 0xEE, 0x3E, 0xBD, 0xE0, 0x46, 0x22, 0x35,  // T.>..F"5
                            /* 0508 */  0xD4, 0x88, 0x2F, 0x5F, 0x86, 0x10, 0x60, 0xBF,  // ../_..`.
                            /* 0510 */  0x05, 0xCC, 0x2E, 0xB3, 0xB8, 0x22, 0x55, 0x2F,  // ....."U/
                            /* 0518 */  0x4C, 0x1D, 0x61, 0x33, 0xA5, 0x39, 0x66, 0xB0,  // L.a3.9f.
                            /* 0520 */  0xF9, 0x65, 0xA7, 0x18, 0x2F, 0x4C, 0x36, 0x88,  // .e../L6.
                            /* 0528 */  0xA4, 0x53, 0x1D, 0x47, 0x49, 0x65, 0x27, 0x12,  // .S.GIe'.
                            /* 0530 */  0x97, 0xBA, 0xFD, 0x8D, 0x5D, 0xF5, 0xD2, 0x62,  // ....]..b
                            /* 0538 */  0x1E, 0x02, 0x2A, 0xC8, 0x0B, 0x6D, 0x8E, 0x5D,  // ..*..m.]
                            /* 0540 */  0xB6, 0xB4, 0xFA, 0x6B, 0xBB, 0x61, 0xCE, 0xB1,  // ...k.a..
                            /* 0548 */  0x1A, 0xDD, 0xC3, 0xA9, 0x0D, 0xDD, 0x30, 0xE3,  // ......0.
                            /* 0550 */  0xF6, 0x45, 0x04, 0x63, 0xD1, 0x2B, 0x4A, 0xFA,  // .E.c.+J.
                            /* 0558 */  0x41, 0xA6, 0x6C, 0x20, 0x54, 0x02, 0xC8, 0x58,  // A.l T..X
                            /* 0560 */  0xA5, 0xCF, 0xAC, 0xB5, 0x1E, 0x98, 0x87, 0x6D,  // .......m
                            /* 0568 */  0x19, 0xDE, 0x8B, 0xDE, 0x1F, 0x8E, 0xBE, 0xAF,  // ........
                            /* 0570 */  0x12, 0x4E, 0x46, 0xCD, 0xE9, 0x79, 0xCC, 0x78,  // .NF..y.x
                            /* 0578 */  0x84, 0x13, 0xAC, 0x0E, 0x3E, 0x8E, 0xDF, 0x07,  // ....>...
                            /* 0580 */  0xD5, 0xFA, 0x0F, 0x8D, 0x51, 0xE1, 0xBF, 0xC3,  // ....Q...
                            /* 0588 */  0x24, 0x17, 0x48, 0xE9, 0xD3, 0x24, 0x03, 0xE0,  // $.H..$..
                            /* 0590 */  0x4C, 0xD7, 0xA9, 0x98, 0x21, 0xDE, 0x5D, 0xF3,  // L...!.].
                            /* 0598 */  0x00, 0x71, 0x46, 0x5B, 0xFA, 0xCB, 0xFD, 0xED,  // .qF[....
                            /* 05A0 */  0x7E, 0x4D, 0x9B, 0x32, 0xFF, 0x88, 0x84, 0x95,  // ~M.2....
                            /* 05A8 */  0x65, 0x17, 0x18, 0xF8, 0x12, 0xD1, 0xB4, 0x05,  // e.......
                            /* 05B0 */  0x22, 0xD7, 0xE6, 0x80, 0x7A, 0x2D, 0xAD, 0x3C,  // "...z-.<
                            /* 05B8 */  0xDD, 0xD4, 0x0B, 0x8A, 0xE3, 0x5D, 0x07, 0xC2,  // .....]..
                            /* 05C0 */  0x3B, 0xD1, 0x4F, 0xC4, 0xAF, 0x85, 0x3D, 0xFD,  // ;.O...=.
                            /* 05C8 */  0x9F, 0x29, 0x54, 0x36, 0x27, 0x73, 0x74, 0xAD,  // .)T6'st.
                            /* 05D0 */  0x8F, 0x50, 0x4A, 0x30, 0x09, 0x59, 0xD1, 0xF6,  // .PJ0.Y..
                            /* 05D8 */  0x2A, 0xBC, 0x0F, 0x36, 0x1E, 0x92, 0x91, 0x21,  // *..6...!
                            /* 05E0 */  0x46, 0x90, 0x4A, 0x18, 0xA1, 0x71, 0x2A, 0xDC,  // F.J..q*.
                            /* 05E8 */  0xE3, 0x2F, 0x08, 0x2D, 0xB1, 0xED, 0xDA, 0xCE,  // ./.-....
                            /* 05F0 */  0xD6, 0x6E, 0xFC, 0xC2, 0xBF, 0xB2, 0xCD, 0x3C,  // .n.....<
                            /* 05F8 */  0xEC, 0xC0, 0x7A, 0x70, 0x00, 0x48, 0x55, 0xED,  // ..zp.HU.
                            /* 0600 */  0xFC, 0xA5, 0x4A, 0xDA, 0x67, 0xAF, 0xE0, 0x95,  // ..J.g...
                            /* 0608 */  0xA4, 0xE4, 0xC1                                 // ...
                        }
                    })
                }
                ElseIf ((GTYP == 0x03))
                {
                    Return (Package (0x01)
                    {
                        Buffer (0x0601)
                        {
                            /* 0000 */  0xE5, 0x1F, 0x94, 0x00, 0x00, 0x00, 0x00, 0x02,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x40, 0x67, 0x64, 0x64, 0x76,  // ...@gddv
                            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x4F, 0x45, 0x4D, 0x20,  // ....OEM 
                            /* 0030 */  0x45, 0x78, 0x70, 0x6F, 0x72, 0x74, 0x65, 0x64,  // Exported
                            /* 0038 */  0x20, 0x44, 0x61, 0x74, 0x61, 0x56, 0x61, 0x75,  //  DataVau
                            /* 0040 */  0x6C, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // lt......
                            /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0068 */  0x00, 0x00, 0x00, 0x00, 0xCA, 0x7E, 0x82, 0xE3,  // .....~..
                            /* 0070 */  0x76, 0x19, 0x95, 0x59, 0xA8, 0x83, 0xAE, 0x4A,  // v..Y...J
                            /* 0078 */  0x3E, 0x81, 0x8F, 0x3C, 0xD6, 0xEC, 0x5E, 0xAF,  // >..<..^.
                            /* 0080 */  0xB6, 0x02, 0xBE, 0x85, 0xE8, 0x7E, 0xDD, 0xC4,  // .....~..
                            /* 0088 */  0xC4, 0x09, 0x15, 0xC1, 0x6D, 0x05, 0x00, 0x00,  // ....m...
                            /* 0090 */  0x52, 0x45, 0x50, 0x4F, 0x5D, 0x00, 0x00, 0x00,  // REPO]...
                            /* 0098 */  0x01, 0x76, 0x77, 0x00, 0x00, 0x00, 0x00, 0x00,  // .vw.....
                            /* 00A0 */  0x00, 0x00, 0x72, 0x87, 0xCD, 0xFF, 0x6D, 0x24,  // ..r...m$
                            /* 00A8 */  0x47, 0xDB, 0x3D, 0x24, 0x92, 0xB4, 0x16, 0x6F,  // G.=$...o
                            /* 00B0 */  0x45, 0xD8, 0xC3, 0xF5, 0x66, 0x14, 0x9F, 0x22,  // E...f.."
                            /* 00B8 */  0xD7, 0xF7, 0xDE, 0x67, 0x90, 0x9A, 0xA2, 0x0D,  // ...g....
                            /* 00C0 */  0x39, 0x25, 0xAD, 0xC3, 0x1A, 0xAD, 0x52, 0x0B,  // 9%....R.
                            /* 00C8 */  0x75, 0x38, 0xE1, 0xA4, 0x14, 0x43, 0x58, 0x48,  // u8...CXH
                            /* 00D0 */  0x6F, 0x9C, 0x98, 0x65, 0x90, 0xA4, 0x8A, 0xEC,  // o..e....
                            /* 00D8 */  0x2F, 0x97, 0x82, 0x55, 0x67, 0x66, 0x63, 0xBB,  // /..Ugfc.
                            /* 00E0 */  0x5C, 0x10, 0xB6, 0x58, 0x16, 0x0D, 0x68, 0x06,  // \..X..h.
                            /* 00E8 */  0x40, 0xFE, 0xC9, 0xFD, 0x06, 0xFE, 0x8D, 0x11,  // @.......
                            /* 00F0 */  0xF8, 0xE8, 0x84, 0xCB, 0xD4, 0xC9, 0x25, 0x5F,  // ......%_
                            /* 00F8 */  0x82, 0x58, 0x0E, 0xBC, 0xCB, 0x03, 0xAF, 0x24,  // .X.....$
                            /* 0100 */  0x08, 0x91, 0xF1, 0xBC, 0x9F, 0xA7, 0x90, 0x2D,  // .......-
                            /* 0108 */  0xF9, 0xFA, 0xE3, 0x27, 0xBE, 0x7B, 0x5B, 0x97,  // ...'.{[.
                            /* 0110 */  0x62, 0x0D, 0xE5, 0x08, 0xE2, 0xBE, 0xEE, 0x3B,  // b......;
                            /* 0118 */  0xF5, 0x73, 0x13, 0x53, 0x3A, 0x3C, 0xDF, 0x10,  // .s.S:<..
                            /* 0120 */  0x21, 0xAF, 0x79, 0xDC, 0x01, 0x57, 0x41, 0xD6,  // !.y..WA.
                            /* 0128 */  0x5C, 0x0A, 0x08, 0xFA, 0x6F, 0x57, 0xA9, 0x2D,  // \...oW.-
                            /* 0130 */  0x8E, 0xFB, 0x03, 0xFB, 0x81, 0xA6, 0x83, 0xE4,  // ........
                            /* 0138 */  0xD8, 0x08, 0xAB, 0x62, 0x90, 0x51, 0xC7, 0x64,  // ...b.Q.d
                            /* 0140 */  0x78, 0x31, 0x1A, 0xCB, 0xD1, 0xA7, 0xB0, 0x94,  // x1......
                            /* 0148 */  0x9B, 0xED, 0x65, 0xF2, 0x97, 0x10, 0xBB, 0xAB,  // ..e.....
                            /* 0150 */  0x6C, 0x46, 0xA0, 0x55, 0x10, 0x73, 0x40, 0x78,  // lF.U.s@x
                            /* 0158 */  0xD5, 0x2D, 0xFF, 0xD7, 0x03, 0x26, 0x11, 0x49,  // .-...&.I
                            /* 0160 */  0xD1, 0x0C, 0x3C, 0x43, 0x81, 0xAC, 0x89, 0x86,  // ..<C....
                            /* 0168 */  0x32, 0xBC, 0x11, 0x5B, 0x78, 0xAE, 0x44, 0xB8,  // 2..[x.D.
                            /* 0170 */  0xA2, 0xBD, 0xA7, 0xCE, 0x67, 0x42, 0x03, 0x41,  // ....gB.A
                            /* 0178 */  0x79, 0xA9, 0xE0, 0x6A, 0x71, 0x73, 0x68, 0x0E,  // y..jqsh.
                            /* 0180 */  0x78, 0x42, 0xBC, 0xB2, 0xE9, 0x33, 0x07, 0x56,  // xB...3.V
                            /* 0188 */  0xA6, 0x6D, 0xC6, 0xDC, 0x5C, 0x23, 0x6E, 0xD0,  // .m..\#n.
                            /* 0190 */  0x5B, 0xD1, 0xBC, 0xF0, 0xFB, 0xF8, 0xCA, 0x7F,  // [.......
                            /* 0198 */  0x70, 0x8F, 0x5B, 0x5D, 0x84, 0xD5, 0x2A, 0x53,  // p.[]..*S
                            /* 01A0 */  0x77, 0x38, 0x14, 0x14, 0x41, 0x19, 0x35, 0xC0,  // w8..A.5.
                            /* 01A8 */  0x76, 0xB6, 0x68, 0x7E, 0x4F, 0x48, 0xB5, 0x9D,  // v.h~OH..
                            /* 01B0 */  0x4F, 0x2E, 0x2C, 0x2F, 0x1A, 0xF7, 0x6E, 0x59,  // O.,/..nY
                            /* 01B8 */  0xCA, 0x8E, 0x77, 0x5B, 0xD9, 0xC6, 0x04, 0x6F,  // ..w[...o
                            /* 01C0 */  0x73, 0x3C, 0xC7, 0xA3, 0x16, 0x6E, 0x6E, 0x00,  // s<...nn.
                            /* 01C8 */  0x43, 0x4D, 0x91, 0x1F, 0xF6, 0x27, 0xF4, 0xE3,  // CM...'..
                            /* 01D0 */  0x54, 0xD0, 0xD0, 0x89, 0x88, 0x6C, 0x4D, 0x0D,  // T....lM.
                            /* 01D8 */  0xD3, 0x02, 0x9E, 0x58, 0xAE, 0x07, 0x20, 0x85,  // ...X.. .
                            /* 01E0 */  0x0E, 0xB9, 0xCE, 0x40, 0x54, 0x3F, 0x5F, 0xC7,  // ...@T?_.
                            /* 01E8 */  0x50, 0xFE, 0x68, 0xC1, 0x43, 0x3F, 0x6C, 0x0E,  // P.h.C?l.
                            /* 01F0 */  0x7F, 0xDB, 0x02, 0x91, 0xBD, 0x1E, 0x88, 0x35,  // .......5
                            /* 01F8 */  0x9D, 0xF5, 0xAB, 0x9E, 0xA9, 0xCC, 0x84, 0x89,  // ........
                            /* 0200 */  0x2D, 0x82, 0x7D, 0xE4, 0xDD, 0xC1, 0x17, 0xC9,  // -.}.....
                            /* 0208 */  0xB8, 0x57, 0x16, 0x67, 0xFF, 0xEF, 0xB2, 0x4E,  // .W.g...N
                            /* 0210 */  0x2D, 0xE7, 0x11, 0xCA, 0x7B, 0x5D, 0xDD, 0xC1,  // -...{]..
                            /* 0218 */  0x56, 0xB5, 0x22, 0xFD, 0x99, 0x68, 0x77, 0xA9,  // V."..hw.
                            /* 0220 */  0x70, 0xB1, 0x3C, 0x0F, 0x43, 0xD8, 0x6F, 0xB8,  // p.<.C.o.
                            /* 0228 */  0x1D, 0x43, 0xB6, 0x27, 0xD1, 0x36, 0xD5, 0xE1,  // .C.'.6..
                            /* 0230 */  0x6F, 0xAC, 0xB0, 0x50, 0xB1, 0x49, 0xCD, 0xE3,  // o..P.I..
                            /* 0238 */  0x67, 0x93, 0xA4, 0x75, 0xAC, 0x78, 0x56, 0xA2,  // g..u.xV.
                            /* 0240 */  0x89, 0xCC, 0x96, 0x36, 0x14, 0x59, 0x4B, 0xB3,  // ...6.YK.
                            /* 0248 */  0xF3, 0xAC, 0x43, 0x00, 0xF7, 0xF3, 0x0D, 0x18,  // ..C.....
                            /* 0250 */  0x29, 0x64, 0x79, 0x22, 0xDA, 0x2C, 0xBB, 0xC4,  // )dy".,..
                            /* 0258 */  0x17, 0x01, 0x0E, 0x51, 0xD3, 0xF3, 0xE5, 0x94,  // ...Q....
                            /* 0260 */  0x91, 0x85, 0xAC, 0xEF, 0xFA, 0x74, 0x3E, 0x5F,  // .....t>_
                            /* 0268 */  0x60, 0x22, 0x16, 0x20, 0x0D, 0x1C, 0x46, 0x00,  // `". ..F.
                            /* 0270 */  0xF7, 0xBF, 0x46, 0xF1, 0x3B, 0x81, 0x8A, 0x15,  // ..F.;...
                            /* 0278 */  0xC3, 0x4F, 0x62, 0x8F, 0x2C, 0xD8, 0x17, 0xC2,  // .Ob.,...
                            /* 0280 */  0x3B, 0xBD, 0x79, 0x9E, 0x64, 0xE4, 0x05, 0xDF,  // ;.y.d...
                            /* 0288 */  0x79, 0x6C, 0xA2, 0xBE, 0x8F, 0xCB, 0xB8, 0x71,  // yl.....q
                            /* 0290 */  0x00, 0x7B, 0x34, 0xFE, 0x78, 0xA7, 0x13, 0x9B,  // .{4.x...
                            /* 0298 */  0x9B, 0x49, 0x92, 0x43, 0xBC, 0xD7, 0xE0, 0xBB,  // .I.C....
                            /* 02A0 */  0xC6, 0xE0, 0x0B, 0xBE, 0x5B, 0x98, 0xB6, 0x38,  // ....[..8
                            /* 02A8 */  0x66, 0x74, 0x19, 0xEC, 0x5A, 0x0D, 0xC7, 0xE3,  // ft..Z...
                            /* 02B0 */  0xF0, 0x4F, 0x1D, 0xE4, 0x0B, 0x06, 0x51, 0x62,  // .O....Qb
                            /* 02B8 */  0x31, 0xFB, 0xBD, 0xF7, 0xFB, 0x1C, 0x70, 0x50,  // 1.....pP
                            /* 02C0 */  0x5D, 0x44, 0x72, 0x64, 0x61, 0xE5, 0x99, 0x13,  // ]Drda...
                            /* 02C8 */  0xAA, 0x70, 0x51, 0x5E, 0xFA, 0x09, 0xA4, 0xD5,  // .pQ^....
                            /* 02D0 */  0xE7, 0x8A, 0x0B, 0x74, 0x3A, 0x26, 0xB8, 0x43,  // ...t:&.C
                            /* 02D8 */  0x13, 0x36, 0xBC, 0x83, 0x1D, 0x51, 0x36, 0x36,  // .6...Q66
                            /* 02E0 */  0x2A, 0x0B, 0x70, 0x0A, 0x33, 0x6D, 0xB4, 0x66,  // *.p.3m.f
                            /* 02E8 */  0x86, 0xA0, 0xD7, 0x78, 0x48, 0xBD, 0x77, 0xC9,  // ...xH.w.
                            /* 02F0 */  0x39, 0x78, 0xC7, 0xC6, 0xC4, 0x0B, 0xEC, 0xEB,  // 9x......
                            /* 02F8 */  0x67, 0xD0, 0xF0, 0x9D, 0xC1, 0x83, 0x81, 0x60,  // g......`
                            /* 0300 */  0x27, 0xA9, 0xEF, 0xA9, 0xE9, 0x51, 0x86, 0x48,  // '....Q.H
                            /* 0308 */  0xB9, 0x9B, 0xD1, 0x91, 0x3C, 0x27, 0x58, 0x82,  // ....<'X.
                            /* 0310 */  0xEF, 0xB6, 0xEC, 0x43, 0xCA, 0x29, 0x54, 0x41,  // ...C.)TA
                            /* 0318 */  0x22, 0x55, 0xED, 0xB5, 0x00, 0x33, 0xFA, 0x82,  // "U...3..
                            /* 0320 */  0x29, 0xC9, 0x0C, 0x5A, 0x6E, 0x05, 0x92, 0xD9,  // )..Zn...
                            /* 0328 */  0x40, 0xA6, 0xBE, 0x76, 0x52, 0x40, 0x1B, 0x00,  // @..vR@..
                            /* 0330 */  0x76, 0x73, 0x63, 0x6E, 0x89, 0x55, 0xFE, 0xDE,  // vscn.U..
                            /* 0338 */  0xA7, 0x7F, 0x36, 0x70, 0xB9, 0xA8, 0xA3, 0xC1,  // ..6p....
                            /* 0340 */  0x00, 0x2B, 0xEB, 0xC7, 0x84, 0x3E, 0xB8, 0x17,  // .+...>..
                            /* 0348 */  0x29, 0x59, 0x6C, 0xA1, 0x64, 0xBB, 0x2F, 0xAD,  // )Yl.d./.
                            /* 0350 */  0xAE, 0xDA, 0x7A, 0x57, 0x0B, 0xB1, 0xBA, 0x3D,  // ..zW...=
                            /* 0358 */  0x86, 0x73, 0x69, 0xF8, 0x06, 0x11, 0xA7, 0x43,  // .si....C
                            /* 0360 */  0x73, 0x3B, 0xD5, 0xF1, 0x19, 0x94, 0xB3, 0x59,  // s;.....Y
                            /* 0368 */  0x11, 0x2F, 0xE8, 0x7A, 0x54, 0x59, 0xB9, 0x8B,  // ./.zTY..
                            /* 0370 */  0xFC, 0xE2, 0xE8, 0xAA, 0x3C, 0xAE, 0xB6, 0x4D,  // ....<..M
                            /* 0378 */  0x88, 0x65, 0x35, 0xB9, 0x44, 0xDA, 0x0C, 0x66,  // .e5.D..f
                            /* 0380 */  0x27, 0x36, 0x5C, 0x52, 0x39, 0x76, 0x6E, 0x6E,  // '6\R9vnn
                            /* 0388 */  0xF1, 0x70, 0x2A, 0x4A, 0x2D, 0x31, 0x2C, 0x31,  // .p*J-1,1
                            /* 0390 */  0xB6, 0x24, 0x7B, 0x24, 0xEE, 0xE5, 0xDD, 0xF2,  // .${$....
                            /* 0398 */  0xEE, 0x37, 0x24, 0xE6, 0x3E, 0x78, 0xD8, 0x95,  // .7$.>x..
                            /* 03A0 */  0x59, 0x66, 0x78, 0x7D, 0x16, 0x96, 0x17, 0x77,  // Yfx}...w
                            /* 03A8 */  0x2B, 0xE6, 0x2D, 0xF6, 0x9B, 0x6C, 0x32, 0xD3,  // +.-..l2.
                            /* 03B0 */  0x6C, 0x39, 0x3C, 0xB3, 0xFA, 0x0E, 0x2B, 0x22,  // l9<...+"
                            /* 03B8 */  0xCB, 0x84, 0x92, 0x89, 0x63, 0x9E, 0x66, 0x63,  // ....c.fc
                            /* 03C0 */  0x9D, 0x9C, 0x97, 0x30, 0x59, 0xDC, 0x68, 0xE3,  // ...0Y.h.
                            /* 03C8 */  0x36, 0x57, 0x8A, 0x48, 0x93, 0x82, 0x08, 0x93,  // 6W.H....
                            /* 03D0 */  0xDB, 0x61, 0x48, 0xCB, 0x5B, 0xA1, 0x3E, 0x99,  // .aH.[.>.
                            /* 03D8 */  0xC8, 0x7F, 0x0A, 0xAD, 0xE5, 0xDC, 0xA5, 0x92,  // ........
                            /* 03E0 */  0x11, 0xD0, 0x03, 0xAD, 0x46, 0x9A, 0xC2, 0x7D,  // ....F..}
                            /* 03E8 */  0x9F, 0xEB, 0xB9, 0xD4, 0xF7, 0x18, 0x76, 0xC4,  // ......v.
                            /* 03F0 */  0x6D, 0x47, 0xA1, 0x70, 0x63, 0x7D, 0x1F, 0x09,  // mG.pc}..
                            /* 03F8 */  0x1C, 0x2A, 0xAB, 0x62, 0x81, 0x20, 0x07, 0x09,  // .*.b. ..
                            /* 0400 */  0x91, 0xE2, 0x0D, 0x08, 0xED, 0x5C, 0x59, 0xFD,  // .....\Y.
                            /* 0408 */  0x0D, 0x26, 0x48, 0x41, 0x8F, 0x65, 0x6B, 0x69,  // .&HA.eki
                            /* 0410 */  0x1E, 0x93, 0x6A, 0x4C, 0x46, 0x0C, 0xF1, 0xD4,  // ..jLF...
                            /* 0418 */  0x71, 0x23, 0x02, 0x4F, 0x62, 0xE4, 0x79, 0x73,  // q#.Ob.ys
                            /* 0420 */  0x36, 0x59, 0x1B, 0x05, 0x4D, 0x13, 0x14, 0xC3,  // 6Y..M...
                            /* 0428 */  0x5B, 0x1E, 0x00, 0x07, 0x06, 0xCE, 0xF1, 0x16,  // [.......
                            /* 0430 */  0x30, 0x56, 0xEC, 0x8D, 0x55, 0xC6, 0xBB, 0x96,  // 0V..U...
                            /* 0438 */  0x2E, 0x51, 0x12, 0x95, 0xB8, 0x52, 0x19, 0x79,  // .Q...R.y
                            /* 0440 */  0x05, 0x69, 0x14, 0x2A, 0x10, 0x03, 0x60, 0xD0,  // .i.*..`.
                            /* 0448 */  0x3A, 0xFB, 0xD5, 0x50, 0x1D, 0xF3, 0x23, 0x18,  // :..P..#.
                            /* 0450 */  0x24, 0xF9, 0x4D, 0x6D, 0xBF, 0x85, 0xAA, 0xB7,  // $.Mm....
                            /* 0458 */  0xC8, 0x52, 0x4C, 0xC4, 0xC4, 0xD2, 0x14, 0xE4,  // .RL.....
                            /* 0460 */  0xB6, 0x02, 0x75, 0xBE, 0x86, 0x00, 0x70, 0x7E,  // ..u...p~
                            /* 0468 */  0x0A, 0xD6, 0xAC, 0x42, 0x92, 0xD6, 0x1B, 0x25,  // ...B...%
                            /* 0470 */  0x92, 0x2B, 0x8E, 0xAF, 0xD2, 0xCA, 0xAF, 0x05,  // .+......
                            /* 0478 */  0x4B, 0x4F, 0x8A, 0x1C, 0xD7, 0xDD, 0x4D, 0x63,  // KO....Mc
                            /* 0480 */  0xB3, 0x4A, 0x59, 0x29, 0xE1, 0x90, 0x9A, 0x60,  // .JY)...`
                            /* 0488 */  0xE9, 0x60, 0xC3, 0x74, 0xF0, 0xCE, 0x6B, 0xCB,  // .`.t..k.
                            /* 0490 */  0x8C, 0xF6, 0xD0, 0xD6, 0x0E, 0x81, 0xA4, 0xF0,  // ........
                            /* 0498 */  0xFE, 0x4F, 0x43, 0x0A, 0x12, 0xDA, 0x84, 0x95,  // .OC.....
                            /* 04A0 */  0x87, 0x71, 0xE8, 0xED, 0xD8, 0x86, 0xB5, 0x1E,  // .q......
                            /* 04A8 */  0x15, 0x32, 0x7F, 0xDC, 0x75, 0x5E, 0x09, 0x13,  // .2..u^..
                            /* 04B0 */  0x55, 0xF6, 0x95, 0x4F, 0xD4, 0x3F, 0x75, 0x8E,  // U..O.?u.
                            /* 04B8 */  0x45, 0xBD, 0xD6, 0x37, 0xF5, 0xB5, 0x56, 0x1B,  // E..7..V.
                            /* 04C0 */  0x8F, 0x7F, 0x78, 0xDB, 0x02, 0xB7, 0xF8, 0xBD,  // ..x.....
                            /* 04C8 */  0xAD, 0x98, 0x65, 0x05, 0x75, 0xF3, 0x57, 0xDC,  // ..e.u.W.
                            /* 04D0 */  0x5D, 0x57, 0xD2, 0x19, 0x77, 0x9D, 0xA3, 0x0F,  // ]W..w...
                            /* 04D8 */  0xDD, 0x0A, 0xCC, 0xE4, 0x08, 0x75, 0x89, 0x5B,  // .....u.[
                            /* 04E0 */  0xC7, 0x30, 0xBE, 0xD4, 0x1A, 0xF0, 0x0E, 0x59,  // .0.....Y
                            /* 04E8 */  0x67, 0xFF, 0x72, 0xBE, 0xA7, 0xB4, 0x26, 0xCA,  // g.r...&.
                            /* 04F0 */  0x96, 0x81, 0xF1, 0xC9, 0xAA, 0x62, 0x47, 0xF4,  // .....bG.
                            /* 04F8 */  0x4F, 0x2C, 0x7F, 0x72, 0x12, 0x3F, 0xC8, 0x3E,  // O,.r.?.>
                            /* 0500 */  0xA7, 0x3F, 0xF6, 0xD9, 0x5C, 0x7A, 0x04, 0x5D,  // .?..\z.]
                            /* 0508 */  0x64, 0xF4, 0xE5, 0xB6, 0x2F, 0x54, 0x88, 0x4E,  // d.../T.N
                            /* 0510 */  0xD7, 0xB7, 0xDF, 0xC6, 0xDF, 0xD9, 0x46, 0xF3,  // ......F.
                            /* 0518 */  0xF7, 0xA0, 0x97, 0xD2, 0x65, 0xBA, 0x4A, 0xD8,  // ....e.J.
                            /* 0520 */  0xBB, 0x5B, 0x30, 0x7D, 0x49, 0x87, 0x0E, 0x44,  // .[0}I..D
                            /* 0528 */  0x90, 0x6C, 0x13, 0x45, 0xAA, 0x85, 0xEE, 0xC8,  // .l.E....
                            /* 0530 */  0xB0, 0x5F, 0xA5, 0x3A, 0xC1, 0xF3, 0xAE, 0x6E,  // ._.:...n
                            /* 0538 */  0x4C, 0x44, 0x68, 0x28, 0xA5, 0xEC, 0xB5, 0xB4,  // LDh(....
                            /* 0540 */  0xC9, 0x09, 0x82, 0x6B, 0x0C, 0xB9, 0x81, 0x2D,  // ...k...-
                            /* 0548 */  0x38, 0xEC, 0x55, 0xD0, 0x82, 0x22, 0x35, 0xBC,  // 8.U.."5.
                            /* 0550 */  0x51, 0x3F, 0x53, 0xDA, 0x55, 0xCC, 0x8B, 0x90,  // Q?S.U...
                            /* 0558 */  0x2B, 0x33, 0xC1, 0x52, 0x27, 0xAB, 0xCC, 0x5C,  // +3.R'..\
                            /* 0560 */  0xDF, 0xE1, 0xE3, 0x63, 0xB7, 0x57, 0xEA, 0xC4,  // ...c.W..
                            /* 0568 */  0x99, 0xD7, 0xDC, 0x66, 0x73, 0x9F, 0x65, 0x6A,  // ...fs.ej
                            /* 0570 */  0xB9, 0x04, 0x4A, 0xD6, 0x79, 0x33, 0x94, 0x5C,  // ..J.y3.\
                            /* 0578 */  0xC7, 0xA1, 0x1C, 0x9E, 0xFD, 0x32, 0x2D, 0xDC,  // .....2-.
                            /* 0580 */  0x0A, 0x2E, 0x88, 0xAF, 0x4A, 0x02, 0xBC, 0xCE,  // ....J...
                            /* 0588 */  0x28, 0xB7, 0xE3, 0xC0, 0x98, 0xF8, 0xD5, 0x7F,  // (.......
                            /* 0590 */  0x77, 0xDF, 0xE5, 0x8D, 0x80, 0x63, 0xCB, 0xD3,  // w....c..
                            /* 0598 */  0x3B, 0xF2, 0x89, 0xE2, 0xAD, 0x17, 0x80, 0xCB,  // ;.......
                            /* 05A0 */  0x43, 0x24, 0x87, 0x8B, 0x1D, 0xE9, 0x02, 0x7C,  // C$.....|
                            /* 05A8 */  0x24, 0x55, 0xB1, 0x9D, 0xE9, 0xA6, 0x3F, 0xBF,  // $U....?.
                            /* 05B0 */  0xA7, 0x96, 0x71, 0x50, 0x48, 0xD1, 0xB5, 0xC9,  // ..qPH...
                            /* 05B8 */  0x6E, 0x51, 0xAC, 0xA1, 0x1C, 0xA6, 0x23, 0x06,  // nQ....#.
                            /* 05C0 */  0x71, 0xE7, 0xF7, 0xAC, 0xF2, 0xB5, 0x0E, 0xD1,  // q.......
                            /* 05C8 */  0x1F, 0xA3, 0x4D, 0x4C, 0xEA, 0xE9, 0xCB, 0x84,  // ..ML....
                            /* 05D0 */  0x68, 0xA3, 0x8C, 0x4A, 0x80, 0x06, 0x8E, 0x35,  // h..J...5
                            /* 05D8 */  0x90, 0x72, 0xCA, 0x88, 0xB0, 0xE1, 0xA2, 0xA7,  // .r......
                            /* 05E0 */  0xFE, 0xC5, 0xE8, 0xD2, 0x40, 0x4D, 0x78, 0x45,  // ....@MxE
                            /* 05E8 */  0xC9, 0xCD, 0x26, 0xEA, 0x63, 0xD6, 0x59, 0xBA,  // ..&.c.Y.
                            /* 05F0 */  0xF8, 0x5D, 0xB9, 0x68, 0x31, 0x7F, 0x9D, 0x58,  // .].h1..X
                            /* 05F8 */  0x35, 0xEC, 0xE4, 0xCD, 0x3C, 0x22, 0x16, 0xD6,  // 5...<"..
                            /* 0600 */  0x93                                             // .
                        }
                    })
                }
                Else
                {
                    Return (Package (0x01)
                    {
                        Buffer (0x05F4)
                        {
                            /* 0000 */  0xE5, 0x1F, 0x94, 0x00, 0x00, 0x00, 0x00, 0x02,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x40, 0x67, 0x64, 0x64, 0x76,  // ...@gddv
                            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x4F, 0x45, 0x4D, 0x20,  // ....OEM 
                            /* 0030 */  0x45, 0x78, 0x70, 0x6F, 0x72, 0x74, 0x65, 0x64,  // Exported
                            /* 0038 */  0x20, 0x44, 0x61, 0x74, 0x61, 0x56, 0x61, 0x75,  //  DataVau
                            /* 0040 */  0x6C, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // lt......
                            /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0068 */  0x00, 0x00, 0x00, 0x00, 0x74, 0x2E, 0x3A, 0x92,  // ....t.:.
                            /* 0070 */  0xCC, 0x9A, 0x1B, 0xF8, 0x8E, 0xA5, 0xC4, 0xF1,  // ........
                            /* 0078 */  0x77, 0xD2, 0x73, 0x36, 0x96, 0x95, 0x62, 0xFB,  // w.s6..b.
                            /* 0080 */  0x51, 0xD4, 0xEC, 0x9D, 0xAD, 0x9A, 0x35, 0x0D,  // Q.....5.
                            /* 0088 */  0x11, 0x5D, 0x55, 0x7B, 0x60, 0x05, 0x00, 0x00,  // .]U{`...
                            /* 0090 */  0x52, 0x45, 0x50, 0x4F, 0x5D, 0x00, 0x00, 0x00,  // REPO]...
                            /* 0098 */  0x01, 0x7E, 0x77, 0x00, 0x00, 0x00, 0x00, 0x00,  // .~w.....
                            /* 00A0 */  0x00, 0x00, 0x72, 0x87, 0xCD, 0xFF, 0x6D, 0x24,  // ..r...m$
                            /* 00A8 */  0x47, 0xDB, 0x3D, 0x24, 0x92, 0xB4, 0x16, 0x6F,  // G.=$...o
                            /* 00B0 */  0x45, 0xD8, 0xC3, 0xF5, 0x66, 0x14, 0x9F, 0x22,  // E...f.."
                            /* 00B8 */  0xD7, 0xF7, 0xDE, 0x67, 0x90, 0x9A, 0xA2, 0x0D,  // ...g....
                            /* 00C0 */  0x39, 0x25, 0xAD, 0xC3, 0x1A, 0xAD, 0x52, 0x0B,  // 9%....R.
                            /* 00C8 */  0x75, 0x38, 0xE1, 0xA4, 0x14, 0x42, 0x6B, 0xE5,  // u8...Bk.
                            /* 00D0 */  0xC9, 0xE8, 0x53, 0xE2, 0xB1, 0xA8, 0xE7, 0xEA,  // ..S.....
                            /* 00D8 */  0x48, 0xAF, 0x03, 0x3F, 0xFD, 0x43, 0xBA, 0xAE,  // H..?.C..
                            /* 00E0 */  0x17, 0x21, 0x8B, 0xBE, 0x8E, 0x35, 0x68, 0x58,  // .!...5hX
                            /* 00E8 */  0xF7, 0x81, 0x64, 0x68, 0x7E, 0x9F, 0x32, 0xAE,  // ..dh~.2.
                            /* 00F0 */  0xF2, 0x84, 0x88, 0x41, 0x31, 0x38, 0x9C, 0xB5,  // ...A18..
                            /* 00F8 */  0x13, 0x3F, 0x31, 0xC7, 0x0E, 0x00, 0x52, 0xCD,  // .?1...R.
                            /* 0100 */  0xA5, 0x95, 0x25, 0x3F, 0x68, 0xF7, 0x30, 0x1C,  // ..%?h.0.
                            /* 0108 */  0xCF, 0x53, 0x61, 0xD1, 0x25, 0x48, 0xAA, 0xA5,  // .Sa.%H..
                            /* 0110 */  0x34, 0x4D, 0x8D, 0xBD, 0x8C, 0x09, 0x16, 0x30,  // 4M.....0
                            /* 0118 */  0xAA, 0xE4, 0x24, 0x4D, 0x7E, 0x58, 0x75, 0x6E,  // ..$M~Xun
                            /* 0120 */  0x89, 0x4B, 0x5D, 0x72, 0xCC, 0x00, 0x8E, 0x83,  // .K]r....
                            /* 0128 */  0xC2, 0xBB, 0x3E, 0x0F, 0x0F, 0x42, 0x0C, 0xCE,  // ..>..B..
                            /* 0130 */  0xD4, 0x01, 0xD4, 0x9A, 0x59, 0x32, 0x2E, 0x11,  // ....Y2..
                            /* 0138 */  0xAC, 0x56, 0x17, 0x6E, 0x46, 0x95, 0xEB, 0xBA,  // .V.nF...
                            /* 0140 */  0xAA, 0xA5, 0xFB, 0xE8, 0x4C, 0x5F, 0x50, 0x4B,  // ....L_PK
                            /* 0148 */  0x21, 0xA2, 0xC6, 0xAD, 0x0E, 0x19, 0x27, 0xD4,  // !.....'.
                            /* 0150 */  0x65, 0x66, 0x10, 0x27, 0xBA, 0x55, 0x3C, 0x36,  // ef.'.U<6
                            /* 0158 */  0xC4, 0x35, 0x96, 0x0C, 0x18, 0x0A, 0xAD, 0x22,  // .5....."
                            /* 0160 */  0x7B, 0xCE, 0xC6, 0x1E, 0xE5, 0xE3, 0x5E, 0x07,  // {.....^.
                            /* 0168 */  0x69, 0x4C, 0x1C, 0x5F, 0x15, 0xDA, 0x9F, 0xE0,  // iL._....
                            /* 0170 */  0x48, 0x51, 0x8C, 0x36, 0x25, 0x47, 0x9D, 0xC0,  // HQ.6%G..
                            /* 0178 */  0xE1, 0x31, 0x41, 0x7D, 0x5A, 0xCD, 0x8F, 0x3C,  // .1A}Z..<
                            /* 0180 */  0xAA, 0x7A, 0xCB, 0x37, 0x3C, 0x2F, 0x48, 0x9F,  // .z.7</H.
                            /* 0188 */  0x75, 0x44, 0x06, 0x14, 0xE2, 0x89, 0x92, 0xB1,  // uD......
                            /* 0190 */  0xB1, 0x29, 0x92, 0xF5, 0xB3, 0xA2, 0x82, 0x9A,  // .)......
                            /* 0198 */  0x89, 0x1E, 0x75, 0xD6, 0x82, 0xFA, 0x5B, 0xEF,  // ..u...[.
                            /* 01A0 */  0x40, 0xD3, 0x37, 0xB6, 0x91, 0xC3, 0x81, 0x83,  // @.7.....
                            /* 01A8 */  0x57, 0xF9, 0x92, 0x63, 0xAF, 0xA9, 0x00, 0x76,  // W..c...v
                            /* 01B0 */  0xBB, 0x12, 0x6D, 0xBC, 0x9F, 0xFA, 0x3E, 0x84,  // ..m...>.
                            /* 01B8 */  0xEC, 0x07, 0x55, 0xCE, 0x72, 0xC1, 0x7A, 0x44,  // ..U.r.zD
                            /* 01C0 */  0x90, 0xE4, 0x3B, 0x6D, 0x66, 0xBF, 0xE4, 0x65,  // ..;mf..e
                            /* 01C8 */  0x06, 0x99, 0xD4, 0x4B, 0xCD, 0xF5, 0x63, 0xDE,  // ...K..c.
                            /* 01D0 */  0xF1, 0x79, 0xDB, 0x7D, 0x87, 0x18, 0x12, 0xE3,  // .y.}....
                            /* 01D8 */  0x41, 0xA9, 0x3D, 0xE5, 0x3B, 0x21, 0x9E, 0xD1,  // A.=.;!..
                            /* 01E0 */  0x35, 0x44, 0x5B, 0x39, 0x63, 0xC6, 0x80, 0xEB,  // 5D[9c...
                            /* 01E8 */  0x9F, 0xFC, 0x7E, 0x84, 0x83, 0x1D, 0x1F, 0xB7,  // ..~.....
                            /* 01F0 */  0xBC, 0x87, 0xE0, 0x0D, 0x48, 0x92, 0xD7, 0x0A,  // ....H...
                            /* 01F8 */  0xAC, 0x67, 0x70, 0x77, 0xB1, 0x66, 0x3F, 0xE9,  // .gpw.f?.
                            /* 0200 */  0x75, 0x4B, 0xD4, 0x1F, 0xAC, 0x2F, 0xA0, 0xD5,  // uK.../..
                            /* 0208 */  0xF6, 0x60, 0x03, 0x8B, 0xF6, 0xAF, 0x64, 0xE2,  // .`....d.
                            /* 0210 */  0x2C, 0xAB, 0x8D, 0x2A, 0xF7, 0xC4, 0x18, 0xEC,  // ,..*....
                            /* 0218 */  0x1B, 0x93, 0xC5, 0xC5, 0x68, 0xC9, 0xD1, 0xA4,  // ....h...
                            /* 0220 */  0xE8, 0xE4, 0x88, 0xE6, 0xC6, 0x87, 0xC2, 0x5D,  // .......]
                            /* 0228 */  0x1A, 0x6A, 0x24, 0x47, 0x6E, 0xAE, 0xD4, 0xB0,  // .j$Gn...
                            /* 0230 */  0x87, 0xF6, 0xF9, 0x95, 0x07, 0xBB, 0xEF, 0x59,  // .......Y
                            /* 0238 */  0x9C, 0x99, 0xFB, 0x2D, 0xD9, 0x57, 0xCA, 0x13,  // ...-.W..
                            /* 0240 */  0x3F, 0xC8, 0x00, 0x02, 0x66, 0x0C, 0xF4, 0x10,  // ?...f...
                            /* 0248 */  0xD9, 0x13, 0x65, 0xDC, 0xB6, 0x49, 0x3F, 0x1E,  // ..e..I?.
                            /* 0250 */  0x9D, 0x60, 0x35, 0xF2, 0x04, 0x54, 0xA7, 0xF8,  // .`5..T..
                            /* 0258 */  0x6B, 0x1B, 0x01, 0x5E, 0x0A, 0xA0, 0x5E, 0xE3,  // k..^..^.
                            /* 0260 */  0xF8, 0x25, 0xD0, 0x41, 0x07, 0x0E, 0xCE, 0xC3,  // .%.A....
                            /* 0268 */  0x65, 0x16, 0xF4, 0xCE, 0x9C, 0xF6, 0x0C, 0xE5,  // e.......
                            /* 0270 */  0xA9, 0xCB, 0x8D, 0xFC, 0xDC, 0xB0, 0x43, 0x7D,  // ......C}
                            /* 0278 */  0xB6, 0xD0, 0x1A, 0x4D, 0xE2, 0xBD, 0xE8, 0x25,  // ...M...%
                            /* 0280 */  0x06, 0x8B, 0x61, 0xC4, 0x40, 0xFB, 0xEB, 0xB8,  // ..a.@...
                            /* 0288 */  0x76, 0x82, 0xA1, 0xCF, 0x11, 0x55, 0xAD, 0x74,  // v....U.t
                            /* 0290 */  0x59, 0x68, 0x4B, 0x97, 0x62, 0xD6, 0xBC, 0xB3,  // YhK.b...
                            /* 0298 */  0x38, 0x87, 0x75, 0x47, 0x2A, 0xC2, 0x50, 0x80,  // 8.uG*.P.
                            /* 02A0 */  0xAA, 0x9D, 0xBF, 0x08, 0xE3, 0xEC, 0x4C, 0xC5,  // ......L.
                            /* 02A8 */  0x29, 0xDE, 0xE1, 0x7C, 0xBB, 0xE5, 0x7A, 0xDE,  // )..|..z.
                            /* 02B0 */  0x91, 0x34, 0x1C, 0x49, 0x3F, 0xE9, 0xFD, 0x8B,  // .4.I?...
                            /* 02B8 */  0xC9, 0xDE, 0xAA, 0x78, 0x81, 0x5B, 0xE2, 0x23,  // ...x.[.#
                            /* 02C0 */  0xAE, 0x96, 0x74, 0x5A, 0x33, 0x2D, 0x3D, 0x8A,  // ..tZ3-=.
                            /* 02C8 */  0xE1, 0xDE, 0xD0, 0xCC, 0x6A, 0x39, 0x7D, 0x94,  // ....j9}.
                            /* 02D0 */  0x86, 0xF0, 0xC0, 0x29, 0x96, 0x28, 0xF2, 0xE3,  // ...).(..
                            /* 02D8 */  0x78, 0x66, 0x41, 0x94, 0x9A, 0xEE, 0x68, 0x69,  // xfA...hi
                            /* 02E0 */  0x53, 0x7E, 0xC2, 0x33, 0x79, 0xE4, 0x54, 0xE6,  // S~.3y.T.
                            /* 02E8 */  0x37, 0xA2, 0xF0, 0xA0, 0x6D, 0x21, 0x62, 0xB5,  // 7...m!b.
                            /* 02F0 */  0xF5, 0x18, 0x64, 0x8E, 0x54, 0xEA, 0x2C, 0xFB,  // ..d.T.,.
                            /* 02F8 */  0x52, 0x71, 0x77, 0xB5, 0x77, 0x6C, 0xF5, 0x50,  // Rqw.wl.P
                            /* 0300 */  0x68, 0xD4, 0x03, 0xAF, 0x5B, 0x28, 0xA0, 0x0E,  // h...[(..
                            /* 0308 */  0x28, 0x98, 0xC7, 0xD8, 0x5F, 0x51, 0x19, 0xB4,  // (..._Q..
                            /* 0310 */  0x28, 0xB4, 0xE4, 0x37, 0x3A, 0x51, 0x5C, 0xD7,  // (..7:Q\.
                            /* 0318 */  0x38, 0xE8, 0xCB, 0xD0, 0x32, 0x96, 0xB0, 0x71,  // 8...2..q
                            /* 0320 */  0xB6, 0xC8, 0xFB, 0xC3, 0xBA, 0x56, 0x13, 0xF2,  // .....V..
                            /* 0328 */  0x18, 0x02, 0xAE, 0x4F, 0xEF, 0x43, 0x18, 0xFA,  // ...O.C..
                            /* 0330 */  0x5C, 0x5D, 0x85, 0x36, 0x0D, 0xA6, 0xBC, 0x1D,  // \].6....
                            /* 0338 */  0xD8, 0x1A, 0x78, 0xA5, 0xD9, 0x26, 0xA8, 0x79,  // ..x..&.y
                            /* 0340 */  0x69, 0x00, 0x20, 0x87, 0x45, 0x11, 0xB4, 0xC5,  // i. .E...
                            /* 0348 */  0x35, 0xFF, 0x91, 0x52, 0x49, 0x27, 0xDD, 0x37,  // 5..RI'.7
                            /* 0350 */  0x83, 0x75, 0x3D, 0x07, 0xB2, 0xE4, 0x29, 0x2D,  // .u=...)-
                            /* 0358 */  0xBB, 0x97, 0xE2, 0x06, 0xE5, 0x10, 0xBE, 0xAD,  // ........
                            /* 0360 */  0x5F, 0x71, 0x89, 0xE3, 0xF0, 0x84, 0x21, 0x46,  // _q....!F
                            /* 0368 */  0x74, 0x43, 0x11, 0xC9, 0x9C, 0xC1, 0x8B, 0xB4,  // tC......
                            /* 0370 */  0x62, 0x4D, 0x71, 0x0C, 0x77, 0x52, 0xF4, 0xEE,  // bMq.wR..
                            /* 0378 */  0x1D, 0x0C, 0x6D, 0xBA, 0xB6, 0xE4, 0x07, 0x35,  // ..m....5
                            /* 0380 */  0x88, 0x3D, 0x65, 0x72, 0x4D, 0xEA, 0xAB, 0xBA,  // .=erM...
                            /* 0388 */  0x7A, 0x74, 0x2A, 0x56, 0xA5, 0xBC, 0xB3, 0x9A,  // zt*V....
                            /* 0390 */  0x1D, 0x83, 0x51, 0xAF, 0xCA, 0x5B, 0x8A, 0x70,  // ..Q..[.p
                            /* 0398 */  0xD2, 0xA7, 0xA9, 0xAB, 0x1B, 0x1A, 0xAC, 0x74,  // .......t
                            /* 03A0 */  0xA5, 0x92, 0x6E, 0x2B, 0x57, 0xEE, 0x4D, 0x65,  // ..n+W.Me
                            /* 03A8 */  0x19, 0xBF, 0x39, 0x03, 0x3F, 0x0E, 0x44, 0xDB,  // ..9.?.D.
                            /* 03B0 */  0x8A, 0x02, 0x45, 0x1D, 0x1D, 0xB1, 0x41, 0x98,  // ..E...A.
                            /* 03B8 */  0x2C, 0xA9, 0x84, 0xE9, 0x9C, 0x14, 0x3D, 0xC6,  // ,.....=.
                            /* 03C0 */  0xF7, 0x26, 0x4B, 0xFE, 0x16, 0x94, 0x4C, 0xAE,  // .&K...L.
                            /* 03C8 */  0xB9, 0x30, 0x96, 0x0B, 0x79, 0xCF, 0xA9, 0xB1,  // .0..y...
                            /* 03D0 */  0x73, 0x00, 0x63, 0xC6, 0xCF, 0x2F, 0x11, 0x05,  // s.c../..
                            /* 03D8 */  0x5C, 0x1A, 0x0B, 0xE2, 0x18, 0x4D, 0xFA, 0x87,  // \....M..
                            /* 03E0 */  0x9A, 0xE4, 0x68, 0x61, 0x67, 0x52, 0xD0, 0xA6,  // ..hagR..
                            /* 03E8 */  0x21, 0xD7, 0x19, 0x29, 0xEF, 0x43, 0x85, 0xB7,  // !..).C..
                            /* 03F0 */  0xFF, 0xB8, 0x1B, 0xD8, 0xE0, 0xFB, 0x8C, 0x99,  // ........
                            /* 03F8 */  0xEE, 0x69, 0x39, 0x51, 0x16, 0x87, 0xD1, 0x8C,  // .i9Q....
                            /* 0400 */  0x08, 0x21, 0xC0, 0xB9, 0xF3, 0xCE, 0x7E, 0x9E,  // .!....~.
                            /* 0408 */  0x46, 0x72, 0x63, 0xCB, 0xC7, 0x8D, 0x60, 0xAC,  // Frc...`.
                            /* 0410 */  0x8C, 0x26, 0xA4, 0x7D, 0xFD, 0xCD, 0x41, 0x4A,  // .&.}..AJ
                            /* 0418 */  0xD2, 0x67, 0xF1, 0x55, 0xBE, 0x74, 0x80, 0xBB,  // .g.U.t..
                            /* 0420 */  0xFD, 0x99, 0xC2, 0xE2, 0x5E, 0x32, 0x82, 0x5A,  // ....^2.Z
                            /* 0428 */  0xF5, 0x0D, 0xDB, 0x20, 0xC5, 0x23, 0xDD, 0xDF,  // ... .#..
                            /* 0430 */  0x41, 0x9C, 0x69, 0xE0, 0xCE, 0x27, 0x62, 0x88,  // A.i..'b.
                            /* 0438 */  0xCB, 0x0B, 0xEF, 0xB4, 0x51, 0xC8, 0x7F, 0x08,  // ....Q...
                            /* 0440 */  0x4B, 0xFB, 0x6F, 0x9A, 0x79, 0x6C, 0x50, 0x5A,  // K.o.ylPZ
                            /* 0448 */  0x91, 0x95, 0x95, 0xA6, 0xC1, 0x5F, 0x63, 0x48,  // ....._cH
                            /* 0450 */  0xDA, 0xA9, 0xC6, 0xC3, 0x4B, 0x16, 0xA2, 0x09,  // ....K...
                            /* 0458 */  0x5C, 0x65, 0xBE, 0xEE, 0x14, 0x5D, 0x23, 0xD1,  // \e...]#.
                            /* 0460 */  0x76, 0x29, 0x66, 0x5C, 0x3E, 0xF2, 0xC4, 0xC5,  // v)f\>...
                            /* 0468 */  0xD2, 0xAF, 0x7A, 0xC1, 0x17, 0x57, 0xC3, 0xA5,  // ..z..W..
                            /* 0470 */  0x25, 0xBD, 0xD3, 0x3A, 0x3E, 0xFE, 0x07, 0xFC,  // %..:>...
                            /* 0478 */  0x85, 0x68, 0x10, 0xF1, 0x60, 0x3C, 0x3B, 0x78,  // .h..`<;x
                            /* 0480 */  0x51, 0x00, 0xF2, 0xDC, 0xC2, 0x34, 0x26, 0x12,  // Q....4&.
                            /* 0488 */  0xEF, 0xDE, 0x0F, 0x0A, 0xF2, 0x0A, 0x54, 0xD4,  // ......T.
                            /* 0490 */  0x66, 0xDD, 0x08, 0x8F, 0xD3, 0x41, 0xF0, 0xDC,  // f....A..
                            /* 0498 */  0x0B, 0xBB, 0x76, 0xAB, 0xFB, 0xD4, 0x26, 0xE7,  // ..v...&.
                            /* 04A0 */  0x2B, 0x5C, 0x3B, 0x41, 0x8B, 0xBF, 0xB0, 0x82,  // +\;A....
                            /* 04A8 */  0x67, 0x29, 0xBB, 0x0A, 0x9E, 0xDD, 0x3D, 0x7E,  // g)....=~
                            /* 04B0 */  0xDE, 0x42, 0x89, 0x25, 0x41, 0xE4, 0x5C, 0x68,  // .B.%A.\h
                            /* 04B8 */  0x0D, 0x99, 0x33, 0xC8, 0x8B, 0x71, 0xFF, 0x67,  // ..3..q.g
                            /* 04C0 */  0xE1, 0x1D, 0xAC, 0xCA, 0x2B, 0x56, 0x04, 0x43,  // ....+V.C
                            /* 04C8 */  0xFE, 0xFE, 0x50, 0x88, 0x90, 0x86, 0xB5, 0xFA,  // ..P.....
                            /* 04D0 */  0xDC, 0xE2, 0x83, 0x34, 0xB1, 0xD0, 0x77, 0xB8,  // ...4..w.
                            /* 04D8 */  0x23, 0x38, 0x5D, 0xBF, 0x99, 0x7E, 0xCD, 0x5E,  // #8]..~.^
                            /* 04E0 */  0x8B, 0x95, 0xBC, 0x0F, 0x1D, 0xD2, 0xC9, 0xE4,  // ........
                            /* 04E8 */  0x41, 0x84, 0xA8, 0x89, 0x09, 0xBD, 0xB1, 0x40,  // A......@
                            /* 04F0 */  0x34, 0xDF, 0x67, 0x6F, 0xA1, 0x04, 0x69, 0xA2,  // 4.go..i.
                            /* 04F8 */  0xBD, 0xD1, 0x90, 0xFD, 0xBA, 0xF9, 0xA3, 0x96,  // ........
                            /* 0500 */  0x14, 0x61, 0xFE, 0x5A, 0x2E, 0x06, 0x87, 0x03,  // .a.Z....
                            /* 0508 */  0x72, 0xAB, 0x23, 0x5E, 0xE8, 0x98, 0xD1, 0xFE,  // r.#^....
                            /* 0510 */  0x3E, 0x4C, 0xF0, 0xF5, 0x60, 0x67, 0xB4, 0x91,  // >L..`g..
                            /* 0518 */  0xBE, 0xC6, 0x50, 0xCA, 0x95, 0x77, 0x50, 0xDE,  // ..P..wP.
                            /* 0520 */  0x47, 0x1B, 0x69, 0xBD, 0xEB, 0xED, 0x7A, 0x52,  // G.i...zR
                            /* 0528 */  0xA1, 0x6C, 0xC7, 0x17, 0x45, 0x23, 0xE7, 0xA4,  // .l..E#..
                            /* 0530 */  0x3F, 0xFB, 0x17, 0x3A, 0xC6, 0x5E, 0xC9, 0xEA,  // ?..:.^..
                            /* 0538 */  0x8F, 0x48, 0xCA, 0x60, 0xA7, 0x4E, 0xDF, 0xC6,  // .H.`.N..
                            /* 0540 */  0xD6, 0x69, 0x15, 0x70, 0xD1, 0xF0, 0xC0, 0xD1,  // .i.p....
                            /* 0548 */  0x3C, 0x61, 0x2C, 0xB8, 0x28, 0x20, 0xF9, 0x30,  // <a,.( .0
                            /* 0550 */  0x68, 0x9D, 0x71, 0x13, 0x3B, 0x98, 0xE2, 0xEB,  // h.q.;...
                            /* 0558 */  0xE3, 0xE5, 0x6D, 0x61, 0x1E, 0x4F, 0x8B, 0xD2,  // ..ma.O..
                            /* 0560 */  0x46, 0xBD, 0x0C, 0x14, 0xA4, 0xFE, 0x7D, 0xB5,  // F.....}.
                            /* 0568 */  0xC0, 0x70, 0x70, 0x86, 0xC8, 0x18, 0xCA, 0x78,  // .pp....x
                            /* 0570 */  0x3A, 0xD6, 0x71, 0xEA, 0xB9, 0x33, 0x15, 0x1E,  // :.q..3..
                            /* 0578 */  0xEE, 0xC8, 0x9C, 0x3E, 0x4E, 0x21, 0xEA, 0x7C,  // ...>N!.|
                            /* 0580 */  0xB8, 0xBF, 0xC4, 0xA7, 0x63, 0x56, 0x8A, 0x2D,  // ....cV.-
                            /* 0588 */  0xD7, 0xAD, 0x39, 0x4F, 0x82, 0x25, 0xA0, 0x12,  // ..9O.%..
                            /* 0590 */  0x3D, 0x59, 0xEB, 0x96, 0xCC, 0x96, 0x18, 0xEA,  // =Y......
                            /* 0598 */  0xA1, 0x29, 0x71, 0x54, 0x49, 0x18, 0x1E, 0x23,  // .)qTI..#
                            /* 05A0 */  0x1C, 0x21, 0x09, 0x00, 0x9F, 0x35, 0x7A, 0x94,  // .!...5z.
                            /* 05A8 */  0x57, 0x69, 0x3C, 0x02, 0x00, 0xDC, 0x8B, 0x49,  // Wi<....I
                            /* 05B0 */  0x80, 0xDD, 0xA2, 0x6C, 0xED, 0xE5, 0x19, 0xAE,  // ...l....
                            /* 05B8 */  0x81, 0xFD, 0xB6, 0xD7, 0xC7, 0x32, 0xB9, 0x11,  // .....2..
                            /* 05C0 */  0x6D, 0x97, 0x25, 0xA8, 0x64, 0x25, 0x8F, 0xF0,  // m.%.d%..
                            /* 05C8 */  0xDA, 0xF1, 0x63, 0x24, 0x2C, 0x74, 0xC3, 0x6D,  // ..c$,t.m
                            /* 05D0 */  0xC2, 0x3C, 0x7D, 0x4F, 0xCA, 0xCC, 0x09, 0x10,  // .<}O....
                            /* 05D8 */  0x08, 0x9A, 0xCC, 0xEB, 0xFB, 0x50, 0x3B, 0xA6,  // .....P;.
                            /* 05E0 */  0x74, 0x13, 0x80, 0x2E, 0xA9, 0xDD, 0x57, 0x77,  // t.....Ww
                            /* 05E8 */  0x62, 0x59, 0x76, 0x5E, 0x40, 0x07, 0x08, 0x51,  // bYv^@..Q
                            /* 05F0 */  0x6A, 0x78, 0x3F, 0x70                           // jx?p
                        }
                    })
                }
            }
            ElseIf ((MCSK == 0x03))
            {
                If ((GTYP == 0x02))
                {
                    Return (Package (0x01)
                    {
                        Buffer (0x05FA)
                        {
                            /* 0000 */  0xE5, 0x1F, 0x94, 0x00, 0x00, 0x00, 0x00, 0x02,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x40, 0x67, 0x64, 0x64, 0x76,  // ...@gddv
                            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x4F, 0x45, 0x4D, 0x20,  // ....OEM 
                            /* 0030 */  0x45, 0x78, 0x70, 0x6F, 0x72, 0x74, 0x65, 0x64,  // Exported
                            /* 0038 */  0x20, 0x44, 0x61, 0x74, 0x61, 0x56, 0x61, 0x75,  //  DataVau
                            /* 0040 */  0x6C, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // lt......
                            /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0068 */  0x00, 0x00, 0x00, 0x00, 0x61, 0x77, 0x4A, 0x57,  // ....awJW
                            /* 0070 */  0x16, 0x1C, 0x91, 0xBA, 0x1B, 0x17, 0x67, 0xBE,  // ......g.
                            /* 0078 */  0x60, 0x1F, 0xE3, 0xA1, 0x97, 0x8F, 0x9D, 0xC9,  // `.......
                            /* 0080 */  0x79, 0x6D, 0x44, 0x90, 0x87, 0xD2, 0x44, 0xBC,  // ymD...D.
                            /* 0088 */  0x41, 0xF9, 0xF4, 0x40, 0x66, 0x05, 0x00, 0x00,  // A..@f...
                            /* 0090 */  0x52, 0x45, 0x50, 0x4F, 0x5D, 0x00, 0x00, 0x00,  // REPO]...
                            /* 0098 */  0x01, 0x76, 0x77, 0x00, 0x00, 0x00, 0x00, 0x00,  // .vw.....
                            /* 00A0 */  0x00, 0x00, 0x72, 0x87, 0xCD, 0xFF, 0x6D, 0x24,  // ..r...m$
                            /* 00A8 */  0x47, 0xDB, 0x3D, 0x24, 0x92, 0xB4, 0x16, 0x6F,  // G.=$...o
                            /* 00B0 */  0x45, 0xD8, 0xC3, 0xF5, 0x66, 0x14, 0x9F, 0x22,  // E...f.."
                            /* 00B8 */  0xD7, 0xF7, 0xDE, 0x67, 0x90, 0x9A, 0xA2, 0x0D,  // ...g....
                            /* 00C0 */  0x39, 0x25, 0xAD, 0xC3, 0x1A, 0xAD, 0x52, 0x0B,  // 9%....R.
                            /* 00C8 */  0x75, 0x38, 0xE1, 0xA4, 0x14, 0x42, 0x46, 0x9B,  // u8...BF.
                            /* 00D0 */  0x99, 0x1A, 0x8C, 0x6C, 0x47, 0x2E, 0x8B, 0xEC,  // ...lG...
                            /* 00D8 */  0x10, 0x0A, 0x57, 0x5B, 0xBA, 0x24, 0x12, 0xA0,  // ..W[.$..
                            /* 00E0 */  0x69, 0x6C, 0xD4, 0x5B, 0xDE, 0xE2, 0xB9, 0xC6,  // il.[....
                            /* 00E8 */  0xEB, 0x61, 0xCA, 0x7E, 0x1A, 0x96, 0xB3, 0x15,  // .a.~....
                            /* 00F0 */  0x6E, 0x97, 0xA1, 0xAB, 0x48, 0xA9, 0xF2, 0xB5,  // n...H...
                            /* 00F8 */  0xC8, 0xDE, 0x11, 0x2B, 0xB5, 0xE3, 0x08, 0x70,  // ...+...p
                            /* 0100 */  0xDA, 0xD7, 0x1E, 0xE2, 0xAC, 0x38, 0xB3, 0x82,  // .....8..
                            /* 0108 */  0x65, 0xCB, 0x8B, 0x4E, 0x77, 0x85, 0xD3, 0x09,  // e..Nw...
                            /* 0110 */  0x57, 0xA9, 0x17, 0xD9, 0x66, 0x81, 0x85, 0xAD,  // W...f...
                            /* 0118 */  0x5C, 0xED, 0xEA, 0x5F, 0xEB, 0x0A, 0xF3, 0x1E,  // \.._....
                            /* 0120 */  0xBE, 0x01, 0x95, 0xB3, 0xE3, 0xC4, 0x6D, 0x7C,  // ......m|
                            /* 0128 */  0xED, 0x37, 0x72, 0xE6, 0x29, 0xE9, 0xCD, 0x58,  // .7r.)..X
                            /* 0130 */  0xF4, 0x6D, 0xB5, 0x6E, 0xA0, 0x88, 0xA4, 0xCE,  // .m.n....
                            /* 0138 */  0x24, 0x6B, 0xA4, 0xE0, 0x66, 0x2F, 0x93, 0xAB,  // $k..f/..
                            /* 0140 */  0x65, 0x43, 0x33, 0xE0, 0xCF, 0x8B, 0x97, 0x79,  // eC3....y
                            /* 0148 */  0x68, 0xF6, 0xD4, 0x6D, 0x86, 0x57, 0x94, 0xE1,  // h..m.W..
                            /* 0150 */  0x3F, 0x88, 0xE2, 0x94, 0x27, 0x47, 0x29, 0x15,  // ?...'G).
                            /* 0158 */  0xB4, 0xAC, 0xE9, 0xF4, 0x38, 0x12, 0x7E, 0x10,  // ....8.~.
                            /* 0160 */  0x22, 0x48, 0x50, 0x46, 0x0B, 0x64, 0x35, 0xCB,  // "HPF.d5.
                            /* 0168 */  0xE5, 0x91, 0xE6, 0xF9, 0x58, 0xDB, 0xE6, 0xED,  // ....X...
                            /* 0170 */  0x79, 0xEC, 0xC9, 0xDB, 0x9A, 0x86, 0x66, 0xA7,  // y.....f.
                            /* 0178 */  0xED, 0x39, 0x74, 0x6C, 0x19, 0xBA, 0xD2, 0x48,  // .9tl...H
                            /* 0180 */  0x92, 0x85, 0x73, 0x95, 0x85, 0x8E, 0x24, 0x49,  // ..s...$I
                            /* 0188 */  0x58, 0x43, 0x46, 0x47, 0xE3, 0xDF, 0x71, 0xA3,  // XCFG..q.
                            /* 0190 */  0xC5, 0x79, 0x44, 0xBC, 0xD4, 0xFA, 0x11, 0x08,  // .yD.....
                            /* 0198 */  0xF0, 0x8F, 0x28, 0xD9, 0x95, 0x20, 0x78, 0x96,  // ..(.. x.
                            /* 01A0 */  0xBB, 0x1C, 0x8C, 0xDA, 0x09, 0xFB, 0xEE, 0x32,  // .......2
                            /* 01A8 */  0x12, 0xE9, 0x4C, 0xAB, 0xD0, 0x3C, 0xC0, 0x4C,  // ..L..<.L
                            /* 01B0 */  0x47, 0x9A, 0x60, 0xE3, 0x3B, 0x47, 0x7E, 0xE7,  // G.`.;G~.
                            /* 01B8 */  0x8D, 0x97, 0x02, 0x97, 0xA2, 0xC9, 0xA5, 0xBE,  // ........
                            /* 01C0 */  0x69, 0x9C, 0x16, 0xA5, 0x07, 0x73, 0x37, 0xAE,  // i....s7.
                            /* 01C8 */  0x2C, 0xF8, 0xE0, 0xA7, 0xF4, 0xCF, 0xC8, 0x79,  // ,......y
                            /* 01D0 */  0x00, 0x1E, 0x39, 0xAE, 0x5B, 0xC4, 0xB2, 0xCE,  // ..9.[...
                            /* 01D8 */  0x0F, 0xE1, 0x8F, 0x05, 0xF3, 0x76, 0x70, 0xDD,  // .....vp.
                            /* 01E0 */  0xC3, 0x08, 0x06, 0x55, 0x11, 0x62, 0xD5, 0x02,  // ...U.b..
                            /* 01E8 */  0xB2, 0x7B, 0xA4, 0x57, 0x37, 0xC1, 0xE6, 0x30,  // .{.W7..0
                            /* 01F0 */  0x30, 0x81, 0xD2, 0x05, 0x9D, 0xA0, 0x04, 0xF1,  // 0.......
                            /* 01F8 */  0x78, 0xFA, 0x08, 0x8C, 0x39, 0x16, 0x3C, 0xDF,  // x...9.<.
                            /* 0200 */  0x4A, 0xEA, 0x77, 0x58, 0xFF, 0xFE, 0xBD, 0x50,  // J.wX...P
                            /* 0208 */  0xDD, 0xCD, 0x7F, 0xD0, 0x6C, 0xA3, 0xFC, 0x29,  // ....l..)
                            /* 0210 */  0x5D, 0xEB, 0xDC, 0x9F, 0x3D, 0xFC, 0x3A, 0x3B,  // ]...=.:;
                            /* 0218 */  0xB1, 0xBC, 0xA8, 0x1A, 0x1B, 0x3D, 0xBA, 0xD1,  // .....=..
                            /* 0220 */  0xAF, 0xAF, 0xAE, 0x7A, 0xAD, 0x82, 0x7F, 0x55,  // ...z...U
                            /* 0228 */  0x0C, 0x03, 0x8D, 0xFA, 0x35, 0x2F, 0x16, 0xAE,  // ....5/..
                            /* 0230 */  0x1C, 0xE5, 0xFA, 0xF8, 0x7F, 0x3A, 0xCE, 0xF5,  // .....:..
                            /* 0238 */  0xE6, 0x36, 0x70, 0xCE, 0x35, 0x6B, 0x1B, 0xCA,  // .6p.5k..
                            /* 0240 */  0xE6, 0xEF, 0x5C, 0x23, 0xAD, 0x6B, 0xFE, 0x29,  // ..\#.k.)
                            /* 0248 */  0xB2, 0xD6, 0x13, 0x53, 0x09, 0xB8, 0x93, 0x6F,  // ...S...o
                            /* 0250 */  0x42, 0x12, 0xD0, 0x6D, 0x96, 0xEF, 0x37, 0x84,  // B..m..7.
                            /* 0258 */  0xFE, 0xC9, 0x73, 0x6E, 0x35, 0x61, 0xDA, 0x05,  // ..sn5a..
                            /* 0260 */  0x74, 0xEA, 0xA8, 0xD3, 0x20, 0xE4, 0xDF, 0x4A,  // t... ..J
                            /* 0268 */  0xE2, 0x31, 0x2D, 0x11, 0x64, 0x8E, 0x8E, 0xEF,  // .1-.d...
                            /* 0270 */  0x99, 0xCB, 0x21, 0x59, 0x4D, 0x49, 0xE3, 0xF7,  // ..!YMI..
                            /* 0278 */  0x6A, 0x97, 0xE1, 0x87, 0xCE, 0x30, 0xA5, 0x81,  // j....0..
                            /* 0280 */  0xD3, 0xCA, 0x59, 0x62, 0x9A, 0x28, 0x9A, 0x21,  // ..Yb.(.!
                            /* 0288 */  0x48, 0xD0, 0x1B, 0xA0, 0xBF, 0xB8, 0xFE, 0x7F,  // H.......
                            /* 0290 */  0xD6, 0x8C, 0x4A, 0x46, 0x1A, 0x1A, 0x85, 0xD2,  // ..JF....
                            /* 0298 */  0xB7, 0x5C, 0xA6, 0xC4, 0x8F, 0x80, 0x0A, 0x86,  // .\......
                            /* 02A0 */  0x29, 0xFF, 0xEC, 0x4F, 0x7E, 0x1B, 0xC2, 0xF2,  // )..O~...
                            /* 02A8 */  0x8E, 0x01, 0x49, 0x08, 0x06, 0xED, 0xE1, 0x44,  // ..I....D
                            /* 02B0 */  0x02, 0xF6, 0x99, 0xC2, 0xE1, 0xB4, 0x24, 0x26,  // ......$&
                            /* 02B8 */  0x57, 0x7F, 0xD9, 0xA1, 0x4C, 0x57, 0xD5, 0xBD,  // W...LW..
                            /* 02C0 */  0x39, 0x33, 0x1F, 0xE5, 0x4F, 0xA4, 0x85, 0x1F,  // 93..O...
                            /* 02C8 */  0x4C, 0xDE, 0x67, 0xA8, 0x17, 0x16, 0x02, 0x41,  // L.g....A
                            /* 02D0 */  0x84, 0x30, 0x20, 0xF8, 0x2D, 0x5D, 0xD5, 0x8B,  // .0 .-]..
                            /* 02D8 */  0x2F, 0xE4, 0x23, 0xBB, 0x3F, 0xCA, 0x1B, 0xCA,  // /.#.?...
                            /* 02E0 */  0xD5, 0xCE, 0x84, 0x45, 0x47, 0xCB, 0x7A, 0xC2,  // ...EG.z.
                            /* 02E8 */  0xE9, 0x2D, 0x40, 0x31, 0xD5, 0x43, 0xCB, 0x41,  // .-@1.C.A
                            /* 02F0 */  0xD4, 0x9B, 0x17, 0x85, 0xF7, 0x55, 0xE4, 0xDD,  // .....U..
                            /* 02F8 */  0x59, 0x34, 0xE9, 0xA5, 0x91, 0x22, 0x9D, 0xC4,  // Y4..."..
                            /* 0300 */  0xB1, 0x4F, 0xDC, 0x6C, 0x51, 0x68, 0x5B, 0xC8,  // .O.lQh[.
                            /* 0308 */  0x4F, 0x0C, 0x00, 0x15, 0xAC, 0xF2, 0xAD, 0xBF,  // O.......
                            /* 0310 */  0xEF, 0xC8, 0xDE, 0x6C, 0x72, 0x72, 0x01, 0xC5,  // ...lrr..
                            /* 0318 */  0x0F, 0x0E, 0x6E, 0xEE, 0x9C, 0x8C, 0x21, 0xAB,  // ..n...!.
                            /* 0320 */  0xF0, 0x77, 0xCB, 0xD1, 0x7A, 0x65, 0x46, 0x27,  // .w..zeF'
                            /* 0328 */  0x6E, 0x1C, 0xCB, 0xD0, 0x13, 0x45, 0x38, 0xEB,  // n....E8.
                            /* 0330 */  0x2B, 0x99, 0xC2, 0x5B, 0x24, 0xC5, 0x8E, 0x4D,  // +..[$..M
                            /* 0338 */  0x4D, 0x57, 0xA2, 0x2C, 0xFB, 0x7C, 0xAD, 0x88,  // MW.,.|..
                            /* 0340 */  0xA5, 0x49, 0xFA, 0xC8, 0xD1, 0xAF, 0x52, 0x41,  // .I....RA
                            /* 0348 */  0x19, 0xA0, 0x20, 0xA3, 0xF1, 0x3D, 0x2F, 0x7B,  // .. ..=/{
                            /* 0350 */  0x16, 0xEC, 0x27, 0xD7, 0xC5, 0x8E, 0x26, 0xFB,  // ..'...&.
                            /* 0358 */  0x3B, 0x88, 0x40, 0x18, 0xD5, 0xA0, 0xD2, 0x02,  // ;.@.....
                            /* 0360 */  0x5E, 0xEF, 0x0A, 0xD5, 0x09, 0x64, 0x5D, 0x2F,  // ^....d]/
                            /* 0368 */  0x80, 0xFB, 0xB0, 0xF3, 0xCA, 0x44, 0xEC, 0x4F,  // .....D.O
                            /* 0370 */  0x53, 0x44, 0x53, 0x58, 0xBE, 0xD1, 0xF3, 0x00,  // SDSX....
                            /* 0378 */  0x29, 0xAA, 0x0F, 0x2C, 0x79, 0xD2, 0xA9, 0xFE,  // )..,y...
                            /* 0380 */  0xB2, 0x82, 0x69, 0x4F, 0x83, 0xAA, 0xB5, 0x07,  // ..iO....
                            /* 0388 */  0x50, 0xBA, 0x92, 0xCB, 0xCB, 0x0F, 0xA4, 0x43,  // P......C
                            /* 0390 */  0x70, 0x26, 0x4A, 0xFF, 0xA4, 0xC6, 0x18, 0xCA,  // p&J.....
                            /* 0398 */  0x1B, 0x20, 0x89, 0x10, 0x68, 0x43, 0xF6, 0x0A,  // . ..hC..
                            /* 03A0 */  0x47, 0xEA, 0x76, 0x57, 0x24, 0x7F, 0x4E, 0x0D,  // G.vW$.N.
                            /* 03A8 */  0xF2, 0x3A, 0xEB, 0x68, 0x26, 0x15, 0xC5, 0xC1,  // .:.h&...
                            /* 03B0 */  0x48, 0x57, 0x5A, 0xA7, 0xC6, 0x65, 0x0B, 0x5E,  // HWZ..e.^
                            /* 03B8 */  0x89, 0x10, 0xCB, 0x8A, 0x6C, 0xDF, 0xC5, 0x76,  // ....l..v
                            /* 03C0 */  0x4C, 0xF7, 0xFD, 0x72, 0x0E, 0x27, 0x42, 0xFB,  // L..r.'B.
                            /* 03C8 */  0x85, 0xB3, 0x15, 0x83, 0xDE, 0xAB, 0xEF, 0xA7,  // ........
                            /* 03D0 */  0xA9, 0xAB, 0xED, 0xBA, 0x28, 0x9B, 0x76, 0x91,  // ....(.v.
                            /* 03D8 */  0x84, 0xBD, 0xDC, 0x75, 0x44, 0x0D, 0x2F, 0x2A,  // ...uD./*
                            /* 03E0 */  0xF0, 0x41, 0x66, 0x3B, 0x68, 0xB4, 0xB2, 0x6F,  // .Af;h..o
                            /* 03E8 */  0x3B, 0xC1, 0x58, 0x01, 0x34, 0xBC, 0xDD, 0xB2,  // ;.X.4...
                            /* 03F0 */  0x4D, 0x99, 0x72, 0x54, 0xF8, 0x8E, 0x49, 0x6D,  // M.rT..Im
                            /* 03F8 */  0xAA, 0x75, 0x4F, 0x93, 0x8D, 0x5C, 0x1D, 0xAB,  // .uO..\..
                            /* 0400 */  0x4D, 0x12, 0x64, 0xED, 0xB4, 0x9D, 0xC7, 0xAC,  // M.d.....
                            /* 0408 */  0xC0, 0x8C, 0x9F, 0x0E, 0xF2, 0x23, 0xA9, 0x68,  // .....#.h
                            /* 0410 */  0xB6, 0xE5, 0x22, 0x19, 0x26, 0xDD, 0x99, 0x6E,  // ..".&..n
                            /* 0418 */  0x48, 0x1E, 0x7D, 0x82, 0x02, 0xB0, 0x06, 0xBE,  // H.}.....
                            /* 0420 */  0xC5, 0xD7, 0xBF, 0xC0, 0x5F, 0x60, 0x7C, 0x20,  // ...._`| 
                            /* 0428 */  0x01, 0x28, 0x61, 0x79, 0xCB, 0x52, 0xE7, 0x69,  // .(ay.R.i
                            /* 0430 */  0x2F, 0xFF, 0x6A, 0x81, 0xBF, 0xFC, 0x4D, 0xCC,  // /.j...M.
                            /* 0438 */  0xFE, 0x58, 0x39, 0xBA, 0xAD, 0x34, 0x83, 0x01,  // .X9..4..
                            /* 0440 */  0x27, 0x37, 0x12, 0x3D, 0xCD, 0xC5, 0x97, 0xEB,  // '7.=....
                            /* 0448 */  0x5A, 0x19, 0xE6, 0x35, 0xEF, 0x90, 0x00, 0xE5,  // Z..5....
                            /* 0450 */  0x9B, 0xE0, 0x3E, 0xC5, 0x09, 0x2B, 0x60, 0xE0,  // ..>..+`.
                            /* 0458 */  0x45, 0xF1, 0x39, 0x87, 0xA4, 0xE1, 0xC7, 0xB7,  // E.9.....
                            /* 0460 */  0x2F, 0x19, 0x11, 0xC6, 0x04, 0xA0, 0xF0, 0x7C,  // /......|
                            /* 0468 */  0x7C, 0x86, 0xA5, 0x4C, 0xBA, 0x37, 0x5B, 0x3D,  // |..L.7[=
                            /* 0470 */  0x49, 0xBD, 0x2C, 0xDB, 0x03, 0xDA, 0x3A, 0x89,  // I.,...:.
                            /* 0478 */  0x38, 0xAC, 0x56, 0xBD, 0x93, 0x8F, 0xD6, 0xFF,  // 8.V.....
                            /* 0480 */  0x85, 0x9A, 0x32, 0x26, 0x6A, 0x6F, 0xC9, 0x0E,  // ..2&jo..
                            /* 0488 */  0x8E, 0xEE, 0x96, 0x2B, 0x33, 0x38, 0x56, 0xE4,  // ...+38V.
                            /* 0490 */  0x96, 0xDB, 0xDC, 0xAB, 0x1E, 0x3F, 0x2F, 0x3A,  // .....?/:
                            /* 0498 */  0xBF, 0x88, 0x87, 0x2E, 0xF0, 0xFE, 0xD1, 0x32,  // .......2
                            /* 04A0 */  0x91, 0x9D, 0x73, 0x7A, 0xD1, 0x07, 0x28, 0x2B,  // ..sz..(+
                            /* 04A8 */  0x13, 0x17, 0xF9, 0x71, 0xA6, 0xCD, 0x11, 0x6F,  // ...q...o
                            /* 04B0 */  0x02, 0x7A, 0xD5, 0xFB, 0xB7, 0xCE, 0x86, 0x00,  // .z......
                            /* 04B8 */  0xE2, 0x80, 0x99, 0xAD, 0x41, 0x9F, 0x62, 0x59,  // ....A.bY
                            /* 04C0 */  0x39, 0x57, 0xF9, 0xC8, 0xC7, 0x30, 0xA9, 0x97,  // 9W...0..
                            /* 04C8 */  0x0B, 0xE6, 0xDF, 0xF9, 0x42, 0x3D, 0x0D, 0xB2,  // ....B=..
                            /* 04D0 */  0xF9, 0xE8, 0xE0, 0xF4, 0xAD, 0x32, 0x64, 0x23,  // .....2d#
                            /* 04D8 */  0x94, 0xE4, 0x44, 0x5B, 0x01, 0xD0, 0x55, 0x83,  // ..D[..U.
                            /* 04E0 */  0x60, 0x1F, 0xD4, 0xD5, 0x27, 0x8E, 0x40, 0xA7,  // `...'.@.
                            /* 04E8 */  0x2F, 0x3C, 0xC1, 0xA9, 0x25, 0x57, 0xDB, 0x72,  // /<..%W.r
                            /* 04F0 */  0x52, 0xAF, 0x9D, 0xDD, 0xCE, 0xC6, 0x98, 0x29,  // R......)
                            /* 04F8 */  0xA9, 0x61, 0x80, 0x00, 0x7C, 0x89, 0x2A, 0x17,  // .a..|.*.
                            /* 0500 */  0xC5, 0xDD, 0x90, 0x58, 0xB1, 0x0C, 0xE2, 0x25,  // ...X...%
                            /* 0508 */  0x3E, 0x17, 0xF5, 0xBA, 0x14, 0x7F, 0x25, 0x81,  // >.....%.
                            /* 0510 */  0x11, 0x78, 0xAF, 0x53, 0x68, 0xDD, 0xA8, 0xD5,  // .x.Sh...
                            /* 0518 */  0xB4, 0xF6, 0x7F, 0xE7, 0xBD, 0x64, 0x86, 0x3B,  // .....d.;
                            /* 0520 */  0x96, 0x66, 0xF2, 0xBC, 0xFD, 0x64, 0x96, 0xEE,  // .f...d..
                            /* 0528 */  0x84, 0x0A, 0xDA, 0xFF, 0x46, 0xB8, 0x58, 0x84,  // ....F.X.
                            /* 0530 */  0xDF, 0xDC, 0x64, 0x7F, 0xA4, 0xD2, 0xBE, 0x80,  // ..d.....
                            /* 0538 */  0x62, 0x0E, 0x12, 0x68, 0xC9, 0x85, 0x38, 0x59,  // b..h..8Y
                            /* 0540 */  0x91, 0x68, 0x3E, 0x8A, 0xCF, 0x2F, 0x60, 0xCF,  // .h>../`.
                            /* 0548 */  0x85, 0xC2, 0x7D, 0xA4, 0xAF, 0x7D, 0x00, 0x19,  // ..}..}..
                            /* 0550 */  0x26, 0xF1, 0x02, 0x72, 0x1E, 0x9B, 0x46, 0x1E,  // &..r..F.
                            /* 0558 */  0x2D, 0xE0, 0x87, 0xC0, 0xF0, 0x00, 0x29, 0xA3,  // -.....).
                            /* 0560 */  0xB6, 0xE9, 0x63, 0xC1, 0x94, 0x8C, 0x0E, 0xB3,  // ..c.....
                            /* 0568 */  0x77, 0xD8, 0xD4, 0x09, 0x1C, 0xDA, 0xFF, 0xB1,  // w.......
                            /* 0570 */  0x82, 0xFB, 0xE5, 0x4A, 0x23, 0x85, 0x76, 0x75,  // ...J#.vu
                            /* 0578 */  0x85, 0x0A, 0xBE, 0x13, 0x94, 0x4D, 0x26, 0xFB,  // .....M&.
                            /* 0580 */  0xE2, 0xD1, 0x79, 0x5B, 0x02, 0xCA, 0x8A, 0xC7,  // ..y[....
                            /* 0588 */  0x9C, 0x29, 0x37, 0x88, 0xD6, 0x60, 0x50, 0x48,  // .)7..`PH
                            /* 0590 */  0x2A, 0xFD, 0xC7, 0xA3, 0x97, 0x78, 0x9F, 0xE9,  // *....x..
                            /* 0598 */  0xD3, 0x83, 0x0E, 0xBA, 0xB5, 0x2E, 0x8A, 0x20,  // ....... 
                            /* 05A0 */  0xDF, 0x37, 0xC3, 0x95, 0xC1, 0xFE, 0xE2, 0xCE,  // .7......
                            /* 05A8 */  0x87, 0x30, 0x71, 0xF1, 0x2A, 0x91, 0xCA, 0x8F,  // .0q.*...
                            /* 05B0 */  0x0B, 0x74, 0x91, 0xCD, 0x4A, 0xAB, 0x0C, 0x8E,  // .t..J...
                            /* 05B8 */  0xF6, 0xDE, 0xD0, 0x8E, 0x1E, 0x82, 0x0A, 0x8E,  // ........
                            /* 05C0 */  0x42, 0xCC, 0xAE, 0x4C, 0xF5, 0x1A, 0x60, 0x89,  // B..L..`.
                            /* 05C8 */  0xA1, 0x77, 0xAE, 0xDD, 0xE7, 0x7B, 0x44, 0x66,  // .w...{Df
                            /* 05D0 */  0xF3, 0xCB, 0x3F, 0xE1, 0xE4, 0xEF, 0xE9, 0x2C,  // ..?....,
                            /* 05D8 */  0xEB, 0x3D, 0xC4, 0x6B, 0x58, 0x2E, 0xAB, 0x43,  // .=.kX..C
                            /* 05E0 */  0x7F, 0x25, 0x3B, 0xEA, 0xCB, 0xD1, 0xE1, 0xAF,  // .%;.....
                            /* 05E8 */  0xEA, 0xD9, 0x80, 0x14, 0xAB, 0xE5, 0x71, 0x79,  // ......qy
                            /* 05F0 */  0x3C, 0xD9, 0xD7, 0x6B, 0x22, 0x93, 0xD0, 0x85,  // <..k"...
                            /* 05F8 */  0x52, 0xEE                                       // R.
                        }
                    })
                }
                Else
                {
                    Return (Package (0x01)
                    {
                        Buffer (0x05F8)
                        {
                            /* 0000 */  0xE5, 0x1F, 0x94, 0x00, 0x00, 0x00, 0x00, 0x02,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x40, 0x67, 0x64, 0x64, 0x76,  // ...@gddv
                            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x4F, 0x45, 0x4D, 0x20,  // ....OEM 
                            /* 0030 */  0x45, 0x78, 0x70, 0x6F, 0x72, 0x74, 0x65, 0x64,  // Exported
                            /* 0038 */  0x20, 0x44, 0x61, 0x74, 0x61, 0x56, 0x61, 0x75,  //  DataVau
                            /* 0040 */  0x6C, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // lt......
                            /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0068 */  0x00, 0x00, 0x00, 0x00, 0x6C, 0xC6, 0xAC, 0x1F,  // ....l...
                            /* 0070 */  0x47, 0xBC, 0x0C, 0x60, 0xBF, 0xBA, 0x3A, 0x1E,  // G..`..:.
                            /* 0078 */  0x66, 0x37, 0xF0, 0x33, 0x2F, 0x0B, 0x42, 0x7B,  // f7.3/.B{
                            /* 0080 */  0xDF, 0x44, 0x3C, 0x3D, 0x89, 0x1D, 0xFD, 0x97,  // .D<=....
                            /* 0088 */  0xE7, 0x94, 0x55, 0xB0, 0x64, 0x05, 0x00, 0x00,  // ..U.d...
                            /* 0090 */  0x52, 0x45, 0x50, 0x4F, 0x5D, 0x00, 0x00, 0x00,  // REPO]...
                            /* 0098 */  0x01, 0x7E, 0x77, 0x00, 0x00, 0x00, 0x00, 0x00,  // .~w.....
                            /* 00A0 */  0x00, 0x00, 0x72, 0x87, 0xCD, 0xFF, 0x6D, 0x24,  // ..r...m$
                            /* 00A8 */  0x47, 0xDB, 0x3D, 0x24, 0x92, 0xB4, 0x16, 0x6F,  // G.=$...o
                            /* 00B0 */  0x45, 0xD8, 0xC3, 0xF5, 0x66, 0x14, 0x9F, 0x22,  // E...f.."
                            /* 00B8 */  0xD7, 0xF7, 0xDE, 0x67, 0x90, 0x9A, 0xA2, 0x0D,  // ...g....
                            /* 00C0 */  0x39, 0x25, 0xAD, 0xC3, 0x1A, 0xAD, 0x52, 0x0B,  // 9%....R.
                            /* 00C8 */  0x75, 0x38, 0xE1, 0xA4, 0x14, 0x41, 0x41, 0x65,  // u8...AAe
                            /* 00D0 */  0x72, 0xE2, 0x85, 0x11, 0x45, 0x4B, 0xC7, 0x50,  // r...EK.P
                            /* 00D8 */  0xD3, 0xC2, 0x4E, 0x59, 0x4E, 0xB0, 0xFE, 0x13,  // ..NYN...
                            /* 00E0 */  0x85, 0xBE, 0xBE, 0xAD, 0xB6, 0xC2, 0xBC, 0x4E,  // .......N
                            /* 00E8 */  0x8B, 0xBB, 0xBD, 0x73, 0xB6, 0xC3, 0xCD, 0xF0,  // ...s....
                            /* 00F0 */  0x5E, 0x80, 0x46, 0xFA, 0x3F, 0xF9, 0x77, 0x7A,  // ^.F.?.wz
                            /* 00F8 */  0x3A, 0x42, 0x12, 0xC7, 0xC3, 0x60, 0xF0, 0x80,  // :B...`..
                            /* 0100 */  0x24, 0x33, 0x5F, 0x94, 0x48, 0x7B, 0x16, 0x7A,  // $3_.H{.z
                            /* 0108 */  0x35, 0x03, 0xA7, 0x1C, 0x8F, 0xC4, 0xB3, 0x50,  // 5......P
                            /* 0110 */  0xF0, 0x11, 0x01, 0xA0, 0xE6, 0x09, 0xF5, 0x30,  // .......0
                            /* 0118 */  0xA2, 0x33, 0xE9, 0xDF, 0x5E, 0xA8, 0x7E, 0x5D,  // .3..^.~]
                            /* 0120 */  0xD8, 0x9E, 0xA7, 0x60, 0xBE, 0x48, 0xB9, 0x63,  // ...`.H.c
                            /* 0128 */  0x34, 0x87, 0xAE, 0x91, 0x77, 0x2A, 0x8D, 0x2F,  // 4...w*./
                            /* 0130 */  0xBC, 0xB3, 0x86, 0x3B, 0xDD, 0x1A, 0x2D, 0x6F,  // ...;..-o
                            /* 0138 */  0xFE, 0x65, 0xA3, 0x77, 0xF3, 0x1F, 0x52, 0x9D,  // .e.w..R.
                            /* 0140 */  0x1F, 0xCD, 0x01, 0x77, 0x70, 0x9F, 0xE7, 0x82,  // ...wp...
                            /* 0148 */  0x21, 0x40, 0x5B, 0xF2, 0xA2, 0xF4, 0xD2, 0xD9,  // !@[.....
                            /* 0150 */  0xD6, 0x74, 0x61, 0x55, 0x81, 0xC5, 0x40, 0x9D,  // .taU..@.
                            /* 0158 */  0x65, 0x81, 0xC9, 0xF4, 0xBC, 0xE1, 0x36, 0xEC,  // e.....6.
                            /* 0160 */  0x63, 0xB9, 0x96, 0xAA, 0x67, 0x4B, 0x81, 0x45,  // c...gK.E
                            /* 0168 */  0x32, 0x58, 0x5B, 0x3E, 0xAF, 0xD7, 0x51, 0xB6,  // 2X[>..Q.
                            /* 0170 */  0x8B, 0x7A, 0x4A, 0xA8, 0xF0, 0x08, 0xC1, 0x3E,  // .zJ....>
                            /* 0178 */  0xB2, 0x42, 0x51, 0xBE, 0xDC, 0x28, 0x93, 0x89,  // .BQ..(..
                            /* 0180 */  0x37, 0xD9, 0xF2, 0x49, 0x04, 0xEA, 0x48, 0x15,  // 7..I..H.
                            /* 0188 */  0x98, 0xE5, 0x2A, 0x34, 0xAD, 0x7E, 0x8A, 0x5F,  // ..*4.~._
                            /* 0190 */  0x82, 0x67, 0xFA, 0x6A, 0xF6, 0x91, 0x1B, 0xF2,  // .g.j....
                            /* 0198 */  0x00, 0xBA, 0x30, 0x33, 0x02, 0xBA, 0x8F, 0xA0,  // ..03....
                            /* 01A0 */  0x19, 0x01, 0xD2, 0xC0, 0x81, 0x28, 0x0B, 0x63,  // .....(.c
                            /* 01A8 */  0x76, 0xCF, 0xAE, 0x15, 0x08, 0x4C, 0x3E, 0xBD,  // v....L>.
                            /* 01B0 */  0x05, 0x20, 0xBA, 0xB3, 0x04, 0x8D, 0x9E, 0xBA,  // . ......
                            /* 01B8 */  0xD0, 0x20, 0x94, 0x48, 0x12, 0x21, 0x9A, 0x7D,  // . .H.!.}
                            /* 01C0 */  0x78, 0x17, 0xC4, 0xA3, 0x26, 0x67, 0xDD, 0x09,  // x...&g..
                            /* 01C8 */  0x07, 0x61, 0x4A, 0xCA, 0x26, 0x81, 0x66, 0xE6,  // .aJ.&.f.
                            /* 01D0 */  0xB6, 0x47, 0xEF, 0xE6, 0xBF, 0x3C, 0x22, 0xDB,  // .G...<".
                            /* 01D8 */  0xD1, 0x4C, 0x3A, 0x7F, 0xDF, 0x6E, 0x1C, 0x10,  // .L:..n..
                            /* 01E0 */  0x0F, 0xEB, 0xD1, 0xB6, 0xAD, 0x40, 0xF4, 0x73,  // .....@.s
                            /* 01E8 */  0x63, 0xB3, 0x42, 0xFD, 0xC0, 0x9B, 0xB7, 0x69,  // c.B....i
                            /* 01F0 */  0x7E, 0x57, 0x2E, 0x1D, 0xC5, 0x29, 0x13, 0xA5,  // ~W...)..
                            /* 01F8 */  0xF7, 0xF2, 0xE2, 0xB6, 0x69, 0x85, 0xE3, 0xD2,  // ....i...
                            /* 0200 */  0x4A, 0x8B, 0x19, 0x5C, 0xF4, 0xBA, 0x91, 0xC4,  // J..\....
                            /* 0208 */  0xC4, 0xEE, 0x96, 0x1D, 0xD4, 0x59, 0x17, 0x01,  // .....Y..
                            /* 0210 */  0xA0, 0xD6, 0xD8, 0x40, 0xCD, 0x92, 0x51, 0x17,  // ...@..Q.
                            /* 0218 */  0x81, 0x7B, 0x8A, 0x2E, 0x31, 0x84, 0xAD, 0x20,  // .{..1.. 
                            /* 0220 */  0xF2, 0x13, 0x04, 0x8B, 0x75, 0x2A, 0x0A, 0x56,  // ....u*.V
                            /* 0228 */  0xBD, 0x2F, 0x0F, 0x74, 0x29, 0x8B, 0x27, 0xAB,  // ./.t).'.
                            /* 0230 */  0x2C, 0xF1, 0x0C, 0x1D, 0x5A, 0xC3, 0xE3, 0x43,  // ,...Z..C
                            /* 0238 */  0xB5, 0x23, 0x7B, 0x08, 0xD8, 0x95, 0x9F, 0x5F,  // .#{...._
                            /* 0240 */  0xFE, 0xE6, 0xC3, 0x84, 0x60, 0x51, 0x26, 0xA4,  // ....`Q&.
                            /* 0248 */  0x5F, 0x64, 0xB0, 0xDB, 0xB6, 0xA6, 0x40, 0x76,  // _d....@v
                            /* 0250 */  0x48, 0x78, 0x86, 0x8E, 0x03, 0x4A, 0x2B, 0x16,  // Hx...J+.
                            /* 0258 */  0xAA, 0xAC, 0xDF, 0xC7, 0xD3, 0x17, 0x7A, 0xCA,  // ......z.
                            /* 0260 */  0x33, 0x8D, 0xBB, 0xF2, 0xF9, 0xC4, 0xC8, 0x0E,  // 3.......
                            /* 0268 */  0x63, 0x24, 0x1D, 0x54, 0xFF, 0x5F, 0xFC, 0x0E,  // c$.T._..
                            /* 0270 */  0xCA, 0xBB, 0x85, 0xAF, 0x61, 0x71, 0x62, 0x32,  // ....aqb2
                            /* 0278 */  0x7D, 0x6B, 0x45, 0x99, 0xC2, 0x32, 0x55, 0x71,  // }kE..2Uq
                            /* 0280 */  0x98, 0xFE, 0x3C, 0x68, 0x87, 0xC5, 0xE8, 0x12,  // ..<h....
                            /* 0288 */  0xF3, 0xD6, 0xCA, 0xC0, 0x16, 0x8E, 0xD5, 0xE1,  // ........
                            /* 0290 */  0xCD, 0x46, 0x76, 0xDD, 0x8E, 0x73, 0x7A, 0x3D,  // .Fv..sz=
                            /* 0298 */  0x2B, 0x5C, 0xA6, 0x12, 0xC4, 0xBB, 0x99, 0x7B,  // +\.....{
                            /* 02A0 */  0xC1, 0xC3, 0xCD, 0xA7, 0xF5, 0x3A, 0xF7, 0xD8,  // .....:..
                            /* 02A8 */  0xB9, 0x36, 0x70, 0x95, 0xFA, 0xA7, 0x9E, 0x75,  // .6p....u
                            /* 02B0 */  0x41, 0xC5, 0x25, 0x60, 0x93, 0x83, 0x83, 0x79,  // A.%`...y
                            /* 02B8 */  0x04, 0x81, 0xC8, 0xCE, 0x5B, 0xA4, 0x61, 0xBE,  // ....[.a.
                            /* 02C0 */  0x9D, 0x89, 0x45, 0x9B, 0x6C, 0x58, 0x1D, 0xAA,  // ..E.lX..
                            /* 02C8 */  0x55, 0x85, 0x60, 0x1E, 0x54, 0x98, 0x6E, 0x86,  // U.`.T.n.
                            /* 02D0 */  0x03, 0x4F, 0x9C, 0x8A, 0x1E, 0xBE, 0xFC, 0x4D,  // .O.....M
                            /* 02D8 */  0xE9, 0x97, 0x48, 0x41, 0xE5, 0x36, 0x8A, 0x15,  // ..HA.6..
                            /* 02E0 */  0xE5, 0x4A, 0x5E, 0x3D, 0x9A, 0x68, 0x85, 0xAF,  // .J^=.h..
                            /* 02E8 */  0x3F, 0x1A, 0xFF, 0x03, 0xA9, 0x0D, 0x4F, 0x06,  // ?.....O.
                            /* 02F0 */  0xFC, 0xB1, 0x24, 0xEE, 0x84, 0x0B, 0x13, 0x1C,  // ..$.....
                            /* 02F8 */  0x2E, 0x69, 0x21, 0x6B, 0x0B, 0x38, 0xE1, 0xE6,  // .i!k.8..
                            /* 0300 */  0xB6, 0x06, 0x47, 0x4D, 0x51, 0xF2, 0x63, 0x3C,  // ..GMQ.c<
                            /* 0308 */  0xFE, 0x55, 0x72, 0x98, 0xFD, 0x6E, 0x7A, 0x95,  // .Ur..nz.
                            /* 0310 */  0x8B, 0xE8, 0x61, 0xF0, 0x1C, 0x10, 0x44, 0xF0,  // ..a...D.
                            /* 0318 */  0x22, 0x19, 0xE3, 0x9F, 0x25, 0x41, 0x38, 0xC2,  // "...%A8.
                            /* 0320 */  0x27, 0x4A, 0xEE, 0x8B, 0xD3, 0x55, 0x43, 0x65,  // 'J...UCe
                            /* 0328 */  0xF2, 0x91, 0x2D, 0xE9, 0x01, 0x3B, 0x3E, 0xC3,  // ..-..;>.
                            /* 0330 */  0x1C, 0x28, 0xED, 0xAC, 0x23, 0xC0, 0xBB, 0x80,  // .(..#...
                            /* 0338 */  0x4A, 0x73, 0x8D, 0xCC, 0x57, 0xB7, 0xA4, 0x83,  // Js..W...
                            /* 0340 */  0x26, 0x89, 0x70, 0x2F, 0x64, 0x3E, 0x4B, 0x96,  // &.p/d>K.
                            /* 0348 */  0xC5, 0xA0, 0x76, 0xAC, 0x93, 0x24, 0x65, 0x8E,  // ..v..$e.
                            /* 0350 */  0xF0, 0x1C, 0x61, 0x8E, 0xC9, 0xF6, 0x02, 0xF5,  // ..a.....
                            /* 0358 */  0x05, 0xEA, 0xCB, 0x8E, 0x19, 0xDC, 0xD6, 0x89,  // ........
                            /* 0360 */  0xEC, 0xC8, 0xC9, 0x7E, 0x0B, 0x8E, 0xAB, 0x89,  // ...~....
                            /* 0368 */  0xF0, 0x13, 0x1F, 0xD3, 0xD8, 0x09, 0xD4, 0xFB,  // ........
                            /* 0370 */  0xF8, 0x3C, 0x56, 0x1A, 0xEF, 0x16, 0xB6, 0x62,  // .<V....b
                            /* 0378 */  0x6F, 0x03, 0xBA, 0x6E, 0x4A, 0x5A, 0x53, 0xF8,  // o..nJZS.
                            /* 0380 */  0xC8, 0x66, 0xC7, 0x8B, 0xE8, 0x5E, 0xDE, 0x11,  // .f...^..
                            /* 0388 */  0xE6, 0xBF, 0x4E, 0xE8, 0x74, 0x7F, 0x22, 0xCD,  // ..N.t.".
                            /* 0390 */  0x79, 0x51, 0x78, 0x8B, 0xA9, 0xBC, 0xB9, 0x4D,  // yQx....M
                            /* 0398 */  0xFA, 0x58, 0x77, 0x66, 0x8B, 0xD3, 0xB4, 0x4B,  // .Xwf...K
                            /* 03A0 */  0x1E, 0x89, 0x7A, 0xDB, 0x30, 0xF9, 0x83, 0x58,  // ..z.0..X
                            /* 03A8 */  0x61, 0xC3, 0x7F, 0xC3, 0x88, 0xBF, 0xB7, 0x42,  // a......B
                            /* 03B0 */  0xB3, 0x60, 0x0B, 0x3F, 0x91, 0xC6, 0xDA, 0xB2,  // .`.?....
                            /* 03B8 */  0xC2, 0x75, 0xAB, 0x7C, 0x47, 0x74, 0x58, 0x1D,  // .u.|GtX.
                            /* 03C0 */  0x32, 0x61, 0x8E, 0x20, 0xFC, 0x43, 0x5C, 0xF9,  // 2a. .C\.
                            /* 03C8 */  0x9F, 0x1D, 0xEB, 0x3D, 0xE0, 0xC4, 0x08, 0x81,  // ...=....
                            /* 03D0 */  0xA2, 0x6E, 0x1C, 0xBC, 0xB4, 0xFF, 0x43, 0x54,  // .n....CT
                            /* 03D8 */  0x88, 0x9C, 0x52, 0x3C, 0x92, 0x4C, 0x3C, 0xFF,  // ..R<.L<.
                            /* 03E0 */  0x46, 0x0E, 0x99, 0x53, 0xE0, 0xE2, 0x29, 0x6D,  // F..S..)m
                            /* 03E8 */  0x96, 0x45, 0xBA, 0xF0, 0xA3, 0x45, 0x7C, 0x75,  // .E...E|u
                            /* 03F0 */  0x21, 0xDF, 0xAE, 0xFC, 0xD4, 0xF5, 0x6F, 0x9A,  // !.....o.
                            /* 03F8 */  0x6C, 0x1E, 0x70, 0x75, 0x49, 0x5D, 0xF6, 0x38,  // l.puI].8
                            /* 0400 */  0x94, 0xA9, 0xEF, 0x39, 0x0B, 0xA2, 0x5F, 0xC1,  // ...9.._.
                            /* 0408 */  0x93, 0x28, 0x89, 0x49, 0x8F, 0x17, 0xAC, 0x0A,  // .(.I....
                            /* 0410 */  0x38, 0x4E, 0x94, 0xD5, 0x51, 0xAF, 0xF8, 0x7B,  // 8N..Q..{
                            /* 0418 */  0x89, 0x9C, 0xAA, 0x98, 0x68, 0x03, 0x81, 0xF9,  // ....h...
                            /* 0420 */  0x35, 0xC8, 0xA4, 0x12, 0xAB, 0x4D, 0x45, 0x6A,  // 5....MEj
                            /* 0428 */  0x45, 0x6C, 0x8F, 0xD6, 0xEF, 0x5F, 0xA2, 0xC6,  // El..._..
                            /* 0430 */  0xBD, 0xDE, 0x6A, 0x6A, 0x34, 0xB0, 0x6D, 0x6C,  // ..jj4.ml
                            /* 0438 */  0x35, 0x44, 0x85, 0xEF, 0x08, 0x06, 0x15, 0xB7,  // 5D......
                            /* 0440 */  0x98, 0x87, 0x0C, 0x83, 0xE8, 0x22, 0xDC, 0xB1,  // ....."..
                            /* 0448 */  0xA9, 0x7E, 0x7B, 0xE4, 0xE5, 0x3C, 0x59, 0x1B,  // .~{..<Y.
                            /* 0450 */  0x06, 0x78, 0x27, 0x91, 0x3E, 0x60, 0xA7, 0xFC,  // .x'.>`..
                            /* 0458 */  0x5E, 0xA2, 0xA9, 0x65, 0x27, 0x24, 0xD0, 0x6B,  // ^..e'$.k
                            /* 0460 */  0xE8, 0x96, 0xF9, 0xCB, 0x27, 0x64, 0x19, 0x3F,  // ....'d.?
                            /* 0468 */  0x17, 0x0B, 0x8A, 0x81, 0xAD, 0x5F, 0x48, 0xC7,  // ....._H.
                            /* 0470 */  0x79, 0x8A, 0xCD, 0xC1, 0xA2, 0xDD, 0xDD, 0x19,  // y.......
                            /* 0478 */  0x32, 0x31, 0xFF, 0x83, 0xC5, 0x16, 0xB2, 0x1E,  // 21......
                            /* 0480 */  0x53, 0x29, 0x44, 0x14, 0x6F, 0x24, 0x55, 0x28,  // S)D.o$U(
                            /* 0488 */  0xBA, 0x77, 0x75, 0xCF, 0x29, 0x5E, 0x84, 0x23,  // .wu.)^.#
                            /* 0490 */  0xF8, 0x7E, 0x7A, 0x4E, 0xCA, 0x8F, 0x81, 0x0C,  // .~zN....
                            /* 0498 */  0x26, 0xD9, 0x17, 0x31, 0x0B, 0x64, 0x71, 0x06,  // &..1.dq.
                            /* 04A0 */  0x54, 0xBB, 0xDE, 0x50, 0xD0, 0x06, 0xCA, 0x95,  // T..P....
                            /* 04A8 */  0xFC, 0x76, 0x40, 0xB8, 0x36, 0x1E, 0x65, 0x09,  // .v@.6.e.
                            /* 04B0 */  0x8F, 0xD1, 0x4D, 0xE1, 0x90, 0xE1, 0x78, 0x70,  // ..M...xp
                            /* 04B8 */  0xC0, 0x5E, 0x64, 0xF4, 0x79, 0x80, 0xCA, 0xCD,  // .^d.y...
                            /* 04C0 */  0xA7, 0xB8, 0xAC, 0xFA, 0x1F, 0x8C, 0x46, 0x33,  // ......F3
                            /* 04C8 */  0x33, 0x50, 0x8C, 0x2A, 0x7E, 0x29, 0x79, 0xC9,  // 3P.*~)y.
                            /* 04D0 */  0x95, 0x8A, 0x40, 0xF2, 0x34, 0xD4, 0x8F, 0x74,  // ..@.4..t
                            /* 04D8 */  0x9E, 0x7C, 0x55, 0x4E, 0xC1, 0xF1, 0xE1, 0x47,  // .|UN...G
                            /* 04E0 */  0xB6, 0xD9, 0x4B, 0x32, 0x0F, 0xDC, 0x6B, 0xAF,  // ..K2..k.
                            /* 04E8 */  0x28, 0x02, 0xCB, 0x37, 0xBD, 0x0C, 0xE4, 0xCE,  // (..7....
                            /* 04F0 */  0xDF, 0x11, 0x78, 0x71, 0x14, 0x7A, 0xD6, 0x0E,  // ..xq.z..
                            /* 04F8 */  0xB0, 0xCD, 0xD6, 0x67, 0xA6, 0x60, 0x79, 0xF8,  // ...g.`y.
                            /* 0500 */  0x3F, 0xD8, 0x7C, 0xF1, 0x99, 0x89, 0x38, 0x6A,  // ?.|...8j
                            /* 0508 */  0x4D, 0xC7, 0x74, 0x8E, 0xD7, 0x7E, 0x76, 0x67,  // M.t..~vg
                            /* 0510 */  0x4D, 0xA1, 0x33, 0x91, 0x2A, 0x70, 0x63, 0x19,  // M.3.*pc.
                            /* 0518 */  0x19, 0x5B, 0x4A, 0xBF, 0xC5, 0x50, 0x44, 0x89,  // .[J..PD.
                            /* 0520 */  0xED, 0xEA, 0x47, 0xF0, 0x38, 0x64, 0xAA, 0x48,  // ..G.8d.H
                            /* 0528 */  0xBC, 0x0B, 0xED, 0x1E, 0x10, 0xED, 0x8A, 0x91,  // ........
                            /* 0530 */  0xBC, 0x69, 0xFF, 0x60, 0x04, 0xB9, 0xB3, 0x1B,  // .i.`....
                            /* 0538 */  0x65, 0x4C, 0xB7, 0xA7, 0x3B, 0x5B, 0xC6, 0xB4,  // eL..;[..
                            /* 0540 */  0x53, 0x6A, 0x1A, 0x1E, 0xF7, 0x8A, 0xF3, 0x6B,  // Sj.....k
                            /* 0548 */  0x73, 0x7F, 0x35, 0x3E, 0x5C, 0xB3, 0xC8, 0xAB,  // s.5>\...
                            /* 0550 */  0xF5, 0x04, 0xC3, 0x73, 0xCE, 0x0E, 0x62, 0x12,  // ...s..b.
                            /* 0558 */  0x71, 0xA0, 0xB4, 0x89, 0xA9, 0xE7, 0xF0, 0x7C,  // q......|
                            /* 0560 */  0x8B, 0x6F, 0xFB, 0x56, 0xBE, 0x18, 0x5B, 0x07,  // .o.V..[.
                            /* 0568 */  0x5A, 0x6C, 0x29, 0x0C, 0xD2, 0x7F, 0xD1, 0x05,  // Zl).....
                            /* 0570 */  0xA3, 0xAC, 0xEF, 0xF9, 0x03, 0x55, 0x7A, 0x1A,  // .....Uz.
                            /* 0578 */  0x61, 0xF9, 0x9D, 0x04, 0xBC, 0x9D, 0x2F, 0xED,  // a...../.
                            /* 0580 */  0x30, 0xA9, 0x88, 0xE7, 0x55, 0x51, 0xC2, 0x70,  // 0...UQ.p
                            /* 0588 */  0x21, 0x68, 0xC9, 0x39, 0xDD, 0x6D, 0xBB, 0xC7,  // !h.9.m..
                            /* 0590 */  0x91, 0x7A, 0x05, 0x21, 0x67, 0x0A, 0x82, 0xC9,  // .z.!g...
                            /* 0598 */  0x73, 0xF8, 0x5A, 0xDE, 0x23, 0x48, 0xC8, 0x4E,  // s.Z.#H.N
                            /* 05A0 */  0x73, 0x58, 0xE6, 0xC6, 0x1E, 0xDB, 0xBF, 0x1D,  // sX......
                            /* 05A8 */  0xE9, 0x98, 0xEB, 0x82, 0x8A, 0x8E, 0xBF, 0x6C,  // .......l
                            /* 05B0 */  0xE6, 0xD2, 0x44, 0xE5, 0xA8, 0x73, 0x83, 0x35,  // ..D..s.5
                            /* 05B8 */  0x8F, 0x27, 0x1F, 0xB8, 0x82, 0x02, 0x40, 0x76,  // .'....@v
                            /* 05C0 */  0x03, 0xD2, 0xF1, 0x89, 0x8E, 0xEC, 0x48, 0xCD,  // ......H.
                            /* 05C8 */  0x5A, 0xFF, 0x78, 0xF6, 0xA1, 0x0E, 0xA0, 0x97,  // Z.x.....
                            /* 05D0 */  0x15, 0xE7, 0x6C, 0x17, 0x4A, 0x3E, 0x82, 0x1C,  // ..l.J>..
                            /* 05D8 */  0x05, 0xB1, 0x33, 0x34, 0xB4, 0x54, 0xB3, 0x9B,  // ..34.T..
                            /* 05E0 */  0xD1, 0x47, 0x77, 0x52, 0x9E, 0x0F, 0xBC, 0x0B,  // .GwR....
                            /* 05E8 */  0x80, 0x83, 0x5B, 0xD6, 0xFD, 0x94, 0xCD, 0xFD,  // ..[.....
                            /* 05F0 */  0x56, 0xC9, 0x5B, 0xDC, 0x30, 0xAB, 0xD4, 0xC0   // V.[.0...
                        }
                    })
                }
            }
        }

        Method (IMOK, 1, NotSerialized)
        {
            Return (Arg0)
        }
    }
}



SSDT20
------
DefinitionBlock ("", "SSDT", 2, "PmRef", "ApIst", 0x00003000)
{
    External (_SB_.PR00._PCT, MethodObj)    // 0 Arguments
    External (_SB_.PR00._PPC, MethodObj)    // 0 Arguments
    External (_SB_.PR00._PSS, MethodObj)    // 0 Arguments
    External (_SB_.PR01, DeviceObj)
    External (_SB_.PR02, DeviceObj)
    External (_SB_.PR03, DeviceObj)
    External (_SB_.PR04, DeviceObj)
    External (_SB_.PR05, DeviceObj)
    External (_SB_.PR06, DeviceObj)
    External (_SB_.PR07, DeviceObj)
    External (_SB_.PR08, DeviceObj)
    External (_SB_.PR09, DeviceObj)
    External (_SB_.PR10, DeviceObj)
    External (_SB_.PR11, DeviceObj)
    External (_SB_.PR12, DeviceObj)
    External (_SB_.PR13, DeviceObj)
    External (_SB_.PR14, DeviceObj)
    External (_SB_.PR15, DeviceObj)
    External (_SB_.PR16, DeviceObj)
    External (_SB_.PR17, DeviceObj)
    External (_SB_.PR18, DeviceObj)
    External (_SB_.PR19, DeviceObj)
    External (_SB_.PR20, DeviceObj)
    External (_SB_.PR21, DeviceObj)
    External (_SB_.PR22, DeviceObj)
    External (_SB_.PR23, DeviceObj)

    Scope (\_SB.PR01)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_SB.PR00._PPC ())
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_SB.PR00._PCT ())
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_SB.PR00._PSS ())
        }
    }

    Scope (\_SB.PR02)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_SB.PR00._PPC ())
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_SB.PR00._PCT ())
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_SB.PR00._PSS ())
        }
    }

    Scope (\_SB.PR03)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_SB.PR00._PPC ())
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_SB.PR00._PCT ())
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_SB.PR00._PSS ())
        }
    }

    Scope (\_SB.PR04)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_SB.PR00._PPC ())
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_SB.PR00._PCT ())
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_SB.PR00._PSS ())
        }
    }

    Scope (\_SB.PR05)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_SB.PR00._PPC ())
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_SB.PR00._PCT ())
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_SB.PR00._PSS ())
        }
    }

    Scope (\_SB.PR06)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_SB.PR00._PPC ())
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_SB.PR00._PCT ())
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_SB.PR00._PSS ())
        }
    }

    Scope (\_SB.PR07)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_SB.PR00._PPC ())
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_SB.PR00._PCT ())
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_SB.PR00._PSS ())
        }
    }

    Scope (\_SB.PR08)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_SB.PR00._PPC ())
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_SB.PR00._PCT ())
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_SB.PR00._PSS ())
        }
    }

    Scope (\_SB.PR09)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_SB.PR00._PPC ())
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_SB.PR00._PCT ())
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_SB.PR00._PSS ())
        }
    }

    Scope (\_SB.PR10)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_SB.PR00._PPC ())
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_SB.PR00._PCT ())
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_SB.PR00._PSS ())
        }
    }

    Scope (\_SB.PR11)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_SB.PR00._PPC ())
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_SB.PR00._PCT ())
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_SB.PR00._PSS ())
        }
    }

    Scope (\_SB.PR12)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_SB.PR00._PPC ())
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_SB.PR00._PCT ())
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_SB.PR00._PSS ())
        }
    }

    Scope (\_SB.PR13)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_SB.PR00._PPC ())
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_SB.PR00._PCT ())
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_SB.PR00._PSS ())
        }
    }

    Scope (\_SB.PR14)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_SB.PR00._PPC ())
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_SB.PR00._PCT ())
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_SB.PR00._PSS ())
        }
    }

    Scope (\_SB.PR15)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_SB.PR00._PPC ())
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_SB.PR00._PCT ())
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_SB.PR00._PSS ())
        }
    }

    Scope (\_SB.PR16)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_SB.PR00._PPC ())
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_SB.PR00._PCT ())
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_SB.PR00._PSS ())
        }
    }

    Scope (\_SB.PR17)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_SB.PR00._PPC ())
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_SB.PR00._PCT ())
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_SB.PR00._PSS ())
        }
    }

    Scope (\_SB.PR18)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_SB.PR00._PPC ())
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_SB.PR00._PCT ())
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_SB.PR00._PSS ())
        }
    }

    Scope (\_SB.PR19)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_SB.PR00._PPC ())
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_SB.PR00._PCT ())
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_SB.PR00._PSS ())
        }
    }

    Scope (\_SB.PR20)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_SB.PR00._PPC ())
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_SB.PR00._PCT ())
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_SB.PR00._PSS ())
        }
    }

    Scope (\_SB.PR21)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_SB.PR00._PPC ())
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_SB.PR00._PCT ())
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_SB.PR00._PSS ())
        }
    }

    Scope (\_SB.PR22)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_SB.PR00._PPC ())
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_SB.PR00._PCT ())
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_SB.PR00._PSS ())
        }
    }

    Scope (\_SB.PR23)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_SB.PR00._PPC ())
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_SB.PR00._PCT ())
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_SB.PR00._PSS ())
        }
    }
}



SSDT21
------
DefinitionBlock ("", "SSDT", 2, "PmRef", "Cpu0Ist", 0x00003000)
{
    External (_SB_.CPPC, FieldUnitObj)
    External (_SB_.OSCP, IntObj)
    External (_SB_.PR00, DeviceObj)
    External (TCNT, FieldUnitObj)

    Scope (\_SB.PR00)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_SB.CPPC) /* External reference */
        }

        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If ((\_SB.OSCP & 0x0400))
            {
                Return (TPSS) /* \_SB_.PR00.TPSS */
            }
            Else
            {
                Return (LPSS) /* \_SB_.PR00.LPSS */
            }
        }

        Name (LPSS, Package (0x10)
        {
            Package (0x06)
            {
                0x000008FD, 
                0x0000AFC8, 
                0x0000000A, 
                0x0000000A, 
                0x00003200, 
                0x00003200
            }, 

            Package (0x06)
            {
                0x000008FC, 
                0x0000AFC8, 
                0x0000000A, 
                0x0000000A, 
                0x00001700, 
                0x00001700
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x0000A518, 
                0x0000000A, 
                0x0000000A, 
                0x00001600, 
                0x00001600
            }, 

            Package (0x06)
            {
                0x00000834, 
                0x00009C55, 
                0x0000000A, 
                0x0000000A, 
                0x00001500, 
                0x00001500
            }, 

            Package (0x06)
            {
                0x000007D0, 
                0x0000920B, 
                0x0000000A, 
                0x0000000A, 
                0x00001400, 
                0x00001400
            }, 

            Package (0x06)
            {
                0x0000076C, 
                0x000089A4, 
                0x0000000A, 
                0x0000000A, 
                0x00001300, 
                0x00001300
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x00008167, 
                0x0000000A, 
                0x0000000A, 
                0x00001200, 
                0x00001200
            }, 

            Package (0x06)
            {
                0x000006A4, 
                0x000077B7, 
                0x0000000A, 
                0x0000000A, 
                0x00001100, 
                0x00001100
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x00006818, 
                0x0000000A, 
                0x0000000A, 
                0x00000F00, 
                0x00000F00
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x00005EF1, 
                0x0000000A, 
                0x0000000A, 
                0x00000E00, 
                0x00000E00
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x0000578D, 
                0x0000000A, 
                0x0000000A, 
                0x00000D00, 
                0x00000D00
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x00005056, 
                0x0000000A, 
                0x0000000A, 
                0x00000C00, 
                0x00000C00
            }, 

            Package (0x06)
            {
                0x0000044C, 
                0x000047BB, 
                0x0000000A, 
                0x0000000A, 
                0x00000B00, 
                0x00000B00
            }, 

            Package (0x06)
            {
                0x000003E8, 
                0x000040D3, 
                0x0000000A, 
                0x0000000A, 
                0x00000A00, 
                0x00000A00
            }, 

            Package (0x06)
            {
                0x00000384, 
                0x00003A13, 
                0x0000000A, 
                0x0000000A, 
                0x00000900, 
                0x00000900
            }, 

            Package (0x06)
            {
                0x00000320, 
                0x00003201, 
                0x0000000A, 
                0x0000000A, 
                0x00000800, 
                0x00000800
            }
        })
        Name (TPSS, Package (0x11)
        {
            Package (0x06)
            {
                0x000008FD, 
                0x0000AFC8, 
                0x0000000A, 
                0x0000000A, 
                0x00003200, 
                0x00003200
            }, 

            Package (0x06)
            {
                0x000008FC, 
                0x0000AFC8, 
                0x0000000A, 
                0x0000000A, 
                0x00001700, 
                0x00001700
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x0000A518, 
                0x0000000A, 
                0x0000000A, 
                0x00001600, 
                0x00001600
            }, 

            Package (0x06)
            {
                0x00000834, 
                0x00009C55, 
                0x0000000A, 
                0x0000000A, 
                0x00001500, 
                0x00001500
            }, 

            Package (0x06)
            {
                0x000007D0, 
                0x0000920B, 
                0x0000000A, 
                0x0000000A, 
                0x00001400, 
                0x00001400
            }, 

            Package (0x06)
            {
                0x0000076C, 
                0x000089A4, 
                0x0000000A, 
                0x0000000A, 
                0x00001300, 
                0x00001300
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x00008167, 
                0x0000000A, 
                0x0000000A, 
                0x00001200, 
                0x00001200
            }, 

            Package (0x06)
            {
                0x000006A4, 
                0x000077B7, 
                0x0000000A, 
                0x0000000A, 
                0x00001100, 
                0x00001100
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00006FD3, 
                0x0000000A, 
                0x0000000A, 
                0x00001000, 
                0x00001000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x00006818, 
                0x0000000A, 
                0x0000000A, 
                0x00000F00, 
                0x00000F00
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x00005EF1, 
                0x0000000A, 
                0x0000000A, 
                0x00000E00, 
                0x00000E00
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x0000578D, 
                0x0000000A, 
                0x0000000A, 
                0x00000D00, 
                0x00000D00
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x00005056, 
                0x0000000A, 
                0x0000000A, 
                0x00000C00, 
                0x00000C00
            }, 

            Package (0x06)
            {
                0x0000044C, 
                0x000047BB, 
                0x0000000A, 
                0x0000000A, 
                0x00000B00, 
                0x00000B00
            }, 

            Package (0x06)
            {
                0x000003E8, 
                0x000040D3, 
                0x0000000A, 
                0x0000000A, 
                0x00000A00, 
                0x00000A00
            }, 

            Package (0x06)
            {
                0x00000384, 
                0x00003A13, 
                0x0000000A, 
                0x0000000A, 
                0x00000900, 
                0x00000900
            }, 

            Package (0x06)
            {
                0x00000320, 
                0x00003201, 
                0x0000000A, 
                0x0000000A, 
                0x00000800, 
                0x00000800
            }
        })
    }
}



SSDT22
------
DefinitionBlock ("", "SSDT", 2, "PmRef", "ApPsd", 0x00003000)
{
    External (_SB_.CFGD, FieldUnitObj)
    External (_SB_.PR00.GPSD, MethodObj)    // 1 Arguments
    External (_SB_.PR01, DeviceObj)
    External (_SB_.PR02, DeviceObj)
    External (_SB_.PR03, DeviceObj)
    External (_SB_.PR04, DeviceObj)
    External (_SB_.PR05, DeviceObj)
    External (_SB_.PR06, DeviceObj)
    External (_SB_.PR07, DeviceObj)
    External (_SB_.PR08, DeviceObj)
    External (_SB_.PR09, DeviceObj)
    External (_SB_.PR10, DeviceObj)
    External (_SB_.PR11, DeviceObj)
    External (_SB_.PR12, DeviceObj)
    External (_SB_.PR13, DeviceObj)
    External (_SB_.PR14, DeviceObj)
    External (_SB_.PR15, DeviceObj)
    External (_SB_.PR16, DeviceObj)
    External (_SB_.PR17, DeviceObj)
    External (_SB_.PR18, DeviceObj)
    External (_SB_.PR19, DeviceObj)
    External (_SB_.PR20, DeviceObj)
    External (_SB_.PR21, DeviceObj)
    External (_SB_.PR22, DeviceObj)
    External (_SB_.PR23, DeviceObj)
    External (PF00, IntObj)
    External (TCNT, FieldUnitObj)

    Scope (\_SB.PR01)
    {
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_SB.PR00.GPSD (One))
        }
    }

    Scope (\_SB.PR02)
    {
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_SB.PR00.GPSD (0x02))
        }
    }

    Scope (\_SB.PR03)
    {
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_SB.PR00.GPSD (0x03))
        }
    }

    Scope (\_SB.PR04)
    {
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_SB.PR00.GPSD (0x04))
        }
    }

    Scope (\_SB.PR05)
    {
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_SB.PR00.GPSD (0x05))
        }
    }

    Scope (\_SB.PR06)
    {
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_SB.PR00.GPSD (0x06))
        }
    }

    Scope (\_SB.PR07)
    {
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_SB.PR00.GPSD (0x07))
        }
    }

    Scope (\_SB.PR08)
    {
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_SB.PR00.GPSD (0x08))
        }
    }

    Scope (\_SB.PR09)
    {
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_SB.PR00.GPSD (0x09))
        }
    }

    Scope (\_SB.PR10)
    {
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_SB.PR00.GPSD (0x0A))
        }
    }

    Scope (\_SB.PR11)
    {
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_SB.PR00.GPSD (0x0B))
        }
    }

    Scope (\_SB.PR12)
    {
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_SB.PR00.GPSD (0x0C))
        }
    }

    Scope (\_SB.PR13)
    {
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_SB.PR00.GPSD (0x0D))
        }
    }

    Scope (\_SB.PR14)
    {
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_SB.PR00.GPSD (0x0E))
        }
    }

    Scope (\_SB.PR15)
    {
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_SB.PR00.GPSD (0x0F))
        }
    }

    Scope (\_SB.PR16)
    {
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_SB.PR00.GPSD (0x10))
        }
    }

    Scope (\_SB.PR17)
    {
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_SB.PR00.GPSD (0x11))
        }
    }

    Scope (\_SB.PR18)
    {
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_SB.PR00.GPSD (0x12))
        }
    }

    Scope (\_SB.PR19)
    {
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_SB.PR00.GPSD (0x13))
        }
    }

    Scope (\_SB.PR20)
    {
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_SB.PR00.GPSD (0x14))
        }
    }

    Scope (\_SB.PR21)
    {
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_SB.PR00.GPSD (0x15))
        }
    }

    Scope (\_SB.PR22)
    {
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_SB.PR00.GPSD (0x16))
        }
    }

    Scope (\_SB.PR23)
    {
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_SB.PR00.GPSD (0x17))
        }
    }
}



SSDT3
-----
DefinitionBlock ("", "SSDT", 2, "LENOVO", "CB-01   ", 0x00000001)
{
    External (_SB_.PDTS, UnknownObj)
    External (_TZ_.TZ00._TMP, UnknownObj)
    External (PAMT, UnknownObj)
    External (TSDB, UnknownObj)

    Scope (\_SB)
    {
        Device (PTID)
        {
            Name (_HID, EisaId ("INT340E") /* Motherboard Resources */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _CID: Compatible ID
            Name (IVER, 0x00030000)
            Name (_STA, 0x0F)  // _STA: Status
            Method (TSDL, 0, NotSerialized)
            {
                If ((TSDB == One))
                {
                    Return (TSD2) /* \_SB_.PTID.TSD2 */
                }

                Return (TSD1) /* \_SB_.PTID.TSD1 */
            }

            Name (TSD1, Package (0x26)
            {
                Zero, 
                "CPU Core 0 DTS", 
                Zero, 
                "CPU Core 1 DTS", 
                Zero, 
                "CPU Core 2 DTS", 
                Zero, 
                "CPU Core 3 DTS", 
                Zero, 
                "CPU Core Package DTS", 
                0x03, 
                "DIMM0_hotspot_U4C1", 
                0x03, 
                "DIMM1_hotspot_Q4D1", 
                0x03, 
                "IMVP_conn_Q7C1", 
                0x03, 
                "board_hotspot1_U3G3", 
                0x03, 
                "board_hotspot2_Q3G1", 
                Zero, 
                "CPU Package Temperature", 
                0x05, 
                "PCH DTS Temperature from PCH", 
                Zero, 
                "CPU PECI reading", 
                0x05, 
                "SA DTS Temperature from PCH", 
                0x02, 
                "TZ00 _TMP", 
                0x03, 
                "SDRAM_hotspot_RT5B1", 
                0x03, 
                "NGFF_slot_RT6G1", 
                0x03, 
                "IMVP_conn_RT7D1", 
                0x03, 
                "board_hotspot3_RT8F1"
            })
            Name (TSD2, Package (0x26)
            {
                Zero, 
                "CPU Core 0 DTS", 
                Zero, 
                "CPU Core 1 DTS", 
                Zero, 
                "CPU Core 2 DTS", 
                Zero, 
                "CPU Core 3 DTS", 
                Zero, 
                "CPU Core Package DTS", 
                0x03, 
                "A-Skin Hotspot U21", 
                0x03, 
                "A-Skin Hotspot U21 IR", 
                0x03, 
                "B-Skin Hotspot U1", 
                0x03, 
                "B-Skin Hotspot U1 IR", 
                Zero, 
                "CPU Package Temperature", 
                0x05, 
                "PCH DTS Temperature from PCH", 
                Zero, 
                "CPU PECI reading", 
                0x05, 
                "SA DTS Temperature from PCH", 
                0x02, 
                "TZ00 _TMP", 
                0x03, 
                "SoC VR Thermsitor RT11", 
                0x03, 
                "Memory Thermistor RT9", 
                0x03, 
                "GNSS Board Ambient Thermistor R4", 
                0x03, 
                "System VR Thermistor RT10", 
                0x03, 
                "A-Skin MipiCam Thermistor RT8"
            })
            Name (PSDL, Package (0x26)
            {
                0x0B, 
                "Platform Power (mW)", 
                0x0B, 
                "Brick Power cW(100ths)", 
                0x0B, 
                "Battery Discharge Power cW(100ths)", 
                0x0B, 
                "Platform Average Power (mW)", 
                0x0B, 
                "Brick Average Power cW(0.01)", 
                0x0B, 
                "Battery Discharge Average Power cW(0.01)", 
                0x0C, 
                "Battery 1 Design Capacity (mWh)", 
                0x0C, 
                "Battery 1 Remaining Capacity (mWh)", 
                0x0C, 
                "Battery 1 Full Charge Capacity (mWh)", 
                0x0C, 
                "Battery 1 Full Resolution Voltage (mV)", 
                0x0C, 
                "Battery 1 Full Resolution Discharge Current (mA)", 
                0x0C, 
                "Battery 1 Full Resolution Charge Current (mA)", 
                0x0C, 
                "Battery 2 Remaining Capacity (mWh)", 
                0x0C, 
                "Battery 2 Full Charge Capacity (mWh)", 
                0x0C, 
                "Battery 2 Full Resolution Voltage (mV)", 
                0x0C, 
                "Battery 2 Full Resolution Discharge Current (mA)", 
                0x0C, 
                "Battery 2 Full Resolution Charge Current (mA)", 
                0x0C, 
                "Battery Pack 1 maximum power (mW)", 
                0x0C, 
                "Battery Pack 2 maximum power (mW)"
            })
            Method (OSDL, 0, NotSerialized)
            {
                If ((TSDB == One))
                {
                    Return (OSD2) /* \_SB_.PTID.OSD2 */
                }

                Return (OSD1) /* \_SB_.PTID.OSD1 */
            }

            Name (OSD1, Package (0x15)
            {
                0x04, 
                "CPU Fan Duty Cycle", 
                "RAW", 
                0x04, 
                "CPU Fan #1 Speed", 
                "RPM", 
                0x03, 
                "Skin Temp 0", 
                "RAW", 
                0x03, 
                "Thermistor 1 ", 
                "RAW", 
                0x03, 
                "Thermistor 2 ", 
                "RAW", 
                0x03, 
                "Thermistor 3 ", 
                "RAW", 
                0x03, 
                "Thermistor 4 ", 
                "RAW"
            })
            Name (OSD2, Package (0x18)
            {
                0x04, 
                "CPU Fan Duty Cycle", 
                "RAW", 
                0x04, 
                "CPU Fan #1 Speed", 
                "RPM", 
                0x03, 
                "Skin Temp 0", 
                "RAW", 
                0x03, 
                "Thermistor 1 ", 
                "RAW", 
                0x03, 
                "Thermistor 2 ", 
                "RAW", 
                0x03, 
                "Thermistor 3 ", 
                "RAW", 
                0x03, 
                "Thermistor 4 ", 
                "RAW", 
                0x03, 
                "Thermistor 5 ", 
                "RAW"
            })
            Method (TSDD, 0, Serialized)
            {
                If ((TSDB == One))
                {
                    Name (TMPX, Package (0x13)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000, 
                        0x80000000, 
                        0x80000000, 
                        0x80000000, 
                        0x80000000, 
                        0x80000000, 
                        0x80000000, 
                        0x80000000, 
                        0x80000000, 
                        0x80000000, 
                        0x80000000, 
                        0x80000000, 
                        0x80000000, 
                        0x80000000, 
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    })
                    Local0 = ((\_SB.PDTS * 0x0A) + 0x0AAC)
                    TMPX [Zero] = Local0
                    TMPX [One] = Local0
                    TMPX [0x02] = Local0
                    TMPX [0x03] = Local0
                    TMPX [0x04] = Local0
                    TMPX [0x0D] = \_TZ.TZ00._TMP /* External reference */
                    Return (TMPX) /* \_SB_.PTID.TSDD.TMPX */
                }

                Name (TMPV, Package (0x14)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                })
                Local0 = ((\_SB.PDTS * 0x0A) + 0x0AAC)
                TMPV [Zero] = Local0
                TMPV [One] = Local0
                TMPV [0x02] = Local0
                TMPV [0x03] = Local0
                TMPV [0x04] = Local0
                TMPV [0x0E] = \_TZ.TZ00._TMP /* External reference */
                Return (TMPV) /* \_SB_.PTID.TSDD.TMPV */
            }

            Method (PSDD, 0, Serialized)
            {
                Name (PWRV, Package (0x13)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                })
                Return (PWRV) /* \_SB_.PTID.PSDD.PWRV */
            }

            Method (OSDD, 0, Serialized)
            {
                Return (Package (0x00) {})
            }

            Method (SDSP, 0, NotSerialized)
            {
                Return (0x0A)
            }

            Name (PADA, Package (0x0A)
            {
                One, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0x1A, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF
            })
            Name (PADD, Package (0x0A)
            {
                0x02, 
                0x06A4, 
                0x06A0, 
                0x1A, 
                0x62, 
                0x63, 
                0x60, 
                0x61, 
                0x65, 
                0x64
            })
            Method (PADT, 0, NotSerialized)
            {
                If (PAMT)
                {
                    Return (PADA) /* \_SB_.PTID.PADA */
                }

                Return (PADD) /* \_SB_.PTID.PADD */
            }

            Method (RPMD, 0, Serialized)
            {
                Name (MTMP, Buffer (0x1A) {})
                Return (MTMP) /* \_SB_.PTID.RPMD.MTMP */
            }

            Method (WPMD, 1, NotSerialized)
            {
                If ((SizeOf (Arg0) != 0x1A))
                {
                    Return (0xFFFFFFFF)
                }

                Return (Zero)
            }

            Method (ISPC, 0, NotSerialized)
            {
                Return (Zero)
            }

            Method (ENPC, 0, NotSerialized)
            {
                Return (Zero)
            }

            Method (RPCS, 0, NotSerialized)
            {
            }

            Method (RPEC, 0, NotSerialized)
            {
                Local0 = Zero
                Return (Local0)
            }
        }
    }
}



SSDT4
-----
DefinitionBlock ("", "SSDT", 1, "LENOVO", "CB-01   ", 0x00000001)
{
    Scope (\_SB)
    {
        Name (MDSZ, 0x01E0)
        OperationRegion (PDSP, SystemIO, 0xB2, One)
        Field (PDSP, ByteAcc, NoLock, Preserve)
        {
            IOB2,   8
        }

        OperationRegion (GPCD, SystemMemory, 0x453AD000, 0x0200)
        Field (GPCD, AnyAcc, NoLock, Preserve)
        {
            DTSZ,   32, 
            TKNO,   32, 
            PTYP,   8, 
            I_PS,   8, 
            PACT,   8, 
            RSVD,   40, 
            PGUI,   128, 
            DBUF,   3840
        }

        Method (PCDE, 2, Serialized)
        {
            PGUI = Arg0
            TKNO = Arg1
            Local0 = Zero
            IOB2 = 0x17
            If ((I_PS == Zero))
            {
                If ((DTSZ <= MDSZ))
                {
                    Mid (DBUF, Zero, DTSZ, Local0)
                }
            }

            Return (Local0)
        }

        Method (HBID, 0, NotSerialized)
        {
            Local0 = \_SB.PCDE (Buffer (0x10)
                    {
                        /* 0000 */  0x83, 0x18, 0x1F, 0xC5, 0x00, 0xDF, 0x6A, 0x4F,  // ......jO
                        /* 0008 */  0x08, 0xA0, 0x36, 0x9F, 0x60, 0x98, 0xFD, 0xAF   // ..6.`...
                    }, 0x20000032)
            Return (Local0)
        }
    }
}



SSDT5
-----
DefinitionBlock ("", "SSDT", 2, "LENOVO", "CB-01   ", 0x00000001)
{
    External (_SB_.BTRK, MethodObj)    // 1 Arguments
    External (_SB_.PC00.RP14.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PC00.TXHC.RHUB.SS01, DeviceObj)
    External (_SB_.PC00.TXHC.RHUB.SS02, DeviceObj)
    External (_SB_.PC00.TXHC.RHUB.SS03, DeviceObj)
    External (_SB_.PC00.TXHC.RHUB.SS04, DeviceObj)
    External (_SB_.PC00.TXHC.RHUB.TPLD, MethodObj)    // 2 Arguments
    External (_SB_.PC00.TXHC.RHUB.TUPC, MethodObj)    // 2 Arguments
    External (_SB_.PC00.XHCI.RHUB.HS01, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.HS02, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.HS03, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.HS04, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.HS05, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.HS06, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.HS06._ADR, IntObj)
    External (_SB_.PC00.XHCI.RHUB.HS07, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.HS08, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.HS09, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.HS10, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.HS11, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.HS12, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.HS13, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.HS14, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.SS01, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.SS02, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.SS03, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.SS04, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.SS05, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.SS06, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.SS07, DeviceObj)
    External (_SB_.PC00.XHCI.RHUB.SS08, DeviceObj)
    External (ATDV, UnknownObj)
    External (BED2, UnknownObj)
    External (BED3, UnknownObj)
    External (BTBR, UnknownObj)
    External (BTL2, UnknownObj)
    External (BTLE, UnknownObj)
    External (BTLL, UnknownObj)
    External (BTSE, UnknownObj)
    External (CECV, UnknownObj)
    External (CNMT, UnknownObj)
    External (MCSK, IntObj)
    External (PCHH, UnknownObj)
    External (PCHS, UnknownObj)
    External (RDLY, UnknownObj)
    External (SXI1, IntObj)
    External (SXI2, IntObj)
    External (SXP1, IntObj)
    External (SXP2, IntObj)
    External (THCE, UnknownObj)

    Method (GPLD, 2, Serialized)
    {
        Name (PCKG, Package (0x01)
        {
            Buffer (0x10) {}
        })
        CreateField (DerefOf (PCKG [Zero]), Zero, 0x07, REV)
        REV = 0x02
        CreateField (DerefOf (PCKG [Zero]), 0x07, One, RGB)
        RGB = One
        CreateField (DerefOf (PCKG [Zero]), 0x40, One, VISI)
        VISI = Arg0
        CreateField (DerefOf (PCKG [Zero]), 0x57, 0x08, GPOS)
        GPOS = Arg1
        Return (PCKG) /* \GPLD.PCKG */
    }

    Method (GUPC, 2, Serialized)
    {
        Name (PCKG, Package (0x04)
        {
            0xFF, 
            0xFF, 
            Zero, 
            Zero
        })
        PCKG [Zero] = Arg0
        PCKG [One] = Arg1
        Return (PCKG) /* \GUPC.PCKG */
    }

    Method (TPLD, 2, Serialized)
    {
        Name (PCKG, Package (0x01)
        {
            Buffer (0x10) {}
        })
        CreateField (DerefOf (PCKG [Zero]), Zero, 0x07, REV)
        REV = One
        CreateField (DerefOf (PCKG [Zero]), 0x40, One, VISI)
        VISI = Arg0
        CreateField (DerefOf (PCKG [Zero]), 0x57, 0x08, GPOS)
        GPOS = Arg1
        CreateField (DerefOf (PCKG [Zero]), 0x4A, 0x04, SHAP)
        SHAP = One
        CreateField (DerefOf (PCKG [Zero]), 0x20, 0x10, WID)
        WID = 0x08
        CreateField (DerefOf (PCKG [Zero]), 0x30, 0x10, HGT)
        HGT = 0x03
        Return (PCKG) /* \TPLD.PCKG */
    }

    Method (TUPC, 2, Serialized)
    {
        Name (PCKG, Package (0x04)
        {
            One, 
            Zero, 
            Zero, 
            Zero
        })
        PCKG [Zero] = Arg0
        PCKG [One] = Arg1
        Return (PCKG) /* \TUPC.PCKG */
    }

    If ((THCE == One))
    {
        Scope (\_SB.PC00.TXHC.RHUB.SS01)
        {
            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
            {
                Return (TUPC (One, 0x0A))
            }

            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
            {
                Return (TPLD (One, 0x02))
            }
        }

        Scope (\_SB.PC00.TXHC.RHUB.SS02)
        {
            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
            {
                Return (GUPC (Zero, 0xFF))
            }

            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
            {
                Return (GPLD (Zero, Zero))
            }
        }

        Scope (\_SB.PC00.TXHC.RHUB.SS03)
        {
            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
            {
                Return (TUPC (One, 0x0A))
            }

            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
            {
                Return (TPLD (One, 0x03))
            }
        }

        Scope (\_SB.PC00.TXHC.RHUB.SS04)
        {
            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
            {
                Return (GUPC (Zero, 0xFF))
            }

            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
            {
                Return (GPLD (Zero, Zero))
            }
        }
    }

    Scope (\_SB.PC00.XHCI.RHUB.HS01)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            Return (GUPC (One, Zero))
        }

        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            Return (GPLD (One, One))
        }
    }

    Scope (\_SB.PC00.XHCI.RHUB.HS02)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            Return (TUPC (One, 0x0A))
        }

        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            Return (TPLD (One, 0x02))
        }
    }

    Scope (\_SB.PC00.XHCI.RHUB.HS03)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            Return (TUPC (One, 0x0A))
        }

        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            Return (TPLD (One, 0x03))
        }
    }

    Scope (\_SB.PC00.XHCI.RHUB.HS04)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            If ((MCSK == 0x04))
            {
                Return (TUPC (One, 0x0A))
            }
            Else
            {
                Return (GUPC (One, Zero))
            }
        }

        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            If ((MCSK == 0x04))
            {
                Return (TPLD (One, 0x04))
            }
            Else
            {
                Return (GPLD (One, 0x04))
            }
        }
    }

    Scope (\_SB.PC00.XHCI.RHUB.HS05)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            Return (GUPC (Zero, 0xFF))
        }

        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            Return (GPLD (Zero, Zero))
        }
    }

    Scope (\_SB.PC00.XHCI.RHUB.HS06)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            Return (GUPC (Zero, 0xFF))
        }

        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            Return (GPLD (Zero, Zero))
        }
    }

    Scope (\_SB.PC00.XHCI.RHUB.HS07)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            Return (GUPC (Zero, 0xFF))
        }

        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            Return (GPLD (Zero, Zero))
        }
    }

    Scope (\_SB.PC00.XHCI.RHUB.HS08)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            Return (GUPC (Zero, 0xFF))
        }

        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            Return (GPLD (Zero, Zero))
        }
    }

    Scope (\_SB.PC00.XHCI.RHUB.HS09)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            Return (GUPC (Zero, 0xFF))
        }

        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            Return (GPLD (Zero, Zero))
        }
    }

    Scope (\_SB.PC00.XHCI.RHUB.HS10)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            Return (GUPC (One, Zero))
        }

        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            Return (GPLD (One, 0x0A))
        }
    }

    Scope (\_SB.PC00.XHCI.RHUB.HS11)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            Return (GUPC (One, Zero))
        }

        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            Return (GPLD (One, 0x0B))
        }
    }

    Scope (\_SB.PC00.XHCI.RHUB.HS12)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            Return (GUPC (Zero, 0xFF))
        }

        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            Return (GPLD (Zero, Zero))
        }
    }

    Scope (\_SB.PC00.XHCI.RHUB.HS13)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            Return (GUPC (Zero, 0xFF))
        }

        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            Return (GPLD (Zero, Zero))
        }
    }

    Scope (\_SB.PC00.XHCI.RHUB.HS14)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            Return (GUPC (Zero, 0xFF))
        }

        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            Return (GPLD (Zero, Zero))
        }

        If (\_SB.PC00.RP14.PXSX.WIST ())
        {
            Name (SADX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    0x80000000
                }, 

                Package (0x02)
                {
                    0x12, 
                    0x80000000
                }
            })
            Method (SADS, 0, Serialized)
            {
                DerefOf (SADX [One]) [One] = \ATDV /* External reference */
                DerefOf (SADX [0x02]) [One] = \ATDV /* External reference */
                Return (SADX) /* \_SB_.PC00.XHCI.RHUB.HS14.SADX */
            }

            Name (RDLY, 0x69)
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("aa10f4e0-81ac-4233-abf6-3b2ac50e28d9") /* Unknown UUID */))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        RDLY = Arg3
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            PowerResource (BTRT, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    Local0 = Acquire (\CNMT, 0x03E8)
                    If ((Local0 == Zero))
                    {
                        \_SB.BTRK (Zero)
                        Sleep (RDLY)
                        \_SB.BTRK (One)
                        Sleep (RDLY)
                    }

                    Release (\CNMT)
                }
            }

            Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
            {
                Return (Package (0x01)
                {
                    BTRT
                })
            }

            Name (BRDY, Package (0x02)
            {
                Zero, 
                Package (0x08)
                {
                    0x12, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (BRDS, 0, Serialized)
            {
                DerefOf (BRDY [One]) [One] = \BTSE /* External reference */
                DerefOf (BRDY [One]) [0x02] = \BTBR /* External reference */
                DerefOf (BRDY [One]) [0x03] = \BED2 /* External reference */
                DerefOf (BRDY [One]) [0x04] = \BED3 /* External reference */
                DerefOf (BRDY [One]) [0x05] = \BTLE /* External reference */
                DerefOf (BRDY [One]) [0x06] = \BTL2 /* External reference */
                DerefOf (BRDY [One]) [0x07] = \BTLL /* External reference */
                Return (BRDY) /* \_SB_.PC00.XHCI.RHUB.HS14.BRDY */
            }

            Name (ECKY, Package (0x02)
            {
                Zero, 
                Package (0x02)
                {
                    0x12, 
                    Zero
                }
            })
            Method (ECKV, 0, Serialized)
            {
                DerefOf (ECKY [One]) [One] = \CECV /* External reference */
                Return (ECKY) /* \_SB_.PC00.XHCI.RHUB.HS14.ECKY */
            }

            Name (GPCX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }, 

                Package (0x02)
                {
                    0x12, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }
            })
            Method (GPC, 0, Serialized)
            {
                Return (GPCX) /* \_SB_.PC00.XHCI.RHUB.HS14.GPCX */
            }
        }
    }

    Scope (\_SB.PC00.XHCI.RHUB.SS01)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            Return (GUPC (One, Zero))
        }

        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            Return (GPLD (One, One))
        }
    }

    Scope (\_SB.PC00.XHCI.RHUB.SS02)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            If ((MCSK == 0x04))
            {
                Return (TUPC (One, 0x0A))
            }
            Else
            {
                Return (GUPC (One, Zero))
            }
        }

        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            If ((MCSK == 0x04))
            {
                Return (TPLD (One, 0x04))
            }
            Else
            {
                Return (GPLD (One, 0x04))
            }
        }
    }

    Scope (\_SB.PC00.XHCI.RHUB.SS03)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            Return (GUPC (One, Zero))
        }

        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            Return (GPLD (One, 0x0B))
        }
    }

    Scope (\_SB.PC00.XHCI.RHUB.SS04)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            Return (GUPC (Zero, 0xFF))
        }

        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            Return (GPLD (Zero, Zero))
        }
    }

    Scope (\_SB.PC00.XHCI.RHUB.SS05)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            Return (GUPC (One, Zero))
        }

        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            Return (GPLD (One, 0x0A))
        }
    }

    Scope (\_SB.PC00.XHCI.RHUB.SS06)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            Return (GUPC (Zero, 0xFF))
        }

        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            Return (GPLD (Zero, Zero))
        }
    }

    Scope (\_SB.PC00.XHCI.RHUB.SS07)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            Return (GUPC (Zero, 0xFF))
        }

        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            Return (GPLD (Zero, Zero))
        }
    }

    Scope (\_SB.PC00.XHCI.RHUB.SS08)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            Return (GUPC (Zero, 0xFF))
        }

        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            Return (GPLD (Zero, Zero))
        }
    }

    Scope (\_SB.PC00.XHCI.RHUB.HS06)
    {
        Device (CAM0)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                Return (^^_ADR) /* External reference */
            }

            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
            {
                ToPLD (
                    PLD_Revision           = 0x2,
                    PLD_IgnoreColor        = 0x1,
                    PLD_Red                = 0x0,
                    PLD_Green              = 0x0,
                    PLD_Blue               = 0x0,
                    PLD_Width              = 0x0,
                    PLD_Height             = 0x0,
                    PLD_UserVisible        = 0x1,
                    PLD_Dock               = 0x0,
                    PLD_Lid                = 0x1,
                    PLD_Panel              = "FRONT",
                    PLD_VerticalPosition   = "UPPER",
                    PLD_HorizontalPosition = "CENTER",
                    PLD_Shape              = "UNKNOWN",
                    PLD_GroupOrientation   = 0x0,
                    PLD_GroupToken         = 0x0,
                    PLD_GroupPosition      = 0x0,
                    PLD_Bay                = 0x0,
                    PLD_Ejectable          = 0x0,
                    PLD_EjectRequired      = 0x0,
                    PLD_CabinetNumber      = 0x0,
                    PLD_CardCageNumber     = 0x0,
                    PLD_Reference          = 0x0,
                    PLD_Rotation           = 0x0,
                    PLD_Order              = 0x0,
                    PLD_VerticalOffset     = 0x8C,
                    PLD_HorizontalOffset   = 0x12C)

            })
        }
    }
}



SSDT6
-----
DefinitionBlock ("", "SSDT", 2, "LENOVO", "CB-01   ", 0x00000001)
{
    External (_SB_.PCI0, DeviceObj)

    Scope (\_SB.PCI0)
    {
        Name (SFRZ, Buffer (0x07)
        {
             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF5         // .......
        })
        Method (GTF, 0, NotSerialized)
        {
            Return (SFRZ) /* \_SB_.PCI0.SFRZ */
        }
    }
}



SSDT7
-----
DefinitionBlock ("", "SSDT", 2, "INTEL ", "TcssSsdt", 0x00001000)
{
    External (_SB_.PC00, DeviceObj)
    External (_SB_.PC00.GFX0, DeviceObj)
    External (_SB_.PC00.GMHB, MethodObj)    // 0 Arguments
    External (_SB_.PC00.GPCB, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PEG1.PEGP, DeviceObj)
    External (_SB_.PC01, DeviceObj)
    External (ADBG, MethodObj)    // 1 Arguments
    External (CPWE, UnknownObj)
    External (CPWS, UnknownObj)
    External (CSFR, UnknownObj)
    External (DME0, UnknownObj)
    External (DME1, UnknownObj)
    External (DUWS, UnknownObj)
    External (ECR1, UnknownObj)
    External (GPRW, MethodObj)    // 2 Arguments
    External (IMRY, UnknownObj)
    External (ITM0, UnknownObj)
    External (ITM1, UnknownObj)
    External (LTE0, UnknownObj)
    External (LTE1, UnknownObj)
    External (LTE2, UnknownObj)
    External (LTE3, UnknownObj)
    External (OTHC, UnknownObj)
    External (P2PS, UnknownObj)
    External (PCIC, MethodObj)    // 1 Arguments
    External (PCID, MethodObj)    // 4 Arguments
    External (PDI0, UnknownObj)
    External (PDI1, UnknownObj)
    External (PICM, UnknownObj)
    External (PNS0, UnknownObj)
    External (PNS1, UnknownObj)
    External (PNS2, UnknownObj)
    External (PNS3, UnknownObj)
    External (PSL0, UnknownObj)
    External (PSL1, UnknownObj)
    External (PSL2, UnknownObj)
    External (PSL3, UnknownObj)
    External (TCDS, UnknownObj)
    External (TCIR, UnknownObj)
    External (TCIT, UnknownObj)
    External (TDCE, UnknownObj)
    External (THCE, UnknownObj)
    External (TIVS, UnknownObj)
    External (TPA0, UnknownObj)
    External (TPA1, UnknownObj)
    External (TPA2, UnknownObj)
    External (TPA3, UnknownObj)
    External (TRE0, UnknownObj)
    External (TRE1, UnknownObj)
    External (TRE2, UnknownObj)
    External (TRE3, UnknownObj)
    External (TRTD, UnknownObj)
    External (XDAT, MethodObj)    // 0 Arguments

    Name (ITNB, 0x45A79000)
    Name (ITNL, 0x0012)
    OperationRegion (ITNV, SystemMemory, ITNB, ITNL)
    Field (ITNV, AnyAcc, Lock, Preserve)
    {
        ITSP,   8, 
        IDM0,   8, 
        IDM1,   8, 
        ITCP,   8, 
        IT0E,   8, 
        IT1E,   8, 
        IT2E,   8, 
        IT3E,   8, 
        IORB,   8, 
        ITRT,   8, 
        ITRE,   16, 
        ITIM,   8, 
        ITFP,   16, 
        ITCT,   16, 
        ITVD,   8
    }

    If (ITRT)
    {
        Scope (\_SB.PC00.GFX0)
        {
            Name (_S3D, 0x03)  // _S3D: S3 Device State
            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
            }
        }
    }

    Scope (\_SB)
    {
        Name (C2PW, Zero)
        Method (C2PM, 4, Serialized)
        {
            Switch (ToInteger (Arg3))
            {
                Case (Zero)
                {
                    Local0 = "Tcss iTbt Pcie 0 RP 0"
                }
                Case (One)
                {
                    Local0 = "Tcss iTbt Pcie 0 RP 1"
                }
                Case (0x02)
                {
                    Local0 = "Tcss iTbt Pcie 0 RP 2"
                }
                Case (0x03)
                {
                    Local0 = "Tcss iTbt Pcie 0 RP 3"
                }
                Case (0x04)
                {
                    Local0 = "Tcss xHci"
                }
                Case (0x05)
                {
                    Local0 = "Tcss xDci"
                }
                Case (0x06)
                {
                    Local0 = "Tcss Dma 0"
                }
                Case (0x07)
                {
                    Local0 = "Tcss Dma 1"
                }
                Case (0x08)
                {
                    Local0 = "Tcss iTbt Pcie 1 RP 0"
                }
                Case (0x09)
                {
                    Local0 = "Tcss iTbt Pcie 1 RP 1"
                }
                Case (0x0A)
                {
                    Local0 = "Tcss iTbt Pcie 1 RP 2"
                }
                Case (0x0B)
                {
                    Local0 = "Tcss iTbt Pcie 1 RP 3"
                }
                Default
                {
                    Return (Zero)
                }

            }

            Local1 = Zero
            Local1 = (One << ToInteger (Arg3))
            ADBG (Concatenate ("Local1 = ", ToHexString (Local1)))
            ADBG (Concatenate ("Before CPU to PCH Wake capability configuration Start from ", Local0))
            ADBG (Concatenate (Local0, Concatenate (" Cpu Wake Status = ", ToHexString (CPWS))))
            ADBG (Concatenate (Local0, Concatenate (" Cpu Wake Enable = ", ToHexString (CPWE))))
            ADBG (Concatenate (Local0, Concatenate (" Cpu To Pch Wake Value = ", ToHexString (C2PW))))
            ADBG (Concatenate ("C2PM ", Local0))
            If ((Arg0 && Arg1))
            {
                If ((CPWE == Zero))
                {
                    If (CPWS)
                    {
                        CPWS = One
                    }

                    CPWE = One
                }

                If (((C2PW & Local1) == Zero))
                {
                    C2PW |= Local1
                }

                ADBG (Concatenate (Local0, " Sx EnWak"))
            }
            ElseIf ((Arg0 || Arg2))
            {
                If ((CPWE == Zero))
                {
                    If (CPWS)
                    {
                        CPWS = One
                    }

                    CPWE = One
                }

                If (((C2PW & Local1) == Zero))
                {
                    C2PW |= Local1
                }

                ADBG (Concatenate (Local0, " D3 En Wak"))
            }
            Else
            {
                If (((C2PW & Local1) != Zero))
                {
                    C2PW &= ~Local1
                }

                If (((CPWE != Zero) && (C2PW == Zero)))
                {
                    CPWE = Zero
                }

                ADBG (Concatenate (Local0, " DisWak"))
            }

            ADBG (Concatenate ("After CPU to PCH Wake capability configuration End from ", Local0))
            ADBG (Concatenate (Local0, Concatenate (" Cpu Wake Status = ", ToHexString (CPWS))))
            ADBG (Concatenate (Local0, Concatenate (" Cpu Wake Enable = ", ToHexString (CPWE))))
            ADBG (Concatenate (Local0, Concatenate (" Cpu To Pch Wake Value = ", ToHexString (C2PW))))
            Return (Zero)
        }
    }

    Scope (\_SB.PC00)
    {
        OperationRegion (MBAR, SystemMemory, (\_SB.PC00.GMHB () + 0x7100), 0x1000)
        Field (MBAR, ByteAcc, NoLock, Preserve)
        {
            Offset (0x10), 
            RBAR,   64
        }

        OperationRegion (PBAR, SystemMemory, (\_SB.PC00.GMHB () + 0x5DA0), 0x08)
        Field (PBAR, DWordAcc, NoLock, Preserve)
        {
            PMBD,   32, 
            PMBC,   8, 
            PSCM,   8, 
                ,   15, 
            PMBR,   1
        }

        Method (PMBY, 0, NotSerialized)
        {
            Local0 = Zero
            While ((PMBR && (Local0 < 0x03E8)))
            {
                Local0++
                Stall (One)
            }

            If ((Local0 == 0x03E8))
            {
                Return (0xFF)
            }

            Return (Zero)
        }

        Method (DSGS, 0, NotSerialized)
        {
            If ((PMBY () == Zero))
            {
                PMBC = 0x15
                PSCM = Zero
                PMBR = One
                If ((PMBY () == Zero))
                {
                    Local0 = PMBD /* \_SB_.PC00.PMBD */
                    Local1 = PMBC /* \_SB_.PC00.PMBC */
                    Stall (0x0A)
                    If (((Local0 != PMBD) || (Local1 != PMBC)))
                    {
                        Return (0xFF)
                    }

                    Return (Local0)
                }
                Else
                {
                    Return (0xFE)
                }
            }
            Else
            {
                Return (0xFE)
            }
        }

        Method (DSCR, 1, NotSerialized)
        {
            If ((Arg0 > One))
            {
                Return (0xFD)
            }

            If ((PMBY () == Zero))
            {
                PMBC = 0x15
                PSCM = One
                PMBD = Arg0
                PMBR = One
                If ((PMBY () == Zero))
                {
                    Local0 = PMBD /* \_SB_.PC00.PMBD */
                    Local1 = PMBC /* \_SB_.PC00.PMBC */
                    Stall (0x0A)
                    If (((Local0 != PMBD) || (Local1 != PMBC)))
                    {
                        Return (0xFF)
                    }

                    Local0 = Zero
                    While (((DSGS () & 0x02) && (Local0 < 0x64)))
                    {
                        Stall (0x64)
                        Local0++
                    }

                    If ((Local0 == 0x64))
                    {
                        Return (0xFE)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
                Else
                {
                    Return (0xFE)
                }
            }
            Else
            {
                Return (0xFE)
            }
        }

        Method (IOMA, 0, NotSerialized)
        {
            Return ((^RBAR & 0xFFFFFFFFFFFFFFFE))
        }

        Method (PIDS, 0, NotSerialized)
        {
            Return (0x00C10000)
        }

        OperationRegion (IOMR, SystemMemory, (IOMA () + PIDS ()), 0x0100)
        Field (IOMR, DWordAcc, NoLock, Preserve)
        {
            Offset (0x40), 
                ,   15, 
            TD3C,   1, 
            TACK,   1, 
            DPOF,   1, 
            Offset (0x70), 
            IMCD,   32, 
            IMDA,   32
        }

        Method (IMMD, 1, NotSerialized)
        {
            IMDA = Arg0
            ADBG (Concatenate ("IMMD :: ", ToHexString (IMDA)))
            Return (Zero)
        }

        Method (IMMC, 5, Serialized)
        {
            Name (OPTS, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            CreateByteField (OPTS, Zero, CMST)
            CreateByteField (OPTS, One, RTB1)
            IMMD (Arg4)
            Local1 = Arg3
            Local1 <<= 0x08
            Local1 += Arg2
            Local1 <<= 0x08
            Local1 += Arg0
            IMCD = Local1
            ADBG (Concatenate ("Set IMMC Command ", ToHexString (IMCD)))
            IMCD |= 0x80000000
            ADBG (Concatenate ("Set IMMC Run Bit ", ToHexString (IMCD)))
            Local0 = Arg1
            ADBG (Concatenate ("IMMC Delay ", ToHexString (Local0)))
            While ((((IMCD & 0x80000000) != Zero) && (Local0 != 
                Zero)))
            {
                Sleep (One)
                Local0--
            }

            Switch (ToInteger (Arg0))
            {
                Case (0x02)
                {
                    ADBG ("GEM_SB_TRAN_CMD")
                    Return (Zero)
                }
                Case (0x03)
                {
                    ADBG ("IOM_BIOS_MBX_GET_HPD_COUNT")
                    If (((IMCD & 0x80000000) != Zero))
                    {
                        ADBG ("Timeout!")
                        ADBG (Concatenate ("IOM MB CMD Reg ", ToHexString (IMCD)))
                        ADBG (Concatenate ("IOM MB DATA Reg ", ToHexString (IMDA)))
                        CMST = One
                        Return (OPTS) /* \_SB_.PC00.IMMC.OPTS */
                    }
                    ElseIf (((IMCD & 0xFF) != Zero))
                    {
                        ADBG ("Completion Code Fail")
                        ADBG (Concatenate ("IOM MB CMD Reg ", ToHexString (IMCD)))
                        CMST = One
                    }
                    Else
                    {
                        ADBG ("Passed")
                        ADBG (Concatenate ("IOM MB CMD Reg :: ", ToHexString (IMCD)))
                        ADBG (Concatenate ("IOM MB DATA Reg :: ", ToHexString (IMDA)))
                        ADBG (Concatenate ("Arg2 is Port Number :: ", ToHexString (Arg2)))
                        CMST = Zero
                        RTB1 = IMDA /* \_SB_.PC00.IMDA */
                    }

                    Return (OPTS) /* \_SB_.PC00.IMMC.OPTS */
                }
                Case (Package (0x02)
                    {
                        0x06, 
                        0x08
                    }

)
                {
                    Switch (ToInteger (Arg0))
                    {
                        Case (0x06)
                        {
                            ADBG ("IOM_BIOS_MBX_DEC_HPD_COUNT:")
                        }
                        Case (0x08)
                        {
                            ADBG ("IOM_BIOS_DPIN_SWITCH_CMD:")
                        }
                        Default
                        {
                            ADBG ("UnKnownType")
                            CMST = One
                            Return (OPTS) /* \_SB_.PC00.IMMC.OPTS */
                        }

                    }

                    RTB1 = Zero
                    If (((IMCD & 0x80000000) != Zero))
                    {
                        ADBG ("Timeout!")
                        CMST = One
                    }
                    ElseIf (((IMCD & 0xFF) != Zero))
                    {
                        ADBG ("Completion Code Fail")
                        ADBG (Concatenate ("IOM MB CMD Reg ", ToHexString (IMCD)))
                        CMST = One
                        RTB1 = IMDA /* \_SB_.PC00.IMDA */
                    }
                    Else
                    {
                        ADBG ("Passed")
                        CMST = Zero
                    }

                    Return (OPTS) /* \_SB_.PC00.IMMC.OPTS */
                }
                Default
                {
                    ADBG ("UnKnownType")
                    CMST = One
                    Return (OPTS) /* \_SB_.PC00.IMMC.OPTS */
                }

            }
        }

        Method (DPFC, 0, NotSerialized)
        {
            Name (OPTS, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            CreateByteField (OPTS, Zero, CMST)
            CreateByteField (OPTS, One, RTB1)
            Sleep (PDI0)
            OPTS = \_SB.PC00.IMMC (0x08, PDI1, Zero, Zero, Zero)
            Return (OPTS) /* \_SB_.PC00.DPFC.OPTS */
        }

        Name (CTP0, Zero)
        Name (CTP1, Zero)
        Method (TG0N, 0, NotSerialized)
        {
            ADBG ("TG0N Start")
            ADBG (Concatenate ("DMA0 VDID -", ToHexString (\_SB.PC00.TDM0.VDID)))
            ADBG (Concatenate ("DMA0 PMST -", ToHexString (\_SB.PC00.TDM0.PMST)))
            ADBG (Concatenate ("DMA0 PMEE -", ToHexString (\_SB.PC00.TDM0.PMEE)))
            ADBG (Concatenate ("DMA0 PMES -", ToHexString (\_SB.PC00.TDM0.PMES)))
            ADBG (Concatenate ("DMA0 STAT -", ToHexString (\_SB.PC00.TDM0.STAT)))
            If ((\_SB.PC00.TDM0.VDID != 0xFFFFFFFF))
            {
                If ((\_SB.PC00.TDM0.STAT == Zero))
                {
                    \_SB.PC00.TDM0.D3CX ()
                    ADBG ("Let\'s bring TBT RPs out of D3Cold")
                    If (CondRefOf (\_SB.PC01))
                    {
                        If ((\_SB.PC01.TRP0.VDID != 0xFFFFFFFF))
                        {
                            \_SB.PC01.TRP0.D3CX ()
                        }

                        If ((\_SB.PC01.TRP1.VDID != 0xFFFFFFFF))
                        {
                            \_SB.PC01.TRP1.D3CX ()
                        }
                    }
                    Else
                    {
                        If ((\_SB.PC00.TRP0.VDID != 0xFFFFFFFF))
                        {
                            \_SB.PC00.TRP0.D3CX ()
                        }

                        If ((\_SB.PC00.TRP1.VDID != 0xFFFFFFFF))
                        {
                            \_SB.PC00.TRP1.D3CX ()
                            Local0 = One
                        }
                    }

                    If ((\_SB.PC00.TDM0.ALCT == One))
                    {
                        If ((CTP0 == One))
                        {
                            If ((ITCT != Zero))
                            {
                                \_SB.PC00.TDM0.CNTP ()
                                \_SB.PC00.TDM0.WACT = One
                                CTP0 = Zero
                            }
                        }

                        \_SB.PC00.TDM0.ALCT = Zero
                    }
                }
                Else
                {
                    ADBG ("Drop TG0N due to it is already exit D3 cold")
                }

                Sleep (ITRE)
            }

            ADBG ("TG0N End")
        }

        Method (TG0F, 0, NotSerialized)
        {
            ADBG ("TG0F Start")
            ADBG (Concatenate ("DMA0 VDID -", ToHexString (\_SB.PC00.TDM0.VDID)))
            ADBG (Concatenate ("DMA0 PMST -", ToHexString (\_SB.PC00.TDM0.PMST)))
            ADBG (Concatenate ("DMA0 PMEE -", ToHexString (\_SB.PC00.TDM0.PMEE)))
            ADBG (Concatenate ("DMA0 PMES -", ToHexString (\_SB.PC00.TDM0.PMES)))
            ADBG (Concatenate ("DMA0 STAT -", ToHexString (\_SB.PC00.TDM0.STAT)))
            If ((\_SB.PC00.TDM0.VDID != 0xFFFFFFFF))
            {
                If ((\_SB.PC00.TDM0.STAT == One))
                {
                    \_SB.PC00.TDM0.D3CE ()
                    ADBG ("Let\'s push TBT RPs to D3Cold together")
                    If (CondRefOf (\_SB.PC01))
                    {
                        If ((\_SB.PC01.TRP0.VDID != 0xFFFFFFFF))
                        {
                            ADBG (Concatenate ("PC01.TRP0.PDSX -", ToHexString (\_SB.PC01.TRP0.PDSX)))
                            If ((\_SB.PC01.TRP0.PDSX == One))
                            {
                                CTP0 = One
                            }

                            \_SB.PC01.TRP0.D3CE ()
                        }

                        If ((\_SB.PC01.TRP1.VDID != 0xFFFFFFFF))
                        {
                            ADBG (Concatenate ("PC01.TRP1.PDSX -", ToHexString (\_SB.PC01.TRP1.PDSX)))
                            If ((\_SB.PC01.TRP1.PDSX == One))
                            {
                                CTP0 = One
                            }

                            \_SB.PC01.TRP1.D3CE ()
                        }
                    }
                    Else
                    {
                        If ((\_SB.PC00.TRP0.VDID != 0xFFFFFFFF))
                        {
                            ADBG (Concatenate ("PC00.TRP0.PDSX -", ToHexString (\_SB.PC00.TRP0.PDSX)))
                            If ((\_SB.PC00.TRP0.PDSX == One))
                            {
                                CTP0 = One
                            }

                            \_SB.PC00.TRP0.D3CE ()
                        }

                        If ((\_SB.PC00.TRP1.VDID != 0xFFFFFFFF))
                        {
                            ADBG (Concatenate ("PC00.TRP1.PDSX -", ToHexString (\_SB.PC00.TRP1.PDSX)))
                            If ((\_SB.PC00.TRP1.PDSX == One))
                            {
                                CTP0 = One
                            }

                            \_SB.PC00.TRP1.D3CE ()
                        }
                    }
                }
            }

            ADBG ("TG0F End")
        }

        Method (TG1N, 0, NotSerialized)
        {
            ADBG ("TG1N Start")
            ADBG (Concatenate ("DMA1 VDID -", ToHexString (\_SB.PC00.TDM1.VDID)))
            ADBG (Concatenate ("DMA1 PMST -", ToHexString (\_SB.PC00.TDM1.PMST)))
            ADBG (Concatenate ("DMA1 PMEE -", ToHexString (\_SB.PC00.TDM1.PMEE)))
            ADBG (Concatenate ("DMA1 PMES -", ToHexString (\_SB.PC00.TDM1.PMES)))
            ADBG (Concatenate ("DMA1 STAT -", ToHexString (\_SB.PC00.TDM1.STAT)))
            If ((\_SB.PC00.TDM1.VDID != 0xFFFFFFFF))
            {
                If ((\_SB.PC00.TDM1.STAT == Zero))
                {
                    \_SB.PC00.TDM1.D3CX ()
                    ADBG ("Let\'s bring TBT RPs out of D3Cold")
                    If (CondRefOf (\_SB.PC01))
                    {
                        If ((\_SB.PC01.TRP2.VDID != 0xFFFFFFFF))
                        {
                            \_SB.PC01.TRP2.D3CX ()
                        }

                        If ((\_SB.PC01.TRP3.VDID != 0xFFFFFFFF))
                        {
                            \_SB.PC01.TRP3.D3CX ()
                        }
                    }
                    Else
                    {
                        If ((\_SB.PC00.TRP2.VDID != 0xFFFFFFFF))
                        {
                            \_SB.PC00.TRP2.D3CX ()
                        }

                        If ((\_SB.PC00.TRP3.VDID != 0xFFFFFFFF))
                        {
                            \_SB.PC00.TRP3.D3CX ()
                        }
                    }

                    If ((\_SB.PC00.TDM1.ALCT == One))
                    {
                        If ((CTP1 == One))
                        {
                            If ((ITCT != Zero))
                            {
                                \_SB.PC00.TDM1.CNTP ()
                                \_SB.PC00.TDM1.WACT = One
                                CTP1 = Zero
                            }
                        }

                        \_SB.PC00.TDM1.ALCT = Zero
                    }
                }
                Else
                {
                    ADBG ("Drop TG1N due to it is already exit D3 cold")
                }

                Sleep (ITRE)
            }

            ADBG ("TG1N End")
        }

        Method (TG1F, 0, NotSerialized)
        {
            ADBG ("TG1F Start")
            ADBG (Concatenate ("DMA1 VDID -", ToHexString (\_SB.PC00.TDM1.VDID)))
            ADBG (Concatenate ("DMA1 PMST -", ToHexString (\_SB.PC00.TDM1.PMST)))
            ADBG (Concatenate ("DMA1 PMEE -", ToHexString (\_SB.PC00.TDM1.PMEE)))
            ADBG (Concatenate ("DMA1 PMES -", ToHexString (\_SB.PC00.TDM1.PMES)))
            ADBG (Concatenate ("DMA1 STAT -", ToHexString (\_SB.PC00.TDM1.STAT)))
            If ((\_SB.PC00.TDM1.VDID != 0xFFFFFFFF))
            {
                If ((\_SB.PC00.TDM1.STAT == One))
                {
                    \_SB.PC00.TDM1.D3CE ()
                    ADBG ("Let\'s push TBT RPs to D3Cold together")
                    If (CondRefOf (\_SB.PC01))
                    {
                        If ((\_SB.PC01.TRP2.VDID != 0xFFFFFFFF))
                        {
                            ADBG (Concatenate ("PC01.TRP2.PDSX -", ToHexString (\_SB.PC01.TRP2.PDSX)))
                            If ((\_SB.PC01.TRP2.PDSX == One))
                            {
                                CTP1 = One
                            }

                            \_SB.PC01.TRP2.D3CE ()
                        }

                        If ((\_SB.PC01.TRP3.VDID != 0xFFFFFFFF))
                        {
                            ADBG (Concatenate ("PC01.TRP3.PDSX -", ToHexString (\_SB.PC01.TRP3.PDSX)))
                            If ((\_SB.PC01.TRP3.PDSX == One))
                            {
                                CTP1 = One
                            }

                            \_SB.PC01.TRP3.D3CE ()
                        }
                    }
                    Else
                    {
                        If ((\_SB.PC00.TRP2.VDID != 0xFFFFFFFF))
                        {
                            ADBG (Concatenate ("PC00.TRP2.PDSX -", ToHexString (\_SB.PC00.TRP2.PDSX)))
                            If ((\_SB.PC00.TRP2.PDSX == One))
                            {
                                CTP1 = One
                            }

                            \_SB.PC00.TRP2.D3CE ()
                        }

                        If ((\_SB.PC00.TRP3.VDID != 0xFFFFFFFF))
                        {
                            ADBG (Concatenate ("PC00.TRP3.PDSX -", ToHexString (\_SB.PC00.TRP3.PDSX)))
                            If ((\_SB.PC00.TRP3.PDSX == One))
                            {
                                CTP1 = One
                            }

                            \_SB.PC00.TRP3.D3CE ()
                        }
                    }
                }
            }

            ADBG ("TG1F End")
        }

        If (ITRT)
        {
            PowerResource (TBT0, 0x05, 0x0001)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ADBG (Concatenate ("DMA0 D3C STAT -", ToHexString (\_SB.PC00.TDM0.STAT)))
                    Return (\_SB.PC00.TDM0.STAT)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    ADBG ("TBT0 Group ON Start")
                    If (ITIM)
                    {
                        TG0N ()
                    }
                    Else
                    {
                        ADBG ("TBT IMR is not valid")
                    }

                    ADBG ("TBT0 Group ON End")
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    ADBG ("TBT0 Group OFF Start")
                    If (ITIM)
                    {
                        ADBG (Concatenate ("Skip D3C entry? ", ToHexString (\_SB.PC00.TDM0.SD3C)))
                        If ((\_SB.PC00.TDM0.SD3C == Zero))
                        {
                            TG0F ()
                        }
                    }
                    Else
                    {
                        ADBG ("TBT IMR is not valid")
                    }

                    ADBG ("TBT0 Group OFF End")
                }
            }

            PowerResource (TBT1, 0x05, 0x0001)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ADBG (Concatenate ("DMA1 D3C STAT -", ToHexString (\_SB.PC00.TDM1.STAT)))
                    Return (\_SB.PC00.TDM1.STAT)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    ADBG ("TBT1 Group ON Start")
                    If (ITIM)
                    {
                        TG1N ()
                    }
                    Else
                    {
                        ADBG ("TBT IMR is not valid")
                    }

                    ADBG ("TBT1 Group ON End")
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    ADBG ("TBT1 Group OFF Start")
                    If (ITIM)
                    {
                        ADBG (Concatenate ("Skip D3C entry? ", ToHexString (\_SB.PC00.TDM1.SD3C)))
                        If ((\_SB.PC00.TDM1.SD3C == Zero))
                        {
                            TG1F ()
                        }
                    }
                    Else
                    {
                        ADBG ("TBT IMR is not valid")
                    }

                    ADBG ("TBT1 Group OFF End")
                }
            }
        }

        If (TRTD)
        {
            Method (TCON, 0, NotSerialized)
            {
                ADBG ("TCSS ON")
                ADBG ("TCON")
                If ((TD3C == One))
                {
                    ADBG (Concatenate ("TACK before D3 cold exit -", ToHexString (TACK)))
                    TD3C = Zero
                    Local0 = Zero
                    While (((TACK != Zero) && (Local0 < 0x64)))
                    {
                        Sleep (One)
                        Local0++
                    }

                    ADBG (Concatenate ("TACK after D3 cold exit -", ToHexString (TACK)))
                    ADBG (Concatenate ("Time for wait TACK - ", ToHexString (Local0)))
                    If ((Local0 == 0x64))
                    {
                        ADBG ("Error: Timeout occurred")
                    }
                    Else
                    {
                        ADBG ("D3Cold Exit")
                        Local0 = Zero
                        While ((\_SB.PC00.TXHC.VDID == 0xFFFFFFFF))
                        {
                            If ((DSGS () == One))
                            {
                                DSCR (Zero)
                            }

                            ADBG (Concatenate ("TXHC VDID -", ToHexString (\_SB.PC00.TXHC.VDID)))
                            Local0++
                            If ((Local0 == 0x05))
                            {
                                ADBG ("pCode mailbox command failed")
                                Break
                            }
                        }

                        If (((TDCE == One) && (IMRY == One)))
                        {
                            ADBG ("IOM.D3.TDCE")
                            \_SB.PC00.TXDC.SINT (TCIT, TCIR)
                            ADBG ("IOM.D3.TDCE Done")
                        }
                    }
                }
                Else
                {
                    ADBG ("Drop TCON due to it is already exit D3 cold")
                    Return (Zero)
                }

                ADBG ("TCSS ON End")
            }

            Method (TCOF, 0, NotSerialized)
            {
                ADBG ("TCSS OFF Start")
                ADBG ("TCOF")
                ADBG (Concatenate ("DMA0 Skip D3C entry? ", ToHexString (\_SB.PC00.TDM0.SD3C)))
                ADBG (Concatenate ("DMA1 Skip D3C entry? ", ToHexString (\_SB.PC00.TDM1.SD3C)))
                ADBG (Concatenate ("XHCI Skip D3C entry? ", ToHexString (\_SB.PC00.TXHC.SD3C)))
                If (((\_SB.PC00.TXHC.SD3C != Zero) || ((\_SB.PC00.TDM0.SD3C != Zero) || 
                    (\_SB.PC00.TDM1.SD3C != Zero))))
                {
                    Return (Zero)
                }

                Local0 = Zero
                While ((\_SB.PC00.TXHC.VDID != 0xFFFFFFFF))
                {
                    If ((DSGS () == Zero))
                    {
                        DSCR (One)
                    }

                    ADBG (Concatenate ("TXHC VDID -", ToHexString (\_SB.PC00.TXHC.VDID)))
                    Local0++
                    If ((Local0 == 0x05))
                    {
                        ADBG ("pCode mailbox command failed")
                        Break
                    }
                }

                ADBG ("D3Cold Entry")
                TD3C = One
                ADBG (Concatenate ("IOM D3Cold -", ToHexString (TD3C)))
                ADBG ("TCSS OFF End")
            }

            PowerResource (D3C, 0x05, 0x0000)
            {
                Name (STAT, One)
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ADBG (Concatenate ("TCSS D3C STAT -", ToHexString (STAT)))
                    Return (STAT) /* \_SB_.PC00.D3C_.STAT */
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    \_SB.PC00.TCON ()
                    STAT = One
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    \_SB.PC00.TCOF ()
                    STAT = Zero
                }
            }
        }

        Device (TXHC)
        {
            Name (_ADR, 0x000D0000)  // _ADR: Address
            Name (_DDN, "ICL North XHCI controller")  // _DDN: DOS Device Name
            Name (_STR, Unicode ("ICL North XHCI controller"))  // _STR: Description String
            Name (DCPM, 0x04)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                ADBG (Concatenate ("TCSS xHCI _STA", ToHexString (THCE)))
                If ((THCE == One))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (BASE, 0, NotSerialized)
            {
                Local0 = (_ADR & 0x07)
                Local1 = ((_ADR >> 0x10) & 0x1F)
                Local2 = ((Local0 << 0x0C) + (Local1 << 0x0F))
                Local3 = (\_SB.PC00.GPCB () + Local2)
                ADBG (Concatenate ("CPU XHCI PCIe MMIO Address", ToHexString (Local3)))
                Return (Local3)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If (TRTD)
                {
                    Return (0x04)
                }
                Else
                {
                    Return (0x03)
                }
            }

            Name (SD3C, Zero)
            If (TRTD)
            {
                Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                {
                    Return (Package (0x01)
                    {
                        \_SB.PC00.D3C
                    })
                }

                Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                {
                    Return (Package (0x01)
                    {
                        \_SB.PC00.D3C
                    })
                }
            }

            OperationRegion (XPRT, SystemMemory, BASE (), 0x0100)
            Field (XPRT, ByteAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x74), 
                D0D3,   2, 
                Offset (0x75), 
                PMEE,   1, 
                    ,   6, 
                PMES,   1
            }

            Name (XFLT, Zero)
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                ADBG ("XHCI _DSM")
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
            {
                Return (0x03)
            }

            Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
            {
                Return (0x03)
            }

            Method (_S3W, 0, NotSerialized)  // _S3W: S3 Device Wake State
            {
                Return (0x03)
            }

            Method (_S4W, 0, NotSerialized)  // _S4W: S4 Device Wake State
            {
                Return (0x03)
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (CondRefOf (DUWS))
                {
                    Return (GPRW (0x6D, DUWS))
                }
                Else
                {
                    Return (GPRW (0x6D, 0x04))
                }
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                ADBG ("TCSS XHCI _DSW")
                ADBG (Concatenate ("Arg0 -", ToHexString (Arg0)))
                ADBG (Concatenate ("Arg1 -", ToHexString (Arg1)))
                ADBG (Concatenate ("Arg2 -", ToHexString (Arg2)))
                C2PM (Arg0, Arg1, Arg2, DCPM)
                SD3C = Arg1
                ADBG (Concatenate ("SD3C -", ToHexString (SD3C)))
            }

            Device (RHUB)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (TPLD, 2, Serialized)
                {
                    Name (PCKG, Package (0x01)
                    {
                        Buffer (0x10) {}
                    })
                    CreateField (DerefOf (PCKG [Zero]), Zero, 0x07, REV)
                    REV = One
                    CreateField (DerefOf (PCKG [Zero]), 0x40, One, VISI)
                    VISI = Arg0
                    CreateField (DerefOf (PCKG [Zero]), 0x57, 0x08, GPOS)
                    GPOS = Arg1
                    CreateField (DerefOf (PCKG [Zero]), 0x4A, 0x04, SHAP)
                    SHAP = One
                    CreateField (DerefOf (PCKG [Zero]), 0x20, 0x10, WID)
                    WID = 0x08
                    CreateField (DerefOf (PCKG [Zero]), 0x30, 0x10, HGT)
                    HGT = 0x03
                    Return (PCKG) /* \_SB_.PC00.TXHC.RHUB.TPLD.PCKG */
                }

                Method (TUPC, 2, Serialized)
                {
                    Name (PCKG, Package (0x04)
                    {
                        One, 
                        Zero, 
                        Zero, 
                        Zero
                    })
                    PCKG [Zero] = Arg0
                    PCKG [One] = Arg1
                    Return (PCKG) /* \_SB_.PC00.TXHC.RHUB.TUPC.PCKG */
                }

                Device (HS01)
                {
                    Name (_ADR, One)  // _ADR: Address
                }

                Device (SS01)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                }

                Device (SS02)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                }

                Device (SS03)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                }

                Device (SS04)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    ADBG ("TCSS RHUB XHCI PS0")
                }

                Method (_PS2, 0, Serialized)  // _PS2: Power State 2
                {
                    ADBG ("TCSS RHUB XHCI PS2")
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    ADBG ("TCSS RHUB XHCI PS3")
                }
            }
        }

        If ((TDCE == One))
        {
            Device (TXDC)
            {
                Name (_ADR, 0x000D0001)  // _ADR: Address
                Name (_DDN, "ICL North XDCI controller")  // _DDN: DOS Device Name
                Name (_STR, Unicode ("ICL North XDCI controller"))  // _STR: Description String
                Name (DCPM, 0x05)
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ADBG (Concatenate ("TCSS xDCI _STA", ToHexString (TDCE)))
                    If ((TDCE == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }

                Method (SINT, 2, Serialized)
                {
                    ADBG ("xDCI.SINT")
                    If ((IMRY == One))
                    {
                        Local0 = (Arg0 << 0x08)
                        Local1 = (Arg1 << 0x14)
                        Local0 += Local1
                        ADBG (Concatenate ("TCSS xDCI SINT", ToHexString (Local0)))
                        IMMC (0x02, Zero, One, Zero, Local0)
                    }
                    Else
                    {
                        ADBG ("IOM not ready")
                    }

                    ADBG ("xDCI.SINT Done")
                }

                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                {
                    Return (0x03)
                }

                OperationRegion (XDCS, PCI_Config, Zero, 0x0100)
                Field (XDCS, DWordAcc, NoLock, Preserve)
                {
                    DVID,   16, 
                    Offset (0x10), 
                    XDCB,   64
                }

                Field (XDCS, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x84), 
                    D0I3,   2
                }

                Method (XDBA, 0, NotSerialized)
                {
                    Return ((^XDCB & 0xFFFFFFFFFFFFFF00))
                }

                OperationRegion (XDMM, SystemMemory, XDBA (), 0x00110000)
                Field (XDMM, WordAcc, NoLock, Preserve)
                {
                    Offset (0xC110), 
                    GCTL,   32, 
                    Offset (0x10F810), 
                    Offset (0x10F811), 
                    U2CP,   2, 
                    U3CP,   2, 
                    Offset (0x10F818), 
                    PUPS,   2, 
                        ,   1, 
                    PURC,   1, 
                    Offset (0x10F81A), 
                    Offset (0x10F81C), 
                        ,   3, 
                    UXPE,   2, 
                    Offset (0x10F81E)
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    ADBG ("TXDC DSM")
                    If ((Arg0 == ToUUID ("732b85d5-b7a7-4a1b-9ba0-4bbd00ffd511") /* Unknown UUID */))
                    {
                        If ((Arg1 == One))
                        {
                            Method (SPPT, 2, Serialized)
                            {
                                ADBG ("TXDC Set PMU Power State")
                                Local1 = Arg0
                                Local2 = Arg1
                                If ((Local1 == Zero))
                                {
                                    ADBG ("TXDC PMU D0")
                                    UXPE = Zero
                                    Local0 = Zero
                                    While ((Local0 < 0x0A))
                                    {
                                        Stall (0x64)
                                        Local0++
                                    }

                                    PUPS = Zero
                                    Local0 = Zero
                                    While ((Local0 < 0x07D0))
                                    {
                                        Stall (0x64)
                                        If (((U2CP == Zero) && (U3CP == Zero)))
                                        {
                                            Break
                                        }

                                        Local0++
                                    }

                                    If ((U2CP != Zero))
                                    {
                                        ADBG ("TXDC U2 not in D0")
                                    }

                                    If ((U3CP != Zero))
                                    {
                                        ADBG ("TXDC U3 not in D0")
                                    }

                                    Return (Zero)
                                }

                                If ((Local1 == 0x03))
                                {
                                    ADBG ("TXDC PMU D3")
                                    If ((U2CP != Zero))
                                    {
                                        ADBG ("TXDC U2 not in D0")
                                    }

                                    If ((U3CP != Zero))
                                    {
                                        ADBG ("TXDC U3 not in D0")
                                    }

                                    PUPS = 0x03
                                    Local0 = Zero
                                    While ((Local0 < 0x07D0))
                                    {
                                        Stall (0x64)
                                        If (((U2CP == 0x03) && (U3CP == 0x03)))
                                        {
                                            Break
                                        }

                                        Local0++
                                    }

                                    If ((U2CP != 0x03))
                                    {
                                        ADBG ("TXDC U2 not in D3")
                                    }

                                    If ((U3CP != 0x03))
                                    {
                                        ADBG ("TXDC U3 not in D3")
                                    }

                                    UXPE = Local2
                                    Return (Zero)
                                }

                                Return (Zero)
                            }

                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    ADBG ("TXDC Fn0")
                                    Return (Buffer (0x02)
                                    {
                                         0xF3, 0x03                                       // ..
                                    })
                                }
                                Case (One)
                                {
                                    ADBG ("TXDC Fn1")
                                    Return (One)
                                }
                                Case (0x04)
                                {
                                    ADBG ("TXDC Fn4")
                                    Local1 = DerefOf (Arg3 [Zero])
                                    ADBG (Local1)
                                    SPPT (Local1, Zero)
                                }
                                Case (0x05)
                                {
                                    ADBG ("TXDC Fn5")
                                    If (CondRefOf (XDAT))
                                    {
                                        If ((XDAT () == One))
                                        {
                                            ADBG ("USB Attach")
                                            Notify (\_SB.PC00.TXDC, 0x80) // Status Change
                                        }
                                        Else
                                        {
                                            ADBG ("USB Detach")
                                            Notify (\_SB.PC00.TXDC, 0x81) // Information Change
                                        }
                                    }

                                    Return (Zero)
                                }
                                Case (0x06)
                                {
                                    ADBG ("TXDC Fn6")
                                    If ((OTHC == Zero))
                                    {
                                        CSFR = One
                                        Local0 = Zero
                                        While ((Local0 < 0x64))
                                        {
                                            If ((CSFR == Zero))
                                            {
                                                Break
                                            }

                                            Sleep (One)
                                        }
                                    }

                                    Return (Zero)
                                }
                                Case (0x07)
                                {
                                    ADBG ("TXDC Fn7")
                                    Local0 = PUPS /* \_SB_.PC00.TXDC.PUPS */
                                    Return (Local0)
                                }
                                Case (0x08)
                                {
                                    ADBG ("TXDC Fn8")
                                    Return (One)
                                }
                                Case (0x09)
                                {
                                    ADBG ("TXDC Fn9")
                                    Local1 = (TCDS & 0xFFF80000)
                                    Local1 >>= 0x13
                                    ADBG (Concatenate ("CPU XDCI: Func9 Return Val = ", ToHexString (Local1)))
                                    Return (Local1)
                                }

                            }
                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x6D, 0x04))
                }

                Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                {
                    C2PM (Arg0, Arg1, Arg2, DCPM)
                }
            }
        }

        Device (TDM0)
        {
            Name (_ADR, 0x000D0002)  // _ADR: Address
            Name (_DDN, "ICL TBT DMA0 controller")  // _DDN: DOS Device Name
            Name (_STR, Unicode ("ICL TBT DMA0 controller"))  // _STR: Description String
            Name (DUID, Zero)
            Name (DCPM, 0x06)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                ADBG (Concatenate ("TCSS DMA0 _STA", ToHexString (DME0)))
                If ((DME0 == One))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (BASE, 0, NotSerialized)
            {
                Local0 = (\_SB.PC00.GPCB () + 0x0006A000)
                ADBG (Concatenate ("TDM0 MMIO Address", ToHexString (Local0)))
                Return (Local0)
            }

            OperationRegion (DPME, SystemMemory, BASE (), 0x0100)
            Field (DPME, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x84), 
                PMST,   2, 
                Offset (0x85), 
                PMEE,   1, 
                    ,   6, 
                PMES,   1, 
                Offset (0xFC), 
                DD3E,   1, 
                DFPE,   1, 
                Offset (0xFF), 
                DMAD,   8
            }

            Name (STAT, One)
            Name (ALCT, Zero)
            Name (WACT, Zero)
            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                ADBG (Concatenate ("TBT DMA PS0 Start, DUID -", ToHexString (DUID)))
                ADBG (Concatenate ("DMA VDID -", ToHexString (VDID)))
                ADBG (Concatenate ("PMST -", ToHexString (PMST)))
                ADBG (Concatenate ("PMEE -", ToHexString (PMEE)))
                ADBG (Concatenate ("PMES -", ToHexString (PMES)))
                If ((WACT == One))
                {
                    WACT = 0x02
                    WFCC (ITCT)
                    WACT = Zero
                }
                ElseIf ((WACT == 0x02))
                {
                    ADBG ("Wait until other _PS0 get response")
                    While ((WACT != Zero))
                    {
                        Sleep (0x05)
                    }

                    ADBG ("Other _PS0 got response")
                }

                ADBG (Concatenate ("TBT DMA PS0 End, DUID -", ToHexString (DUID)))
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                ADBG (Concatenate ("TBT DMA PS3 Start, DUID -", ToHexString (DUID)))
                ADBG (Concatenate ("DMA VDID -", ToHexString (VDID)))
                ADBG (Concatenate ("PMST -", ToHexString (PMST)))
                ADBG (Concatenate ("PMEE -", ToHexString (PMEE)))
                ADBG (Concatenate ("PMES -", ToHexString (PMES)))
                ADBG (Concatenate ("TBT DMA PS3 End, DUID -", ToHexString (DUID)))
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                ADBG ("TDMA S0W")
                If (ITRT)
                {
                    Return (0x04)
                }
                Else
                {
                    Return (0x03)
                }
            }

            If (ITRT)
            {
                Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                {
                    If (TRTD)
                    {
                        If ((DUID == Zero))
                        {
                            Return (Package (0x02)
                            {
                                \_SB.PC00.D3C, 
                                \_SB.PC00.TBT0
                            })
                        }
                        Else
                        {
                            Return (Package (0x02)
                            {
                                \_SB.PC00.D3C, 
                                \_SB.PC00.TBT1
                            })
                        }
                    }

                    If ((DUID == Zero))
                    {
                        Return (Package (0x01)
                        {
                            \_SB.PC00.TBT0
                        })
                    }

                    Return (Package (0x01)
                    {
                        \_SB.PC00.TBT1
                    })
                }

                Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                {
                    If (TRTD)
                    {
                        If ((DUID == Zero))
                        {
                            Return (Package (0x02)
                            {
                                \_SB.PC00.D3C, 
                                \_SB.PC00.TBT0
                            })
                        }
                        Else
                        {
                            Return (Package (0x02)
                            {
                                \_SB.PC00.D3C, 
                                \_SB.PC00.TBT1
                            })
                        }
                    }

                    If ((DUID == Zero))
                    {
                        Return (Package (0x01)
                        {
                            \_SB.PC00.TBT0
                        })
                    }

                    Return (Package (0x01)
                    {
                        \_SB.PC00.TBT1
                    })
                }
            }

            Method (D3CX, 0, Serialized)
            {
                ADBG ("Disable DMA RTD3 bit")
                ADBG (Concatenate ("DUID -", ToHexString (DUID)))
                DD3E = Zero
                STAT = One
            }

            Method (D3CE, 0, Serialized)
            {
                ADBG ("Enable DMA RTD3 bit")
                ADBG (Concatenate ("DUID -", ToHexString (DUID)))
                DD3E = One
                STAT = Zero
                ALCT = One
            }

            Name (SD3C, Zero)
            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                ADBG (Concatenate ("TCSS DMA _DSW DUID -", ToHexString (DUID)))
                ADBG (Concatenate ("Arg0 -", ToHexString (Arg0)))
                ADBG (Concatenate ("Arg1 -", ToHexString (Arg1)))
                SD3C = Arg1
                ADBG (Concatenate ("SD3C -", ToHexString (SD3C)))
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x6D, 0x04))
            }

            Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
            {
                ADBG (Concatenate ("TBT _DSD IMR_VALID =", ToHexString (ITIM)))
                ADBG (Concatenate ("TBT _DSD WAKE_SUPPORTED =", ToHexString (TIVS)))
                If (ITIM)
                {
                    If (TIVS)
                    {
                        Return (Package (0x04)
                        {
                            ToUUID ("c44d002f-69f9-4e7d-a904-a7baabdf43f7") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "IMR_VALID", 
                                    One
                                }
                            }, 

                            ToUUID ("6c501103-c189-4296-ba72-9bf5a26ebe5d") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "WAKE_SUPPORTED", 
                                    One
                                }
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            ToUUID ("c44d002f-69f9-4e7d-a904-a7baabdf43f7") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "IMR_VALID", 
                                    One
                                }
                            }, 

                            ToUUID ("6c501103-c189-4296-ba72-9bf5a26ebe5d") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "WAKE_SUPPORTED", 
                                    Zero
                                }
                            }
                        })
                    }
                }
                ElseIf (TIVS)
                {
                    Return (Package (0x04)
                    {
                        ToUUID ("c44d002f-69f9-4e7d-a904-a7baabdf43f7") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "IMR_VALID", 
                                Zero
                            }
                        }, 

                        ToUUID ("6c501103-c189-4296-ba72-9bf5a26ebe5d") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "WAKE_SUPPORTED", 
                                One
                            }
                        }
                    })
                }
                Else
                {
                    Return (Package (0x04)
                    {
                        ToUUID ("c44d002f-69f9-4e7d-a904-a7baabdf43f7") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "IMR_VALID", 
                                Zero
                            }
                        }, 

                        ToUUID ("6c501103-c189-4296-ba72-9bf5a26ebe5d") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "WAKE_SUPPORTED", 
                                Zero
                            }
                        }
                    })
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("197db5e0-f095-4f33-b915-71dd70833e55") /* Unknown UUID */))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == One))
                        {
                            Return (Buffer (One)
                            {
                                 0x07                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x01                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Name (PCPN, Buffer (One)
                        {
                             0x00                                             // .
                        })
                        CreateBitField (PCPN, Zero, PCP0)
                        CreateBitField (PCPN, One, PCP1)
                        If ((DUID == Zero))
                        {
                            If ((TRE0 == One))
                            {
                                PCP0 = One
                            }

                            If ((TRE1 == One))
                            {
                                PCP1 = One
                            }
                        }
                        Else
                        {
                            If ((TRE2 == One))
                            {
                                PCP0 = One
                            }

                            If ((TRE3 == One))
                            {
                                PCP1 = One
                            }
                        }

                        Return (PCPN) /* \_SB_.PC00.TDM0._DSM.PCPN */
                    }

                    If ((Arg2 == 0x02))
                    {
                        Name (TCAP, Buffer (One)
                        {
                             0x00                                             // .
                        })
                        CreateBitField (TCAP, Zero, IMRV)
                        CreateBitField (TCAP, One, WAKE)
                        CreateBitField (TCAP, 0x02, TVDS)
                        If (ITIM)
                        {
                            IMRV = One
                        }

                        If (TIVS)
                        {
                            WAKE = One
                        }

                        If (ITVD)
                        {
                            TVDS = One
                        }

                        Return (TCAP) /* \_SB_.PC00.TDM0._DSM.TCAP */
                    }
                }
                ElseIf ((Arg0 == Buffer (0x10)
                        {
                            /* 0000 */  0x32, 0x52, 0x42, 0x1B, 0x4C, 0x15, 0x34, 0x4F,  // 2RB.L.4O
                            /* 0008 */  0x7B, 0x9E, 0xB6, 0x5C, 0x94, 0x64, 0x94, 0xA3   // {..\.d..
                        }))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            ADBG (Concatenate ("TBT DMA _DSM DUID:", ToHexString (DUID)))
                            Switch (Arg1)
                            {
                                Case (One)
                                {
                                    Return (Buffer (One)
                                    {
                                         0x03                                             // .
                                    })
                                }

                            }

                            ADBG ("return buffer 0x00")
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                        Case (One)
                        {
                            ADBG (Concatenate ("TBT DMA _DSM Func 1 DUID:", ToHexString (DUID)))
                            If ((DUID == One))
                            {
                                ADBG (Concatenate ("ITM1:", ToHexString (ITM1)))
                                Return (ITM1) /* External reference */
                            }
                            Else
                            {
                                ADBG (Concatenate ("ITM0:", ToHexString (ITM0)))
                                Return (ITM0) /* External reference */
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Field (DPME, DWordAcc, NoLock, Preserve)
            {
                Offset (0xC8), 
                    ,   31, 
                INFR,   1, 
                Offset (0xEC), 
                TB2P,   32, 
                P2TB,   32
            }

            Method (ITMB, 1, Serialized)
            {
                Local0 = (Arg0 | One)
                P2TB = Local0
            }

            Method (WFCC, 1, Serialized)
            {
                WTBS (Arg0)
                P2TB = Zero
                WTBC (Arg0)
            }

            Method (WTBS, 1, Serialized)
            {
                Local0 = Arg0
                While ((Local0 > Zero))
                {
                    If ((TB2P & One))
                    {
                        Break
                    }

                    Local0--
                    Sleep (One)
                }
            }

            Method (WTBC, 1, Serialized)
            {
                Local0 = Arg0
                While ((Local0 > Zero))
                {
                    If (((TB2P & One) != One))
                    {
                        Break
                    }

                    Local0--
                    Sleep (One)
                }
            }

            Method (CNTP, 0, Serialized)
            {
                Local0 = Zero
                If ((DFPE == Zero))
                {
                    DMAD = 0x22
                    DFPE = One
                    While (((INFR == Zero) && (Local0 < ITFP)))
                    {
                        Sleep (One)
                        Local0++
                    }
                }

                If ((Local0 != ITFP))
                {
                    ITMB (0x3E)
                }
            }
        }

        Device (TDM1)
        {
            Name (_ADR, 0x000D0003)  // _ADR: Address
            Name (_DDN, "ICL TBT DMA1 controller")  // _DDN: DOS Device Name
            Name (_STR, Unicode ("ICL TBT DMA1 controller"))  // _STR: Description String
            Name (DUID, One)
            Name (DCPM, 0x07)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                ADBG (Concatenate ("TCSS DMA1 _STA", ToHexString (DME1)))
                If ((DME1 == One))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (BASE, 0, NotSerialized)
            {
                Local0 = (\_SB.PC00.GPCB () + 0x0006B000)
                ADBG (Concatenate ("TDM1 MMIO Address", ToHexString (Local0)))
                Return (Local0)
            }

            OperationRegion (DPME, SystemMemory, BASE (), 0x0100)
            Field (DPME, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x84), 
                PMST,   2, 
                Offset (0x85), 
                PMEE,   1, 
                    ,   6, 
                PMES,   1, 
                Offset (0xFC), 
                DD3E,   1, 
                DFPE,   1, 
                Offset (0xFF), 
                DMAD,   8
            }

            Name (STAT, One)
            Name (ALCT, Zero)
            Name (WACT, Zero)
            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                ADBG (Concatenate ("TBT DMA PS0 Start, DUID -", ToHexString (DUID)))
                ADBG (Concatenate ("DMA VDID -", ToHexString (VDID)))
                ADBG (Concatenate ("PMST -", ToHexString (PMST)))
                ADBG (Concatenate ("PMEE -", ToHexString (PMEE)))
                ADBG (Concatenate ("PMES -", ToHexString (PMES)))
                If ((WACT == One))
                {
                    WACT = 0x02
                    WFCC (ITCT)
                    WACT = Zero
                }
                ElseIf ((WACT == 0x02))
                {
                    ADBG ("Wait until other _PS0 get response")
                    While ((WACT != Zero))
                    {
                        Sleep (0x05)
                    }

                    ADBG ("Other _PS0 got response")
                }

                ADBG (Concatenate ("TBT DMA PS0 End, DUID -", ToHexString (DUID)))
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                ADBG (Concatenate ("TBT DMA PS3 Start, DUID -", ToHexString (DUID)))
                ADBG (Concatenate ("DMA VDID -", ToHexString (VDID)))
                ADBG (Concatenate ("PMST -", ToHexString (PMST)))
                ADBG (Concatenate ("PMEE -", ToHexString (PMEE)))
                ADBG (Concatenate ("PMES -", ToHexString (PMES)))
                ADBG (Concatenate ("TBT DMA PS3 End, DUID -", ToHexString (DUID)))
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                ADBG ("TDMA S0W")
                If (ITRT)
                {
                    Return (0x04)
                }
                Else
                {
                    Return (0x03)
                }
            }

            If (ITRT)
            {
                Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                {
                    If (TRTD)
                    {
                        If ((DUID == Zero))
                        {
                            Return (Package (0x02)
                            {
                                \_SB.PC00.D3C, 
                                \_SB.PC00.TBT0
                            })
                        }
                        Else
                        {
                            Return (Package (0x02)
                            {
                                \_SB.PC00.D3C, 
                                \_SB.PC00.TBT1
                            })
                        }
                    }

                    If ((DUID == Zero))
                    {
                        Return (Package (0x01)
                        {
                            \_SB.PC00.TBT0
                        })
                    }

                    Return (Package (0x01)
                    {
                        \_SB.PC00.TBT1
                    })
                }

                Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                {
                    If (TRTD)
                    {
                        If ((DUID == Zero))
                        {
                            Return (Package (0x02)
                            {
                                \_SB.PC00.D3C, 
                                \_SB.PC00.TBT0
                            })
                        }
                        Else
                        {
                            Return (Package (0x02)
                            {
                                \_SB.PC00.D3C, 
                                \_SB.PC00.TBT1
                            })
                        }
                    }

                    If ((DUID == Zero))
                    {
                        Return (Package (0x01)
                        {
                            \_SB.PC00.TBT0
                        })
                    }

                    Return (Package (0x01)
                    {
                        \_SB.PC00.TBT1
                    })
                }
            }

            Method (D3CX, 0, Serialized)
            {
                ADBG ("Disable DMA RTD3 bit")
                ADBG (Concatenate ("DUID -", ToHexString (DUID)))
                DD3E = Zero
                STAT = One
            }

            Method (D3CE, 0, Serialized)
            {
                ADBG ("Enable DMA RTD3 bit")
                ADBG (Concatenate ("DUID -", ToHexString (DUID)))
                DD3E = One
                STAT = Zero
                ALCT = One
            }

            Name (SD3C, Zero)
            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                ADBG (Concatenate ("TCSS DMA _DSW DUID -", ToHexString (DUID)))
                ADBG (Concatenate ("Arg0 -", ToHexString (Arg0)))
                ADBG (Concatenate ("Arg1 -", ToHexString (Arg1)))
                SD3C = Arg1
                ADBG (Concatenate ("SD3C -", ToHexString (SD3C)))
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x6D, 0x04))
            }

            Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
            {
                ADBG (Concatenate ("TBT _DSD IMR_VALID =", ToHexString (ITIM)))
                ADBG (Concatenate ("TBT _DSD WAKE_SUPPORTED =", ToHexString (TIVS)))
                If (ITIM)
                {
                    If (TIVS)
                    {
                        Return (Package (0x04)
                        {
                            ToUUID ("c44d002f-69f9-4e7d-a904-a7baabdf43f7") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "IMR_VALID", 
                                    One
                                }
                            }, 

                            ToUUID ("6c501103-c189-4296-ba72-9bf5a26ebe5d") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "WAKE_SUPPORTED", 
                                    One
                                }
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            ToUUID ("c44d002f-69f9-4e7d-a904-a7baabdf43f7") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "IMR_VALID", 
                                    One
                                }
                            }, 

                            ToUUID ("6c501103-c189-4296-ba72-9bf5a26ebe5d") /* Unknown UUID */, 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "WAKE_SUPPORTED", 
                                    Zero
                                }
                            }
                        })
                    }
                }
                ElseIf (TIVS)
                {
                    Return (Package (0x04)
                    {
                        ToUUID ("c44d002f-69f9-4e7d-a904-a7baabdf43f7") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "IMR_VALID", 
                                Zero
                            }
                        }, 

                        ToUUID ("6c501103-c189-4296-ba72-9bf5a26ebe5d") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "WAKE_SUPPORTED", 
                                One
                            }
                        }
                    })
                }
                Else
                {
                    Return (Package (0x04)
                    {
                        ToUUID ("c44d002f-69f9-4e7d-a904-a7baabdf43f7") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "IMR_VALID", 
                                Zero
                            }
                        }, 

                        ToUUID ("6c501103-c189-4296-ba72-9bf5a26ebe5d") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "WAKE_SUPPORTED", 
                                Zero
                            }
                        }
                    })
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("197db5e0-f095-4f33-b915-71dd70833e55") /* Unknown UUID */))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == One))
                        {
                            Return (Buffer (One)
                            {
                                 0x07                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x01                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Name (PCPN, Buffer (One)
                        {
                             0x00                                             // .
                        })
                        CreateBitField (PCPN, Zero, PCP0)
                        CreateBitField (PCPN, One, PCP1)
                        If ((DUID == Zero))
                        {
                            If ((TRE0 == One))
                            {
                                PCP0 = One
                            }

                            If ((TRE1 == One))
                            {
                                PCP1 = One
                            }
                        }
                        Else
                        {
                            If ((TRE2 == One))
                            {
                                PCP0 = One
                            }

                            If ((TRE3 == One))
                            {
                                PCP1 = One
                            }
                        }

                        Return (PCPN) /* \_SB_.PC00.TDM1._DSM.PCPN */
                    }

                    If ((Arg2 == 0x02))
                    {
                        Name (TCAP, Buffer (One)
                        {
                             0x00                                             // .
                        })
                        CreateBitField (TCAP, Zero, IMRV)
                        CreateBitField (TCAP, One, WAKE)
                        CreateBitField (TCAP, 0x02, TVDS)
                        If (ITIM)
                        {
                            IMRV = One
                        }

                        If (TIVS)
                        {
                            WAKE = One
                        }

                        If (ITVD)
                        {
                            TVDS = One
                        }

                        Return (TCAP) /* \_SB_.PC00.TDM1._DSM.TCAP */
                    }
                }
                ElseIf ((Arg0 == Buffer (0x10)
                        {
                            /* 0000 */  0x32, 0x52, 0x42, 0x1B, 0x4C, 0x15, 0x34, 0x4F,  // 2RB.L.4O
                            /* 0008 */  0x7B, 0x9E, 0xB6, 0x5C, 0x94, 0x64, 0x94, 0xA3   // {..\.d..
                        }))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            ADBG (Concatenate ("TBT DMA _DSM DUID:", ToHexString (DUID)))
                            Switch (Arg1)
                            {
                                Case (One)
                                {
                                    Return (Buffer (One)
                                    {
                                         0x03                                             // .
                                    })
                                }

                            }

                            ADBG ("return buffer 0x00")
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                        Case (One)
                        {
                            ADBG (Concatenate ("TBT DMA _DSM Func 1 DUID:", ToHexString (DUID)))
                            If ((DUID == One))
                            {
                                ADBG (Concatenate ("ITM1:", ToHexString (ITM1)))
                                Return (ITM1) /* External reference */
                            }
                            Else
                            {
                                ADBG (Concatenate ("ITM0:", ToHexString (ITM0)))
                                Return (ITM0) /* External reference */
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Field (DPME, DWordAcc, NoLock, Preserve)
            {
                Offset (0xC8), 
                    ,   31, 
                INFR,   1, 
                Offset (0xEC), 
                TB2P,   32, 
                P2TB,   32
            }

            Method (ITMB, 1, Serialized)
            {
                Local0 = (Arg0 | One)
                P2TB = Local0
            }

            Method (WFCC, 1, Serialized)
            {
                WTBS (Arg0)
                P2TB = Zero
                WTBC (Arg0)
            }

            Method (WTBS, 1, Serialized)
            {
                Local0 = Arg0
                While ((Local0 > Zero))
                {
                    If ((TB2P & One))
                    {
                        Break
                    }

                    Local0--
                    Sleep (One)
                }
            }

            Method (WTBC, 1, Serialized)
            {
                Local0 = Arg0
                While ((Local0 > Zero))
                {
                    If (((TB2P & One) != One))
                    {
                        Break
                    }

                    Local0--
                    Sleep (One)
                }
            }

            Method (CNTP, 0, Serialized)
            {
                Local0 = Zero
                If ((DFPE == Zero))
                {
                    DMAD = 0x22
                    DFPE = One
                    While (((INFR == Zero) && (Local0 < ITFP)))
                    {
                        Sleep (One)
                        Local0++
                    }
                }

                If ((Local0 != ITFP))
                {
                    ITMB (0x3E)
                }
            }
        }
    }

    If (CondRefOf (\_SB.PC01))
    {
        Scope (\_SB.PC01)
        {
            Device (TRP0)
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    If ((TPA0 != Zero))
                    {
                        Return (TPA0) /* External reference */
                    }
                    Else
                    {
                        Return (0x00070000)
                    }
                }

                Name (TUID, Zero)
                Name (LTEN, Zero)
                Name (LMSL, 0x88C8)
                Name (LNSL, 0x88C8)
                Name (DCPM, 0x08)
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ADBG (Concatenate ("TCSS RP0 _STA", ToHexString (TRE0)))
                    If ((TRE0 == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    LTEN = LTE0 /* External reference */
                    LMSL = PSL0 /* External reference */
                    LNSL = PNS0 /* External reference */
                }

                Method (BASE, 0, NotSerialized)
                {
                    Local0 = (_ADR () & 0x07)
                    Local1 = ((_ADR () >> 0x10) & 0x1F)
                    ADBG (Concatenate ("BASE of ITBT Port", ToHexString (TUID)))
                    Local2 = ((Local0 << 0x0C) + (Local1 << 0x0F))
                    If (CondRefOf (\_SB.PC01))
                    {
                        Local3 = (\_SB.PC00.GPCB () + 0x10000000)
                        Local3 += Local2
                    }
                    Else
                    {
                        Local3 = (\_SB.PC00.GPCB () + Local2)
                    }

                    ADBG (Concatenate ("PCIe MMIO Address", ToHexString (Local3)))
                    Return (Local3)
                }

                OperationRegion (PXCS, SystemMemory, BASE (), 0x0800)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x50), 
                    L0SE,   1, 
                        ,   3, 
                    LDIS,   1, 
                    Offset (0x51), 
                    Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    DLSC,   1, 
                    Offset (0x60), 
                    Offset (0x62), 
                    PSPX,   1, 
                    Offset (0xA4), 
                    D3HT,   2, 
                    Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                    Offset (0x420), 
                        ,   30, 
                    DPGE,   1, 
                    Offset (0x5BC), 
                        ,   3, 
                    RPER,   1, 
                    RPFE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x05, FUN5)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                FUN0 = One
                                FUN5 = IORB /* \IORB */
                                If ((LTEN == One))
                                {
                                    FUN6 = One
                                }

                                If ((Arg1 >= 0x02))
                                {
                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                FUN8 = One
                                                FUN9 = One
                                            }
                                        }
                                    }
                                }

                                ADBG (Concatenate ("TBT RP OPTS -", ToHexString (OPTS)))
                                Return (OPTS) /* \_SB_.PC01.TRP0._DSM.OPTS */
                            }
                            Case (0x05)
                            {
                                If ((Arg1 >= One))
                                {
                                    Return (One)
                                }
                            }
                            Case (0x06)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC01.TRP0.LTRV */
                                }
                            }
                            Case (0x08)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (One)
                                        }
                                    }
                                }
                            }
                            Case (0x09)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (Package (0x05)
                                            {
                                                0xC350, 
                                                Ones, 
                                                Ones, 
                                                0xC350, 
                                                Ones
                                            })
                                        }
                                    }
                                }
                            }

                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x69, 0x04))
                    }
                }

                Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                {
                    ADBG (Concatenate ("TCSS RP _DSW TUID -", ToHexString (TUID)))
                    ADBG (Concatenate ("Arg0 -", ToHexString (Arg0)))
                    ADBG (Concatenate ("Arg1 -", ToHexString (Arg1)))
                    \_SB.PC00.TDM0.SD3C = Arg1
                    \_SB.PC00.TDM1.SD3C = Arg1
                    ADBG (Concatenate ("TDM0 SD3C -", ToHexString (\_SB.PC00.TDM0.SD3C)))
                    ADBG (Concatenate ("TDM1 SD3C -", ToHexString (\_SB.PC00.TDM1.SD3C)))
                    C2PM (Arg0, Arg1, Arg2, DCPM)
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    If (CondRefOf (DUWS))
                    {
                        Return (GPRW (0x69, DUWS))
                    }
                    Else
                    {
                        Return (GPRW (0x69, 0x04))
                    }
                }

                Method (HPEV, 0, Serialized)
                {
                    If (((VDID != 0xFFFFFFFF) && HPSX))
                    {
                        ADBG (Concatenate ("HotPlug Event Start for ITBT Port - ", ToHexString (TUID)))
                        If (((PDCX == One) && (DLSC == One)))
                        {
                            PDCX = One
                            HPSX = One
                            Notify (^, Zero) // Bus Check
                            If (CondRefOf (\_SB.PC00.PEG1.PEGP))
                            {
                                Notify (\_SB.PC00.PEG1.PEGP, 0x81) // Information Change
                            }
                        }
                        Else
                        {
                            HPSX = One
                        }

                        ADBG (Concatenate ("HotPlug Event End for ITBT Port - ", ToHexString (TUID)))
                    }
                }

                Name (STAT, One)
                Method (D3CX, 0, Serialized)
                {
                    ADBG (Concatenate ("TBT RP D3ColdExit Start TUID -", ToHexString (TUID)))
                    ADBG (Concatenate ("RP STAT -", ToHexString (STAT)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    ADBG (Concatenate ("VDID -", ToHexString (VDID)))
                    If ((STAT == One))
                    {
                        Return (Zero)
                    }

                    ADBG (Concatenate ("Original RPFE -", ToHexString (RPFE)))
                    RPFE = Zero
                    ADBG (Concatenate ("RPFE -", ToHexString (RPFE)))
                    ADBG (Concatenate ("Original RPER -", ToHexString (RPER)))
                    RPER = Zero
                    ADBG (Concatenate ("RPER -", ToHexString (RPER)))
                    L23R = One
                    Local0 = Zero
                    Local1 = L23R /* \_SB_.PC01.TRP0.L23R */
                    While (Local1)
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x05)
                        Local0++
                        Local1 = L23R /* \_SB_.PC01.TRP0.L23R */
                    }

                    ADBG (Concatenate ("L23R -", ToHexString (L23R)))
                    ADBG (Concatenate ("Loop -", ToHexString (Local0)))
                    STAT = One
                    Local0 = Zero
                    Local1 = LASX /* \_SB_.PC01.TRP0.LASX */
                    While ((Local1 == Zero))
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x05)
                        Local0++
                        Local1 = LASX /* \_SB_.PC01.TRP0.LASX */
                    }

                    ADBG (Concatenate ("LASX -", ToHexString (LASX)))
                    ADBG (Concatenate ("Loop -", ToHexString (Local0)))
                    ADBG ("TBT RP D3ColdExit End")
                }

                Method (D3CE, 0, Serialized)
                {
                    ADBG (Concatenate ("TBT RP D3ColdEntry Start TUID -", ToHexString (TUID)))
                    ADBG (Concatenate ("RP STAT -", ToHexString (STAT)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    If ((STAT == Zero))
                    {
                        Return (Zero)
                    }

                    L23E = One
                    Local0 = Zero
                    Local1 = L23E /* \_SB_.PC01.TRP0.L23E */
                    While (Local1)
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x05)
                        Local0++
                        Local1 = L23E /* \_SB_.PC01.TRP0.L23E */
                    }

                    ADBG (Concatenate ("L23E -", ToHexString (L23E)))
                    ADBG (Concatenate ("Loop -", ToHexString (Local0)))
                    STAT = Zero
                    ADBG (Concatenate ("Original RPFE -", ToHexString (RPFE)))
                    RPFE = One
                    ADBG (Concatenate ("RPFE -", ToHexString (RPFE)))
                    ADBG (Concatenate ("Original RPER -", ToHexString (RPER)))
                    RPER = One
                    ADBG (Concatenate ("RPER -", ToHexString (RPER)))
                    ADBG (Concatenate ("TBT RP D3ColdEntry End TUID -", ToHexString (TUID)))
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    ADBG (Concatenate ("TBT _PS0 Start RP ", ToHexString (TUID)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    HPEV ()
                    If ((HPEX == One))
                    {
                        ADBG ("Disable Hot Plug SCI")
                        HPEX = Zero
                    }

                    HPME ()
                    If ((PMEX == One))
                    {
                        ADBG ("Disable PME SCI")
                        PMEX = Zero
                    }

                    Sleep (0x64)
                    If (((TUID == Zero) || (TUID == One)))
                    {
                        If ((\_SB.PC00.TDM0.WACT == One))
                        {
                            \_SB.PC00.TDM0.WACT = 0x02
                            \_SB.PC00.TDM0.WFCC (ITCT)
                            \_SB.PC00.TDM0.WACT = Zero
                        }
                        ElseIf ((\_SB.PC00.TDM0.WACT == 0x02))
                        {
                            ADBG ("Wait until other _PS0 get response")
                            While ((\_SB.PC00.TDM0.WACT != Zero))
                            {
                                Sleep (0x05)
                            }

                            ADBG ("Other _PS0 got response")
                        }
                    }
                    ElseIf ((\_SB.PC00.TDM1.WACT == One))
                    {
                        \_SB.PC00.TDM1.WACT = 0x02
                        \_SB.PC00.TDM1.WFCC (ITCT)
                        \_SB.PC00.TDM1.WACT = Zero
                    }
                    ElseIf ((\_SB.PC00.TDM1.WACT == 0x02))
                    {
                        ADBG ("Wait until other _PS0 get response")
                        While ((\_SB.PC00.TDM1.WACT != Zero))
                        {
                            Sleep (0x05)
                        }

                        ADBG ("Other _PS0 got response")
                    }

                    ADBG (Concatenate ("TBT _PS0 End RP ", ToHexString (TUID)))
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    ADBG (Concatenate ("TBT _PS3 Start RP ", ToHexString (TUID)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    CHKH ()
                    If ((HPEX == Zero))
                    {
                        ADBG ("Enable Hot Plug SCI")
                        HPEX = One
                        HPEV ()
                    }

                    If ((PMEX == Zero))
                    {
                        ADBG ("Enable PME SCI")
                        PMEX = One
                        HPME ()
                    }

                    ADBG (Concatenate ("TBT _PS3 End RP ", ToHexString (TUID)))
                }

                Method (CHKH, 0, NotSerialized)
                {
                    If ((PDCX == One))
                    {
                        If ((DLSC == Zero))
                        {
                            PDCX = One
                        }
                    }
                }

                Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                {
                    ADBG ("TBT RP _DSD")
                    Return (Package (0x04)
                    {
                        ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "HotPlugSupportInD3", 
                                One
                            }
                        }, 

                        ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                        Package (0x02)
                        {
                            Package (0x02)
                            {
                                "ExternalFacingPort", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "UID", 
                                TUID
                            }
                        }
                    })
                }

                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                {
                    If (ITRT)
                    {
                        Return (0x04)
                    }
                    Else
                    {
                        Return (0x03)
                    }
                }

                If (ITRT)
                {
                    Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                    {
                        If (TRTD)
                        {
                            If (((TUID == Zero) || (TUID == One)))
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT0
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT1
                                })
                            }
                        }

                        If (((TUID == Zero) || (TUID == One)))
                        {
                            Return (Package (0x01)
                            {
                                \_SB.PC00.TBT0
                            })
                        }

                        Return (Package (0x01)
                        {
                            \_SB.PC00.TBT1
                        })
                    }

                    Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                    {
                        If (TRTD)
                        {
                            If (((TUID == Zero) || (TUID == One)))
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT0
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT1
                                })
                            }
                        }

                        If (((TUID == Zero) || (TUID == One)))
                        {
                            Return (Package (0x01)
                            {
                                \_SB.PC00.TBT0
                            })
                        }

                        Return (Package (0x01)
                        {
                            \_SB.PC00.TBT1
                        })
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    ADBG ("TBT HPME")
                    If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                    {
                        ADBG ("TBT RP exists")
                        Notify (PXSX, 0x02) // Device Wake
                        PMSX = One
                        PSPX = One
                        Return (One)
                    }

                    Return (Zero)
                }

                Name (PD01, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x0B
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x0A
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x0B
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x0B
                    }
                })
                Name (AR01, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x13
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (CondRefOf (PICM))
                    {
                        If (PICM)
                        {
                            Return (AR01) /* \_SB_.PC01.TRP0.AR01 */
                        }
                    }

                    Return (PD01) /* \_SB_.PC01.TRP0.PD01 */
                }
            }

            Device (TRP1)
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    If ((TPA1 != Zero))
                    {
                        Return (TPA1) /* External reference */
                    }
                    Else
                    {
                        Return (0x00070001)
                    }
                }

                Name (TUID, One)
                Name (LTEN, Zero)
                Name (LMSL, 0x88C8)
                Name (LNSL, 0x88C8)
                Name (DCPM, 0x09)
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ADBG (Concatenate ("TCSS RP1 _STA", ToHexString (TRE1)))
                    If ((TRE1 == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    LTEN = LTE1 /* External reference */
                    LMSL = PSL1 /* External reference */
                    LNSL = PNS1 /* External reference */
                }

                Method (BASE, 0, NotSerialized)
                {
                    Local0 = (_ADR () & 0x07)
                    Local1 = ((_ADR () >> 0x10) & 0x1F)
                    ADBG (Concatenate ("BASE of ITBT Port", ToHexString (TUID)))
                    Local2 = ((Local0 << 0x0C) + (Local1 << 0x0F))
                    If (CondRefOf (\_SB.PC01))
                    {
                        Local3 = (\_SB.PC00.GPCB () + 0x10000000)
                        Local3 += Local2
                    }
                    Else
                    {
                        Local3 = (\_SB.PC00.GPCB () + Local2)
                    }

                    ADBG (Concatenate ("PCIe MMIO Address", ToHexString (Local3)))
                    Return (Local3)
                }

                OperationRegion (PXCS, SystemMemory, BASE (), 0x0800)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x50), 
                    L0SE,   1, 
                        ,   3, 
                    LDIS,   1, 
                    Offset (0x51), 
                    Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    DLSC,   1, 
                    Offset (0x60), 
                    Offset (0x62), 
                    PSPX,   1, 
                    Offset (0xA4), 
                    D3HT,   2, 
                    Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                    Offset (0x420), 
                        ,   30, 
                    DPGE,   1, 
                    Offset (0x5BC), 
                        ,   3, 
                    RPER,   1, 
                    RPFE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x05, FUN5)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                FUN0 = One
                                FUN5 = IORB /* \IORB */
                                If ((LTEN == One))
                                {
                                    FUN6 = One
                                }

                                If ((Arg1 >= 0x02))
                                {
                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                FUN8 = One
                                                FUN9 = One
                                            }
                                        }
                                    }
                                }

                                ADBG (Concatenate ("TBT RP OPTS -", ToHexString (OPTS)))
                                Return (OPTS) /* \_SB_.PC01.TRP1._DSM.OPTS */
                            }
                            Case (0x05)
                            {
                                If ((Arg1 >= One))
                                {
                                    Return (One)
                                }
                            }
                            Case (0x06)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC01.TRP1.LTRV */
                                }
                            }
                            Case (0x08)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (One)
                                        }
                                    }
                                }
                            }
                            Case (0x09)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (Package (0x05)
                                            {
                                                0xC350, 
                                                Ones, 
                                                Ones, 
                                                0xC350, 
                                                Ones
                                            })
                                        }
                                    }
                                }
                            }

                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x69, 0x04))
                    }
                }

                Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                {
                    ADBG (Concatenate ("TCSS RP _DSW TUID -", ToHexString (TUID)))
                    ADBG (Concatenate ("Arg0 -", ToHexString (Arg0)))
                    ADBG (Concatenate ("Arg1 -", ToHexString (Arg1)))
                    \_SB.PC00.TDM0.SD3C = Arg1
                    \_SB.PC00.TDM1.SD3C = Arg1
                    ADBG (Concatenate ("TDM0 SD3C -", ToHexString (\_SB.PC00.TDM0.SD3C)))
                    ADBG (Concatenate ("TDM1 SD3C -", ToHexString (\_SB.PC00.TDM1.SD3C)))
                    C2PM (Arg0, Arg1, Arg2, DCPM)
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    If (CondRefOf (DUWS))
                    {
                        Return (GPRW (0x69, DUWS))
                    }
                    Else
                    {
                        Return (GPRW (0x69, 0x04))
                    }
                }

                Method (HPEV, 0, Serialized)
                {
                    If (((VDID != 0xFFFFFFFF) && HPSX))
                    {
                        ADBG (Concatenate ("HotPlug Event Start for ITBT Port - ", ToHexString (TUID)))
                        If (((PDCX == One) && (DLSC == One)))
                        {
                            PDCX = One
                            HPSX = One
                            Notify (^, Zero) // Bus Check
                            If (CondRefOf (\_SB.PC00.PEG1.PEGP))
                            {
                                Notify (\_SB.PC00.PEG1.PEGP, 0x81) // Information Change
                            }
                        }
                        Else
                        {
                            HPSX = One
                        }

                        ADBG (Concatenate ("HotPlug Event End for ITBT Port - ", ToHexString (TUID)))
                    }
                }

                Name (STAT, One)
                Method (D3CX, 0, Serialized)
                {
                    ADBG (Concatenate ("TBT RP D3ColdExit Start TUID -", ToHexString (TUID)))
                    ADBG (Concatenate ("RP STAT -", ToHexString (STAT)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    ADBG (Concatenate ("VDID -", ToHexString (VDID)))
                    If ((STAT == One))
                    {
                        Return (Zero)
                    }

                    ADBG (Concatenate ("Original RPFE -", ToHexString (RPFE)))
                    RPFE = Zero
                    ADBG (Concatenate ("RPFE -", ToHexString (RPFE)))
                    ADBG (Concatenate ("Original RPER -", ToHexString (RPER)))
                    RPER = Zero
                    ADBG (Concatenate ("RPER -", ToHexString (RPER)))
                    L23R = One
                    Local0 = Zero
                    Local1 = L23R /* \_SB_.PC01.TRP1.L23R */
                    While (Local1)
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x05)
                        Local0++
                        Local1 = L23R /* \_SB_.PC01.TRP1.L23R */
                    }

                    ADBG (Concatenate ("L23R -", ToHexString (L23R)))
                    ADBG (Concatenate ("Loop -", ToHexString (Local0)))
                    STAT = One
                    Local0 = Zero
                    Local1 = LASX /* \_SB_.PC01.TRP1.LASX */
                    While ((Local1 == Zero))
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x05)
                        Local0++
                        Local1 = LASX /* \_SB_.PC01.TRP1.LASX */
                    }

                    ADBG (Concatenate ("LASX -", ToHexString (LASX)))
                    ADBG (Concatenate ("Loop -", ToHexString (Local0)))
                    ADBG ("TBT RP D3ColdExit End")
                }

                Method (D3CE, 0, Serialized)
                {
                    ADBG (Concatenate ("TBT RP D3ColdEntry Start TUID -", ToHexString (TUID)))
                    ADBG (Concatenate ("RP STAT -", ToHexString (STAT)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    If ((STAT == Zero))
                    {
                        Return (Zero)
                    }

                    L23E = One
                    Local0 = Zero
                    Local1 = L23E /* \_SB_.PC01.TRP1.L23E */
                    While (Local1)
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x05)
                        Local0++
                        Local1 = L23E /* \_SB_.PC01.TRP1.L23E */
                    }

                    ADBG (Concatenate ("L23E -", ToHexString (L23E)))
                    ADBG (Concatenate ("Loop -", ToHexString (Local0)))
                    STAT = Zero
                    ADBG (Concatenate ("Original RPFE -", ToHexString (RPFE)))
                    RPFE = One
                    ADBG (Concatenate ("RPFE -", ToHexString (RPFE)))
                    ADBG (Concatenate ("Original RPER -", ToHexString (RPER)))
                    RPER = One
                    ADBG (Concatenate ("RPER -", ToHexString (RPER)))
                    ADBG (Concatenate ("TBT RP D3ColdEntry End TUID -", ToHexString (TUID)))
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    ADBG (Concatenate ("TBT _PS0 Start RP ", ToHexString (TUID)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    HPEV ()
                    If ((HPEX == One))
                    {
                        ADBG ("Disable Hot Plug SCI")
                        HPEX = Zero
                    }

                    HPME ()
                    If ((PMEX == One))
                    {
                        ADBG ("Disable PME SCI")
                        PMEX = Zero
                    }

                    Sleep (0x64)
                    If (((TUID == Zero) || (TUID == One)))
                    {
                        If ((\_SB.PC00.TDM0.WACT == One))
                        {
                            \_SB.PC00.TDM0.WACT = 0x02
                            \_SB.PC00.TDM0.WFCC (ITCT)
                            \_SB.PC00.TDM0.WACT = Zero
                        }
                        ElseIf ((\_SB.PC00.TDM0.WACT == 0x02))
                        {
                            ADBG ("Wait until other _PS0 get response")
                            While ((\_SB.PC00.TDM0.WACT != Zero))
                            {
                                Sleep (0x05)
                            }

                            ADBG ("Other _PS0 got response")
                        }
                    }
                    ElseIf ((\_SB.PC00.TDM1.WACT == One))
                    {
                        \_SB.PC00.TDM1.WACT = 0x02
                        \_SB.PC00.TDM1.WFCC (ITCT)
                        \_SB.PC00.TDM1.WACT = Zero
                    }
                    ElseIf ((\_SB.PC00.TDM1.WACT == 0x02))
                    {
                        ADBG ("Wait until other _PS0 get response")
                        While ((\_SB.PC00.TDM1.WACT != Zero))
                        {
                            Sleep (0x05)
                        }

                        ADBG ("Other _PS0 got response")
                    }

                    ADBG (Concatenate ("TBT _PS0 End RP ", ToHexString (TUID)))
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    ADBG (Concatenate ("TBT _PS3 Start RP ", ToHexString (TUID)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    CHKH ()
                    If ((HPEX == Zero))
                    {
                        ADBG ("Enable Hot Plug SCI")
                        HPEX = One
                        HPEV ()
                    }

                    If ((PMEX == Zero))
                    {
                        ADBG ("Enable PME SCI")
                        PMEX = One
                        HPME ()
                    }

                    ADBG (Concatenate ("TBT _PS3 End RP ", ToHexString (TUID)))
                }

                Method (CHKH, 0, NotSerialized)
                {
                    If ((PDCX == One))
                    {
                        If ((DLSC == Zero))
                        {
                            PDCX = One
                        }
                    }
                }

                Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                {
                    ADBG ("TBT RP _DSD")
                    Return (Package (0x04)
                    {
                        ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "HotPlugSupportInD3", 
                                One
                            }
                        }, 

                        ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                        Package (0x02)
                        {
                            Package (0x02)
                            {
                                "ExternalFacingPort", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "UID", 
                                TUID
                            }
                        }
                    })
                }

                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                {
                    If (ITRT)
                    {
                        Return (0x04)
                    }
                    Else
                    {
                        Return (0x03)
                    }
                }

                If (ITRT)
                {
                    Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                    {
                        If (TRTD)
                        {
                            If (((TUID == Zero) || (TUID == One)))
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT0
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT1
                                })
                            }
                        }

                        If (((TUID == Zero) || (TUID == One)))
                        {
                            Return (Package (0x01)
                            {
                                \_SB.PC00.TBT0
                            })
                        }

                        Return (Package (0x01)
                        {
                            \_SB.PC00.TBT1
                        })
                    }

                    Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                    {
                        If (TRTD)
                        {
                            If (((TUID == Zero) || (TUID == One)))
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT0
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT1
                                })
                            }
                        }

                        If (((TUID == Zero) || (TUID == One)))
                        {
                            Return (Package (0x01)
                            {
                                \_SB.PC00.TBT0
                            })
                        }

                        Return (Package (0x01)
                        {
                            \_SB.PC00.TBT1
                        })
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    ADBG ("TBT HPME")
                    If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                    {
                        ADBG ("TBT RP exists")
                        Notify (PXSX, 0x02) // Device Wake
                        PMSX = One
                        PSPX = One
                        Return (One)
                    }

                    Return (Zero)
                }

                Name (PD01, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x0B
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x0A
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x0B
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x0B
                    }
                })
                Name (AR01, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x13
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (CondRefOf (PICM))
                    {
                        If (PICM)
                        {
                            Return (AR01) /* \_SB_.PC01.TRP1.AR01 */
                        }
                    }

                    Return (PD01) /* \_SB_.PC01.TRP1.PD01 */
                }
            }

            Device (TRP2)
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    If ((TPA2 != Zero))
                    {
                        Return (TPA2) /* External reference */
                    }
                    Else
                    {
                        Return (0x00070002)
                    }
                }

                Name (TUID, 0x02)
                Name (LTEN, Zero)
                Name (LMSL, 0x88C8)
                Name (LNSL, 0x88C8)
                Name (DCPM, 0x0A)
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ADBG (Concatenate ("TCSS RP2 _STA", ToHexString (TRE2)))
                    If ((TRE2 == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    LTEN = LTE2 /* External reference */
                    LMSL = PSL2 /* External reference */
                    LNSL = PNS2 /* External reference */
                }

                Method (BASE, 0, NotSerialized)
                {
                    Local0 = (_ADR () & 0x07)
                    Local1 = ((_ADR () >> 0x10) & 0x1F)
                    ADBG (Concatenate ("BASE of ITBT Port", ToHexString (TUID)))
                    Local2 = ((Local0 << 0x0C) + (Local1 << 0x0F))
                    If (CondRefOf (\_SB.PC01))
                    {
                        Local3 = (\_SB.PC00.GPCB () + 0x10000000)
                        Local3 += Local2
                    }
                    Else
                    {
                        Local3 = (\_SB.PC00.GPCB () + Local2)
                    }

                    ADBG (Concatenate ("PCIe MMIO Address", ToHexString (Local3)))
                    Return (Local3)
                }

                OperationRegion (PXCS, SystemMemory, BASE (), 0x0800)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x50), 
                    L0SE,   1, 
                        ,   3, 
                    LDIS,   1, 
                    Offset (0x51), 
                    Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    DLSC,   1, 
                    Offset (0x60), 
                    Offset (0x62), 
                    PSPX,   1, 
                    Offset (0xA4), 
                    D3HT,   2, 
                    Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                    Offset (0x420), 
                        ,   30, 
                    DPGE,   1, 
                    Offset (0x5BC), 
                        ,   3, 
                    RPER,   1, 
                    RPFE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x05, FUN5)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                FUN0 = One
                                FUN5 = IORB /* \IORB */
                                If ((LTEN == One))
                                {
                                    FUN6 = One
                                }

                                If ((Arg1 >= 0x02))
                                {
                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                FUN8 = One
                                                FUN9 = One
                                            }
                                        }
                                    }
                                }

                                ADBG (Concatenate ("TBT RP OPTS -", ToHexString (OPTS)))
                                Return (OPTS) /* \_SB_.PC01.TRP2._DSM.OPTS */
                            }
                            Case (0x05)
                            {
                                If ((Arg1 >= One))
                                {
                                    Return (One)
                                }
                            }
                            Case (0x06)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC01.TRP2.LTRV */
                                }
                            }
                            Case (0x08)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (One)
                                        }
                                    }
                                }
                            }
                            Case (0x09)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (Package (0x05)
                                            {
                                                0xC350, 
                                                Ones, 
                                                Ones, 
                                                0xC350, 
                                                Ones
                                            })
                                        }
                                    }
                                }
                            }

                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x69, 0x04))
                    }
                }

                Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                {
                    ADBG (Concatenate ("TCSS RP _DSW TUID -", ToHexString (TUID)))
                    ADBG (Concatenate ("Arg0 -", ToHexString (Arg0)))
                    ADBG (Concatenate ("Arg1 -", ToHexString (Arg1)))
                    \_SB.PC00.TDM0.SD3C = Arg1
                    \_SB.PC00.TDM1.SD3C = Arg1
                    ADBG (Concatenate ("TDM0 SD3C -", ToHexString (\_SB.PC00.TDM0.SD3C)))
                    ADBG (Concatenate ("TDM1 SD3C -", ToHexString (\_SB.PC00.TDM1.SD3C)))
                    C2PM (Arg0, Arg1, Arg2, DCPM)
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    If (CondRefOf (DUWS))
                    {
                        Return (GPRW (0x69, DUWS))
                    }
                    Else
                    {
                        Return (GPRW (0x69, 0x04))
                    }
                }

                Method (HPEV, 0, Serialized)
                {
                    If (((VDID != 0xFFFFFFFF) && HPSX))
                    {
                        ADBG (Concatenate ("HotPlug Event Start for ITBT Port - ", ToHexString (TUID)))
                        If (((PDCX == One) && (DLSC == One)))
                        {
                            PDCX = One
                            HPSX = One
                            Notify (^, Zero) // Bus Check
                            If (CondRefOf (\_SB.PC00.PEG1.PEGP))
                            {
                                Notify (\_SB.PC00.PEG1.PEGP, 0x81) // Information Change
                            }
                        }
                        Else
                        {
                            HPSX = One
                        }

                        ADBG (Concatenate ("HotPlug Event End for ITBT Port - ", ToHexString (TUID)))
                    }
                }

                Name (STAT, One)
                Method (D3CX, 0, Serialized)
                {
                    ADBG (Concatenate ("TBT RP D3ColdExit Start TUID -", ToHexString (TUID)))
                    ADBG (Concatenate ("RP STAT -", ToHexString (STAT)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    ADBG (Concatenate ("VDID -", ToHexString (VDID)))
                    If ((STAT == One))
                    {
                        Return (Zero)
                    }

                    ADBG (Concatenate ("Original RPFE -", ToHexString (RPFE)))
                    RPFE = Zero
                    ADBG (Concatenate ("RPFE -", ToHexString (RPFE)))
                    ADBG (Concatenate ("Original RPER -", ToHexString (RPER)))
                    RPER = Zero
                    ADBG (Concatenate ("RPER -", ToHexString (RPER)))
                    L23R = One
                    Local0 = Zero
                    Local1 = L23R /* \_SB_.PC01.TRP2.L23R */
                    While (Local1)
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x05)
                        Local0++
                        Local1 = L23R /* \_SB_.PC01.TRP2.L23R */
                    }

                    ADBG (Concatenate ("L23R -", ToHexString (L23R)))
                    ADBG (Concatenate ("Loop -", ToHexString (Local0)))
                    STAT = One
                    Local0 = Zero
                    Local1 = LASX /* \_SB_.PC01.TRP2.LASX */
                    While ((Local1 == Zero))
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x05)
                        Local0++
                        Local1 = LASX /* \_SB_.PC01.TRP2.LASX */
                    }

                    ADBG (Concatenate ("LASX -", ToHexString (LASX)))
                    ADBG (Concatenate ("Loop -", ToHexString (Local0)))
                    ADBG ("TBT RP D3ColdExit End")
                }

                Method (D3CE, 0, Serialized)
                {
                    ADBG (Concatenate ("TBT RP D3ColdEntry Start TUID -", ToHexString (TUID)))
                    ADBG (Concatenate ("RP STAT -", ToHexString (STAT)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    If ((STAT == Zero))
                    {
                        Return (Zero)
                    }

                    L23E = One
                    Local0 = Zero
                    Local1 = L23E /* \_SB_.PC01.TRP2.L23E */
                    While (Local1)
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x05)
                        Local0++
                        Local1 = L23E /* \_SB_.PC01.TRP2.L23E */
                    }

                    ADBG (Concatenate ("L23E -", ToHexString (L23E)))
                    ADBG (Concatenate ("Loop -", ToHexString (Local0)))
                    STAT = Zero
                    ADBG (Concatenate ("Original RPFE -", ToHexString (RPFE)))
                    RPFE = One
                    ADBG (Concatenate ("RPFE -", ToHexString (RPFE)))
                    ADBG (Concatenate ("Original RPER -", ToHexString (RPER)))
                    RPER = One
                    ADBG (Concatenate ("RPER -", ToHexString (RPER)))
                    ADBG (Concatenate ("TBT RP D3ColdEntry End TUID -", ToHexString (TUID)))
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    ADBG (Concatenate ("TBT _PS0 Start RP ", ToHexString (TUID)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    HPEV ()
                    If ((HPEX == One))
                    {
                        ADBG ("Disable Hot Plug SCI")
                        HPEX = Zero
                    }

                    HPME ()
                    If ((PMEX == One))
                    {
                        ADBG ("Disable PME SCI")
                        PMEX = Zero
                    }

                    Sleep (0x64)
                    If (((TUID == Zero) || (TUID == One)))
                    {
                        If ((\_SB.PC00.TDM0.WACT == One))
                        {
                            \_SB.PC00.TDM0.WACT = 0x02
                            \_SB.PC00.TDM0.WFCC (ITCT)
                            \_SB.PC00.TDM0.WACT = Zero
                        }
                        ElseIf ((\_SB.PC00.TDM0.WACT == 0x02))
                        {
                            ADBG ("Wait until other _PS0 get response")
                            While ((\_SB.PC00.TDM0.WACT != Zero))
                            {
                                Sleep (0x05)
                            }

                            ADBG ("Other _PS0 got response")
                        }
                    }
                    ElseIf ((\_SB.PC00.TDM1.WACT == One))
                    {
                        \_SB.PC00.TDM1.WACT = 0x02
                        \_SB.PC00.TDM1.WFCC (ITCT)
                        \_SB.PC00.TDM1.WACT = Zero
                    }
                    ElseIf ((\_SB.PC00.TDM1.WACT == 0x02))
                    {
                        ADBG ("Wait until other _PS0 get response")
                        While ((\_SB.PC00.TDM1.WACT != Zero))
                        {
                            Sleep (0x05)
                        }

                        ADBG ("Other _PS0 got response")
                    }

                    ADBG (Concatenate ("TBT _PS0 End RP ", ToHexString (TUID)))
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    ADBG (Concatenate ("TBT _PS3 Start RP ", ToHexString (TUID)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    CHKH ()
                    If ((HPEX == Zero))
                    {
                        ADBG ("Enable Hot Plug SCI")
                        HPEX = One
                        HPEV ()
                    }

                    If ((PMEX == Zero))
                    {
                        ADBG ("Enable PME SCI")
                        PMEX = One
                        HPME ()
                    }

                    ADBG (Concatenate ("TBT _PS3 End RP ", ToHexString (TUID)))
                }

                Method (CHKH, 0, NotSerialized)
                {
                    If ((PDCX == One))
                    {
                        If ((DLSC == Zero))
                        {
                            PDCX = One
                        }
                    }
                }

                Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                {
                    ADBG ("TBT RP _DSD")
                    Return (Package (0x04)
                    {
                        ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "HotPlugSupportInD3", 
                                One
                            }
                        }, 

                        ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                        Package (0x02)
                        {
                            Package (0x02)
                            {
                                "ExternalFacingPort", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "UID", 
                                TUID
                            }
                        }
                    })
                }

                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                {
                    If (ITRT)
                    {
                        Return (0x04)
                    }
                    Else
                    {
                        Return (0x03)
                    }
                }

                If (ITRT)
                {
                    Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                    {
                        If (TRTD)
                        {
                            If (((TUID == Zero) || (TUID == One)))
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT0
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT1
                                })
                            }
                        }

                        If (((TUID == Zero) || (TUID == One)))
                        {
                            Return (Package (0x01)
                            {
                                \_SB.PC00.TBT0
                            })
                        }

                        Return (Package (0x01)
                        {
                            \_SB.PC00.TBT1
                        })
                    }

                    Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                    {
                        If (TRTD)
                        {
                            If (((TUID == Zero) || (TUID == One)))
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT0
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT1
                                })
                            }
                        }

                        If (((TUID == Zero) || (TUID == One)))
                        {
                            Return (Package (0x01)
                            {
                                \_SB.PC00.TBT0
                            })
                        }

                        Return (Package (0x01)
                        {
                            \_SB.PC00.TBT1
                        })
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    ADBG ("TBT HPME")
                    If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                    {
                        ADBG ("TBT RP exists")
                        Notify (PXSX, 0x02) // Device Wake
                        PMSX = One
                        PSPX = One
                        Return (One)
                    }

                    Return (Zero)
                }

                Name (PD01, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x0B
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x0A
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x0B
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x0B
                    }
                })
                Name (AR01, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x13
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (CondRefOf (PICM))
                    {
                        If (PICM)
                        {
                            Return (AR01) /* \_SB_.PC01.TRP2.AR01 */
                        }
                    }

                    Return (PD01) /* \_SB_.PC01.TRP2.PD01 */
                }
            }

            Device (TRP3)
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    If ((TPA3 != Zero))
                    {
                        Return (TPA3) /* External reference */
                    }
                    Else
                    {
                        Return (0x00070003)
                    }
                }

                Name (TUID, 0x03)
                Name (LTEN, Zero)
                Name (LMSL, 0x88C8)
                Name (LNSL, 0x88C8)
                Name (DCPM, 0x0B)
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ADBG (Concatenate ("TCSS RP3 _STA", ToHexString (TRE3)))
                    If ((TRE3 == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    LTEN = LTE3 /* External reference */
                    LMSL = PSL3 /* External reference */
                    LNSL = PNS3 /* External reference */
                }

                Method (BASE, 0, NotSerialized)
                {
                    Local0 = (_ADR () & 0x07)
                    Local1 = ((_ADR () >> 0x10) & 0x1F)
                    ADBG (Concatenate ("BASE of ITBT Port", ToHexString (TUID)))
                    Local2 = ((Local0 << 0x0C) + (Local1 << 0x0F))
                    If (CondRefOf (\_SB.PC01))
                    {
                        Local3 = (\_SB.PC00.GPCB () + 0x10000000)
                        Local3 += Local2
                    }
                    Else
                    {
                        Local3 = (\_SB.PC00.GPCB () + Local2)
                    }

                    ADBG (Concatenate ("PCIe MMIO Address", ToHexString (Local3)))
                    Return (Local3)
                }

                OperationRegion (PXCS, SystemMemory, BASE (), 0x0800)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x50), 
                    L0SE,   1, 
                        ,   3, 
                    LDIS,   1, 
                    Offset (0x51), 
                    Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    DLSC,   1, 
                    Offset (0x60), 
                    Offset (0x62), 
                    PSPX,   1, 
                    Offset (0xA4), 
                    D3HT,   2, 
                    Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                    Offset (0x420), 
                        ,   30, 
                    DPGE,   1, 
                    Offset (0x5BC), 
                        ,   3, 
                    RPER,   1, 
                    RPFE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x05, FUN5)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                FUN0 = One
                                FUN5 = IORB /* \IORB */
                                If ((LTEN == One))
                                {
                                    FUN6 = One
                                }

                                If ((Arg1 >= 0x02))
                                {
                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                FUN8 = One
                                                FUN9 = One
                                            }
                                        }
                                    }
                                }

                                ADBG (Concatenate ("TBT RP OPTS -", ToHexString (OPTS)))
                                Return (OPTS) /* \_SB_.PC01.TRP3._DSM.OPTS */
                            }
                            Case (0x05)
                            {
                                If ((Arg1 >= One))
                                {
                                    Return (One)
                                }
                            }
                            Case (0x06)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC01.TRP3.LTRV */
                                }
                            }
                            Case (0x08)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (One)
                                        }
                                    }
                                }
                            }
                            Case (0x09)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (Package (0x05)
                                            {
                                                0xC350, 
                                                Ones, 
                                                Ones, 
                                                0xC350, 
                                                Ones
                                            })
                                        }
                                    }
                                }
                            }

                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x69, 0x04))
                    }
                }

                Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                {
                    ADBG (Concatenate ("TCSS RP _DSW TUID -", ToHexString (TUID)))
                    ADBG (Concatenate ("Arg0 -", ToHexString (Arg0)))
                    ADBG (Concatenate ("Arg1 -", ToHexString (Arg1)))
                    \_SB.PC00.TDM0.SD3C = Arg1
                    \_SB.PC00.TDM1.SD3C = Arg1
                    ADBG (Concatenate ("TDM0 SD3C -", ToHexString (\_SB.PC00.TDM0.SD3C)))
                    ADBG (Concatenate ("TDM1 SD3C -", ToHexString (\_SB.PC00.TDM1.SD3C)))
                    C2PM (Arg0, Arg1, Arg2, DCPM)
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    If (CondRefOf (DUWS))
                    {
                        Return (GPRW (0x69, DUWS))
                    }
                    Else
                    {
                        Return (GPRW (0x69, 0x04))
                    }
                }

                Method (HPEV, 0, Serialized)
                {
                    If (((VDID != 0xFFFFFFFF) && HPSX))
                    {
                        ADBG (Concatenate ("HotPlug Event Start for ITBT Port - ", ToHexString (TUID)))
                        If (((PDCX == One) && (DLSC == One)))
                        {
                            PDCX = One
                            HPSX = One
                            Notify (^, Zero) // Bus Check
                            If (CondRefOf (\_SB.PC00.PEG1.PEGP))
                            {
                                Notify (\_SB.PC00.PEG1.PEGP, 0x81) // Information Change
                            }
                        }
                        Else
                        {
                            HPSX = One
                        }

                        ADBG (Concatenate ("HotPlug Event End for ITBT Port - ", ToHexString (TUID)))
                    }
                }

                Name (STAT, One)
                Method (D3CX, 0, Serialized)
                {
                    ADBG (Concatenate ("TBT RP D3ColdExit Start TUID -", ToHexString (TUID)))
                    ADBG (Concatenate ("RP STAT -", ToHexString (STAT)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    ADBG (Concatenate ("VDID -", ToHexString (VDID)))
                    If ((STAT == One))
                    {
                        Return (Zero)
                    }

                    ADBG (Concatenate ("Original RPFE -", ToHexString (RPFE)))
                    RPFE = Zero
                    ADBG (Concatenate ("RPFE -", ToHexString (RPFE)))
                    ADBG (Concatenate ("Original RPER -", ToHexString (RPER)))
                    RPER = Zero
                    ADBG (Concatenate ("RPER -", ToHexString (RPER)))
                    L23R = One
                    Local0 = Zero
                    Local1 = L23R /* \_SB_.PC01.TRP3.L23R */
                    While (Local1)
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x05)
                        Local0++
                        Local1 = L23R /* \_SB_.PC01.TRP3.L23R */
                    }

                    ADBG (Concatenate ("L23R -", ToHexString (L23R)))
                    ADBG (Concatenate ("Loop -", ToHexString (Local0)))
                    STAT = One
                    Local0 = Zero
                    Local1 = LASX /* \_SB_.PC01.TRP3.LASX */
                    While ((Local1 == Zero))
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x05)
                        Local0++
                        Local1 = LASX /* \_SB_.PC01.TRP3.LASX */
                    }

                    ADBG (Concatenate ("LASX -", ToHexString (LASX)))
                    ADBG (Concatenate ("Loop -", ToHexString (Local0)))
                    ADBG ("TBT RP D3ColdExit End")
                }

                Method (D3CE, 0, Serialized)
                {
                    ADBG (Concatenate ("TBT RP D3ColdEntry Start TUID -", ToHexString (TUID)))
                    ADBG (Concatenate ("RP STAT -", ToHexString (STAT)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    If ((STAT == Zero))
                    {
                        Return (Zero)
                    }

                    L23E = One
                    Local0 = Zero
                    Local1 = L23E /* \_SB_.PC01.TRP3.L23E */
                    While (Local1)
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x05)
                        Local0++
                        Local1 = L23E /* \_SB_.PC01.TRP3.L23E */
                    }

                    ADBG (Concatenate ("L23E -", ToHexString (L23E)))
                    ADBG (Concatenate ("Loop -", ToHexString (Local0)))
                    STAT = Zero
                    ADBG (Concatenate ("Original RPFE -", ToHexString (RPFE)))
                    RPFE = One
                    ADBG (Concatenate ("RPFE -", ToHexString (RPFE)))
                    ADBG (Concatenate ("Original RPER -", ToHexString (RPER)))
                    RPER = One
                    ADBG (Concatenate ("RPER -", ToHexString (RPER)))
                    ADBG (Concatenate ("TBT RP D3ColdEntry End TUID -", ToHexString (TUID)))
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    ADBG (Concatenate ("TBT _PS0 Start RP ", ToHexString (TUID)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    HPEV ()
                    If ((HPEX == One))
                    {
                        ADBG ("Disable Hot Plug SCI")
                        HPEX = Zero
                    }

                    HPME ()
                    If ((PMEX == One))
                    {
                        ADBG ("Disable PME SCI")
                        PMEX = Zero
                    }

                    Sleep (0x64)
                    If (((TUID == Zero) || (TUID == One)))
                    {
                        If ((\_SB.PC00.TDM0.WACT == One))
                        {
                            \_SB.PC00.TDM0.WACT = 0x02
                            \_SB.PC00.TDM0.WFCC (ITCT)
                            \_SB.PC00.TDM0.WACT = Zero
                        }
                        ElseIf ((\_SB.PC00.TDM0.WACT == 0x02))
                        {
                            ADBG ("Wait until other _PS0 get response")
                            While ((\_SB.PC00.TDM0.WACT != Zero))
                            {
                                Sleep (0x05)
                            }

                            ADBG ("Other _PS0 got response")
                        }
                    }
                    ElseIf ((\_SB.PC00.TDM1.WACT == One))
                    {
                        \_SB.PC00.TDM1.WACT = 0x02
                        \_SB.PC00.TDM1.WFCC (ITCT)
                        \_SB.PC00.TDM1.WACT = Zero
                    }
                    ElseIf ((\_SB.PC00.TDM1.WACT == 0x02))
                    {
                        ADBG ("Wait until other _PS0 get response")
                        While ((\_SB.PC00.TDM1.WACT != Zero))
                        {
                            Sleep (0x05)
                        }

                        ADBG ("Other _PS0 got response")
                    }

                    ADBG (Concatenate ("TBT _PS0 End RP ", ToHexString (TUID)))
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    ADBG (Concatenate ("TBT _PS3 Start RP ", ToHexString (TUID)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    CHKH ()
                    If ((HPEX == Zero))
                    {
                        ADBG ("Enable Hot Plug SCI")
                        HPEX = One
                        HPEV ()
                    }

                    If ((PMEX == Zero))
                    {
                        ADBG ("Enable PME SCI")
                        PMEX = One
                        HPME ()
                    }

                    ADBG (Concatenate ("TBT _PS3 End RP ", ToHexString (TUID)))
                }

                Method (CHKH, 0, NotSerialized)
                {
                    If ((PDCX == One))
                    {
                        If ((DLSC == Zero))
                        {
                            PDCX = One
                        }
                    }
                }

                Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                {
                    ADBG ("TBT RP _DSD")
                    Return (Package (0x04)
                    {
                        ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "HotPlugSupportInD3", 
                                One
                            }
                        }, 

                        ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                        Package (0x02)
                        {
                            Package (0x02)
                            {
                                "ExternalFacingPort", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "UID", 
                                TUID
                            }
                        }
                    })
                }

                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                {
                    If (ITRT)
                    {
                        Return (0x04)
                    }
                    Else
                    {
                        Return (0x03)
                    }
                }

                If (ITRT)
                {
                    Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                    {
                        If (TRTD)
                        {
                            If (((TUID == Zero) || (TUID == One)))
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT0
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT1
                                })
                            }
                        }

                        If (((TUID == Zero) || (TUID == One)))
                        {
                            Return (Package (0x01)
                            {
                                \_SB.PC00.TBT0
                            })
                        }

                        Return (Package (0x01)
                        {
                            \_SB.PC00.TBT1
                        })
                    }

                    Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                    {
                        If (TRTD)
                        {
                            If (((TUID == Zero) || (TUID == One)))
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT0
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT1
                                })
                            }
                        }

                        If (((TUID == Zero) || (TUID == One)))
                        {
                            Return (Package (0x01)
                            {
                                \_SB.PC00.TBT0
                            })
                        }

                        Return (Package (0x01)
                        {
                            \_SB.PC00.TBT1
                        })
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    ADBG ("TBT HPME")
                    If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                    {
                        ADBG ("TBT RP exists")
                        Notify (PXSX, 0x02) // Device Wake
                        PMSX = One
                        PSPX = One
                        Return (One)
                    }

                    Return (Zero)
                }

                Name (PD01, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x0B
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x0A
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x0B
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x0B
                    }
                })
                Name (AR01, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x13
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (CondRefOf (PICM))
                    {
                        If (PICM)
                        {
                            Return (AR01) /* \_SB_.PC01.TRP3.AR01 */
                        }
                    }

                    Return (PD01) /* \_SB_.PC01.TRP3.PD01 */
                }
            }
        }
    }
    Else
    {
        Scope (\_SB.PC00)
        {
            Device (TRP0)
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    If ((TPA0 != Zero))
                    {
                        Return (TPA0) /* External reference */
                    }
                    Else
                    {
                        Return (0x00070000)
                    }
                }

                Name (TUID, Zero)
                Name (LTEN, Zero)
                Name (LMSL, 0x88C8)
                Name (LNSL, 0x88C8)
                Name (DCPM, Zero)
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ADBG (Concatenate ("TCSS RP0 _STA", ToHexString (TRE0)))
                    If ((TRE0 == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    LTEN = LTE0 /* External reference */
                    LMSL = PSL0 /* External reference */
                    LNSL = PNS0 /* External reference */
                }

                Method (BASE, 0, NotSerialized)
                {
                    Local0 = (_ADR () & 0x07)
                    Local1 = ((_ADR () >> 0x10) & 0x1F)
                    ADBG (Concatenate ("BASE of ITBT Port", ToHexString (TUID)))
                    Local2 = ((Local0 << 0x0C) + (Local1 << 0x0F))
                    If (CondRefOf (\_SB.PC01))
                    {
                        Local3 = (\_SB.PC00.GPCB () + 0x10000000)
                        Local3 += Local2
                    }
                    Else
                    {
                        Local3 = (\_SB.PC00.GPCB () + Local2)
                    }

                    ADBG (Concatenate ("PCIe MMIO Address", ToHexString (Local3)))
                    Return (Local3)
                }

                OperationRegion (PXCS, SystemMemory, BASE (), 0x0800)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x50), 
                    L0SE,   1, 
                        ,   3, 
                    LDIS,   1, 
                    Offset (0x51), 
                    Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    DLSC,   1, 
                    Offset (0x60), 
                    Offset (0x62), 
                    PSPX,   1, 
                    Offset (0xA4), 
                    D3HT,   2, 
                    Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                    Offset (0x420), 
                        ,   30, 
                    DPGE,   1, 
                    Offset (0x5BC), 
                        ,   3, 
                    RPER,   1, 
                    RPFE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x05, FUN5)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                FUN0 = One
                                FUN5 = IORB /* \IORB */
                                If ((LTEN == One))
                                {
                                    FUN6 = One
                                }

                                If ((Arg1 >= 0x02))
                                {
                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                FUN8 = One
                                                FUN9 = One
                                            }
                                        }
                                    }
                                }

                                ADBG (Concatenate ("TBT RP OPTS -", ToHexString (OPTS)))
                                Return (OPTS) /* \_SB_.PC00.TRP0._DSM.OPTS */
                            }
                            Case (0x05)
                            {
                                If ((Arg1 >= One))
                                {
                                    Return (One)
                                }
                            }
                            Case (0x06)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.TRP0.LTRV */
                                }
                            }
                            Case (0x08)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (One)
                                        }
                                    }
                                }
                            }
                            Case (0x09)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (Package (0x05)
                                            {
                                                0xC350, 
                                                Ones, 
                                                Ones, 
                                                0xC350, 
                                                Ones
                                            })
                                        }
                                    }
                                }
                            }

                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x69, 0x04))
                    }
                }

                Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                {
                    ADBG (Concatenate ("TCSS RP _DSW TUID -", ToHexString (TUID)))
                    ADBG (Concatenate ("Arg0 -", ToHexString (Arg0)))
                    ADBG (Concatenate ("Arg1 -", ToHexString (Arg1)))
                    \_SB.PC00.TDM0.SD3C = Arg1
                    \_SB.PC00.TDM1.SD3C = Arg1
                    ADBG (Concatenate ("TDM0 SD3C -", ToHexString (\_SB.PC00.TDM0.SD3C)))
                    ADBG (Concatenate ("TDM1 SD3C -", ToHexString (\_SB.PC00.TDM1.SD3C)))
                    C2PM (Arg0, Arg1, Arg2, DCPM)
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    If (CondRefOf (DUWS))
                    {
                        Return (GPRW (0x69, DUWS))
                    }
                    Else
                    {
                        Return (GPRW (0x69, 0x04))
                    }
                }

                Method (HPEV, 0, Serialized)
                {
                    If (((VDID != 0xFFFFFFFF) && HPSX))
                    {
                        ADBG (Concatenate ("HotPlug Event Start for ITBT Port - ", ToHexString (TUID)))
                        If (((PDCX == One) && (DLSC == One)))
                        {
                            PDCX = One
                            HPSX = One
                            Notify (^, Zero) // Bus Check
                            If (CondRefOf (\_SB.PC00.PEG1.PEGP))
                            {
                                Notify (\_SB.PC00.PEG1.PEGP, 0x81) // Information Change
                            }
                        }
                        Else
                        {
                            HPSX = One
                        }

                        ADBG (Concatenate ("HotPlug Event End for ITBT Port - ", ToHexString (TUID)))
                    }
                }

                Name (STAT, One)
                Method (D3CX, 0, Serialized)
                {
                    ADBG (Concatenate ("TBT RP D3ColdExit Start TUID -", ToHexString (TUID)))
                    ADBG (Concatenate ("RP STAT -", ToHexString (STAT)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    ADBG (Concatenate ("VDID -", ToHexString (VDID)))
                    If ((STAT == One))
                    {
                        Return (Zero)
                    }

                    ADBG (Concatenate ("Original RPFE -", ToHexString (RPFE)))
                    RPFE = Zero
                    ADBG (Concatenate ("RPFE -", ToHexString (RPFE)))
                    ADBG (Concatenate ("Original RPER -", ToHexString (RPER)))
                    RPER = Zero
                    ADBG (Concatenate ("RPER -", ToHexString (RPER)))
                    L23R = One
                    Local0 = Zero
                    Local1 = L23R /* \_SB_.PC00.TRP0.L23R */
                    While (Local1)
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x05)
                        Local0++
                        Local1 = L23R /* \_SB_.PC00.TRP0.L23R */
                    }

                    ADBG (Concatenate ("L23R -", ToHexString (L23R)))
                    ADBG (Concatenate ("Loop -", ToHexString (Local0)))
                    STAT = One
                    Local0 = Zero
                    Local1 = LASX /* \_SB_.PC00.TRP0.LASX */
                    While ((Local1 == Zero))
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x05)
                        Local0++
                        Local1 = LASX /* \_SB_.PC00.TRP0.LASX */
                    }

                    ADBG (Concatenate ("LASX -", ToHexString (LASX)))
                    ADBG (Concatenate ("Loop -", ToHexString (Local0)))
                    ADBG ("TBT RP D3ColdExit End")
                }

                Method (D3CE, 0, Serialized)
                {
                    ADBG (Concatenate ("TBT RP D3ColdEntry Start TUID -", ToHexString (TUID)))
                    ADBG (Concatenate ("RP STAT -", ToHexString (STAT)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    If ((STAT == Zero))
                    {
                        Return (Zero)
                    }

                    L23E = One
                    Local0 = Zero
                    Local1 = L23E /* \_SB_.PC00.TRP0.L23E */
                    While (Local1)
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x05)
                        Local0++
                        Local1 = L23E /* \_SB_.PC00.TRP0.L23E */
                    }

                    ADBG (Concatenate ("L23E -", ToHexString (L23E)))
                    ADBG (Concatenate ("Loop -", ToHexString (Local0)))
                    STAT = Zero
                    ADBG (Concatenate ("Original RPFE -", ToHexString (RPFE)))
                    RPFE = One
                    ADBG (Concatenate ("RPFE -", ToHexString (RPFE)))
                    ADBG (Concatenate ("Original RPER -", ToHexString (RPER)))
                    RPER = One
                    ADBG (Concatenate ("RPER -", ToHexString (RPER)))
                    ADBG (Concatenate ("TBT RP D3ColdEntry End TUID -", ToHexString (TUID)))
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    ADBG (Concatenate ("TBT _PS0 Start RP ", ToHexString (TUID)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    HPEV ()
                    If ((HPEX == One))
                    {
                        ADBG ("Disable Hot Plug SCI")
                        HPEX = Zero
                    }

                    HPME ()
                    If ((PMEX == One))
                    {
                        ADBG ("Disable PME SCI")
                        PMEX = Zero
                    }

                    Sleep (0x64)
                    If (((TUID == Zero) || (TUID == One)))
                    {
                        If ((\_SB.PC00.TDM0.WACT == One))
                        {
                            \_SB.PC00.TDM0.WACT = 0x02
                            \_SB.PC00.TDM0.WFCC (ITCT)
                            \_SB.PC00.TDM0.WACT = Zero
                        }
                        ElseIf ((\_SB.PC00.TDM0.WACT == 0x02))
                        {
                            ADBG ("Wait until other _PS0 get response")
                            While ((\_SB.PC00.TDM0.WACT != Zero))
                            {
                                Sleep (0x05)
                            }

                            ADBG ("Other _PS0 got response")
                        }
                    }
                    ElseIf ((\_SB.PC00.TDM1.WACT == One))
                    {
                        \_SB.PC00.TDM1.WACT = 0x02
                        \_SB.PC00.TDM1.WFCC (ITCT)
                        \_SB.PC00.TDM1.WACT = Zero
                    }
                    ElseIf ((\_SB.PC00.TDM1.WACT == 0x02))
                    {
                        ADBG ("Wait until other _PS0 get response")
                        While ((\_SB.PC00.TDM1.WACT != Zero))
                        {
                            Sleep (0x05)
                        }

                        ADBG ("Other _PS0 got response")
                    }

                    ADBG (Concatenate ("TBT _PS0 End RP ", ToHexString (TUID)))
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    ADBG (Concatenate ("TBT _PS3 Start RP ", ToHexString (TUID)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    CHKH ()
                    If ((HPEX == Zero))
                    {
                        ADBG ("Enable Hot Plug SCI")
                        HPEX = One
                        HPEV ()
                    }

                    If ((PMEX == Zero))
                    {
                        ADBG ("Enable PME SCI")
                        PMEX = One
                        HPME ()
                    }

                    ADBG (Concatenate ("TBT _PS3 End RP ", ToHexString (TUID)))
                }

                Method (CHKH, 0, NotSerialized)
                {
                    If ((PDCX == One))
                    {
                        If ((DLSC == Zero))
                        {
                            PDCX = One
                        }
                    }
                }

                Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                {
                    ADBG ("TBT RP _DSD")
                    Return (Package (0x04)
                    {
                        ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "HotPlugSupportInD3", 
                                One
                            }
                        }, 

                        ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                        Package (0x02)
                        {
                            Package (0x02)
                            {
                                "ExternalFacingPort", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "UID", 
                                TUID
                            }
                        }
                    })
                }

                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                {
                    If (ITRT)
                    {
                        Return (0x04)
                    }
                    Else
                    {
                        Return (0x03)
                    }
                }

                If (ITRT)
                {
                    Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                    {
                        If (TRTD)
                        {
                            If (((TUID == Zero) || (TUID == One)))
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT0
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT1
                                })
                            }
                        }

                        If (((TUID == Zero) || (TUID == One)))
                        {
                            Return (Package (0x01)
                            {
                                \_SB.PC00.TBT0
                            })
                        }

                        Return (Package (0x01)
                        {
                            \_SB.PC00.TBT1
                        })
                    }

                    Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                    {
                        If (TRTD)
                        {
                            If (((TUID == Zero) || (TUID == One)))
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT0
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT1
                                })
                            }
                        }

                        If (((TUID == Zero) || (TUID == One)))
                        {
                            Return (Package (0x01)
                            {
                                \_SB.PC00.TBT0
                            })
                        }

                        Return (Package (0x01)
                        {
                            \_SB.PC00.TBT1
                        })
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    ADBG ("TBT HPME")
                    If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                    {
                        ADBG ("TBT RP exists")
                        Notify (PXSX, 0x02) // Device Wake
                        PMSX = One
                        PSPX = One
                        Return (One)
                    }

                    Return (Zero)
                }

                Name (PD01, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x0B
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x0A
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x0B
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x0B
                    }
                })
                Name (AR01, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x13
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (CondRefOf (PICM))
                    {
                        If (PICM)
                        {
                            Return (AR01) /* \_SB_.PC00.TRP0.AR01 */
                        }
                    }

                    Return (PD01) /* \_SB_.PC00.TRP0.PD01 */
                }
            }

            Device (TRP1)
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    If ((TPA1 != Zero))
                    {
                        Return (TPA1) /* External reference */
                    }
                    Else
                    {
                        Return (0x00070001)
                    }
                }

                Name (TUID, One)
                Name (LTEN, Zero)
                Name (LMSL, 0x88C8)
                Name (LNSL, 0x88C8)
                Name (DCPM, One)
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ADBG (Concatenate ("TCSS RP1 _STA", ToHexString (TRE1)))
                    If ((TRE1 == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    LTEN = LTE1 /* External reference */
                    LMSL = PSL1 /* External reference */
                    LNSL = PNS1 /* External reference */
                }

                Method (BASE, 0, NotSerialized)
                {
                    Local0 = (_ADR () & 0x07)
                    Local1 = ((_ADR () >> 0x10) & 0x1F)
                    ADBG (Concatenate ("BASE of ITBT Port", ToHexString (TUID)))
                    Local2 = ((Local0 << 0x0C) + (Local1 << 0x0F))
                    If (CondRefOf (\_SB.PC01))
                    {
                        Local3 = (\_SB.PC00.GPCB () + 0x10000000)
                        Local3 += Local2
                    }
                    Else
                    {
                        Local3 = (\_SB.PC00.GPCB () + Local2)
                    }

                    ADBG (Concatenate ("PCIe MMIO Address", ToHexString (Local3)))
                    Return (Local3)
                }

                OperationRegion (PXCS, SystemMemory, BASE (), 0x0800)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x50), 
                    L0SE,   1, 
                        ,   3, 
                    LDIS,   1, 
                    Offset (0x51), 
                    Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    DLSC,   1, 
                    Offset (0x60), 
                    Offset (0x62), 
                    PSPX,   1, 
                    Offset (0xA4), 
                    D3HT,   2, 
                    Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                    Offset (0x420), 
                        ,   30, 
                    DPGE,   1, 
                    Offset (0x5BC), 
                        ,   3, 
                    RPER,   1, 
                    RPFE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x05, FUN5)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                FUN0 = One
                                FUN5 = IORB /* \IORB */
                                If ((LTEN == One))
                                {
                                    FUN6 = One
                                }

                                If ((Arg1 >= 0x02))
                                {
                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                FUN8 = One
                                                FUN9 = One
                                            }
                                        }
                                    }
                                }

                                ADBG (Concatenate ("TBT RP OPTS -", ToHexString (OPTS)))
                                Return (OPTS) /* \_SB_.PC00.TRP1._DSM.OPTS */
                            }
                            Case (0x05)
                            {
                                If ((Arg1 >= One))
                                {
                                    Return (One)
                                }
                            }
                            Case (0x06)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.TRP1.LTRV */
                                }
                            }
                            Case (0x08)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (One)
                                        }
                                    }
                                }
                            }
                            Case (0x09)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (Package (0x05)
                                            {
                                                0xC350, 
                                                Ones, 
                                                Ones, 
                                                0xC350, 
                                                Ones
                                            })
                                        }
                                    }
                                }
                            }

                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x69, 0x04))
                    }
                }

                Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                {
                    ADBG (Concatenate ("TCSS RP _DSW TUID -", ToHexString (TUID)))
                    ADBG (Concatenate ("Arg0 -", ToHexString (Arg0)))
                    ADBG (Concatenate ("Arg1 -", ToHexString (Arg1)))
                    \_SB.PC00.TDM0.SD3C = Arg1
                    \_SB.PC00.TDM1.SD3C = Arg1
                    ADBG (Concatenate ("TDM0 SD3C -", ToHexString (\_SB.PC00.TDM0.SD3C)))
                    ADBG (Concatenate ("TDM1 SD3C -", ToHexString (\_SB.PC00.TDM1.SD3C)))
                    C2PM (Arg0, Arg1, Arg2, DCPM)
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    If (CondRefOf (DUWS))
                    {
                        Return (GPRW (0x69, DUWS))
                    }
                    Else
                    {
                        Return (GPRW (0x69, 0x04))
                    }
                }

                Method (HPEV, 0, Serialized)
                {
                    If (((VDID != 0xFFFFFFFF) && HPSX))
                    {
                        ADBG (Concatenate ("HotPlug Event Start for ITBT Port - ", ToHexString (TUID)))
                        If (((PDCX == One) && (DLSC == One)))
                        {
                            PDCX = One
                            HPSX = One
                            Notify (^, Zero) // Bus Check
                            If (CondRefOf (\_SB.PC00.PEG1.PEGP))
                            {
                                Notify (\_SB.PC00.PEG1.PEGP, 0x81) // Information Change
                            }
                        }
                        Else
                        {
                            HPSX = One
                        }

                        ADBG (Concatenate ("HotPlug Event End for ITBT Port - ", ToHexString (TUID)))
                    }
                }

                Name (STAT, One)
                Method (D3CX, 0, Serialized)
                {
                    ADBG (Concatenate ("TBT RP D3ColdExit Start TUID -", ToHexString (TUID)))
                    ADBG (Concatenate ("RP STAT -", ToHexString (STAT)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    ADBG (Concatenate ("VDID -", ToHexString (VDID)))
                    If ((STAT == One))
                    {
                        Return (Zero)
                    }

                    ADBG (Concatenate ("Original RPFE -", ToHexString (RPFE)))
                    RPFE = Zero
                    ADBG (Concatenate ("RPFE -", ToHexString (RPFE)))
                    ADBG (Concatenate ("Original RPER -", ToHexString (RPER)))
                    RPER = Zero
                    ADBG (Concatenate ("RPER -", ToHexString (RPER)))
                    L23R = One
                    Local0 = Zero
                    Local1 = L23R /* \_SB_.PC00.TRP1.L23R */
                    While (Local1)
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x05)
                        Local0++
                        Local1 = L23R /* \_SB_.PC00.TRP1.L23R */
                    }

                    ADBG (Concatenate ("L23R -", ToHexString (L23R)))
                    ADBG (Concatenate ("Loop -", ToHexString (Local0)))
                    STAT = One
                    Local0 = Zero
                    Local1 = LASX /* \_SB_.PC00.TRP1.LASX */
                    While ((Local1 == Zero))
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x05)
                        Local0++
                        Local1 = LASX /* \_SB_.PC00.TRP1.LASX */
                    }

                    ADBG (Concatenate ("LASX -", ToHexString (LASX)))
                    ADBG (Concatenate ("Loop -", ToHexString (Local0)))
                    ADBG ("TBT RP D3ColdExit End")
                }

                Method (D3CE, 0, Serialized)
                {
                    ADBG (Concatenate ("TBT RP D3ColdEntry Start TUID -", ToHexString (TUID)))
                    ADBG (Concatenate ("RP STAT -", ToHexString (STAT)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    If ((STAT == Zero))
                    {
                        Return (Zero)
                    }

                    L23E = One
                    Local0 = Zero
                    Local1 = L23E /* \_SB_.PC00.TRP1.L23E */
                    While (Local1)
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x05)
                        Local0++
                        Local1 = L23E /* \_SB_.PC00.TRP1.L23E */
                    }

                    ADBG (Concatenate ("L23E -", ToHexString (L23E)))
                    ADBG (Concatenate ("Loop -", ToHexString (Local0)))
                    STAT = Zero
                    ADBG (Concatenate ("Original RPFE -", ToHexString (RPFE)))
                    RPFE = One
                    ADBG (Concatenate ("RPFE -", ToHexString (RPFE)))
                    ADBG (Concatenate ("Original RPER -", ToHexString (RPER)))
                    RPER = One
                    ADBG (Concatenate ("RPER -", ToHexString (RPER)))
                    ADBG (Concatenate ("TBT RP D3ColdEntry End TUID -", ToHexString (TUID)))
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    ADBG (Concatenate ("TBT _PS0 Start RP ", ToHexString (TUID)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    HPEV ()
                    If ((HPEX == One))
                    {
                        ADBG ("Disable Hot Plug SCI")
                        HPEX = Zero
                    }

                    HPME ()
                    If ((PMEX == One))
                    {
                        ADBG ("Disable PME SCI")
                        PMEX = Zero
                    }

                    Sleep (0x64)
                    If (((TUID == Zero) || (TUID == One)))
                    {
                        If ((\_SB.PC00.TDM0.WACT == One))
                        {
                            \_SB.PC00.TDM0.WACT = 0x02
                            \_SB.PC00.TDM0.WFCC (ITCT)
                            \_SB.PC00.TDM0.WACT = Zero
                        }
                        ElseIf ((\_SB.PC00.TDM0.WACT == 0x02))
                        {
                            ADBG ("Wait until other _PS0 get response")
                            While ((\_SB.PC00.TDM0.WACT != Zero))
                            {
                                Sleep (0x05)
                            }

                            ADBG ("Other _PS0 got response")
                        }
                    }
                    ElseIf ((\_SB.PC00.TDM1.WACT == One))
                    {
                        \_SB.PC00.TDM1.WACT = 0x02
                        \_SB.PC00.TDM1.WFCC (ITCT)
                        \_SB.PC00.TDM1.WACT = Zero
                    }
                    ElseIf ((\_SB.PC00.TDM1.WACT == 0x02))
                    {
                        ADBG ("Wait until other _PS0 get response")
                        While ((\_SB.PC00.TDM1.WACT != Zero))
                        {
                            Sleep (0x05)
                        }

                        ADBG ("Other _PS0 got response")
                    }

                    ADBG (Concatenate ("TBT _PS0 End RP ", ToHexString (TUID)))
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    ADBG (Concatenate ("TBT _PS3 Start RP ", ToHexString (TUID)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    CHKH ()
                    If ((HPEX == Zero))
                    {
                        ADBG ("Enable Hot Plug SCI")
                        HPEX = One
                        HPEV ()
                    }

                    If ((PMEX == Zero))
                    {
                        ADBG ("Enable PME SCI")
                        PMEX = One
                        HPME ()
                    }

                    ADBG (Concatenate ("TBT _PS3 End RP ", ToHexString (TUID)))
                }

                Method (CHKH, 0, NotSerialized)
                {
                    If ((PDCX == One))
                    {
                        If ((DLSC == Zero))
                        {
                            PDCX = One
                        }
                    }
                }

                Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                {
                    ADBG ("TBT RP _DSD")
                    Return (Package (0x04)
                    {
                        ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "HotPlugSupportInD3", 
                                One
                            }
                        }, 

                        ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                        Package (0x02)
                        {
                            Package (0x02)
                            {
                                "ExternalFacingPort", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "UID", 
                                TUID
                            }
                        }
                    })
                }

                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                {
                    If (ITRT)
                    {
                        Return (0x04)
                    }
                    Else
                    {
                        Return (0x03)
                    }
                }

                If (ITRT)
                {
                    Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                    {
                        If (TRTD)
                        {
                            If (((TUID == Zero) || (TUID == One)))
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT0
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT1
                                })
                            }
                        }

                        If (((TUID == Zero) || (TUID == One)))
                        {
                            Return (Package (0x01)
                            {
                                \_SB.PC00.TBT0
                            })
                        }

                        Return (Package (0x01)
                        {
                            \_SB.PC00.TBT1
                        })
                    }

                    Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                    {
                        If (TRTD)
                        {
                            If (((TUID == Zero) || (TUID == One)))
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT0
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT1
                                })
                            }
                        }

                        If (((TUID == Zero) || (TUID == One)))
                        {
                            Return (Package (0x01)
                            {
                                \_SB.PC00.TBT0
                            })
                        }

                        Return (Package (0x01)
                        {
                            \_SB.PC00.TBT1
                        })
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    ADBG ("TBT HPME")
                    If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                    {
                        ADBG ("TBT RP exists")
                        Notify (PXSX, 0x02) // Device Wake
                        PMSX = One
                        PSPX = One
                        Return (One)
                    }

                    Return (Zero)
                }

                Name (PD01, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x0B
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x0A
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x0B
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x0B
                    }
                })
                Name (AR01, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x13
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (CondRefOf (PICM))
                    {
                        If (PICM)
                        {
                            Return (AR01) /* \_SB_.PC00.TRP1.AR01 */
                        }
                    }

                    Return (PD01) /* \_SB_.PC00.TRP1.PD01 */
                }
            }

            Device (TRP2)
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    If ((TPA2 != Zero))
                    {
                        Return (TPA2) /* External reference */
                    }
                    Else
                    {
                        Return (0x00070002)
                    }
                }

                Name (TUID, 0x02)
                Name (LTEN, Zero)
                Name (LMSL, 0x88C8)
                Name (LNSL, 0x88C8)
                Name (DCPM, 0x02)
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ADBG (Concatenate ("TCSS RP2 _STA", ToHexString (TRE2)))
                    If ((TRE2 == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    LTEN = LTE2 /* External reference */
                    LMSL = PSL2 /* External reference */
                    LNSL = PNS2 /* External reference */
                }

                Method (BASE, 0, NotSerialized)
                {
                    Local0 = (_ADR () & 0x07)
                    Local1 = ((_ADR () >> 0x10) & 0x1F)
                    ADBG (Concatenate ("BASE of ITBT Port", ToHexString (TUID)))
                    Local2 = ((Local0 << 0x0C) + (Local1 << 0x0F))
                    If (CondRefOf (\_SB.PC01))
                    {
                        Local3 = (\_SB.PC00.GPCB () + 0x10000000)
                        Local3 += Local2
                    }
                    Else
                    {
                        Local3 = (\_SB.PC00.GPCB () + Local2)
                    }

                    ADBG (Concatenate ("PCIe MMIO Address", ToHexString (Local3)))
                    Return (Local3)
                }

                OperationRegion (PXCS, SystemMemory, BASE (), 0x0800)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x50), 
                    L0SE,   1, 
                        ,   3, 
                    LDIS,   1, 
                    Offset (0x51), 
                    Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    DLSC,   1, 
                    Offset (0x60), 
                    Offset (0x62), 
                    PSPX,   1, 
                    Offset (0xA4), 
                    D3HT,   2, 
                    Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                    Offset (0x420), 
                        ,   30, 
                    DPGE,   1, 
                    Offset (0x5BC), 
                        ,   3, 
                    RPER,   1, 
                    RPFE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x05, FUN5)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                FUN0 = One
                                FUN5 = IORB /* \IORB */
                                If ((LTEN == One))
                                {
                                    FUN6 = One
                                }

                                If ((Arg1 >= 0x02))
                                {
                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                FUN8 = One
                                                FUN9 = One
                                            }
                                        }
                                    }
                                }

                                ADBG (Concatenate ("TBT RP OPTS -", ToHexString (OPTS)))
                                Return (OPTS) /* \_SB_.PC00.TRP2._DSM.OPTS */
                            }
                            Case (0x05)
                            {
                                If ((Arg1 >= One))
                                {
                                    Return (One)
                                }
                            }
                            Case (0x06)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.TRP2.LTRV */
                                }
                            }
                            Case (0x08)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (One)
                                        }
                                    }
                                }
                            }
                            Case (0x09)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (Package (0x05)
                                            {
                                                0xC350, 
                                                Ones, 
                                                Ones, 
                                                0xC350, 
                                                Ones
                                            })
                                        }
                                    }
                                }
                            }

                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x69, 0x04))
                    }
                }

                Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                {
                    ADBG (Concatenate ("TCSS RP _DSW TUID -", ToHexString (TUID)))
                    ADBG (Concatenate ("Arg0 -", ToHexString (Arg0)))
                    ADBG (Concatenate ("Arg1 -", ToHexString (Arg1)))
                    \_SB.PC00.TDM0.SD3C = Arg1
                    \_SB.PC00.TDM1.SD3C = Arg1
                    ADBG (Concatenate ("TDM0 SD3C -", ToHexString (\_SB.PC00.TDM0.SD3C)))
                    ADBG (Concatenate ("TDM1 SD3C -", ToHexString (\_SB.PC00.TDM1.SD3C)))
                    C2PM (Arg0, Arg1, Arg2, DCPM)
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    If (CondRefOf (DUWS))
                    {
                        Return (GPRW (0x69, DUWS))
                    }
                    Else
                    {
                        Return (GPRW (0x69, 0x04))
                    }
                }

                Method (HPEV, 0, Serialized)
                {
                    If (((VDID != 0xFFFFFFFF) && HPSX))
                    {
                        ADBG (Concatenate ("HotPlug Event Start for ITBT Port - ", ToHexString (TUID)))
                        If (((PDCX == One) && (DLSC == One)))
                        {
                            PDCX = One
                            HPSX = One
                            Notify (^, Zero) // Bus Check
                            If (CondRefOf (\_SB.PC00.PEG1.PEGP))
                            {
                                Notify (\_SB.PC00.PEG1.PEGP, 0x81) // Information Change
                            }
                        }
                        Else
                        {
                            HPSX = One
                        }

                        ADBG (Concatenate ("HotPlug Event End for ITBT Port - ", ToHexString (TUID)))
                    }
                }

                Name (STAT, One)
                Method (D3CX, 0, Serialized)
                {
                    ADBG (Concatenate ("TBT RP D3ColdExit Start TUID -", ToHexString (TUID)))
                    ADBG (Concatenate ("RP STAT -", ToHexString (STAT)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    ADBG (Concatenate ("VDID -", ToHexString (VDID)))
                    If ((STAT == One))
                    {
                        Return (Zero)
                    }

                    ADBG (Concatenate ("Original RPFE -", ToHexString (RPFE)))
                    RPFE = Zero
                    ADBG (Concatenate ("RPFE -", ToHexString (RPFE)))
                    ADBG (Concatenate ("Original RPER -", ToHexString (RPER)))
                    RPER = Zero
                    ADBG (Concatenate ("RPER -", ToHexString (RPER)))
                    L23R = One
                    Local0 = Zero
                    Local1 = L23R /* \_SB_.PC00.TRP2.L23R */
                    While (Local1)
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x05)
                        Local0++
                        Local1 = L23R /* \_SB_.PC00.TRP2.L23R */
                    }

                    ADBG (Concatenate ("L23R -", ToHexString (L23R)))
                    ADBG (Concatenate ("Loop -", ToHexString (Local0)))
                    STAT = One
                    Local0 = Zero
                    Local1 = LASX /* \_SB_.PC00.TRP2.LASX */
                    While ((Local1 == Zero))
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x05)
                        Local0++
                        Local1 = LASX /* \_SB_.PC00.TRP2.LASX */
                    }

                    ADBG (Concatenate ("LASX -", ToHexString (LASX)))
                    ADBG (Concatenate ("Loop -", ToHexString (Local0)))
                    ADBG ("TBT RP D3ColdExit End")
                }

                Method (D3CE, 0, Serialized)
                {
                    ADBG (Concatenate ("TBT RP D3ColdEntry Start TUID -", ToHexString (TUID)))
                    ADBG (Concatenate ("RP STAT -", ToHexString (STAT)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    If ((STAT == Zero))
                    {
                        Return (Zero)
                    }

                    L23E = One
                    Local0 = Zero
                    Local1 = L23E /* \_SB_.PC00.TRP2.L23E */
                    While (Local1)
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x05)
                        Local0++
                        Local1 = L23E /* \_SB_.PC00.TRP2.L23E */
                    }

                    ADBG (Concatenate ("L23E -", ToHexString (L23E)))
                    ADBG (Concatenate ("Loop -", ToHexString (Local0)))
                    STAT = Zero
                    ADBG (Concatenate ("Original RPFE -", ToHexString (RPFE)))
                    RPFE = One
                    ADBG (Concatenate ("RPFE -", ToHexString (RPFE)))
                    ADBG (Concatenate ("Original RPER -", ToHexString (RPER)))
                    RPER = One
                    ADBG (Concatenate ("RPER -", ToHexString (RPER)))
                    ADBG (Concatenate ("TBT RP D3ColdEntry End TUID -", ToHexString (TUID)))
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    ADBG (Concatenate ("TBT _PS0 Start RP ", ToHexString (TUID)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    HPEV ()
                    If ((HPEX == One))
                    {
                        ADBG ("Disable Hot Plug SCI")
                        HPEX = Zero
                    }

                    HPME ()
                    If ((PMEX == One))
                    {
                        ADBG ("Disable PME SCI")
                        PMEX = Zero
                    }

                    Sleep (0x64)
                    If (((TUID == Zero) || (TUID == One)))
                    {
                        If ((\_SB.PC00.TDM0.WACT == One))
                        {
                            \_SB.PC00.TDM0.WACT = 0x02
                            \_SB.PC00.TDM0.WFCC (ITCT)
                            \_SB.PC00.TDM0.WACT = Zero
                        }
                        ElseIf ((\_SB.PC00.TDM0.WACT == 0x02))
                        {
                            ADBG ("Wait until other _PS0 get response")
                            While ((\_SB.PC00.TDM0.WACT != Zero))
                            {
                                Sleep (0x05)
                            }

                            ADBG ("Other _PS0 got response")
                        }
                    }
                    ElseIf ((\_SB.PC00.TDM1.WACT == One))
                    {
                        \_SB.PC00.TDM1.WACT = 0x02
                        \_SB.PC00.TDM1.WFCC (ITCT)
                        \_SB.PC00.TDM1.WACT = Zero
                    }
                    ElseIf ((\_SB.PC00.TDM1.WACT == 0x02))
                    {
                        ADBG ("Wait until other _PS0 get response")
                        While ((\_SB.PC00.TDM1.WACT != Zero))
                        {
                            Sleep (0x05)
                        }

                        ADBG ("Other _PS0 got response")
                    }

                    ADBG (Concatenate ("TBT _PS0 End RP ", ToHexString (TUID)))
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    ADBG (Concatenate ("TBT _PS3 Start RP ", ToHexString (TUID)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    CHKH ()
                    If ((HPEX == Zero))
                    {
                        ADBG ("Enable Hot Plug SCI")
                        HPEX = One
                        HPEV ()
                    }

                    If ((PMEX == Zero))
                    {
                        ADBG ("Enable PME SCI")
                        PMEX = One
                        HPME ()
                    }

                    ADBG (Concatenate ("TBT _PS3 End RP ", ToHexString (TUID)))
                }

                Method (CHKH, 0, NotSerialized)
                {
                    If ((PDCX == One))
                    {
                        If ((DLSC == Zero))
                        {
                            PDCX = One
                        }
                    }
                }

                Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                {
                    ADBG ("TBT RP _DSD")
                    Return (Package (0x04)
                    {
                        ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "HotPlugSupportInD3", 
                                One
                            }
                        }, 

                        ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                        Package (0x02)
                        {
                            Package (0x02)
                            {
                                "ExternalFacingPort", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "UID", 
                                TUID
                            }
                        }
                    })
                }

                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                {
                    If (ITRT)
                    {
                        Return (0x04)
                    }
                    Else
                    {
                        Return (0x03)
                    }
                }

                If (ITRT)
                {
                    Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                    {
                        If (TRTD)
                        {
                            If (((TUID == Zero) || (TUID == One)))
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT0
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT1
                                })
                            }
                        }

                        If (((TUID == Zero) || (TUID == One)))
                        {
                            Return (Package (0x01)
                            {
                                \_SB.PC00.TBT0
                            })
                        }

                        Return (Package (0x01)
                        {
                            \_SB.PC00.TBT1
                        })
                    }

                    Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                    {
                        If (TRTD)
                        {
                            If (((TUID == Zero) || (TUID == One)))
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT0
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT1
                                })
                            }
                        }

                        If (((TUID == Zero) || (TUID == One)))
                        {
                            Return (Package (0x01)
                            {
                                \_SB.PC00.TBT0
                            })
                        }

                        Return (Package (0x01)
                        {
                            \_SB.PC00.TBT1
                        })
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    ADBG ("TBT HPME")
                    If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                    {
                        ADBG ("TBT RP exists")
                        Notify (PXSX, 0x02) // Device Wake
                        PMSX = One
                        PSPX = One
                        Return (One)
                    }

                    Return (Zero)
                }

                Name (PD01, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x0B
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x0A
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x0B
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x0B
                    }
                })
                Name (AR01, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x13
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (CondRefOf (PICM))
                    {
                        If (PICM)
                        {
                            Return (AR01) /* \_SB_.PC00.TRP2.AR01 */
                        }
                    }

                    Return (PD01) /* \_SB_.PC00.TRP2.PD01 */
                }
            }

            Device (TRP3)
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    If ((TPA3 != Zero))
                    {
                        Return (TPA3) /* External reference */
                    }
                    Else
                    {
                        Return (0x00070003)
                    }
                }

                Name (TUID, 0x03)
                Name (LTEN, Zero)
                Name (LMSL, 0x88C8)
                Name (LNSL, 0x88C8)
                Name (DCPM, 0x03)
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ADBG (Concatenate ("TCSS RP3 _STA", ToHexString (TRE3)))
                    If ((TRE3 == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    LTEN = LTE3 /* External reference */
                    LMSL = PSL3 /* External reference */
                    LNSL = PNS3 /* External reference */
                }

                Method (BASE, 0, NotSerialized)
                {
                    Local0 = (_ADR () & 0x07)
                    Local1 = ((_ADR () >> 0x10) & 0x1F)
                    ADBG (Concatenate ("BASE of ITBT Port", ToHexString (TUID)))
                    Local2 = ((Local0 << 0x0C) + (Local1 << 0x0F))
                    If (CondRefOf (\_SB.PC01))
                    {
                        Local3 = (\_SB.PC00.GPCB () + 0x10000000)
                        Local3 += Local2
                    }
                    Else
                    {
                        Local3 = (\_SB.PC00.GPCB () + Local2)
                    }

                    ADBG (Concatenate ("PCIe MMIO Address", ToHexString (Local3)))
                    Return (Local3)
                }

                OperationRegion (PXCS, SystemMemory, BASE (), 0x0800)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x50), 
                    L0SE,   1, 
                        ,   3, 
                    LDIS,   1, 
                    Offset (0x51), 
                    Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    DLSC,   1, 
                    Offset (0x60), 
                    Offset (0x62), 
                    PSPX,   1, 
                    Offset (0xA4), 
                    D3HT,   2, 
                    Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                    Offset (0x420), 
                        ,   30, 
                    DPGE,   1, 
                    Offset (0x5BC), 
                        ,   3, 
                    RPER,   1, 
                    RPFE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x05, FUN5)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                FUN0 = One
                                FUN5 = IORB /* \IORB */
                                If ((LTEN == One))
                                {
                                    FUN6 = One
                                }

                                If ((Arg1 >= 0x02))
                                {
                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                FUN8 = One
                                                FUN9 = One
                                            }
                                        }
                                    }
                                }

                                ADBG (Concatenate ("TBT RP OPTS -", ToHexString (OPTS)))
                                Return (OPTS) /* \_SB_.PC00.TRP3._DSM.OPTS */
                            }
                            Case (0x05)
                            {
                                If ((Arg1 >= One))
                                {
                                    Return (One)
                                }
                            }
                            Case (0x06)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PC00.TRP3.LTRV */
                                }
                            }
                            Case (0x08)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (One)
                                        }
                                    }
                                }
                            }
                            Case (0x09)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (Package (0x05)
                                            {
                                                0xC350, 
                                                Ones, 
                                                Ones, 
                                                0xC350, 
                                                Ones
                                            })
                                        }
                                    }
                                }
                            }

                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x69, 0x04))
                    }
                }

                Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                {
                    ADBG (Concatenate ("TCSS RP _DSW TUID -", ToHexString (TUID)))
                    ADBG (Concatenate ("Arg0 -", ToHexString (Arg0)))
                    ADBG (Concatenate ("Arg1 -", ToHexString (Arg1)))
                    \_SB.PC00.TDM0.SD3C = Arg1
                    \_SB.PC00.TDM1.SD3C = Arg1
                    ADBG (Concatenate ("TDM0 SD3C -", ToHexString (\_SB.PC00.TDM0.SD3C)))
                    ADBG (Concatenate ("TDM1 SD3C -", ToHexString (\_SB.PC00.TDM1.SD3C)))
                    C2PM (Arg0, Arg1, Arg2, DCPM)
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    If (CondRefOf (DUWS))
                    {
                        Return (GPRW (0x69, DUWS))
                    }
                    Else
                    {
                        Return (GPRW (0x69, 0x04))
                    }
                }

                Method (HPEV, 0, Serialized)
                {
                    If (((VDID != 0xFFFFFFFF) && HPSX))
                    {
                        ADBG (Concatenate ("HotPlug Event Start for ITBT Port - ", ToHexString (TUID)))
                        If (((PDCX == One) && (DLSC == One)))
                        {
                            PDCX = One
                            HPSX = One
                            Notify (^, Zero) // Bus Check
                            If (CondRefOf (\_SB.PC00.PEG1.PEGP))
                            {
                                Notify (\_SB.PC00.PEG1.PEGP, 0x81) // Information Change
                            }
                        }
                        Else
                        {
                            HPSX = One
                        }

                        ADBG (Concatenate ("HotPlug Event End for ITBT Port - ", ToHexString (TUID)))
                    }
                }

                Name (STAT, One)
                Method (D3CX, 0, Serialized)
                {
                    ADBG (Concatenate ("TBT RP D3ColdExit Start TUID -", ToHexString (TUID)))
                    ADBG (Concatenate ("RP STAT -", ToHexString (STAT)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    ADBG (Concatenate ("VDID -", ToHexString (VDID)))
                    If ((STAT == One))
                    {
                        Return (Zero)
                    }

                    ADBG (Concatenate ("Original RPFE -", ToHexString (RPFE)))
                    RPFE = Zero
                    ADBG (Concatenate ("RPFE -", ToHexString (RPFE)))
                    ADBG (Concatenate ("Original RPER -", ToHexString (RPER)))
                    RPER = Zero
                    ADBG (Concatenate ("RPER -", ToHexString (RPER)))
                    L23R = One
                    Local0 = Zero
                    Local1 = L23R /* \_SB_.PC00.TRP3.L23R */
                    While (Local1)
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x05)
                        Local0++
                        Local1 = L23R /* \_SB_.PC00.TRP3.L23R */
                    }

                    ADBG (Concatenate ("L23R -", ToHexString (L23R)))
                    ADBG (Concatenate ("Loop -", ToHexString (Local0)))
                    STAT = One
                    Local0 = Zero
                    Local1 = LASX /* \_SB_.PC00.TRP3.LASX */
                    While ((Local1 == Zero))
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x05)
                        Local0++
                        Local1 = LASX /* \_SB_.PC00.TRP3.LASX */
                    }

                    ADBG (Concatenate ("LASX -", ToHexString (LASX)))
                    ADBG (Concatenate ("Loop -", ToHexString (Local0)))
                    ADBG ("TBT RP D3ColdExit End")
                }

                Method (D3CE, 0, Serialized)
                {
                    ADBG (Concatenate ("TBT RP D3ColdEntry Start TUID -", ToHexString (TUID)))
                    ADBG (Concatenate ("RP STAT -", ToHexString (STAT)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    If ((STAT == Zero))
                    {
                        Return (Zero)
                    }

                    L23E = One
                    Local0 = Zero
                    Local1 = L23E /* \_SB_.PC00.TRP3.L23E */
                    While (Local1)
                    {
                        If ((Local0 > 0x14))
                        {
                            Break
                        }

                        Sleep (0x05)
                        Local0++
                        Local1 = L23E /* \_SB_.PC00.TRP3.L23E */
                    }

                    ADBG (Concatenate ("L23E -", ToHexString (L23E)))
                    ADBG (Concatenate ("Loop -", ToHexString (Local0)))
                    STAT = Zero
                    ADBG (Concatenate ("Original RPFE -", ToHexString (RPFE)))
                    RPFE = One
                    ADBG (Concatenate ("RPFE -", ToHexString (RPFE)))
                    ADBG (Concatenate ("Original RPER -", ToHexString (RPER)))
                    RPER = One
                    ADBG (Concatenate ("RPER -", ToHexString (RPER)))
                    ADBG (Concatenate ("TBT RP D3ColdEntry End TUID -", ToHexString (TUID)))
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    ADBG (Concatenate ("TBT _PS0 Start RP ", ToHexString (TUID)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    HPEV ()
                    If ((HPEX == One))
                    {
                        ADBG ("Disable Hot Plug SCI")
                        HPEX = Zero
                    }

                    HPME ()
                    If ((PMEX == One))
                    {
                        ADBG ("Disable PME SCI")
                        PMEX = Zero
                    }

                    Sleep (0x64)
                    If (((TUID == Zero) || (TUID == One)))
                    {
                        If ((\_SB.PC00.TDM0.WACT == One))
                        {
                            \_SB.PC00.TDM0.WACT = 0x02
                            \_SB.PC00.TDM0.WFCC (ITCT)
                            \_SB.PC00.TDM0.WACT = Zero
                        }
                        ElseIf ((\_SB.PC00.TDM0.WACT == 0x02))
                        {
                            ADBG ("Wait until other _PS0 get response")
                            While ((\_SB.PC00.TDM0.WACT != Zero))
                            {
                                Sleep (0x05)
                            }

                            ADBG ("Other _PS0 got response")
                        }
                    }
                    ElseIf ((\_SB.PC00.TDM1.WACT == One))
                    {
                        \_SB.PC00.TDM1.WACT = 0x02
                        \_SB.PC00.TDM1.WFCC (ITCT)
                        \_SB.PC00.TDM1.WACT = Zero
                    }
                    ElseIf ((\_SB.PC00.TDM1.WACT == 0x02))
                    {
                        ADBG ("Wait until other _PS0 get response")
                        While ((\_SB.PC00.TDM1.WACT != Zero))
                        {
                            Sleep (0x05)
                        }

                        ADBG ("Other _PS0 got response")
                    }

                    ADBG (Concatenate ("TBT _PS0 End RP ", ToHexString (TUID)))
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    ADBG (Concatenate ("TBT _PS3 Start RP ", ToHexString (TUID)))
                    ADBG (Concatenate ("TBT RP VDID -", ToHexString (VDID)))
                    CHKH ()
                    If ((HPEX == Zero))
                    {
                        ADBG ("Enable Hot Plug SCI")
                        HPEX = One
                        HPEV ()
                    }

                    If ((PMEX == Zero))
                    {
                        ADBG ("Enable PME SCI")
                        PMEX = One
                        HPME ()
                    }

                    ADBG (Concatenate ("TBT _PS3 End RP ", ToHexString (TUID)))
                }

                Method (CHKH, 0, NotSerialized)
                {
                    If ((PDCX == One))
                    {
                        If ((DLSC == Zero))
                        {
                            PDCX = One
                        }
                    }
                }

                Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                {
                    ADBG ("TBT RP _DSD")
                    Return (Package (0x04)
                    {
                        ToUUID ("6211e2c0-58a3-4af3-90e1-927a4e0c55a4") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "HotPlugSupportInD3", 
                                One
                            }
                        }, 

                        ToUUID ("efcc06cc-73ac-4bc3-bff0-76143807c389") /* Unknown UUID */, 
                        Package (0x02)
                        {
                            Package (0x02)
                            {
                                "ExternalFacingPort", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "UID", 
                                TUID
                            }
                        }
                    })
                }

                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                {
                    If (ITRT)
                    {
                        Return (0x04)
                    }
                    Else
                    {
                        Return (0x03)
                    }
                }

                If (ITRT)
                {
                    Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                    {
                        If (TRTD)
                        {
                            If (((TUID == Zero) || (TUID == One)))
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT0
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT1
                                })
                            }
                        }

                        If (((TUID == Zero) || (TUID == One)))
                        {
                            Return (Package (0x01)
                            {
                                \_SB.PC00.TBT0
                            })
                        }

                        Return (Package (0x01)
                        {
                            \_SB.PC00.TBT1
                        })
                    }

                    Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                    {
                        If (TRTD)
                        {
                            If (((TUID == Zero) || (TUID == One)))
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT0
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    \_SB.PC00.D3C, 
                                    \_SB.PC00.TBT1
                                })
                            }
                        }

                        If (((TUID == Zero) || (TUID == One)))
                        {
                            Return (Package (0x01)
                            {
                                \_SB.PC00.TBT0
                            })
                        }

                        Return (Package (0x01)
                        {
                            \_SB.PC00.TBT1
                        })
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    ADBG ("TBT HPME")
                    If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                    {
                        ADBG ("TBT RP exists")
                        Notify (PXSX, 0x02) // Device Wake
                        PMSX = One
                        PSPX = One
                        Return (One)
                    }

                    Return (Zero)
                }

                Name (PD01, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x0B
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x0A
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x0B
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x0B
                    }
                })
                Name (AR01, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x13
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (CondRefOf (PICM))
                    {
                        If (PICM)
                        {
                            Return (AR01) /* \_SB_.PC00.TRP3.AR01 */
                        }
                    }

                    Return (PD01) /* \_SB_.PC00.TRP3.PD01 */
                }
            }
        }
    }

    Scope (\_SB)
    {
        Method (TCWK, 1, NotSerialized)
        {
            If (((Arg0 == 0x03) || (Arg0 == 0x04)))
            {
                If (CondRefOf (\_SB.PC01))
                {
                    If ((\_SB.PC01.TRP0.VDID != 0xFFFFFFFF))
                    {
                        Notify (\_SB.PC01.TRP0, Zero) // Bus Check
                    }

                    If ((\_SB.PC01.TRP1.VDID != 0xFFFFFFFF))
                    {
                        Notify (\_SB.PC01.TRP1, Zero) // Bus Check
                    }

                    If ((\_SB.PC01.TRP2.VDID != 0xFFFFFFFF))
                    {
                        Notify (\_SB.PC01.TRP2, Zero) // Bus Check
                    }

                    If ((\_SB.PC01.TRP3.VDID != 0xFFFFFFFF))
                    {
                        Notify (\_SB.PC01.TRP3, Zero) // Bus Check
                    }
                }
                Else
                {
                    If ((\_SB.PC00.TRP0.VDID != 0xFFFFFFFF))
                    {
                        Notify (\_SB.PC00.TRP0, Zero) // Bus Check
                    }

                    If ((\_SB.PC00.TRP1.VDID != 0xFFFFFFFF))
                    {
                        Notify (\_SB.PC00.TRP1, Zero) // Bus Check
                    }

                    If ((\_SB.PC00.TRP2.VDID != 0xFFFFFFFF))
                    {
                        Notify (\_SB.PC00.TRP2, Zero) // Bus Check
                    }

                    If ((\_SB.PC00.TRP3.VDID != 0xFFFFFFFF))
                    {
                        Notify (\_SB.PC00.TRP3, Zero) // Bus Check
                    }
                }
            }
        }
    }
}



SSDT8
-----
DefinitionBlock ("", "SSDT", 2, "LENOVO", "CB-01   ", 0x00000001)
{
    External (_SB_.PC00.RP01.PXSX, DeviceObj)
    External (_SB_.PC00.RP05.PXSX, DeviceObj)
    External (_SB_.PC00.RP09.PXSX, DeviceObj)
    External (DPM1, IntObj)
    External (DPM2, IntObj)
    External (DPM3, IntObj)
    External (NDUS, IntObj)
    External (NTUS, IntObj)
    External (TBSE, IntObj)
    External (TP1D, IntObj)
    External (TP1P, IntObj)
    External (TP1T, IntObj)
    External (TP2D, IntObj)
    External (TP2P, IntObj)
    External (TP2T, IntObj)
    External (TP3D, IntObj)
    External (TP3P, IntObj)
    External (TP3T, IntObj)
    External (TP4D, IntObj)
    External (TP4P, IntObj)
    External (TP4T, IntObj)
    External (TP5D, IntObj)
    External (TP5P, IntObj)
    External (TP5T, IntObj)
    External (TP6D, IntObj)
    External (TP6P, IntObj)
    External (TP6T, IntObj)

}



SSDT9
-----
DefinitionBlock ("", "SSDT", 2, "LENOVO", "CB-01   ", 0x00000001)
{
    External (_ADR, IntObj)
    External (_SB_.CAGS, MethodObj)    // 1 Arguments
    External (_SB_.GGOV, MethodObj)    // 1 Arguments
    External (_SB_.ISME, MethodObj)    // 1 Arguments
    External (_SB_.PC00, DeviceObj)
    External (_SB_.PC00.B0D3, DeviceObj)
    External (_SB_.PC00.DGCX, IntObj)
    External (_SB_.PC00.DGPV, FieldUnitObj)
    External (_SB_.PC00.DSSV, FieldUnitObj)
    External (_SB_.PC00.GC6I, MethodObj)    // 0 Arguments
    External (_SB_.PC00.GC6O, MethodObj)    // 0 Arguments
    External (_SB_.PC00.GFX0, DeviceObj)
    External (_SB_.PC00.IPU0, DeviceObj)
    External (_SB_.PC00.LPCB.EC0_.ECAV, UnknownObj)
    External (_SB_.PC00.LPCB.EC0_.GATY, UnknownObj)
    External (_SB_.PC00.LPCB.EC0_.LFCM, UnknownObj)
    External (_SB_.PC00.NVGE, FieldUnitObj)
    External (_SB_.PC00.OPTF, FieldUnitObj)
    External (_SB_.PC00.PC2M, MethodObj)    // 1 Arguments
    External (_SB_.PC00.PEG0, DeviceObj)
    External (_SB_.PC00.PEG0.CEDR, FieldUnitObj)
    External (_SB_.PC00.PEG0.CMDR, FieldUnitObj)
    External (_SB_.PC00.PEG0.D0ST, FieldUnitObj)
    External (_SB_.PC00.PEG0.GPRW, MethodObj)    // 2 Arguments
    External (_SB_.PC00.PEG0.LREN, FieldUnitObj)
    External (_SB_.PC00.PEG0.PEGP, DeviceObj)
    External (_SB_.PC00.PEG0.PEGP.HDAE, FieldUnitObj)
    External (_SB_.PC00.PEG0.PEGP.LTRE, IntObj)
    External (_SB_.PC00.PEG0.PEGP.SSSV, FieldUnitObj)
    External (_SB_.PC00.PEG1, DeviceObj)
    External (_SB_.PC00.PEG1.CEDR, FieldUnitObj)
    External (_SB_.PC00.PEG1.CMDR, FieldUnitObj)
    External (_SB_.PC00.PEG1.D0ST, FieldUnitObj)
    External (_SB_.PC00.PEG1.GPRW, MethodObj)    // 2 Arguments
    External (_SB_.PC00.PEG1.LREN, FieldUnitObj)
    External (_SB_.PC00.PEG1.PEGP, DeviceObj)
    External (_SB_.PC00.PEG1.PEGP.HDAE, FieldUnitObj)
    External (_SB_.PC00.PEG1.PEGP.LTRE, IntObj)
    External (_SB_.PC00.PEG1.PEGP.SSSV, FieldUnitObj)
    External (_SB_.PC00.PEG2, DeviceObj)
    External (_SB_.PC00.PEG2.CEDR, FieldUnitObj)
    External (_SB_.PC00.PEG2.CMDR, FieldUnitObj)
    External (_SB_.PC00.PEG2.D0ST, FieldUnitObj)
    External (_SB_.PC00.PEG2.GPRW, MethodObj)    // 2 Arguments
    External (_SB_.PC00.PEG2.LREN, FieldUnitObj)
    External (_SB_.PC00.PEG2.PEGP, DeviceObj)
    External (_SB_.PC00.PEG2.PEGP.HDAE, FieldUnitObj)
    External (_SB_.PC00.PEG2.PEGP.LTRE, IntObj)
    External (_SB_.PC00.PEG2.PEGP.SSSV, FieldUnitObj)
    External (_SB_.PC00.PEG3, DeviceObj)
    External (_SB_.PC00.PEG3.CEDR, FieldUnitObj)
    External (_SB_.PC00.PEG3.CMDR, FieldUnitObj)
    External (_SB_.PC00.PEG3.D0ST, FieldUnitObj)
    External (_SB_.PC00.PEG3.GPRW, MethodObj)    // 2 Arguments
    External (_SB_.PC00.PEG3.LREN, FieldUnitObj)
    External (_SB_.PC00.PEG3.PEGP, DeviceObj)
    External (_SB_.PC00.PEG3.PEGP.HDAE, FieldUnitObj)
    External (_SB_.PC00.PEG3.PEGP.LTRE, IntObj)
    External (_SB_.PC00.PEG3.PEGP.SSSV, FieldUnitObj)
    External (_SB_.PC00.TDGC, IntObj)
    External (_SB_.PC00.TGPC, BuffObj)
    External (_SB_.SGOV, MethodObj)    // 2 Arguments
    External (_SB_.SHPO, MethodObj)    // 2 Arguments
    External (AR02, UnknownObj)
    External (AR0A, UnknownObj)
    External (AR0B, UnknownObj)
    External (AR0C, UnknownObj)
    External (DGRP, UnknownObj)
    External (DLHR, UnknownObj)
    External (DLPW, UnknownObj)
    External (ECR1, UnknownObj)
    External (EEC1, UnknownObj)
    External (EEC2, UnknownObj)
    External (EEC3, UnknownObj)
    External (EECP, UnknownObj)
    External (HGMD, UnknownObj)
    External (HGST, UnknownObj)
    External (HRA0, UnknownObj)
    External (HRA1, UnknownObj)
    External (HRA2, UnknownObj)
    External (HRA3, UnknownObj)
    External (HRE0, UnknownObj)
    External (HRE1, UnknownObj)
    External (HRE2, UnknownObj)
    External (HRE3, UnknownObj)
    External (HRG0, UnknownObj)
    External (HRG1, UnknownObj)
    External (HRG2, UnknownObj)
    External (HRG3, UnknownObj)
    External (LTRW, UnknownObj)
    External (LTRX, UnknownObj)
    External (LTRY, UnknownObj)
    External (LTRZ, UnknownObj)
    External (MPGN, UnknownObj)
    External (OBFA, UnknownObj)
    External (OBFX, UnknownObj)
    External (OBFY, UnknownObj)
    External (OBFZ, UnknownObj)
    External (OSYS, UnknownObj)
    External (P0SC, UnknownObj)
    External (P0WK, UnknownObj)
    External (P1GP, UnknownObj)
    External (P1SC, UnknownObj)
    External (P1WK, UnknownObj)
    External (P2GP, UnknownObj)
    External (P2SC, UnknownObj)
    External (P2WK, UnknownObj)
    External (P3GP, UnknownObj)
    External (P3SC, UnknownObj)
    External (P3WK, UnknownObj)
    External (PBR1, UnknownObj)
    External (PBR2, UnknownObj)
    External (PBR3, UnknownObj)
    External (PD02, UnknownObj)
    External (PD0A, UnknownObj)
    External (PD0B, UnknownObj)
    External (PD0C, UnknownObj)
    External (PG0E, UnknownObj)
    External (PG1E, UnknownObj)
    External (PG2E, UnknownObj)
    External (PG3E, UnknownObj)
    External (PICM, UnknownObj)
    External (PWA0, UnknownObj)
    External (PWA1, UnknownObj)
    External (PWA2, UnknownObj)
    External (PWA3, UnknownObj)
    External (PWE0, UnknownObj)
    External (PWE1, UnknownObj)
    External (PWE2, UnknownObj)
    External (PWE3, UnknownObj)
    External (PWG0, UnknownObj)
    External (PWG1, UnknownObj)
    External (PWG2, UnknownObj)
    External (PWG3, UnknownObj)
    External (S4FG, UnknownObj)
    External (SBN0, UnknownObj)
    External (SBN1, UnknownObj)
    External (SBN2, UnknownObj)
    External (SBN3, UnknownObj)
    External (SGGP, UnknownObj)
    External (SLOT, UnknownObj)
    External (SMSL, UnknownObj)
    External (SNSL, UnknownObj)
    External (SPCX, MethodObj)    // 3 Arguments
    External (VMCP, UnknownObj)
    External (VMDE, UnknownObj)
    External (XBAS, UnknownObj)

    Scope (\_SB.PC00.PEG0)
    {
        Name (SLOT, Zero)
        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((PG0E == One))
            {
                Return (0x0F)
            }

            Return (Zero)
        }

        Name (LTEN, Zero)
        Name (LMSL, Zero)
        Name (LNSL, Zero)
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            LTEN = LTRX /* External reference */
            LMSL = SMSL /* External reference */
            LNSL = SNSL /* External reference */
            If ((CondRefOf (VMCP) && CondRefOf (VMDE)))
            {
                If (((VMDE == One) && ((VMCP & 0x08) != Zero)))
                {
                    CPMV = One
                }
            }
        }

        Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
        {
            If (PICM)
            {
                Return (AR02) /* External reference */
            }

            Return (PD02) /* External reference */
        }

        OperationRegion (PXCS, SystemMemory, \_SB.PC00.PC2M (_ADR), 0x0480)
        Field (PXCS, AnyAcc, NoLock, Preserve)
        {
            VDID,   32, 
            Offset (0x50), 
            L0SE,   1, 
                ,   3, 
            LDIS,   1, 
            Offset (0x51), 
            Offset (0x52), 
                ,   13, 
            LASX,   1, 
            Offset (0x5A), 
            ABPX,   1, 
                ,   2, 
            PDCX,   1, 
                ,   2, 
            PDSX,   1, 
            Offset (0x5B), 
            Offset (0x60), 
            Offset (0x62), 
            PSPX,   1, 
            Offset (0xA4), 
            D3HT,   2, 
            Offset (0xD8), 
                ,   30, 
            HPEX,   1, 
            PMEX,   1, 
            Offset (0xE0), 
            Offset (0xE0), 
            SCB0,   1, 
            Offset (0xE2), 
                ,   2, 
            L23E,   1, 
            L23R,   1, 
            Offset (0x324), 
                ,   3, 
            LEDM,   1, 
            Offset (0x328), 
            Offset (0x32B), 
            LTSM,   8
        }

        Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
        {
            Offset (0xDC), 
                ,   30, 
            HPSX,   1, 
            PMSX,   1
        }

        Method (L23D, 0, Serialized)
        {
            If ((SCB0 != One))
            {
                Return (Zero)
            }

            L23R = One
            Local0 = Zero
            While (L23R)
            {
                If ((Local0 > 0x04))
                {
                    Break
                }

                Sleep (0x10)
                Local0++
            }

            SCB0 = Zero
            Local0 = Zero
            While ((LASX == Zero))
            {
                If ((Local0 > 0x08))
                {
                    Break
                }

                Sleep (0x10)
                Local0++
            }
        }

        Method (DL23, 0, Serialized)
        {
            L23E = One
            Sleep (0x10)
            Local0 = Zero
            While (L23E)
            {
                If ((Local0 > 0x04))
                {
                    Break
                }

                Sleep (0x10)
                Local0++
            }

            SCB0 = One
        }

        Name (LTRV, Package (0x04)
        {
            Zero, 
            Zero, 
            Zero, 
            Zero
        })
        Name (CPMV, Zero)
        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Name (OPTS, Buffer (0x02)
                        {
                             0x00, 0x00                                       // ..
                        })
                        CreateBitField (OPTS, Zero, FUN0)
                        CreateBitField (OPTS, 0x06, FUN6)
                        CreateBitField (OPTS, 0x08, FUN8)
                        CreateBitField (OPTS, 0x09, FUN9)
                        FUN0 = One
                        If ((LTEN == One))
                        {
                            FUN6 = One
                        }

                        If ((Arg1 >= 0x02))
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        FUN8 = One
                                        FUN9 = One
                                    }
                                }
                            }
                        }

                        Return (OPTS) /* \_SB_.PC00.PEG0._DSM.OPTS */
                    }
                    Case (0x06)
                    {
                        If ((Arg1 >= 0x02))
                        {
                            LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                            LTRV [One] = (LMSL & 0x03FF)
                            LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                            LTRV [0x03] = (LNSL & 0x03FF)
                            Return (LTRV) /* \_SB_.PC00.PEG0.LTRV */
                        }
                    }
                    Case (0x08)
                    {
                        If (CondRefOf (ECR1))
                        {
                            If ((ECR1 == One))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (One)
                                }
                            }
                        }
                    }
                    Case (0x09)
                    {
                        If (CondRefOf (ECR1))
                        {
                            If ((ECR1 == One))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (Package (0x05)
                                    {
                                        0xC350, 
                                        Ones, 
                                        Ones, 
                                        0xC350, 
                                        Ones
                                    })
                                }
                            }
                        }
                    }

                }
            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }

        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x69, 0x04))
        }

        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
        {
            If ((HPEX == One))
            {
                HPEX = Zero
                HPSX = One
            }

            If ((PMEX == One))
            {
                PMEX = Zero
                PMSX = One
            }
        }

        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
        {
            If ((HPEX == Zero))
            {
                HPEX = One
                HPSX = One
            }

            If ((PMEX == Zero))
            {
                PMEX = One
                PMSX = One
            }
        }

        Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
        {
            Return (Package (0x02)
            {
                ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "FundamentalDeviceResetTriggeredOnD3ToD0", 
                        One
                    }
                }
            })
        }

        Method (HPME, 0, Serialized)
        {
            If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
            {
                PMSX = One
                PSPX = One
                Return (One)
            }

            Return (Zero)
        }

        Method (HPEV, 0, Serialized)
        {
            If (((VDID != 0xFFFFFFFF) && HPSX))
            {
                HPSX = One
                If ((PDCX == One))
                {
                    PDCX = One
                    If ((PDSX == Zero))
                    {
                        L0SE = Zero
                    }

                    Notify (^, Zero) // Bus Check
                }
            }
        }
    }

    Scope (\_SB.PC00.PEG1)
    {
        Name (SLOT, One)
        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((PG1E == One))
            {
                Return (0x0F)
            }

            Return (Zero)
        }

        Name (LTEN, Zero)
        Name (LMSL, Zero)
        Name (LNSL, Zero)
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            LTEN = LTRY /* External reference */
            LMSL = SMSL /* External reference */
            LNSL = SNSL /* External reference */
            If ((CondRefOf (VMCP) && CondRefOf (VMDE)))
            {
                If (((VMDE == One) && ((VMCP & One) != Zero)))
                {
                    CPMV = One
                }
            }
        }

        Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
        {
            If (PICM)
            {
                Return (AR02) /* External reference */
            }

            Return (PD02) /* External reference */
        }

        OperationRegion (PXCS, SystemMemory, \_SB.PC00.PC2M (_ADR), 0x0480)
        Field (PXCS, AnyAcc, NoLock, Preserve)
        {
            VDID,   32, 
            Offset (0x50), 
            L0SE,   1, 
                ,   3, 
            LDIS,   1, 
            Offset (0x51), 
            Offset (0x52), 
                ,   13, 
            LASX,   1, 
            Offset (0x5A), 
            ABPX,   1, 
                ,   2, 
            PDCX,   1, 
                ,   2, 
            PDSX,   1, 
            Offset (0x5B), 
            Offset (0x60), 
            Offset (0x62), 
            PSPX,   1, 
            Offset (0xA4), 
            D3HT,   2, 
            Offset (0xD8), 
                ,   30, 
            HPEX,   1, 
            PMEX,   1, 
            Offset (0xE0), 
            Offset (0xE0), 
            SCB0,   1, 
            Offset (0xE2), 
                ,   2, 
            L23E,   1, 
            L23R,   1, 
            Offset (0x324), 
                ,   3, 
            LEDM,   1, 
            Offset (0x328), 
            Offset (0x32B), 
            LTSM,   8
        }

        Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
        {
            Offset (0xDC), 
                ,   30, 
            HPSX,   1, 
            PMSX,   1
        }

        Method (L23D, 0, Serialized)
        {
            If ((SCB0 != One))
            {
                Return (Zero)
            }

            L23R = One
            Local0 = Zero
            While (L23R)
            {
                If ((Local0 > 0x04))
                {
                    Break
                }

                Sleep (0x10)
                Local0++
            }

            SCB0 = Zero
            Local0 = Zero
            While ((LASX == Zero))
            {
                If ((Local0 > 0x08))
                {
                    Break
                }

                Sleep (0x10)
                Local0++
            }
        }

        Method (DL23, 0, Serialized)
        {
            L23E = One
            Sleep (0x10)
            Local0 = Zero
            While (L23E)
            {
                If ((Local0 > 0x04))
                {
                    Break
                }

                Sleep (0x10)
                Local0++
            }

            SCB0 = One
        }

        Name (LTRV, Package (0x04)
        {
            Zero, 
            Zero, 
            Zero, 
            Zero
        })
        Name (CPMV, Zero)
        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Name (OPTS, Buffer (0x02)
                        {
                             0x00, 0x00                                       // ..
                        })
                        CreateBitField (OPTS, Zero, FUN0)
                        CreateBitField (OPTS, 0x06, FUN6)
                        CreateBitField (OPTS, 0x08, FUN8)
                        CreateBitField (OPTS, 0x09, FUN9)
                        FUN0 = One
                        If ((LTEN == One))
                        {
                            FUN6 = One
                        }

                        If ((Arg1 >= 0x02))
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        FUN8 = One
                                        FUN9 = One
                                    }
                                }
                            }
                        }

                        Return (OPTS) /* \_SB_.PC00.PEG1._DSM.OPTS */
                    }
                    Case (0x06)
                    {
                        If ((Arg1 >= 0x02))
                        {
                            LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                            LTRV [One] = (LMSL & 0x03FF)
                            LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                            LTRV [0x03] = (LNSL & 0x03FF)
                            Return (LTRV) /* \_SB_.PC00.PEG1.LTRV */
                        }
                    }
                    Case (0x08)
                    {
                        If (CondRefOf (ECR1))
                        {
                            If ((ECR1 == One))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (One)
                                }
                            }
                        }
                    }
                    Case (0x09)
                    {
                        If (CondRefOf (ECR1))
                        {
                            If ((ECR1 == One))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (Package (0x05)
                                    {
                                        0xC350, 
                                        Ones, 
                                        Ones, 
                                        0xC350, 
                                        Ones
                                    })
                                }
                            }
                        }
                    }

                }
            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }

        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x69, 0x04))
        }

        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
        {
            If ((HPEX == One))
            {
                HPEX = Zero
                HPSX = One
            }

            If ((PMEX == One))
            {
                PMEX = Zero
                PMSX = One
            }
        }

        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
        {
            If ((HPEX == Zero))
            {
                HPEX = One
                HPSX = One
            }

            If ((PMEX == Zero))
            {
                PMEX = One
                PMSX = One
            }
        }

        Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
        {
            Return (Package (0x02)
            {
                ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "FundamentalDeviceResetTriggeredOnD3ToD0", 
                        One
                    }
                }
            })
        }

        Method (HPME, 0, Serialized)
        {
            If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
            {
                PMSX = One
                PSPX = One
                Return (One)
            }

            Return (Zero)
        }

        Method (HPEV, 0, Serialized)
        {
            If (((VDID != 0xFFFFFFFF) && HPSX))
            {
                HPSX = One
                If ((PDCX == One))
                {
                    PDCX = One
                    If ((PDSX == Zero))
                    {
                        L0SE = Zero
                    }

                    Notify (^, Zero) // Bus Check
                }
            }
        }
    }

    Scope (\_SB.PC00.PEG2)
    {
        Name (SLOT, 0x02)
        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((PG2E == One))
            {
                Return (0x0F)
            }

            Return (Zero)
        }

        Name (LTEN, Zero)
        Name (LMSL, Zero)
        Name (LNSL, Zero)
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            LTEN = LTRZ /* External reference */
            LMSL = SMSL /* External reference */
            LNSL = SNSL /* External reference */
            If ((CondRefOf (VMCP) && CondRefOf (VMDE)))
            {
                If (((VMDE == One) && ((VMCP & 0x02) != Zero)))
                {
                    CPMV = One
                }
            }
        }

        Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
        {
            If (PICM)
            {
                Return (AR0A) /* External reference */
            }

            Return (PD0A) /* External reference */
        }

        OperationRegion (PXCS, SystemMemory, \_SB.PC00.PC2M (_ADR), 0x0480)
        Field (PXCS, AnyAcc, NoLock, Preserve)
        {
            VDID,   32, 
            Offset (0x50), 
            L0SE,   1, 
                ,   3, 
            LDIS,   1, 
            Offset (0x51), 
            Offset (0x52), 
                ,   13, 
            LASX,   1, 
            Offset (0x5A), 
            ABPX,   1, 
                ,   2, 
            PDCX,   1, 
                ,   2, 
            PDSX,   1, 
            Offset (0x5B), 
            Offset (0x60), 
            Offset (0x62), 
            PSPX,   1, 
            Offset (0xA4), 
            D3HT,   2, 
            Offset (0xD8), 
                ,   30, 
            HPEX,   1, 
            PMEX,   1, 
            Offset (0xE0), 
            Offset (0xE0), 
            SCB0,   1, 
            Offset (0xE2), 
                ,   2, 
            L23E,   1, 
            L23R,   1, 
            Offset (0x324), 
                ,   3, 
            LEDM,   1, 
            Offset (0x328), 
            Offset (0x32B), 
            LTSM,   8
        }

        Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
        {
            Offset (0xDC), 
                ,   30, 
            HPSX,   1, 
            PMSX,   1
        }

        Method (L23D, 0, Serialized)
        {
            If ((SCB0 != One))
            {
                Return (Zero)
            }

            L23R = One
            Local0 = Zero
            While (L23R)
            {
                If ((Local0 > 0x04))
                {
                    Break
                }

                Sleep (0x10)
                Local0++
            }

            SCB0 = Zero
            Local0 = Zero
            While ((LASX == Zero))
            {
                If ((Local0 > 0x08))
                {
                    Break
                }

                Sleep (0x10)
                Local0++
            }
        }

        Method (DL23, 0, Serialized)
        {
            L23E = One
            Sleep (0x10)
            Local0 = Zero
            While (L23E)
            {
                If ((Local0 > 0x04))
                {
                    Break
                }

                Sleep (0x10)
                Local0++
            }

            SCB0 = One
        }

        Name (LTRV, Package (0x04)
        {
            Zero, 
            Zero, 
            Zero, 
            Zero
        })
        Name (CPMV, Zero)
        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Name (OPTS, Buffer (0x02)
                        {
                             0x00, 0x00                                       // ..
                        })
                        CreateBitField (OPTS, Zero, FUN0)
                        CreateBitField (OPTS, 0x06, FUN6)
                        CreateBitField (OPTS, 0x08, FUN8)
                        CreateBitField (OPTS, 0x09, FUN9)
                        FUN0 = One
                        If ((LTEN == One))
                        {
                            FUN6 = One
                        }

                        If ((Arg1 >= 0x02))
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        FUN8 = One
                                        FUN9 = One
                                    }
                                }
                            }
                        }

                        Return (OPTS) /* \_SB_.PC00.PEG2._DSM.OPTS */
                    }
                    Case (0x06)
                    {
                        If ((Arg1 >= 0x02))
                        {
                            LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                            LTRV [One] = (LMSL & 0x03FF)
                            LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                            LTRV [0x03] = (LNSL & 0x03FF)
                            Return (LTRV) /* \_SB_.PC00.PEG2.LTRV */
                        }
                    }
                    Case (0x08)
                    {
                        If (CondRefOf (ECR1))
                        {
                            If ((ECR1 == One))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (One)
                                }
                            }
                        }
                    }
                    Case (0x09)
                    {
                        If (CondRefOf (ECR1))
                        {
                            If ((ECR1 == One))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (Package (0x05)
                                    {
                                        0xC350, 
                                        Ones, 
                                        Ones, 
                                        0xC350, 
                                        Ones
                                    })
                                }
                            }
                        }
                    }

                }
            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }

        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x69, 0x04))
        }

        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
        {
            If ((HPEX == One))
            {
                HPEX = Zero
                HPSX = One
            }

            If ((PMEX == One))
            {
                PMEX = Zero
                PMSX = One
            }
        }

        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
        {
            If ((HPEX == Zero))
            {
                HPEX = One
                HPSX = One
            }

            If ((PMEX == Zero))
            {
                PMEX = One
                PMSX = One
            }
        }

        Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
        {
            Return (Package (0x02)
            {
                ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "FundamentalDeviceResetTriggeredOnD3ToD0", 
                        One
                    }
                }
            })
        }

        Method (HPME, 0, Serialized)
        {
            If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
            {
                PMSX = One
                PSPX = One
                Return (One)
            }

            Return (Zero)
        }

        Method (HPEV, 0, Serialized)
        {
            If (((VDID != 0xFFFFFFFF) && HPSX))
            {
                HPSX = One
                If ((PDCX == One))
                {
                    PDCX = One
                    If ((PDSX == Zero))
                    {
                        L0SE = Zero
                    }

                    Notify (^, Zero) // Bus Check
                }
            }
        }
    }

    If (CondRefOf (\_SB.PC00.PEG3))
    {
        Scope (\_SB.PC00.PEG3)
        {
            Name (SLOT, 0x03)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((PG3E == One))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Name (LTEN, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTEN = LTRW /* External reference */
                LMSL = SMSL /* External reference */
                LNSL = SNSL /* External reference */
                If ((CondRefOf (VMCP) && CondRefOf (VMDE)))
                {
                    If (((VMDE == One) && ((VMCP & 0x04) != Zero)))
                    {
                        CPMV = One
                    }
                }
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR0B) /* External reference */
                }

                Return (PD0B) /* External reference */
            }

            OperationRegion (PXCS, SystemMemory, \_SB.PC00.PC2M (_ADR), 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                Offset (0xE0), 
                SCB0,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x324), 
                    ,   3, 
                LEDM,   1, 
                Offset (0x328), 
                Offset (0x32B), 
                LTSM,   8
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If ((SCB0 != One))
                {
                    Return (Zero)
                }

                L23R = One
                Local0 = Zero
                While (L23R)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                SCB0 = Zero
                Local0 = Zero
                While ((LASX == Zero))
                {
                    If ((Local0 > 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }
            }

            Method (DL23, 0, Serialized)
            {
                L23E = One
                Sleep (0x10)
                Local0 = Zero
                While (L23E)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                SCB0 = One
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (CPMV, Zero)
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            FUN0 = One
                            If ((LTEN == One))
                            {
                                FUN6 = One
                            }

                            If ((Arg1 >= 0x02))
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            FUN8 = One
                                            FUN9 = One
                                        }
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PC00.PEG3._DSM.OPTS */
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                LTRV [One] = (LMSL & 0x03FF)
                                LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                LTRV [0x03] = (LNSL & 0x03FF)
                                Return (LTRV) /* \_SB_.PC00.PEG3.LTRV */
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x69, 0x04))
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                If ((HPEX == One))
                {
                    HPEX = Zero
                    HPSX = One
                }

                If ((PMEX == One))
                {
                    PMEX = Zero
                    PMSX = One
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                If ((HPEX == Zero))
                {
                    HPEX = One
                    HPSX = One
                }

                If ((PMEX == Zero))
                {
                    PMEX = One
                    PMSX = One
                }
            }

            Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
            {
                Return (Package (0x02)
                {
                    ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10") /* Unknown UUID */, 
                    Package (0x01)
                    {
                        Package (0x02)
                        {
                            "FundamentalDeviceResetTriggeredOnD3ToD0", 
                            One
                        }
                    }
                })
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    PMSX = One
                    PSPX = One
                    Return (One)
                }

                Return (Zero)
            }

            Method (HPEV, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && HPSX))
                {
                    HPSX = One
                    If ((PDCX == One))
                    {
                        PDCX = One
                        If ((PDSX == Zero))
                        {
                            L0SE = Zero
                        }

                        Notify (^, Zero) // Bus Check
                    }
                }
            }
        }
    }

    Scope (\_SB.PC00.PEG0.PEGP)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x69, 0x04))
        }
    }

    If (PBR1)
    {
        Scope (\_SB.PC00.PEG1.PEGP)
        {
            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                Return (0x04)
            }
        }
    }

    Scope (\_SB.PC00.PEG1.PEGP)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x69, 0x04))
        }
    }

    If (PBR2)
    {
        Scope (\_SB.PC00.PEG2.PEGP)
        {
            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                Return (0x04)
            }
        }
    }

    Scope (\_SB.PC00.PEG2.PEGP)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x69, 0x04))
        }
    }

    If (PBR3)
    {
        Scope (\_SB.PC00.PEG3.PEGP)
        {
            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                Return (0x04)
            }
        }
    }

    If (CondRefOf (\_SB.PC00.PEG3))
    {
        Scope (\_SB.PC00.PEG3.PEGP)
        {
            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x69, 0x04))
            }
        }
    }

    Scope (\_GPE)
    {
        Method (P0L6, 0, NotSerialized)
        {
            If (\_SB.ISME (P0WK))
            {
                \_SB.SHPO (P0WK, One)
                Notify (\_SB.PC00.PEG0, 0x02) // Device Wake
                \_SB.CAGS (P0WK)
            }
        }

        Method (P1L6, 0, NotSerialized)
        {
        }

        Method (P2L6, 0, NotSerialized)
        {
            If (\_SB.ISME (P2WK))
            {
                \_SB.SHPO (P2WK, One)
                Notify (\_SB.PC00.PEG2, 0x02) // Device Wake
                \_SB.CAGS (P2WK)
            }
        }

        If (CondRefOf (\_SB.PC00.PEG3))
        {
            Method (P3L6, 0, NotSerialized)
            {
                If (\_SB.ISME (P3WK))
                {
                    \_SB.SHPO (P3WK, One)
                    Notify (\_SB.PC00.PEG3, 0x02) // Device Wake
                    \_SB.CAGS (P3WK)
                }
            }
        }
    }

    If ((((HGMD == 0x02) || (HGMD == 0x03)) && (HGST == One)))
    {
        If ((DGRP == (XBAS + 0x8000)))
        {
            Scope (\_SB.PC00.PEG1)
            {
                Name (WKEN, Zero)
                PowerResource (PG01, 0x00, 0x0000)
                {
                    Name (_STA, One)  // _STA: Status
                    Method (_ON, 0, Serialized)  // _ON_: Power On
                    {
                        If ((OSYS > 0x07D9))
                        {
                            If ((\_SB.PC00.DGPV == 0x10DE))
                            {
                                If ((\_SB.PC00.TDGC == One))
                                {
                                    If ((\_SB.PC00.DGCX == 0x03))
                                    {
                                        \_SB.PC00.GC6O ()
                                    }
                                    ElseIf ((\_SB.PC00.DGCX == 0x04))
                                    {
                                        \_SB.PC00.GC6O ()
                                    }

                                    \_SB.PC00.TDGC = Zero
                                    \_SB.PC00.DGCX = Zero
                                    _STA = One
                                }
                                Else
                                {
                                    \_SB.PC00.PGON (One)
                                    \_SB.PC00.PEG1.CMDR = 0x07
                                    \_SB.PC00.PEG1.D0ST = Zero
                                    \_SB.PC00.PEG1.PEGP.SSSV = \_SB.PC00.DSSV /* External reference */
                                    If ((\_SB.PC00.NVGE == 0x11))
                                    {
                                        If (\_SB.PC00.OPTF)
                                        {
                                            \_SB.PC00.PEG1.PEGP.HDAE = One
                                        }
                                        Else
                                        {
                                            \_SB.PC00.PEG1.PEGP.HDAE = Zero
                                        }
                                    }

                                    _STA = One
                                }

                                If (\_SB.PC00.LPCB.EC0.ECAV)
                                {
                                    If ((Acquire (\_SB.PC00.LPCB.EC0.LFCM, 0xA000) == Zero))
                                    {
                                        \_SB.PC00.LPCB.EC0.GATY = 0x02
                                        Sleep (0x0A)
                                        Release (\_SB.PC00.LPCB.EC0.LFCM)
                                    }
                                }
                            }
                            Else
                            {
                                \_SB.PC00.PGON (One)
                                _STA = One
                            }
                        }
                    }

                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                    {
                        If ((S4FG == One))
                        {
                            S4FG = Zero
                            Return (Zero)
                        }

                        If ((OSYS > 0x07D9))
                        {
                            If ((\_SB.PC00.DGPV == 0x10DE))
                            {
                                If (\_SB.PC00.LPCB.EC0.ECAV)
                                {
                                    If ((Acquire (\_SB.PC00.LPCB.EC0.LFCM, 0xA000) == Zero))
                                    {
                                        \_SB.PC00.LPCB.EC0.GATY = Zero
                                        Sleep (0x0A)
                                        Release (\_SB.PC00.LPCB.EC0.LFCM)
                                    }
                                }

                                If ((\_SB.PC00.TDGC == One))
                                {
                                    CreateField (\_SB.PC00.TGPC, Zero, 0x03, GPPC)
                                    If ((ToInteger (GPPC) == One))
                                    {
                                        \_SB.PC00.GC6I ()
                                    }
                                    ElseIf ((ToInteger (GPPC) == 0x02))
                                    {
                                        \_SB.PC00.GC6I ()
                                    }

                                    _STA = Zero
                                }
                                Else
                                {
                                    \_SB.PC00.PGOF (One)
                                    _STA = Zero
                                }
                            }
                            Else
                            {
                                \_SB.PC00.PGOF (One)
                                _STA = Zero
                            }
                        }
                    }
                }

                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    PG01
                })
                Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                {
                    PG01
                })
                Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                {
                    If (Arg1)
                    {
                        WKEN = Zero
                    }
                    ElseIf ((Arg0 && Arg2))
                    {
                        WKEN = One
                    }
                    Else
                    {
                        WKEN = Zero
                    }
                }

                Method (P1EW, 0, NotSerialized)
                {
                    If (WKEN)
                    {
                        If ((P1GP != Zero))
                        {
                            If ((P1GP == One)) {}
                        }
                    }
                }

                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                {
                    Return (0x04)
                }
            }
        }

        Scope (\_SB.PC00)
        {
            Name (IVID, 0xFFFF)
            Name (PEBA, Zero)
            Name (PION, Zero)
            Name (PIOF, Zero)
            Name (PBUS, Zero)
            Name (PDEV, Zero)
            Name (PFUN, Zero)
            Name (EBUS, Zero)
            Name (EDEV, Zero)
            Name (EFN0, Zero)
            Name (EFN1, One)
            Name (LTRS, Zero)
            Name (OBFS, Zero)
            Name (DSOF, 0x06)
            Name (CPOF, 0x34)
            Name (SBOF, 0x19)
            Name (ELC0, Zero)
            Name (ECP0, 0xFFFFFFFF)
            Name (H0VI, Zero)
            Name (H0DI, Zero)
            Name (ELC1, Zero)
            Name (ECP1, 0xFFFFFFFF)
            Name (H1VI, Zero)
            Name (H1DI, Zero)
            Name (ELC2, Zero)
            Name (ECP2, 0xFFFFFFFF)
            Name (H2VI, Zero)
            Name (H2DI, Zero)
            Name (ELC3, Zero)
            Name (ECP3, 0xFFFFFFFF)
            Name (H3VI, Zero)
            Name (H3DI, Zero)
            Name (AFL0, Zero)
            Name (AFL1, Zero)
            Name (AFL2, Zero)
            Name (AFL3, Zero)
            Name (AFL4, Zero)
            Name (AFL5, Zero)
            Name (AFL6, Zero)
            Name (AFL7, Zero)
            Name (AFL8, Zero)
            Name (AFL9, Zero)
            Name (AFLA, Zero)
            Name (AFLB, Zero)
            Name (AFLC, Zero)
            Name (AFLD, Zero)
            Name (AFLE, Zero)
            Name (AFLF, Zero)
            Name (TMCS, 0x0BB8)
            OperationRegion (OPG0, SystemMemory, (XBAS + 0x00030000), 0x1000)
            Field (OPG0, AnyAcc, NoLock, Preserve)
            {
                P0VI,   16, 
                P0DI,   16, 
                Offset (0x06), 
                DSO0,   16, 
                Offset (0x34), 
                CPO0,   8, 
                Offset (0xB0), 
                    ,   4, 
                P0LD,   1, 
                Offset (0x11A), 
                    ,   1, 
                P0VC,   1, 
                Offset (0x214), 
                Offset (0x216), 
                P0LS,   4, 
                Offset (0x248), 
                    ,   7, 
                Q0L2,   1, 
                Q0L0,   1, 
                Offset (0x504), 
                HST0,   32, 
                P0TR,   1, 
                Offset (0xC74), 
                P0LT,   4, 
                Offset (0xD0C), 
                LRV0,   32
            }

            OperationRegion (PCS0, SystemMemory, (XBAS + (SBN0 << 0x14)), 0xF0)
            Field (PCS0, DWordAcc, Lock, Preserve)
            {
                D0VI,   16, 
                Offset (0x2C), 
                S0VI,   16, 
                S0DI,   16
            }

            OperationRegion (CAP0, SystemMemory, ((XBAS + (SBN0 << 0x14)) + EECP), 0x14)
            Field (CAP0, DWordAcc, NoLock, Preserve)
            {
                Offset (0x0C), 
                LCP0,   32, 
                LCT0,   16
            }

            OperationRegion (OPG1, SystemMemory, (XBAS + 0x8000), 0x1000)
            Field (OPG1, AnyAcc, NoLock, Preserve)
            {
                P1VI,   16, 
                P1DI,   16, 
                Offset (0x06), 
                DSO1,   16, 
                Offset (0x34), 
                CPO1,   8, 
                Offset (0xB0), 
                    ,   4, 
                P1LD,   1, 
                Offset (0x11A), 
                    ,   1, 
                P1VC,   1, 
                Offset (0x214), 
                Offset (0x216), 
                P1LS,   4, 
                Offset (0x248), 
                    ,   7, 
                Q1L2,   1, 
                Q1L0,   1, 
                Offset (0x504), 
                HST1,   32, 
                P1TR,   1, 
                Offset (0x70C), 
                PA0V,   32, 
                Offset (0x71C), 
                PA1V,   32, 
                Offset (0x72C), 
                PA2V,   32, 
                Offset (0x73C), 
                PA3V,   32, 
                Offset (0x74C), 
                PA4V,   32, 
                Offset (0x75C), 
                PA5V,   32, 
                Offset (0x76C), 
                PA6V,   32, 
                Offset (0x77C), 
                PA7V,   32, 
                Offset (0x78C), 
                PA8V,   32, 
                Offset (0x79C), 
                PA9V,   32, 
                Offset (0x7AC), 
                PAAV,   32, 
                Offset (0x7BC), 
                PABV,   32, 
                Offset (0x7CC), 
                PACV,   32, 
                Offset (0x7DC), 
                PADV,   32, 
                Offset (0x7EC), 
                PAEV,   32, 
                Offset (0x7FC), 
                PAFV,   32, 
                Offset (0x91C), 
                    ,   31, 
                BSP1,   1, 
                Offset (0x93C), 
                    ,   31, 
                BSP2,   1, 
                Offset (0x95C), 
                    ,   31, 
                BSP3,   1, 
                Offset (0x97C), 
                    ,   31, 
                BSP4,   1, 
                Offset (0x99C), 
                    ,   31, 
                BSP5,   1, 
                Offset (0x9BC), 
                    ,   31, 
                BSP6,   1, 
                Offset (0x9DC), 
                    ,   31, 
                BSP7,   1, 
                Offset (0x9FC), 
                    ,   31, 
                BSP8,   1, 
                Offset (0xC20), 
                    ,   4, 
                P1AP,   2, 
                Offset (0xC38), 
                    ,   3, 
                P1RM,   1, 
                Offset (0xC3C), 
                    ,   31, 
                PRST,   1, 
                Offset (0xC74), 
                P1LT,   4, 
                Offset (0xD0C), 
                LRV1,   32
            }

            OperationRegion (PCS1, SystemMemory, (XBAS + (SBN1 << 0x14)), 0xF0)
            Field (PCS0, DWordAcc, Lock, Preserve)
            {
                D1VI,   16, 
                Offset (0x2C), 
                S1VI,   16, 
                S1DI,   16
            }

            OperationRegion (CAP1, SystemMemory, ((XBAS + (SBN1 << 0x14)) + EEC1), 0x14)
            Field (CAP0, DWordAcc, NoLock, Preserve)
            {
                Offset (0x0C), 
                LCP1,   32, 
                LCT1,   16
            }

            OperationRegion (OPG2, SystemMemory, (XBAS + 0x9000), 0x1000)
            Field (OPG2, AnyAcc, NoLock, Preserve)
            {
                P2VI,   16, 
                P2DI,   16, 
                Offset (0x06), 
                DSO2,   16, 
                Offset (0x34), 
                CPO2,   8, 
                Offset (0xB0), 
                    ,   4, 
                P2LD,   1, 
                Offset (0x11A), 
                    ,   1, 
                P2VC,   1, 
                Offset (0x214), 
                Offset (0x216), 
                P2LS,   4, 
                Offset (0x248), 
                    ,   7, 
                Q2L2,   1, 
                Q2L0,   1, 
                Offset (0x504), 
                HST2,   32, 
                P2TR,   1, 
                Offset (0xC20), 
                    ,   4, 
                P2AP,   2, 
                Offset (0xC38), 
                    ,   3, 
                P2RM,   1, 
                Offset (0xC74), 
                P2LT,   4, 
                Offset (0xD0C), 
                LRV2,   32
            }

            OperationRegion (PCS2, SystemMemory, (XBAS + (SBN2 << 0x14)), 0xF0)
            Field (PCS2, DWordAcc, Lock, Preserve)
            {
                D2VI,   16, 
                Offset (0x2C), 
                S2VI,   16, 
                S2DI,   16
            }

            OperationRegion (CAP2, SystemMemory, ((XBAS + (SBN2 << 0x14)) + EEC2), 0x14)
            Field (CAP2, DWordAcc, NoLock, Preserve)
            {
                Offset (0x0C), 
                LCP2,   32, 
                LCT2,   16
            }

            OperationRegion (OPG3, SystemMemory, (XBAS + 0xA000), 0x1000)
            Field (OPG3, AnyAcc, NoLock, Preserve)
            {
                P3VI,   16, 
                P3DI,   16, 
                Offset (0x06), 
                DSO3,   16, 
                Offset (0x34), 
                CPO3,   8, 
                Offset (0xB0), 
                    ,   4, 
                P3LD,   1, 
                Offset (0x11A), 
                    ,   1, 
                P3VC,   1, 
                Offset (0x214), 
                Offset (0x216), 
                P3LS,   4, 
                Offset (0x248), 
                    ,   7, 
                Q3L2,   1, 
                Q3L0,   1, 
                Offset (0x504), 
                HST3,   32, 
                P3TR,   1, 
                Offset (0xC20), 
                    ,   4, 
                P3AP,   2, 
                Offset (0xC38), 
                    ,   3, 
                P3RM,   1, 
                Offset (0xC74), 
                P3LT,   4, 
                Offset (0xD0C), 
                LRV3,   32
            }

            OperationRegion (PCS3, SystemMemory, (XBAS + (SBN3 << 0x14)), 0xF0)
            Field (PCS2, DWordAcc, Lock, Preserve)
            {
                D3VI,   16, 
                Offset (0x2C), 
                S3VI,   16, 
                S3DI,   16
            }

            OperationRegion (CAP3, SystemMemory, ((XBAS + (SBN3 << 0x14)) + EEC3), 0x14)
            Field (CAP3, DWordAcc, NoLock, Preserve)
            {
                Offset (0x0C), 
                LCP3,   32, 
                LCT3,   16
            }

            Method (PGON, 1, Serialized)
            {
                PION = Arg0
                If ((PION == Zero))
                {
                    If ((SGGP == Zero))
                    {
                        Return (Zero)
                    }
                }
                ElseIf ((PION == One))
                {
                    If ((P1GP == Zero))
                    {
                        Return (Zero)
                    }
                }
                ElseIf ((PION == 0x02))
                {
                    If ((P2GP == Zero))
                    {
                        Return (Zero)
                    }
                }
                ElseIf ((PION == 0x03))
                {
                    If ((P3GP == Zero))
                    {
                        Return (Zero)
                    }
                }

                PEBA = \XBAS /* External reference */
                PDEV = GDEV (PION)
                PFUN = GFUN (PION)
                PGSC (Arg0, One)
                If ((CCHK (PION, One) == Zero))
                {
                    Return (Zero)
                }

                GPPR (PION, One)
                RTEN (PION)
                If ((\_SB.PC00.DGPV == 0x10DE))
                {
                    Switch (PION)
                    {
                        Case (Zero)
                        {
                            \_SB.PC00.PEG0.LREN = \_SB.PC00.PEG0.PEGP.LTRE /* External reference */
                            \_SB.PC00.PEG0.CEDR = One
                        }
                        Case (One)
                        {
                            \_SB.PC00.PEG1.LREN = \_SB.PC00.PEG1.PEGP.LTRE /* External reference */
                            \_SB.PC00.PEG1.CEDR = One
                        }
                        Case (0x02)
                        {
                            \_SB.PC00.PEG2.LREN = \_SB.PC00.PEG2.PEGP.LTRE /* External reference */
                            \_SB.PC00.PEG2.CEDR = One
                        }
                        Case (0x03)
                        {
                            \_SB.PC00.PEG3.LREN = \_SB.PC00.PEG3.PEGP.LTRE /* External reference */
                            \_SB.PC00.PEG3.CEDR = One
                        }

                    }
                }

                If ((PION == Zero))
                {
                    S0VI = H0VI /* \_SB_.PC00.H0VI */
                    S0DI = H0DI /* \_SB_.PC00.H0DI */
                    LCT0 = ((ELC0 & 0x43) | (LCT0 & 0xFFBC))
                }
                ElseIf ((PION == One))
                {
                    S1VI = H1VI /* \_SB_.PC00.H1VI */
                    S1DI = H1DI /* \_SB_.PC00.H1DI */
                    LCT1 = ((ELC1 & 0x43) | (LCT1 & 0xFFBC))
                }
                ElseIf ((PION == 0x02))
                {
                    S2VI = H2VI /* \_SB_.PC00.H2VI */
                    S2DI = H2DI /* \_SB_.PC00.H2DI */
                    LCT2 = ((ELC2 & 0x43) | (LCT2 & 0xFFBC))
                }
                ElseIf ((PION == 0x03))
                {
                    S3VI = H3VI /* \_SB_.PC00.H3VI */
                    S3DI = H3DI /* \_SB_.PC00.H3DI */
                    LCT3 = ((ELC3 & 0x43) | (LCT3 & 0xFFBC))
                }

                Return (Zero)
            }

            Method (PGOF, 1, Serialized)
            {
                PIOF = Arg0
                If ((PIOF == Zero))
                {
                    If ((SGGP == Zero))
                    {
                        Return (Zero)
                    }
                }
                ElseIf ((PIOF == One))
                {
                    If ((P1GP == Zero))
                    {
                        Return (Zero)
                    }
                }
                ElseIf ((PIOF == 0x02))
                {
                    If ((P2GP == Zero))
                    {
                        Return (Zero)
                    }
                }
                ElseIf ((PIOF == 0x03))
                {
                    If ((P3GP == Zero))
                    {
                        Return (Zero)
                    }
                }

                PEBA = \XBAS /* External reference */
                PDEV = GDEV (PIOF)
                PFUN = GFUN (PIOF)
                If ((CCHK (PIOF, Zero) == Zero))
                {
                    Return (Zero)
                }

                If ((\_SB.PC00.DGPV == 0x10DE))
                {
                    Switch (PIOF)
                    {
                        Case (Zero)
                        {
                            \_SB.PC00.PEG0.PEGP.LTRE = \_SB.PC00.PEG0.LREN /* External reference */
                        }
                        Case (One)
                        {
                            \_SB.PC00.PEG1.PEGP.LTRE = \_SB.PC00.PEG1.LREN /* External reference */
                        }
                        Case (0x02)
                        {
                            \_SB.PC00.PEG2.PEGP.LTRE = \_SB.PC00.PEG2.LREN /* External reference */
                        }
                        Case (0x03)
                        {
                            \_SB.PC00.PEG3.PEGP.LTRE = \_SB.PC00.PEG3.LREN /* External reference */
                        }

                    }
                }

                If ((Arg0 == Zero))
                {
                    ELC0 = LCT0 /* \_SB_.PC00.LCT0 */
                    H0VI = S0VI /* \_SB_.PC00.S0VI */
                    H0DI = S0DI /* \_SB_.PC00.S0DI */
                    ECP0 = LCP0 /* \_SB_.PC00.LCP0 */
                }
                ElseIf ((Arg0 == One))
                {
                    ELC1 = LCT1 /* \_SB_.PC00.LCT1 */
                    H1VI = S1VI /* \_SB_.PC00.S1VI */
                    H1DI = S1DI /* \_SB_.PC00.S1DI */
                    ECP1 = LCP1 /* \_SB_.PC00.LCP1 */
                }
                ElseIf ((Arg0 == 0x02))
                {
                    ELC2 = LCT2 /* \_SB_.PC00.LCT2 */
                    H2VI = S2VI /* \_SB_.PC00.S2VI */
                    H2DI = S2DI /* \_SB_.PC00.S2DI */
                    ECP2 = LCP2 /* \_SB_.PC00.LCP2 */
                }
                ElseIf ((Arg0 == 0x03))
                {
                    ELC3 = LCT3 /* \_SB_.PC00.LCT3 */
                    H3VI = S3VI /* \_SB_.PC00.S3VI */
                    H3DI = S3DI /* \_SB_.PC00.S3DI */
                    ECP3 = LCP3 /* \_SB_.PC00.LCP3 */
                }

                RTDS (PIOF)
                PGSC (Arg0, Zero)
                GPPR (PIOF, Zero)
                Sleep (0x64)
                Return (Zero)
            }

            Method (GDEV, 1, NotSerialized)
            {
                If ((Arg0 == Zero))
                {
                    Local0 = 0x06
                }
                ElseIf ((Arg0 == One))
                {
                    Local0 = One
                }
                ElseIf ((Arg0 == 0x02))
                {
                    Local0 = One
                }
                ElseIf ((Arg0 == 0x03))
                {
                    Local0 = One
                }

                Return (Local0)
            }

            Method (GFUN, 1, NotSerialized)
            {
                If ((Arg0 == Zero))
                {
                    Local0 = Zero
                }
                ElseIf ((Arg0 == One))
                {
                    Local0 = Zero
                }
                ElseIf ((Arg0 == 0x02))
                {
                    Local0 = One
                }
                ElseIf ((Arg0 == 0x02))
                {
                    Local0 = 0x02
                }

                Return (Local0)
            }

            Method (CCHK, 2, NotSerialized)
            {
                If ((Arg0 == Zero))
                {
                    Local7 = P0VI /* \_SB_.PC00.P0VI */
                }
                ElseIf ((Arg0 == One))
                {
                    Local7 = P1VI /* \_SB_.PC00.P1VI */
                }
                ElseIf ((Arg0 == 0x02))
                {
                    Local7 = P2VI /* \_SB_.PC00.P2VI */
                }
                ElseIf ((Arg0 == 0x03))
                {
                    Local7 = P3VI /* \_SB_.PC00.P3VI */
                }

                If ((Local7 == IVID))
                {
                    Return (Zero)
                }

                If (((Arg0 != Zero) && (Arg0 != One)))
                {
                    Local7 = P1VI /* \_SB_.PC00.P1VI */
                    If ((Local7 == IVID))
                    {
                        Return (Zero)
                    }
                }

                If ((Arg1 == Zero))
                {
                    If ((Arg0 == Zero))
                    {
                        If ((SGPI (SGGP, PWE0, PWG0, PWA0) == Zero))
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg0 == One))
                    {
                        If ((SGPI (P1GP, PWE1, PWG1, PWA1) == Zero))
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg0 == 0x02))
                    {
                        If ((SGPI (P2GP, PWE2, PWG2, PWA2) == Zero))
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg0 == 0x03))
                    {
                        If ((SGPI (P3GP, PWE3, PWG3, PWA3) == Zero))
                        {
                            Return (Zero)
                        }
                    }
                }
                ElseIf ((Arg1 == One))
                {
                    If ((Arg0 == Zero))
                    {
                        If ((SGPI (SGGP, PWE0, PWG0, PWA0) == One))
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg0 == One))
                    {
                        If ((SGPI (P1GP, PWE1, PWG1, PWA1) == One))
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg0 == 0x02))
                    {
                        If ((SGPI (P2GP, PWE2, PWG2, PWA2) == One))
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg0 == 0x03))
                    {
                        If ((SGPI (P3GP, PWE3, PWG3, PWA3) == One))
                        {
                            Return (Zero)
                        }
                    }
                }

                Return (One)
            }

            Method (SGPI, 4, Serialized)
            {
                If ((Arg0 == One))
                {
                    If (CondRefOf (\_SB.GGOV))
                    {
                        Local0 = \_SB.GGOV (Arg2)
                    }
                }

                If ((Arg3 == Zero))
                {
                    Local0 = ~Local0
                    Local0 &= One
                }

                Return (Local0)
            }

            Method (PGSC, 2, Serialized)
            {
                If ((Arg0 == Zero))
                {
                    Local0 = P0SC /* External reference */
                }
                ElseIf ((Arg0 == One))
                {
                    Local0 = P1SC /* External reference */
                }
                ElseIf ((Arg0 == 0x02))
                {
                    Local0 = P2SC /* External reference */
                }
                ElseIf ((Arg0 == 0x03))
                {
                    Local0 = P3SC /* External reference */
                }
                Else
                {
                    Return (Zero)
                }

                SPCX (Local0, Arg1, TMCS)
            }

            Method (GPPR, 2, NotSerialized)
            {
                If ((Arg1 == Zero))
                {
                    If ((Arg0 == Zero))
                    {
                        SGPO (SGGP, HRE0, HRG0, HRA0, One)
                        Sleep (DLHR)
                        SGPO (SGGP, PWE0, PWG0, PWA0, Zero)
                    }

                    If ((Arg0 == One))
                    {
                        SGPO (P1GP, HRE1, HRG1, HRA1, One)
                        Sleep (DLHR)
                        SGPO (P1GP, PWE1, PWG1, PWA1, Zero)
                    }

                    If ((Arg0 == 0x02))
                    {
                        SGPO (P2GP, HRE2, HRG2, HRA2, One)
                        Sleep (DLHR)
                        SGPO (P2GP, PWE2, PWG2, PWA2, Zero)
                    }

                    If ((Arg0 == 0x03))
                    {
                        SGPO (P3GP, HRE3, HRG3, HRA3, One)
                        Sleep (DLHR)
                        SGPO (P3GP, PWE3, PWG3, PWA3, Zero)
                    }
                }
                ElseIf ((Arg1 == One))
                {
                    If ((Arg0 == Zero))
                    {
                        SGPO (SGGP, PWE0, PWG0, PWA0, One)
                        Sleep (DLPW)
                        SGPO (SGGP, HRE0, HRG0, HRA0, Zero)
                        Sleep (DLHR)
                    }

                    If ((Arg0 == One))
                    {
                        SGPO (P1GP, HRE1, HRG1, HRA1, One)
                        SGPO (P1GP, PWE1, PWG1, PWA1, One)
                        Sleep (DLPW)
                        SGPO (P1GP, HRE1, HRG1, HRA1, Zero)
                        Sleep (DLHR)
                    }

                    If ((Arg0 == 0x02))
                    {
                        SGPO (P2GP, PWE2, PWG2, PWA2, One)
                        Sleep (DLPW)
                        SGPO (P2GP, HRE2, HRG2, HRA2, Zero)
                        Sleep (DLHR)
                    }

                    If ((Arg0 == 0x03))
                    {
                        SGPO (P3GP, PWE3, PWG3, PWA3, One)
                        Sleep (DLPW)
                        SGPO (P3GP, HRE3, HRG3, HRA3, Zero)
                        Sleep (DLHR)
                    }
                }
            }

            Method (SGPO, 5, Serialized)
            {
                If ((Arg3 == Zero))
                {
                    Arg4 = ~Arg4
                    Arg4 &= One
                }

                If ((Arg0 == One))
                {
                    If (CondRefOf (\_SB.SGOV))
                    {
                        \_SB.SGOV (Arg2, Arg4)
                    }
                }
            }

            Method (DIWK, 1, NotSerialized)
            {
                If ((Arg0 == Zero)) {}
                ElseIf ((Arg0 == One))
                {
                    \_SB.PC00.PEG1.P1EW ()
                }
                ElseIf ((Arg0 == 0x02)) {}
                ElseIf ((Arg0 == 0x03)) {}
            }
        }
    }

    If ((((HGMD == 0x02) || (HGMD == 0x03)) && (HGST == One)))
    {
        Scope (\_SB.PC00)
        {
            Method (RTEN, 1, Serialized)
            {
                If ((Arg0 == Zero))
                {
                    If ((\_SB.PC00.PEG0.SCB0 != One))
                    {
                        Return (Zero)
                    }

                    \_SB.PC00.PEG0.L23R = One
                    Local0 = Zero
                    While (\_SB.PC00.PEG0.L23R)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    \_SB.PC00.PEG0.SCB0 = Zero
                    Local0 = Zero
                    While ((\_SB.PC00.PEG0.LASX == Zero))
                    {
                        If ((Local0 > 0x08))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }
                }
                ElseIf ((Arg0 == One))
                {
                    If ((\_SB.PC00.PEG1.SCB0 != One))
                    {
                        Return (Zero)
                    }

                    \_SB.PC00.PEG1.L23R = One
                    Local0 = Zero
                    While (\_SB.PC00.PEG1.L23R)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    \_SB.PC00.PEG1.SCB0 = Zero
                    Local0 = Zero
                    While ((\_SB.PC00.PEG1.LASX == Zero))
                    {
                        If ((Local0 > 0x08))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }
                }
                ElseIf ((Arg0 == 0x02))
                {
                    If ((\_SB.PC00.PEG2.SCB0 != One))
                    {
                        Return (Zero)
                    }

                    \_SB.PC00.PEG2.L23R = One
                    Local0 = Zero
                    While (\_SB.PC00.PEG2.L23R)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    \_SB.PC00.PEG2.SCB0 = Zero
                    Local0 = Zero
                    While ((\_SB.PC00.PEG2.LASX == Zero))
                    {
                        If ((Local0 > 0x08))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }
                }
                ElseIf ((Arg0 == 0x03))
                {
                    If (CondRefOf (\_SB.PC00.PEG3))
                    {
                        If ((\_SB.PC00.PEG3.SCB0 != One))
                        {
                            Return (Zero)
                        }

                        \_SB.PC00.PEG3.L23R = One
                        Local0 = Zero
                        While (\_SB.PC00.PEG3.L23R)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        \_SB.PC00.PEG3.SCB0 = Zero
                        Local0 = Zero
                        While ((\_SB.PC00.PEG3.LASX == Zero))
                        {
                            If ((Local0 > 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }
                    }
                }
            }

            Method (RTDS, 1, Serialized)
            {
                If ((Arg0 == Zero))
                {
                    \_SB.PC00.PEG0.L23E = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (\_SB.PC00.PEG0.L23E)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    \_SB.PC00.PEG0.SCB0 = One
                }
                ElseIf ((Arg0 == One))
                {
                    \_SB.PC00.PEG1.L23E = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (\_SB.PC00.PEG1.L23E)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    \_SB.PC00.PEG1.SCB0 = One
                }
                ElseIf ((Arg0 == 0x02))
                {
                    \_SB.PC00.PEG2.L23E = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (\_SB.PC00.PEG2.L23E)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    \_SB.PC00.PEG2.SCB0 = One
                }
                ElseIf ((Arg0 == 0x03))
                {
                    If (CondRefOf (\_SB.PC00.PEG3))
                    {
                        \_SB.PC00.PEG3.L23E = One
                        Sleep (0x10)
                        Local0 = Zero
                        While (\_SB.PC00.PEG3.L23E)
                        {
                            If ((Local0 > 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Local0++
                        }

                        \_SB.PC00.PEG3.SCB0 = One
                    }
                }
            }
        }
    }
}



TPM2
----
[000h 0000   4]                    Signature : "TPM2"    [Trusted Platform Module hardware interface Table]
[004h 0004   4]                 Table Length : 0000004C
[008h 0008   1]                     Revision : 04
[009h 0009   1]                     Checksum : 69
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "CB-01   "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "ACPI"
[020h 0032   4]        Asl Compiler Revision : 00040000

[024h 0036   2]               Platform Class : 0000
[026h 0038   2]                     Reserved : 0000
[028h 0040   8]              Control Address : 00000000FED40040
[030h 0048   4]                 Start Method : 07 [Command Response Buffer]

[034h 0052  12]            Method Parameters : 00 00 00 00 00 00 00 00 00 00 00 00
[040h 0064   4]           Minimum Log Length : 00010000
[044h 0068   8]                  Log Address : 000000003FD39000

Raw Table Data: Length 76 (0x4C)

    0000: 54 50 4D 32 4C 00 00 00 04 69 4C 45 4E 4F 56 4F  // TPM2L....iLENOVO
    0010: 43 42 2D 30 31 20 20 20 01 00 00 00 41 43 50 49  // CB-01   ....ACPI
    0020: 00 00 04 00 00 00 00 00 40 00 D4 FE 00 00 00 00  // ........@.......
    0030: 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0040: 00 00 01 00 00 90 D3 3F 00 00 00 00              // .......?....


UEFI
----
[000h 0000   4]                    Signature : "UEFI"    [UEFI Boot Optimization Table]
[004h 0004   4]                 Table Length : 00000236
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 98
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "CB-01   "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "ACPI"
[020h 0032   4]        Asl Compiler Revision : 00040000

[024h 0036  16]              UUID Identifier : 9D4BF935-A674-4710-BA02-BF0AA1758C7B
[034h 0052   2]                  Data Offset : 0036

Raw Table Data: Length 566 (0x236)

    0000: 55 45 46 49 36 02 00 00 01 98 4C 45 4E 4F 56 4F  // UEFI6.....LENOVO
    0010: 43 42 2D 30 31 20 20 20 01 00 00 00 41 43 50 49  // CB-01   ....ACPI
    0020: 00 00 04 00 35 F9 4B 9D 74 A6 10 47 BA 02 BF 0A  // ....5.K.t..G....
    0030: A1 75 8C 7B 36 00 24 42 56 44 54 24 00 00 00 24  // .u.{6.$BVDT$...$
    0040: 00 00 00 24 48 31 43 4E 34 37 57 57 00 00 00 00  // ...$H1CN47WW....
    0050: 00 00 00 00 00 00 00 00 00 00 00 00 24 4C 65 67  // ............$Leg
    0060: 69 6F 6E 20 78 36 30 20 47 65 6E 20 49 6E 74 65  // ion x60 Gen Inte
    0070: 6C 00 00 00 00 00 24 30 35 2E 34 33 2E 31 30 00  // l.....$05.43.10.
    0080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0090: 00 00 00 00 00 00 00 00 00 00 00 00 FF FF FF FF  // ................
    00A0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    00B0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    00C0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    00D0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    00E0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    00F0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0100: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0110: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0120: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0130: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0140: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0150: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0160: FF FF FF FF FF 24 42 4D 45 24 00 40 06 00 00 10  // .....$BME$.@....
    0170: 00 00 24 00 00 C8 00 00 00 08 00 24 00 FF FF FF  // ..$........$....
    0180: FF FF FF FF FF 24 5F 4D 53 43 5F 56 45 52 3D 40  // .....$_MSC_VER=@
    0190: 06 24 52 44 41 54 45 22 03 07 24 45 53 52 54 47  // .$RDATE"..$ESRTG
    01A0: 40 34 60 C4 61 3A AB BB C1 5C 45 B5 F2 62 62 F6  // @4`.a:...\E..bb.
    01B0: A8 D8 CF 8B 01 00 00 24 45 4E 44 4F 46 42 56 44  // .......$ENDOFBVD
    01C0: 54 FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // T...............
    01D0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    01E0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    01F0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0200: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0210: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0220: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0230: FF FF FF FF FF FF                                // ......


WSMT
----
[000h 0000   4]                    Signature : "WSMT"    [Windows SMM Security Mitigations Table]
[004h 0004   4]                 Table Length : 00000028
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 1D
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "CB-01   "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "ACPI"
[020h 0032   4]        Asl Compiler Revision : 00040000

[024h 0036   4]             Protection Flags : 00000007
                          FIXED_COMM_BUFFERS : 1
           COMM_BUFFER_NESTED_PTR_PROTECTION : 1
                  SYSTEM_RESOURCE_PROTECTION : 1

Raw Table Data: Length 40 (0x28)

    0000: 57 53 4D 54 28 00 00 00 01 1D 4C 45 4E 4F 56 4F  // WSMT(.....LENOVO
    0010: 43 42 2D 30 31 20 20 20 01 00 00 00 41 43 50 49  // CB-01   ....ACPI
    0020: 00 00 04 00 07 00 00 00                          // ........


