
Intel ACPI Component Architecture
ACPI Binary Table Extraction Utility version 20210604
Copyright (c) 2000 - 2021 Intel Corporation


 Signature  Length    Version Oem       Oem         Oem         Compiler Compiler
                              Id        TableId     RevisionId  Name     Revision
 _________  __________  ____  ________  __________  __________  _______  __________

 01)  SSDT  0x00000472  0x02  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 02)  MCFG  0x0000003C  0x01  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 03)  ASF!  0x000000A5  0x20  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 04)  APIC  0x00000138  0x03  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 05)  CRAT  0x00000F28  0x01  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 06)  SLIC  0x00000176  0x01  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 07)  SSDT  0x00007229  0x02  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 08)  SSDT  0x00000780  0x01  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 09)  TPM2  0x0000004C  0x04  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 10)  VFCT  0x0000D884  0x01  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 11)  BOOT  0x00000028  0x01  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 12)  SSDT  0x00000042  0x01  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 13)  SSDT  0x00005354  0x02  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 14)  SSDT  0x000010C5  0x01  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 15)  CDIT  0x00000029  0x01  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 16)  UEFI  0x00000236  0x01  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 17)  IVRS  0x000001A4  0x02  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 18)  DSDT  0x0000CAD7  0x01  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 19)  SSDT  0x000000F8  0x01  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 20)  WSMT  0x00000028  0x01  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 21)  SSDT  0x000000C2  0x01  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 22)  SSDT  0x00000080  0x01  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 23)  SSDT  0x0000007D  0x01  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 24)  SSDT  0x00000139  0x01  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 25)  SSDT  0x00003A21  0x01  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 26)  SSDT  0x00000298  0x01  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 27)  FACP  0x0000010C  0x05  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 28)  FPDT  0x00000044  0x01  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 29)  SSDT  0x00000BAE  0x02  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 30)  SSDT  0x0000020A  0x01  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 31)  MSDM  0x00000055  0x03  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 32)  SSDT  0x000034AA  0x01  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 33)  SSDT  0x00000750  0x02  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 34)  SSDT  0x00000D53  0x01  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 35)  HPET  0x00000038  0x01  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 36)  SSDT  0x0000005C  0x02  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 37)  SSDT  0x00000530  0x01  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 38)  FACS  0x00000040  0x02
 39)  BGRT  0x00000038  0x01  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000
 40)  SSDT  0x0000028D  0x01  "LENOVO"  "CB-01   "  0x00000001  "ACPI"   0x00040000

Found 40 ACPI tables in acpidump

APIC
----
[000h 0000   4]                    Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004   4]                 Table Length : 00000138
[008h 0008   1]                     Revision : 03
[009h 0009   1]                     Checksum : 2C
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "CB-01   "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "ACPI"
[020h 0032   4]        Asl Compiler Revision : 00040000

[024h 0036   4]           Local Apic Address : FEE00000
[028h 0040   4]        Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044   1]                Subtable Type : 00 [Processor Local APIC]
[02Dh 0045   1]                       Length : 08
[02Eh 0046   1]                 Processor ID : 00
[02Fh 0047   1]                Local Apic ID : 00
[030h 0048   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[034h 0052   1]                Subtable Type : 00 [Processor Local APIC]
[035h 0053   1]                       Length : 08
[036h 0054   1]                 Processor ID : 01
[037h 0055   1]                Local Apic ID : 01
[038h 0056   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[03Ch 0060   1]                Subtable Type : 00 [Processor Local APIC]
[03Dh 0061   1]                       Length : 08
[03Eh 0062   1]                 Processor ID : 02
[03Fh 0063   1]                Local Apic ID : 02
[040h 0064   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[044h 0068   1]                Subtable Type : 00 [Processor Local APIC]
[045h 0069   1]                       Length : 08
[046h 0070   1]                 Processor ID : 03
[047h 0071   1]                Local Apic ID : 03
[048h 0072   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[04Ch 0076   1]                Subtable Type : 00 [Processor Local APIC]
[04Dh 0077   1]                       Length : 08
[04Eh 0078   1]                 Processor ID : 04
[04Fh 0079   1]                Local Apic ID : 04
[050h 0080   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[054h 0084   1]                Subtable Type : 00 [Processor Local APIC]
[055h 0085   1]                       Length : 08
[056h 0086   1]                 Processor ID : 05
[057h 0087   1]                Local Apic ID : 05
[058h 0088   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[05Ch 0092   1]                Subtable Type : 00 [Processor Local APIC]
[05Dh 0093   1]                       Length : 08
[05Eh 0094   1]                 Processor ID : 06
[05Fh 0095   1]                Local Apic ID : 06
[060h 0096   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[064h 0100   1]                Subtable Type : 00 [Processor Local APIC]
[065h 0101   1]                       Length : 08
[066h 0102   1]                 Processor ID : 07
[067h 0103   1]                Local Apic ID : 07
[068h 0104   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[06Ch 0108   1]                Subtable Type : 00 [Processor Local APIC]
[06Dh 0109   1]                       Length : 08
[06Eh 0110   1]                 Processor ID : 08
[06Fh 0111   1]                Local Apic ID : 08
[070h 0112   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[074h 0116   1]                Subtable Type : 00 [Processor Local APIC]
[075h 0117   1]                       Length : 08
[076h 0118   1]                 Processor ID : 09
[077h 0119   1]                Local Apic ID : 09
[078h 0120   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[07Ch 0124   1]                Subtable Type : 00 [Processor Local APIC]
[07Dh 0125   1]                       Length : 08
[07Eh 0126   1]                 Processor ID : 0A
[07Fh 0127   1]                Local Apic ID : 0A
[080h 0128   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[084h 0132   1]                Subtable Type : 00 [Processor Local APIC]
[085h 0133   1]                       Length : 08
[086h 0134   1]                 Processor ID : 0B
[087h 0135   1]                Local Apic ID : 0B
[088h 0136   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[08Ch 0140   1]                Subtable Type : 00 [Processor Local APIC]
[08Dh 0141   1]                       Length : 08
[08Eh 0142   1]                 Processor ID : 0C
[08Fh 0143   1]                Local Apic ID : 0C
[090h 0144   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[094h 0148   1]                Subtable Type : 00 [Processor Local APIC]
[095h 0149   1]                       Length : 08
[096h 0150   1]                 Processor ID : 0D
[097h 0151   1]                Local Apic ID : 0D
[098h 0152   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[09Ch 0156   1]                Subtable Type : 00 [Processor Local APIC]
[09Dh 0157   1]                       Length : 08
[09Eh 0158   1]                 Processor ID : 0E
[09Fh 0159   1]                Local Apic ID : 0E
[0A0h 0160   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0A4h 0164   1]                Subtable Type : 00 [Processor Local APIC]
[0A5h 0165   1]                       Length : 08
[0A6h 0166   1]                 Processor ID : 0F
[0A7h 0167   1]                Local Apic ID : 0F
[0A8h 0168   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0ACh 0172   1]                Subtable Type : 01 [I/O APIC]
[0ADh 0173   1]                       Length : 0C
[0AEh 0174   1]                  I/O Apic ID : 21
[0AFh 0175   1]                     Reserved : 00
[0B0h 0176   4]                      Address : FEC00000
[0B4h 0180   4]                    Interrupt : 00000000

[0B8h 0184   1]                Subtable Type : 01 [I/O APIC]
[0B9h 0185   1]                       Length : 0C
[0BAh 0186   1]                  I/O Apic ID : 22
[0BBh 0187   1]                     Reserved : 00
[0BCh 0188   4]                      Address : FEC01000
[0C0h 0192   4]                    Interrupt : 00000018

[0C4h 0196   1]                Subtable Type : 02 [Interrupt Source Override]
[0C5h 0197   1]                       Length : 0A
[0C6h 0198   1]                          Bus : 00
[0C7h 0199   1]                       Source : 00
[0C8h 0200   4]                    Interrupt : 00000002
[0CCh 0204   2]        Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0

[0CEh 0206   1]                Subtable Type : 02 [Interrupt Source Override]
[0CFh 0207   1]                       Length : 0A
[0D0h 0208   1]                          Bus : 00
[0D1h 0209   1]                       Source : 09
[0D2h 0210   4]                    Interrupt : 00000009
[0D6h 0214   2]        Flags (decoded below) : 000F
                                    Polarity : 3
                                Trigger Mode : 3

[0D8h 0216   1]                Subtable Type : 04 [Local APIC NMI]
[0D9h 0217   1]                       Length : 06
[0DAh 0218   1]                 Processor ID : 00
[0DBh 0219   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0DDh 0221   1]         Interrupt Input LINT : 01

[0DEh 0222   1]                Subtable Type : 04 [Local APIC NMI]
[0DFh 0223   1]                       Length : 06
[0E0h 0224   1]                 Processor ID : 01
[0E1h 0225   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0E3h 0227   1]         Interrupt Input LINT : 01

[0E4h 0228   1]                Subtable Type : 04 [Local APIC NMI]
[0E5h 0229   1]                       Length : 06
[0E6h 0230   1]                 Processor ID : 02
[0E7h 0231   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0E9h 0233   1]         Interrupt Input LINT : 01

[0EAh 0234   1]                Subtable Type : 04 [Local APIC NMI]
[0EBh 0235   1]                       Length : 06
[0ECh 0236   1]                 Processor ID : 03
[0EDh 0237   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0EFh 0239   1]         Interrupt Input LINT : 01

[0F0h 0240   1]                Subtable Type : 04 [Local APIC NMI]
[0F1h 0241   1]                       Length : 06
[0F2h 0242   1]                 Processor ID : 04
[0F3h 0243   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0F5h 0245   1]         Interrupt Input LINT : 01

[0F6h 0246   1]                Subtable Type : 04 [Local APIC NMI]
[0F7h 0247   1]                       Length : 06
[0F8h 0248   1]                 Processor ID : 05
[0F9h 0249   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0FBh 0251   1]         Interrupt Input LINT : 01

[0FCh 0252   1]                Subtable Type : 04 [Local APIC NMI]
[0FDh 0253   1]                       Length : 06
[0FEh 0254   1]                 Processor ID : 06
[0FFh 0255   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[101h 0257   1]         Interrupt Input LINT : 01

[102h 0258   1]                Subtable Type : 04 [Local APIC NMI]
[103h 0259   1]                       Length : 06
[104h 0260   1]                 Processor ID : 07
[105h 0261   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[107h 0263   1]         Interrupt Input LINT : 01

[108h 0264   1]                Subtable Type : 04 [Local APIC NMI]
[109h 0265   1]                       Length : 06
[10Ah 0266   1]                 Processor ID : 08
[10Bh 0267   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[10Dh 0269   1]         Interrupt Input LINT : 01

[10Eh 0270   1]                Subtable Type : 04 [Local APIC NMI]
[10Fh 0271   1]                       Length : 06
[110h 0272   1]                 Processor ID : 09
[111h 0273   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[113h 0275   1]         Interrupt Input LINT : 01

[114h 0276   1]                Subtable Type : 04 [Local APIC NMI]
[115h 0277   1]                       Length : 06
[116h 0278   1]                 Processor ID : 0A
[117h 0279   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[119h 0281   1]         Interrupt Input LINT : 01

[11Ah 0282   1]                Subtable Type : 04 [Local APIC NMI]
[11Bh 0283   1]                       Length : 06
[11Ch 0284   1]                 Processor ID : 0B
[11Dh 0285   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[11Fh 0287   1]         Interrupt Input LINT : 01

[120h 0288   1]                Subtable Type : 04 [Local APIC NMI]
[121h 0289   1]                       Length : 06
[122h 0290   1]                 Processor ID : 0C
[123h 0291   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[125h 0293   1]         Interrupt Input LINT : 01

[126h 0294   1]                Subtable Type : 04 [Local APIC NMI]
[127h 0295   1]                       Length : 06
[128h 0296   1]                 Processor ID : 0D
[129h 0297   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[12Bh 0299   1]         Interrupt Input LINT : 01

[12Ch 0300   1]                Subtable Type : 04 [Local APIC NMI]
[12Dh 0301   1]                       Length : 06
[12Eh 0302   1]                 Processor ID : 0E
[12Fh 0303   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[131h 0305   1]         Interrupt Input LINT : 01

[132h 0306   1]                Subtable Type : 04 [Local APIC NMI]
[133h 0307   1]                       Length : 06
[134h 0308   1]                 Processor ID : 0F
[135h 0309   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[137h 0311   1]         Interrupt Input LINT : 01

Raw Table Data: Length 312 (0x138)

    0000: 41 50 49 43 38 01 00 00 03 2C 4C 45 4E 4F 56 4F  // APIC8....,LENOVO
    0010: 43 42 2D 30 31 20 20 20 01 00 00 00 41 43 50 49  // CB-01   ....ACPI
    0020: 00 00 04 00 00 00 E0 FE 01 00 00 00 00 08 00 00  // ................
    0030: 01 00 00 00 00 08 01 01 01 00 00 00 00 08 02 02  // ................
    0040: 01 00 00 00 00 08 03 03 01 00 00 00 00 08 04 04  // ................
    0050: 01 00 00 00 00 08 05 05 01 00 00 00 00 08 06 06  // ................
    0060: 01 00 00 00 00 08 07 07 01 00 00 00 00 08 08 08  // ................
    0070: 01 00 00 00 00 08 09 09 01 00 00 00 00 08 0A 0A  // ................
    0080: 01 00 00 00 00 08 0B 0B 01 00 00 00 00 08 0C 0C  // ................
    0090: 01 00 00 00 00 08 0D 0D 01 00 00 00 00 08 0E 0E  // ................
    00A0: 01 00 00 00 00 08 0F 0F 01 00 00 00 01 0C 21 00  // ..............!.
    00B0: 00 00 C0 FE 00 00 00 00 01 0C 22 00 00 10 C0 FE  // ..........".....
    00C0: 18 00 00 00 02 0A 00 00 02 00 00 00 00 00 02 0A  // ................
    00D0: 00 09 09 00 00 00 0F 00 04 06 00 05 00 01 04 06  // ................
    00E0: 01 05 00 01 04 06 02 05 00 01 04 06 03 05 00 01  // ................
    00F0: 04 06 04 05 00 01 04 06 05 05 00 01 04 06 06 05  // ................
    0100: 00 01 04 06 07 05 00 01 04 06 08 05 00 01 04 06  // ................
    0110: 09 05 00 01 04 06 0A 05 00 01 04 06 0B 05 00 01  // ................
    0120: 04 06 0C 05 00 01 04 06 0D 05 00 01 04 06 0E 05  // ................
    0130: 00 01 04 06 0F 05 00 01                          // ........


ASF!
----
[000h 0000   4]                    Signature : "ASF!"    [Alert Standard Format Table]
[004h 0004   4]                 Table Length : 000000A5
[008h 0008   1]                     Revision : 20
[009h 0009   1]                     Checksum : 3F
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "CB-01   "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "ACPI"
[020h 0032   4]        Asl Compiler Revision : 00040000

[024h 0036   1]                Subtable Type : 00 [ASF Information]
[025h 0037   1]                     Reserved : 00
[026h 0038   2]                       Length : 0010
[028h 0040   1]          Minimum Reset Value : 00
[029h 0041   1]     Minimum Polling Interval : FF
[02Ah 0042   2]                    System ID : 0001
[02Ch 0044   4]              Manufacturer ID : 57010000
[030h 0048   1]                        Flags : 00
[031h 0049   3]                     Reserved : 000000

[034h 0052   1]                Subtable Type : 01 [ASF Alerts]
[035h 0053   1]                     Reserved : 00
[036h 0054   2]                       Length : 002C
[038h 0056   1]                   AssertMask : 00
[039h 0057   1]                 DeassertMask : 00
[03Ah 0058   1]                  Alert Count : 03
[03Bh 0059   1]            Alert Data Length : 0C

[03Ch 0060   1]                      Address : 80
[03Dh 0061   1]                      Command : 23
[03Eh 0062   1]                         Mask : 01
[03Fh 0063   1]                        Value : 01
[040h 0064   1]                   SensorType : 01
[041h 0065   1]                         Type : 01
[042h 0066   1]                       Offset : 00
[043h 0067   1]                   SourceType : 39
[044h 0068   1]                     Severity : 10
[045h 0069   1]                 SensorNumber : 00
[046h 0070   1]                       Entity : 07
[047h 0071   1]                     Instance : 00

[048h 0072   1]                      Address : 80
[049h 0073   1]                      Command : 23
[04Ah 0074   1]                         Mask : 02
[04Bh 0075   1]                        Value : 02
[04Ch 0076   1]                   SensorType : 01
[04Dh 0077   1]                         Type : 01
[04Eh 0078   1]                       Offset : 00
[04Fh 0079   1]                   SourceType : 39
[050h 0080   1]                     Severity : 10
[051h 0081   1]                 SensorNumber : 01
[052h 0082   1]                       Entity : 07
[053h 0083   1]                     Instance : 00

[054h 0084   1]                      Address : 80
[055h 0085   1]                      Command : 23
[056h 0086   1]                         Mask : 04
[057h 0087   1]                        Value : 04
[058h 0088   1]                   SensorType : 01
[059h 0089   1]                         Type : 01
[05Ah 0090   1]                       Offset : 00
[05Bh 0091   1]                   SourceType : 39
[05Ch 0092   1]                     Severity : 10
[05Dh 0093   1]                 SensorNumber : 02
[05Eh 0094   1]                       Entity : 07
[05Fh 0095   1]                     Instance : 00

[060h 0096   1]                Subtable Type : 02 [ASF Remote Control]
[061h 0097   1]                     Reserved : 00
[062h 0098   2]                       Length : 0018
[064h 0100   1]                Control Count : 04
[065h 0101   1]          Control Data Length : 04
[066h 0102   2]                     Reserved : 0000

[068h 0104   1]                     Function : 00
[069h 0105   1]                      Address : 71
[06Ah 0106   1]                      Command : 00
[06Bh 0107   1]                        Value : 00

[06Ch 0108   1]                     Function : 01
[06Dh 0109   1]                      Address : 71
[06Eh 0110   1]                      Command : 02
[06Fh 0111   1]                        Value : 00

[070h 0112   1]                     Function : 02
[071h 0113   1]                      Address : 71
[072h 0114   1]                      Command : 01
[073h 0115   1]                        Value : 00

[074h 0116   1]                     Function : 03
[075h 0117   1]                      Address : 71
[076h 0118   1]                      Command : 03
[077h 0119   1]                        Value : 00

[078h 0120   1]                Subtable Type : 03 [ASF RMCP Boot Options]
[079h 0121   1]                     Reserved : 00
[07Ah 0122   2]                       Length : 0017
[07Ch 0124   7]                 Capabilities : 21 F8 00 00 00 1B F0
[083h 0131   1]              Completion Code : 00
[084h 0132   4]                Enterprise ID : 57010000
[088h 0136   1]                      Command : 00
[089h 0137   2]                    Parameter : 0100
[08Bh 0139   2]                 Boot Options : 7000
[08Dh 0141   2]               Oem Parameters : 1600

[08Fh 0143   1]                Subtable Type : 00 [ASF Information]
[090h 0144   1]                     Reserved : 10
[091h 0145   2]                       Length : 00A0
[093h 0147   1]          Minimum Reset Value : A2
[094h 0148   1]     Minimum Polling Interval : A4
[095h 0149   2]                    System ID : 0000
[097h 0151   4]              Manufacturer ID : 00000000
[09Bh 0155   1]                        Flags : 00
[09Ch 0156   3]                     Reserved : 000000


Raw Table Data: Length 165 (0xA5)

    0000: 41 53 46 21 A5 00 00 00 20 3F 4C 45 4E 4F 56 4F  // ASF!.... ?LENOVO
    0010: 43 42 2D 30 31 20 20 20 01 00 00 00 41 43 50 49  // CB-01   ....ACPI
    0020: 00 00 04 00 00 00 10 00 00 FF 01 00 00 00 01 57  // ...............W
    0030: 00 00 00 00 01 00 2C 00 00 00 03 0C 80 23 01 01  // ......,......#..
    0040: 01 01 00 39 10 00 07 00 80 23 02 02 01 01 00 39  // ...9.....#.....9
    0050: 10 01 07 00 80 23 04 04 01 01 00 39 10 02 07 00  // .....#.....9....
    0060: 02 00 18 00 04 04 00 00 00 71 00 00 01 71 02 00  // .........q...q..
    0070: 02 71 01 00 03 71 03 00 03 00 17 00 21 F8 00 00  // .q...q......!...
    0080: 00 1B F0 00 00 00 01 57 00 00 01 00 70 00 16 00  // .......W....p...
    0090: 10 A0 00 A2 A4 00 00 00 00 00 00 00 00 00 00 00  // ................
    00A0: 00 00 00 00 00                                   // .....


BGRT
----
[000h 0000   4]                    Signature : "BGRT"    [Boot Graphics Resource Table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 92
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "CB-01   "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "ACPI"
[020h 0032   4]        Asl Compiler Revision : 00040000

[024h 0036   2]                      Version : 0001
[026h 0038   1]       Status (decoded below) : 00
                                   Displayed : 0
                          Orientation Offset : 0
[027h 0039   1]                   Image Type : 00
[028h 0040   8]                Image Address : 00000000B51AE000
[030h 0048   4]                Image OffsetX : 00000240
[034h 0052   4]                Image OffsetY : 000000AC

Raw Table Data: Length 56 (0x38)

    0000: 42 47 52 54 38 00 00 00 01 92 4C 45 4E 4F 56 4F  // BGRT8.....LENOVO
    0010: 43 42 2D 30 31 20 20 20 01 00 00 00 41 43 50 49  // CB-01   ....ACPI
    0020: 00 00 04 00 01 00 00 00 00 E0 1A B5 00 00 00 00  // ................
    0030: 40 02 00 00 AC 00 00 00                          // @.......


BOOT
----
[000h 0000   4]                    Signature : "BOOT"    [Simple Boot Flag Table]
[004h 0004   4]                 Table Length : 00000028
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : F7
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "CB-01   "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "ACPI"
[020h 0032   4]        Asl Compiler Revision : 00040000

[024h 0036   1]          Boot Register Index : 44
[025h 0037   3]                     Reserved : 000000

Raw Table Data: Length 40 (0x28)

    0000: 42 4F 4F 54 28 00 00 00 01 F7 4C 45 4E 4F 56 4F  // BOOT(.....LENOVO
    0010: 43 42 2D 30 31 20 20 20 01 00 00 00 41 43 50 49  // CB-01   ....ACPI
    0020: 00 00 04 00 44 00 00 00                          // ....D...


CDIT
----
[000h 0000   4]                    Signature : "CDIT"    
[004h 0004   4]                 Table Length : 00000029
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 3F
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "CB-01   "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "ACPI"
[020h 0032   4]        Asl Compiler Revision : 00040000


**** Unknown ACPI table signature [CDIT]


Raw Table Data: Length 41 (0x29)

    0000: 43 44 49 54 29 00 00 00 01 3F 4C 45 4E 4F 56 4F  // CDIT)....?LENOVO
    0010: 43 42 2D 30 31 20 20 20 01 00 00 00 41 43 50 49  // CB-01   ....ACPI
    0020: 00 00 04 00 01 00 00 00 0A                       // .........


CRAT
----
[000h 0000   4]                    Signature : "CRAT"    
[004h 0004   4]                 Table Length : 00000F28
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : AA
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "CB-01   "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "ACPI"
[020h 0032   4]        Asl Compiler Revision : 00040000


**** Unknown ACPI table signature [CRAT]


Raw Table Data: Length 3880 (0xF28)

    0000: 43 52 41 54 28 0F 00 00 01 AA 4C 45 4E 4F 56 4F  // CRAT(.....LENOVO
    0010: 43 42 2D 30 31 20 20 20 01 00 00 00 41 43 50 49  // CB-01   ....ACPI
    0020: 00 00 04 00 3D 00 00 00 00 00 00 00 00 00 00 00  // ....=...........
    0030: 01 28 00 00 01 00 00 00 00 00 00 00 00 00 00 00  // .(..............
    0040: 00 00 00 00 00 00 0A 00 00 00 00 00 40 00 00 00  // ............@...
    0050: 00 00 00 00 00 00 00 00 01 28 00 00 01 00 00 00  // .........(......
    0060: 00 00 00 00 00 00 0C 00 00 00 00 00 00 00 F4 CF  // ................
    0070: 00 00 00 00 40 00 00 00 00 00 00 00 00 00 00 00  // ....@...........
    0080: 01 28 00 00 01 00 00 00 00 00 00 00 00 00 00 00  // .(..............
    0090: 01 00 00 00 00 00 00 30 03 00 00 00 40 00 00 00  // .......0....@...
    00A0: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    00B0: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    00C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00D0: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    00E0: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    00F0: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    0100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0110: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0120: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0130: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    0140: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0150: 00 00 00 00 00 02 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    0160: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0170: 00 00 00 00 FF 00 00 00 00 00 00 00 00 00 00 00  // ................
    0180: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0190: 00 00 00 00 00 10 00 00 03 01 40 00 10 00 01 00  // ..........@.....
    01A0: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    01B0: 02 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    01C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    01D0: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    01E0: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    01F0: 02 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    0200: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0210: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0220: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0230: 02 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    0240: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0250: 00 00 00 00 00 02 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    0260: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    0270: 04 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00  // ....0...........
    0280: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0290: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    02A0: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    02B0: 04 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00  // ....0...........
    02C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    02D0: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    02E0: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    02F0: 04 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00  // ....0...........
    0300: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0310: 00 00 00 00 00 02 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    0320: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    0330: 06 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    0340: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0350: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0360: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    0370: 06 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    0380: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0390: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    03A0: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    03B0: 06 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    03C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    03D0: 00 00 00 00 00 02 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    03E0: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    03F0: 08 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00  // ................
    0400: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0410: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0420: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    0430: 08 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00  // ................
    0440: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0450: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0460: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0470: 08 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00  // ................
    0480: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0490: 00 00 00 00 00 02 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    04A0: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    04B0: 08 00 00 00 00 FF 00 00 00 00 00 00 00 00 00 00  // ................
    04C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    04D0: 00 00 00 00 00 10 00 00 03 01 40 00 10 00 01 00  // ..........@.....
    04E0: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    04F0: 0A 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00  // ................
    0500: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0510: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0520: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    0530: 0A 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00  // ................
    0540: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0550: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0560: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0570: 0A 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00  // ................
    0580: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0590: 00 00 00 00 00 02 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    05A0: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    05B0: 0C 00 00 00 00 30 00 00 00 00 00 00 00 00 00 00  // .....0..........
    05C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    05D0: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    05E0: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    05F0: 0C 00 00 00 00 30 00 00 00 00 00 00 00 00 00 00  // .....0..........
    0600: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0610: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0620: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0630: 0C 00 00 00 00 30 00 00 00 00 00 00 00 00 00 00  // .....0..........
    0640: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0650: 00 00 00 00 00 02 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    0660: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    0670: 0E 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 00  // ................
    0680: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0690: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    06A0: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    06B0: 0E 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 00  // ................
    06C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    06D0: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    06E0: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    06F0: 0E 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 00  // ................
    0700: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0710: 00 00 00 00 00 02 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    0720: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    0730: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    0740: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0750: 00 00 00 00 01 00 00 00 FF 40 00 00 FF 40 00 00  // .........@...@..
    0760: 0F 40 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .@.......@......
    0770: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    0780: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0790: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    07A0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    07B0: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    07C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    07D0: 00 00 00 00 02 00 00 00 04 08 00 00 08 08 00 00  // ................
    07E0: 00 40 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .@.......@......
    07F0: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    0800: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0810: 00 00 00 00 02 00 00 00 00 00 08 04 00 00 08 04  // ................
    0820: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    0830: 02 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    0840: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0850: 00 00 00 00 01 00 00 00 FF 40 00 00 FF 40 00 00  // .........@...@..
    0860: 0F 40 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .@.......@......
    0870: 02 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    0880: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0890: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    08A0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    08B0: 02 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    08C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    08D0: 00 00 00 00 02 00 00 00 04 08 00 00 08 08 00 00  // ................
    08E0: 00 40 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .@.......@......
    08F0: 02 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    0900: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0910: 00 00 00 00 02 00 00 00 00 00 08 04 00 00 08 04  // ................
    0920: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    0930: 04 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00  // ....0...........
    0940: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0950: 00 00 00 00 01 00 00 00 FF 40 00 00 FF 40 00 00  // .........@...@..
    0960: 0F 40 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .@.......@......
    0970: 04 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00  // ....0...........
    0980: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0990: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    09A0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    09B0: 04 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00  // ....0...........
    09C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    09D0: 00 00 00 00 02 00 00 00 04 08 00 00 08 08 00 00  // ................
    09E0: 00 40 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .@.......@......
    09F0: 04 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00  // ....0...........
    0A00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A10: 00 00 00 00 02 00 00 00 00 00 08 04 00 00 08 04  // ................
    0A20: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    0A30: 06 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A50: 00 00 00 00 01 00 00 00 FF 40 00 00 FF 40 00 00  // .........@...@..
    0A60: 0F 40 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .@.......@......
    0A70: 06 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A90: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    0AA0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    0AB0: 06 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    0AC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0AD0: 00 00 00 00 02 00 00 00 04 08 00 00 08 08 00 00  // ................
    0AE0: 00 40 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .@.......@......
    0AF0: 06 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B10: 00 00 00 00 02 00 00 00 00 00 08 04 00 00 08 04  // ................
    0B20: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    0B30: 08 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00  // ................
    0B40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B50: 00 00 00 00 01 00 00 00 FF 40 00 00 FF 40 00 00  // .........@...@..
    0B60: 0F 40 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .@.......@......
    0B70: 08 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00  // ................
    0B80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B90: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    0BA0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    0BB0: 08 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00  // ................
    0BC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0BD0: 00 00 00 00 02 00 00 00 04 08 00 00 08 08 00 00  // ................
    0BE0: 00 40 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .@.......@......
    0BF0: 08 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00  // ................
    0C00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0C10: 00 00 00 00 02 00 00 00 00 00 08 04 00 00 08 04  // ................
    0C20: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    0C30: 0A 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00  // ................
    0C40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0C50: 00 00 00 00 01 00 00 00 FF 40 00 00 FF 40 00 00  // .........@...@..
    0C60: 0F 40 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .@.......@......
    0C70: 0A 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00  // ................
    0C80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0C90: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    0CA0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    0CB0: 0A 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00  // ................
    0CC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0CD0: 00 00 00 00 02 00 00 00 04 08 00 00 08 08 00 00  // ................
    0CE0: 00 40 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .@.......@......
    0CF0: 0A 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00  // ................
    0D00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0D10: 00 00 00 00 02 00 00 00 00 00 08 04 00 00 08 04  // ................
    0D20: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    0D30: 0C 00 00 00 00 30 00 00 00 00 00 00 00 00 00 00  // .....0..........
    0D40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0D50: 00 00 00 00 01 00 00 00 FF 40 00 00 FF 40 00 00  // .........@...@..
    0D60: 0F 40 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .@.......@......
    0D70: 0C 00 00 00 00 30 00 00 00 00 00 00 00 00 00 00  // .....0..........
    0D80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0D90: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    0DA0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    0DB0: 0C 00 00 00 00 30 00 00 00 00 00 00 00 00 00 00  // .....0..........
    0DC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0DD0: 00 00 00 00 02 00 00 00 04 08 00 00 08 08 00 00  // ................
    0DE0: 00 40 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .@.......@......
    0DF0: 0C 00 00 00 00 30 00 00 00 00 00 00 00 00 00 00  // .....0..........
    0E00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0E10: 00 00 00 00 02 00 00 00 00 00 08 04 00 00 08 04  // ................
    0E20: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    0E30: 0E 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 00  // ................
    0E40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0E50: 00 00 00 00 01 00 00 00 FF 40 00 00 FF 40 00 00  // .........@...@..
    0E60: 0F 40 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .@.......@......
    0E70: 0E 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 00  // ................
    0E80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0E90: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    0EA0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    0EB0: 0E 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 00  // ................
    0EC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0ED0: 00 00 00 00 02 00 00 00 04 08 00 00 08 08 00 00  // ................
    0EE0: 00 40 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .@.......@......
    0EF0: 0E 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 00  // ................
    0F00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0F10: 00 00 00 00 02 00 00 00 00 00 08 04 00 00 08 04  // ................
    0F20: 00 00 00 00 00 00 00 00                          // ........


DSDT
----
DefinitionBlock ("", "DSDT", 1, "LENOVO", "CB-01   ", 0x00000001)
{
    /*
     * iASL Warning: There were 11 external control methods found during
     * disassembly, but only 0 were resolved (11 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_PR_.C000, UnknownObj)
    External (_PR_.C000._PPC, IntObj)
    External (_PR_.C000.PPCV, UnknownObj)
    External (_SB_.APTS, MethodObj)    // Warning: Unknown method, guessing 3 arguments
    External (_SB_.AWAK, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.TPM2.PTS_, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (AFN4, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (AFN7, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (ALIB, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (M019, MethodObj)    // Warning: Unknown method, guessing 3 arguments
    External (M020, MethodObj)    // Warning: Unknown method, guessing 5 arguments
    External (MPTS, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (MWAK, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (UCEV, MethodObj)    // Warning: Unknown method, guessing 0 arguments

    OperationRegion (DBG0, SystemIO, 0x80, One)
    Field (DBG0, ByteAcc, NoLock, Preserve)
    {
        IO80,   8
    }

    OperationRegion (DBG1, SystemIO, 0x80, 0x02)
    Field (DBG1, WordAcc, NoLock, Preserve)
    {
        P80H,   16
    }

    OperationRegion (ACMS, SystemIO, 0x72, 0x02)
    Field (ACMS, ByteAcc, NoLock, Preserve)
    {
        ACMX,   8, 
        ACMA,   8
    }

    OperationRegion (XMOS, SystemIO, 0x72, 0x02)
    Field (XMOS, ByteAcc, Lock, Preserve)
    {
        IO72,   8, 
        IO73,   8
    }

    Method (WXMS, 2, NotSerialized)
    {
        IO72 = Arg0
        IO73 = Arg1
    }

    Method (RXMS, 1, NotSerialized)
    {
        IO72 = Arg0
        Return (IO73) /* \IO73 */
    }

    IndexField (ACMX, ACMA, ByteAcc, NoLock, Preserve)
    {
        Offset (0xB9), 
        IMEN,   8
    }

    OperationRegion (PSMI, SystemIO, 0xB0, 0x02)
    Field (PSMI, ByteAcc, NoLock, Preserve)
    {
        APMC,   8, 
        APMD,   8
    }

    OperationRegion (PMRG, SystemMemory, 0xFED80300, 0x0100)
    Field (PMRG, AnyAcc, NoLock, Preserve)
    {
            ,   6, 
        HPEN,   1, 
        Offset (0x60), 
        P1EB,   16, 
        Offset (0xF0), 
            ,   3, 
        RSTU,   1
    }

    OperationRegion (GSMG, SystemMemory, 0xFED81500, 0x03FF)
    Field (GSMG, AnyAcc, NoLock, Preserve)
    {
        Offset (0x5C), 
        Offset (0x5E), 
        GS23,   1, 
            ,   5, 
        GV23,   1, 
        GE23,   1, 
        Offset (0xA0), 
        Offset (0xA2), 
        GS40,   1, 
            ,   5, 
        GV40,   1, 
        GE40,   1
    }

    OperationRegion (GSMM, SystemMemory, 0xFED80000, 0x1000)
    Field (GSMM, AnyAcc, NoLock, Preserve)
    {
        Offset (0x288), 
            ,   1, 
        CLPS,   1, 
        Offset (0x2B0), 
            ,   2, 
        SLPS,   2
    }

    OperationRegion (PMI2, SystemMemory, 0xFED80300, 0x0100)
    Field (PMI2, AnyAcc, NoLock, Preserve)
    {
        Offset (0xBB), 
            ,   6, 
        PWDE,   1, 
        Offset (0xBC)
    }

    OperationRegion (P1E0, SystemIO, P1EB, 0x04)
    Field (P1E0, ByteAcc, NoLock, Preserve)
    {
            ,   14, 
        PEWS,   1, 
        WSTA,   1, 
            ,   14, 
        PEWD,   1
    }

    OperationRegion (IOCC, SystemIO, 0x0400, 0x80)
    Field (IOCC, ByteAcc, NoLock, Preserve)
    {
        Offset (0x01), 
            ,   2, 
        RTCS,   1
    }

    Name (PRWP, Package (0x02)
    {
        Zero, 
        Zero
    })
    Method (GPRW, 2, NotSerialized)
    {
        PRWP [Zero] = Arg0
        PRWP [One] = Arg1
        If ((DAS3 == Zero))
        {
            If ((Arg1 <= 0x03))
            {
                PRWP [One] = Zero
            }
        }

        Return (PRWP) /* \PRWP */
    }

    Method (SPTS, 1, NotSerialized)
    {
        If ((Arg0 == 0x03))
        {
            RSTU = Zero
        }

        CLPS = One
        SLPS = One
        PEWS = PEWS /* \PEWS */
    }

    Method (SWAK, 1, NotSerialized)
    {
        If ((Arg0 == 0x03))
        {
            RSTU = One
        }

        PEWS = PEWS /* \PEWS */
        PEWD = Zero
    }

    Method (TPST, 1, Serialized)
    {
        Local0 = (Arg0 + 0xB0000000)
        OperationRegion (VARM, SystemIO, 0x80, 0x04)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VARR,   32
        }

        VARR = Local0
    }

    OperationRegion (GNVS, SystemMemory, 0xCDF79998, 0x0000018B)
    Field (GNVS, AnyAcc, NoLock, Preserve)
    {
        SMIF,   8, 
        PRM0,   8, 
        PRM1,   8, 
        BRTL,   8, 
        TLST,   8, 
        IGDS,   8, 
        LCDA,   16, 
        CSTE,   16, 
        NSTE,   16, 
        CADL,   16, 
        PADL,   16, 
        LIDS,   8, 
        PWRS,   8, 
        BVAL,   32, 
        ADDL,   16, 
        BCMD,   8, 
        SBFN,   8, 
        DID,    32, 
        INFO,   2048, 
        TOML,   8, 
        TOMH,   8, 
        CEBP,   8, 
        C0LS,   8, 
        C1LS,   8, 
        C0HS,   8, 
        C1HS,   8, 
        ROMS,   32, 
        MUXF,   8, 
        PDDN,   8, 
        CNSB,   8, 
        RDHW,   8, 
        DAS3,   8, 
        TNBH,   8, 
        TCP0,   8, 
        TCP1,   8, 
        ATNB,   8, 
        PCP0,   8, 
        PCP1,   8, 
        PWMN,   8, 
        LPTY,   8, 
        M92D,   8, 
        WKPM,   8, 
        ALST,   8, 
        AFUC,   8, 
        EXUS,   8, 
        GV0E,   8, 
        WLSH,   8, 
        TSSS,   8, 
        AOZP,   8, 
        TZFG,   8, 
        BPS0,   8, 
        NAPC,   8, 
        PCBA,   32, 
        PCBL,   32, 
        WLAN,   8, 
        BLTH,   8, 
        GPSS,   8, 
        NFCS,   8, 
        SBTY,   8, 
        BDID,   16, 
        MWTT,   8, 
        ACPM,   8, 
        KBCS,   8, 
        ACEC,   8, 
        DPTC,   8, 
        ECTL,   8, 
        MM64,   8, 
        HMB1,   64, 
        HMB2,   64, 
        HMM1,   64, 
        HMM2,   64, 
        HML1,   64, 
        HML2,   64, 
        WOVS,   8, 
        TCNT,   8, 
        NPWD,   8
    }

    OperationRegion (OGNS, SystemMemory, 0xCCF3BE98, 0x0000002A)
    Field (OGNS, AnyAcc, Lock, Preserve)
    {
        TPND,   8, 
        TPID,   8, 
        M2WL,   8, 
        THPN,   8, 
        PBAR,   8, 
        THPD,   8, 
        DTEN,   8, 
        SDMO,   8, 
        TBEN,   8, 
        TBNH,   8, 
        RV2I,   8, 
        ISDS,   8, 
        ITSM,   8, 
        ITSV,   16, 
        ITSY,   8, 
        ODV0,   8, 
        ODV1,   8, 
        ODV2,   8, 
        ODV3,   8, 
        ODV4,   8, 
        ODV5,   8, 
        ODV6,   8, 
        ODV7,   8, 
        ODV8,   8, 
        ODV9,   8, 
        ODVA,   8, 
        ODVB,   8, 
        ODVC,   8, 
        ODVD,   8, 
        ODVE,   8, 
        ODVF,   8, 
        OD10,   8, 
        OD11,   8, 
        PLMN,   8, 
        WLVI,   8, 
        OR34,   8, 
        OR35,   8, 
        OR36,   8, 
        OR37,   8, 
        OR38,   8, 
        OR39,   8
    }

    Method (SCMP, 2, NotSerialized)
    {
        Name (STG1, Buffer (0x50) {})
        Name (STG2, Buffer (0x50) {})
        STG1 = Arg0
        STG2 = Arg1
        If ((SizeOf (Arg0) != SizeOf (Arg1)))
        {
            Return (Zero)
        }

        Local0 = Zero
        While ((Local0 < SizeOf (Arg0)))
        {
            If ((DerefOf (STG1 [Local0]) != DerefOf (STG2 [Local0]
                )))
            {
                Return (Zero)
            }

            Local0++
        }

        Return (One)
    }

    Name (WNOS, Zero)
    Name (MYOS, Zero)
    Name (HTTS, Zero)
    Name (OSTB, Ones)
    Name (TPOS, Zero)
    Name (LINX, Zero)
    Name (OSSP, Zero)
    Name (OSTN, Zero)
    Method (SEQL, 2, Serialized)
    {
        Local0 = SizeOf (Arg0)
        Local1 = SizeOf (Arg1)
        If ((Local0 != Local1))
        {
            Return (Zero)
        }

        Name (BUF0, Buffer (Local0) {})
        BUF0 = Arg0
        Name (BUF1, Buffer (Local0) {})
        BUF1 = Arg1
        Local2 = Zero
        While ((Local2 < Local0))
        {
            Local3 = DerefOf (BUF0 [Local2])
            Local4 = DerefOf (BUF1 [Local2])
            If ((Local3 != Local4))
            {
                Return (Zero)
            }

            Local2++
        }

        Return (One)
    }

    Method (OSTP, 0, NotSerialized)
    {
        If ((OSTB == Ones))
        {
            OSYS = 0x07D9
            OSTN = Zero
            If (CondRefOf (\_OSI, Local0))
            {
                OSTB = Zero
                TPOS = Zero
                If (_OSI ("Windows 2001"))
                {
                    OSTB = 0x08
                    TPOS = 0x08
                    OSTN = One
                }

                If (_OSI ("Windows 2001.1"))
                {
                    OSTB = 0x20
                    TPOS = 0x20
                    OSTN = 0x04
                }

                If (_OSI ("Windows 2001 SP1"))
                {
                    OSTB = 0x10
                    TPOS = 0x10
                    OSTN = 0x02
                }

                If (_OSI ("Windows 2001 SP2"))
                {
                    OSTB = 0x11
                    TPOS = 0x11
                    OSTN = 0x03
                }

                If (_OSI ("Windows 2001 SP3"))
                {
                    OSTB = 0x12
                    TPOS = 0x12
                }

                If (_OSI ("Windows 2006"))
                {
                    OSTB = 0x40
                    TPOS = 0x40
                    OSTN = 0x05
                }

                If (_OSI ("Windows 2006 SP1"))
                {
                    OSTB = 0x41
                    TPOS = 0x41
                    OSSP = One
                }

                If (_OSI ("Windows 2009"))
                {
                    OSSP = One
                    OSTB = 0x50
                    TPOS = 0x50
                    OSYS = 0x07D9
                    OSTN = 0x06
                }

                If (_OSI ("Windows 2012"))
                {
                    OSSP = One
                    OSTB = 0x60
                    TPOS = 0x60
                    OSYS = 0x07DC
                    OSTN = 0x07
                }

                If (_OSI ("Windows 2013"))
                {
                    OSSP = One
                    OSTB = 0x61
                    TPOS = 0x61
                    OSYS = 0x07DD
                    OSTN = 0x08
                }

                If (_OSI ("Windows 2015"))
                {
                    OSSP = One
                    OSTB = 0x70
                    TPOS = 0x70
                    OSYS = 0x07DF
                    OSTN = 0x09
                }

                If (_OSI ("Windows 2016"))
                {
                    OSSP = One
                    OSTB = 0x71
                    TPOS = 0x71
                    OSYS = 0x07E0
                    OSTN = 0x0A
                }

                If (_OSI ("Windows 2017"))
                {
                    OSSP = One
                    OSTB = 0x72
                    TPOS = 0x72
                    OSYS = 0x07E1
                    OSTN = 0x0B
                }

                If (_OSI ("Windows 2017.2"))
                {
                    OSSP = One
                    OSTB = 0x73
                    TPOS = 0x73
                    OSYS = 0x07E1
                    OSTN = 0x0C
                }

                If (_OSI ("Windows 2018"))
                {
                    OSYS = 0x07E2
                    OSTN = 0x0D
                }

                If (_OSI ("Windows 2018.2"))
                {
                    OSTN = 0x0E
                }

                If (_OSI ("Windows 2019"))
                {
                    OSTN = 0x0F
                }

                If (_OSI ("Windows 2020"))
                {
                    OSTN = 0x10
                }

                If (_OSI ("Windows 2021"))
                {
                    OSTN = 0x11
                }

                If (_OSI ("Linux"))
                {
                    LINX = One
                    OSTB = 0x80
                    TPOS = 0x80
                }
            }
            ElseIf (CondRefOf (\_OS, Local0))
            {
                If (SEQL (_OS, "Microsoft Windows"))
                {
                    OSTB = One
                    TPOS = One
                }
                ElseIf (SEQL (_OS, "Microsoft WindowsME: Millennium Edition"))
                {
                    OSTB = 0x02
                    TPOS = 0x02
                }
                ElseIf (SEQL (_OS, "Microsoft Windows NT"))
                {
                    OSTB = 0x04
                    TPOS = 0x04
                }
                Else
                {
                    OSTB = Zero
                    TPOS = Zero
                }
            }
            Else
            {
                OSTB = Zero
                TPOS = Zero
            }
        }

        Return (OSTB) /* \OSTB */
    }

    Name (BUFN, Zero)
    Name (MBUF, Buffer (0x1000) {})
    OperationRegion (MDBG, SystemMemory, 0xCCEB3018, 0x00001004)
    Field (MDBG, AnyAcc, Lock, Preserve)
    {
        MDG0,   32768
    }

    Method (DB2H, 1, Serialized)
    {
        SHOW (Arg0)
        MDGC (0x20)
        MDG0 = MBUF /* \MBUF */
    }

    Method (DW2H, 1, Serialized)
    {
        Local0 = Arg0
        Local1 = (Arg0 >> 0x08)
        Local0 &= 0xFF
        Local1 &= 0xFF
        DB2H (Local1)
        BUFN--
        DB2H (Local0)
    }

    Method (DD2H, 1, Serialized)
    {
        Local0 = Arg0
        Local1 = (Arg0 >> 0x10)
        Local0 &= 0xFFFF
        Local1 &= 0xFFFF
        DW2H (Local1)
        BUFN--
        DW2H (Local0)
    }

    Method (MBGS, 1, Serialized)
    {
        Local0 = SizeOf (Arg0)
        Name (BUFS, Buffer (Local0) {})
        BUFS = Arg0
        MDGC (0x20)
        While (Local0)
        {
            MDGC (DerefOf (BUFS [(SizeOf (Arg0) - Local0)]))
            Local0--
        }

        MDG0 = MBUF /* \MBUF */
    }

    Method (MBGH, 1, Serialized)
    {
        ToHexString (Arg0, Local1)
        Local0 = SizeOf (Local1)
        Name (BUFS, Buffer (Local0) {})
        BUFS = Local1
        MDGC (0x20)
        While (Local0)
        {
            MDGC (DerefOf (BUFS [(SizeOf (Local1) - Local0)]))
            Local0--
        }

        MDG0 = MBUF /* \MBUF */
    }

    Method (SHOW, 1, Serialized)
    {
        MDGC (NTOC ((Arg0 >> 0x04)))
        MDGC (NTOC (Arg0))
    }

    Method (LINE, 0, Serialized)
    {
        Local0 = BUFN /* \BUFN */
        Local0 &= 0x0F
        While (Local0)
        {
            MDGC (Zero)
            Local0++
            Local0 &= 0x0F
        }
    }

    Method (MDGC, 1, Serialized)
    {
        MBUF [BUFN] = Arg0
        BUFN += One
        If ((BUFN > 0x0FFF))
        {
            BUFN &= 0x0FFF
            UP_L (One)
        }
    }

    Method (UP_L, 1, Serialized)
    {
        Local2 = Arg0
        Local2 <<= 0x04
        MOVE (Local2)
        Local3 = (0x1000 - Local2)
        While (Local2)
        {
            MBUF [Local3] = Zero
            Local3++
            Local2--
        }
    }

    Method (MOVE, 1, Serialized)
    {
        Local4 = Arg0
        BUFN = Zero
        Local5 = (0x1000 - Local4)
        While (Local5)
        {
            Local5--
            MBUF [BUFN] = DerefOf (MBUF [Local4])
            BUFN++
            Local4++
        }
    }

    Method (NTOC, 1, Serialized)
    {
        Local0 = (Arg0 & 0x0F)
        If ((Local0 < 0x0A))
        {
            Local0 += 0x30
        }
        Else
        {
            Local0 += 0x37
        }

        Return (Local0)
    }

    Scope (_SB)
    {
        Device (PLTF)
        {
            Name (_HID, "ACPI0010" /* Processor Container Device */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A05") /* Generic Container Device */)  // _CID: Compatible ID
            Name (_UID, One)  // _UID: Unique ID
            Device (C000)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, Zero)  // _UID: Unique ID
            }

            Device (C001)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, One)  // _UID: Unique ID
            }

            Device (C002)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x02)  // _UID: Unique ID
            }

            Device (C003)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x03)  // _UID: Unique ID
            }

            Device (C004)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x04)  // _UID: Unique ID
            }

            Device (C005)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x05)  // _UID: Unique ID
            }

            Device (C006)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x06)  // _UID: Unique ID
            }

            Device (C007)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x07)  // _UID: Unique ID
            }

            Device (C008)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x08)  // _UID: Unique ID
            }

            Device (C009)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x09)  // _UID: Unique ID
            }

            Device (C00A)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0A)  // _UID: Unique ID
            }

            Device (C00B)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0B)  // _UID: Unique ID
            }

            Device (C00C)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0C)  // _UID: Unique ID
            }

            Device (C00D)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0D)  // _UID: Unique ID
            }

            Device (C00E)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0E)  // _UID: Unique ID
            }

            Device (C00F)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0F)  // _UID: Unique ID
            }
        }
    }

    Name (_S0, Package (0x04)  // _S0_: S0 System State
    {
        Zero, 
        Zero, 
        Zero, 
        Zero
    })
    If ((CNSB == Zero))
    {
        If ((DAS3 == One))
        {
            Name (_S3, Package (0x04)  // _S3_: S3 System State
            {
                0x03, 
                0x03, 
                Zero, 
                Zero
            })
        }
    }

    Name (_S4, Package (0x04)  // _S4_: S4 System State
    {
        0x04, 
        0x04, 
        Zero, 
        Zero
    })
    Name (_S5, Package (0x04)  // _S5_: S5 System State
    {
        0x05, 
        0x05, 
        Zero, 
        Zero
    })
    Scope (_GPE)
    {
        Method (XL08, 0, NotSerialized)
        {
            TPST (0x3908)
            If ((TBEN == Zero))
            {
                Notify (\_SB.PCI0.GPP0, 0x02) // Device Wake
                Notify (\_SB.PCI0.GPP1, 0x02) // Device Wake
            }

            Notify (\_SB.PCI0.GP17, 0x02) // Device Wake
            Notify (\_SB.PCI0.GP18, 0x02) // Device Wake
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        Method (XL0D, 0, NotSerialized)
        {
            TPST (0x390D)
            Notify (\_SB.PCI0.GPP2, 0x02) // Device Wake
        }

        Method (XL0E, 0, NotSerialized)
        {
            TPST (0x390E)
        }

        Method (XL0F, 0, NotSerialized)
        {
            TPST (0x390F)
        }
    }

    Name (PICM, Zero)
    Name (GPIC, Zero)
    Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        PICM = Arg0
        GPIC = Arg0
        If (PICM)
        {
            \_SB.DSPI ()
            If (NAPC)
            {
                \_SB.PCI0.NAPE ()
            }
        }
    }

    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        SPTS (Arg0)
        If ((Arg0 == One))
        {
            \_SB.S80H (0x51)
        }

        If ((Arg0 == 0x03))
        {
            \_SB.S80H (0x53)
            SLPS = One
            Local1 = 0x40
            \_SB.PCI0.LPC0.EC0.S3ST = One
        }

        If ((Arg0 == 0x04))
        {
            APMC = 0xCC
            Sleep (0x02)
            \_SB.S80H (0x54)
            SLPS = One
            RSTU = One
            Local1 = 0x80
            \_SB.PCI0.LPC0.EC0.S4ST = One
        }

        If ((Arg0 == 0x05))
        {
            APMC = 0xCC
            Sleep (0x02)
            \_SB.S80H (0x55)
            \_SB.PCI0.LPC0.EC0.S5ST = One
            If ((WKPM == One))
            {
                PWDE = One
            }

            BCMD = 0x90
            \_SB.BSMI (Zero)
            \_SB.GSMI (0x03)
            Local1 = 0xC0
        }

        If (CondRefOf (\_SB.TPM2.PTS))
        {
            \_SB.TPM2.PTS (Arg0)
        }

        \_SB.APTS (Arg0, MPTS (Arg0))
    }

    Method (_WAK, 1, NotSerialized)  // _WAK: Wake
    {
        SWAK (Arg0)
        \_SB.AWAK (Arg0)
        Local0 = \_SB.PCI0.LPC0.EC0.STMD
        Local1 = \_SB.PCI0.LPC0.EC0.QTMD
        Local2 = \_SB.PCI0.LPC0.EC0.AQMD
        Local3 = \_SB.PCI0.LPC0.EC0.AUPM
        If ((((Local0 == One) && (Local1 == Zero)) && ((Local2 == 
            Zero) && (Local3 == Zero))))
        {
            \_SB.PCI0.LPC0.EC0.VPC0.MCAT ()
        }
        ElseIf ((((Local0 == Zero) && (Local1 == One)) && ((
            Local2 == Zero) && (Local3 == Zero))))
        {
            \_SB.PCI0.LPC0.EC0.VPC0.MCBT ()
        }
        ElseIf ((((Local0 == Zero) && (Local1 == Zero)) && ((
            Local2 == Zero) && (Local3 == One))))
        {
            \_SB.PCI0.LPC0.EC0.VPC0.MCAP ()
        }
        ElseIf ((((Local0 == Zero) && (Local1 == Zero)) && ((
            Local2 == One) && (Local3 == Zero))))
        {
            \_SB.PCI0.LPC0.EC0.VPC0.MCAQ ()
        }
        ElseIf ((((Local0 == Zero) && (Local1 == Zero)) && ((
            Local2 == Zero) && (Local3 == Zero))))
        {
            \_SB.PCI0.LPC0.EC0.VPC0.MCPF ()
        }

        If (((Arg0 == 0x03) || (Arg0 == 0x04)))
        {
            If ((GPIC != Zero))
            {
                \_SB.DSPI ()
                If (NAPC)
                {
                    \_SB.PCI0.NAPE ()
                }
            }
        }

        If ((Arg0 == 0x03))
        {
            \_SB.PCI0.LPC0.EC0.S3RM = One
            \_SB.S80H (0xE3)
        }

        If ((Arg0 == 0x04))
        {
            \_SB.PCI0.LPC0.EC0.S4RM = One
            \_SB.PCI0.LPC0.EC0.RWAK = Zero
            \_SB.S80H (0xE4)
        }

        If ((Arg0 == 0x05))
        {
            \_SB.PCI0.LPC0.EC0.S5RM = One
            \_SB.PCI0.LPC0.EC0.RWAK = Zero
            \_SB.S80H (0xE5)
        }

        \_SB.PCI0.LPC0.EC0.ECFG (One)
        \_SB.PCI0.LPC0.ACAD.ACDC = 0xFF
        MWAK (Arg0)
        Return (Zero)
    }

    Scope (_SB)
    {
        Scope (\_SB)
        {
            OperationRegion (PM80, SystemMemory, 0xFED80380, 0x10)
            Field (PM80, AnyAcc, NoLock, Preserve)
            {
                SI3R,   1
            }

            Name (NBRI, Zero)
            Name (NBAR, Zero)
            Name (NCMD, Zero)
        }

        Device (PCI0)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_UID, One)  // _UID: Unique ID
            Name (_BBN, Zero)  // _BBN: BIOS Bus Number
            Name (_ADR, Zero)  // _ADR: Address
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If ((GPIC != Zero))
                {
                    DSPI ()
                    If (NAPC)
                    {
                        NAPE ()
                    }
                }

                OSTP ()
                Local0 = ^LPC0.EC0.STMD /* \_SB_.PCI0.LPC0.EC0_.STMD */
                Local1 = ^LPC0.EC0.QTMD /* \_SB_.PCI0.LPC0.EC0_.QTMD */
                Local2 = ^LPC0.EC0.AQMD /* \_SB_.PCI0.LPC0.EC0_.AQMD */
                Local3 = ^LPC0.EC0.AUPM /* \_SB_.PCI0.LPC0.EC0_.AUPM */
                If ((((Local0 == One) && (Local1 == Zero)) && ((Local2 == 
                    Zero) && (Local3 == Zero))))
                {
                    ^LPC0.EC0.VPC0.MCAT ()
                }
                ElseIf ((((Local0 == Zero) && (Local1 == One)) && ((
                    Local2 == Zero) && (Local3 == Zero))))
                {
                    ^LPC0.EC0.VPC0.MCBT ()
                }
                ElseIf ((((Local0 == Zero) && (Local1 == Zero)) && ((
                    Local2 == Zero) && (Local3 == One))))
                {
                    ^LPC0.EC0.VPC0.MCAP ()
                }
                ElseIf ((((Local0 == Zero) && (Local1 == Zero)) && ((
                    Local2 == One) && (Local3 == Zero))))
                {
                    ^LPC0.EC0.VPC0.MCAQ ()
                }
                ElseIf ((((Local0 == Zero) && (Local1 == Zero)) && ((
                    Local2 == Zero) && (Local3 == Zero))))
                {
                    ^LPC0.EC0.VPC0.MCPF ()
                }
            }

            Name (SUPP, Zero)
            Name (CTRL, Zero)
            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                CreateDWordField (Arg3, Zero, CDW1)
                CreateDWordField (Arg3, 0x04, CDW2)
                CreateDWordField (Arg3, 0x08, CDW3)
                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    SUPP = CDW2 /* \_SB_.PCI0._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.PCI0._OSC.CDW3 */
                    If ((TBEN == One))
                    {
                        If ((TBNH != Zero))
                        {
                            CTRL &= 0xFFFFFFF5
                        }
                        Else
                        {
                            CTRL &= 0xFFFFFFF4
                        }
                    }

                    If (((SUPP & 0x16) != 0x16))
                    {
                        CTRL &= 0x1E
                    }

                    CTRL &= 0x1D
                    If (~(CDW1 & One))
                    {
                        If ((CTRL & One)) {}
                        If ((CTRL & 0x04)) {}
                        If ((CTRL & 0x10)) {}
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.PCI0.CTRL */
                    Return (Arg3)
                }
                Else
                {
                    CDW1 |= 0x04
                    Return (Arg3)
                }
            }

            Method (TOM, 0, NotSerialized)
            {
                Local0 = (TOML * 0x00010000)
                Local1 = (TOMH * 0x01000000)
                Local0 += Local1
                Return (Local0)
            }

            Name (CRES, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, SubDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0100,             // Length
                    0x00,, )
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0CF7,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0CF8,             // Length
                    0x00,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0D00,             // Range Minimum
                    0xFFFF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0xF300,             // Length
                    ,, , TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000A0000,         // Range Minimum
                    0x000BFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, Cacheable, ReadOnly,
                    0x00000000,         // Granularity
                    0x000C0000,         // Range Minimum
                    0x000C3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, Cacheable, ReadOnly,
                    0x00000000,         // Granularity
                    0x000C4000,         // Range Minimum
                    0x000C7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadOnly,
                    0x00000000,         // Granularity
                    0x000C8000,         // Range Minimum
                    0x000CBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadOnly,
                    0x00000000,         // Granularity
                    0x000CC000,         // Range Minimum
                    0x000CFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D0000,         // Range Minimum
                    0x000D3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D4000,         // Range Minimum
                    0x000D7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D8000,         // Range Minimum
                    0x000DBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000DC000,         // Range Minimum
                    0x000DFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E0000,         // Range Minimum
                    0x000E3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E4000,         // Range Minimum
                    0x000E7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E8000,         // Range Minimum
                    0x000EBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000EC000,         // Range Minimum
                    0x000EFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x80000000,         // Range Minimum
                    0xF7FFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x78000000,         // Length
                    0x00,, _Y00, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0xFC000000,         // Range Minimum
                    0xFEAFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x02B00000,         // Length
                    0x00,, _Y01, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0xFED45000,         // Range Minimum
                    0xFED811FF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x0003C200,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0xFED81900,         // Range Minimum
                    0xFED81FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000700,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0xFEDC0000,         // Range Minimum
                    0xFEDC0FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00001000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0xFEDC6000,         // Range Minimum
                    0xFEDC6FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00001000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                IO (Decode16,
                    0x0CF8,             // Range Minimum
                    0x0CF8,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, _Y02, AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, _Y03, AddressRangeMemory, TypeStatic)
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateDWordField (CRES, \_SB.PCI0._Y00._MIN, BTMN)  // _MIN: Minimum Base Address
                CreateDWordField (CRES, \_SB.PCI0._Y00._MAX, BTMX)  // _MAX: Maximum Base Address
                CreateDWordField (CRES, \_SB.PCI0._Y00._LEN, BTLN)  // _LEN: Length
                CreateDWordField (CRES, \_SB.PCI0._Y01._MIN, BTN1)  // _MIN: Minimum Base Address
                CreateDWordField (CRES, \_SB.PCI0._Y01._MAX, BTX1)  // _MAX: Maximum Base Address
                CreateDWordField (CRES, \_SB.PCI0._Y01._LEN, BTL1)  // _LEN: Length
                BTMN = TOM ()
                BTMX = (PCBA - One)
                BTLN = (PCBA - BTMN) /* \_SB_.PCI0._CRS.BTMN */
                BTN1 = (PCBL + One)
                BTL1 = (BTX1 - BTN1) /* \_SB_.PCI0._CRS.BTN1 */
                BTL1 += One
                If ((MM64 == One))
                {
                    CreateQWordField (CRES, \_SB.PCI0._Y02._MIN, M1MN)  // _MIN: Minimum Base Address
                    CreateQWordField (CRES, \_SB.PCI0._Y02._MAX, M1MX)  // _MAX: Maximum Base Address
                    CreateQWordField (CRES, \_SB.PCI0._Y02._LEN, M1LN)  // _LEN: Length
                    M1MN = HMB1 /* \HMB1 */
                    M1MX = HMM1 /* \HMM1 */
                    M1LN = HML1 /* \HML1 */
                    CreateQWordField (CRES, \_SB.PCI0._Y03._MIN, M2MN)  // _MIN: Minimum Base Address
                    CreateQWordField (CRES, \_SB.PCI0._Y03._MAX, M2MX)  // _MAX: Maximum Base Address
                    CreateQWordField (CRES, \_SB.PCI0._Y03._LEN, M2LN)  // _LEN: Length
                    M2MN = HMB2 /* \HMB2 */
                    M2MX = HMM2 /* \HMM2 */
                    M2LN = HML2 /* \HML2 */
                }

                Return (CRES) /* \_SB_.PCI0.CRES */
            }

            Device (MEMR)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (BAR3, 0xFDE00000)
                Name (MEM1, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y04)
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y05)
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y06)
                })
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    CreateDWordField (MEM1, \_SB.PCI0.MEMR._Y04._BAS, MB01)  // _BAS: Base Address
                    CreateDWordField (MEM1, \_SB.PCI0.MEMR._Y04._LEN, ML01)  // _LEN: Length
                    CreateDWordField (MEM1, \_SB.PCI0.MEMR._Y05._BAS, MB02)  // _BAS: Base Address
                    CreateDWordField (MEM1, \_SB.PCI0.MEMR._Y05._LEN, ML02)  // _LEN: Length
                    CreateDWordField (MEM1, \_SB.PCI0.MEMR._Y06._BAS, MB03)  // _BAS: Base Address
                    CreateDWordField (MEM1, \_SB.PCI0.MEMR._Y06._LEN, ML03)  // _LEN: Length
                    If (GPIC)
                    {
                        MB01 = 0xFEC00000
                        MB02 = 0xFEE00000
                        ML01 = 0x1000
                        If (NAPC)
                        {
                            ML01 += 0x1000
                        }

                        ML02 = 0x1000
                    }

                    If ((BAR3 != 0xFFF00000))
                    {
                        MB03 = BAR3 /* \_SB_.PCI0.MEMR.BAR3 */
                        ML03 = 0x00100000
                    }

                    Return (MEM1) /* \_SB_.PCI0.MEMR.MEM1 */
                }
            }

            Mutex (NAPM, 0x00)
            Method (NAPE, 0, NotSerialized)
            {
                Acquire (NAPM, 0xFFFF)
                Local0 = (PCBA + 0xB8)
                OperationRegion (VARM, SystemMemory, Local0, 0x08)
                Field (VARM, DWordAcc, NoLock, Preserve)
                {
                    NAPX,   32, 
                    NAPD,   32
                }

                Local1 = NAPX /* \_SB_.PCI0.NAPE.NAPX */
                NAPX = 0x14300000
                Local0 = NAPD /* \_SB_.PCI0.NAPE.NAPD */
                Local0 &= 0xFFFFFFEF
                NAPD = Local0
                NAPX = Local1
                Release (NAPM)
            }

            Name (PR00, Package (0x0E)
            {
                Package (0x04)
                {
                    0x0001FFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    One, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    0x02, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    Zero, 
                    LNKE, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    One, 
                    LNKF, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    0x02, 
                    LNKG, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    0x03, 
                    LNKH, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0008FFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0008FFFF, 
                    One, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0008FFFF, 
                    0x02, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    One, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    0x02, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    0x03, 
                    LNKD, 
                    Zero
                }
            })
            Name (AR00, Package (0x0E)
            {
                Package (0x04)
                {
                    0x0001FFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    Zero, 
                    Zero, 
                    0x14
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    One, 
                    Zero, 
                    0x15
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    0x02, 
                    Zero, 
                    0x16
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    0x03, 
                    Zero, 
                    0x17
                }, 

                Package (0x04)
                {
                    0x0008FFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0008FFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0008FFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    0x03, 
                    Zero, 
                    0x13
                }
            })
            Name (NR00, Package (0x0E)
            {
                Package (0x04)
                {
                    0x0001FFFF, 
                    Zero, 
                    Zero, 
                    0x28
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    One, 
                    Zero, 
                    0x29
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    0x02, 
                    Zero, 
                    0x2A
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    Zero, 
                    Zero, 
                    0x24
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    One, 
                    Zero, 
                    0x25
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    0x02, 
                    Zero, 
                    0x26
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    0x03, 
                    Zero, 
                    0x27
                }, 

                Package (0x04)
                {
                    0x0008FFFF, 
                    Zero, 
                    Zero, 
                    0x20
                }, 

                Package (0x04)
                {
                    0x0008FFFF, 
                    One, 
                    Zero, 
                    0x21
                }, 

                Package (0x04)
                {
                    0x0008FFFF, 
                    One, 
                    Zero, 
                    0x22
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    0x03, 
                    Zero, 
                    0x13
                }
            })
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    If (NAPC)
                    {
                        Return (NR00) /* \_SB_.PCI0.NR00 */
                    }
                    Else
                    {
                        Return (AR00) /* \_SB_.PCI0.AR00 */
                    }
                }
                Else
                {
                    Return (PR00) /* \_SB_.PCI0.PR00 */
                }
            }

            Device (GPP0)
            {
                Name (_ADR, 0x00010001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    If ((WKPM == One))
                    {
                        Return (GPRW (0x08, 0x04))
                    }
                    Else
                    {
                        Return (GPRW (0x08, Zero))
                    }
                }

                Name (PR01, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKD, 
                        Zero
                    }
                })
                Name (AR01, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x13
                    }
                })
                Name (NR01, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x18
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x19
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x1A
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x1B
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        If (NAPC)
                        {
                            Return (NR01) /* \_SB_.PCI0.GPP0.NR01 */
                        }
                        Else
                        {
                            Return (AR01) /* \_SB_.PCI0.GPP0.AR01 */
                        }
                    }
                    Else
                    {
                        Return (PR01) /* \_SB_.PCI0.GPP0.PR01 */
                    }
                }
            }

            Device (GPP1)
            {
                Name (_ADR, 0x00010002)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    If ((WKPM == One))
                    {
                        Return (GPRW (0x08, 0x04))
                    }
                    Else
                    {
                        Return (GPRW (0x08, Zero))
                    }
                }

                Name (PR02, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKE, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKF, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKG, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKH, 
                        Zero
                    }
                })
                Name (AR02, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x14
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x15
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x16
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x17
                    }
                })
                Name (NR02, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x1C
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x1D
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x1E
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x1F
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        If (NAPC)
                        {
                            Return (NR02) /* \_SB_.PCI0.GPP1.NR02 */
                        }
                        Else
                        {
                            Return (AR02) /* \_SB_.PCI0.GPP1.AR02 */
                        }
                    }
                    Else
                    {
                        Return (PR02) /* \_SB_.PCI0.GPP1.PR02 */
                    }
                }

                Device (DEV0)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (Zero)
                    }
                }

                Device (DEV1)
                {
                    Name (_ADR, One)  // _ADR: Address
                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (Zero)
                    }
                }
            }

            Device (GPP2)
            {
                Name (_ADR, 0x00010003)  // _ADR: Address
                Method (RHRW, 0, NotSerialized)
                {
                    If ((WKPM == One))
                    {
                        Return (GPRW (0x0D, 0x04))
                    }
                    Else
                    {
                        Return (GPRW (0x0D, Zero))
                    }
                }

                Name (PR03, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKD, 
                        Zero
                    }
                })
                Name (AR03, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x13
                    }
                })
                Name (NR03, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x20
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x21
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x22
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x23
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        If (NAPC)
                        {
                            Return (NR03) /* \_SB_.PCI0.GPP2.NR03 */
                        }
                        Else
                        {
                            Return (AR03) /* \_SB_.PCI0.GPP2.AR03 */
                        }
                    }
                    Else
                    {
                        Return (PR03) /* \_SB_.PCI0.GPP2.PR03 */
                    }
                }
            }

            Device (GPP3)
            {
                Name (_ADR, 0x00020001)  // _ADR: Address
                Method (RHRW, 0, NotSerialized)
                {
                    If ((WKPM == One))
                    {
                        Return (GPRW (0x0F, 0x04))
                    }
                    Else
                    {
                        Return (GPRW (0x0F, Zero))
                    }
                }

                Name (PR04, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKE, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKF, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKG, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKH, 
                        Zero
                    }
                })
                Name (AR04, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x14
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x15
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x16
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x17
                    }
                })
                Name (NR04, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x24
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x25
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x26
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x27
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        If (NAPC)
                        {
                            Return (NR04) /* \_SB_.PCI0.GPP3.NR04 */
                        }
                        Else
                        {
                            Return (AR04) /* \_SB_.PCI0.GPP3.AR04 */
                        }
                    }
                    Else
                    {
                        Return (PR04) /* \_SB_.PCI0.GPP3.PR04 */
                    }
                }
            }

            Device (GPP6)
            {
                Name (_ADR, 0x00020004)  // _ADR: Address
                Name (PR07, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKD, 
                        Zero
                    }
                })
                Name (AR07, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x13
                    }
                })
                Name (NR07, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x30
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x31
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x32
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x33
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        If (NAPC)
                        {
                            Return (NR07) /* \_SB_.PCI0.GPP6.NR07 */
                        }
                        Else
                        {
                            Return (AR07) /* \_SB_.PCI0.GPP6.AR07 */
                        }
                    }
                    Else
                    {
                        Return (PR07) /* \_SB_.PCI0.GPP6.PR07 */
                    }
                }
            }

            Device (GP17)
            {
                Name (_ADR, 0x00080001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    If ((WKPM == One))
                    {
                        Return (GPRW (0x19, 0x03))
                    }
                    Else
                    {
                        Return (GPRW (0x19, Zero))
                    }
                }

                Name (PR17, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKG, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKH, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKE, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKF, 
                        Zero
                    }
                })
                Name (AR17, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x16
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x17
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x14
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x15
                    }
                })
                Name (NR17, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x26
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x27
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x24
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x25
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        If (NAPC)
                        {
                            Return (NR17) /* \_SB_.PCI0.GP17.NR17 */
                        }
                        Else
                        {
                            Return (AR17) /* \_SB_.PCI0.GP17.AR17 */
                        }
                    }
                    Else
                    {
                        Return (PR17) /* \_SB_.PCI0.GP17.PR17 */
                    }
                }

                Device (VGA)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0F)
                    }

                    Name (DOSA, Zero)
                    Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
                    {
                        DOSA = Arg0
                    }

                    Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
                    {
                        Return (Package (0x07)
                        {
                            0x00010110, 
                            0x00010210, 
                            0x00010220, 
                            0x00010230, 
                            0x00010240, 
                            0x00031000, 
                            0x00032000
                        })
                    }

                    Device (LCD)
                    {
                        Name (_ADR, 0x0110)  // _ADR: Address
                        Name (BCLB, Package (0x34)
                        {
                            0x5A, 
                            0x3C, 
                            0x02, 
                            0x04, 
                            0x06, 
                            0x08, 
                            0x0A, 
                            0x0C, 
                            0x0E, 
                            0x10, 
                            0x12, 
                            0x14, 
                            0x16, 
                            0x18, 
                            0x1A, 
                            0x1C, 
                            0x1E, 
                            0x20, 
                            0x22, 
                            0x24, 
                            0x26, 
                            0x28, 
                            0x2A, 
                            0x2C, 
                            0x2E, 
                            0x30, 
                            0x32, 
                            0x34, 
                            0x36, 
                            0x38, 
                            0x3A, 
                            0x3C, 
                            0x3E, 
                            0x40, 
                            0x42, 
                            0x44, 
                            0x46, 
                            0x48, 
                            0x4A, 
                            0x4C, 
                            0x4E, 
                            0x50, 
                            0x52, 
                            0x54, 
                            0x56, 
                            0x58, 
                            0x5A, 
                            0x5C, 
                            0x5E, 
                            0x60, 
                            0x62, 
                            0x64
                        })
                        Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
                        {
                            Return (BCLB) /* \_SB_.PCI0.GP17.VGA_.LCD_.BCLB */
                        }

                        Method (_BCM, 1, NotSerialized)  // _BCM: Brightness Control Method
                        {
                            Divide ((Arg0 * 0xFF), 0x64, Local1, Local0)
                            AFN7 (Local0)
                            BRTL = Arg0
                        }
                    }
                }

                Device (PSP)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                }

                Device (ACP)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_WOV, 0, NotSerialized)
                    {
                        Return (WOVS) /* \WOVS */
                    }
                }

                Device (AZAL)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                }

                Device (HDAU)
                {
                    Name (_ADR, One)  // _ADR: Address
                }

                Device (XHC0)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Device (RHUB)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Device (PRT1)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Name (UPC1, Package (0x04)
                            {
                                0xFF, 
                                0x09, 
                                Zero, 
                                Zero
                            })
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (UPC1) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT1.UPC1 */
                            }

                            Name (PLD1, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x01, 0xC6, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00,  // ..r.....
                                    /* 0008 */  0x71, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // q.......
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (PLD1) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT1.PLD1 */
                            }
                        }

                        Device (PRT2)
                        {
                            Name (_ADR, 0x02)  // _ADR: Address
                            Name (UPC1, Package (0x04)
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (UPC1) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT2.UPC1 */
                            }

                            Name (PLD1, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x01, 0xC6, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00,  // ..r.....
                                    /* 0008 */  0x69, 0x0C, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00,  // i.......
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (PLD1) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT2.PLD1 */
                            }
                        }

                        Device (PRT3)
                        {
                            Name (_ADR, 0x03)  // _ADR: Address
                            Name (UPC1, Package (0x04)
                            {
                                0xFF, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (UPC1) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT3.UPC1 */
                            }

                            Name (PLD1, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x20, 0x01, 0x80, 0x02, 0x00, 0x00, 0x00, 0x00,  //  .......
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (PLD1) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT3.PLD1 */
                            }

                            Device (WCAM)
                            {
                                Name (_ADR, 0x03)  // _ADR: Address
                                Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                                {
                                    Name (UPC1, Package (0x04)
                                    {
                                        0xFF, 
                                        0xFF, 
                                        Zero, 
                                        Zero
                                    })
                                    Return (UPC1) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT3.WCAM._UPC.UPC1 */
                                }

                                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                                {
                                    Name (PLD1, Package (0x01)
                                    {
                                        Buffer (0x14)
                                        {
                                            /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x25, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // %.......
                                            /* 0010 */  0xC8, 0x00, 0xA0, 0x00                           // ....
                                        }
                                    })
                                    Return (PLD1) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT3.WCAM._PLD.PLD1 */
                                }
                            }
                        }

                        Device (PRT4)
                        {
                            Name (_ADR, 0x04)  // _ADR: Address
                            Name (UPC1, Package (0x04)
                            {
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero
                            })
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (UPC1) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT4.UPC1 */
                            }

                            Name (PLD1, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (PLD1) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT4.PLD1 */
                            }
                        }

                        Device (PRT5)
                        {
                            Name (_ADR, 0x05)  // _ADR: Address
                            Name (UPC1, Package (0x04)
                            {
                                0xFF, 
                                0x09, 
                                Zero, 
                                Zero
                            })
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (UPC1) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT5.UPC1 */
                            }

                            Name (PLD1, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x01, 0xC6, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00,  // ..r.....
                                    /* 0008 */  0x71, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // q.......
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (PLD1) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT5.PLD1 */
                            }
                        }

                        Device (PRT6)
                        {
                            Name (_ADR, 0x06)  // _ADR: Address
                            Name (UPC1, Package (0x04)
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (UPC1) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT6.UPC1 */
                            }

                            Name (PLD1, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x01, 0xC6, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00,  // ..r.....
                                    /* 0008 */  0x69, 0x0C, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00,  // i.......
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (PLD1) /* \_SB_.PCI0.GP17.XHC0.RHUB.PRT6.PLD1 */
                            }
                        }
                    }
                }

                Method (TPLD, 2, Serialized)
                {
                    Name (PCKG, Package (0x01)
                    {
                        Buffer (0x14) {}
                    })
                    CreateField (DerefOf (PCKG [Zero]), Zero, 0x07, REV)
                    REV = One
                    CreateField (DerefOf (PCKG [Zero]), 0x40, One, VISI)
                    VISI = Arg0
                    CreateField (DerefOf (PCKG [Zero]), 0x57, 0x08, GPOS)
                    GPOS = Arg1
                    CreateField (DerefOf (PCKG [Zero]), 0x4A, 0x04, SHAP)
                    SHAP = One
                    CreateField (DerefOf (PCKG [Zero]), 0x20, 0x10, WID)
                    WID = 0x08
                    CreateField (DerefOf (PCKG [Zero]), 0x30, 0x10, HGT)
                    HGT = 0x03
                    Return (PCKG) /* \_SB_.PCI0.GP17.TPLD.PCKG */
                }

                Method (TUPC, 2, Serialized)
                {
                    Name (PCKG, Package (0x04)
                    {
                        One, 
                        Zero, 
                        Zero, 
                        Zero
                    })
                    PCKG [Zero] = Arg0
                    PCKG [One] = Arg1
                    Return (PCKG) /* \_SB_.PCI0.GP17.TUPC.PCKG */
                }

                Device (XHC1)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Device (RHUB)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Device (PRT1)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Name (UPC1, Package (0x04)
                            {
                                0xFF, 
                                0x09, 
                                Zero, 
                                Zero
                            })
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (UPC1) /* \_SB_.PCI0.GP17.XHC1.RHUB.PRT1.UPC1 */
                            }

                            Name (PLD1, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0xC6, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00,  // ..r.....
                                    /* 0008 */  0x71, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // q.......
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (PLD1) /* \_SB_.PCI0.GP17.XHC1.RHUB.PRT1.PLD1 */
                            }
                        }

                        Device (PRT2)
                        {
                            Name (_ADR, 0x02)  // _ADR: Address
                            Name (UPC1, Package (0x04)
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (UPC1) /* \_SB_.PCI0.GP17.XHC1.RHUB.PRT2.UPC1 */
                            }

                            Name (PLD1, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x01, 0xC6, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00,  // ..r.....
                                    /* 0008 */  0x69, 0x0C, 0x80, 0x02, 0x00, 0x00, 0x00, 0x00,  // i.......
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (PLD1) /* \_SB_.PCI0.GP17.XHC1.RHUB.PRT2.PLD1 */
                            }
                        }

                        Device (PRT3)
                        {
                            Name (_ADR, 0x03)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (TUPC (Zero, 0xFF))
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                Return (TPLD (Zero, Zero))
                            }
                        }

                        Device (PRT4)
                        {
                            Name (_ADR, 0x04)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x1,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x0,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "BACK",
                                    PLD_VerticalPosition   = "CENTER",
                                    PLD_HorizontalPosition = "LEFT",
                                    PLD_Shape              = "VERTICALRECTANGLE",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x0,
                                    PLD_GroupPosition      = 0xA,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x0,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (PRT5)
                        {
                            Name (_ADR, 0x05)  // _ADR: Address
                            Name (UPC1, Package (0x04)
                            {
                                0xFF, 
                                0x09, 
                                Zero, 
                                Zero
                            })
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (UPC1) /* \_SB_.PCI0.GP17.XHC1.RHUB.PRT5.UPC1 */
                            }

                            Name (PLD1, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0xC6, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00,  // ..r.....
                                    /* 0008 */  0x71, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // q.......
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (PLD1) /* \_SB_.PCI0.GP17.XHC1.RHUB.PRT5.PLD1 */
                            }
                        }

                        Device (PRT6)
                        {
                            Name (_ADR, 0x06)  // _ADR: Address
                            Name (UPC1, Package (0x04)
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Return (UPC1) /* \_SB_.PCI0.GP17.XHC1.RHUB.PRT6.UPC1 */
                            }

                            Name (PLD1, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x01, 0xC6, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00,  // ..r.....
                                    /* 0008 */  0x69, 0x0C, 0x80, 0x02, 0x00, 0x00, 0x00, 0x00,  // i.......
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Return (PLD1) /* \_SB_.PCI0.GP17.XHC1.RHUB.PRT6.PLD1 */
                            }
                        }
                    }
                }

                Device (MP2C)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                }
            }

            Device (GP18)
            {
                Name (_ADR, 0x00080002)  // _ADR: Address
                Name (PR18, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKD, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKB, 
                        Zero
                    }
                })
                Name (AR18, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x13
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x11
                    }
                })
                Name (NR18, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x22
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x23
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x20
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x21
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        If (NAPC)
                        {
                            Return (NR18) /* \_SB_.PCI0.GP18.NR18 */
                        }
                        Else
                        {
                            Return (AR18) /* \_SB_.PCI0.GP18.AR18 */
                        }
                    }
                    Else
                    {
                        Return (PR18) /* \_SB_.PCI0.GP18.PR18 */
                    }
                }

                Device (SATA)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                }

                Device (SAT1)
                {
                    Name (_ADR, One)  // _ADR: Address
                }
            }

            Device (GP19)
            {
                Name (_ADR, 0x00080003)  // _ADR: Address
                Method (RHRW, 0, NotSerialized)
                {
                    If ((WKPM == One))
                    {
                        Return (GPRW (0x08, 0x04))
                    }
                    Else
                    {
                        Return (GPRW (0x08, Zero))
                    }
                }

                Name (PR19, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKG, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKH, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKE, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKF, 
                        Zero
                    }
                })
                Name (AR19, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x16
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x17
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x14
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x15
                    }
                })
                Name (NR19, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x1E
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x1F
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x1C
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x1D
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        If (NAPC)
                        {
                            Return (NR19) /* \_SB_.PCI0.GP19.NR19 */
                        }
                        Else
                        {
                            Return (AR19) /* \_SB_.PCI0.GP19.AR19 */
                        }
                    }
                    Else
                    {
                        Return (PR19) /* \_SB_.PCI0.GP19.PR19 */
                    }
                }
            }

            Device (HPET)
            {
                Name (_HID, EisaId ("PNP0103") /* HPET System Timer */)  // _HID: Hardware ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((HPEN == One))
                    {
                        If ((OSTB >= 0x40))
                        {
                            Return (0x0F)
                        }

                        HPEN = Zero
                        Return (One)
                    }

                    Return (One)
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (BUF0, ResourceTemplate ()
                    {
                        IRQNoFlags ()
                            {0}
                        IRQNoFlags ()
                            {8}
                        Memory32Fixed (ReadOnly,
                            0xFED00000,         // Address Base
                            0x00000400,         // Address Length
                            _Y07)
                    })
                    CreateDWordField (BUF0, \_SB.PCI0.HPET._CRS._Y07._BAS, HPEB)  // _BAS: Base Address
                    Local0 = 0xFED00000
                    HPEB = (Local0 & 0xFFFFFC00)
                    Return (BUF0) /* \_SB_.PCI0.HPET._CRS.BUF0 */
                }
            }

            Device (SMBS)
            {
                Name (_ADR, 0x00140000)  // _ADR: Address
            }

            Device (LPC0)
            {
                Name (_ADR, 0x00140003)  // _ADR: Address
                Device (DMAC)
                {
                    Name (_HID, EisaId ("PNP0200") /* PC-class DMA Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0081,             // Range Minimum
                            0x0081,             // Range Maximum
                            0x01,               // Alignment
                            0x0F,               // Length
                            )
                        IO (Decode16,
                            0x00C0,             // Range Minimum
                            0x00C0,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                        DMA (Compatibility, NotBusMaster, Transfer8_16, )
                            {4}
                    })
                }

                Device (COPR)
                {
                    Name (_HID, EisaId ("PNP0C04") /* x87-compatible Floating Point Processing Unit */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x00F0,             // Range Minimum
                            0x00F0,             // Range Maximum
                            0x01,               // Alignment
                            0x0F,               // Length
                            )
                        IRQNoFlags ()
                            {13}
                    })
                }

                Device (PIC)
                {
                    Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0020,             // Range Minimum
                            0x0020,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A0,             // Range Minimum
                            0x00A0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {2}
                    })
                }

                Device (RTC)
                {
                    Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
                    Name (BUF0, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                    })
                    Name (BUF1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {8}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        If ((HPEN == One))
                        {
                            Return (BUF0) /* \_SB_.PCI0.LPC0.RTC_.BUF0 */
                        }

                        Return (BUF1) /* \_SB_.PCI0.LPC0.RTC_.BUF1 */
                    }
                }

                Device (SPKR)
                {
                    Name (_HID, EisaId ("PNP0800") /* Microsoft Sound System Compatible Device */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0061,             // Range Minimum
                            0x0061,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                    })
                }

                Device (TMR)
                {
                    Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
                    Name (BUF0, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                    })
                    Name (BUF1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {0}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        If ((HPEN == One))
                        {
                            Return (BUF0) /* \_SB_.PCI0.LPC0.TMR_.BUF0 */
                        }

                        Return (BUF1) /* \_SB_.PCI0.LPC0.TMR_.BUF1 */
                    }
                }

                Device (KBC0)
                {
                    Name (_HID, EisaId ("FUJ7401"))  // _HID: Hardware ID
                    Name (_CID, EisaId ("PNP0303") /* IBM Enhanced Keyboard (101/102-key, PS/2 Mouse) */)  // _CID: Compatible ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {1}
                    })
                }

                Device (SYSR)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, One)  // _UID: Unique ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0010,             // Range Minimum
                            0x0010,             // Range Maximum
                            0x01,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0072,             // Range Minimum
                            0x0072,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0080,             // Range Minimum
                            0x0080,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00B0,             // Range Minimum
                            0x00B0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0092,             // Range Minimum
                            0x0092,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0400,             // Range Minimum
                            0x0400,             // Range Maximum
                            0x01,               // Alignment
                            0xD0,               // Length
                            )
                        IO (Decode16,
                            0x04D0,             // Range Minimum
                            0x04D0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x04D6,             // Range Minimum
                            0x04D6,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0C00,             // Range Minimum
                            0x0C00,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0C14,             // Range Minimum
                            0x0C14,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0C50,             // Range Minimum
                            0x0C50,             // Range Maximum
                            0x01,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0C6C,             // Range Minimum
                            0x0C6C,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0C6F,             // Range Minimum
                            0x0C6F,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0CD0,             // Range Minimum
                            0x0CD0,             // Range Maximum
                            0x01,               // Alignment
                            0x0C,               // Length
                            )
                    })
                }

                Device (MEM)
                {
                    Name (_HID, EisaId ("PNP0C01") /* System Board */)  // _HID: Hardware ID
                    Name (MSRC, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0xFFF00000,         // Address Base
                            0x00100000,         // Address Length
                            _Y08)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (MSRC, \_SB.PCI0.LPC0.MEM._Y08._LEN, PSIZ)  // _LEN: Length
                        CreateDWordField (MSRC, \_SB.PCI0.LPC0.MEM._Y08._BAS, PBAS)  // _BAS: Base Address
                        PSIZ = ROMS /* \ROMS */
                        Local0 = (ROMS - One)
                        PBAS = (Ones - Local0)
                        Return (MSRC) /* \_SB_.PCI0.LPC0.MEM_.MSRC */
                    }
                }

                Device (UAR3)
                {
                    Name (_HID, EisaId ("PNP0501") /* 16550A-compatible COM Serial Port */)  // _HID: Hardware ID
                    Name (_UID, 0x03)  // _UID: Unique ID
                    Name (SIDP, 0x164E)
                    OperationRegion (SMSC, SystemIO, SIDP, 0x02)
                    Field (SMSC, ByteAcc, NoLock, Preserve)
                    {
                        INDX,   8, 
                        DATA,   8
                    }

                    IndexField (INDX, DATA, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x02), 
                        CR02,   8, 
                        Offset (0x0C), 
                        CR0C,   8, 
                        CR0D,   8, 
                        Offset (0x25), 
                        CR25,   8, 
                        Offset (0x28), 
                        CR28,   8
                    }

                    Method (ENCG, 0, NotSerialized)
                    {
                        INDX = 0x55
                    }

                    Method (EXCG, 0, NotSerialized)
                    {
                        INDX = 0xAA
                    }

                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((SDMO == One))
                        {
                            Local1 = Zero
                        }
                        Else
                        {
                            ENCG ()
                            Local0 = CR0D /* \_SB_.PCI0.LPC0.UAR3.CR0D */
                            If ((Local0 == 0x82))
                            {
                                Local1 = 0x0F
                            }
                            Else
                            {
                                Local1 = Zero
                            }

                            EXCG ()
                        }

                        Return (Local1)
                    }

                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        Name (BUF0, ResourceTemplate ()
                        {
                            IO (Decode16,
                                0x03F8,             // Range Minimum
                                0x03F8,             // Range Maximum
                                0x08,               // Alignment
                                0x08,               // Length
                                _Y09)
                            IRQNoFlags (_Y0A)
                                {4}
                        })
                        CreateByteField (BUF0, \_SB.PCI0.LPC0.UAR3._CRS._Y09._MIN, IOL0)  // _MIN: Minimum Base Address
                        CreateByteField (BUF0, 0x03, IOH0)
                        CreateByteField (BUF0, \_SB.PCI0.LPC0.UAR3._CRS._Y09._MAX, IOL1)  // _MAX: Maximum Base Address
                        CreateByteField (BUF0, 0x05, IOH1)
                        CreateByteField (BUF0, \_SB.PCI0.LPC0.UAR3._CRS._Y09._LEN, LEN0)  // _LEN: Length
                        CreateWordField (BUF0, \_SB.PCI0.LPC0.UAR3._CRS._Y0A._INT, IRQW)  // _INT: Interrupts
                        ENCG ()
                        IOL0 = (CR25 << 0x02)
                        IOL1 = (CR25 << 0x02)
                        IOH0 = (CR25 >> 0x06)
                        IOH1 = (CR25 >> 0x06)
                        LEN0 = 0x08
                        IRQW = (One << (CR28 & 0x0F))
                        EXCG ()
                        Return (BUF0) /* \_SB_.PCI0.LPC0.UAR3._CRS.BUF0 */
                    }
                }

                Mutex (PSMX, 0x00)
            }

            Scope (GPP3)
            {
                PowerResource (P0NV, 0x00, 0x0000)
                {
                    Name (D0NV, One)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        TPST (0x60AA)
                        Return (D0NV) /* \_SB_.PCI0.GPP3.P0NV.D0NV */
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        TPST (0x60D0)
                        If (SI3R)
                        {
                            TPST (0x60E0)
                            M020 (NBRI, Zero, Zero, 0x04, (NCMD | 0x06))
                            M020 (NBRI, Zero, Zero, 0x10, NBAR)
                            APMC = 0xE3
                            SI3R = Zero
                            TPST (0x60E1)
                        }

                        D0NV = One
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        TPST (0x60D3)
                        0x18 = M019 (Zero, 0x02, One)
                        Local0
                        NBRI = ((Local0 & 0xFF00) >> 0x08)
                        0x04 = M019 (NBRI, Zero, Zero)
                        NCMD
                        0x10 = M019 (NBRI, Zero, Zero)
                        NBAR
                        D0NV = Zero
                    }
                }

                Device (NVME)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                    Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                    {
                        P0NV
                    })
                    Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
                    {
                        P0NV
                    })
                    Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                    {
                        P0NV
                    })
                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                        TPST (0x6050)
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                        TPST (0x6053)
                    }

                    Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                    {
                        ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0") /* Unknown UUID */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "StorageD3Enable", 
                                One
                            }
                        }
                    })
                }
            }

            Scope (\_SB)
            {
            }

            Scope (GPP6)
            {
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (RBUF, ResourceTemplate ()
                    {
                        GpioInt (Edge, ActiveLow, ExclusiveAndWake, PullNone, 0x0000,
                            "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0012
                            }
                        GpioInt (Edge, ActiveHigh, SharedAndWake, PullNone, 0x0000,
                            "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x00AC
                            }
                    })
                    Return (RBUF) /* \_SB_.PCI0.GPP6._CRS.RBUF */
                }

                Device (WLAN)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                    Method (RWRD, 0, Serialized)
                    {
                        Name (RWRY, Package (0x2C)
                        {
                            0x52, 
                            0x54, 
                            One, 
                            0x02, 
                            0x70, 
                            0x64, 
                            0x64, 
                            0x64, 
                            0x64, 
                            0x70, 
                            0x64, 
                            0x64, 
                            0x64, 
                            0x64, 
                            0x70, 
                            0x64, 
                            0x64, 
                            0x64, 
                            0x64, 
                            0x70, 
                            0x64, 
                            0x64, 
                            0x64, 
                            0x64, 
                            0xB0, 
                            0xB0, 
                            0xB0, 
                            0xB0, 
                            0xB0, 
                            0xB0, 
                            0xB0, 
                            0xB0, 
                            0xB0, 
                            0xB0, 
                            0xB0, 
                            0xB0, 
                            0xB0, 
                            0xB0, 
                            0xB0, 
                            0xB0, 
                            0xB0, 
                            0xB0, 
                            0xB0, 
                            0xB0
                        })
                        Return (RWRY) /* \_SB_.PCI0.GPP6.WLAN.RWRD.RWRY */
                    }

                    Method (RWSI, 0, Serialized)
                    {
                        Name (RWS1, Package (0x04)
                        {
                            One, 
                            One, 
                            One, 
                            One
                        })
                        Name (RWS2, Package (0x04)
                        {
                            0x02, 
                            0x02, 
                            0x02, 
                            0x02
                        })
                        If (^^^LPC0.EC0.PSTG)
                        {
                            Return (RWS1) /* \_SB_.PCI0.GPP6.WLAN.RWSI.RWS1 */
                        }
                        Else
                        {
                            Return (RWS2) /* \_SB_.PCI0.GPP6.WLAN.RWSI.RWS2 */
                        }
                    }

                    Method (MTDS, 0, Serialized)
                    {
                        Name (MTDS, Package (0x12)
                        {
                            0x4D, 
                            0x54, 
                            0x44, 
                            0x53, 
                            One, 
                            0x02, 
                            One, 
                            0x1C, 
                            0x19, 
                            0x19, 
                            0x19, 
                            0x19, 
                            0x02, 
                            0x2C, 
                            0x2C, 
                            0x2C, 
                            0x2C, 
                            0x2C
                        })
                        Return (MTDS) /* \_SB_.PCI0.GPP6.WLAN.MTDS.MTDS */
                    }
                }
            }
        }

        OperationRegion (PIRQ, SystemIO, 0x0C00, 0x02)
        Field (PIRQ, ByteAcc, NoLock, Preserve)
        {
            PIDX,   8, 
            PDAT,   8
        }

        IndexField (PIDX, PDAT, ByteAcc, NoLock, Preserve)
        {
            PIRA,   8, 
            PIRB,   8, 
            PIRC,   8, 
            PIRD,   8, 
            PIRE,   8, 
            PIRF,   8, 
            PIRG,   8, 
            PIRH,   8, 
            Offset (0x0C), 
            SIRA,   8, 
            SIRB,   8, 
            SIRC,   8, 
            SIRD,   8, 
            PIRS,   8, 
            Offset (0x13), 
            HDAD,   8, 
            Offset (0x17), 
            SDCL,   8, 
            Offset (0x1A), 
            SDIO,   8, 
            Offset (0x30), 
            USB1,   8, 
            Offset (0x34), 
            USB3,   8, 
            Offset (0x41), 
            SATA,   8, 
            Offset (0x62), 
            GIOC,   8, 
            Offset (0x70), 
            I2C0,   8, 
            I2C1,   8, 
            I2C2,   8, 
            I2C3,   8, 
            URT0,   8, 
            URT1,   8
        }

        Method (DSPI, 0, NotSerialized)
        {
            INTA (0x1F)
            INTB (0x1F)
            INTC (0x1F)
            INTD (0x1F)
            PIRE = 0x1F
            PIRF = 0x1F
            PIRG = 0x1F
            PIRH = 0x1F
        }

        Method (INTA, 1, NotSerialized)
        {
            PIRA = Arg0
            If (PICM)
            {
                HDAD = Arg0
                SDCL = Arg0
            }
        }

        Method (INTB, 1, NotSerialized)
        {
            PIRB = Arg0
        }

        Method (INTC, 1, NotSerialized)
        {
            PIRC = Arg0
            If (PICM)
            {
                USB1 = Arg0
                USB3 = Arg0
            }
        }

        Method (INTD, 1, NotSerialized)
        {
            PIRD = Arg0
            If (PICM)
            {
                SATA = Arg0
            }
        }

        Name (PRS1, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {3,5,6,10,11}
        })
        Name (BUFA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {15}
        })
        Device (LNKA)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((PIRA && (PIRA != 0x1F)))
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRS1) /* \_SB_.PRS1 */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTA (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRA) /* \_SB_.PIRA */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRA = Local0
            }
        }

        Device (LNKB)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((PIRB && (PIRB != 0x1F)))
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRS1) /* \_SB_.PRS1 */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTB (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRB) /* \_SB_.PIRB */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRB = Local0
            }
        }

        Device (LNKC)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((PIRC && (PIRC != 0x1F)))
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRS1) /* \_SB_.PRS1 */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTC (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRC) /* \_SB_.PIRC */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRC = Local0
            }
        }

        Device (LNKD)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((PIRD && (PIRD != 0x1F)))
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRS1) /* \_SB_.PRS1 */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTD (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRD) /* \_SB_.PIRD */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRD = Local0
            }
        }

        Device (LNKE)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x05)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((PIRE && (PIRE != 0x1F)))
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRS1) /* \_SB_.PRS1 */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRE = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRE) /* \_SB_.PIRE */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRE = Local0
            }
        }

        Device (LNKF)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x06)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((PIRF && (PIRF != 0x1F)))
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRS1) /* \_SB_.PRS1 */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRF = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRF) /* \_SB_.PIRF */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRF = Local0
            }
        }

        Device (LNKG)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x07)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((PIRG && (PIRG != 0x1F)))
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRS1) /* \_SB_.PRS1 */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRG = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRG) /* \_SB_.PIRG */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRG = Local0
            }
        }

        Device (LNKH)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x08)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((PIRH && (PIRH != 0x1F)))
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRS1) /* \_SB_.PRS1 */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRH = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRH) /* \_SB_.PIRH */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRH = Local0
            }
        }

        Method (GSMI, 1, NotSerialized)
        {
            APMD = Arg0
            APMC = 0xE4
            Sleep (0x02)
        }

        Method (S80H, 1, NotSerialized)
        {
            P80H = Arg0
        }

        Method (BSMI, 1, NotSerialized)
        {
            APMD = Arg0
            APMC = 0xBE
            Sleep (One)
        }

        Device (LID)
        {
            Name (_HID, EisaId ("PNP0C0D") /* Lid Device */)  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }

            Method (_LID, 0, NotSerialized)  // _LID: Lid Status
            {
                If (^^PCI0.LPC0.EC0.LIDF)
                {
                    Return (Zero)
                }

                Return (One)
            }
        }
    }

    Name (TSOS, 0x75)
    If (CondRefOf (\_OSI))
    {
        If (_OSI ("Windows 2009"))
        {
            TSOS = 0x50
        }

        If (_OSI ("Windows 2015"))
        {
            TSOS = 0x70
        }
    }

    Scope (_SB)
    {
        OperationRegion (SMIC, SystemMemory, 0xFED80000, 0x00800000)
        Field (SMIC, ByteAcc, NoLock, Preserve)
        {
            Offset (0x36A), 
            SMIB,   8
        }

        OperationRegion (SSMI, SystemIO, SMIB, 0x02)
        Field (SSMI, AnyAcc, NoLock, Preserve)
        {
            SMIW,   16
        }

        OperationRegion (ECMC, SystemIO, 0x72, 0x02)
        Field (ECMC, AnyAcc, NoLock, Preserve)
        {
            ECMI,   8, 
            ECMD,   8
        }

        IndexField (ECMI, ECMD, ByteAcc, NoLock, Preserve)
        {
            Offset (0x08), 
            FRTB,   32
        }

        OperationRegion (FRTP, SystemMemory, FRTB, 0x0100)
        Field (FRTP, AnyAcc, NoLock, Preserve)
        {
            PEBA,   32, 
                ,   5, 
            IC0E,   1, 
            IC1E,   1, 
            IC2E,   1, 
            IC3E,   1, 
            IC4E,   1, 
            IC5E,   1, 
            UT0E,   1, 
            UT1E,   1, 
                ,   1, 
                ,   1, 
            ST_E,   1, 
            UT2E,   1, 
                ,   1, 
            EMMD,   2, 
                ,   3, 
            XHCE,   1, 
                ,   1, 
                ,   1, 
            UT3E,   1, 
            ESPI,   1, 
            EMME,   1, 
            HFPE,   1, 
            Offset (0x08), 
            PCEF,   1, 
                ,   4, 
            IC0D,   1, 
            IC1D,   1, 
            IC2D,   1, 
            IC3D,   1, 
            IC4D,   1, 
            IC5D,   1, 
            UT0D,   1, 
            UT1D,   1, 
                ,   1, 
                ,   1, 
            ST_D,   1, 
            UT2D,   1, 
                ,   1, 
            EHCD,   1, 
                ,   4, 
            XHCD,   1, 
            SD_D,   1, 
                ,   1, 
            UT3D,   1, 
                ,   1, 
            EMD3,   1, 
                ,   2, 
            S03D,   1, 
            FW00,   16, 
            FW01,   32, 
            FW02,   16, 
            FW03,   32, 
            SDS0,   8, 
            SDS1,   8, 
            CZFG,   1, 
            Offset (0x20), 
            SD10,   32, 
            EH10,   32, 
            XH10,   32, 
            STBA,   32
        }

        OperationRegion (FCFG, SystemMemory, PEBA, 0x01000000)
        Field (FCFG, DWordAcc, NoLock, Preserve)
        {
            Offset (0xA3044), 
            IPDE,   32, 
            IMPE,   32, 
            Offset (0xA3078), 
                ,   2, 
            LDQ0,   1, 
            Offset (0xA30CB), 
                ,   7, 
            AUSS,   1
        }

        OperationRegion (IOMX, SystemMemory, 0xFED80D00, 0x0100)
        Field (IOMX, AnyAcc, NoLock, Preserve)
        {
            Offset (0x15), 
            IM15,   8, 
            IM16,   8, 
            Offset (0x1F), 
            IM1F,   8, 
            IM20,   8, 
            Offset (0x44), 
            IM44,   8, 
            Offset (0x46), 
            IM46,   8, 
            Offset (0x4A), 
            IM4A,   8, 
            IM4B,   8, 
            Offset (0x57), 
            IM57,   8, 
            IM58,   8, 
            Offset (0x68), 
            IM68,   8, 
            IM69,   8, 
            IM6A,   8, 
            IM6B,   8, 
            Offset (0x6D), 
            IM6D,   8
        }

        OperationRegion (FACR, SystemMemory, 0xFED81E00, 0x0100)
        Field (FACR, AnyAcc, NoLock, Preserve)
        {
            Offset (0x80), 
                ,   28, 
            RD28,   1, 
                ,   1, 
            RQTY,   1, 
            Offset (0x84), 
                ,   28, 
            SD28,   1, 
                ,   1, 
            Offset (0xA0), 
            PG1A,   1
        }

        OperationRegion (EMMX, SystemMemory, 0xFEDD5800, 0x0130)
        Field (EMMX, AnyAcc, NoLock, Preserve)
        {
            Offset (0xD0), 
                ,   17, 
            FC18,   1, 
            FC33,   1, 
                ,   7, 
            CD_T,   1, 
            WP_T,   1
        }

        OperationRegion (EMMB, SystemMemory, 0xFEDD5800, 0x0130)
        Field (EMMB, AnyAcc, NoLock, Preserve)
        {
            Offset (0xA4), 
            E0A4,   32, 
            E0A8,   32, 
            Offset (0xB0), 
            E0B0,   32, 
            Offset (0xD0), 
            E0D0,   32, 
            Offset (0x116), 
            E116,   32
        }

        Name (SVBF, Buffer (0x0100)
        {
             0x00                                             // .
        })
        CreateDWordField (SVBF, Zero, S0A4)
        CreateDWordField (SVBF, 0x04, S0A8)
        CreateDWordField (SVBF, 0x08, S0B0)
        CreateDWordField (SVBF, 0x0C, S0D0)
        CreateDWordField (SVBF, 0x10, S116)
        Method (SECR, 0, Serialized)
        {
            S116 = E116 /* \_SB_.E116 */
            RQTY = Zero
            RD28 = One
            Local0 = SD28 /* \_SB_.SD28 */
            While (Local0)
            {
                Local0 = SD28 /* \_SB_.SD28 */
            }
        }

        Method (RECR, 0, Serialized)
        {
            E116 = S116 /* \_SB_.S116 */
        }

        OperationRegion (LUIE, SystemMemory, 0xFEDC0020, 0x04)
        Field (LUIE, AnyAcc, NoLock, Preserve)
        {
            IER0,   1, 
            IER1,   1, 
            IER2,   1, 
            IER3,   1, 
            UOL0,   1, 
            UOL1,   1, 
            UOL2,   1, 
            UOL3,   1, 
            WUR0,   2, 
            WUR1,   2, 
            WUR2,   2, 
            WUR3,   2
        }

        Method (FRUI, 2, Serialized)
        {
            If ((Arg0 == Zero))
            {
                Arg1 = IUA0 /* \_SB_.IUA0 */
            }

            If ((Arg0 == One))
            {
                Arg1 = IUA1 /* \_SB_.IUA1 */
            }

            If ((Arg0 == 0x02))
            {
                Arg1 = IUA2 /* \_SB_.IUA2 */
            }

            If ((Arg0 == 0x03))
            {
                Arg1 = IUA3 /* \_SB_.IUA3 */
            }
        }

        Method (FUIO, 1, Serialized)
        {
            If ((IER0 == One))
            {
                If ((WUR0 == Arg0))
                {
                    Return (Zero)
                }
            }

            If ((IER1 == One))
            {
                If ((WUR1 == Arg0))
                {
                    Return (One)
                }
            }

            If ((IER2 == One))
            {
                If ((WUR2 == Arg0))
                {
                    Return (0x02)
                }
            }

            If ((IER3 == One))
            {
                If ((WUR3 == Arg0))
                {
                    Return (0x03)
                }
            }

            Return (0x0F)
        }

        Method (SRAD, 2, Serialized)
        {
            Local0 = (Arg0 << One)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            ADIS = One
            ADSR = Zero
            Stall (Arg1)
            ADSR = One
            ADIS = Zero
            Stall (Arg1)
        }

        Method (DSAD, 2, Serialized)
        {
            Local0 = (Arg0 << One)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            If ((Arg0 != ADTD))
            {
                If ((Arg1 == Zero))
                {
                    ADTD = Zero
                    ADPD = One
                    Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    While ((Local0 != 0x07))
                    {
                        Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    }
                }

                If ((Arg1 == 0x03))
                {
                    ADPD = Zero
                    Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    While ((Local0 != Zero))
                    {
                        Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    }

                    ADTD = 0x03
                }
            }
        }

        Method (HSAD, 2, Serialized)
        {
            Local3 = (One << Arg0)
            Local0 = (Arg0 << One)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            If ((Arg1 != ADTD))
            {
                If ((Arg1 == Zero))
                {
                    PG1A = One
                    ADTD = Zero
                    ADPD = One
                    Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    While ((Local0 != 0x07))
                    {
                        Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    }

                    RQTY = One
                    RD28 = One
                    Local0 = SD28 /* \_SB_.SD28 */
                    While (!Local0)
                    {
                        Local0 = SD28 /* \_SB_.SD28 */
                    }
                }

                If ((Arg1 == 0x03))
                {
                    RQTY = Zero
                    RD28 = One
                    Local0 = SD28 /* \_SB_.SD28 */
                    While (Local0)
                    {
                        Local0 = SD28 /* \_SB_.SD28 */
                    }

                    ADPD = Zero
                    Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    While ((Local0 != Zero))
                    {
                        Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    }

                    ADTD = 0x03
                    PG1A = Zero
                }
            }
        }

        OperationRegion (FPIC, SystemIO, 0x0C00, 0x02)
        Field (FPIC, AnyAcc, NoLock, Preserve)
        {
            FPII,   8, 
            FPID,   8
        }

        IndexField (FPII, FPID, ByteAcc, NoLock, Preserve)
        {
            Offset (0xF4), 
            IUA0,   8, 
            IUA1,   8, 
            Offset (0xF8), 
            IUA2,   8, 
            IUA3,   8
        }

        Device (HFP1)
        {
            Name (_HID, "AMDI0060")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (HFPE)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0xFEC11000,         // Address Base
                        0x00000100,         // Address Length
                        )
                })
                Return (RBUF) /* \_SB_.HFP1._CRS.RBUF */
            }
        }

        Device (GPIO)
        {
            Name (_HID, "AMDI0030")  // _HID: Hardware ID
            Name (_CID, "AMDI0030")  // _CID: Compatible ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
                    {
                        0x00000007,
                    }
                    Memory32Fixed (ReadWrite,
                        0xFED81500,         // Address Base
                        0x00000400,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFED81200,         // Address Base
                        0x00000100,         // Address Length
                        )
                })
                Return (RBUF) /* \_SB_.GPIO._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (FUR0)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {3}
                Memory32Fixed (ReadWrite,
                    0xFEDC9000,         // Address Base
                    0x00001000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xFEDC7000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT0E == One))
                    {
                        If ((FUIO (Zero) != 0x0F))
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (FUR1)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {4}
                Memory32Fixed (ReadWrite,
                    0xFEDCA000,         // Address Base
                    0x00001000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xFEDC8000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT1E == One))
                    {
                        If ((FUIO (One) != 0x0F))
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (FUR2)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {3}
                Memory32Fixed (ReadWrite,
                    0xFEDCE000,         // Address Base
                    0x00001000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xFEDCC000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT2E == One))
                    {
                        If ((FUIO (0x02) != 0x0F))
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (FUR3)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {4}
                Memory32Fixed (ReadWrite,
                    0xFEDCF000,         // Address Base
                    0x00001000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xFEDCD000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT3E == One))
                    {
                        If ((FUIO (0x03) != 0x0F))
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (I2CA)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {10}
                Memory32Fixed (ReadWrite,
                    0xFEDC2000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC0E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x05, 0xC8)
            }
        }

        Device (I2CB)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {11}
                Memory32Fixed (ReadWrite,
                    0xFEDC3000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC1E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x06, 0xC8)
            }
        }

        Device (I2CC)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {4}
                Memory32Fixed (ReadWrite,
                    0xFEDC4000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC2E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x07, 0xC8)
            }
        }

        Device (I2CD)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {6}
                Memory32Fixed (ReadWrite,
                    0xFEDC5000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC3E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x08, 0xC8)
            }
        }

        Device (I2CE)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {14}
                Memory32Fixed (ReadWrite,
                    0xFEDC6000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC4E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x09, 0xC8)
            }
        }

        Device (I2CF)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x05)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {15}
                Memory32Fixed (ReadWrite,
                    0xFEDCB000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC5E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x0A, 0xC8)
            }
        }

        Method (EPIN, 0, NotSerialized)
        {
            IPDE = Zero
            IMPE = Zero
            IM15 = One
            IM16 = One
            IM20 = One
            IM44 = One
            IM46 = One
            IM68 = One
            IM69 = One
            IM6A = One
            IM6B = One
            IM4A = One
            IM58 = One
            IM4B = One
            IM57 = One
            IM6D = One
            IM1F = One
            SECR ()
        }

        Name (NCRS, ResourceTemplate ()
        {
            Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
            {
                0x00000005,
            }
            Memory32Fixed (ReadWrite,
                0xFEDD5000,         // Address Base
                0x00001000,         // Address Length
                )
        })
        Name (DCRS, ResourceTemplate ()
        {
            Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
            {
                0x00000005,
            }
            Memory32Fixed (ReadWrite,
                0xFEDD5000,         // Address Base
                0x00001000,         // Address Length
                )
            GpioInt (Edge, ActiveBoth, SharedAndWake, PullUp, 0x0BB8,
                "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                )
                {   // Pin list
                    0x0044
                }
            GpioIo (Shared, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                )
                {   // Pin list
                    0x0044
                }
        })
        Name (AHID, "AMDI0040")
        Name (ACID, "AMDI0040")
        Name (SHID, 0x400DD041)
        Name (SCID, "PCICC_080501")
        Device (EMM0)
        {
            Method (_HID, 0, Serialized)  // _HID: Hardware ID
            {
                If (EMMD)
                {
                    Return (SHID) /* \_SB_.SHID */
                }
                Else
                {
                    Return (AHID) /* \_SB_.AHID */
                }
            }

            Method (_CID, 0, Serialized)  // _CID: Compatible ID
            {
                If (EMMD)
                {
                    Return (SCID) /* \_SB_.SCID */
                }
                Else
                {
                    Return (ACID) /* \_SB_.ACID */
                }
            }

            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                If (EMD3)
                {
                    Return (DCRS) /* \_SB_.DCRS */
                }
                Else
                {
                    Return (NCRS) /* \_SB_.NCRS */
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If (EMME)
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If (EMME)
                {
                    EPIN ()
                }
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((EMD3 && EMME))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((EMD3 && EMME))
                {
                    HSAD (0x1C, Zero)
                    RECR ()
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((EMD3 && EMME))
                {
                    HSAD (0x1C, 0x03)
                }
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (UAR1)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (_DDN, "COM1")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((FUIO (Zero) != 0x0F))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x02E8,             // Range Minimum
                        0x02E8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y0B)
                    IRQNoFlags (_Y0C)
                        {3}
                })
                CreateByteField (BUF0, \_SB.PCI0.UAR1._CRS._Y0B._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.PCI0.UAR1._CRS._Y0B._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.PCI0.UAR1._CRS._Y0C._INT, IRQL)  // _INT: Interrupts
                Local0 = FUIO (Zero)
                Switch (ToInteger (Local0))
                {
                    Case (Zero)
                    {
                        IOLO = 0xE8
                        IOHI = 0x02
                        IORL = 0xE8
                        IORH = 0x02
                    }
                    Case (One)
                    {
                        IOLO = 0xF8
                        IOHI = 0x02
                        IORL = 0xF8
                        IORH = 0x02
                    }
                    Case (0x02)
                    {
                        IOLO = 0xE8
                        IOHI = 0x03
                        IORL = 0xE8
                        IORH = 0x03
                    }
                    Case (0x03)
                    {
                        IOLO = 0xF8
                        IOHI = 0x03
                        IORL = 0xF8
                        IORH = 0x03
                    }

                }

                Local1 = IUA0 /* \_SB_.IUA0 */
                IRQL = (One << (Local1 & 0x0F))
                Return (BUF0) /* \_SB_.PCI0.UAR1._CRS.BUF0 */
            }
        }

        Device (UAR2)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Name (_DDN, "COM2")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((FUIO (One) != 0x0F))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x02F8,             // Range Minimum
                        0x02F8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y0D)
                    IRQNoFlags (_Y0E)
                        {4}
                })
                CreateByteField (BUF0, \_SB.PCI0.UAR2._CRS._Y0D._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.PCI0.UAR2._CRS._Y0D._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.PCI0.UAR2._CRS._Y0E._INT, IRQL)  // _INT: Interrupts
                Local0 = FUIO (One)
                Switch (ToInteger (Local0))
                {
                    Case (Zero)
                    {
                        IOLO = 0xE8
                        IOHI = 0x02
                        IORL = 0xE8
                        IORH = 0x02
                    }
                    Case (One)
                    {
                        IOLO = 0xF8
                        IOHI = 0x02
                        IORL = 0xF8
                        IORH = 0x02
                    }
                    Case (0x02)
                    {
                        IOLO = 0xE8
                        IOHI = 0x03
                        IORL = 0xE8
                        IORH = 0x03
                    }
                    Case (0x03)
                    {
                        IOLO = 0xF8
                        IOHI = 0x03
                        IORL = 0xF8
                        IORH = 0x03
                    }

                }

                Local1 = IUA1 /* \_SB_.IUA1 */
                IRQL = (One << (Local1 & 0x0F))
                Return (BUF0) /* \_SB_.PCI0.UAR2._CRS.BUF0 */
            }
        }

        Device (UAR3)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Name (_DDN, "COM3")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((FUIO (0x02) != 0x0F))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x03E8,             // Range Minimum
                        0x03E8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y0F)
                    IRQNoFlags (_Y10)
                        {3}
                })
                CreateByteField (BUF0, \_SB.PCI0.UAR3._CRS._Y0F._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.PCI0.UAR3._CRS._Y0F._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.PCI0.UAR3._CRS._Y10._INT, IRQL)  // _INT: Interrupts
                Local0 = FUIO (0x02)
                Switch (ToInteger (Local0))
                {
                    Case (Zero)
                    {
                        IOLO = 0xE8
                        IOHI = 0x02
                        IORL = 0xE8
                        IORH = 0x02
                    }
                    Case (One)
                    {
                        IOLO = 0xF8
                        IOHI = 0x02
                        IORL = 0xF8
                        IORH = 0x02
                    }
                    Case (0x02)
                    {
                        IOLO = 0xE8
                        IOHI = 0x03
                        IORL = 0xE8
                        IORH = 0x03
                    }
                    Case (0x03)
                    {
                        IOLO = 0xF8
                        IOHI = 0x03
                        IORL = 0xF8
                        IORH = 0x03
                    }

                }

                Local1 = IUA2 /* \_SB_.IUA2 */
                IRQL = (One << (Local1 & 0x0F))
                Return (BUF0) /* \_SB_.PCI0.UAR3._CRS.BUF0 */
            }
        }

        Device (UAR4)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Name (_DDN, "COM4")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((FUIO (0x03) != 0x0F))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x03F8,             // Range Minimum
                        0x03F8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y11)
                    IRQNoFlags (_Y12)
                        {4}
                })
                CreateByteField (BUF0, \_SB.PCI0.UAR4._CRS._Y11._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.PCI0.UAR4._CRS._Y11._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.PCI0.UAR4._CRS._Y12._INT, IRQL)  // _INT: Interrupts
                Local0 = FUIO (0x03)
                Switch (ToInteger (Local0))
                {
                    Case (Zero)
                    {
                        IOLO = 0xE8
                        IOHI = 0x02
                        IORL = 0xE8
                        IORH = 0x02
                    }
                    Case (One)
                    {
                        IOLO = 0xF8
                        IOHI = 0x02
                        IORL = 0xF8
                        IORH = 0x02
                    }
                    Case (0x02)
                    {
                        IOLO = 0xE8
                        IOHI = 0x03
                        IORL = 0xE8
                        IORH = 0x03
                    }
                    Case (0x03)
                    {
                        IOLO = 0xF8
                        IOHI = 0x03
                        IORL = 0xF8
                        IORH = 0x03
                    }

                }

                Local1 = IUA3 /* \_SB_.IUA3 */
                IRQL = (One << (Local1 & 0x0F))
                Return (BUF0) /* \_SB_.PCI0.UAR4._CRS.BUF0 */
            }
        }
    }

    Scope (_SB.FUR0)
    {
        Device (UART)
        {
            Name (_HID, "UTK0001")  // _HID: Hardware ID
            Name (_CID, "UARTTest")  // _CID: Compatible ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    UartSerialBusV2 (0x0001C200, DataBitsEight, StopBitsOne,
                        0xC0, LittleEndian, ParityTypeNone, FlowControlHardware,
                        0x0020, 0x0020, "\\_SB.FUR0",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.FUR0.UART._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (_SB.FUR1)
    {
        Device (UART)
        {
            Name (_HID, "UTK0001")  // _HID: Hardware ID
            Name (_CID, "UARTTest")  // _CID: Compatible ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    UartSerialBusV2 (0x0001C200, DataBitsEight, StopBitsOne,
                        0xC0, LittleEndian, ParityTypeNone, FlowControlHardware,
                        0x0020, 0x0020, "\\_SB.FUR1",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.FUR1.UART._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (_SB.I2CA)
    {
        Device (WTP1)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK0001")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDF")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x007F, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB.I2CA",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CA.WTP1._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MTP1)
        {
            Name (_HID, "STK0001")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0011, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB_.I2CA",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CA.MTP1._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WTP2)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK0002")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDF")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0011, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB.I2CA",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CA.WTP2._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MTP2)
        {
            Name (_HID, "STK0002")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0012, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB_.I2CA",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CA.MTP2._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WTP3)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK0003")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDF")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0012, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.I2CA",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CA.WTP3._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MTP3)
        {
            Name (_HID, "STK0003")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0013, ControllerInitiated, 0x000F4240,
                        AddressingMode7Bit, "\\_SB_.I2CA",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CA.MTP3._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WTP4)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK0004")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDF")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0013, ControllerInitiated, 0x000F4240,
                        AddressingMode7Bit, "\\_SB.I2CA",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CA.WTP4._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MTP4)
        {
            Name (_HID, "STK0004")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0014, ControllerInitiated, 0x000222E0,
                        AddressingMode7Bit, "\\_SB_.I2CA",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CA.MTP4._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MTP5)
        {
            Name (_HID, "STK0005")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0015, ControllerInitiated, 0x00053020,
                        AddressingMode7Bit, "\\_SB_.I2CA",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CA.MTP5._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (_SB.I2CB)
    {
        Device (WT21)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK00012")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDF2")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x007F, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB.I2CB",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CB.WT21._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT21)
        {
            Name (_HID, "STK00012")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0011, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB_.I2CB",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CB.MT21._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT22)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK00022")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDF2")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0011, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB.I2CB",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CB.WT22._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT22)
        {
            Name (_HID, "STK00022")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0012, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB_.I2CB",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CB.MT22._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT23)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK00032")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDF2")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0012, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.I2CB",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CB.WT23._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT23)
        {
            Name (_HID, "STK00032")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0013, ControllerInitiated, 0x000F4240,
                        AddressingMode7Bit, "\\_SB_.I2CB",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CB.MT23._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT24)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK00042")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDF2")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0013, ControllerInitiated, 0x000F4240,
                        AddressingMode7Bit, "\\_SB.I2CB",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CB.WT24._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT24)
        {
            Name (_HID, "STK00042")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0014, ControllerInitiated, 0x000222E0,
                        AddressingMode7Bit, "\\_SB_.I2CB",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CB.MT24._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT25)
        {
            Name (_HID, "STK00052")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0015, ControllerInitiated, 0x00053020,
                        AddressingMode7Bit, "\\_SB_.I2CB",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CB.MT25._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (_SB.I2CC)
    {
        Device (WT31)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK00013")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDF3")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x007F, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB.I2CC",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CC.WT31._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT31)
        {
            Name (_HID, "STK00013")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0011, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB_.I2CC",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CC.MT31._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT32)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK00023")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDF3")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0011, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB.I2CC",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CC.WT32._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT32)
        {
            Name (_HID, "STK00023")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0012, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB_.I2CC",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CC.MT32._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT33)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK00033")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDF3")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0012, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.I2CC",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CC.WT33._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT33)
        {
            Name (_HID, "STK00033")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0013, ControllerInitiated, 0x000F4240,
                        AddressingMode7Bit, "\\_SB_.I2CC",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CC.MT33._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT34)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK00043")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDF3")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0013, ControllerInitiated, 0x000F4240,
                        AddressingMode7Bit, "\\_SB.I2CC",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CC.WT34._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT34)
        {
            Name (_HID, "STK00043")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0014, ControllerInitiated, 0x000222E0,
                        AddressingMode7Bit, "\\_SB_.I2CC",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CC.MT34._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT35)
        {
            Name (_HID, "STK00053")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0015, ControllerInitiated, 0x00053020,
                        AddressingMode7Bit, "\\_SB_.I2CC",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CC.MT35._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (_SB.I2CD)
    {
        Device (WT41)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK00014")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDF4")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x007F, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB.I2CD",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CD.WT41._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT41)
        {
            Name (_HID, "STK00014")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0011, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB_.I2CD",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CD.MT41._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT42)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK00024")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDF4")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0011, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB.I2CD",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CD.WT42._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT42)
        {
            Name (_HID, "STK00024")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0012, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB_.I2CD",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CD.MT42._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT43)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK00034")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDF4")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0012, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.I2CD",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CD.WT43._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT43)
        {
            Name (_HID, "STK00034")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0013, ControllerInitiated, 0x000F4240,
                        AddressingMode7Bit, "\\_SB_.I2CD",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CD.MT43._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT44)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK00044")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDF4")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0013, ControllerInitiated, 0x000F4240,
                        AddressingMode7Bit, "\\_SB.I2CD",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CD.WT44._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT44)
        {
            Name (_HID, "STK00044")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0014, ControllerInitiated, 0x000222E0,
                        AddressingMode7Bit, "\\_SB_.I2CD",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CD.MT44._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT45)
        {
            Name (_HID, "STK00054")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0015, ControllerInitiated, 0x00053020,
                        AddressingMode7Bit, "\\_SB_.I2CD",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CD.MT45._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (_SB.I2CB)
    {
        Device (TPN1)
        {
            Name (_HID, "WACF2200")  // _HID: Hardware ID
            Name (_CID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _CID: Compatible ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x000A, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.I2CB",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                    GpioInt (Level, ActiveLow, Shared, PullUp, 0x0000,
                        "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0082
                        }
                })
                Return (RBUF) /* \_SB_.I2CB.TPN1._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((TPOS >= 0x60) & (TPND == 0xC2)))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                If (Arg0) {}
                Else
                {
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("3cdff6f7-4267-4555-ad05-b30a3d8938de") /* HID I2C Device */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (One)
                                {
                                    Return (Buffer (One)
                                    {
                                         0x03                                             // .
                                    })
                                }
                                Default
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                             // .
                                    })
                                }

                            }
                        }
                        Case (One)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }
        }

        Device (TPN2)
        {
            Name (_HID, "WACF2200")  // _HID: Hardware ID
            Name (_CID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _CID: Compatible ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x000A, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.I2CB",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                    GpioInt (Level, ActiveLow, Shared, PullUp, 0x0000,
                        "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0082
                        }
                })
                Return (RBUF) /* \_SB_.I2CB.TPN2._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((TPOS >= 0x60) & (TPND == 0xC3)))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                If (Arg0) {}
                Else
                {
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("3cdff6f7-4267-4555-ad05-b30a3d8938de") /* HID I2C Device */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (One)
                                {
                                    Return (Buffer (One)
                                    {
                                         0x03                                             // .
                                    })
                                }
                                Default
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                             // .
                                    })
                                }

                            }
                        }
                        Case (One)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }
        }

        Device (TPN3)
        {
            Name (_HID, "WACF2200")  // _HID: Hardware ID
            Name (_CID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _CID: Compatible ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x000A, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.I2CB",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                    GpioInt (Level, ActiveLow, Shared, PullUp, 0x0000,
                        "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0082
                        }
                })
                Return (RBUF) /* \_SB_.I2CB.TPN3._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((TPOS >= 0x60) & (TPND == 0xC4)))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                If (Arg0) {}
                Else
                {
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("3cdff6f7-4267-4555-ad05-b30a3d8938de") /* HID I2C Device */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (One)
                                {
                                    Return (Buffer (One)
                                    {
                                         0x03                                             // .
                                    })
                                }
                                Default
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                             // .
                                    })
                                }

                            }
                        }
                        Case (One)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }
        }

        Device (TPN4)
        {
            Name (_HID, "WACF2200")  // _HID: Hardware ID
            Name (_CID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _CID: Compatible ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x000A, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.I2CB",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                    GpioInt (Level, ActiveLow, Shared, PullUp, 0x0000,
                        "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0082
                        }
                })
                Return (RBUF) /* \_SB_.I2CB.TPN4._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((TPOS >= 0x60) & (TPND == 0xC5)))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                If (Arg0) {}
                Else
                {
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("3cdff6f7-4267-4555-ad05-b30a3d8938de") /* HID I2C Device */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (One)
                                {
                                    Return (Buffer (One)
                                    {
                                         0x03                                             // .
                                    })
                                }
                                Default
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                             // .
                                    })
                                }

                            }
                        }
                        Case (One)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }
        }

        Device (TPN5)
        {
            Name (_HID, "WACF2200")  // _HID: Hardware ID
            Name (_CID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _CID: Compatible ID
            Name (_UID, 0x05)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x000A, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.I2CB",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                    GpioInt (Level, ActiveLow, Shared, PullUp, 0x0000,
                        "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0082
                        }
                })
                Return (RBUF) /* \_SB_.I2CB.TPN5._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((TPOS >= 0x60) & (TPND == 0xCE)))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                If (Arg0) {}
                Else
                {
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("3cdff6f7-4267-4555-ad05-b30a3d8938de") /* HID I2C Device */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (One)
                                {
                                    Return (Buffer (One)
                                    {
                                         0x03                                             // .
                                    })
                                }
                                Default
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                             // .
                                    })
                                }

                            }
                        }
                        Case (One)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }
        }

        Device (TPN6)
        {
            Name (_HID, "WACF2200")  // _HID: Hardware ID
            Name (_CID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _CID: Compatible ID
            Name (_UID, 0x06)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x000A, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.I2CB",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                    GpioInt (Level, ActiveLow, Shared, PullUp, 0x0000,
                        "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0082
                        }
                })
                Return (RBUF) /* \_SB_.I2CB.TPN6._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((TPOS >= 0x60) & (TPND == 0xCF)))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                If (Arg0) {}
                Else
                {
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("3cdff6f7-4267-4555-ad05-b30a3d8938de") /* HID I2C Device */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (One)
                                {
                                    Return (Buffer (One)
                                    {
                                         0x03                                             // .
                                    })
                                }
                                Default
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                             // .
                                    })
                                }

                            }
                        }
                        Case (One)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }
        }

        Device (TPN7)
        {
            Name (_HID, "WACF2200")  // _HID: Hardware ID
            Name (_CID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _CID: Compatible ID
            Name (_UID, 0x07)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x000A, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.I2CB",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                    GpioInt (Level, ActiveLow, Shared, PullUp, 0x0000,
                        "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0082
                        }
                })
                Return (RBUF) /* \_SB_.I2CB.TPN7._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((TPOS >= 0x60) & (TPND == 0xCD)))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                If (Arg0) {}
                Else
                {
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("3cdff6f7-4267-4555-ad05-b30a3d8938de") /* HID I2C Device */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (One)
                                {
                                    Return (Buffer (One)
                                    {
                                         0x03                                             // .
                                    })
                                }
                                Default
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                             // .
                                    })
                                }

                            }
                        }
                        Case (One)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }
        }

        Device (TPN8)
        {
            Name (_HID, "WACF2200")  // _HID: Hardware ID
            Name (_CID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _CID: Compatible ID
            Name (_UID, 0x08)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x000A, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.I2CB",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                    GpioInt (Level, ActiveLow, Shared, PullUp, 0x0000,
                        "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0082
                        }
                })
                Return (RBUF) /* \_SB_.I2CB.TPN8._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((TPOS >= 0x60) & (TPND == Zero)))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                If (Arg0) {}
                Else
                {
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("3cdff6f7-4267-4555-ad05-b30a3d8938de") /* HID I2C Device */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (One)
                                {
                                    Return (Buffer (One)
                                    {
                                         0x03                                             // .
                                    })
                                }
                                Default
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                             // .
                                    })
                                }

                            }
                        }
                        Case (One)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }
        }
    }

    Scope (_SB.I2CA)
    {
        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("d93e4d1c-58bb-493c-a06a-605a717f9e2e") /* Unknown UUID */))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Return (Buffer (One)
                        {
                             0x03                                             // .
                        })
                    }
                    Case (One)
                    {
                        Return (Buffer (0x04)
                        {
                             0xE0, 0x00, 0x68, 0x00                           // ..h.
                        })
                    }

                }
            }
            Else
            {
                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }

        Device (TPDD)
        {
            Name (_HID, "MSFT0004")  // _HID: Hardware ID
            Name (_CID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _CID: Compatible ID
            Name (_UID, 0x05)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x002C, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.I2CA",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                    GpioInt (Level, ActiveLow, ExclusiveAndWake, PullUp, 0x0000,
                        "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0009
                        }
                })
                Return (RBUF) /* \_SB_.I2CA.TPDD._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((TPOS >= 0x60) & (TPID == 0x04)))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                If (Arg0) {}
                Else
                {
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("3cdff6f7-4267-4555-ad05-b30a3d8938de") /* HID I2C Device */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (One)
                                {
                                    Return (Buffer (One)
                                    {
                                         0x03                                             // .
                                    })
                                }
                                Default
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                             // .
                                    })
                                }

                            }
                        }
                        Case (One)
                        {
                            Return (0x20)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }
        }

        Device (TPDF)
        {
            Name (_HID, "MSFT0002")  // _HID: Hardware ID
            Name (_CID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _CID: Compatible ID
            Name (_UID, 0x08)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0015, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.I2CA",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                    GpioInt (Level, ActiveLow, ExclusiveAndWake, PullUp, 0x0000,
                        "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0009
                        }
                })
                Return (RBUF) /* \_SB_.I2CA.TPDF._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((TPOS >= 0x60) & (TPID == 0x06)))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                If (Arg0) {}
                Else
                {
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("3cdff6f7-4267-4555-ad05-b30a3d8938de") /* HID I2C Device */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (One)
                                {
                                    Return (Buffer (One)
                                    {
                                         0x03                                             // .
                                    })
                                }
                                Default
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                             // .
                                    })
                                }

                            }
                        }
                        Case (One)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }
        }
    }

    Scope (_SB.I2CB)
    {
        Device (TPDD)
        {
            Name (_HID, EisaId ("PNP0C50") /* HID Protocol Device (I2C bus) */)  // _HID: Hardware ID
            Name (_CID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _CID: Compatible ID
            Name (_UID, 0x06)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x002C, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.I2CB",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                    GpioInt (Level, ActiveLow, ExclusiveAndWake, PullUp, 0x0000,
                        "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0009
                        }
                })
                Return (RBUF) /* \_SB_.I2CB.TPDD._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((TPOS >= 0x60) & (THPD == One)))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                If (Arg0) {}
                Else
                {
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("3cdff6f7-4267-4555-ad05-b30a3d8938de") /* HID I2C Device */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (One)
                                {
                                    Return (Buffer (One)
                                    {
                                         0x03                                             // .
                                    })
                                }
                                Default
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                             // .
                                    })
                                }

                            }
                        }
                        Case (One)
                        {
                            Return (0x20)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }
        }
    }

    Scope (_SB.I2CC)
    {
        Device (TPDD)
        {
            Name (_HID, EisaId ("PNP0C50") /* HID Protocol Device (I2C bus) */)  // _HID: Hardware ID
            Name (_CID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _CID: Compatible ID
            Name (_UID, 0x07)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x002C, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.I2CC",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                    GpioInt (Level, ActiveLow, ExclusiveAndWake, PullUp, 0x0000,
                        "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0009
                        }
                })
                Return (RBUF) /* \_SB_.I2CC.TPDD._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((TPOS >= 0x60) & (THPD == 0x02)))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                If (Arg0) {}
                Else
                {
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("3cdff6f7-4267-4555-ad05-b30a3d8938de") /* HID I2C Device */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (One)
                                {
                                    Return (Buffer (One)
                                    {
                                         0x03                                             // .
                                    })
                                }
                                Default
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                             // .
                                    })
                                }

                            }
                        }
                        Case (One)
                        {
                            Return (0x20)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }
        }
    }

    Scope (_SB.I2CD)
    {
        Device (TPDD)
        {
            Name (_HID, EisaId ("PNP0C50") /* HID Protocol Device (I2C bus) */)  // _HID: Hardware ID
            Name (_CID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _CID: Compatible ID
            Name (_UID, 0x08)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x002C, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.I2CD",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                    GpioInt (Level, ActiveLow, ExclusiveAndWake, PullUp, 0x0000,
                        "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0009
                        }
                })
                Return (RBUF) /* \_SB_.I2CD.TPDD._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((TPOS >= 0x60) & (THPD == 0x03)))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                If (Arg0) {}
                Else
                {
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("3cdff6f7-4267-4555-ad05-b30a3d8938de") /* HID I2C Device */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (One)
                                {
                                    Return (Buffer (One)
                                    {
                                         0x03                                             // .
                                    })
                                }
                                Default
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                             // .
                                    })
                                }

                            }
                        }
                        Case (One)
                        {
                            Return (0x20)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }
        }
    }

    Scope (_SB.I2CC)
    {
        Device (SHUB)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "BMA250E")  // _HID: Hardware ID
            Name (_CID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _CID: Compatible ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (SBFI, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x005C, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.I2CC",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                    GpioInt (Level, ActiveHigh, Shared, PullUp, 0x0000,
                        "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0003
                        }
                })
                Return (SBFI) /* \_SB_.I2CC.SHUB._CRS.SBFI */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("3cdff6f7-4267-4555-ad05-b30a3d8938de") /* HID I2C Device */))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == One))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Return (One)
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }
        }
    }

    Scope (_SB)
    {
        Device (CIND)
        {
            Name (_HID, "INT33D3" /* Intel GPIO Buttons */)  // _HID: Hardware ID
            Name (_CID, "PNP0C60" /* Display Sensor Device */)  // _CID: Compatible ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }
        }
    }

    Scope (_TZ)
    {
        ThermalZone (TZ01)
        {
            Name (CRTT, 0x7D)
            Name (TSPS, 0x14)
            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                If (\_SB.PCI0.LPC0.ECOK ())
                {
                    If (!Acquire (\_SB.PCI0.LPC0.EC0.Z009, 0x012C))
                    {
                        Local0 = \_SB.PCI0.LPC0.EC0.CTML
                        Release (\_SB.PCI0.LPC0.EC0.Z009)
                        Return ((0x0AAC + (Local0 * 0x0A)))
                    }

                    Return (0x0B74)
                }
                Else
                {
                    Return (0x0B74)
                }
            }

            Method (_PSL, 0, Serialized)  // _PSL: Passive List
            {
                Return (Package (0x10)
                {
                    \_SB.PLTF.C000, 
                    \_SB.PLTF.C001, 
                    \_SB.PLTF.C002, 
                    \_SB.PLTF.C003, 
                    \_SB.PLTF.C004, 
                    \_SB.PLTF.C005, 
                    \_SB.PLTF.C006, 
                    \_SB.PLTF.C007, 
                    \_SB.PLTF.C008, 
                    \_SB.PLTF.C009, 
                    \_SB.PLTF.C00A, 
                    \_SB.PLTF.C00B, 
                    \_SB.PLTF.C00C, 
                    \_SB.PLTF.C00D, 
                    \_SB.PLTF.C00E, 
                    \_SB.PLTF.C00F
                })
            }

            Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
            {
                Return ((0x0AAC + (CRTT * 0x0A)))
            }

            Method (_TC1, 0, Serialized)  // _TC1: Thermal Constant 1
            {
                Return (One)
            }

            Method (_TC2, 0, Serialized)  // _TC2: Thermal Constant 2
            {
                Return (0x02)
            }

            Method (_TSP, 0, Serialized)  // _TSP: Thermal Sampling Period
            {
                Return (TSPS) /* \_TZ_.TZ01.TSPS */
            }
        }
    }

    Scope (_SB)
    {
        Mutex (MWMI, 0x00)
        Device (WMI4)
        {
            Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "WBAT")  // _UID: Unique ID
            Name (_WDG, Buffer (0x28)
            {
                /* 0000 */  0x76, 0x37, 0xA0, 0xC3, 0xAC, 0x51, 0xAA, 0x49,  // v7...Q.I
                /* 0008 */  0xAD, 0x0F, 0xF2, 0xF7, 0xD6, 0x2C, 0x3F, 0x3C,  // .....,?<
                /* 0010 */  0x41, 0x44, 0x06, 0x05, 0x21, 0x12, 0x90, 0x05,  // AD..!...
                /* 0018 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  // f.......
                /* 0020 */  0xC9, 0x06, 0x29, 0x10, 0x42, 0x44, 0x01, 0x00   // ..).BD..
            })
            Name (ITEM, Package (0x06)
            {
                Package (0x03)
                {
                    Zero, 
                    Zero, 
                    "BAT0 BatMaker"
                }, 

                Package (0x03)
                {
                    Zero, 
                    One, 
                    "BAT0 HwId    "
                }, 

                Package (0x03)
                {
                    Zero, 
                    0x02, 
                    "BAT0 MfgDate "
                }, 

                Package (0x03)
                {
                    One, 
                    Zero, 
                    "BAT1 BatMaker"
                }, 

                Package (0x03)
                {
                    One, 
                    One, 
                    "BAT1 HwId "
                }, 

                Package (0x03)
                {
                    One, 
                    0x02, 
                    "BAT1 MfgDate "
                }
            })
            Method (WQAD, 1, NotSerialized)
            {
                Acquire (MWMI, 0xFFFF)
                Local0 = PSAG (Arg0)
                Local1 = DerefOf (ITEM [Local0])
                Local2 = DerefOf (Local1 [Zero])
                Local3 = DerefOf (Local1 [One])
                Local4 = DerefOf (Local1 [0x02])
                Local5 = BATD (Local2, Local3)
                Concatenate (Local4, ",", Local6)
                Concatenate (Local6, Local5, Local7)
                Release (MWMI)
                Return (Local7)
            }

            Method (PSAG, 1, NotSerialized)
            {
                Return (Arg0)
            }

            Method (BATD, 2, NotSerialized)
            {
                If ((Arg0 == Zero))
                {
                    If ((Arg1 == Zero))
                    {
                        Local0 = "0001"
                    }

                    If ((Arg1 == One))
                    {
                        Local0 = "0002"
                    }

                    If ((Arg1 == 0x02))
                    {
                        Local0 = "XXXXXSSSYYY"
                    }
                }

                If ((Arg0 == One))
                {
                    If ((Arg1 == Zero))
                    {
                        Local0 = "0003"
                    }

                    If ((Arg1 == One))
                    {
                        Local0 = "0004"
                    }

                    If ((Arg1 == 0x02))
                    {
                        Local0 = "XXXXXSSSYYY"
                    }
                }

                Return (Local0)
            }

            Name (WQBD, Buffer (0x0275)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0x65, 0x02, 0x00, 0x00, 0xF8, 0x05, 0x00, 0x00,  // e.......
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0x18, 0xD1, 0x82, 0x00, 0x01, 0x06, 0x18, 0x42,  // .......B
                /* 0020 */  0x10, 0x05, 0x10, 0x8A, 0x0D, 0x21, 0x02, 0x0B,  // .....!..
                /* 0028 */  0x83, 0x50, 0x50, 0x18, 0x14, 0xA0, 0x45, 0x41,  // .PP...EA
                /* 0030 */  0xC8, 0x05, 0x14, 0x95, 0x02, 0x21, 0xC3, 0x02,  // .....!..
                /* 0038 */  0x14, 0x0B, 0x70, 0x2E, 0x40, 0xBA, 0x00, 0xE5,  // ..p.@...
                /* 0040 */  0x28, 0x72, 0x0C, 0x22, 0x02, 0xF7, 0xEF, 0x0F,  // (r."....
                /* 0048 */  0x31, 0xD0, 0x18, 0xA8, 0x50, 0x08, 0x89, 0x00,  // 1...P...
                /* 0050 */  0xA6, 0x42, 0xE0, 0x08, 0x41, 0xBF, 0x02, 0x10,  // .B..A...
                /* 0058 */  0x3A, 0x14, 0x20, 0x53, 0x80, 0x41, 0x01, 0x4E,  // :. S.A.N
                /* 0060 */  0x11, 0x44, 0x10, 0xA5, 0x65, 0x01, 0xBA, 0x05,  // .D..e...
                /* 0068 */  0xF8, 0x16, 0xA0, 0x1D, 0x42, 0x68, 0x91, 0x9A,  // ....Bh..
                /* 0070 */  0x9F, 0x04, 0x81, 0x6A, 0x5B, 0x80, 0x45, 0x01,  // ...j[.E.
                /* 0078 */  0xB2, 0x41, 0x08, 0xA0, 0xC7, 0xC1, 0x44, 0x0E,  // .A....D.
                /* 0080 */  0x02, 0x25, 0x66, 0x10, 0x28, 0x9D, 0x73, 0x90,  // .%f.(.s.
                /* 0088 */  0x4D, 0x60, 0xE1, 0x9F, 0x4C, 0x94, 0xF3, 0x88,  // M`..L...
                /* 0090 */  0x92, 0xE0, 0xA8, 0x0E, 0x22, 0x42, 0xF0, 0x72,  // ...."B.r
                /* 0098 */  0x05, 0x48, 0x9E, 0x80, 0x34, 0x4F, 0x4C, 0xD6,  // .H..4OL.
                /* 00A0 */  0x07, 0xA1, 0x21, 0xB0, 0x11, 0xF0, 0x88, 0x12,  // ..!.....
                /* 00A8 */  0x40, 0x58, 0xA0, 0x75, 0x2A, 0x14, 0x0C, 0xCA,  // @X.u*...
                /* 00B0 */  0x03, 0x88, 0xE4, 0x8C, 0x15, 0x05, 0x6C, 0xAF,  // ......l.
                /* 00B8 */  0x13, 0x91, 0xC9, 0x81, 0x52, 0x49, 0x70, 0xA8,  // ....RIp.
                /* 00C0 */  0x61, 0x5A, 0xE2, 0xEC, 0x34, 0xB2, 0x13, 0x39,  // aZ..4..9
                /* 00C8 */  0xB6, 0xA6, 0x87, 0x2C, 0x48, 0x26, 0x6D, 0x28,  // ...,H&m(
                /* 00D0 */  0xA8, 0xB1, 0x7B, 0x5A, 0x27, 0xE5, 0x99, 0x46,  // ..{Z'..F
                /* 00D8 */  0x3C, 0x28, 0xC3, 0x24, 0xF0, 0x28, 0x18, 0x1A,  // <(.$.(..
                /* 00E0 */  0x27, 0x28, 0x0B, 0x42, 0x0E, 0x06, 0x8A, 0x02,  // '(.B....
                /* 00E8 */  0x3C, 0x09, 0xCF, 0xB1, 0x78, 0x01, 0xC2, 0x67,  // <...x..g
                /* 00F0 */  0x4C, 0xA6, 0x1D, 0x23, 0x81, 0xCF, 0x04, 0x1E,  // L..#....
                /* 00F8 */  0xE6, 0x31, 0x63, 0x47, 0x14, 0x2E, 0xE0, 0xF9,  // .1cG....
                /* 0100 */  0x1C, 0x43, 0xE4, 0xB8, 0x87, 0x1A, 0xE3, 0x28,  // .C.....(
                /* 0108 */  0x22, 0x3F, 0x08, 0x60, 0x05, 0x1D, 0x04, 0x90,  // "?.`....
                /* 0110 */  0x38, 0xFF, 0xFF, 0xE3, 0x89, 0x76, 0xDA, 0xC1,  // 8....v..
                /* 0118 */  0x42, 0xC7, 0x39, 0xBF, 0xD0, 0x18, 0xD1, 0xE3,  // B.9.....
                /* 0120 */  0x40, 0xC9, 0x80, 0x90, 0x47, 0x01, 0x56, 0x61,  // @...G.Va
                /* 0128 */  0x35, 0x91, 0x04, 0xBE, 0x07, 0x74, 0x76, 0x12,  // 5....tv.
                /* 0130 */  0xD0, 0xA5, 0x21, 0x46, 0x6F, 0x08, 0xD2, 0x26,  // ..!Fo..&
                /* 0138 */  0xC0, 0x96, 0x00, 0x6B, 0x02, 0x8C, 0xDD, 0x06,  // ...k....
                /* 0140 */  0x08, 0xCA, 0xD1, 0x36, 0x87, 0x22, 0x84, 0x28,  // ...6.".(
                /* 0148 */  0x21, 0xE2, 0x86, 0xAC, 0x11, 0x45, 0x10, 0x95,  // !....E..
                /* 0150 */  0x41, 0x08, 0x35, 0x50, 0xD8, 0x28, 0xF1, 0x8D,  // A.5P.(..
                /* 0158 */  0x13, 0x22, 0x48, 0x02, 0x8F, 0x1C, 0x77, 0x04,  // ."H...w.
                /* 0160 */  0xF0, 0xD8, 0x0E, 0xE8, 0x04, 0x4F, 0xE9, 0x71,  // .....O.q
                /* 0168 */  0xC1, 0x04, 0x9E, 0xF7, 0xC1, 0x1D, 0xEA, 0x21,  // .......!
                /* 0170 */  0x1C, 0x70, 0xD4, 0x18, 0xC7, 0xF1, 0x4C, 0x40,  // .p....L@
                /* 0178 */  0x16, 0x2E, 0x0D, 0x20, 0x8A, 0x04, 0x8F, 0x3A,  // ... ...:
                /* 0180 */  0x32, 0xF8, 0x70, 0xE0, 0x41, 0x7A, 0x9E, 0x9E,  // 2.p.Az..
                /* 0188 */  0x40, 0x90, 0x43, 0x38, 0x82, 0xC7, 0x86, 0xA7,  // @.C8....
                /* 0190 */  0x02, 0x8F, 0x81, 0x5D, 0x17, 0x7C, 0x0E, 0xF0,  // ...].|..
                /* 0198 */  0x31, 0x01, 0xEF, 0x1A, 0x50, 0xA3, 0x7E, 0x3A,  // 1...P.~:
                /* 01A0 */  0x60, 0x93, 0x0E, 0x87, 0x19, 0xAE, 0x87, 0x1D,  // `.......
                /* 01A8 */  0xEE, 0x04, 0x1E, 0x0E, 0x1E, 0x33, 0xF8, 0x91,  // .....3..
                /* 01B0 */  0xC3, 0x83, 0xC3, 0xCD, 0xF0, 0x64, 0x8E, 0xAC,  // .....d..
                /* 01B8 */  0x54, 0x01, 0x66, 0x4F, 0x08, 0x3A, 0x4D, 0xF8,  // T.fO.:M.
                /* 01C0 */  0xCC, 0xC1, 0x6E, 0x00, 0xE7, 0xD3, 0x33, 0x24,  // ..n...3$
                /* 01C8 */  0x91, 0x3F, 0x08, 0xD4, 0xC8, 0x0C, 0xED, 0x69,  // .?.....i
                /* 01D0 */  0xBF, 0x7A, 0x18, 0xF2, 0xA1, 0xE0, 0xB0, 0x98,  // .z......
                /* 01D8 */  0xD8, 0xB3, 0x07, 0x1D, 0x0F, 0xF8, 0xAF, 0x24,  // .......$
                /* 01E0 */  0x0F, 0x1B, 0x9E, 0xBE, 0xE7, 0x6B, 0x82, 0x91,  // .....k..
                /* 01E8 */  0x07, 0x8E, 0x1E, 0x88, 0xA1, 0x9F, 0x38, 0x0E,  // ......8.
                /* 01F0 */  0xE3, 0x34, 0x7C, 0x09, 0xF1, 0x39, 0xE0, 0xFF,  // .4|..9..
                /* 01F8 */  0x1F, 0x24, 0xC6, 0x31, 0x79, 0x70, 0x3C, 0xD8,  // .$.1yp<.
                /* 0200 */  0xC8, 0xE9, 0x51, 0xC5, 0x47, 0x0A, 0x7E, 0xBE,  // ..Q.G.~.
                /* 0208 */  0xF0, 0x91, 0x82, 0x5D, 0x10, 0x9E, 0x1C, 0x0C,  // ...]....
                /* 0210 */  0x71, 0x38, 0x67, 0xE5, 0x13, 0x85, 0x0F, 0x2A,  // q8g....*
                /* 0218 */  0xB8, 0x13, 0x05, 0x5C, 0x85, 0xE8, 0xE4, 0x36,  // ...\...6
                /* 0220 */  0x61, 0xB4, 0x67, 0x81, 0xC7, 0x09, 0x98, 0x07,  // a.g.....
                /* 0228 */  0x01, 0xF0, 0x8D, 0xDF, 0x07, 0x19, 0xB0, 0x4D,  // .......M
                /* 0230 */  0x09, 0x3B, 0x24, 0x78, 0x47, 0x19, 0xE0, 0x71,  // .;$xG..q
                /* 0238 */  0x32, 0xC1, 0x1D, 0x27, 0x3C, 0x04, 0x3E, 0x80,  // 2..'<.>.
                /* 0240 */  0x87, 0x90, 0x93, 0xB4, 0xD2, 0xA9, 0x21, 0xCF,  // ......!.
                /* 0248 */  0x3C, 0x60, 0x1B, 0x06, 0x57, 0x68, 0xD3, 0xA7,  // <`..Wh..
                /* 0250 */  0x46, 0xA3, 0x56, 0x0D, 0xCA, 0xD4, 0x28, 0xD3,  // F.V...(.
                /* 0258 */  0xA0, 0x56, 0x9F, 0x4A, 0x8D, 0x19, 0xFB, 0xE1,  // .V.J....
                /* 0260 */  0x58, 0xDC, 0xBB, 0x40, 0x07, 0x03, 0x0B, 0x7B,  // X..@...{
                /* 0268 */  0x21, 0xE8, 0x88, 0xE0, 0x58, 0x20, 0x34, 0x08,  // !...X 4.
                /* 0270 */  0x9D, 0x40, 0xFC, 0xFF, 0x07                     // .@...
            })
        }
    }

    Scope (\)
    {
        OperationRegion (COMP, SystemMemory, 0xCDF79D18, 0x0200)
        Field (COMP, AnyAcc, Lock, Preserve)
        {
            RSR0,   32, 
            BDDD,   8, 
            CPFB,   8, 
            PBTI,   8, 
            BRLV,   8, 
            CAVR,   8, 
            TJMA,   16, 
            CORE,   8, 
            TPDF,   8, 
            TPLF,   8, 
            TPDD,   8, 
            TMUD,   8, 
            CTUR,   8, 
            CUCB,   32, 
            OSYS,   16, 
            CG23,   8, 
            CG24,   8, 
            CG25,   8, 
            CG26,   8, 
            CG27,   8, 
            CG28,   8, 
            CG29,   8, 
            CG30,   8, 
            CG31,   8, 
            SFNO,   16, 
            STDT,   16, 
            BFDT,   1024, 
            ESMS,   8, 
            ESMB,   256, 
            RSR1,   472, 
            IDFD,   1024, 
            RSR2,   1024
        }

        Mutex (CFMX, 0x00)
        Scope (_SB)
        {
            OperationRegion (SMIO, SystemIO, 0xB0, 0x02)
            Field (SMIO, ByteAcc, NoLock, Preserve)
            {
                SMIM,   8, 
                SMID,   8
            }

            Method (CSMI, 2, NotSerialized)
            {
                Acquire (CFMX, 0xFFFF)
                SMID = Arg1
                SMIM = Arg0
                Release (CFMX)
            }
        }

        Scope (_SB)
        {
            Device (PWRB)
            {
                Name (_HID, EisaId ("PNP0C0C") /* Power Button Device */)  // _HID: Hardware ID
                Method (PKG2, 2, Serialized)
                {
                    Name (PKG, Package (0x02)
                    {
                        Zero, 
                        Zero
                    })
                    PKG [Zero] = Arg0
                    PKG [One] = Arg1
                    Return (PKG) /* \_SB_.PWRB.PKG2.PKG_ */
                }

                Method (RHRW, 0, NotSerialized)
                {
                    Name (GPEB, Zero)
                    GPEB = 0x1E
                    Return (PKG2 (GPEB, 0x04))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (0x0F)
                }
            }
        }
    }

    Scope (_SB.PCI0.LPC0)
    {
        Method (ECOK, 0, NotSerialized)
        {
            If ((^EC0.OKEC == One))
            {
                Return (One)
            }
            Else
            {
                Return (Zero)
            }
        }

        Device (EC0)
        {
            Name (_HID, EisaId ("PNP0C09") /* Embedded Controller Device */)  // _HID: Hardware ID
            Name (_GPE, 0x03)  // _GPE: General Purpose Events
            Name (OKEC, One)
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x0062,             // Range Minimum
                    0x0062,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0066,             // Range Minimum
                    0x0066,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
            })
            Method (_REG, 2, NotSerialized)  // _REG: Region Availability
            {
                If ((Arg0 == 0x03))
                {
                    OKEC = Arg1
                    ECFG (One)
                }
            }

            Method (ECFG, 1, NotSerialized)
            {
                If ((Arg0 == One))
                {
                    ECRD = One
                }
                Else
                {
                    ECRD = Zero
                }
            }

            Mutex (Z009, 0x00)
            Mutex (QEVT, 0x00)
            OperationRegion (ECMM, SystemMemory, 0xFE0B0800, 0x1000)
            Field (ECMM, AnyAcc, Lock, Preserve)
            {
                Offset (0x5D), 
                ERIB,   16, 
                Offset (0x61), 
                SMST,   8, 
                SMAD,   8, 
                SMCM,   8, 
                SMD0,   256, 
                BCNT,   8, 
                SMAA,   24, 
                SMBN,   8, 
                Offset (0x90), 
                BMFN,   72, 
                BATD,   56, 
                Offset (0xA1), 
                    ,   1, 
                VIDO,   1, 
                TOUP,   1, 
                Offset (0xA2), 
                ODTS,   8, 
                OSTY,   4, 
                    ,   1, 
                PBOV,   1, 
                ECRD,   1, 
                ADPT,   1, 
                PWAK,   1, 
                MWAK,   1, 
                LWAK,   1, 
                RWAK,   1, 
                WWAK,   1, 
                UWAK,   1, 
                KWAK,   1, 
                TWAK,   1, 
                CCAC,   1, 
                AOAC,   1, 
                BLAC,   1, 
                PSRC,   1, 
                BOAC,   1, 
                LCAC,   1, 
                AAAC,   1, 
                ACAC,   1, 
                S3ST,   1, 
                S3RM,   1, 
                S4ST,   1, 
                S4RM,   1, 
                S5ST,   1, 
                S5RM,   1, 
                CSST,   1, 
                CSRM,   1, 
                OSTT,   8, 
                OSST,   8, 
                THLT,   8, 
                TCNL,   8, 
                MODE,   1, 
                    ,   2, 
                INIT,   1, 
                FAN1,   1, 
                FAN2,   1, 
                FANT,   1, 
                SKNM,   1, 
                SDTM,   8, 
                FSSN,   4, 
                FANU,   4, 
                PCVL,   6, 
                SWTO,   1, 
                TTHR,   1, 
                TTHM,   1, 
                THTL,   1, 
                TFCT,   1, 
                NPST,   5, 
                CTMP,   8, 
                CTML,   8, 
                EST3,   8, 
                SKTB,   8, 
                SKTC,   8, 
                DPOT,   8, 
                EST1,   8, 
                EST2,   8, 
                    ,   1, 
                LIDF,   1, 
                PMEE,   1, 
                PWBE,   1, 
                RNGE,   1, 
                BTWE,   1, 
                Offset (0xB9), 
                BRTS,   8, 
                S35M,   1, 
                S35S,   1, 
                    ,   1, 
                MSFG,   1, 
                FFEN,   1, 
                FFST,   1, 
                Offset (0xBB), 
                WLAT,   1, 
                BTAT,   1, 
                WLEX,   1, 
                BTEX,   1, 
                KLSW,   1, 
                WLOK,   1, 
                AT3G,   1, 
                EX3G,   1, 
                PJID,   8, 
                CPUJ,   3, 
                CPNM,   3, 
                GATY,   2, 
                Offset (0xC0), 
                BTY0,   1, 
                BAM0,   1, 
                Offset (0xC1), 
                BST0,   8, 
                BRC0,   16, 
                Offset (0xC6), 
                BPV0,   16, 
                BDV0,   16, 
                BDC0,   16, 
                BFC0,   16, 
                GAU0,   8, 
                BAT0,   8, 
                BPC0,   16, 
                BAC0,   16, 
                BCG0,   16, 
                BFCB,   16, 
                BTPB,   16, 
                BOL0,   1, 
                BFS0,   1, 
                Offset (0xDB), 
                ORRF,   1, 
                Offset (0xDC), 
                Offset (0xDD)
            }

            OperationRegion (PECM, SystemMemory, 0xFE0B0800, 0x1000)
            Field (PECM, AnyAcc, Lock, Preserve)
            {
                Offset (0x08), 
                GC6F,   1, 
                Offset (0x1C), 
                    ,   3, 
                BLLV,   1, 
                Offset (0x1E), 
                NVDS,   8
            }

            OperationRegion (ERAM, EmbeddedControl, Zero, 0xFF)
            Field (ERAM, ByteAcc, Lock, Preserve)
            {
                Offset (0x5F), 
                ERBD,   8, 
                SMPR,   8, 
                Offset (0x62)
            }

            OperationRegion (CCLK, SystemIO, 0x0410, 0x04)
            Field (CCLK, DWordAcc, NoLock, Preserve)
            {
                    ,   1, 
                DUTY,   3, 
                THEN,   1, 
                Offset (0x01), 
                FTT,    1, 
                    ,   8, 
                TSTS,   1
            }

            OperationRegion (ECRM, EmbeddedControl, Zero, 0xFF)
            Field (ECRM, ByteAcc, Lock, Preserve)
            {
                Offset (0xAA), 
                Offset (0xAB), 
                Offset (0xAD), 
                    ,   4, 
                Offset (0xAE), 
                PTVL,   4, 
                Offset (0xB0), 
                Offset (0xB1), 
                Offset (0xB2), 
                Offset (0xB3), 
                Offset (0xB4), 
                Offset (0xB5), 
                Offset (0xBC), 
                Offset (0xBD)
            }

            Mutex (FAMX, 0x00)
            Method (FANG, 1, NotSerialized)
            {
                Acquire (FAMX, 0xFFFF)
                ERIB = Arg0
                Local0 = ERBD /* \_SB_.PCI0.LPC0.EC0_.ERBD */
                Release (FAMX)
                Return (Local0)
            }

            Method (FANW, 2, NotSerialized)
            {
                Acquire (FAMX, 0xFFFF)
                ERIB = Arg0
                ERBD = Arg1
                Release (FAMX)
                Return (Arg1)
            }

            Method (TUVR, 1, NotSerialized)
            {
                Return (0x04)
            }

            Method (THRO, 1, NotSerialized)
            {
                ATHR (Arg0)
            }

            Method (CLCK, 1, NotSerialized)
            {
                Return (Zero)
            }

            Method (PCLK, 0, NotSerialized)
            {
                APCL ()
            }

            Method (ATHR, 1, NotSerialized)
            {
                If ((Arg0 == Zero))
                {
                    Return (0xFF)
                }
                ElseIf ((Arg0 == One))
                {
                    Return (\_PR.C000._PPC) /* External reference */
                }
                ElseIf ((Arg0 == 0x02))
                {
                    Return (TTHR) /* \_SB_.PCI0.LPC0.EC0_.TTHR */
                }
                Else
                {
                    Return (0xFF)
                }
            }

            Method (APCL, 0, NotSerialized)
            {
                Local0 = PTVL /* \_SB_.PCI0.LPC0.EC0_.PTVL */
                \_PR.C000.PPCV = Local0
                Notify (\_PR.C000, 0x80) // Status Change
            }

            Name (XX11, Buffer (0x07) {})
            Method (_Q11, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                If ((BRTS == Zero)) {}
                Notify (^^^GP17.VGA.LCD, 0x87) // Device-Specific
            }

            Method (_Q12, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                If ((BRTS == 0x0A)) {}
                Notify (^^^GP17.VGA.LCD, 0x86) // Device-Specific
            }

            Method (_Q15, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80H = 0x15
                Notify (LID, 0x80) // Status Change
            }

            Method (_Q1D, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                Local0 = STMD /* \_SB_.PCI0.LPC0.EC0_.STMD */
                Local1 = QTMD /* \_SB_.PCI0.LPC0.EC0_.QTMD */
                Local2 = AQMD /* \_SB_.PCI0.LPC0.EC0_.AQMD */
                Local3 = AUPM /* \_SB_.PCI0.LPC0.EC0_.AUPM */
                If ((((Local0 == One) && (Local1 == Zero)) && ((Local2 == 
                    Zero) && (Local3 == Zero))))
                {
                    PTIT ()
                }
                ElseIf ((((Local0 == Zero) && (Local1 == One)) && ((
                    Local2 == Zero) && (Local3 == Zero))))
                {
                    PTBS ()
                }
                ElseIf ((((Local0 == Zero) && (Local1 == Zero)) && ((
                    Local2 == Zero) && (Local3 == One))))
                {
                    PTAP ()
                }
                ElseIf ((((Local0 == Zero) && (Local1 == Zero)) && ((
                    Local2 == One) && (Local3 == Zero))))
                {
                    PTAQ ()
                }
                ElseIf ((((Local0 == Zero) && (Local1 == Zero)) && ((
                    Local2 == Zero) && (Local3 == Zero))))
                {
                    PTPF ()
                }
            }

            Method (_Q1E, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
            }

            Method (_Q1F, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
            }

            Method (_Q21, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                UCEV ()
            }

            Method (_Q24, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                Sleep (0x03E8)
                Notify (BAT1, 0x80) // Status Change
            }

            Method (_Q25, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                Sleep (0x03E8)
                Notify (BAT1, 0x81) // Information Change
                Sleep (0x03E8)
                Notify (BAT1, 0x80) // Status Change
            }

            Method (_Q37, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                Notify (ACAD, 0x80) // Status Change
                Sleep (0x03E8)
                Notify (BAT1, 0x80) // Status Change
                PWRS = One
            }

            Method (_Q38, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                If ((WLVI == Zero))
                {
                    Notify (WMIP, 0xD0) // Hardware-Specific
                }
                ElseIf ((WLVI == One))
                {
                    Notify (^^^GPP6.WLAN, 0x0D) // System Resource Affinity Update
                }
                Else
                {
                    Notify (WFDE, 0xD0) // Hardware-Specific
                }
            }

            Method (_Q0C, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                ^^^^WMIY.YDAT = YMCD /* \_SB_.PCI0.LPC0.EC0_.YMCD */
                Notify (WMIY, 0xD0) // Hardware-Specific
            }

            Method (_Q3E, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                PSD1 = 0x04
                Notify (WMIU, 0xD0) // Hardware-Specific
            }

            Method (_Q3F, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                PSD1 = One
                Notify (WMIU, 0xD0) // Hardware-Specific
            }

            Method (_Q0F, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                HOTM = ~HOTM /* \_SB_.PCI0.LPC0.EC0_.HOTM */
                If (HOTM)
                {
                    PSD1 = 0x03
                }
                Else
                {
                    PSD1 = 0x02
                }

                WXMS (0x70, 0x55)
                Notify (WMIU, 0xD0) // Hardware-Specific
            }

            Method (PTPF, 0, Serialized)
            {
                Name (XX11, Buffer (0x07) {})
                CreateWordField (XX11, Zero, SSZE)
                CreateByteField (XX11, 0x02, SMUF)
                CreateDWordField (XX11, 0x03, SMUD)
                SSZE = 0x07
                Switch (PCVL)
                {
                    Case (Zero)
                    {
                        SMUF = 0x05
                        SMUD = 0x3A98
                        ALIB (0x0C, XX11)
                        SMUF = 0x07
                        SMUD = 0x61A8
                        ALIB (0x0C, XX11)
                    }
                    Case (One)
                    {
                        SMUF = 0x05
                        SMUD = 0x3A98
                        ALIB (0x0C, XX11)
                        SMUF = 0x07
                        SMUD = 0x3A98
                        ALIB (0x0C, XX11)
                    }
                    Case (0x02)
                    {
                        SMUF = 0x05
                        SMUD = 0x3A98
                        ALIB (0x0C, XX11)
                        SMUF = 0x07
                        SMUD = 0x3A98
                        ALIB (0x0C, XX11)
                    }
                    Case (0x03)
                    {
                        Divide (0x3A98, 0x64, Local0, Local1)
                        Local1 *= 0x55
                        SMUF = 0x05
                        SMUD = Local1
                        ALIB (0x0C, XX11)
                        SMUF = 0x07
                        SMUD = Local1
                        ALIB (0x0C, XX11)
                    }
                    Case (0x04)
                    {
                        Divide (0x3A98, 0x64, Local0, Local1)
                        Local1 *= 0x46
                        SMUF = 0x05
                        SMUD = Local1
                        ALIB (0x0C, XX11)
                        SMUF = 0x07
                        SMUD = Local1
                        ALIB (0x0C, XX11)
                    }
                    Case (0x05)
                    {
                        Divide (0x3A98, 0x64, Local0, Local1)
                        Local1 *= 0x37
                        SMUF = 0x05
                        SMUD = Local1
                        ALIB (0x0C, XX11)
                        SMUF = 0x07
                        SMUD = Local1
                        ALIB (0x0C, XX11)
                    }
                    Case (0x06)
                    {
                        Divide (0x3A98, 0x64, Local0, Local1)
                        Local1 *= 0x28
                        SMUF = 0x05
                        SMUD = Local1
                        ALIB (0x0C, XX11)
                        SMUF = 0x07
                        SMUD = Local1
                        ALIB (0x0C, XX11)
                    }
                    Case (0x07)
                    {
                        Divide (0x3A98, 0x64, Local0, Local1)
                        Local1 *= 0x28
                        SMUF = 0x05
                        SMUD = Local1
                        ALIB (0x0C, XX11)
                        SMUF = 0x07
                        SMUD = Local1
                        ALIB (0x0C, XX11)
                    }
                    Case (0x08)
                    {
                        Divide (0x3A98, 0x64, Local0, Local1)
                        Local1 *= 0x28
                        SMUF = 0x05
                        SMUD = Local1
                        ALIB (0x0C, XX11)
                        SMUF = 0x07
                        SMUD = Local1
                        ALIB (0x0C, XX11)
                    }
                    Case (0x09)
                    {
                        Divide (0x3A98, 0x64, Local0, Local1)
                        Local1 *= 0x28
                        SMUF = 0x05
                        SMUD = Local1
                        ALIB (0x0C, XX11)
                        SMUF = 0x07
                        SMUD = Local1
                        ALIB (0x0C, XX11)
                    }

                }
            }

            Method (PTIT, 0, Serialized)
            {
                Name (XX11, Buffer (0x07) {})
                CreateWordField (XX11, Zero, SSZE)
                CreateByteField (XX11, 0x02, SMUF)
                CreateDWordField (XX11, 0x03, SMUD)
                SSZE = 0x07
                Switch (PCVL)
                {
                    Case (Zero)
                    {
                        SMUF = 0x05
                        SMUD = 0x2AF8
                        ALIB (0x0C, XX11)
                        SMUF = 0x07
                        SMUD = 0x61A8
                        ALIB (0x0C, XX11)
                    }
                    Case (One)
                    {
                        SMUF = 0x05
                        SMUD = 0x2AF8
                        ALIB (0x0C, XX11)
                        SMUF = 0x07
                        SMUD = 0x2AF8
                        ALIB (0x0C, XX11)
                    }
                    Case (0x02)
                    {
                        SMUF = 0x05
                        SMUD = 0x2AF8
                        ALIB (0x0C, XX11)
                        SMUF = 0x07
                        SMUD = 0x2AF8
                        ALIB (0x0C, XX11)
                    }
                    Case (0x03)
                    {
                        Divide (0x2AF8, 0x64, Local0, Local1)
                        Local1 *= 0x55
                        SMUF = 0x05
                        SMUD = Local1
                        ALIB (0x0C, XX11)
                        SMUF = 0x07
                        SMUD = Local1
                        ALIB (0x0C, XX11)
                    }
                    Case (0x04)
                    {
                        Divide (0x2AF8, 0x64, Local0, Local1)
                        Local1 *= 0x46
                        SMUF = 0x05
                        SMUD = Local1
                        ALIB (0x0C, XX11)
                        SMUF = 0x07
                        SMUD = Local1
                        ALIB (0x0C, XX11)
                    }
                    Case (0x05)
                    {
                        Divide (0x2AF8, 0x64, Local0, Local1)
                        Local1 *= 0x37
                        SMUF = 0x05
                        SMUD = Local1
                        ALIB (0x0C, XX11)
                        SMUF = 0x07
                        SMUD = Local1
                        ALIB (0x0C, XX11)
                    }
                    Case (0x06)
                    {
                        Divide (0x2AF8, 0x64, Local0, Local1)
                        Local1 *= 0x28
                        SMUF = 0x05
                        SMUD = Local1
                        ALIB (0x0C, XX11)
                        SMUF = 0x07
                        SMUD = Local1
                        ALIB (0x0C, XX11)
                    }
                    Case (0x07)
                    {
                        Divide (0x2AF8, 0x64, Local0, Local1)
                        Local1 *= 0x28
                        SMUF = 0x05
                        SMUD = Local1
                        ALIB (0x0C, XX11)
                        SMUF = 0x07
                        SMUD = Local1
                        ALIB (0x0C, XX11)
                    }
                    Case (0x08)
                    {
                        Divide (0x2AF8, 0x64, Local0, Local1)
                        Local1 *= 0x28
                        SMUF = 0x05
                        SMUD = Local1
                        ALIB (0x0C, XX11)
                        SMUF = 0x07
                        SMUD = Local1
                        ALIB (0x0C, XX11)
                    }
                    Case (0x09)
                    {
                        Divide (0x2AF8, 0x64, Local0, Local1)
                        Local1 *= 0x28
                        SMUF = 0x05
                        SMUD = Local1
                        ALIB (0x0C, XX11)
                        SMUF = 0x07
                        SMUD = Local1
                        ALIB (0x0C, XX11)
                    }

                }
            }

            Method (PTBS, 0, Serialized)
            {
                Name (XX11, Buffer (0x07) {})
                CreateWordField (XX11, Zero, SSZE)
                CreateByteField (XX11, 0x02, SMUF)
                CreateDWordField (XX11, 0x03, SMUD)
                SSZE = 0x07
                Switch (PCVL)
                {
                    Case (Zero)
                    {
                        SMUF = 0x05
                        SMUD = 0x2328
                        ALIB (0x0C, XX11)
                        SMUF = 0x07
                        SMUD = 0x61A8
                        ALIB (0x0C, XX11)
                    }
                    Case (One)
                    {
                        SMUF = 0x05
                        SMUD = 0x2328
                        ALIB (0x0C, XX11)
                        SMUF = 0x07
                        SMUD = 0x2328
                        ALIB (0x0C, XX11)
                    }
                    Case (0x02)
                    {
                        SMUF = 0x05
                        SMUD = 0x2328
                        ALIB (0x0C, XX11)
                        SMUF = 0x07
                        SMUD = 0x2328
                        ALIB (0x0C, XX11)
                    }
                    Case (0x03)
                    {
                        Divide (0x2328, 0x64, Local0, Local1)
                        Local1 *= 0x55
                        SMUF = 0x05
                        SMUD = Local1
                        ALIB (0x0C, XX11)
                        SMUF = 0x07
                        SMUD = Local1
                        ALIB (0x0C, XX11)
                    }
                    Case (0x04)
                    {
                        Divide (0x2328, 0x64, Local0, Local1)
                        Local1 *= 0x46
                        SMUF = 0x05
                        SMUD = Local1
                        ALIB (0x0C, XX11)
                        SMUF = 0x07
                        SMUD = Local1
                        ALIB (0x0C, XX11)
                    }
                    Case (0x05)
                    {
                        Divide (0x2328, 0x64, Local0, Local1)
                        Local1 *= 0x37
                        SMUF = 0x05
                        SMUD = Local1
                        ALIB (0x0C, XX11)
                        SMUF = 0x07
                        SMUD = Local1
                        ALIB (0x0C, XX11)
                    }
                    Case (0x06)
                    {
                        Divide (0x2328, 0x64, Local0, Local1)
                        Local1 *= 0x28
                        SMUF = 0x05
                        SMUD = Local1
                        ALIB (0x0C, XX11)
                        SMUF = 0x07
                        SMUD = Local1
                        ALIB (0x0C, XX11)
                    }
                    Case (0x07)
                    {
                        Divide (0x2328, 0x64, Local0, Local1)
                        Local1 *= 0x28
                        SMUF = 0x05
                        SMUD = Local1
                        ALIB (0x0C, XX11)
                        SMUF = 0x07
                        SMUD = Local1
                        ALIB (0x0C, XX11)
                    }
                    Case (0x08)
                    {
                        Divide (0x2328, 0x64, Local0, Local1)
                        Local1 *= 0x28
                        SMUF = 0x05
                        SMUD = Local1
                        ALIB (0x0C, XX11)
                        SMUF = 0x07
                        SMUD = Local1
                        ALIB (0x0C, XX11)
                    }
                    Case (0x09)
                    {
                        Divide (0x2328, 0x64, Local0, Local1)
                        Local1 *= 0x28
                        SMUF = 0x05
                        SMUD = Local1
                        ALIB (0x0C, XX11)
                        SMUF = 0x07
                        SMUD = Local1
                        ALIB (0x0C, XX11)
                    }

                }
            }

            Method (PTAP, 0, Serialized)
            {
                Name (XX11, Buffer (0x07) {})
                CreateWordField (XX11, Zero, SSZE)
                CreateByteField (XX11, 0x02, SMUF)
                CreateDWordField (XX11, 0x03, SMUD)
                SSZE = 0x07
                Switch (PCVL)
                {
                    Case (Zero)
                    {
                        SMUF = 0x05
                        SMUD = 0x32C8
                        ALIB (0x0C, XX11)
                        SMUF = 0x07
                        SMUD = 0x61A8
                        ALIB (0x0C, XX11)
                    }
                    Case (One)
                    {
                        SMUF = 0x05
                        SMUD = 0x32C8
                        ALIB (0x0C, XX11)
                        SMUF = 0x07
                        SMUD = 0x32C8
                        ALIB (0x0C, XX11)
                    }
                    Case (0x02)
                    {
                        SMUF = 0x05
                        SMUD = 0x32C8
                        ALIB (0x0C, XX11)
                        SMUF = 0x07
                        SMUD = 0x32C8
                        ALIB (0x0C, XX11)
                    }
                    Case (0x03)
                    {
                        Divide (0x32C8, 0x64, Local0, Local1)
                        Local1 *= 0x55
                        SMUF = 0x05
                        SMUD = Local1
                        ALIB (0x0C, XX11)
                        SMUF = 0x07
                        SMUD = Local1
                        ALIB (0x0C, XX11)
                    }
                    Case (0x04)
                    {
                        Divide (0x32C8, 0x64, Local0, Local1)
                        Local1 *= 0x46
                        SMUF = 0x05
                        SMUD = Local1
                        ALIB (0x0C, XX11)
                        SMUF = 0x07
                        SMUD = Local1
                        ALIB (0x0C, XX11)
                    }
                    Case (0x05)
                    {
                        Divide (0x32C8, 0x64, Local0, Local1)
                        Local1 *= 0x37
                        SMUF = 0x05
                        SMUD = Local1
                        ALIB (0x0C, XX11)
                        SMUF = 0x07
                        SMUD = Local1
                        ALIB (0x0C, XX11)
                    }
                    Case (0x06)
                    {
                        Divide (0x32C8, 0x64, Local0, Local1)
                        Local1 *= 0x28
                        SMUF = 0x05
                        SMUD = Local1
                        ALIB (0x0C, XX11)
                        SMUF = 0x07
                        SMUD = Local1
                        ALIB (0x0C, XX11)
                    }
                    Case (0x07)
                    {
                        Divide (0x32C8, 0x64, Local0, Local1)
                        Local1 *= 0x28
                        SMUF = 0x05
                        SMUD = Local1
                        ALIB (0x0C, XX11)
                        SMUF = 0x07
                        SMUD = Local1
                        ALIB (0x0C, XX11)
                    }
                    Case (0x08)
                    {
                        Divide (0x32C8, 0x64, Local0, Local1)
                        Local1 *= 0x28
                        SMUF = 0x05
                        SMUD = Local1
                        ALIB (0x0C, XX11)
                        SMUF = 0x07
                        SMUD = Local1
                        ALIB (0x0C, XX11)
                    }
                    Case (0x09)
                    {
                        Divide (0x32C8, 0x64, Local0, Local1)
                        Local1 *= 0x28
                        SMUF = 0x05
                        SMUD = Local1
                        ALIB (0x0C, XX11)
                        SMUF = 0x07
                        SMUD = Local1
                        ALIB (0x0C, XX11)
                    }

                }
            }

            Method (PTAQ, 0, Serialized)
            {
                Name (XX11, Buffer (0x07) {})
                CreateWordField (XX11, Zero, SSZE)
                CreateByteField (XX11, 0x02, SMUF)
                CreateDWordField (XX11, 0x03, SMUD)
                SSZE = 0x07
                Switch (PCVL)
                {
                    Case (Zero)
                    {
                        SMUF = 0x05
                        SMUD = 0x2710
                        ALIB (0x0C, XX11)
                        SMUF = 0x07
                        SMUD = 0x61A8
                        ALIB (0x0C, XX11)
                    }
                    Case (One)
                    {
                        SMUF = 0x05
                        SMUD = 0x2710
                        ALIB (0x0C, XX11)
                        SMUF = 0x07
                        SMUD = 0x2710
                        ALIB (0x0C, XX11)
                    }
                    Case (0x02)
                    {
                        SMUF = 0x05
                        SMUD = 0x2710
                        ALIB (0x0C, XX11)
                        SMUF = 0x07
                        SMUD = 0x2710
                        ALIB (0x0C, XX11)
                    }
                    Case (0x03)
                    {
                        Divide (0x2710, 0x64, Local0, Local1)
                        Local1 *= 0x55
                        SMUF = 0x05
                        SMUD = Local1
                        ALIB (0x0C, XX11)
                        SMUF = 0x07
                        SMUD = Local1
                        ALIB (0x0C, XX11)
                    }
                    Case (0x04)
                    {
                        Divide (0x2710, 0x64, Local0, Local1)
                        Local1 *= 0x46
                        SMUF = 0x05
                        SMUD = Local1
                        ALIB (0x0C, XX11)
                        SMUF = 0x07
                        SMUD = Local1
                        ALIB (0x0C, XX11)
                    }
                    Case (0x05)
                    {
                        Divide (0x2710, 0x64, Local0, Local1)
                        Local1 *= 0x37
                        SMUF = 0x05
                        SMUD = Local1
                        ALIB (0x0C, XX11)
                        SMUF = 0x07
                        SMUD = Local1
                        ALIB (0x0C, XX11)
                    }
                    Case (0x06)
                    {
                        Divide (0x2710, 0x64, Local0, Local1)
                        Local1 *= 0x28
                        SMUF = 0x05
                        SMUD = Local1
                        ALIB (0x0C, XX11)
                        SMUF = 0x07
                        SMUD = Local1
                        ALIB (0x0C, XX11)
                    }
                    Case (0x07)
                    {
                        Divide (0x2710, 0x64, Local0, Local1)
                        Local1 *= 0x28
                        SMUF = 0x05
                        SMUD = Local1
                        ALIB (0x0C, XX11)
                        SMUF = 0x07
                        SMUD = Local1
                        ALIB (0x0C, XX11)
                    }
                    Case (0x08)
                    {
                        Divide (0x2710, 0x64, Local0, Local1)
                        Local1 *= 0x28
                        SMUF = 0x05
                        SMUD = Local1
                        ALIB (0x0C, XX11)
                        SMUF = 0x07
                        SMUD = Local1
                        ALIB (0x0C, XX11)
                    }
                    Case (0x09)
                    {
                        Divide (0x2710, 0x64, Local0, Local1)
                        Local1 *= 0x28
                        SMUF = 0x05
                        SMUD = Local1
                        ALIB (0x0C, XX11)
                        SMUF = 0x07
                        SMUD = Local1
                        ALIB (0x0C, XX11)
                    }

                }
            }

            OperationRegion (ECCD, SystemMemory, 0xFE0B0800, 0x1000)
            Field (ECCD, AnyAcc, Lock, Preserve)
            {
                Offset (0x580), 
                Offset (0x582), 
                ECTB,   1, 
                ECTE,   1, 
                Offset (0x583), 
                ERN1,   8, 
                ERN2,   8, 
                ERN3,   8, 
                ERN4,   8, 
                ERN5,   8, 
                ERN6,   8, 
                ERN7,   8, 
                ERN8,   8, 
                ECMD,   8, 
                EDT1,   8, 
                EDT2,   8, 
                EDT3,   8, 
                EDT4,   8, 
                EDT5,   8, 
                    ,   1
            }

            Mutex (CSMX, 0x00)
            Method (ERCD, 1, Serialized)
            {
                Acquire (CSMX, 0xFFFF)
                Name (ESRC, 0x64)
                ECTB = One
                ECMD = DerefOf (Arg0 [Zero])
                EDT1 = DerefOf (Arg0 [One])
                EDT2 = DerefOf (Arg0 [0x02])
                ECTE = One
                While (((ESRC != Zero) && (ECTE != Zero)))
                {
                    Sleep (0x0A)
                    ESRC -= One
                }

                Local0 = ERN1 /* \_SB_.PCI0.LPC0.EC0_.ERN1 */
                ECTB = Zero
                Release (CSMX)
                Return (Local0)
            }

            Method (SBAT, 2, NotSerialized)
            {
                Local0 = Buffer (0x08) {}
                Local0 [Zero] = Arg0
                Local0 [One] = 0x16
                Local0 [0x02] = Arg1
                Local0 [0x03] = Zero
                Local0 [0x04] = Zero
                ESMC (Local0)
            }

            Method (SBA2, 2, NotSerialized)
            {
                Local0 = Buffer (0x08) {}
                Local0 [Zero] = Arg0
                Local0 [One] = 0x36
                Local0 [0x02] = Arg1
                Local0 [0x03] = Zero
                Local0 [0x04] = Zero
                ESMC (Local0)
            }

            Mutex (ESCX, 0x00)
            Method (ESMC, 1, NotSerialized)
            {
                Acquire (ESCX, 0xFFFF)
                Name (ESRC, 0x05)
                If ((DerefOf (Arg0 [0x04]) & One))
                {
                    SMD0 = Zero
                }

                SMAD = DerefOf (Arg0 [One])
                SMCM = DerefOf (Arg0 [0x02])
                SMBN = DerefOf (Arg0 [0x03])
                Local4 = DerefOf (Arg0 [0x04])
                Local5 = Zero
                BCNT = Local4
                If ((Local4 != Zero))
                {
                    Local1 = SMD0 /* \_SB_.PCI0.LPC0.EC0_.SMD0 */
                    While (~(Local4 == Local5))
                    {
                        Local1 [Local5] = DerefOf (Arg0 [(0x05 + Local5)]
                            )
                        Local5 += One
                    }

                    SMD0 = Local1
                }

                SMPR = DerefOf (Arg0 [Zero])
                While ((~(ToInteger (ESRC) == Zero) && ~(ToInteger (
                    (SMST & 0x80)) == 0x80)))
                {
                    Sleep (0x14)
                    ESRC -= One
                }

                If ((ToInteger (SMST) == 0x80))
                {
                    ESMB = SMD0 /* \_SB_.PCI0.LPC0.EC0_.SMD0 */
                    ESMS = BCNT /* \_SB_.PCI0.LPC0.EC0_.BCNT */
                }
                Else
                {
                    ESMS = 0xFF
                }

                Release (ESCX)
            }
        }

        Scope (EC0)
        {
            Mutex (BAMT, 0x00)
            Name (SMDW, Zero)
            Method (ECSM, 3, NotSerialized)
            {
                Local0 = Acquire (BAMT, 0x0064)
                SMAD = Arg1
                SMCM = Arg2
                SMST = Zero
                SMPR = Arg0
                Local0 = One
                Local1 = Zero
                While ((0x64 > Local1))
                {
                    Sleep (One)
                    Local1++
                    If ((SMST && 0x80))
                    {
                        Break
                    }
                }

                If ((Local1 >= 0x64))
                {
                    Local0 = Zero
                }

                Release (BAMT)
                Return (Local0)
            }

            Method (GBWD, 2, NotSerialized)
            {
                Name (BFWB, Buffer (0x20) {})
                CreateWordField (BFWB, Zero, FB10)
                Local0 = 0x14
                While ((Local0 > Zero))
                {
                    Local1 = ECSM (0x09, Arg0, Arg1)
                    If (Local1)
                    {
                        Break
                    }

                    Local0--
                    Sleep (0x0A)
                }

                If ((Local0 > Zero))
                {
                    BFWB = SMD0 /* \_SB_.PCI0.LPC0.EC0_.SMD0 */
                }
                Else
                {
                    FB10 = Zero
                }

                SMDW = FB10 /* \_SB_.PCI0.LPC0.EC0_.GBWD.FB10 */
            }

            Method (BSHK, 0, NotSerialized)
            {
                If (ECOK ())
                {
                    If (_OSI ("Windows 2006"))
                    {
                        OSTY = One
                    }

                    If (_OSI ("Windows 2006 SP1"))
                    {
                        OSTY = One
                    }

                    If (_OSI ("Windows 2009"))
                    {
                        OSTY = 0x03
                    }

                    If (_OSI ("Windows 2012"))
                    {
                        OSTY = 0x04
                        WLAT = One
                    }

                    If (_OSI ("Windows 2013"))
                    {
                        OSTY = 0x05
                    }

                    If (_OSI ("Windows 2015"))
                    {
                        OSTY = 0x06
                    }

                    If (_OSI ("Linux"))
                    {
                        OSTY = 0x02
                    }
                }
            }

            Method (GBMN, 1, NotSerialized)
            {
                Name (CMMA, "         ")
                Name (BFWB, Buffer (0x20) {})
                CreateField (BFWB, Zero, 0x40, FB70)
                If (ECOK ())
                {
                    Local0 = ECSM (0x0B, Arg0, 0x21)
                    If (Local0)
                    {
                        BFWB = SMD0 /* \_SB_.PCI0.LPC0.EC0_.SMD0 */
                        CMMA = FB70 /* \_SB_.PCI0.LPC0.EC0_.GBMN.FB70 */
                    }
                    Else
                    {
                        CMMA = "PABAS0241231"
                    }
                }
                Else
                {
                    CMMA = "PABAS0241231"
                }

                Return (CMMA) /* \_SB_.PCI0.LPC0.EC0_.GBMN.CMMA */
            }

            Method (GUBS, 1, NotSerialized)
            {
                Name (BRSN, "      ")
                If (ECOK ())
                {
                    BRSN = ToDecimalString (BDC0)
                }
                Else
                {
                    BRSN = "41167"
                }

                Return (BRSN) /* \_SB_.PCI0.LPC0.EC0_.GUBS.BRSN */
            }

            Method (GUBT, 1, NotSerialized)
            {
                Local0 = "Li-Ion"
                Return (Local0)
            }

            Method (GUBI, 1, NotSerialized)
            {
                Name (BRMN, "UNKNOWN ")
                Name (BFWB, Buffer (0x20) {})
                CreateField (BFWB, Zero, 0x60, FBB0)
                If (ECOK ())
                {
                    Local0 = ECSM (0x0B, Arg0, 0x20)
                    If (Local0)
                    {
                        BFWB = SMD0 /* \_SB_.PCI0.LPC0.EC0_.SMD0 */
                        BRMN = FBB0 /* \_SB_.PCI0.LPC0.EC0_.GUBI.FBB0 */
                    }
                }

                Return (BRMN) /* \_SB_.PCI0.LPC0.EC0_.GUBI.BRMN */
            }

            Method (GUBC, 1, NotSerialized)
            {
                GBWD (Arg0, 0x17)
                Local0 = SMDW /* \_SB_.PCI0.LPC0.EC0_.SMDW */
                Return (Local0)
            }
        }

        Device (BAT1)
        {
            Name (_HID, EisaId ("PNP0C0A") /* Control Method Battery */)  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
            {
                _SB
            })
            Name (BMDL, Zero)
            Name (BASC, One)
            Name (BFFW, Zero)
            Name (BMLT, "11111111")
            Name (BML0, "11111111")
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                ^^EC0.BSHK ()
                If (ECOK ())
                {
                    If (^^EC0.BOL0)
                    {
                        Sleep (0x14)
                        Return (0x1F)
                    }
                    Else
                    {
                        Sleep (0x14)
                        Return (0x0F)
                    }
                }
                Else
                {
                    Sleep (0x14)
                    Return (0x1F)
                }
            }

            Method (_BIF, 0, NotSerialized)  // _BIF: Battery Information
            {
                Return (BIFX (Zero))
            }

            Method (_BIX, 0, NotSerialized)  // _BIX: Battery Information Extended
            {
                Return (BIFX (One))
            }

            Method (BIFX, 1, NotSerialized)
            {
                Name (STAX, Package (0x14)
                {
                    Zero, 
                    One, 
                    0x1770, 
                    0x1770, 
                    One, 
                    0x2A30, 
                    0x0258, 
                    0xB4, 
                    0x08, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    0x0108, 
                    0x0EC4, 
                    "PABAS0241231", 
                    "41167", 
                    "Li-Ion", 
                    "LENOVO "
                })
                Name (STAF, Package (0x0D)
                {
                    One, 
                    0x1770, 
                    0x1770, 
                    One, 
                    0x2A30, 
                    0x0258, 
                    0xB4, 
                    0x0108, 
                    0x0EC4, 
                    "PABAS0241231", 
                    "41167", 
                    "Li-Ion", 
                    "LENOVO "
                })
                STAX [0x10] = ^^EC0.GBMN (0x16)
                STAX [0x11] = ^^EC0.GUBS (0x16)
                STAX [0x12] = ^^EC0.GUBT (0x16)
                STAX [0x13] = ^^EC0.GUBI (0x16)
                STAX [0x08] = ^^EC0.GUBC (0x16)
                If (ECOK ())
                {
                    BFFW = ^^EC0.ORRF /* \_SB_.PCI0.LPC0.EC0_.ORRF */
                    If ((^^EC0.BAM0 == Zero))
                    {
                        BASC = 0x0A
                    }

                    STAX [One] = ^^EC0.BAM0 /* \_SB_.PCI0.LPC0.EC0_.BAM0 */
                    Local0 = ^^EC0.BDC0 /* \_SB_.PCI0.LPC0.EC0_.BDC0 */
                    BMDL = Local0
                    STAX [0x02] = (^^EC0.BDC0 * BASC)
                    Sleep (0x14)
                    STAX [0x05] = ^^EC0.BDV0 /* \_SB_.PCI0.LPC0.EC0_.BDV0 */
                    Sleep (0x14)
                    If ((BFFW == One))
                    {
                        Local2 = ^^EC0.BFCB /* \_SB_.PCI0.LPC0.EC0_.BFCB */
                    }
                    Else
                    {
                        Local2 = ^^EC0.BFC0 /* \_SB_.PCI0.LPC0.EC0_.BFC0 */
                    }

                    Local2 = (Local2 * BASC)
                    Sleep (0x14)
                    STAX [0x03] = Local2
                    Divide (Local2, 0x64, Local0, Local1)
                    Local1 *= 0x0A
                    STAX [0x06] = Local1
                    Divide (Local2, 0x64, Local0, Local1)
                    Local1 *= 0x03
                    STAX [0x07] = Local1
                    STAF [Zero] = DerefOf (STAX [One])
                    STAF [One] = DerefOf (STAX [0x02])
                    STAF [0x02] = DerefOf (STAX [0x03])
                    STAF [0x03] = DerefOf (STAX [0x04])
                    STAF [0x04] = DerefOf (STAX [0x05])
                    STAF [0x05] = DerefOf (STAX [0x06])
                    STAF [0x06] = DerefOf (STAX [0x07])
                    STAF [0x07] = DerefOf (STAX [0x0E])
                    STAF [0x08] = DerefOf (STAX [0x0F])
                    STAF [0x09] = DerefOf (STAX [0x10])
                    STAF [0x0A] = DerefOf (STAX [0x11])
                    STAF [0x0B] = DerefOf (STAX [0x12])
                    STAF [0x0C] = DerefOf (STAX [0x13])
                    If ((Arg0 == One))
                    {
                        Return (STAX) /* \_SB_.PCI0.LPC0.BAT1.BIFX.STAX */
                    }
                    Else
                    {
                        Return (STAF) /* \_SB_.PCI0.LPC0.BAT1.BIFX.STAF */
                    }
                }
            }

            Method (_BST, 0, NotSerialized)  // _BST: Battery Status
            {
                Name (PBST, Package (0x04)
                {
                    Zero, 
                    Ones, 
                    Ones, 
                    0x1770
                })
                If (ECOK ())
                {
                    PBST [Zero] = ^^EC0.BST0 /* \_SB_.PCI0.LPC0.EC0_.BST0 */
                    Sleep (0x14)
                    If ((^^EC0.BAC0 >> 0x0F))
                    {
                        Local4 = ((~^^EC0.BAC0 & 0xFFFF) + One)
                    }
                    Else
                    {
                        Local4 = ^^EC0.BAC0 /* \_SB_.PCI0.LPC0.EC0_.BAC0 */
                    }

                    If ((^^EC0.BAM0 == Zero))
                    {
                        Local4 = ((Local4 * ^^EC0.BPV0) / 0x03E8)
                    }

                    PBST [One] = Local4
                    Sleep (0x14)
                    PBST [0x02] = (^^EC0.BRC0 * BASC)
                    Sleep (0x14)
                    PBST [0x03] = ^^EC0.BPV0 /* \_SB_.PCI0.LPC0.EC0_.BPV0 */
                    Sleep (0x14)
                    If ((^^EC0.BDC0 != BMDL))
                    {
                        Notify (BAT1, 0x81) // Information Change
                    }
                }

                Return (PBST) /* \_SB_.PCI0.LPC0.BAT1._BST.PBST */
            }

            Method (_BTP, 1, NotSerialized)  // _BTP: Battery Trip Point
            {
                Local0 = (Arg0 / BASC)
                ^^EC0.BTPB = Local0
            }
        }

        Device (ACAD)
        {
            Name (_HID, "ACPI0003" /* Power Source Device */)  // _HID: Hardware ID
            Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
            {
                _SB
            })
            Name (XX00, Buffer (0x03) {})
            Name (ACDC, 0xFF)
            Method (_PSR, 0, NotSerialized)  // _PSR: Power Source
            {
                Local0 = ^^EC0.ADPT /* \_SB_.PCI0.LPC0.EC0_.ADPT */
                If (((Local0 != ACDC) || (ACDC == 0xFF)))
                {
                    CreateWordField (XX00, Zero, SSZE)
                    CreateByteField (XX00, 0x02, ACST)
                    SSZE = 0x03
                    If (Local0)
                    {
                        AFN4 (One)
                        ACST = Zero
                    }
                    Else
                    {
                        AFN4 (0x02)
                        ACST = One
                    }

                    ALIB (One, XX00)
                    ACDC = Local0
                }

                Return (Local0)
            }
        }

        Method (ECFG, 1, NotSerialized)
        {
            If ((Arg0 == One))
            {
                ^EC0.ECRD = One
            }
            Else
            {
                ^EC0.ECRD = Zero
            }
        }
    }

    Name (PSD1, Zero)
    Scope (_SB.PCI0.LPC0.EC0)
    {
        OperationRegion (ECF2, EmbeddedControl, Zero, 0xFF)
        Field (ECF2, ByteAcc, Lock, Preserve)
        {
            VCMD,   8, 
            VDAT,   8, 
            VSTA,   8
        }

        OperationRegion (GGPI, SystemMemory, 0xFED81600, 0xFF)
        Field (GGPI, AnyAcc, NoLock, Preserve)
        {
            Offset (0x64), 
            Offset (0x66), 
            G89I,   1
        }

        Device (ITSD)
        {
            Name (_HID, "IDEA2004")  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }
        }

        Device (CYMC)
        {
            Name (_HID, "YMC2017")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }
        }

        Device (VPC0)
        {
            Name (_HID, "VPC2004")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Name (_VPC, Zero)
            Name (VPCD, Zero)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }

            Method (DYTC, 1, Serialized)
            {
                Local0 = Zero
                Local1 = (Arg0 & 0x01FF)
                Local2 = (Arg0 & 0xFFFFFE00)
                Switch (Local1)
                {
                    Case (Zero)
                    {
                        If (!Local2)
                        {
                            Local0 |= One
                            Local0 |= 0x0100
                            Local0 |= Zero
                            Local0 |= 0x50000000
                        }
                        Else
                        {
                            Local0 |= Zero
                            Local0 |= 0x04
                        }
                    }
                    Case (One)
                    {
                        Local3 = (Local2 & 0xF000)
                        Local5 = (Local2 & 0x00100000)
                        Switch (Local3)
                        {
                            Case (Zero)
                            {
                                If ((Local5 == 0x00100000))
                                {
                                    ITSV |= One
                                    ODV0 = One
                                    Local0 |= One
                                }
                                Else
                                {
                                    Local0 |= Zero
                                    Local0 |= 0x0A
                                }
                            }
                            Case (0x3000)
                            {
                                Local4 = (Local2 & 0x000F0000)
                                Switch (Local4)
                                {
                                    Case (Zero)
                                    {
                                        If ((Local5 == 0x00100000))
                                        {
                                            ITSV |= 0x08
                                            ITSY = Zero
                                        }
                                        Else
                                        {
                                            ITSV &= 0xFFFFFFF7
                                            ITSY = Zero
                                        }

                                        Local0 |= One
                                    }
                                    Case (0x00010000)
                                    {
                                        If ((Local5 == 0x00100000))
                                        {
                                            ITSV |= 0x08
                                            ITSY = 0x10
                                        }
                                        Else
                                        {
                                            ITSV &= 0xFFFFFFF7
                                            ITSY = Zero
                                        }

                                        Local0 |= One
                                    }
                                    Case (0x000F0000)
                                    {
                                        ITSV &= 0xFFFFFFF7
                                        ITSY = Zero
                                        Local0 |= One
                                    }
                                    Default
                                    {
                                        Local0 |= Zero
                                        Local0 |= 0x0A
                                    }

                                }
                            }
                            Case (0x4000)
                            {
                                If ((Local5 == 0x00100000))
                                {
                                    ITSV |= 0x10
                                }
                                Else
                                {
                                    ITSV &= 0xFFFFFFEF
                                    ODV4 = Zero
                                }

                                Local0 |= One
                            }
                            Case (0xB000)
                            {
                                Local4 = (Local2 & 0x000F0000)
                                Switch (Local4)
                                {
                                    Case (Zero)
                                    {
                                        If ((Local5 == 0x00100000))
                                        {
                                            ITSV |= 0x0800
                                            ITSM = Zero
                                        }
                                        Else
                                        {
                                            ITSV &= 0xFFFFF7FF
                                            ITSM = Zero
                                        }

                                        Local0 |= One
                                    }
                                    Case (0x00010000)
                                    {
                                        If ((Local5 == 0x00100000))
                                        {
                                            ITSV |= 0x0800
                                            ITSM = 0x10
                                        }
                                        Else
                                        {
                                            ITSV &= 0xFFFFF7FF
                                            ITSM = Zero
                                        }

                                        Local0 |= One
                                    }
                                    Case (0x00020000)
                                    {
                                        If ((Local5 == 0x00100000))
                                        {
                                            ITSV |= 0x0800
                                            ITSM = 0x20
                                        }
                                        Else
                                        {
                                            ITSV &= 0xFFFFF7FF
                                            ITSM = Zero
                                        }

                                        Local0 |= One
                                    }
                                    Case (0x00030000)
                                    {
                                        If ((Local5 == 0x00100000))
                                        {
                                            ITSV |= 0x0800
                                            ITSM = 0x30
                                        }
                                        Else
                                        {
                                            ITSV &= 0xFFFFF7FF
                                            ITSM = Zero
                                        }

                                        Local0 |= One
                                    }
                                    Case (0x000F0000)
                                    {
                                        ITSV &= 0xFFFFF7FF
                                        ITSM = Zero
                                        Local0 |= One
                                    }
                                    Default
                                    {
                                        Local0 |= Zero
                                        Local0 |= 0x0A
                                    }

                                }
                            }
                            Case (0x5000)
                            {
                                If ((Local5 == 0x00100000))
                                {
                                    ITSV |= 0x20
                                    ITSM = 0xF0
                                }
                                Else
                                {
                                    ITSV &= 0xFFFFFFDF
                                    OD10 = Zero
                                }

                                Local0 |= One
                            }
                            Case (0x6000)
                            {
                                If ((Local5 == 0x00100000))
                                {
                                    ITSV |= 0x40
                                    ITSM = 0xF0
                                }
                                Else
                                {
                                    ITSV &= 0xFFFFFFBF
                                    OD11 = Zero
                                }

                                Local0 |= One
                            }
                            Case (Zero)
                            {
                                Local0 |= Zero
                                Local0 |= 0x02
                            }
                            Default
                            {
                                Local0 |= Zero
                                Local0 |= 0x02
                            }

                        }

                        If (((ITSV << 0x10) & 0x00100000))
                        {
                            Local0 |= 0x0400
                            Local0 |= 0xF000
                            ODV4 = One
                        }
                        ElseIf (((ITSV << 0x10) & 0x00080000))
                        {
                            ODV1 = Zero
                            ODV2 = Zero
                            ODV3 = Zero
                            Local0 |= 0x0300
                            Switch (ITSY)
                            {
                                Case (Zero)
                                {
                                    MYTA ()
                                    Local0 |= Zero
                                    ODV1 = One
                                }
                                Case (0x10)
                                {
                                    MYTE ()
                                    Local0 |= 0x1000
                                    ODV2 = One
                                }
                                Case (0x20)
                                {
                                    Local0 |= 0x2000
                                    ODV3 = One
                                }

                            }
                        }
                        ElseIf (((ITSV << 0x10) & 0x08000000))
                        {
                            ODV6 = Zero
                            ODV7 = Zero
                            ODV8 = Zero
                            ODV9 = Zero
                            Local0 |= 0x0B00
                            Switch (ITSM)
                            {
                                Case (Zero)
                                {
                                    Local0 |= Zero
                                    ODV6 = One
                                }
                                Case (0x10)
                                {
                                    MCBT ()
                                    Local0 |= 0x1000
                                    ODV7 = One
                                    QTMD = One
                                    AUPM = Zero
                                    AQMD = Zero
                                    STMD = Zero
                                }
                                Case (0x20)
                                {
                                    MCPF ()
                                    Local0 |= 0x2000
                                    ODV8 = One
                                    QTMD = Zero
                                    AUPM = Zero
                                    AQMD = Zero
                                    STMD = Zero
                                }
                                Case (0x30)
                                {
                                    MCBT ()
                                    Local0 |= 0x3000
                                    ODV9 = One
                                    QTMD = One
                                    AUPM = Zero
                                    AQMD = Zero
                                    STMD = Zero
                                }

                            }
                        }
                        ElseIf (((ITSV << 0x10) & 0x00200000))
                        {
                            Local0 |= 0x0500
                            Local0 |= 0xF000
                            MCAP ()
                            QTMD = Zero
                            AUPM = One
                            AQMD = Zero
                            STMD = Zero
                            OD10 = One
                        }
                        ElseIf (((ITSV << 0x10) & 0x00400000))
                        {
                            Local0 |= 0x0600
                            Local0 |= 0xF000
                            MCAQ ()
                            QTMD = Zero
                            AUPM = Zero
                            AQMD = One
                            STMD = Zero
                            OD11 = One
                        }
                        ElseIf (((ITSV << 0x10) & 0x10000000))
                        {
                            Local0 |= 0x0C00
                            Local0 |= 0xF000
                            ODVA = One
                        }
                        Else
                        {
                            MCAT ()
                            Local0 |= Zero
                            Local0 |= 0xF000
                            ODV0 = One
                            ODV7 = Zero
                            ODV8 = Zero
                            ODV9 = Zero
                            QTMD = Zero
                            AUPM = Zero
                            AQMD = Zero
                            STMD = One
                        }

                        Sleep (0x14)
                        WXMS (0x70, 0x55)
                        Local0 |= (ITSV << 0x10)
                    }
                    Case (0x02)
                    {
                        If (!Local2)
                        {
                            ODV0 = One
                            ODV4 = Zero
                            ODVA = Zero
                            If (((ITSV << 0x10) & 0x00100000))
                            {
                                Local0 |= 0x0400
                                Local0 |= 0xF000
                                ODV4 = One
                            }
                            ElseIf (((ITSV << 0x10) & 0x00080000))
                            {
                                ODV1 = Zero
                                ODV2 = Zero
                                ODV3 = Zero
                                Local0 |= 0x0300
                                Switch (ITSY)
                                {
                                    Case (Zero)
                                    {
                                        Local0 |= Zero
                                        ODV1 = One
                                    }
                                    Case (0x10)
                                    {
                                        Local0 |= 0x1000
                                        ODV2 = One
                                    }
                                    Case (0x20)
                                    {
                                        Local0 |= 0x2000
                                        ODV3 = One
                                    }

                                }
                            }
                            ElseIf (((ITSV << 0x10) & 0x08000000))
                            {
                                ODV6 = Zero
                                ODV7 = Zero
                                ODV8 = Zero
                                ODV9 = Zero
                                Local0 |= 0x0B00
                                Switch (ITSM)
                                {
                                    Case (Zero)
                                    {
                                        Local0 |= Zero
                                        ODV6 = One
                                    }
                                    Case (0x10)
                                    {
                                        Local0 |= 0x1000
                                        ODV7 = One
                                        QTMD = One
                                        AUPM = Zero
                                        AQMD = Zero
                                        STMD = Zero
                                    }
                                    Case (0x20)
                                    {
                                        Local0 |= 0x2000
                                        ODV8 = One
                                        QTMD = Zero
                                        AUPM = Zero
                                        AQMD = Zero
                                        STMD = Zero
                                    }
                                    Case (0x30)
                                    {
                                        Local0 |= 0x3000
                                        ODV9 = One
                                        QTMD = One
                                        AUPM = Zero
                                        AQMD = Zero
                                        STMD = Zero
                                    }

                                }
                            }
                            ElseIf (((ITSV << 0x10) & 0x00200000))
                            {
                                Local0 |= 0x0500
                                Local0 |= 0xF000
                                QTMD = Zero
                                AUPM = One
                                AQMD = Zero
                                STMD = Zero
                                OD10 = One
                            }
                            ElseIf (((ITSV << 0x10) & 0x00400000))
                            {
                                Local0 |= 0x0600
                                Local0 |= 0xF000
                                QTMD = Zero
                                AUPM = Zero
                                AQMD = One
                                STMD = Zero
                                OD11 = One
                            }
                            ElseIf (((ITSV << 0x10) & 0x10000000))
                            {
                                Local0 |= 0x0C00
                                Local0 |= 0xF000
                                ODVA = One
                            }
                            Else
                            {
                                Local0 |= Zero
                                Local0 |= 0xF000
                                ODV0 = One
                                ODV7 = Zero
                                ODV8 = Zero
                                ODV9 = Zero
                                QTMD = Zero
                                AUPM = Zero
                                AQMD = Zero
                                STMD = One
                            }

                            ITSV |= One
                            Local0 |= (ITSV << 0x10)
                            Local0 |= One
                        }
                        Else
                        {
                            Local0 |= Zero
                            Local0 |= 0x04
                        }
                    }
                    Case (0x03)
                    {
                        If (!Local2)
                        {
                            Local0 |= One
                            Local0 |= 0x00010000
                            Local0 |= 0x00080000
                            Local0 |= 0x00100000
                            Local0 |= 0x00200000
                            Local0 |= 0x00400000
                            Local0 |= 0x08000000
                        }
                        Else
                        {
                            Local0 |= Zero
                            Local0 |= 0x04
                        }
                    }
                    Case (0x0A)
                    {
                        If (!Local2)
                        {
                            Local0 |= One
                            Local0 |= 0x00010000
                        }
                        Else
                        {
                            Local0 |= Zero
                            Local0 |= 0x04
                        }
                    }
                    Case (0x04)
                    {
                        If (!Local2)
                        {
                            Local0 |= One
                            Local0 |= 0x00010000
                            Local0 |= 0x00020000
                        }
                        Else
                        {
                            Local0 |= Zero
                            Local0 |= 0x04
                        }
                    }
                    Case (0x06)
                    {
                        If (!Local2)
                        {
                            Local0 |= One
                            Local0 |= 0x00010000
                            Local0 |= 0x00020000
                            Local0 |= 0x00040000
                            Local0 |= 0x00080000
                        }
                        Else
                        {
                            Local0 |= Zero
                            Local0 |= 0x04
                        }
                    }
                    Case (0x07)
                    {
                        If (!Local2)
                        {
                            Local0 |= One
                            If (ODV6)
                            {
                                Local0 |= Zero
                            }
                            ElseIf (ODV7)
                            {
                                Local0 |= 0x00010000
                            }
                            ElseIf (ODV8)
                            {
                                Local0 |= 0x00020000
                            }
                            ElseIf (ODV9)
                            {
                                Local0 |= 0x00030000
                            }
                            Else
                            {
                                Local0 |= 0x000F0000
                            }
                        }
                        Else
                        {
                            Local0 |= Zero
                            Local0 |= 0x04
                        }
                    }
                    Case (0x09)
                    {
                        Local0 |= One
                        Local1 = Zero
                        Local1 = PLMN /* \PLMN */
                        Local1 <<= 0x10
                        Local0 |= Local1
                    }
                    Case (0x0100)
                    {
                        If (!Local2)
                        {
                            Local0 |= One
                            Local0 |= 0x00010000
                            Local0 |= 0x20000000
                        }
                        Else
                        {
                            Local0 |= Zero
                            Local0 |= 0x04
                        }
                    }
                    Case (0x01FF)
                    {
                        If (!Local2)
                        {
                            Local0 |= One
                            ITSV = One
                            ITSM = 0xF0
                            ITSY = 0xF0
                            ODV0 = One
                            ODV1 = Zero
                            ODV2 = Zero
                            ODV3 = Zero
                            ODV4 = Zero
                            OD10 = Zero
                            OD11 = Zero
                            ODV6 = Zero
                            ODV7 = Zero
                            ODV8 = Zero
                            ODV9 = Zero
                            MCAT ()
                            QTMD = Zero
                            AUPM = Zero
                            AQMD = Zero
                            STMD = One
                            WXMS (0x70, 0x55)
                            Local0 |= Zero
                            Local0 |= 0xF000
                            Local0 |= (ITSV << 0x10)
                        }
                        Else
                        {
                            Local0 |= Zero
                            Local0 |= 0x04
                        }
                    }
                    Default
                    {
                        Local0 |= Zero
                        Local0 |= 0x04
                    }

                }

                Return (Local0)
            }

            Method (MCAT, 0, Serialized)
            {
                Name (XX11, Buffer (0x07) {})
                CreateWordField (XX11, Zero, SSZE)
                CreateByteField (XX11, 0x02, SMUF)
                CreateDWordField (XX11, 0x03, SMUD)
                SSZE = 0x07
                SMUF = 0x05
                SMUD = 0x2AF8
                ALIB (0x0C, XX11)
                SMUF = 0x06
                SMUD = 0x7530
                ALIB (0x0C, XX11)
                SMUF = 0x07
                SMUD = 0x61A8
                ALIB (0x0C, XX11)
                SMUF = 0x08
                SMUD = 0x05
                ALIB (0x0C, XX11)
                SMUF = One
                SMUD = 0xC8
                ALIB (0x0C, XX11)
            }

            Method (MCBT, 0, Serialized)
            {
                Name (XX11, Buffer (0x07) {})
                CreateWordField (XX11, Zero, SSZE)
                CreateByteField (XX11, 0x02, SMUF)
                CreateDWordField (XX11, 0x03, SMUD)
                SSZE = 0x07
                SMUF = 0x05
                SMUD = 0x2328
                ALIB (0x0C, XX11)
                SMUF = 0x06
                SMUD = 0x61A8
                ALIB (0x0C, XX11)
                SMUF = 0x07
                SMUD = 0x61A8
                ALIB (0x0C, XX11)
                SMUF = 0x08
                SMUD = 0x05
                ALIB (0x0C, XX11)
                SMUF = One
                SMUD = 0xC8
                ALIB (0x0C, XX11)
            }

            Method (MCAP, 0, Serialized)
            {
                Name (XX11, Buffer (0x07) {})
                CreateWordField (XX11, Zero, SSZE)
                CreateByteField (XX11, 0x02, SMUF)
                CreateDWordField (XX11, 0x03, SMUD)
                SSZE = 0x07
                SMUF = 0x05
                SMUD = 0x32C8
                ALIB (0x0C, XX11)
                SMUF = 0x06
                SMUD = 0x7530
                ALIB (0x0C, XX11)
                SMUF = 0x07
                SMUD = 0x61A8
                ALIB (0x0C, XX11)
                SMUF = 0x08
                SMUD = 0x05
                ALIB (0x0C, XX11)
                SMUF = One
                SMUD = 0xC8
                ALIB (0x0C, XX11)
            }

            Method (MCAQ, 0, Serialized)
            {
                Name (XX11, Buffer (0x07) {})
                CreateWordField (XX11, Zero, SSZE)
                CreateByteField (XX11, 0x02, SMUF)
                CreateDWordField (XX11, 0x03, SMUD)
                SSZE = 0x07
                SMUF = 0x05
                SMUD = 0x2710
                ALIB (0x0C, XX11)
                SMUF = 0x06
                SMUD = 0x7530
                ALIB (0x0C, XX11)
                SMUF = 0x07
                SMUD = 0x61A8
                ALIB (0x0C, XX11)
                SMUF = 0x08
                SMUD = 0x05
                ALIB (0x0C, XX11)
                SMUF = One
                SMUD = 0xC8
                ALIB (0x0C, XX11)
            }

            Method (MCPF, 0, Serialized)
            {
                Name (XX11, Buffer (0x07) {})
                CreateWordField (XX11, Zero, SSZE)
                CreateByteField (XX11, 0x02, SMUF)
                CreateDWordField (XX11, 0x03, SMUD)
                SSZE = 0x07
                SMUF = 0x05
                SMUD = 0x3A98
                ALIB (0x0C, XX11)
                SMUF = 0x06
                SMUD = 0x7530
                ALIB (0x0C, XX11)
                SMUF = 0x07
                SMUD = 0x61A8
                ALIB (0x0C, XX11)
                SMUF = 0x08
                SMUD = 0x0A
                ALIB (0x0C, XX11)
                SMUF = One
                SMUD = 0xC8
                ALIB (0x0C, XX11)
            }

            Method (MYTA, 0, Serialized)
            {
                Name (XX11, Buffer (0x07) {})
                CreateWordField (XX11, Zero, SSZE)
                CreateByteField (XX11, 0x02, SMUF)
                CreateDWordField (XX11, 0x03, SMUD)
                SSZE = 0x07
                SMUF = 0x05
                SMUD = 0x2328
                ALIB (0x0C, XX11)
                SMUF = 0x06
                SMUD = 0x61A8
                ALIB (0x0C, XX11)
                SMUF = 0x07
                SMUD = 0x61A8
                ALIB (0x0C, XX11)
                SMUF = 0x08
                SMUD = 0x05
                ALIB (0x0C, XX11)
                SMUF = One
                SMUD = 0xC8
                ALIB (0x0C, XX11)
            }

            Method (MYTE, 0, Serialized)
            {
                Name (XX11, Buffer (0x07) {})
                CreateWordField (XX11, Zero, SSZE)
                CreateByteField (XX11, 0x02, SMUF)
                CreateDWordField (XX11, 0x03, SMUD)
                SSZE = 0x07
                SMUF = 0x05
                SMUD = 0x2328
                ALIB (0x0C, XX11)
                SMUF = 0x06
                SMUD = 0x61A8
                ALIB (0x0C, XX11)
                SMUF = 0x07
                SMUD = 0x61A8
                ALIB (0x0C, XX11)
                SMUF = 0x08
                SMUD = 0x05
                ALIB (0x0C, XX11)
                SMUF = One
                SMUD = 0xC8
                ALIB (0x0C, XX11)
            }

            Method (_CFG, 0, NotSerialized)
            {
                If ((EMWK == Zero))
                {
                    EMWK = One
                }

                Local0 = Zero
                Local1 = Zero
                Local1 <<= 0x18
                Local0 |= Local1
                Local0 |= 0x04000000
                Local0 |= 0x08000000
                Local0 |= 0x10000000
                Local0 |= 0x20000000
                Local0 |= 0x40000000
                Local0 |= 0x80000000
                If (CMEX)
                {
                    Local0 |= 0x00080000
                }

                If (WLEX)
                {
                    Local0 |= 0x00040000
                }

                If (ECOK ())
                {
                    If (BTEX)
                    {
                        Local0 |= 0x00010000
                    }
                }

                Local0 |= 0x10
                _VPC = Local0
                Return (_VPC) /* \_SB_.PCI0.LPC0.EC0_.VPC0._VPC */
            }

            Name (TBSL, Package (0x0B)
            {
                One, 
                0x02, 
                0x03, 
                0x05, 
                0x08, 
                0x0C, 
                0x12, 
                0x1B, 
                0x27, 
                0x43, 
                0x64
            })
            Name (TBS2, Package (0x65)
            {
                Zero, 
                One, 
                0x02, 
                0x03, 
                0x04, 
                0x05, 
                0x06, 
                0x07, 
                0x08, 
                0x09, 
                0x0A, 
                0x0B, 
                0x0C, 
                0x0D, 
                0x0E, 
                0x0F, 
                0x10, 
                0x11, 
                0x12, 
                0x13, 
                0x14, 
                0x15, 
                0x16, 
                0x17, 
                0x18, 
                0x19, 
                0x1A, 
                0x1B, 
                0x1C, 
                0x1D, 
                0x1E, 
                0x1F, 
                0x20, 
                0x21, 
                0x22, 
                0x23, 
                0x24, 
                0x25, 
                0x26, 
                0x27, 
                0x28, 
                0x29, 
                0x2A, 
                0x2B, 
                0x2C, 
                0x2D, 
                0x2E, 
                0x2F, 
                0x30, 
                0x31, 
                0x32, 
                0x33, 
                0x34, 
                0x35, 
                0x36, 
                0x37, 
                0x38, 
                0x39, 
                0x3A, 
                0x3B, 
                0x3C, 
                0x3D, 
                0x3E, 
                0x3F, 
                0x40, 
                0x41, 
                0x42, 
                0x43, 
                0x44, 
                0x45, 
                0x46, 
                0x47, 
                0x48, 
                0x49, 
                0x4A, 
                0x4B, 
                0x4C, 
                0x4D, 
                0x4E, 
                0x4F, 
                0x50, 
                0x51, 
                0x52, 
                0x53, 
                0x54, 
                0x55, 
                0x56, 
                0x57, 
                0x58, 
                0x59, 
                0x5A, 
                0x5B, 
                0x5C, 
                0x5D, 
                0x5E, 
                0x5F, 
                0x60, 
                0x61, 
                0x62, 
                0x63, 
                0x64
            })
            Method (DBSL, 0, NotSerialized)
            {
                If ((OSTY < 0x07DC))
                {
                    Return (TBSL) /* \_SB_.PCI0.LPC0.EC0_.VPC0.TBSL */
                }
                Else
                {
                    Return (TBS2) /* \_SB_.PCI0.LPC0.EC0_.VPC0.TBS2 */
                }
            }

            Method (HALS, 0, NotSerialized)
            {
                Local0 = Zero
                If (KLEX)
                {
                    Local0 |= 0x10
                }

                If (KLEN)
                {
                    Local0 |= 0x20
                }

                Local0 |= 0x40
                If (UCEN)
                {
                    Local0 |= 0x80
                }

                Local0 |= 0x0200
                If (HOTM)
                {
                    Local0 &= 0x0BFF
                }
                Else
                {
                    Local0 |= 0x0400
                }

                Local0 |= 0x0800
                Local0 &= 0xEFFF
                Local0 |= 0x4000
                If (UCBM)
                {
                    Local0 |= 0x8000
                }

                Return (Local0)
            }

            Method (SALS, 1, Serialized)
            {
                If ((Arg0 == Zero)) {}
                If ((Arg0 == One)) {}
                If ((Arg0 == 0x04)) {}
                If ((Arg0 == 0x05)) {}
                If ((Arg0 == 0x06)) {}
                If ((Arg0 == 0x07)) {}
                If ((Arg0 == 0x08))
                {
                    KLEN = One
                }

                If ((Arg0 == 0x09))
                {
                    KLEN = Zero
                }

                If ((Arg0 == 0x0A))
                {
                    UCEN = One
                    WXMS (0x70, 0x55)
                }

                If ((Arg0 == 0x0B))
                {
                    UCEN = Zero
                    WXMS (0x70, 0x55)
                }

                If ((Arg0 == 0x0C)) {}
                If ((Arg0 == 0x0D)) {}
                If ((Arg0 == 0x0E))
                {
                    HOTM = Zero
                }

                If ((Arg0 == 0x0F))
                {
                    HOTM = One
                }

                If ((Arg0 == 0x10)) {}
                If ((Arg0 == 0x11)) {}
                If ((Arg0 == 0x12))
                {
                    UCBM = Zero
                    WXMS (0x70, 0x55)
                }

                If ((Arg0 == 0x13))
                {
                    UCBM = One
                    WXMS (0x70, 0x55)
                }

                Return (Zero)
            }

            Method (MHTT, 1, Serialized)
            {
                Local0 = Zero
                Local0 = CTMP /* \_SB_.PCI0.LPC0.EC0_.CTMP */
                Return (Local0)
            }

            Method (MHQI, 1, Serialized)
            {
                Return (Zero)
            }

            Method (MHGI, 1, Serialized)
            {
                Return (Zero)
            }

            Method (SMTF, 1, Serialized)
            {
                If ((Arg0 == Zero))
                {
                    GBWD (0x16, 0x13)
                    Return (SMDW) /* \_SB_.PCI0.LPC0.EC0_.SMDW */
                }

                If ((Arg0 == One))
                {
                    Return (Zero)
                }
            }

            Method (GBMD, 0, NotSerialized)
            {
                Local0 = Zero
                If ((One == CDMB))
                {
                    Local0 |= One
                }

                If ((One == BTSG))
                {
                    Local0 |= 0x02
                }

                If ((One == FCGM))
                {
                    Local0 |= 0x04
                }

                If ((One == MBBD))
                {
                    Local0 |= 0x08
                }

                If ((One == SBBD))
                {
                    Local0 |= 0x10
                }

                If ((One == BTSM))
                {
                    Local0 |= 0x20
                }

                If ((One == LGB1))
                {
                    Local0 |= 0x40
                }

                If ((One == BTIL))
                {
                    Local0 |= 0x80
                }

                If ((One == BTPF))
                {
                    Local0 |= 0x0100
                }

                If ((Zero == BTSM))
                {
                    Local0 |= 0x0200
                }

                If ((One == SBIL))
                {
                    Local0 |= 0x0400
                }

                If ((One == BTOV))
                {
                    Local0 |= 0x0800
                }

                If ((One == SBOV))
                {
                    Local0 |= 0x1000
                }

                If ((One == SBPF))
                {
                    Local0 |= 0x2000
                }

                If ((One == SPBA))
                {
                    Local0 |= 0x4000
                }

                If ((Zero == ADPS)) {}
                If ((One == ADPS))
                {
                    Local0 |= 0x8000
                }

                If ((0x02 == ADPS))
                {
                    Local0 |= 0x00010000
                }

                If ((One == QCGS))
                {
                    Local0 |= 0x00020000
                }

                If ((One == ICC1))
                {
                    Local0 |= 0x00100000
                }

                If ((One == SSM1))
                {
                    Local0 |= 0x00200000
                }

                Return (Local0)
            }

            Method (SBMC, 1, NotSerialized)
            {
                If ((Arg0 == Zero))
                {
                    CDMB = Zero
                    EDCC = One
                    Return (Zero)
                }

                If ((Arg0 == One))
                {
                    EDCC = Zero
                    CDMB = One
                    Return (Zero)
                }

                If ((Arg0 == 0x03))
                {
                    BTSM = One
                    LBTM = Zero
                    Return (Zero)
                }

                If ((Arg0 == 0x05))
                {
                    BTSM = Zero
                    LBTM = One
                    Return (Zero)
                }

                If ((Arg0 == 0x06))
                {
                    BTSG = Zero
                    Return (Zero)
                }

                If ((Arg0 == 0x07))
                {
                    FCGM = One
                    Return (Zero)
                }

                If ((Arg0 == 0x08))
                {
                    FCGM = Zero
                    Return (Zero)
                }

                If ((Arg0 == 0x09)) {}
                If ((Arg0 == 0x0A))
                {
                    EDC1 = One
                    ICC1 = Zero
                }

                If ((Arg0 == 0x0B))
                {
                    ICC1 = One
                    EDC1 = Zero
                }

                If ((Arg0 == 0x0D))
                {
                    LGB1 = One
                    SSM1 = Zero
                }

                If ((Arg0 == 0x0F))
                {
                    SSM1 = One
                    LGB1 = Zero
                }

                If ((Arg0 == 0x10)) {}
                Return (Zero)
            }

            Method (SHDC, 1, Serialized)
            {
                Return (Zero)
            }

            Method (SVCR, 1, Serialized)
            {
                Local0 = Zero
                If ((Arg0 == 0x04))
                {
                    LVAT = Zero
                }

                If ((Arg0 == 0x05))
                {
                    LVAT = One
                }
            }

            Method (VPCR, 1, Serialized)
            {
                If ((Arg0 == One))
                {
                    VPCD = VCMD /* \_SB_.PCI0.LPC0.EC0_.VCMD */
                }
                Else
                {
                    VPCD = VDAT /* \_SB_.PCI0.LPC0.EC0_.VDAT */
                }

                Return (VPCD) /* \_SB_.PCI0.LPC0.EC0_.VPC0.VPCD */
            }

            Method (VPCW, 2, Serialized)
            {
                If ((Arg0 == One))
                {
                    VCMD = Arg1
                    If ((Arg1 == 0x11))
                    {
                        VDAT = 0x0B
                        VCMD = Zero
                        Return (Zero)
                    }

                    If ((Arg1 == 0x13))
                    {
                        If ((OSTY < 0x07D6))
                        {
                            Local0 = VDAT /* \_SB_.PCI0.LPC0.EC0_.VDAT */
                            Local0 += 0x02
                            Return (Zero)
                        }
                    }
                }
                Else
                {
                    VDAT = Arg1
                }

                Return (Zero)
            }

            Method (MHCF, 1, NotSerialized)
            {
                Local0 = Arg0
                Local0 &= 0x60
                Local0 >>= 0x05
                If ((Local0 == One))
                {
                    ECP4 = One
                    Sleep (0x01F4)
                }

                BFUC = Local0
                If (BFUC)
                {
                    BFFW = Zero
                }
                Else
                {
                    BFFW = One
                }

                Sleep (0x14)
                Return (Arg0)
            }

            Method (MHPF, 1, NotSerialized)
            {
                Name (BFWB, Buffer (0x25) {})
                CreateByteField (BFWB, Zero, FB0)
                CreateByteField (BFWB, One, FB1)
                CreateByteField (BFWB, 0x02, FB2)
                CreateByteField (BFWB, 0x03, FB3)
                CreateField (BFWB, 0x20, 0x0100, FB4)
                CreateByteField (BFWB, 0x24, FB5)
                If ((SizeOf (Arg0) <= 0x25))
                {
                    If ((SMPR != Zero))
                    {
                        FB1 = SMST /* \_SB_.PCI0.LPC0.EC0_.SMST */
                    }
                    Else
                    {
                        BFWB = Arg0
                        SMAD = FB2 /* \_SB_.PCI0.LPC0.EC0_.VPC0.MHPF.FB2_ */
                        SMCM = FB3 /* \_SB_.PCI0.LPC0.EC0_.VPC0.MHPF.FB3_ */
                        BCNT = FB5 /* \_SB_.PCI0.LPC0.EC0_.VPC0.MHPF.FB5_ */
                        Local0 = FB0 /* \_SB_.PCI0.LPC0.EC0_.VPC0.MHPF.FB0_ */
                        If (((Local0 & One) == Zero))
                        {
                            SMD0 = FB4 /* \_SB_.PCI0.LPC0.EC0_.VPC0.MHPF.FB4_ */
                        }

                        SMST = Zero
                        SMPR = FB0 /* \_SB_.PCI0.LPC0.EC0_.VPC0.MHPF.FB0_ */
                        Local1 = Zero
                        While ((0x07D0 > Local1))
                        {
                            Sleep (One)
                            Local1++
                            If ((SMST && 0x80))
                            {
                                Break
                            }
                        }

                        Local0 = FB0 /* \_SB_.PCI0.LPC0.EC0_.VPC0.MHPF.FB0_ */
                        If (((Local0 & One) != Zero))
                        {
                            FB4 = SMD0 /* \_SB_.PCI0.LPC0.EC0_.SMD0 */
                        }

                        FB1 = SMST /* \_SB_.PCI0.LPC0.EC0_.SMST */
                        If ((Local1 >= 0x07D0))
                        {
                            SMPR = Zero
                            FB1 = 0x92
                        }
                    }

                    If (Ones)
                    {
                        Sleep (0x05)
                    }

                    Return (BFWB) /* \_SB_.PCI0.LPC0.EC0_.VPC0.MHPF.BFWB */
                }

                Return (Arg0)
            }

            Method (MHIF, 1, NotSerialized)
            {
                Name (BFWB, Buffer (0x20) {})
                CreateField (BFWB, Zero, 0x10, FB10)
                CreateField (BFWB, Zero, 0x40, FB70)
                Name (RETB, Buffer (0x0A) {})
                CreateField (RETB, Zero, 0x10, RB10)
                CreateField (RETB, 0x10, 0x40, RB92)
                If ((Arg0 == Zero))
                {
                    If (BOL0)
                    {
                        SBAT (0x09, 0x35)
                        BFWB = SMD0 /* \_SB_.PCI0.LPC0.EC0_.SMD0 */
                        RB10 = FB10 /* \_SB_.PCI0.LPC0.EC0_.VPC0.MHIF.FB10 */
                        SBAT (0x0B, 0x37)
                        BFWB = SMD0 /* \_SB_.PCI0.LPC0.EC0_.SMD0 */
                        RB92 = FB70 /* \_SB_.PCI0.LPC0.EC0_.VPC0.MHIF.FB70 */
                    }
                }

                If ((Arg0 == One)) {}
                Return (RETB) /* \_SB_.PCI0.LPC0.EC0_.VPC0.MHIF.RETB */
            }

            Method (GBID, 0, NotSerialized)
            {
                Name (BFWB, Buffer (0x20) {})
                CreateField (BFWB, Zero, 0x10, FB10)
                CreateField (BFWB, Zero, 0x40, FB70)
                Name (RETB, Package (0x04)
                {
                    Buffer (0x02)
                    {
                         0x00, 0x00                                       // ..
                    }, 

                    Buffer (0x02)
                    {
                         0xFF, 0xFF                                       // ..
                    }, 

                    Buffer (0x08)
                    {
                         0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF   // ........
                    }, 

                    Buffer (0x08)
                    {
                         0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF   // ........
                    }
                })
                If (BOL0)
                {
                    SBAT (0x09, 0x17)
                    BFWB = SMD0 /* \_SB_.PCI0.LPC0.EC0_.SMD0 */
                    RETB [Zero] = FB10 /* \_SB_.PCI0.LPC0.EC0_.VPC0.GBID.FB10 */
                    SBAT (0x0B, 0x37)
                    BFWB = SMD0 /* \_SB_.PCI0.LPC0.EC0_.SMD0 */
                    RETB [0x02] = FB70 /* \_SB_.PCI0.LPC0.EC0_.VPC0.GBID.FB70 */
                }

                Return (RETB) /* \_SB_.PCI0.LPC0.EC0_.VPC0.GBID.RETB */
            }

            Method (GSBI, 1, NotSerialized)
            {
                Name (BFWB, Buffer (0x20) {})
                CreateField (BFWB, Zero, 0x10, FB10)
                CreateField (BFWB, Zero, 0x40, FB70)
                CreateField (BFWB, Zero, 0x50, FBA0)
                CreateField (BFWB, Zero, 0x60, FBB0)
                Name (SBIF, Buffer (0x53) {})
                If ((Arg0 == One))
                {
                    CreateWordField (SBIF, Zero, BDCX)
                    BDCX = BDC0 /* \_SB_.PCI0.LPC0.EC0_.BDC0 */
                    CreateWordField (SBIF, 0x02, BFCX)
                    BFCX = BFC0 /* \_SB_.PCI0.LPC0.EC0_.BFC0 */
                    CreateWordField (SBIF, 0x04, BRCX)
                    BRCX = BRC0 /* \_SB_.PCI0.LPC0.EC0_.BRC0 */
                    CreateWordField (SBIF, 0x06, TTEX)
                    TTEX = BRC0 /* \_SB_.PCI0.LPC0.EC0_.BRC0 */
                    CreateWordField (SBIF, 0x08, TTFX)
                    SBAT (0x09, 0x13)
                    BFWB = SMD0 /* \_SB_.PCI0.LPC0.EC0_.SMD0 */
                    TTFX = FB10 /* \_SB_.PCI0.LPC0.EC0_.VPC0.GSBI.FB10 */
                    CreateWordField (SBIF, 0x0A, BPVX)
                    BPVX = BPV0 /* \_SB_.PCI0.LPC0.EC0_.BPV0 */
                    CreateWordField (SBIF, 0x0C, BPCX)
                    BPCX = BPC0 /* \_SB_.PCI0.LPC0.EC0_.BPC0 */
                    CreateWordField (SBIF, 0x0E, BTMX)
                    SBAT (0x09, 0x08)
                    BFWB = SMD0 /* \_SB_.PCI0.LPC0.EC0_.SMD0 */
                    BTMX = FB10 /* \_SB_.PCI0.LPC0.EC0_.VPC0.GSBI.FB10 */
                    CreateWordField (SBIF, 0x10, BMDX)
                    SBAT (0x09, 0x1B)
                    BFWB = SMD0 /* \_SB_.PCI0.LPC0.EC0_.SMD0 */
                    BMDX = FB10 /* \_SB_.PCI0.LPC0.EC0_.VPC0.GSBI.FB10 */
                    CreateWordField (SBIF, 0x12, FUDX)
                    SBAT (0x09, 0x3F)
                    BFWB = SMD0 /* \_SB_.PCI0.LPC0.EC0_.SMD0 */
                    FUDX = FB10 /* \_SB_.PCI0.LPC0.EC0_.VPC0.GSBI.FB10 */
                    CreateWordField (SBIF, 0x14, BDVX)
                    BDVX = BDV0 /* \_SB_.PCI0.LPC0.EC0_.BDV0 */
                    CreateField (SBIF, 0xB0, 0x50, DECX)
                    SBAT (0x0B, 0x22)
                    BFWB = SMD0 /* \_SB_.PCI0.LPC0.EC0_.SMD0 */
                    DECX = FBA0 /* \_SB_.PCI0.LPC0.EC0_.VPC0.GSBI.FBA0 */
                    CreateField (SBIF, 0x0100, 0x40, DENX)
                    SBAT (0x0B, 0x21)
                    BFWB = SMD0 /* \_SB_.PCI0.LPC0.EC0_.SMD0 */
                    DENX = FB70 /* \_SB_.PCI0.LPC0.EC0_.VPC0.GSBI.FB70 */
                    CreateField (SBIF, 0x0140, 0x60, MANX)
                    SBAT (0x0B, 0x20)
                    BFWB = SMD0 /* \_SB_.PCI0.LPC0.EC0_.SMD0 */
                    MANX = FBB0 /* \_SB_.PCI0.LPC0.EC0_.VPC0.GSBI.FBB0 */
                    CreateField (SBIF, 0x0258, 0x40, BFWV)
                    SBAT (0x0B, 0x37)
                    BFWB = SMD0 /* \_SB_.PCI0.LPC0.EC0_.SMD0 */
                    BFWV = FB70 /* \_SB_.PCI0.LPC0.EC0_.VPC0.GSBI.FB70 */
                }

                If ((Arg0 == 0x02)) {}
                Return (SBIF) /* \_SB_.PCI0.LPC0.EC0_.VPC0.GSBI.SBIF */
            }
        }

        Method (_Q04, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If ((ECOK () == One))
            {
                Notify (VPC0, 0x80) // Status Change
            }
        }

        Method (_Q44, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If ((OKEC == One))
            {
                Notify (VPC0, 0x80) // Status Change
            }
        }

        OperationRegion (ECAM, EmbeddedControl, Zero, 0xFF)
        Field (ECAM, ByteAcc, Lock, Preserve)
        {
        }

        Field (ECMM, AnyAcc, Lock, Preserve)
        {
            Offset (0x03), 
            KLEN,   1, 
            KLEX,   1, 
            UCEN,   1, 
            UCEX,   1, 
            CMEX,   1, 
            DCRC,   1, 
            CREC,   1, 
            UCBM,   1, 
            SBOV,   1, 
            SBIL,   1, 
            SBPF,   1, 
                ,   2, 
            SBBD,   1, 
            Offset (0x05), 
            WOLS,   1, 
            Offset (0x06), 
            ERPM,   8, 
            BTOV,   1, 
            BTIL,   1, 
            BTPF,   1, 
            BTSG,   1, 
                ,   1, 
            MBBD,   1, 
            LVAT,   1, 
            FCGM,   1, 
            Offset (0x09), 
            CPTY,   1, 
            Offset (0x0A), 
            EDCC,   1, 
            ALSC,   1, 
            CDMB,   1, 
                ,   1, 
            BTSM,   1, 
                ,   1, 
            LBTM,   1, 
            EMWK,   1, 
            EDC1,   1, 
            ICC1,   1, 
            SSM1,   1, 
            LGB1,   1, 
            Offset (0x0C), 
            YMCD,   8, 
            PODL,   8, 
            PODH,   8, 
            FNCM,   8, 
                ,   1, 
                ,   1, 
            QTMD,   1, 
            AUPM,   1, 
            AQMD,   1, 
            STMD,   1, 
                ,   1, 
            Offset (0x11), 
            BFUC,   2, 
            ECP4,   1, 
            Offset (0x12), 
            FUSL,   8, 
            FUSH,   8, 
            BMIL,   8, 
            BMIH,   8, 
            HIDL,   8, 
            HIDH,   8, 
            FMVL,   8, 
            FMVH,   8, 
            DAVL,   8, 
            DAVH,   8, 
            KEYP,   1, 
            BRAZ,   1, 
                ,   2, 
            H_F2,   1, 
            HF12,   1, 
                ,   1, 
            HOTM,   1, 
            BFFW,   1, 
            QCGS,   1, 
            SPBA,   1, 
            ADPS,   2, 
            QATD,   1, 
            QBSM,   1, 
            BATM,   1, 
            PSTG,   1, 
            Offset (0x1F)
        }
    }

    Scope (_SB)
    {
        Device (HKDV)
        {
            Name (_HID, "LHK2019")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((OSTN >= 0x10))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WMIU)
        {
            Name (_HID, "PNP0C14" /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "LSK20")  // _UID: Unique ID
            Name (_WDG, Buffer (0x3C)
            {
                /* 0000 */  0x74, 0x09, 0x6C, 0xCE, 0x07, 0x04, 0x50, 0x4F,  // t.l...PO
                /* 0008 */  0x88, 0xBA, 0x4F, 0xC3, 0xB6, 0x55, 0x9A, 0xD8,  // ..O..U..
                /* 0010 */  0x53, 0x4B, 0x01, 0x02, 0x21, 0x12, 0x90, 0x05,  // SK..!...
                /* 0018 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  // f.......
                /* 0020 */  0xC9, 0x06, 0x29, 0x10, 0x44, 0x41, 0x01, 0x00,  // ..).DA..
                /* 0028 */  0x0C, 0xDE, 0xC0, 0x8F, 0xE4, 0xB4, 0xFD, 0x43,  // .......C
                /* 0030 */  0xB0, 0xF3, 0x88, 0x71, 0x71, 0x1C, 0x12, 0x94,  // ...qq...
                /* 0038 */  0xD0, 0x00, 0x01, 0x08                           // ....
            })
            Method (WMSK, 3, NotSerialized)
            {
                If ((Arg1 == One))
                {
                    If ((ToInteger (Arg2) == One))
                    {
                        Return (0x02)
                    }
                    ElseIf ((ToInteger (Arg2) == 0x02))
                    {
                        Return (One)
                    }
                    ElseIf ((ToInteger (Arg2) == 0x03))
                    {
                        Return (One)
                    }
                    ElseIf ((ToInteger (Arg2) == 0x04))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Method (_WED, 1, NotSerialized)  // _Wxx: Wake Event, xx=0x00-0xFF
            {
                If ((Arg0 == 0xD0))
                {
                    Return (PSD1) /* \PSD1 */
                }
            }

            Name (WQDA, Buffer (0x0422)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0x12, 0x04, 0x00, 0x00, 0x66, 0x0C, 0x00, 0x00,  // ....f...
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0xA8, 0x42, 0x86, 0x00, 0x01, 0x06, 0x18, 0x42,  // .B.....B
                /* 0020 */  0x10, 0x05, 0x10, 0x8A, 0x29, 0x81, 0x42, 0x04,  // ....).B.
                /* 0028 */  0x8A, 0x40, 0xA4, 0x60, 0x30, 0x28, 0x0D, 0x20,  // .@.`0(. 
                /* 0030 */  0x92, 0x03, 0x21, 0x17, 0x4C, 0x4C, 0x80, 0x08,  // ..!.LL..
                /* 0038 */  0x08, 0x79, 0x15, 0x60, 0x53, 0x80, 0x49, 0x10,  // .y.`S.I.
                /* 0040 */  0xF5, 0xEF, 0x0F, 0x51, 0x12, 0x1C, 0x4A, 0x08,  // ...Q..J.
                /* 0048 */  0x84, 0x24, 0x0A, 0x30, 0x2F, 0x40, 0xB7, 0x00,  // .$.0/@..
                /* 0050 */  0xC3, 0x02, 0x6C, 0x0B, 0x30, 0x2D, 0xC0, 0x31,  // ..l.0-.1
                /* 0058 */  0x24, 0x95, 0x06, 0x4E, 0x09, 0x2C, 0x05, 0x42,  // $..N.,.B
                /* 0060 */  0x42, 0x05, 0x28, 0x17, 0xE0, 0x5B, 0x80, 0x76,  // B.(..[.v
                /* 0068 */  0x44, 0x49, 0x16, 0x60, 0x19, 0x46, 0x04, 0x1E,  // DI.`.F..
                /* 0070 */  0x45, 0x64, 0xA3, 0x71, 0x68, 0xEC, 0x30, 0x2C,  // Ed.qh.0,
                /* 0078 */  0x13, 0x4C, 0x83, 0x38, 0x8C, 0xB2, 0x91, 0x45,  // .L.8...E
                /* 0080 */  0xE0, 0x09, 0x75, 0x2A, 0x40, 0xAE, 0x00, 0x61,  // ..u*@..a
                /* 0088 */  0x02, 0xC4, 0xA3, 0x0A, 0xA3, 0x39, 0x28, 0x22,  // .....9("
                /* 0090 */  0x1A, 0x1A, 0x25, 0x66, 0x4C, 0x04, 0xB6, 0x73,  // ..%fL..s
                /* 0098 */  0x6C, 0x8D, 0xE2, 0x34, 0x0A, 0x17, 0x20, 0x1D,  // l..4.. .
                /* 00A0 */  0x43, 0x23, 0x38, 0xAE, 0x63, 0x30, 0x58, 0x90,  // C#8.c0X.
                /* 00A8 */  0x43, 0x31, 0x44, 0x41, 0x02, 0xAC, 0xA2, 0x91,  // C1DA....
                /* 00B0 */  0x61, 0x84, 0x08, 0x72, 0x7C, 0x81, 0xBA, 0xC4,  // a..r|...
                /* 00B8 */  0x13, 0x88, 0xC7, 0xE4, 0x01, 0x18, 0x21, 0x4C,  // ......!L
                /* 00C0 */  0x8B, 0xB0, 0x82, 0x36, 0x62, 0x02, 0xC3, 0x1E,  // ...6b...
                /* 00C8 */  0x0A, 0xE6, 0x07, 0x20, 0x01, 0x9E, 0x05, 0x58,  // ... ...X
                /* 00D0 */  0x1F, 0x23, 0x21, 0xB0, 0x7B, 0x01, 0xE2, 0x04,  // .#!.{...
                /* 00D8 */  0x68, 0x1E, 0x8D, 0x46, 0x75, 0x9C, 0xC6, 0x88,  // h..Fu...
                /* 00E0 */  0xD2, 0x96, 0x00, 0xC5, 0x23, 0x13, 0x4C, 0x88,  // ....#.L.
                /* 00E8 */  0x28, 0x21, 0x3A, 0xC3, 0x13, 0x5A, 0x28, 0xC3,  // (!:..Z(.
                /* 00F0 */  0x45, 0x89, 0x13, 0x25, 0x70, 0x84, 0xDE, 0x04,  // E..%p...
                /* 00F8 */  0x18, 0x83, 0x20, 0x08, 0x81, 0x43, 0x54, 0x36,  // .. ..CT6
                /* 0100 */  0x48, 0xA1, 0xB6, 0x3F, 0x08, 0x22, 0xCB, 0xC1,  // H..?."..
                /* 0108 */  0x89, 0x80, 0x45, 0x1A, 0x0D, 0xEA, 0x14, 0x90,  // ..E.....
                /* 0110 */  0xE0, 0xA9, 0xC0, 0x27, 0x82, 0x93, 0x3A, 0xAF,  // ...'..:.
                /* 0118 */  0xA3, 0x3A, 0xEB, 0x20, 0xC1, 0x4F, 0xA4, 0xCE,  // .:. .O..
                /* 0120 */  0xE3, 0x00, 0x19, 0x38, 0x9B, 0x9A, 0xD9, 0x75,  // ...8...u
                /* 0128 */  0x3E, 0x80, 0xE0, 0x1A, 0x50, 0xFF, 0xFF, 0x79,  // >...P..y
                /* 0130 */  0x3E, 0x16, 0xB0, 0x61, 0x86, 0xC3, 0x0C, 0xD1,  // >..a....
                /* 0138 */  0x83, 0xF5, 0x04, 0x0E, 0x91, 0x01, 0x7A, 0x62,  // ......zb
                /* 0140 */  0x4F, 0x04, 0x58, 0x87, 0x93, 0xD1, 0x71, 0xA0,  // O.X...q.
                /* 0148 */  0x54, 0x01, 0x66, 0xC7, 0xAD, 0x49, 0x27, 0x38,  // T.f..I'8
                /* 0150 */  0x1E, 0x9F, 0x03, 0x3C, 0x9F, 0x13, 0x4E, 0x60,  // ...<..N`
                /* 0158 */  0xF9, 0x83, 0x40, 0x8D, 0xCC, 0xD0, 0x36, 0x38,  // ..@...68
                /* 0160 */  0x2D, 0x1D, 0x04, 0x7C, 0x00, 0x30, 0x81, 0xC5,  // -..|.0..
                /* 0168 */  0x1E, 0x26, 0xE8, 0x78, 0xC0, 0x7F, 0x00, 0x78,  // .&.x...x
                /* 0170 */  0x3E, 0x88, 0xF0, 0xCE, 0xE0, 0xF9, 0x9A, 0xA0,  // >.......
                /* 0178 */  0xA8, 0xB3, 0x85, 0x9C, 0x8C, 0x07, 0x75, 0xAC,  // ......u.
                /* 0180 */  0xF0, 0x05, 0x01, 0x03, 0x7E, 0xB4, 0x2F, 0x0C,  // ....~./.
                /* 0188 */  0x61, 0x5E, 0x1A, 0xE2, 0x1E, 0xBC, 0xB5, 0x5E,  // a^.....^
                /* 0190 */  0x21, 0x08, 0x81, 0x83, 0x43, 0xE8, 0xAF, 0x61,  // !...C..a
                /* 0198 */  0x51, 0x83, 0xA7, 0x27, 0x0B, 0x7E, 0xA8, 0x60,  // Q..'.~.`
                /* 01A0 */  0xC0, 0x7C, 0x3C, 0xA7, 0xE5, 0xB3, 0x87, 0x87,  // .|<.....
                /* 01A8 */  0x07, 0x7F, 0x26, 0x4F, 0x14, 0xC0, 0x41, 0xE3,  // ..&O..A.
                /* 01B0 */  0x19, 0x41, 0x88, 0xAF, 0x14, 0x6F, 0x14, 0xD8,  // .A...o..
                /* 01B8 */  0xF3, 0x01, 0xBB, 0x53, 0x60, 0x87, 0x0E, 0xFF,  // ...S`...
                /* 01C0 */  0x5A, 0x61, 0x54, 0x5F, 0x25, 0xDE, 0x22, 0x12,  // ZaT_%.".
                /* 01C8 */  0x18, 0x2B, 0xC1, 0xFF, 0x3F, 0x30, 0x6E, 0xEC,  // .+..?0n.
                /* 01D0 */  0xF6, 0x2B, 0x00, 0x21, 0xF8, 0xC1, 0x3C, 0x1B,  // .+.!..<.
                /* 01D8 */  0x3C, 0x85, 0x44, 0x38, 0x2E, 0xA3, 0x1F, 0x50,  // <.D8...P
                /* 01E0 */  0x9F, 0x33, 0x17, 0x44, 0xB4, 0xE3, 0x3A, 0x87,  // .3.D..:.
                /* 01E8 */  0xA3, 0x08, 0x15, 0xE2, 0x2C, 0x0C, 0x14, 0x2E,  // ....,...
                /* 01F0 */  0x58, 0x40, 0xE3, 0x24, 0xB0, 0xC8, 0xC1, 0xA2,  // X@.$....
                /* 01F8 */  0x07, 0xC1, 0x01, 0xCF, 0xE1, 0x90, 0x82, 0x1E,  // ........
                /* 0200 */  0xC4, 0xC9, 0x44, 0x39, 0x8F, 0x63, 0xF2, 0x39,  // ..D9.c.9
                /* 0208 */  0xC5, 0x08, 0xC7, 0xF4, 0x78, 0xF2, 0xDC, 0xE1,  // ....x...
                /* 0210 */  0xFB, 0xC6, 0xE1, 0x9F, 0xD7, 0xD1, 0x3E, 0x85,  // ......>.
                /* 0218 */  0xB0, 0xA1, 0x1F, 0x02, 0xE6, 0x74, 0xE1, 0x21,  // .....t.!
                /* 0220 */  0xF0, 0x01, 0x1C, 0xD0, 0x29, 0x5A, 0xE9, 0xC4,  // ....)Z..
                /* 0228 */  0x90, 0x27, 0x1A, 0x7E, 0x2C, 0xC1, 0x0E, 0x80,  // .'.~,...
                /* 0230 */  0xAB, 0xF2, 0x00, 0xC2, 0xC4, 0x3F, 0x0E, 0x24,  // .....?.$
                /* 0238 */  0xED, 0x95, 0x40, 0x61, 0x7C, 0xC6, 0x01, 0x5C,  // ..@a|..\
                /* 0240 */  0x01, 0x3D, 0x42, 0x80, 0xE7, 0x6C, 0x00, 0x17,  // .=B..l..
                /* 0248 */  0xFB, 0xE4, 0xA3, 0x84, 0x78, 0x7A, 0x88, 0x7E,  // ....xz.~
                /* 0250 */  0x2E, 0x27, 0xF3, 0x08, 0x61, 0x82, 0xFF, 0xFF,  // .'..a...
                /* 0258 */  0x03, 0x0E, 0xEC, 0x2B, 0x8C, 0xB5, 0x5D, 0x70,  // ...+..]p
                /* 0260 */  0xC8, 0x94, 0x9E, 0x6A, 0xDE, 0x6E, 0x8C, 0x72,  // ...j.n.r
                /* 0268 */  0x58, 0x86, 0x79, 0xC0, 0xF1, 0xED, 0xA0, 0x35,  // X.y....5
                /* 0270 */  0x18, 0xDD, 0x6E, 0xD8, 0x89, 0xE4, 0x24, 0x42,  // ..n...$B
                /* 0278 */  0x31, 0xDC, 0x07, 0x89, 0x38, 0xB1, 0xC3, 0x45,  // 1...8..E
                /* 0280 */  0x88, 0xFD, 0xD0, 0x61, 0xBC, 0x07, 0x1C, 0x16,  // ...a....
                /* 0288 */  0xEF, 0x38, 0xA0, 0x83, 0x88, 0x0F, 0x38, 0x00,  // .8....8.
                /* 0290 */  0x3F, 0x4E, 0x07, 0x8F, 0x25, 0xE0, 0x3F, 0x2B,  // ?N..%.?+
                /* 0298 */  0xF0, 0x53, 0x09, 0x18, 0xFE, 0xFF, 0xA7, 0x12,  // .S......
                /* 02A0 */  0xF0, 0x24, 0x7E, 0x10, 0xE8, 0xB4, 0xE3, 0xB4,  // .$~.....
                /* 02A8 */  0x20, 0xB2, 0xB1, 0x58, 0x1F, 0xAA, 0x0C, 0xA1,  //  ..X....
                /* 02B0 */  0x9C, 0x0B, 0x96, 0x47, 0x5C, 0x61, 0x1E, 0x4F,  // ...G\a.O
                /* 02B8 */  0xE4, 0x73, 0x88, 0xFC, 0x52, 0x11, 0xE1, 0x0C,  // .s..R...
                /* 02C0 */  0x8E, 0x21, 0xD2, 0x69, 0xC5, 0x38, 0xB0, 0x57,  // .!.i.8.W
                /* 02C8 */  0x0E, 0xDF, 0x03, 0x9E, 0x2C, 0x78, 0x22, 0x60,  // ....,x"`
                /* 02D0 */  0x1D, 0xE5, 0x78, 0x16, 0x0A, 0x29, 0xA3, 0xD1,  // ..x..)..
                /* 02D8 */  0xA8, 0x3C, 0x08, 0x6B, 0x81, 0x11, 0x9C, 0x41,  // .<.k...A
                /* 02E0 */  0x0C, 0xE8, 0xA0, 0x10, 0x3A, 0x22, 0xE1, 0x94,  // ....:"..
                /* 02E8 */  0x80, 0x68, 0x5A, 0x6F, 0x44, 0xEC, 0xDC, 0xE3,  // .hZoD...
                /* 02F0 */  0x1B, 0x92, 0x09, 0xA6, 0xBA, 0x1D, 0xD1, 0x79,  // .......y
                /* 02F8 */  0xFA, 0x46, 0xC0, 0xEF, 0x29, 0x3E, 0x23, 0x18,  // .F..)>#.
                /* 0300 */  0xDC, 0x0A, 0xEF, 0x1F, 0xA0, 0x19, 0x71, 0x10,  // ......q.
                /* 0308 */  0xDF, 0x18, 0x7C, 0x26, 0xF0, 0x46, 0x4F, 0x04,  // ..|&.FO.
                /* 0310 */  0xA3, 0xE6, 0xD0, 0x84, 0x9A, 0x86, 0xA7, 0xFA,  // ........
                /* 0318 */  0x62, 0x63, 0x02, 0xEB, 0xBA, 0x0C, 0x81, 0x4C,  // bc.....L
                /* 0320 */  0xDF, 0x31, 0x01, 0x14, 0x40, 0xBE, 0x14, 0xF8,  // .1..@...
                /* 0328 */  0xA4, 0xF3, 0x60, 0xC0, 0xC6, 0xF0, 0xB0, 0x63,  // ..`....c
                /* 0330 */  0x34, 0xA3, 0x73, 0xC1, 0x93, 0x47, 0x49, 0x9C,  // 4.s..GI.
                /* 0338 */  0x3C, 0x05, 0xF1, 0xE4, 0x1D, 0x7F, 0xF2, 0xE8,  // <.......
                /* 0340 */  0x3B, 0x85, 0x8F, 0x57, 0x9C, 0xC0, 0x71, 0xC7,  // ;..W..q.
                /* 0348 */  0x4E, 0xAF, 0x20, 0x98, 0xFF, 0xFF, 0x30, 0xD8,  // N. ...0.
                /* 0350 */  0x64, 0x4F, 0xED, 0x51, 0xC1, 0xB3, 0xF0, 0xA5,  // dO.Q....
                /* 0358 */  0x05, 0x37, 0x78, 0xB8, 0xB7, 0x8C, 0x23, 0x0F,  // .7x...#.
                /* 0360 */  0xF3, 0x4C, 0xE5, 0xF3, 0x95, 0xC1, 0x82, 0x84,  // .L......
                /* 0368 */  0x79, 0x5F, 0xC0, 0x01, 0xBD, 0xDF, 0xBD, 0x38,  // y_.....8
                /* 0370 */  0x1C, 0x6E, 0x88, 0xF3, 0x3D, 0xF4, 0x08, 0x3E,  // .n..=..>
                /* 0378 */  0x7E, 0xF8, 0xCC, 0x80, 0x1B, 0x12, 0xBB, 0x06,  // ~.......
                /* 0380 */  0xF0, 0xD1, 0xF8, 0x1A, 0xC0, 0x47, 0xE9, 0x3B,  // .....G.;
                /* 0388 */  0x16, 0xF8, 0x04, 0xDE, 0x03, 0x40, 0x0E, 0x8F,  // .....@..
                /* 0390 */  0x09, 0x3F, 0x2A, 0x7A, 0xCF, 0xF0, 0xB8, 0xF8,  // .?*z....
                /* 0398 */  0x90, 0x7D, 0x45, 0x62, 0xD8, 0xCF, 0x1A, 0xBE,  // .}Eb....
                /* 03A0 */  0x47, 0x9E, 0xE0, 0x2B, 0xC5, 0x2B, 0x1B, 0x06,  // G..+.+..
                /* 03A8 */  0xD6, 0x87, 0x00, 0x0E, 0x6B, 0xB4, 0xB0, 0x87,  // ....k...
                /* 03B0 */  0xFC, 0x92, 0xE2, 0x13, 0x8E, 0x67, 0x66, 0x8C,  // .....gf.
                /* 03B8 */  0xB0, 0x3E, 0x08, 0x38, 0xCC, 0x41, 0x00, 0x34,  // .>.8.A.4
                /* 03C0 */  0x47, 0x36, 0xFC, 0x0D, 0xC0, 0x97, 0x80, 0x20,  // G6..... 
                /* 03C8 */  0x6F, 0x22, 0xA7, 0xFB, 0xE4, 0x63, 0x54, 0x7E,  // o"...cT~
                /* 03D0 */  0x23, 0xE0, 0xE7, 0x11, 0x2C, 0x50, 0x10, 0xDF,  // #...,P..
                /* 03D8 */  0x30, 0x3C, 0xB6, 0x03, 0x89, 0x0D, 0xE7, 0x5A,  // 0<.....Z
                /* 03E0 */  0xC2, 0xFE, 0xFF, 0x77, 0x02, 0x8C, 0x42, 0x9B,  // ...w..B.
                /* 03E8 */  0x3E, 0x35, 0x1A, 0xB5, 0x6A, 0x50, 0xA6, 0x46,  // >5..jP.F
                /* 03F0 */  0x99, 0x06, 0xB5, 0xFA, 0x54, 0x6A, 0xCC, 0x98,  // ....Tj..
                /* 03F8 */  0x89, 0x2B, 0x9F, 0x5F, 0x11, 0x1A, 0xB1, 0x23,  // .+._...#
                /* 0400 */  0x81, 0xD0, 0x98, 0x14, 0x02, 0x71, 0xE8, 0x1F,  // .....q..
                /* 0408 */  0x87, 0x40, 0x2C, 0xF9, 0x1E, 0x26, 0x10, 0x4B,  // .@,..&.K
                /* 0410 */  0xA2, 0x95, 0x91, 0x8B, 0x86, 0x41, 0x04, 0x64,  // .....A.d
                /* 0418 */  0xFD, 0x2A, 0x80, 0x58, 0x1A, 0x10, 0x01, 0xF9,  // .*.X....
                /* 0420 */  0xFF, 0x0F                                       // ..
            })
        }

        Device (WMIY)
        {
            Name (_HID, "PNP0C14" /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "YMC")  // _UID: Unique ID
            Name (YDAT, Zero)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }

            Name (_WDG, Buffer (0x3C)
            {
                /* 0000 */  0x6E, 0xEE, 0xB0, 0x09, 0xFD, 0xC3, 0x43, 0x42,  // n.....CB
                /* 0008 */  0x8D, 0xA1, 0x79, 0x11, 0xFF, 0x80, 0xBB, 0x8C,  // ..y.....
                /* 0010 */  0x59, 0x4D, 0x01, 0x02, 0x21, 0x12, 0x90, 0x05,  // YM..!...
                /* 0018 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  // f.......
                /* 0020 */  0xC9, 0x06, 0x29, 0x10, 0x44, 0x43, 0x01, 0x00,  // ..).DC..
                /* 0028 */  0x99, 0x9D, 0x12, 0x06, 0x83, 0x60, 0x64, 0x41,  // .....`dA
                /* 0030 */  0x81, 0xAD, 0xF0, 0x92, 0xF9, 0xD7, 0x73, 0xA6,  // ......s.
                /* 0038 */  0xD0, 0x00, 0x01, 0x08                           // ....
            })
            Method (WMYM, 3, NotSerialized)
            {
                YDAT = ^^PCI0.LPC0.EC0.YMCD /* \_SB_.PCI0.LPC0.EC0_.YMCD */
                Return (YDAT) /* \_SB_.WMIY.YDAT */
            }

            Method (_WED, 1, NotSerialized)  // _Wxx: Wake Event, xx=0x00-0xFF
            {
                Return (One)
            }

            Name (WQDC, Buffer (0x04BC)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0xAC, 0x04, 0x00, 0x00, 0xB8, 0x17, 0x00, 0x00,  // ........
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0x28, 0xC3, 0x8B, 0x00, 0x01, 0x06, 0x18, 0x42,  // (......B
                /* 0020 */  0x10, 0x05, 0x10, 0x0A, 0x26, 0x81, 0x42, 0x04,  // ....&.B.
                /* 0028 */  0x0A, 0x40, 0xA4, 0x28, 0x30, 0x28, 0x0D, 0x20,  // .@.(0(. 
                /* 0030 */  0x92, 0x03, 0x21, 0x17, 0x4C, 0x4C, 0x80, 0x08,  // ..!.LL..
                /* 0038 */  0x08, 0x79, 0x15, 0x60, 0x53, 0x80, 0x49, 0x10,  // .y.`S.I.
                /* 0040 */  0xF5, 0xEF, 0x0F, 0x51, 0x12, 0x1C, 0x4A, 0x08,  // ...Q..J.
                /* 0048 */  0x84, 0x24, 0x0A, 0x30, 0x2F, 0x40, 0xB7, 0x00,  // .$.0/@..
                /* 0050 */  0xC3, 0x02, 0x6C, 0x0B, 0x30, 0x2D, 0xC0, 0x31,  // ..l.0-.1
                /* 0058 */  0x24, 0x95, 0x06, 0x4E, 0x09, 0x2C, 0x05, 0x42,  // $..N.,.B
                /* 0060 */  0x42, 0x05, 0x28, 0x17, 0xE0, 0x5B, 0x80, 0x76,  // B.(..[.v
                /* 0068 */  0x44, 0x49, 0x16, 0x60, 0x19, 0x46, 0x04, 0x1E,  // DI.`.F..
                /* 0070 */  0x45, 0x64, 0xA3, 0x71, 0x68, 0xEC, 0x30, 0x2C,  // Ed.qh.0,
                /* 0078 */  0x13, 0x4C, 0x83, 0x38, 0x8C, 0xB2, 0x91, 0x45,  // .L.8...E
                /* 0080 */  0xE0, 0x09, 0x75, 0x2A, 0x40, 0xAE, 0x00, 0x61,  // ..u*@..a
                /* 0088 */  0x02, 0xC4, 0xA3, 0x0A, 0xA3, 0x39, 0x28, 0x32,  // .....9(2
                /* 0090 */  0x87, 0xD0, 0x18, 0x31, 0x63, 0x22, 0xB0, 0x9D,  // ...1c"..
                /* 0098 */  0x63, 0x6B, 0x14, 0xA7, 0x51, 0xB8, 0x00, 0xE9,  // ck..Q...
                /* 00A0 */  0x18, 0x1A, 0xC1, 0x71, 0x1D, 0x83, 0xC1, 0x82,  // ...q....
                /* 00A8 */  0x1C, 0x8A, 0x21, 0x0A, 0x12, 0x60, 0x16, 0x43,  // ..!..`.C
                /* 00B0 */  0x9E, 0xA7, 0x21, 0x94, 0xA3, 0x88, 0x72, 0x52,  // ..!...rR
                /* 00B8 */  0x46, 0xE9, 0x50, 0x80, 0x68, 0x24, 0x41, 0x06,  // F.P.h$A.
                /* 00C0 */  0x8B, 0x63, 0x8B, 0xA8, 0x42, 0xF6, 0x04, 0x12,  // .c..B...
                /* 00C8 */  0x1C, 0xD0, 0x91, 0x60, 0x64, 0x40, 0x08, 0xB1,  // ...`d@..
                /* 00D0 */  0xF5, 0x21, 0x12, 0x02, 0xBB, 0x9F, 0x92, 0xB4,  // .!......
                /* 00D8 */  0x09, 0x30, 0x26, 0x40, 0xD9, 0xA0, 0x34, 0x9E,  // .0&@..4.
                /* 00E0 */  0x10, 0x11, 0xDA, 0x02, 0x12, 0x54, 0x71, 0x02,  // .....Tq.
                /* 00E8 */  0x9C, 0xA1, 0x68, 0x68, 0xD1, 0xE2, 0xC4, 0x88,  // ..hh....
                /* 00F0 */  0x12, 0x28, 0x4A, 0x83, 0x88, 0x42, 0xA9, 0x71,  // .(J..B.q
                /* 00F8 */  0x7C, 0x04, 0x38, 0x48, 0x64, 0x7B, 0x43, 0x10,  // |.8Hd{C.
                /* 0100 */  0x6A, 0xB4, 0x98, 0xED, 0x8F, 0x9D, 0x39, 0x38,  // j.....98
                /* 0108 */  0x10, 0xB0, 0x48, 0xA3, 0x41, 0x1D, 0x02, 0x12,  // ..H.A...
                /* 0110 */  0x3C, 0x14, 0xF8, 0x40, 0x70, 0x50, 0xC7, 0x79,  // <..@pP.y
                /* 0118 */  0x52, 0x67, 0xE6, 0x89, 0x9E, 0x57, 0x9D, 0xA7,  // Rg...W..
                /* 0120 */  0x01, 0x32, 0x6E, 0x36, 0x34, 0xB3, 0xEB, 0x78,  // .2n64..x
                /* 0128 */  0x00, 0xC1, 0x35, 0xA0, 0xEE, 0x05, 0x09, 0xFE,  // ..5.....
                /* 0130 */  0xFF, 0x4F, 0x05, 0x9E, 0x65, 0x38, 0xCC, 0x10,  // .O..e8..
                /* 0138 */  0x3D, 0xF2, 0x70, 0x27, 0x70, 0x88, 0x0C, 0xD0,  // =.p'p...
                /* 0140 */  0xC3, 0x7A, 0x20, 0xC0, 0x4E, 0xFA, 0x64, 0x0E,  // .z .N.d.
                /* 0148 */  0xBC, 0xD4, 0xB9, 0xEB, 0x64, 0x70, 0xD0, 0x09,  // ....dp..
                /* 0150 */  0x8E, 0xC7, 0xC7, 0x00, 0x8F, 0xDC, 0x04, 0x96,  // ........
                /* 0158 */  0x3F, 0x08, 0xD4, 0xC8, 0x0C, 0xED, 0x29, 0x9E,  // ?.....).
                /* 0160 */  0xD6, 0xDB, 0x80, 0xE7, 0x6F, 0x02, 0x8B, 0x3D,  // ....o..=
                /* 0168 */  0x4B, 0xD0, 0xF1, 0x80, 0x5F, 0xF1, 0xD1, 0x40,  // K..._..@
                /* 0170 */  0x08, 0xAF, 0x0C, 0x9E, 0xAF, 0x21, 0x75, 0xB4,  // .....!u.
                /* 0178 */  0x90, 0x93, 0xF1, 0xA0, 0xCE, 0x0B, 0x3E, 0x23,  // ......>#
                /* 0180 */  0xF0, 0x5B, 0x40, 0xC8, 0x33, 0xB7, 0xD6, 0xF3,  // .[@.3...
                /* 0188 */  0x03, 0x21, 0x18, 0x19, 0x42, 0xFF, 0x0C, 0x8B,  // .!..B...
                /* 0190 */  0x1A, 0x39, 0x3D, 0x55, 0xF0, 0x03, 0x05, 0xC3,  // .9=U....
                /* 0198 */  0xE5, 0x83, 0x39, 0x27, 0x9F, 0x3B, 0x3C, 0x36,  // ..9'.;<6
                /* 01A0 */  0xF8, 0xA7, 0x09, 0xE0, 0x38, 0x68, 0xF8, 0x17,  // ....8h..
                /* 01A8 */  0x0A, 0xA3, 0xFA, 0xFC, 0xF0, 0x0A, 0x91, 0xC0,  // ........
                /* 01B0 */  0x58, 0x81, 0xB1, 0xA3, 0xB6, 0x5F, 0x01, 0x08,  // X...._..
                /* 01B8 */  0xC1, 0xCF, 0xE8, 0xA9, 0xE0, 0xF1, 0xE3, 0xFF,  // ........
                /* 01C0 */  0x1F, 0xE1, 0xA0, 0x8C, 0xFE, 0xF4, 0xD0, 0xE7,  // ........
                /* 01C8 */  0xB0, 0x05, 0x11, 0xAD, 0x47, 0x28, 0x01, 0x19,  // ....G(..
                /* 01D0 */  0x23, 0x4E, 0xA5, 0x40, 0x82, 0x09, 0x16, 0xC8,  // #N.@....
                /* 01D8 */  0x23, 0x49, 0x60, 0x91, 0x23, 0x45, 0x0F, 0x82,  // #I`.#E..
                /* 01E0 */  0x03, 0x9E, 0xC3, 0x21, 0x05, 0x8D, 0x7D, 0x32,  // ...!..}2
                /* 01E8 */  0x51, 0xCE, 0xE3, 0x98, 0x7C, 0x40, 0x31, 0xC2,  // Q...|@1.
                /* 01F0 */  0x31, 0x3D, 0x97, 0x9C, 0xA5, 0x35, 0x4F, 0x52,  // 1=...5OR
                /* 01F8 */  0xF3, 0x7A, 0x1C, 0x38, 0x43, 0x8F, 0xDB, 0x43,  // .z.8C..C
                /* 0200 */  0xC0, 0x9C, 0x2B, 0x3C, 0x04, 0x3E, 0x80, 0x56,  // ..+<.>.V
                /* 0208 */  0xA7, 0x48, 0xA6, 0x73, 0x62, 0xB8, 0xA3, 0x0C,  // .H.sb...
                /* 0210 */  0x9F, 0x32, 0x6E, 0x00, 0x18, 0x91, 0x4A, 0x40,  // .2n...J@
                /* 0218 */  0x98, 0xF8, 0x97, 0x81, 0xA4, 0x3D, 0x11, 0x28,  // .....=.(
                /* 0220 */  0x8C, 0x0F, 0x37, 0x80, 0x2B, 0xA0, 0xE7, 0x07,  // ..7.+...
                /* 0228 */  0xF0, 0x9C, 0x0D, 0xE0, 0x62, 0x9F, 0xFC, 0xA3,  // ....b...
                /* 0230 */  0x41, 0x88, 0xA7, 0x87, 0xE8, 0xE7, 0x72, 0x32,  // A.....r2
                /* 0238 */  0x27, 0x10, 0xE1, 0xD1, 0x06, 0xF6, 0xFF, 0xFF,  // '.......
                /* 0240 */  0x68, 0xE3, 0x09, 0x55, 0x88, 0xA1, 0x21, 0x44,  // h..U..!D
                /* 0248 */  0x78, 0x97, 0x09, 0xF1, 0x4A, 0xF3, 0x3A, 0xF0,  // x...J.:.
                /* 0250 */  0xFE, 0xF0, 0x46, 0xF3, 0x54, 0xE3, 0x81, 0xBD,  // ..F.T...
                /* 0258 */  0x41, 0x84, 0x78, 0xB9, 0xF1, 0xD1, 0xE6, 0x38,  // A.x....8
                /* 0260 */  0x7C, 0xB6, 0x89, 0xF2, 0x58, 0x13, 0x38, 0x48,  // |...X.8H
                /* 0268 */  0x84, 0x88, 0x11, 0x62, 0x05, 0x0F, 0x1F, 0x21,  // ...b...!
                /* 0270 */  0x48, 0xE8, 0x47, 0x1B, 0x16, 0xEF, 0x38, 0xA0,  // H.G...8.
                /* 0278 */  0x53, 0x88, 0x8F, 0x36, 0x00, 0x3F, 0x8E, 0x08,  // S..6.?..
                /* 0280 */  0x8F, 0x25, 0xE0, 0x3F, 0x2B, 0xF0, 0x53, 0x09,  // .%.?+.S.
                /* 0288 */  0xD8, 0xFF, 0xFF, 0xA7, 0x12, 0x9C, 0x00, 0x1F,  // ........
                /* 0290 */  0x0C, 0x3D, 0x0C, 0xD4, 0x8B, 0x95, 0x8D, 0xC5,  // .=......
                /* 0298 */  0xFA, 0x50, 0x40, 0xE5, 0x9E, 0x12, 0x34, 0x9F,  // .P@...4.
                /* 02A0 */  0xB8, 0x31, 0x9F, 0x4B, 0x9E, 0x00, 0x22, 0xBF,  // .1.K..".
                /* 02A8 */  0xD5, 0xF8, 0x6C, 0xC3, 0x09, 0x2C, 0x10, 0x50,  // ..l..,.P
                /* 02B0 */  0x07, 0x38, 0x2E, 0x8D, 0x42, 0xC2, 0x20, 0x34,  // .8..B. 4
                /* 02B8 */  0x22, 0x9F, 0x3E, 0x08, 0x1C, 0x05, 0xF1, 0x11,  // ".>.....
                /* 02C0 */  0xC0, 0x31, 0x21, 0x74, 0x30, 0xC2, 0x9D, 0x01,  // .1!t0...
                /* 02C8 */  0x7C, 0x15, 0xE2, 0x04, 0x8E, 0x75, 0x2A, 0xA2,  // |....u*.
                /* 02D0 */  0x47, 0x06, 0xFC, 0x5C, 0x0E, 0xED, 0xCC, 0x3C,  // G..\...<
                /* 02D8 */  0x0B, 0xCB, 0x3B, 0x7B, 0x80, 0xE6, 0x10, 0x84,  // ..;{....
                /* 02E0 */  0x99, 0x08, 0x66, 0x18, 0x3E, 0x2B, 0xF1, 0x11,  // ..f.>+..
                /* 02E8 */  0xF8, 0x66, 0xF0, 0x4A, 0x63, 0x02, 0x76, 0x0E,  // .f.Jc.v.
                /* 02F0 */  0x02, 0x9F, 0xC0, 0x13, 0x02, 0x28, 0x80, 0x7C,  // .....(.|
                /* 02F8 */  0x1F, 0xF0, 0xE5, 0xE0, 0x99, 0x80, 0xCD, 0xE1,  // ........
                /* 0300 */  0x39, 0xC7, 0xA7, 0x1C, 0x06, 0xCF, 0xE3, 0x8C,  // 9.......
                /* 0308 */  0x8A, 0xCA, 0x1A, 0x17, 0x6A, 0x98, 0x3E, 0xC6,  // ....j.>.
                /* 0310 */  0x30, 0xEC, 0xD7, 0x01, 0x1F, 0x9A, 0x8E, 0xD1,  // 0.......
                /* 0318 */  0x67, 0x2A, 0x0C, 0xAC, 0x07, 0xCE, 0x61, 0x8D,  // g*....a.
                /* 0320 */  0x16, 0xF6, 0x78, 0x1F, 0x24, 0x7C, 0x09, 0xF1,  // ..x.$|..
                /* 0328 */  0xCC, 0x8C, 0x11, 0xD6, 0x83, 0x87, 0xFF, 0xFF,  // ........
                /* 0330 */  0x1F, 0x3C, 0x7C, 0x49, 0x67, 0x06, 0xB4, 0xE8,  // .<|Ig...
                /* 0338 */  0x33, 0x03, 0xE2, 0xDA, 0x11, 0xF0, 0x05, 0x27,  // 3......'
                /* 0340 */  0xFC, 0x29, 0x3C, 0x84, 0xB1, 0x79, 0xBF, 0x33,  // .)<..y.3
                /* 0348 */  0x58, 0xE6, 0x99, 0x01, 0x75, 0x6C, 0xB0, 0xBC,  // X...ul..
                /* 0350 */  0x33, 0x03, 0x4A, 0x10, 0x1C, 0x05, 0xF1, 0x99,  // 3.J.....
                /* 0358 */  0xC1, 0x61, 0xCF, 0x0C, 0xD0, 0xC3, 0x9D, 0x19,  // .a......
                /* 0360 */  0x40, 0x71, 0xDE, 0xC0, 0x8F, 0x13, 0xDE, 0xE8,  // @q......
                /* 0368 */  0xD8, 0x12, 0xCF, 0x0E, 0x03, 0x73, 0x78, 0xB8,  // .....sx.
                /* 0370 */  0x63, 0x03, 0xE0, 0x24, 0xD4, 0xB1, 0x01, 0x74,  // c..$...t
                /* 0378 */  0xA7, 0x00, 0x1F, 0x1B, 0xC0, 0x35, 0x7E, 0xFF,  // .....5~.
                /* 0380 */  0xFF, 0xC7, 0x0F, 0x1C, 0x4E, 0x0E, 0x30, 0x27,  // ....N.0'
                /* 0388 */  0xFE, 0xE4, 0x00, 0x38, 0x9B, 0x1D, 0xE6, 0xE4,  // ...8....
                /* 0390 */  0x00, 0x18, 0x85, 0xE5, 0x63, 0xE7, 0xFF, 0xFF,  // ....c...
                /* 0398 */  0x93, 0x03, 0xF0, 0x19, 0x3F, 0xBC, 0x93, 0x03,  // ....?...
                /* 03A0 */  0x4C, 0xB5, 0x27, 0x07, 0x40, 0xDA, 0xEC, 0x30,  // L.'.@..0
                /* 03A8 */  0x27, 0x07, 0xC0, 0xDE, 0xFF, 0xFF, 0xE4, 0x00,  // '.......
                /* 03B0 */  0x67, 0xEC, 0x3E, 0x39, 0x00, 0xB7, 0xF1, 0xC3,  // g.>9....
                /* 03B8 */  0x13, 0x75, 0x72, 0x40, 0x71, 0x58, 0xF6, 0xC9,  // .ur@qX..
                /* 03C0 */  0x01, 0x31, 0xCE, 0xA7, 0x43, 0xCF, 0xC7, 0x77,  // .1..C..w
                /* 03C8 */  0xCA, 0xC8, 0xB8, 0xA3, 0x03, 0x60, 0xE6, 0xD4,  // .....`..
                /* 03D0 */  0xF9, 0x3E, 0xEA, 0x33, 0x98, 0xA1, 0xDE, 0x94,  // .>.3....
                /* 03D8 */  0x3D, 0xC4, 0xD7, 0x41, 0x0F, 0x21, 0xDC, 0xD3,  // =..A.!..
                /* 03E0 */  0x23, 0x3B, 0x3A, 0x00, 0x1E, 0xFE, 0xFF, 0x47,  // #;:....G
                /* 03E8 */  0x07, 0x70, 0x5B, 0x38, 0x3A, 0x00, 0xAD, 0xF1,  // .p[8:...
                /* 03F0 */  0xC3, 0x17, 0x76, 0x74, 0x40, 0x0B, 0x3F, 0x3A,  // ..vt@.?:
                /* 03F8 */  0x40, 0xB1, 0x76, 0x74, 0x40, 0x0B, 0x3D, 0x3A,  // @.vt@.=:
                /* 0400 */  0xA0, 0x24, 0x52, 0xE8, 0xEC, 0xE0, 0xA3, 0x03,  // .$R.....
                /* 0408 */  0x97, 0x04, 0x47, 0x41, 0x7C, 0x74, 0x70, 0xDC,  // ..GA|tp.
                /* 0410 */  0xA3, 0x03, 0xF4, 0x78, 0x47, 0x07, 0x50, 0x1C,  // ...xG.P.
                /* 0418 */  0x54, 0x71, 0x63, 0x85, 0x7B, 0x21, 0x08, 0x65,  // Tqc.{!.e
                /* 0420 */  0xB8, 0x63, 0xF7, 0xD9, 0x01, 0x38, 0xFF, 0xFF,  // .c...8..
                /* 0428 */  0xCF, 0x0E, 0xE0, 0x3D, 0x9A, 0xFA, 0xEC, 0x00,  // ...=....
                /* 0430 */  0xAE, 0x33, 0xB9, 0xCF, 0x0E, 0xE0, 0x3A, 0x00,  // .3....:.
                /* 0438 */  0x00, 0x97, 0x63, 0x0C, 0x38, 0xAE, 0xDB, 0x8F,  // ..c.8...
                /* 0440 */  0x31, 0x80, 0xA5, 0xC1, 0xC2, 0x39, 0x7C, 0xF0,  // 1....9|.
                /* 0448 */  0xB3, 0x03, 0x38, 0xFF, 0xFF, 0xC7, 0x18, 0xC0,  // ..8.....
                /* 0450 */  0xC9, 0x89, 0xDA, 0xC7, 0x18, 0xE0, 0x34, 0x7E,  // ......4~
                /* 0458 */  0xF8, 0x0A, 0x6D, 0xFA, 0xD4, 0x68, 0xD4, 0xAA,  // ..m..h..
                /* 0460 */  0x41, 0x99, 0x1A, 0x65, 0x1A, 0xD4, 0xEA, 0x53,  // A..e...S
                /* 0468 */  0xA9, 0x31, 0x63, 0xA7, 0x04, 0x1F, 0xEF, 0x3C,  // .1c....<
                /* 0470 */  0x3A, 0x07, 0x02, 0xA1, 0xC1, 0x28, 0x04, 0xE2,  // :....(..
                /* 0478 */  0x98, 0x8F, 0x0C, 0x81, 0x58, 0xE4, 0xDA, 0x04,  // ....X...
                /* 0480 */  0xE2, 0xE0, 0x0B, 0x92, 0x91, 0xF3, 0xB7, 0x4D,  // .......M
                /* 0488 */  0x00, 0x31, 0x11, 0xEB, 0x13, 0x90, 0x25, 0x81,  // .1....%.
                /* 0490 */  0x68, 0xBC, 0xC4, 0x06, 0x10, 0x13, 0x09, 0x22,  // h......"
                /* 0498 */  0x20, 0x0B, 0x3D, 0x8B, 0x0B, 0xC8, 0xB2, 0x41,  //  .=....A
                /* 04A0 */  0x04, 0x64, 0xF1, 0x34, 0x02, 0x72, 0x14, 0x0A,  // .d.4.r..
                /* 04A8 */  0x01, 0x39, 0xD2, 0x7A, 0x04, 0xE4, 0x80, 0x20,  // .9.z... 
                /* 04B0 */  0x02, 0x72, 0x50, 0x2B, 0x40, 0x2C, 0x36, 0x88,  // .rP+@,6.
                /* 04B8 */  0x80, 0xFC, 0xFF, 0x07                           // ....
            })
        }

        Device (WMIP)
        {
            Name (_HID, "PNP0C14" /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "Psensor")  // _UID: Unique ID
            Name (PDAT, Buffer (0x08)
            {
                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
            })
            CreateByteField (PDAT, Zero, SA2G)
            CreateByteField (PDAT, One, S5B1)
            CreateByteField (PDAT, 0x02, S5B2)
            CreateByteField (PDAT, 0x03, S5B3)
            CreateByteField (PDAT, 0x04, S5B4)
            Name (_WDG, Buffer (0x3C)
            {
                /* 0000 */  0xF9, 0x06, 0xD7, 0x04, 0xE1, 0x73, 0x7E, 0x4D,  // .....s~M
                /* 0008 */  0x84, 0x3B, 0x3B, 0x7C, 0x82, 0x4F, 0x65, 0xD4,  // .;;|.Oe.
                /* 0010 */  0x50, 0x53, 0x01, 0x02, 0x21, 0x12, 0x90, 0x05,  // PS..!...
                /* 0018 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  // f.......
                /* 0020 */  0xC9, 0x06, 0x29, 0x10, 0x44, 0x44, 0x01, 0x00,  // ..).DD..
                /* 0028 */  0xFA, 0x06, 0xD7, 0x04, 0xE1, 0x73, 0x7E, 0x4D,  // .....s~M
                /* 0030 */  0x84, 0x3B, 0x3B, 0x7C, 0x82, 0x4F, 0x65, 0xD4,  // .;;|.Oe.
                /* 0038 */  0xD0, 0x00, 0x01, 0x08                           // ....
            })
            Method (WMPS, 3, NotSerialized)
            {
                If ((Arg1 == One))
                {
                    Return (One)
                }

                If ((Arg1 == 0x02))
                {
                    Return (One)
                }

                If ((Arg1 == 0x03))
                {
                    If (^^PCI0.LPC0.EC0.PSTG)
                    {
                        SA2G = 0x38
                        S5B1 = 0x32
                        S5B2 = 0x32
                        S5B3 = 0x32
                        S5B4 = 0x32
                    }
                    Else
                    {
                        SA2G = 0x58
                        S5B1 = 0x58
                        S5B2 = 0x58
                        S5B3 = 0x58
                        S5B4 = 0x58
                    }

                    Return (PDAT) /* \_SB_.WMIP.PDAT */
                }

                If ((Arg1 == 0x04))
                {
                    If (^^PCI0.LPC0.EC0.PSTG)
                    {
                        SA2G = 0x38
                        S5B1 = 0x32
                        S5B2 = 0x32
                        S5B3 = 0x32
                        S5B4 = 0x32
                    }
                    Else
                    {
                        SA2G = 0x58
                        S5B1 = 0x58
                        S5B2 = 0x58
                        S5B3 = 0x58
                        S5B4 = 0x58
                    }

                    Return (PDAT) /* \_SB_.WMIP.PDAT */
                }

                If ((Arg1 == 0x05))
                {
                    Return (0x02)
                }
            }

            Method (_WED, 1, NotSerialized)  // _Wxx: Wake Event, xx=0x00-0xFF
            {
                If ((Arg0 == 0xD0))
                {
                    Return (One)
                }

                Return (Zero)
            }

            Name (WQDD, Buffer (0x047E)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0x6E, 0x04, 0x00, 0x00, 0xD8, 0x13, 0x00, 0x00,  // n.......
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0x28, 0xD3, 0x89, 0x00, 0x01, 0x06, 0x18, 0x42,  // (......B
                /* 0020 */  0x10, 0x05, 0x10, 0x0A, 0xA1, 0x83, 0x42, 0x04,  // ......B.
                /* 0028 */  0x12, 0x4F, 0x24, 0x59, 0x0E, 0x60, 0x30, 0x1A,  // .O$Y.`0.
                /* 0030 */  0x40, 0x24, 0x07, 0x42, 0x2E, 0x98, 0x98, 0x00,  // @$.B....
                /* 0038 */  0x11, 0x10, 0xF2, 0x2A, 0xC0, 0xA6, 0x00, 0x93,  // ...*....
                /* 0040 */  0x20, 0xEA, 0xDF, 0x1F, 0xA2, 0x24, 0x38, 0x94,  //  ....$8.
                /* 0048 */  0x10, 0x08, 0x49, 0x14, 0x60, 0x5E, 0x80, 0x6E,  // ..I.`^.n
                /* 0050 */  0x01, 0x86, 0x05, 0xD8, 0x16, 0x60, 0x5A, 0x80,  // .....`Z.
                /* 0058 */  0x63, 0x48, 0x2A, 0x0D, 0x9C, 0x12, 0x58, 0x0A,  // cH*...X.
                /* 0060 */  0x84, 0x84, 0x0A, 0x50, 0x2E, 0xC0, 0xB7, 0x00,  // ...P....
                /* 0068 */  0xED, 0x88, 0x92, 0x2C, 0xC0, 0x32, 0x8C, 0x08,  // ...,.2..
                /* 0070 */  0x3C, 0x8A, 0xC8, 0x46, 0xE3, 0xD0, 0xD8, 0x61,  // <..F...a
                /* 0078 */  0x58, 0x26, 0x98, 0x06, 0x71, 0x18, 0x65, 0x23,  // X&..q.e#
                /* 0080 */  0x8B, 0xC0, 0x13, 0xEA, 0x54, 0x80, 0x5C, 0x01,  // ....T.\.
                /* 0088 */  0xC2, 0x46, 0x16, 0x55, 0x18, 0xCD, 0x41, 0x11,  // .F.U..A.
                /* 0090 */  0xA0, 0xD0, 0x18, 0x31, 0x63, 0x22, 0xB0, 0x9D,  // ...1c"..
                /* 0098 */  0x63, 0x6B, 0x14, 0xA7, 0x51, 0xB8, 0x00, 0xE9,  // ck..Q...
                /* 00A0 */  0x18, 0x1A, 0xC1, 0x71, 0x1D, 0x83, 0x2D, 0x0A,  // ...q..-.
                /* 00A8 */  0xD0, 0x29, 0xC0, 0xA7, 0x00, 0xAD, 0x10, 0xF2,  // .)......
                /* 00B0 */  0x3B, 0x1A, 0x4D, 0x21, 0x90, 0x31, 0xE2, 0x54,  // ;.M!.1.T
                /* 00B8 */  0x0A, 0x24, 0xEC, 0x06, 0x05, 0x48, 0x85, 0x90,  // .$...H..
                /* 00C0 */  0x20, 0x74, 0xCD, 0xE5, 0x64, 0x4E, 0x20, 0x42,  //  t..dN B
                /* 00C8 */  0x82, 0x28, 0xC7, 0x81, 0x91, 0x01, 0x21, 0xCF,  // .(....!.
                /* 00D0 */  0x02, 0xAC, 0x0F, 0x90, 0x10, 0xD8, 0xFD, 0x84,  // ........
                /* 00D8 */  0x34, 0xA3, 0x30, 0xBD, 0x81, 0x48, 0x9B, 0x00,  // 4.0..H..
                /* 00E0 */  0xCD, 0x73, 0x92, 0x2D, 0x18, 0x39, 0x9B, 0x8F,  // .s.-.9..
                /* 00E8 */  0x8C, 0xA1, 0x08, 0x8D, 0xC1, 0x44, 0x29, 0x0E,  // .....D).
                /* 00F0 */  0x46, 0x58, 0x15, 0xA3, 0x08, 0xC3, 0x50, 0x07,  // FX....P.
                /* 00F8 */  0x12, 0xA9, 0x32, 0x28, 0x21, 0xC7, 0x6E, 0x0D,  // ..2(!.n.
                /* 0100 */  0x53, 0x28, 0xED, 0x0F, 0x82, 0x44, 0x3B, 0x0E,  // S(...D;.
                /* 0108 */  0x48, 0x02, 0x88, 0x22, 0x8D, 0x06, 0x75, 0x04,  // H.."..u.
                /* 0110 */  0x48, 0xF0, 0x48, 0xE0, 0xE3, 0xC0, 0x09, 0x1E,  // H.H.....
                /* 0118 */  0xD4, 0x31, 0x1E, 0x56, 0x90, 0x03, 0x38, 0x8B,  // .1.V..8.
                /* 0120 */  0xC3, 0x7B, 0x16, 0xF0, 0xA8, 0x19, 0x56, 0x82,  // .{....V.
                /* 0128 */  0xDF, 0x03, 0x1F, 0x0E, 0xF0, 0xAE, 0x01, 0x75,  // .......u
                /* 0130 */  0x2B, 0x78, 0x26, 0x60, 0xB3, 0x4C, 0xF0, 0xFF,  // +x&`.L..
                /* 0138 */  0x0F, 0xC7, 0x87, 0xE8, 0x71, 0x87, 0x3B, 0x81,  // ....q.;.
                /* 0140 */  0x43, 0x64, 0x80, 0x9E, 0xE0, 0xE3, 0x00, 0xD6,  // Cd......
                /* 0148 */  0xE1, 0x64, 0x74, 0x16, 0x38, 0xE8, 0x66, 0x87,  // .dt.8.f.
                /* 0150 */  0xAE, 0x99, 0x27, 0x38, 0x1E, 0x1F, 0x02, 0x3C,  // ..'8...<
                /* 0158 */  0x9F, 0x13, 0x4E, 0x60, 0xF9, 0x83, 0x40, 0x8D,  // ..N`..@.
                /* 0160 */  0xCC, 0xD0, 0x1E, 0xFF, 0x69, 0xBD, 0x0B, 0xF8,  // ....i...
                /* 0168 */  0x88, 0x70, 0x58, 0x4C, 0xEC, 0x49, 0x82, 0x8E,  // .pXL.I..
                /* 0170 */  0x07, 0xFC, 0xA3, 0x7F, 0x40, 0x88, 0xF0, 0xC2,  // ....@...
                /* 0178 */  0xE0, 0xF9, 0xFA, 0xA0, 0x60, 0x60, 0xEC, 0x80,  // ....``..
                /* 0180 */  0x7C, 0x40, 0x88, 0x10, 0xFC, 0x45, 0xE1, 0x88,  // |@...E..
                /* 0188 */  0x1E, 0x12, 0x22, 0x3C, 0x2B, 0xC0, 0x26, 0xB0,  // .."<+.&.
                /* 0190 */  0xC8, 0xD3, 0x03, 0x7A, 0x04, 0x1C, 0xF2, 0x04,  // ...z....
                /* 0198 */  0x8E, 0x27, 0x6C, 0xD4, 0xD0, 0x51, 0x4E, 0xE2,  // .'l..QN.
                /* 01A0 */  0x80, 0x7C, 0xAE, 0x30, 0xC2, 0x69, 0x3E, 0x4A,  // .|.0.i>J
                /* 01A8 */  0x3C, 0x5E, 0xF8, 0x76, 0x70, 0x46, 0x4F, 0x0C,  // <^.vpFO.
                /* 01B0 */  0xE7, 0xF4, 0x36, 0xE0, 0x21, 0x68, 0x99, 0xB2,  // ..6.!h..
                /* 01B8 */  0x00, 0x22, 0x71, 0x4B, 0x95, 0x8D, 0xA5, 0x7A,  // ."qK...z
                /* 01C0 */  0x10, 0x54, 0xF8, 0x19, 0x41, 0x1E, 0x71, 0x85,  // .T..A.q.
                /* 01C8 */  0x79, 0x42, 0xCF, 0x1A, 0x3E, 0x00, 0xBC, 0x51,  // yB..>..Q
                /* 01D0 */  0xF0, 0x61, 0x0B, 0x4E, 0x27, 0x12, 0x2E, 0x93,  // .a.N'...
                /* 01D8 */  0x42, 0x22, 0x21, 0x34, 0x20, 0xC3, 0x59, 0x16,  // B"!4 .Y.
                /* 01E0 */  0x1C, 0x05, 0xF1, 0xF8, 0x1D, 0x19, 0x42, 0x9F,  // ......B.
                /* 01E8 */  0x13, 0x1D, 0x05, 0x10, 0x07, 0x00, 0x0F, 0xF8,  // ........
                /* 01F0 */  0x84, 0x5E, 0x19, 0x4C, 0xE0, 0x88, 0x10, 0x3A,  // .^.L...:
                /* 01F8 */  0x3D, 0xF8, 0xBC, 0x80, 0x1F, 0xCB, 0x91, 0x9D,  // =.......
                /* 0200 */  0x98, 0x67, 0xE1, 0x2B, 0x40, 0x28, 0xF6, 0xFF,  // .g.+@(..
                /* 0208 */  0x3F, 0x78, 0xC0, 0x1F, 0x1C, 0x5B, 0xE1, 0x13,  // ?x...[..
                /* 0210 */  0x80, 0x0F, 0x00, 0x41, 0xCE, 0x37, 0xD8, 0xC9,  // ...A.7..
                /* 0218 */  0x1A, 0xE5, 0x25, 0xC1, 0x23, 0xC4, 0x0E, 0xC6,  // ..%.#...
                /* 0220 */  0x7F, 0x17, 0x3A, 0x0E, 0x72, 0x39, 0x78, 0x2B,  // ..:.r9x+
                /* 0228 */  0x30, 0x01, 0x3B, 0x24, 0xC0, 0xBF, 0x80, 0x78,  // 0.;$...x
                /* 0230 */  0x06, 0xA7, 0xF2, 0xCE, 0xF1, 0xC6, 0x91, 0xC0,  // ........
                /* 0238 */  0x02, 0x0F, 0x09, 0xA0, 0x00, 0xF2, 0xA5, 0xC0,  // ........
                /* 0240 */  0xF7, 0x83, 0x07, 0x03, 0x36, 0x87, 0x10, 0x61,  // ....6..a
                /* 0248 */  0xA2, 0x19, 0x1E, 0x13, 0x6D, 0x54, 0x54, 0xD6,  // ....mTT.
                /* 0250 */  0xB8, 0x50, 0x83, 0xF5, 0x49, 0x86, 0x61, 0x9F,  // .P..I.a.
                /* 0258 */  0xA7, 0x45, 0x8F, 0x92, 0x0C, 0xEA, 0x7D, 0xC2,  // .E....}.
                /* 0260 */  0x47, 0x01, 0x32, 0x7C, 0x14, 0xAC, 0xD1, 0xC2,  // G.2|....
                /* 0268 */  0x1E, 0xF5, 0xB3, 0x84, 0xEF, 0x21, 0x9E, 0x99,  // .....!..
                /* 0270 */  0x31, 0xC2, 0xFA, 0x08, 0x00, 0xBC, 0xE4, 0x1E,  // 1.......
                /* 0278 */  0x1F, 0x50, 0xA7, 0x20, 0x87, 0x58, 0x95, 0x46,  // .P. .X.F
                /* 0280 */  0x14, 0x31, 0xFA, 0x99, 0x1F, 0x45, 0x84, 0xA0,  // .1...E..
                /* 0288 */  0x81, 0x8F, 0xE1, 0x01, 0xC3, 0x73, 0x32, 0x58,  // .....s2X
                /* 0290 */  0x20, 0x13, 0x58, 0xF2, 0x09, 0x02, 0x75, 0x88,  //  .X...u.
                /* 0298 */  0xB0, 0xD4, 0x13, 0x04, 0x4A, 0x1C, 0x1C, 0x05,  // ....J...
                /* 02A0 */  0xF1, 0x09, 0xC2, 0xC1, 0x4F, 0x10, 0xF4, 0xFF,  // ....O...
                /* 02A8 */  0x7F, 0x82, 0x80, 0x17, 0xF4, 0x04, 0x01, 0x0A,  // ........
                /* 02B0 */  0xC1, 0xE3, 0x05, 0xCD, 0xD4, 0xDE, 0x74, 0x8E,  // ......t.
                /* 02B8 */  0x0D, 0xB7, 0xCD, 0x87, 0x8F, 0xC7, 0x13, 0x23,  // .......#
                /* 02C0 */  0x1E, 0xC3, 0xE3, 0x8A, 0xEF, 0x41, 0xC6, 0x89,  // .....A..
                /* 02C8 */  0x1C, 0xE2, 0x2D, 0x25, 0xF4, 0xA3, 0x40, 0x88,  // ..-%..@.
                /* 02D0 */  0x68, 0x4F, 0x36, 0x3E, 0x44, 0x00, 0x4E, 0x02,  // hO6>D.N.
                /* 02D8 */  0x1E, 0x22, 0x40, 0x77, 0x16, 0xF0, 0x21, 0x02,  // ."@w..!.
                /* 02E0 */  0x5C, 0xA7, 0x00, 0xE0, 0x77, 0xAA, 0xC1, 0x71,  // \...w..q
                /* 02E8 */  0xF8, 0xFF, 0x2F, 0xFD, 0x54, 0x83, 0x38, 0x44,  // ../.T.8D
                /* 02F0 */  0x60, 0x61, 0x5E, 0x19, 0x3C, 0x2D, 0x1F, 0x21,  // `a^.<-.!
                /* 02F8 */  0xD8, 0x31, 0x82, 0x1F, 0x6B, 0x2C, 0xF1, 0x18,  // .1..k,..
                /* 0300 */  0x81, 0x12, 0x05, 0x47, 0x41, 0x3C, 0x56, 0x07,  // ...GA<V.
                /* 0308 */  0x86, 0x90, 0x95, 0x63, 0x04, 0xD4, 0x03, 0x80,  // ...c....
                /* 0310 */  0x8F, 0x11, 0xF0, 0xA7, 0xF4, 0x14, 0x02, 0xB6,  // ........
                /* 0318 */  0x31, 0xE3, 0xCF, 0x0D, 0xA1, 0x1E, 0xBB, 0xD8,  // 1.......
                /* 0320 */  0x00, 0xD9, 0x11, 0x02, 0x38, 0xDC, 0xCA, 0xDE,  // ....8...
                /* 0328 */  0xE8, 0x7C, 0x84, 0x00, 0x26, 0xC1, 0x8E, 0x10,  // .|..&...
                /* 0330 */  0xA0, 0x83, 0xE5, 0x47, 0x08, 0xF0, 0x9C, 0x00,  // ...G....
                /* 0338 */  0xC0, 0xF3, 0xFF, 0x3F, 0x01, 0x80, 0x47, 0xDE,  // ...?..G.
                /* 0340 */  0xA9, 0x06, 0x7D, 0x68, 0xF4, 0xF1, 0x01, 0xF6,  // ..}h....
                /* 0348 */  0x71, 0x84, 0x9D, 0x1F, 0x00, 0x5F, 0x37, 0xC3,  // q...._7.
                /* 0350 */  0xE7, 0x07, 0xC0, 0xE8, 0xE8, 0x7D, 0x7E, 0x80,  // .....}~.
                /* 0358 */  0xF7, 0xFF, 0x3F, 0x3F, 0x00, 0xA7, 0x13, 0x00,  // ..??....
                /* 0360 */  0xFE, 0x34, 0x03, 0x9E, 0x53, 0x97, 0x47, 0x7F,  // .4..S.G.
                /* 0368 */  0x4C, 0x3E, 0x3E, 0x80, 0xF1, 0x8C, 0x05, 0xF7,  // L>>.....
                /* 0370 */  0xF8, 0x00, 0x1C, 0x0F, 0x43, 0x9E, 0x1F, 0xE6,  // ....C...
                /* 0378 */  0x7C, 0x05, 0x58, 0x39, 0x3E, 0xC0, 0xF9, 0xFF,  // |.X9>...
                /* 0380 */  0x1F, 0x1F, 0xE0, 0x9E, 0x30, 0x7D, 0x7C, 0x00,  // ....0}|.
                /* 0388 */  0xAE, 0x27, 0x00, 0x7C, 0xB0, 0xD7, 0x81, 0x09,  // .'.|....
                /* 0390 */  0x14, 0xE0, 0xA8, 0xA0, 0x28, 0x30, 0xA8, 0x23,  // ....(0.#
                /* 0398 */  0x35, 0xE0, 0x6A, 0xDC, 0x1E, 0x35, 0x38, 0x60,  // 5.j..58`
                /* 03A0 */  0x8E, 0x39, 0xD8, 0x31, 0xE3, 0x2E, 0x20, 0x98,  // .9.1.. .
                /* 03A8 */  0x61, 0xFB, 0x58, 0xF0, 0xA8, 0xEB, 0xA3, 0x70,  // a.X....p
                /* 03B0 */  0x1C, 0x43, 0x3C, 0x3D, 0x7A, 0xE6, 0x7E, 0x85,  // .C<=z.~.
                /* 03B8 */  0xB0, 0x43, 0x35, 0xB8, 0x66, 0xF0, 0x50, 0x8D,  // .C5.f.P.
                /* 03C0 */  0xFD, 0xFF, 0x1F, 0xAA, 0xC1, 0x27, 0xE5, 0xF9,  // .....'..
                /* 03C8 */  0xA0, 0x03, 0x81, 0x0F, 0xD5, 0x00, 0x3F, 0x24,  // ......?$
                /* 03D0 */  0x1C, 0x2D, 0x74, 0xAA, 0x81, 0x7B, 0x42, 0xF6,  // .-t..{B.
                /* 03D8 */  0x27, 0xC3, 0xA2, 0xCE, 0x24, 0xA8, 0x23, 0x85,  // '...$.#.
                /* 03E0 */  0x4F, 0x13, 0x0C, 0x95, 0x9F, 0x6A, 0x31, 0x03,  // O....j1.
                /* 03E8 */  0x83, 0x7F, 0x94, 0x00, 0xEF, 0xFF, 0xFF, 0x28,  // .......(
                /* 03F0 */  0x01, 0x96, 0x3B, 0x04, 0x3B, 0xDE, 0x80, 0xEF,  // ..;.;...
                /* 03F8 */  0xCC, 0xF1, 0x54, 0x0E, 0x76, 0x54, 0x9F, 0xCA,  // ..T.vT..
                /* 0400 */  0xA3, 0x06, 0x7A, 0x79, 0x89, 0x15, 0x27, 0x44,  // ..zy..'D
                /* 0408 */  0xCC, 0x78, 0x3E, 0x0D, 0xFB, 0x6C, 0x0E, 0x3C,  // .x>..l.<
                /* 0410 */  0x8E, 0xEF, 0xB8, 0x73, 0x85, 0x87, 0xC0, 0x07,  // ...s....
                /* 0418 */  0xD0, 0xEA, 0x2C, 0xC9, 0x8C, 0xCE, 0x0D, 0x77,  // ..,....w
                /* 0420 */  0x94, 0xE1, 0x60, 0xA7, 0xCD, 0x0F, 0x42, 0x38,  // ..`...B8
                /* 0428 */  0x85, 0x36, 0x7D, 0x6A, 0x34, 0x6A, 0xD5, 0xA0,  // .6}j4j..
                /* 0430 */  0x4C, 0x8D, 0x32, 0x0D, 0x6A, 0xF5, 0xA9, 0xD4,  // L.2.j...
                /* 0438 */  0x98, 0x31, 0x1F, 0xA3, 0xF0, 0x3B, 0x42, 0x07,  // .1...;B.
                /* 0440 */  0x05, 0x87, 0x01, 0xA1, 0x32, 0x5F, 0x0B, 0x32,  // ....2_.2
                /* 0448 */  0x02, 0x22, 0xD1, 0x20, 0x02, 0x72, 0x9C, 0x37,  // .". .r.7
                /* 0450 */  0x88, 0x80, 0x1C, 0x0E, 0x44, 0x40, 0x8E, 0xBC,  // ....D@..
                /* 0458 */  0x06, 0x01, 0x59, 0x80, 0x09, 0x20, 0x26, 0xE8,  // ..Y.. &.
                /* 0460 */  0xB5, 0x20, 0x20, 0xCB, 0x03, 0x11, 0x90, 0xC5,  // .  .....
                /* 0468 */  0xDA, 0x00, 0x62, 0xD2, 0x41, 0x04, 0xE4, 0x58,  // ..b.A..X
                /* 0470 */  0xCF, 0x00, 0x81, 0x58, 0x14, 0x95, 0xCE, 0x49,  // ...X...I
                /* 0478 */  0x44, 0x09, 0x08, 0xFB, 0xFF, 0x03               // D.....
            })
        }

        Device (WFDE)
        {
            Name (_HID, "PNP0C14" /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "PsensorMTK")  // _UID: Unique ID
            Name (_WDG, Buffer (0x3C)
            {
                /* 0000 */  0xD4, 0x6E, 0x52, 0xB2, 0x45, 0xCB, 0xFA, 0x49,  // .nR.E..I
                /* 0008 */  0x92, 0x30, 0x8D, 0x2F, 0xE8, 0xAF, 0xB8, 0xEC,  // .0./....
                /* 0010 */  0x44, 0x45, 0x01, 0x02, 0xA0, 0x0D, 0x2A, 0x1E,  // DE....*.
                /* 0018 */  0x9E, 0x2B, 0x4F, 0x42, 0x9C, 0x87, 0xB1, 0xDA,  // .+OB....
                /* 0020 */  0xC3, 0xF4, 0xE9, 0xDA, 0xD0, 0x00, 0x01, 0x08,  // ........
                /* 0028 */  0x21, 0x12, 0x90, 0x05, 0x66, 0xD5, 0xD1, 0x11,  // !...f...
                /* 0030 */  0xB2, 0xF0, 0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10,  // ......).
                /* 0038 */  0x43, 0x43, 0x01, 0x00                           // CC..
            })
            Method (WMDE, 3, NotSerialized)
            {
                If ((Arg1 == One))
                {
                    Return (One)
                }

                If ((Arg1 == 0x02))
                {
                    Return (One)
                }

                If ((Arg1 == 0x03))
                {
                    If (^^PCI0.LPC0.EC0.PSTG)
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return (0x02)
                    }
                }

                Return (Zero)
            }

            Method (_WED, 1, NotSerialized)  // _Wxx: Wake Event, xx=0x00-0xFF
            {
                If ((Arg0 == 0xD0))
                {
                    Return (PDAT) /* \_SB_.PDAT */
                }

                Return (Zero)
            }

            Name (WQCC, Buffer (0x04AB)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0x9B, 0x04, 0x00, 0x00, 0xF8, 0x10, 0x00, 0x00,  // ........
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0x18, 0x43, 0x88, 0x00, 0x01, 0x06, 0x18, 0x42,  // .C.....B
                /* 0020 */  0x10, 0x07, 0x10, 0x8A, 0x0F, 0x21, 0x02, 0x8B,  // .....!..
                /* 0028 */  0x80, 0x50, 0x60, 0x18, 0x14, 0x81, 0xC3, 0x42,  // .P`....B
                /* 0030 */  0x52, 0x89, 0x50, 0x28, 0x7E, 0x09, 0xE8, 0x4F,  // R.P(~..O
                /* 0038 */  0x20, 0xBF, 0x02, 0x10, 0x3A, 0x14, 0x20, 0x53,  //  ...:. S
                /* 0040 */  0x80, 0x41, 0x01, 0x4E, 0x11, 0x44, 0x10, 0xA4,  // .A.N.D..
                /* 0048 */  0x63, 0x01, 0xC2, 0x05, 0x98, 0x86, 0x91, 0x65,  // c......e
                /* 0050 */  0x01, 0xBA, 0x05, 0x38, 0x17, 0xE0, 0x5B, 0x80,  // ...8..[.
                /* 0058 */  0x72, 0x01, 0x16, 0x05, 0x68, 0xC7, 0x21, 0xD2,  // r...h.!.
                /* 0060 */  0x01, 0x25, 0x72, 0x04, 0x28, 0x31, 0x23, 0x40,  // .%r.(1#@
                /* 0068 */  0xE9, 0x44, 0x97, 0x4D, 0x54, 0x81, 0x17, 0x8A,  // .D.MT...
                /* 0070 */  0xA2, 0x49, 0x44, 0x49, 0x10, 0x3D, 0x7E, 0x84,  // .IDI.=~.
                /* 0078 */  0xD8, 0xE5, 0x0A, 0x90, 0x3C, 0x00, 0x69, 0x16,  // ....<.i.
                /* 0080 */  0x60, 0x58, 0x80, 0x75, 0x01, 0xB2, 0x67, 0x40,  // `X.u..g@
                /* 0088 */  0xC6, 0x84, 0x95, 0x33, 0x04, 0xD4, 0x00, 0x5A,  // ...3...Z
                /* 0090 */  0x9D, 0x80, 0xF0, 0x2B, 0x9D, 0x15, 0x92, 0xA0,  // ...+....
                /* 0098 */  0xD7, 0x79, 0xC8, 0xE4, 0x94, 0x90, 0x03, 0xC0,  // .y......
                /* 00A0 */  0x84, 0x56, 0x01, 0xC2, 0xE2, 0xAC, 0x59, 0x42,  // .V....YB
                /* 00A8 */  0x97, 0x6A, 0x18, 0xAA, 0x61, 0x1C, 0xD4, 0xC5,  // .j..a...
                /* 00B0 */  0xA0, 0x51, 0x43, 0x60, 0x83, 0x31, 0x44, 0x49,  // .QC`.1DI
                /* 00B8 */  0x70, 0xA8, 0x41, 0x7B, 0x54, 0xCD, 0x8F, 0x43,  // p.A{T..C
                /* 00C0 */  0x33, 0x6B, 0x7B, 0xC0, 0x9A, 0x71, 0x48, 0x26,  // 3k{..qH&
                /* 00C8 */  0x6D, 0x28, 0x28, 0x29, 0x10, 0x1A, 0xD7, 0x59,  // m(()...Y
                /* 00D0 */  0x7A, 0x46, 0x11, 0x8F, 0xD2, 0x30, 0xC7, 0xC5,  // zF...0..
                /* 00D8 */  0x90, 0x8D, 0xC6, 0xA1, 0xB1, 0xC3, 0xF0, 0x10,  // ........
                /* 00E0 */  0x83, 0x1D, 0xC4, 0x61, 0x1C, 0x6F, 0xE4, 0x04,  // ...a.o..
                /* 00E8 */  0x9E, 0xD0, 0x51, 0x1E, 0x75, 0x61, 0x02, 0xC4,  // ..Q.ua..
                /* 00F0 */  0xA3, 0x0A, 0xA3, 0x39, 0x28, 0x12, 0xE0, 0x18,  // ...9(...
                /* 00F8 */  0x80, 0x1E, 0x53, 0xD8, 0xF7, 0x81, 0xD8, 0x47,  // ..S....G
                /* 0100 */  0x71, 0x1A, 0x0F, 0x05, 0x07, 0x1B, 0xE3, 0x08,  // q.......
                /* 0108 */  0x8E, 0x2B, 0xC1, 0x59, 0x9F, 0xC1, 0xFF, 0xFF,  // .+.Y....
                /* 0110 */  0x14, 0xA2, 0x45, 0x28, 0xE8, 0x0E, 0x20, 0x8C,  // ..E(.. .
                /* 0118 */  0x98, 0x87, 0x14, 0x25, 0x60, 0xBC, 0x18, 0x21,  // ...%`..!
                /* 0120 */  0xA2, 0x1E, 0x95, 0x01, 0x03, 0x05, 0x09, 0x74,  // .......t
                /* 0128 */  0x56, 0x31, 0xA2, 0x14, 0x0D, 0x26, 0xC8, 0xC0,  // V1...&..
                /* 0130 */  0x9E, 0x80, 0x31, 0xE2, 0x85, 0x08, 0x1A, 0xE3,  // ..1.....
                /* 0138 */  0x38, 0xBA, 0xC6, 0x90, 0xE7, 0x51, 0xD1, 0x59,  // 8....Q.Y
                /* 0140 */  0x1C, 0x10, 0x46, 0x06, 0x84, 0xC0, 0xCE, 0xE3,  // ..F.....
                /* 0148 */  0x48, 0x4D, 0x60, 0xF7, 0x02, 0x14, 0x0A, 0x50,  // HM`....P
                /* 0150 */  0x26, 0xC0, 0x1A, 0x84, 0xB4, 0x5D, 0x08, 0x34,  // &....].4
                /* 0158 */  0xAD, 0xB3, 0x6B, 0x6B, 0x48, 0x82, 0x0A, 0x12,  // ..kkH...
                /* 0160 */  0x2A, 0x4A, 0x8C, 0x13, 0xAC, 0xF1, 0x6A, 0x20,  // *J....j 
                /* 0168 */  0x94, 0x20, 0x11, 0x3B, 0x9B, 0xA4, 0x50, 0x8A,  // . .;..P.
                /* 0170 */  0xC3, 0x14, 0x4C, 0xAC, 0xB8, 0x51, 0xA2, 0x05,  // ..L..Q..
                /* 0178 */  0x09, 0x1B, 0x24, 0x4C, 0xE8, 0xF6, 0x07, 0x41,  // ..$L...A
                /* 0180 */  0xA2, 0x9D, 0x0B, 0x24, 0x01, 0x44, 0x91, 0x46,  // ...$.D.F
                /* 0188 */  0x83, 0x3A, 0x30, 0xF8, 0x6C, 0xE0, 0x73, 0xC1,  // .:0.l.s.
                /* 0190 */  0xDB, 0x84, 0x67, 0x77, 0x5A, 0x41, 0x4E, 0xEC,  // ..gwZAN.
                /* 0198 */  0xB8, 0x1E, 0x23, 0x1E, 0x0A, 0x3C, 0x32, 0x76,  // ..#..<2v
                /* 01A0 */  0x5B, 0xF0, 0x3F, 0xC1, 0xA7, 0x04, 0xFC, 0x10,  // [.?.....
                /* 01A8 */  0x03, 0xBE, 0x1E, 0x3C, 0x1C, 0xB0, 0x71, 0x86,  // ...<..q.
                /* 01B0 */  0xC3, 0x0C, 0xD1, 0x73, 0x0E, 0x77, 0x02, 0x87,  // ...s.w..
                /* 01B8 */  0xC8, 0x00, 0x3D, 0xAF, 0xE7, 0x02, 0xEC, 0xA8,  // ..=.....
                /* 01C0 */  0x4E, 0xE6, 0xA1, 0xA0, 0x54, 0x01, 0x66, 0x6F,  // N...T.fo
                /* 01C8 */  0x13, 0x84, 0xE0, 0x78, 0x7C, 0x1A, 0xF0, 0x7C,  // ...x|..|
                /* 01D0 */  0x4E, 0x38, 0x81, 0xE5, 0x0F, 0x02, 0x35, 0x32,  // N8....52
                /* 01D8 */  0x43, 0xFB, 0xE4, 0xE1, 0x4B, 0x81, 0xCF, 0x14,  // C...K...
                /* 01E0 */  0x26, 0xB0, 0x58, 0x08, 0x29, 0x80, 0xD0, 0x78,  // &.X.)..x
                /* 01E8 */  0xC0, 0xAF, 0xF8, 0xF0, 0x41, 0x6E, 0x0E, 0x9E,  // ....An..
                /* 01F0 */  0xAF, 0x0F, 0x27, 0x30, 0xFF, 0xFF, 0xD7, 0x0E,  // ..'0....
                /* 01F8 */  0x9C, 0xD1, 0xA3, 0x81, 0x4E, 0x0B, 0x1E, 0xF0,  // ....N...
                /* 0200 */  0x29, 0x3C, 0x2A, 0x18, 0x26, 0xDE, 0xCB, 0xC2,  // )<*.&...
                /* 0208 */  0x01, 0xF8, 0x9A, 0xC0, 0x0E, 0x27, 0xC0, 0x23,  // .....'.#
                /* 0210 */  0x82, 0x87, 0xF3, 0x00, 0x13, 0xBD, 0x54, 0xD9,  // ......T.
                /* 0218 */  0x58, 0xAA, 0x07, 0x41, 0x25, 0x9F, 0x11, 0xE4,  // X..A%...
                /* 0220 */  0xF1, 0x28, 0x41, 0xB4, 0x0E, 0x89, 0x1C, 0x00,  // .(A.....
                /* 0228 */  0x5E, 0x2D, 0xF8, 0x71, 0x43, 0x70, 0x3A, 0xD9,  // ^-.qCp:.
                /* 0230 */  0x70, 0x81, 0x14, 0x92, 0x07, 0xA1, 0x01, 0x19,  // p.......
                /* 0238 */  0xCE, 0x82, 0xE0, 0x28, 0x88, 0xC7, 0xEF, 0x93,  // ...(....
                /* 0240 */  0x8D, 0x9D, 0x1C, 0x05, 0xD0, 0x93, 0xC0, 0x47,  // .......G
                /* 0248 */  0x83, 0xD0, 0xF1, 0xC1, 0x07, 0x06, 0x3C, 0xDE,  // ......<.
                /* 0250 */  0xA1, 0x9D, 0x99, 0xA7, 0xE1, 0xD1, 0xE3, 0x8E,  // ........
                /* 0258 */  0x20, 0x70, 0xC7, 0x81, 0x5D, 0x64, 0xD0, 0xB7,  //  p..]d..
                /* 0260 */  0x0F, 0x43, 0x3C, 0xD4, 0xF0, 0x1F, 0x0C, 0x1D,  // .C<.....
                /* 0268 */  0x03, 0xB9, 0x19, 0x9C, 0x85, 0x09, 0xD8, 0x09,  // ........
                /* 0270 */  0x01, 0xFE, 0xED, 0xC3, 0x07, 0x1B, 0x1F, 0x39,  // .......9
                /* 0278 */  0x1E, 0x38, 0x12, 0x58, 0xE0, 0x09, 0x01, 0x14,  // .8.X....
                /* 0280 */  0x40, 0xBE, 0x11, 0xF8, 0xB4, 0xF3, 0x54, 0xC0,  // @.....T.
                /* 0288 */  0xE6, 0xF0, 0xC0, 0xE3, 0xE3, 0x0E, 0x83, 0xE7,  // ........
                /* 0290 */  0xC1, 0x21, 0x64, 0x01, 0x42, 0xB2, 0x20, 0xF4,  // .!d.B. .
                /* 0298 */  0xFF, 0x1F, 0x17, 0x1F, 0xA8, 0xCF, 0x33, 0x0C,  // ......3.
                /* 02A0 */  0xFB, 0x55, 0x05, 0x33, 0xA8, 0x97, 0x09, 0x9F,  // .U.3....
                /* 02A8 */  0x03, 0x0C, 0xEB, 0xA1, 0x73, 0x58, 0xA3, 0x85,  // ....sX..
                /* 02B0 */  0x3D, 0xE2, 0x07, 0x09, 0x5F, 0x42, 0x3C, 0x33,  // =..._B<3
                /* 02B8 */  0xDF, 0x5F, 0x7C, 0xFC, 0x00, 0x0B, 0x20, 0xDE,  // ._|... .
                /* 02C0 */  0xFB, 0x25, 0x80, 0x4C, 0xC0, 0x80, 0x6C, 0x80,  // .%.L..l.
                /* 02C8 */  0x8F, 0x03, 0x60, 0x19, 0xE6, 0xA9, 0x79, 0xE6,  // ..`...y.
                /* 02D0 */  0xC1, 0xDE, 0x06, 0x3C, 0x3A, 0x5F, 0x6D, 0x7C,  // ...<:_m|
                /* 02D8 */  0x05, 0xF1, 0xF9, 0x01, 0x1B, 0xE2, 0x28, 0x81,  // ......(.
                /* 02E0 */  0x3A, 0x14, 0x58, 0xFE, 0x51, 0x02, 0x31, 0xF2,  // :.X.Q.1.
                /* 02E8 */  0xB8, 0xA7, 0x15, 0xF5, 0x91, 0xC7, 0x97, 0x8F,  // ........
                /* 02F0 */  0xA7, 0x20, 0x2E, 0xF8, 0x2C, 0x81, 0x92, 0x7A,  // . ..,..z
                /* 02F8 */  0x64, 0xF2, 0x59, 0x02, 0x25, 0x0D, 0x8E, 0x82,  // d.Y.%...
                /* 0300 */  0xF8, 0x2C, 0xE1, 0xD8, 0x67, 0x09, 0xF4, 0x40,  // .,..g..@
                /* 0308 */  0x3C, 0x0B, 0x2C, 0x88, 0xE7, 0xE9, 0x5B, 0x8C,  // <.,...[.
                /* 0310 */  0x09, 0xC6, 0x3B, 0x4E, 0x80, 0xE2, 0x8E, 0x70,  // ..;N...p
                /* 0318 */  0xC0, 0x60, 0x39, 0x86, 0xE1, 0xF6, 0x79, 0x8C,  // .`9...y.
                /* 0320 */  0xB0, 0x0E, 0x14, 0xF0, 0xFF, 0xFF, 0x07, 0x0A,  // ........
                /* 0328 */  0xE0, 0x1C, 0xFE, 0x40, 0x01, 0xBA, 0xA3, 0x80,  // ...@....
                /* 0330 */  0x0F, 0x14, 0xC0, 0xF5, 0x44, 0xE4, 0x03, 0x05,  // ....D...
                /* 0338 */  0x98, 0xEF, 0x0B, 0x30, 0x63, 0x1C, 0x29, 0xD0,  // ...0c.).
                /* 0340 */  0x21, 0x8E, 0x14, 0x88, 0x2B, 0x02, 0xEE, 0x3C,  // !...+..<
                /* 0348 */  0xC4, 0x8F, 0x60, 0x3A, 0x52, 0xA0, 0x4E, 0x15,  // ..`:R.N.
                /* 0350 */  0x96, 0x7B, 0xA4, 0x40, 0x9D, 0x78, 0x7C, 0xE6,  // .{.@.x|.
                /* 0358 */  0xE1, 0x03, 0xF7, 0x29, 0xC0, 0x47, 0x0A, 0xDC,  // ...).G..
                /* 0360 */  0xF0, 0x3C, 0x0B, 0x58, 0x04, 0x63, 0x9E, 0x28,  // .<.X.c.(
                /* 0368 */  0x50, 0xFF, 0xFF, 0x13, 0x05, 0xBC, 0xE3, 0xD1,  // P.......
                /* 0370 */  0x11, 0x83, 0xE5, 0xC4, 0xC7, 0x56, 0xF9, 0x24,  // .....V.$
                /* 0378 */  0x60, 0xE3, 0x97, 0x07, 0x82, 0xE2, 0x8B, 0x9B,  // `.......
                /* 0380 */  0xCF, 0x6D, 0xFC, 0x04, 0xE7, 0xFB, 0x1B, 0x3B,  // .m.....;
                /* 0388 */  0xE9, 0xF1, 0x53, 0x0F, 0xE0, 0x10, 0xD2, 0xA7,  // ..S.....
                /* 0390 */  0x1E, 0xC0, 0xD0, 0xC5, 0x05, 0x3B, 0xAB, 0x27,  // .....;.'
                /* 0398 */  0x06, 0x4C, 0x94, 0x07, 0x83, 0x09, 0xF4, 0xFF,  // .L......
                /* 03A0 */  0x3F, 0x51, 0x58, 0x3C, 0x0C, 0xEA, 0xA8, 0x09,  // ?QX<....
                /* 03A8 */  0x4C, 0x47, 0xE1, 0xA3, 0x26, 0xD8, 0x8F, 0x92,  // LG..&...
                /* 03B0 */  0xB8, 0x51, 0xC3, 0xBD, 0xAA, 0x62, 0x46, 0xFC,  // .Q...bF.
                /* 03B8 */  0x8A, 0x67, 0x94, 0xD7, 0x4C, 0xCC, 0x65, 0xD3,  // .g..L.e.
                /* 03C0 */  0x67, 0x81, 0xD7, 0x13, 0x0F, 0xDE, 0x13, 0xE7,  // g.......
                /* 03C8 */  0x28, 0x67, 0xF0, 0xBA, 0x87, 0xB9, 0x19, 0xF8,  // (g......
                /* 03D0 */  0x94, 0x09, 0xDB, 0xD8, 0x48, 0x74, 0xA8, 0x78,  // ....Ht.x
                /* 03D8 */  0x8F, 0x38, 0xAD, 0x23, 0x8A, 0xE1, 0xDB, 0x65,  // .8.#...e
                /* 03E0 */  0x9C, 0x47, 0xCB, 0x33, 0x8B, 0xF5, 0x94, 0x69,  // .G.3...i
                /* 03E8 */  0x98, 0x10, 0x8F, 0x97, 0x4F, 0x99, 0xBE, 0x55,  // ....O..U
                /* 03F0 */  0x3C, 0x5F, 0xF6, 0x86, 0x22, 0xB8, 0xC8, 0x51,  // <_.."..Q
                /* 03F8 */  0x0D, 0xF4, 0x88, 0x11, 0x2D, 0x5E, 0xD0, 0x70,  // ....-^.p
                /* 0400 */  0x81, 0x7C, 0xCA, 0x64, 0xC1, 0x1F, 0x29, 0x3A,  // .|.d..):
                /* 0408 */  0x12, 0xF8, 0x94, 0x09, 0x1C, 0xFF, 0xFF, 0xA7,  // ........
                /* 0410 */  0x4C, 0xC0, 0xD5, 0xEC, 0x9F, 0x32, 0xB1, 0xE7,  // L....2..
                /* 0418 */  0x31, 0xFC, 0x89, 0xC1, 0xD7, 0x4B, 0x38, 0x13,  // 1....K8.
                /* 0420 */  0x71, 0xC0, 0x71, 0x53, 0x51, 0x07, 0x15, 0xD4,  // q.qSQ...
                /* 0428 */  0xB9, 0xC2, 0x07, 0x15, 0x76, 0x39, 0xE4, 0x87,  // ....v9..
                /* 0430 */  0x3D, 0x8C, 0xE0, 0x73, 0x04, 0x68, 0x0E, 0x04,  // =..s.h..
                /* 0438 */  0x6F, 0x9A, 0xC6, 0x79, 0xD1, 0x7C, 0x11, 0x78,  // o..y.|.x
                /* 0440 */  0x62, 0xC2, 0x1C, 0x21, 0x30, 0x68, 0xCF, 0x3C,  // b..!0h.<
                /* 0448 */  0xBE, 0x43, 0xE0, 0x8F, 0x3A, 0x60, 0x3C, 0xA0,  // .C..:`<.
                /* 0450 */  0x82, 0x63, 0xBC, 0x70, 0x0E, 0xE3, 0xF0, 0xFF,  // .c.p....
                /* 0458 */  0xFF, 0x07, 0x54, 0x70, 0x9E, 0x69, 0x70, 0x87,  // ..Tp.ip.
                /* 0460 */  0x71, 0x70, 0x1C, 0xD9, 0xE1, 0x8F, 0x81, 0x2B,  // qp.....+
                /* 0468 */  0xB4, 0xE9, 0x53, 0xA3, 0x51, 0xAB, 0x06, 0x65,  // ..S.Q..e
                /* 0470 */  0x6A, 0x94, 0x69, 0x50, 0xAB, 0x4F, 0xA5, 0xC6,  // j.iP.O..
                /* 0478 */  0x8C, 0x9D, 0x1D, 0x2C, 0xEF, 0x6D, 0xA0, 0xC3,  // ...,.m..
                /* 0480 */  0x81, 0xC3, 0x81, 0x50, 0xC1, 0x2F, 0x23, 0x19,  // ...P./#.
                /* 0488 */  0x39, 0x4E, 0x18, 0x44, 0x40, 0x0E, 0x7C, 0x86,  // 9N.D@.|.
                /* 0490 */  0x15, 0x90, 0xE3, 0x9F, 0x62, 0xA9, 0xF4, 0x03,  // ....b...
                /* 0498 */  0xBA, 0x80, 0x1C, 0x04, 0x44, 0x40, 0x16, 0xA2,  // ....D@..
                /* 04A0 */  0x03, 0x84, 0xC5, 0x00, 0xA1, 0xE2, 0x7D, 0x80,  // ......}.
                /* 04A8 */  0xB0, 0xFF, 0x3F                                 // ..?
            })
        }
    }
}



FACP
----
[000h 0000   4]                    Signature : "FACP"    [Fixed ACPI Description Table (FADT)]
[004h 0004   4]                 Table Length : 0000010C
[008h 0008   1]                     Revision : 05
[009h 0009   1]                     Checksum : 15
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "CB-01   "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "ACPI"
[020h 0032   4]        Asl Compiler Revision : 00040000

[024h 0036   4]                 FACS Address : CCEB5000
[028h 0040   4]                 DSDT Address : CDFD6000
[02Ch 0044   1]                        Model : 00
[02Dh 0045   1]                   PM Profile : 02 [Mobile]
[02Eh 0046   2]                SCI Interrupt : 0009
[030h 0048   4]             SMI Command Port : 000000B0
[034h 0052   1]            ACPI Enable Value : A0
[035h 0053   1]           ACPI Disable Value : A1
[036h 0054   1]               S4BIOS Command : 00
[037h 0055   1]              P-State Control : 00
[038h 0056   4]     PM1A Event Block Address : 00000400
[03Ch 0060   4]     PM1B Event Block Address : 00000000
[040h 0064   4]   PM1A Control Block Address : 00000404
[044h 0068   4]   PM1B Control Block Address : 00000000
[048h 0072   4]    PM2 Control Block Address : 00000800
[04Ch 0076   4]       PM Timer Block Address : 00000408
[050h 0080   4]           GPE0 Block Address : 00000420
[054h 0084   4]           GPE1 Block Address : 00000000
[058h 0088   1]       PM1 Event Block Length : 04
[059h 0089   1]     PM1 Control Block Length : 02
[05Ah 0090   1]     PM2 Control Block Length : 01
[05Bh 0091   1]        PM Timer Block Length : 04
[05Ch 0092   1]            GPE0 Block Length : 08
[05Dh 0093   1]            GPE1 Block Length : 00
[05Eh 0094   1]             GPE1 Base Offset : 00
[05Fh 0095   1]                 _CST Support : 00
[060h 0096   2]                   C2 Latency : 0064
[062h 0098   2]                   C3 Latency : 03E9
[064h 0100   2]               CPU Cache Size : 0000
[066h 0102   2]           Cache Flush Stride : 0000
[068h 0104   1]            Duty Cycle Offset : 01
[069h 0105   1]             Duty Cycle Width : 03
[06Ah 0106   1]          RTC Day Alarm Index : 0D
[06Bh 0107   1]        RTC Month Alarm Index : 00
[06Ch 0108   1]            RTC Century Index : 00
[06Dh 0109   2]   Boot Flags (decoded below) : 0003
               Legacy Devices Supported (V2) : 1
            8042 Present on ports 60/64 (V2) : 1
                        VGA Not Present (V4) : 0
                      MSI Not Supported (V4) : 0
                PCIe ASPM Not Supported (V4) : 0
                   CMOS RTC Not Present (V5) : 0
[06Fh 0111   1]                     Reserved : 00
[070h 0112   4]        Flags (decoded below) : 0020C5BD
      WBINVD instruction is operational (V1) : 1
              WBINVD flushes all caches (V1) : 0
                    All CPUs support C1 (V1) : 1
                  C2 works on MP system (V1) : 1
            Control Method Power Button (V1) : 1
            Control Method Sleep Button (V1) : 1
        RTC wake not in fixed reg space (V1) : 0
            RTC can wake system from S4 (V1) : 1
                        32-bit PM Timer (V1) : 1
                      Docking Supported (V1) : 0
               Reset Register Supported (V2) : 1
                            Sealed Case (V3) : 0
                    Headless - No Video (V3) : 0
        Use native instr after SLP_TYPx (V3) : 0
              PCIEXP_WAK Bits Supported (V4) : 1
                     Use Platform Timer (V4) : 1
               RTC_STS valid on S4 wake (V4) : 0
                Remote Power-on capable (V4) : 0
                 Use APIC Cluster Model (V4) : 0
     Use APIC Physical Destination Mode (V4) : 0
                       Hardware Reduced (V5) : 0
                      Low Power S0 Idle (V5) : 1

[074h 0116  12]               Reset Register : [Generic Address Structure]
[074h 0116   1]                     Space ID : 01 [SystemIO]
[075h 0117   1]                    Bit Width : 08
[076h 0118   1]                   Bit Offset : 00
[077h 0119   1]         Encoded Access Width : 01 [Byte Access:8]
[078h 0120   8]                      Address : 00000000000000B0

[080h 0128   1]         Value to cause reset : FB
[081h 0129   2]    ARM Flags (decoded below) : 0000
                              PSCI Compliant : 0
                       Must use HVC for PSCI : 0

[083h 0131   1]          FADT Minor Revision : 00
[084h 0132   8]                 FACS Address : 0000000000000000
[08Ch 0140   8]                 DSDT Address : 00000000CDFD6000
[094h 0148  12]             PM1A Event Block : [Generic Address Structure]
[094h 0148   1]                     Space ID : 01 [SystemIO]
[095h 0149   1]                    Bit Width : 20
[096h 0150   1]                   Bit Offset : 00
[097h 0151   1]         Encoded Access Width : 03 [DWord Access:32]
[098h 0152   8]                      Address : 0000000000000400

[0A0h 0160  12]             PM1B Event Block : [Generic Address Structure]
[0A0h 0160   1]                     Space ID : 00 [SystemMemory]
[0A1h 0161   1]                    Bit Width : 00
[0A2h 0162   1]                   Bit Offset : 00
[0A3h 0163   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0A4h 0164   8]                      Address : 0000000000000000

[0ACh 0172  12]           PM1A Control Block : [Generic Address Structure]
[0ACh 0172   1]                     Space ID : 01 [SystemIO]
[0ADh 0173   1]                    Bit Width : 10
[0AEh 0174   1]                   Bit Offset : 00
[0AFh 0175   1]         Encoded Access Width : 02 [Word Access:16]
[0B0h 0176   8]                      Address : 0000000000000404

[0B8h 0184  12]           PM1B Control Block : [Generic Address Structure]
[0B8h 0184   1]                     Space ID : 00 [SystemMemory]
[0B9h 0185   1]                    Bit Width : 00
[0BAh 0186   1]                   Bit Offset : 00
[0BBh 0187   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0BCh 0188   8]                      Address : 0000000000000000

[0C4h 0196  12]            PM2 Control Block : [Generic Address Structure]
[0C4h 0196   1]                     Space ID : 01 [SystemIO]
[0C5h 0197   1]                    Bit Width : 08
[0C6h 0198   1]                   Bit Offset : 00
[0C7h 0199   1]         Encoded Access Width : 01 [Byte Access:8]
[0C8h 0200   8]                      Address : 0000000000000800

[0D0h 0208  12]               PM Timer Block : [Generic Address Structure]
[0D0h 0208   1]                     Space ID : 01 [SystemIO]
[0D1h 0209   1]                    Bit Width : 20
[0D2h 0210   1]                   Bit Offset : 00
[0D3h 0211   1]         Encoded Access Width : 03 [DWord Access:32]
[0D4h 0212   8]                      Address : 0000000000000408

[0DCh 0220  12]                   GPE0 Block : [Generic Address Structure]
[0DCh 0220   1]                     Space ID : 01 [SystemIO]
[0DDh 0221   1]                    Bit Width : 40
[0DEh 0222   1]                   Bit Offset : 00
[0DFh 0223   1]         Encoded Access Width : 04 [QWord Access:64]
[0E0h 0224   8]                      Address : 0000000000000420

[0E8h 0232  12]                   GPE1 Block : [Generic Address Structure]
[0E8h 0232   1]                     Space ID : 00 [SystemMemory]
[0E9h 0233   1]                    Bit Width : 00
[0EAh 0234   1]                   Bit Offset : 00
[0EBh 0235   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0ECh 0236   8]                      Address : 0000000000000000


[0F4h 0244  12]       Sleep Control Register : [Generic Address Structure]
[0F4h 0244   1]                     Space ID : 00 [SystemMemory]
[0F5h 0245   1]                    Bit Width : 00
[0F6h 0246   1]                   Bit Offset : 00
[0F7h 0247   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0F8h 0248   8]                      Address : 0000000000000000

[100h 0256  12]        Sleep Status Register : [Generic Address Structure]
[100h 0256   1]                     Space ID : 00 [SystemMemory]
[101h 0257   1]                    Bit Width : 00
[102h 0258   1]                   Bit Offset : 00
[103h 0259   1]         Encoded Access Width : 00 [Undefined/Legacy]
[104h 0260   8]                      Address : 0000000000000000

/**** ACPI table terminates in the middle of a data structure! (dump table) */

Raw Table Data: Length 268 (0x10C)

    0000: 46 41 43 50 0C 01 00 00 05 15 4C 45 4E 4F 56 4F  // FACP......LENOVO
    0010: 43 42 2D 30 31 20 20 20 01 00 00 00 41 43 50 49  // CB-01   ....ACPI
    0020: 00 00 04 00 00 50 EB CC 00 60 FD CD 00 02 09 00  // .....P...`......
    0030: B0 00 00 00 A0 A1 00 00 00 04 00 00 00 00 00 00  // ................
    0040: 04 04 00 00 00 00 00 00 00 08 00 00 08 04 00 00  // ................
    0050: 20 04 00 00 00 00 00 00 04 02 01 04 08 00 00 00  //  ...............
    0060: 64 00 E9 03 00 00 00 00 01 03 0D 00 00 03 00 00  // d...............
    0070: BD C5 20 00 01 08 00 01 B0 00 00 00 00 00 00 00  // .. .............
    0080: FB 00 00 00 00 00 00 00 00 00 00 00 00 60 FD CD  // .............`..
    0090: 00 00 00 00 01 20 00 03 00 04 00 00 00 00 00 00  // ..... ..........
    00A0: 00 00 00 00 00 00 00 00 00 00 00 00 01 10 00 02  // ................
    00B0: 04 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00C0: 00 00 00 00 01 08 00 01 00 08 00 00 00 00 00 00  // ................
    00D0: 01 20 00 03 08 04 00 00 00 00 00 00 01 40 00 04  // . ...........@..
    00E0: 20 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00  //  ...............
    00F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0100: 00 00 00 00 00 00 00 00 00 00 00 00              // ............


FACS
----
[000h 0000   4]                    Signature : "FACS"
[004h 0004   4]                       Length : 00000040
[008h 0008   4]           Hardware Signature : 4675BC2A
[00Ch 0012   4]    32 Firmware Waking Vector : 00000000
[010h 0016   4]                  Global Lock : 00000000
[014h 0020   4]        Flags (decoded below) : 00000000
                      S4BIOS Support Present : 0
                  64-bit Wake Supported (V2) : 0
[018h 0024   8]    64 Firmware Waking Vector : 0000000000000000
[020h 0032   1]                      Version : 02
[021h 0033   3]                     Reserved : 000000
[024h 0036   4]    OspmFlags (decoded below) : 00000000
               64-bit Wake Env Required (V2) : 0

Raw Table Data: Length 64 (0x40)

    0000: 46 41 43 53 40 00 00 00 2A BC 75 46 00 00 00 00  // FACS@...*.uF....
    0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0020: 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


FPDT
----
[000h 0000   4]                    Signature : "FPDT"    [Firmware Performance Data Table]
[004h 0004   4]                 Table Length : 00000044
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : DF
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "CB-01   "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "ACPI"
[020h 0032   4]        Asl Compiler Revision : 00040000


[024h 0036   2]                Subtable Type : 0000
[026h 0038   1]                       Length : 10
[027h 0039   1]                     Revision : 01
[028h 0040   4]                     Reserved : 00000000
[02Ch 0044   8]     FPDT Boot Record Address : 00000000CADFF000

[034h 0052   2]                Subtable Type : 0001
[036h 0054   1]                       Length : 10
[037h 0055   1]                     Revision : 01
[038h 0056   4]                     Reserved : 00000000
[03Ch 0060   8]          S3PT Record Address : 00000000CBDFE000

Raw Table Data: Length 68 (0x44)

    0000: 46 50 44 54 44 00 00 00 01 DF 4C 45 4E 4F 56 4F  // FPDTD.....LENOVO
    0010: 43 42 2D 30 31 20 20 20 01 00 00 00 41 43 50 49  // CB-01   ....ACPI
    0020: 00 00 04 00 00 00 10 01 00 00 00 00 00 F0 DF CA  // ................
    0030: 00 00 00 00 01 00 10 01 00 00 00 00 00 E0 DF CB  // ................
    0040: 00 00 00 00                                      // ....


HPET
----
[000h 0000   4]                    Signature : "HPET"    [High Precision Event Timer Table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 1C
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "CB-01   "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "ACPI"
[020h 0032   4]        Asl Compiler Revision : 00040000

[024h 0036   4]            Hardware Block ID : 10228210

[028h 0040  12]         Timer Block Register : [Generic Address Structure]
[028h 0040   1]                     Space ID : 00 [SystemMemory]
[029h 0041   1]                    Bit Width : 00
[02Ah 0042   1]                   Bit Offset : 00
[02Bh 0043   1]         Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044   8]                      Address : 00000000FED00000

[034h 0052   1]              Sequence Number : 00
[035h 0053   2]          Minimum Clock Ticks : 0080
[037h 0055   1]        Flags (decoded below) : 00
                             4K Page Protect : 0
                            64K Page Protect : 0

Raw Table Data: Length 56 (0x38)

    0000: 48 50 45 54 38 00 00 00 01 1C 4C 45 4E 4F 56 4F  // HPET8.....LENOVO
    0010: 43 42 2D 30 31 20 20 20 01 00 00 00 41 43 50 49  // CB-01   ....ACPI
    0020: 00 00 04 00 10 82 22 10 00 00 00 00 00 00 D0 FE  // ......".........
    0030: 00 00 00 00 00 80 00 00                          // ........


IVRS
----
[000h 0000   4]                    Signature : "IVRS"    [I/O Virtualization Reporting Structure]
[004h 0004   4]                 Table Length : 000001A4
[008h 0008   1]                     Revision : 02
[009h 0009   1]                     Checksum : 74
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "CB-01   "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "ACPI"
[020h 0032   4]        Asl Compiler Revision : 00040000

[024h 0036   4]          Virtualization Info : 00203043
[028h 0040   8]                     Reserved : 0000000000000000

[030h 0048   1]                Subtable Type : 10 [Hardware Definition Block (IVHD)]
[031h 0049   1]        Flags (decoded below) : B0
                                     HtTunEn : 0
                                      PassPW : 0
                                   ResPassPW : 0
                                Isoc Control : 0
                               Iotlb Support : 1
                                    Coherent : 1
                            Prefetch Support : 0
                                 PPR Support : 1
[032h 0050   2]                       Length : 0048
[034h 0052   2]                     DeviceId : 0002
[036h 0054   2]            Capability Offset : 0040
[038h 0056   8]                 Base Address : 00000000FDF00000
[040h 0064   2]            PCI Segment Group : 0000
[042h 0066   2]          Virtualization Info : 0000
[044h 0068   4]            Feature Reporting : 80048F6F

[048h 0072   1]                Subtable Type : 03 [Device Entry: Start of Range]
[049h 0073   2]                    Device ID : 0008
[04Bh 0075   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[04Ch 0076   1]                Subtable Type : 04 [Device Entry: End of Range]
[04Dh 0077   2]                    Device ID : FFFE
[04Fh 0079   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[050h 0080   1]                Subtable Type : 43 [Device Entry: Alias Start of Range]
[051h 0081   2]                    Device ID : FF00
[053h 0083   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[054h 0084   1]                     Reserved : 00
[055h 0085   2]        Source Used Device ID : 00A5
[057h 0087   1]                     Reserved : 00

[058h 0088   1]                Subtable Type : 04 [Device Entry: End of Range]
[059h 0089   2]                    Device ID : FFFF
[05Bh 0091   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[05Ch 0092   1]                Subtable Type : 00 [Unknown/Reserved Device Entry Type]
[05Dh 0093   2]                    Device ID : 0000
[05Fh 0095   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[060h 0096   1]                Subtable Type : 48 [Device Entry: Special Device]
[061h 0097   2]                    Device ID : 0000
[063h 0099   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[064h 0100   1]                       Handle : 00
[065h 0101   2]        Source Used Device ID : 00A0
[067h 0103   1]                      Variety : 02

[068h 0104   1]                Subtable Type : 48 [Device Entry: Special Device]
[069h 0105   2]                    Device ID : 0000
[06Bh 0107   1] Data Setting (decoded below) : D7
                                    INITPass : 1
                                    EIntPass : 1
                                     NMIPass : 1
                                    Reserved : 0
                                 System MGMT : 1
                                  LINT0 Pass : 1
                                  LINT1 Pass : 1
[06Ch 0108   1]                       Handle : 21
[06Dh 0109   2]        Source Used Device ID : 00A0
[06Fh 0111   1]                      Variety : 01

[070h 0112   1]                Subtable Type : 48 [Device Entry: Special Device]
[071h 0113   2]                    Device ID : 0000
[073h 0115   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[074h 0116   1]                       Handle : 22
[075h 0117   2]        Source Used Device ID : 0001
[077h 0119   1]                      Variety : 01

[078h 0120   1]                Subtable Type : 11 [Hardware Definition Block (IVHD)]
[079h 0121   1]        Flags (decoded below) : B0
                                     HtTunEn : 0
                                      PassPW : 0
                                   ResPassPW : 0
                                Isoc Control : 0
                               Iotlb Support : 1
                                    Coherent : 1
                            Prefetch Support : 0
                                 PPR Support : 1
[07Ah 0122   2]                       Length : 0058
[07Ch 0124   2]                     DeviceId : 0002
[07Eh 0126   2]            Capability Offset : 0040
[080h 0128   8]                 Base Address : 00000000FDF00000
[088h 0136   2]            PCI Segment Group : 0000
[08Ah 0138   2]          Virtualization Info : 0000
[08Ch 0140   4]                   Attributes : 00040200
[090h 0144   8]                    EFR Image : 206D73EF22254ADE
[098h 0152   8]                     Reserved : 0000000000000000

[0A0h 0160   1]                Subtable Type : 03 [Device Entry: Start of Range]
[0A1h 0161   2]                    Device ID : 0008
[0A3h 0163   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[0A4h 0164   1]                Subtable Type : 04 [Device Entry: End of Range]
[0A5h 0165   2]                    Device ID : FFFE
[0A7h 0167   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[0A8h 0168   1]                Subtable Type : 43 [Device Entry: Alias Start of Range]
[0A9h 0169   2]                    Device ID : FF00
[0ABh 0171   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[0ACh 0172   1]                     Reserved : 00
[0ADh 0173   2]        Source Used Device ID : 00A5
[0AFh 0175   1]                     Reserved : 00

[0B0h 0176   1]                Subtable Type : 04 [Device Entry: End of Range]
[0B1h 0177   2]                    Device ID : FFFF
[0B3h 0179   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[0B4h 0180   1]                Subtable Type : 00 [Unknown/Reserved Device Entry Type]
[0B5h 0181   2]                    Device ID : 0000
[0B7h 0183   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[0B8h 0184   1]                Subtable Type : 48 [Device Entry: Special Device]
[0B9h 0185   2]                    Device ID : 0000
[0BBh 0187   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[0BCh 0188   1]                       Handle : 00
[0BDh 0189   2]        Source Used Device ID : 00A0
[0BFh 0191   1]                      Variety : 02

[0C0h 0192   1]                Subtable Type : 48 [Device Entry: Special Device]
[0C1h 0193   2]                    Device ID : 0000
[0C3h 0195   1] Data Setting (decoded below) : D7
                                    INITPass : 1
                                    EIntPass : 1
                                     NMIPass : 1
                                    Reserved : 0
                                 System MGMT : 1
                                  LINT0 Pass : 1
                                  LINT1 Pass : 1
[0C4h 0196   1]                       Handle : 21
[0C5h 0197   2]        Source Used Device ID : 00A0
[0C7h 0199   1]                      Variety : 01

[0C8h 0200   1]                Subtable Type : 48 [Device Entry: Special Device]
[0C9h 0201   2]                    Device ID : 0000
[0CBh 0203   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[0CCh 0204   1]                       Handle : 22
[0CDh 0205   2]        Source Used Device ID : 0001
[0CFh 0207   1]                      Variety : 01

[0D0h 0208   1]                Subtable Type : 40 [Hardware Definition Block - Mixed Format (IVHD)]
[0D1h 0209   1]        Flags (decoded below) : B0
                                     HtTunEn : 0
                                      PassPW : 0
                                   ResPassPW : 0
                                Isoc Control : 0
                               Iotlb Support : 1
                                    Coherent : 1
                            Prefetch Support : 0
                                 PPR Support : 1
[0D2h 0210   2]                       Length : 00D4
[0D4h 0212   2]                     DeviceId : 0002
[0D6h 0214   2]            Capability Offset : 0040
[0D8h 0216   8]                 Base Address : 00000000FDF00000
[0E0h 0224   2]            PCI Segment Group : 0000
[0E2h 0226   2]          Virtualization Info : 0000
[0E4h 0228   4]                   Attributes : 00040200
[0E8h 0232   8]                    EFR Image : 206D73EF22254ADE
[0F0h 0240   8]                     Reserved : 0000000000000000

[0F8h 0248   1]                Subtable Type : 03 [Device Entry: Start of Range]
[0F9h 0249   2]                    Device ID : 0008
[0FBh 0251   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[0FCh 0252   1]                Subtable Type : 04 [Device Entry: End of Range]
[0FDh 0253   2]                    Device ID : FFFE
[0FFh 0255   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[100h 0256   1]                Subtable Type : 43 [Device Entry: Alias Start of Range]
[101h 0257   2]                    Device ID : FF00
[103h 0259   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[104h 0260   1]                     Reserved : 00
[105h 0261   2]        Source Used Device ID : 00A5
[107h 0263   1]                     Reserved : 00

[108h 0264   1]                Subtable Type : 04 [Device Entry: End of Range]
[109h 0265   2]                    Device ID : FFFF
[10Bh 0267   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[10Ch 0268   1]                Subtable Type : 00 [Unknown/Reserved Device Entry Type]
[10Dh 0269   2]                    Device ID : 0000
[10Fh 0271   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[110h 0272   1]                Subtable Type : 48 [Device Entry: Special Device]
[111h 0273   2]                    Device ID : 0000
[113h 0275   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[114h 0276   1]                       Handle : 00
[115h 0277   2]        Source Used Device ID : 00A0
[117h 0279   1]                      Variety : 02

[118h 0280   1]                Subtable Type : 48 [Device Entry: Special Device]
[119h 0281   2]                    Device ID : 0000
[11Bh 0283   1] Data Setting (decoded below) : D7
                                    INITPass : 1
                                    EIntPass : 1
                                     NMIPass : 1
                                    Reserved : 0
                                 System MGMT : 1
                                  LINT0 Pass : 1
                                  LINT1 Pass : 1
[11Ch 0284   1]                       Handle : 21
[11Dh 0285   2]        Source Used Device ID : 00A0
[11Fh 0287   1]                      Variety : 01

[120h 0288   1]                Subtable Type : 48 [Device Entry: Special Device]
[121h 0289   2]                    Device ID : 0000
[123h 0291   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[124h 0292   1]                       Handle : 22
[125h 0293   2]        Source Used Device ID : 0001
[127h 0295   1]                      Variety : 01

[128h 0296   1]                Subtable Type : F0 [Device Entry: ACPI HID Named Device]
[129h 0297   2]                    Device ID : 00A5
[12Bh 0299   1] Data Setting (decoded below) : 40
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 1
                                  LINT1 Pass : 0
[12Ch 0300   8]                     ACPI HID : "AMDI0020"
[134h 0308   8]                     ACPI CID : 0000000000000000
[13Ch 0316   1]                   UID Format : 02
[13Dh 0317   1]                   UID Length : 09
[13Eh 0318   9]                          UID : "\_SB.FUR0"

[147h 0327   1]                Subtable Type : F0 [Device Entry: ACPI HID Named Device]
[148h 0328   2]                    Device ID : 00A5
[14Ah 0330   1] Data Setting (decoded below) : 40
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 1
                                  LINT1 Pass : 0
[14Bh 0331   8]                     ACPI HID : "AMDI0020"
[153h 0339   8]                     ACPI CID : 0000000000000000
[15Bh 0347   1]                   UID Format : 02
[15Ch 0348   1]                   UID Length : 09
[15Dh 0349   9]                          UID : "\_SB.FUR1"

[166h 0358   1]                Subtable Type : F0 [Device Entry: ACPI HID Named Device]
[167h 0359   2]                    Device ID : 00A5
[169h 0361   1] Data Setting (decoded below) : 40
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 1
                                  LINT1 Pass : 0
[16Ah 0362   8]                     ACPI HID : "AMDI0020"
[172h 0370   8]                     ACPI CID : 0000000000000000
[17Ah 0378   1]                   UID Format : 02
[17Bh 0379   1]                   UID Length : 09
[17Ch 0380   9]                          UID : "\_SB.FUR2"

[185h 0389   1]                Subtable Type : F0 [Device Entry: ACPI HID Named Device]
[186h 0390   2]                    Device ID : 00A5
[188h 0392   1] Data Setting (decoded below) : 40
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 1
                                  LINT1 Pass : 0
[189h 0393   8]                     ACPI HID : "AMDI0020"
[191h 0401   8]                     ACPI CID : 0000000000000000
[199h 0409   1]                   UID Format : 02
[19Ah 0410   1]                   UID Length : 09
[19Bh 0411   9]                          UID : "\_SB.FUR3"

Raw Table Data: Length 420 (0x1A4)

    0000: 49 56 52 53 A4 01 00 00 02 74 4C 45 4E 4F 56 4F  // IVRS.....tLENOVO
    0010: 43 42 2D 30 31 20 20 20 01 00 00 00 41 43 50 49  // CB-01   ....ACPI
    0020: 00 00 04 00 43 30 20 00 00 00 00 00 00 00 00 00  // ....C0 .........
    0030: 10 B0 48 00 02 00 40 00 00 00 F0 FD 00 00 00 00  // ..H...@.........
    0040: 00 00 00 00 6F 8F 04 80 03 08 00 00 04 FE FF 00  // ....o...........
    0050: 43 00 FF 00 00 A5 00 00 04 FF FF 00 00 00 00 00  // C...............
    0060: 48 00 00 00 00 A0 00 02 48 00 00 D7 21 A0 00 01  // H.......H...!...
    0070: 48 00 00 00 22 01 00 01 11 B0 58 00 02 00 40 00  // H...".....X...@.
    0080: 00 00 F0 FD 00 00 00 00 00 00 00 00 00 02 04 00  // ................
    0090: DE 4A 25 22 EF 73 6D 20 00 00 00 00 00 00 00 00  // .J%".sm ........
    00A0: 03 08 00 00 04 FE FF 00 43 00 FF 00 00 A5 00 00  // ........C.......
    00B0: 04 FF FF 00 00 00 00 00 48 00 00 00 00 A0 00 02  // ........H.......
    00C0: 48 00 00 D7 21 A0 00 01 48 00 00 00 22 01 00 01  // H...!...H..."...
    00D0: 40 B0 D4 00 02 00 40 00 00 00 F0 FD 00 00 00 00  // @.....@.........
    00E0: 00 00 00 00 00 02 04 00 DE 4A 25 22 EF 73 6D 20  // .........J%".sm 
    00F0: 00 00 00 00 00 00 00 00 03 08 00 00 04 FE FF 00  // ................
    0100: 43 00 FF 00 00 A5 00 00 04 FF FF 00 00 00 00 00  // C...............
    0110: 48 00 00 00 00 A0 00 02 48 00 00 D7 21 A0 00 01  // H.......H...!...
    0120: 48 00 00 00 22 01 00 01 F0 A5 00 40 41 4D 44 49  // H..."......@AMDI
    0130: 30 30 32 30 00 00 00 00 00 00 00 00 02 09 5C 5F  // 0020..........\_
    0140: 53 42 2E 46 55 52 30 F0 A5 00 40 41 4D 44 49 30  // SB.FUR0...@AMDI0
    0150: 30 32 30 00 00 00 00 00 00 00 00 02 09 5C 5F 53  // 020..........\_S
    0160: 42 2E 46 55 52 31 F0 A5 00 40 41 4D 44 49 30 30  // B.FUR1...@AMDI00
    0170: 32 30 00 00 00 00 00 00 00 00 02 09 5C 5F 53 42  // 20..........\_SB
    0180: 2E 46 55 52 32 F0 A5 00 40 41 4D 44 49 30 30 32  // .FUR2...@AMDI002
    0190: 30 00 00 00 00 00 00 00 00 02 09 5C 5F 53 42 2E  // 0..........\_SB.
    01A0: 46 55 52 33                                      // FUR3


MCFG
----
[000h 0000   4]                    Signature : "MCFG"    [Memory Mapped Configuration Table]
[004h 0004   4]                 Table Length : 0000003C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 07
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "CB-01   "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "ACPI"
[020h 0032   4]        Asl Compiler Revision : 00040000

[024h 0036   8]                     Reserved : 0000000000000000

[02Ch 0044   8]                 Base Address : 00000000F8000000
[034h 0052   2]         Segment Group Number : 0000
[036h 0054   1]             Start Bus Number : 00
[037h 0055   1]               End Bus Number : 3F
[038h 0056   4]                     Reserved : 00000000

Raw Table Data: Length 60 (0x3C)

    0000: 4D 43 46 47 3C 00 00 00 01 07 4C 45 4E 4F 56 4F  // MCFG<.....LENOVO
    0010: 43 42 2D 30 31 20 20 20 01 00 00 00 41 43 50 49  // CB-01   ....ACPI
    0020: 00 00 04 00 00 00 00 00 00 00 00 00 00 00 00 F8  // ................
    0030: 00 00 00 00 00 00 00 3F 00 00 00 00              // .......?....


MSDM
----
[000h 0000   4]                    Signature : "MSDM"    [Microsoft Data Management Table]
[004h 0004   4]                 Table Length : 00000055
[008h 0008   1]                     Revision : 03
[009h 0009   1]                     Checksum : 9A
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "CB-01   "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "ACPI"
[020h 0032   4]        Asl Compiler Revision : 00040000

[024h 0036  49] Software Licensing Structure : \
    45 45 53 54 00 00 00 00 61 0A 00 00 00 00 00 00 \
    E0 AC DF A7 5D 7F 00 00 E0 AC DF A7 5D 7F 00 00 \
    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \
    00 

Raw Table Data: Length 85 (0x55)

    0000: 4D 53 44 4D 55 00 00 00 03 9A 4C 45 4E 4F 56 4F  // MSDMU.....LENOVO
    0010: 43 42 2D 30 31 20 20 20 01 00 00 00 41 43 50 49  // CB-01   ....ACPI
    0020: 00 00 04 00 01 00 00 00 00 00 00 00 01 00 00 00  // ................
    0030: 00 00 00 00 1D 00 00 00 52 43 54 51 48 2D 34 4E  // ........RCTQH-4N
    0040: 39 36 33 2D 47 34 38 59 48 2D 43 38 52 52 38 2D  // 963-G48YH-C8RR8-
    0050: 38 32 51 44 52                                   // 82QDR


SLIC
----
[000h 0000   4]                    Signature : "SLIC"    [Software Licensing Description Table]
[004h 0004   4]                 Table Length : 00000176
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 9B
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "CB-01   "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "ACPI"
[020h 0032   4]        Asl Compiler Revision : 00040000

[024h 0036 338] Software Licensing Structure : \
    33 00 00 00 00 00 00 00 21 00 00 00 00 00 00 00 \
    B0 B0 0E 1C A5 55 00 00 03 00 00 00 00 00 00 00 \
    4C 4D 54 00 00 00 00 00 21 00 00 00 00 00 00 00 \
    D0 B0 0E 1C A5 55 00 00 03 00 00 00 00 00 00 00 \
    4D 4D 54 00 00 00 00 00 21 00 00 00 00 00 00 00 \
    F0 B0 0E 1C A5 55 00 00 03 00 00 00 00 00 00 00 \
    4D 53 54 00 00 00 00 00 21 00 00 00 00 00 00 00 \
    10 B1 0E 1C A5 55 00 00 04 00 00 00 00 00 00 00 \
    4D 44 53 54 00 00 00 00 21 00 00 00 00 00 00 00 \
    30 B1 0E 1C A5 55 00 00 03 00 00 00 00 00 00 00 \
    4D 53 44 00 00 00 00 00 21 00 00 00 00 00 00 00 \
    50 B1 0E 1C A5 55 00 00 03 00 00 00 00 00 00 00 \
    4D 53 4B 00 00 00 00 00 21 00 00 00 00 00 00 00 \
    70 B1 0E 1C A5 55 00 00 03 00 00 00 00 00 00 00 \
    2B 30 35 00 00 00 00 00 21 00 00 00 00 00 00 00 \
    90 B1 0E 1C A5 55 00 00 03 00 00 00 00 00 00 00 \
    45 45 54 00 00 00 00 00 21 00 00 00 00 00 00 00 \
    00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 \
    45 45 53 54 00 00 00 00 41 09 00 00 00 00 00 00 \
    E0 AC 5F 86 78 7F 00 00 E0 AC 5F 86 78 7F 00 00 \
    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \
    00 00 

Raw Table Data: Length 374 (0x176)

    0000: 53 4C 49 43 76 01 00 00 01 9B 4C 45 4E 4F 56 4F  // SLICv.....LENOVO
    0010: 43 42 2D 30 31 20 20 20 01 00 00 00 41 43 50 49  // CB-01   ....ACPI
    0020: 00 00 04 00 00 00 00 00 9C 00 00 00 06 02 00 00  // ................
    0030: 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00  // .$..RSA1........
    0040: 69 16 4A 9F B1 4B 3A FB 80 20 AA AF C4 F9 3E C1  // i.J..K:.. ....>.
    0050: 80 49 EE 6A 65 26 72 1E CD BF 5F 2F 96 D6 C0 0A  // .I.je&r..._/....
    0060: 92 F5 06 B5 00 B2 3B 29 02 E2 4C 8D C2 F2 BC 41  // ......;)..L....A
    0070: 77 9C 70 F0 F3 1B 09 D2 63 5A DC A8 83 F8 5E C9  // w.p.....cZ....^.
    0080: 15 95 F9 FA FD DC 05 B7 4D 67 7F 2D B3 84 33 20  // ........Mg.-..3 
    0090: E1 D1 79 2A A7 6A 77 D1 B6 20 2A 76 42 C5 D5 E9  // ..y*.jw.. *vB...
    00A0: B6 43 40 55 44 C3 C9 37 99 5F 41 97 70 F3 D1 F6  // .C@UD..7._A.p...
    00B0: 07 EC 7B 1A 29 A1 C1 F1 91 FD 48 86 6E 3E CE CB  // ..{.).....H.n>..
    00C0: 01 00 00 00 B6 00 00 00 00 20 00 00 49 4E 53 59  // ......... ..INSY
    00D0: 44 45 49 4E 53 59 44 45 30 30 57 49 4E 44 4F 57  // DEINSYDE00WINDOW
    00E0: 53 20 01 00 02 00 00 00 00 00 00 00 00 00 00 00  // S ..............
    00F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0100: 00 00 00 00 00 00 D9 54 93 7A 68 04 4A 44 81 CE  // .......T.zh.JD..
    0110: 0B F6 17 D8 90 DF 00 00 01 00 00 00 00 00 5F 46  // .............._F
    0120: 56 48 FF 8E FF FF 48 00 B1 4C 00 00 00 01 01 00  // VH....H..L......
    0130: 00 00 00 00 01 00 00 00 00 00 00 00 00 00 54 F0  // ..............T.
    0140: 0C 6F 6A AE 8C 41 A7 CE 3C 7A 7C D7 4E C0 4E D4  // .oj..A..<z|.N.N.
    0150: 02 40 13 2D 00 F8 FB 2C 00 01 88 7D 00 00 01 EA  // .@.-...,...}....
    0160: 2C 00 00 88 7D 00 00 1C 28 87 6E FB B4 69 39 3F  // ,...}...(.n..i9?
    0170: DE FF CC CC 64 90                                // ....d.


SSDT1
-----
DefinitionBlock ("", "SSDT", 2, "LENOVO", "CB-01   ", 0x00000001)
{
    Scope (\_SB)
    {
        Device (TPM2)
        {
            Name (_HID, "MSFT0101" /* TPM 2.0 Security Device */)  // _HID: Hardware ID
            Name (_CID, "MSFT0101" /* TPM 2.0 Security Device */)  // _CID: Compatible ID
            Name (_STR, Unicode ("TPM 2.0 Device"))  // _STR: Description String
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                Memory32Fixed (ReadWrite,
                    0xCBD4D000,         // Address Base
                    0x00004000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xCBD51000,         // Address Base
                    0x00004000,         // Address Length
                    )
            })
            OperationRegion (SMIP, SystemIO, 0xB0, One)
            Field (SMIP, ByteAcc, NoLock, Preserve)
            {
                IOB2,   8
            }

            OperationRegion (TNVS, SystemMemory, 0xCCEB6000, 0x2B)
            Field (TNVS, AnyAcc, NoLock, Preserve)
            {
                PPIN,   8, 
                PPIP,   32, 
                PPRP,   32, 
                PPRQ,   32, 
                PPRM,   32, 
                LPPR,   32, 
                FRET,   32, 
                MCIN,   8, 
                MCIP,   32, 
                MORD,   32, 
                MRET,   32, 
                CAIN,   8, 
                UCRQ,   32
            }

            OperationRegion (CONA, SystemMemory, 0xCCEB602B, 0x30)
            Field (CONA, DWordAcc, NoLock, Preserve)
            {
                HRTB,   32, 
                ERRR,   32, 
                CLFG,   32, 
                STA1,   32, 
                AccessAs (QWordAcc, 0x00), 
                INTC,   64, 
                AccessAs (DWordAcc, 0x00), 
                CMSZ,   32, 
                AccessAs (QWordAcc, 0x00), 
                CMDB,   64, 
                AccessAs (DWordAcc, 0x00), 
                RPSZ,   32, 
                AccessAs (QWordAcc, 0x00), 
                RESP,   64
            }

            Method (PTS, 1, Serialized)
            {
                If (((Arg0 < 0x06) && (Arg0 > 0x03)))
                {
                    If (!(MORD & 0x10))
                    {
                        MCIP = 0x02
                        IOB2 = MCIN /* \_SB_.TPM2.MCIN */
                    }
                }

                Return (Zero)
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }

            Method (HINF, 1, Serialized)
            {
                Switch (ToInteger (Arg0))
                {
                    Case (Zero)
                    {
                        Return (Buffer (One)
                        {
                             0x03                                             // .
                        })
                    }
                    Case (One)
                    {
                        Name (TPMV, Package (0x02)
                        {
                            One, 
                            Package (0x02)
                            {
                                0x02, 
                                Zero
                            }
                        })
                        If ((_STA () == Zero))
                        {
                            Return (Package (0x01)
                            {
                                Zero
                            })
                        }

                        Return (TPMV) /* \_SB_.TPM2.HINF.TPMV */
                    }
                    Default
                    {
                        BreakPoint
                    }

                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Name (TPM2, Package (0x02)
            {
                Zero, 
                Zero
            })
            Name (TPM3, Package (0x03)
            {
                Zero, 
                Zero, 
                Zero
            })
            Method (TPPI, 2, Serialized)
            {
                Switch (ToInteger (Arg0))
                {
                    Case (Zero)
                    {
                        Return (Buffer (0x02)
                        {
                             0xFF, 0x01                                       // ..
                        })
                    }
                    Case (One)
                    {
                        Return ("1.3")
                    }
                    Case (0x02)
                    {
                        PPRQ = DerefOf (Arg1 [Zero])
                        PPRM = Zero
                        PPIP = 0x02
                        IOB2 = PPIN /* \_SB_.TPM2.PPIN */
                        Return (FRET) /* \_SB_.TPM2.FRET */
                    }
                    Case (0x03)
                    {
                        TPM2 [One] = PPRQ /* \_SB_.TPM2.PPRQ */
                        Return (TPM2) /* \_SB_.TPM2.TPM2 */
                    }
                    Case (0x04)
                    {
                        Return (0x02)
                    }
                    Case (0x05)
                    {
                        PPIP = 0x05
                        IOB2 = PPIN /* \_SB_.TPM2.PPIN */
                        TPM3 [One] = LPPR /* \_SB_.TPM2.LPPR */
                        TPM3 [0x02] = PPRP /* \_SB_.TPM2.PPRP */
                        Return (TPM3) /* \_SB_.TPM2.TPM3 */
                    }
                    Case (0x06)
                    {
                        Return (0x03)
                    }
                    Case (0x07)
                    {
                        PPIP = 0x07
                        PPRQ = DerefOf (Arg1 [Zero])
                        PPRM = Zero
                        If ((PPRQ == 0x17))
                        {
                            PPRM = DerefOf (Arg1 [One])
                        }

                        IOB2 = PPIN /* \_SB_.TPM2.PPIN */
                        Return (FRET) /* \_SB_.TPM2.FRET */
                    }
                    Case (0x08)
                    {
                        PPIP = 0x08
                        UCRQ = DerefOf (Arg1 [Zero])
                        IOB2 = PPIN /* \_SB_.TPM2.PPIN */
                        Return (FRET) /* \_SB_.TPM2.FRET */
                    }
                    Default
                    {
                        BreakPoint
                    }

                }

                Return (One)
            }

            Method (TMCI, 2, Serialized)
            {
                Switch (ToInteger (Arg0))
                {
                    Case (Zero)
                    {
                        Return (Buffer (One)
                        {
                             0x03                                             // .
                        })
                    }
                    Case (One)
                    {
                        MORD = DerefOf (Arg1 [Zero])
                        MCIP = One
                        IOB2 = MCIN /* \_SB_.TPM2.MCIN */
                        Return (MRET) /* \_SB_.TPM2.MRET */
                    }
                    Default
                    {
                        BreakPoint
                    }

                }

                Return (One)
            }

            Method (OASM, 1, Serialized)
            {
                Switch (ToInteger (Arg0))
                {
                    Case (Zero)
                    {
                        Return (Buffer (One)
                        {
                             0x03                                             // .
                        })
                    }
                    Case (One)
                    {
                        Return (Zero)
                    }
                    Default
                    {
                        BreakPoint
                    }

                }

                Return (One)
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("cf8e16a5-c1e8-4e25-b712-4f54a96702c8") /* Unknown UUID */))
                {
                    Return (HINF (Arg2))
                }

                If ((Arg0 == ToUUID ("3dddfaa6-361b-4eb4-a424-8d10089d1653") /* Physical Presence Interface */))
                {
                    Return (TPPI (Arg2, Arg3))
                }

                If ((Arg0 == ToUUID ("376054ed-cc13-4675-901c-4756d7f2d45d") /* Unknown UUID */))
                {
                    Return (TMCI (Arg2, Arg3))
                }

                If ((Arg0 == ToUUID ("6bbf6cab-5463-4714-b7cd-f0203c0368d4") /* Unknown UUID */))
                {
                    Return (OASM (Arg2))
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }
}



SSDT10
------
DefinitionBlock ("", "SSDT", 1, "LENOVO", "CB-01   ", 0x00000001)
{
    External (_SB_.PLTF, DeviceObj)

    Scope (\_SB.PLTF)
    {
        Name (_LPI, Package (0x04)  // _LPI: Low Power Idle States
        {
            Zero, 
            Zero, 
            One, 
            Package (0x0A)
            {
                0x000F4240, 
                0xC350, 
                One, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "S0i3"
            }
        })
    }
}



SSDT11
------
DefinitionBlock ("", "SSDT", 1, "LENOVO", "CB-01   ", 0x00000001)
{
    External (_SB_.PCI0, DeviceObj)

    Scope (\_SB.PCI0)
    {
        Device (P010)
        {
            Name (_ADR, 0x00010000)  // _ADR: Address
            Name (_STA, 0x0B)  // _STA: Status
        }

        Device (P020)
        {
            Name (_ADR, 0x00020000)  // _ADR: Address
            Name (_STA, 0x0B)  // _STA: Status
        }

        Device (P080)
        {
            Name (_ADR, 0x00080000)  // _ADR: Address
            Name (_STA, 0x0B)  // _STA: Status
        }

        Device (P180)
        {
            Name (_ADR, 0x00180000)  // _ADR: Address
            Name (_STA, 0x0B)  // _STA: Status
        }

        Device (P181)
        {
            Name (_ADR, 0x00180001)  // _ADR: Address
            Name (_STA, 0x0B)  // _STA: Status
        }

        Device (P182)
        {
            Name (_ADR, 0x00180002)  // _ADR: Address
            Name (_STA, 0x0B)  // _STA: Status
        }

        Device (P183)
        {
            Name (_ADR, 0x00180003)  // _ADR: Address
            Name (_STA, 0x0B)  // _STA: Status
        }

        Device (P184)
        {
            Name (_ADR, 0x00180004)  // _ADR: Address
            Name (_STA, 0x0B)  // _STA: Status
        }

        Device (P185)
        {
            Name (_ADR, 0x00180005)  // _ADR: Address
            Name (_STA, 0x0B)  // _STA: Status
        }

        Device (P186)
        {
            Name (_ADR, 0x00180006)  // _ADR: Address
            Name (_STA, 0x0B)  // _STA: Status
        }

        Device (P187)
        {
            Name (_ADR, 0x00180007)  // _ADR: Address
            Name (_STA, 0x0B)  // _STA: Status
        }
    }
}



SSDT12
------
DefinitionBlock ("", "SSDT", 1, "LENOVO", "CB-01   ", 0x00000001)
{
    Scope (\)
    {
        Device (AOD)
        {
            Name (DBG, Zero)
            Name (GDBG, Zero)
            Name (CDBG, Zero)
            Name (VDBG, Zero)
            Name (RDBG, Zero)
            OperationRegion (PSMI, SystemIO, 0xB0, 0x02)
            Field (PSMI, ByteAcc, NoLock, Preserve)
            {
                APMC,   8, 
                APMD,   8
            }

            Method (ASMI, 1, NotSerialized)
            {
                APMC = Arg0
                Sleep (0x0A)
            }

            Name (OBID, Package (0xC1)
            {
                0x40, 
                0x00010001, 
                0x00010002, 
                0x00020001, 
                0x00020002, 
                0x00020003, 
                0x00020004, 
                0x00020005, 
                0x00020006, 
                0x00020007, 
                0x00020008, 
                0x00020009, 
                0x0002000A, 
                0x0002000B, 
                0x0002000C, 
                0x0002000D, 
                0x0002000E, 
                0x0002000F, 
                0x00020010, 
                0x00020011, 
                0x00020012, 
                0x00020013, 
                0x00020014, 
                0x00020015, 
                0x00020016, 
                0x00020017, 
                0x00020018, 
                0x00020019, 
                0x0002001A, 
                0x0002001B, 
                0x0002001C, 
                0x0002001D, 
                0x0002001E, 
                0x0002001F, 
                0x00020020, 
                0x00020021, 
                0x00020022, 
                0x00020023, 
                0x00020024, 
                0x00020025, 
                0x00020027, 
                0x00020028, 
                0x00020029, 
                0x0002002A, 
                0x0002002B, 
                0x0002002C, 
                0x0002002D, 
                0x0002002E, 
                0x0002002F, 
                0x00020030, 
                0x00020031, 
                0x00020032, 
                0x00020033, 
                0x00020035, 
                0x00020036, 
                0x00020037, 
                0x00030001, 
                0x00040001, 
                0x00040002, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                "Get APCB Config", 
                "Get memory voltages", 
                "Set memory clock frequency", 
                "Set Tcl", 
                "Set Trcdrd", 
                "Set Trcdwr", 
                "Set Tras", 
                "Set Trp", 
                "Set ProcODT", 
                "Set Trcpage", 
                "Set Trc", 
                "Set Trfc", 
                "Set Trfc2", 
                "Set Trfc4", 
                "Set Tfaw", 
                "Set TrrdS", 
                "Set TrrdL", 
                "Set Twr", 
                "Set TwtrS", 
                "Set TwtrL", 
                "Set TCke", 
                "Set Tcwl", 
                "Set Trtp", 
                "Set TrdrdSc", 
                "Set TrdrdScL", 
                "Set TrdrdSd", 
                "Set TrdrdDd", 
                "Set TwrwrSc", 
                "Set TwrwrScL", 
                "Set TwrwrSd", 
                "Set TwrwrDd", 
                "Set Trdwr", 
                "Set Twrrd", 
                "Set GearDownEn", 
                "Set Cmd2t", 
                "Set RttNom", 
                "Set RttWR", 
                "Set RttPark", 
                "Set PowerDownEn", 
                "Software Downcore Config", 
                "Set EDC Throttler Control", 
                "Set AddrCmdSetup", 
                "Set CsOdtSetup", 
                "Set CkeSetup", 
                "Set CadBusClkDrvStren", 
                "Set CadBusAddrCmdDrvStren", 
                "Set CadBusCsOdtCmdDrvStren", 
                "Set CadBusCkeDrvStren", 
                "Set CLDO_VDDP", 
                "Set Interleave Mode", 
                "Set Interleave Size", 
                "Set FCLK OC Mode", 
                "Set FCLK Frequency", 
                "Set CCLK Fmax", 
                "Set GFXCLK Fmax", 
                "Set VDDIO", 
                "Command Buffer Start", 
                "Command Buffer End", 
                "", 
                "", 
                "", 
                "", 
                "", 
                ""
            })
            Name (OBIE, Package (0xC1)
            {
                0x40, 
                0x00050001, 
                0x00050002, 
                0x00050003, 
                0x00050004, 
                0x00050005, 
                0x0005000A, 
                0x0005000B, 
                0x0005000C, 
                0x0005000D, 
                0x0005000E, 
                0x0005000F, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                "Set PPT Limit", 
                "Set TDC Limit", 
                "Set EDC Limit", 
                "Set Scalar", 
                "Set DRAM Map Inversion", 
                "Set Curve Optimizer", 
                "Set IOD VDDG", 
                "Set Soc TDC Limit", 
                "Set Soc EDC Limit", 
                "Set Dram Latency Enhance", 
                "Get Dram Latency Enhance", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                ""
            })
            Name (OBIT, Package (0xED)
            {
                0x00020001, 
                0x014D, 
                0x0FA0, 
                0x21, 
                0x00020002, 
                0x08, 
                0x21, 
                One, 
                0x00020003, 
                0x08, 
                0x3F, 
                One, 
                0x00020004, 
                0x08, 
                0x3F, 
                One, 
                0x00020005, 
                0x15, 
                0x3A, 
                One, 
                0x00020006, 
                0x08, 
                0x3F, 
                One, 
                0x00020007, 
                Zero, 
                0x3F, 
                One, 
                0x00020008, 
                Zero, 
                0x03FF, 
                One, 
                0x00020009, 
                0x1D, 
                0x87, 
                One, 
                0x0002000A, 
                0x3C, 
                0x03DE, 
                One, 
                0x0002000B, 
                0x3C, 
                0x03DE, 
                One, 
                0x0002000C, 
                0x3C, 
                0x03DE, 
                One, 
                0x0002000D, 
                0x06, 
                0x36, 
                One, 
                0x0002000E, 
                0x04, 
                0x0C, 
                One, 
                0x0002000F, 
                0x04, 
                0x0C, 
                One, 
                0x00020010, 
                0x0A, 
                0x51, 
                One, 
                0x00020011, 
                0x02, 
                0x0E, 
                One, 
                0x00020012, 
                0x02, 
                0x0E, 
                One, 
                0x00020013, 
                One, 
                0x1F, 
                One, 
                0x00020014, 
                0x09, 
                0x16, 
                One, 
                0x00020015, 
                0x05, 
                0x0E, 
                One, 
                0x00020016, 
                One, 
                0x0F, 
                One, 
                0x00020017, 
                One, 
                0x0F, 
                One, 
                0x00020018, 
                One, 
                0x0F, 
                One, 
                0x00020019, 
                One, 
                0x0F, 
                One, 
                0x0002001A, 
                One, 
                0x0F, 
                One, 
                0x0002001B, 
                One, 
                0x3F, 
                One, 
                0x0002001C, 
                One, 
                0x0F, 
                One, 
                0x0002001D, 
                One, 
                0x0F, 
                One, 
                0x0002001E, 
                One, 
                0x1F, 
                One, 
                0x0002001F, 
                Zero, 
                0x0F, 
                One, 
                0x00020020, 
                Zero, 
                One, 
                One, 
                0x00020021, 
                Zero, 
                One, 
                One, 
                0x00020022, 
                Zero, 
                0x07, 
                One, 
                0x00020023, 
                Zero, 
                0x04, 
                One, 
                0x00020024, 
                Zero, 
                0x07, 
                One, 
                0x00020025, 
                Zero, 
                One, 
                One, 
                0x00020027, 
                Zero, 
                Ones, 
                One, 
                0x00020028, 
                Zero, 
                0x0F, 
                One, 
                0x00020029, 
                Zero, 
                0x3F, 
                One, 
                0x0002002A, 
                Zero, 
                0x3F, 
                One, 
                0x0002002B, 
                Zero, 
                0x3F, 
                One, 
                0x0002002C, 
                Zero, 
                0x1F, 
                One, 
                0x0002002D, 
                Zero, 
                0x1F, 
                One, 
                0x0002002E, 
                Zero, 
                0x1F, 
                One, 
                0x0002002F, 
                Zero, 
                0x1F, 
                One, 
                0x00020030, 
                Zero, 
                0x05DC, 
                One, 
                0x00020031, 
                Zero, 
                Ones, 
                One, 
                0x00020032, 
                Zero, 
                0x07, 
                One, 
                0x00020033, 
                Zero, 
                One, 
                One, 
                0x00020035, 
                0x014D, 
                0x0FA0, 
                0x21, 
                0x00020036, 
                0x10FE, 
                0x11C6, 
                One, 
                0x00020037, 
                0x076C, 
                0x0834, 
                One, 
                0x00030001, 
                0x0230, 
                0x072B, 
                0x05, 
                0x00050001, 
                Zero, 
                0xFFFFFFFE, 
                One, 
                0x00050002, 
                Zero, 
                0xFFFFFFFE, 
                One, 
                0x00050003, 
                Zero, 
                0xFFFFFFFE, 
                One, 
                0x00050004, 
                0x64, 
                0x03E8, 
                0x64, 
                0x00050005, 
                Zero, 
                0xFF, 
                One, 
                Zero
            })
            Name (OBIU, Package (0x11)
            {
                0x0005000A, 
                Zero, 
                0x1E, 
                One, 
                0x0005000B, 
                0x0258, 
                0x05DC, 
                One, 
                0x0005000C, 
                Zero, 
                0xFFFFFFFE, 
                One, 
                0x0005000D, 
                Zero, 
                0xFFFFFFFE, 
                One, 
                Zero
            })
            Name (OBD1, Package (0xCF)
            {
                0x00020001, 
                0x4A, 
                0x014D, 
                0x0190, 
                0x0215, 
                0x029B, 
                0x0320, 
                0x03A5, 
                0x042B, 
                0x04B0, 
                0x0535, 
                0x0557, 
                0x0578, 
                0x0599, 
                0x05BB, 
                0x05DC, 
                0x05FD, 
                0x061F, 
                0x0640, 
                0x0661, 
                0x0683, 
                0x06A4, 
                0x06C5, 
                0x06E7, 
                0x0708, 
                0x0729, 
                0x074B, 
                0x076C, 
                0x078D, 
                0x07AF, 
                0x07D0, 
                0x07F1, 
                0x0813, 
                0x0834, 
                0x0855, 
                0x0877, 
                0x0898, 
                0x08B9, 
                0x08DB, 
                0x08FC, 
                0x091D, 
                0x093F, 
                0x0960, 
                0x0981, 
                0x09A3, 
                0x09C4, 
                0x09F6, 
                0x0A28, 
                0x0A5A, 
                0x0A8C, 
                0x0ABE, 
                0x0AF0, 
                0x0B22, 
                0x0B54, 
                0x0B86, 
                0x0BB8, 
                0x0BEA, 
                0x0C1C, 
                0x0C4E, 
                0x0C80, 
                0x0CB2, 
                0x0CE4, 
                0x0D16, 
                0x0D48, 
                0x0D7A, 
                0x0DAC, 
                0x0DDE, 
                0x0E10, 
                0x0E42, 
                0x0E74, 
                0x0EA6, 
                0x0ED8, 
                0x0F0A, 
                0x0F3C, 
                0x0F6E, 
                0x0FA0, 
                0x00020002, 
                0x1A, 
                0x08, 
                0x09, 
                0x0A, 
                0x0B, 
                0x0C, 
                0x0D, 
                0x0E, 
                0x0F, 
                0x10, 
                0x11, 
                0x12, 
                0x13, 
                0x14, 
                0x15, 
                0x16, 
                0x17, 
                0x18, 
                0x19, 
                0x1A, 
                0x1B, 
                0x1C, 
                0x1D, 
                0x1E, 
                0x1F, 
                0x20, 
                0x21, 
                0x00020005, 
                0x26, 
                0x15, 
                0x16, 
                0x17, 
                0x18, 
                0x19, 
                0x1A, 
                0x1B, 
                0x1C, 
                0x1D, 
                0x1E, 
                0x1F, 
                0x20, 
                0x21, 
                0x22, 
                0x23, 
                0x24, 
                0x25, 
                0x26, 
                0x27, 
                0x28, 
                0x29, 
                0x2A, 
                0x2B, 
                0x2C, 
                0x2D, 
                0x2E, 
                0x2F, 
                0x30, 
                0x31, 
                0x32, 
                0x33, 
                0x34, 
                0x35, 
                0x36, 
                0x37, 
                0x38, 
                0x39, 
                0x3A, 
                0x00020007, 
                0x12, 
                Zero, 
                One, 
                0x02, 
                0x03, 
                0x08, 
                0x09, 
                0x0A, 
                0x0B, 
                0x18, 
                0x19, 
                0x1A, 
                0x1B, 
                0x38, 
                0x39, 
                0x3A, 
                0x3B, 
                0x3E, 
                0x3F, 
                0x00020014, 
                0x08, 
                0x09, 
                0x0A, 
                0x0B, 
                0x0C, 
                0x0E, 
                0x10, 
                0x12, 
                0x14, 
                0x0002002C, 
                0x06, 
                Zero, 
                One, 
                0x03, 
                0x07, 
                0x0F, 
                0x1F, 
                0x0002002D, 
                0x06, 
                Zero, 
                One, 
                0x03, 
                0x07, 
                0x0F, 
                0x1F, 
                0x0002002E, 
                0x06, 
                Zero, 
                One, 
                0x03, 
                0x07, 
                0x0F, 
                0x1F, 
                0x0002002F, 
                0x06, 
                Zero, 
                One, 
                0x03, 
                0x07, 
                0x0F, 
                0x1F, 
                Zero
            })
            Name (OBD2, Package (0x4E)
            {
                0x00020035, 
                0x47, 
                0x029B, 
                0x0320, 
                0x03A5, 
                0x042B, 
                0x04B0, 
                0x0535, 
                0x0557, 
                0x0578, 
                0x0599, 
                0x05BB, 
                0x05DC, 
                0x05FD, 
                0x061F, 
                0x0640, 
                0x0661, 
                0x0683, 
                0x06A4, 
                0x06C5, 
                0x06E7, 
                0x0708, 
                0x0729, 
                0x074B, 
                0x076C, 
                0x078D, 
                0x07AF, 
                0x07D0, 
                0x07F1, 
                0x0813, 
                0x0834, 
                0x0855, 
                0x0877, 
                0x0898, 
                0x08B9, 
                0x08DB, 
                0x08FC, 
                0x091D, 
                0x093F, 
                0x0960, 
                0x0981, 
                0x09A3, 
                0x09C4, 
                0x09F6, 
                0x0A28, 
                0x0A5A, 
                0x0A8C, 
                0x0ABE, 
                0x0AF0, 
                0x0B22, 
                0x0B54, 
                0x0B86, 
                0x0BB8, 
                0x0BEA, 
                0x0C1C, 
                0x0C4E, 
                0x0C80, 
                0x0CB2, 
                0x0CE4, 
                0x0D16, 
                0x0D48, 
                0x0D7A, 
                0x0DAC, 
                0x0DDE, 
                0x0E10, 
                0x0E42, 
                0x0E74, 
                0x0EA6, 
                0x0ED8, 
                0x0F0A, 
                0x0F3C, 
                0x0F6E, 
                0x0FA0, 
                0x0005000E, 
                0x02, 
                Zero, 
                One, 
                Zero
            })
            Method (BM01, 0, NotSerialized)
            {
            }

            Method (XINI, 0, NotSerialized)
            {
            }

            Method (EM01, 0, NotSerialized)
            {
            }

            Method (BM05, 1, NotSerialized)
            {
            }

            Method (EM05, 1, NotSerialized)
            {
            }

            Method (HM06, 0, NotSerialized)
            {
            }

            Method (HM07, 1, NotSerialized)
            {
            }

            Method (SBSL, 1, NotSerialized)
            {
                OperationRegion (PMRG, SystemMemory, 0xFED80300, 0x0100)
                Field (PMRG, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x2E), 
                    SBSL,   8
                }

                Local0 = (Arg0 | One)
                SBSL = Local0
            }

            Method (SETV, 2, NotSerialized)
            {
            }

            Method (GETV, 1, NotSerialized)
            {
            }

            Method (CPTB, 2, NotSerialized)
            {
                Name (LOID, Zero)
                CreateDWordField (Arg1, Zero, BUF0)
                CreateDWordField (Arg1, 0x04, BUF1)
                CreateDWordField (Arg1, 0x08, BUF2)
                CreateDWordField (Arg1, 0x0C, BUF3)
                Local0 = Zero
                LOID = DerefOf (OBIT [Local0])
                While (LOID)
                {
                    If ((LOID == Arg0))
                    {
                        BUF0 = DerefOf (OBIT [(Local0 + Zero)])
                        BUF1 = DerefOf (OBIT [(Local0 + One)])
                        BUF2 = DerefOf (OBIT [(Local0 + 0x02)])
                        BUF3 = DerefOf (OBIT [(Local0 + 0x03)])
                        Break
                    }

                    Local0 += 0x04
                    LOID = DerefOf (OBIT [Local0])
                }

                If ((LOID == Zero))
                {
                    Local0 = Zero
                    LOID = DerefOf (OBIU [Local0])
                    While (LOID)
                    {
                        If ((LOID == Arg0))
                        {
                            BUF0 = DerefOf (OBIU [(Local0 + Zero)])
                            BUF1 = DerefOf (OBIU [(Local0 + One)])
                            BUF2 = DerefOf (OBIU [(Local0 + 0x02)])
                            BUF3 = DerefOf (OBIU [(Local0 + 0x03)])
                            Break
                        }

                        Local0 += 0x04
                        LOID = DerefOf (OBIU [Local0])
                    }
                }

                If ((LOID == Zero))
                {
                    Return (0xFF)
                }

                Return (Zero)
            }

            Name (GF01, Zero)
            Name (GVBF, Buffer (0x05)
            {
                 0x00, 0x00, 0x00, 0x00, 0x00                     // .....
            })
            CreateDWordField (GVBF, Zero, GVB1)
            CreateByteField (GVBF, 0x04, GVB2)
            Method (AM01, 0, NotSerialized)
            {
                Return (CMDV) /* \AOD_.CMDV */
            }

            Method (AM02, 0, NotSerialized)
            {
                If (!GF01)
                {
                    BM01 ()
                    XINI ()
                    EM01 ()
                    GF01 = One
                }

                Return (Zero)
            }

            Method (AM03, 0, NotSerialized)
            {
                Return (OBID) /* \AOD_.OBID */
            }

            Method (AM04, 1, NotSerialized)
            {
                Name (LODT, Package (0x66)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Local0 = Zero
                While (One)
                {
                    If ((DerefOf (OBD1 [Local0]) == Arg0))
                    {
                        Local4 = Zero
                        Break
                    }

                    If ((DerefOf (OBD1 [Local0]) == Zero))
                    {
                        Local4 = 0x04
                        Break
                    }

                    Local0 += DerefOf (OBD1 [(Local0 + One)])
                    Local0 += 0x02
                }

                If ((Local4 == Zero))
                {
                    Local1 = DerefOf (OBD1 [(Local0 + One)])
                    Local1 += 0x02
                    Local2 = Zero
                    While (Local1)
                    {
                        LODT [Local2] = DerefOf (OBD1 [Local0])
                        Local1--
                        Local0++
                        Local2++
                    }

                    Return (LODT) /* \AOD_.AM04.LODT */
                }

                Local0 = Zero
                While (One)
                {
                    If ((DerefOf (OBD2 [Local0]) == Arg0))
                    {
                        Local4 = Zero
                        Break
                    }

                    If ((DerefOf (OBD2 [Local0]) == Zero))
                    {
                        Local4 = 0x04
                        Break
                    }

                    Local0 += DerefOf (OBD2 [(Local0 + One)])
                    Local0 += 0x02
                }

                If ((Local4 == Zero))
                {
                    Local1 = DerefOf (OBD2 [(Local0 + One)])
                    Local1 += 0x02
                    Local2 = Zero
                    While (Local1)
                    {
                        LODT [Local2] = DerefOf (OBD2 [Local0])
                        Local1--
                        Local0++
                        Local2++
                    }

                    Return (LODT) /* \AOD_.AM04.LODT */
                }

                Return (LODT) /* \AOD_.AM04.LODT */
            }

            Method (AM05, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ACMD)
                CreateField (OBUF, Zero, (SizeOf (OBUF) * 0x08), TEMP)
                TEMP = Zero
                CreateWordField (OBUF, Zero, BSCD)
                CreateDWordField (OBUF, 0x02, BSTS)
                CreateWordField (OBUF, 0x06, BSD1)
                CreateDWordField (OBUF, 0x08, BBSN)
                CreateDWordField (OBUF, 0x0C, BBVS)
                CreateDWordField (OBUF, 0x10, BBCB)
                CreateWordField (OBUF, 0x14, BBMC)
                CreateByteField (OBUF, 0x16, BTCL)
                CreateByteField (OBUF, 0x17, BTRR)
                CreateByteField (OBUF, 0x18, BTRW)
                CreateByteField (OBUF, 0x19, BRAS)
                CreateByteField (OBUF, 0x1A, BTRP)
                CreateWordField (OBUF, 0x1B, BVIO)
                CreateWordField (OBUF, 0x1D, BVTT)
                CreateWordField (OBUF, 0x1F, BVPP)
                CreateWordField (OBUF, 0x21, BODT)
                CreateWordField (OBUF, 0x23, BRPG)
                CreateByteField (OBUF, 0x25, BTRC)
                CreateWordField (OBUF, 0x26, BRFC)
                CreateWordField (OBUF, 0x28, BRF2)
                CreateWordField (OBUF, 0x2A, BRF4)
                CreateByteField (OBUF, 0x2C, BFAW)
                CreateByteField (OBUF, 0x2D, BRRS)
                CreateByteField (OBUF, 0x2E, BRRL)
                CreateByteField (OBUF, 0x2F, BTWR)
                CreateByteField (OBUF, 0x30, BWTS)
                CreateByteField (OBUF, 0x31, BWTL)
                CreateByteField (OBUF, 0x32, BCKE)
                CreateByteField (OBUF, 0x33, BCWL)
                CreateByteField (OBUF, 0x34, BRTP)
                CreateByteField (OBUF, 0x35, BRSC)
                CreateByteField (OBUF, 0x36, BRSL)
                CreateByteField (OBUF, 0x37, BRSD)
                CreateByteField (OBUF, 0x38, BRDD)
                CreateByteField (OBUF, 0x39, BWSC)
                CreateByteField (OBUF, 0x3A, BWSL)
                CreateByteField (OBUF, 0x3B, BWSD)
                CreateByteField (OBUF, 0x3C, BWDD)
                CreateByteField (OBUF, 0x3D, BRWR)
                CreateByteField (OBUF, 0x3E, BWRD)
                CreateByteField (OBUF, 0x3F, BRDN)
                CreateByteField (OBUF, 0x40, BM2T)
                CreateByteField (OBUF, 0x41, RBNM)
                CreateByteField (OBUF, 0x42, RBWR)
                CreateByteField (OBUF, 0x43, RBPK)
                CreateByteField (OBUF, 0x44, BPWD)
                CreateByteField (OBUF, 0x45, BOCD)
                CreateDWordField (OBUF, 0x46, BOCV)
                CreateDWordField (OBUF, 0x4A, BOCF)
                CreateByteField (OBUF, 0x4E, BSMT)
                CreateDWordField (OBUF, 0x4F, BTOF)
                CreateByteField (OBUF, 0x53, BEDC)
                CreateWordField (OBUF, 0x54, BCNT)
                CreateByteField (OBUF, 0x56, BACS)
                CreateByteField (OBUF, 0x57, BCOS)
                CreateByteField (OBUF, 0x58, BCES)
                CreateByteField (OBUF, 0x59, BCBC)
                CreateByteField (OBUF, 0x5A, BCBA)
                CreateByteField (OBUF, 0x5B, BCBO)
                CreateByteField (OBUF, 0x5C, BCBE)
                CreateDWordField (OBUF, 0x5D, BCVP)
                CreateByteField (OBUF, 0x5F, BEDO)
                CreateDWordField (OBUF, 0x60, BNLC)
                CreateDWordField (OBUF, 0x64, BNLM)
                CreateDWordField (OBUF, 0x68, BNLS)
                CreateDWordField (OBUF, 0x6C, BPPL)
                CreateDWordField (OBUF, 0x70, BTDL)
                CreateDWordField (OBUF, 0x74, BEDL)
                CreateByteField (OBUF, 0x78, BFOC)
                CreateByteField (OBUF, 0x79, BSVD)
                CreateWordField (OBUF, 0x7A, BFCK)
                CreateByteField (OBUF, 0x7C, BDPC)
                CreateByteField (OBUF, 0x7D, BCPS)
                CreateWordField (OBUF, 0x7E, BFMX)
                CreateWordField (OBUF, 0x80, BGMX)
                CreateWordField (OBUF, 0x82, BVDG)
                CreateDWordField (OBUF, 0x84, BEOG)
                CreateDWordField (OBUF, 0x88, BEOS)
                CreateDWordField (OBUF, 0x8C, BPPT)
                CreateDWordField (OBUF, 0x90, BTDC)
                CreateDWordField (OBUF, 0x94, BEDM)
                CreateDWordField (OBUF, 0x98, BSCA)
                CreateByteField (OBUF, 0x9C, BDMI)
                CreateByteField (OBUF, 0x9D, BGAS)
                CreateByteField (OBUF, 0x9E, BGAG)
                CreateByteField (OBUF, 0x9F, BNPS)
                CreateByteField (OBUF, 0xA0, BNPG)
                CreateDWordField (OBUF, 0xA1, BPCS)
                CreateWordField (OBUF, 0xA5, BIOD)
                CreateWordField (OBUF, 0xA7, BGFV)
                CreateWordField (OBUF, 0xA9, BGFX)
                CreateDWordField (OBUF, 0xAB, BSTD)
                CreateDWordField (OBUF, 0xAF, BSED)
                CreateByteField (OBUF, 0xB3, BSLC)
                CreateByteField (OBUF, 0xB4, BGLC)
                If ((ACMD == 0x00010001))
                {
                    R101 (Arg0)
                }
                ElseIf ((ACMD == 0x00010002))
                {
                    R102 (Arg0)
                }
                ElseIf ((ACMD == 0x00020001))
                {
                    R201 (Arg0)
                }
                ElseIf ((ACMD == 0x00020002))
                {
                    R202 (Arg0)
                }
                ElseIf ((ACMD == 0x00020003))
                {
                    R203 (Arg0)
                }
                ElseIf ((ACMD == 0x00020004))
                {
                    R204 (Arg0)
                }
                ElseIf ((ACMD == 0x00020005))
                {
                    R205 (Arg0)
                }
                ElseIf ((ACMD == 0x00020006))
                {
                    R206 (Arg0)
                }
                ElseIf ((ACMD == 0x00020007))
                {
                    R207 (Arg0)
                }
                ElseIf ((ACMD == 0x00020008))
                {
                    R208 (Arg0)
                }
                ElseIf ((ACMD == 0x00020009))
                {
                    R209 (Arg0)
                }
                ElseIf ((ACMD == 0x0002000A))
                {
                    R20A (Arg0)
                }
                ElseIf ((ACMD == 0x0002000B))
                {
                    R20B (Arg0)
                }
                ElseIf ((ACMD == 0x0002000C))
                {
                    R20C (Arg0)
                }
                ElseIf ((ACMD == 0x0002000D))
                {
                    R20D (Arg0)
                }
                ElseIf ((ACMD == 0x0002000E))
                {
                    R20E (Arg0)
                }
                ElseIf ((ACMD == 0x0002000F))
                {
                    R20F (Arg0)
                }
                ElseIf ((ACMD == 0x00020010))
                {
                    R210 (Arg0)
                }
                ElseIf ((ACMD == 0x00020011))
                {
                    R211 (Arg0)
                }
                ElseIf ((ACMD == 0x00020012))
                {
                    R212 (Arg0)
                }
                ElseIf ((ACMD == 0x00020013))
                {
                    R213 (Arg0)
                }
                ElseIf ((ACMD == 0x00020014))
                {
                    R214 (Arg0)
                }
                ElseIf ((ACMD == 0x00020015))
                {
                    R215 (Arg0)
                }
                ElseIf ((ACMD == 0x00020016))
                {
                    R216 (Arg0)
                }
                ElseIf ((ACMD == 0x00020017))
                {
                    R217 (Arg0)
                }
                ElseIf ((ACMD == 0x00020018))
                {
                    R218 (Arg0)
                }
                ElseIf ((ACMD == 0x00020019))
                {
                    R219 (Arg0)
                }
                ElseIf ((ACMD == 0x0002001A))
                {
                    R21A (Arg0)
                }
                ElseIf ((ACMD == 0x0002001B))
                {
                    R21B (Arg0)
                }
                ElseIf ((ACMD == 0x0002001C))
                {
                    R21C (Arg0)
                }
                ElseIf ((ACMD == 0x0002001D))
                {
                    R21D (Arg0)
                }
                ElseIf ((ACMD == 0x0002001E))
                {
                    R21E (Arg0)
                }
                ElseIf ((ACMD == 0x0002001F))
                {
                    R21F (Arg0)
                }
                ElseIf ((ACMD == 0x00020020))
                {
                    R220 (Arg0)
                }
                ElseIf ((ACMD == 0x00020021))
                {
                    R221 (Arg0)
                }
                ElseIf ((ACMD == 0x00020022))
                {
                    R222 (Arg0)
                }
                ElseIf ((ACMD == 0x00020023))
                {
                    R223 (Arg0)
                }
                ElseIf ((ACMD == 0x00020024))
                {
                    R224 (Arg0)
                }
                ElseIf ((ACMD == 0x00020025))
                {
                    R225 (Arg0)
                }
                ElseIf ((ACMD == 0x00020026))
                {
                    R226 (Arg0)
                }
                ElseIf ((ACMD == 0x00020027))
                {
                    R227 (Arg0)
                }
                ElseIf ((ACMD == 0x00020028))
                {
                    R228 (Arg0)
                }
                ElseIf ((ACMD == 0x00020029))
                {
                    R229 (Arg0)
                }
                ElseIf ((ACMD == 0x0002002A))
                {
                    R22A (Arg0)
                }
                ElseIf ((ACMD == 0x0002002B))
                {
                    R22B (Arg0)
                }
                ElseIf ((ACMD == 0x0002002C))
                {
                    R22C (Arg0)
                }
                ElseIf ((ACMD == 0x0002002D))
                {
                    R22D (Arg0)
                }
                ElseIf ((ACMD == 0x0002002E))
                {
                    R22E (Arg0)
                }
                ElseIf ((ACMD == 0x0002002F))
                {
                    R22F (Arg0)
                }
                ElseIf ((ACMD == 0x00020030))
                {
                    R230 (Arg0)
                }
                ElseIf ((ACMD == 0x00020031))
                {
                    R231 (Arg0)
                }
                ElseIf ((ACMD == 0x00020032))
                {
                    R232 (Arg0)
                }
                ElseIf ((ACMD == 0x00020033))
                {
                    R233 (Arg0)
                }
                ElseIf ((ACMD == 0x00020034))
                {
                    R234 (Arg0)
                }
                ElseIf ((ACMD == 0x00020035))
                {
                    R235 (Arg0)
                }
                ElseIf ((ACMD == 0x00020036))
                {
                    R236 (Arg0)
                }
                ElseIf ((ACMD == 0x00020037))
                {
                    R237 (Arg0)
                }
                ElseIf ((ACMD == 0x00020038))
                {
                    R238 (Arg0)
                }
                ElseIf ((ACMD == 0x00020039))
                {
                    R239 (Arg0)
                }
                ElseIf ((ACMD == 0x0002003A))
                {
                    R23A (Arg0)
                }
                ElseIf ((ACMD == 0x00050001))
                {
                    R23B (Arg0)
                }
                ElseIf ((ACMD == 0x00050002))
                {
                    R23C (Arg0)
                }
                ElseIf ((ACMD == 0x00050003))
                {
                    R23D (Arg0)
                }
                ElseIf ((ACMD == 0x00050004))
                {
                    R23E (Arg0)
                }
                ElseIf ((ACMD == 0x00050005))
                {
                    R23F (Arg0)
                }
                ElseIf ((ACMD == 0x00030001))
                {
                    R301 (Arg0)
                }
                ElseIf ((ACMD == 0x00030002))
                {
                    R302 (Arg0)
                }
                ElseIf ((ACMD == 0x00030003))
                {
                    R303 (Arg0)
                }
                ElseIf ((ACMD == 0x00050006))
                {
                    R304 (Arg0)
                }
                ElseIf ((ACMD == 0x00050007))
                {
                    R305 (Arg0)
                }
                ElseIf ((ACMD == 0x00050008))
                {
                    R306 (Arg0)
                }
                ElseIf ((ACMD == 0x00050009))
                {
                    R307 (Arg0)
                }
                ElseIf ((ACMD == 0x0005000A))
                {
                    R308 (Arg0)
                }
                ElseIf ((ACMD == 0x0005000B))
                {
                    R309 (Arg0)
                }
                ElseIf ((ACMD == 0x0005000C))
                {
                    R30A (Arg0)
                }
                ElseIf ((ACMD == 0x0005000D))
                {
                    R30B (Arg0)
                }
                ElseIf ((ACMD == 0x0005000E))
                {
                    R30C (Arg0)
                }
                ElseIf ((ACMD == 0x0005000F))
                {
                    R30D (Arg0)
                }
                ElseIf ((ACMD == 0x00040001))
                {
                    R401 (Arg0)
                }
                ElseIf ((ACMD == 0x00040002))
                {
                    R402 (Arg0)
                }
                Else
                {
                }

                BSCD = ASCD /* \AOD_.ASCD */
                BSTS = ASTS /* \AOD_.ASTS */
                BSD1 = RSD1 /* \AOD_.RSD1 */
                BBSN = MBSN /* \AOD_.MBSN */
                BBVS = MBVS /* \AOD_.MBVS */
                BBCB = MBCB /* \AOD_.MBCB */
                BBMC = MBMC /* \AOD_.MBMC */
                BTCL = TTCL /* \AOD_.TTCL */
                BTRR = TRCR /* \AOD_.TRCR */
                BTRW = TRCW /* \AOD_.TRCW */
                BRAS = TRAS /* \AOD_.TRAS */
                BTRP = TTRP /* \AOD_.TTRP */
                BVIO = VDIO /* \AOD_.VDIO */
                BVTT = VMTT /* \AOD_.VMTT */
                BVPP = VMPP /* \AOD_.VMPP */
                BODT = PODT /* \AOD_.PODT */
                BRPG = TRPG /* \AOD_.TRPG */
                BTRC = TTRC /* \AOD_.TTRC */
                BRFC = TRFC /* \AOD_.TRFC */
                BRF2 = TRF2 /* \AOD_.TRF2 */
                BRF4 = TRF4 /* \AOD_.TRF4 */
                BFAW = TFAW /* \AOD_.TFAW */
                BRRS = TRRS /* \AOD_.TRRS */
                BRRL = TRRL /* \AOD_.TRRL */
                BTWR = TTWR /* \AOD_.TTWR */
                BWTS = TWTS /* \AOD_.TWTS */
                BWTL = TWTL /* \AOD_.TWTL */
                BCKE = TCKE /* \AOD_.TCKE */
                BCWL = TCWL /* \AOD_.TCWL */
                BRTP = TRTP /* \AOD_.TRTP */
                BRSC = TRSC /* \AOD_.TRSC */
                BRSL = TRSL /* \AOD_.TRSL */
                BRSD = TRSD /* \AOD_.TRSD */
                BRDD = TRDD /* \AOD_.TRDD */
                BWSC = TWSC /* \AOD_.TWSC */
                BWSL = TWSL /* \AOD_.TWSL */
                BWSD = TWSD /* \AOD_.TWSD */
                BWDD = TWDD /* \AOD_.TWDD */
                BRWR = TRWR /* \AOD_.TRWR */
                BWRD = TWRD /* \AOD_.TWRD */
                BRDN = GRDN /* \AOD_.GRDN */
                BM2T = CM2T /* \AOD_.CM2T */
                RBNM = RTNM /* \AOD_.RTNM */
                RBWR = RTWR /* \AOD_.RTWR */
                RBPK = RTPK /* \AOD_.RTPK */
                BPWD = PWDE /* \AOD_.PWDE */
                BOCD = OCDS /* \AOD_.OCDS */
                BOCV = OCVM /* \AOD_.OCVM */
                BOCF = OCFM /* \AOD_.OCFM */
                BSMT = SMTE /* \AOD_.SMTE */
                BTOF = TOFF /* \AOD_.TOFF */
                BEDC = EDCT /* \AOD_.EDCT */
                BCNT = ACNT /* \AOD_.ACNT */
                BACS = ACSP /* \AOD_.ACSP */
                BCOS = COSP /* \AOD_.COSP */
                BCES = CESP /* \AOD_.CESP */
                BCBC = CBCK /* \AOD_.CBCK */
                BCBA = CBAC /* \AOD_.CBAC */
                BCBO = CBCO /* \AOD_.CBCO */
                BCBE = CBCE /* \AOD_.CBCE */
                BCVP = CDVP /* \AOD_.CDVP */
                BEDO = EDCO /* \AOD_.EDCO */
                BNLC = INLC /* \AOD_.INLC */
                BNLM = INLM /* \AOD_.INLM */
                BNLS = INLS /* \AOD_.INLS */
                BPPL = PPTL /* \AOD_.PPTL */
                BTDL = TDCL /* \AOD_.TDCL */
                BEDL = EDCL /* \AOD_.EDCL */
                BFOC = FCOC /* \AOD_.FCOC */
                BSVD = SVID /* \AOD_.SVID */
                BFCK = FCLK /* \AOD_.FCLK */
                BDPC = MDPC /* \AOD_.MDPC */
                BCPS = MCPS /* \AOD_.MCPS */
                BFMX = FMAX /* \AOD_.FMAX */
                BGMX = GMAX /* \AOD_.GMAX */
                BVDG = CVDG /* \AOD_.CVDG */
                BEOG = ECOG /* \AOD_.ECOG */
                BEOS = ECOS /* \AOD_.ECOS */
                BPPT = PPTS /* \AOD_.PPTS */
                BTDC = TDCS /* \AOD_.TDCS */
                BEDM = EDCS /* \AOD_.EDCS */
                BSCA = SCAS /* \AOD_.SCAS */
                BDMI = DMIS /* \AOD_.DMIS */
                BGAS = GAMS /* \AOD_.GAMS */
                BGAG = GAMG /* \AOD_.GAMG */
                BNPS = NPSS /* \AOD_.NPSS */
                BNPG = NPSG /* \AOD_.NPSG */
                BPCS = COPS /* \AOD_.COPS */
                BIOD = IVDG /* \AOD_.IVDG */
                BGFV = OGFV /* \AOD_.OGFV */
                BGFX = OGFX /* \AOD_.OGFX */
                BSTD = OTDC /* \AOD_.OTDC */
                BSED = OEDC /* \AOD_.OEDC */
                BSLC = DMLC /* \AOD_.DMLC */
                BGLC = DMLG /* \AOD_.DMLG */
                Return (OBUF) /* \AOD_.OBUF */
            }

            Method (AM06, 1, NotSerialized)
            {
                Name (INFO, Buffer (0x10)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                })
                CPTB (Arg0, INFO)
                Return (INFO) /* \AOD_.AM06.INFO */
            }

            Method (AM07, 1, NotSerialized)
            {
                Name (BSPD, Buffer (0x0214) {})
                If ((Arg0 > 0x0F))
                {
                    Return (BSPD) /* \AOD_.AM07.BSPD */
                }

                If ((Arg0 == Zero))
                {
                    BSPD = DSPD /* \AOD_.DSPD */
                    Return (BSPD) /* \AOD_.AM07.BSPD */
                }

                Local0 = Zero
                Local0 += (Arg0 * 0x0214)
                Local1 = 0x0214
                Local2 = Zero
                While (Local1)
                {
                    BSPD [Local2] = DerefOf (DSPD [Local0])
                    Local1--
                    Local0++
                    Local2++
                }

                Return (BSPD) /* \AOD_.AM07.BSPD */
            }

            Method (AM08, 0, NotSerialized)
            {
                Return (OBIE) /* \AOD_.OBIE */
            }

            Name (CMDV, 0x05)
            Name (OBUF, Buffer (0xC8) {})
            OperationRegion (AODT, SystemMemory, 0xCCF3C018, 0x220C)
            Field (AODT, AnyAcc, NoLock, Preserve)
            {
                ASCD,   16, 
                ASTS,   32, 
                RSD1,   16, 
                MBSN,   32, 
                MBVS,   32, 
                MBCB,   32, 
                MBMC,   16, 
                TTCL,   8, 
                TRCR,   8, 
                TRCW,   8, 
                TRAS,   8, 
                TTRP,   8, 
                VDIO,   16, 
                VMTT,   16, 
                VMPP,   16, 
                PODT,   16, 
                TRPG,   16, 
                TTRC,   8, 
                TRFC,   16, 
                TRF2,   16, 
                TRF4,   16, 
                TFAW,   8, 
                TRRS,   8, 
                TRRL,   8, 
                TTWR,   8, 
                TWTS,   8, 
                TWTL,   8, 
                TCKE,   8, 
                TCWL,   8, 
                TRTP,   8, 
                TRSC,   8, 
                TRSL,   8, 
                TRSD,   8, 
                TRDD,   8, 
                TWSC,   8, 
                TWSL,   8, 
                TWSD,   8, 
                TWDD,   8, 
                TRWR,   8, 
                TWRD,   8, 
                GRDN,   8, 
                CM2T,   8, 
                RTNM,   8, 
                RTWR,   8, 
                RTPK,   8, 
                PWDE,   8, 
                OCDS,   8, 
                OCVM,   32, 
                OCFM,   32, 
                SMTE,   8, 
                TOFF,   32, 
                EDCT,   8, 
                ACNT,   16, 
                ACSP,   8, 
                COSP,   8, 
                CESP,   8, 
                CBCK,   8, 
                CBAC,   8, 
                CBCO,   8, 
                CBCE,   8, 
                CDVP,   16, 
                EDCO,   8, 
                INLC,   32, 
                INLM,   32, 
                INLS,   32, 
                PPTL,   32, 
                TDCL,   32, 
                EDCL,   32, 
                FCOC,   8, 
                SVID,   8, 
                FCLK,   16, 
                MDPC,   8, 
                MCPS,   8, 
                FMAX,   16, 
                GMAX,   16, 
                CVDG,   16, 
                ECOG,   32, 
                ECOS,   32, 
                PPTS,   32, 
                TDCS,   32, 
                EDCS,   32, 
                SCAS,   32, 
                DMIS,   8, 
                GAMS,   8, 
                GAMG,   8, 
                NPSS,   8, 
                NPSG,   8, 
                COPS,   32, 
                IVDG,   16, 
                OGFV,   16, 
                OGFX,   16, 
                OTDC,   32, 
                OEDC,   32, 
                DMLC,   8, 
                DMLG,   8, 
                MRSD,   88, 
                RSD2,   64, 
                NDPC,   8, 
                NCPS,   8, 
                RSD3,   16, 
                DSPD,   68096
            }

            Method (R101, 1, NotSerialized)
            {
                MBVS = 0x05
                MBCB = 0x80000000
                ASMI (0x9D)
            }

            Method (R102, 1, NotSerialized)
            {
                MBVS = 0x05
                Local0 = 0x40000000
                MBCB = Local0
                ASMI (0x9E)
            }

            Method (R201, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MCLK)
                MBVS = 0x05
                MBMC = MCLK /* \AOD_.R201.MCLK */
                MBCB = One
                ASMI (0x9D)
            }

            Method (R202, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, MTCL)
                MBVS = 0x05
                TTCL = MTCL /* \AOD_.R202.MTCL */
                MBCB = 0x02
                ASMI (0x9D)
            }

            Method (R203, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, MRDD)
                MBVS = 0x05
                TRCR = MRDD /* \AOD_.R203.MRDD */
                MBCB = 0x04
                ASMI (0x9D)
            }

            Method (R204, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, MRDW)
                MBVS = 0x05
                TRCW = MRDW /* \AOD_.R204.MRDW */
                MBCB = 0x08
                ASMI (0x9D)
            }

            Method (R205, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, MTRS)
                MBVS = 0x05
                TRAS = MTRS /* \AOD_.R205.MTRS */
                MBCB = 0x20
                ASMI (0x9D)
            }

            Method (R206, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, MTRP)
                MBVS = 0x05
                TTRP = MTRP /* \AOD_.R206.MTRP */
                MBCB = 0x10
                ASMI (0x9D)
            }

            Method (R207, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MPOT)
                MBVS = 0x05
                PODT = MPOT /* \AOD_.R207.MPOT */
                MBCB = 0x3000
                ASMI (0x9D)
            }

            Method (R208, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MRPG)
                MBVS = 0x05
                TRPG = MRPG /* \AOD_.R208.MRPG */
                MBCB = 0x4000
                ASMI (0x9D)
            }

            Method (R209, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TTRC = SVAL /* \AOD_.R209.SVAL */
                MBCB = 0x5000
                ASMI (0x9D)
            }

            Method (R20A, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRFC = SVAL /* \AOD_.R20A.SVAL */
                MBCB = 0x6000
                ASMI (0x9D)
            }

            Method (R20B, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRF2 = SVAL /* \AOD_.R20B.SVAL */
                MBCB = 0x7000
                ASMI (0x9D)
            }

            Method (R20C, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRF4 = SVAL /* \AOD_.R20C.SVAL */
                MBCB = 0x8000
                ASMI (0x9D)
            }

            Method (R20D, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TFAW = SVAL /* \AOD_.R20D.SVAL */
                MBCB = 0x9000
                ASMI (0x9D)
            }

            Method (R20E, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRRS = SVAL /* \AOD_.R20E.SVAL */
                MBCB = 0xA000
                ASMI (0x9D)
            }

            Method (R20F, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRRL = SVAL /* \AOD_.R20F.SVAL */
                MBCB = 0xB000
                ASMI (0x9D)
            }

            Method (R210, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TTWR = SVAL /* \AOD_.R210.SVAL */
                MBCB = 0xC000
                ASMI (0x9D)
            }

            Method (R211, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TWTS = SVAL /* \AOD_.R211.SVAL */
                MBCB = 0xD000
                ASMI (0x9D)
            }

            Method (R212, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TWTL = SVAL /* \AOD_.R212.SVAL */
                MBCB = 0xE000
                ASMI (0x9D)
            }

            Method (R213, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TCKE = SVAL /* \AOD_.R213.SVAL */
                MBCB = 0xF000
                ASMI (0x9D)
            }

            Method (R214, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TCWL = SVAL /* \AOD_.R214.SVAL */
                MBCB = 0x00010000
                ASMI (0x9D)
            }

            Method (R215, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRTP = SVAL /* \AOD_.R215.SVAL */
                MBCB = 0x00020000
                ASMI (0x9D)
            }

            Method (R216, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRSC = SVAL /* \AOD_.R216.SVAL */
                MBCB = 0x00030000
                ASMI (0x9D)
            }

            Method (R217, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRSL = SVAL /* \AOD_.R217.SVAL */
                MBCB = 0x00040000
                ASMI (0x9D)
            }

            Method (R218, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRSD = SVAL /* \AOD_.R218.SVAL */
                MBCB = 0x00050000
                ASMI (0x9D)
            }

            Method (R219, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRDD = SVAL /* \AOD_.R219.SVAL */
                MBCB = 0x00060000
                ASMI (0x9D)
            }

            Method (R21A, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TWSC = SVAL /* \AOD_.R21A.SVAL */
                MBCB = 0x00070000
                ASMI (0x9D)
            }

            Method (R21B, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TWSL = SVAL /* \AOD_.R21B.SVAL */
                MBCB = 0x00080000
                ASMI (0x9D)
            }

            Method (R21C, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TWSD = SVAL /* \AOD_.R21C.SVAL */
                MBCB = 0x00090000
                ASMI (0x9D)
            }

            Method (R21D, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TWDD = SVAL /* \AOD_.R21D.SVAL */
                MBCB = 0x000A0000
                ASMI (0x9D)
            }

            Method (R21E, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRWR = SVAL /* \AOD_.R21E.SVAL */
                MBCB = 0x000B0000
                ASMI (0x9D)
            }

            Method (R21F, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TWRD = SVAL /* \AOD_.R21F.SVAL */
                MBCB = 0x000C0000
                ASMI (0x9D)
            }

            Method (R220, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                GRDN = SVAL /* \AOD_.R220.SVAL */
                MBCB = 0x000D0000
                ASMI (0x9D)
            }

            Method (R221, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                CM2T = SVAL /* \AOD_.R221.SVAL */
                MBCB = 0x000E0000
                ASMI (0x9D)
            }

            Method (R222, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                RTNM = SVAL /* \AOD_.R222.SVAL */
                MBCB = 0x000F0000
                ASMI (0x9D)
            }

            Method (R223, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                RTWR = SVAL /* \AOD_.R223.SVAL */
                MBCB = 0x00100000
                ASMI (0x9D)
            }

            Method (R224, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                RTPK = SVAL /* \AOD_.R224.SVAL */
                MBCB = 0x00200000
                ASMI (0x9D)
            }

            Method (R225, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                PWDE = SVAL /* \AOD_.R225.SVAL */
                MBCB = 0x00300000
                ASMI (0x9D)
            }

            Method (R226, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                SMTE = SVAL /* \AOD_.R226.SVAL */
                MBCB = 0x00400000
                ASMI (0x9D)
            }

            Method (R227, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                ACNT = SVAL /* \AOD_.R227.SVAL */
                MBCB = 0x00500000
                ASMI (0x9D)
            }

            Method (R228, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                EDCT = SVAL /* \AOD_.R228.SVAL */
                MBCB = 0x00600000
                ASMI (0x9D)
            }

            Method (R229, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                ACSP = SVAL /* \AOD_.R229.SVAL */
                MBCB = 0x00800000
                ASMI (0x9D)
            }

            Method (R22A, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                COSP = SVAL /* \AOD_.R22A.SVAL */
                MBCB = 0x00900000
                ASMI (0x9D)
            }

            Method (R22B, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                CESP = SVAL /* \AOD_.R22B.SVAL */
                MBCB = 0x00A00000
                ASMI (0x9D)
            }

            Method (R22C, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                CBCK = SVAL /* \AOD_.R22C.SVAL */
                MBCB = 0x00B00000
                ASMI (0x9D)
            }

            Method (R22D, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                CBAC = SVAL /* \AOD_.R22D.SVAL */
                MBCB = 0x00C00000
                ASMI (0x9D)
            }

            Method (R22E, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                CBCO = SVAL /* \AOD_.R22E.SVAL */
                MBCB = 0x00D00000
                ASMI (0x9D)
            }

            Method (R22F, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                CBCE = SVAL /* \AOD_.R22F.SVAL */
                MBCB = 0x00E00000
                ASMI (0x9D)
            }

            Method (R230, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                CDVP = SVAL /* \AOD_.R230.SVAL */
                MBCB = 0x00700000
                ASMI (0x9D)
            }

            Method (R231, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                INLM = SVAL /* \AOD_.R231.SVAL */
                MBCB = 0x00100001
                ASMI (0x9D)
            }

            Method (R232, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                INLS = SVAL /* \AOD_.R232.SVAL */
                MBCB = 0x00100002
                ASMI (0x9D)
            }

            Method (R233, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                FCOC = SVAL /* \AOD_.R233.SVAL */
                MBCB = 0x00100003
                ASMI (0x9D)
            }

            Method (R234, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                SVID = SVAL /* \AOD_.R234.SVAL */
                MBCB = 0x00100004
                ASMI (0x9D)
            }

            Method (R235, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                FCLK = SVAL /* \AOD_.R235.SVAL */
                MBCB = 0x00100005
                ASMI (0x9D)
            }

            Method (R236, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                FMAX = SVAL /* \AOD_.R236.SVAL */
                MBCB = 0x00100006
                ASMI (0x9D)
            }

            Method (R237, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                GMAX = SVAL /* \AOD_.R237.SVAL */
                MBCB = 0x00100007
                ASMI (0x9D)
            }

            Method (R238, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                CVDG = SVAL /* \AOD_.R238.SVAL */
                MBCB = 0x00100008
                ASMI (0x9D)
            }

            Method (R239, 1, NotSerialized)
            {
                MBVS = 0x05
                Local0 = 0x00100009
                MBCB = Local0
                ASMI (0x9D)
            }

            Method (R23A, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                ECOS = SVAL /* \AOD_.R23A.SVAL */
                MBCB = 0x0010000A
                ASMI (0x9D)
            }

            Method (R23B, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                PPTS = SVAL /* \AOD_.R23B.SVAL */
                MBCB = 0x0010000B
                ASMI (0x9D)
            }

            Method (R23C, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TDCS = SVAL /* \AOD_.R23C.SVAL */
                MBCB = 0x0010000C
                ASMI (0x9D)
            }

            Method (R23D, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                EDCS = SVAL /* \AOD_.R23D.SVAL */
                MBCB = 0x0010000D
                ASMI (0x9D)
            }

            Method (R23E, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                SCAS = SVAL /* \AOD_.R23E.SVAL */
                MBCB = 0x0010000E
                ASMI (0x9D)
            }

            Method (R23F, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                DMIS = SVAL /* \AOD_.R23F.SVAL */
                MBCB = 0x0010000F
                ASMI (0x9D)
            }

            Method (R301, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MVIO)
                MBVS = 0x05
                VDIO = MVIO /* \AOD_.R301.MVIO */
                MBCB = 0x0100
                ASMI (0x9E)
            }

            Method (R302, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MVTT)
                MBVS = 0x05
                VMTT = MVTT /* \AOD_.R302.MVTT */
                MBCB = 0x0200
                ASMI (0x9E)
            }

            Method (R303, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MVPP)
                MBVS = 0x05
                VMPP = MVPP /* \AOD_.R303.MVPP */
                MBCB = 0x2000
                ASMI (0x9E)
            }

            Method (R304, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                GAMS = SVAL /* \AOD_.R304.SVAL */
                MBCB = 0x00100010
                ASMI (0x9D)
            }

            Method (R305, 1, NotSerialized)
            {
                MBVS = 0x05
                Local0 = 0x00100020
                MBCB = Local0
                ASMI (0x9D)
            }

            Method (R306, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                NPSS = SVAL /* \AOD_.R306.SVAL */
                MBCB = 0x00100030
                ASMI (0x9D)
            }

            Method (R307, 1, NotSerialized)
            {
                MBVS = 0x05
                Local0 = 0x00100031
                MBCB = Local0
                ASMI (0x9D)
            }

            Method (R308, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                COPS = SVAL /* \AOD_.R308.SVAL */
                MBCB = 0x00100032
                ASMI (0x9D)
            }

            Method (R309, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                IVDG = SVAL /* \AOD_.R309.SVAL */
                MBCB = 0x00100033
                ASMI (0x9D)
            }

            Method (R30A, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                OTDC = SVAL /* \AOD_.R30A.SVAL */
                MBCB = 0x00100034
                ASMI (0x9D)
            }

            Method (R30B, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                OEDC = SVAL /* \AOD_.R30B.SVAL */
                MBCB = 0x00100035
                ASMI (0x9D)
            }

            Method (R30C, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                DMLC = SVAL /* \AOD_.R30C.SVAL */
                MBCB = 0x00100036
                ASMI (0x9D)
            }

            Method (R30D, 1, NotSerialized)
            {
                MBVS = 0x05
                Local0 = 0x00100037
                MBCB = Local0
                ASMI (0x9D)
            }

            Method (R401, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MVPP)
                MBVS = 0x05
                MBCB = 0x01000000
                ASMI (0x9E)
            }

            Method (R402, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MVPP)
                MBVS = 0x05
                MBCB = 0x02000000
                ASMI (0x9E)
            }

            Method (R505, 1, NotSerialized)
            {
                MBVS = 0x05
            }

            Name (WQBA, Buffer (0x0A57)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0x47, 0x0A, 0x00, 0x00, 0x38, 0x37, 0x00, 0x00,  // G...87..
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0x18, 0xDB, 0x9A, 0x00, 0x01, 0x06, 0x18, 0x42,  // .......B
                /* 0020 */  0x10, 0x0F, 0x10, 0x22, 0x21, 0x04, 0x12, 0x01,  // ..."!...
                /* 0028 */  0xA1, 0xC8, 0x2C, 0x0C, 0x86, 0x10, 0x38, 0x2E,  // ..,...8.
                /* 0030 */  0x84, 0x1C, 0x40, 0x48, 0x1C, 0x14, 0x4A, 0x08,  // ..@H..J.
                /* 0038 */  0x84, 0xFA, 0x13, 0xC8, 0xAF, 0x00, 0x84, 0x0E,  // ........
                /* 0040 */  0x05, 0xC8, 0x14, 0x60, 0x50, 0x80, 0x53, 0x04,  // ...`P.S.
                /* 0048 */  0x11, 0xF4, 0x2A, 0xC0, 0xA6, 0x00, 0x93, 0x02,  // ..*.....
                /* 0050 */  0x2C, 0x0A, 0xD0, 0x2E, 0xC0, 0xB2, 0x00, 0xDD,  // ,.......
                /* 0058 */  0x02, 0xA4, 0xC3, 0x12, 0x91, 0xE0, 0x28, 0x31,  // ......(1
                /* 0060 */  0xE0, 0x28, 0x9D, 0xD8, 0xC2, 0x0D, 0x1B, 0xBC,  // .(......
                /* 0068 */  0x50, 0x14, 0xCD, 0x20, 0x4A, 0x82, 0xCA, 0x05,  // P.. J...
                /* 0070 */  0xF8, 0x46, 0x10, 0x78, 0xB9, 0x02, 0x24, 0x4F,  // .F.x..$O
                /* 0078 */  0x40, 0x9A, 0x05, 0x18, 0x16, 0x60, 0x5D, 0x80,  // @....`].
                /* 0080 */  0xEC, 0x21, 0x50, 0xA9, 0x43, 0x40, 0xC9, 0x19,  // .!P.C@..
                /* 0088 */  0x02, 0x6A, 0x00, 0xAD, 0x4E, 0x40, 0xF8, 0x95,  // .j..N@..
                /* 0090 */  0x4E, 0x09, 0x49, 0x10, 0xCE, 0x58, 0xC5, 0xE3,  // N.I..X..
                /* 0098 */  0x6B, 0x16, 0x4D, 0xCF, 0x49, 0xCE, 0x31, 0xE4,  // k.M.I.1.
                /* 00A0 */  0x78, 0x5C, 0xE8, 0x41, 0xF0, 0x50, 0x1A, 0x40,  // x\.A.P.@
                /* 00A8 */  0x98, 0xFC, 0x21, 0x2B, 0x06, 0x0C, 0x4A, 0xC2,  // ..!+..J.
                /* 00B0 */  0x58, 0xA8, 0x8B, 0x51, 0xA3, 0x46, 0xCA, 0x06,  // X..Q.F..
                /* 00B8 */  0x64, 0x88, 0xD2, 0x46, 0x8D, 0x1E, 0xD0, 0xF9,  // d..F....
                /* 00C0 */  0x1D, 0xC9, 0xD9, 0x1D, 0xDD, 0x91, 0x24, 0x30,  // ......$0
                /* 00C8 */  0xEA, 0x31, 0x1D, 0x63, 0x61, 0x33, 0x12, 0x6A,  // .1.ca3.j
                /* 00D0 */  0x8C, 0xE6, 0xA0, 0x48, 0xB8, 0x41, 0xA3, 0x25,  // ...H.A.%
                /* 00D8 */  0xC2, 0x6A, 0x5C, 0xB1, 0xCF, 0xCC, 0xC2, 0x87,  // .j\.....
                /* 00E0 */  0x25, 0x8C, 0x23, 0x38, 0xB0, 0x83, 0xB5, 0x68,  // %.#8...h
                /* 00E8 */  0x18, 0xA1, 0x15, 0x04, 0xA7, 0x41, 0x1C, 0x45,  // .....A.E
                /* 00F0 */  0x94, 0x30, 0x0C, 0xCF, 0x98, 0x81, 0x8E, 0x92,  // .0......
                /* 00F8 */  0x21, 0x85, 0x09, 0x7A, 0x02, 0x41, 0x4E, 0x9E,  // !..z.AN.
                /* 0100 */  0x61, 0x19, 0xE2, 0x0C, 0x38, 0x56, 0x8C, 0x50,  // a...8V.P
                /* 0108 */  0x21, 0x31, 0x03, 0x09, 0xFE, 0xFF, 0x3F, 0x81,  // !1....?.
                /* 0110 */  0xAE, 0x31, 0xE4, 0x19, 0x88, 0xDC, 0x03, 0x4E,  // .1.....N
                /* 0118 */  0x20, 0x48, 0xF4, 0x28, 0xC1, 0x8D, 0x6B, 0x54,  //  H.(..kT
                /* 0120 */  0x36, 0xA6, 0xB3, 0xC1, 0x0D, 0xCC, 0x04, 0x71,  // 6......q
                /* 0128 */  0x0E, 0x0F, 0x23, 0x03, 0x42, 0x13, 0x88, 0x1F,  // ..#.B...
                /* 0130 */  0x3B, 0x7C, 0x02, 0xBB, 0x3F, 0x0E, 0x48, 0x21,  // ;|..?.H!
                /* 0138 */  0x82, 0x2E, 0x04, 0x67, 0x5A, 0xA3, 0x80, 0x77,  // ...gZ..w
                /* 0140 */  0xC4, 0xB3, 0x43, 0x5B, 0x10, 0x3A, 0x0B, 0xC4,  // ..C[.:..
                /* 0148 */  0x6A, 0x0C, 0x45, 0x10, 0x11, 0x82, 0x46, 0x31,  // j.E...F1
                /* 0150 */  0x5E, 0x84, 0x50, 0x21, 0xA2, 0x44, 0x3D, 0xE7,  // ^.P!.D=.
                /* 0158 */  0x20, 0xB5, 0x09, 0x50, 0x06, 0x22, 0xB4, 0x60,  //  ..P.".`
                /* 0160 */  0x46, 0x60, 0xF6, 0xCF, 0x00, 0xCC, 0x02, 0xC4,  // F`......
                /* 0168 */  0x1F, 0x81, 0x25, 0x9C, 0x08, 0x64, 0x64, 0x34,  // ..%..dd4
                /* 0170 */  0xF4, 0xB0, 0xE0, 0x93, 0x00, 0x3B, 0x20, 0x78,  // .....; x
                /* 0178 */  0x3E, 0xA7, 0x66, 0x02, 0x07, 0x86, 0x10, 0xAF,  // >.f.....
                /* 0180 */  0x04, 0x88, 0x3A, 0x5A, 0x50, 0x02, 0x4B, 0x39,  // ..:ZP.K9
                /* 0188 */  0x1A, 0x10, 0xDB, 0x03, 0xD3, 0x3D, 0xE0, 0x08,  // .....=..
                /* 0190 */  0xCF, 0xDD, 0x97, 0x83, 0x53, 0xF3, 0x4F, 0xC3,  // ....S.O.
                /* 0198 */  0xD3, 0x7C, 0x48, 0xC0, 0x0C, 0xD1, 0x63, 0x3D,  // .|H...c=
                /* 01A0 */  0x88, 0x80, 0x87, 0xC8, 0x4E, 0x09, 0x06, 0xC4,  // ....N...
                /* 01A8 */  0x7B, 0xBF, 0x16, 0x90, 0x11, 0xBC, 0x24, 0x18,  // {.....$.
                /* 01B0 */  0xD0, 0x93, 0x78, 0x40, 0x00, 0xCB, 0x41, 0xE3,  // ..x@..A.
                /* 01B8 */  0xC0, 0x4F, 0xA8, 0xE2, 0x3B, 0x00, 0x3D, 0x12,  // .O..;.=.
                /* 01C0 */  0xB0, 0x19, 0xC5, 0x37, 0x41, 0x59, 0xC7, 0x07,  // ...7AY..
                /* 01C8 */  0xF4, 0x9C, 0xA3, 0x3D, 0x3B, 0xBC, 0x2C, 0x34,  // ...=;.,4
                /* 01D0 */  0x7B, 0xC5, 0x20, 0x04, 0xAF, 0x01, 0xBE, 0x29,  // {. ....)
                /* 01D8 */  0xF8, 0x34, 0x62, 0x51, 0xAB, 0x93, 0x93, 0x55,  // .4bQ...U
                /* 01E0 */  0x79, 0xC4, 0x14, 0xDC, 0x43, 0xE0, 0x32, 0xE0,  // y...C.2.
                /* 01E8 */  0x34, 0x74, 0x8F, 0x17, 0x1C, 0x0A, 0xC6, 0x4B,  // 4t.....K
                /* 01F0 */  0xFF, 0xFF, 0xE3, 0x05, 0xF7, 0xBC, 0x8E, 0x17,  // ........
                /* 01F8 */  0x2C, 0xC7, 0x84, 0x87, 0x8D, 0xAA, 0x20, 0x34,  // ,..... 4
                /* 0200 */  0x88, 0x03, 0x6E, 0x7E, 0x00, 0xE4, 0x6A, 0xE1,  // ..n~..j.
                /* 0208 */  0x11, 0xB3, 0xB9, 0x9C, 0x15, 0x3B, 0xA2, 0xF0,  // .....;..
                /* 0210 */  0xE1, 0xF1, 0x61, 0x78, 0xC4, 0xEF, 0x0D, 0xC5,  // ..ax....
                /* 0218 */  0x82, 0x48, 0x20, 0x84, 0xCE, 0x0C, 0x47, 0x0E,  // .H ...G.
                /* 0220 */  0x16, 0x67, 0x27, 0x08, 0x11, 0x58, 0xDA, 0xD0,  // .g'..X..
                /* 0228 */  0xD1, 0x43, 0xF6, 0xA8, 0x5E, 0x62, 0x8C, 0xF1,  // .C..^b..
                /* 0230 */  0x44, 0x60, 0xD4, 0x53, 0x3A, 0x7A, 0xF0, 0x01,  // D`.S:z..
                /* 0238 */  0x7A, 0xF4, 0x80, 0xCF, 0xFF, 0xFF, 0xE8, 0x71,  // z......q
                /* 0240 */  0x92, 0xC6, 0x2C, 0x11, 0xA3, 0x47, 0x9F, 0x23,  // ..,..G.#
                /* 0248 */  0x3C, 0x9D, 0xB7, 0x1F, 0x7E, 0x14, 0x49, 0xE0,  // <...~.I.
                /* 0250 */  0xF8, 0x10, 0x1A, 0x3D, 0x78, 0x4E, 0x3F, 0x1E,  // ...=xN?.
                /* 0258 */  0x3D, 0xF8, 0xC7, 0xE8, 0xD1, 0x83, 0x67, 0x0C,  // =.....g.
                /* 0260 */  0xE7, 0x86, 0xBB, 0xDA, 0x78, 0xE4, 0x60, 0x1F,  // ....x.`.
                /* 0268 */  0x2F, 0x5E, 0xDE, 0x71, 0x0B, 0x14, 0x3E, 0x67,  // /^.q..>g
                /* 0270 */  0x4F, 0x06, 0xF0, 0x1E, 0x84, 0x3B, 0x6F, 0x01,  // O....;o.
                /* 0278 */  0x97, 0x11, 0x70, 0xC1, 0x4F, 0x1D, 0x9F, 0xAB,  // ..p.O...
                /* 0280 */  0xA8, 0x44, 0x18, 0xD4, 0xD1, 0x0A, 0x5C, 0xFF,  // .D....\.
                /* 0288 */  0xFF, 0xA3, 0x15, 0xC0, 0x84, 0xFB, 0xC3, 0xAB,  // ........
                /* 0290 */  0xD5, 0xA3, 0x15, 0xD8, 0x43, 0xBE, 0x24, 0xF4,  // ....C.$.
                /* 0298 */  0x23, 0x70, 0x6C, 0x08, 0x39, 0x39, 0x5A, 0xA1,  // #pl.99Z.
                /* 02A0 */  0x4E, 0x46, 0xB8, 0xA0, 0x07, 0x2B, 0xA0, 0x7B,  // NF...+.{
                /* 02A8 */  0xD0, 0xC0, 0x1D, 0x0F, 0xE0, 0xFC, 0xFF, 0x8F,  // ........
                /* 02B0 */  0x07, 0x7C, 0x60, 0xFC, 0xF4, 0x02, 0x3E, 0x11,  // .|`...>.
                /* 02B8 */  0x47, 0x21, 0x9F, 0xCA, 0xA0, 0x9F, 0x20, 0x3D,  // G!.... =
                /* 02C0 */  0x5A, 0xF0, 0x1C, 0xAB, 0x80, 0xC3, 0xA9, 0x0C,  // Z.......
                /* 02C8 */  0x38, 0x0C, 0x19, 0x7C, 0xF2, 0x0E, 0x53, 0xE8,  // 8..|..S.
                /* 02D0 */  0x03, 0x89, 0xA7, 0x50, 0xEB, 0x2D, 0x84, 0xC0,  // ...P.-..
                /* 02D8 */  0x1E, 0x90, 0x8F, 0x12, 0x41, 0x4E, 0x24, 0xC2,  // ....AN$.
                /* 02E0 */  0xB9, 0xF8, 0x38, 0x05, 0x98, 0xF8, 0xFF, 0x8F,  // ..8.....
                /* 02E8 */  0x1A, 0x7F, 0xCB, 0x60, 0xD7, 0x29, 0x30, 0x9C,  // ...`.)0.
                /* 02F0 */  0x82, 0xE0, 0x4D, 0xCA, 0xE3, 0x07, 0xDF, 0xB1,  // ..M.....
                /* 02F8 */  0x07, 0x77, 0x0A, 0x82, 0xE7, 0x71, 0x48, 0x42,  // .w...qHB
                /* 0300 */  0x3E, 0x8F, 0x97, 0x00, 0xDC, 0x45, 0x08, 0x7F,  // >....E..
                /* 0308 */  0x10, 0x02, 0x3E, 0xB2, 0x16, 0x4A, 0x4F, 0x41,  // ..>..JOA
                /* 0310 */  0x16, 0x02, 0x83, 0x3A, 0x08, 0x01, 0x2E, 0xFF,  // ...:....
                /* 0318 */  0xFF, 0x07, 0x21, 0x60, 0xE7, 0xED, 0xB6, 0xA1,  // ..!`....
                /* 0320 */  0x6B, 0x90, 0x6F, 0x03, 0x4F, 0x03, 0xAF, 0x11,  // k.o.O...
                /* 0328 */  0x51, 0x1E, 0x84, 0x7C, 0x13, 0x7A, 0x21, 0x88,  // Q..|.z!.
                /* 0330 */  0x10, 0xE5, 0x78, 0x4F, 0x20, 0xC2, 0xD3, 0x90,  // ..xO ...
                /* 0338 */  0x27, 0x1C, 0x26, 0xDC, 0xC9, 0x46, 0x79, 0x69,  // '.&..Fyi
                /* 0340 */  0x08, 0x63, 0xE8, 0x58, 0x81, 0x22, 0xC7, 0x0F,  // .c.X."..
                /* 0348 */  0xE1, 0x4B, 0x85, 0x0F, 0x42, 0x2C, 0xCA, 0x79,  // .K..B,.y
                /* 0350 */  0x40, 0x3F, 0x02, 0x9F, 0x3F, 0x6C, 0xE4, 0x2C,  // @?..?l.,
                /* 0358 */  0x82, 0x3A, 0x09, 0xF8, 0xD0, 0xE1, 0x41, 0x3D,  // .:....A=
                /* 0360 */  0x21, 0x60, 0x42, 0x9F, 0xEC, 0x40, 0x75, 0x14,  // !`B..@u.
                /* 0368 */  0x02, 0xCE, 0x07, 0x10, 0x78, 0x21, 0x0F, 0xAD,  // ....x!..
                /* 0370 */  0xA0, 0x3B, 0x92, 0x83, 0xE3, 0x50, 0x17, 0x39,  // .;...P.9
                /* 0378 */  0xEE, 0x03, 0x0D, 0xF6, 0xEC, 0xC1, 0xFF, 0xFF,  // ........
                /* 0380 */  0x67, 0x0F, 0xE0, 0x21, 0xED, 0xE0, 0x81, 0x12,  // g..!....
                /* 0388 */  0x73, 0xF6, 0x00, 0x48, 0x73, 0xD9, 0x78, 0xF7,  // s..Hs.x.
                /* 0390 */  0xF0, 0xA5, 0xE7, 0x4C, 0x9F, 0x3D, 0x3C, 0xD7,  // ...L.=<.
                /* 0398 */  0x77, 0x0E, 0x1F, 0xEB, 0x8C, 0x62, 0x88, 0xF7,  // w....b..
                /* 03A0 */  0x0F, 0x1F, 0x0A, 0xA2, 0x44, 0x3C, 0xD7, 0x28,  // ....D<.(
                /* 03A8 */  0x87, 0x1C, 0x25, 0x6E, 0x84, 0x30, 0xCF, 0x77,  // ..%n.0.w
                /* 03B0 */  0xC6, 0x89, 0x11, 0x2A, 0x02, 0x03, 0x7D, 0xF6,  // ...*..}.
                /* 03B8 */  0x60, 0x71, 0xCE, 0x1E, 0x50, 0xB1, 0xCF, 0xE6,  // `q..P...
                /* 03C0 */  0x8D, 0x23, 0xC2, 0x6B, 0xC0, 0x39, 0xFE, 0xFF,  // .#.k.9..
                /* 03C8 */  0xCF, 0xC7, 0x67, 0x0F, 0xC0, 0x9B, 0x94, 0xB7,  // ..g.....
                /* 03D0 */  0x9B, 0xCE, 0x1E, 0xE0, 0x3A, 0xC2, 0xE2, 0xCE,  // ....:...
                /* 03D8 */  0x1E, 0xF0, 0xC6, 0x8D, 0x3D, 0x7D, 0x00, 0x3B,  // ....=}.;
                /* 03E0 */  0x19, 0xAF, 0x01, 0x1F, 0x3D, 0x68, 0xF0, 0x03,  // ....=h..
                /* 03E8 */  0x2A, 0xD0, 0xFE, 0xFF, 0x1F, 0x50, 0x01, 0x97,  // *....P..
                /* 03F0 */  0x87, 0x8F, 0x07, 0x54, 0xB0, 0x4B, 0x7F, 0x0E,  // ...T.K..
                /* 03F8 */  0xE8, 0x53, 0xE0, 0xE0, 0x07, 0x54, 0xF4, 0x70,  // .S...T.p
                /* 0400 */  0x7C, 0x9C, 0xC3, 0x9C, 0x50, 0x01, 0x9B, 0xFF,  // |...P...
                /* 0408 */  0x7F, 0x02, 0x1F, 0x6E, 0xE1, 0x00, 0x87, 0xF4,  // ...n....
                /* 0410 */  0x58, 0xC1, 0x76, 0x3E, 0x05, 0x0E, 0x63, 0x05,  // X.v>..c.
                /* 0418 */  0xCF, 0xC0, 0xF8, 0x58, 0x81, 0xC5, 0xC4, 0x9E,  // ...X....
                /* 0420 */  0x3D, 0x8E, 0x15, 0x6C, 0xA7, 0x52, 0xE0, 0x30,  // =..l.R.0
                /* 0428 */  0x56, 0x30, 0x0D, 0x8C, 0x8D, 0x15, 0x7C, 0x12,  // V0....|.
                /* 0430 */  0xCE, 0xC5, 0xE8, 0x31, 0xFA, 0xDA, 0x72, 0x40,  // ...1..r@
                /* 0438 */  0x9E, 0x47, 0x84, 0xA7, 0x7C, 0xF6, 0xFF, 0x27,  // .G..|..'
                /* 0440 */  0x70, 0xDC, 0xE1, 0x82, 0xEA, 0x5C, 0xE3, 0xE1,  // p....\..
                /* 0448 */  0x82, 0x5F, 0xDE, 0x70, 0x41, 0x33, 0x36, 0x38,  // ._.pA368
                /* 0450 */  0x23, 0x06, 0xDF, 0xD1, 0xC9, 0xE7, 0x58, 0xB0,  // #.....X.
                /* 0458 */  0x5C, 0x22, 0xD8, 0x59, 0x80, 0x4D, 0x07, 0x7F,  // \".Y.M..
                /* 0460 */  0x95, 0xC5, 0x9F, 0x99, 0x80, 0x91, 0xE4, 0xC7,  // ........
                /* 0468 */  0x92, 0x09, 0x14, 0xE0, 0x74, 0x20, 0x51, 0x2F,  // ....t Q/
                /* 0470 */  0x02, 0x0A, 0xE3, 0x43, 0x8D, 0xCF, 0x4C, 0x70,  // ...C..Lp
                /* 0478 */  0x25, 0xC1, 0xA1, 0xCE, 0x69, 0xEC, 0x74, 0x7C,  // %...i.t|
                /* 0480 */  0x72, 0x27, 0xF2, 0x7A, 0xE0, 0xC9, 0x3D, 0x3C,  // r'.z..=<
                /* 0488 */  0xC1, 0x38, 0x26, 0x78, 0x5A, 0x27, 0x65, 0xED,  // .8&xZ'e.
                /* 0490 */  0x47, 0x20, 0xF2, 0xFF, 0xBF, 0x66, 0xB1, 0xB3,  // G ...f..
                /* 0498 */  0x02, 0x47, 0xE3, 0x27, 0x29, 0xB0, 0x5E, 0x18,  // .G.').^.
                /* 04A0 */  0x7C, 0x4C, 0x00, 0xC7, 0xAC, 0x5F, 0xA3, 0x30,  // |L..._.0
                /* 04A8 */  0x58, 0xA1, 0x62, 0x34, 0x7A, 0x0D, 0x22, 0xA0,  // X.b4z.".
                /* 04B0 */  0xC7, 0xD7, 0xD7, 0x30, 0x74, 0x27, 0x30, 0x54,  // ...0t'0T
                /* 04B8 */  0xC4, 0x10, 0x6F, 0x06, 0x76, 0x79, 0x1E, 0x42,  // ..o.vy.B
                /* 04C0 */  0x1E, 0x9A, 0xC0, 0x85, 0xFD, 0xD0, 0x04, 0xF6,  // ........
                /* 04C8 */  0x50, 0x67, 0x32, 0x1A, 0x69, 0x34, 0xA8, 0x73,  // Pg2.i4.s
                /* 04D0 */  0x3A, 0x3F, 0x10, 0x3C, 0x72, 0xF9, 0xD8, 0x61,  // :?.<r..a
                /* 04D8 */  0x90, 0x13, 0x3D, 0xAD, 0xC7, 0x85, 0xA7, 0x01,  // ..=.....
                /* 04E0 */  0x8F, 0x9B, 0x5D, 0x13, 0xFC, 0x41, 0xF0, 0xF1,  // ..]..A..
                /* 04E8 */  0x00, 0x7F, 0x80, 0x08, 0x78, 0xA2, 0x4F, 0x1E,  // ....x.O.
                /* 04F0 */  0xB0, 0x4E, 0x20, 0xF8, 0xA3, 0x06, 0xFC, 0xF1,  // .N .....
                /* 04F8 */  0xF8, 0x18, 0xE0, 0x63, 0x07, 0x97, 0x3F, 0x08,  // ...c..?.
                /* 0500 */  0xD4, 0x51, 0x91, 0x8F, 0xF4, 0xB4, 0xDE, 0x06,  // .Q......
                /* 0508 */  0x7C, 0x48, 0x38, 0x2C, 0x76, 0xE6, 0xF0, 0xC9,  // |H8,v...
                /* 0510 */  0x08, 0xFF, 0xFF, 0x1F, 0x0F, 0x38, 0x8F, 0xED,  // .....8..
                /* 0518 */  0x0F, 0x19, 0xBE, 0x32, 0x78, 0xBE, 0x3E, 0xD1,  // ...2x.>.
                /* 0520 */  0x82, 0xE5, 0xD6, 0xE1, 0x43, 0x43, 0xA8, 0xA7,  // ....CC..
                /* 0528 */  0x0E, 0xCF, 0xE0, 0xFD, 0xC2, 0x27, 0x10, 0x60,  // .....'.`
                /* 0530 */  0x22, 0xCA, 0xCC, 0x10, 0x98, 0xD0, 0x75, 0xCA,  // ".....u.
                /* 0538 */  0xC6, 0x59, 0x93, 0x9E, 0x07, 0x2C, 0xF7, 0x80,  // .Y...,..
                /* 0540 */  0xA0, 0x6B, 0x04, 0xE6, 0x06, 0x11, 0xC4, 0xC3,  // .k......
                /* 0548 */  0x7F, 0xA3, 0xE0, 0x87, 0x46, 0x01, 0xEA, 0x60,  // ....F..`
                /* 0550 */  0x66, 0x08, 0x4B, 0xA3, 0x90, 0x30, 0x08, 0x8D,  // f.K..0..
                /* 0558 */  0xC8, 0x47, 0x0F, 0x02, 0x47, 0x41, 0x3C, 0x7A,  // .G..GA<z
                /* 0560 */  0xC7, 0x3C, 0x3E, 0xA1, 0x87, 0xEA, 0x63, 0x80,  // .<>...c.
                /* 0568 */  0x27, 0x81, 0x0B, 0x75, 0xF0, 0xA1, 0xC7, 0x05,  // '..u....
                /* 0570 */  0x3C, 0xDE, 0x03, 0xB1, 0xCF, 0x01, 0x6C, 0xEC,  // <.....l.
                /* 0578 */  0xB8, 0x93, 0x07, 0xDC, 0x71, 0xE0, 0x4F, 0x9C,  // ....q.O.
                /* 0580 */  0xF8, 0xB3, 0x1A, 0x3F, 0xF5, 0x80, 0xF3, 0xC8,  // ...?....
                /* 0588 */  0x89, 0xFB, 0xFF, 0x1F, 0x0E, 0xE0, 0x01, 0xF9,  // ........
                /* 0590 */  0x3E, 0x60, 0xA5, 0x67, 0x02, 0x3A, 0x87, 0x10,  // >`.g.:..
                /* 0598 */  0x61, 0xA2, 0x19, 0x1E, 0x13, 0xF8, 0xF8, 0x44,  // a......D
                /* 05A0 */  0x4F, 0xA4, 0x1E, 0x17, 0x1F, 0xA5, 0xCF, 0x30,  // O......0
                /* 05A8 */  0x0C, 0xFB, 0x11, 0xC5, 0xC7, 0xC4, 0x03, 0x7C,  // .......|
                /* 05B0 */  0x39, 0x78, 0xE6, 0xC3, 0xC0, 0x7A, 0xDC, 0x1C,  // 9x...z..
                /* 05B8 */  0xD6, 0x68, 0x61, 0x0F, 0xF7, 0x19, 0xC2, 0xF7,  // .ha.....
                /* 05C0 */  0x0F, 0xCF, 0xCC, 0xD7, 0x46, 0x9F, 0x3C, 0xC0,  // ....F.<.
                /* 05C8 */  0x72, 0x94, 0x82, 0x3F, 0x54, 0xDC, 0x59, 0x00,  // r..?T.Y.
                /* 05D0 */  0xEE, 0x81, 0x89, 0xCD, 0xE1, 0x69, 0x00, 0x2F,  // .....i./
                /* 05D8 */  0xF3, 0x10, 0x81, 0x1A, 0x88, 0x45, 0x2E, 0x50,  // .....E.P
                /* 05E0 */  0xC7, 0x15, 0x8F, 0xC4, 0x04, 0x96, 0x77, 0x80,  // ......w.
                /* 05E8 */  0x40, 0x9D, 0x1F, 0x2C, 0xEB, 0x00, 0x81, 0x12,  // @..,....
                /* 05F0 */  0x02, 0x47, 0x41, 0x7C, 0x80, 0xF0, 0x31, 0xDD,  // .GA|..1.
                /* 05F8 */  0x46, 0x0E, 0x10, 0xE8, 0x03, 0x0C, 0x83, 0x78,  // F......x
                /* 0600 */  0xE8, 0x34, 0x81, 0x8F, 0x32, 0x3E, 0x40, 0x00,  // .4..2>@.
                /* 0608 */  0x8F, 0x71, 0xE0, 0x0F, 0x10, 0xF0, 0xFE, 0xFF,  // .q......
                /* 0610 */  0x04, 0x3E, 0x01, 0x03, 0x9F, 0xF3, 0x03, 0x38,  // .>.....8
                /* 0618 */  0x4E, 0xA2, 0x3E, 0x3F, 0x80, 0xEB, 0x04, 0xE0,  // N.>?....
                /* 0620 */  0xF3, 0x03, 0x70, 0x1D, 0xE0, 0xA3, 0x00, 0x58,  // ..p....X
                /* 0628 */  0xCE, 0x64, 0x6C, 0x0E, 0x2F, 0x35, 0x67, 0xFE,  // .dl./5g.
                /* 0630 */  0xCA, 0xE4, 0x13, 0x2F, 0xE6, 0xD4, 0xCB, 0x75,  // .../...u
                /* 0638 */  0x8D, 0x80, 0x44, 0x3C, 0x43, 0xA0, 0x06, 0xE1,  // ..D<C...
                /* 0640 */  0x83, 0xB9, 0x8F, 0x13, 0xCC, 0xE7, 0x21, 0x48,  // ......!H
                /* 0648 */  0xAA, 0x51, 0x04, 0xEF, 0x5B, 0x01, 0x8B, 0x70,  // .Q..[..p
                /* 0650 */  0x8C, 0x40, 0x89, 0xA7, 0x90, 0xF4, 0x63, 0x04,  // .@....c.
                /* 0658 */  0x4A, 0x2C, 0x1C, 0x05, 0xF1, 0xA8, 0x7D, 0x90,  // J,....}.
                /* 0660 */  0xB0, 0x8D, 0xB3, 0x2D, 0xFA, 0x30, 0xCC, 0x8F,  // ...-.0..
                /* 0668 */  0x02, 0xFC, 0x14, 0x01, 0xF7, 0xFF, 0x3F, 0x0B,  // ......?.
                /* 0670 */  0x9F, 0xC2, 0x70, 0x47, 0x0F, 0x70, 0x5C, 0xC4,  // ..pG.p\.
                /* 0678 */  0x0E, 0xED, 0xEC, 0x1E, 0x12, 0xA2, 0xC4, 0x3C,  // .......<
                /* 0680 */  0x83, 0x37, 0x3F, 0x03, 0x86, 0x8D, 0xE6, 0x31,  // .7?....1
                /* 0688 */  0xE2, 0x70, 0xCE, 0xD1, 0x17, 0x35, 0xCF, 0x29,  // .p...5.)
                /* 0690 */  0xD6, 0xE3, 0x1B, 0x3F, 0x52, 0xC0, 0x45, 0xF1,  // ...?R.E.
                /* 0698 */  0x91, 0x02, 0xEE, 0x4C, 0xCE, 0x03, 0xA3, 0x6E,  // ...L...n
                /* 06A0 */  0x2C, 0x82, 0xF7, 0xB5, 0x10, 0x7F, 0xB0, 0x00,  // ,.......
                /* 06A8 */  0x1E, 0xC7, 0x25, 0x1F, 0x2C, 0xC0, 0x05, 0xE9,  // ..%.,...
                /* 06B0 */  0x83, 0x05, 0x70, 0x3D, 0x1F, 0xF8, 0x74, 0x00,  // ..p=..t.
                /* 06B8 */  0xD6, 0x0B, 0x19, 0xBF, 0x1F, 0xB0, 0xFF, 0xFF,  // ........
                /* 06C0 */  0xFD, 0x00, 0x77, 0xC2, 0x80, 0x71, 0x3E, 0xC0,  // ..w..q>.
                /* 06C8 */  0xDC, 0x30, 0x1C, 0x6B, 0xA5, 0x3A, 0x61, 0xE0,  // .0.k.:a.
                /* 06D0 */  0x62, 0x3D, 0x28, 0x34, 0x10, 0x36, 0xBC, 0xE7,  // b=(4.6..
                /* 06D8 */  0x9F, 0x27, 0x43, 0x7E, 0x98, 0x61, 0x51, 0xE0,  // .'C~.aQ.
                /* 06E0 */  0x74, 0xB4, 0xF0, 0xC9, 0xC2, 0x21, 0x28, 0x74,  // t....!(t
                /* 06E8 */  0x10, 0xF3, 0x09, 0x83, 0x8B, 0x39, 0x61, 0x50,  // .....9aP
                /* 06F0 */  0x10, 0x03, 0x3A, 0xE9, 0x39, 0x0C, 0x7D, 0xDA,  // ..:.9.}.
                /* 06F8 */  0xF4, 0xB1, 0x81, 0xDD, 0xEE, 0x7D, 0xBF, 0xF0,  // .....}..
                /* 0700 */  0x5C, 0x3C, 0x67, 0x8E, 0xE7, 0xF3, 0x32, 0x43,  // \<g...2C
                /* 0708 */  0x7D, 0x33, 0x01, 0xCF, 0x95, 0x82, 0x1D, 0xE7,  // }3......
                /* 0710 */  0x31, 0xB7, 0x49, 0x76, 0xE0, 0x64, 0xC7, 0x02,  // 1.Iv.d..
                /* 0718 */  0xA3, 0x1C, 0xEF, 0x6B, 0xA1, 0xD5, 0xDC, 0x15,  // ...k....
                /* 0720 */  0x50, 0x33, 0xC2, 0x10, 0x78, 0xC0, 0x3E, 0x89,  // P3..x.>.
                /* 0728 */  0x81, 0x49, 0xDF, 0x8D, 0x02, 0xE4, 0xE8, 0x5C,  // .I.....\
                /* 0730 */  0xE8, 0xE8, 0x51, 0x07, 0x00, 0x1F, 0xED, 0xF8,  // ..Q.....
                /* 0738 */  0xE8, 0x7D, 0xC4, 0xF6, 0x71, 0x05, 0xEE, 0xE1,  // .}..q...
                /* 0740 */  0xCE, 0x67, 0x28, 0x70, 0xFC, 0xFF, 0xCF, 0x50,  // .g(p...P
                /* 0748 */  0xC0, 0x65, 0x60, 0x9E, 0xE1, 0x13, 0x0A, 0xB8,  // .e`.....
                /* 0750 */  0xEE, 0x0F, 0xFC, 0xA2, 0x8A, 0x99, 0xC8, 0xB3,  // ........
                /* 0758 */  0x30, 0x8C, 0x53, 0x0A, 0xF0, 0x18, 0xBD, 0x4F,  // 0.S....O
                /* 0760 */  0x29, 0xE0, 0x3A, 0x00, 0xF8, 0x94, 0x02, 0x5C,  // ).:....\
                /* 0768 */  0xE7, 0xF8, 0x50, 0x00, 0x96, 0x33, 0x4A, 0x14,  // ..P..3J.
                /* 0770 */  0xDF, 0x7F, 0x3D, 0x11, 0x1B, 0x1F, 0x3E, 0xBD,  // ..=...>.
                /* 0778 */  0xA0, 0x78, 0x2C, 0xCF, 0xE6, 0xEC, 0x4C, 0xA9,  // .x,...L.
                /* 0780 */  0xB3, 0x09, 0x3A, 0xDA, 0xEB, 0x41, 0x83, 0x7E,  // ..:..A.~
                /* 0788 */  0x50, 0xF1, 0xEC, 0xC3, 0x1F, 0x5F, 0x84, 0xE7,  // P...._..
                /* 0790 */  0x53, 0x03, 0xFF, 0xFF, 0x13, 0x38, 0xCE, 0xD9,  // S....8..
                /* 0798 */  0x04, 0x15, 0x84, 0x42, 0xC7, 0x4E, 0x1F, 0x27,  // ...B.N.'
                /* 07A0 */  0xB8, 0xA4, 0xE3, 0x04, 0x05, 0x31, 0xA0, 0xF3,  // .....1..
                /* 07A8 */  0x1E, 0xF1, 0x3C, 0x0C, 0x7A, 0x9C, 0xE0, 0xA7,  // ..<.z...
                /* 07B0 */  0x3E, 0xDF, 0x12, 0x8E, 0xE3, 0x09, 0x24, 0xC1,  // >.....$.
                /* 07B8 */  0x7C, 0x27, 0x01, 0x7A, 0x39, 0x81, 0x77, 0x5E,  // |'.z9.w^
                /* 07C0 */  0x07, 0xCF, 0x28, 0xBC, 0x93, 0xB3, 0x60, 0x08,  // ..(...`.
                /* 07C8 */  0x6F, 0xD6, 0xEC, 0x38, 0x81, 0xBF, 0x1C, 0x3C,  // o..8...<
                /* 07D0 */  0x2B, 0x3C, 0xA8, 0xF3, 0xEB, 0x09, 0xCC, 0x7B,  // +<.....{
                /* 07D8 */  0x1E, 0xB8, 0x8E, 0x27, 0xC0, 0x42, 0xE6, 0x01,  // ...'.B..
                /* 07E0 */  0x00, 0x75, 0x6C, 0xF4, 0xC1, 0x91, 0x1F, 0x00,  // .ul.....
                /* 07E8 */  0x1C, 0xFA, 0x78, 0x82, 0x9E, 0x89, 0x8F, 0x45,  // ..x....E
                /* 07F0 */  0x4F, 0x25, 0xBE, 0x00, 0xF0, 0xB3, 0x9B, 0xCE,  // O%......
                /* 07F8 */  0x27, 0xA0, 0x38, 0x67, 0x82, 0x67, 0x1C, 0xEC,  // '.8g.g..
                /* 0800 */  0x0A, 0x80, 0x3F, 0x03, 0x60, 0xFE, 0xFF, 0x27,  // ..?.`..'
                /* 0808 */  0x14, 0x38, 0x47, 0x32, 0xF0, 0x4D, 0xC4, 0xA7,  // .8G2.M..
                /* 0810 */  0x8A, 0x03, 0xC1, 0x9E, 0x64, 0x81, 0x37, 0x2C,  // ....d.7,
                /* 0818 */  0x3F, 0xC9, 0x02, 0x3E, 0x6E, 0x23, 0xD8, 0x59,  // ?..>n#.Y
                /* 0820 */  0x3C, 0x93, 0x30, 0x82, 0x91, 0x8F, 0x26, 0xA8,  // <.0...&.
                /* 0828 */  0x23, 0xB2, 0x83, 0x9E, 0xC2, 0x10, 0xE3, 0x7C,  // #......|
                /* 0830 */  0xAC, 0x30, 0x46, 0xE4, 0xE2, 0x47, 0xAD, 0xC9,  // .0F..G..
                /* 0838 */  0xF8, 0x6C, 0xE6, 0xCB, 0x3A, 0x3B, 0xFC, 0xE0,  // .l..:;..
                /* 0840 */  0x08, 0x06, 0x3A, 0xA0, 0xA0, 0x8E, 0x63, 0x3E,  // ..:...c>
                /* 0848 */  0x8B, 0x81, 0xEB, 0xFF, 0x7F, 0x16, 0x03, 0x78,  // .......x
                /* 0850 */  0x70, 0x76, 0xF7, 0xE8, 0xF9, 0xB1, 0x9D, 0x83,  // pv......
                /* 0858 */  0x78, 0xF4, 0x0E, 0x7F, 0x16, 0x83, 0x1E, 0xF6,  // x.......
                /* 0860 */  0x2C, 0x06, 0xB4, 0x05, 0x9F, 0xC5, 0x40, 0x79,  // ,.....@y
                /* 0868 */  0x8B, 0xC0, 0xFF, 0xFF, 0x6F, 0x11, 0xB8, 0x33,  // ....o..3
                /* 0870 */  0x28, 0xF0, 0x5A, 0x9B, 0x4F, 0x28, 0xE0, 0xBA,  // (.Z.O(..
                /* 0878 */  0x33, 0xF8, 0x84, 0x02, 0x5C, 0x8F, 0x00, 0xB8,  // 3...\...
                /* 0880 */  0x33, 0x28, 0x38, 0x4E, 0x00, 0xCC, 0xD7, 0x0D,  // 3(8N....
                /* 0888 */  0x80, 0x82, 0x3C, 0x02, 0xE0, 0xAF, 0xF0, 0x3E,  // ..<....>
                /* 0890 */  0x98, 0xE0, 0xE2, 0x9D, 0x54, 0x50, 0x1C, 0x8E,  // ....TP..
                /* 0898 */  0x77, 0x52, 0x41, 0x4C, 0x25, 0xF2, 0x5B, 0x8B,  // wRAL%.[.
                /* 08A0 */  0x27, 0x10, 0xFE, 0xE0, 0xE2, 0xBC, 0x9F, 0xF1,  // '.......
                /* 08A8 */  0x53, 0x19, 0x0C, 0x51, 0x07, 0x0B, 0x94, 0x8C,  // S..Q....
                /* 08B0 */  0x83, 0x05, 0x05, 0x31, 0xA0, 0x33, 0x9E, 0x52,  // ...1.3.R
                /* 08B8 */  0xD0, 0xA7, 0x32, 0x7E, 0x19, 0xF1, 0xC0, 0x12,  // ..2~....
                /* 08C0 */  0xCC, 0x74, 0x4D, 0x81, 0xFA, 0xFF, 0x47, 0xF6,  // .tM...G.
                /* 08C8 */  0x05, 0x04, 0x37, 0x60, 0xB8, 0x60, 0x0F, 0x12,  // ..7`.`..
                /* 08D0 */  0x46, 0x78, 0x4D, 0xF6, 0x3C, 0x30, 0x47, 0x14,  // FxM.<0G.
                /* 08D8 */  0xC0, 0x86, 0xE4, 0xA1, 0xA3, 0x44, 0x0E, 0x9D,  // .....D..
                /* 08E0 */  0x82, 0x78, 0xE8, 0xA6, 0xF1, 0x11, 0x05, 0x37,  // .x.....7
                /* 08E8 */  0x56, 0x76, 0x21, 0x80, 0x15, 0xF5, 0x94, 0x02,  // Vv!.....
                /* 08F0 */  0x0A, 0x91, 0xC3, 0x07, 0xCD, 0x38, 0x8E, 0xEE,  // .....8..
                /* 08F8 */  0xA9, 0xC7, 0xF3, 0xE0, 0x77, 0x62, 0x1F, 0xF3,  // ....wb..
                /* 0900 */  0xE0, 0x9E, 0x54, 0x70, 0xA7, 0x46, 0xDC, 0x49,  // ..Tp.F.I
                /* 0908 */  0x05, 0x0C, 0x73, 0xC4, 0x9E, 0xCA, 0xC0, 0xF1,  // ..s.....
                /* 0910 */  0xFF, 0x3F, 0x82, 0x02, 0x47, 0x0F, 0x47, 0x50,  // .?..G.GP
                /* 0918 */  0x40, 0xCB, 0x21, 0x85, 0x1F, 0x33, 0x30, 0x57,  // @.!..30W
                /* 0920 */  0x03, 0x7E, 0x04, 0xC5, 0xC4, 0x7C, 0x3E, 0xE8,  // .~...|>.
                /* 0928 */  0x7C, 0xC2, 0x8F, 0x06, 0x0E, 0xF4, 0x2A, 0x10,  // |.....*.
                /* 0930 */  0x38, 0x3B, 0xEB, 0xE3, 0x2E, 0x07, 0x3E, 0x61,  // 8;....>a
                /* 0938 */  0x98, 0x60, 0x84, 0xD3, 0x04, 0x85, 0xB0, 0x78,  // .`.....x
                /* 0940 */  0x0A, 0x49, 0x3F, 0x54, 0xA0, 0xC4, 0xC2, 0x51,  // .I?T...Q
                /* 0948 */  0x10, 0x1F, 0x2A, 0x2C, 0xE4, 0x50, 0x81, 0x3E,  // ..*,.P.>
                /* 0950 */  0x46, 0xE1, 0x83, 0x9F, 0x28, 0x40, 0x71, 0x01,  // F...(@q.
                /* 0958 */  0x78, 0x64, 0x07, 0xEF, 0x7D, 0x9D, 0xFD, 0xFF,  // xd..}...
                /* 0960 */  0xEF, 0xEB, 0x98, 0x41, 0xE2, 0x2E, 0x2A, 0x1E,  // ...A..*.
                /* 0968 */  0xB2, 0x0F, 0xEC, 0x98, 0x79, 0xFA, 0x68, 0x01,  // ....y.h.
                /* 0970 */  0x8F, 0xC0, 0xA7, 0x47, 0xF0, 0xC1, 0xFB, 0x30,  // ...G...0
                /* 0978 */  0x05, 0xBC, 0xCE, 0x7A, 0x3E, 0x58, 0x80, 0x0B,  // ...z>X..
                /* 0980 */  0xDC, 0x07, 0x0B, 0xE0, 0x7A, 0xFB, 0xF1, 0xE9,  // ....z...
                /* 0988 */  0x00, 0xAC, 0xA3, 0x3D, 0xE6, 0xF3, 0x8D, 0xF3,  // ...=....
                /* 0990 */  0x7E, 0x00, 0xE3, 0xA6, 0xF2, 0x10, 0xE9, 0x7B,  // ~......{
                /* 0998 */  0x80, 0xF1, 0xD9, 0xF9, 0x00, 0x7B, 0x25, 0xF2,  // .....{%.
                /* 09A0 */  0xF1, 0x59, 0x36, 0x7D, 0x6A, 0x34, 0x6A, 0xD5,  // .Y6}j4j.
                /* 09A8 */  0xA0, 0x4C, 0x8D, 0x32, 0x0D, 0x6A, 0xF5, 0xA9,  // .L.2.j..
                /* 09B0 */  0xD4, 0x98, 0x31, 0x4F, 0x50, 0xFA, 0xFF, 0x47,  // ..1OP..G
                /* 09B8 */  0x58, 0xB8, 0x46, 0xEE, 0x50, 0x4F, 0x09, 0x81,  // X.F.PO..
                /* 09C0 */  0x38, 0xEE, 0xF2, 0x35, 0x7A, 0xF2, 0x3A, 0x11,  // 8..5z.:.
                /* 09C8 */  0x88, 0x85, 0xA8, 0x00, 0x61, 0x62, 0x16, 0x29,  // ....ab.)
                /* 09D0 */  0x10, 0x4B, 0x5D, 0xA4, 0x40, 0x1C, 0xC5, 0x07,  // .K].@...
                /* 09D8 */  0x08, 0x0B, 0xA8, 0x04, 0x84, 0x45, 0xB5, 0x02,  // .....E..
                /* 09E0 */  0x44, 0xB5, 0x80, 0xB0, 0x58, 0x5E, 0x40, 0x58,  // D...X^@X
                /* 09E8 */  0xB0, 0x85, 0x0A, 0xC4, 0x61, 0xDC, 0x80, 0x30,  // ....a..0
                /* 09F0 */  0x29, 0x2F, 0x08, 0x0D, 0x86, 0xD8, 0x39, 0x42,  // )/....9B
                /* 09F8 */  0xEB, 0xAC, 0x6B, 0x10, 0x01, 0x39, 0xB4, 0x1F,  // ..k..9..
                /* 0A00 */  0x20, 0x26, 0x61, 0xFD, 0x02, 0xB2, 0x70, 0x45,  //  &a...pE
                /* 0A08 */  0x40, 0x2C, 0x06, 0x88, 0x80, 0xAC, 0xC3, 0x12,  // @,......
                /* 0A10 */  0x10, 0x13, 0x05, 0x22, 0x20, 0x4B, 0xD3, 0x04,  // ..." K..
                /* 0A18 */  0xC4, 0x84, 0x82, 0x08, 0xC8, 0x21, 0x45, 0x01,  // .....!E.
                /* 0A20 */  0xB1, 0xC4, 0x20, 0x02, 0x72, 0x78, 0x53, 0x40,  // .. .rxS@
                /* 0A28 */  0x4C, 0x8A, 0x2A, 0x20, 0xA6, 0xFE, 0xA1, 0x20,  // L.* ... 
                /* 0A30 */  0x20, 0x47, 0x01, 0x11, 0x90, 0x03, 0xD9, 0x02,  //  G......
                /* 0A38 */  0x62, 0xF1, 0x40, 0x04, 0x64, 0x85, 0xEF, 0x51,  // b.@.d..Q
                /* 0A40 */  0x01, 0x59, 0x2E, 0x88, 0x80, 0x1C, 0xC1, 0x18,  // .Y......
                /* 0A48 */  0x10, 0x0B, 0x04, 0x22, 0x20, 0xCB, 0x92, 0x06,  // ..." ...
                /* 0A50 */  0xC4, 0x44, 0x82, 0x08, 0xC8, 0xFF, 0x7F         // .D.....
            })
            Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "AOD")  // _UID: Unique ID
            Name (_WDG, Buffer (0x28)
            {
                /* 0000 */  0x6A, 0x0F, 0xBC, 0xAB, 0xA1, 0x8E, 0xD1, 0x11,  // j.......
                /* 0008 */  0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10, 0x00, 0x00,  // ....)...
                /* 0010 */  0x41, 0x41, 0x01, 0x02, 0x21, 0x12, 0x90, 0x05,  // AA..!...
                /* 0018 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  // f.......
                /* 0020 */  0xC9, 0x06, 0x29, 0x10, 0x42, 0x41, 0x01, 0x00   // ..).BA..
            })
            Method (WMAA, 3, NotSerialized)
            {
                If ((Arg0 == Zero))
                {
                    If ((((Arg1 != One) || (Arg1 != 0x02)) || 
                        (Arg1 != 0x06)))
                    {
                        CreateDWordField (Arg2, Zero, WIID)
                    }

                    If ((Arg1 == One))
                    {
                        Return (AM01 ())
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        Return (AM02 ())
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        Return (AM03 ())
                    }
                    ElseIf ((Arg1 == 0x04))
                    {
                        Return (AM04 (WIID))
                    }
                    ElseIf ((Arg1 == 0x05))
                    {
                        Return (AM05 (Arg2))
                    }
                    ElseIf ((Arg1 == 0x06))
                    {
                        Return (AM06 (WIID))
                    }
                    ElseIf ((Arg1 == 0x07))
                    {
                        Return (AM07 (WIID))
                    }
                    ElseIf ((Arg1 == 0x08))
                    {
                        Return (AM08 ())
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }
        }
    }
}



SSDT13
------
DefinitionBlock ("", "SSDT", 1, "LENOVO", "CB-01   ", 0x00000001)
{
    /*
     * iASL Warning: There was 1 external control method found during
     * disassembly, but only 0 were resolved (1 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_SB_.GPIO, DeviceObj)
    External (_SB_.PCI0.GP17.ACP_, UnknownObj)
    External (_SB_.PCI0.GP17.AZAL, UnknownObj)
    External (_SB_.PCI0.GP17.XHC0, UnknownObj)
    External (_SB_.PCI0.GP17.XHC1, UnknownObj)
    External (_SB_.PCI0.GPP0, UnknownObj)
    External (_SB_.PCI0.GPP6, UnknownObj)
    External (_SB_.PWRB, UnknownObj)
    External (M000, MethodObj)    // Warning: Unknown method, guessing 1 arguments

    Method (MSTP, 1, Serialized)
    {
        Local0 = (Arg0 - 0x0C00)
        M000 (Local0)
    }

    Scope (\_SB.GPIO)
    {
        Method (_AEI, 0, NotSerialized)  // _AEI: ACPI Event Interrupts
        {
            Name (BUF0, ResourceTemplate ()
            {
                GpioInt (Edge, ActiveHigh, ExclusiveAndWake, PullDefault, 0x1388,
                    "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x0000
                    }
                GpioInt (Edge, ActiveHigh, ExclusiveAndWake, PullNone, 0x0000,
                    "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x002C
                    }
                GpioInt (Level, ActiveHigh, ExclusiveAndWake, PullNone, 0x0000,
                    "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x003D
                    }
                GpioInt (Level, ActiveHigh, ExclusiveAndWake, PullNone, 0x0000,
                    "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x003E
                    }
                GpioInt (Level, ActiveHigh, ExclusiveAndWake, PullNone, 0x0000,
                    "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x003A
                    }
                GpioInt (Level, ActiveHigh, ExclusiveAndWake, PullNone, 0x0000,
                    "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x003B
                    }
                GpioInt (Edge, ActiveLow, ExclusiveAndWake, PullNone, 0x0000,
                    "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x0012
                    }
                GpioInt (Edge, ActiveHigh, ExclusiveAndWake, PullNone, 0x0000,
                    "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x0044
                    }
            })
            Return (BUF0) /* \_SB_.GPIO._AEI.BUF0 */
        }

        Method (_EVT, 1, Serialized)  // _EVT: Event
        {
            Switch (ToInteger (Arg0))
            {
                Case (Zero)
                {
                    MSTP (0x3900)
                    Notify (\_SB.PWRB, 0x80) // Status Change
                }
                Case (0x12)
                {
                    MSTP (0x3918)
                    Notify (\_SB.PCI0.GPP6, 0x02) // Device Wake
                }
                Case (0x3A)
                {
                    MSTP (0x3958)
                    Notify (\_SB.PCI0.GP17.XHC0, 0x02) // Device Wake
                }
                Case (0x3B)
                {
                    MSTP (0x3959)
                    Notify (\_SB.PCI0.GP17.XHC1, 0x02) // Device Wake
                }
                Case (0x3D)
                {
                    MSTP (0x3961)
                    Notify (\_SB.PCI0.GP17.AZAL, 0x02) // Device Wake
                }
                Case (0x3E)
                {
                    MSTP (0x3961)
                    Notify (\_SB.PCI0.GP17.ACP, 0x02) // Device Wake
                }
                Case (0x44)
                {
                    MSTP (0x3962)
                    Notify (\_SB.PCI0.GPP0, Zero) // Bus Check
                }

            }
        }
    }
}



SSDT14
------
DefinitionBlock ("", "SSDT", 2, "LENOVO", "CB-01   ", 0x00000001)
{
    /*
     * iASL Warning: There were 2 external control methods found during
     * disassembly, but only 0 were resolved (2 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_SB_.PCI0.GP17.TPLD, IntObj)
    External (_SB_.PCI0.LPC0.EC0_, DeviceObj)
    External (_SB_.PCI0.LPC0.EC0_.ERCD, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (CUCB, IntObj)
    External (MBGS, MethodObj)    // Warning: Unknown method, guessing 1 arguments

    Scope (\_SB.PCI0.LPC0.EC0)
    {
        OperationRegion (USEC, SystemMemory, 0xFE0B0250, 0x30)
        Field (USEC, ByteAcc, Lock, Preserve)
        {
            VER1,   8, 
            VER2,   8, 
            RSV1,   8, 
            RSV2,   8, 
            CCI0,   8, 
            CCI1,   8, 
            CCI2,   8, 
            CCI3,   8, 
            CTL0,   8, 
            CTL1,   8, 
            CTL2,   8, 
            CTL3,   8, 
            CTL4,   8, 
            CTL5,   8, 
            CTL6,   8, 
            CTL7,   8, 
            MGI0,   8, 
            MGI1,   8, 
            MGI2,   8, 
            MGI3,   8, 
            MGI4,   8, 
            MGI5,   8, 
            MGI6,   8, 
            MGI7,   8, 
            MGI8,   8, 
            MGI9,   8, 
            MGIA,   8, 
            MGIB,   8, 
            MGIC,   8, 
            MGID,   8, 
            MGIE,   8, 
            MGIF,   8, 
            MGO0,   8, 
            MGO1,   8, 
            MGO2,   8, 
            MGO3,   8, 
            MGO4,   8, 
            MGO5,   8, 
            MGO6,   8, 
            MGO7,   8, 
            MGO8,   8, 
            MGO9,   8, 
            MGOA,   8, 
            MGOB,   8, 
            MGOC,   8, 
            MGOD,   8, 
            MGOE,   8, 
            MGOF,   8
        }
    }

    Scope (\_SB)
    {
        Device (UBTC)
        {
            Name (_HID, EisaId ("USBC000"))  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0CA0"))  // _CID: Compatible ID
            Name (_UID, Zero)  // _UID: Unique ID
            Name (_DDN, "USB Type C")  // _DDN: DOS Device Name
            Name (_ADR, Zero)  // _ADR: Address
            Name (CRS, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y00)
            })
            Device (CR01)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                {
                    Return (\_SB.PCI0.GP17.TPLD) /* External reference */
                    One
                    0x02
                }
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                CreateDWordField (CRS, \_SB.UBTC._Y00._BAS, CBAS)  // _BAS: Base Address
                CBAS = CUCB /* External reference */
                Return (CRS) /* \_SB_.UBTC.CRS_ */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }

            OperationRegion (USBC, SystemMemory, CUCB, 0x38)
            Field (USBC, ByteAcc, Lock, Preserve)
            {
                VER1,   8, 
                VER2,   8, 
                RSV1,   8, 
                RSV2,   8, 
                CCI0,   8, 
                CCI1,   8, 
                CCI2,   8, 
                CCI3,   8, 
                CTL0,   8, 
                CTL1,   8, 
                CTL2,   8, 
                CTL3,   8, 
                CTL4,   8, 
                CTL5,   8, 
                CTL6,   8, 
                CTL7,   8, 
                MGI0,   8, 
                MGI1,   8, 
                MGI2,   8, 
                MGI3,   8, 
                MGI4,   8, 
                MGI5,   8, 
                MGI6,   8, 
                MGI7,   8, 
                MGI8,   8, 
                MGI9,   8, 
                MGIA,   8, 
                MGIB,   8, 
                MGIC,   8, 
                MGID,   8, 
                MGIE,   8, 
                MGIF,   8, 
                MGO0,   8, 
                MGO1,   8, 
                MGO2,   8, 
                MGO3,   8, 
                MGO4,   8, 
                MGO5,   8, 
                MGO6,   8, 
                MGO7,   8, 
                MGO8,   8, 
                MGO9,   8, 
                MGOA,   8, 
                MGOB,   8, 
                MGOC,   8, 
                MGOD,   8, 
                MGOE,   8, 
                MGOF,   8
            }

            Mutex (UBSY, 0x00)
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("6f8398c2-7ca4-11e4-ad36-631042b5008f") /* Unknown UUID */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Return (Buffer (One)
                            {
                                 0x0F                                             // .
                            })
                        }
                        Case (One)
                        {
                            Acquire (UBSY, 0xFFFF)
                            \_SB.PCI0.LPC0.EC0.MGO0 = MGO0 /* \_SB_.UBTC.MGO0 */
                            \_SB.PCI0.LPC0.EC0.MGO1 = MGO1 /* \_SB_.UBTC.MGO1 */
                            \_SB.PCI0.LPC0.EC0.MGO2 = MGO2 /* \_SB_.UBTC.MGO2 */
                            \_SB.PCI0.LPC0.EC0.MGO3 = MGO3 /* \_SB_.UBTC.MGO3 */
                            \_SB.PCI0.LPC0.EC0.MGO4 = MGO4 /* \_SB_.UBTC.MGO4 */
                            \_SB.PCI0.LPC0.EC0.MGO5 = MGO5 /* \_SB_.UBTC.MGO5 */
                            \_SB.PCI0.LPC0.EC0.MGO6 = MGO6 /* \_SB_.UBTC.MGO6 */
                            \_SB.PCI0.LPC0.EC0.MGO7 = MGO7 /* \_SB_.UBTC.MGO7 */
                            \_SB.PCI0.LPC0.EC0.MGO8 = MGO8 /* \_SB_.UBTC.MGO8 */
                            \_SB.PCI0.LPC0.EC0.MGO9 = MGO9 /* \_SB_.UBTC.MGO9 */
                            \_SB.PCI0.LPC0.EC0.MGOA = MGOA /* \_SB_.UBTC.MGOA */
                            \_SB.PCI0.LPC0.EC0.MGOB = MGOB /* \_SB_.UBTC.MGOB */
                            \_SB.PCI0.LPC0.EC0.MGOC = MGOC /* \_SB_.UBTC.MGOC */
                            \_SB.PCI0.LPC0.EC0.MGOD = MGOD /* \_SB_.UBTC.MGOD */
                            \_SB.PCI0.LPC0.EC0.MGOE = MGOE /* \_SB_.UBTC.MGOE */
                            \_SB.PCI0.LPC0.EC0.MGOF = MGOF /* \_SB_.UBTC.MGOF */
                            \_SB.PCI0.LPC0.EC0.CTL0 = CTL0 /* \_SB_.UBTC.CTL0 */
                            \_SB.PCI0.LPC0.EC0.CTL1 = CTL1 /* \_SB_.UBTC.CTL1 */
                            \_SB.PCI0.LPC0.EC0.CTL2 = CTL2 /* \_SB_.UBTC.CTL2 */
                            \_SB.PCI0.LPC0.EC0.CTL3 = CTL3 /* \_SB_.UBTC.CTL3 */
                            \_SB.PCI0.LPC0.EC0.CTL4 = CTL4 /* \_SB_.UBTC.CTL4 */
                            \_SB.PCI0.LPC0.EC0.CTL5 = CTL5 /* \_SB_.UBTC.CTL5 */
                            \_SB.PCI0.LPC0.EC0.CTL6 = CTL6 /* \_SB_.UBTC.CTL6 */
                            \_SB.PCI0.LPC0.EC0.CTL7 = CTL7 /* \_SB_.UBTC.CTL7 */
                            MBGS ("UCSI write")
                            Local0 = Buffer (0x03) {}
                            Local0 [Zero] = 0x59
                            Local0 [One] = 0xB1
                            \_SB.PCI0.LPC0.EC0.ERCD (Local0)
                            Release (UBSY)
                        }
                        Case (0x02)
                        {
                            MGI0 = \_SB.PCI0.LPC0.EC0.MGI0
                            MGI1 = \_SB.PCI0.LPC0.EC0.MGI1
                            MGI2 = \_SB.PCI0.LPC0.EC0.MGI2
                            MGI3 = \_SB.PCI0.LPC0.EC0.MGI3
                            MGI4 = \_SB.PCI0.LPC0.EC0.MGI4
                            MGI5 = \_SB.PCI0.LPC0.EC0.MGI5
                            MGI6 = \_SB.PCI0.LPC0.EC0.MGI6
                            MGI7 = \_SB.PCI0.LPC0.EC0.MGI7
                            MGI8 = \_SB.PCI0.LPC0.EC0.MGI8
                            MGI9 = \_SB.PCI0.LPC0.EC0.MGI9
                            MGIA = \_SB.PCI0.LPC0.EC0.MGIA
                            MGIB = \_SB.PCI0.LPC0.EC0.MGIB
                            MGIC = \_SB.PCI0.LPC0.EC0.MGIC
                            MGID = \_SB.PCI0.LPC0.EC0.MGID
                            MGIE = \_SB.PCI0.LPC0.EC0.MGIE
                            MGIF = \_SB.PCI0.LPC0.EC0.MGIF
                            CCI0 = \_SB.PCI0.LPC0.EC0.CCI0
                            CCI1 = \_SB.PCI0.LPC0.EC0.CCI1
                            CCI2 = \_SB.PCI0.LPC0.EC0.CCI2
                            CCI3 = \_SB.PCI0.LPC0.EC0.CCI3
                            MBGS ("UCSI read")
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }

        Method (UCEV, 0, Serialized)
        {
            \_SB.UBTC.MGI0 = \_SB.PCI0.LPC0.EC0.MGI0
            \_SB.UBTC.MGI1 = \_SB.PCI0.LPC0.EC0.MGI1
            \_SB.UBTC.MGI2 = \_SB.PCI0.LPC0.EC0.MGI2
            \_SB.UBTC.MGI3 = \_SB.PCI0.LPC0.EC0.MGI3
            \_SB.UBTC.MGI4 = \_SB.PCI0.LPC0.EC0.MGI4
            \_SB.UBTC.MGI5 = \_SB.PCI0.LPC0.EC0.MGI5
            \_SB.UBTC.MGI6 = \_SB.PCI0.LPC0.EC0.MGI6
            \_SB.UBTC.MGI7 = \_SB.PCI0.LPC0.EC0.MGI7
            \_SB.UBTC.MGI8 = \_SB.PCI0.LPC0.EC0.MGI8
            \_SB.UBTC.MGI9 = \_SB.PCI0.LPC0.EC0.MGI9
            \_SB.UBTC.MGIA = \_SB.PCI0.LPC0.EC0.MGIA
            \_SB.UBTC.MGIB = \_SB.PCI0.LPC0.EC0.MGIB
            \_SB.UBTC.MGIC = \_SB.PCI0.LPC0.EC0.MGIC
            \_SB.UBTC.MGID = \_SB.PCI0.LPC0.EC0.MGID
            \_SB.UBTC.MGIE = \_SB.PCI0.LPC0.EC0.MGIE
            \_SB.UBTC.MGIF = \_SB.PCI0.LPC0.EC0.MGIF
            \_SB.UBTC.CCI0 = \_SB.PCI0.LPC0.EC0.CCI0
            \_SB.UBTC.CCI1 = \_SB.PCI0.LPC0.EC0.CCI1
            \_SB.UBTC.CCI2 = \_SB.PCI0.LPC0.EC0.CCI2
            \_SB.UBTC.CCI3 = \_SB.PCI0.LPC0.EC0.CCI3
            MBGS ("UCSI event")
            Notify (UBTC, 0x80) // Status Change
        }
    }
}



SSDT15
------
DefinitionBlock ("", "SSDT", 1, "LENOVO", "CB-01   ", 0x00000001)
{
    /*
     * iASL Warning: There was 1 external control method found during
     * disassembly, but only 0 were resolved (1 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_SB_.PCI0.GP17.XHC0, DeviceObj)
    External (_SB_.PCI0.GP17.XHC1, DeviceObj)
    External (MSTP, MethodObj)    // Warning: Unknown method, guessing 1 arguments

    Scope (\_SB.PCI0.GP17.XHC0)
    {
        Name (D0U0, One)
        Name (D3U0, Zero)
        PowerResource (P0U0, 0x00, 0x0000)
        {
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                MSTP (0x3C05)
                Return (D0U0) /* \_SB_.PCI0.GP17.XHC0.D0U0 */
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
                MSTP (0x3C06)
                D0U0 = One
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
                MSTP (0x3C08)
                D0U0 = Zero
            }
        }

        PowerResource (P3U0, 0x00, 0x0000)
        {
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                MSTP (0x3C0A)
                Return (D3U0) /* \_SB_.PCI0.GP17.XHC0.D3U0 */
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
                MSTP (0x3C0B)
                D3U0 = One
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
                MSTP (0x3C0D)
                D3U0 = Zero
            }
        }

        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
        {
            P0U0
        })
        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
        {
            P3U0
        })
        Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
        {
            MSTP (0x3C04)
            Return (0x04)
        }

        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
        {
            MSTP (0x3C01)
        }

        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
        {
            MSTP (0x3C03)
        }
    }

    Scope (\_SB.PCI0.GP17.XHC1)
    {
        Name (D0U1, One)
        Name (D3U1, Zero)
        PowerResource (P0U1, 0x00, 0x0000)
        {
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                MSTP (0x3D05)
                Return (D0U1) /* \_SB_.PCI0.GP17.XHC1.D0U1 */
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
                MSTP (0x3D06)
                D0U1 = One
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
                MSTP (0x3D08)
                D0U1 = Zero
            }
        }

        PowerResource (P3U1, 0x00, 0x0000)
        {
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                MSTP (0x3D0A)
                Return (D3U1) /* \_SB_.PCI0.GP17.XHC1.D3U1 */
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
                MSTP (0x3D0B)
                D3U1 = One
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
                MSTP (0x3D0D)
                D3U1 = Zero
            }
        }

        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
        {
            P0U1
        })
        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
        {
            P3U1
        })
        Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
        {
            MSTP (0x3D04)
            Return (0x04)
        }

        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
        {
            MSTP (0x3D01)
        }

        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
        {
            MSTP (0x3D03)
        }
    }
}



SSDT16
------
DefinitionBlock ("", "SSDT", 1, "LENOVO", "CB-01   ", 0x00000001)
{
    /*
     * iASL Warning: There were 21 external control methods found during
     * disassembly, but only 0 were resolved (21 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_GPE.SP00, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP01, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP02, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP03, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP04, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP05, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP06, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP07, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.ALIB, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.GPIO, DeviceObj)
    External (_SB_.IPTS, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.IWAK, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.M263, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.M264, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.M284, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.PTBR.PTST.TPTS, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.PTBR.PTST.TWAK, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCXX.GPXX.SAXX.TPTS, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCXX.GPXX.SAXX.TWAK, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCXX.SAXX.TPTS, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCXX.SAXX.TWAK, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (M038, IntObj)
    External (M039, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (MOEM, IntObj)

    OperationRegion (CPNV, SystemMemory, 0xCDF68018, 0x000100E1)
    Field (CPNV, AnyAcc, Lock, Preserve)
    {
        M082,   32, 
        M083,   32, 
        M084,   32, 
        M085,   8, 
        M221,   8, 
        M086,   16, 
        M229,   8, 
        M231,   16, 
        M235,   8, 
        M233,   32, 
            ,   1, 
            ,   2, 
            ,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
        Offset (0x19), 
        M087,   1, 
            ,   1, 
        Offset (0x1C), 
        M088,   16, 
        M089,   16, 
        M090,   3, 
        M091,   5, 
        M092,   8, 
        M093,   3, 
        M094,   5, 
        M095,   8, 
        M096,   8, 
        M097,   8, 
        M098,   32, 
        M099,   32, 
        M100,   32, 
        M101,   32, 
        M102,   32, 
        M103,   32, 
        M104,   224, 
        M105,   32, 
        M106,   32768, 
        M378,   32768, 
        M379,   32768, 
        M380,   32768, 
        M381,   32768, 
        M382,   32768, 
        M383,   32768, 
        M384,   32768, 
        M385,   32768, 
        M386,   32768, 
        M387,   32768, 
        M388,   32768, 
        M389,   32768, 
        M390,   32768, 
        M391,   32768, 
        M392,   32768, 
        M107,   64, 
        M320,   32, 
        M321,   32, 
        M322,   32, 
        M323,   32, 
        M324,   32, 
        M325,   32, 
        M326,   32, 
        M327,   16, 
        M328,   8, 
        M128,   32, 
        M108,   32, 
        M109,   32, 
        M110,   32, 
        M122,   32, 
        M131,   32, 
        M132,   32, 
        M133,   32, 
        M134,   32, 
        M135,   32, 
        M136,   32, 
        M220,   32, 
        M226,   32, 
        M251,   32, 
        M310,   32, 
        M280,   32, 
        M290,   32, 
        M331,   32, 
        M414,   16, 
        M444,   72, 
        M449,   72
    }

    Method (M000, 1, Serialized)
    {
        Name (M285, Buffer (0x04)
        {
             0x01, 0x03, 0x80, 0x00                           // ....
        })
        CreateByteField (M285, Zero, M286)
        CreateByteField (M285, One, M287)
        CreateWordField (M285, 0x02, M288)
        If ((ToInteger (M286) == One))
        {
            Local0 = (Arg0 + 0xB0000C00)
            Local1 = ToInteger (M288)
            If ((ToInteger (M287) == 0x03))
            {
                OperationRegion (VARM, SystemIO, Local1, 0x04)
                Field (VARM, DWordAcc, NoLock, Preserve)
                {
                    VARR,   32
                }

                VARR = Local0
            }
            ElseIf ((ToInteger (M287) == 0x02))
            {
                OperationRegion (VARN, SystemIO, Local1, 0x02)
                Field (VARN, WordAcc, NoLock, Preserve)
                {
                    VARS,   16
                }

                VARS = (Local0 & 0xFFFF)
            }
            ElseIf ((ToInteger (M287) == One))
            {
                OperationRegion (VARO, SystemIO, Local1, One)
                Field (VARO, ByteAcc, NoLock, Preserve)
                {
                    VART,   8
                }

                VART = (Local0 & 0xFF)
            }
        }
    }

    Method (M019, 4, Serialized)
    {
        Return (M017 (Arg0, Arg1, Arg2, Arg3, Zero, 0x20))
    }

    Method (M020, 5, Serialized)
    {
        M018 (Arg0, Arg1, Arg2, Arg3, Zero, 0x20, Arg4)
    }

    Mutex (M421, 0x00)
    Method (M422, 4, Serialized)
    {
        Local0 = M049 (M128, 0x81)
        If ((Local0 == Zero))
        {
            Return (Ones)
        }

        Local0 = (M083 + (Local0 << 0x14))
        Local0 += 0xE0
        Acquire (M421, 0xFFFF)
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local1 = VAR1 /* \M422.VAR1 */
        Local2 = VAR2 /* \M422.VAR2 */
        VAR1 = Local1
        Release (M421)
        Return (Local2)
    }

    Method (M423, 5, Serialized)
    {
        Local0 = M049 (M128, 0x81)
        If ((Local0 != Zero))
        {
            Local0 = (M083 + (Local0 << 0x14))
            Local0 += 0xE0
            Acquire (M421, 0xFFFF)
            OperationRegion (VARM, SystemMemory, Local0, 0x08)
            Field (VARM, DWordAcc, NoLock, Preserve)
            {
                VAR1,   32
            }

            BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                VAR2,   32
            }

            Local1 = VAR1 /* \M423.VAR1 */
            VAR2 = Arg4
            VAR1 = Local1
            Release (M421)
        }
    }

    Mutex (M253, 0x00)
    Method (M249, 4, Serialized)
    {
        If ((((Arg0 + Arg1) + Arg2) == Zero))
        {
            Local0 = Zero
        }
        Else
        {
            Local0 = M252 (Arg0, Arg1, Arg2)
        }

        If ((Local0 == Ones))
        {
            Return (Ones)
        }

        Local0 = (M083 + (Local0 << 0x14))
        Local0 += 0xB8
        Acquire (M253, 0xFFFF)
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local1 = VAR1 /* \M249.VAR1 */
        Local2 = VAR2 /* \M249.VAR2 */
        VAR1 = Local1
        Release (M253)
        Return (Local2)
    }

    Method (M250, 5, Serialized)
    {
        If ((((Arg0 + Arg1) + Arg2) == Zero))
        {
            Local0 = Zero
        }
        Else
        {
            Local0 = M252 (Arg0, Arg1, Arg2)
        }

        If ((Local0 != Ones))
        {
            Local0 = (M083 + (Local0 << 0x14))
            Local0 += 0xB8
            Acquire (M253, 0xFFFF)
            OperationRegion (VARM, SystemMemory, Local0, 0x08)
            Field (VARM, DWordAcc, NoLock, Preserve)
            {
                VAR1,   32
            }

            BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                VAR2,   32
            }

            Local1 = VAR1 /* \M250.VAR1 */
            VAR2 = Arg4
            VAR1 = Local1
            Release (M253)
        }
    }

    Method (M021, 4, Serialized)
    {
        Local0 = (M083 + (Arg0 << 0x14))
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Local0 += 0xE0
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local0 = VAR2 /* \M021.VAR2 */
        Return (Local0)
    }

    Method (M022, 5, Serialized)
    {
        Local0 = (M083 + (Arg0 << 0x14))
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Local0 += 0xE0
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        VAR2 = Arg4
    }

    Method (M023, 3, Serialized)
    {
        M018 (Arg0, Arg1, Arg2, 0x70, 0x03, One, Zero)
        M018 (Arg0, Arg1, Arg2, 0x70, 0x13, One, One)
    }

    Method (M024, 3, Serialized)
    {
        Local0 = M019 (Arg0, Arg1, Arg2, 0x0128)
        If ((Local0 & 0x00020000))
        {
            Return (Ones)
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (M026, 3, Serialized)
    {
        Local0 = M021 (Arg0, Arg1, Arg2, 0xA2)
        Local0 &= 0xFFFFFFF8
        Local1 = (Local0 >> 0x04)
        Local1 &= 0x07
        Local0 |= Local1
        Local0 |= 0x0100
        M022 (Arg0, Arg1, Arg2, 0xA2, Local0)
    }

    Method (M025, 4, Serialized)
    {
        M429 (Arg0, Arg1, Arg2, 0x68, 0x05, One, Zero)
        If (Arg3)
        {
            M429 (Arg0, Arg1, Arg2, 0x88, Zero, 0x04, Arg3)
        }

        M429 (Arg0, Arg1, Arg2, 0x68, 0x05, One, One)
        Local1 = 0x64
        Local2 = One
        While ((Local1 && Local2))
        {
            Sleep (One)
            Local3 = M430 (Arg0, Arg1, Arg2)
            If ((Local3 & 0x0800))
            {
                Local1--
            }
            Else
            {
                Local2 = Zero
            }
        }

        M429 (Arg0, Arg1, Arg2, 0x68, 0x05, One, Zero)
        If (!Local2)
        {
            Return (Ones)
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (M430, 3, Serialized)
    {
        Local0 = M017 (Arg0, Arg1, Arg2, 0x68, 0x10, 0x10)
        Return (Local0)
    }

    Method (M412, 1, Serialized)
    {
        Local0 = (Arg0 >> 0x07)
        Local0 &= One
        Local1 = (Arg0 >> 0x04)
        Local1 &= 0x07
        Local1 += \_GPE.M411
        Local2 = (Arg0 & 0x0F)
        Local3 = M409 (Local0, Local1, Zero)
        Local3 >>= Local2
        Local3 &= One
        Return (Local3)
    }

    Method (M413, 2, Serialized)
    {
        Local0 = (Arg0 >> 0x07)
        Local0 &= One
        Local1 = (Arg0 >> 0x04)
        Local1 &= 0x07
        Local1 += \_GPE.M411
        Local2 = (Arg0 & 0x0F)
        Local3 = M409 (Local0, Local1, One)
        Local3 &= (Ones ^ (One << Local2))
        Local3 |= (Arg1 << Local2)
        M410 (Local0, Local1, One, Local3)
    }

    Method (M440, 1, Serialized)
    {
        M012 (0xFEC30000, Zero, Arg0, One, Zero)
        Local0 = M011 (0xFEC30000, 0x04, Arg0, One)
        Return (Local0)
    }

    Method (M441, 2, Serialized)
    {
        M012 (0xFEC30000, Zero, Arg0, One, One)
        M012 (0xFEC30000, 0x08, Arg0, One, Arg1)
    }

    Method (M009, 1, Serialized)
    {
        Local0 = (Arg0 >> 0x08)
        Local0 &= 0x07
        Local1 = (Arg0 & 0xFF)
        Local2 = Zero
        If (((Local0 == Zero) || (Local0 == One)))
        {
            If ((M085 >= 0x02))
            {
                Local2 = (Arg0 & 0xF800)
                If ((Local2 == Zero))
                {
                    If ((Local0 == Zero))
                    {
                        Local2 = M011 ((M084 + 0x1502), (Local1 * 0x04), Zero, 
                            One)
                    }
                    Else
                    {
                        Local2 = M011 ((M084 + 0x1202), (Local1 * 0x04), Zero, 
                            One)
                    }
                }
                Else
                {
                    Local3 = (Arg0 >> 0x0F)
                    Local3 &= One
                    Local4 = (Arg0 >> 0x0D)
                    Local4 &= 0x03
                    Local5 = (Arg0 >> 0x0B)
                    Local5 &= 0x03
                    If ((Local0 == Zero))
                    {
                        Local6 = (0x02D02500 + (Local1 * 0x04))
                    }
                    Else
                    {
                        Local6 = (0x02D02200 + (Local1 * 0x04))
                    }

                    Local2 = M249 (Local3, Local4, Local5, Local6)
                    Local2 >>= 0x10
                    Local2 &= One
                }
            }
            Else
            {
                Local2 = M011 ((M084 + 0x0100), Local1, 0x07, One)
            }
        }
        ElseIf (((Local0 == 0x04) || (Local0 == 0x05)))
        {
            Local3 = (Arg0 >> 0x0F)
            Local3 &= One
            Local4 = (Arg0 >> 0x0D)
            Local4 &= 0x03
            Local5 = (Arg0 >> 0x0B)
            Local5 &= 0x03
            If ((Local0 == 0x04))
            {
                Local6 = (0x02D02500 + (Local1 * 0x04))
            }
            Else
            {
                Local6 = (0x02D02200 + (Local1 * 0x04))
            }

            Local2 = M422 (Local3, Local4, Local5, Local6)
            Local2 >>= 0x10
            Local2 &= One
        }
        ElseIf ((Local0 == 0x02))
        {
            If ((M049 (M128, 0x77) == One))
            {
                (Local1 + 0x08) = M038 /* External reference */
                Local2
            }
            Else
            {
                Local2 = 0xFF
            }
        }
        ElseIf ((Local0 == 0x03))
        {
            Local2 = M440 (Local1)
        }
        ElseIf ((Local0 == 0x06))
        {
            Local2 = M412 (Local1)
        }

        Return (Local2)
    }

    Method (M010, 2, Serialized)
    {
        Local0 = (Arg0 >> 0x08)
        Local0 &= 0x07
        Local1 = (Arg0 & 0xFF)
        If (((Local0 == Zero) || (Local0 == One)))
        {
            If ((M085 >= 0x02))
            {
                Local2 = (Arg0 & 0xF800)
                If ((Local2 == Zero))
                {
                    If ((Local0 == Zero))
                    {
                        M012 ((M084 + 0x1502), (Local1 * 0x04), 0x06, 0x02, (
                            0x02 | Arg1))
                    }
                    Else
                    {
                        M012 ((M084 + 0x1202), (Local1 * 0x04), 0x06, 0x02, (
                            0x02 | Arg1))
                    }
                }
                Else
                {
                    Local3 = (Arg0 >> 0x0F)
                    Local3 &= One
                    Local4 = (Arg0 >> 0x0D)
                    Local4 &= 0x03
                    Local5 = (Arg0 >> 0x0B)
                    Local5 &= 0x03
                    If ((Local0 == Zero))
                    {
                        Local6 = (0x02D02500 + (Local1 * 0x04))
                    }
                    Else
                    {
                        Local6 = (0x02D02200 + (Local1 * 0x04))
                    }

                    Local2 = M249 (Local3, Local4, Local5, Local6)
                    Local2 &= 0xCF3FFFFF
                    Local2 |= 0x00800000
                    Local2 |= (Arg1 << 0x16)
                    M250 (Local3, Local4, Local5, Local6, Local2)
                }
            }
            Else
            {
                M012 ((M084 + 0x0100), Local1, 0x06, One, Arg1)
                M012 ((M084 + 0x0100), Local1, 0x05, One, Zero)
            }
        }
        ElseIf (((Local0 == 0x04) || (Local0 == 0x05)))
        {
            Local3 = (Arg0 >> 0x0F)
            Local3 &= One
            Local4 = (Arg0 >> 0x0D)
            Local4 &= 0x03
            Local5 = (Arg0 >> 0x0B)
            Local5 &= 0x03
            If ((Local0 == 0x04))
            {
                Local6 = (0x02D02500 + (Local1 * 0x04))
            }
            Else
            {
                Local6 = (0x02D02200 + (Local1 * 0x04))
            }

            Local2 = M422 (Local3, Local4, Local5, Local6)
            Local2 &= 0xCF3FFFFF
            Local2 |= 0x00800000
            Local2 |= (Arg1 << 0x16)
            M423 (Local3, Local4, Local5, Local6, Local2)
        }
        ElseIf ((Local0 == 0x02))
        {
            If ((M049 (M128, 0x77) == One))
            {
                M039 ((Local1 + 0x08), Arg1)
            }
        }
        ElseIf ((Local0 == 0x03))
        {
            M441 (Local1, Arg1)
        }
        ElseIf ((Local0 == 0x06))
        {
            M413 (Local1, Arg1)
        }
    }

    Name (M037, Buffer (0x17)
    {
        /* 0000 */  0x7E, 0x81, 0x03, 0x16, 0x04, 0x15, 0x0E, 0x05,  // ~.......
        /* 0008 */  0x02, 0x20, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // . ......
        /* 0010 */  0x17, 0x19, 0x0B, 0x01, 0x0F, 0x0D, 0x09         // .......
    })
    Name (M227, Buffer (0x18)
    {
        /* 0000 */  0x41, 0x42, 0x03, 0x16, 0x04, 0x15, 0x0E, 0x05,  // AB......
        /* 0008 */  0x02, 0x44, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // .D......
        /* 0010 */  0x17, 0x45, 0x0B, 0x01, 0x0F, 0x0D, 0x09, 0x08   // .E......
    })
    Name (M329, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x4C, 0x10, 0x11, 0x12, 0x18,  // .V.L....
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Name (M32A, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x4C, 0x10, 0x11, 0x1D, 0x1E,  // .V.L....
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Name (M330, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // .V......
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Name (M32B, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x0B, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x1D, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // ........
        /* 0010 */  0x17, 0x20, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // . T.(...
    })
    Method (M029, 1, Serialized)
    {
        If ((M085 == 0x02))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M037 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 < 0x02))
        {
            Return (M011 ((M084 + 0x0160), Arg0, 0x07, One))
        }
        ElseIf (((M085 > 0x02) && (M085 < 0x08)))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M227 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 == 0x08))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M329 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf (((M085 == 0x09) || (M085 == 0x0A)))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M330 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf (((M085 == 0x0B) || (M085 == 0x0C)))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M32A [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf (((M085 == 0x0D) || (M085 == 0x0E)))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M330 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 == 0x0F))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M32B [Arg0]) * 
                0x04), Zero, One))
        }
    }

    Method (M031, 1, Serialized)
    {
        Local0 = M011 ((M084 + 0x0240), Arg0, Zero, 0x05)
        Return (M011 ((M084 + 0x0208), (Local0 / 0x08), (Local0 & 
            0x07), One))
    }

    Method (M032, 2, Serialized)
    {
        Local0 = M011 ((M084 + 0x0240), Arg0, Zero, 0x05)
        M012 ((M084 + 0x0208), (Local0 / 0x08), (Local0 & 0x07
            ), One, Arg1)
    }

    Method (M013, 4, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, 0x04)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VARR,   32
        }

        Local1 = VARR /* \M013.VARR */
        Local5 = 0x7FFFFFFF
        Local5 |= 0x80000000
        Local2 = ((Local1 >> Arg2) & (Local5 >> (0x20 - Arg3)
            ))
        Return (Local2)
    }

    Method (M014, 5, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, 0x04)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VARR,   32
        }

        Local1 = VARR /* \M014.VARR */
        Local5 = 0x7FFFFFFF
        Local5 |= 0x80000000
        Local2 = (Arg2 + Arg3)
        Local2 = (0x20 - Local2)
        Local2 = (((Local5 << Local2) & Local5) >> Local2)
        Local2 = ((Local2 >> Arg2) << Arg2)
        Local3 = (Arg4 << Arg2)
        Local4 = ((Local1 & (Local5 ^ Local2)) | Local3)
        VARR = Local4
    }

    Method (M011, 4, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, One)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            VARR,   8
        }

        Local1 = VARR /* \M011.VARR */
        Local2 = ((Local1 >> Arg2) & (0xFF >> (0x08 - Arg3)
            ))
        Return (Local2)
    }

    Method (M012, 5, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, One)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            VARR,   8
        }

        Local1 = VARR /* \M012.VARR */
        Local2 = (Arg2 + Arg3)
        Local2 = (0x08 - Local2)
        Local2 = (((0xFF << Local2) & 0xFF) >> Local2)
        Local2 = ((Local2 >> Arg2) << Arg2)
        Local3 = (Arg4 << Arg2)
        Local4 = ((Local1 & (0xFF ^ Local2)) | Local3)
        VARR = Local4
    }

    Method (M017, 6, Serialized)
    {
        Local0 = M083 /* \M083 */
        Local1 = (M083 >> 0x14)
        Local2 = (Local1 & 0x0F00)
        Local2 += 0x0100
        If (((Local1 + Arg0) >= Local2))
        {
            Local3 = 0x7FFFFFFF
            Local3 |= 0x80000000
            Local4 = ((Local3 >> Arg4) & (Local3 >> (0x20 - Arg5)
                ))
            Return (Local4)
        }

        Local0 += (Arg0 << 0x14)
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Return (M013 (Local0, Arg3, Arg4, Arg5))
    }

    Method (M018, 7, Serialized)
    {
        Local0 = M083 /* \M083 */
        Local1 = (M083 >> 0x14)
        Local2 = (Local1 & 0x0F00)
        Local2 += 0x0100
        If (((Local1 + Arg0) < Local2))
        {
            Local0 += (Arg0 << 0x14)
            Local0 += (Arg1 << 0x0F)
            Local0 += (Arg2 << 0x0C)
            Local3 = 0x7FFFFFFF
            Local3 |= 0x80000000
            If ((M013 (Local0, Zero, Zero, 0x20) != Local3))
            {
                M014 (Local0, Arg3, Arg4, Arg5, Arg6)
            }
        }
    }

    Method (M428, 6, Serialized)
    {
        Local0 = M083 /* \M083 */
        Local1 = (M083 >> 0x14)
        Local2 = (Local1 & 0x0F00)
        Local2 += 0x0100
        If (((Local1 + Arg0) >= Local2))
        {
            Local3 = 0xFF
            Local4 = ((Local3 >> Arg4) & (Local3 >> (0x08 - Arg5)
                ))
            Return (Local4)
        }

        Local0 += (Arg0 << 0x14)
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Return (M011 (Local0, Arg3, Arg4, Arg5))
    }

    Method (M429, 7, Serialized)
    {
        Local0 = M083 /* \M083 */
        Local1 = (M083 >> 0x14)
        Local2 = (Local1 & 0x0F00)
        Local2 += 0x0100
        If (((Local1 + Arg0) < Local2))
        {
            Local0 += (Arg0 << 0x14)
            Local0 += (Arg1 << 0x0F)
            Local0 += (Arg2 << 0x0C)
            Local3 = 0x7FFFFFFF
            Local3 |= 0x80000000
            If ((M013 (Local0, Zero, Zero, 0x20) != Local3))
            {
                M012 (Local0, Arg3, Arg4, Arg5, Arg6)
            }
        }
    }

    Method (M265, 3, Serialized)
    {
        Local0 = Zero
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
        While ((Local1 != Zero))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                Local3 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x0C), 0x12, One)
                Local4 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x10), 0x08, One)
                If (((Local3 == One) && (Local4 == One)))
                {
                    Local0 = One
                }

                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
        }

        Return (Local0)
    }

    Method (M033, 3, Serialized)
    {
        Local0 = Zero
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
        While ((Local1 != Zero))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                Local0 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x0C), 0x0A, 0x02)
                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
        }

        Return (Local0)
    }

    Method (M027, 3, Serialized)
    {
        Local0 = Zero
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
        While ((Local1 != Zero))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                Local0 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x10), Zero, 0x02)
                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
        }

        Return (Local0)
    }

    Method (M028, 4, Serialized)
    {
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
        While (((Local1 != Zero) && (Local1 < 0xFF)))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                M018 (Arg0, Arg1, Arg2, (Local1 + 0x10), Zero, 0x02, Arg3)
                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
        }
    }

    Method (M034, 1, Serialized)
    {
        Return (M011 ((M084 + 0x0700), Arg0, Zero, 0x08))
    }

    Method (M015, 1, Serialized)
    {
        Return (M011 ((M084 + 0x0400), Arg0, Zero, 0x08))
    }

    Method (M016, 2, Serialized)
    {
        M012 ((M084 + 0x0400), Arg0, Zero, 0x08, Arg1)
    }

    Method (M035, 1, Serialized)
    {
        Return (M011 (M084, Arg0, Zero, 0x08))
    }

    Method (M036, 2, Serialized)
    {
        M012 (M084, Arg0, Zero, 0x08, Arg1)
    }

    Method (M001, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 == 0x15))
        {
            Local0 = One
        }

        Return (Local0)
    }

    Method (M003, 3, Serialized)
    {
        Local0 = (Arg0 << 0x05)
        Local1 = (Local0 + Arg1)
        Local2 = (Local1 << 0x18)
        Local3 = (Local2 + Arg2)
        Return (Local3)
    }

    Method (M004, 1, Serialized)
    {
        OperationRegion (VARM, SystemIO, 0x0CD8, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg0, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local0 = VAR2 /* \M004.VAR2 */
        Return (Local0)
    }

    Method (M005, 2, Serialized)
    {
        OperationRegion (VARM, SystemIO, 0x0CD8, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg0, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        VAR2 = Arg1
    }

    Method (M006, 3, Serialized)
    {
        Local0 = (M004 (Arg0) & Arg1)
        Local1 = (Local0 | Arg2)
        M005 (Arg0, Local1)
    }

    Method (M002, 2, Serialized)
    {
        If ((Arg0 == Zero))
        {
            If ((Arg1 == Zero))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFEFFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFEFE, Zero)
            }

            If ((Arg1 == One))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFDFFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFDFD, Zero)
            }

            If ((Arg1 == 0x02))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFBFFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFBFB, Zero)
            }

            If ((Arg1 == 0x03))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFF7FFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFF7F7, Zero)
            }

            Sleep (One)
        }

        If ((Arg0 == One))
        {
            If ((Arg1 == Zero))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFEFFF, 0x1000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFEFE, 0x0101)
            }

            If ((Arg1 == One))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFDFFF, 0x2000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFDFD, 0x0202)
            }

            If ((Arg1 == 0x02))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFBFFF, 0x4000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFBFB, 0x0404)
            }

            If ((Arg1 == 0x03))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFF7FFF, 0x8000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFF7F7, 0x0808)
            }

            Sleep (One)
        }

        If ((Arg0 == Zero))
        {
            M008 (Arg1)
            Local0 = M004 (M003 (0x03, Arg1, 0xA5))
            Local0 &= 0xFF
            Local1 = 0x01F4
            While (((Local1 > Zero) && (Local0 != 0x10)))
            {
                Local0 = M004 (M003 (0x03, Arg1, 0xA5))
                Local0 &= 0xFF
                Local1--
                Sleep (One)
            }

            If ((Local0 != 0x10))
            {
                M007 (Arg1)
            }
        }
    }

    Method (M008, 1, Serialized)
    {
        Local0 = M019 (Zero, 0x15, Arg0, 0x88)
        Local1 = ((Local0 & 0xFFFFFFF0) | 0x02)
        M020 (Zero, 0x15, Arg0, 0x88, Local1)
        M006 (M003 (0x03, Arg0, 0xA4), 0xFFFFFFFE, One)
        M006 (M003 (0x03, Arg0, 0xA2), 0xFFFFDFFF, 0x2000)
        M006 (M003 (0x03, Arg0, 0xC0), 0xFFFF7FFF, 0x8000)
        M006 (M003 (0x03, Arg0, 0xA4), 0xDFFFFFFF, 0x20000000)
        Sleep (One)
    }

    Method (M007, 1, Serialized)
    {
        Local0 = M019 (Zero, 0x15, Arg0, 0x88)
        Local1 = ((Local0 & 0xFFFFFFF0) | One)
        M020 (Zero, 0x15, Arg0, 0x88, Local1)
        M006 (M003 (0x03, Arg0, 0xA4), 0xFFFFFFFE, Zero)
        M006 (M003 (0x03, Arg0, 0xA2), 0xFFFFDFFF, 0x2000)
        Sleep (One)
    }

    Method (M111, 2, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = M110 /* \M110 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        Local3 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                        If ((Local3 != Zero))
                        {
                            Local4 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                            If ((Local4 == Zero))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                M010 (Local5, Local6)
                            }

                            If ((Local4 == One))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                While ((M009 (Local5) != Local6)) {}
                            }

                            If ((Local4 == 0x02))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                                Sleep (((Local5 + 0x03E7) / 0x03E8))
                            }
                        }
                    }

                    Local1 += 0x08
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                }
            }
        }
    }

    Method (M228, 1, Serialized)
    {
        If ((Arg0 > 0x03))
        {
            Local0 = M110 /* \M110 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local3 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                    If ((Local3 == Arg0))
                    {
                        Local4 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                        If ((Local4 == Zero))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            M010 (Local5, Local6)
                        }

                        If ((Local4 == One))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            While ((M009 (Local5) != Local6)) {}
                        }

                        If ((Local4 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Sleep (((Local5 + 0x03E7) / 0x03E8))
                        }
                    }

                    Local1 += 0x08
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                }
            }
        }
    }

    Method (M219, 2, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = M221 /* \M221 */
            If ((Local0 & 0x02))
            {
                Local0 = M220 /* \M220 */
                If (Local0)
                {
                    Local0 += 0x10
                    Local1 = Zero
                    Local2 = One
                    While ((Local2 != 0xFF))
                    {
                        Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                        Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                        Local4 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                        Local5 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                        Local7 = M013 ((Local0 + Local1), 0x08, Zero, 0x20)
                        If ((Local4 == Arg0))
                        {
                            If (((Local2 < 0x0A) && (Local5 & 0x80)))
                            {
                                If ((Arg1 == Zero))
                                {
                                    If ((M085 >= 0x04))
                                    {
                                        If (((Local7 >> 0x10) > Zero))
                                        {
                                            If (((Local7 >> 0x1C) == 0x02))
                                            {
                                                Local6 = M249 (((Local7 >> 0x18) & 0x0F), ((
                                                    Local7 >> 0x14) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D02300)
                                            }
                                            Else
                                            {
                                                Local6 = M249 (((Local7 >> 0x18) & 0x0F), ((
                                                    Local7 >> 0x14) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00)
                                            }

                                            Local6 &= (Ones ^ (0x03 << (Local2 << One)))
                                            If (((Local7 >> 0x1C) == 0x02))
                                            {
                                                M250 (((Local7 >> 0x18) & 0x0F), ((Local7 >> 0x14
                                                    ) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D02300, Local6)
                                            }
                                            Else
                                            {
                                                M250 (((Local7 >> 0x18) & 0x0F), ((Local7 >> 0x14
                                                    ) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00, Local6)
                                            }
                                        }
                                        ElseIf ((Local2 >= 0x04))
                                        {
                                            M012 ((M084 + 0x0E00), One, ((Local2 - 0x04) * 0x02
                                                ), 0x02, Zero)
                                        }
                                        Else
                                        {
                                            M012 ((M084 + 0x0E00), Zero, (Local2 * 0x02), 0x02, Zero)
                                        }
                                    }
                                    Else
                                    {
                                        M012 ((M084 + 0x0E00), (Local2 / 0x02), ((Local2 & 
                                            One) * 0x04), 0x04, Zero)
                                    }
                                }
                                ElseIf ((Local5 & 0x04))
                                {
                                    If ((Arg1 == One))
                                    {
                                        If ((M085 >= 0x04))
                                        {
                                            If (((Local7 >> 0x10) > Zero))
                                            {
                                                If (((Local7 >> 0x1C) == 0x02))
                                                {
                                                    Local6 = M249 (((Local7 >> 0x18) & 0x0F), ((
                                                        Local7 >> 0x14) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D02300)
                                                }
                                                Else
                                                {
                                                    Local6 = M249 (((Local7 >> 0x18) & 0x0F), ((
                                                        Local7 >> 0x14) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00)
                                                }

                                                Local6 &= (Ones ^ (0x03 << (Local2 << One)))
                                                Local6 |= (0x03 << (Local2 << One))
                                                If (((Local7 >> 0x1C) == 0x02))
                                                {
                                                    M250 (((Local7 >> 0x18) & 0x0F), ((Local7 >> 0x14
                                                        ) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D02300, Local6)
                                                }
                                                Else
                                                {
                                                    M250 (((Local7 >> 0x18) & 0x0F), ((Local7 >> 0x14
                                                        ) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00, Local6)
                                                }
                                            }
                                            ElseIf ((Local2 >= 0x04))
                                            {
                                                M012 ((M084 + 0x0E00), One, ((Local2 - 0x04) * 0x02
                                                    ), 0x02, 0x03)
                                            }
                                            Else
                                            {
                                                M012 ((M084 + 0x0E00), Zero, (Local2 * 0x02), 0x02, 0x03)
                                            }
                                        }
                                        Else
                                        {
                                            M012 ((M084 + 0x0E00), (Local2 / 0x02), ((Local2 & 
                                                One) * 0x04), 0x04, 0x0F)
                                        }
                                    }

                                    If ((Arg1 == 0x02))
                                    {
                                        Local6 = M017 (Zero, M013 ((Local0 + Local1), 0x05, Zero, 0x08), 
                                            M013 ((Local0 + Local1), 0x06, Zero, 0x08), 0x19, Zero, 0x08)
                                        If ((M265 (Local6, Zero, Zero) == One))
                                        {
                                            If ((M085 >= 0x04))
                                            {
                                                If (((Local7 >> 0x10) > Zero))
                                                {
                                                    If (((Local7 >> 0x1C) == 0x02))
                                                    {
                                                        Local6 = M249 (((Local7 >> 0x18) & 0x0F), ((
                                                            Local7 >> 0x14) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D02300)
                                                    }
                                                    Else
                                                    {
                                                        Local6 = M249 (((Local7 >> 0x18) & 0x0F), ((
                                                            Local7 >> 0x14) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00)
                                                    }

                                                    Local6 &= (Ones ^ (0x03 << (Local2 << One)))
                                                    Local6 |= (Local3 << (Local2 << One))
                                                    If (((Local7 >> 0x1C) == 0x02))
                                                    {
                                                        M250 (((Local7 >> 0x18) & 0x0F), ((Local7 >> 0x14
                                                            ) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D02300, Local6)
                                                    }
                                                    Else
                                                    {
                                                        M250 (((Local7 >> 0x18) & 0x0F), ((Local7 >> 0x14
                                                            ) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00, Local6)
                                                    }
                                                }
                                                ElseIf ((Local2 >= 0x04))
                                                {
                                                    M012 ((M084 + 0x0E00), One, ((Local2 - 0x04) * 0x02
                                                        ), 0x02, Local3)
                                                }
                                                Else
                                                {
                                                    M012 ((M084 + 0x0E00), Zero, (Local2 * 0x02), 0x02, Local3)
                                                }
                                            }
                                            Else
                                            {
                                                M012 ((M084 + 0x0E00), (Local2 / 0x02), ((Local2 & 
                                                    One) * 0x04), 0x04, Local3)
                                            }
                                        }
                                    }
                                }
                                ElseIf ((M085 >= 0x04))
                                {
                                    M012 ((M084 + 0x0E00), Zero, (Local2 * 0x02), 0x02, 0x03)
                                }
                                Else
                                {
                                    M012 ((M084 + 0x0E00), (Local2 / 0x02), ((Local2 & 
                                        One) * 0x04), 0x04, Local3)
                                }

                                Local2 = 0xFF
                            }
                        }

                        Local1 += 0x0C
                    }
                }
            }
        }
    }

    Method (M112, 2, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = M109 /* \M109 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = One
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                    Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        If ((Local3 < 0x02))
                        {
                            Local4 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                            If ((Local4 == Zero))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                M010 (Local5, Local6)
                            }

                            If ((Local4 == One))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                M010 (Local5, Local6)
                                Local7 = M009 (Local5)
                                Local4 = 0x03F2
                                While (((Local4 > Zero) && (Local7 != Local6)))
                                {
                                    Local4 = (Local4 - One)
                                    Stall (0x63)
                                    Local7 = M009 (Local5)
                                }
                            }
                        }

                        If ((Local3 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Sleep (((Local5 + 0x03E7) / 0x03E8))
                        }
                    }

                    Local1 += 0x08
                }
            }
        }
    }

    Method (M275, 2, Serialized)
    {
        Local7 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = M109 /* \M109 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = One
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                    Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        If ((Local3 < 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            If ((M009 (Local5) == Local6))
                            {
                                Local7 = One
                            }
                        }
                    }

                    Local1 += 0x08
                }
            }
        }

        Return (Local7)
    }

    Method (M113, 1, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = M108 /* \M108 */
            Local7 = One
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = One
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                    If ((Local2 == Arg0))
                    {
                        Local2 = 0xFF
                        Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                        If ((Local3 == Zero))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                        }

                        If ((Local3 == One))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x05, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                            Local7 &= (M009 (Local5) == Local6)
                        }

                        If ((Local3 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x05, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                            Local7 &= (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x08, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x0A, Zero, 0x08)
                            Local7 &= (M009 (Local5) == Local6)
                        }

                        If ((Local3 == 0x03))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x05, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                            Local7 |= (M009 (Local5) == Local6)
                        }

                        If ((Local3 == 0x04))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x05, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                            Local7 |= (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x08, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x0A, Zero, 0x08)
                            Local7 |= (M009 (Local5) == Local6)
                        }
                    }
                    Else
                    {
                        Local1 += 0x0B
                    }
                }
            }
        }
        Else
        {
            Local7 = Zero
        }

        If (Local7)
        {
            Local7 = One
        }

        Return (Local7)
    }

    Method (M114, 4, Serialized)
    {
        Local7 = Zero
        If (!M001 (Arg0, Arg1))
        {
            Name (M115, Buffer (0x05) {})
            CreateWordField (M115, Zero, M116)
            CreateField (M115, 0x10, 0x03, M117)
            CreateField (M115, 0x13, 0x05, M118)
            CreateByteField (M115, 0x03, M119)
            CreateByteField (M115, 0x04, M120)
            M116 = 0x05
            M119 = Zero
            M118 = Arg0
            M117 = Arg1
            If ((Arg2 == Zero))
            {
                If ((Arg3 != One))
                {
                    M120 = Zero
                    \_SB.ALIB (0x06)
                    M115
                }
            }
            Else
            {
                If ((Arg3 != One))
                {
                    M120 = One
                    \_SB.ALIB (0x06)
                    M115
                }

                Local0 = M017 (Zero, Arg0, Arg1, 0x19, Zero, 0x08)
                If (((Local0 != Zero) && (Local0 != 0xFF)))
                {
                    Local1 = M019 (Local0, Zero, Zero, Zero)
                    Local2 = 0x7FFFFFFF
                    Local2 |= 0x80000000
                    If (((Local1 != Zero) && (Local1 != Local2)))
                    {
                        Local7 = One
                    }
                }
            }
        }
        ElseIf ((Arg2 == Zero))
        {
            M002 (One, Arg1)
        }
        Else
        {
            M002 (Zero, Arg1)
            Local0 = M017 (Zero, Arg0, Arg1, 0x19, Zero, 0x08)
            If (((Local0 != Zero) && (Local0 != 0xFF)))
            {
                Local1 = M019 (Local0, Zero, Zero, Zero)
                Local2 = 0x7FFFFFFF
                Local2 |= 0x80000000
                If (((Local1 != Zero) && (Local1 != Local2)))
                {
                    Local7 = One
                }
            }
        }

        Return (Local7)
    }

    Method (M252, 3, Serialized)
    {
        If ((M085 >= 0x08))
        {
            Local0 = M251 /* \M251 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = Zero
                While ((Local2 != 0xFF))
                {
                    Local2 = M011 ((Local0 + Local1), Zero, Zero, 0x08)
                    Local3 = M011 ((Local0 + Local1), One, Zero, 0x08)
                    Local4 = M011 ((Local0 + Local1), 0x02, Zero, 0x08)
                    Local5 = M011 ((Local0 + Local1), 0x03, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        If ((Local4 == Arg2))
                        {
                            Return (Local5)
                        }
                    }

                    Local1 += 0x04
                }
            }
        }

        Return (Ones)
    }

    Name (M046, Zero)
    Name (M047, Ones)
    Method (M045, 0, Serialized)
    {
        Local0 = Zero
        If ((M047 == Ones))
        {
            M047 = Zero
            M046 = Zero
            If (CondRefOf (\_OSI))
            {
                If (\_OSI ("Windows 2012"))
                {
                    M046 = One
                }

                If (\_OSI ("Windows 2013"))
                {
                    M046 = One
                }

                If (\_OSI ("Windows 2015"))
                {
                    M046 = One
                }

                If (\_OSI ("Windows 2016"))
                {
                    M046 = One
                }

                If (\_OSI ("Windows 2017"))
                {
                    M046 = One
                }
            }
        }

        If ((M046 == One))
        {
            Local0 = One
        }

        Return (Local0)
    }

    Method (M049, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = M011 (Arg0, Arg1, Zero, 0x08)
        }

        Return (Local0)
    }

    Method (M04A, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = M011 (Arg0, Arg1, Zero, 0x08)
            Local1 = M011 (Arg0, (Arg1 + One), Zero, 0x08)
            Local0 |= (Local1 << 0x08)
        }

        Return (Local0)
    }

    Method (M04B, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = M011 (Arg0, Arg1, Zero, 0x08)
            Local1 = M011 (Arg0, (Arg1 + One), Zero, 0x08)
            Local2 = M011 (Arg0, (Arg1 + 0x02), Zero, 0x08)
            Local3 = M011 (Arg0, (Arg1 + 0x03), Zero, 0x08)
            Local0 |= (Local1 << 0x08)
            Local0 |= (Local2 << 0x10)
            Local0 |= (Local3 << 0x18)
        }

        Return (Local0)
    }

    Mutex (M230, 0x00)
    Method (M232, 3, Serialized)
    {
        Local0 = Arg0
        Local1 = Arg1
        Local2 = Arg2
        Acquire (M230, 0xFFFF)
        Local0 = Arg0
        OperationRegion (VARM, SystemIO, M231, 0x02)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            VAR1,   8, 
            VAR2,   8
        }

        VAR2 = Local1
        VAR1 = Local0
        If ((Local2 > Zero))
        {
            Sleep (Local2)
        }

        Release (M230)
    }

    Method (M043, 3, Serialized)
    {
        If (CondRefOf (MOEM))
        {
            Return (MOEM) /* External reference */
            Arg0
            Arg1
            Arg2
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (MLIB, 2, Serialized)
    {
        Switch (ToInteger (Arg0))
        {
            Case (Zero)
            {
                Local0 = DerefOf (Arg1 [0x02])
                Switch (ToInteger (Local0))
                {
                    Case (0x03)
                    {
                        M228 (0x04)
                        M228 (0x05)
                    }
                    Case (0x04)
                    {
                        M228 (0x04)
                        M228 (0x06)
                    }
                    Case (0x05)
                    {
                        M228 (0x04)
                        M228 (0x07)
                    }

                }
            }

        }
    }

    Method (M248, 1, Serialized)
    {
        If ((M085 == 0x08))
        {
            If ((Arg0 == Zero))
            {
                Return (M017 (Zero, 0x07, One, 0x19, Zero, 0x08))
            }
            Else
            {
                Return (M017 (Zero, 0x08, One, 0x19, Zero, 0x08))
            }
        }
        ElseIf ((M085 >= 0x0B))
        {
            If ((M085 >= 0x0D))
            {
                Return (M017 (Zero, 0x08, (Arg0 + One), 0x19, Zero, 0x08))
            }
            ElseIf ((Arg0 == Zero))
            {
                Return (M017 (Zero, 0x07, One, 0x19, Zero, 0x08))
            }
            Else
            {
                Return (M017 (Zero, 0x08, Arg0, 0x19, Zero, 0x08))
            }
        }
        ElseIf ((M085 >= 0x09))
        {
            If ((Arg0 == Zero))
            {
                Return (M017 (Zero, 0x08, One, 0x19, Zero, 0x08))
            }
            Else
            {
                Return (M017 (Zero, 0x08, 0x02, 0x19, Zero, 0x08))
            }
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (M401, 2, NotSerialized)
    {
        Local0 = (Arg0 & 0x1F)
        Local0 = ((Local0 << 0x03) | (Arg1 & 0x07))
        Local1 = Zero
        If (((M085 >= 0x09) && (M085 <= 0x0A)))
        {
            Local2 = 0x07
        }
        Else
        {
            Local2 = 0x0A
        }

        Local3 = 0x14301000
        Local4 = M249 (Zero, Zero, Zero, ((Local1 * 0x04) + Local3
            ))
        While (((Local1 < Local2) && (Local4 != Local0)))
        {
            Local1++
            Local4 = M249 (Zero, Zero, Zero, ((Local1 * 0x04) + Local3
                ))
        }

        If ((Local1 <= Local2))
        {
            Return (Local1)
        }
        Else
        {
            Return (0xFF)
        }
    }

    Method (M402, 2, NotSerialized)
    {
        Local4 = M401 (Arg0, Arg1)
        If ((Local4 != 0xFF))
        {
            If (((M085 >= 0x08) && (M085 <= 0x0B)))
            {
                Local0 = M249 (Zero, Zero, Zero, 0x11180188)
                Local0 &= 0xFFFFDFFF
                M250 (Zero, Zero, Zero, 0x11180188, (Local0 | 0x2000))
            }

            Local1 = (M019 (Zero, Zero, Zero, 0x84) & 0xFF00FCFF)
            Local2 = ((Arg0 << 0x13) | (Arg1 << 0x10))
            Local1 |= Local2
            M020 (Zero, Zero, Zero, 0x84, (Local1 | 0x0100))
            M020 (Zero, Zero, Zero, 0x84, (Local1 | 0x0300))
            If ((M085 >= 0x0C))
            {
                Local3 = M019 (Zero, Zero, Zero, 0x84)
                Local5 = 0x4EEA
                While (((Local5 > Zero) && ((Local3 & 0x0400) != 0x0400)))
                {
                    Local5 = (Local5 - One)
                    Stall (0x63)
                    Local3 = M019 (Zero, Zero, Zero, 0x84)
                }
            }

            If (((M085 == 0x0D) && (Local4 >= 0x03)))
            {
                Local2 = (0x11240294 + ((Local4 - 0x03) << 0x0C))
            }
            Else
            {
                Local2 = (0x11140294 + (Local4 << 0x0C))
            }

            Local3 = M249 (Zero, Zero, Zero, Local2)
            Local5 = 0x4EEA
            While (((Local5 > Zero) && ((Local3 & 0x3F) != 0x1F)))
            {
                Local5 = (Local5 - One)
                Stall (0x63)
                Local3 = M249 (Zero, Zero, Zero, Local2)
            }

            M020 (Zero, Zero, Zero, 0x84, (Local1 | 0x0100))
            If (((M085 >= 0x08) && (M085 <= 0x0B)))
            {
                M250 (Zero, Zero, Zero, 0x11180188, Local0)
            }
        }
    }

    Method (M403, 3, NotSerialized)
    {
        Local4 = M401 (Arg0, Arg1)
        If ((Local4 != 0xFF))
        {
            If (((M085 == 0x0D) && (Local4 >= 0x03)))
            {
                Local2 = (0x11240280 + ((Local4 - 0x03) << 0x0C))
            }
            Else
            {
                Local2 = (0x11140280 + (Local4 << 0x0C))
            }

            Local0 = M249 (Zero, Zero, Zero, Local2)
            Local0 &= 0xFFBFFFFF
            Local1 = Arg2
            Local0 |= (Local1 << 0x16)
            M250 (Zero, Zero, Zero, Local2, Local0)
        }
    }

    Name (M404, Buffer (0x07)
    {
         0x00, 0x02, 0x06, 0x08, 0x04, 0x0A, 0x0C         // .......
    })
    Method (M405, 5, Serialized)
    {
        If ((M085 >= 0x04))
        {
            Local1 = DerefOf (M404 [Arg4])
            If ((((Arg0 > Zero) || (Arg1 > Zero)) || ((Arg2 > 
                Zero) || (Arg3 > Zero))))
            {
                If ((Arg3 == 0x02))
                {
                    Local0 = M249 (Arg0, Arg1, Arg2, 0x02D02300)
                }
                Else
                {
                    Local0 = M249 (Arg0, Arg1, Arg2, 0x02D01E00)
                }

                Local0 <<= (Local1 * 0x02)
                Local0 &= 0x03
            }
            ElseIf ((Local1 >= 0x04))
            {
                Local0 = M011 ((M084 + 0x0E00), One, ((Local1 - 0x04
                    ) * 0x02), 0x02)
            }
            Else
            {
                Local0 = M011 ((M084 + 0x0E00), Zero, (Local1 * 0x02), 
                    0x02)
            }
        }
        Else
        {
            Local0 = M011 ((M084 + 0x0E00), (Arg4 / 0x02), (
                (Arg4 & One) * 0x04), 0x04)
        }

        Return (Local0)
    }

    Method (M406, 6, Serialized)
    {
        If ((M085 >= 0x04))
        {
            Local1 = DerefOf (M404 [Arg4])
            If ((((Arg0 > Zero) || (Arg1 > Zero)) || ((Arg2 > 
                Zero) || (Arg3 > Zero))))
            {
                If ((Arg3 == 0x02))
                {
                    Local0 = M249 (Arg0, Arg1, Arg2, 0x02D02300)
                }
                Else
                {
                    Local0 = M249 (Arg0, Arg1, Arg2, 0x02D01E00)
                }

                Local0 &= (Ones ^ (0x03 << (Local1 << One)))
                Local0 |= (Arg5 << (Local1 << One))
                If ((Arg3 == 0x02))
                {
                    M250 (Arg0, Arg1, Arg2, 0x02D02300, Local0)
                }
                Else
                {
                    M250 (Arg0, Arg1, Arg2, 0x02D01E00, Local0)
                }
            }
            ElseIf ((Local1 >= 0x04))
            {
                M012 ((M084 + 0x0E00), One, ((Local1 - 0x04) * 0x02
                    ), 0x02, Arg5)
            }
            Else
            {
                M012 ((M084 + 0x0E00), Zero, (Local1 * 0x02), 0x02, Arg5)
            }
        }
        Else
        {
            M012 ((M084 + 0x0E00), (Arg4 / 0x02), ((Arg4 & 
                One) * 0x04), 0x04, Arg5)
        }
    }

    Mutex (M408, 0x00)
    Method (M409, 3, Serialized)
    {
        Acquire (M408, 0xFFFF)
        Local0 = (M414 + (Arg0 << 0x05))
        OperationRegion (VARM, SystemIO, Local0, 0x09)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            SMB0,   8, 
            SMB1,   8, 
            SMB2,   8, 
            SMB3,   8, 
            SMB4,   8, 
            SMB5,   8, 
            SMB6,   8, 
            SMB7,   8, 
            SMB8,   8
        }

        Local5 = M011 ((M084 + 0x0300), 0x02, Zero, 0x08)
        M012 ((M084 + 0x0300), 0x02, Zero, 0x08, (Local5 | One))
        If ((Arg0 == One))
        {
            Local6 = SMB2 /* \M409.SMB2 */
            SMB2 = (Local6 & 0x7F)
        }

        Local1 = Zero
        Local2 = 0x64
        While (((Local2 > Zero) && ((Local1 & 0x10) != 0x10)))
        {
            SMB8 |= 0x10
            Local2 = (Local2 - One)
            Stall (0x05)
            Local1 = SMB8 /* \M409.SMB8 */
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            Local1 = One
            Local2 = 0x64
            While (((Local2 > Zero) && ((Local1 & One) != Zero)))
            {
                SMB0 = 0x1F
                Local2 = (Local2 - One)
                Stall (0x05)
                Local1 = SMB0 /* \M409.SMB0 */
            }

            If ((Local2 == Zero))
            {
                SMB2 = 0x02
                Local3 = (Local3 - One)
            }
            Else
            {
                Local3 = Zero
            }
        }

        If (((Local2 == Zero) && (Local3 == Zero)))
        {
            If ((Arg0 == One))
            {
                SMB2 = Local6
            }

            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            Release (M408)
            Return (Zero)
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            Local1 = One
            Local2 = 0x64
            While (((Local2 > Zero) && ((Local1 & One) != Zero)))
            {
                SMB1 = 0x3F
                Local2 = (Local2 - One)
                Stall (0x05)
                Local1 = SMB1 /* \M409.SMB1 */
            }

            If ((Local2 == Zero))
            {
                SMB1 = 0x02
                Local3 = (Local3 - One)
            }
            Else
            {
                Local3 = Zero
            }
        }

        If (((Local2 == Zero) && (Local3 == Zero)))
        {
            If ((Arg0 == One))
            {
                SMB2 = Local6
            }

            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            Release (M408)
            Return (Zero)
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            SMB0 = 0x1F
            SMB4 = ((Arg1 << One) | One)
            SMB3 = Arg2
            SMB2 = 0x08
            Local1 = SMB2 /* \M409.SMB2 */
            SMB2 = (0x08 | 0x40)
            Local1 = One
            Local4 = 0x03E8
            While (((Local4 > Zero) && ((Local1 & 0x0E) == Zero)))
            {
                Local2 = 0x03E8
                While (((Local2 > Zero) && ((Local1 & One) != Zero)))
                {
                    Local2 = (Local2 - One)
                    Stall (0x05)
                    Local1 = SMB0 /* \M409.SMB0 */
                }

                If ((Local2 == Zero))
                {
                    SMB2 = 0x02
                    If ((Arg0 == One))
                    {
                        SMB2 = Local6
                    }

                    M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
                    Release (M408)
                    Return (Zero)
                }

                Local4 = (Local4 - One)
                Stall (0x05)
                Local1 = SMB0 /* \M409.SMB0 */
            }

            If (((Local1 & 0x04) != Zero))
            {
                Local3 = Zero
                Local4 = Zero
            }
            ElseIf (((Local1 & 0x08) != Zero))
            {
                SMB0 = 0x08
                Local3 = (Local3 - One)
                Local4 = Zero
            }
            Else
            {
                Local3 = Zero
                Local4 = SMB5 /* \M409.SMB5 */
            }
        }

        SMB0 = 0x1F
        SMB8 |= 0x20
        If ((Arg0 == One))
        {
            SMB2 = Local6
        }

        M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
        Release (M408)
        Return (Local4)
    }

    Method (M410, 4, Serialized)
    {
        Acquire (M408, 0xFFFF)
        Local0 = (M414 + (Arg0 << 0x05))
        OperationRegion (VARM, SystemIO, Local0, 0x09)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            SMB0,   8, 
            SMB1,   8, 
            SMB2,   8, 
            SMB3,   8, 
            SMB4,   8, 
            SMB5,   8, 
            SMB6,   8, 
            SMB7,   8, 
            SMB8,   8
        }

        Local5 = M011 ((M084 + 0x0300), 0x02, Zero, 0x08)
        M012 ((M084 + 0x0300), 0x02, Zero, 0x08, (Local5 | One))
        If ((Arg0 == One))
        {
            Local6 = SMB2 /* \M410.SMB2 */
            SMB2 = (Local6 & 0x7F)
        }

        Local1 = Zero
        Local2 = 0x64
        While (((Local2 > Zero) && ((Local1 & 0x10) != 0x10)))
        {
            SMB8 |= 0x10
            Local2 = (Local2 - One)
            Stall (0x05)
            Local1 = SMB8 /* \M410.SMB8 */
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            Local1 = One
            Local2 = 0x64
            While (((Local2 > Zero) && ((Local1 & One) != Zero)))
            {
                SMB0 = 0x1F
                Local2 = (Local2 - One)
                Stall (0x05)
                Local1 = SMB0 /* \M410.SMB0 */
            }

            If ((Local2 == Zero))
            {
                SMB2 = 0x02
                Local3 = (Local3 - One)
            }
            Else
            {
                Local3 = Zero
            }
        }

        If (((Local2 == Zero) && (Local3 == Zero)))
        {
            If ((Arg0 == One))
            {
                SMB2 = Local6
            }

            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            Release (M408)
            Return (Zero)
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            Local1 = One
            Local2 = 0x64
            While (((Local2 > Zero) && ((Local1 & One) != Zero)))
            {
                SMB1 = 0x3F
                Local2 = (Local2 - One)
                Stall (0x05)
                Local1 = SMB1 /* \M410.SMB1 */
            }

            If ((Local2 == Zero))
            {
                SMB1 = 0x02
                Local3 = (Local3 - One)
            }
            Else
            {
                Local3 = Zero
            }
        }

        If (((Local2 == Zero) && (Local3 == Zero)))
        {
            If ((Arg0 == One))
            {
                SMB2 = Local6
            }

            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            Release (M408)
            Return (Zero)
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            SMB0 = 0x1F
            SMB4 = (Arg1 << One)
            SMB3 = Arg2
            SMB2 = 0x08
            Local1 = SMB2 /* \M410.SMB2 */
            SMB5 = Arg3
            SMB2 = (0x08 | 0x40)
            Local1 = One
            Local4 = 0x03E8
            While (((Local4 > Zero) && ((Local1 & 0x0E) == Zero)))
            {
                Local2 = 0x03E8
                While (((Local2 > Zero) && ((Local1 & One) != Zero)))
                {
                    Local2 = (Local2 - One)
                    Stall (0x05)
                    Local1 = SMB0 /* \M410.SMB0 */
                }

                If ((Local2 == Zero))
                {
                    SMB2 = 0x02
                    If ((Arg0 == One))
                    {
                        SMB2 = Local6
                    }

                    M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
                    Release (M408)
                    Return (Zero)
                }

                Local4 = (Local4 - One)
                Stall (0x05)
                Local1 = SMB0 /* \M410.SMB0 */
            }

            If (((Local1 & 0x04) != Zero))
            {
                Local3 = Zero
                Local4 = Zero
            }
            ElseIf (((Local1 & 0x08) != Zero))
            {
                SMB0 = 0x08
                Local3 = (Local3 - One)
                Local4 = Zero
            }
            Else
            {
                Local3 = Zero
                Local4 = Zero
            }
        }

        SMB0 = 0x1F
        SMB8 |= 0x20
        If ((Arg0 == One))
        {
            SMB2 = Local6
        }

        M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
        Release (M408)
        Return (Local4)
    }

    Method (MPTS, 1, NotSerialized)
    {
        Local0 = M049 (M128, 0x67)
        If (((Local0 & 0x03) == 0x03))
        {
            If ((M085 >= 0x08))
            {
                If (CondRefOf (\_SB.PCXX.GPXX.SAXX.TPTS))
                {
                    \_SB.PCXX.GPXX.SAXX.TPTS (Arg0)
                }

                If (CondRefOf (\_SB.PCI0.PTBR.PTST.TPTS))
                {
                    \_SB.PCI0.PTBR.PTST.TPTS (Arg0)
                }
            }
            ElseIf (CondRefOf (\_SB.PCXX.SAXX.TPTS))
            {
                \_SB.PCXX.SAXX.TPTS (Arg0)
            }
        }

        If ((M226 != Zero))
        {
            If (CondRefOf (\_SB.M263))
            {
                \_SB.M263 (Arg0)
            }
        }

        If ((M331 != Zero))
        {
            Local0 = M049 (M331, 0x10)
            Local1 = M049 (M331, 0x1D)
            If (((Local0 != Zero) && (Local1 != Zero)))
            {
                If (CondRefOf (\_SB.IPTS))
                {
                    \_SB.IPTS (Arg0)
                }
            }
        }
    }

    Method (MWAK, 1, NotSerialized)
    {
        Local0 = M049 (M128, 0x67)
        If (((Local0 & 0x03) == 0x03))
        {
            If ((M085 >= 0x08))
            {
                If (CondRefOf (\_SB.PCXX.GPXX.SAXX.TWAK))
                {
                    \_SB.PCXX.GPXX.SAXX.TWAK (Arg0)
                }

                If (CondRefOf (\_SB.PCI0.PTBR.PTST.TWAK))
                {
                    \_SB.PCI0.PTBR.PTST.TWAK (Arg0)
                }
            }
            ElseIf (CondRefOf (\_SB.PCXX.SAXX.TWAK))
            {
                \_SB.PCXX.SAXX.TWAK (Arg0)
            }
        }

        If ((M226 != Zero))
        {
            If (CondRefOf (\_SB.M264))
            {
                \_SB.M264 (Arg0)
            }
        }

        If ((M280 != Zero))
        {
            If (CondRefOf (\_SB.M284))
            {
                \_SB.M284 (Arg0)
            }
        }

        If ((M331 != Zero))
        {
            Local0 = M049 (M331, 0x10)
            Local1 = M049 (M331, 0x1D)
            If (((Local0 != Zero) && (Local1 != Zero)))
            {
                If (CondRefOf (\_SB.IWAK))
                {
                    \_SB.IWAK (Arg0)
                }
            }
        }
    }

    Scope (\_SB.GPIO)
    {
        Method (XINI, 0, NotSerialized)
        {
            If ((\_GPE.M420 != 0xFF))
            {
                Local0 = (\_GPE.M415 & One)
                Local1 = (\_GPE.M416 & 0x07)
                Local1 += \_GPE.M411
                \_GPE.M419 = M409 (Local0, Local1, Zero)
            }
        }
    }

    Scope (\_GPE)
    {
        Name (M411, 0x20)
        Name (M415, One)
        Name (M416, 0x04)
        Name (M417, 0x40)
        Name (M418, 0x40)
        Name (M419, 0xFF)
        Name (M420, 0xFF)
        Method (XL0A, 0, NotSerialized)
        {
            Local0 = (\_GPE.M415 & One)
            Local1 = (\_GPE.M416 & 0x07)
            Local1 += \_GPE.M411
            Local2 = \_GPE.M419
            Local3 = M409 (Local0, Local1, Zero)
            \_GPE.M419 = Local3
            Local3 ^= Local2
            Local3 |= \_GPE.M418
            Local3 &= \_GPE.M417
            If (((Local3 & One) == One))
            {
                If (CondRefOf (\_GPE.SP00))
                {
                    \_GPE.SP00 ()
                }
            }

            If (((Local3 & 0x02) == 0x02))
            {
                If (CondRefOf (\_GPE.SP01))
                {
                    \_GPE.SP01 ()
                }
            }

            If (((Local3 & 0x04) == 0x04))
            {
                If (CondRefOf (\_GPE.SP02))
                {
                    \_GPE.SP02 ()
                }
            }

            If (((Local3 & 0x08) == 0x08))
            {
                If (CondRefOf (\_GPE.SP03))
                {
                    \_GPE.SP03 ()
                }
            }

            If (((Local3 & 0x10) == 0x10))
            {
                If (CondRefOf (\_GPE.SP04))
                {
                    \_GPE.SP04 ()
                }
            }

            If (((Local3 & 0x20) == 0x20))
            {
                If (CondRefOf (\_GPE.SP05))
                {
                    \_GPE.SP05 ()
                }
            }

            If (((Local3 & 0x40) == 0x40))
            {
                If (CondRefOf (\_GPE.SP06))
                {
                    \_GPE.SP06 ()
                }
            }

            If (((Local3 & 0x80) == 0x80))
            {
                If (CondRefOf (\_GPE.SP07))
                {
                    \_GPE.SP07 ()
                }
            }
        }

        Method (XL0B, 0, NotSerialized)
        {
            Local0 = M049 (M128, 0x91)
            If (((Local0 & 0xC0) == 0xC0))
            {
                Local3 = Buffer (0x08) {}
                CreateWordField (Local3, Zero, M254)
                CreateByteField (Local3, 0x02, M255)
                CreateDWordField (Local3, 0x03, M256)
                M256 = Zero
                M254 = 0x07
                M255 = 0x30
                Local3 = \_SB.ALIB (0x0C)
                Local4
                If (CondRefOf (\_SB.APAD))
                {
                    \_SB.APAD.M446 [One] = Local4
                    Notify (\_SB.APAD, 0x80) // Status Change
                }
            }
        }
    }

    Scope (\_SB)
    {
        Device (APAD)
        {
            Name (_HID, "ACPI000C" /* Processor Aggregator Device */)  // _HID: Hardware ID
            Name (M446, Package (0x02)
            {
                One, 
                Zero
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (\_OSI ("Processor Aggregator Device"))
                {
                    Local0 = M049 (M128, 0x91)
                    If (((Local0 & 0x80) == 0x80))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PUR, 0, NotSerialized)  // _PUR: Processor Utilization Request
            {
                Return (M446) /* \_SB_.APAD.M446 */
            }
        }
    }
}



SSDT17
------
DefinitionBlock ("", "SSDT", 2, "LENOVO", "CB-01   ", 0x00000001)
{
    /*
     * iASL Warning: There were 2 external control methods found during
     * disassembly, but only 0 were resolved (2 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_SB_.CSMI, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (_SB_.PCI0.LPC0.EC0_, DeviceObj)
    External (_SB_.PCI0.LPC0.EC0_.ADPT, UnknownObj)
    External (_SB_.PCI0.LPC0.EC0_.BAM0, UnknownObj)
    External (_SB_.PCI0.LPC0.EC0_.BCG0, IntObj)
    External (_SB_.PCI0.LPC0.EC0_.BDC0, IntObj)
    External (_SB_.PCI0.LPC0.EC0_.BFC0, IntObj)
    External (_SB_.PCI0.LPC0.EC0_.BOL0, UnknownObj)
    External (_SB_.PCI0.LPC0.EC0_.BPC0, IntObj)
    External (_SB_.PCI0.LPC0.EC0_.BRC0, IntObj)
    External (_SB_.PCI0.LPC0.EC0_.BTY0, UnknownObj)
    External (_SB_.PCI0.LPC0.EC0_.ESMC, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (BFDT, IntObj)
    External (CAVR, UnknownObj)
    External (ESMB, IntObj)
    External (ESMS, IntObj)
    External (IDFD, IntObj)
    External (SFNO, UnknownObj)
    External (STDT, IntObj)

    Scope (\_SB.PCI0.LPC0.EC0)
    {
        Name (CFWV, "00.00.20")
        Name (SMIV, 0x20)
        Name (CTSL, Package (0x0B)
        {
            0x13, 
            0x14, 
            0x15, 
            0x16, 
            0x17, 
            0x20, 
            0x21, 
            0x22, 
            0x24, 
            0x25, 
            0x28
        })
        Mutex (CFMX, 0x00)
        Method (CFUN, 4, Serialized)
        {
            Name (FUNN, Zero)
            CreateWordField (Arg2, Zero, INDA)
            STDT = Zero
            BFDT = Zero
            FUNN = DerefOf (Arg0 [Zero])
            Switch (FUNN)
            {
                Case (0x10)
                {
                    STDT = One
                    Switch (ToInteger (Arg1))
                    {
                        Case (One)
                        {
                            CAVR = INDA /* \_SB_.PCI0.LPC0.EC0_.CFUN.INDA */
                        }
                        Case (0x02)
                        {
                            BFDT = CFWV /* \_SB_.PCI0.LPC0.EC0_.CFWV */
                        }
                        Case (0x03)
                        {
                            BFDT = SMIV /* \_SB_.PCI0.LPC0.EC0_.SMIV */
                        }
                        Case (0x04)
                        {
                            BFDT = 0xFF
                        }
                        Default
                        {
                            STDT = 0x8000
                        }

                    }
                }
                Case (0x12)
                {
                    Local1 = Buffer (0x80) {}
                    Local2 = IDFD /* External reference */
                    STDT = One
                    Switch (ToInteger (Arg1))
                    {
                        Case (One)
                        {
                            Local1 [Zero] = DerefOf (Local2 [0x08])
                            Local1 [One] = DerefOf (Local2 [0x09])
                            Local1 [0x02] = DerefOf (Local2 [0x0A])
                            Local1 [0x03] = DerefOf (Local2 [0x0B])
                            BFDT = Local1
                        }
                        Case (0x02)
                        {
                            Local1 [Zero] = DerefOf (Local2 [0x38])
                            Local1 [One] = DerefOf (Local2 [0x3A])
                            Local1 [0x02] = DerefOf (Local2 [0x3B])
                            Local1 [0x03] = DerefOf (Local2 [0x3D])
                            BFDT = Local1
                        }
                        Case (0x03)
                        {
                            BFDT = Local2
                        }
                        Default
                        {
                            STDT = 0x8000
                        }

                    }
                }
                Case (0x15)
                {
                    CreateWordField (Arg1, Zero, SFUN)
                    Switch (SFUN)
                    {
                        Case (0x9001)
                        {
                        }
                        Case (0x9002)
                        {
                            STDT = Zero
                            BFDT = Zero
                            BFDT = Zero
                            STDT = One
                        }
                        Case (0x9000)
                        {
                            \_SB.PCI0.LPC0.EC0.ESMC (Arg2)
                            If ((ESMS != 0xFF))
                            {
                                Local1 = Buffer (0x80) {}
                                Local1 [Zero] = 0x80
                                Local1 [One] = ESMS /* External reference */
                                Local3 = ESMB /* External reference */
                                Local1 [0x02] = DerefOf (Local3 [Zero])
                                Local1 [0x03] = DerefOf (Local3 [One])
                                Local1 [0x04] = DerefOf (Local3 [0x02])
                                Local1 [0x05] = DerefOf (Local3 [0x03])
                                Local1 [0x06] = DerefOf (Local3 [0x04])
                                Local1 [0x07] = DerefOf (Local3 [0x05])
                                Local1 [0x08] = DerefOf (Local3 [0x06])
                                Local1 [0x09] = DerefOf (Local3 [0x07])
                                Local1 [0x0A] = DerefOf (Local3 [0x08])
                                Local1 [0x0B] = DerefOf (Local3 [0x09])
                                Local1 [0x0C] = DerefOf (Local3 [0x0A])
                                Local1 [0x0D] = DerefOf (Local3 [0x0B])
                                Local1 [0x0E] = DerefOf (Local3 [0x0C])
                                Local1 [0x0F] = DerefOf (Local3 [0x0D])
                                Local1 [0x10] = DerefOf (Local3 [0x0E])
                                Local1 [0x11] = DerefOf (Local3 [0x0F])
                                Local1 [0x12] = DerefOf (Local3 [0x10])
                                Local1 [0x13] = DerefOf (Local3 [0x11])
                                Local1 [0x14] = DerefOf (Local3 [0x12])
                                Local1 [0x15] = DerefOf (Local3 [0x13])
                                Local1 [0x16] = DerefOf (Local3 [0x14])
                                Local1 [0x17] = DerefOf (Local3 [0x15])
                                Local1 [0x18] = DerefOf (Local3 [0x16])
                                Local1 [0x19] = DerefOf (Local3 [0x17])
                                Local1 [0x1A] = DerefOf (Local3 [0x18])
                                Local1 [0x1B] = DerefOf (Local3 [0x19])
                                Local1 [0x1C] = DerefOf (Local3 [0x1A])
                                Local1 [0x1D] = DerefOf (Local3 [0x1B])
                                Local1 [0x1E] = DerefOf (Local3 [0x1C])
                                Local1 [0x1F] = DerefOf (Local3 [0x1D])
                                Local1 [0x20] = DerefOf (Local3 [0x1E])
                                Local1 [0x21] = DerefOf (Local3 [0x1F])
                                BFDT = Local1
                                STDT = One
                            }
                            Else
                            {
                                STDT = 0x8000
                            }
                        }
                        Default
                        {
                            SFNO = Arg1
                            BFDT = Arg2
                            \_SB.CSMI (0xCE, Arg0)
                        }

                    }
                }
                Case (0x26)
                {
                    STDT = One
                    Switch (ToInteger (Arg1))
                    {
                        Case (One)
                        {
                            BFDT |= (\_SB.PCI0.LPC0.EC0.ADPT << 0x08) /* External reference */
                        }
                        Case (0x02)
                        {
                            If ((INDA == One))
                            {
                                BFDT |= (\_SB.PCI0.LPC0.EC0.BAM0 << One) /* External reference */
                            }
                            ElseIf ((INDA == 0x02)) {}
                        }
                        Case (0x03)
                        {
                            If ((INDA == One))
                            {
                                BFDT = (\_SB.PCI0.LPC0.EC0.BOL0 & One)
                            }
                            Else
                            {
                            }
                        }
                        Case (0x04)
                        {
                            If ((INDA == One))
                            {
                                BFDT = \_SB.PCI0.LPC0.EC0.BDC0 /* External reference */
                            }
                            Else
                            {
                            }
                        }
                        Case (0x05)
                        {
                            If ((INDA == One))
                            {
                                BFDT = \_SB.PCI0.LPC0.EC0.BFC0 /* External reference */
                            }
                            Else
                            {
                            }
                        }
                        Case (0x06)
                        {
                            If ((INDA == One))
                            {
                                BFDT = \_SB.PCI0.LPC0.EC0.BRC0 /* External reference */
                            }
                            Else
                            {
                            }
                        }
                        Case (0x07)
                        {
                            If ((INDA == One))
                            {
                                BFDT = \_SB.PCI0.LPC0.EC0.BCG0 /* External reference */
                            }
                            Else
                            {
                            }
                        }
                        Case (0x08)
                        {
                            If ((INDA == One))
                            {
                                BFDT = \_SB.PCI0.LPC0.EC0.BPC0 /* External reference */
                            }
                            Else
                            {
                            }
                        }
                        Default
                        {
                            STDT = 0x8000
                        }

                    }
                }
                Default
                {
                    If ((Match (CTSL, MEQ, DerefOf (Arg0 [Zero]), MTR, 
                        Zero, Zero) != Ones))
                    {
                        SFNO = Arg1
                        BFDT = Arg2
                        \_SB.CSMI (0xCE, Arg0)
                    }
                    Else
                    {
                        STDT = 0x8000
                    }
                }

            }
        }

        Name (OCSL, Package (0x01)
        {
            0x98
        })
        Method (PFUN, 4, Serialized)
        {
            If ((Match (OCSL, MEQ, DerefOf (Arg0 [Zero]), MTR, 
                Zero, Zero) != Ones))
            {
                SFNO = Arg1
                BFDT = Arg2
                \_SB.CSMI (0xCF, Arg0)
            }
            Else
            {
                STDT = 0x8000
            }
        }

        Method (CMFC, 4, Serialized)
        {
            Name (RTVL, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            If ((ObjectType (Arg0) == One))
            {
                RTVL [Zero] = 0x8000
            }
            ElseIf ((DerefOf (Arg0 [Zero]) < 0xFF))
            {
                Local1 = Buffer (0x82) {}
                CreateWordField (Local1, Zero, RTST)
                CreateField (Local1, 0x10, 0x0400, RTDT)
                If (((ToInteger (Arg0) <= 0xBF) && (ToInteger (Arg0
                    ) >= 0x90)))
                {
                    PFUN (Arg0, Arg1, Arg2, Arg3)
                }
                Else
                {
                    CFUN (Arg0, Arg1, Arg2, Arg3)
                }

                RTST = STDT /* External reference */
                RTDT = BFDT /* External reference */
                Return (Local1)
            }
            Else
            {
                RTVL [Zero] = 0x8000
            }

            Return (RTVL) /* \_SB_.PCI0.LPC0.EC0_.CMFC.RTVL */
        }
    }
}



SSDT18
------
DefinitionBlock ("", "SSDT", 1, "LENOVO", "CB-01   ", 0x00000001)
{
    /*
     * iASL Warning: There were 33 external control methods found during
     * disassembly, but only 0 were resolved (33 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_SB_.ALIB, IntObj)
    External (_SB_.PCI0.GP17.VGA_, DeviceObj)
    External (_SB_.PCI0.GP17.VGA_.AFN0, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GP17.VGA_.AFN1, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.GP17.VGA_.AFN2, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (_SB_.PCI0.GP17.VGA_.AFN3, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (_SB_.PCI0.GP17.VGA_.AFN4, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.GP17.VGA_.AFN5, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GP17.VGA_.AFN6, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GP17.VGA_.AFN7, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.GP17.VGA_.AFN8, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GP17.VGA_.AFNC, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN0, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN1, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN2, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN3, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN4, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN5, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN6, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN7, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN8, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFNC, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN0, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN1, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN2, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN3, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN4, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN5, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN6, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN7, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN8, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GPP0.VGA_.AFNC, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (M049, IntObj)
    External (M087, UnknownObj)
    External (M100, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (M105, IntObj)
    External (M106, IntObj)
    External (M113, IntObj)
    External (M133, UnknownObj)
    External (M232, MethodObj)    // Warning: Unknown method, guessing 3 arguments
    External (M233, IntObj)
    External (M235, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (M378, IntObj)
    External (M379, IntObj)
    External (M380, IntObj)
    External (M381, IntObj)
    External (M382, IntObj)
    External (M383, IntObj)
    External (M384, IntObj)
    External (M385, IntObj)
    External (M386, IntObj)
    External (M387, IntObj)
    External (M388, IntObj)
    External (M389, IntObj)
    External (M390, IntObj)
    External (M391, IntObj)
    External (M392, IntObj)
    External (M444, IntObj)

    Scope (\_SB.PCI0.GP17.VGA)
    {
        Name (M207, Buffer (0xFF) {})
        Name (M208, Buffer (0x03) {})
        Name (M204, One)
        Method (ATCS, 2, Serialized)
        {
            If ((Arg0 == Zero))
            {
                ATC0 ()
            }

            If ((Arg0 == One))
            {
                ATC1 ()
            }

            If ((Arg0 == 0x02))
            {
                ATC2 (Arg1)
            }

            If ((Arg0 == 0x03))
            {
                ATC3 ()
            }

            If ((Arg0 == 0x04))
            {
                ATC4 (Arg1)
            }

            If ((Arg0 == 0x06))
            {
                ATC6 (Arg1)
            }

            If ((Arg0 == 0x07))
            {
                ATC7 (Arg1)
            }

            If ((Arg0 == 0x08))
            {
                ATC8 (DerefOf (Arg1 [0x02]), DerefOf (Arg1 [0x03]), DerefOf (
                    Arg1 [0x04]), DerefOf (Arg1 [0x05]))
            }

            If ((Arg0 == 0x09))
            {
                ATC9 ()
            }

            Return (M207) /* \_SB_.PCI0.GP17.VGA_.M207 */
        }

        Method (ATC0, 0, NotSerialized)
        {
            CreateWordField (M207, Zero, M157)
            CreateWordField (M207, 0x02, M158)
            CreateDWordField (M207, 0x04, M160)
            M157 = 0x08
            M158 = One
            M207 = M100 (M160,  = \_SB.ALIB /* External reference */)
            M207
        }

        Method (ATC1, 0, Serialized)
        {
            CreateWordField (M207, Zero, M157)
            CreateDWordField (M207, 0x02, M161)
            CreateDWordField (M207, 0x06, M162)
            CreateField (M207, 0x30, One, M203)
            M157 = 0x0A
            M161 = One
            0x15 = M100 (M162, M133 = M049 /* External reference */)
            Local0
            If ((Local0 & 0x80))
            {
                M204 = (Local0 & One)
            }
            ElseIf ((Local0 & 0x7F))
            {
                Local0 = M113 /* External reference */
                M204
            }

            M203 = M204 /* \_SB_.PCI0.GP17.VGA_.M204 */
        }

        Method (ATC2, 1, Serialized)
        {
            CreateWordField (M207, Zero, M157)
            CreateByteField (M207, 0x02, M205)
            M157 = 0x03
            M205 = One
            0x02 = \_SB.ALIB /* External reference */
            Arg0
            M207
        }

        Method (ATC3, 0, Serialized)
        {
            CreateWordField (M207, Zero, M157)
            CreateByteField (M207, 0x02, M205)
            CreateWordField (M208, Zero, M197)
            CreateByteField (M208, 0x02, M206)
            M157 = 0x03
            M205 = One
            M197 = 0x03
            M206 = One
            0x03 = \_SB.ALIB /* External reference */
            M208
            M207
        }

        Method (ATC4, 1, Serialized)
        {
            CreateWordField (M207, Zero, M157)
            CreateByteField (M207, 0x02, M209)
            M157 = 0x03
            M209 = One
            0x04 = \_SB.ALIB /* External reference */
            Arg0
            M207
        }

        Method (ATC6, 1, Serialized)
        {
            CreateWordField (M207, Zero, M157)
            CreateDWordField (M207, 0x02, M234)
            M157 = 0x06
            M234 = M233 /* External reference */
        }

        Method (ATC7, 1, Serialized)
        {
            M232 (M235 (Zero, One))
        }

        Method (ATC8, 4, Serialized)
        {
            Local0 = Buffer (0x05) {}
            CreateWordField (Local0, Zero, M157)
            CreateByteField (Local0, 0x02, M425)
            CreateWordField (Local0, 0x03, M426)
            M157 = 0x05
            Local1 = Arg0
            Local2 = Arg1
            M426 = ((Local2 << 0x08) + Local1)
            Local3 = Arg2
            Local4 = Arg3
            If (((Local3 == Zero) && (Local4 == Zero)))
            {
                M425 = One
                \_SB.ALIB
                0xAA
                Local0
            }
            ElseIf (((Local3 == Zero) && (Local4 == One)))
            {
                M425 = Zero
                \_SB.ALIB
                0xAA
                Local0
            }
            ElseIf (((Local3 == 0x03) && (Local4 == One)))
            {
                M425 = 0x03
                \_SB.ALIB
                0xAA
                Local0
            }
        }

        Method (ATC9, 0, Serialized)
        {
            M207 = M444 /* External reference */
        }

        Method (XTRM, 2, Serialized)
        {
            If ((M105 == Zero))
            {
                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Local4 = M105 /* External reference */
            If ((Local4 > 0x00010000))
            {
                Local4 = 0x00010000
            }

            Local5 = Arg0
            Local6 = Arg1
            If ((Local6 > 0x1000))
            {
                Local6 = 0x1000
            }

            If ((Local5 >= Local4))
            {
                Return (Buffer (Local6)
                {
                     0x00                                             // .
                })
            }

            If ((((Local5 & 0x0FFF) + Local6) > 0x1000))
            {
                Local6 = (0x1000 - (Local5 & 0x0FFF))
            }

            Name (M202, Buffer (0x1000)
            {
                 0x00                                             // .
            })
            If (((Local5 & 0xF000) == Zero))
            {
                M202 = M106 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x1000))
            {
                M202 = M378 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x2000))
            {
                M202 = M379 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x3000))
            {
                M202 = M380 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x4000))
            {
                M202 = M381 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x5000))
            {
                M202 = M382 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x6000))
            {
                M202 = M383 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x7000))
            {
                M202 = M384 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x8000))
            {
                M202 = M385 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x9000))
            {
                M202 = M386 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0xA000))
            {
                M202 = M387 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0xB000))
            {
                M202 = M388 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0xC000))
            {
                M202 = M389 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0xD000))
            {
                M202 = M390 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0xE000))
            {
                M202 = M391 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0xF000))
            {
                M202 = M392 /* External reference */
            }

            If (((Local5 + Local6) <= Local4))
            {
                If ((Local6 == 0x1000))
                {
                    Return (M202) /* \_SB_.PCI0.GP17.VGA_.XTRM.M202 */
                }
            }
            Else
            {
                Local6 = (Local4 - Local5)
            }

            Name (M393, Buffer (Local6)
            {
                 0x00                                             // .
            })
            CreateField (M202, ((Local5 & 0x0FFF) * 0x08), (Local6 * 0x08
                ), M394)
            M393 = M394 /* \_SB_.PCI0.GP17.VGA_.XTRM.M394 */
            Return (M393) /* \_SB_.PCI0.GP17.VGA_.XTRM.M393 */
        }
    }

    Method (AFN0, 0, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN0))
            {
                \_SB.PCI0.GP17.VGA.AFN0 ()
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN0))
            {
                \_SB.PCI0.GPP0.VGA.AFN0 ()
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN0))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN0 ()
            }
        }
    }

    Method (AFN1, 1, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN1))
            {
                \_SB.PCI0.GP17.VGA.AFN1 (Arg0)
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN1))
            {
                \_SB.PCI0.GPP0.VGA.AFN1 (Arg0)
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN1))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN1 (Arg0)
            }
        }
    }

    Method (AFN2, 2, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN2))
            {
                \_SB.PCI0.GP17.VGA.AFN2 (Arg0, Arg1)
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN2))
            {
                \_SB.PCI0.GPP0.VGA.AFN2 (Arg0, Arg1)
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN2))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN2 (Arg0, Arg1)
            }
        }
    }

    Method (AFN3, 2, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN3))
            {
                \_SB.PCI0.GP17.VGA.AFN3 (Arg0, Arg1)
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN3))
            {
                \_SB.PCI0.GPP0.VGA.AFN3 (Arg0, Arg1)
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN3))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN3 (Arg0, Arg1)
            }
        }
    }

    Method (AFN4, 1, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN4))
            {
                \_SB.PCI0.GP17.VGA.AFN4 (Arg0)
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN4))
            {
                \_SB.PCI0.GPP0.VGA.AFN4 (Arg0)
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN4))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN4 (Arg0)
            }
        }
    }

    Method (AFN5, 0, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN5))
            {
                \_SB.PCI0.GP17.VGA.AFN5 ()
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN5))
            {
                \_SB.PCI0.GPP0.VGA.AFN5 ()
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN5))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN5 ()
            }
        }
    }

    Method (AFN6, 0, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN6))
            {
                \_SB.PCI0.GP17.VGA.AFN6 ()
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN6))
            {
                \_SB.PCI0.GPP0.VGA.AFN6 ()
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN6))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN6 ()
            }
        }
    }

    Method (AFN7, 1, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN7))
            {
                \_SB.PCI0.GP17.VGA.AFN7 (Arg0)
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN7))
            {
                \_SB.PCI0.GPP0.VGA.AFN7 (Arg0)
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN7))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN7 (Arg0)
            }
        }
    }

    Method (AFN8, 0, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN8))
            {
                \_SB.PCI0.GP17.VGA.AFN8 ()
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN8))
            {
                \_SB.PCI0.GPP0.VGA.AFN8 ()
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN8))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN8 ()
            }
        }
    }

    Method (AFNC, 2, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFNC))
            {
                \_SB.PCI0.GP17.VGA.AFNC (Arg0, Arg1)
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFNC))
            {
                \_SB.PCI0.GPP0.VGA.AFNC (Arg0, Arg1)
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFNC))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFNC (Arg0, Arg1)
            }
        }
    }
}



SSDT19
------
DefinitionBlock ("", "SSDT", 2, "LENOVO", "CB-01   ", 0x00000001)
{
    External (_SB_.PCI0, DeviceObj)

    Scope (\_SB.PCI0)
    {
        Name (SFRZ, Buffer (0x07)
        {
             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF5         // .......
        })
        Method (GTF, 0, NotSerialized)
        {
            Return (SFRZ) /* \_SB_.PCI0.SFRZ */
        }
    }
}



SSDT2
-----
DefinitionBlock ("", "SSDT", 2, "LENOVO", "CB-01   ", 0x00000001)
{
    Scope (\_SB)
    {
        Name (AGRB, 0xF8000000)
        Name (ADBG, Buffer (0x0100) {})
        Name (ADAT, Buffer (0x0520)
        {
            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0020 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0038 */  0x00, 0x00, 0x01, 0x03, 0x00, 0xFF, 0xFF, 0x01,  // ........
            /* 0040 */  0x00, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0048 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0060 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0068 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0070 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0078 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0080 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0088 */  0x00, 0x00, 0x00, 0x07, 0x07, 0xFF, 0xFF, 0x05,  // ........
            /* 0090 */  0x00, 0x02, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0098 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 00A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0100 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0108 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0110 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0118 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0120 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0128 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0130 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0138 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0140 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0148 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0150 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0158 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0160 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0168 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0170 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0178 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0180 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0188 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0190 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0198 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0200 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0208 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0210 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0218 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0220 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0228 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0230 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0238 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0240 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0248 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0250 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0258 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0260 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0268 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0270 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0278 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0280 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0288 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0290 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0298 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0300 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0308 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0310 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0318 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0320 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0328 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0330 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0338 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0340 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0348 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0350 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0358 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0360 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0368 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0370 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0378 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0380 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0388 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0390 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0398 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0400 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0408 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0410 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0418 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0420 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0428 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0430 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0438 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0440 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0448 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0450 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0458 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0460 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0468 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0470 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0478 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0480 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0488 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0490 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0498 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0500 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0508 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0510 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0518 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
        })
        Method (ALIB, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                CreateWordField (Arg1, 0x00, A013)
                CreateWordField (Arg1, 0x02, A014)
                CreateDWordField (Arg1, 0x04, A015)
                Local0 = Buffer (0x0100) {}
                CreateWordField (Local0, 0x00, A016)
                A016 = A013 /* \_SB_.ALIB.A013 */
                CreateWordField (Local0, 0x02, A017)
                A017 = A014 /* \_SB_.ALIB.A014 */
                CreateDWordField (Local0, 0x04, A018)
                A018 = A015 /* \_SB_.ALIB.A015 */
                A018 &= ~0x0F
                If ((DerefOf (\_SB.ADAT [0x00]) > 0x00))
                {
                    Local1 = 0x0F
                }
                Else
                {
                    Local1 = 0x01
                }

                A018 |= Local1
                Return (Local0)
            }

            If ((Arg0 == 0x01))
            {
                Local0 = DerefOf (Arg1 [0x02])
                Return (A019 (Local0))
            }

            If ((Arg0 == 0x02))
            {
                Local0 = Buffer (0x0100)
                    {
                         0x03, 0x00, 0x00                                 // ...
                    }
                Return (Local0)
            }

            If ((Arg0 == 0x03))
            {
                Local0 = Buffer (0x0100)
                    {
                         0x03, 0x00, 0x00                                 // ...
                    }
                Return (Local0)
            }

            If ((Arg0 == 0x06))
            {
                Local0 = DerefOf (Arg1 [0x04])
                Local1 = DerefOf (Arg1 [0x02])
                Return (A022 (Local0, Local1))
            }

            If ((Arg0 == 0x0A))
            {
                Local0 = DerefOf (Arg1 [0x02])
                Return (A023 (Local0))
            }

            If ((Arg0 == 0x0B))
            {
                Local0 = DerefOf (Arg1 [0x02])
                Local1 = DerefOf (Arg1 [0x03])
                Local2 = DerefOf (Arg1 [0x04])
                Local2 |= (DerefOf (Arg1 [0x05]) << 0x08)
                Local2 |= (DerefOf (Arg1 [0x06]) << 0x10)
                Local2 |= (DerefOf (Arg1 [0x07]) << 0x18)
                Local3 = DerefOf (Arg1 [0x08])
                Local3 |= (DerefOf (Arg1 [0x09]) << 0x08)
                Local3 |= (DerefOf (Arg1 [0x0A]) << 0x10)
                Local3 |= (DerefOf (Arg1 [0x0B]) << 0x18)
                Local4 = DerefOf (Arg1 [0x0C])
                Local4 |= (DerefOf (Arg1 [0x0D]) << 0x08)
                Local4 |= (DerefOf (Arg1 [0x0E]) << 0x10)
                Local4 |= (DerefOf (Arg1 [0x0F]) << 0x18)
                Return (A024 (Local0, Local1, Local2, Local3, Local4))
            }

            If ((Arg0 == 0x0C))
            {
                A025 (Arg1)
            }

            If ((Arg0 == 0x10))
            {
                Local7 = Buffer (0x18) {}
                CreateDWordField (Local7, 0x00, A026)
                CreateDWordField (Local7, 0x04, A027)
                CreateDWordField (Local7, 0x08, A028)
                CreateDWordField (Local7, 0x0C, A029)
                CreateDWordField (Local7, 0x10, A030)
                CreateDWordField (Local7, 0x14, A031)
                A026 = 0x00
                A027 = 0x00
                A028 = 0x00
                A029 = 0x00
                A030 = 0x00
                A031 = 0x00
                A011 (0x26, Local7)
            }

            If ((Arg0 == 0x11))
            {
                Local6 = Buffer (0x18) {}
                CreateDWordField (Local6, 0x00, A005)
                CreateDWordField (Local6, 0x04, A006)
                CreateDWordField (Local6, 0x08, A007)
                CreateDWordField (Local6, 0x0C, A008)
                CreateDWordField (Local6, 0x10, A009)
                CreateDWordField (Local6, 0x14, A010)
                A005 = 0x00
                A006 = 0x00
                A007 = 0x00
                A008 = 0x00
                A009 = 0x00
                A010 = 0x00
                A011 (0x25, Local6)
            }

            If ((Arg0 == 0xAA))
            {
                Local6 = Buffer (0x18) {}
                CreateDWordField (Local6, 0x00, A032)
                CreateDWordField (Local6, 0x04, A033)
                CreateDWordField (Local6, 0x08, A034)
                CreateDWordField (Local6, 0x0C, A035)
                CreateDWordField (Local6, 0x10, A036)
                CreateDWordField (Local6, 0x14, A037)
                A032 = 0x00
                A033 = 0x00
                A034 = 0x00
                A035 = 0x00
                A036 = 0x00
                A037 = 0x00
                A038 (Arg1)
            }

            Return (0x00)
        }

        Method (A022, 2, NotSerialized)
        {
            Local0 = 0x00
            While ((Local0 < 0x0A))
            {
                Local1 = A089 (Local0, Arg1)
                If ((Local1 == 0x01))
                {
                    Local2 = A090 (Local0, Arg0)
                    Break
                }

                Local0++
            }

            Local7 = Buffer (0x0A) {}
            CreateWordField (Local7, 0x00, A016)
            CreateByteField (Local7, 0x02, A040)
            CreateByteField (Local7, 0x03, A091)
            A016 = 0x04
            A040 = 0x00
            If ((Local2 == 0x00))
            {
                A091 = 0x00
            }
            Else
            {
                A091 = 0x01
            }

            Return (Local7)
        }

        Method (A089, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A084 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A084 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A084 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A084 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A084 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A084 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A084 (Arg1))
            }
        }

        Method (A090, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A085 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A085 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A085 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A085 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A085 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A085 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A085 (Arg1))
            }
        }

        Name (AD00, 0x00)
        Name (DK00, 0x00)
        Method (A019, 1, NotSerialized)
        {
            AD00 = Arg0
            A004 ()
        }

        Method (A023, 1, NotSerialized)
        {
            DK00 = Arg0
        }

        Method (A024, 5, NotSerialized)
        {
        }

        Name (AP01, 0x00)
        Name (AP02, 0x00)
        Name (AP03, 0x00)
        Name (AP05, 0x00)
        Name (AP0B, 0xFF)
        Name (AP10, 0x00)
        Method (A039, 1, NotSerialized)
        {
            Local7 = Buffer (0x0100) {}
            CreateWordField (Local7, 0x00, A016)
            A016 = 0x03
            CreateByteField (Local7, 0x02, A040)
            A040 = 0x01
            If ((DerefOf (\_SB.ADAT [0x00]) == 0x01))
            {
                A040 = 0x02
                Return (Local7)
            }

            If ((DerefOf (\_SB.ADAT [0x00]) == 0x00))
            {
                A040 = 0x01
                Return (Local7)
            }

            A041 (Arg0)
            If ((AP05 != 0x01))
            {
                Return (Local7)
            }

            A042 ()
            A040 = 0x02
            Return (Local7)
        }

        Method (A043, 0, NotSerialized)
        {
            If ((DerefOf (\_SB.ADAT [0x00]) <= 0x01))
            {
                Return (0x00)
            }

            If ((AP05 != 0x01))
            {
                Return (0x00)
            }

            A042 ()
        }

        Method (A044, 1, NotSerialized)
        {
            If ((Arg0 == 0x03))
            {
                AP01 = 0x00
            }
        }

        Method (A045, 1, NotSerialized)
        {
            AP10 = 0x01
        }

        Method (A046, 1, NotSerialized)
        {
            AP05 = Arg0
            If ((DerefOf (\_SB.ADAT [0x00]) <= 0x01))
            {
                Return (0x00)
            }

            Local1 = AP0B /* \_SB_.AP0B */
            If ((AP05 == 0x00))
            {
                Local0 = 0x00
                While ((Local0 < 0x0A))
                {
                    A047 (Local0)
                    Local0++
                }

                AP0B = 0x00
            }

            A042 ()
            AP0B = Local1
            Local7 = Buffer (0x0100) {}
            Local7 [0x00] = 0x03
            Local7 [0x01] = 0x00
            Local7 [0x02] = 0x00
            Return (Local7)
        }

        Method (A048, 0, NotSerialized)
        {
            If ((AP0B != 0xFF))
            {
                Return (AP0B) /* \_SB_.AP0B */
            }

            Return (AD00) /* \_SB_.AD00 */
        }

        Method (A041, 1, NotSerialized)
        {
            CreateWordField (Arg0, 0x02, AP06)
            CreateWordField (Arg0, 0x04, AP07)
            CreateWordField (Arg0, 0x06, AP08)
            CreateByteField (Arg0, 0x08, AP09)
            CreateByteField (Arg0, 0x09, AP0A)
            Local0 = 0x00
            While ((Local0 < 0x0A))
            {
                If ((A049 (Local0, AP06) == 0x01))
                {
                    If (((AP07 & AP08) == 0x01))
                    {
                        Local1 = A050 (Local0)
                        A051 (Local0, Local1)
                    }
                    Else
                    {
                        A051 (Local0, AP0A)
                    }

                    Break
                }

                Local0++
            }
        }

        Method (A052, 0, NotSerialized)
        {
            AP02 = 0x01
            Local0 = 0x00
            While ((Local0 < 0x0A))
            {
                Local1 = A053 (Local0)
                If ((Local1 > AP02))
                {
                    AP02 = Local1
                }

                Local0++
            }
        }

        Method (A054, 0, NotSerialized)
        {
            AP03 = 0x00
            Local0 = 0x00
            While ((Local0 < 0x0A))
            {
                Local1 = A055 (Local0)
                If ((Local1 > AP03))
                {
                    AP03 = Local1
                }

                Local0++
            }
        }

        Method (A042, 0, NotSerialized)
        {
            A054 ()
            A052 ()
            If ((AP02 != AP01))
            {
                A012 (AP02, AP01)
            }

            If ((AP02 > AP01))
            {
                AP01 = AP02 /* \_SB_.AP02 */
            }

            Local0 = 0x00
            While ((Local0 < 0x0A))
            {
                Local1 = A053 (Local0)
                Local2 = A056 (Local0)
                If ((Local1 != Local2))
                {
                    A057 (Local0, Local1)
                }
                ElseIf ((AP10 == 0x01))
                {
                    A057 (Local0, Local1)
                }

                Local0++
            }

            If ((AP02 < AP01))
            {
                AP01 = AP02 /* \_SB_.AP02 */
            }
            ElseIf ((AP10 == 0x01))
            {
                AP01 = AP02 /* \_SB_.AP02 */
            }

            AP10 = 0x00
        }

        Method (A057, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A058 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A058 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A058 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A058 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A058 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A058 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A058 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A058 (Arg1))
            }
        }

        Method (A056, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A059 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A059 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A059 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A059 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A059 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A059 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A059 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A059 ())
            }
        }

        Method (A053, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A060 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A060 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A060 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A060 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A060 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A060 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A060 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A060 ())
            }
        }

        Method (A055, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A061 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A061 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A061 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A061 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A061 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A061 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A061 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A061 ())
            }
        }

        Method (A050, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A062 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A062 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A062 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A062 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A062 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A062 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A062 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A062 ())
            }
        }

        Method (A051, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A063 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A063 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A063 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A063 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A063 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A063 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A063 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A063 (Arg1))
            }
        }

        Method (A049, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A064 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A064 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A064 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A064 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A064 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A064 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A064 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A064 (Arg1))
            }
        }

        Method (A047, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A065 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A065 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A065 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A065 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A065 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A065 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A065 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A065 ())
            }
        }

        OperationRegion (A120, SystemMemory, AGRB, 0x1000)
        Field (A120, DWordAcc, Lock, Preserve)
        {
            Offset (0xB8), 
            A121,   32
        }

        BankField (A120, A121, 0x03B10528, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A118,   32
        }

        BankField (A120, A121, 0x03B10564, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A111,   32
        }

        BankField (A120, A121, 0x03B10998, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A112,   32
        }

        BankField (A120, A121, 0x03B1099C, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A113,   32
        }

        BankField (A120, A121, 0x03B109A0, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A114,   32
        }

        BankField (A120, A121, 0x03B109A4, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A115,   32
        }

        BankField (A120, A121, 0x03B109A8, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A116,   32
        }

        BankField (A120, A121, 0x03B109AC, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A117,   32
        }

        BankField (A120, A121, 0x13B00084, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A094,   32
        }

        BankField (A120, A121, 0x11140280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A102,   32
        }

        BankField (A120, A121, 0x11141280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A103,   32
        }

        BankField (A120, A121, 0x11142280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A104,   32
        }

        BankField (A120, A121, 0x11240280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A095,   32
        }

        BankField (A120, A121, 0x11241280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A096,   32
        }

        BankField (A120, A121, 0x11242280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A097,   32
        }

        BankField (A120, A121, 0x11243280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A098,   32
        }

        BankField (A120, A121, 0x11244280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A099,   32
        }

        BankField (A120, A121, 0x11245280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A100,   32
        }

        BankField (A120, A121, 0x11246280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A101,   32
        }

        Method (A092, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A073 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A073 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A073 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A073 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A073 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A073 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A073 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A073 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR0.ABR8.A073 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR0.ABR9.A073 (Arg1))
            }
        }

        Method (A093, 2, NotSerialized)
        {
            If ((Arg1 == 0x01))
            {
                If ((Arg0 == 0x00))
                {
                    Local0 = 0x00190300
                }

                If ((Arg0 == 0x01))
                {
                    Local0 = 0x001A0300
                }

                If ((Arg0 == 0x02))
                {
                    Local0 = 0x001B0300
                }

                If ((Arg0 == 0x03))
                {
                    Local0 = 0x001C0300
                }

                If ((Arg0 == 0x04))
                {
                    Local0 = 0x001D0300
                }

                If ((Arg0 == 0x05))
                {
                    Local0 = 0x001E0300
                }

                If ((Arg0 == 0x06))
                {
                    Local0 = 0x001F0300
                }

                If ((Arg0 == 0x06))
                {
                    Local0 = 0x00090300
                }

                If ((Arg0 == 0x06))
                {
                    Local0 = 0x000A0300
                }

                If ((Arg0 == 0x06))
                {
                    Local0 = 0x000B0300
                }

                Local1 = A094 /* \_SB_.A094 */
                Local1 &= 0xFF00FCFF
                A094 = (Local0 | Local1)
                Local1 = A094 /* \_SB_.A094 */
                A094 = (0xFFFFFDFF & Local1)
            }
            ElseIf ((Arg1 == 0x00))
            {
                If ((Arg0 == 0x00))
                {
                    Local1 = A095 /* \_SB_.A095 */
                    A095 = (0x00400000 | Local1)
                    Local1 = A095 /* \_SB_.A095 */
                    A095 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x01))
                {
                    Local1 = A096 /* \_SB_.A096 */
                    A096 = (0x00400000 | Local1)
                    Local1 = A096 /* \_SB_.A096 */
                    A096 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x02))
                {
                    Local1 = A097 /* \_SB_.A097 */
                    A097 = (0x00400000 | Local1)
                    Local1 = A097 /* \_SB_.A097 */
                    A097 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x03))
                {
                    Local1 = A098 /* \_SB_.A098 */
                    A098 = (0x00400000 | Local1)
                    Local1 = A098 /* \_SB_.A098 */
                    A098 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x04))
                {
                    Local1 = A099 /* \_SB_.A099 */
                    A099 = (0x00400000 | Local1)
                    Local1 = A099 /* \_SB_.A099 */
                    A099 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x05))
                {
                    Local1 = A100 /* \_SB_.A100 */
                    A100 = (0x00400000 | Local1)
                    Local1 = A100 /* \_SB_.A100 */
                    A100 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x06))
                {
                    Local1 = A101 /* \_SB_.A101 */
                    A101 = (0x00400000 | Local1)
                    Local1 = A101 /* \_SB_.A101 */
                    A101 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x07))
                {
                    Local1 = A102 /* \_SB_.A102 */
                    A102 = (0x00400000 | Local1)
                    Local1 = A102 /* \_SB_.A102 */
                    A102 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x08))
                {
                    Local1 = A103 /* \_SB_.A103 */
                    A103 = (0x00400000 | Local1)
                    Local1 = A103 /* \_SB_.A103 */
                    A103 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x09))
                {
                    Local1 = A104 /* \_SB_.A104 */
                    A104 = (0x00400000 | Local1)
                    Local1 = A104 /* \_SB_.A104 */
                    A104 = (0xFFBFFFFF & Local1)
                }
            }
        }

        Method (A003, 2, NotSerialized)
        {
            Local0 = 0x00
            While ((Local0 < 0x0A))
            {
                Local1 = A092 (Local0, Arg1)
                If ((Local1 == 0x01))
                {
                    A093 (Local0, Arg1)
                    Break
                }

                Local0++
            }
        }

        Method (A011, 2, Serialized)
        {
            CreateDWordField (Arg1, 0x00, A105)
            CreateDWordField (Arg1, 0x04, A106)
            CreateDWordField (Arg1, 0x08, A107)
            CreateDWordField (Arg1, 0x0C, A108)
            CreateDWordField (Arg1, 0x10, A109)
            CreateDWordField (Arg1, 0x14, A110)
            A111 = 0x00
            While ((A111 != 0x00)) {}
            A112 = A105 /* \_SB_.A011.A105 */
            A113 = A106 /* \_SB_.A011.A106 */
            A114 = A107 /* \_SB_.A011.A107 */
            A115 = A108 /* \_SB_.A011.A108 */
            A116 = A109 /* \_SB_.A011.A109 */
            A117 = A110 /* \_SB_.A011.A110 */
            A118 = Arg0
            While ((A111 == 0x00)) {}
        }

        Method (A087, 5, NotSerialized)
        {
            Local7 = Buffer (0x18) {}
            CreateDWordField (Local7, 0x00, A005)
            CreateDWordField (Local7, 0x04, A006)
            CreateDWordField (Local7, 0x08, A007)
            CreateDWordField (Local7, 0x0C, A008)
            CreateDWordField (Local7, 0x10, A009)
            CreateDWordField (Local7, 0x14, A010)
            A005 = Arg0
            A006 = Arg1
            A007 = Arg2
            A008 = Arg3
            A011 (0x09, Local7)
        }

        Method (A025, 1, Serialized)
        {
            CreateWordField (Arg0, 0x00, A119)
            Local7 = Buffer (0x18) {}
            CreateDWordField (Local7, 0x00, A005)
            CreateDWordField (Local7, 0x04, A006)
            CreateDWordField (Local7, 0x08, A007)
            CreateDWordField (Local7, 0x0C, A008)
            CreateDWordField (Local7, 0x10, A009)
            CreateDWordField (Local7, 0x14, A010)
            Local0 = 0x02
            While ((Local0 < A119))
            {
                Local1 = DerefOf (Arg0 [Local0])
                Local0++
                Local2 = DerefOf (Arg0 [Local0])
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x08)
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x10)
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x18)
                Local0++
                A005 = 0x00
                A006 = 0x00
                A007 = 0x00
                A008 = 0x00
                A009 = 0x00
                A010 = 0x00
                If ((Local1 == 0x01))
                {
                    A005 = Local2
                    A011 (0x18, Local7)
                }

                If ((Local1 == 0x03))
                {
                    A005 = Local2
                    A011 (0x19, Local7)
                }

                If ((Local1 == 0x05))
                {
                    A005 = Local2
                    A011 (0x14, Local7)
                }

                If ((Local1 == 0x06))
                {
                    A005 = Local2
                    A011 (0x15, Local7)
                }

                If ((Local1 == 0x07))
                {
                    A005 = Local2
                    A011 (0x16, Local7)
                }

                If ((Local1 == 0x08))
                {
                    A005 = Local2
                    A011 (0x17, Local7)
                }

                If ((Local1 == 0x09))
                {
                    A005 = Local2
                    A011 (0x20, Local7)
                }

                If ((Local1 == 0x0B))
                {
                    A005 = Local2
                    A011 (0x1A, Local7)
                }

                If ((Local1 == 0x0C))
                {
                    A005 = Local2
                    A011 (0x1C, Local7)
                }

                If ((Local1 == 0x0D))
                {
                    A005 = Local2
                    A011 (0x1E, Local7)
                }

                If ((Local1 == 0x0E))
                {
                    A005 = Local2
                    A011 (0x1B, Local7)
                }

                If ((Local1 == 0x0F))
                {
                    A005 = Local2
                    A011 (0x1F, Local7)
                }

                If ((DerefOf (\_SB.ADAT [0x08]) == 0x01))
                {
                    If ((Local1 == 0x10))
                    {
                        If ((Local2 == 0x00))
                        {
                            A011 (0x26, Local7)
                        }
                        Else
                        {
                            A011 (0x25, Local7)
                        }
                    }
                }

                If ((Local1 == 0x11))
                {
                    A005 = Local2
                    A011 (0x1D, Local7)
                }

                If ((Local1 == 0x12))
                {
                    A005 = Local2
                    A011 (0x5E, Local7)
                }

                If ((Local1 == 0x20))
                {
                    A005 = Local2
                    A011 (0x36, Local7)
                }

                If ((Local1 == 0x21))
                {
                    A005 = Local2
                    A011 (0x37, Local7)
                }

                If ((Local1 == 0x22))
                {
                    A005 = Local2
                    A011 (0x38, Local7)
                }

                If ((Local1 == 0x23))
                {
                    A005 = Local2
                    A011 (0x39, Local7)
                }

                If ((Local1 == 0x24))
                {
                    A005 = Local2
                    A011 (0x3A, Local7)
                }

                If ((Local1 == 0x25))
                {
                    A005 = Local2
                    A011 (0x3B, Local7)
                }

                If ((Local1 == 0x26))
                {
                    A005 = Local2
                    A011 (0x3C, Local7)
                }

                If ((Local1 == 0x27))
                {
                    A005 = Local2
                    A011 (0x3D, Local7)
                }

                If ((Local1 == 0x28))
                {
                    A005 = Local2
                    A011 (0x3E, Local7)
                }

                If ((Local1 == 0x29))
                {
                    A005 = Local2
                    A011 (0x3F, Local7)
                }

                If ((Local1 == 0x2A))
                {
                    A005 = Local2
                    A011 (0x40, Local7)
                }

                If ((Local1 == 0x2B))
                {
                    A005 = Local2
                    A011 (0x41, Local7)
                }

                If ((Local1 == 0x2C))
                {
                    A005 = Local2
                    A011 (0x42, Local7)
                }

                If ((Local1 == 0x2D))
                {
                    A005 = Local2
                    A011 (0x43, Local7)
                }

                If ((Local1 == 0x2E))
                {
                    A005 = Local2
                    A011 (0x53, Local7)
                }
            }
        }

        Device (AWR0)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, 0x90)  // _UID: Unique ID
            Device (ABR0)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x80)  // _UID: Unique ID
                Name (AB12, 0x20)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A077, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A077, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A071,   8, 
                    A072,   8, 
                    Offset (0x68), 
                    A078,   2, 
                        ,   2, 
                    A079,   1, 
                    A080,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A081,   1, 
                    Offset (0x88), 
                    A082,   4, 
                        ,   1, 
                    A083,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A066, 0, NotSerialized)
                {
                    Local0 = A048 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR0.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR0.AB0E */
                    }
                }

                Method (A061, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A067, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR0.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A060, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR0.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR0.AB0E */
                    }

                    Local0 = A067 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR0.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A066 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A059, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR0.AB02 */
                }

                Method (A062, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR0.AB00 */
                }

                Method (A058, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A068 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A069 (0x00)
                    Name (A070, 0x00)
                    A069 (0x01)
                }

                Method (A063, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A064, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A071) && (Local0 <= A072)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A073, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A065, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A068, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A074, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A075 (Local0, 0x00)
                    Local2 = A075 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A075 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A075 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A076 (0x23, (Local4 & 0xFFFFFFF0), 0x00)
                                            A076 (0x24, Local5, 0x00)
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x05, 0x00, (0x01 << 0x0A))
                                            A076 (0x25, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x07, 0x00, (0x01 << 0x0A))
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A088, 2, NotSerialized)
                {
                    If ((A075 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A075 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A075 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A069, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A075 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A075 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A088 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A075 (Local0, (Local1 + 0x10))
                                A086 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A086 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A086, 3, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A075, 2, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR0.A075.ADRR */
                }

                Method (A084, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A073 (Arg0))
                }

                Method (A085, 1, NotSerialized)
                {
                    Name (A070, 0x00)
                    Local2 = 0x00
                    A070 = A078 /* \_SB_.AWR0.ABR0.A078 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A079 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A069 (0x00)
                        Local0 = A075 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A086 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A075 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A086 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A079 = 0x01
                        Local0 = 0x05
                    }

                    A078 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A087 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A075 (0x00, 0x00)
                            A087 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A078 = A070 /* \_SB_.AWR0.ABR0.A085.A070 */
                    If ((A070 != 0x00))
                    {
                        A069 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR1)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x81)  // _UID: Unique ID
                Name (AB12, 0x34)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A077, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A077, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A071,   8, 
                    A072,   8, 
                    Offset (0x68), 
                    A078,   2, 
                        ,   2, 
                    A079,   1, 
                    A080,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A081,   1, 
                    Offset (0x88), 
                    A082,   4, 
                        ,   1, 
                    A083,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A066, 0, NotSerialized)
                {
                    Local0 = A048 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR1.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR1.AB0E */
                    }
                }

                Method (A061, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A067, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR1.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A060, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR1.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR1.AB0E */
                    }

                    Local0 = A067 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR1.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A066 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A059, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR1.AB02 */
                }

                Method (A062, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR1.AB00 */
                }

                Method (A058, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A068 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A069 (0x00)
                    Name (A070, 0x00)
                    A069 (0x01)
                }

                Method (A063, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A064, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A071) && (Local0 <= A072)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A073, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A065, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A068, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A074, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A075 (Local0, 0x00)
                    Local2 = A075 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A075 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A075 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A076 (0x23, (Local4 & 0xFFFFFFF0), 0x00)
                                            A076 (0x24, Local5, 0x00)
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x05, 0x00, (0x01 << 0x0A))
                                            A076 (0x25, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x07, 0x00, (0x01 << 0x0A))
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A088, 2, NotSerialized)
                {
                    If ((A075 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A075 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A075 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A069, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A075 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A075 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A088 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A075 (Local0, (Local1 + 0x10))
                                A086 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A086 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A086, 3, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A075, 2, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR1.A075.ADRR */
                }

                Method (A084, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A073 (Arg0))
                }

                Method (A085, 1, NotSerialized)
                {
                    Name (A070, 0x00)
                    Local2 = 0x00
                    A070 = A078 /* \_SB_.AWR0.ABR1.A078 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A079 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A069 (0x00)
                        Local0 = A075 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A086 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A075 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A086 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A079 = 0x01
                        Local0 = 0x05
                    }

                    A078 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A087 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A075 (0x00, 0x00)
                            A087 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A078 = A070 /* \_SB_.AWR0.ABR1.A085.A070 */
                    If ((A070 != 0x00))
                    {
                        A069 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR2)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x82)  // _UID: Unique ID
                Name (AB12, 0x48)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A077, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A077, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A071,   8, 
                    A072,   8, 
                    Offset (0x68), 
                    A078,   2, 
                        ,   2, 
                    A079,   1, 
                    A080,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A081,   1, 
                    Offset (0x88), 
                    A082,   4, 
                        ,   1, 
                    A083,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A066, 0, NotSerialized)
                {
                    Local0 = A048 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR2.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR2.AB0E */
                    }
                }

                Method (A061, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A067, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR2.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A060, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR2.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR2.AB0E */
                    }

                    Local0 = A067 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR2.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A066 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A059, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR2.AB02 */
                }

                Method (A062, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR2.AB00 */
                }

                Method (A058, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A068 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A069 (0x00)
                    Name (A070, 0x00)
                    A069 (0x01)
                }

                Method (A063, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A064, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A071) && (Local0 <= A072)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A073, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A065, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A068, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A074, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A075 (Local0, 0x00)
                    Local2 = A075 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A075 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A075 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A076 (0x23, (Local4 & 0xFFFFFFF0), 0x00)
                                            A076 (0x24, Local5, 0x00)
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x05, 0x00, (0x01 << 0x0A))
                                            A076 (0x25, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x07, 0x00, (0x01 << 0x0A))
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A088, 2, NotSerialized)
                {
                    If ((A075 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A075 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A075 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A069, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A075 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A075 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A088 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A075 (Local0, (Local1 + 0x10))
                                A086 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A086 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A086, 3, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A075, 2, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR2.A075.ADRR */
                }

                Method (A084, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A073 (Arg0))
                }

                Method (A085, 1, NotSerialized)
                {
                    Name (A070, 0x00)
                    Local2 = 0x00
                    A070 = A078 /* \_SB_.AWR0.ABR2.A078 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A079 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A069 (0x00)
                        Local0 = A075 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A086 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A075 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A086 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A079 = 0x01
                        Local0 = 0x05
                    }

                    A078 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A087 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A075 (0x00, 0x00)
                            A087 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A078 = A070 /* \_SB_.AWR0.ABR2.A085.A070 */
                    If ((A070 != 0x00))
                    {
                        A069 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR3)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x83)  // _UID: Unique ID
                Name (AB12, 0x5C)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A077, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A077, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A071,   8, 
                    A072,   8, 
                    Offset (0x68), 
                    A078,   2, 
                        ,   2, 
                    A079,   1, 
                    A080,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A081,   1, 
                    Offset (0x88), 
                    A082,   4, 
                        ,   1, 
                    A083,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A066, 0, NotSerialized)
                {
                    Local0 = A048 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR3.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR3.AB0E */
                    }
                }

                Method (A061, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A067, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR3.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A060, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR3.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR3.AB0E */
                    }

                    Local0 = A067 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR3.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A066 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A059, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR3.AB02 */
                }

                Method (A062, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR3.AB00 */
                }

                Method (A058, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A068 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A069 (0x00)
                    Name (A070, 0x00)
                    A069 (0x01)
                }

                Method (A063, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A064, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A071) && (Local0 <= A072)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A073, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A065, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A068, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A074, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A075 (Local0, 0x00)
                    Local2 = A075 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A075 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A075 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A076 (0x23, (Local4 & 0xFFFFFFF0), 0x00)
                                            A076 (0x24, Local5, 0x00)
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x05, 0x00, (0x01 << 0x0A))
                                            A076 (0x25, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x07, 0x00, (0x01 << 0x0A))
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A088, 2, NotSerialized)
                {
                    If ((A075 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A075 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A075 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A069, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A075 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A075 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A088 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A075 (Local0, (Local1 + 0x10))
                                A086 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A086 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A086, 3, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A075, 2, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR3.A075.ADRR */
                }

                Method (A084, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A073 (Arg0))
                }

                Method (A085, 1, NotSerialized)
                {
                    Name (A070, 0x00)
                    Local2 = 0x00
                    A070 = A078 /* \_SB_.AWR0.ABR3.A078 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A079 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A069 (0x00)
                        Local0 = A075 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A086 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A075 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A086 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A079 = 0x01
                        Local0 = 0x05
                    }

                    A078 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A087 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A075 (0x00, 0x00)
                            A087 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A078 = A070 /* \_SB_.AWR0.ABR3.A085.A070 */
                    If ((A070 != 0x00))
                    {
                        A069 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR4)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x84)  // _UID: Unique ID
                Name (AB12, 0x70)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A077, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A077, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A071,   8, 
                    A072,   8, 
                    Offset (0x68), 
                    A078,   2, 
                        ,   2, 
                    A079,   1, 
                    A080,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A081,   1, 
                    Offset (0x88), 
                    A082,   4, 
                        ,   1, 
                    A083,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A066, 0, NotSerialized)
                {
                    Local0 = A048 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR4.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR4.AB0E */
                    }
                }

                Method (A061, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A067, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR4.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A060, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR4.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR4.AB0E */
                    }

                    Local0 = A067 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR4.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A066 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A059, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR4.AB02 */
                }

                Method (A062, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR4.AB00 */
                }

                Method (A058, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A068 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A069 (0x00)
                    Name (A070, 0x00)
                    A069 (0x01)
                }

                Method (A063, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A064, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A071) && (Local0 <= A072)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A073, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A065, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A068, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A074, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A075 (Local0, 0x00)
                    Local2 = A075 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A075 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A075 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A076 (0x23, (Local4 & 0xFFFFFFF0), 0x00)
                                            A076 (0x24, Local5, 0x00)
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x05, 0x00, (0x01 << 0x0A))
                                            A076 (0x25, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x07, 0x00, (0x01 << 0x0A))
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A088, 2, NotSerialized)
                {
                    If ((A075 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A075 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A075 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A069, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A075 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A075 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A088 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A075 (Local0, (Local1 + 0x10))
                                A086 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A086 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A086, 3, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A075, 2, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR4.A075.ADRR */
                }

                Method (A084, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A073 (Arg0))
                }

                Method (A085, 1, NotSerialized)
                {
                    Name (A070, 0x00)
                    Local2 = 0x00
                    A070 = A078 /* \_SB_.AWR0.ABR4.A078 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A079 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A069 (0x00)
                        Local0 = A075 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A086 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A075 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A086 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A079 = 0x01
                        Local0 = 0x05
                    }

                    A078 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A087 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A075 (0x00, 0x00)
                            A087 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A078 = A070 /* \_SB_.AWR0.ABR4.A085.A070 */
                    If ((A070 != 0x00))
                    {
                        A069 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR5)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x85)  // _UID: Unique ID
                Name (AB12, 0x84)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A077, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A077, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A071,   8, 
                    A072,   8, 
                    Offset (0x68), 
                    A078,   2, 
                        ,   2, 
                    A079,   1, 
                    A080,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A081,   1, 
                    Offset (0x88), 
                    A082,   4, 
                        ,   1, 
                    A083,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A066, 0, NotSerialized)
                {
                    Local0 = A048 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR5.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR5.AB0E */
                    }
                }

                Method (A061, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A067, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR5.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A060, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR5.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR5.AB0E */
                    }

                    Local0 = A067 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR5.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A066 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A059, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR5.AB02 */
                }

                Method (A062, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR5.AB00 */
                }

                Method (A058, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A068 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A069 (0x00)
                    Name (A070, 0x00)
                    A069 (0x01)
                }

                Method (A063, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A064, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A071) && (Local0 <= A072)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A073, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A065, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A068, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A074, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A075 (Local0, 0x00)
                    Local2 = A075 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A075 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A075 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A076 (0x23, (Local4 & 0xFFFFFFF0), 0x00)
                                            A076 (0x24, Local5, 0x00)
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x05, 0x00, (0x01 << 0x0A))
                                            A076 (0x25, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x07, 0x00, (0x01 << 0x0A))
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A088, 2, NotSerialized)
                {
                    If ((A075 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A075 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A075 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A069, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A075 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A075 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A088 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A075 (Local0, (Local1 + 0x10))
                                A086 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A086 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A086, 3, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A075, 2, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR5.A075.ADRR */
                }

                Method (A084, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A073 (Arg0))
                }

                Method (A085, 1, NotSerialized)
                {
                    Name (A070, 0x00)
                    Local2 = 0x00
                    A070 = A078 /* \_SB_.AWR0.ABR5.A078 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A079 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A069 (0x00)
                        Local0 = A075 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A086 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A075 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A086 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A079 = 0x01
                        Local0 = 0x05
                    }

                    A078 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A087 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A075 (0x00, 0x00)
                            A087 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A078 = A070 /* \_SB_.AWR0.ABR5.A085.A070 */
                    If ((A070 != 0x00))
                    {
                        A069 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR6)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x86)  // _UID: Unique ID
                Name (AB12, 0x98)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A077, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A077, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A071,   8, 
                    A072,   8, 
                    Offset (0x68), 
                    A078,   2, 
                        ,   2, 
                    A079,   1, 
                    A080,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A081,   1, 
                    Offset (0x88), 
                    A082,   4, 
                        ,   1, 
                    A083,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A066, 0, NotSerialized)
                {
                    Local0 = A048 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR6.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR6.AB0E */
                    }
                }

                Method (A061, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A067, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR6.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A060, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR6.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR6.AB0E */
                    }

                    Local0 = A067 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR6.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A066 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A059, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR6.AB02 */
                }

                Method (A062, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR6.AB00 */
                }

                Method (A058, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A068 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A069 (0x00)
                    Name (A070, 0x00)
                    A069 (0x01)
                }

                Method (A063, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A064, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A071) && (Local0 <= A072)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A073, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A065, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A068, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A074, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A075 (Local0, 0x00)
                    Local2 = A075 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A075 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A075 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A076 (0x23, (Local4 & 0xFFFFFFF0), 0x00)
                                            A076 (0x24, Local5, 0x00)
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x05, 0x00, (0x01 << 0x0A))
                                            A076 (0x25, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x07, 0x00, (0x01 << 0x0A))
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A088, 2, NotSerialized)
                {
                    If ((A075 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A075 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A075 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A069, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A075 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A075 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A088 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A075 (Local0, (Local1 + 0x10))
                                A086 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A086 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A086, 3, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A075, 2, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR6.A075.ADRR */
                }

                Method (A084, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A073 (Arg0))
                }

                Method (A085, 1, NotSerialized)
                {
                    Name (A070, 0x00)
                    Local2 = 0x00
                    A070 = A078 /* \_SB_.AWR0.ABR6.A078 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A079 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A069 (0x00)
                        Local0 = A075 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A086 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A075 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A086 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A079 = 0x01
                        Local0 = 0x05
                    }

                    A078 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A087 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A075 (0x00, 0x00)
                            A087 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A078 = A070 /* \_SB_.AWR0.ABR6.A085.A070 */
                    If ((A070 != 0x00))
                    {
                        A069 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR7)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x87)  // _UID: Unique ID
                Name (AB12, 0xAC)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A077, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A077, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A071,   8, 
                    A072,   8, 
                    Offset (0x68), 
                    A078,   2, 
                        ,   2, 
                    A079,   1, 
                    A080,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A081,   1, 
                    Offset (0x88), 
                    A082,   4, 
                        ,   1, 
                    A083,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A066, 0, NotSerialized)
                {
                    Local0 = A048 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR7.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR7.AB0E */
                    }
                }

                Method (A061, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A067, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR7.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A060, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR7.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR7.AB0E */
                    }

                    Local0 = A067 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR7.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A066 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A059, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR7.AB02 */
                }

                Method (A062, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR7.AB00 */
                }

                Method (A058, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A068 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A069 (0x00)
                    Name (A070, 0x00)
                    A069 (0x01)
                }

                Method (A063, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A064, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A071) && (Local0 <= A072)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A073, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A065, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A068, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A074, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A075 (Local0, 0x00)
                    Local2 = A075 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A075 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A075 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A076 (0x23, (Local4 & 0xFFFFFFF0), 0x00)
                                            A076 (0x24, Local5, 0x00)
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x05, 0x00, (0x01 << 0x0A))
                                            A076 (0x25, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x07, 0x00, (0x01 << 0x0A))
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A088, 2, NotSerialized)
                {
                    If ((A075 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A075 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A075 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A069, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A075 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A075 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A088 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A075 (Local0, (Local1 + 0x10))
                                A086 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A086 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A086, 3, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A075, 2, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR7.A075.ADRR */
                }

                Method (A084, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A073 (Arg0))
                }

                Method (A085, 1, NotSerialized)
                {
                    Name (A070, 0x00)
                    Local2 = 0x00
                    A070 = A078 /* \_SB_.AWR0.ABR7.A078 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A079 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A069 (0x00)
                        Local0 = A075 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A086 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A075 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A086 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A079 = 0x01
                        Local0 = 0x05
                    }

                    A078 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A087 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A075 (0x00, 0x00)
                            A087 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A078 = A070 /* \_SB_.AWR0.ABR7.A085.A070 */
                    If ((A070 != 0x00))
                    {
                        A069 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR8)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x88)  // _UID: Unique ID
                Name (AB12, 0xC0)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A077, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A077, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A071,   8, 
                    A072,   8, 
                    Offset (0x68), 
                    A078,   2, 
                        ,   2, 
                    A079,   1, 
                    A080,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A081,   1, 
                    Offset (0x88), 
                    A082,   4, 
                        ,   1, 
                    A083,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A066, 0, NotSerialized)
                {
                    Local0 = A048 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR8.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR8.AB0E */
                    }
                }

                Method (A061, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A067, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR8.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A060, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR8.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR8.AB0E */
                    }

                    Local0 = A067 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR8.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A066 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A059, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR8.AB02 */
                }

                Method (A062, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR8.AB00 */
                }

                Method (A058, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A068 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A069 (0x00)
                    Name (A070, 0x00)
                    A069 (0x01)
                }

                Method (A063, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A064, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A071) && (Local0 <= A072)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A073, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A065, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A068, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A074, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A075 (Local0, 0x00)
                    Local2 = A075 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A075 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A075 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A076 (0x23, (Local4 & 0xFFFFFFF0), 0x00)
                                            A076 (0x24, Local5, 0x00)
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x05, 0x00, (0x01 << 0x0A))
                                            A076 (0x25, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x07, 0x00, (0x01 << 0x0A))
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A088, 2, NotSerialized)
                {
                    If ((A075 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A075 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A075 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A069, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A075 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A075 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A088 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A075 (Local0, (Local1 + 0x10))
                                A086 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A086 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A086, 3, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A075, 2, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR8.A075.ADRR */
                }

                Method (A084, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A073 (Arg0))
                }

                Method (A085, 1, NotSerialized)
                {
                    Name (A070, 0x00)
                    Local2 = 0x00
                    A070 = A078 /* \_SB_.AWR0.ABR8.A078 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A079 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A069 (0x00)
                        Local0 = A075 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A086 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A075 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A086 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A079 = 0x01
                        Local0 = 0x05
                    }

                    A078 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A087 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A075 (0x00, 0x00)
                            A087 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A078 = A070 /* \_SB_.AWR0.ABR8.A085.A070 */
                    If ((A070 != 0x00))
                    {
                        A069 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR9)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x89)  // _UID: Unique ID
                Name (AB12, 0xD4)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A077, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A077, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A071,   8, 
                    A072,   8, 
                    Offset (0x68), 
                    A078,   2, 
                        ,   2, 
                    A079,   1, 
                    A080,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A081,   1, 
                    Offset (0x88), 
                    A082,   4, 
                        ,   1, 
                    A083,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A066, 0, NotSerialized)
                {
                    Local0 = A048 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR9.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR9.AB0E */
                    }
                }

                Method (A061, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A067, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR9.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A060, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR9.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR9.AB0E */
                    }

                    Local0 = A067 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR9.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A066 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A059, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR9.AB02 */
                }

                Method (A062, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR9.AB00 */
                }

                Method (A058, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A068 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A069 (0x00)
                    Name (A070, 0x00)
                    A069 (0x01)
                }

                Method (A063, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A064, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A071) && (Local0 <= A072)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A073, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A065, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A068, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A074, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A075 (Local0, 0x00)
                    Local2 = A075 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A075 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A075 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A076 (0x23, (Local4 & 0xFFFFFFF0), 0x00)
                                            A076 (0x24, Local5, 0x00)
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x05, 0x00, (0x01 << 0x0A))
                                            A076 (0x25, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x07, 0x00, (0x01 << 0x0A))
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A088, 2, NotSerialized)
                {
                    If ((A075 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A075 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A075 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A069, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A075 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A075 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A088 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A075 (Local0, (Local1 + 0x10))
                                A086 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A086 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A086, 3, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A075, 2, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR9.A075.ADRR */
                }

                Method (A084, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A073 (Arg0))
                }

                Method (A085, 1, NotSerialized)
                {
                    Name (A070, 0x00)
                    Local2 = 0x00
                    A070 = A078 /* \_SB_.AWR0.ABR9.A078 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A079 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A069 (0x00)
                        Local0 = A075 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A086 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A075 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A086 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A079 = 0x01
                        Local0 = 0x05
                    }

                    A078 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A087 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A075 (0x00, 0x00)
                            A087 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A078 = A070 /* \_SB_.AWR0.ABR9.A085.A070 */
                    If ((A070 != 0x00))
                    {
                        A069 (0x01)
                    }

                    Return (Local2)
                }
            }
        }

        Method (A122, 1, Serialized)
        {
            If ((DerefOf (\_SB.ADAT [0x08]) == 0x01))
            {
                Local0 = 0x00
                While ((Local0 < 0x0A))
                {
                    A123 (Local0, Arg0)
                    Local0++
                }
            }
        }

        Method (A076, 3, NotSerialized)
        {
            Local7 = Buffer (0x18) {}
            CreateDWordField (Local7, 0x00, A005)
            CreateDWordField (Local7, 0x04, A006)
            CreateDWordField (Local7, 0x08, A007)
            CreateDWordField (Local7, 0x0C, A008)
            CreateDWordField (Local7, 0x10, A009)
            CreateDWordField (Local7, 0x14, A010)
            A005 = Arg1
            A006 = Arg2
            A011 (Arg0, Local7)
        }

        Method (A123, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A074 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A074 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A074 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A074 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A074 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A074 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A074 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A074 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR0.ABR8.A074 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR0.ABR9.A074 (Arg1))
            }
        }

        Method (A038, 1, Serialized)
        {
            Local0 = 0x00
            Local6 = DerefOf (Arg0 [Local0])
            Local7 = Buffer (0x18) {}
            CreateDWordField (Local7, 0x00, A005)
            CreateDWordField (Local7, 0x04, A006)
            CreateDWordField (Local7, 0x08, A007)
            CreateDWordField (Local7, 0x0C, A008)
            CreateDWordField (Local7, 0x10, A009)
            CreateDWordField (Local7, 0x14, A010)
            Local0 = 0x02
            Local1 = DerefOf (Arg0 [Local0])
            Local0++
            Local2 = DerefOf (Arg0 [Local0])
            Local0++
            Local2 |= (DerefOf (Arg0 [Local0]) << 0x08)
            A005 = 0x00
            A006 = 0x00
            A007 = 0x00
            A008 = 0x00
            A009 = 0x00
            A010 = 0x00
            If ((Local1 == 0x00))
            {
                A005 = Local2
                A122 (0x00)
            }

            If ((Local1 == 0x01))
            {
                A005 = Local2
                A122 (0x01)
            }

            If ((Local1 == 0x02))
            {
                A005 = Local2
                A011 (0x25, Local7)
            }

            If ((Local1 == 0x03))
            {
                A005 = Local2
                A011 (0x26, Local7)
            }
        }

        Name (A001, 0x01)
        Name (A002, 0x00)
        Method (APTS, 1, NotSerialized)
        {
            If ((Arg0 == 0x03)) {}
        }

        Method (AWAK, 1, NotSerialized)
        {
            If ((Arg0 == 0x03)) {}
        }

        Method (APPM, 1, NotSerialized)
        {
            Local0 = DerefOf (Arg0 [0x04])
            Local1 = DerefOf (Arg0 [0x02])
            A003 (Local0, Local1)
        }

        Method (A004, 0, NotSerialized)
        {
            Local7 = Buffer (0x18) {}
            CreateDWordField (Local7, 0x00, A005)
            CreateDWordField (Local7, 0x04, A006)
            CreateDWordField (Local7, 0x08, A007)
            CreateDWordField (Local7, 0x0C, A008)
            CreateDWordField (Local7, 0x10, A009)
            CreateDWordField (Local7, 0x14, A010)
            A005 = 0x00
            A006 = 0x00
            A007 = 0x00
            A008 = 0x00
            A009 = 0x00
            A010 = 0x00
            If ((AD00 == 0x00))
            {
                A011 (0x11, Local7)
            }
            Else
            {
                A011 (0x12, Local7)
            }
        }

        Method (A012, 2, NotSerialized)
        {
        }
    }
}



SSDT20
------
DefinitionBlock ("", "SSDT", 1, "LENOVO", "CB-01   ", 0x00000001)
{
    /*
     * iASL Warning: There were 5 external control methods found during
     * disassembly, but only 0 were resolved (5 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_SB_.PCI0.GP17.ACP_, DeviceObj)
    External (_SB_.PCI0.GP17.AZAL, DeviceObj)
    External (M000, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (M017, MethodObj)    // Warning: Unknown method, guessing 5 arguments
    External (M019, MethodObj)    // Warning: Unknown method, guessing 3 arguments
    External (M249, MethodObj)    // Warning: Unknown method, guessing 3 arguments
    External (M250, MethodObj)    // Warning: Unknown method, guessing 5 arguments

    Name (M278, One)
    Name (M279, One)
    Name (M27A, One)
    Name (APGE, Zero)
    Name (ACGE, One)
    Method (M276, 0, NotSerialized)
    {
        If ((M27A == Zero))
        {
            M278 = Zero
        }

        If (((M278 == One) || (M279 == One)))
        {
            0x08 = M017 (Zero, 0x08, One, 0x19, Zero)
            Local0
             = M019 (Local0, Zero, 0x05)
            Local1
            If ((M27A == Zero))
            {
                Local1 = 0x15E21022
            }

            If (((Local0 != Zero) && (Local0 != 0xFF)))
            {
                If ((Local1 != Ones))
                {
                    M000 (0xB4)
                    If ((ACGE != Zero))
                    {
                        M250 (Zero, Zero, Zero, 0x03B10564, Zero)
                        M250 (Zero, Zero, Zero, 0x03B10998, 0xC8)
                        M250 (Zero, Zero, Zero, 0x03B10528, 0x59)
                        0x03B10564 = M249 (Zero, Zero, Zero)
                        Local4
                        While ((Local4 == Zero))
                        {
                            0x03B10564 = M249 (Zero, Zero, Zero)
                            Local4
                            If ((Local4 != Zero))
                            {
                                Break
                            }
                        }
                    }

                    If ((APGE != Zero))
                    {
                        M250 (Zero, Zero, Zero, 0x0900E784, 0x0103)
                        Local4 = One
                        Local5 = 0x64
                        While (((Local4 != Zero) && Local5))
                        {
                            0x0900E784 = M249 (Zero, Zero, Zero)
                            Local4
                            Local4 |= 0x06
                            Local4 &= 0xFFFFFF0F
                            M250 (Zero, Zero, Zero, 0x0900E784, Local4)
                            0x0900E78C = M249 (Zero, Zero, Zero)
                            Local4
                            Local4 &= 0x03
                            Local5--
                            Stall (0x63)
                        }

                        M250 (Zero, Zero, Zero, 0x0900E784, Zero)
                        M000 (0xB5)
                    }
                }
            }
        }
    }

    Method (M277, 0, NotSerialized)
    {
        If ((M27A == Zero))
        {
            M278 = Zero
        }

        If (((M278 == Zero) && (M279 == Zero)))
        {
            0x08 = M017 (Zero, 0x08, One, 0x19, Zero)
            Local0
             = M019 (Local0, Zero, 0x05)
            Local1
            If ((M27A == Zero))
            {
                Local1 = 0x15E21022
            }

            If (((Local0 != Zero) && (Local0 != 0xFF)))
            {
                If ((Local1 != Ones))
                {
                    M000 (0xB6)
                    If ((ACGE != Zero))
                    {
                        M250 (Zero, Zero, Zero, 0x03B10564, Zero)
                        M250 (Zero, Zero, Zero, 0x03B10998, Zero)
                        M250 (Zero, Zero, Zero, 0x03B10528, 0x59)
                        0x03B10564 = M249 (Zero, Zero, Zero)
                        Local4
                        Local6 = 0x000F4240
                        While ((Local4 == Zero))
                        {
                            0x03B10564 = M249 (Zero, Zero, Zero)
                            Local4
                            If ((Local4 != Zero))
                            {
                                Break
                            }
                            ElseIf ((Local6 == Zero))
                            {
                                Local4 = One
                            }
                            Else
                            {
                                Local6--
                                Stall (0x63)
                            }
                        }
                    }

                    If ((APGE != Zero))
                    {
                        M250 (Zero, Zero, Zero, 0x0900E784, 0x0101)
                        Local4 = One
                        Local5 = 0x64
                        While (((Local4 != 0x02) && Local5))
                        {
                            0x0900E784 = M249 (Zero, Zero, Zero)
                            Local4
                            Local4 |= 0x06
                            Local4 &= 0xFFFFFF0F
                            M250 (Zero, Zero, Zero, 0x0900E784, Local4)
                            0x0900E78C = M249 (Zero, Zero, Zero)
                            Local4
                            Local4 &= 0x03
                            Local5--
                            Stall (0x63)
                        }

                        M250 (Zero, Zero, Zero, 0x0900E784, Zero)
                        M000 (0xB7)
                    }
                }
            }
        }
    }

    Scope (\_SB.PCI0.GP17.ACP)
    {
        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
        {
            M278 = One
            M276 ()
        }

        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
        {
            M278 = Zero
            M277 ()
        }

        Method (MSG0, 3, Serialized)
        {
            M000 (0x5511)
            OperationRegion (VARM, SystemIO, 0x80, 0x04)
            Field (VARM, DWordAcc, NoLock, Preserve)
            {
                VARR,   32
            }

            If ((Arg2 != 0x09))
            {
                M000 (0x5518)
                M250 (Zero, Zero, Zero, 0x00058A74, Arg0)
                M250 (Zero, Zero, Zero, 0x00058A54, Arg1)
                M250 (Zero, Zero, Zero, 0x00058A14, Arg2)
                0x00058A74 = M249 (Zero, Zero, Zero)
                Local0
                While ((Local0 == Zero))
                {
                    0x00058A74 = M249 (Zero, Zero, Zero)
                    Local0
                    If ((Local0 != Zero))
                    {
                        Break
                    }
                }

                M000 (0x5519)
                0x00058A54 = M249 (Zero, Zero, Zero)
                Local1
                Return (Local1)
            }

            Name (MBOX, Buffer (0x04) {})
            0x03810570 = M249 (Zero, Zero, Zero)
            Local0
            VARR = Local0
            MBOX = Local0
            CreateWordField (MBOX, Zero, STAS)
            CreateByteField (MBOX, 0x02, CMDI)
            CreateField (MBOX, 0x18, 0x05, RESV)
            CreateBitField (MBOX, 0x1D, RSET)
            CreateBitField (MBOX, 0x1E, RCOV)
            CreateBitField (MBOX, 0x1F, REDY)
            VARR = MBOX /* \_SB_.PCI0.GP17.ACP_.MSG0.MBOX */
            While (((REDY != One) || (CMDI != Zero)))
            {
                0x03810570 = M249 (Zero, Zero, Zero)
                Local0
                MBOX = Local0
                M000 (0x5516)
                VARR = MBOX /* \_SB_.PCI0.GP17.ACP_.MSG0.MBOX */
            }

            Local0 = Zero
            MBOX = Local0
            REDY = Zero
            CMDI = 0x33
            M000 (0x5514)
            Local0 = MBOX /* \_SB_.PCI0.GP17.ACP_.MSG0.MBOX */
            VARR = Local0
            M250 (Zero, Zero, Zero, 0x03810570, Local0)
            Sleep (One)
            M000 (0x5515)
            0x03810570 = M249 (Zero, Zero, Zero)
            Local0
            MBOX = Local0
            VARR = MBOX /* \_SB_.PCI0.GP17.ACP_.MSG0.MBOX */
            While ((CMDI != Zero))
            {
                0x03810570 = M249 (Zero, Zero, Zero)
                Local0
                MBOX = Local0
                M000 (0x5517)
                VARR = MBOX /* \_SB_.PCI0.GP17.ACP_.MSG0.MBOX */
            }

            If ((STAS != Zero))
            {
                M000 (0x5513)
            }

            M000 (0x5512)
            Return (Local0)
        }
    }

    Scope (\_SB.PCI0.GP17.AZAL)
    {
        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
        {
            M279 = One
            M276 ()
        }

        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
        {
            M279 = Zero
            M277 ()
        }
    }
}



SSDT21
------
DefinitionBlock ("", "SSDT", 1, "LENOVO", "CB-01   ", 0x00000001)
{
    External (_SB_.PCI0.LPC0.EC0_, DeviceObj)
    External (M229, UnknownObj)
    External (Z009, UnknownObj)

    Method (M040, 1, Serialized)
    {
        Return (\_SB.PCI0.LPC0.EC0.M040 (Arg0))
    }

    Method (M041, 2, Serialized)
    {
        \_SB.PCI0.LPC0.EC0.M041 (Arg0, Arg1)
    }

    Method (M31A, 1, Serialized)
    {
        Return (\_SB.PCI0.LPC0.EC0.M31A (Arg0))
    }

    Method (M319, 2, Serialized)
    {
        \_SB.PCI0.LPC0.EC0.M319 (Arg0, Arg1)
    }

    Method (M31B, 4, Serialized)
    {
        \_SB.PCI0.LPC0.EC0.M31B (Arg0, Arg1, Arg2, Arg3)
    }

    Method (M038, 1, Serialized)
    {
        Local1 = (Arg0 & 0x07)
        Local2 = (Arg0 >> 0x03)
        Local2 += M229 /* External reference */
        Local0 = M040 (Local2)
        Local0 >>= Local1
        Local0 &= One
        Return (Local0)
    }

    Method (M039, 2, Serialized)
    {
        Local1 = (Arg0 & 0x07)
        Local2 = (Arg0 >> 0x03)
        Local2 += M229 /* External reference */
        Local0 = M040 (Local2)
        Local3 = ((Arg1 & One) << Local1)
        Local4 = (0xFF ^ (One << Local1))
        Local0 &= Local4
        M041 (Local2, (Local0 | Local3))
        Local0 = M040 (0xCF)
        M041 (0xCF, (Local0 | One))
    }

    Scope (\_SB.PCI0.LPC0.EC0)
    {
        Method (M040, 1, Serialized)
        {
            Local1 = Zero
            If (CondRefOf (Z009))
            {
                Acquire (Z009, 0xFFFF)
                Local0 = Arg0
                OperationRegion (VARM, EmbeddedControl, Local0, One)
                Field (VARM, ByteAcc, NoLock, Preserve)
                {
                    VARR,   8
                }

                Local1 = VARR /* \_SB_.PCI0.LPC0.EC0_.M040.VARR */
                Release (Z009)
            }

            Return (Local1)
        }

        Method (M041, 2, Serialized)
        {
            If (CondRefOf (Z009))
            {
                Acquire (Z009, 0xFFFF)
                Local0 = Arg0
                OperationRegion (VARM, EmbeddedControl, Local0, One)
                Field (VARM, ByteAcc, NoLock, Preserve)
                {
                    VARR,   8
                }

                Local1 = Arg1
                VARR = Local1
                Release (Z009)
            }
        }

        Method (M31A, 1, Serialized)
        {
            Local0 = Arg0
            OperationRegion (VARI, SystemIO, Local0, One)
            Field (VARI, ByteAcc, NoLock, Preserve)
            {
                VARO,   8
            }

            Local1 = VARO /* \_SB_.PCI0.LPC0.EC0_.M31A.VARO */
            Return (Local1)
        }

        Method (M319, 2, Serialized)
        {
            Local0 = Arg0
            OperationRegion (VARI, SystemIO, Local0, One)
            Field (VARI, ByteAcc, NoLock, Preserve)
            {
                VARO,   8
            }

            Local1 = Arg1
            VARO = Local1
        }

        Method (M31B, 4, Serialized)
        {
            If (CondRefOf (Z009))
            {
                Acquire (Z009, 0xFFFF)
                Local1 = (Arg0 + 0x04)
                If ((Arg3 != Zero))
                {
                    Local2 = Arg3
                    Local0 = M31A (Local1)
                    While ((Local2 && (Local0 & 0x02)))
                    {
                        Sleep (One)
                        Local0 = M31A (Local1)
                        If ((Local2 != 0xFFFF))
                        {
                            Local2--
                        }
                    }
                }

                If ((Arg1 != Zero))
                {
                    M319 (Local1, Arg2)
                }
                Else
                {
                    M319 (Arg0, Arg2)
                }

                Release (Z009)
            }
        }
    }
}



SSDT3
-----
DefinitionBlock ("", "SSDT", 1, "LENOVO", "CB-01   ", 0x00000001)
{
    /*
     * iASL Warning: There were 6 external control methods found during
     * disassembly, but only 0 were resolved (6 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_SB_.PCI0, DeviceObj)
    External (_SB_.PCI0.LPC0.EC0_.ADPT, UnknownObj)
    External (_SB_.PCI0.LPC0.EC0_.AQMD, IntObj)
    External (_SB_.PCI0.LPC0.EC0_.AUPM, IntObj)
    External (_SB_.PCI0.LPC0.EC0_.CSRM, UnknownObj)
    External (_SB_.PCI0.LPC0.EC0_.CSST, UnknownObj)
    External (_SB_.PCI0.LPC0.EC0_.LIDF, UnknownObj)
    External (_SB_.PCI0.LPC0.EC0_.PWAK, UnknownObj)
    External (_SB_.PCI0.LPC0.EC0_.QTMD, IntObj)
    External (_SB_.PCI0.LPC0.EC0_.STMD, IntObj)
    External (_SB_.PCI0.LPC0.EC0_.UWAK, UnknownObj)
    External (_SB_.PCI0.LPC0.EC0_.VPC0.MCAP, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.LPC0.EC0_.VPC0.MCAQ, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.LPC0.EC0_.VPC0.MCAT, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.LPC0.EC0_.VPC0.MCBT, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.LPC0.EC0_.VPC0.MCPF, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (MSTP, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (TPOS, UnknownObj)

    Scope (\_SB.PCI0)
    {
        Name (_DEP, Package (0x01)  // _DEP: Dependencies
        {
            \_SB.PEP
        })
    }

    OperationRegion (PLFD, SystemMemory, 0xFED81500, 0x03FF)
    Field (PLFD, AnyAcc, NoLock, Preserve)
    {
        Offset (0x1C), 
        Offset (0x1E), 
        PLST,   1, 
            ,   5, 
        PLPV,   1, 
        PLPE,   1
    }

    Scope (\_SB)
    {
        Device (PEP)
        {
            Name (_HID, "AMDI0005")  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0D80") /* Windows-compatible System Power Management Controller */)  // _CID: Compatible ID
            Name (_UID, One)  // _UID: Unique ID
            Name (DEVL, Package (0x03)
            {
                Zero, 
                0x20, 
                Package (0x20)
                {
                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PLTF.C000", 
                        One, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PLTF.C001", 
                        One, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PLTF.C002", 
                        One, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PLTF.C003", 
                        One, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PLTF.C004", 
                        One, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PLTF.C005", 
                        One, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PLTF.C006", 
                        One, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PLTF.C007", 
                        One, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PLTF.C008", 
                        One, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PLTF.C009", 
                        One, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PLTF.C00A", 
                        One, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PLTF.C00B", 
                        One, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PLTF.C00C", 
                        One, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PLTF.C00D", 
                        One, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PLTF.C00E", 
                        One, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PLTF.C00F", 
                        One, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PCI0.GPP0", 
                        Zero, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PCI0.GPP1", 
                        0x02, 
                        One
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PCI0.GPP2", 
                        0x02, 
                        One
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PCI0.GPP3", 
                        0x02, 
                        One
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PCI0.GPP6", 
                        0x02, 
                        One
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PCI0.GPP3.NVME", 
                        Zero, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PCI0.GPP6.WLAN", 
                        Zero, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PCI0.GP17.VGA", 
                        Zero, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PCI0.GP17.AZAL", 
                        Zero, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PCI0.GP17.ACP", 
                        Zero, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PCI0.GP17.HDAU", 
                        Zero, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PCI0.GP17.XHC0", 
                        Zero, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PCI0.GP17.XHC1", 
                        Zero, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.PCI0.GP18.SATA", 
                        Zero, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.FAR0", 
                        Zero, 
                        0x03
                    }, 

                    Package (0x04)
                    {
                        One, 
                        "\\_SB.FAR1", 
                        Zero, 
                        0x03
                    }
                }
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TPOS >= 0x60))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e3f32452-febc-43ce-9039-932122d37721") /* Unknown UUID */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Zero)
                                {
                                    Return (Buffer (One)
                                    {
                                         0x03                                             // .
                                    })
                                }
                                Default
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                             // .
                                    })
                                }

                            }
                        }
                        Case (One)
                        {
                            MSTP (0x3E01)
                            Return (DEVL) /* \_SB_.PEP_.DEVL */
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                ElseIf ((Arg0 == ToUUID ("11e00d56-ce64-47ce-837b-1f898f9aa461") /* Unknown UUID */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Zero)
                                {
                                    Return (Buffer (0x02)
                                    {
                                         0xF9, 0x01                                       // ..
                                    })
                                }
                                Default
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                             // .
                                    })
                                }

                            }
                        }
                        Case (0x03)
                        {
                            MSTP (0x3E03)
                            Return (Zero)
                        }
                        Case (0x04)
                        {
                            MSTP (0x3E04)
                            Return (Zero)
                        }
                        Case (0x05)
                        {
                            MSTP (0x3E05)
                            Return (Zero)
                        }
                        Case (0x06)
                        {
                            MSTP (0x3E06)
                            Return (Zero)
                        }
                        Case (0x07)
                        {
                            \_SB.PCI0.LPC0.EC0.CSST = One
                            \_SB.PCI0.LPC0.EC0.PWAK = Zero
                            \_SB.PCI0.LPC0.EC0.UWAK = One
                            If (((\_SB.PCI0.LPC0.EC0.LIDF == One) && (\_SB.PCI0.LPC0.EC0.ADPT == Zero)))
                            {
                                PLPV = Zero
                            }

                            MSTP (0x3E07)
                            Return (Zero)
                        }
                        Case (0x08)
                        {
                            \_SB.PCI0.LPC0.EC0.CSRM = One
                            PLPV = One
                            Local0 = \_SB.PCI0.LPC0.EC0.STMD /* External reference */
                            Local1 = \_SB.PCI0.LPC0.EC0.QTMD /* External reference */
                            Local2 = \_SB.PCI0.LPC0.EC0.AQMD /* External reference */
                            Local3 = \_SB.PCI0.LPC0.EC0.AUPM /* External reference */
                            If ((((Local0 == One) && (Local1 == Zero)) && ((Local2 == 
                                Zero) && (Local3 == Zero))))
                            {
                                \_SB.PCI0.LPC0.EC0.VPC0.MCAT ()
                            }
                            ElseIf ((((Local0 == Zero) && (Local1 == One)) && ((
                                Local2 == Zero) && (Local3 == Zero))))
                            {
                                \_SB.PCI0.LPC0.EC0.VPC0.MCBT ()
                            }
                            ElseIf ((((Local0 == Zero) && (Local1 == Zero)) && ((
                                Local2 == Zero) && (Local3 == One))))
                            {
                                \_SB.PCI0.LPC0.EC0.VPC0.MCAP ()
                            }
                            ElseIf ((((Local0 == Zero) && (Local1 == Zero)) && ((
                                Local2 == One) && (Local3 == Zero))))
                            {
                                \_SB.PCI0.LPC0.EC0.VPC0.MCAQ ()
                            }
                            ElseIf ((((Local0 == Zero) && (Local1 == Zero)) && ((
                                Local2 == Zero) && (Local3 == Zero))))
                            {
                                \_SB.PCI0.LPC0.EC0.VPC0.MCPF ()
                            }

                            MSTP (0x3E08)
                            Return (Zero)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Name (SUPP, Zero)
            CreateDWordField (Arg3, Zero, CDW1)
            CreateDWordField (Arg3, 0x04, CDW2)
            If ((Arg0 == ToUUID ("0811b06e-4a27-44f9-8d60-3cbbc22e7b48") /* Platform-wide Capabilities */))
            {
                SUPP = CDW2 /* \_SB_._OSC.CDW2 */
                SUPP &= 0x04
                CDW2 = SUPP /* \_SB_._OSC.SUPP */
                Return (Arg3)
            }
            Else
            {
                CDW1 |= 0x04
                Return (Arg3)
            }
        }
    }
}



SSDT4
-----
DefinitionBlock ("", "SSDT", 1, "LENOVO", "CB-01   ", 0x00000001)
{
    External (_SB_.PCI0.GPP0, DeviceObj)

    Scope (\_SB.PCI0.GPP0)
    {
        Device (DEV0)
        {
            Name (_ADR, Zero)  // _ADR: Address
        }
    }
}



SSDT5
-----
DefinitionBlock ("", "SSDT", 2, "LENOVO", "CB-01   ", 0x00000001)
{
    External (_SB_.PLTF.C000, DeviceObj)
    External (_SB_.PLTF.C001, DeviceObj)
    External (_SB_.PLTF.C002, DeviceObj)
    External (_SB_.PLTF.C003, DeviceObj)
    External (_SB_.PLTF.C004, DeviceObj)
    External (_SB_.PLTF.C005, DeviceObj)
    External (_SB_.PLTF.C006, DeviceObj)
    External (_SB_.PLTF.C007, DeviceObj)
    External (_SB_.PLTF.C008, DeviceObj)
    External (_SB_.PLTF.C009, DeviceObj)
    External (_SB_.PLTF.C00A, DeviceObj)
    External (_SB_.PLTF.C00B, DeviceObj)
    External (_SB_.PLTF.C00C, DeviceObj)
    External (_SB_.PLTF.C00D, DeviceObj)
    External (_SB_.PLTF.C00E, DeviceObj)
    External (_SB_.PLTF.C00F, DeviceObj)

    Scope (\_SB.PLTF.C000)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000708, 
                0x00000891, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000708, 
                0x00000891, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C000.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000002, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x00000024, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000002BC, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B2, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000709
        })
    }

    Scope (\_SB.PLTF.C001)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000708, 
                0x00000891, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000708, 
                0x00000891, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C001.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000002, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x00000024, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000002BC, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B2, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000709
        })
    }

    Scope (\_SB.PLTF.C002)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000708, 
                0x00000891, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000708, 
                0x00000891, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C002.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000002, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x00000024, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000002BC, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B2, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000709
        })
    }

    Scope (\_SB.PLTF.C003)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000708, 
                0x00000891, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000708, 
                0x00000891, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C003.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000002, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x00000024, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000002BC, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B2, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000709
        })
    }

    Scope (\_SB.PLTF.C004)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000708, 
                0x00000891, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000708, 
                0x00000891, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C004.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000002, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x00000024, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000002BC, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B2, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000709
        })
    }

    Scope (\_SB.PLTF.C005)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000708, 
                0x00000891, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000708, 
                0x00000891, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C005.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000002, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x00000024, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000002BC, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B2, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000709
        })
    }

    Scope (\_SB.PLTF.C006)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000708, 
                0x00000891, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000708, 
                0x00000891, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C006.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000002, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x00000024, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000002BC, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B2, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000709
        })
    }

    Scope (\_SB.PLTF.C007)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000708, 
                0x00000891, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000708, 
                0x00000891, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C007.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000002, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x00000024, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000002BC, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B2, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000709
        })
    }

    Scope (\_SB.PLTF.C008)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000708, 
                0x00000891, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000708, 
                0x00000891, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000004, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C008.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000004, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000002, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x00000024, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000002BC, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B2, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000709
        })
    }

    Scope (\_SB.PLTF.C009)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000708, 
                0x00000891, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000708, 
                0x00000891, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000004, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C009.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000004, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000002, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x00000024, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000002BC, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B2, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000709
        })
    }

    Scope (\_SB.PLTF.C00A)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000708, 
                0x00000891, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000708, 
                0x00000891, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000005, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C00A.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000005, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000002, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x00000024, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000002BC, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B2, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000709
        })
    }

    Scope (\_SB.PLTF.C00B)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000708, 
                0x00000891, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000708, 
                0x00000891, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000005, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C00B.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000005, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000002, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x00000024, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000002BC, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B2, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000709
        })
    }

    Scope (\_SB.PLTF.C00C)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000708, 
                0x00000891, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000708, 
                0x00000891, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000006, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C00C.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000006, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000002, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x00000024, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000002BC, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B2, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000709
        })
    }

    Scope (\_SB.PLTF.C00D)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000708, 
                0x00000891, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000708, 
                0x00000891, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000006, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C00D.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000006, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000002, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x00000024, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000002BC, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B2, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000709
        })
    }

    Scope (\_SB.PLTF.C00E)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000708, 
                0x00000891, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000708, 
                0x00000891, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000007, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C00E.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000007, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000002, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x00000024, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000002BC, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B2, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000709
        })
    }

    Scope (\_SB.PLTF.C00F)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000708, 
                0x00000891, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000708, 
                0x00000891, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000007, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C00F.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000007, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000002, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x00000024, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000002BC, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B0, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B2, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C00102B1, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x00000001, 
            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x00000000C00102B3, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000190, 
            0x00000709
        })
    }
}



SSDT6
-----
DefinitionBlock ("", "SSDT", 1, "LENOVO", "CB-01   ", 0x00000001)
{
    /*
     * iASL Warning: There were 19 external control methods found during
     * disassembly, but only 0 were resolved (19 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_SB_.ALIB, IntObj)
    External (_SB_.LID_._LID, IntObj)
    External (_SB_.PCI0.GP17.VGA_, DeviceObj)
    External (M000, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (M012, MethodObj)    // Warning: Unknown method, guessing 5 arguments
    External (M013, MethodObj)    // Warning: Unknown method, guessing 3 arguments
    External (M019, MethodObj)    // Warning: Unknown method, guessing 3 arguments
    External (M020, MethodObj)    // Warning: Unknown method, guessing 5 arguments
    External (M021, MethodObj)    // Warning: Unknown method, guessing 3 arguments
    External (M023, MethodObj)    // Warning: Unknown method, guessing 3 arguments
    External (M024, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (M025, UnknownObj)
    External (M026, MethodObj)    // Warning: Unknown method, guessing 3 arguments
    External (M043, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (M049, IntObj)
    External (M084, UnknownObj)
    External (M090, IntObj)
    External (M091, IntObj)
    External (M093, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (M094, MethodObj)    // Warning: Unknown method, guessing 3 arguments
    External (M095, MethodObj)    // Warning: Unknown method, guessing 4 arguments
    External (M097, MethodObj)    // Warning: Unknown method, guessing 7 arguments
    External (M098, IntObj)
    External (M099, IntObj)
    External (M101, IntObj)
    External (M102, IntObj)
    External (M103, IntObj)
    External (M104, IntObj)
    External (M111, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (M112, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (M113, MethodObj)    // Warning: Unknown method, guessing 4 arguments
    External (M131, IntObj)
    External (M133, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (M232, MethodObj)    // Warning: Unknown method, guessing 7 arguments
    External (M449, IntObj)

    Scope (\_SB)
    {
        Name (MACO, Zero)
    }

    Scope (\_SB.PCI0.GP17.VGA)
    {
        Name (M189, Buffer (0x0100) {})
        Name (M190, Ones)
        Name (M191, Ones)
        Method (ATPX, 2, Serialized)
        {
            If ((Arg0 == Zero))
            {
                Return (PX00 ())
            }

            If ((Arg0 == One))
            {
                Return (PX01 ())
            }

            If ((Arg0 == 0x02))
            {
                PX02 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
            }

            If ((Arg0 == 0x03))
            {
                PX03 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
            }

            If ((Arg0 == 0x04))
            {
                PX04 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
            }

            If ((Arg0 == 0x08))
            {
                Return (PX08 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (PX09 ())
            }

            If ((Arg0 == 0x0A))
            {
                PX10 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
            }

            If ((Arg0 == 0x0B))
            {
                PX11 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
            }

            CreateWordField (M189, Zero, M157)
            CreateWordField (M189, 0x02, M158)
            CreateDWordField (M189, 0x04, M160)
            M157 = Zero
            M158 = Zero
            M160 = Zero
            Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
        }

        Method (PX00, 0, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateWordField (M189, 0x02, M158)
            CreateDWordField (M189, 0x04, M160)
            M157 = 0x08
            M158 = One
            M160 = M098 /* External reference */
            If (M098)
            {
                Local5 = 0x7FFFFFFF
                Local5 |= 0x80000000
                Store (M019 (M095 (M094 (M093 (0x2C, Local0), Store (M019 (M095 (M094 (
                    Local1 = (M093 (One, Zero) + 0x2C), If ((Local0 != Local5))
                                                {
                                                    M190 = Local0
                                                }, If ((Local1 != Local5))
                                                {
                                                    M191 = Local1
                                                }), Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */)))))
            }
        }

        Method (PX01, 0, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateDWordField (M189, 0x02, M161)
            CreateDWordField (M189, 0x06, M162)
            M157 = 0x0A
            M161 = 0x0003FC80
            M162 = M099 /* External reference */
            Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
        }

        Method (PX02, 1, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateByteField (M189, 0x02, M192)
            M157 = 0x03
            M192 = (Arg0 & One)
            Local7 = Buffer (0x05) {}
            CreateWordField (Local7, Zero, M197)
            CreateField (Local7, 0x10, 0x03, M200)
            CreateField (Local7, 0x13, 0x05, M199)
            CreateByteField (Local7, 0x03, M198)
            CreateByteField (Local7, 0x04, M201)
            M197 = 0x05
            M198 = Zero
            M199 = M091 /* External reference */
            M200 = M090 /* External reference */
            Name (HPOK, Zero)
            M133 (0x11, Local0) = M049 /* External reference */
            Store (M113 (Local0, Local6, M023 (Zero, M091, M090), If ((M192 && Local6))
                    {
                        M000 (0x86)
                        M112 (Local0, Zero)
                        M111 (Local0, One)
                        Sleep (0x20)
                        M112 (Local0, 0x02)
                        M112 (Local0, One)
                        M000 (0x87)
                        HPOK = Zero
                        Sleep (0x14)
                        M201 = One
                        0x06 = \_SB.ALIB /* External reference */
                        Local7
                        Local6
                        Local2 = Zero
                        While ((Local2 < 0x0F))
                        {
                            M023 (Zero, M091, M090)
                            Local4 = One
                            Local5 = 0xC8
                            While ((Local4 && Local5))
                            {
                                0xA5 = M021 (Zero, M091, M090)
                                Local0
                                Local0 &= 0x7F
                                If (((Local0 >= 0x10) && (Local0 != 0x7F)))
                                {
                                    Local4 = Zero
                                }
                                Else
                                {
                                    Sleep (0x05)
                                    Local5--
                                }
                            }

                            If (!Local4)
                            {
                                M090 = M024 (Zero, M091)
                                Local5
                                If (Local5)
                                {
                                    M026 (Zero, M091, M090)
                                    Sleep (0x05)
                                    Local2++
                                }
                                Else
                                {
                                    Local0 = Zero
                                    If ((M025 == Zero))
                                    {
                                        M091
                                        M090
                                        Zero
                                        Ones
                                        Local0 = One
                                    }

                                    If (Local0)
                                    {
                                        M111 (M049, M133 (0x17, One))
                                        M111 (M049, M133 (0x18, One))
                                        HPOK = One
                                        Local2 = 0x10
                                    }
                                    Else
                                    {
                                        HPOK = Zero
                                        Local2 = 0x10
                                    }
                                }
                            }
                            Else
                            {
                                Local2 = 0x10
                            }
                        }

                        If (!HPOK)
                        {
                            M000 (0x88)
                            Store (M019 (M095 (M094 (M093 (Zero, Local1), Sleep (0x0A), Local4 = One), 
                                Local5 = 0x05, While ((Local4 && Local5))
                                        {
                                            0xA5 = M021 (Zero, M091, M090)
                                            Local0
                                            Local0 &= 0x7F
                                            If (((Local0 <= 0x04) || (Local0 == 0x1F)))
                                            {
                                                Local4 = Zero
                                            }
                                            Else
                                            {
                                                Store (M019 (M095 (M094 (M093 (Zero, Local0), Sleep (0x05), Local5--), 
                                                    M201 = Zero, \_SB.ALIB, 0x06), Local7, If ((M097 (Zero, 0x54 = M019 (
                                                    Zero, M091, M090), Local0, M020 (Zero, M091, M090, 0x54, (Local0 & 0xFFFF7FFC)), 
                                                    M232 (M097 (Zero, 0x10, M020 (Zero, M091, M090, 0x54, (Local0 & 0xFFFF7FFF)), 
                                                    M000 (0x89), Else
                                                                                {
                                                                                    M000 (0x8A)
                                                                                    M201 = Zero
                                                                                    \_SB.ALIB
                                                                                    0x06
                                                                                    Local7
                                                                                    M000 (0x8B)
                                                                                    M111 (M049, M133 (0x17, Zero))
                                                                                    M111 (M049, M133 (0x18, Zero))
                                                                                    M112 (Local0, Zero)
                                                                                    Sleep (0x0A)
                                                                                    M111 (Local0, Zero)
                                                                                    M023 (Zero, M091, M090)
                                                                                    Store (M019 (M095 (M094 (M093 (Zero, Local1), Sleep (0x0A), Local4 = One), 
                                                                                        Local5 = 0x05, While ((Local4 && Local5))
                                                                                                {
                                                                                                    0xA5 = M021 (Zero, M091, M090)
                                                                                                    Local0
                                                                                                    Local0 &= 0x7F
                                                                                                    If (((Local0 <= 0x04) || (Local0 == 0x1F)))
                                                                                                    {
                                                                                                        Local4 = Zero
                                                                                                    }
                                                                                                    Else
                                                                                                    {
                                                                                                        Store (M019 (M095 (M094 (M093 (Zero, Local1), Sleep (0x05), Local5--), 
                                                                                                            HPOK = 0x02, M000 (0x8C), If (HPOK)
                                                                                                                    {
                                                                                                                        Local5 = 0x7FFFFFFF
                                                                                                                        Local5 |= 0x80000000
                                                                                                                        0x54 = M019 (Zero, M091, M090)
                                                                                                                        Local1
                                                                                                                        M020 (Zero, M091, M090, 0x54, (Local1 & 0xFFFF7FFC))
                                                                                                                        Store (M019 (M095 (M094 (M093 (Zero, Local0), If (((HPOK == One) && 
                                                                                                                            (Local0 != Local5)))
                                                                                                                                        {
                                                                                                                                            M020 (M095 (M094 (M093 (0x4C, M190), Sleep (0x0A), If ((M191 != 
                                                                                                                                                Local5))
                                                                                                                                                        {
                                                                                                                                                            M020 (M095 (M094 (M191 = (M093 (One, Zero) + 0x4C), Sleep (0x0A), M020 (
                                                                                                                                                                Zero, M091, M090, 0x54, (Local1 & 0xFFFF7FFF)))))
                                                                                                                                                        })))
                                                                                                                                        })))
                                                                                                                    }))
                                                                                                    }
                                                                                                }))
                                                                                }))) != )) {})
                                            }
                                        }))
                        }
                    })
        }

        Method (PX03, 1, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateWordField (M189, 0x02, M195)
            M157 = 0x04
            M195 = (Arg0 & One)
            If (M195)
            {
                M111 (M049, M133 (0x17, One))
            }
            Else
            {
                M111 (M049, M133 (0x17, Zero))
            }
        }

        Method (PX04, 1, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateWordField (M189, 0x02, M196)
            M157 = 0x04
            M196 = (Arg0 & One)
            If (M196)
            {
                M111 (M049, M133 (0x18, One))
            }
            Else
            {
                M111 (M049, M133 (0x18, Zero))
            }
        }

        Method (PX08, 0, NotSerialized)
        {
            CreateWordField (M189, Zero, M193)
            CreateWordField (M189, 0x02, M157)
            M133 (0x19, Local0) = M049 /* External reference */
            M193 = Local0
            M157 = 0x05
            Local0 *= M157 /* \_SB_.PCI0.GP17.VGA_.PX08.M157 */
            Local1 = Zero
            While ((Local1 < Local0))
            {
                M133 ((0x1A + Local1), Local2) = M049 /* External reference */
                M189 [(0x04 + Local1)] = Local2
                Local1++
            }

            Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
        }

        Method (PX09, 0, NotSerialized)
        {
            CreateWordField (M189, Zero, M193)
            CreateWordField (M189, 0x02, M157)
            M133 (0x7E, Local0) = M049 /* External reference */
            M193 = Local0
            M157 = 0x03
            Local0 *= M157 /* \_SB_.PCI0.GP17.VGA_.PX09.M157 */
            Local1 = Zero
            While ((Local1 < Local0))
            {
                M133 ((0x7F + Local1), Local2) = M049 /* External reference */
                M189 [(0x04 + Local1)] = Local2
                Local1++
            }

            Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
        }

        Method (PX10, 1, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateByteField (M189, 0x02, M192)
            M157 = 0x03
            M192 = (Arg0 & One)
            \_SB.MACO = (Arg0 & One)
        }

        Method (PX11, 1, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateByteField (M189, 0x02, M162)
            M157 = 0x03
            M162 = (Arg0 & One)
            Local2 = M162 /* \_SB_.PCI0.GP17.VGA_.PX11.M162 */
            Local0 = M131 /* External reference */
            If (Local0)
            {
                M131 = M049 /* External reference */
                0x10
                Local0
                M131 = M049 /* External reference */
                0x11
                Local1
                Local1 = (M084 + ((Local0 * 0x0100) + Local1))
                M012 (Local1, 0x0E, Zero, One, Local2)
            }
        }

        Name (ATIB, Buffer (0x0100) {})
        Method (ATIF, 2, Serialized)
        {
            If ((Arg0 == Zero))
            {
                Return (AF00 ())
            }

            If ((Arg0 == One))
            {
                Return (AF01 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (AF02 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (AF03 (DerefOf (Arg1 [0x02]), DerefOf (Arg1 [0x04])))
            }

            If ((Arg0 == 0x04))
            {
                Return (AF04 ())
            }

            If ((Arg0 == 0x0F))
            {
                Return (AF15 ())
            }

            If ((Arg0 == 0x10))
            {
                Return (AF16 (DerefOf (Arg1 [0x02])))
            }

            If ((Arg0 == 0x17))
            {
                Return (AF23 ())
            }
            Else
            {
                CreateWordField (ATIB, Zero, M157)
                CreateWordField (ATIB, 0x02, M158)
                CreateDWordField (ATIB, 0x04, M159)
                CreateDWordField (ATIB, 0x08, M160)
                M157 = Zero
                M158 = Zero
                M159 = Zero
                M160 = Zero
                Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
            }
        }

        Method (AF00, 0, NotSerialized)
        {
            CreateWordField (ATIB, Zero, M157)
            CreateWordField (ATIB, 0x02, M158)
            CreateDWordField (ATIB, 0x04, M159)
            CreateDWordField (ATIB, 0x08, M160)
            M157 = 0x0C
            M158 = One
            M159 = M101 /* External reference */
            If (!CondRefOf (\_SB.LID._LID))
            {
                M102 &= 0xFFFFFFF7
            }

            M160 = M102 /* External reference */
            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AF01, 0, NotSerialized)
        {
            CreateWordField (ATIB, Zero, M157)
            CreateDWordField (ATIB, 0x02, M161)
            CreateDWordField (ATIB, 0x06, M162)
            CreateByteField (ATIB, 0x0A, M163)
            Local0 = (M103 & 0xFF000000)
            Local1 = (M103 & 0x03)
            If ((Local1 == 0x02))
            {
                M157 = 0x0B
                M161 = 0x03
                M162 = Local1
                M163 = Local0
            }
            Else
            {
                M157 = 0x0A
                M161 = 0x03
                M162 = M103 /* External reference */
            }

            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Name (M164, Buffer (0x04)
        {
             0x00, 0x00, 0x00, 0x00                           // ....
        })
        Name (M210, Zero)
        Name (M211, Zero)
        Name (M212, Zero)
        Name (M213, Zero)
        Name (M214, Zero)
        Name (M215, Zero)
        Name (M303, Zero)
        Name (M304, Zero)
        Name (SSDM, 0x0A)
        Name (SCDY, Zero)
        Method (AF02, 0, NotSerialized)
        {
            CreateBitField (M164, Zero, M165)
            CreateBitField (M164, One, M166)
            CreateBitField (M164, 0x02, M167)
            CreateBitField (M164, 0x03, M168)
            CreateBitField (M164, 0x04, M169)
            CreateBitField (M164, 0x05, M170)
            CreateBitField (M164, 0x06, M171)
            CreateBitField (M164, 0x07, M172)
            CreateBitField (M164, 0x08, M173)
            CreateBitField (M164, 0x0C, M300)
            CreateWordField (ATIB, Zero, M157)
            CreateDWordField (ATIB, 0x02, M174)
            CreateByteField (ATIB, 0x06, M175)
            CreateByteField (ATIB, 0x07, M176)
            CreateByteField (ATIB, 0x08, M177)
            CreateByteField (ATIB, 0x09, M178)
            CreateByteField (ATIB, 0x0A, M179)
            CreateByteField (ATIB, 0x0B, M180)
            CreateByteField (ATIB, 0x0C, M181)
            CreateByteField (ATIB, 0x0D, M301)
            CreateDWordField (ATIB, 0x0E, M302)
            M157 = 0x12
            M174 = M164 /* \_SB_.PCI0.GP17.VGA_.M164 */
            If (M165)
            {
                M165 = Zero
            }

            If (M166)
            {
                M175 = M210 /* \_SB_.PCI0.GP17.VGA_.M210 */
                M210 = Zero
                M166 = Zero
            }

            If (M167)
            {
                M176 = M211 /* \_SB_.PCI0.GP17.VGA_.M211 */
                M177 = M212 /* \_SB_.PCI0.GP17.VGA_.M212 */
                M211 = Zero
                M212 = Zero
                M167 = Zero
            }

            If (M168)
            {
                M178 = M213 /* \_SB_.PCI0.GP17.VGA_.M213 */
                M179 = M214 /* \_SB_.PCI0.GP17.VGA_.M214 */
                M213 = Zero
                M214 = Zero
                M168 = Zero
            }

            If (M169)
            {
                M180 = M215 /* \_SB_.PCI0.GP17.VGA_.M215 */
                M169 = Zero
            }

            If (M171)
            {
                M171 = Zero
            }

            If (M172)
            {
                M172 = Zero
            }

            If (M173)
            {
                M173 = Zero
            }

            If (M300)
            {
                M301 = M303 /* \_SB_.PCI0.GP17.VGA_.M303 */
                M302 = M304 /* \_SB_.PCI0.GP17.VGA_.M304 */
                M303 = Zero
                M304 = Zero
                M300 = Zero
            }

            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AF03, 2, NotSerialized)
        {
            CreateWordField (ATIB, Zero, M157)
            CreateWordField (ATIB, 0x02, M182)
            CreateWordField (ATIB, 0x04, M183)
            M182 = Arg0
            M183 = Arg1
            Name (M184, 0x06)
            Name (M185, 0x06)
            Name (M186, Buffer (0x14)
            {
                 0x00                                             // .
            })
            Name (M187, Zero)
            M133 (0xBF, M187) = M049 /* External reference */
            Local1 = Zero
            While ((Local1 < M187))
            {
                M133 ((0xC0 + Local1), Local2) = M049 /* External reference */
                M186 [Local1] = Local2
                Local1++
            }

            Local1 = M182 /* \_SB_.PCI0.GP17.VGA_.AF03.M182 */
            Local1 &= 0x8B
            Local2 = M183 /* \_SB_.PCI0.GP17.VGA_.AF03.M183 */
            If (CondRefOf (\_SB.LID._LID))
            {
                Local0 = \_SB.LID._LID /* External reference */
                Local2 &= 0xFFFFFFFE
                Local2 |= Local0
            }

            Local0 = Zero
            While ((Local0 < M187))
            {
                Local3 = DerefOf (M186 [Local0])
                If ((Local3 == Local1))
                {
                    M185 = Local0
                    Local0 = M187 /* \_SB_.PCI0.GP17.VGA_.AF03.M187 */
                }
                Else
                {
                    Local0++
                }
            }

            Local0 = M185 /* \_SB_.PCI0.GP17.VGA_.AF03.M185 */
            While ((Local0 < M187))
            {
                Local0++
                If ((Local0 == M187))
                {
                    Local0 = Zero
                }

                Local3 = DerefOf (M186 [Local0])
                If (((Local3 & Local2) == Local3))
                {
                    M184 = Local0
                    Local0 = M187 /* \_SB_.PCI0.GP17.VGA_.AF03.M187 */
                }
            }

            If ((M184 == M187))
            {
                M182 = Zero
            }
            Else
            {
                Local0 = M184 /* \_SB_.PCI0.GP17.VGA_.AF03.M184 */
                Local3 = DerefOf (M186 [Local0])
                M182 &= 0xFFFFFFF4
                M182 |= Local3
            }

            M157 = 0x04
            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AF04, 0, NotSerialized)
        {
            CreateWordField (ATIB, Zero, M157)
            CreateByteField (ATIB, 0x02, M188)
            M157 = 0x03
            Local1 = Zero
            If (CondRefOf (\_SB.LID._LID))
            {
                Local0 = \_SB.LID._LID /* External reference */
                Local1 = (Local0 ^ One)
            }

            M188 = Local1
            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AF15, 0, NotSerialized)
        {
            ATIB = M104 /* External reference */
            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AF16, 1, NotSerialized)
        {
            If (Local0)
                {
                    Local1 = Zero
                    While ((Local1 < Local0))
                    {
                        M133 ((0xD4 + Local1), Local2) = M049 /* External reference */
                        ATIB [Local1] = Local2
                        Local1++
                    }
                } = M013 (M133 (0xD4, Zero), 0x10, Local0)
            Else
            {
                 = M043 (Zero, Arg0)
                Local3
                If ((ObjectType (Local3) == 0x03))
                {
                    ATIB = Local3
                }
                Else
                {
                    ATIB [Zero] = 0x05
                    ATIB [One] = Zero
                    ATIB [0x02] = Zero
                    ATIB [0x03] = Zero
                    ATIB [0x04] = 0x02
                }
            }

            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AF23, 0, NotSerialized)
        {
            ATIB = M449 /* External reference */
            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AFN0, 0, Serialized)
        {
            If ((M101 & One))
            {
                CreateBitField (M164, Zero, M165)
                M165 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN1, 1, Serialized)
        {
            If ((M101 & 0x02))
            {
                Local0 = Arg0
                M210 = Local0
                CreateBitField (M164, One, M166)
                M166 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN2, 2, Serialized)
        {
            If ((M101 & 0x04))
            {
                Local0 = Arg0
                M212 = Local0
                Local0 = Arg1
                M211 = Local0 &= 0x03
                CreateBitField (M164, 0x02, M167)
                M167 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN3, 2, Serialized)
        {
            If ((M101 & 0x08))
            {
                Local0 = Arg0
                M214 = Local0
                Local0 = Arg1
                M213 = Local0 &= 0x03
                CreateBitField (M164, 0x03, M168)
                M168 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN4, 1, Serialized)
        {
            If ((M101 & 0x10))
            {
                Local0 = Arg0
                Local1 = M215 /* \_SB_.PCI0.GP17.VGA_.M215 */
                M215 = Local0
                If ((Local0 == Local1)) {}
                Else
                {
                    CreateBitField (M164, 0x04, M169)
                    M169 = One
                    Notify (VGA, 0x81) // Information Change
                }
            }
        }

        Method (AFN5, 0, Serialized)
        {
            If ((M101 & 0x20))
            {
                CreateBitField (M164, 0x05, M170)
                M170 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN6, 0, Serialized)
        {
            If ((M101 & 0x40))
            {
                CreateBitField (M164, 0x06, M171)
                M171 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN7, 1, Serialized)
        {
            If ((M101 & 0x80))
            {
                CreateBitField (M164, 0x07, M172)
                M172 = One
                CreateByteField (ATIB, 0x0C, M181)
                M181 = Arg0
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN8, 0, Serialized)
        {
            If ((M101 & 0x0100))
            {
                CreateBitField (M164, 0x08, M173)
                M173 = One
            }
        }

        Method (AFNC, 2, Serialized)
        {
            If ((M101 & 0x1000))
            {
                Local0 = (Arg0 & 0x03)
                M303 = Local0
                Local0 = (Arg1 & Ones)
                M304 = Local0
                CreateBitField (M164, 0x0C, M300)
                M300 = One
                Notify (VGA, 0x81) // Information Change
            }
        }
    }
}



SSDT7
-----
DefinitionBlock ("", "SSDT", 1, "LENOVO", "CB-01   ", 0x00000001)
{
    Scope (\_SB)
    {
        Name (MDSZ, 0x01E0)
        OperationRegion (PDSP, SystemIO, 0xB0, One)
        Field (PDSP, ByteAcc, NoLock, Preserve)
        {
            IOB2,   8
        }

        OperationRegion (GPCD, SystemMemory, 0xCCAA4000, 0x0200)
        Field (GPCD, AnyAcc, NoLock, Preserve)
        {
            DTSZ,   32, 
            TKNO,   32, 
            PTYP,   8, 
            I_PS,   8, 
            PACT,   8, 
            RSVD,   40, 
            PGUI,   128, 
            DBUF,   3840
        }

        Method (PCDE, 2, Serialized)
        {
            PGUI = Arg0
            TKNO = Arg1
            Local0 = Zero
            IOB2 = 0x17
            If ((I_PS == Zero))
            {
                If ((DTSZ <= MDSZ))
                {
                    Mid (DBUF, Zero, DTSZ, Local0)
                }
            }

            Return (Local0)
        }

        Method (HBID, 0, NotSerialized)
        {
            Local0 = \_SB.PCDE (Buffer (0x10)
                    {
                        /* 0000 */  0x83, 0x18, 0x1F, 0xC5, 0x00, 0xDF, 0x6A, 0x4F,  // ......jO
                        /* 0008 */  0x08, 0xA0, 0x36, 0x9F, 0x60, 0x98, 0xFD, 0xAF   // ..6.`...
                    }, 0x20000032)
            Return (Local0)
        }
    }
}



SSDT8
-----
DefinitionBlock ("", "SSDT", 1, "LENOVO", "CB-01   ", 0x00000001)
{
    /*
     * iASL Warning: There were 3 external control methods found during
     * disassembly, but only 0 were resolved (3 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_SB_.PCI0.GPP6.WLAN, DeviceObj)
    External (M000, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (M049, MethodObj)    // Warning: Unknown method, guessing 4 arguments
    External (M112, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (M290, UnknownObj)

    Scope (\_SB.PCI0.GPP6.WLAN)
    {
        Name (_PRR, Package (0x01)  // _PRR: Power Resource for Reset
        {
            \_SB.PRWL
        })
        Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
        {
            Return (Zero)
        }
    }

    Scope (\_SB)
    {
        Name (WLPS, One)
        PowerResource (PRWL, 0x00, 0x0000)
        {
            Method (_RST, 0, NotSerialized)  // _RST: Device Reset
            {
                M000 (0xC2)
                Sleep (0xC8) = M049 (M290, 0x13, Local0, M112 (Local0, Zero))
                M112 (Local0, One)
                M000 (0xC3)
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (WLPS) /* \_SB_.WLPS */
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
                WLPS = One
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
                WLPS = Zero
            }
        }
    }
}



SSDT9
-----
DefinitionBlock ("", "SSDT", 1, "LENOVO", "CB-01   ", 0x00000001)
{
    External (_SB_.PCI0.GP18.SATA, DeviceObj)

    Scope (\_SB.PCI0.GP18.SATA)
    {
        Device (PRT0)
        {
            Name (_ADR, 0xFFFF)  // _ADR: Address
            Name (NOP, Buffer (0x07)
            {
                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00         // .......
            })
            Name (SGTF, Buffer (0x07)
            {
                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF5         // .......
            })
            Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
            {
                If (Zero)
                {
                    Return (SGTF) /* \_SB_.PCI0.GP18.SATA.PRT0.SGTF */
                }
                Else
                {
                    Return (NOP) /* \_SB_.PCI0.GP18.SATA.PRT0.NOP_ */
                }
            }
        }
    }
}



TPM2
----
[000h 0000   4]                    Signature : "TPM2"    [Trusted Platform Module hardware interface Table]
[004h 0004   4]                 Table Length : 0000004C
[008h 0008   1]                     Revision : 04
[009h 0009   1]                     Checksum : 04
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "CB-01   "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "ACPI"
[020h 0032   4]        Asl Compiler Revision : 00040000

[024h 0036   2]               Platform Class : 0000
[026h 0038   2]                     Reserved : 0000
[028h 0040   8]              Control Address : 00000000FDE10510
[030h 0048   4]                 Start Method : 02 [ACPI Start Method]

[034h 0052  12]            Method Parameters : 00 00 00 00 00 00 00 00 00 00 00 00
[040h 0064   4]           Minimum Log Length : 00010000
[044h 0068   8]                  Log Address : 00000000B5760000

Raw Table Data: Length 76 (0x4C)

    0000: 54 50 4D 32 4C 00 00 00 04 04 4C 45 4E 4F 56 4F  // TPM2L.....LENOVO
    0010: 43 42 2D 30 31 20 20 20 01 00 00 00 41 43 50 49  // CB-01   ....ACPI
    0020: 00 00 04 00 00 00 00 00 10 05 E1 FD 00 00 00 00  // ................
    0030: 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0040: 00 00 01 00 00 00 76 B5 00 00 00 00              // ......v.....


UEFI
----
[000h 0000   4]                    Signature : "UEFI"    [UEFI Boot Optimization Table]
[004h 0004   4]                 Table Length : 00000236
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 12
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "CB-01   "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "ACPI"
[020h 0032   4]        Asl Compiler Revision : 00040000

[024h 0036  16]              UUID Identifier : 9D4BF935-A674-4710-BA02-BF0AA1758C7B
[034h 0052   2]                  Data Offset : 0036

Raw Table Data: Length 566 (0x236)

    0000: 55 45 46 49 36 02 00 00 01 12 4C 45 4E 4F 56 4F  // UEFI6.....LENOVO
    0010: 43 42 2D 30 31 20 20 20 01 00 00 00 41 43 50 49  // CB-01   ....ACPI
    0020: 00 00 04 00 35 F9 4B 9D 74 A6 10 47 BA 02 BF 0A  // ....5.K.t..G....
    0030: A1 75 8C 7B 36 00 24 42 56 44 54 24 00 00 00 24  // .u.{6.$BVDT$...$
    0040: 00 00 00 24 48 36 43 4E 31 31 57 57 28 56 31 2E  // ...$H6CN11WW(V1.
    0050: 30 34 29 00 00 00 00 00 00 00 00 00 24 47 4C 43  // 04).........$GLC
    0060: 33 42 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // 3B..............
    0070: 00 00 00 00 00 00 24 30 35 2E 34 32 2E 33 37 00  // ......$05.42.37.
    0080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0090: 00 00 00 00 00 00 00 00 00 00 00 00 FF FF FF FF  // ................
    00A0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    00B0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    00C0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    00D0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    00E0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    00F0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0100: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0110: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0120: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0130: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0140: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0150: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0160: FF FF FF FF FF 24 42 4D 45 24 00 90 EA 00 00 10  // .....$BME$......
    0170: 00 00 24 00 00 00 01 00 00 00 00 24 00 FF FF FF  // ..$........$....
    0180: FF FF FF FF FF 24 5F 4D 53 43 5F 56 45 52 3D 40  // .....$_MSC_VER=@
    0190: 06 24 52 44 41 54 45 21 07 07 24 45 53 52 54 11  // .$RDATE!..$ESRT.
    01A0: 40 32 60 5B 0D 76 EC 0C 5A 91 4B A4 27 FC 15 D0  // @2`[.v..Z.K.'...
    01B0: 58 1D F9 8B 01 00 00 24 45 4E 44 4F 46 42 56 44  // X......$ENDOFBVD
    01C0: 54 FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // T...............
    01D0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    01E0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    01F0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0200: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0210: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0220: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0230: FF FF FF FF FF FF                                // ......


VFCT
----
[000h 0000   4]                    Signature : "VFCT"    
[004h 0004   4]                 Table Length : 0000D884
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : E2
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "CB-01   "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "ACPI"
[020h 0032   4]        Asl Compiler Revision : 00040000


**** Unknown ACPI table signature [VFCT]


Raw Table Data: Length 55428 (0xD884)

    0000: 56 46 43 54 84 D8 00 00 01 E2 4C 45 4E 4F 56 4F  // VFCT......LENOVO
    0010: 43 42 2D 30 31 20 20 20 01 00 00 00 41 43 50 49  // CB-01   ....ACPI
    0020: 00 00 04 00 32 9B A3 5D BD C6 CF 49 95 A6 E8 E4  // ....2..]...I....
    0030: 2E CD 79 A7 4C 00 00 00 00 00 00 00 00 00 00 00  // ..y.L...........
    0040: 00 00 00 00 00 00 00 00 00 00 00 00 03 00 00 00  // ................
    0050: 00 00 00 00 00 00 00 00 02 10 4C 16 00 00 00 00  // ..........L.....
    0060: 01 00 00 00 00 D8 00 00 55 AA 6C E9 03 02 00 00  // ........U.l.....
    0070: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0080: B4 01 00 00 00 00 49 42 4D 4C B2 90 00 00 00 00  // ......IBML......
    0090: 00 00 00 00 00 00 00 04 20 37 36 31 32 39 35 35  // ........ 7612955
    00A0: 32 30 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // 20..............
    00B0: 8A 01 00 00 00 00 00 00 30 32 2F 32 38 2F 32 31  // ........02/28/21
    00C0: 2C 30 38 3A 35 39 3A 35 35 00 00 00 E9 33 03 00  // ,08:59:55....3..
    00D0: E9 3D 03 00 00 00 70 00 31 31 33 2D 4C 55 43 49  // .=....p.113-LUCI
    00E0: 45 4E 4E 45 2D 30 31 36 00 52 45 4E 4F 49 52 00  // ENNE-016.RENOIR.
    00F0: 50 43 49 5F 45 58 50 52 45 53 53 00 30 00 0D 0A  // PCI_EXPRESS.0...
    0100: 4C 75 63 69 65 6E 6E 65 20 47 65 6E 65 72 69 63  // Lucienne Generic
    0110: 20 56 42 49 4F 53 20 20 20 20 20 20 20 20 20 20  //  VBIOS          
    0120: 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20  //                 
    0130: 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20  //                 
    0140: 20 20 20 20 20 20 20 20 20 20 20 20 0D 0A 00 0D  //             ....
    0150: 0A 20 0D 0A 00 28 43 29 20 31 39 38 38 2D 32 30  // . ...(C) 1988-20
    0160: 31 38 2C 20 41 64 76 61 6E 63 65 64 20 4D 69 63  // 18, Advanced Mic
    0170: 72 6F 20 44 65 76 69 63 65 73 2C 20 49 6E 63 2E  // ro Devices, Inc.
    0180: 00 41 54 4F 4D 42 49 4F 53 42 4B 2D 41 4D 44 20  // .ATOMBIOSBK-AMD 
    0190: 56 45 52 30 31 37 2E 30 31 30 2E 30 30 30 2E 30  // VER017.010.000.0
    01A0: 32 39 2E 30 30 30 30 30 30 00 4C 43 4E 47 65 6E  // 29.000000.LCNGen
    01B0: 65 72 69 63 56 62 00 32 32 36 37 36 32 36 20 00  // ericVb.2267626 .
    01C0: 35 35 34 30 32 32 20 20 00 20 20 20 20 20 20 20  // 554022  .       
    01D0: 20 00 41 4D 44 5F 4C 55 43 49 45 4E 4E 45 5F 47  //  .AMD_LUCIENNE_G
    01E0: 45 4E 45 52 49 43 5C 63 6F 6E 66 69 67 2E 68 00  // ENERIC\config.h.
    01F0: 00 00 28 00 02 02 41 54 4F 4D 00 C0 06 03 42 01  // ..(...ATOM....B.
    0200: D9 01 96 00 78 03 00 00 00 00 02 10 02 10 B4 01  // ....x...........
    0210: FE 93 A4 94 00 00 00 00 00 00 00 00 50 43 49 52  // ............PCIR
    0220: 02 10 4C 16 00 00 18 00 00 00 00 03 6C 00 0A 11  // ..L.........l...
    0230: 00 80 00 00 41 4D 44 20 41 54 4F 4D 42 49 4F 53  // ....AMD ATOMBIOS
    0240: 00 A4 49 9B E5 00 00 00 00 00 00 00 00 00 00 00  // ..I.............
    0250: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0260: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0270: 00 1E 06 66 50 66 51 66 52 66 53 66 55 66 56 66  // ...fPfQfRfSfUfVf
    0280: 57 0E 1F A3 14 00 8C 0E 08 00 B2 20 E8 AB 2F 0B  // W.......... ../.
    0290: C0 75 14 A2 02 00 66 5F 66 5E 66 5D 66 5B 66 5A  // .u....f_f^f]f[fZ
    02A0: 66 59 66 58 07 1F CB E8 C5 30 E8 F3 00 E8 94 2E  // fYfX.....0......
    02B0: 32 D2 8D 3E 8A 01 89 55 16 E8 81 11 E8 44 11 E8  // 2..>...U.....D..
    02C0: 9B 12 E8 EC 02 E8 C5 28 0B C0 74 0C E8 39 00 E8  // .......(..t..9..
    02D0: 9C 56 E8 40 11 E8 EB 56 E8 A9 00 B4 80 E8 8E 2E  // .V.@...V........
    02E0: 8A C7 66 C1 E0 10 8A E3 B0 20 66 A3 B2 90 E8 EB  // ..f...... f.....
    02F0: 02 E8 53 11 E8 BB 30 66 5F 66 5E 66 5D 66 5B 66  // ..S...0f_f^f]f[f
    0300: 5A 66 59 66 58 07 1F CB 2E 8B 1E 08 00 83 3E 18  // ZfYfX.........>.
    0310: 03 00 75 04 89 1E 16 03 1E 2E 8E 1E 0E 03 9C FA  // ..u.............
    0320: 66 C7 06 08 01 65 F0 00 F0 C7 06 40 00 78 03 89  // f....e.....@.x..
    0330: 1E 42 00 C7 06 B4 01 78 03 89 1E B6 01 C7 06 7C  // .B.....x.......|
    0340: 00 94 5E 89 1E 7E 00 C7 06 0C 01 A7 62 89 1E 0E  // ..^..~......b...
    0350: 01 C7 06 A8 04 CC 58 89 1E AA 04 2E 8E 1E 16 03  // ......X.........
    0360: 8B C3 A3 CE 58 A3 DE 58 A3 F0 58 9D 1F C3 50 4D  // ....X..X..X...PM
    0370: 49 44 78 03 FE 48 00 00 00 A0 00 B0 00 B8 00 C0  // IDx..H..........
    0380: 00 00 00 00 BB 00 00 E8 A6 10 66 C1 E8 10 A3 BA  // ..........f.....
    0390: 01 BB 0B 00 E8 99 10 8D 3E 8A 01 66 89 45 18 C3  // ........>..f.E..
    03A0: 66 50 66 52 51 56 66 B8 52 54 53 5F BA 80 00 66  // fPfRQVf.RTS_...f
    03B0: EF B0 56 EE B0 42 EE B0 49 EE B0 4F EE B0 53 EE  // ..V..B..I..O..S.
    03C0: B0 20 EE BE 28 01 B9 19 00 AC E6 80 E2 FB 66 B8  // . ..(.........f.
    03D0: 44 4E 45 5F BA 80 00 66 EF 5E 59 66 5A 66 58 C3  // DNE_...f.^YfZfX.
    03E0: E8 AA 2F 80 FC A0 75 05 E8 3D 00 EB 11 80 FC 4F  // ../...u..=.....O
    03F0: 75 05 E8 97 44 EB 07 E8 EC 49 EB 02 B4 01 E8 B1  // u...D....I......
    0400: 2F CF E8 88 2F E8 20 00 EB 02 B4 01 E8 A3 2F CB  // /.../. ......./.
    0410: E8 7A 2F 80 FC 4F 75 05 E8 71 44 EB 07 E8 C6 49  // .z/..Ou..qD....I
    0420: EB 02 B4 01 E8 8B 2F CB 1E 06 66 50 66 51 66 52  // ....../...fPfQfR
    0430: 66 53 66 55 66 56 66 57 0E 1F 3C 04 75 29 2E A1  // fSfUfVfW..<.u)..
    0440: 1A 00 66 C1 E0 10 2E A1 18 00 8D 36 97 00 8A 3C  // ..f........6...<
    0450: 80 EF 30 B3 02 8B EC 89 5E 0C 89 46 04 66 C1 E8  // ..0.....^..F.f..
    0460: 10 89 46 00 E9 28 01 3C 05 75 18 E8 00 2D E8 D3  // ..F..(.<.u...-..
    0470: 2C 2E A1 08 00 8B EC 89 56 10 89 46 00 89 5E 04  // ,.......V..F..^.
    0480: E9 0C 01 3C 06 75 32 E8 8E 0F 66 D1 E0 8B EC 89  // ...<.u2...f.....
    0490: 46 14 BB 02 00 E8 98 0F 88 46 18 E8 82 0F 66 89  // F........F....f.
    04A0: 46 0C BB 09 00 E8 88 0F 33 C0 66 89 46 00 2E 8B  // F.......3.f.F...
    04B0: 16 BA 01 89 56 10 E9 D6 00 3C 0B 75 24 0A DB 75  // ....V....<.u$..u
    04C0: 11 B9 80 00 BB 02 00 8B EC 89 5E 0C 89 4E 14 E9  // ..........^..N..
    04D0: BD 00 8A C7 E8 D0 00 E8 34 01 0F 84 A9 00 E9 AE  // ........4.......
    04E0: 00 3C 17 75 1D E8 37 12 74 06 E8 95 0D E8 1F 17  // .<.u..7.t.......
    04F0: E8 EE 09 E8 00 0F 33 C9 8B C8 8B EC 89 4E 14 E9  // ......3......N..
    0500: 8D 00 3C 18 75 45 0A FF 75 10 E8 BE 11 8B EC 89  // ..<.uE..u.......
    0510: 46 0C E8 3B 0A 89 4E 10 EB 75 E8 02 12 75 68 BB  // F..;..N..u...uh.
    0520: 00 1C E8 06 2E 66 0B C0 74 5D 23 C9 74 59 E8 D6  // .....f..t]#.tY..
    0530: 11 BE 00 1C E8 26 0F 74 4E BE 00 1C B0 40 E8 75  // .....&.tN....@.u
    0540: 0F E8 87 11 8B EC 89 46 0C EB 44 3C 82 75 1A 80  // .......F..D<.u..
    0550: FB 05 75 15 0A FF 75 0A E8 CB 10 8B EC 89 46 14  // ..u...u.......F.
    0560: EB 2D E8 98 10 74 18 EB 26 3C 8E 75 12 80 FF 01  // .-...t..&<.u....
    0570: 74 08 80 FF 02 75 08 80 C1 02 E8 F1 10 EB 10 8B  // t....u..........
    0580: EC C6 46 19 02 EB 0F 8B EC C6 46 19 01 EB 07 32  // ..F.......F....2
    0590: E4 8B EC 88 66 19 66 5F 66 5E 66 5D 66 5B 66 5A  // ....f.f_f^f]f[fZ
    05A0: 66 59 66 58 07 1F C3 51 8A C8 B8 01 00 D3 E0 59  // fYfX...Q.......Y
    05B0: C3 E8 24 2E C3 0C 01 C3 50 51 B0 B6 E6 43 B0 33  // ..$.....PQ...C.3
    05C0: E6 42 B0 05 E6 42 E4 61 8A E0 0C 03 E6 61 8A C4  // .B...B.a.....a..
    05D0: B9 C8 00 E8 33 29 E6 61 59 58 C3 00 1E 56 0E 1F  // ....3).aYX...V..
    05E0: 80 3E 02 00 80 76 05 C6 06 02 00 80 8A 0E 02 00  // .>...v..........
    05F0: C1 E1 09 FC C6 06 21 00 00 33 F6 32 E4 AC 02 E0  // ......!..3.2....
    0600: E2 FB F6 D4 FE C4 88 26 21 00 5E 1F C3 00 57 0B  // .......&!.^...W.
    0610: C0 75 0F E8 34 0C 74 25 E8 24 00 F6 C3 04 74 F3  // .u..4.t%.$....t.
    0620: EB 11 8B C8 E8 66 25 23 C1 74 12 E8 11 00 F6 C3  // .....f%#.t......
    0630: 04 74 0A 5F 8D 5C 28 E8 4C 06 0B F6 C3 5F C3 50  // .t._.\(.L...._.P
    0640: E8 E9 0B E8 B8 24 E8 C6 24 0A C9 74 69 0A ED 74  // .....$..$..ti..t
    0650: 10 8A CD B5 02 E8 34 28 B1 02 8D 9C 48 01 E8 6E  // ......4(....H..n
    0660: 2C E8 76 02 F6 C3 04 74 08 E8 FB 0C E8 29 23 74  // ,.v....t.....)#t
    0670: 45 8D 5C 28 E8 69 00 56 83 C6 08 E8 F5 22 5E 80  // E.\(.i.V....."^.
    0680: FD 02 75 11 51 E8 16 18 59 80 FB 00 75 4D 51 B5  // ..u.Q...Y...uMQ.
    0690: 08 E8 E8 05 59 8A DD 33 C9 E8 07 17 0A C0 75 3B  // ....Y..3......u;
    06A0: E8 37 02 8A EB 8D 5C 28 80 CD 02 E8 3B 00 74 03  // .7....\(....;.t.
    06B0: 80 CD 04 E8 C6 05 8D 9C A6 00 E8 6E 2C 0A C0 74  // ...........n,..t
    06C0: 1A 56 83 C6 08 E8 AB 22 5E 8A DD B9 80 00 E8 D2  // .V....."^.......
    06D0: 16 E8 D8 04 74 05 33 C9 E8 A1 05 E8 FC 01 58 C3  // ....t.3.......X.
    06E0: 51 B9 49 00 E8 D1 27 59 C3 51 E8 1A 00 75 14 E8  // Q.I...'Y.Q...u..
    06F0: B9 01 3C 01 75 0D B9 20 00 E8 27 00 75 05 80 C9  // ..<.u.. ..'.u...
    0700: 01 EB 02 33 C9 59 C3 53 E8 20 2C 66 3D 00 FF FF  // ...3.Y.S. ,f=...
    0710: FF 75 0E 83 C3 04 E8 12 2C 66 3D FF FF FF 00 75  // .u......,f=....u
    0720: 00 5B C3 50 52 32 D2 E8 01 2C 02 D0 02 D4 66 C1  // .[.PR2...,....f.
    0730: E8 10 02 D0 02 D4 83 C3 04 E2 EC 0A D2 5A 58 C3  // .............ZX.
    0740: E8 E9 0A 8D 9C 4C 01 E8 39 01 E8 8D 01 B5 13 F6  // .....L..9.......
    0750: C3 08 75 0C E8 10 0C 8A EA 80 FD 13 75 02 B5 03  // ..u.........u...
    0760: 66 50 8D 9C B8 02 66 33 C0 8A C5 E8 1D 2B 66 58  // fP....f3.....+fX
    0770: A9 C8 0E 74 55 E8 62 01 F6 C3 08 74 0F E8 0F 05  // ...tU.b....t....
    0780: 8D 5C 28 E8 04 01 75 04 E8 72 00 C3 B5 02 E8 23  // .\(...u..r.....#
    0790: 01 E8 46 01 F6 C3 04 74 21 8D 5C 28 E8 49 01 E8  // ..F....t!.\(.I..
    07A0: 94 03 74 05 B5 03 E8 0B 01 E8 68 04 E8 21 01 80  // ..t.......h..!..
    07B0: FD 00 75 48 B5 02 E8 0D 01 C3 8D 9C 68 01 B8 00  // ..uH........h...
    07C0: 55 E8 64 11 B5 02 E8 FD 00 C3 A9 02 00 74 2D B5  // U.d..........t-.
    07D0: 04 E8 E0 00 E8 03 01 F6 C3 08 74 03 E8 B0 04 8D  // ..........t.....
    07E0: 9C 68 01 56 E8 0B 29 8B F7 E8 68 04 5E E8 A8 28  // .h.V..)...h.^..(
    07F0: E8 D3 00 8D 5C 28 E8 C8 28 E8 18 04 C3 B5 01 E8  // ....\(..(.......
    0800: B2 00 B5 02 E8 BF 00 E8 D0 00 F6 C3 04 75 10 8D  // .............u..
    0810: 9C 68 01 B8 00 55 E8 0F 11 B5 02 E8 17 00 C3 E8  // .h...U..........
    0820: C6 00 B5 02 8D 5C 28 E8 6E 00 75 02 B5 01 E8 04  // .....\(.n.u.....
    0830: 00 E8 E0 03 C3 8D 9C B4 02 B1 02 E8 91 2A B5 02  // .............*..
    0840: E8 83 00 C3 8D 9C 4C 01 E8 38 00 E8 8C 00 F6 C3  // ......L..8......
    0850: 04 74 23 8D 5C 28 E8 8F 00 E8 96 28 8D 9C 68 01  // .t#.\(.....(..h.
    0860: 06 0E 07 B9 07 00 E8 89 26 07 E8 63 00 E8 F7 0A  // ........&..c....
    0870: 8D 5C 28 E8 87 28 8D 5C 28 E8 25 28 B8 02 00 E8  // .\(..(.\(.%(....
    0880: BE FE C3 B9 61 00 E8 2F 26 C3 53 81 C3 05 01 E8  // ....a../&.S.....
    0890: 99 2A 24 06 3C 02 5B C3 E8 10 00 3D 01 04 75 0A  // .*$.<.[....=..u.
    08A0: 53 83 C3 18 E8 84 2A 5B A8 01 C3 53 83 C3 12 E8  // S.....*[...S....
    08B0: 79 2A 5B C3 8D 9C B4 02 32 C9 E8 12 2A C3 8D 9C  // y*[.....2...*...
    08C0: B4 02 E8 66 2A C3 8D 9C B4 02 B1 01 E8 00 2A C3  // ...f*.........*.
    08D0: 8D 9C B4 02 B1 01 E8 0E 2A C3 66 50 8D 9C 48 01  // ........*.fP..H.
    08E0: E8 48 2A 8A D8 66 58 C3 55 57 51 B9 08 00 BD 00  // .H*..fX.UWQ.....
    08F0: 00 BB 08 00 2B D9 D1 E3 8D 58 4E E8 2D 2A E8 E3  // ....+....XN.-*..
    0900: 01 E2 EE 8D 5C 4B E8 22 2A B9 03 00 8B D0 BF 60  // ....\K."*......`
    0910: 09 85 55 06 74 17 66 8B 05 8D 9A F4 01 E8 6B 29  // ..U.t.f.......k)
    0920: 8B 45 04 8D 9A F8 01 E8 79 29 83 C5 08 83 C7 08  // .E......y)......
    0930: E2 DF 8D 7C 5E B9 04 00 33 ED 8B DF E8 EC 29 0B  // ...|^...3.....).
    0940: C0 74 09 E8 5D 01 E8 97 00 83 C5 1C 83 C7 12 E2  // .t..]...........
    0950: E9 55 32 ED E8 6F FF 8D 5C 28 E8 4E FF 3D 01 04  // .U2..o..\(.N.=..
    0960: 75 10 83 C3 14 E8 C3 29 24 70 C0 E8 04 8A E8 E8  // u......)$p......
    0970: 54 FF 5D 8D 9C A6 00 E8 B1 29 0A C0 74 46 8D 9C  // T.]......)..tF..
    0980: A8 00 E8 A6 29 3C 02 75 3B 66 C1 E8 10 3C 04 72  // ....)<.u;f...<.r
    0990: 33 8D 9C A8 00 32 E4 03 D8 8B FB B9 04 00 8B DF  // 3....2..........
    09A0: E8 88 29 0B C0 74 15 E8 F9 00 A9 80 00 75 0D E8  // ..)..t.......u..
    09B0: 2E 00 83 C5 1C 55 58 83 F8 70 73 08 83 C7 12 49  // .....UX..ps....I
    09C0: 0B C9 75 DA 59 5F 5D C3 20 03 58 02 3C 00 01 00  // ..u.Y_]. .X.<...
    09D0: 00 04 00 03 3C 00 00 08 80 02 E0 01 3C 00 20 00  // ....<.......<. .
    09E0: 51 8D 1D E8 45 29 8D 9A 68 01 E8 B6 28 8D 5D 02  // Q...E)..h...(.].
    09F0: E8 38 29 8D 9A 6A 01 E8 89 00 8D 5D 05 E8 2B 29  // .8)..j.....]..+)
    0A00: 8D 9A 6E 01 E8 7C 00 8D 5D 08 E8 1E 29 8B C8 8A  // ..n..|..]...)...
    0A10: DC 66 C1 C8 10 8A D0 80 E2 0F 8A F0 C0 EE 04 8A  // .f..............
    0A20: EC C0 ED 06 8A FC C0 EF 04 80 E7 03 80 E4 0F C0  // ................
    0A30: E4 04 0A D4 80 E2 3F 80 E4 C0 C0 EC 02 0A F4 8B  // ......?.........
    0A40: C3 8D 9A 74 01 E8 5B 28 8D 9A 72 01 8B C1 E8 52  // ...t..[(..r....R
    0A50: 28 8D 9A 76 01 33 C0 8A C6 E8 47 28 8D 9A 78 01  // (..v.3....G(..x.
    0A60: 33 C0 8A C2 E8 3C 28 8D 5D 0C E8 BE 28 8D 9A 7A  // 3....<(.]...(..z
    0A70: 01 E8 0F 00 8D 5D 0F E8 B1 28 8D 9A 7E 01 E8 22  // .....]...(..~.."
    0A80: 28 59 C3 8B C8 8A D4 66 C1 C8 10 8A F0 80 E6 0F  // (Y.....f........
    0A90: 8A E8 C0 ED 04 8B C1 E8 09 28 83 C3 02 8B C2 E8  // .........(......
    0AA0: 01 28 C3 8D 5D 11 E8 82 28 8A E0 BA 06 00 C0 E8  // .(..]...(.......
    0AB0: 07 74 03 80 CA 80 8A C4 C0 E8 03 24 03 3C 02 75  // .t.........$.<.u
    0AC0: 03 80 CA 40 3C 03 75 12 8A C4 D0 E8 A8 01 74 03  // ...@<.u.......t.
    0AD0: 80 E2 FD A8 02 74 03 80 E2 FB 8B C2 8D 9A 80 01  // .....t..........
    0AE0: E8 C0 27 C3 3C 01 74 3D 8B D0 0F B6 C6 24 3F 04  // ..'.<.t=.....$?.
    0AF0: 3C 8D 9A F8 01 E8 AB 27 0F B6 C2 83 C0 1F C1 E0  // <......'........
    0B00: 03 8D 9A F4 01 E8 9B 27 0F B6 DE C1 EB 06 C1 E3  // .......'........
    0B10: 02 2E F7 A7 C0 0A 2E F7 B7 BE 0A 8D 9A F6 01 E8  // ................
    0B20: 81 27 83 C5 08 C3 10 00 0A 00 04 00 03 00 05 00  // .'..............
    0B30: 04 00 10 00 09 00 8D 9C A6 00 E8 EE 27 0A C0 74  // ............'..t
    0B40: 1F 8D 9C A8 00 51 B1 03 E8 18 00 59 0B DB 74 10  // .....Q.....Y..t.
    0B50: E8 D8 27 32 C0 66 3D 00 03 0C 00 75 03 0B DB C3  // ..'2.f=....u....
    0B60: 33 DB C3 66 50 52 E8 C2 27 3C 02 75 39 80 FC 03  // 3..fPR..'<.u9...
    0B70: 72 34 66 C1 E8 10 32 E4 3C 04 76 2A 03 C3 8B D0  // r4f...2.<.v*....
    0B80: 83 C3 04 3B DA 73 1F E8 A1 27 8A E0 80 E4 E0 C0  // ...;.s...'......
    0B90: EC 05 24 1F 38 CC 74 08 32 E4 FE C0 03 D8 EB E3  // ..$.8.t.2.......
    0BA0: 0B DB 5A 66 58 C3 33 DB 5A 66 58 C3 51 8D 9C A6  // ..ZfX.3.ZfX.Q...
    0BB0: 00 E8 77 27 0A C0 74 1B 8D 9C A8 00 B1 12 E8 18  // ..w'..t.........
    0BC0: 00 74 10 E8 65 27 66 C1 E8 10 80 E4 07 75 04 B0  // .t..e'f......u..
    0BD0: 01 EB 02 32 C0 0A C0 59 C3 66 50 52 E8 4C 27 3C  // ...2...Y.fPR.L'<
    0BE0: 70 75 2B 66 C1 E8 10 32 E4 83 C3 05 03 C3 8B D0  // pu+f...2........
    0BF0: 3B DA 73 1A E8 34 27 38 C8 74 0D 66 C1 E8 10 32  // ;.s..4'8.t.f...2
    0C00: E4 83 C0 03 03 D8 EB E8 0B DB 5A 66 58 C3 33 DB  // ..........ZfX.3.
    0C10: 5A 66 58 C3 57 66 51 8D 9C 68 01 8B FB 8B DF E8  // ZfX.WfQ..h......
    0C20: 3D 00 0B C9 74 0B 66 8B D1 E8 AA 0F 83 C7 1C EB  // =...t.f.........
    0C30: EC 66 59 5F C3 50 53 51 B9 07 00 53 8B DA E8 EA  // .fY_.PSQ...S....
    0C40: 26 83 F8 00 5B 74 09 66 C1 E3 10 8B DA E8 7D 22  // &...[t.f......}"
    0C50: 59 5B 58 C3 51 53 B9 07 00 E8 8A 22 5B 59 C3 66  // Y[X.QS....."[Y.f
    0C60: 50 53 83 C3 06 E8 C3 26 5B 8B C8 66 C1 E1 10 53  // PS.....&[..f...S
    0C70: 83 C3 02 E8 B5 26 8B C8 5B 66 58 C3 8D 9C 48 01  // .....&..[fX...H.
    0C80: 32 C9 E8 4A 26 C3 57 B9 20 00 E8 65 22 5F C3 E8  // 2..J&.W. ..e"_..
    0C90: 83 01 66 8B CA 66 52 E8 CD 06 E8 FB 1C 66 5A 74  // ..f..fR......fZt
    0CA0: 10 E8 43 06 B3 00 E8 A8 19 66 3B CA 73 03 66 8B  // ..C......f;.s.f.
    0CB0: D1 8D 9C D0 03 E8 73 26 0B C0 75 44 8D 9C 54 02  // ......s&..uD..T.
    0CC0: 66 B8 48 3F 00 00 E8 C2 25 B5 01 66 81 FA 78 69  // f.H?....%..f..xi
    0CD0: 00 00 72 25 83 C3 04 66 B8 78 69 00 00 E8 AB 25  // ..r%...f.xi....%
    0CE0: B5 02 66 81 FA F0 D2 00 00 72 0E 83 C3 04 66 B8  // ..f......r....f.
    0CF0: F0 D2 00 00 E8 94 25 B5 03 B1 03 E8 CF 01 EB 45  // ......%........E
    0D00: 66 B9 08 00 00 00 66 33 D2 53 8D 9C 54 02 8B D3  // f.....f3.S..T...
    0D10: 5B E8 17 26 0B C0 74 22 66 25 FF FF 00 00 66 D1  // [..&..t"f%....f.
    0D20: E0 53 8B DA E8 64 25 5B 66 C1 CA 10 FE C2 66 C1  // .S...d%[f.....f.
    0D30: CA 10 83 C2 04 83 C3 02 E2 D7 66 C1 CA 10 8A EA  // ..........f.....
    0D40: B1 03 E8 88 01 E8 41 06 A8 01 74 3F 8D 9C AE 03  // ......A...t?....
    0D50: E8 D8 25 3C 00 74 34 E8 D8 05 8A EB E8 5C 01 32  // ..%<.t4......\.2
    0D60: ED E8 63 01 E8 AB 05 8D 9C BB 02 E8 BD 25 33 C9  // ..c..........%3.
    0D70: 8A C8 E8 28 01 66 3B C2 74 0E 51 E8 43 01 FE C5  // ...(.f;.t.Q.C...
    0D80: E8 44 01 59 E2 EC EB 03 B3 00 C3 8D 9C BB 02 E8  // .D.Y............
    0D90: 99 25 FE C8 8A E8 E8 2E 01 8D 9C 40 03 B9 00 00  // .%.........@....
    0DA0: E8 2C 25 E8 CC 02 E8 D2 00 E8 0F 01 66 52 E8 B6  // .,%.........fR..
    0DB0: 05 E8 E4 1B 66 5A 75 04 B3 00 EB 58 E8 F6 00 80  // ....fZu....X....
    0DC0: FD 01 77 07 E8 FA 00 0A ED 74 47 E8 28 03 E8 3A  // ..w......tG.(..:
    0DD0: 11 80 FB 00 75 1D E8 B0 05 A8 01 74 07 B1 0D E8  // ....u......t....
    0DE0: 51 19 EB 30 B5 01 E8 A7 05 E8 37 0F B5 00 E8 9F  // Q..0......7.....
    0DF0: 05 EB 21 E8 BF 00 80 FD 01 76 07 D0 ED E8 BB 00  // ..!......v......
    0E00: EB BA E8 76 00 E8 B3 00 E8 B6 00 FE CD E8 B7 00  // ...v............
    0E10: EB AA B3 08 C3 8D 9C 29 01 E8 0F 25 66 33 D2 8A  // .......)...%f3..
    0E20: D0 66 B8 8C 0A 00 00 66 F7 E2 E8 3A 05 E8 68 1B  // .f.....f...:..h.
    0E30: 75 3D 66 50 8D 9C 28 01 E8 F0 24 3C 14 66 58 72  // u=fP..(...$<.fXr
    0E40: 2E 66 50 8D 9C D0 03 E8 E1 24 0B C0 66 58 74 1F  // .fP......$..fXt.
    0E50: B9 07 00 8D 9C D0 03 8B C1 D1 E0 03 D8 E8 CB 24  // ...............$
    0E60: 0B C0 75 02 E2 ED 66 25 FF FF 00 00 66 D1 E0 66  // ..u...f%....f..f
    0E70: 0B C0 75 03 B8 48 3F 66 8B D0 C3 8D 9C 2A 01 E8  // ..u..H?f.....*..
    0E80: A9 24 24 0F 8A E8 0A ED 75 02 B5 01 C3 B5 00 8D  // .$$.....u.......
    0E90: 9C 31 01 E8 95 24 A8 01 74 02 B5 01 C3 53 51 E8  // .1...$..t....SQ.
    0EA0: 1F 00 32 E4 8A C5 C1 E0 02 59 8D 9C 54 02 03 D8  // ..2......Y..T...
    0EB0: E8 78 24 5B C3 B1 02 E8 1D 00 C3 B1 02 E8 0D 00  // .x$[............
    0EC0: C3 B1 01 E8 11 00 C3 B1 01 E8 01 00 C3 53 8D 9C  // .............S..
    0ED0: B8 02 E8 FA 23 5B C3 53 8D 9C B8 02 E8 08 24 5B  // ....#[.S......$[
    0EE0: C3 33 C9 E8 9C 20 75 3C 66 BA 37 F1 FF FF 66 33  // .3... u<f.7...f3
    0EF0: C0 E8 E9 04 33 C0 E8 51 03 74 1C A9 C8 0E 74 F6  // ....3..Q.t....t.
    0F00: E8 3C F7 F6 C3 04 75 05 F6 C3 18 74 E9 E8 30 00  // .<....u....t..0.
    0F10: 50 E8 2C F8 58 EB DF E8 1C 00 75 08 E8 31 00 8B  // P.,.X.....u..1..
    0F20: C1 E8 1C F8 C3 8D 5D 28 66 C1 E3 10 8D 5C 28 B9  // ......](f....\(.
    0F30: 49 00 E8 98 1F C3 66 50 E8 BB 04 8B C8 66 58 C3  // I.....fP.....fX.
    0F40: 66 52 66 BA FF FF FF FF 33 D0 E8 90 04 66 5A C3  // fRf.....3....fZ.
    0F50: 50 53 52 E8 E0 FF 75 13 B9 08 00 E8 2F 1C 23 C8  // PSR...u...../.#.
    0F60: 75 19 33 C0 E8 E3 02 8B C8 EB 10 83 F9 02 74 0B  // u.3...........t.
    0F70: E8 2B 08 80 FB 01 75 03 83 E1 FD 5A 5B 58 C3 56  // .+....u....Z[X.V
    0F80: 66 33 C0 66 BA 00 F0 FF FF E8 4E 07 66 C1 E6 10  // f3.f......N.f...
    0F90: E8 C4 02 0B C0 74 03 E8 1C 00 E8 2E 07 5E C3 66  // .....t.......^.f
    0FA0: 52 66 8B D0 E8 DA 15 8D 9C 1C 03 E8 7D 23 8A C2  // Rf..........}#..
    0FB0: E8 D8 22 66 5A C3 50 51 E8 71 02 50 32 C0 E8 FC  // .."fZ.PQ.q.P2...
    0FC0: 03 E8 CC 01 E8 98 00 8D 9C 40 03 E8 5D 23 38 E8  // .........@..]#8.
    0FD0: 74 0A 8A C5 E8 B4 22 B0 02 E8 E1 03 58 E8 CA 00  // t.....".....X...
    0FE0: E8 A8 00 E8 8C 00 8D 9C 4C 01 E8 3E 23 8B C8 8B  // ........L..>#...
    0FF0: D3 8D 9C 00 03 E8 33 23 3B C1 74 05 B0 02 E8 BC  // ......3#;.t.....
    1000: 03 E8 31 FC 8D 9C 00 03 E8 53 15 8D 9C D8 02 E8  // ..1......S......
    1010: 79 22 E8 8A FF 66 C1 CE 10 8B FE 66 C1 CE 10 E8  // y"...f.....f....
    1020: 95 00 E8 D1 00 E8 23 03 8A E9 8D 9C DC 02 32 C9  // ......#.......2.
    1030: E8 9C 22 E8 0C 03 66 25 FF 0F 00 00 59 58 66 BA  // .."...f%....YXf.
    1040: FF FF FF FF 33 D0 E8 91 06 33 D2 C3 53 66 50 8D  // ....3....3..SfP.
    1050: 9C D4 02 E8 D5 22 8A C4 E8 30 22 66 58 5B C3 53  // ....."...0"fX[.S
    1060: 66 50 8D 9C D4 02 E8 C2 22 8A E0 E8 1D 22 66 58  // fP......"...."fX
    1070: 5B C3 E8 72 02 E8 2E 02 8A DD E8 9B 16 8A E9 8D  // [..r............
    1080: 9C 3C 03 32 C9 E8 47 22 0B DB C3 83 EC 08 8B EC  // .<.2..G"........
    1090: E8 54 02 E8 10 02 E8 21 16 8D 9C 4C 03 E8 8B 22  // .T.....!...L..."
    10A0: 8A 46 00 E8 E5 21 83 C4 08 C3 8D 9C D4 02 E8 7A  // .F...!.........z
    10B0: 22 32 C0 E8 D5 21 C3 E8 0A 00 8D 9C D0 02 32 C9  // "2...!........2.
    10C0: E8 0C 22 C3 B5 00 8D 1D E8 60 22 66 8B D0 8D 9C  // .."......`"f....
    10D0: 02 03 E8 56 22 0B C0 74 1C 51 8B C8 8D 9C 06 03  // ...V"..t.Q......
    10E0: E8 48 22 66 C1 E0 10 8B C1 59 66 3B C2 75 04 B5  // .H"f.....Yf;.u..
    10F0: 00 EB 02 B5 02 C3 E8 2A 02 8D 9C 40 03 B1 03 E8  // .......*...@....
    1100: CD 21 E8 CB F7 8D 9C 40 03 B1 02 E8 C1 21 E8 95  // .!.....@.....!..
    1110: 01 80 FD 00 75 14 E8 9C FD E8 8A 02 E8 7E FD 66  // ....u........~.f
    1120: 8B D0 E8 76 02 E8 8A 02 EB 21 E8 49 02 E8 6B 02  // ...v.....!.I..k.
    1130: E8 73 01 80 FD 02 B5 04 75 0B 81 FA 74 40 76 05  // .s......u...t@v.
    1140: B5 08 66 D1 EA E8 6A 02 E8 5B 02 E8 2B 00 C3 66  // ..f...j..[..+..f
    1150: 52 52 32 ED 83 C1 02 B8 06 00 F7 E1 66 33 C9 8B  // RR2.........f3..
    1160: C8 5A 51 66 8B C2 8A CF 66 F7 E1 66 C1 E0 03 59  // .ZQf....f..f...Y
    1170: 66 F7 F1 66 8B C8 66 5A C3 B5 00 E8 E9 01 E8 13  // f..f..fZ........
    1180: 18 75 03 E8 07 FD 8D 9C 48 03 32 C9 E8 40 21 C3  // .u......H.2..@!.
    1190: 53 E8 5E 01 66 C1 E2 10 E8 4C 01 8D 9C B8 02 E8  // S.^.f....L......
    11A0: 89 21 8A E8 8D 9C B4 02 E8 80 21 8A C8 E8 C2 14  // .!........!.....
    11B0: 8A EB 5B C3 57 53 53 E8 D6 FF E8 2A 01 5B E8 27  // ..[.WSS....*.[.'
    11C0: 15 74 66 80 FD 00 75 29 53 E8 D1 FC 66 8B D0 E8  // .tf...u)S...f...
    11D0: FE F6 8A CD 51 E8 DD FC 8A FD 59 E8 71 FF 5B E8  // ....Q.....Y.q.[.
    11E0: 49 21 66 25 FF FF 00 00 66 3B C8 73 39 32 DB EB  // I!f%....f;.s92..
    11F0: 38 80 FD 02 75 16 E8 6E 01 E8 A9 17 74 28 8D 1F  // 8...u..n....t(..
    1200: E8 28 21 3D 74 40 76 1E 32 DB EB 1D 80 FD 03 75  // .(!=t@v.2......u
    1210: 15 53 E8 D2 00 B3 03 E8 37 14 5B E8 0D 21 3B C2  // .S......7.[..!;.
    1220: 76 04 32 DB EB 03 80 CB 01 5B 5F C3 53 8B F0 E8  // v.2......[_.S...
    1230: 5B 19 23 F0 74 09 8B C6 E8 FA 17 8B F3 0B DB 5B  // [.#.t..........[
    1240: C3 51 E8 0B FD E8 0F 00 59 C3 51 50 E8 3E 19 8B  // .Q......Y.QP.>..
    1250: C8 58 E8 02 00 59 C3 57 53 E8 32 1B 0B C0 74 09  // .X...Y.WS.2...t.
    1260: 8B 1D 83 C7 02 3B C3 75 F7 8B 1D 83 FB FF 74 0B  // .....;.u......t.
    1270: 83 C7 02 85 D9 74 F2 8B C3 EB 02 33 C0 0B C0 5B  // .....t.....3...[
    1280: 5F C3 33 C0 E8 C3 FF 74 13 E8 A0 FF 8B DE B9 FB  // _.3....t........
    1290: 00 E8 24 1C 83 C6 08 E8 A3 18 EB E8 BB F0 16 B8  // ..$.............
    12A0: 5A A5 E8 FE 1F C3 53 66 50 8D 9C 40 03 E8 7B 20  // Z.....SfP..@..{ 
    12B0: 8A E8 66 58 5B C3 8D 9C 69 03 E8 6E 20 C3 56 E8  // ..fX[...i..n .V.
    12C0: EA 1A 8B 44 18 5E C3 53 66 50 8D 9C D4 02 E8 5A  // ...D.^.SfP.....Z
    12D0: 20 8A C8 66 58 5B C3 53 66 50 8D 9C D5 02 E8 4A  //  ..fX[.SfP.....J
    12E0: 20 8A C8 66 58 5B C3 53 8D 5C 14 E8 3D 20 8B D0  //  ..fX[.S.\..= ..
    12F0: 5B C3 53 66 50 8D 5C 16 E8 30 20 8B D0 66 58 5B  // [.SfP.\..0 ..fX[
    1300: C3 53 66 50 8D 9C 50 03 E8 20 20 66 8B D0 66 58  // .SfP..P..  f..fX
    1310: 5B C3 53 66 50 8D 9C 54 03 E8 0F 20 66 8B D0 66  // [.SfP..T... f..f
    1320: 58 5B C3 53 66 50 8D 5C 10 E8 FF 1F 8B C8 66 58  // X[.SfP.\......fX
    1330: 5B C3 66 50 53 8D 9C 41 03 E8 EF 1F 5B 8A D8 66  // [.fPS..A....[..f
    1340: 58 C3 53 8D 5C 08 E8 E2 1F 5B C3 53 50 8D 9C 4C  // X.S.\....[.SP..L
    1350: 03 E8 D7 1F 8A C8 58 5B C3 53 50 8D 9C 4D 03 E8  // ......X[.SP..M..
    1360: C9 1F 8A C8 58 5B C3 53 66 50 8D 5C 0C E8 BB 1F  // ....X[.SfP.\....
    1370: 8B D0 66 58 5B C3 53 66 50 8D 9C 00 03 E8 AB 1F  // ..fX[.SfP.......
    1380: 66 33 D2 8B D0 66 58 5B C3 8D 5C 04 E8 9C 1F C3  // f3...fX[..\.....
    1390: 51 8D 5C 04 32 C9 E8 36 1F 59 C3 8D 9C 50 03 66  // Q.\.2..6.Y...P.f
    13A0: 8B C2 E8 E6 1E C3 53 8D 9C 40 03 B1 01 E8 1F 1F  // ......S..@......
    13B0: 5B C3 8D 9C 54 03 66 8B C2 E8 CF 1E C3 53 51 8A  // [...T.f......SQ.
    13C0: E8 E8 C5 FF 24 FD 0A E8 E8 C5 FF 59 5B C3 66 50  // ....$......Y[.fP
    13D0: 8D 9C D8 02 E8 54 1F 66 8B D0 66 58 C3 53 66 50  // .....T.f..fX.SfP
    13E0: 51 66 8B C8 BB 00 00 E8 2C 16 23 C2 0B C1 E8 2E  // Qf......,.#.....
    13F0: 16 59 66 58 5B C3 BB 00 00 E8 1A 16 66 25 CA 0E  // .YfX[.......f%..
    1400: 00 00 C3 E8 70 1A E8 FF 19 E8 DD 19 75 06 E8 8E  // ....p.......u...
    1410: 17 E8 E1 19 C3 B0 01 C3 55 B3 01 E8 00 1D 5D C3  // ........U.....].
    1420: 66 53 66 BB 04 00 00 00 E8 05 00 33 C0 66 5B C3  // fSf........3.f[.
    1430: 55 66 C1 E3 10 BB 00 00 E8 E3 1C 5D C3 E8 2F 1B  // Uf.........]../.
    1440: BB 0A 00 E8 D9 15 C3 BB 0A 00 E8 C9 15 66 8B C8  // .............f..
    1450: E8 1C 1B BB 0A 00 66 2B C1 E8 C3 15 C3 E8 29 00  // ......f+......).
    1460: 0B C9 74 22 E8 18 FB E8 31 07 66 51 66 8B C8 BB  // ..t"....1.fQf...
    1470: 07 00 E8 A1 15 66 25 00 FE 00 00 66 0B C1 E8 9E  // .....f%....f....
    1480: 15 66 59 0C 01 C3 32 C0 C3 E8 6B 02 0B C9 75 06  // .fY...2...k...u.
    1490: E8 BD FA E8 71 02 51 E8 B6 FA 66 C1 E6 10 33 C0  // ....q.Q...f...3.
    14A0: E8 9E FD 74 09 E8 16 03 75 F6 33 C8 EB F2 58 23  // ...t....u.3...X#
    14B0: C8 66 C1 EE 10 C3 A8 10 75 63 E8 F0 06 66 C1 E6  // .f......uc...f..
    14C0: 10 33 C0 E8 84 FD 74 35 E8 61 FD 50 51 8B C8 E8  // .3....t5.a.PQ...
    14D0: F9 01 85 C1 59 58 74 0D 50 E8 AD FE 24 03 3C 03  // ....YXt.P...$.<.
    14E0: 58 75 E0 EB 0C 50 E8 A0 FE A8 01 58 74 D5 E8 6E  // Xu...P.....Xt..n
    14F0: FB 50 E8 D9 07 58 B5 00 E8 95 FE EB C6 E8 CB 01  // .P...X..........
    1500: E8 29 FD E8 34 01 B1 00 E8 4D 07 66 C1 EE 10 E8  // .)..4....M.f....
    1510: 94 06 A8 20 75 42 A8 40 75 03 E8 1B 0E E8 7B 06  // ... uB.@u.....{.
    1520: 0A C0 75 07 32 C9 B5 01 E8 BE 0E E8 9D 01 E8 FB  // ..u.2...........
    1530: FC E8 33 FE E8 61 14 75 14 E8 62 02 0A DB 74 0D  // ..3..a.u..b...t.
    1540: E8 1C FB E8 88 07 B5 00 E8 45 FE EB 08 E8 65 07  // .........E....e.
    1550: B5 01 E8 3B FE E8 E6 00 C3 E8 31 16 C3 E8 22 FD  // ...;......1...".
    1560: E8 AC 06 33 C9 E8 9F 01 66 33 D2 66 33 C0 E8 6C  // ...3....f3.f3..l
    1570: FE E8 52 00 B1 FF E8 84 00 33 C0 E8 CC FC 74 0A  // ..R......3....t.
    1580: E8 A9 FC 50 E8 D1 07 58 EB F1 32 C9 E8 C4 01 E8  // ...P...X..2.....
    1590: FB 15 0B C0 C3 E8 EA FC E8 74 06 66 33 C0 66 BA  // .........t.f3.f.
    15A0: 00 F0 FF FF E8 33 01 51 B1 01 E8 8C 01 59 33 C0  // .....3.Q.....Y3.
    15B0: E8 97 FC 74 0A E8 74 FC 50 E8 67 07 58 EB F1 E8  // ...t..t.P.g.X...
    15C0: B3 0D E8 96 18 C3 B8 02 00 E8 60 FC 74 2E B1 07  // ..........`.t...
    15D0: E8 01 12 B8 02 00 E8 66 F0 F6 C3 04 75 12 E8 11  // .......f....u...
    15E0: 1B 83 3D 00 75 0A E8 A4 15 83 E0 FD E8 A7 15 C3  // ..=.u...........
    15F0: 66 B8 02 00 00 00 E8 E4 FD E8 48 F2 C3 E8 28 14  // f.........H...(.
    1600: 74 23 38 E1 76 04 8A CC EB 06 38 C1 73 02 8A C8  // t#8.v.....8.s...
    1610: BB 02 00 E8 00 14 8A E1 E8 04 14 B1 04 E8 B4 11  // ................
    1620: 0C 01 C3 0C 01 C3 51 E8 FE 13 74 0C 8A CC BB 02  // ......Q...t.....
    1630: 00 E8 E2 13 8A C4 8A E1 59 C3 E8 FD 05 C3 E8 08  // ........Y.......
    1640: 06 C3 E8 3D 19 75 18 E8 81 00 E8 DF FB 80 F9 01  // ...=.u..........
    1650: 75 0E 51 E8 5F 06 B5 01 E8 35 FD 59 E8 DF FF C3  // u.Q._....5.Y....
    1660: E8 D7 FF 51 E8 BC 06 B5 00 E8 24 FD 59 C3 B8 02  // ...Q......$.Y...
    1670: 00 E8 B8 FB 74 03 E8 5B 11 C3 E8 BD 04 3B C1 7C  // ....t..[.....;.|
    1680: 3A 8B C1 E8 FD 04 E8 C6 0E 8B C8 51 E8 2D 05 E8  // :..........Q.-..
    1690: F1 04 59 E8 B9 0E 3B C8 72 02 8B C1 8D 5C 04 E8  // ..Y...;.r....\..
    16A0: 01 1C 32 C9 B5 0F E8 04 0D E8 03 18 FE C1 38 C1  // ..2...........8.
    16B0: 72 F2 8D 5C 04 E8 73 1C 0B C0 C3 33 C0 C3 BB 00  // r..\..s....3....
    16C0: 18 33 C0 8A C2 C1 E0 02 03 D8 C3 53 BB 03 00 E8  // .3.........S....
    16D0: 44 13 66 25 FF 0F 00 00 5B C3 53 66 50 66 51 66  // D.f%....[.SfPfQf
    16E0: 8B C8 BB 03 00 E8 2E 13 66 23 C2 66 0B C1 E8 2E  // ........f#.f....
    16F0: 13 66 59 66 58 5B C3 66 50 BB 05 00 E8 17 13 25  // .fYfX[.fP......%
    1700: FF 0F 8B C8 66 58 C3 E8 83 14 23 C8 66 50 BB 05  // ....fX....#.fP..
    1710: 00 E8 02 13 25 00 F0 0B C1 E8 03 13 66 58 C3 66  // ....%.......fX.f
    1720: 50 53 BB 06 00 E8 EE 12 A8 10 75 09 BB F0 16 E8  // PS........u.....
    1730: F9 1B 3D 5A A5 5B 66 58 C3 66 50 53 BB 06 00 E8  // ..=Z.[fX.fPS....
    1740: D4 12 80 F1 01 C0 E1 04 24 EF 0A C1 E8 D0 12 5B  // ........$......[
    1750: 66 58 C3 53 66 50 BB F8 16 E8 CF 1B 8A C1 E8 2A  // fX.SfP.........*
    1760: 1B 66 58 5B C3 53 BB F8 16 E8 BF 1B 83 E0 01 5B  // .fX[.S.........[
    1770: C3 53 66 50 BB 07 00 E8 9C 12 F6 C4 01 66 58 B0  // .SfP.........fX.
    1780: 06 74 02 B0 08 5B C3 53 BB 07 00 E8 88 12 80 E4  // .t...[.S........
    1790: FE 80 FD 06 74 03 80 CC 01 E8 83 12 5B C3 66 50  // ....t.......[.fP
    17A0: BB 06 00 E8 70 12 24 40 C0 E8 06 8A D8 66 58 C3  // ....p.$@.....fX.
    17B0: B3 81 E8 5E 19 75 04 83 C8 01 C3 33 C0 C3 50 66  // ...^.u.....3..Pf
    17C0: 51 E8 68 FA 83 EC 04 8B EC 66 33 C0 66 89 46 00  // Q.h......f3.f.F.
    17D0: 33 D2 8D BC 68 01 8D 1D E8 50 1B 0B C0 74 22 8B  // 3...h....P...t".
    17E0: DF B0 00 E8 12 01 74 14 8B DF E8 72 F4 66 8B 46  // ......t....r.f.F
    17F0: 00 66 3B C8 72 06 8B D7 66 89 4E 00 83 C7 1C EB  // .f;.r...f.N.....
    1800: D5 0B D2 74 0A 8D 9C 4C 01 E8 29 F4 E9 88 00 66  // ...t...L..)....f
    1810: 33 C0 66 89 46 00 8D BC F4 01 33 D2 8D 1D E8 0A  // 3.f.F.....3.....
    1820: 1B 0B C0 74 58 66 50 E8 94 F0 3C 01 66 58 74 05  // ...tXfP...<.fXt.
    1830: 3D 40 06 73 43 66 52 66 8B D0 8D 5D 04 E8 EB 1A  // =@.sCfRf...]....
    1840: E8 5D 00 8B CA 66 5A 74 2F 56 8D 9C 4C 01 8B F1  // .]...fZt/V..L...
    1850: E8 01 F4 5E B0 00 E8 9F 00 74 1D 8D 1D E8 CB 1A  // ...^.....t......
    1860: 8B D9 8B 47 06 66 C1 E0 10 8B 47 02 66 3B 46 00  // ...G.f....G.f;F.
    1870: 72 06 8B D1 66 89 46 00 83 C7 08 EB 9F 0B D2 74  // r...f.F........t
    1880: 16 56 8D 9C 4C 01 8B F2 E8 C9 F3 5E 53 8D 9C 62  // .V..L......^S..b
    1890: 01 33 C0 E8 0D 1A 5B 83 C4 04 0B D2 66 59 58 C3  // .3....[.....fYX.
    18A0: 57 53 51 E8 0F 15 3B 55 02 75 18 66 C1 CA 10 8B  // WSQ...;U.u.f....
    18B0: DA 66 C1 CA 10 3B 5D 06 75 09 0A C0 74 0E 3A 45  // .f...;].u...t.:E
    18C0: 1B 74 09 83 C7 1C E2 DE 33 D2 EB 02 8B D7 0B D2  // .t......3.......
    18D0: 59 5B 5F C3 51 66 52 E8 DB 14 3A 65 1A 75 09 0A  // Y[_.QfR...:e.u..
    18E0: C0 74 0E 3A 45 1B 74 09 83 C7 1C E2 ED 33 FF EB  // .t.:E.t......3..
    18F0: 00 0B FF 66 5A 59 C3 C3 66 51 66 52 53 53 66 C1  // ...fZY..fQfRSSf.
    1900: CE 10 8B DE 66 C1 CE 10 E8 20 1A 5B 66 8B D0 E8  // ....f.... .[f...
    1910: 4D F3 3B CA 72 0A 66 3B CA 72 05 E8 96 F8 75 02  // M.;.r.f;.r....u.
    1920: 32 C0 5B 66 5A 66 59 C3 56 57 E8 A7 FF 8B F7 E8  // 2.[fZfY.VW......
    1930: 22 F3 5F 5E C3 66 50 53 66 51 52 57 56 51 8B DE  // "._^.fPSfQRWVQ..
    1940: B9 08 00 E8 72 15 59 8D 5C 08 8B C1 66 C1 E0 10  // ....r.Y.\...f...
    1950: 8A C2 E8 36 19 F6 C2 03 75 24 8B C1 24 7F BF 18  // ...6....u$..$...
    1960: 1A 80 3D FF 0F 84 0F 01 3A 05 75 0D 66 8B 45 01  // ..=.....:.u.f.E.
    1970: 66 B9 00 05 02 00 E9 96 00 83 C7 05 EB E3 F6 C2  // f...............
    1980: 01 74 25 8B C1 E8 70 01 0F 84 EB 00 33 C9 8A CC  // .t%...p.....3...
    1990: 8A D0 0A C0 75 12 8D 5C 08 66 25 FF FF 00 00 66  // ....u..\.f%....f
    19A0: C1 E0 08 E8 E5 18 EB B2 8A E1 8A CA 80 E1 0C C0  // ................
    19B0: E9 02 80 E2 F0 C0 EA 04 8A EA 80 FC 70 72 2A 80  // ............pr*.
    19C0: FC 75 73 25 80 EC 70 8A C4 32 E4 50 E8 30 02 8B  // .us%..p..2.P.0..
    19D0: D8 58 38 D8 72 05 33 C0 E9 9C 00 E8 28 02 E8 4A  // .X8.r.3.....(..J
    19E0: 19 0B C0 0F 84 90 00 EB 1B 32 C0 E8 E6 FE 0F 84  // .........2......
    19F0: 85 00 8D 5C 16 8B 05 E8 A9 18 8B 45 06 66 C1 E0  // ...\.......E.f..
    1A00: 10 8B 45 02 50 E8 47 0B 66 C1 E1 10 8B C8 58 8D  // ..E.P.G.f.....X.
    1A10: 1C E8 77 18 66 50 8D 5C 04 66 8B C1 E8 6C 18 66  // ..w.fP.\.f...l.f
    1A20: 58 66 C1 E8 10 66 81 E1 FF FF 00 00 66 F7 E1 66  // Xf...f......f..f
    1A30: 50 8D 5C 06 E8 F4 18 8B C8 66 58 66 D3 E0 66 C1  // P.\......fXf..f.
    1A40: E8 10 40 8D 5C 14 E8 5A 18 BF 78 1A 83 F9 01 74  // ..@.\..Z..x....t
    1A50: 11 BF 80 1A 81 F9 01 01 74 08 BF 88 1A 83 F9 02  // ........t.......
    1A60: 75 15 8D 5C 0C 66 8B 05 E8 20 18 8D 5C 10 66 8B  // u..\.f... ..\.f.
    1A70: 45 04 E8 16 18 0B DB 5E 5F 5A 66 59 5B 66 58 C3  // E......^_ZfY[fX.
    1A80: 00 40 01 90 01 01 40 01 90 01 02 80 02 90 01 03  // .@....@.........
    1A90: 80 02 90 01 04 40 01 90 01 05 40 01 90 01 06 80  // .....@....@.....
    1AA0: 02 90 01 07 D0 02 5E 01 0D 40 01 90 01 0E 80 02  // ......^..@......
    1AB0: 90 01 0F 80 02 5E 01 10 80 02 5E 01 11 80 02 E0  // .....^....^.....
    1AC0: 01 12 80 02 E0 01 13 80 02 90 01 23 20 04 90 01  // ...........# ...
    1AD0: 32 20 04 B0 02 33 20 04 C0 02 62 80 02 E0 01 FF  // 2 ...3 ...b.....
    1AE0: 05 0A 05 05 05 00 00 00 05 0B 06 05 05 00 00 00  // ................
    1AF0: 08 10 08 08 08 00 00 00 56 E8 8D 15 80 E4 01 3B  // ........V......;
    1B00: 04 74 09 83 C6 04 E2 F7 33 C0 EB 05 8B 44 02 0B  // .t......3....D..
    1B10: C0 5E C3 57 53 50 E8 70 15 83 E9 0A E8 E0 00 83  // .^.WSP.p........
    1B20: F8 05 76 03 B8 05 00 D1 E0 03 C8 FB A5 83 C6 02  // ..v.............
    1B30: E2 FA B8 FF FF AB 58 5B 5F C3 66 53 51 66 52 E8  // ......X[_.fSQfR.
    1B40: 41 00 E8 77 00 66 C1 E8 10 66 0F B7 D8 66 B8 00  // A..w.f...f...f..
    1B50: 00 00 03 66 D3 E8 66 33 D2 66 F7 F3 E8 F0 09 66  // ...f..f3.f.....f
    1B60: 5A 59 66 5B C3 53 66 50 BB 07 00 E8 A8 0E 0A C0  // ZYf[.SfP........
    1B70: 66 58 5B C3 53 66 50 BB 07 00 E8 99 0E A8 01 66  // fX[.SfP........f
    1B80: 58 5B C3 53 66 50 8D 5C 06 E8 9F 17 8A C8 66 58  // X[.SfP.\......fX
    1B90: 5B C3 51 B9 08 00 E8 34 13 59 C3 53 8D 5C 08 E8  // [.Q....4.Y.S.\..
    1BA0: 89 17 24 03 5B C3 8D 5C 09 E8 7F 17 C3 51 53 B1  // ..$.[..\.....QS.
    1BB0: 01 8A E8 8D 5C 08 E8 16 17 5B 59 C3 53 8D 1C E8  // ....\....[Y.S...
    1BC0: 69 17 5B C3 53 8D 5C 04 E8 60 17 5B C3 53 8D 5C  // i.[.S.\..`.[.S.\
    1BD0: 16 E8 57 17 5B C3 53 66 52 33 C0 E8 C2 FC 66 5A  // ..W.[.SfR3....fZ
    1BE0: 75 1B E8 34 00 74 16 E8 15 00 40 83 F8 05 73 0D  // u..4.t....@...s.
    1BF0: E8 98 16 48 E8 0F 00 66 8B C2 E8 8E 16 5B C3 BB  // ...H...f.....[..
    1C00: 00 1E E8 26 17 C3 BB 08 1E C1 E0 03 03 D8 C3 BB  // ...&............
    1C10: 00 1E B9 32 00 E8 A0 12 C3 51 E8 E2 FF 0B C0 74  // ...2.....Q.....t
    1C20: 12 8B C8 BB 08 1E E8 02 17 66 3B C2 74 07 83 C3  // .........f;.t...
    1C30: 08 E2 F3 0B DB 59 C3 C3 C3 00 BB 20 DF E8 AB 36  // .....Y..... ...6
    1C40: E8 84 F6 B5 01 E8 E5 07 C3 BB 00 DF E8 9C 36 E8  // ..............6.
    1C50: 75 F6 B5 00 E8 D6 07 C3 80 F9 00 75 0A E8 55 12  // u..........u..U.
    1C60: 8A C8 B5 02 E8 1D 09 0B F6 74 2E E8 59 F6 B5 01  // .........t..Y...
    1C70: 51 E8 C0 07 59 E8 C3 07 56 33 F6 B5 00 E8 2D 07  // Q...Y...V3....-.
    1C80: 5E B5 01 E8 C5 F6 E8 FB 08 E8 C4 09 E8 38 F6 8D  // ^............8..
    1C90: 9C 00 03 E8 AC 07 E8 F5 07 66 C1 CE 10 B5 01 E8  // .........f......
    1CA0: 0B 07 E8 01 FF A8 40 75 07 32 C0 B5 01 E8 7E 08  // ......@u.2....~.
    1CB0: 66 C1 CE 10 C3 E8 0F F6 B5 01 E8 4B 07 B5 00 E8  // f..........K....
    1CC0: 79 07 E8 DC 07 B1 0F E8 69 0A E8 26 00 C3 E8 52  // y.......i..&...R
    1CD0: 00 E8 03 F6 B5 00 E8 2F 07 B5 00 E8 5D 07 E8 78  // ......./....]..x
    1CE0: F6 E8 D1 11 38 C1 74 0A 80 F9 0B 74 05 B5 03 E8  // ....8.t....t....
    1CF0: 92 08 C3 B1 10 E8 3B 0A E8 AB F5 80 FD 00 74 06  // ......;.......t.
    1D00: B1 01 E8 CF 0A C3 E8 A6 05 80 FD 01 75 07 B5 02  // ............u...
    1D10: E8 D5 05 EB 03 E8 F3 01 B1 0D E8 16 0A B1 03 E8  // ................
    1D20: 54 00 C3 E8 CC F5 0B D2 74 05 B1 00 E8 42 0A B1  // T.......t....B..
    1D30: 02 E8 42 00 E8 52 F6 A8 01 74 12 E8 68 F5 80 FD  // ..B..R...t..h...
    1D40: 00 75 0A B1 0C E8 EB 09 B0 02 E8 91 04 B1 00 E8  // .u..............
    1D50: 82 0A B1 0D E8 1F 00 C3 B1 07 E8 77 0A E8 92 F5  // ...........w....
    1D60: 0B D2 75 0C E8 00 F6 E8 2A 0C 75 09 E8 1D 0B C3  // ..u.....*.u.....
    1D70: B1 07 E8 FC 09 C3 E8 EE F5 E8 18 0C 75 24 51 E8  // ............u$Q.
    1D80: 52 0A 59 80 F9 0C 75 1A 33 D2 56 83 C6 08 E8 41  // R.Y...u.3.V....A
    1D90: 0C 5E 0A C0 75 0C B9 0A 00 E8 6D 11 42 83 FA 1E  // .^..u.....m.B...
    1DA0: 75 E8 C3 80 FB 01 0F 84 C5 00 E8 A5 05 66 C1 E1  // u............f..
    1DB0: 10 8D 9C 35 01 E8 73 15 A8 01 74 05 51 E8 2B 04  // ...5..s...t.Q.+.
    1DC0: 59 E8 5F F5 B0 04 E8 9C 05 66 BA 50 01 40 50 E8  // Y._......f.P.@P.
    1DD0: 76 05 E8 F7 0A 75 7E 66 BA 50 01 50 4F 8D 9C 2D  // v....u~f.P.PO..-
    1DE0: 01 E8 47 15 24 06 3C 02 75 02 B6 02 B0 05 E8 74  // ..G.$.<.u......t
    1DF0: 05 E8 54 05 8D 5C 28 03 D8 E8 D0 0A 75 57 0A FF  // ..T..\(.....uW..
    1E00: 75 09 B0 0A E8 5E 05 32 DB EB 4A 51 33 C9 8A CF  // u....^.2..JQ3...
    1E10: E8 35 05 03 C8 E8 3A 05 59 B0 07 E8 47 05 66 BA  // .5....:.Y...G.f.
    1E20: 50 01 10 30 33 DB E8 A3 0A 74 0F 51 8A EB 8D 9C  // P..03....t.Q....
    1E30: 44 01 B1 02 E8 98 14 59 EB 61 E8 0B 05 66 C1 C9  // D......Y.a...f..
    1E40: 10 2B C1 66 C1 C1 10 3D 80 00 0F 82 76 FF B0 08  // .+.f...=....v...
    1E50: E8 12 05 EB 43 51 8A EB 8D 9C 44 01 B1 02 E8 6E  // ....CQ....D....n
    1E60: 14 59 66 BA 50 01 10 30 33 DB E8 5F 0A EB 2C 8D  // .Yf.P..03.._..,.
    1E70: 5C 28 03 D9 53 8A E9 B1 32 51 5F E8 A5 F4 8A E9  // \(..S...2Q_.....
    1E80: B1 A0 BA 00 80 E8 19 0A 80 FF 01 5B 74 0A B1 A2  // ...........[t...
    1E90: E8 0E 0A 80 FF 01 75 03 B0 00 C3 B0 01 C3 51 B1  // ......u.......Q.
    1EA0: 0C E8 D2 FE 59 B0 01 E8 BB 04 56 83 C6 08 E8 21  // ....Y.....V....!
    1EB0: 0B 5E 0A C0 75 04 B3 10 EB 3F B0 02 E8 A6 04 E8  // .^..u....?......
    1EC0: 38 00 74 11 B0 03 E8 9C 04 B0 01 E8 10 03 75 29  // 8.t...........u)
    1ED0: E8 27 00 75 24 66 BA 0C 00 90 43 8D 9C 30 01 E8  // .'.u$f....C..0..
    1EE0: EA 09 66 BA 20 00 90 41 8D 9C 34 01 E8 DD 09 E8  // ..f. ..A..4.....
    1EF0: BD 03 B0 09 E8 6E 04 33 DB C3 E8 26 F4 66 BA 00  // .....n.3...&.f..
    1F00: 00 90 47 8D 9C 28 01 E8 C2 09 C3 B1 0C E8 66 FE  // ..G..(........f.
    1F10: B1 00 E8 BF 08 B1 01 E8 BA 08 8D 9C AC 03 66 B8  // ..............f.
    1F20: 00 00 00 00 E8 64 13 B0 01 E8 B2 02 74 0A B5 04  // .....d......t...
    1F30: E8 CB 03 B3 08 E9 3F 01 B1 08 E8 F6 07 E8 D2 02  // ......?.........
    1F40: B1 09 E8 EE 07 E8 C5 01 8D 9C B8 03 66 33 C0 E8  // ............f3..
    1F50: 39 13 E8 60 01 B9 90 01 E8 A3 0F B0 01 E8 63 02  // 9..`..........c.
    1F60: B5 02 E8 8D 03 E8 74 01 E8 9F 03 E8 E0 01 B5 03  // ......t.........
    1F70: E8 7F 03 33 C9 E8 00 01 F6 C5 01 75 34 B5 02 E8  // ...3.......u4...
    1F80: 70 03 E8 20 01 F6 C5 04 74 08 B5 01 E8 6F 03 E9  // p.. ....t....o..
    1F90: CC 00 8A FD 80 E7 03 E8 E8 00 80 E3 03 38 FB 75  // .............8.u
    1FA0: 0D E8 4C 01 75 08 B5 02 E8 53 03 E9 B0 00 E8 67  // ..L.u....S.....g
    1FB0: 01 FE C1 E8 7C F3 38 D9 75 BB 8D 9C AC 03 E8 6A  // ....|.8.u......j
    1FC0: 13 3C 03 74 05 E8 ED 00 EB 9B 8D 9C B0 03 66 33  // .<.t..........f3
    1FD0: C0 E8 B7 12 8D 9C 2A 01 E8 50 13 A8 40 74 0C B1  // ......*..P..@t..
    1FE0: 13 E8 4F 07 B0 03 E8 DA 01 EB 0A B1 0A E8 43 07  // ..O...........C.
    1FF0: B0 02 E8 CE 01 B5 04 E8 F8 02 E8 DF 00 E8 0A 03  // ................
    2000: E8 4B 01 B5 05 E8 EA 02 33 C9 E8 6B 00 80 FD 07  // .K......3..k....
    2010: 75 05 E8 86 00 75 2E 51 B5 04 E8 D5 02 59 F6 C5  // u....u.Q.....Y..
    2020: 01 75 07 B5 03 E8 D6 02 EB 34 E8 78 00 8A D5 E8  // .u.......4.x....
    2030: E6 00 E8 70 00 38 EA 75 0C E8 B4 00 75 07 B5 02  // ...p.8.u....u...
    2040: E8 BB 02 EB 19 FE C1 E8 E8 F2 38 D9 75 BC 8D 9C  // ..........8.u...
    2050: AC 03 E8 D6 12 3C 04 75 05 E8 59 00 EB 9C B0 00  // .....<.u..Y.....
    2060: E8 60 01 B1 0B E8 CB 06 8D 9C AD 03 E8 BC 12 B3  // .`..............
    2070: 00 0A C0 74 02 B3 08 C3 8D 9C C0 03 E8 0F 00 8A  // ...t............
    2080: E8 C3 53 8D 9C C4 03 E8 04 00 5B 8A D8 C3 51 E8  // ..S.......[...Q.
    2090: 99 12 C0 E1 02 D3 E8 24 0F 59 C3 8D 9C C2 03 E8  // .......$.Y......
    20A0: 89 12 A8 01 C3 8D 9C B8 03 E8 3B 12 C3 8D 9C B8  // ..........;.....
    20B0: 03 E8 1B 12 C3 33 C9 33 D2 E8 E9 FF 38 D5 76 02  // .....3.3....8.v.
    20C0: 8A D5 FE C1 E8 6B F2 38 D9 72 EE 33 C9 8A EA 8D  // .....k.8.r.3....
    20D0: 9C 5C 03 E8 F9 11 B1 0B E8 F9 06 C3 E8 44 F2 8D  // .\...........D..
    20E0: 9C B8 03 E8 45 12 66 BA 03 01 80 83 E8 DD 07 C3  // ....E.f.........
    20F0: 51 53 8D 9C B0 03 E8 EE 11 FE C5 E8 D1 11 80 FD  // QS..............
    2100: 06 72 07 B5 02 E8 F6 01 33 C9 5B 59 C3 66 33 C0  // .r......3.[Y.f3.
    2110: 8D 9C B0 03 E8 74 11 C3 32 ED E8 65 FF 80 E3 0C  // .....t..2..e....
    2120: C0 EB 02 B7 03 2A FB C0 E3 03 8A EB 80 FB 18 72  // .....*.........r
    2130: 03 80 CD 20 E8 4B FF 80 E3 03 38 FB 72 02 8A DF  // ... .K....8.r...
    2140: 80 FB 03 75 03 80 CD 04 0A EB E8 60 FF C3 E8 D2  // ...u.......`....
    2150: F1 8D 9C C0 03 66 BA 02 02 90 45 E8 6E 07 C3 E8  // .....f....E.n...
    2160: C1 F1 66 BA 00 01 90 42 8D 9C B4 03 E8 5D 07 E8  // ..f....B.....]..
    2170: B1 F1 66 BA 03 01 90 45 8D 9C B8 03 E8 4D 07 E8  // ..f....E.....M..
    2180: E5 F1 E8 13 08 75 3B E8 99 F1 66 BA 0A 01 90 40  // .....u;...f....@
    2190: 8D 9C BF 03 E8 35 07 8D 9C 28 01 E8 8D 11 3C 14  // .....5...(....<.
    21A0: 72 20 E8 7E F1 66 BA 10 00 90 4F 8D 9C D0 03 E8  // r .~.f....O.....
    21B0: 1A 07 E8 6E F1 66 BA 15 01 90 40 8D 9C CC 03 E8  // ...n.f....@.....
    21C0: 0A 07 C3 E8 5D F1 66 BA 02 01 80 50 E8 FD 06 C3  // ....].f....P....
    21D0: E8 3F F1 8B C2 66 33 D2 B9 8C 0A F7 F1 C3 E8 42  // .?...f3........B
    21E0: F1 66 BA 00 06 80 50 E8 E2 06 C3 E8 35 F1 66 BA  // .f....P.....5.f.
    21F0: 11 01 80 50 B0 04 E8 D3 06 C3 E8 26 F1 66 BA 00  // ...P.......&.f..
    2200: 06 90 40 8D 9C C8 03 E8 C2 06 8D 9C C8 03 E8 1A  // ..@.............
    2210: 11 C3 E8 BB FF 3C 06 74 0E 3C 0A 74 0A 3C 14 74  // .....<.t.<.t.<.t
    2220: 06 3C 1E 74 02 33 C0 E8 08 F1 8A E3 80 CC 80 50  // .<.t.3.........P
    2230: E8 F0 F0 58 66 BA 00 01 80 61 E8 8F 06 33 C9 E8  // ...Xf....a...3..
    2240: 7C F0 0B C0 74 02 B5 10 8D 9C BC 03 E8 80 10 8A  // |...t...........
    2250: C5 E8 CF F0 66 BA 07 01 80 50 E8 6F 06 E8 07 F1  // ....f....P.o....
    2260: E8 35 07 75 49 8D 9C 48 03 E8 BF 10 0A C0 74 0E  // .5.uI..H......t.
    2270: E8 B0 F0 66 BA 0A 01 80 50 B0 01 E8 4E 06 8D 9C  // ...f....P...N...
    2280: 28 01 E8 A6 10 3C 14 72 25 8D 9C D0 03 E8 9B 10  // (....<.r%.......
    2290: 0B C0 74 1A E8 2A EC 32 C9 8D 9C CC 03 E8 2F 10  // ..t..*.2....../.
    22A0: 8A C5 E8 7E F0 66 BA 15 01 80 50 E8 1E 06 C3 8D  // ...~.f....P.....
    22B0: 9C B4 03 B9 0E 00 E8 FF 0B E8 A3 FE E8 8F FE E8  // ................
    22C0: 38 FF 3C 01 75 1C E8 D2 FD 74 17 33 C9 E8 A8 FD  // 8.<.u....t.3....
    22D0: 80 FD 07 75 0D FE C1 E8 58 F0 38 D9 75 EF B5 01  // ...u....X.8.u...
    22E0: EB 02 B5 00 E8 01 00 C3 8D 9C AC 03 B1 02 E8 DE  // ................
    22F0: 0F C3 51 8D 9C AC 03 32 C9 E8 D3 0F 59 C3 51 8D  // ..Q....2....Y.Q.
    2300: 9C AC 03 B1 01 E8 C7 0F 59 C3 8D 9C 32 01 E8 1A  // ........Y...2...
    2310: 10 24 07 75 15 B9 64 00 8D 9C AC 03 E8 0C 10 3C  // .$.u..d........<
    2320: 02 74 03 B9 90 01 E8 D5 0B C3 32 E4 B1 04 33 D2  // .t........2...3.
    2330: F6 E1 8B C8 E8 D2 0B C3 51 8D 5C 14 E8 EC 0F 66  // ........Q.\....f
    2340: C1 E0 10 E8 A4 01 59 C3 53 8D 9C 44 01 E8 DB 0F  // ......Y.S..D....
    2350: 5B C3 53 66 50 8D 9C 44 01 E8 CF 0F 8B C1 E8 2A  // [.SfP..D.......*
    2360: 0F 66 58 5B C3 53 51 8D 9C 44 01 8A E8 B1 03 E8  // .fX[.SQ..D......
    2370: 5D 0F 59 5B C3 33 C9 E8 38 0B 38 C1 73 05 B5 00  // ].Y[.3..8.8.s...
    2380: E8 8C 00 B5 00 E8 80 00 FE C1 E8 25 0B 38 C1 72  // ...........%.8.r
    2390: E6 B1 14 8A E9 E8 1D 0B 38 C1 74 05 B5 03 E8 E3  // ........8.t.....
    23A0: 01 FE C1 E8 06 0B 04 14 38 C1 76 E7 C3 83 EC 0C  // ........8.v.....
    23B0: 8B EC 0B F6 74 1E E8 03 F8 66 C1 C8 10 66 89 46  // ....t....f...f.F
    23C0: 00 8D 5C 04 E8 64 0F 66 89 46 04 8D 5C 08 E8 5A  // ..\..d.f.F..\..Z
    23D0: 0F 88 46 0A 89 4E 08 8C D0 66 C1 E0 10 8B C4 BB  // ..F..N...f......
    23E0: 2B 00 E8 E3 09 83 C4 0C C3 83 EC 04 8B EC B0 02  // +...............
    23F0: 88 46 01 88 4E 00 8C D0 66 C1 E0 10 8B C4 BB 25  // .F..N...f......%
    2400: 00 E8 C4 09 83 C4 04 C3 BB 23 00 E8 08 00 C3 BB  // .........#......
    2410: 17 00 E8 01 00 C3 83 EC 04 8B EC 89 4E 00 8C D0  // ............N...
    2420: 66 C1 E0 10 8B C4 E8 9F 09 83 C4 04 C3 BB 22 00  // f.............".
    2430: E8 E3 FF C3 BB 27 00 E8 DC FF C3 BB 2C 00 E8 D5  // .....'......,...
    2440: FF C3 E8 E6 0E 66 A9 00 00 FF FF 74 40 83 EC 18  // .....f.....t@...
    2450: 8B EC 55 51 B9 04 00 83 C3 02 E8 CE 0E 66 89 46  // ..UQ.........f.F
    2460: 00 83 C5 04 83 C3 04 E2 F1 83 C3 04 E8 BC 0E 66  // ...............f
    2470: C1 C8 10 66 89 46 00 59 5D 88 4E 14 8C D0 66 C1  // ...f.F.Y].N...f.
    2480: E0 10 8B C4 BB 31 00 E8 3E 09 83 C4 18 C3 E8 36  // .....1..>......6
    2490: EE 8D 9C D0 02 E8 93 0E 8A E8 BB 21 00 E8 76 FF  // ...........!..v.
    24A0: C3 8D 9C 3C 03 E8 83 0E 8A F8 E8 F9 ED 8A DD 53  // ...<...........S
    24B0: 8D 9C 42 03 E8 74 0E 8A E8 5B E8 0A EE E8 A7 EE  // ..B..t...[......
    24C0: E8 D5 04 75 02 B3 01 83 EC 04 8B EC 88 4E 00 88  // ...u.........N..
    24D0: 7E 01 88 5E 02 88 6E 03 8C D0 66 C1 E0 10 8B C4  // ~..^..n...f.....
    24E0: BB 2A 00 E8 E2 08 83 C4 04 C3 83 EC 10 8B EC 66  // .*.............f
    24F0: 3D F0 FF FF 03 76 06 66 B8 F0 FF FF 03 66 8B C8  // =....v.f.....f..
    2500: 66 33 C0 66 89 46 04 66 89 46 00 66 89 46 08 66  // f3.f.F.f.F.f.F.f
    2510: B8 00 00 00 D0 66 0B C1 66 89 46 0C 8C D0 66 C1  // .....f..f.F...f.
    2520: E0 10 8B C4 BB 35 00 E8 9E 08 83 C4 10 C3 83 EC  // .....5..........
    2530: 08 8B EC 89 4E 00 66 89 56 02 89 5E 06 8C D0 66  // ....N.f.V..^...f
    2540: C1 E0 10 8B C4 BB 2D 00 E8 7D 08 83 C4 08 C3 3D  // ......-..}.....=
    2550: C0 7F 76 04 B8 C0 7F C3 83 C0 3F 24 C0 C3 51 E8  // ..v.......?$..Q.
    2560: C9 0D 66 33 D2 B9 0A 00 F7 F1 8B C8 E8 BC 0D 03  // ..f3............
    2570: C1 66 25 FF FF 00 00 59 3D 10 27 73 03 B8 10 27  // .f%....Y=.'s...'
    2580: C3 32 D2 C3 80 FD 02 75 25 E8 42 EE 66 BB 00 08  // .2.....u%.B.f...
    2590: 00 00 E8 9A 00 E8 36 EE 66 BB 03 08 00 00 E8 8E  // ......6.f.......
    25A0: 00 66 33 D2 66 BB 01 08 00 00 E8 82 00 C3 80 FD  // .f3.f...........
    25B0: 03 75 10 66 33 C0 8A C1 66 33 D2 66 BB FF 00 00  // .u.f3...f3.f....
    25C0: 00 EB 36 51 33 D2 E8 DD EC 8A D5 66 C1 E2 10 E8  // ..6Q3......f....
    25D0: 15 ED 8A F2 8A D1 66 8B C2 66 0D 00 00 00 80 E8  // ......f..f......
    25E0: 50 ED 80 FB 04 76 06 66 0D 00 00 00 08 E8 86 ED  // P....v.f........
    25F0: E8 D4 EC 66 33 DB 8A D9 59 83 EC 10 8B EC 66 89  // ...f3...Y.....f.
    2600: 46 04 66 89 5E 08 66 8B C2 66 33 D2 66 BB 64 00  // F.f.^.f..f3.f.d.
    2610: 00 00 66 F7 E3 66 89 46 00 BB 0C 00 8C D0 66 C1  // ..f..f.F......f.
    2620: E0 10 8B C4 E8 A1 07 8B EC B3 01 83 C4 10 C3 83  // ................
    2630: EC 10 8B EC 66 89 56 00 66 89 5E 04 BB 2E 00 8C  // ....f.V.f.^.....
    2640: D0 66 C1 E0 10 8B C4 E8 7E 07 B3 01 83 C4 10 C3  // .f......~.......
    2650: C3 53 51 66 50 B9 68 74 80 FB 03 74 0B B9 A0 8C  // .SQfP.ht...t....
    2660: 80 FB 00 75 03 B9 78 69 66 33 D2 8B D1 66 58 59  // ...u..xif3...fXY
    2670: 5B C3 66 52 B3 00 66 F7 C2 00 00 FF FF 75 1A 80  // [.fR..f......u..
    2680: FD 13 74 15 80 FD 14 74 10 B3 01 80 FD 0E 74 09  // ..t....t......t.
    2690: B3 03 80 F9 03 74 02 B3 02 66 5A C3 B5 11 80 FA  // .....t...fZ.....
    26A0: 23 74 07 80 FA 22 74 02 B5 00 C3 B5 02 80 FA 23  // #t..."t........#
    26B0: 74 07 80 FA 22 74 02 B3 01 C3 32 C9 80 FD 00 75  // t..."t....2....u
    26C0: 08 C7 46 00 0B 01 B1 01 C3 50 33 C0 E8 9E 01 04  // ..F......P3.....
    26D0: 14 89 46 00 58 B1 01 C3 C3 8B DA B7 22 80 FE 21  // ..F.X......."..!
    26E0: 74 02 B7 21 C3 0C 01 C3 E8 40 0C 66 C1 E8 10 0B  // t..!.....@.f....
    26F0: C0 74 1C 53 83 C3 06 E8 31 0C 5B 3D E0 01 72 0F  // .t.S....1.[=..r.
    2700: 53 83 C3 18 E8 24 0C 5B A8 80 75 03 0C 01 C3 32  // S....$.[..u....2
    2710: C0 C3 B5 0C C3 B5 02 C3 50 E8 51 01 B1 03 0A C0  // ........P.Q.....
    2720: 74 04 B1 08 02 C8 58 C3 80 FA 22 75 05 C7 46 00  // t.....X..."u..F.
    2730: 78 69 C3 E8 1A 01 80 FD FF 74 35 83 EC 0C 8B EC  // xi.......t5.....
    2740: 88 4E 01 88 6E 00 80 F9 0F 75 05 E8 4F 00 EB 0F  // .N..n....u..O...
    2750: 80 F9 10 75 0A 8D 9C 48 03 E8 CF 0B 88 46 02 8C  // ...u...H.....F..
    2760: D0 66 C1 E0 10 8B C4 BB 04 00 E8 5B 06 83 C4 0C  // .f.........[....
    2770: C3 83 EC 10 8B EC 88 4E 01 E8 76 EB 81 E2 00 07  // .......N..v.....
    2780: FE CE C0 E6 04 88 76 00 E8 12 00 8C D0 66 C1 E0  // ......v......f..
    2790: 10 8B C4 BB 32 00 E8 2F 06 83 C4 10 C3 66 53 E8  // ....2../.....fS.
    27A0: 70 EB 66 8B C2 66 33 D2 66 BB 8C 0A 00 00 66 F7  // p.f..f3.f.....f.
    27B0: F3 66 5B 8A E8 88 6E 09 8D 9C 40 03 E8 6C 0B 88  // .f[...n...@..l..
    27C0: 46 02 88 66 03 66 C1 E8 10 88 46 08 E8 32 EB 66  // F..f.f....F..2.f
    27D0: 89 56 04 C3 83 EC 20 8B EC 80 F9 04 75 0A 88 4E  // .V.... .....u..N
    27E0: 01 32 C0 88 46 00 EB 56 E8 FC EA E8 7F 00 88 46  // .2..F..V.......F
    27F0: 00 88 4E 01 E8 70 EB 88 56 0A 80 F9 01 74 18 80  // ..N..p..V....t..
    2800: F9 0B 75 3A 8D 9C 5C 03 E8 20 0B 88 46 02 E8 F0  // ..u:..\.. ..F...
    2810: EA 66 89 56 04 EB 27 E8 09 EB 88 6E 08 E8 E1 EA  // .f.V..'....n....
    2820: 66 89 56 04 E8 0B EB 88 5E 03 E8 79 EA 88 6E 02  // f.V.....^..y..n.
    2830: 51 E8 1C 00 8A CD B0 01 D2 E0 59 88 46 09 8C D0  // Q.........Y.F...
    2840: 66 C1 E0 10 8B C4 BB 4C 00 E8 7C 05 83 C4 20 C3  // f......L..|... .
    2850: 8D 9C 3C 03 E8 D4 0A 32 ED 3C 03 74 0C 3C 09 72  // ..<....2.<.t.<.r
    2860: 09 3C 0E 77 05 2C 08 8A E8 C3 B5 FF C3 52 32 C0  // .<.w.,.......R2.
    2870: 80 EE 21 80 FA 1E 74 10 B0 02 80 FA 20 74 09 B0  // ..!...t..... t..
    2880: 04 80 FA 21 74 02 B0 06 02 C6 5A C3 83 EC 08 8C  // ...!t.....Z.....
    2890: D0 66 C1 E0 10 8B C4 BB 4B 00 E8 2B 05 83 C4 08  // .f......K..+....
    28A0: C3 83 EC 08 8B EC 89 7E 00 89 5E 02 89 56 04 89  // .......~..^..V..
    28B0: 4E 06 8C D0 66 C1 E0 10 8B C4 BB 36 00 E8 08 05  // N...f......6....
    28C0: 8B EC 8B 5E 02 8A 7E 01 83 C4 08 C3 56 33 F6 66  // ...^..~.....V3.f
    28D0: F7 C2 00 00 80 00 75 0A 50 33 C0 8A C6 8B F0 32  // ......u.P3.....2
    28E0: F6 58 53 BB 04 1F E8 A2 09 66 8B C2 BB 00 1F E8  // .XS......f......
    28F0: 99 09 5B 66 F7 C2 00 00 10 00 75 02 33 DB 8B D3  // ..[f......u.3...
    2900: 66 C1 E2 10 BA 00 1F 83 EC 08 8B EC 66 89 56 00  // f...........f.V.
    2910: 88 4E 04 8A C5 FE C8 88 46 07 C6 46 05 00 C6 46  // .N......F..F...F
    2920: 06 00 8C D0 66 C1 E0 10 8B C4 BB 4E 00 E8 98 04  // ....f......N....
    2930: 8B EC 8A 5E 05 8A 7E 06 83 C4 08 0A DB 74 32 51  // ...^..~......t2Q
    2940: B9 90 01 80 FB 20 74 05 80 FB 80 75 13 B9 0A 00  // ..... t....u....
    2950: 8B C6 0A C0 74 0A B9 90 01 3C 01 74 03 B9 E8 03  // ....t....<.t....
    2960: E8 9B 05 59 8B C6 FE C4 8B F0 80 FC 06 76 98 0A  // ...Y.........v..
    2970: DB 5E C3 8D 5C 04 E8 B2 09 8B D0 B5 02 E8 14 00  // .^..\...........
    2980: 74 11 B5 01 80 FA 13 75 0A E8 61 00 80 FA 13 75  // t......u..a....u
    2990: 02 B5 02 C3 80 FA 14 C3 E8 F9 FF 74 03 80 FA 0E  // ...........t....
    29A0: C3 80 FA 05 C3 80 FA 02 74 03 80 FA 04 C3 80 FA  // ........t.......
    29B0: 01 74 03 80 FA 02 C3 80 FA 02 75 03 B2 01 C3 80  // .t........u.....
    29C0: FA 04 75 03 B2 03 C3 C3 B5 08 E8 D8 FF 74 02 B5  // ..u..........t..
    29D0: 04 C3 8D 5C 09 E8 53 09 8A C8 0A C9 75 03 32 C0  // ...\..S.....u.2.
    29E0: C3 B5 02 E8 A6 04 8A C5 24 02 D0 E8 C3 8D 5C 08  // ........$.....\.
    29F0: E8 38 09 8A D0 B6 01 83 EC 10 8B EC 89 56 02 8C  // .8...........V..
    2A00: D0 66 C1 E0 10 8B C4 BB 4F 00 E8 BB 03 8B EC 8A  // .f......O.......
    2A10: 56 04 83 C4 10 C3 53 83 C3 4C E8 DC 08 5B C3 53  // V.....S..L...[.S
    2A20: 83 C3 4C E8 2E 08 5B C3 56 E8 59 03 8B 44 38 83  // ..L...[.V.Y..D8.
    2A30: 7D 20 00 5E C3 52 50 0F BC D8 32 FF 80 FB 01 75  // } .^.RP...2....u
    2A40: 05 BB 00 24 EB 0C FE CB B8 00 04 F7 E3 05 00 20  // ...$........... 
    2A50: 8B D8 58 5A C3 57 E8 56 00 74 0A 8B 5D 02 E8 08  // ..XZ.W.V.t..]...
    2A60: 00 0B DB 5F C3 33 DB 5F C3 52 51 0B DB 74 1B 56  // ..._.3._.RQ..t.V
    2A70: E8 F9 02 03 DE 5E 33 C9 8A 4F 01 80 3F FF 74 08  // .....^3..O..?.t.
    2A80: 3A 07 74 06 03 D9 EB F0 33 DB 0B DB 59 5A C3 56  // :.t.....3...YZ.V
    2A90: 51 E8 D8 02 32 C9 8D 7C 08 3B 5D 04 74 0C 83 C7  // Q...2..|.;].t...
    2AA0: 10 FE C1 3A 4C 06 72 F1 33 FF 0B FF 59 5E C3 56  // ...:L.r.3...Y^.V
    2AB0: 51 E8 B8 02 32 C9 8D 7C 08 3B 1D 74 0C 83 C7 10  // Q...2..|.;.t....
    2AC0: FE C1 3A 4C 06 72 F2 33 FF 0B FF 59 5E C3 56 51  // ..:L.r.3...Y^.VQ
    2AD0: E8 99 02 32 C9 8D 7C 08 3B 45 0C 74 0C 83 C7 10  // ...2..|.;E.t....
    2AE0: FE C1 3A 4C 06 72 F1 33 FF 0B FF 59 5E C3 57 50  // ..:L.r.3...Y^.WP
    2AF0: E8 DB FF 8A C3 8B 5D 02 E8 6E FF 58 5F C3 53 32  // ......]..n.X_.S2
    2B00: C9 B3 01 E8 E8 FF 74 03 8A 4F 02 0A C9 5B C3 53  // ......t..O...[.S
    2B10: 32 ED B3 02 E8 D7 FF 74 03 8A 6F 02 0A ED 5B C3  // 2......t..o...[.
    2B20: 50 57 8B DA E8 68 FF 75 04 33 DB EB 0D B0 14 8B  // PW...h.u.3......
    2B30: 5D 08 E8 34 FF 74 F2 8B 5F 02 5F 58 C3 66 50 53  // ]..4.t.._._X.fPS
    2B40: 51 57 8D 1C 66 25 FF FF 00 00 E8 3E 07 8B D8 E8  // QW..f%.....>....
    2B50: 3B 00 23 C3 74 31 E8 75 FF 0B FF 74 2A 66 50 66  // ;.#.t1.u...t*fPf
    2B60: 8B 45 04 8D 5C 0C E8 22 07 66 33 C0 8B 05 8D 5C  // .E..\..".f3....\
    2B70: 04 E8 17 07 66 58 E8 85 FF E8 93 FF 8D 5C 08 66  // ....fX.......\.f
    2B80: 33 C0 8B C1 E8 04 07 5F 59 5B 66 58 C3 56 E8 DB  // 3......_Y[fX.V..
    2B90: 01 8B 44 04 5E C3 56 E8 D2 01 89 44 04 5E C3 E8  // ..D.^.V....D.^..
    2BA0: F8 01 8B F7 83 C6 38 BB 00 2C B9 23 00 E8 36 03  // ......8..,.#..6.
    2BB0: E8 01 00 C3 51 66 57 56 E8 B1 01 66 33 FF 8D 7C  // ....QfWV...f3..|
    2BC0: 08 33 C0 E8 D0 FF 32 C9 8B 15 B8 00 70 23 C2 3D  // .3....2.....p#.=
    2BD0: 00 30 75 5A 80 FA 15 74 0B E8 B1 FF 0B 45 0C E8  // .0uZ...t.....E..
    2BE0: B4 FF EB 4A E8 64 00 89 45 0C 0B C0 75 04 89 05  // ...J.d..E...u...
    2BF0: EB 3C E8 98 FF 0B 45 0C E8 9B FF 83 7D 06 00 74  // .<....E.....}..t
    2C00: 16 E8 50 00 89 45 06 0B C0 74 0C 83 7D 06 00 74  // ..P..E...t..}..t
    2C10: 06 8B 5C 0A E8 C1 00 E8 46 00 89 05 8B 5D 02 E8  // ..\.....F....]..
    2C20: B6 00 8B 5D 02 E8 D1 00 8B 5D 08 E8 EF 00 83 C7  // ...].....]......
    2C30: 10 FE C1 3A 4C 06 72 90 5E 66 5F 59 C3 08 00 80  // ...:L.r.^f_Y....
    2C40: 00 00 02 00 04 00 08 40 00 00 00 53 E8 58 00 E8  // .......@...S.X..
    2C50: D9 06 5B C3 53 E8 4F 00 83 C3 08 E8 CD 06 5B C3  // ..[.S.O.......[.
    2C60: 53 57 52 E8 41 00 83 C3 04 E8 BF 06 8B D0 E8 34  // SWR.A..........4
    2C70: FD 75 16 8B 5D 04 8B D3 E8 5E FA 57 E8 10 FE 5F  // .u..]....^.W..._
    2C80: 75 07 8B D0 E8 30 FD 8B C2 5A 5F 5B C3 E8 D0 FF  // u....0...Z_[....
    2C90: 66 C1 E8 10 B4 11 E8 25 00 C3 E8 C3 FF 66 C1 E8  // f......%.....f..
    2CA0: 18 B4 10 E8 18 00 C3 51 52 33 C9 8A CE 80 E1 07  // .......QR3......
    2CB0: 49 B8 10 00 F7 E1 BB 14 2C 03 D8 5A 59 C3 57 53  // I.......,..ZY.WS
    2CC0: 51 33 C9 8A C8 8A C4 BB 03 71 E8 88 FD 83 C3 02  // Q3.......q......
    2CD0: 03 D9 8A 07 59 5B 5F C3 50 53 B0 01 E8 8A FD 74  // ....Y[_.PS.....t
    2CE0: 15 E8 A9 FF 88 47 02 5B 53 B0 02 E8 7B FD 74 06  // .....G.[S...{.t.
    2CF0: E8 A7 FF 88 47 02 5B 58 C3 51 50 B0 17 E8 69 FD  // ....G.[X.QP...i.
    2D00: 74 18 53 E8 A1 FF 83 C3 0C E8 1F 06 8B C8 5B F7  // t.S...........[.
    2D10: C1 00 04 74 05 66 83 4F 02 01 58 59 C3 51 50 B0  // ...t.f.O..XY.QP.
    2D20: 14 E8 45 FD 74 3A 53 E8 7D FF 83 C3 0C E8 FB 05  // ..E.t:S.}.......
    2D30: 8B C8 5B F6 C1 01 74 05 66 83 67 02 FD F6 C1 80  // ..[...t.f.g.....
    2D40: 74 05 66 83 67 02 F7 F7 C1 00 01 74 08 66 81 4F  // t.f.g......t.f.O
    2D50: 02 00 01 00 00 F7 C1 00 02 74 05 66 83 67 02 FB  // .........t.f.g..
    2D60: 58 59 C3 BF AA 01 8B 3D 8B 7D 0C C3 BE AA 01 8B  // XY.....=.}......
    2D70: 34 8B 74 30 C3 1E 0E 1F BF AA 01 8B 3D 8B 7D 0E  // 4.t0........=.}.
    2D80: 83 C7 04 1F C3 BE AA 01 8B 34 8B 74 10 C3 BF AA  // .........4.t....
    2D90: 01 8B 3D 8B 7D 26 83 C7 04 C3 BF AA 01 8B 3D 8B  // ..=.}&........=.
    2DA0: 7D 40 C3 BE AA 01 8B 34 8B 74 1A C3 BE AA 01 8B  // }@.....4.t......
    2DB0: 34 8B 74 3A C3 BF AA 01 8B 3D 8B 7D 0A 83 C7 04  // 4.t:.....=.}....
    2DC0: B9 0C 00 C3 E8 01 00 CB 83 EC 06 8B EC 89 46 00  // ..............F.
    2DD0: 66 33 C0 C6 46 04 00 89 46 02 06 52 8A D3 8B C5  // f3..F...F..R....
    2DE0: E8 8A 17 5A 07 83 C4 06 C3 E8 77 FF 66 F7 45 10  // ...Z......w.f.E.
    2DF0: 01 00 00 00 C3 50 E8 6A FF B8 01 00 09 45 10 58  // .....P.j.....E.X
    2E00: C3 E8 5F FF 88 45 10 C3 66 53 83 EC 48 8B EC 66  // .._..E..fS..H..f
    2E10: 89 5E 00 66 89 4E 04 8C D0 66 C1 E0 10 8B C4 BB  // .^.f.N...f......
    2E20: 00 00 E8 A3 FF 83 C4 48 66 5B E8 6A 01 E8 A4 01  // .......Hf[.j....
    2E30: 83 EC 1C 8B EC C6 46 01 07 8C D0 66 C1 E0 10 8B  // ......F....f....
    2E40: C4 BB 0D 00 E8 81 FF 83 C4 1C E8 0E 00 BB 04 00  // ................
    2E50: E8 C3 FB 66 C1 E8 10 E8 A7 FF C3 83 EC 1C 8B EC  // ...f............
    2E60: C6 46 01 08 8C D0 66 C1 E0 10 8B C4 BB 0D 00 E8  // .F....f.........
    2E70: 56 FF 83 C4 1C C3 E8 EA FE 66 8B 5D 08 66 8B 4D  // V........f.].f.M
    2E80: 0C C3 56 E8 26 FF 66 8B 44 08 5E C3 83 EC 04 8B  // ..V.&.f.D.^.....
    2E90: EC 89 4E 00 8C D0 66 C1 E0 10 8B C4 BB 38 00 E8  // ..N...f......8..
    2EA0: 26 FF 8B EC 8A 6E 02 83 C4 04 C3 C3 B0 05 C3 B0  // &....n..........
    2EB0: 01 C3 B0 04 C3 B0 08 C3 53 66 50 66 33 C0 E8 CA  // ........SfPf3...
    2EC0: 03 83 C3 04 E2 F8 66 58 5B C3 32 C0 C3 FC E8 5A  // ......fX[.2....Z
    2ED0: 04 66 C1 CB 10 E8 B3 03 66 C1 CB 10 66 81 C3 04  // .f......f...f...
    2EE0: 00 04 00 E2 E9 C3 FC 66 AD E8 9F 03 83 C3 04 E2  // .......f........
    2EF0: F6 C3 FC E8 35 04 66 AB 83 C3 04 E2 F6 C3 66 50  // ....5.f.......fP
    2F00: B8 30 00 E8 10 00 66 58 C3 66 50 B8 C0 5D D1 E1  // .0....fX.fP..]..
    2F10: E8 03 00 66 58 C3 52 F7 E1 8B CA E8 26 02 66 53  // ...fX.R.....&.fS
    2F20: 8B D9 66 C1 E3 10 8B D8 66 B8 04 B1 03 00 B2 00  // ..f.....f.......
    2F30: 66 EF B2 04 66 33 C0 66 EF 66 B8 08 B1 03 00 B2  // f...f3.f.f......
    2F40: 00 66 EF B2 04 66 ED 33 C9 66 03 D8 73 0A 66 ED  // .f...f.3.f..s.f.
    2F50: 66 A9 00 00 00 80 75 F6 66 ED 66 3B C3 73 0C 66  // f.....u.f.f;.s.f
    2F60: C1 E8 10 3B C1 72 04 8B C8 EB ED 66 5B 5A C3 BB  // ...;.r.....f[Z..
    2F70: 42 EC E8 84 03 66 33 D2 66 BB 30 00 00 00 66 F7  // B....f3.f.0...f.
    2F80: F3 C3 66 50 53 BB 07 00 E8 8B FA 25 00 02 35 00  // ..fPS......%..5.
    2F90: 02 0B C0 5B 66 58 C3 66 51 B3 01 E8 80 01 E8 02  // ...[fX.fQ.......
    2FA0: FE 66 33 C9 8B 4C 08 66 C1 E0 0A 0B C9 75 03 B9  // .f3..L.f.....u..
    2FB0: 20 00 66 2B C1 E8 EB FD 66 89 44 04 89 4C 08 66  //  .f+....f.D..L.f
    2FC0: 59 C3 56 1E 0E 1F E8 DA FD 66 8B 44 04 66 C1 E0  // Y.V......f.D.f..
    2FD0: 0A 1F 5E C3 E8 C0 FF 06 E8 BF FD 0E 07 BB 00 78  // ..^............x
    2FE0: E8 48 03 66 3B 05 75 07 B9 00 01 FC E8 03 FF E8  // .H.f;.u.........
    2FF0: A8 FD BE AA 01 8B 34 8B 74 14 8B 45 14 89 44 0C  // ......4.t..E..D.
    3000: E8 82 FD 0B F6 74 4F 8B 45 28 89 44 20 8A 45 33  // .....tO.E(.D .E3
    3010: 88 44 38 F6 45 26 08 74 17 8A 45 26 C0 E8 04 88  // .D8.E&.t..E&....
    3020: 44 24 80 64 24 FD F6 45 26 01 74 04 80 4C 24 02  // D$.d$..E&.t..L$.
    3030: 57 83 C7 38 8A 85 87 00 88 44 3B 5F 66 8B 45 18  // W..8.....D;_f.E.
    3040: 89 44 28 B9 07 00 8D 5D 2C 8A 07 0A C0 74 03 88  // .D(....],....t..
    3050: 44 2C 43 46 E2 F3 E8 53 FD 8B 45 20 89 44 10 8B  // D,CF...S..E .D..
    3060: 45 22 89 44 12 8B 45 1C 89 44 14 8B 45 1E 89 44  // E".D..E..D..E..D
    3070: 16 BB 04 71 B0 09 E8 DC F9 74 0C 57 83 C7 38 8A  // ...q.....t.W..8.
    3080: 85 85 00 88 47 04 5F 07 C3 BE AA 01 8B 34 8B 74  // ....G._......4.t
    3090: 1E 83 C6 04 B9 26 00 C3 56 E8 E9 FC 8A 6C 33 5E  // .....&..V....l3^
    30A0: C3 56 E8 E0 FC 53 81 C3 09 01 E8 7E 02 8A E8 5B  // .V...S.....~...[
    30B0: 53 81 C3 00 01 E8 73 02 5B 8A C5 66 89 44 34 5E  // S.....s.[..f.D4^
    30C0: C3 56 E8 C0 FC 66 8B 44 34 53 81 C3 08 01 B1 01  // .V...f.D4S......
    30D0: 8A E8 E8 FA 01 5B 53 81 C3 00 01 B1 01 8A EC E8  // .....[S.........
    30E0: ED 01 5B 53 81 C3 02 01 66 C1 E8 10 E8 B4 01 5B  // ..[S....f......[
    30F0: 5E C3 56 E8 8F FC 8B FE 83 C7 04 5E C3 56 E8 84  // ^.V........^.V..
    3100: FC 8A 44 24 80 FD 00 74 05 88 6C 33 0C 02 88 44  // ..D$...t..l3...D
    3110: 24 5E C3 32 C0 C3 E8 81 FC 66 8B 45 08 C3 66 53  // $^.2.....f.E..fS
    3120: 83 EC 04 8B EC 8C D0 66 C1 E0 10 8B C4 66 89 5E  // .......f.....f.^
    3130: 00 BB 06 00 E8 91 FC 8B EC 66 8B 46 00 83 C4 04  // .........f.F....
    3140: 66 5B C3 00 66 50 8C C8 3D 00 C0 75 0C BA C3 03  // f[..fP..=..u....
    3150: EC 8A F0 0A F6 74 02 EB 0E 53 2E 8B 1E 14 00 B2  // .....t...S......
    3160: 20 E8 D6 00 8A F4 5B 32 D2 66 ED 66 58 C3 2E 8B  //  .....[2.f.fX...
    3170: 1E 14 00 C3 0B C9 75 1A 4B 74 16 43 3B DA 77 09  // ......u.Kt.C;.w.
    3180: 8B C8 8B C2 2B D2 F7 F3 91 F7 F3 8B DA 8B D1 2B  // ....+..........+
    3190: C9 C3 3B CA 72 1A 75 10 3B D8 77 0C 2B C3 8B D8  // ..;.r.u.;.w.+...
    31A0: 2B C9 2B D2 B8 01 00 C3 2B C9 2B DB 93 87 CA C3  // +.+.....+.+.....
    31B0: 55 56 2B F6 8B EE 03 DB 13 C9 72 11 45 3B CA 72  // UV+.......r.E;.r
    31C0: F5 77 04 3B D8 76 EF F8 13 F6 4D 78 20 D1 D9 D1  // .w.;.v....Mx ...
    31D0: DB 2B C3 1B D1 F5 72 F0 03 F6 4D 78 0C D1 E9 D1  // .+....r...Mx....
    31E0: DB 03 C3 13 D1 73 F1 EB DF 03 C3 13 D1 8B D8 8B  // .....s..........
    31F0: CA 8B C6 33 D2 5E 5D C3 93 50 92 0B C0 74 02 F7  // ...3.^]..P...t..
    3200: E2 91 0B C0 74 04 F7 E3 03 C8 58 F7 E3 03 D1 C3  // ....t.....X.....
    3210: 52 66 50 B4 80 8A C7 66 C1 E0 10 8A E3 8A C2 24  // RfP....f.......$
    3220: FC BA F8 0C 66 EF 66 58 5A C3 52 BA FC 0C 66 ED  // ....f.fXZ.R...f.
    3230: 5A C3 52 BA FC 0C 66 EF 5A C3 E8 31 FF 9C FA E8  // Z.R...f.Z..1....
    3240: CE FF E8 E5 FF 9D C3 E8 24 FF 9C FA E8 C1 FF E8  // ........$.......
    3250: E0 FF 9D C3 52 66 53 66 50 E8 06 00 66 58 66 5B  // ....RfSfP...fXf[
    3260: 5A C3 66 C1 E3 10 66 C1 EB 0E E8 D7 FE E8 93 01  // Z.f...f.........
    3270: C3 66 50 66 C1 E3 10 66 C1 EB 10 E8 44 FD 66 03  // .fPf...f....D.f.
    3280: D8 66 81 CB 00 00 00 80 66 58 C3 52 66 53 E8 04  // .f......fX.RfS..
    3290: 00 66 5B 5A C3 66 50 E8 AA FE E8 D4 FF E8 63 01  // .f[Z.fP.......c.
    32A0: 66 58 C3 52 51 66 53 66 50 8A CB 80 E3 FC 80 E1  // fX.RQfSfP.......
    32B0: 03 C0 E1 03 E8 8D FE E8 B7 FF E8 2D 01 66 D3 C8  // ...........-.f..
    32C0: 58 50 66 D3 C0 E8 3B 01 66 58 66 5B 59 5A C3 66  // XPf...;.fXf[YZ.f
    32D0: 50 51 C0 E1 03 E8 53 00 66 D3 C8 8A C5 66 D3 C0  // PQ....S.f....f..
    32E0: E8 A8 FF 59 66 58 C3 66 50 51 C0 E1 03 E8 3B 00  // ...YfX.fPQ....;.
    32F0: 66 D3 C8 59 8A E8 66 58 C3 E8 5F 00 C3 E8 44 FE  // f..Y..fX.._...D.
    3300: 66 C1 E3 10 66 C1 EB 0E E8 DF 00 C3 E8 35 FE 66  // f...f........5.f
    3310: C1 E3 02 E8 D4 00 C3 52 66 53 E8 04 00 66 5B 5A  // .......RfS...f[Z
    3320: C3 E8 20 FE E8 4A FF E8 C0 00 C3 51 66 52 8A EB  // .. ..J.....QfR..
    3330: 8A CB 80 E1 03 C0 E1 03 80 E3 FC E8 D9 FF 80 F9  // ................
    3340: 00 74 14 66 8B D0 83 C3 04 E8 CB FF 83 EB 04 66  // .t.f...........f
    3350: 92 66 0F AD D0 8A DD 66 5A 59 C3 52 66 53 E8 9C  // .f.....fZY.RfS..
    3360: FF 66 5B 5A C3 52 66 53 E8 A1 FF 66 5B 5A C3 66  // .f[Z.RfS...f[Z.f
    3370: 50 55 52 66 50 8B EC 8B 56 0C 89 56 08 E8 C4 FD  // PURfP...V..V....
    3380: B2 00 66 ED 66 89 46 0A 66 58 5A 5D C3 66 50 55  // ..f.f.F.fXZ].fPU
    3390: 52 66 50 8B EC 8B 56 0C 89 56 08 E8 A6 FD 2E A1  // RfP...V..V......
    33A0: F9 01 B2 18 EF B2 00 66 ED 66 89 46 0A 66 58 5A  // .......f.f.F.fXZ
    33B0: 5D C3 66 50 55 52 8B EC E8 89 FD B2 00 66 8B 46  // ].fPUR.......f.F
    33C0: 0A 66 EF 8B 56 08 89 56 0C 66 8B 46 04 66 89 46  // .f..V..V.f.F.f.F
    33D0: 08 5A 5D 66 58 66 58 C3 66 50 52 E8 66 FD B2 18  // .Z]fXfX.fPR.f...
    33E0: 66 ED 2E A3 F9 01 5A 66 58 C3 66 81 FB FF 00 00  // f.....ZfX.f.....
    33F0: 00 77 04 8A D3 EB 09 66 8B C3 B2 00 66 EF B2 04  // .w.....f....f...
    3400: 66 ED C3 66 81 FB FF 00 00 00 77 04 8A D3 EB 0A  // f..f......w.....
    3410: 66 93 B2 00 66 EF 66 93 B2 04 66 EF C3 C3 C3 55  // f...f.f...f....U
    3420: 8B EC 53 51 8B F0 26 8B 5C 14 26 8B 4C 16 E8 28  // ..SQ..&.\.&.L..(
    3430: 00 8D 66 FC 59 5B 5D C3 53 51 8B F0 26 8B 5C 24  // ..f.Y[].SQ..&.\$
    3440: 33 C9 E8 14 00 59 5B C3 55 8B EC 53 51 8B F0 26  // 3....Y[.U..SQ..&
    3450: 8B 5C 08 26 8B 4C 0A EB D5 52 56 57 C8 06 00 00  // .\.&.L...RVW....
    3460: 8B F0 89 4E FE 8C D0 8E C0 26 8B 7C 26 8A 45 01  // ...N.....&.|&.E.
    3470: 32 E4 B9 20 00 2B C8 B8 FF FF 8B D0 E3 06 D1 EA  // 2.. .+..........
    3480: D1 D8 E2 FA 8A 4D 03 32 ED 8B FA E3 06 D1 E0 D1  // .....M.2........
    3490: D7 E2 FA F7 D0 F7 D7 26 21 44 1C 26 21 7C 1E 8C  // .......&!D.&!|..
    34A0: D0 8E C0 26 8B 7C 26 8A 4D 01 32 ED B8 20 00 2B  // ...&.|&.M.2.. .+
    34B0: C1 8B C8 66 C7 46 FA FF FF FF FF E3 08 D1 6E FC  // ...f.F........n.
    34C0: D1 5E FA E2 F8 8A 4D 02 32 ED 8B C3 8B 56 FE E3  // .^....M.2....V..
    34D0: 06 D1 EA D1 D8 E2 FA 23 46 FA 23 56 FC 8A 4D 03  // .......#F.#V..M.
    34E0: 32 ED E3 06 D1 E0 D1 D2 E2 FA 26 09 44 1C 26 09  // 2.........&.D.&.
    34F0: 54 1E C9 5F 5E 5A C3 55 8B EC 53 51 52 57 50 8B  // T.._^Z.U..SQRWP.
    3500: D8 26 8B 7F 26 8A 45 01 32 E4 B9 20 00 2B C8 B8  // .&..&.E.2.. .+..
    3510: FF FF 8B D0 E3 06 D1 EA D1 D8 E2 FA 8A 4D 02 88  // .............M..
    3520: 4E F6 C6 46 F7 00 8B FA 8B 4E F6 E3 06 D1 E0 D1  // N..F.....N......
    3530: D7 E2 FA 26 09 47 1C 26 09 7F 1E 8D 66 F8 5F 5A  // ...&.G.&....f._Z
    3540: E9 F1 FE 53 51 52 57 8B D8 8C D0 8E C0 26 8B 77  // ...SQRW......&.w
    3550: 26 8A 4C 01 32 ED B8 20 00 2B C1 8B C8 BE FF FF  // &.L.2.. .+......
    3560: 8B D6 E3 06 D1 EA D1 DE E2 FA 26 8B 7F 26 8A 4D  // ..........&..&.M
    3570: 02 32 ED 8B C6 E3 06 D1 E0 D1 D2 E2 FA F7 D0 F7  // .2..............
    3580: D2 26 21 47 1C 26 21 57 1E 5F E9 CC 05 53 56 8B  // .&!G.&!W._...SV.
    3590: D8 8C D2 8E C2 26 8B 77 26 80 3C 00 74 73 80 3C  // .....&.w&.<.ts.<
    35A0: 01 75 58 8A 44 01 32 E4 26 83 7F 1E 00 75 4C 26  // .uX.D.2.&....uL&
    35B0: 3B 47 1C 75 46 8A 04 6B F0 03 8A 84 E6 91 26 01  // ;G.uF..k......&.
    35C0: 47 26 8C D0 8E C0 26 8B 77 26 80 3C 09 74 17 8A  // G&....&.w&.<.t..
    35D0: 04 32 E4 6B F0 03 8B C3 FF 94 E4 91 26 8B 77 26  // .2.k........&.w&
    35E0: 8A 04 32 E4 EB D1 8B 44 01 26 29 47 26 26 FF 47  // ..2....D.&)G&&.G
    35F0: 26 26 8B 47 1C 26 8B 77 1E EB 1A 26 8B 77 26 8A  // &&.G.&.w...&.w&.
    3600: 04 32 E4 6B F0 03 8A 84 E6 91 26 01 47 26 E9 80  // .2.k......&.G&..
    3610: FF 33 C0 33 F6 8B D6 5E 5B C3 53 51 52 56 8B D8  // .3.3...^[.SQRV..
    3620: 8D 77 35 26 8B 54 02 26 89 57 14 26 C7 47 16 00  // .w5&.T.&.W.&.G..
    3630: 00 8B F0 26 8B 47 20 33 D2 26 01 47 14 26 11 54  // ...&.G 3.&.G.&.T
    3640: 16 8C D1 8E C1 26 F6 47 2F 06 0F 85 0A 05 26 80  // .....&.G/.....&.
    3650: 7F 34 00 75 22 26 8B 77 16 26 0B 77 14 75 10 26  // .4.u"&.w.&.w.u.&
    3660: D1 67 08 26 D1 57 0A 26 D1 67 08 26 D1 57 0A 8B  // .g.&.W.&.g.&.W..
    3670: C3 E8 79 11 E9 E1 04 26 8A 47 34 32 E4 05 80 00  // ..y....&.G42....
    3680: 99 26 89 47 1C 26 89 57 1E 8B C3 E8 FF FE E9 C7  // .&.G.&.W........
    3690: 04 53 56 8B D8 8D 77 35 26 8A 44 02 32 E4 C1 E0  // .SV...w5&.D.2...
    36A0: 02 26 8B 37 26 8B 34 03 F0 26 8B 47 08 26 8B 5F  // .&.7&.4..&.G.&._
    36B0: 0A 26 89 04 26 89 5C 02 5E 5B C3 53 52 56 8B D8  // .&..&.\.^[.SRV..
    36C0: 8C D0 8D 77 35 8E C0 26 8A 54 02 80 FA 40 73 21  // ...w5..&.T...@s!
    36D0: 26 8B 77 02 32 F6 C1 E2 02 26 8B 74 04 03 F2 26  // &.w.2....&.t...&
    36E0: 8B 57 08 26 8B 47 0A 26 89 14 26 89 44 02 E9 7F  // .W.&.G.&..&.D...
    36F0: 00 80 FA 41 75 12 26 8B 47 08 26 8B 57 0A 26 89  // ...Au.&.G.&.W.&.
    3700: 47 10 26 89 57 12 EB 68 80 FA 40 75 12 26 8B 47  // G.&.W..h..@u.&.G
    3710: 08 26 8B 57 0A 26 89 47 0C 26 89 57 0E EB 51 80  // .&.W.&.G.&.W..Q.
    3720: FA 42 75 0A 26 8B 47 08 26 89 47 22 EB 42 80 FA  // .Bu.&.G.&.G".B..
    3730: 43 75 0A 26 8A 47 08 26 88 47 33 EB 33 80 FA 46  // Cu.&.G.&.G3.3..F
    3740: 75 12 26 8B 57 08 26 8B 47 0A 26 89 57 18 26 89  // u.&.W.&.G.&.W.&.
    3750: 47 1A EB 1C 80 FA 47 75 0A 26 8B 47 08 26 89 47  // G.....Gu.&.G.&.G
    3760: 24 EB 0D 80 FA 48 75 08 26 8B 47 08 26 89 47 20  // $....Hu.&.G.&.G 
    3770: 5E 5A 5B C3 53 56 8B D8 8D 77 35 26 8A 44 02 32  // ^Z[.SV...w5&.D.2
    3780: E4 26 89 47 14 26 C7 47 16 00 00 5E 5B C3 53 56  // .&.G.&.G...^[.SV
    3790: 8B D8 26 8B 77 02 26 8B 74 02 8A 04 32 E4 26 89  // ..&.w.&.t...2.&.
    37A0: 47 14 26 C7 47 16 00 00 26 8B 5F 02 26 FF 47 02  // G.&.G...&._.&.G.
    37B0: 5E 5B C3 53 56 8B D8 26 8B 77 02 26 8B 74 02 8B  // ^[.SV..&.w.&.t..
    37C0: 34 26 89 77 14 26 C7 47 16 00 00 26 8B 5F 02 26  // 4&.w.&.G...&._.&
    37D0: 83 47 02 02 5E 5B C3 53 56 8B D8 26 8B 77 02 26  // .G..^[.SV..&.w.&
    37E0: 8B 74 02 8B 04 8B 74 02 26 89 47 14 26 89 77 16  // .t....t.&.G.&.w.
    37F0: 26 8B 5F 02 26 83 47 02 04 5E 5B C3 53 52 56 8B  // &._.&.G..^[.SRV.
    3800: D8 E8 70 FF 8B F3 26 8B 47 18 26 8B 57 1A D1 EA  // ..p...&.G.&.W...
    3810: D1 D8 D1 EA D1 D8 26 01 47 14 26 11 54 16 8B C3  // ......&.G.&.T...
    3820: E8 2B 10 E9 4A FF 53 8B D8 26 8B 5F 02 26 FF 47  // .+..J.S..&._.&.G
    3830: 02 5B C3 53 8B D8 26 8B 5F 02 26 83 47 02 02 5B  // .[.S..&._.&.G..[
    3840: C3 53 56 8B D8 E8 6B FF 8B F3 26 8B 57 20 33 C0  // .SV...k...&.W 3.
    3850: 26 01 57 14 26 11 44 16 8C D2 8E C2 26 8B 47 2E  // &.W.&.D.....&.G.
    3860: 32 C0 80 E4 06 3D 00 02 75 07 32 E4 33 D2 5E 5B  // 2....=..u.2.3.^[
    3870: C3 26 8B 47 2E 32 C0 80 E4 06 3D 00 04 74 EB 26  // .&.G.2....=..t.&
    3880: 80 7F 34 00 75 08 8B C3 E8 2F 0F 5E 5B C3 26 8A  // ..4.u..../.^[.&.
    3890: 47 34 32 E4 26 89 47 1C 26 C7 47 1E 00 00 8B C3  // G42.&.G.&.G.....
    38A0: E8 EA FC 5E 5B C3 53 8B D8 E8 E2 FE 26 8B 47 14  // ...^[.S.....&.G.
    38B0: C1 E0 02 26 8B 1F 26 8B 1F 03 D8 26 8B 07 26 8B  // ...&..&....&..&.
    38C0: 57 02 5B C3 CA 38 BF 38 D5 38 24 39 DB 38 F3 38  // W.[..8.8.8$9.8.8
    38D0: 0D 39 18 39 1E 39 53 51 56 8B D8 E8 B0 FE 8C D2  // .9.9.9SQV.......
    38E0: 8E C2 26 83 7F 16 00 75 22 26 83 7F 14 40 73 1B  // ..&....u"&...@s.
    38F0: 26 8B 77 02 26 8B 5F 14 C1 E3 02 26 8B 44 04 03  // &.w.&._....&.D..
    3900: D8 26 8B 07 26 8B 57 02 E9 7B 05 26 8B 77 14 26  // .&..&.W..{.&.w.&
    3910: 8B 47 16 83 C6 C0 83 D0 FF 75 71 83 FE 08 77 6C  // .G.......uq...wl
    3920: 03 F6 2E FF A4 5C 38 26 8B 47 10 26 8B 57 12 E9  // .....\8&.G.&.W..
    3930: 54 05 26 8B 47 0C 26 8B 57 0E E9 49 05 26 8B 47  // T.&.G.&.W..I.&.G
    3940: 22 EB 4B 26 8A 4F 33 32 ED BB 01 00 33 D2 E3 06  // ".K&.O32....3...
    3950: D1 E3 D1 D2 E2 FA 8B C3 E9 2B 05 26 8A 4F 33 32  // .........+.&.O32
    3960: ED B8 01 00 33 D2 E3 06 D1 E0 D1 D2 E2 FA F7 D0  // ....3...........
    3970: F7 D2 E9 11 05 26 8B 47 18 26 8B 57 1A E9 06 05  // .....&.G.&.W....
    3980: 26 8B 47 24 EB 08 26 8B 47 20 EB 02 33 C0 33 D2  // &.G$..&.G ..3.3.
    3990: E9 F3 04 53 56 8B D8 E8 F4 FD 8B F3 26 8B 47 18  // ...SV.......&.G.
    39A0: 26 8B 57 1A D1 EA D1 D8 D1 EA D1 D8 26 01 47 14  // &.W.........&.G.
    39B0: 26 11 54 16 8B C3 E8 16 0E 5E 5B C3 33 C0 33 D2  // &.T......^[.3.3.
    39C0: C3 53 56 8B D8 E8 EB FD 26 8B 77 14 26 03 77 22  // .SV.....&.w.&.w"
    39D0: 8B 04 8B 54 02 5E 5B C3 53 8B D8 26 C6 47 2B 04  // ...T.^[.S..&.G+.
    39E0: E8 AB FD 26 8B 47 14 26 8B 57 16 5B C3 53 8B D8  // ...&.G.&.W.[.S..
    39F0: 26 C6 47 2B 01 E8 BB FD EB E9 53 8B D8 26 C6 47  // &.G+......S..&.G
    3A00: 2B 00 E8 D2 FD EB DC 53 8B D8 83 C3 35 26 8A 5F  // +......S....5&._
    3A10: 01 C0 EB 03 80 E3 07 32 FF 03 DB FF 97 74 91 5B  // .......2.....t.[
    3A20: C3 53 52 56 8B D8 26 8A 47 2C 32 E4 8B F0 03 F0  // .SRV..&.G,2.....
    3A30: 8B C3 FF 94 90 91 26 89 47 08 26 89 57 0A 26 8A  // ......&.G.&.W.&.
    3A40: 47 2D 32 E4 8B F0 03 F0 8B C3 FF 94 A8 91 26 89  // G-2...........&.
    3A50: 47 04 26 89 57 06 E9 17 FD 53 51 56 8B D8 26 8A  // G.&.W....SQV..&.
    3A60: 4F 2B 32 ED 8B F1 8A 8C D8 91 E3 0A 26 D1 6F 06  // O+2.........&.o.
    3A70: 26 D1 5F 04 E2 F6 26 8A 4F 2B 32 ED 8B F1 C1 E6  // &._...&.O+2.....
    3A80: 02 8B 8C B8 91 8B B4 BA 91 26 21 4F 04 26 21 77  // .........&!O.&!w
    3A90: 06 26 8A 4F 2A 32 ED 8B F1 8A 8C E0 91 E3 0A 26  // .&.O*2.........&
    3AA0: D1 67 04 26 D1 57 06 E2 F6 26 8B 4F 08 26 8B 77  // .g.&.W...&.O.&.w
    3AB0: 0A 26 89 4F 14 26 89 77 16 E9 CA 03 53 51 52 56  // .&.O.&.w....SQRV
    3AC0: 57 8B D8 8C D0 8E C0 26 8A 47 2B 32 E4 8B F0 C1  // W......&.G+2....
    3AD0: E6 02 26 8A 47 2A 8B F8 8A 8D E0 91 32 ED 8B 84  // ..&.G*......2...
    3AE0: B8 91 8B 94 BA 91 E3 06 D1 E0 D1 D2 E2 FA F7 D0  // ................
    3AF0: F7 D2 26 21 47 14 26 21 57 16 26 8A 47 2A 32 E4  // ..&!G.&!W.&.G*2.
    3B00: 8B F0 8A 8C E0 91 32 ED E3 0A 26 D1 6F 0A 26 D1  // ......2...&.o.&.
    3B10: 5F 08 E2 F6 26 8A 47 2B 8B F0 C1 E6 02 8B 84 B8  // _...&.G+........
    3B20: 91 8B 94 BA 91 26 21 47 08 26 21 57 0A 26 8A 47  // .....&!G.&!W.&.G
    3B30: 2A 32 E4 8B F0 8A 8C E0 91 32 ED E3 0A 26 D1 67  // *2.......2...&.g
    3B40: 08 26 D1 57 0A E2 F6 26 8B 47 14 26 8B 57 16 26  // .&.W...&.G.&.W.&
    3B50: 09 47 08 26 09 57 0A 5F 5E 5A 59 5B C3 53 51 56  // .G.&.W._^ZY[.SQV
    3B60: 8B D8 26 8A 4F 2B 32 ED 8B F1 8A 8C D8 91 E3 0A  // ..&.O+2.........
    3B70: 26 D1 6F 06 26 D1 5F 04 E2 F6 26 8A 4F 2B 32 ED  // &.o.&._...&.O+2.
    3B80: 8B F1 C1 E6 02 8B 8C B8 91 8B B4 BA 91 26 21 4F  // .............&!O
    3B90: 04 26 21 77 06 26 8A 4F 2A 32 ED 8B F1 8A 8C E0  // .&!w.&.O*2......
    3BA0: 91 E3 0A 26 D1 6F 0A 26 D1 5F 08 E2 F6 26 8A 4F  // ...&.o.&._...&.O
    3BB0: 2B 32 ED 8B F1 C1 E6 02 8B 8C B8 91 8B B4 BA 91  // +2..............
    3BC0: 26 21 4F 08 26 21 77 0A E9 BB 02 51 52 57 8B D8  // &!O.&!w....QRW..
    3BD0: 8C D0 8E C0 26 80 7F 2B 00 74 1A 26 8A 47 2C 32  // ....&..+.t.&.G,2
    3BE0: E4 8B F0 03 F0 8B C3 FF 94 90 91 26 89 47 08 26  // ...........&.G.&
    3BF0: 89 57 0A EB 10 26 8A 47 2C 32 E4 8B F0 03 F0 8B  // .W...&.G,2......
    3C00: C3 FF 94 9C 91 26 8A 47 2D 32 E4 8B F0 03 F0 8B  // .....&.G-2......
    3C10: C3 FF 94 A8 91 26 89 47 04 26 89 57 06 8C D2 8E  // .....&.G.&.W....
    3C20: C2 26 80 7F 2B 00 74 4A 26 8A 47 2B 32 E4 8B F0  // .&..+.tJ&.G+2...
    3C30: C1 E6 02 26 8A 47 2A 8B F8 8A 8D E0 91 32 ED 8B  // ...&.G*......2..
    3C40: 84 B8 91 8B 94 BA 91 E3 06 D1 E0 D1 D2 E2 FA F7  // ................
    3C50: D0 F7 D2 26 21 47 08 26 21 57 0A 8B C3 E8 F9 FD  // ...&!G.&!W......
    3C60: 26 8B 47 04 26 8B 57 06 26 09 47 08 26 09 57 0A  // &.G.&.W.&.G.&.W.
    3C70: EB 10 26 8B 57 04 26 8B 47 06 26 89 57 08 26 89  // ..&.W.&.G.&.W.&.
    3C80: 47 0A 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94  // G.&.G,2.........
    3C90: 84 91 5F 5A 59 C3 53 51 52 56 57 8B D8 26 8A 47  // .._ZY.SQRVW..&.G
    3CA0: 2A 32 E4 8B F0 8A 8C E0 91 32 ED E3 0A 26 D1 67  // *2.......2...&.g
    3CB0: 04 26 D1 57 06 E2 F6 8C D0 8E C0 26 8A 47 2B 32  // .&.W.......&.G+2
    3CC0: E4 8B F0 C1 E6 02 26 8A 47 2A 8B F8 8A 8D E0 91  // ......&.G*......
    3CD0: 32 ED 8B 84 B8 91 8B 94 BA 91 E3 06 D1 E0 D1 D2  // 2...............
    3CE0: E2 FA F7 D0 F7 D2 26 09 47 04 26 09 57 06 26 8B  // ......&.G.&.W.&.
    3CF0: 47 04 26 8B 57 06 26 21 47 08 26 21 57 0A E9 56  // G.&.W.&!G.&!W..V
    3D00: FE 55 8B EC 51 52 50 8B D8 26 8A 47 2C 32 E4 8B  // .U..QRP..&.G,2..
    3D10: F0 03 F0 8B C3 FF 94 90 91 26 89 47 08 26 89 57  // .........&.G.&.W
    3D20: 0A 26 8A 47 2B 88 46 FA 8B C3 E8 DA FC 26 89 47  // .&.G+.F......&.G
    3D30: 04 26 89 57 06 26 8A 4F 2D 32 ED 8B F1 03 F1 8B  // .&.W.&.O-2......
    3D40: C3 FF 94 A8 91 26 89 47 14 26 89 57 16 8B C3 E8  // .....&.G.&.W....
    3D50: 44 FF 8A 46 FA 32 E4 8B F0 8A 8C D8 91 E3 0A 26  // D..F.2.........&
    3D60: D1 6F 16 26 D1 5F 14 E2 F6 26 8A 57 2B 32 F6 8B  // .o.&._...&.W+2..
    3D70: F2 C1 E6 02 8B 84 B8 91 8B 94 BA 91 26 21 47 14  // ............&!G.
    3D80: 26 21 57 16 26 8A 47 2A 32 E4 8B F0 8A 8C E0 91  // &!W.&.G*2.......
    3D90: 32 ED E3 0A 26 D1 67 14 26 D1 57 16 E2 F6 26 8B  // 2...&.g.&.W...&.
    3DA0: 47 14 26 8B 57 16 26 09 47 08 26 09 57 0A 26 8A  // G.&.W.&.G.&.W.&.
    3DB0: 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94 84 91 8D 66  // G,2............f
    3DC0: FC 5A 59 5D C3 51 8B D8 E8 56 FC 26 8A 4F 2B 32  // .ZY].Q...V.&.O+2
    3DD0: ED 8B F1 8A 8C D8 91 E3 0A 26 D1 6F 06 26 D1 5F  // .........&.o.&._
    3DE0: 04 E2 F6 8B C3 E8 AE FE 26 8A 4F 2C 32 ED 8B F1  // ........&.O,2...
    3DF0: 03 F1 8B C3 FF 94 84 91 59 C3 8B D8 E8 22 FC 8B  // ........Y...."..
    3E00: C3 E8 55 FC 26 8B 47 04 26 8B 77 06 26 09 47 08  // ..U.&.G.&.w.&.G.
    3E10: 26 09 77 0A 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3  // &.w.&.G,2.......
    3E20: FF 94 84 91 C3 53 56 8B D8 E8 F5 FB 8B C3 E8 28  // .....SV........(
    3E30: FC 26 8B 47 04 26 8B 77 06 26 31 47 08 26 31 77  // .&.G.&.w.&1G.&1w
    3E40: 0A 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94 84  // .&.G,2..........
    3E50: 91 5E 5B C3 53 51 56 8B D8 E8 C5 FB 8B C3 E8 F8  // .^[.SQV.........
    3E60: FB 26 8B 4F 04 E3 0A 26 D1 67 08 26 D1 57 0A E2  // .&.O...&.g.&.W..
    3E70: F6 8B C3 E8 46 FC 26 8A 4F 2C 32 ED 8B F1 03 F1  // ....F.&.O,2.....
    3E80: 8B C3 FF 94 84 91 5E 59 5B C3 53 51 56 8B D8 E8  // ......^Y[.SQV...
    3E90: 8F FB 8B C3 E8 C2 FB 26 8B 4F 04 E3 0A 26 D1 6F  // .......&.O...&.o
    3EA0: 0A 26 D1 5F 08 E2 F6 EB C8 52 8B D8 E8 72 FB 8B  // .&._.....R...r..
    3EB0: C3 E8 A5 FB 8B F3 26 8B 47 04 26 8B 57 06 26 01  // ......&.G.&.W.&.
    3EC0: 47 08 26 11 54 0A 8B C3 E8 F1 FB 26 8A 47 2C 32  // G.&.T......&.G,2
    3ED0: E4 8B F0 03 F0 8B C3 FF 94 84 91 5A C3 52 8B D8  // ...........Z.R..
    3EE0: E8 3E FB 8B C3 E8 71 FB 8B F3 26 8B 47 04 26 8B  // .>....q...&.G.&.
    3EF0: 57 06 26 29 47 08 26 19 54 0A EB CA 51 52 8B F0  // W.&)G.&.T...QR..
    3F00: E8 1E FB 8B C6 E8 55 FC 26 8B 44 08 26 8B 54 0A  // ......U.&.D.&.T.
    3F10: 26 8B 5C 04 26 8B 4C 06 E8 DD F2 26 89 44 0C 26  // &.\.&.L....&.D.&
    3F20: 89 54 0E 5A 59 C3 52 8B D0 E8 F5 FA 8B C2 E8 2C  // .T.ZY.R........,
    3F30: FC 8B C2 E8 5C 08 5A C3 51 52 57 8B F0 E8 E1 FA  // ....\.Z.QRW.....
    3F40: 8B C6 E8 18 FC 26 8B 44 08 26 8B 54 0A 26 8B 5C  // .....&.D.&.T.&.\
    3F50: 04 26 8B 4C 06 E8 1C F2 26 89 44 0C 26 89 54 0E  // .&.L....&.D.&.T.
    3F60: 8C D7 8E C7 26 8B 44 08 26 8B 54 0A 26 8B 5C 04  // ....&.D.&.T.&.\.
    3F70: 26 8B 4C 06 E8 FD F1 26 89 5C 10 26 89 4C 12 E9  // &.L....&.\.&.L..
    3F80: 10 FD 52 8B D0 E8 99 FA 8B C2 E8 D0 FB 8B C2 E8  // ..R.............
    3F90: D3 07 5A C3 51 52 8B D8 E8 86 FA 8B C3 E8 BD FB  // ..Z.QR..........
    3FA0: 8C D1 8E C1 26 8B 47 08 26 8B 57 0A 26 3B 57 06  // ....&.G.&.W.&;W.
    3FB0: 75 0E 26 3B 47 04 75 08 26 C6 47 30 01 5A 59 C3  // u.&;G.u.&.G0.ZY.
    3FC0: 8B D0 26 8B 47 0A 26 3B 47 06 72 08 75 0A 26 3B  // ..&.G.&;G.r.u.&;
    3FD0: 57 04 73 04 33 C0 EB 03 B8 02 00 26 88 47 30 5A  // W.s.3......&.G0Z
    3FE0: 59 C3 51 52 57 8B D8 26 8A 47 2C 32 E4 8B F0 03  // Y.QRW..&.G,2....
    3FF0: F0 8B C3 FF 94 90 91 26 89 47 08 26 89 57 0A 8C  // .......&.G.&.W..
    4000: D0 8E C0 26 8A 47 2B 32 E4 8B F0 C1 E6 02 8B F8  // ...&.G+2........
    4010: 8A 8D D8 91 32 ED 8B 84 B8 91 8B 94 BA 91 E3 06  // ....2...........
    4020: D1 E0 D1 D2 E2 FA F7 D0 F7 D2 26 21 47 08 26 21  // ..........&!G.&!
    4030: 57 0A E9 4D FC 55 8B EC 51 52 57 83 EC 06 8B D8  // W..M.U..QRW.....
    4040: 26 8A 47 2B 32 E4 8B F0 C1 E6 02 8B F8 8A 8D D8  // &.G+2...........
    4050: 91 32 ED 8B 84 B8 91 89 46 F4 8B 84 BA 91 89 46  // .2......F......F
    4060: F6 E3 08 D1 66 F4 D1 56 F6 E2 F8 8B 7E F4 8B 46  // ....f..V....~..F
    4070: F6 89 46 F8 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3  // ..F.&.G,2.......
    4080: FF 94 90 91 26 89 47 08 26 89 57 0A 8B C3 E8 47  // ....&.G.&.W....G
    4090: F9 26 89 47 04 26 89 57 06 8B C7 F7 D0 8B 56 F6  // .&.G.&.W......V.
    40A0: F7 D2 26 23 47 08 26 23 57 0A 26 89 47 14 26 89  // ..&#G.&#W.&.G.&.
    40B0: 57 16 26 21 7F 08 8B 46 F6 26 21 47 0A 8C D1 8D  // W.&!...F.&!G....
    40C0: 77 35 8E C1 26 80 3C 19 73 12 26 8B 4F 04 E3 0A  // w5..&.<.s.&.O...
    40D0: 26 D1 67 08 26 D1 57 0A E2 F6 EB 10 26 8B 4F 04  // &.g.&.W.....&.O.
    40E0: E3 0A 26 D1 6F 0A 26 D1 5F 08 E2 F6 26 21 7F 08  // ..&.o.&._...&!..
    40F0: 8B 46 F8 26 21 47 0A 26 8B 57 14 26 8B 47 16 26  // .F.&!G.&.W.&.G.&
    4100: 09 57 08 26 09 47 0A 26 8A 47 2C 32 E4 8B F0 03  // .W.&.G.&.G,2....
    4110: F0 8B C3 FF 94 84 91 8D 66 FA 5F E9 A3 FC 52 8B  // ........f._...R.
    4120: D8 E8 FD F8 8B C3 E8 34 FA 26 8B 47 08 26 8B 57  // .......4.&.G.&.W
    4130: 0A 26 85 57 06 75 06 26 85 47 04 74 05 B8 03 00  // .&.W.u.&.G.t....
    4140: EB 03 B8 01 00 26 88 47 30 5A C3 53 51 52 56 8B  // .....&.G0Z.SQRV.
    4150: D8 26 8A 4F 2D 32 ED 8B F1 03 F1 FF 94 A8 91 26  // .&.O-2.........&
    4160: 89 47 04 26 89 57 06 26 8A 47 2B 32 E4 8B F0 8A  // .G.&.W.&.G+2....
    4170: 8C D8 91 E3 0A 26 D1 6F 06 26 D1 5F 04 E2 F6 26  // .....&.o.&._...&
    4180: 8A 47 2B 8B F0 C1 E6 02 8B 84 B8 91 8B 94 BA 91  // .G+.............
    4190: 26 21 47 04 26 21 57 06 E9 BD F9 52 8B D8 E8 AA  // &!G.&!W....R....
    41A0: FF 26 8B 47 04 26 8B 57 06 26 89 47 18 26 89 57  // .&.G.&.W.&.G.&.W
    41B0: 1A 5A C3 51 52 8B D8 E8 91 FF 8C D0 8E C0 26 8B  // .Z.QR.........&.
    41C0: 77 02 26 8B 74 02 81 3C 5A 5A 74 5B 26 8B 77 02  // w.&.t..<ZZt[&.w.
    41D0: 26 8B 74 02 80 3C 63 75 E1 26 8B 77 02 26 FF 44  // &.t..<cu.&.w.&.D
    41E0: 02 8B C3 E8 21 F8 26 89 47 08 26 89 57 0A 8B C3  // ....!.&.G.&.W...
    41F0: E8 FA F7 26 89 47 14 26 89 57 16 8C D1 8E C1 26  // ...&.G.&.W.....&
    4200: 8B 57 04 26 8B 47 06 26 3B 47 0A 75 AD 26 3B 57  // .W.&.G.&;G.u.&;W
    4210: 08 75 A7 26 8B 77 02 26 8B 04 26 03 47 14 8B DE  // .u.&.w.&..&.G...
    4220: 26 89 47 02 5A 59 C3 26 8B 5F 02 26 83 47 02 02  // &.G.ZY.&._.&.G..
    4230: 5A 59 C3 52 57 8B D8 8C D0 8E C0 26 8B 77 02 26  // ZY.RW......&.w.&
    4240: 8B 74 02 8A 54 01 84 D2 75 08 26 C7 47 22 00 00  // .t..T...u.&.G"..
    4250: EB 2F 80 FA FF 75 14 26 8B 77 02 26 8B 3F 26 8B  // ./...u.&.w.&.?&.
    4260: 34 26 2B 75 02 26 89 77 22 EB 16 26 8B 07 E8 E3  // 4&+u.&.w"..&....
    4270: 02 8B F0 8A C2 32 E4 03 C0 03 F0 8B 04 26 89 47  // .....2.......&.G
    4280: 22 26 8B 5F 02 26 83 47 02 02 5F 5A C3 8B D8 26  // "&._.&.G.._Z...&
    4290: 80 67 2F F9 26 8B 77 02 26 8B 74 02 8A 44 01 26  // .g/.&.w.&.t..D.&
    42A0: 88 47 34 26 8B 5F 02 26 83 47 02 03 C3 8B D8 26  // .G4&._.&.G.....&
    42B0: 8B 77 02 26 8B 74 02 8B 74 01 26 89 77 20 EB E3  // .w.&.t..t.&.w ..
    42C0: 53 8B D8 26 8A 47 2C 32 E4 24 03 26 80 67 2F F9  // S..&.G,2.$.&.g/.
    42D0: C1 E0 09 26 09 47 2E E9 4F F5 8B D8 26 8B 77 02  // ...&.G..O...&.w.
    42E0: 26 8B 74 02 8A 44 01 32 E4 26 89 47 04 26 C7 47  // &.t..D.2.&.G.&.G
    42F0: 06 00 00 8B C3 E8 40 04 26 8B 5F 02 26 83 47 02  // ......@.&._.&.G.
    4300: 02 C3 8B D8 26 8B 77 02 26 8B 74 02 8A 44 01 32  // ....&.w.&.t..D.2
    4310: E4 26 89 47 04 26 C7 47 06 00 00 8B C3 E8 08 04  // .&.G.&.G........
    4320: EB D6 53 56 8B D8 26 8B 77 02 26 8B 74 02 8A 44  // ..SV..&.w.&.t..D
    4330: 01 32 E4 26 89 47 04 26 C7 47 06 00 00 8B C3 E8  // .2.&.G.&.G......
    4340: 06 04 E9 86 F4 53 56 8B D8 26 8B 77 02 26 8B 74  // .....SV..&.w.&.t
    4350: 02 8A 44 01 32 E4 26 89 47 04 26 C7 47 06 00 00  // ..D.2.&.G.&.G...
    4360: 8B C3 E8 F0 03 E9 63 F4 53 56 8B D8 26 8B 77 02  // ......c.SV..&.w.
    4370: 8B DE 26 8B 5F 02 8B 5F 01 83 C3 03 26 01 5C 02  // ..&._.._....&.\.
    4380: 5E 5B C3 51 52 8B D8 26 8B 77 02 26 83 44 02 02  // ^[.QR..&.w.&.D..
    4390: 26 8B 07 E8 A0 01 8B C8 26 8B 77 28 8A 44 01 32  // &.......&.w(.D.2
    43A0: E4 03 C0 8B F1 03 F0 83 3C 00 74 4F 26 8B 77 28  // ........<.tO&.w(
    43B0: 8A 54 01 32 F6 8B C3 E8 B0 01 26 88 47 31 26 8B  // .T.2......&.G1&.
    43C0: 77 02 26 8B 34 8B 44 04 C1 E8 08 32 E4 24 7F C1  // w.&.4.D....2.$..
    43D0: E8 02 32 E4 24 1F 26 80 67 2F 07 C1 E0 0B 26 09  // ..2.$.&.g/....&.
    43E0: 47 2E 26 8B 37 26 8B 47 2E C1 E8 0B C1 E0 02 26  // G.&.7&.G.......&
    43F0: 01 04 26 C6 47 32 01 26 89 4F 28 5A 59 C3 53 8B  // ..&.G2.&.O(ZY.S.
    4400: D8 26 C6 47 32 82 5B C3 57 8B D8 8C D6 8E C6 26  // .&.G2.[.W......&
    4410: 80 7F 2C 05 74 0A 26 8A 47 2C 26 3A 47 30 75 1E  // ..,.t.&.G,&:G0u.
    4420: 26 8B 77 02 26 8B 74 02 26 8B 7F 02 26 8B 3D 8B  // &.w.&.t.&...&.=.
    4430: 74 01 03 F7 26 8B 5F 02 26 89 77 02 5F C3 26 8B  // t...&._.&.w._.&.
    4440: 5F 02 26 83 47 02 03 5F C3 53 56 57 8B D8 8C D6  // _.&.G.._.SVW....
    4450: 8E C6 26 80 7F 30 01 74 0A 26 8A 47 30 26 3A 47  // ..&..0.t.&.G0&:G
    4460: 2C 75 20 26 8B 77 02 26 8B 74 02 26 8B 7F 02 26  // ,u &.w.&.t.&...&
    4470: 8B 3D 8B 74 01 03 F7 26 8B 5F 02 26 89 77 02 5F  // .=.t...&._.&.w._
    4480: 5E 5B C3 26 8B 5F 02 26 83 47 02 03 EB F1 53 56  // ^[.&._.&.G....SV
    4490: 57 8B D8 8C D0 8E C0 26 80 7F 30 01 74 E5 EB C3  // W......&..0.t...
    44A0: 55 8B EC 53 51 52 57 8B D8 26 8B 77 02 26 8B 74  // U..SQRW..&.w.&.t
    44B0: 02 8A 04 26 C6 47 3D 00 8C D1 8E C1 26 80 7F 3D  // ...&.G=.....&..=
    44C0: 08 73 20 26 8B 77 02 26 8A 57 3D 32 F6 26 8B 7C  // .s &.w.&.W=2.&.|
    44D0: 02 03 FA 8B F3 03 F2 8A 15 26 88 54 35 26 FE 47  // .........&.T5&.G
    44E0: 3D EB D5 26 8B 7F 02 8A D0 32 F6 8B F2 C1 E6 02  // =..&.....2......
    44F0: 8A 94 05 92 26 01 55 02 26 8B 7F 28 8A 55 01 80  // ....&.U.&..(.U..
    4500: E2 07 26 88 57 2D 26 8B 7F 28 8A 55 01 C0 EA 03  // ..&.W-&..(.U....
    4510: 80 E2 07 26 88 57 2B 26 8B 7F 28 8A 55 01 C0 EA  // ...&.W+&..(.U...
    4520: 06 26 88 57 2A 8A 94 04 92 26 88 57 2C 8D 66 F8  // .&.W*....&.W,.f.
    4530: 5F 5A 59 5B 5D C3 53 56 8B D8 26 8B 77 02 8B C6  // _ZY[].SV..&.w...
    4540: 8B 74 48 03 F0 8B D8 8B 74 1E 8B C6 03 C3 83 C0  // .tH.....t.......
    4550: 04 5E 5B C3 53 56 8B D8 26 8B 77 02 8B C6 8B 74  // .^[.SV..&.w....t
    4560: 48 03 F0 8B D8 8B 74 20 EB E0 8A C2 C3 16 07 55  // H.....t .......U
    4570: 8B EC 53 51 56 57 83 EC 40 8B F8 89 46 B8 E8 D3  // ..SQVW..@...F...
    4580: FF 8B D8 89 46 E0 26 8B 45 02 8B 5F 2E 03 D8 89  // ....F.&.E.._....
    4590: 5E DE 83 46 DE 04 8B C7 E8 9B FF 89 46 E0 32 F6  // ^..F........F.2.
    45A0: 8D 46 B8 E8 C4 FF 8A D0 32 F6 03 D2 8B 5E E0 03  // .F......2....^..
    45B0: DA 83 3F 00 0F 84 65 01 88 46 E9 80 66 E7 F9 C6  // ..?...e..F..f...
    45C0: 46 EC 00 C7 46 D8 00 00 66 C7 46 D0 00 00 00 00  // F...F...f.F.....
    45D0: C7 46 F6 00 00 C6 46 EA 01 EB 06 3C 01 0F 85 8C  // .F....F....<....
    45E0: 00 8A 56 E9 8A C2 32 E4 03 C0 8B 5E E0 03 D8 83  // ..V...2....^....
    45F0: 3F 00 74 75 26 8B 45 02 8B 1F 03 D8 8B 47 04 32  // ?.tu&.E......G.2
    4600: E4 8B C8 83 C1 09 32 ED 80 E1 FE 83 F9 00 74 07  // ......2.......t.
    4610: D1 E9 33 C0 50 E2 FD 8B C4 8B D8 89 46 BA 85 C0  // ..3.P.......F...
    4620: 74 41 83 C0 08 26 89 47 04 8A C2 32 E4 03 C0 8B  // tA...&.G...2....
    4630: 5E E0 03 D8 26 8B 45 02 03 07 8B 5E BA 26 89 07  // ^...&.E....^.&..
    4640: 8B 5E BA 26 8B 07 83 C0 06 26 89 47 02 8B 5E BA  // .^.&.....&.G..^.
    4650: 8B 76 F6 26 89 77 06 8B 5E BA 89 5E F6 C6 46 EA  // .v.&.w..^..^..F.
    4660: 00 EB 0A C6 46 EA 87 EB 04 C6 46 EA 83 8A 46 EA  // ....F.....F...F.
    4670: 32 E4 83 F8 10 0F 8F 99 00 88 66 EA 8A 46 EA 32  // 2.........f..F.2
    4680: E4 85 C0 0F 8F 83 00 8C D0 8B 5E BA 8E C0 26 8B  // ..........^...&.
    4690: 5F 02 89 5E E0 8B 5E BA 26 8B 5F 02 80 3F 5B 75  // _..^..^.&._..?[u
    46A0: 4A C6 46 EA 10 8B 5E BA 26 8B 5F 06 89 5E F6 8B  // J.F...^.&._..^..
    46B0: 5E BA 26 8B 1F 8B 47 04 32 E4 8B C8 83 C1 09 32  // ^.&...G.2......2
    46C0: ED 80 E1 FE 03 E1 8B 5E F6 89 5E BA 85 DB 74 AC  // .......^..^...t.
    46D0: 26 8B 1F 8B 47 04 C1 E8 08 32 E4 24 7F C1 E8 02  // &...G....2.$....
    46E0: C1 E0 02 8B 5E B8 26 29 07 EB 91 8D 46 B8 E8 AF  // ....^.&)....F...
    46F0: FD 8A D0 8D 46 B8 E8 2E 00 8A DA 32 FF C1 E3 02  // ....F......2....
    4700: 8D 46 B8 FF 97 02 92 E9 72 FF 83 7E F6 00 0F 85  // .F......r..~....
    4710: C9 FE 80 7E EA 10 74 05 8A 46 EA EB 02 32 C0 8D  // ...~..t..F...2..
    4720: 66 F8 5F 5E E9 0B FE C3 53 51 8B D8 26 8A 4F 04  // f._^....SQ..&.O.
    4730: 32 ED E8 C9 E7 59 5B C3 53 51 8B D8 26 8A 4F 04  // 2....Y[.SQ..&.O.
    4740: 32 ED E8 C4 E7 59 5B C3 53 8B D8 26 8A 47 04 32  // 2....Y[.S..&.G.2
    4750: E4 E6 80 5B C3 53 51 8B D8 26 8A 4F 04 32 ED E8  // ...[.SQ..&.O.2..
    4760: D6 D4 59 5B C3 53 8B D8 66 50 66 52 66 51 66 26  // ..Y[.S..fPfRfQf&
    4770: 8B 47 08 66 26 8B 57 10 66 26 8B 4F 04 66 F7 F1  // .G.f&.W.f&.O.f..
    4780: 66 26 89 47 0C 66 26 89 57 10 66 59 66 5A 66 58  // f&.G.f&.W.fYfZfX
    4790: 5B C3 53 8B D8 66 50 66 52 66 51 66 26 8B 47 08  // [.S..fPfRfQf&.G.
    47A0: 66 26 8B 4F 04 66 F7 E1 66 26 89 47 0C 66 26 89  // f&.O.f..f&.G.f&.
    47B0: 57 10 66 59 66 5A 66 58 5B C3 53 57 8B D8 26 8B  // W.fYfZfX[.SW..&.
    47C0: 5F 14 E8 38 EB 8B D0 66 C1 E8 10 92 5F 5B C3 53  // _..8...f...._[.S
    47D0: 57 8B D8 26 8B 47 14 26 8B 57 16 8B D8 87 D3 66  // W..&.G.&.W.....f
    47E0: C1 E3 10 8B DA C1 E3 02 E8 36 EB EB D8 53 52 57  // .........6...SRW
    47F0: 8B D8 26 8B 47 08 26 8B 57 0A 92 66 C1 E0 10 8B  // ..&.G.&.W..f....
    4800: C2 26 8B 5F 14 E8 5A EA 5F 5A 5B C3 53 52 8B D8  // .&._..Z._Z[.SR..
    4810: 26 8B 47 1C 26 8B 57 1E 92 66 C1 E0 10 8B C2 26  // &.G.&.W..f.....&
    4820: 8B 5F 26 8B 5F 01 E8 39 EA 5A 5B C3 53 52 56 8B  // ._&._..9.Z[.SRV.
    4830: F0 26 8B 5C 26 8B 5F 01 E8 C2 EA 8B D0 66 C1 E8  // .&.\&._......f..
    4840: 10 92 26 89 44 1C 26 89 54 1E 5E 5A 5B C3 53 51  // ..&.D.&.T.^Z[.SQ
    4850: 52 57 8B D8 26 8B 47 08 26 8B 57 0A 92 66 C1 E0  // RW..&.G.&.W..f..
    4860: 10 8B C2 8B C8 26 8B 47 14 26 8B 57 16 8B D8 87  // .....&.G.&.W....
    4870: D3 66 C1 E3 10 8B DA C1 E3 02 8B C1 E8 16 EA 5F  // .f............._
    4880: 5A 59 5B C3 8B D0 66 C1 E8 10 92 C3 1E 06 66 50  // ZY[...f.......fP
    4890: 66 51 66 52 66 53 66 55 66 56 66 57 0E 1F 0A C0  // fQfRfSfUfVfW....
    48A0: 75 06 E8 07 01 E9 A8 00 3C 01 75 06 E8 37 01 E9  // u.......<.u..7..
    48B0: 9E 00 3C 02 75 06 E8 5F 02 E9 94 00 3C 03 75 0B  // ..<.u.._....<.u.
    48C0: E8 91 03 8B EC 89 5E 0C E9 85 00 3C 04 75 02 EB  // ......^....<.u..
    48D0: 7D 3C 05 75 0A E8 0E 04 8B EC 89 56 10 EB 71 3C  // }<.u.......V..q<
    48E0: 06 75 10 E8 8C 03 8B EC 89 5E 0C 89 4E 14 89 56  // .u.......^..N..V
    48F0: 10 EB 5D 3C 07 75 02 EB 55 3C 08 75 0A E8 D0 03  // ..]<.u..U<.u....
    4900: 8B EC 88 7E 0D EB 49 3C 09 75 02 EB 41 3C 0A 75  // ...~..I<.u..A<.u
    4910: 10 E8 65 04 8B EC 89 4E 14 89 7E 00 8C 46 1C EB  // ..e....N..~..F..
    4920: 2F 3C 0B 75 02 EB 27 3C 10 75 0A E8 5A 04 8B EC  // /<.u..'<.u..Z...
    4930: 89 5E 0C EB 1B 3C 11 75 02 EB 13 3C 15 75 0F E8  // .^...<.u...<.u..
    4940: 80 04 8B EC 89 5E 0C EB 07 B8 4F 01 EB 02 32 C0  // .....^....O...2.
    4950: 8B EC 89 46 18 66 5F 66 5E 66 5D 66 5B 66 5A 66  // ...F.f_f^f]f[fZf
    4960: 59 66 58 07 1F C3 50 1E 2E 8E 1E 16 03 8C D8 A3  // YfX...P.........
    4970: CE 58 A3 DE 58 A3 F0 58 2E 8E 1E 0E 03 A3 AA 04  // .X..X..X........
    4980: 1F 58 CB 00 30 31 2E 30 30 00 56 45 53 41 00 03  // .X..01.00.VESA..
    4990: CC 01 00 00 01 00 00 00 00 00 00 00 00 03 0A 11  // ................
    49A0: ED 00 00 00 81 00 00 00 1C 49 00 00 B9 3F 00 8B  // .........I...?..
    49B0: DF 83 C7 04 FC 66 33 C0 F3 66 AB 8B FB BE 22 49  // .....f3..f...."I
    49C0: B9 22 00 F3 A4 06 1F 8C 4F 08 8C 47 10 8C 4F 18  // ."......O..G..O.
    49D0: 8C 4F 1C 8C 4F 20 83 C7 22 89 7F 0E 0E 1F E8 32  // .O..O .."......2
    49E0: D1 B0 4F 32 E4 C3 56 51 57 B9 10 00 66 33 C0 F3  // ..O2..VQW...f3..
    49F0: 66 AB 5F 59 8C DB 06 1F C7 05 BB 00 C6 45 02 07  // f._Y.........E..
    4A00: C7 45 04 40 00 C7 45 06 40 00 C6 45 1B 06 C6 45  // .E.@..E.@..E...E
    4A10: 18 01 C6 45 1A 01 C6 45 1E 01 66 C7 45 3E 00 84  // ...E...E..f.E>..
    4A20: D7 17 8E DB E8 F9 C9 66 0B C0 0F 84 E1 00 06 1F  // .......f........
    4A30: 66 89 45 28 8C C8 66 C1 E0 10 B8 DB 4C 66 89 45  // f.E(..f.....Lf.E
    4A40: 0C 81 F9 FF 81 0F 84 C2 00 80 E5 03 B2 01 53 8E  // ..............S.
    4A50: DB BE 80 1C E8 DE CE 5B 06 1F 0F 84 B1 00 53 E8  // .......[......S.
    4A60: 5A D1 66 89 45 12 C7 45 16 08 10 8D 5C 0C E8 BA  // Z.f.E..E....\...
    4A70: E8 66 89 45 1F 66 89 45 36 8D 5C 10 E8 AC E8 66  // .f.E.f.E6.\....f
    4A80: 89 45 23 66 89 45 3A 8D 5C 08 E8 9E E8 0A C0 75  // .E#f.E:.\......u
    4A90: 03 5B EB 7B E8 25 D1 66 C1 E8 10 3D 58 02 74 0D  // .[.{.%.f...=X.t.
    4AA0: 3D 5E 01 74 08 77 0A C6 45 17 08 EB 04 C6 45 17  // =^.t.w..E.....E.
    4AB0: 0E 2E A1 10 03 89 45 08 8D 5C 04 E8 6D E8 66 8B  // ......E..\..m.f.
    4AC0: C8 66 C1 E9 10 D3 E0 89 45 10 89 45 32 B0 08 D2  // .f......E..E2...
    4AD0: E0 88 45 19 8D 5C 14 E8 51 E8 5B 3D 00 03 77 2F  // ..E..\..Q.[=..w/
    4AE0: 53 8B D8 B8 00 03 33 D2 F7 F3 5B FE C8 88 45 1D  // S.....3...[...E.
    4AF0: 88 45 35 88 45 34 8E DB 57 53 BE 80 1C E8 89 C9  // .E5.E4..WS......
    4B00: 5B 5F 0B C9 75 05 06 1F 83 25 FE 32 E4 EB 02 B4  // [_..u....%.2....
    4B10: 03 B0 4F 8E DB 5E C3 00 81 FB FF 81 74 68 0A FF  // ..O..^......th..
    4B20: 75 04 8B C3 EB 21 F6 C7 08 75 61 8B CB B2 01 BE  // u....!...ua.....
    4B30: 20 1C E8 00 CE 74 55 E8 61 D0 0A C0 75 0E 66 C1  //  ....tU.a...u.f.
    4B40: E8 10 80 E7 80 0A C7 E8 D5 02 EB 3A E8 D0 CB 74  // ...........:...t
    4B50: 06 E8 41 CA E8 8A C3 BE 20 1C E8 00 C9 74 2D E8  // ..A..... ....t-.
    4B60: A5 00 E8 2C 00 66 BB 20 1C 00 1C E8 24 D0 BE 00  // ...,.f. ....$...
    4B70: 1C E8 27 D0 66 C1 E8 10 8B D8 32 C0 F6 C7 80 74  // ..'.f.....2....t
    4B80: 02 B0 40 E8 30 C9 B0 4F 32 E4 EB 04 B0 4F B4 03  // ..@.0..O2....O..
    4B90: C3 56 06 33 C0 8E C0 BE 20 1C E8 1F D0 8B C8 66  // .V.3.... ......f
    4BA0: C1 E8 10 8B D0 C1 E9 03 26 89 0E 4A 04 C1 EA 04  // ........&..J....
    4BB0: FE CA 26 88 16 84 04 26 C6 06 51 04 00 26 C6 06  // ..&....&..Q..&..
    4BC0: 50 04 00 26 C6 06 49 04 62 26 C7 06 4C 04 00 A0  // P..&..I.b&..L...
    4BD0: 26 C6 06 85 04 10 26 C7 06 0C 01 A7 62 8C C8 26  // &.....&.....b..&
    4BE0: A3 0E 01 07 5E C3 01 0F 00 0A 00 00 00 00 00 40  // ....^..........@
    4BF0: 05 0F FF 00 01 02 03 04 05 06 07 08 09 0A 0B 0C  // ................
    4C00: 0D 0E 0F 01 00 0F 00 FC BA C4 03 B8 00 01 EF B9  // ................
    4C10: 04 00 B4 01 BE 7E 4B AC 86 E0 EF 8A E0 FE C4 E2  // .....~K.........
    4C20: F6 B8 00 03 EF B9 09 00 BA CE 03 32 E4 BE 82 4B  // ...........2...K
    4C30: 8A C4 EE AC 42 EE 4A FE C4 E2 F5 BA DA 03 EC B9  // ....B.J.........
    4C40: 14 00 BA C0 03 32 E4 BE 8B 4B 8A C4 EE AC EE FE  // .....2...K......
    4C50: C4 E2 F7 C3 BE 00 1C E8 41 CF 66 C1 E8 10 8B D8  // ........A.f.....
    4C60: E8 11 CF 75 05 E8 FD CE 75 04 B8 4F 00 C3 B8 4F  // ...u....u..O...O
    4C70: 03 C3 E8 FF CE 74 53 BE 00 1C 80 FB 00 74 18 80  // .....tS......t..
    4C80: FB 01 75 05 E8 3D CF EB 1D 80 FB 02 75 10 8B C1  // ..u..=......u...
    4C90: E8 F0 CE D3 E8 8B C8 E8 E0 C9 74 2E EB 08 80 FB  // ..........t.....
    4CA0: 03 75 24 E8 94 CE E8 DA CE 8B D8 D3 E3 50 33 C0  // .u$..........P3.
    4CB0: BA 00 03 3B DA 77 05 BA FF FF EB 04 F7 F3 8B D0  // ...;.w..........
    4CC0: 58 8B C8 B8 4F 00 C3 32 C0 C3 B0 4F B4 03 C3 00  // X...O..2...O....
    4CD0: 0A DB 75 07 8A EF E8 AE CA EB 05 E8 93 CA 8A F8  // ..u.............
    4CE0: B0 4F 32 E4 C3 00 E8 8B CE 74 2C BE 00 1C E8 AA  // .O2......t,.....
    4CF0: CE 66 C1 E8 10 F6 C4 40 75 1D 0A FF 75 05 E8 1E  // .f.....@u...u...
    4D00: 00 EB 0F 80 FF 01 75 14 BB 13 00 E8 EB E5 D1 E8  // ......u.........
    4D10: 8B D0 B0 4F 32 E4 C3 B0 4F B4 03 C3 32 C0 C3 52  // ...O2...O...2..R
    4D20: 53 66 50 81 E2 FF 02 D1 E2 8B C2 40 66 C1 E0 10  // SfP........@f...
    4D30: 8B C2 BB 13 00 E8 1C E5 BB 12 00 E8 16 E5 66 58  // ..............fX
    4D40: 5B 5A C3 9C 1E 06 66 50 66 51 66 52 66 53 66 55  // [Z....fPfQfRfSfU
    4D50: 66 56 66 57 0E 1F E8 34 E6 E8 8A FF E8 53 E6 8B  // fVfW...4.....S..
    4D60: EC 89 56 10 89 46 18 66 5F 66 5E 66 5D 66 5B 66  // ..V..F.f_f^f]f[f
    4D70: 5A 66 59 66 58 07 1F 9D CB 0E 07 BF AA 90 2E 8B  // ZfYfX...........
    4D80: 0E A8 90 B8 4F 00 C3 00 0A DB 75 06 B7 04 B3 10  // ....O.....u.....
    4D90: EB 26 80 FB 01 75 14 E8 85 C9 75 21 53 B1 01 0A  // .&...u....u!S...
    4DA0: FF 74 02 B1 00 E8 9A C8 5B EB 0D 80 FB 02 75 0D  // .t......[.....u.
    4DB0: E8 B2 C9 8A F8 C0 E7 02 B0 4F 32 E4 C3 B8 4F 03  // .........O2...O.
    4DC0: C3 00 80 E3 01 0A DB 75 05 BB 02 01 EB 0E E8 4E  // .......u.......N
    4DD0: C9 75 0E 33 C0 53 E8 35 B8 5B 74 05 B0 4F 32 E4  // .u.3.S.5.[t..O2.
    4DE0: C3 B0 4F B4 03 C3 80 FC 1D 72 03 CD 42 C3 1E 06  // ..O......r..B...
    4DF0: 66 50 66 51 66 52 66 53 66 55 66 56 66 57 0E 1F  // fPfQfRfSfUfVfW..
    4E00: 50 0F B6 C4 D1 E0 8B F0 58 2E FF 94 C8 4D 66 5F  // P.......X....Mf_
    4E10: 66 5E 66 5D 66 5B 66 5A 66 59 66 58 07 1F C3 0E  // f^f]f[fZfYfX....
    4E20: 1F 50 0F B6 C4 D1 E0 8B F0 58 2E FF 94 C8 4D C3  // .P.......X....M.
    4E30: 02 4E 12 87 2B 87 48 87 F5 4E 4B 7E 7D 7E F0 7E  // .N..+.H..NK~}~.~
    4E40: 73 7F 01 81 05 81 0E 84 DF 84 62 85 C9 85 64 87  // s.........b...d.
    4E50: C6 87 6F 8A 0E 51 B6 8E B6 4D B6 4D B6 4D B6 4D  // ..o..Q...M.M.M.M
    4E60: B6 4D B6 4D 86 8F 89 73 DD 74 2E 8E 1E 0E 03 80  // .M.M...s.t......
    4E70: 26 87 04 F3 50 8A E0 80 E4 7F E8 C4 01 3B D3 75  // &...P........;.u
    4E80: 02 58 C3 BA CC 03 EC B2 B4 B1 30 26 F6 47 09 01  // .X........0&.G..
    4E90: 74 0C B2 D4 B1 20 A8 01 75 49 B5 09 EB 06 A8 01  // t.... ..uI......
    4EA0: 74 41 B5 0B 53 E8 6A 41 0A FF 5B 75 0B 80 26 88  // tA..S.jA..[u..&.
    4EB0: 04 F0 08 2E 88 04 EB 2B 58 80 0E 87 04 08 80 26  // .......+X......&
    4EC0: 10 04 CF 08 0E 10 04 89 16 63 04 C7 06 85 04 08  // .........c......
    4ED0: 00 C6 06 84 04 18 C7 06 0C 01 94 5A 8C 0E 0E 01  // ...........Z....
    4EE0: CD 42 C3 80 26 10 04 CF 08 0E 10 04 58 53 50 0E  // .B..&.......XSP.
    4EF0: 1F 33 C9 8A C8 E8 27 C8 74 06 E8 98 C6 E8 E1 BF  // .3....'.t.......
    4F00: B2 08 BE 40 1C E8 2D CA BE 40 1C E8 4F C5 58 5B  // ...@..-..@..O.X[
    4F10: 0F 84 6E FF 2E 8E 1E 0E 03 0E 07 E8 13 29 0E 1F  // ..n..........)..
    4F20: 53 66 BB 40 1C 00 1C E8 68 CC BE 00 1C B0 20 E8  // Sf.@....h..... .
    4F30: 84 C5 5B 2E 8E 1E 0E 03 0E 07 E8 1C 2E E8 24 00  // ..[...........$.
    4F40: E8 28 3D E8 D1 01 E8 8E 01 E8 AE 3E 0E 1F BE 00  // .(=........>....
    4F50: 1C B0 10 E8 60 C5 E8 F7 2D E8 EF 2D C3 8B EC C6  // ....`...-..-....
    4F60: 46 1B 00 C3 E8 2F 00 E8 0A 00 E8 BD 00 E8 52 00  // F..../........R.
    4F70: E8 5C 0A C3 53 83 C3 0A 8B 16 63 04 B9 19 00 B8  // .\..S.....c.....
    4F80: 11 30 EF 32 C0 26 8A 27 EF 43 FE C0 E2 F7 5B 80  // .0.2.&.'.C....[.
    4F90: C2 06 32 C0 EE C3 53 BA C4 03 83 C3 05 B9 04 00  // ..2...S.........
    4FA0: B0 01 26 8A 27 3C 01 75 03 80 CC 20 EF 43 FE C0  // ..&.'<.u... .C..
    4FB0: E2 F0 5B 26 8A 47 09 BA C2 03 EE B2 C4 B8 00 03  // ..[&.G..........
    4FC0: EF C3 8B F3 83 C6 23 BA DA 03 26 F6 47 09 01 75  // ......#...&.G..u
    4FD0: 02 B2 BA F6 06 89 04 08 74 1D 83 C6 10 EC B9 04  // ........t.......
    4FE0: 00 B4 10 B2 C0 80 FC 11 74 07 8A C4 EE 26 8A 04  // ........t....&..
    4FF0: EE 46 FE C4 E2 EF C3 53 EC 8B DE B9 14 00 32 E4  // .F.....S......2.
    5000: B2 C0 8A C4 EE FE C4 26 8A 07 EE 43 E2 F4 8A C4  // .......&...C....
    5010: EE 32 C0 EE 1E 06 E8 49 2D 0B ED 74 09 1F 1E B9  // .2.....I-..t....
    5020: 10 00 F3 A4 46 A4 07 1F 5B C3 53 83 C3 37 B9 09  // ....F...[.S..7..
    5030: 00 32 C0 BA CE 03 26 8A 27 EF 43 FE C0 E2 F7 5B  // .2....&.'.C....[
    5040: C3 BB CC 52 0E 07 8B D3 0A E4 7D 01 C3 E8 01 00  // ...R......}.....
    5050: C3 33 F6 80 FC 03 7F 3C 4A F6 06 89 04 10 75 20  // .3.....<J.....u 
    5060: A0 88 04 24 0F 3C 02 7E 24 3C 08 74 20 3C 06 74  // ...$.<.~$<.t <.t
    5070: 1C 3C 07 74 18 B0 40 F6 E4 03 D8 81 C3 00 04 C3  // .<.t..@.........
    5080: B0 40 D0 EC F6 E4 03 D8 81 C3 80 04 C3 B0 40 F6  // .@............@.
    5090: E4 03 D8 C3 80 FC 07 75 11 F6 06 89 04 10 75 05  // .......u......u.
    50A0: 81 C3 00 01 C3 81 C3 00 05 C3 BF 4E 50 BE 6F 50  // ...........NP.oP
    50B0: 33 C9 E8 4E 00 C3 04 80 00 05 80 00 06 C0 00 0D  // 3..N............
    50C0: 80 02 0E C0 02 0F 80 03 10 C0 03 11 40 05 12 80  // ............@...
    50D0: 05 13 C0 05 62 40 01 53 8A 1E 49 04 80 FB 07 7F  // ....b@.S..I.....
    50E0: 10 32 FF D1 E3 2E 8B 87 8B 50 A2 65 04 88 26 66  // .2.......P.e..&f
    50F0: 04 5B C3 2C 30 28 30 2D 30 29 30 2A 30 2E 30 1E  // .[.,0(0-0)0*0.0.
    5100: 3F 29 30 2E 38 25 75 07 2E 03 5D 01 33 F6 C3 83  // ?)0.8%u...].3...
    5110: C7 03 3B FE 75 ED C3 1E 06 2E 8E 1E 0E 03 F6 06  // ..;.u...........
    5120: 87 04 80 75 49 83 3E 4C 04 00 74 42 A0 49 04 B9  // ...uI.>L..tB.I..
    5130: 00 20 2E 8B 3E 14 03 26 F6 47 33 01 75 0E 26 F6  // . ..>..&.G3.u.&.
    5140: 47 09 01 75 1B 2E 8B 3E 12 03 EB 14 3C 06 7E 0B  // G..u...>....<.~.
    5150: 2E 8B 3E 10 03 26 8A 67 37 B5 40 66 33 C0 EB 06  // ..>..&.g7.@f3...
    5160: 66 B8 20 07 20 07 8E C7 66 33 FF F3 66 AB 80 26  // f. . ...f3..f..&
    5170: 87 04 7F 07 1F C3 2E 8E 1E 0E 03 80 FB 10 75 03  // ..............u.
    5180: E9 7A 01 80 FB 20 75 03 E9 9B 01 80 FB 32 75 1F  // .z... u......2u.
    5190: BA CC 03 0A C0 75 09 EC 0C 02 B2 C2 EE E9 F3 00  // .....u..........
    51A0: FE C8 0F 85 F3 00 EC 24 FD B2 C2 EE E9 E4 00 80  // .......$........
    51B0: FB 35 75 28 3C 80 75 08 80 0E 89 04 40 E9 D3 00  // .5u(<.u.....@...
    51C0: F6 06 89 04 40 0F 84 D0 00 0A C0 0F 84 CA 00 FE  // ....@...........
    51D0: C8 75 06 E8 98 07 E9 BA 00 E9 BD 00 80 FB 30 74  // .u............0t
    51E0: 03 E9 96 00 50 E8 2A 3E 8A EF BA CC 03 EC 8A C8  // ....P.*>........
    51F0: 58 0A C0 75 30 B7 08 F6 C1 01 75 12 0A ED 75 0B  // X..u0.....u...u.
    5200: A0 10 04 24 30 3C 30 75 10 B7 02 E9 8B 00 A0 10  // ...$0<0u........
    5210: 04 24 30 3C 30 75 02 B7 02 80 26 89 04 6F 80 0E  // .$0<0u....&..o..
    5220: 89 04 80 EB 36 3C 01 75 41 80 26 89 04 6F B7 09  // ....6<.uA.&..o..
    5230: F6 C1 01 75 15 B7 0B A0 10 04 24 30 3C 30 74 1B  // ...u......$0<0t.
    5240: B7 09 0A ED 74 15 B7 05 EB 11 A0 10 04 24 30 3C  // ....t........$0<
    5250: 30 75 08 B7 0B 0A ED 74 02 B7 03 8A 1E 88 04 80  // 0u.....t........
    5260: E3 F0 0A DF 88 1E 88 04 EB 29 3C 02 75 2B 80 26  // .........)<.u+.&
    5270: 89 04 6F 80 0E 89 04 10 EB B4 80 FB 31 75 1B 0A  // ..o.........1u..
    5280: C0 74 0B 3C 01 75 0C 80 0E 89 04 08 EB 05 80 26  // .t.<.u.........&
    5290: 89 04 F7 8B EC C6 46 1A 12 C3 80 FB 33 75 16 3C  // ......F.....3u.<
    52A0: 00 74 0B 3C 01 75 EC 80 26 89 04 FD EB E5 80 0E  // .t.<.u..&.......
    52B0: 89 04 02 EB DE 80 FB 34 75 17 3C 00 75 07 80 26  // .......4u.<.u..&
    52C0: 87 04 FE EB CE 3C 01 75 07 80 0E 87 04 01 EB C3  // .....<.u........
    52D0: C3 80 FB 36 75 26 BB 20 FF 3C 01 74 09 BB 00 DF  // ...6u&. .<.t....
    52E0: 3C 00 74 02 EB AD E8 02 00 EB A8 9C FA BA C4 03  // <.t.............
    52F0: B0 01 EE 42 EC 22 C7 0A C3 EE 9D C3 C3 B3 03 B7  // ...B."..........
    5300: 00 BA CC 03 EC A8 01 75 02 B7 01 A0 88 04 8A E0  // .......u........
    5310: B1 04 D2 EC 25 0F 0F 8B C8 8B EC 89 5E 0E 89 4E  // ....%.......^..N
    5320: 16 C6 46 1A 12 C3 9C FA C7 06 14 00 76 78 8C 0E  // ..F.........vx..
    5330: 16 00 9D C3 28 18 08 00 08 09 03 00 02 63 2D 27  // ....(........c-'
    5340: 28 90 2B A0 BF 1F 00 C7 06 07 00 00 00 00 9C 8E  // (.+.............
    5350: 8F 14 1F 96 B9 A3 FF 00 01 02 03 04 05 06 07 10  // ................
    5360: 11 12 13 14 15 16 17 08 00 0F 00 00 00 00 00 00  // ................
    5370: 10 0E 00 FF 50 18 08 00 10 01 03 00 02 63 5F 4F  // ....P........c_O
    5380: 50 82 55 81 BF 1F 00 C7 06 07 00 00 00 00 9C 8E  // P.U.............
    5390: 8F 28 1F 96 B9 A3 FF 00 01 02 03 04 05 06 07 10  // .(..............
    53A0: 11 12 13 14 15 16 17 08 00 0F 00 00 00 00 00 00  // ................
    53B0: 10 0E 00 FF 28 18 08 00 40 09 03 00 02 63 2D 27  // ....(...@....c-'
    53C0: 28 90 2B 80 BF 1F 00 C1 00 00 00 00 00 00 9C 8E  // (.+.............
    53D0: 8F 14 00 96 B9 A2 FF 00 13 15 17 02 04 06 07 10  // ................
    53E0: 11 12 13 14 15 16 17 01 00 03 00 00 00 00 00 00  // ................
    53F0: 30 0F 00 FF 50 18 08 00 40 01 01 00 06 63 5F 4F  // 0...P...@....c_O
    5400: 50 82 54 80 BF 1F 00 C1 00 00 00 00 00 00 9C 8E  // P.T.............
    5410: 8F 28 00 96 B9 C2 FF 00 17 17 17 17 17 17 17 17  // .(..............
    5420: 17 17 17 17 17 17 17 01 00 01 00 00 00 00 00 00  // ................
    5430: 00 0D 00 FF 50 18 0E 00 10 00 03 00 03 A6 5F 4F  // ....P........._O
    5440: 50 82 55 81 BF 1F 00 4D 0B 0C 00 00 00 00 83 85  // P.U....M........
    5450: 5D 28 0D 63 BA A3 FF 00 08 08 08 08 08 08 08 10  // ](.c............
    5460: 18 18 18 18 18 18 18 0E 00 0F 08 00 00 00 00 00  // ................
    5470: 10 0A 00 FF 50 1D 10 00 A0 01 0F 00 0A E3 5F 4F  // ....P........._O
    5480: 50 82 54 80 0B 3E 00 40 00 00 00 00 00 00 EA 8C  // P.T..>.@........
    5490: DF 50 00 E7 04 E3 FF 00 01 02 03 04 05 06 07 08  // .P..............
    54A0: 09 0A 0B 0C 0D 0E 0F 01 00 0F 00 10 00 00 00 00  // ................
    54B0: 40 05 0F FF 00 05 11 1C 08 0B 14 28 0E 18 2D 32  // @..........(..-2
    54C0: 20 24 38 3F 00 05 08 0B 0E 11 14 18 1C 20 24 28  //  $8?......... $(
    54D0: 2D 32 38 3F 07 0C 10 15 1A 18 16 15 13 1C 25 2F  // -28?..........%/
    54E0: 38 33 2E 2A 25 27 29 2A 2C 23 19 10 23 25 27 2A  // 83.*%')*,#..#%'*
    54F0: 2C 2B 2A 29 29 2D 32 37 3B 39 37 34 32 33 34 35  // ,+*))-27;9742345
    5500: 35 31 2C 27 2F 30 32 33 34 34 33 33 32 35 38 3A  // 51,'/0234433258:
    5510: 3D 3C 3A 39 38 38 39 39 3A 37 34 31 03 05 07 09  // =<:98899:741....
    5520: 0B 0B 0A 09 08 0D 11 15 19 17 15 13 11 11 12 13  // ................
    5530: 14 0F 0B 07 10 10 12 13 14 13 13 13 12 14 16 18  // ................
    5540: 1A 19 18 17 16 17 17 17 18 15 14 11 15 15 16 17  // ................
    5550: 17 17 17 17 16 18 19 1A 1B 1B 1A 19 19 19 19 19  // ................
    5560: 1A 18 17 16 02 03 04 05 07 06 06 05 05 07 0A 0C  // ................
    5570: 0E 0D 0C 0B 09 0A 0A 0B 0B 09 06 04 09 09 0A 0B  // ................
    5580: 0B 0B 0B 0B 0A 0C 0D 0E 0F 0F 0E 0D 0D 0D 0D 0D  // ................
    5590: 0E 0C 0B 0A 0C 0C 0C 0D 0D 0D 0D 0D 0C 0D 0E 0F  // ................
    55A0: 0F 0F 0F 0E 0E 0E 0E 0E 0E 0E 0D 0C 00 00 00 00  // ................
    55B0: 00 00 00 00 28 18 08 00 20 09 0F 00 06 63 2D 27  // ....(... ....c-'
    55C0: 28 90 2B 80 BF 1F 00 C0 00 00 00 00 00 00 9C 8E  // (.+.............
    55D0: 8F 14 00 96 B9 E3 FF 00 01 02 03 04 05 06 07 10  // ................
    55E0: 11 12 13 14 15 16 17 01 00 0F 00 00 00 00 00 00  // ................
    55F0: 00 05 0F FF 50 18 08 00 40 01 0F 00 06 63 5F 4F  // ....P...@....c_O
    5600: 50 82 54 80 BF 1F 00 C0 00 00 00 00 00 00 9C 8E  // P.T.............
    5610: 8F 28 00 96 B9 E3 FF 00 01 02 03 04 05 06 07 10  // .(..............
    5620: 11 12 13 14 15 16 17 01 00 0F 00 00 00 00 00 00  // ................
    5630: 00 05 0F FF 00 05 11 1C 08 0B 25 28 02 07 1B 20  // ..........%(... 
    5640: 0F 14 28 2C 0C 11 25 2A 14 1E 32 36 0F 13 27 2C  // ..(,..%*..26..',
    5650: 1B 20 34 39 06 0B 1F 24 13 18 2C 30 09 0D 21 26  // . 49...$..,0..!&
    5660: 15 1A 2E 33 13 17 2B 30 1F 24 38 3D 0E 18 2D 32  // ...3..+0.$8=..-2
    5670: 20 24 38 3F 00 05 11 1C 08 0B 14 18 00 05 11 1C  //  $8?............
    5680: 08 0B 14 18 0E 18 2D 32 20 24 38 3F 0E 18 2D 32  // ......-2 $8?..-2
    5690: 20 24 38 3F 00 05 11 1C 08 0B 14 18 00 05 11 1C  //  $8?............
    56A0: 08 0B 14 18 0E 18 2D 32 20 24 38 3F 0E 18 2D 32  // ......-2 $8?..-2
    56B0: 20 24 38 3F 50 18 0E 00 80 01 0F 00 06 A2 5F 4F  //  $8?P........._O
    56C0: 50 82 54 80 BF 1F 00 40 00 00 00 00 00 00 83 85  // P.T....@........
    56D0: 5D 28 0F 63 BA E3 FF 00 08 00 00 18 18 00 00 00  // ](.c............
    56E0: 08 00 00 00 18 00 00 0B 00 05 00 00 00 00 00 00  // ................
    56F0: 00 05 05 FF 50 18 0E 00 80 01 0F 00 06 A3 5F 4F  // ....P........._O
    5700: 50 82 54 80 BF 1F 00 40 00 00 00 00 00 00 83 85  // P.T....@........
    5710: 5D 28 0F 63 BA E3 FF 00 01 02 03 04 05 14 07 38  // ](.c...........8
    5720: 39 3A 3B 3C 3D 3E 3F 01 00 0F 00 00 00 00 00 00  // 9:;<=>?.........
    5730: 00 05 0F FF 28 18 0E 00 08 09 03 00 02 A3 2D 27  // ....(.........-'
    5740: 28 90 2B A0 BF 1F 00 4D 0B 0C 00 00 00 00 83 85  // (.+....M........
    5750: 5D 14 1F 63 BA A3 FF 00 01 02 03 04 05 14 07 38  // ]..c...........8
    5760: 39 3A 3B 3C 3D 3E 3F 08 00 0F 00 00 00 00 00 00  // 9:;<=>?.........
    5770: 10 0E 00 FF 50 18 0E 00 10 01 03 00 02 A3 5F 4F  // ....P........._O
    5780: 50 82 55 81 BF 1F 00 4D 0B 0C 00 00 00 00 83 85  // P.U....M........
    5790: 5D 28 1F 63 BA A3 FF 00 01 02 03 04 05 14 07 38  // ](.c...........8
    57A0: 39 3A 3B 3C 3D 3E 3F 08 00 0F 00 00 00 00 00 00  // 9:;<=>?.........
    57B0: 10 0E 00 FF 28 18 10 00 08 08 03 00 02 67 2D 27  // ....(........g-'
    57C0: 28 90 2B A0 BF 1F 00 4F 0D 0E 00 00 00 00 9C 8E  // (.+....O........
    57D0: 8F 14 1F 96 B9 A3 FF 00 01 02 03 04 05 14 07 38  // ...............8
    57E0: 39 3A 3B 3C 3D 3E 3F 0C 00 0F 08 00 00 00 00 00  // 9:;<=>?.........
    57F0: 10 0E 00 FF 50 18 10 00 10 00 03 00 02 67 5F 4F  // ....P........g_O
    5800: 50 82 55 81 BF 1F 00 4F 0D 0E 00 00 00 00 9C 8E  // P.U....O........
    5810: 8F 28 1F 96 B9 A3 FF 00 01 02 03 04 05 14 07 38  // .(.............8
    5820: 39 3A 3B 3C 3D 3E 3F 0C 00 0F 08 00 00 00 00 00  // 9:;<=>?.........
    5830: 10 0E 00 FF 50 18 10 00 10 00 03 00 02 66 5F 4F  // ....P........f_O
    5840: 50 82 55 81 BF 1F 00 4F 0D 0E 00 00 00 00 9C 8E  // P.U....O........
    5850: 8F 28 0F 96 B9 A3 FF 00 08 08 08 08 08 08 08 10  // .(..............
    5860: 18 18 18 18 18 18 18 0E 00 0F 08 00 00 00 00 00  // ................
    5870: 10 0A 00 FF 50 1D 10 00 A0 01 0F 00 06 E3 5F 4F  // ....P........._O
    5880: 50 82 54 80 0B 3E 00 40 00 00 00 00 00 00 EA 8C  // P.T..>.@........
    5890: DF 28 00 E7 04 C3 FF 00 3F 3F 3F 3F 3F 3F 3F 3F  // .(......????????
    58A0: 3F 3F 3F 3F 3F 3F 3F 01 00 0F 00 00 00 00 00 00  // ???????.........
    58B0: 00 05 01 FF 50 1D 10 00 A0 01 0F 00 06 E3 5F 4F  // ....P........._O
    58C0: 50 82 54 80 0B 3E 00 40 00 00 00 00 00 00 EA 8C  // P.T..>.@........
    58D0: DF 28 00 E7 04 E3 FF 00 01 02 03 04 05 14 07 38  // .(.............8
    58E0: 39 3A 3B 3C 3D 3E 3F 01 00 0F 00 00 00 00 00 00  // 9:;<=>?.........
    58F0: 00 05 0F FF 28 18 08 00 20 01 0F 00 0E 63 5F 4F  // ....(... ....c_O
    5900: 50 82 54 80 BF 1F 00 41 00 00 00 00 00 00 9C 8E  // P.T....A........
    5910: 8F 28 40 96 B9 A3 FF 00 01 02 03 04 05 06 07 08  // .(@.............
    5920: 09 0A 0B 0C 0D 0E 0F 41 00 0F 00 00 00 00 00 00  // .......A........
    5930: 40 05 0F FF CC 52 00 C0 00 00 00 00 00 00 00 00  // @....R..........
    5940: 00 00 00 00 EC 58 00 C0 00 00 00 00 00 00 00 00  // .....X..........
    5950: 00 00 00 00 1A 00 84 90 00 C0 00 00 00 00 00 00  // ................
    5960: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 1E E8  // ................
    5970: 10 00 2E 8E 1E 0E 03 E8 F8 36 E8 CF 36 E8 70 1A  // .........6..6.p.
    5980: 1F C3 2E 8E 1E 0E 03 C7 06 87 04 60 F9 C6 06 8A  // ...........`....
    5990: 04 0B A0 89 04 0C 11 24 17 A2 89 04 B4 01 E8 6D  // .......$.......m
    59A0: 1E A0 89 04 80 26 10 04 CF 80 0E 10 04 20 C7 06  // .....&....... ..
    59B0: 63 04 D4 03 0E 1F E8 97 B5 F7 C1 02 00 75 03 E8  // c............u..
    59C0: 1F B5 C3 1E 2E 8E 1E 0E 03 0E 07 EB 00 1F C3 F6  // ................
    59D0: 06 89 04 08 74 01 C3 53 BA C8 03 EC B0 FF B2 C6  // ....t..S........
    59E0: EE B2 C8 80 3E 63 04 B4 75 2F BE 48 5A B9 40 00  // ....>c..u/.HZ.@.
    59F0: 33 DB 9C FA 8A C3 EE 8B FB C1 EF 03 83 E7 03 03  // 3...............
    5A00: FE 2E 8A 05 42 EE 2E 8A 45 04 EE 2E 8A 45 08 EE  // ....B...E....E..
    5A10: FE C3 4A E2 DF 9D E9 85 00 26 8A 47 2B F6 06 89  // ..J......&.G+...
    5A20: 04 06 74 31 B9 F8 00 BF 4C 54 3C 08 74 11 B9 40  // ..t1....LT<.t..@
    5A30: 00 BF CC 55 3C 38 74 07 3C 3F 74 03 BF 0C 56 33  // ...U<8t.<?t...V3
    5A40: DB 9C FA 8A C3 EE 2E 8A 01 42 EE EE EE FE C3 4A  // .........B.....J
    5A50: E2 F1 9D EB 49 3C 08 74 25 3C 38 74 2E 3C 3F 74  // ....I<.t%<8t.<?t
    5A60: 2A B9 08 00 33 DB 51 E8 0B D3 B9 08 00 F7 C3 10  // *...3.Q.........
    5A70: 00 74 03 83 C7 18 E8 67 00 59 E2 EA EB 20 E8 F4  // .t.....g.Y... ..
    5A80: D2 B9 00 01 33 DB E8 57 00 EB 13 B9 40 00 33 DB  // ....3..W....@.3.
    5A90: 51 E8 28 00 8A C3 E8 B7 2F FE C3 59 E2 F2 5B C3  // Q.(...../..Y..[.
    5AA0: 00 2A 00 2A 00 2A 00 2A 15 3F 15 3F 15 3F 15 3F  // .*.*.*.*.?.?.?.?
    5AB0: 00 2A 00 3F 00 2A 00 3F 00 2A 00 3F 8B FB C1 EF  // .*.?.*.?.*.?....
    5AC0: 02 83 E7 0F 2E 8A B5 38 5A 8B FB D1 EF 83 E7 0F  // .......8Z.......
    5AD0: 2E 8A AD 38 5A 8B FB 83 E7 0F 2E 8A 8D 38 5A C3  // ...8Z........8Z.
    5AE0: 9C 8A C3 FA EE 2E 8A 05 42 EE 47 2E 8A 05 EE 47  // ........B.G....G
    5AF0: 2E 8A 05 EE 47 FE C3 4A E2 E7 9D C3 00 00 00 00  // ....G..J........
    5B00: 00 00 00 00 7E 81 A5 81 BD 99 81 7E 7C FE D6 BA  // ....~......~|...
    5B10: C6 FE 7C 00 C6 EE FE FE 7C 38 10 00 10 38 7C FE  // ..|.....|8...8|.
    5B20: 7C 38 10 00 10 38 10 EE EE 10 38 00 38 7C FE FE  // |8...8....8.8|..
    5B30: 6C 10 38 00 00 18 3C 7E 3C 18 00 00 FF E7 C3 81  // l.8...<~<.......
    5B40: C3 E7 FF FF 00 18 3C 66 66 3C 18 00 FF E7 C3 99  // ......<ff<......
    5B50: 99 C3 E7 FF 1E 0E 1E 36 78 CC CC 78 7E C3 C3 7E  // .......6x..x~..~
    5B60: 18 7E 18 18 1E 1A 1E 18 18 70 F0 60 3E 3E 36 36  // .~.......p.`>>66
    5B70: F6 66 1E 0C DB 3C 66 E7 66 3C DB 00 80 C0 F0 F8  // .f...<f.f<......
    5B80: F0 C0 80 00 02 06 1E 3E 1E 06 02 00 18 3C 7E 18  // .......>.....<~.
    5B90: 7E 3C 18 00 66 66 66 66 66 00 66 00 7F DB 7B 3B  // ~<..fffff.f...{;
    5BA0: 1B 1B 1B 00 3C 66 38 6C 6C 38 CC 78 00 00 00 00  // ....<f8ll8.x....
    5BB0: FE FE FE 00 18 3C 7E 18 7E 3C 18 7E 18 3C 7E 18  // .....<~.~<.~.<~.
    5BC0: 18 18 18 00 18 18 18 18 7E 3C 18 00 00 18 1C FE  // ........~<......
    5BD0: 1C 18 00 00 00 30 70 FE 70 30 00 00 00 00 C0 C0  // .....0p.p0......
    5BE0: C0 FE 00 00 00 24 66 FF 66 24 00 00 00 10 38 7C  // .....$f.f$....8|
    5BF0: 7C FE 00 00 00 FE 7C 7C 38 10 00 00 00 00 00 00  // |.....||8.......
    5C00: 00 00 00 00 18 3C 3C 18 18 00 18 00 6C 6C 6C 00  // .....<<.....lll.
    5C10: 00 00 00 00 6C 6C FE 6C FE 6C 6C 00 18 7E C0 7C  // ....ll.l.ll..~.|
    5C20: 06 FC 18 00 00 C6 0C 18 30 60 C6 00 38 6C 38 76  // ........0`..8l8v
    5C30: CC CC 76 00 18 18 30 00 00 00 00 00 18 30 60 60  // ..v...0......0``
    5C40: 60 30 18 00 60 30 18 18 18 30 60 00 00 EE 7C FE  // `0..`0...0`...|.
    5C50: 7C EE 00 00 00 18 18 7E 18 18 00 00 00 00 00 00  // |......~........
    5C60: 18 18 30 00 00 00 00 FE 00 00 00 00 00 00 00 00  // ..0.............
    5C70: 00 38 38 00 06 0C 18 30 60 C0 80 00 7C C6 CE DE  // .88....0`...|...
    5C80: F6 E6 7C 00 18 78 18 18 18 18 7E 00 7C C6 0C 18  // ..|..x....~.|...
    5C90: 30 66 FE 00 7C C6 06 3C 06 C6 7C 00 0C 1C 3C 6C  // 0f..|..<..|...<l
    5CA0: FE 0C 0C 00 FE C0 FC 06 06 C6 7C 00 7C C6 C0 FC  // ..........|.|...
    5CB0: C6 C6 7C 00 FE C6 06 0C 18 18 18 00 7C C6 C6 7C  // ..|.........|..|
    5CC0: C6 C6 7C 00 7C C6 C6 7E 06 C6 7C 00 00 1C 1C 00  // ..|.|..~..|.....
    5CD0: 00 1C 1C 00 00 18 18 00 00 18 18 30 0C 18 30 60  // ...........0..0`
    5CE0: 30 18 0C 00 00 00 FE 00 00 FE 00 00 60 30 18 0C  // 0...........`0..
    5CF0: 18 30 60 00 7C C6 06 0C 18 00 18 00 7C C6 C6 DE  // .0`.|.......|...
    5D00: DC C0 7E 00 38 6C C6 C6 FE C6 C6 00 FC 66 66 7C  // ..~.8l.......ff|
    5D10: 66 66 FC 00 3C 66 C0 C0 C0 66 3C 00 F8 6C 66 66  // ff..<f...f<..lff
    5D20: 66 6C F8 00 FE C2 C0 F8 C0 C2 FE 00 FE 62 60 7C  // fl...........b`|
    5D30: 60 60 F0 00 7C C6 C0 C0 DE C6 7C 00 C6 C6 C6 FE  // ``..|.....|.....
    5D40: C6 C6 C6 00 3C 18 18 18 18 18 3C 00 3C 18 18 18  // ....<.....<.<...
    5D50: D8 D8 70 00 C6 CC D8 F0 D8 CC C6 00 F0 60 60 60  // ..p..........```
    5D60: 60 62 FE 00 C6 EE FE D6 D6 C6 C6 00 C6 E6 E6 F6  // `b..............
    5D70: DE CE C6 00 7C C6 C6 C6 C6 C6 7C 00 FC 66 66 7C  // ....|.....|..ff|
    5D80: 60 60 F0 00 7C C6 C6 C6 C6 D6 7C 06 FC C6 C6 FC  // ``..|.....|.....
    5D90: D8 CC C6 00 7C C6 C0 7C 06 C6 7C 00 7E 5A 18 18  // ....|..|..|.~Z..
    5DA0: 18 18 3C 00 C6 C6 C6 C6 C6 C6 7C 00 C6 C6 C6 C6  // ..<.......|.....
    5DB0: 6C 38 10 00 C6 C6 D6 D6 FE EE C6 00 C6 6C 38 38  // l8...........l88
    5DC0: 38 6C C6 00 66 66 66 3C 18 18 3C 00 FE 86 0C 18  // 8l..fff<..<.....
    5DD0: 30 62 FE 00 7C 60 60 60 60 60 7C 00 C0 60 30 18  // 0b..|`````|..`0.
    5DE0: 0C 06 02 00 7C 0C 0C 0C 0C 0C 7C 00 10 38 6C C6  // ....|.....|..8l.
    5DF0: 00 00 00 00 00 00 00 00 00 00 00 FF 30 30 18 00  // ............00..
    5E00: 00 00 00 00 00 00 78 0C 7C CC 7E 00 E0 60 7C 66  // ......x.|.~..`|f
    5E10: 66 66 FC 00 00 00 7C C6 C0 C6 7C 00 1C 0C 7C CC  // ff....|...|...|.
    5E20: CC CC 7E 00 00 00 7C C6 FE C0 7C 00 1C 36 30 FC  // ..~...|...|..60.
    5E30: 30 30 78 00 00 00 76 CE C6 7E 06 7C E0 60 7C 66  // 00x...v..~.|.`|f
    5E40: 66 66 E6 00 18 00 38 18 18 18 3C 00 0C 00 1C 0C  // ff....8...<.....
    5E50: 0C 0C CC 78 E0 60 66 6C 78 6C E6 00 18 18 18 18  // ...x.`flxl......
    5E60: 18 18 1C 00 00 00 6C FE D6 D6 C6 00 00 00 DC 66  // ......l........f
    5E70: 66 66 66 00 00 00 7C C6 C6 C6 7C 00 00 00 DC 66  // fff...|...|....f
    5E80: 66 7C 60 F0 00 00 76 CC CC 7C 0C 1E 00 00 DC 66  // f|`...v..|.....f
    5E90: 60 60 F0 00 00 00 7C C0 7C 06 7C 00 30 30 FC 30  // ``....|.|.|.00.0
    5EA0: 30 36 1C 00 00 00 CC CC CC CC 76 00 00 00 C6 C6  // 06........v.....
    5EB0: 6C 38 10 00 00 00 C6 C6 D6 FE 6C 00 00 00 C6 6C  // l8........l....l
    5EC0: 38 6C C6 00 00 00 C6 C6 CE 76 06 7C 00 00 FC 98  // 8l.......v.|....
    5ED0: 30 64 FC 00 0E 18 18 70 18 18 0E 00 18 18 18 00  // 0d.....p........
    5EE0: 18 18 18 00 70 18 18 0E 18 18 70 00 76 DC 00 00  // ....p.....p.v...
    5EF0: 00 00 00 00 00 10 38 38 6C 6C FE 00 3C 66 C0 66  // ......88ll..<f.f
    5F00: 3C 18 CC 78 00 C6 00 C6 C6 CE 76 00 0E 00 7C C6  // <..x......v...|.
    5F10: FE C0 7C 00 7C C6 78 0C 7C CC 7E 00 C6 00 78 0C  // ..|.|.x.|.~...x.
    5F20: 7C CC 7E 00 E0 00 78 0C 7C CC 7E 00 38 38 78 0C  // |.~...x.|.~.88x.
    5F30: 7C CC 7E 00 00 00 7C C0 7C 18 6C 38 7C C6 7C C6  // |.~...|.|.l8|.|.
    5F40: FE C0 7C 00 C6 00 7C C6 FE C0 7C 00 E0 00 7C C6  // ..|...|...|...|.
    5F50: FE C0 7C 00 66 00 38 18 18 18 3C 00 7C C6 38 18  // ..|.f.8...<.|.8.
    5F60: 18 18 3C 00 00 00 38 18 18 18 3C 00 C6 38 6C C6  // ..<...8...<..8l.
    5F70: FE C6 C6 00 38 38 00 7C C6 FE C6 00 0E 00 FE C0  // ....88.|........
    5F80: F8 C0 FE 00 00 00 6C 9A 7E D8 6E 00 7E D8 D8 FE  // ......l.~.n.~...
    5F90: D8 D8 DE 00 7C C6 00 7C C6 C6 7C 00 00 C6 00 7C  // ....|..|..|....|
    5FA0: C6 C6 7C 00 00 E0 00 7C C6 C6 7C 00 7C C6 00 C6  // ..|....|..|.|...
    5FB0: C6 CE 76 00 00 E0 00 C6 C6 CE 76 00 18 00 3C 18  // ..v.......v...<.
    5FC0: 18 18 3C 00 C6 38 6C C6 C6 6C 38 00 C6 00 C6 C6  // ..<..8l..l8.....
    5FD0: C6 C6 7C 00 00 18 7E D8 D8 7E 18 00 38 6C 60 F0  // ..|...~..~..8l`.
    5FE0: 66 F6 6C 00 C3 66 3C 7E 18 3C 18 00 3E 63 38 0E  // f.l..f<~.<..>c8.
    5FF0: 63 3E 00 1C 00 3E 61 3C 86 7C 00 1C 0E 00 78 0C  // c>...>a<.|....x.
    6000: 7C CC 7E 00 1C 00 38 18 18 18 3C 00 00 0E 00 7C  // |.~...8...<....|
    6010: C6 C6 7C 00 00 0E 00 CC CC DC 76 00 00 FC 00 BC  // ..|.......v.....
    6020: 66 66 E6 00 FE 00 C6 E6 F6 CE C6 00 3E 00 3E 60  // ff..........>.>`
    6030: 67 63 3D 00 3E 00 76 CE C6 7E 06 7C 18 00 18 30  // gc=.>.v..~.|...0
    6040: 60 66 3C 00 00 00 00 7C 60 60 00 00 00 00 00 7C  // `f<....|``.....|
    6050: 0C 0C 00 00 C0 CC D8 30 7C 36 0C 3E C0 CC D8 30  // .......0|6.>...0
    6060: 6C 3C 7E 0C 18 00 18 18 3C 3C 18 00 00 36 6C D8  // l<~.....<<...6l.
    6070: 6C 36 00 00 00 D8 6C 36 6C D8 00 00 22 88 22 88  // l6....l6l...".".
    6080: 22 88 22 88 55 AA 55 AA 55 AA 55 AA DD 77 DD 77  // ".".U.U.U.U..w.w
    6090: DD 77 DD 77 18 18 18 18 18 18 18 18 18 18 18 18  // .w.w............
    60A0: F8 18 18 18 18 18 F8 18 F8 18 18 18 36 36 36 36  // ............6666
    60B0: F6 36 36 36 00 00 00 00 FE 36 36 36 00 00 F8 18  // .666.....666....
    60C0: F8 18 18 18 36 36 F6 06 F6 36 36 36 36 36 36 36  // ....66...6666666
    60D0: 36 36 36 36 00 00 FE 06 F6 36 36 36 36 36 F6 06  // 6666.....66666..
    60E0: FE 00 00 00 36 36 36 36 FE 00 00 00 18 18 F8 18  // ....6666........
    60F0: F8 00 00 00 00 00 00 00 F8 18 18 18 18 18 18 18  // ................
    6100: 1F 00 00 00 18 18 18 18 FF 00 00 00 00 00 00 00  // ................
    6110: FF 18 18 18 18 18 18 18 1F 18 18 18 00 00 00 00  // ................
    6120: FF 00 00 00 18 18 18 18 FF 18 18 18 18 18 1F 18  // ................
    6130: 1F 18 18 18 36 36 36 36 37 36 36 36 36 36 37 30  // ....666676666670
    6140: 3F 00 00 00 00 00 3F 30 37 36 36 36 36 36 F7 00  // ?.....?0766666..
    6150: FF 00 00 00 00 00 FF 00 F7 36 36 36 36 36 37 30  // .........6666670
    6160: 37 36 36 36 00 00 FF 00 FF 00 00 00 36 36 F7 00  // 7666........66..
    6170: F7 36 36 36 18 18 FF 00 FF 00 00 00 36 36 36 36  // .666........6666
    6180: FF 00 00 00 00 00 FF 00 FF 18 18 18 00 00 00 00  // ................
    6190: FF 36 36 36 36 36 36 36 3F 00 00 00 18 18 1F 18  // .6666666?.......
    61A0: 1F 00 00 00 00 00 1F 18 1F 18 18 18 00 00 00 00  // ................
    61B0: 3F 36 36 36 36 36 36 36 FF 36 36 36 18 18 FF 18  // ?6666666.666....
    61C0: FF 18 18 18 18 18 18 18 F8 00 00 00 00 00 00 00  // ................
    61D0: 1F 18 18 18 FF FF FF FF FF FF FF FF 00 00 00 00  // ................
    61E0: FF FF FF FF F0 F0 F0 F0 F0 F0 F0 F0 0F 0F 0F 0F  // ................
    61F0: 0F 0F 0F 0F FF FF FF FF 00 00 00 00 00 00 66 DC  // ..............f.
    6200: D8 DC 66 00 00 78 CC F8 CC C6 CC 00 00 FE 62 60  // ..f..x........b`
    6210: 60 60 E0 00 00 FE 6C 6C 6C 6C 6C 00 FE C6 60 30  // ``....lllll...`0
    6220: 60 C6 FE 00 00 7E D8 CC CC D8 70 00 00 66 66 66  // `....~....p..fff
    6230: 66 7C C0 00 00 76 DC 18 18 18 38 00 FE 38 6C C6  // f|...v....8..8l.
    6240: 6C 38 FE 00 38 6C C6 FE C6 6C 38 00 38 6C C6 C6  // l8..8l...l8.8l..
    6250: 6C 6C EE 00 3E 60 38 66 C6 CC 78 00 00 00 7E DB  // ll..>`8f..x...~.
    6260: DB 7E 00 00 06 7C DE F6 E6 7C C0 00 38 60 C0 F8  // .~...|...|..8`..
    6270: C0 60 38 00 7C C6 C6 C6 C6 C6 C6 00 00 FE 00 FE  // .`8.|...........
    6280: 00 FE 00 00 18 18 7E 18 18 00 7E 00 30 18 0C 18  // ......~...~.0...
    6290: 30 00 7E 00 0C 18 30 18 0C 00 7E 00 0C 1E 18 18  // 0.~...0...~.....
    62A0: 18 18 18 18 18 18 18 18 18 78 30 00 00 00 18 00  // .........x0.....
    62B0: 7E 00 18 00 00 76 DC 00 76 DC 00 00 7C C6 C6 7C  // ~....v..v...|..|
    62C0: 00 00 00 00 00 00 00 18 18 00 00 00 00 00 00 00  // ................
    62D0: 18 00 00 00 1F 18 18 18 F8 38 18 00 D8 6C 6C 6C  // .........8...lll
    62E0: 00 00 00 00 70 D8 30 F8 00 00 00 00 00 00 7C 7C  // ....p.0.......||
    62F0: 7C 7C 00 00 00 00 00 00 00 00 00 00 1D 00 00 00  // ||..............
    6300: 00 24 66 FF 66 24 00 00 00 00 00 00 00 10 00 00  // .$f.f$..........
    6310: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    6320: 00 7E 81 A5 81 81 BD 99 81 81 7E 00 00 00 00 00  // .~........~.....
    6330: 00 7C FE FE D6 FE FE BA C6 FE 7C 00 00 00 00 00  // .|........|.....
    6340: 00 00 6C EE FE FE FE FE 7C 38 10 00 00 00 00 00  // ..l.....|8......
    6350: 00 00 10 38 7C FE 7C 38 10 00 00 00 00 00 00 00  // ...8|.|8........
    6360: 00 00 10 38 38 10 6C EE 6C 10 38 00 00 00 00 00  // ...88.l.l.8.....
    6370: 00 10 38 7C 7C FE FE FE 6C 10 38 00 00 00 00 00  // ..8||...l.8.....
    6380: 00 00 00 00 18 3C 3C 3C 18 00 00 00 00 00 00 FF  // .....<<<........
    6390: FF FF FF FF E7 C3 C3 C3 E7 FF FF FF FF FF FF 00  // ................
    63A0: 00 00 00 18 3C 66 66 66 3C 18 00 00 00 00 00 FF  // ....<fff<.......
    63B0: FF FF FF E7 C3 99 99 99 C3 E7 FF FF FF FF FF 00  // ................
    63C0: 00 1E 0E 1E 36 78 CC CC CC CC 78 00 00 00 00 00  // ....6x....x.....
    63D0: 00 3C 66 66 66 3C 18 7E 18 18 18 00 00 00 00 00  // .<fff<.~........
    63E0: 00 1E 1A 1E 18 18 18 18 78 F8 70 00 00 00 00 00  // ........x.p.....
    63F0: 00 3E 36 3E 36 36 76 F6 66 0E 1E 0C 00 00 00 00  // .>6>66v.f.......
    6400: 00 18 DB 7E 3C 66 66 3C 7E DB 18 00 00 00 00 00  // ...~<ff<~.......
    6410: 00 00 80 E0 F0 FC FE FC F0 E0 80 00 00 00 00 00  // ................
    6420: 00 00 02 0E 3E 7E FE 7E 3E 0E 02 00 00 00 00 00  // ....>~.~>.......
    6430: 00 18 3C 7E 18 18 18 18 7E 3C 18 00 00 00 00 00  // ..<~....~<......
    6440: 00 66 66 66 66 66 66 66 00 66 66 00 00 00 00 00  // .fffffff.ff.....
    6450: 00 7F DB DB DB DB 7B 1B 1B 1B 1B 00 00 00 00 00  // ......{.........
    6460: 00 7C C6 C6 60 7C F6 DE 7C 0C C6 C6 7C 00 00 00  // .|..`|..|...|...
    6470: 00 00 00 00 00 00 00 FE FE FE FE 00 00 00 00 00  // ................
    6480: 00 18 3C 7E 18 18 18 7E 3C 18 7E 00 00 00 00 00  // ..<~...~<.~.....
    6490: 00 18 3C 7E 18 18 18 18 18 18 18 00 00 00 00 00  // ..<~............
    64A0: 00 18 18 18 18 18 18 18 7E 3C 18 00 00 00 00 00  // ........~<......
    64B0: 00 00 00 00 0C 0E FF 0E 0C 00 00 00 00 00 00 00  // ................
    64C0: 00 00 00 00 30 70 FE 70 30 00 00 00 00 00 00 00  // ....0p.p0.......
    64D0: 00 00 00 00 00 C0 C0 C0 FE 00 00 00 00 00 00 00  // ................
    64E0: 00 00 00 00 24 66 FF 66 24 00 00 00 00 00 00 00  // ....$f.f$.......
    64F0: 00 00 10 38 38 38 7C 7C FE FE 00 00 00 00 00 00  // ...888||........
    6500: 00 00 FE FE 7C 7C 7C 38 38 10 00 00 00 00 00 00  // ....|||88.......
    6510: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    6520: 00 18 3C 3C 3C 3C 18 18 00 18 18 00 00 00 00 00  // ..<<<<..........
    6530: 36 36 36 36 14 00 00 00 00 00 00 00 00 00 00 00  // 6666............
    6540: 00 6C 6C 6C FE 6C 6C FE 6C 6C 6C 00 00 00 00 00  // .lll.ll.lll.....
    6550: 00 18 18 7C C6 C0 78 3C 06 C6 7C 18 18 00 00 00  // ...|..x<..|.....
    6560: 00 00 00 00 62 66 0C 18 30 66 C6 00 00 00 00 00  // ....bf..0f......
    6570: 00 38 6C 38 30 76 7E CC CC CC 76 00 00 00 00 00  // .8l80v~...v.....
    6580: 0C 0C 0C 18 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    6590: 00 0C 18 30 30 30 30 30 30 18 0C 00 00 00 00 00  // ...000000.......
    65A0: 00 30 18 0C 0C 0C 0C 0C 0C 18 30 00 00 00 00 00  // .0........0.....
    65B0: 00 00 00 00 6C 38 FE 38 6C 00 00 00 00 00 00 00  // ....l8.8l.......
    65C0: 00 00 00 00 18 18 7E 18 18 00 00 00 00 00 00 00  // ......~.........
    65D0: 00 00 00 00 00 00 00 00 0C 0C 0C 18 00 00 00 00  // ................
    65E0: 00 00 00 00 00 00 FE 00 00 00 00 00 00 00 00 00  // ................
    65F0: 00 00 00 00 00 00 00 00 00 18 18 00 00 00 00 00  // ................
    6600: 00 00 00 02 06 0C 18 30 60 C0 80 00 00 00 00 00  // .......0`.......
    6610: 00 7C C6 C6 CE DE F6 E6 C6 C6 7C 00 00 00 00 00  // .|........|.....
    6620: 00 18 78 18 18 18 18 18 18 18 7E 00 00 00 00 00  // ..x.......~.....
    6630: 00 7C C6 C6 06 0C 18 30 60 C6 FE 00 00 00 00 00  // .|.....0`.......
    6640: 00 7C C6 06 06 3C 06 06 06 C6 7C 00 00 00 00 00  // .|...<....|.....
    6650: 00 0C 1C 3C 6C CC CC FE 0C 0C 1E 00 00 00 00 00  // ...<l...........
    6660: 00 FE C0 C0 C0 FC 06 06 06 C6 7C 00 00 00 00 00  // ..........|.....
    6670: 00 7C C6 C0 C0 FC C6 C6 C6 C6 7C 00 00 00 00 00  // .|........|.....
    6680: 00 FE C6 06 0C 18 30 30 30 30 30 00 00 00 00 00  // ......00000.....
    6690: 00 7C C6 C6 C6 7C C6 C6 C6 C6 7C 00 00 00 00 00  // .|...|....|.....
    66A0: 00 7C C6 C6 C6 C6 7E 06 06 C6 7C 00 00 00 00 00  // .|....~...|.....
    66B0: 00 00 00 00 0C 0C 00 00 0C 0C 00 00 00 00 00 00  // ................
    66C0: 00 00 00 00 0C 0C 00 00 0C 0C 0C 18 00 00 00 00  // ................
    66D0: 00 00 0C 18 30 60 C0 60 30 18 0C 00 00 00 00 00  // ....0`.`0.......
    66E0: 00 00 00 00 00 FE 00 FE 00 00 00 00 00 00 00 00  // ................
    66F0: 00 00 60 30 18 0C 06 0C 18 30 60 00 00 00 00 00  // ..`0.....0`.....
    6700: 00 7C C6 C6 0C 18 18 18 00 18 18 00 00 00 00 00  // .|..............
    6710: 00 7C C6 C6 C6 DE DE DE DC C0 7E 00 00 00 00 00  // .|........~.....
    6720: 00 38 6C C6 C6 C6 FE C6 C6 C6 C6 00 00 00 00 00  // .8l.............
    6730: 00 FC 66 66 66 7C 66 66 66 66 FC 00 00 00 00 00  // ..fff|ffff......
    6740: 00 3C 66 C2 C0 C0 C0 C0 C2 66 3C 00 00 00 00 00  // .<f......f<.....
    6750: 00 F8 6C 66 66 66 66 66 66 6C F8 00 00 00 00 00  // ..lffffffl......
    6760: 00 FE 66 60 64 7C 64 60 60 66 FE 00 00 00 00 00  // ..f`d|d``f......
    6770: 00 FE 66 60 64 7C 64 60 60 60 F0 00 00 00 00 00  // ..f`d|d```......
    6780: 00 7C C6 C6 C0 C0 C0 CE C6 C6 7C 00 00 00 00 00  // .|........|.....
    6790: 00 C6 C6 C6 C6 FE C6 C6 C6 C6 C6 00 00 00 00 00  // ................
    67A0: 00 3C 18 18 18 18 18 18 18 18 3C 00 00 00 00 00  // .<........<.....
    67B0: 00 3C 18 18 18 18 18 18 D8 D8 70 00 00 00 00 00  // .<........p.....
    67C0: 00 C6 C6 CC D8 F0 F0 D8 CC C6 C6 00 00 00 00 00  // ................
    67D0: 00 F0 60 60 60 60 60 60 62 66 FE 00 00 00 00 00  // ..``````bf......
    67E0: 00 C6 C6 EE EE FE D6 D6 D6 C6 C6 00 00 00 00 00  // ................
    67F0: 00 C6 C6 E6 E6 F6 DE CE CE C6 C6 00 00 00 00 00  // ................
    6800: 00 7C C6 C6 C6 C6 C6 C6 C6 C6 7C 00 00 00 00 00  // .|........|.....
    6810: 00 FC 66 66 66 66 7C 60 60 60 F0 00 00 00 00 00  // ..ffff|```......
    6820: 00 7C C6 C6 C6 C6 C6 C6 D6 D6 7C 06 00 00 00 00  // .|........|.....
    6830: 00 FC 66 66 66 7C 78 6C 66 66 E6 00 00 00 00 00  // ..fff|xlff......
    6840: 00 7C C6 C0 C0 70 1C 06 06 C6 7C 00 00 00 00 00  // .|...p....|.....
    6850: 00 7E 5A 18 18 18 18 18 18 18 3C 00 00 00 00 00  // .~Z.......<.....
    6860: 00 C6 C6 C6 C6 C6 C6 C6 C6 C6 7C 00 00 00 00 00  // ..........|.....
    6870: 00 C6 C6 C6 C6 C6 C6 C6 6C 38 10 00 00 00 00 00  // ........l8......
    6880: 00 C6 C6 C6 D6 D6 D6 FE EE C6 C6 00 00 00 00 00  // ................
    6890: 00 C6 C6 C6 6C 38 38 6C C6 C6 C6 00 00 00 00 00  // ....l88l........
    68A0: 00 66 66 66 66 66 3C 18 18 18 3C 00 00 00 00 00  // .fffff<...<.....
    68B0: 00 FE C6 86 0C 18 30 60 C2 C6 FE 00 00 00 00 00  // ......0`........
    68C0: 00 7C 60 60 60 60 60 60 60 60 7C 00 00 00 00 00  // .|````````|.....
    68D0: 00 00 00 80 C0 60 30 18 0C 06 02 00 00 00 00 00  // .....`0.........
    68E0: 00 7C 0C 0C 0C 0C 0C 0C 0C 0C 7C 00 00 00 00 00  // .|........|.....
    68F0: 10 38 6C C6 00 00 00 00 00 00 00 00 00 00 00 00  // .8l.............
    6900: 00 00 00 00 00 00 00 00 00 00 00 00 FF 00 00 00  // ................
    6910: 18 18 18 0C 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    6920: 00 00 00 00 78 0C 7C CC CC DC 76 00 00 00 00 00  // ....x.|...v.....
    6930: 00 E0 60 60 7C 66 66 66 66 66 FC 00 00 00 00 00  // ..``|fffff......
    6940: 00 00 00 00 7C C6 C0 C0 C0 C6 7C 00 00 00 00 00  // ....|.....|.....
    6950: 00 1C 0C 0C 7C CC CC CC CC CC 7E 00 00 00 00 00  // ....|.....~.....
    6960: 00 00 00 00 7C C6 C6 FE C0 C6 7C 00 00 00 00 00  // ....|.....|.....
    6970: 00 1C 36 30 30 FC 30 30 30 30 78 00 00 00 00 00  // ..600.0000x.....
    6980: 00 00 00 00 76 CE C6 C6 CE 76 06 C6 7C 00 00 00  // ....v....v..|...
    6990: 00 E0 60 60 7C 66 66 66 66 66 E6 00 00 00 00 00  // ..``|fffff......
    69A0: 00 18 18 00 38 18 18 18 18 18 3C 00 00 00 00 00  // ....8.....<.....
    69B0: 00 0C 0C 00 1C 0C 0C 0C 0C 0C CC CC 78 00 00 00  // ............x...
    69C0: 00 E0 60 60 66 66 6C 78 6C 66 E6 00 00 00 00 00  // ..``fflxlf......
    69D0: 00 18 18 18 18 18 18 18 18 18 1C 00 00 00 00 00  // ................
    69E0: 00 00 00 00 6C FE D6 D6 C6 C6 C6 00 00 00 00 00  // ....l...........
    69F0: 00 00 00 00 DC 66 66 66 66 66 66 00 00 00 00 00  // .....ffffff.....
    6A00: 00 00 00 00 7C C6 C6 C6 C6 C6 7C 00 00 00 00 00  // ....|.....|.....
    6A10: 00 00 00 00 DC 66 66 66 66 7C 60 60 F0 00 00 00  // .....ffff|``....
    6A20: 00 00 00 00 76 CC CC CC CC 7C 0C 0C 1E 00 00 00  // ....v....|......
    6A30: 00 00 00 00 DC 66 60 60 60 60 F0 00 00 00 00 00  // .....f````......
    6A40: 00 00 00 00 7C C6 C0 7C 06 C6 7C 00 00 00 00 00  // ....|..|..|.....
    6A50: 00 30 30 30 FC 30 30 30 30 36 1C 00 00 00 00 00  // .000.00006......
    6A60: 00 00 00 00 CC CC CC CC CC CC 76 00 00 00 00 00  // ..........v.....
    6A70: 00 00 00 00 C6 C6 C6 C6 6C 38 10 00 00 00 00 00  // ........l8......
    6A80: 00 00 00 00 C6 C6 D6 D6 D6 FE 6C 00 00 00 00 00  // ..........l.....
    6A90: 00 00 00 00 C6 C6 6C 38 6C C6 C6 00 00 00 00 00  // ......l8l.......
    6AA0: 00 00 00 00 C6 C6 C6 C6 CE 76 06 C6 7C 00 00 00  // .........v..|...
    6AB0: 00 00 00 00 FE 86 0C 18 30 62 FE 00 00 00 00 00  // ........0b......
    6AC0: 00 0E 18 18 18 70 18 18 18 18 0E 00 00 00 00 00  // .....p..........
    6AD0: 00 18 18 18 18 00 18 18 18 18 18 00 00 00 00 00  // ................
    6AE0: 00 70 18 18 18 0E 18 18 18 18 70 00 00 00 00 00  // .p........p.....
    6AF0: 00 76 DC 00 00 00 00 00 00 00 00 00 00 00 00 00  // .v..............
    6B00: 00 00 00 00 10 38 38 6C 6C FE 00 00 00 00 00 00  // .....88ll.......
    6B10: 00 3C 66 C0 C0 C0 C6 66 3C 18 0C CC 38 00 00 00  // .<f....f<...8...
    6B20: 00 C6 00 00 C6 C6 C6 C6 C6 CE 76 00 00 00 00 00  // ..........v.....
    6B30: 0C 18 30 00 7C C6 C6 FE C0 C6 7C 00 00 00 00 00  // ..0.|.....|.....
    6B40: 30 78 CC 00 78 0C 7C CC CC DC 76 00 00 00 00 00  // 0x..x.|...v.....
    6B50: 00 CC 00 00 78 0C 7C CC CC DC 76 00 00 00 00 00  // ....x.|...v.....
    6B60: 60 30 18 00 78 0C 7C CC CC DC 76 00 00 00 00 00  // `0..x.|...v.....
    6B70: 38 6C 38 00 78 0C 7C CC CC DC 76 00 00 00 00 00  // 8l8.x.|...v.....
    6B80: 00 00 00 7C C6 C0 C0 C6 7C 18 0C 6C 38 00 00 00  // ...|....|..l8...
    6B90: 30 78 CC 00 7C C6 C6 FE C0 C6 7C 00 00 00 00 00  // 0x..|.....|.....
    6BA0: 00 CC 00 00 7C C6 C6 FE C0 C6 7C 00 00 00 00 00  // ....|.....|.....
    6BB0: 30 18 0C 00 7C C6 C6 FE C0 C6 7C 00 00 00 00 00  // 0...|.....|.....
    6BC0: 00 66 00 00 38 18 18 18 18 18 3C 00 00 00 00 00  // .f..8.....<.....
    6BD0: 18 3C 66 00 38 18 18 18 18 18 3C 00 00 00 00 00  // .<f.8.....<.....
    6BE0: 00 00 00 00 38 18 18 18 18 18 3C 00 00 00 00 00  // ....8.....<.....
    6BF0: C6 00 38 6C C6 C6 C6 FE C6 C6 C6 00 00 00 00 38  // ..8l...........8
    6C00: 6C 38 00 38 6C C6 C6 FE C6 C6 C6 00 00 00 00 0C  // l8.8l...........
    6C10: 18 30 00 FE 60 60 7C 60 60 60 FE 00 00 00 00 00  // .0..``|```......
    6C20: 00 00 00 66 DB 1B 7F D8 D8 DF 76 00 00 00 00 00  // ...f......v.....
    6C30: 00 7E D8 D8 D8 D8 FE D8 D8 D8 DE 00 00 00 00 00  // .~..............
    6C40: 30 78 CC 00 7C C6 C6 C6 C6 C6 7C 00 00 00 00 00  // 0x..|.....|.....
    6C50: 00 C6 00 00 7C C6 C6 C6 C6 C6 7C 00 00 00 00 00  // ....|.....|.....
    6C60: 30 18 0C 00 7C C6 C6 C6 C6 C6 7C 00 00 00 00 00  // 0...|.....|.....
    6C70: 30 78 CC 00 C6 C6 C6 C6 C6 CE 76 00 00 00 00 00  // 0x........v.....
    6C80: 60 30 18 00 C6 C6 C6 C6 C6 CE 76 00 00 00 00 00  // `0........v.....
    6C90: 18 00 3C 18 18 18 18 18 18 18 3C 00 00 00 00 00  // ..<.......<.....
    6CA0: C6 00 7C C6 C6 C6 C6 C6 C6 C6 7C 00 00 00 00 00  // ..|.......|.....
    6CB0: C6 00 C6 C6 C6 C6 C6 C6 C6 C6 7C 00 00 00 00 00  // ..........|.....
    6CC0: 00 18 18 7C C6 C0 C0 C6 7C 18 18 00 00 00 00 00  // ...|....|.......
    6CD0: 38 6C 60 60 F0 60 60 60 66 F6 6C 00 00 00 00 00  // 8l``.```f.l.....
    6CE0: 66 66 66 66 3C 18 7E 18 3C 18 18 00 00 00 00 00  // ffff<.~.<.......
    6CF0: 00 3E 63 63 30 1C 06 63 63 3E 00 1C 00 00 00 00  // .>cc0..cc>......
    6D00: 00 00 00 00 3E 63 38 0E 63 3E 00 1C 00 00 00 00  // ....>c8.c>......
    6D10: 0C 18 30 00 78 0C 7C CC CC DC 76 00 00 00 00 00  // ..0.x.|...v.....
    6D20: 0C 18 30 00 38 18 18 18 18 18 3C 00 00 00 00 00  // ..0.8.....<.....
    6D30: 0C 18 30 00 7C C6 C6 C6 C6 C6 7C 00 00 00 00 00  // ..0.|.....|.....
    6D40: 18 30 60 00 CC CC CC CC CC DC 76 00 00 00 00 00  // .0`.......v.....
    6D50: 00 76 DC 00 BC 66 66 66 66 66 E6 00 00 00 00 00  // .v...fffff......
    6D60: 76 DC 00 C6 C6 E6 F6 DE CE C6 C6 00 00 00 00 00  // v...............
    6D70: 21 1E 00 1E 33 60 60 67 63 33 1D 00 00 00 00 00  // !...3``gc3......
    6D80: 42 3C 00 3B 66 66 66 3E 06 66 3C 00 00 00 00 00  // B<.;fff>.f<.....
    6D90: 00 30 30 00 30 30 30 60 C6 C6 7C 00 00 00 00 00  // .00.000`..|.....
    6DA0: 00 00 00 00 00 00 7E 60 60 60 00 00 00 00 00 00  // ......~```......
    6DB0: 00 00 00 00 00 00 7E 06 06 06 00 00 00 00 00 00  // ......~.........
    6DC0: 60 60 62 66 6C 18 30 60 DC 36 0C 18 3E 00 00 00  // ``bfl.0`.6..>...
    6DD0: 60 60 62 66 6C 18 36 6E DE 36 7E 06 06 00 00 00  // ``bfl.6n.6~.....
    6DE0: 00 18 18 00 18 18 3C 3C 3C 3C 18 00 00 00 00 00  // ......<<<<......
    6DF0: 00 00 00 00 36 6C D8 6C 36 00 00 00 00 00 00 00  // ....6l.l6.......
    6E00: 00 00 00 00 D8 6C 36 6C D8 00 00 00 00 00 00 11  // .....l6l........
    6E10: 44 11 44 11 44 11 44 11 44 11 44 11 44 11 44 AA  // D.D.D.D.D.D.D.D.
    6E20: 55 AA 55 AA 55 AA 55 AA 55 AA 55 AA 55 AA 55 DD  // U.U.U.U.U.U.U.U.
    6E30: 77 DD 77 DD 77 DD 77 DD 77 DD 77 DD 77 DD 77 18  // w.w.w.w.w.w.w.w.
    6E40: 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18  // ................
    6E50: 18 18 18 18 18 18 F8 18 18 18 18 18 18 18 18 18  // ................
    6E60: 18 18 18 18 F8 18 F8 18 18 18 18 18 18 18 18 36  // ...............6
    6E70: 36 36 36 36 36 36 F6 36 36 36 36 36 36 36 36 00  // 666666.66666666.
    6E80: 00 00 00 00 00 00 FE 36 36 36 36 36 36 36 36 00  // .......66666666.
    6E90: 00 00 00 00 F8 18 F8 18 18 18 18 18 18 18 18 36  // ...............6
    6EA0: 36 36 36 36 F6 06 F6 36 36 36 36 36 36 36 36 36  // 6666...666666666
    6EB0: 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 00  // 666666666666666.
    6EC0: 00 00 00 00 FE 06 F6 36 36 36 36 36 36 36 36 36  // .......666666666
    6ED0: 36 36 36 36 F6 06 FE 00 00 00 00 00 00 00 00 36  // 6666...........6
    6EE0: 36 36 36 36 36 36 FE 00 00 00 00 00 00 00 00 18  // 666666..........
    6EF0: 18 18 18 18 F8 18 F8 00 00 00 00 00 00 00 00 00  // ................
    6F00: 00 00 00 00 00 00 F8 18 18 18 18 18 18 18 18 18  // ................
    6F10: 18 18 18 18 18 18 1F 00 00 00 00 00 00 00 00 18  // ................
    6F20: 18 18 18 18 18 18 FF 00 00 00 00 00 00 00 00 00  // ................
    6F30: 00 00 00 00 00 00 FF 18 18 18 18 18 18 18 18 18  // ................
    6F40: 18 18 18 18 18 18 1F 18 18 18 18 18 18 18 18 00  // ................
    6F50: 00 00 00 00 00 00 FF 00 00 00 00 00 00 00 00 18  // ................
    6F60: 18 18 18 18 18 18 FF 18 18 18 18 18 18 18 18 18  // ................
    6F70: 18 18 18 18 1F 18 1F 18 18 18 18 18 18 18 18 36  // ...............6
    6F80: 36 36 36 36 36 36 37 36 36 36 36 36 36 36 36 36  // 6666667666666666
    6F90: 36 36 36 36 37 30 3F 00 00 00 00 00 00 00 00 00  // 666670?.........
    6FA0: 00 00 00 00 3F 30 37 36 36 36 36 36 36 36 36 36  // ....?07666666666
    6FB0: 36 36 36 36 F7 00 FF 00 00 00 00 00 00 00 00 00  // 6666............
    6FC0: 00 00 00 00 FF 00 F7 36 36 36 36 36 36 36 36 36  // .......666666666
    6FD0: 36 36 36 36 37 30 37 36 36 36 36 36 36 36 36 00  // 666670766666666.
    6FE0: 00 00 00 00 FF 00 FF 00 00 00 00 00 00 00 00 36  // ...............6
    6FF0: 36 36 36 36 F7 00 F7 36 36 36 36 36 36 36 36 18  // 6666...66666666.
    7000: 18 18 18 18 FF 00 FF 00 00 00 00 00 00 00 00 36  // ...............6
    7010: 36 36 36 36 36 36 FF 00 00 00 00 00 00 00 00 00  // 666666..........
    7020: 00 00 00 00 FF 00 FF 18 18 18 18 18 18 18 18 00  // ................
    7030: 00 00 00 00 00 00 FF 36 36 36 36 36 36 36 36 36  // .......666666666
    7040: 36 36 36 36 36 36 3F 00 00 00 00 00 00 00 00 18  // 666666?.........
    7050: 18 18 18 18 1F 18 1F 00 00 00 00 00 00 00 00 00  // ................
    7060: 00 00 00 00 1F 18 1F 18 18 18 18 18 18 18 18 00  // ................
    7070: 00 00 00 00 00 00 3F 36 36 36 36 36 36 36 36 36  // ......?666666666
    7080: 36 36 36 36 36 36 FF 36 36 36 36 36 36 36 36 18  // 666666.66666666.
    7090: 18 18 18 18 FF 18 FF 18 18 18 18 18 18 18 18 18  // ................
    70A0: 18 18 18 18 18 18 F8 00 00 00 00 00 00 00 00 00  // ................
    70B0: 00 00 00 00 00 00 1F 18 18 18 18 18 18 18 18 FF  // ................
    70C0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF 00  // ................
    70D0: 00 00 00 00 00 00 00 FF FF FF FF FF FF FF FF F0  // ................
    70E0: F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 0F  // ................
    70F0: 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F FF  // ................
    7100: FF FF FF FF FF FF FF 00 00 00 00 00 00 00 00 00  // ................
    7110: 00 00 00 76 DC D8 D8 D8 D8 DC 76 00 00 00 00 00  // ...v......v.....
    7120: 00 78 CC CC D8 FC C6 C6 C6 C6 CC 00 00 00 00 00  // .x..............
    7130: 00 FE 66 62 60 60 60 60 60 60 60 00 00 00 00 00  // ..fb```````.....
    7140: 00 00 00 00 FE 6C 6C 6C 6C 6C 6C 00 00 00 00 00  // .....llllll.....
    7150: 00 FE C6 62 30 18 18 30 62 C6 FE 00 00 00 00 00  // ...b0..0b.......
    7160: 00 00 00 00 7E D8 CC CC CC D8 70 00 00 00 00 00  // ....~.....p.....
    7170: 00 00 00 66 66 66 66 66 7C 60 C0 80 00 00 00 00  // ...fffff|`......
    7180: 00 00 00 00 76 DC 18 18 18 18 18 00 00 00 00 00  // ....v...........
    7190: 00 FE 38 38 6C C6 C6 6C 38 38 FE 00 00 00 00 00  // ..88l..l88......
    71A0: 00 00 38 6C C6 C6 FE C6 C6 6C 38 00 00 00 00 00  // ..8l.....l8.....
    71B0: 00 38 6C C6 C6 C6 C6 6C 6C 6C EE 00 00 00 00 00  // .8l....lll......
    71C0: 00 3E 60 60 3C 66 C6 C6 C6 CC 78 00 00 00 00 00  // .>``<f....x.....
    71D0: 00 00 00 00 7E DB DB DB 7E 00 00 00 00 00 00 00  // ....~...~.......
    71E0: 00 02 06 7C CE DE F6 F6 7C 60 C0 00 00 00 00 00  // ...|....|`......
    71F0: 00 00 1C 30 60 60 7C 60 60 30 1C 00 00 00 00 00  // ...0``|``0......
    7200: 00 7C C6 C6 C6 C6 C6 C6 C6 C6 C6 00 00 00 00 00  // .|..............
    7210: 00 00 00 FE 00 00 FE 00 00 FE 00 00 00 00 00 00  // ................
    7220: 00 00 00 18 18 7E 18 18 00 00 7E 00 00 00 00 00  // .....~....~.....
    7230: 00 30 18 0C 06 0C 18 30 00 00 7E 00 00 00 00 00  // .0.....0..~.....
    7240: 00 0C 18 30 60 30 18 0C 00 00 7E 00 00 00 00 00  // ...0`0....~.....
    7250: 00 00 00 0C 1E 1A 18 18 18 18 18 18 18 18 18 18  // ................
    7260: 18 18 18 18 18 18 18 18 18 58 78 30 00 00 00 00  // .........Xx0....
    7270: 00 00 00 18 18 00 7E 00 18 18 00 00 00 00 00 00  // ......~.........
    7280: 00 00 00 00 00 76 DC 00 76 DC 00 00 00 00 00 00  // .....v..v.......
    7290: 00 78 CC CC 78 00 00 00 00 00 00 00 00 00 00 00  // .x..x...........
    72A0: 00 00 00 00 00 00 18 18 00 00 00 00 00 00 00 00  // ................
    72B0: 00 00 00 00 00 00 00 18 00 00 00 00 00 00 00 00  // ................
    72C0: 00 1F 18 18 18 18 18 D8 D8 78 38 18 00 00 00 00  // .........x8.....
    72D0: 00 D8 6C 6C 6C 6C 6C 00 00 00 00 00 00 00 00 00  // ..lllll.........
    72E0: 00 70 D8 18 30 60 F8 00 00 00 00 00 00 00 00 00  // .p..0`..........
    72F0: 00 00 00 00 7E 7E 7E 7E 7E 7E 00 00 00 00 00 00  // ....~~~~~~......
    7300: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 1D  // ................
    7310: 00 00 00 00 00 24 66 FF 66 24 00 00 00 00 00 00  // .....$f.f$......
    7320: 2F 00 00 00 01 03 06 0C 18 30 60 C0 80 00 00 00  // /........0`.....
    7330: 00 30 00 00 7E C3 C3 C3 DB DB C3 C3 C3 7E 00 00  // .0..~........~..
    7340: 00 00 4D 00 00 C3 C3 E7 FF FF DB DB C3 C3 C3 00  // ..M.............
    7350: 00 00 00 54 00 00 FF 99 18 18 18 18 18 18 18 3C  // ...T...........<
    7360: 00 00 00 00 56 00 00 C3 C3 C3 C3 C3 C3 C3 66 3C  // ....V.........f<
    7370: 18 00 00 00 00 57 00 00 C3 C3 C3 C3 DB DB DB DB  // .....W..........
    7380: FF 66 00 00 00 00 58 00 00 C3 C3 C3 66 3C 3C 66  // .f....X.....f<<f
    7390: C3 C3 C3 00 00 00 00 59 00 00 C3 C3 C3 C3 66 3C  // .......Y......f<
    73A0: 18 18 18 3C 00 00 00 00 5C 00 00 00 80 C0 60 30  // ...<....\.....`0
    73B0: 18 0C 06 03 01 00 00 00 00 6D 00 00 00 00 00 66  // .........m.....f
    73C0: FF DB DB DB C3 C3 00 00 00 00 76 00 00 00 00 00  // ..........v.....
    73D0: C3 C3 C3 C3 66 3C 18 00 00 00 00 77 00 00 00 00  // ....f<.....w....
    73E0: 00 C3 C3 DB DB DB FF 66 00 00 00 00 00 00 A7 62  // .......f.......b
    73F0: C3 0B DB 74 03 E9 46 01 57 32 C0 B9 40 00 F3 AA  // ...t..F.W2..@...
    7400: 5F BB 74 90 26 89 1D 26 8C 4D 02 2E 8E 1E 0E 03  // _.t.&..&.M......
    7410: 57 BE 49 04 B9 1E 00 83 C7 04 FC 8A 04 26 88 05  // W.I..........&..
    7420: 46 47 E2 F7 5F A0 84 04 FE C0 26 88 45 22 A1 85  // FG.._.....&.E"..
    7430: 04 26 89 45 23 57 E8 D9 1B 5F 26 88 5D 25 26 88  // .&.E#W..._&.]%&.
    7440: 7D 26 8A 1E 49 04 E8 FC 05 74 05 80 FB 13 7F 1D  // }&..I....t......
    7450: 32 FF D1 E3 2E 8A 87 4C 90 32 E4 0A C0 74 01 40  // 2......L.2...t.@
    7460: 26 89 45 27 2E 8A 87 4D 90 26 88 45 29 A1 85 04  // &.E'...M.&.E)...
    7470: 8A 16 84 04 FE C2 F6 E2 B2 00 3D C8 00 7E 15 B2  // ..........=..~..
    7480: 01 3D 5E 01 7E 0E B2 02 3D 90 01 7E 07 B2 03 3D  // .=^.~...=..~...=
    7490: E0 01 7E 00 26 88 55 2A 8A 26 87 04 8A C4 24 01  // ..~.&.U*.&....$.
    74A0: C0 E0 04 80 E4 02 D0 E4 0A E0 80 F4 10 A0 89 04  // ................
    74B0: 24 0A 0A E0 E8 94 08 B2 C0 B0 30 EE 42 EC 24 08  // $.........0.B.$.
    74C0: C0 E0 02 0A C4 0C 01 26 88 45 2D B0 03 26 88 45  // .......&.E-..&.E
    74D0: 31 E8 77 08 1E 06 32 D2 C4 1E A8 04 8C C1 8C CE  // 1.w...2.........
    74E0: 3B CE 74 34 26 C5 77 04 8C D9 0B F1 74 03 80 CA  // ;.t4&.w.....t...
    74F0: 10 26 C5 77 0C 8C D9 0B F1 74 03 80 CA 08 26 C5  // .&.w.....t....&.
    7500: 77 08 8C D9 0B F1 74 03 80 CA 04 26 C5 77 10 8C  // w.....t....&.w..
    7510: D9 0B F1 74 03 80 CA 01 07 1F 26 88 55 32 B0 03  // ...t......&.U2..
    7520: BA C4 03 E8 E4 04 8A E0 C0 EC 02 8A D4 8A F2 D0  // ................
    7530: EE 81 E2 04 04 25 03 03 0B C2 26 89 45 2B 8B EC  // .....%....&.E+..
    7540: C6 46 1A 1B C3 0A C0 74 0F FE C8 74 36 FE C8 74  // .F.....t...t6..t
    7550: 56 8B EC C6 46 1A 00 C3 B8 20 00 F6 C1 01 74 03  // V...F.... ....t.
    7560: 83 C0 60 F6 C1 02 74 03 83 C0 3A F6 C1 04 74 03  // ..`...t...:...t.
    7570: 05 03 03 83 C0 3F C1 E8 06 8B EC 89 46 0E C6 46  // .....?......F..F
    7580: 1A 1C C3 8B FB 83 C7 20 F6 C1 01 74 03 E8 85 00  // ....... ...t....
    7590: F6 C1 02 74 03 E8 EF 00 F6 C1 04 74 03 E8 F8 01  // ...t.......t....
    75A0: 8B EC C6 46 1A 1C C3 F6 C1 01 74 06 E8 16 15 E8  // ...F......t.....
    75B0: 25 01 F6 C1 02 74 03 E8 85 01 F6 C1 04 74 03 E8  // %....t.......t..
    75C0: 12 02 EB DC 8A C4 EE 42 EC AA FE C4 4A E2 F5 C3  // .......B....J...
    75D0: E8 6B 04 BD C0 03 B9 15 00 32 E4 EC 87 EA 8A C4  // .k.......2......
    75E0: EE 42 EC AA FE C4 4A 87 EA E2 F0 EC 87 EA B0 20  // .B....J........ 
    75F0: EE C3 26 8A 05 88 04 47 46 E2 F7 C3 26 8A 25 EF  // ..&....GF...&.%.
    7600: 47 FE C0 E2 F7 C3 B2 C0 8A C4 EE 26 8A 05 47 FE  // G..........&..G.
    7610: C4 EE E2 F4 C3 9C FA 51 57 8B C7 2B C3 26 89 07  // .......QW..+.&..
    7620: 8B F7 E8 0A 04 EC 26 88 44 01 26 89 54 41 B2 CE  // ......&.D.&.TA..
    7630: EC 26 88 44 02 B2 CC EC 26 88 44 09 B2 CA EC 26  // .&.D....&.D....&
    7640: 88 44 04 B2 C4 EC 26 88 04 83 C7 05 B9 04 00 B4  // .D....&.........
    7650: 01 E8 70 FF 26 8A 04 EE 8B FE 83 C7 0A 26 8B 54  // ..p.&........&.T
    7660: 41 32 E4 B9 19 00 E8 5B FF 26 8A 44 01 EE E8 5F  // A2.....[.&.D..._
    7670: FF B2 CE 32 E4 B9 09 00 E8 49 FF 26 8A 44 02 EE  // ...2.....I.&.D..
    7680: 5F 59 83 C7 60 9D C3 9C FA 8B C7 2B C3 26 89 47  // _Y..`......+.&.G
    7690: 02 51 57 2E 8E 1E 0E 03 A0 10 04 24 30 AA BE 49  // .QW........$0..I
    76A0: 04 B9 1E 00 F3 A4 BE 84 04 B1 07 F3 A4 BE A8 04  // ................
    76B0: B1 04 F3 A4 BE 14 00 B1 04 F3 A4 BE 74 00 B1 04  // ............t...
    76C0: F3 A4 BE 7C 00 B1 04 F3 A4 BE 0C 01 B1 04 F3 A4  // ...|............
    76D0: 5F 59 83 C7 3A 9D C3 9C FA 26 8B 3F 03 FB 8B F7  // _Y..:....&.?....
    76E0: 51 8B FE 83 C7 05 BA C4 03 B8 00 01 EF B0 01 B9  // Q...............
    76F0: 04 00 E8 07 FF 47 B2 C2 26 8A 44 09 EE B2 C4 B8  // .....G..&.D.....
    7700: 00 03 EF 26 8A 04 EE 26 8B 54 41 B8 11 00 EF B1  // ...&...&.TA.....
    7710: 19 32 C0 E8 E6 FE 26 8A 44 01 EE 80 C2 06 26 8A  // .2....&.D.....&.
    7720: 44 04 EE EC B1 15 32 E4 E8 DB FE B0 20 EE B1 09  // D.....2..... ...
    7730: 32 C0 B2 CE E8 C5 FE 26 8A 44 02 EE 59 9D C3 9C  // 2......&.D..Y...
    7740: FA 26 8B 7F 02 03 FB 06 51 2E 8E 1E 0E 03 26 8A  // .&......Q.....&.
    7750: 05 80 26 10 04 CF 08 06 10 04 47 BE 49 04 B9 1E  // ..&.......G.I...
    7760: 00 E8 8E FE BE 84 04 B1 07 E8 86 FE BE A8 04 B1  // ................
    7770: 04 E8 7E FE BE 14 00 B1 04 E8 76 FE BE 74 00 B1  // ..~.......v..t..
    7780: 04 E8 6E FE BE 7C 00 B1 04 E8 66 FE BE 0C 01 B1  // ..n..|....f.....
    7790: 04 E8 5E FE 59 07 9D C3 9C FA 8B C7 2B C3 26 89  // ..^.Y.......+.&.
    77A0: 47 04 E8 A6 05 B2 C0 B0 34 EE 42 EC 26 88 05 BA  // G.......4.B.&...
    77B0: C8 03 EC 26 88 45 01 50 4A 4A EC 26 88 45 02 83  // ...&.E.PJJ.&.E..
    77C0: C7 03 B9 00 03 42 32 C0 EE 42 42 EC AA E2 FC 58  // .....B2..BB....X
    77D0: 4A EE 9D C3 9C FA 26 8B 77 04 03 F3 E8 6C 05 B2  // J.....&.w....l..
    77E0: C0 B0 34 EE 26 8A 04 EE BA C6 03 26 8A 44 02 EE  // ..4.&......&.D..
    77F0: 56 42 42 83 C6 03 32 C0 EE 42 B9 00 03 26 8A 04  // VBB...2..B...&..
    7800: EE 46 E2 F9 5E FE CA 26 8A 44 01 EE 9D C3 BA CC  // .F..^..&.D......
    7810: 03 EC 24 FE 0A C4 B2 C2 EE C3 E8 A8 12 B2 C0 86  // ..$.............
    7820: C4 EE EB 00 EB 00 86 C4 EE EB 00 EB 00 B0 20 EE  // .............. .
    7830: C3 50 8A E0 80 E4 80 80 26 87 04 7F 08 26 87 04  // .P......&....&..
    7840: 24 7F 8A E0 3C 07 7E 1E 26 F6 47 33 01 75 17 3C  // $...<.~.&.G3.u.<
    7850: 23 74 13 3C 32 74 0F 3C 33 74 0B B4 03 26 F6 47  // #t.<2t.<3t...&.G
    7860: 09 01 75 02 B4 07 88 26 49 04 BA B4 03 80 0E 87  // ..u....&I.......
    7870: 04 02 26 F6 47 09 01 74 07 B2 D4 80 26 87 04 FD  // ..&.G..t....&...
    7880: 89 16 63 04 C7 06 4E 04 00 00 C6 06 62 04 00 B9  // ..c...N.....b...
    7890: 08 00 BF 50 04 FC 06 1E 07 33 C0 F3 AB 07 26 8A  // ...P.....3....&.
    78A0: 07 32 E4 A3 4A 04 26 8A 47 01 A2 84 04 26 8A 47  // .2..J.&.G....&.G
    78B0: 02 A3 85 04 26 8B 47 03 A3 4C 04 26 8B 47 14 86  // ....&.G..L.&.G..
    78C0: C4 A3 60 04 58 C3 52 32 E4 33 D2 B0 0D CD 17 F6  // ..`.X.R2.3......
    78D0: C4 29 75 08 32 E4 33 D2 B0 0A CD 17 5A C3 06 1E  // .)u.2.3.....Z...
    78E0: 60 2E 8E 1E 0E 03 2E 83 0E 18 03 00 75 6E 80 3E  // `...........un.>
    78F0: 00 05 01 74 67 C6 06 00 05 01 8A 1E 62 04 32 FF  // ...tg.......b.2.
    7900: D1 E3 8B FB 8B 85 50 04 8A 3E 62 04 50 32 F6 8A  // ......P..>b.P2..
    7910: 0E 84 04 32 ED 41 51 8B 0E 4A 04 32 D2 E8 A6 FF  // ...2.AQ..J.2....
    7920: F6 C4 29 75 3D 51 52 89 95 50 04 B4 08 E8 B6 D4  // ..)u=QR..P......
    7930: 0A C0 75 02 B0 20 33 D2 32 E4 CD 17 F6 C4 29 75  // ..u.. 3.2.....)u
    7940: 1F 5A FE C2 59 E2 DE FE C6 59 E2 CA E8 77 FF 32  // .Z..Y....Y...w.2
    7950: C0 A2 00 05 58 89 85 50 04 E8 AF 03 61 1F 07 CF  // ....X..P....a...
    7960: 5A 59 59 B0 FF EB EA 52 2A F5 38 C6 7D 02 32 C0  // ZYY....R*.8.}.2.
    7970: 2E 8E 06 10 03 5A C3 A0 85 04 F6 E3 8A F7 8B D8  // .....Z..........
    7980: 8B CA BA C4 03 B8 02 0F EF B4 02 E8 6D 00 8B D1  // ............m...
    7990: 32 ED 8A E6 8A C6 F3 AA 03 FD 8A CA 4B 75 F7 32  // 2...........Ku.2
    79A0: E4 E8 57 00 C3 53 8A 1E 62 04 0B C0 75 04 0A DB  // ..W..S..b...u...
    79B0: 74 03 E8 35 03 5B 8B F8 2B D1 81 C2 01 01 8A C3  // t..5.[..+.......
    79C0: 32 E4 C3 8A C6 32 F6 2B EA 0A DB 74 2A 2A C3 F6  // 2....2.+...t**..
    79D0: 26 85 04 8B C8 52 B4 01 E8 20 00 B2 C4 B8 02 0F  // &....R... ......
    79E0: EF 5A 1E 06 1F 8B C1 8B CA F3 A4 03 F5 03 FD 48  // .Z.............H
    79F0: 75 F5 1F E8 81 FF C3 8A D8 EB F8 BA CE 03 B0 05  // u...............
    7A00: EE 42 EC 24 FC 0A C4 EE 4A C3 9C FA EE 42 EB 00  // .B.$....J....B..
    7A10: EC 4A 9D C3 1E 2E 8E 1E 0E 03 8B 16 63 04 80 C2  // .J..........c...
    7A20: 06 1F C3 1E 2E 8E 1E 0E 03 8B 16 63 04 1F C3 50  // ...........c...P
    7A30: BA CC 03 EC B2 D4 A8 01 75 02 B2 B4 58 C3 E8 EE  // ........u...X...
    7A40: FF 80 C2 06 C3 1E 2E 8E 1E 0E 03 80 3E 49 04 03  // ............>I..
    7A50: 74 13 80 3E 49 04 02 74 0C 80 3E 49 04 01 74 05  // t..>I..t..>I..t.
    7A60: 80 3E 49 04 00 1F C3 50 2E 8E 06 12 03 A0 10 04  // .>I....P........
    7A70: 24 30 3C 30 74 05 2E 8E 06 14 03 58 0B C0 74 03  // $0<0t......X..t.
    7A80: E8 E1 01 03 06 4E 04 81 C2 01 01 2B D1 32 ED 8B  // .....N.....+.2..
    7A90: 2E 4A 04 8B F8 8B F0 8B C5 F6 E3 D1 E0 D1 E5 0A  // .J..............
    7AA0: DB 75 02 8A DE 38 F3 7E 02 8A DE C3 FC 8A D8 8B  // .u...8.~........
    7AB0: C1 E8 B3 FF 03 F0 3A 16 4A 04 74 06 06 1F E8 1B  // ......:.J.t.....
    7AC0: 00 C3 06 1F E8 40 00 C3 FC 8A D8 8A C1 8A E6 E8  // .....@..........
    7AD0: 95 FF F7 DD 2B F0 06 1F E8 01 00 C3 53 8A CE 2A  // ....+.......S..*
    7AE0: CB 32 ED 32 F6 2B EA 2B EA E3 0E 8A E1 8B CA F3  // .2.2.+.+........
    7AF0: A5 03 F5 03 FD FE CC 75 F4 58 B0 20 8A CA F3 AB  // .......u.X. ....
    7B00: 03 FD FE CB 75 F6 C3 53 8A C6 2A C3 74 06 F6 E2  // ....u..S..*.t...
    7B10: 8B C8 F3 A5 58 8B C8 F6 E2 91 B0 20 F3 AB C3 8B  // ....X...... ....
    7B20: D8 E8 2E 00 2E 8E 1E 14 03 8A C3 22 DF D3 E3 A8  // ..........."....
    7B30: 80 74 03 30 1C C3 F6 D7 8A 34 22 F7 0A DE 88 1C  // .t.0.....4".....
    7B40: C3 8A FC E8 0C 00 2E 8E 1E 14 03 8A 04 D2 E8 22  // ..............."
    7B50: C7 C3 B0 28 F6 E2 F6 C2 01 74 03 05 D8 1F 8B F1  // ...(.....t......
    7B60: C1 EE 02 80 FF 05 7F 0C 03 F0 F6 D1 80 E1 03 D0  // ................
    7B70: E1 B7 03 C3 D1 EE 03 F0 F6 D1 80 E1 07 B7 01 C3  // ................
    7B80: FC 8A D8 2E 8E 06 14 03 8B C1 E8 86 00 75 02 8A  // .............u..
    7B90: DE 03 F0 E8 24 00 C3 FC 8A D8 2E 8E 06 14 03 8A  // ....$...........
    7BA0: C1 8A E6 E8 6D 00 75 02 8A DE F7 DD 81 C6 F0 00  // ....m.u.........
    7BB0: 81 C7 F0 00 2B F0 E8 01 00 C3 8A CE 2A CB E3 2C  // ....+.......*..,
    7BC0: 51 8A CA 56 57 D1 E9 F3 A5 13 C9 F3 A4 8A CA 2B  // Q..VW..........+
    7BD0: F1 2B F9 81 C6 00 20 81 C7 00 20 D1 E9 F3 A5 13  // .+.... ... .....
    7BE0: C9 F3 A4 5F 5E 03 F5 03 FD 59 E2 D4 8A C7 8A E7  // ..._^....Y......
    7BF0: 8A CA 57 D1 E9 F3 AB 13 C9 F3 AA 8A CA 2B F9 81  // ..W..........+..
    7C00: C7 00 20 D1 E9 F3 AB 13 C9 F3 AA 5F 03 FD FE CB  // .. ........_....
    7C10: 75 DE C3 E8 B0 00 81 C2 01 01 2B D1 38 F3 76 02  // u.........+.8.v.
    7C20: 32 DB 51 B1 02 D2 E6 D2 E3 59 32 ED BD 50 00 80  // 2.Q......Y2..P..
    7C30: 3E 49 04 06 74 04 D0 E2 D1 E0 06 1F 8B F8 8B F0  // >I..t...........
    7C40: B0 50 F6 E3 0A DB C3 52 53 8A DF 32 FF D1 E3 8B  // .P.....RS..2....
    7C50: 87 50 04 E8 0E 00 50 D1 EB A1 4C 04 F7 E3 5B 03  // .P....P...L...[.
    7C60: C3 5B 5A C3 52 8B D0 A0 4A 04 F6 E4 32 F6 03 C2  // .[Z.R...J...2...
    7C70: D1 E0 5A C3 8B E8 83 E5 0F 2E 8A A6 24 7C 8B E8  // ..Z.........$|..
    7C80: C1 ED 04 83 E5 0F 2E 8A 86 24 7C C3 00 03 0C 0F  // .........$|.....
    7C90: 30 33 3C 3F C0 C3 CC CF F0 F3 FC FF 26 8B 04 86  // 03<?........&...
    7CA0: E0 BA 00 80 F6 C4 C0 74 02 0A D6 D0 EE C1 E0 02  // .......t........
    7CB0: 75 F2 88 56 00 45 C3 8B 16 63 04 8A C5 86 E0 EF  // u..V.E...c......
    7CC0: 8A E1 FE C0 EF C3 52 8B D0 8A C4 F6 26 4A 04 C1  // ......R.....&J..
    7CD0: E0 02 32 F6 03 C2 5A C3 53 8A DF 32 FF D1 E3 8B  // ..2...Z.S..2....
    7CE0: 87 50 04 D1 EB E8 02 00 5B C3 52 8B D0 32 F6 52  // .P......[.R..2.R
    7CF0: 8A C4 F6 26 85 04 F7 26 4A 04 5A 03 C2 0A DB 74  // ...&...&J.Z....t
    7D00: 08 03 06 4C 04 FE CB 75 F8 5A C3 52 8B D0 A0 4A  // ...L...u.Z.R...J
    7D10: 04 F6 E4 32 F6 03 C2 D1 E0 03 06 4E 04 D1 F8 8B  // ...2.......N....
    7D20: C8 B4 0E E8 91 FF 5A C3 8B C2 F7 26 4A 04 8B F9  // ......Z....&J...
    7D30: C1 EF 03 03 F8 0A FF 74 0A 8A C7 32 E4 F7 26 4C  // .......t...2..&L
    7D40: 04 03 F8 80 E1 07 B4 80 D2 EC C3 E8 F0 FC EC C3  // ................
    7D50: E8 F8 FF B2 C0 B0 20 EE C3 E8 EF FF B2 C0 32 C0  // ...... .......2.
    7D60: EE C3 C4 3E A8 04 26 C4 7D 04 8C C5 0B EF C3 53  // ...>..&.}......S
    7D70: B0 0E E8 95 FC 8A E0 B0 0F E8 8E FC 8B D8 B8 0E  // ................
    7D80: AA EF B8 0F 55 EF B0 0E E8 7F FC 3C AA 74 0D B0  // ....U......<.t..
    7D90: 0F E8 76 FC 3C 55 74 04 32 C0 5B C3 B0 0E 8A E7  // ..v.<Ut.2.[.....
    7DA0: EF FE C0 8A E3 EF B0 01 0A C0 5B C3 8A EE 8A 36  // ..........[....6
    7DB0: 85 04 06 1F 0A DB 74 25 8A C5 2A C3 F6 E6 8B C8  // ......t%..*.....
    7DC0: 52 32 F6 C1 E2 02 8B C2 D1 E2 2B D5 51 8B C8 F3  // R2........+.Q...
    7DD0: A5 2B FA 2B F2 59 E2 F4 5A E8 05 00 C3 8A DD EB  // .+.+.Y..Z.......
    7DE0: F8 8A C6 F6 E3 8B C8 8A C7 8A E0 32 F6 C1 E2 02  // ...........2....
    7DF0: 8B DA D1 E2 8B F1 2B D5 8B CB F3 AB 2B FA 4E 75  // ......+.....+.Nu
    7E00: F7 C3 2E 8E 1E 0E 03 89 0E 60 04 8A C5 24 60 A8  // .........`...$`.
    7E10: 20 74 06 B9 00 1E E9 94 00 F6 06 87 04 01 0F 85  //  t..............
    7E20: 8B 00 80 3E 49 04 07 74 06 E8 19 FC 74 01 C3 F6  // ...>I..t....t...
    7E30: 06 87 04 08 74 03 CD 42 C3 8A 36 85 04 8A D6 FE  // ....t..B..6.....
    7E40: CA 38 CD 7E 1F 0A C9 74 64 8A E9 8A CE FE C9 EB  // .8.~...td.......
    7E50: 5C 38 D1 74 58 8A CE 80 FD 03 7C 04 8A E9 D0 ED  // \8.tX.....|.....
    7E60: FE C9 EB 49 80 F9 03 7E 44 8A E1 2A E5 0A E4 75  // ...I...~D..*...u
    7E70: 0A 38 CA 74 38 FE CA 38 CA 74 32 8A C5 0A C1 38  // .8.t8..8.t2....8
    7E80: F0 7E 0A 80 FC 02 7E 12 80 FD 02 7F C8 80 FC 03  // .~....~.........
    7E90: 7D BF 8A D6 FE CA 38 D1 74 13 8A CE FE C9 FE C9  // }.....8.t.......
    7EA0: 8A E9 2A EC 80 FE 08 7F 04 FE C1 FE C5 B4 0A E8  // ..*.............
    7EB0: 05 FE C3 2E 8E 1E 0E 03 A2 62 04 32 E4 8B F0 F7  // .........b.2....
    7EC0: 26 4C 04 A3 4E 04 8B C8 E8 7A FB 74 07 80 3E 49  // &L..N....z.t..>I
    7ED0: 04 07 77 02 D1 F9 B4 0C E8 DC FD D1 E6 8B 84 50  // ..w............P
    7EE0: 04 E8 27 FE C3 2E 8E 1E 0E 03 8A 26 49 04 E8 74  // ..'........&I..t
    7EF0: 9C 74 07 C7 06 50 04 00 00 C3 E8 48 FB 74 0B 80  // .t...P.....H.t..
    7F00: FC 07 74 06 77 08 E8 77 FC C3 E8 9F FB C3 80 FC  // ..t.w..w........
    7F10: 13 7C 03 74 1F C3 E8 4E FA 8A D8 8B C1 E8 85 FA  // .|.t...N........
    7F20: 8B 2E 4A 04 52 F6 26 85 04 F7 E5 8B F7 03 F0 5A  // ..J.R.&........Z
    7F30: E8 90 FA C3 E8 30 FA 8A D8 8B C1 E8 67 FA C1 E7  // .....0......g...
    7F40: 03 52 8B 2E 4A 04 C1 E5 03 F7 26 85 04 F7 E5 8B  // .R..J.....&.....
    7F50: F7 03 F0 5A E8 55 FE C3 2E 8E 1E 0E 03 8A 26 49  // ...Z.U........&I
    7F60: 04 E8 E1 FA 74 0C 80 FC 07 74 07 77 40 80 FC 03  // ....t....t.w@...
    7F70: 7F 04 E8 53 FB C3 E8 1E FC C3 E8 EA F9 8A D8 8A  // ...S............
    7F80: C1 8A E6 FE C4 E8 1D FA 2B 3E 4A 04 C1 E7 03 52  // ........+>J....R
    7F90: F7 26 85 04 F7 26 4A 04 C1 E0 03 8B F7 2B F0 5A  // .&...&J......+.Z
    7FA0: 8B 2E 4A 04 C1 E5 03 F7 DD E8 00 FE C3 80 FC 13  // ..J.............
    7FB0: 7C 03 74 C6 C3 E8 AF F9 8A D8 8A C1 8A E6 FE C4  // |.t.............
    7FC0: E8 E2 F9 52 8B 2E 4A 04 F7 26 85 04 F7 E5 2B FD  // ...R..J..&....+.
    7FD0: 8B F7 2B F0 5A F7 DD E8 E9 F9 C3 2E 8E 1E 0E 03  // ..+.Z...........
    7FE0: 2E 8E 06 14 03 E8 5D FA 74 11 80 3E 49 04 07 7C  // ......].t..>I..|
    7FF0: 18 2E 8E 06 12 03 74 03 E9 B1 00 E8 49 FC 8B D8  // ......t.....I...
    8000: 26 8B 07 8B EC 89 46 1A C3 A1 50 04 E8 B7 FC 8B  // &.....F...P.....
    8010: F0 BB 08 00 2B E3 8B EC 80 3E 49 04 06 75 1F B9  // ....+....>I..u..
    8020: 04 00 26 8A 04 88 46 00 45 26 8A 84 00 20 88 46  // ..&...F.E&... .F
    8030: 00 45 83 C6 50 E2 EB B8 00 02 B2 80 EB 17 D1 E6  // .E..P...........
    8040: B9 04 00 E8 56 FC 81 C6 00 20 E8 4F FC 81 EE B0  // ....V.... .O....
    8050: 1F E2 F0 EB E2 2B EB C4 3E 0C 01 32 F6 80 FB 0E  // .....+..>..2....
    8060: 75 09 26 83 7D FE 10 75 02 B6 80 16 1F 8B F5 8B  // u.&.}..u........
    8070: CB F6 C6 80 74 01 47 56 57 F3 A6 5F 5E 74 23 FE  // ....t.GVW.._^t#.
    8080: C0 03 FB F6 C6 80 74 01 47 FE CA 75 E2 FE CC 74  // ......t.G..u...t
    8090: 0F 2E 8E 1E 0E 03 C4 3E 7C 00 B0 80 B2 80 EB CB  // .......>|.......
    80A0: 32 C0 8B E5 03 E3 8B EC 89 46 1A C3 80 3E 49 04  // 2........F...>I.
    80B0: 13 7C 05 75 02 EB 5A C3 2E 8E 06 10 03 E8 18 FC  // .|.u..Z.........
    80C0: 8B F0 8B 1E 85 04 2B E3 8B EC B8 05 08 B9 05 00  // ......+.........
    80D0: BA CE 03 80 3E 49 04 0F 72 1A F6 06 87 04 60 75  // ....>I..r.....`u
    80E0: 13 B4 0A F7 C6 01 00 75 02 B4 05 B0 07 EF B8 05  // .......u........
    80F0: 18 B9 05 01 EF 51 8B CB 26 8A 04 F6 D0 88 46 00  // .....Q..&.....F.
    8100: 45 03 36 4A 04 E2 F1 58 EF B8 00 01 32 D2 E9 44  // E.6J...X....2..D
    8110: FF 2E 8E 06 10 03 A1 50 04 8B D0 32 F6 52 8A C4  // .......P...2.R..
    8120: 32 E4 F7 26 4A 04 F7 26 85 04 5A 03 C2 8B F0 8B  // 2..&J..&..Z.....
    8130: 1E 85 04 2B E3 8B EC 53 8B 3E 4A 04 4F C1 E7 03  // ...+...S.>J.O...
    8140: C1 E6 03 B9 08 00 32 E4 26 8A 04 D0 E4 0A C0 74  // ......2.&......t
    8150: 03 80 CC 01 46 E2 F1 88 66 00 45 03 F7 4B 75 E3  // ....F...f.E..Ku.
    8160: 5B B8 00 01 32 D2 E9 EC FE 33 ED EB 03 BD 01 00  // [...2....3......
    8170: 2E 8E 1E 0E 03 2E 8E 06 14 03 8A 26 49 04 E8 C4  // ...........&I...
    8180: F8 74 0F 2E 8E 06 12 03 80 FC 07 74 05 7C 3D E9  // .t.........t.|=.
    8190: 0B 02 8A E3 8B F0 8A DF 32 FF D1 E3 8B 87 50 04  // ........2.....P.
    81A0: 8B D0 A0 4A 04 F6 E4 32 F6 03 C2 8B F8 D1 E7 0A  // ...J...2........
    81B0: DB 74 0B D0 EB A1 4C 04 03 F8 FE CB 75 FA 8B C6  // .t....L.....u...
    81C0: 0B ED 75 03 F3 AB C3 AA 47 E2 FC C3 50 2E 8E 06  // ..u.....G...P...
    81D0: 14 03 A1 50 04 E8 EE FA 8B F8 A0 50 04 8A 26 4A  // ...P.......P..&J
    81E0: 04 8B E8 58 A8 80 74 08 24 7F C5 36 7C 00 EB 04  // ...X..t.$..6|...
    81F0: C5 36 0C 01 8A FC 32 E4 C1 E0 03 03 F0 80 FF 06  // .6....2.........
    8200: 74 69 D1 E7 8A F3 B0 55 80 E3 03 F6 E3 8A D8 8A  // ti.....U........
    8210: F8 8B C5 50 B2 04 F6 C6 80 75 27 AC E8 55 FA 23  // ...P.....u'..U.#
    8220: C3 AB AC E8 4E FA 23 C3 26 89 85 FE 1F 83 C7 4E  // ....N.#.&......N
    8230: FE CA 75 E7 83 EE 08 81 EF 3E 01 58 E8 72 00 E2  // ..u......>.X.r..
    8240: D2 C3 AC E8 2E FA 23 C3 26 31 05 AC E8 25 FA 23  // ......#.&1...%.#
    8250: C3 26 31 85 00 20 83 C7 50 FE CA 75 E5 83 EE 08  // .&1.. ..P..u....
    8260: 81 EF 3E 01 58 E8 49 00 E2 A9 C3 8B C5 50 B2 04  // ..>.X.I......P..
    8270: F6 C3 80 74 1F AC 26 30 05 AC 26 30 85 00 20 83  // ...t..&0..&0.. .
    8280: C7 50 FE CA 7F EF 83 EE 08 81 EF 3F 01 58 E8 20  // .P.........?.X. 
    8290: 00 E2 DA C3 AC AA AC 26 88 85 FF 1F 83 C7 4F FE  // .......&......O.
    82A0: CA 7F F1 83 EE 08 81 EF 3F 01 58 E8 03 00 E2 BD  // ........?.X.....
    82B0: C3 FE C0 38 E0 72 06 32 C0 81 C7 F0 00 C3 8A 16  // ...8.r.2........
    82C0: 85 04 F6 E2 8B F0 32 F6 8B EA 66 0F B6 06 51 04  // ......2...f...Q.
    82D0: F6 E2 66 0F B7 16 4A 04 83 FA 64 75 03 BA 68 00  // ..f...J...du..h.
    82E0: 83 FA 5A 75 03 BA 60 00 81 FA AF 00 75 03 BA B0  // ..Zu..`.....u...
    82F0: 00 52 F7 E2 66 0F B7 F8 66 0F B6 06 50 04 66 03  // .R..f...f...P.f.
    8300: F8 66 C1 CF 10 03 FA 66 C1 C7 03 81 CF 00 FF 66  // .f.....f.......f
    8310: C1 C7 10 5A 8A E2 4A C1 E2 03 A0 50 04 50 C5 06  // ...Z..J....P.P..
    8320: 0C 01 03 F0 2E 8E 06 10 03 58 57 51 50 9C FC 8B  // .........XWQP...
    8330: CD E8 3B 00 B5 08 AC 8A E0 8A C7 D0 E4 73 02 8A  // ..;..........s..
    8340: C3 26 88 05 66 47 FE CD 75 EF 66 03 FA E2 E2 9D  // .&..fG..u.f.....
    8350: 58 59 5F 83 C7 08 FE C0 38 E0 72 0E 51 32 C0 8B  // XY_.....8.r.Q2..
    8360: CD 49 03 FA 83 C7 08 E2 F9 59 2B F5 E2 BC C3 06  // .I.......Y+.....
    8370: 52 33 C0 8E C0 66 C1 C7 10 8B C7 66 C1 C7 10 E8  // R3...f.....f....
    8380: E3 97 74 16 38 E0 74 12 0F B6 D0 E8 91 C9 8A E0  // ..t.8.t.........
    8390: 66 C1 C7 10 8B F8 66 C1 C7 10 5A 07 C3 80 FC 13  // f.....f...Z.....
    83A0: 7C 0B 0F 84 18 FF 80 FC 62 0F 84 11 FF E8 01 00  // |.......b.......
    83B0: C3 80 FC 11 75 06 80 E3 80 80 CB 0F 50 53 8A DF  // ....u.......PS..
    83C0: 32 FF D1 E3 8B 97 50 04 5B 2E 8E 06 10 03 E8 07  // 2.....P.[.......
    83D0: F9 8B F8 8B 2E 85 04 58 32 F6 52 8B 36 4A 04 56  // .......X2.R.6J.V
    83E0: 8A 26 85 04 C5 36 0C 01 80 FC 0E 75 09 83 7C FE  // .&...6.....u..|.
    83F0: 10 75 03 B4 10 46 F6 E4 03 F0 B6 03 F6 C3 80 75  // .u...F.........u
    8400: 6D B2 C4 B8 02 0F EF 5A 58 50 52 4A 8A E0 57 51  // m......ZXPRJ..WQ
    8410: 51 57 8B CD 32 C0 AA 03 FA E2 FB 5F 47 FE C4 38  // QW..2......_G..8
    8420: D4 76 0A 32 E4 8B CD 49 03 FA 47 E2 FB 59 E2 E0  // .v.2...I..G..Y..
    8430: 59 5F BA C4 03 B0 02 8A E3 EF 5B 4B 5A 51 57 8B  // Y_........[KZQW.
    8440: CD AC 26 8A 25 AA 03 FB E2 F7 5F 47 2B F5 42 3B  // ..&.%....._G+.B;
    8450: D3 76 0A 33 D2 8B CD 49 03 FB 47 E2 FB 59 E2 DD  // .v.3...I..G..Y..
    8460: BA CE 03 B8 03 00 EF B2 C4 B8 02 0F EF C3 B2 CE  // ................
    8470: B8 03 18 EF EB BC 2E 8E 1E 0E 03 80 3E 63 04 B4  // ............>c..
    8480: 74 0B BA CC 03 EC A8 01 75 04 CD 42 C3 C3 E8 D1  // t.......u..B....
    8490: F8 0A FF 75 1C 8A E3 80 E4 1F 80 26 66 04 E0 08  // ...u.......&f...
    84A0: 26 66 04 E8 2D 00 8A 1E 66 04 80 E3 20 B1 05 D2  // &f..-...f... ...
    84B0: EB E8 91 F5 74 19 A0 66 04 24 DF 80 E3 01 74 02  // ....t..f.$....t.
    84C0: 0C 20 A2 66 04 24 10 0C 02 0A D8 E8 53 00 C3 E8  // . .f.$......S...
    84D0: 7E F8 C3 53 50 80 E3 0F 8A FB D0 E3 81 E3 10 07  // ~..SP...........
    84E0: 0A DF E8 60 F5 74 0E B4 00 8A C3 E8 2C F3 0B ED  // ...`.t......,...
    84F0: 74 03 26 88 1D 8A C3 E8 0B 00 0B ED 74 04 26 88  // t.&.........t.&.
    8500: 5D 10 58 5B C3 8A E0 1E 2E 8E 1E 0E 03 80 3E 49  // ].X[..........>I
    8510: 04 33 1F 7F 08 8A C4 B4 11 E8 FE F2 C3 E8 30 F8  // .3............0.
    8520: C3 9C FA E8 9F 05 B2 C0 B9 03 00 B4 01 8A C4 EE  // ................
    8530: 8A C3 EE 0B ED 74 04 47 26 88 1D FE C4 80 C3 02  // .....t.G&.......
    8540: E2 EB B0 20 EE 9D C3 2E 8E 1E 0E 03 8A 26 49 04  // ... .........&I.
    8550: E8 F2 F4 74 0A 80 FC 07 77 06 74 03 E8 C0 F5 C3  // ...t....w.t.....
    8560: 80 FC 13 7C 03 74 4C C3 8A D8 E8 BB F7 BA CE 03  // ...|.tL.........
    8570: B0 08 EF 2E 8E 1E 10 03 F6 C3 80 75 1C B2 C4 B8  // ...........u....
    8580: 02 FF EF 8A 25 C6 05 00 8A E3 EF 8A 25 B4 FF 88  // ....%.......%...
    8590: 25 EF B2 CE B8 08 FF EF C3 B8 03 18 EF B2 C4 B0  // %...............
    85A0: 02 8A E3 EF 8A 25 B4 FF 88 25 EF B2 CE B8 03 00  // .....%...%......
    85B0: EF EB E1 50 2E 8E 06 10 03 A1 4A 04 C1 E0 03 F7  // ...P......J.....
    85C0: E2 03 C1 8B F8 58 26 88 05 C3 2E 8E 1E 0E 03 8A  // .....X&.........
    85D0: 26 49 04 E8 6F F4 74 0F 80 FC 07 77 0B 74 08 E8  // &I..o.t....w.t..
    85E0: 5F F5 8B EC 89 46 1A C3 80 FC 13 7C 03 74 29 C3  // _....F.....|.t).
    85F0: E8 35 F7 8A CC 2E 8E 1E 10 03 BA CE 03 32 FF B8  // .5...........2..
    8600: 04 03 EF D0 E7 8A 1D 22 D9 74 03 80 CF 01 FE CC  // .......".t......
    8610: 7D F0 8B EC 88 7E 1A C3 A1 4A 04 C1 E0 03 F7 E2  // }....~...J......
    8620: 03 C1 8B F8 2E 8E 1E 10 03 8A 05 8B EC 88 46 1A  // ..............F.
    8630: C3 2E 8E 1E 0E 03 8A 3E 62 04 8A CF D0 E1 32 ED  // .......>b.....2.
    8640: BE 50 04 03 F1 8B 14 8A 0E 49 04 3C 0D 76 4A 2E  // .P.......I.<.vJ.
    8650: 8E 06 14 03 E8 EE F3 75 33 8A 1E 4A 04 8A F8 8A  // .......u3..J....
    8660: C6 F6 E3 8A CA 03 C8 D1 E1 03 0E 4E 04 8B F9 8A  // ...........N....
    8670: C7 AA D1 E9 41 FE C2 38 DA 73 59 89 14 8B 16 63  // ....A..8.sY....c
    8680: 04 B0 0E 8A E5 EF 8A E1 FE C0 EF C3 2E 8E 06 12  // ................
    8690: 03 80 F9 07 74 C3 E9 83 00 75 04 32 D2 EB 0F 3C  // ....t....u.2...<
    86A0: 0A 75 1D 3A 36 84 04 75 03 E9 93 00 FE C6 89 14  // .u.:6..u........
    86B0: E8 92 F3 75 05 80 F9 07 7F 05 8B C2 E8 4C F6 C3  // ...u.........L..
    86C0: 3C 07 75 04 E8 F1 7E C3 3C 08 75 83 0A D2 74 DE  // <.u...~.<.u...t.
    86D0: FE CA EB DA 32 FF 32 D2 2B CB 3A 36 84 04 74 06  // ....2.2.+.:6..t.
    86E0: FE C6 03 CB EB 95 89 14 8B 16 63 04 B0 0E 8A E5  // ..........c.....
    86F0: EF 8A E1 FE C0 EF 2B FB 2B FB 26 8A 65 02 50 8B  // ......+.+.&.e.P.
    8700: 3E 4E 04 8B F3 D1 E6 03 F7 A0 84 04 F6 E3 8B C8  // >N..............
    8710: 06 1F F3 A5 8B CB 58 B0 20 F3 AB C3 B9 01 00 B4  // ......X. .......
    8720: 0A E8 C2 C6 FE C2 3A 16 4A 04 74 03 89 14 C3 32  // ......:.J.t....2
    8730: FF 32 D2 89 14 3A 36 84 04 74 2E FE C6 EB ED 89  // .2...:6..t......
    8740: 14 2E 8E 06 14 03 E8 FC F2 74 0E 2E 8E 06 12 03  // .........t......
    8750: 80 F9 07 74 04 32 FF EB 10 8B C2 E8 AD F5 8B F9  // ...t.2..........
    8760: D1 E7 4F 8B 1E 4A 04 EB 91 33 C9 8A 36 84 04 8A  // ..O..J...3..6...
    8770: 16 4A 04 FE CA B0 01 E9 70 F7 2E 8E 1E 0E 03 F6  // .J......p.......
    8780: 06 87 04 08 74 03 CD 42 C3 E8 76 F6 8B EC C6 46  // ....t..B..v....F
    8790: 1B 00 C3 2E 8E 1E 0E 03 8A DF 32 FF D1 E3 89 97  // ..........2.....
    87A0: 50 04 D0 EB 38 1E 62 04 75 05 8B C2 E8 5C F5 C3  // P...8.b.u....\..
    87B0: 2E 8E 1E 0E 03 8A DF 32 FF D1 E3 8B 97 50 04 8B  // .......2.....P..
    87C0: 0E 60 04 8B EC 89 4E 16 89 56 12 C3 2E 8E 1E 0E  // .`....N..V......
    87D0: 03 A0 87 04 24 80 0A 06 49 04 8A 26 4A 04 F6 06  // ....$...I..&J...
    87E0: 87 04 08 75 2D E8 5D F2 74 07 80 3E 49 04 07 7F  // ...u-.].t..>I...
    87F0: 21 51 8A CC 8A 2E 84 04 BE BD 87 81 FE C6 87 74  // !Q.............t
    8800: 10 2E 3B 0C 74 05 83 C6 03 EB F0 24 80 2E 0A 44  // ..;.t......$...D
    8810: 02 59 8A 3E 62 04 8B EC 89 46 1A 89 5E 0E 89 4E  // .Y.>b....F..^..N
    8820: 16 89 56 12 C3 84 18 23 84 2B 33 84 2A 32 2E 8E  // ..V....#.+3.*2..
    8830: 1E 0E 03 3C 04 7F 1B 50 52 BA CC 03 EC A8 01 5A  // ...<...PR......Z
    8840: 58 74 08 80 3E 63 04 D4 74 08 C3 80 3E 63 04 B4  // Xt..>c..t...>c..
    8850: 75 F8 3C 1C 73 F4 32 E4 8B E8 D1 E5 2E FF A6 F9  // u.<.s.2.........
    8860: 87 31 88 51 88 63 88 98 88 E2 87 E2 87 E2 87 BD  // .1.Q.c..........
    8870: 88 D5 88 D9 88 E2 87 E2 87 E2 87 E2 87 E2 87 E2  // ................
    8880: 87 07 89 E2 87 0B 89 26 89 E2 87 65 89 E2 87 73  // .......&...e...s
    8890: 89 8E 89 95 89 A1 89 C5 89 80 3E 49 04 13 74 15  // ..........>I..t.
    88A0: E8 BF F4 8B C3 86 E0 E8 70 EF 0B ED 74 07 8A C7  // ........p...t...
    88B0: 32 FF 26 88 01 E8 93 F4 C3 E8 A6 F4 8A C7 E8 44  // 2.&............D
    88C0: FC 0B ED 74 F0 26 88 7D 11 EB EA 80 3E 49 04 13  // ...t.&.}....>I..
    88D0: 74 E3 06 E8 8C F4 1F 0B ED 74 07 8B F2 B9 11 00  // t........t......
    88E0: F3 A4 8B F2 E8 DE 01 32 E4 B9 10 00 B2 C0 9C FA  // .......2........
    88F0: 8A C4 EE AC EE 9D FE C4 E2 F4 AC E8 07 FC EB B5  // ................
    8900: 80 FB 01 77 B0 E8 43 F4 B2 C0 B0 30 E8 FB F0 24  // ...w..C....0...$
    8910: F7 80 26 65 04 DF 80 FB 00 74 07 0C 08 80 0E 65  // ..&e.....t.....e
    8920: 04 20 EE EB 90 E8 9D 01 8A C3 B2 C0 E8 DB F0 8B  // . ..............
    8930: C8 EE B0 20 EE 8B EC 88 4E 0F E9 78 FF B3 11 EB  // ... ....N..x....
    8940: E4 8B FA E8 05 F4 B9 10 00 32 E4 B2 C0 8A C4 9C  // .........2......
    8950: FA EE 42 EC 26 88 05 FE C4 4A EE 9D 47 E2 EE 9C  // ..B.&....J..G...
    8960: FA B0 11 EE 42 EC 9D 26 88 05 E8 E3 F3 EB 5A E8  // ....B..&......Z.
    8970: CE 00 C3 8B FA 51 8B C3 26 8A 35 26 8A 6D 01 26  // .....Q..&.5&.m.&
    8980: 8A 4D 02 E8 CA 00 83 C7 03 43 59 E2 E8 C3 0A DB  // .M.......CY.....
    8990: 75 1A E8 B6 F3 B2 C0 B0 30 E8 6E F0 24 7F F6 C7  // u.......0.n.$...
    89A0: 01 74 02 0C 80 B4 30 E8 70 EE EB 1D FE CB 75 1C  // .t....0.p.....u.
    89B0: E8 98 F3 B2 C0 B0 30 E8 50 F0 EE A8 80 75 03 C0  // ......0.P....u..
    89C0: E7 02 B4 34 8A C7 E8 51 EE E8 7F F3 C3 8A C3 E8  // ...4...Q........
    89D0: D1 00 8B EC 89 4E 16 88 76 13 C3 8B FA 51 8B C3  // .....N..v....Q..
    89E0: E8 C3 00 26 88 35 26 88 6D 01 26 88 4D 02 83 C7  // ...&.5&.m.&.M...
    89F0: 03 43 59 E2 E8 C3 BA C6 03 8A C3 EE C3 BA C6 03  // .CY.............
    8A00: EC 32 E4 8B EC 89 46 0E C3 E8 3F F3 B2 C0 B0 34  // .2....F...?....4
    8A10: E8 F7 EF 8A F8 EE B0 30 E8 EF EF B3 01 A8 80 75  // .......0.......u
    8A20: 05 B3 00 C0 EF 02 8B EC 89 5E 0E EB 9C 51 8B C3  // .........^...Q..
    8A30: E8 73 00 E8 2A 00 8A C3 E8 52 00 43 59 E2 EE C3  // .s..*....R.CY...
    8A40: F6 06 89 04 02 74 03 E8 16 00 8A C3 E8 39 00 C3  // .....t.......9..
    8A50: F6 06 89 04 02 74 03 E8 06 00 8A C3 E8 2E 00 C3  // .....t..........
    8A60: 50 B0 1E F6 E6 50 B0 3B F6 E5 50 B0 0B F6 E1 59  // P....P.;..P....Y
    8A70: 03 C1 59 03 C1 B1 64 F6 F1 80 FC 32 7C 02 FE C0  // ..Y...d....2|...
    8A80: 8A F0 8A E8 8A C8 58 C3 52 E8 39 00 5A 53 8B DA  // ......X.R.9.ZS..
    8A90: BA C8 03 9C FA EE 42 8A C7 EE 8A C5 EE 8A C1 EE  // ......B.........
    8AA0: 9D 5B C3 E8 1F 00 53 9C FA BA C7 03 EE 42 42 EC  // .[....S......BB.
    8AB0: 8A F8 EB 00 EB 00 EC 8A E8 EB 00 EB 00 EC 8A C8  // ................
    8AC0: 8A F7 9D 5B C3 50 51 E8 81 F2 B9 FF 7F EC A8 08  // ...[.PQ.........
    8AD0: 75 02 E2 F9 59 58 C3 2E 8E 1E 0E 03 8B F8 24 0F  // u...YX........$.
    8AE0: 81 E7 F0 00 C1 EF 03 83 FF 06 7F 18 2E FF A5 89  // ................
    8AF0: 8A 91 8A A6 8A 44 8B A0 8B 3C 03 74 08 3C 04 7F  // .....D...<.t.<..
    8B00: 03 E8 CF 01 C3 BA C4 03 B0 03 8A E3 EF C3 3C 04  // ..............<.
    8B10: 77 F2 50 53 50 52 8B 16 63 04 B0 07 E8 EB EE 8A  // w.PSPR..c.......
    8B20: E0 D0 EC 80 E4 01 A8 40 74 03 80 CC 02 B0 12 E8  // .......@t.......
    8B30: D8 EE 40 A3 85 04 B0 09 E8 CF EE A8 80 74 04 D1  // ..@..........t..
    8B40: 2E 85 04 A1 85 04 8B D0 3D F4 01 73 1B BA E0 01  // ........=..s....
    8B50: 3D C2 01 73 13 BA 90 01 3D 7C 01 73 0B BA 5E 01  // =..s....=|.s..^.
    8B60: 3D 4A 01 73 03 BA C8 00 89 16 85 04 5A 58 C6 06  // =J.s........ZX..
    8B70: 84 04 FF E8 5D 01 5B 58 8A DF 32 FF 0A C0 74 0E  // ....].[X..2...t.
    8B80: B3 0E 3C 01 74 08 B3 08 3C 02 74 02 B3 10 8A CB  // ..<.t...<.t.....
    8B90: 8A E9 81 E9 01 02 80 F9 08 7E 04 81 E9 01 01 87  // .........~......
    8BA0: 1E 85 04 53 E8 5B F2 5B E8 85 02 C3 0A C0 74 11  // ...S.[.[......t.
    8BB0: FE C8 74 1A FE C8 74 38 FE C8 74 3C FE C8 74 40  // ..t...t8..t<..t@
    8BC0: C3 89 2E 7C 00 8C 06 7E 00 C3 8C C8 8E C0 FE CA  // ...|...~........
    8BD0: 0A DB 74 07 32 FF 2E 8A 97 84 8B 89 0E 85 04 88  // ..t.2...........
    8BE0: 16 84 04 89 2E 0C 01 8C 06 0E 01 C3 00 0D 18 2A  // ...............*
    8BF0: E8 09 03 B9 0E 00 EB D6 BD 94 5A B9 08 00 EB CA  // ..........Z.....
    8C00: BD A7 62 B9 10 00 EB C2 0A C0 75 BD 8B 0E 85 04  // ..b.......u.....
    8C10: 8A 16 84 04 80 FF 07 77 35 80 FF 01 77 10 0A FF  // .......w5...w...
    8C20: 75 06 C4 2E 7C 00 EB 26 C4 2E 0C 01 EB 20 80 FF  // u...|..&..... ..
    8C30: 02 75 0B 8C CD 8E C5 2E 8B 2E 86 73 EB 10 0E 07  // .u.........s....
    8C40: 8A DF 32 FF 80 EB 02 D1 E3 2E 8B AF F7 8B 8B C5  // ..2.............
    8C50: 8B EC 89 4E 16 89 56 12 89 46 0A 8C 46 1E C3 A7  // ...N..V..F..F...
    8C60: 62 94 5A 94 5E 94 62 A7 62 A7 72 53 06 8A 26 49  // b.Z.^.b.b.rS..&I
    8C70: 04 E8 CD C3 26 8A 47 02 26 8A 67 33 F6 C4 01 74  // ....&.G.&.g3...t
    8C80: 22 BD A7 62 3C 10 7D 0E E8 71 02 8C 06 0E 01 3C  // "..b<.}..q.....<
    8C90: 0E 7D 07 BD 94 5A 8C 0E 0E 01 89 2E 0C 01 E8 10  // .}...Z..........
    8CA0: 01 EB 2D B4 84 3C 10 7D 13 B4 81 3C 0E 74 0D 7F  // ..-..<.}...<.t..
    8CB0: 15 B4 02 3C 08 74 05 80 CC 80 EB 0A 26 F6 47 05  // ...<.t......&.G.
    8CC0: 01 74 03 80 E4 7F 86 C4 32 DB E8 06 00 E8 C9 01  // .t......2.......
    8CD0: 07 5B C3 8B F8 8B F2 BA CE 03 EC B8 05 00 EF B8  // .[..............
    8CE0: 06 04 EF B2 C4 EC B8 02 04 EF B8 04 07 EF 8B D6  // ................
    8CF0: 8B C7 50 24 7F 0A C0 74 22 0E 07 33 D2 B9 00 01  // ..P$...t"..3....
    8D00: 3C 04 75 07 B7 10 BD A7 62 EB 10 FE C8 75 07 B7  // <.u.....b....u..
    8D10: 0E E8 E8 01 EB 05 B7 08 BD 94 5A E8 2D 00 58 A8  // ..........Z.-.X.
    8D20: 80 74 00 BA C4 03 B8 02 03 EF B8 04 02 EF B2 CC  // .t..............
    8D30: EC A8 01 B8 06 0E 75 02 B4 0A B2 CE 50 EC 58 EF  // ......u.....P.X.
    8D40: B0 04 EE 32 C0 EE B8 05 10 EF C3 FC 0B C9 75 01  // ...2..........u.
    8D50: C3 80 FF 0E 75 0A 26 83 7E FE 10 75 03 80 CD 80  // ....u.&.~..u....
    8D60: 1E 06 1F 2E 8E 06 10 03 8B FA C1 E7 05 B0 40 53  // ..............@S
    8D70: 80 E3 03 F6 E3 5B F6 C3 04 74 02 04 20 86 E0 8B  // .....[...t.. ...
    8D80: D0 03 FA 8B F5 E3 28 32 C0 86 FB 32 FF 51 F6 C5  // ......(2...2.Q..
    8D90: 80 74 01 46 8B CB F3 A4 83 FB 20 74 07 B9 20 00  // .t.F...... t.. .
    8DA0: 2B CB F3 AA 59 F6 C5 80 74 01 46 FE C9 75 DE 1F  // +...Y...t.F..u..
    8DB0: C3 8A 26 49 04 50 06 57 C4 3E A8 04 26 C4 7D 0C  // ..&I.P.W.>..&.}.
    8DC0: 8C C5 0B EF 74 30 8B EF 83 C7 07 26 8A 05 3C FF  // ....t0.....&..<.
    8DD0: 74 24 38 E0 74 03 47 EB F2 8B FD 26 8A 05 FE C8  // t$8.t.G....&....
    8DE0: A2 84 04 26 8B 45 01 A3 85 04 26 C4 7D 03 89 3E  // ...&.E....&.}..>
    8DF0: 0C 01 8C 06 0E 01 5F 07 58 C3 26 F6 47 33 01 74  // ......_.X.&.G3.t
    8E00: 01 C3 C4 1E A8 04 26 C4 5F 08 8C C0 0B C3 74 1F  // ......&._.....t.
    8E10: BF 0B 00 26 8A 01 3C FF 74 15 47 38 06 49 04 75  // ...&..<.t.G8.I.u
    8E20: F2 26 8A 07 32 E4 87 06 85 04 8B D8 E8 01 00 C3  // .&..2...........
    8E30: 8B 16 63 04 8A 26 85 04 FE CC 80 E4 1F 9C FA 80  // ..c..&..........
    8E40: FA D4 74 0B B0 14 EE 42 EC 24 E0 0A C4 EE 4A B0  // ..t....B.$....J.
    8E50: 09 EE 42 EC 24 E0 0A C4 EE 9D 8A C8 8B C3 8A 16  // ..B.$...........
    8E60: 85 04 F6 F2 80 3E 84 04 FF 75 07 A2 84 04 FE 0E  // .....>...u......
    8E70: 84 04 F6 E2 F6 C1 80 74 02 D1 E0 48 8A E0 B0 12  // .......t...H....
    8E80: 8B 16 63 04 EF A0 4A 04 8A 26 84 04 FE C4 F6 E4  // ..c...J..&......
    8E90: D1 E0 05 00 01 A3 4C 04 C3 8A 26 49 04 50 06 57  // ......L...&I.P.W
    8EA0: C4 3E A8 04 26 C4 7D 08 8C C5 0B EF 74 4A 8B EF  // .>..&.}.....tJ..
    8EB0: 83 C7 0B 26 8A 05 3C FF 74 3E 38 E0 74 03 47 EB  // ...&..<.t>8.t.G.
    8EC0: F2 8B FD 26 8A 3D 26 8A 5D 01 26 8B 4D 02 26 8B  // ...&.=&.].&.M.&.
    8ED0: 55 04 26 8A 45 0A 3C FF 74 02 FE C8 50 A0 84 04  // U.&.E.<.t...P...
    8EE0: FE C0 F6 26 85 04 A3 85 04 58 A2 84 04 26 C4 7D  // ...&.....X...&.}
    8EF0: 06 8B EF 32 C0 E8 DB FD 5F 07 58 C3 50 53 51 52  // ...2...._.X.PSQR
    8F00: 2E A1 18 03 0B C0 74 09 2E 8B 2E 86 73 0E 07 EB  // ......t.....s...
    8F10: 08 B8 30 11 B7 02 E8 CD BE 5A 59 5B 58 C3 3C 04  // ..0......ZY[X.<.
    8F20: 7C 01 C3 E3 FD 53 2E 8E 1E 0E 03 86 FB 32 FF D1  // |....S.......2..
    8F30: E3 8B FB 81 C7 50 04 8B 35 5B 89 15 56 8B F0 51  // .....P..5[..V..Q
    8F40: 53 26 8A 46 00 45 3C 0D 7F 1F 75 04 32 D2 EB 40  // S&.F.E<...u.2..@
    8F50: 3C 0A 74 32 3C 07 75 05 E8 5D 76 EB 62 3C 08 75  // <.t2<.u..]v.b<.u
    8F60: 08 0A D2 74 5A FE CA EB 27 F7 C6 02 00 74 05 26  // ...tZ...'....t.&
    8F70: 8A 5E 00 45 B9 01 00 B4 09 E8 6A BE FE C2 3A 16  // .^.E......j...:.
    8F80: 4A 04 72 0C 32 D2 89 15 3A 36 84 04 73 06 FE C6  // J.r.2...:6..s...
    8F90: 89 15 EB 2B 50 E8 AD EA 75 08 B8 00 08 E8 46 BE  // ...+P...u.....F.
    8FA0: EB 09 80 3E 49 04 07 74 F1 32 E4 86 3E 62 04 53  // ...>I..t.2..>b.S
    8FB0: 8A FC 55 E8 25 00 5D 5B 86 3E 62 04 58 8B 15 5B  // ..U.%.][.>b.X..[
    8FC0: 59 E2 15 5A F7 C6 01 00 75 02 89 15 8B 05 3A 3E  // Y..Z....u.....:>
    8FD0: 62 04 75 03 E8 34 ED C3 E9 64 FF 33 C9 8A 36 84  // b.u..4...d.3..6.
    8FE0: 04 8A 16 4A 04 FE CA B8 01 06 E8 F9 BD C3 2E 8E  // ...J............
    8FF0: 1E 0E 03 0A C0 75 0D E8 18 00 8B EC 89 5E 0E C6  // .....u.......^..
    9000: 46 1A 1A C3 3C 01 75 09 E8 41 00 8B EC C6 46 1A  // F...<.u..A....F.
    9010: 1A C3 A0 8A 04 BF 84 90 2E 3A 05 72 04 BB FF FF  // .........:.r....
    9020: C3 32 E4 D1 E0 03 F8 2E 8B 5D 04 0A DB 74 05 0A  // .2.......]...t..
    9030: FF 75 04 C3 86 FB C3 A0 10 04 24 30 3C 30 74 06  // .u........$0<0t.
    9040: F6 C3 01 75 EF C3 F6 C3 01 74 E9 C3 BF 84 90 2E  // ...u.....t......
    9050: 8A 0D 32 C0 83 C7 04 2E 3B 1D 74 12 86 FB 2E 3B  // ..2.....;.t....;
    9060: 1D 74 0B 83 C7 02 FE C0 38 C8 7E EB B0 FF A2 8A  // .t......8.~.....
    9070: 04 C3 BB 08 00 F6 06 89 04 02 74 0E BB 07 00 BA  // ..........t.....
    9080: CC 03 EC A8 01 74 18 BB 08 00 BA B4 03 E8 DF EC  // .....t..........
    9090: 74 21 B7 01 E8 8C E9 80 FA D4 74 17 86 FB C3 BA  // t!........t.....
    90A0: D4 03 E8 CA EC 74 0C B7 02 E8 77 E9 80 FA B4 74  // .....t....w....t
    90B0: 02 86 FB C3 0F 08 0F 08 0F 08 0F 08 03 01 03 01  // ................
    90C0: 01 01 00 08 01 01 01 01 01 01 01 01 0F 01 0F 08  // ................
    90D0: 0F 04 00 02 0F 02 01 01 0F 01 FF 01 FF E0 0F 00  // ................
    90E0: 00 00 00 07 02 08 FF 0E 00 00 3F 00 10 01 08 00  // ..........?.....
    90F0: 00 00 00 01 00 02 02 01 00 04 04 01 00 05 02 05  // ................
    9100: 00 06 01 06 05 06 00 08 01 08 00 07 02 07 06 07  // ................
    9110: CA 00 34 00 90 00 96 00 00 00 00 00 00 00 5F 57  // ..4..........._W
    9120: C3 90 50 66 52 E8 F4 FF FF FF 81 EF 10 00 00 00  // ..PfR...........
    9130: 2E 8B 07 66 BA F8 0C EF 66 BA FC 0C ED 32 C0 66  // ...f....f....2.f
    9140: 8B F8 66 5A 58 C3 66 B8 4F 03 66 52 66 56 53 57  // ..fZX.f.O.fRfVSW
    9150: 50 0A FF 75 44 E8 C8 FF FF FF 66 33 F6 66 BB 53  // P..uD.....f3.f.S
    9160: 00 E8 48 00 00 00 C1 E8 10 F6 C4 40 75 2B 66 81  // ..H........@u+f.
    9170: E2 FF 02 66 D1 E2 66 8B C2 66 40 C1 E0 10 66 8B  // ...f..f..f@...f.
    9180: C2 66 BB 13 00 E8 30 00 00 00 66 BB 12 00 E8 27  // .f....0...f....'
    9190: 00 00 00 66 58 32 E4 66 50 58 5F 5B 66 5E 66 5A  // ...fX2.fPX_[f^fZ
    91A0: C3 90 66 B8 4F 03 C3 90 66 B8 4F 03 C3 90 66 52  // ..f.O...f.O...fR
    91B0: E8 11 00 00 00 ED 66 5A C3 90 66 52 E8 05 00 00  // ......fZ..fR....
    91C0: 00 EF 66 5A C3 90 66 8B D7 50 33 C0 66 8B C3 66  // ..fZ..f..P3.f..f
    91D0: 03 C6 C1 E0 02 EF 66 83 C2 04 58 C3 92 39 85 39  // ......f...X..9.9
    91E0: 85 39 85 39 70 39 70 39 70 39 70 39 B2 35 29 36  // .9.9p9p9p9p9.5)6
    91F0: 53 36 94 37 93 37 93 37 D9 37 3E 38 6E 38 2B 39  // S6.7.7.7.7>8n8+9
    9200: 54 39 54 39 CB 37 BE 37 BE 37 BE 37 BE 37 BE 37  // T9T9.7.7.7.7.7.7
    9210: D9 37 3E 38 6E 38 2B 39 59 39 9F 39 54 39 54 39  // .7>8n8+9Y9.9T9T9
    9220: FF FF FF FF FF FF 00 00 FF FF 00 00 FF FF 00 00  // ................
    9230: FF 00 00 00 FF 00 00 00 FF 00 00 00 FF 00 00 00  // ................
    9240: 00 00 08 10 00 08 10 18 00 08 10 18 B6 33 01 B6  // .............3..
    9250: 33 02 C4 47 03 A4 47 03 DB 34 03 8F 34 03 B7 33  // 3..G..G..4..4..3
    9260: 04 D0 33 04 E0 33 04 B6 33 03 00 00 00 00 63 3B  // ..3..3..3.....c;
    9270: 00 02 63 3B 01 02 63 3B 02 02 63 3B 03 02 63 3B  // ..c;..c;..c;..c;
    9280: 04 02 63 3B 05 02 5D 3D 00 02 5D 3D 01 02 5D 3D  // ..c;..]=..]=..]=
    9290: 02 02 5D 3D 03 02 5D 3D 04 02 5D 3D 05 02 92 3D  // ..]=..]=..]=...=
    92A0: 00 02 92 3D 01 02 92 3D 02 02 92 3D 03 02 92 3D  // ...=...=...=...=
    92B0: 04 02 92 3D 05 02 CD 3F 00 02 CD 3F 01 02 CD 3F  // ...=...?...?...?
    92C0: 02 02 CD 3F 03 02 CD 3F 04 02 CD 3F 05 02 CD 3F  // ...?...?...?...?
    92D0: 00 02 CD 3F 01 02 CD 3F 02 02 CD 3F 03 02 CD 3F  // ...?...?...?...?
    92E0: 04 02 CD 3F 05 02 94 3E 00 02 94 3E 01 02 94 3E  // ...?...>...>...>
    92F0: 02 02 94 3E 03 02 94 3E 04 02 94 3E 05 02 D0 3E  // ...>...>...>...>
    9300: 00 02 D0 3E 01 02 D0 3E 02 02 D0 3E 03 02 D0 3E  // ...>...>...>...>
    9310: 04 02 D0 3E 05 02 41 3E 00 02 41 3E 01 02 41 3E  // ...>..A>..A>..A>
    9320: 02 02 41 3E 03 02 41 3E 04 02 41 3E 05 02 75 3E  // ..A>..A>..A>..u>
    9330: 00 02 75 3E 01 02 75 3E 02 02 75 3E 03 02 75 3E  // ..u>..u>..u>..u>
    9340: 04 02 75 3E 05 02 25 42 00 00 58 42 01 00 58 42  // ..u>..%B..XB..XB
    9350: 02 00 45 42 00 00 33 41 00 02 2C 3F 00 02 2C 3F  // ..EB..3A..,?..,?
    9360: 01 02 2C 3F 02 02 2C 3F 03 02 2C 3F 04 02 2C 3F  // ..,?..,?..,?..,?
    9370: 05 02 4B 41 00 02 A0 43 05 00 A0 43 01 00 A0 43  // ..KA...C...C...C
    9380: 00 00 A0 43 02 00 E1 43 00 00 E1 43 02 00 26 44  // ...C...C...C..&D
    9390: 00 00 B6 40 00 02 B6 40 01 02 B6 40 02 02 B6 40  // ...@...@...@...@
    93A0: 03 02 B6 40 04 02 B6 40 05 02 72 42 00 00 9A 42  // ...@...@..rB...B
    93B0: 00 00 1B 43 00 00 96 43 00 00 7A 3F 00 02 7A 3F  // ...C...C..z?..z?
    93C0: 01 02 7A 3F 02 02 7A 3F 03 02 7A 3F 04 02 7A 3F  // ..z?..z?..z?..z?
    93D0: 05 02 95 43 00 01 95 43 00 01 99 3C 00 02 99 3C  // ...C...C...<...<
    93E0: 01 02 99 3C 02 02 99 3C 03 02 99 3C 04 02 99 3C  // ...<...<...<...<
    93F0: 05 02 BA 42 00 00 96 43 00 00 96 43 00 00 96 43  // ...B...C...C...C
    9400: 00 00 CB 41 00 00 BD 3D 00 02 BD 3D 01 02 BD 3D  // ...A...=...=...=
    9410: 02 02 BD 3D 03 02 BD 3D 04 02 BD 3D 05 02 EC 3D  // ...=...=...=...=
    9420: 00 02 EC 3D 01 02 EC 3D 02 02 EC 3D 03 02 EC 3D  // ...=...=...=...=
    9430: 04 02 EC 3D 05 02 22 3E 00 02 22 3E 01 02 22 3E  // ...=..">..">..">
    9440: 02 02 22 3E 03 02 22 3E 04 02 22 3E 05 02 DD 42  // ..">..">..">...B
    9450: 00 00 00 43 00 00 BE 3E 01 02 BE 3E 02 02 1A 3F  // ...C...>...>...?
    9460: 01 02 1A 3F 02 02 A6 00 02 01 EE 94 00 00 00 00  // ...?............
    9470: 00 00 56 AE 00 00 BA 96 00 00 00 00 28 98 00 00  // ..V.........(...
    9480: 00 00 F2 98 0A 9D 00 00 00 00 00 00 00 00 00 00  // ................
    9490: 06 97 E0 A1 5A 97 00 00 AC 97 00 00 00 00 00 00  // ....Z...........
    94A0: 00 00 00 00 00 00 00 00 00 00 00 00 8C A2 FE A2  // ................
    94B0: 72 A3 00 00 B6 A3 00 00 04 A7 00 00 86 A4 44 A6  // r.............D.
    94C0: D0 A7 2E A9 70 A9 E2 C6 00 00 00 00 84 A9 4A AB  // ....p.........J.
    94D0: E2 C4 00 00 44 C6 54 AB 00 00 20 AD 00 00 00 00  // ....D.T... .....
    94E0: 00 00 66 AD 4E AE 00 00 00 00 00 00 00 00 00 00  // ..f.N...........
    94F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9500: 86 C8 6A B1 76 B2 6C C2 88 C4 00 00 4A 00 02 01  // ..j.v.l.....J...
    9510: 00 00 00 00 00 00 6C C9 C0 CA 08 CB 0C CE A6 D4  // ......l.........
    9520: AC D6 00 00 00 00 68 CE 74 D2 C8 D2 C8 D6 64 D3  // ......h.t.....d.
    9530: 00 00 68 D3 00 00 00 00 00 00 00 00 7C D3 68 D4  // ..h.........|.h.
    9540: 00 00 00 00 00 00 6E D4 00 00 00 00 74 CE 00 00  // ......n.....t...
    9550: 00 00 00 00 00 00 CC 01 02 01 00 08 37 00 00 02  // ............7...
    9560: 00 00 E3 0D 01 05 80 29 00 F4 00 00 01 05 53 39  // .......)......S9
    9570: 00 F4 00 00 01 05 00 00 2C A8 01 00 01 05 01 00  // ........,.......
    9580: 00 F4 00 00 1A 05 00 04 2C 05 00 FF F3 00 00 01  // ........,.......
    9590: 01 81 29 00 01 01 54 39 00 01 05 00 00 2D A8 01  // ..)...T9.....-..
    95A0: 00 01 01 01 00 00 01 05 85 29 00 00 3D 00 01 05  // .........)..=...
    95B0: F7 3A 00 00 3D 00 01 05 00 00 31 A8 01 00 01 05  // .:..=.....1.....
    95C0: 01 00 00 00 3D 00 14 05 00 06 0E 0D 00 3F 00 2C  // ....=........?.,
    95D0: 05 00 01 00 00 00 01 01 86 29 00 01 01 F8 3A 00  // .........)....:.
    95E0: 01 05 00 00 32 A8 01 00 01 01 01 00 00 01 05 50  // ....2..........P
    95F0: 28 EB 0F E4 60 01 05 00 00 90 A6 01 00 01 05 01  // (...`...........
    9600: 00 EB 0F E4 60 01 05 6E 29 00 00 00 00 01 05 00  // ....`..n).......
    9610: 00 1A A8 01 00 01 05 01 00 00 00 00 00 01 05 72  // ...............r
    9620: 29 FF FF 0F 00 01 05 00 00 1E A8 01 00 01 05 01  // )...............
    9630: 00 FF FF 0F 00 01 05 00 00 10 A8 01 00 01 00 64  // ...............d
    9640: 29 01 00 01 05 00 00 11 A8 01 00 01 00 65 29 01  // )............e).
    9650: 00 01 05 00 00 12 A8 01 00 01 00 66 29 01 00 01  // ...........f)...
    9660: 05 00 00 13 A8 01 00 01 00 67 29 01 00 01 05 00  // .........g).....
    9670: 00 14 A8 01 00 01 00 68 29 01 00 01 05 00 00 15  // .......h).......
    9680: A8 01 00 01 00 69 29 01 00 01 05 00 00 16 A8 01  // .....i).........
    9690: 00 01 00 6A 29 01 00 01 05 00 00 17 A8 01 00 01  // ...j)...........
    96A0: 00 6B 29 01 00 01 00 55 39 01 00 03 00 40 01 00  // .k)....U9....@..
    96B0: 01 02 74 29 40 01 02 59 39 40 01 05 00 00 20 A8  // ..t)@..Y9@.... .
    96C0: 01 00 01 02 01 00 40 03 00 41 81 29 33 00 41 80  // ......@..A.)3.A.
    96D0: 29 2D 02 40 41 01 02 75 29 40 01 02 5A 39 40 01  // )-.@A..u)@..Z9@.
    96E0: 05 00 00 21 A8 01 00 01 02 01 00 40 01 05 00 00  // ...!.......@....
    96F0: 1F A8 01 00 01 00 73 29 01 00 03 00 41 E3 0D 33  // ......s)....A..3
    9700: 05 41 01 00 00 00 1B 05 41 0B 01 02 06 00 41 0D  // .A......A.....A.
    9710: 25 1F 0E 03 0D 25 22 0C 02 0D 05 53 00 00 02 00  // %....%"....S....
    9720: 00 5B 4B 00 01 01 00 00 37 00 00 42 21 00 63 00  // .[K.....7..B!.c.
    9730: 1F 00 63 01 39 00 63 03 3F 00 63 02 45 00 5A 5A  // ..c.9.c.?.c.E.ZZ
    9740: 5B 03 05 40 00 00 05 04 2D 19 40 00 15 05 40 02  // [..@....-.@...@.
    9750: 01 02 0C 00 40 02 00 00 0D 00 5B 02 00 00 E3 0D  // ....@.....[.....
    9760: 5B 02 00 00 E7 0D 5B 02 00 00 E8 0D 5B 00 54 00  // [.....[.....[.T.
    9770: 01 02 00 00 37 00 00 01 05 00 00 9B 62 01 00 54  // ....7.......b..T
    9780: 00 01 00 01 05 00 00 93 62 01 00 01 01 01 00 01  // ........b.......
    9790: 56 00 41 03 09 41 00 01 05 00 00 83 62 01 00 01  // V.A..A......b...
    97A0: 02 01 00 41 01 05 00 00 9B 62 01 00 3C 25 01 00  // ...A.....b..<%..
    97B0: 00 44 36 00 01 05 00 00 93 62 01 00 02 00 01 01  // .D6......b......
    97C0: 00 5B 52 00 02 01 08 08 37 00 00 3D 25 00 00 44  // .[R.....7..=%..D
    97D0: 14 00 55 38 00 5B 01 05 00 00 61 60 01 00 3C E5  // ..U8.[....a`..<.
    97E0: 01 00 FF 44 10 00 4A E5 01 00 80 44 24 00 01 05  // ...D..J....D$...
    97F0: 00 00 62 60 01 00 01 01 01 00 01 56 00 40 03 A9  // ..b`.......V.@..
    9800: 40 00 01 05 00 00 61 60 01 00 01 02 01 00 40 02  // @.....a`......@.
    9810: E5 00 01 5B 7B 00 02 01 00 00 37 00 00 3D 65 00  // ...[{.....7..=e.
    9820: 01 44 7A 00 56 00 40 03 21 40 00 21 25 40 DC 03  // .Dz.V.@.!@.!%@..
    9830: 0A 48 40 01 05 B6 3A 00 01 00 00 5C 05 2D 3B CF  // .H@...:....\.-;.
    9840: FF CF FF 20 00 10 00 5C 05 40 3B CF FF FF FF 20  // ... ...\.@;.... 
    9850: 00 00 00 01 05 B7 3A 00 00 00 04 56 00 40 03 21  // ......:....V.@.!
    9860: 40 00 21 25 40 80 03 0A 48 40 5C 05 01 50 FF FC  // @.!%@...H@\..P..
    9870: FF FF 00 03 00 00 56 00 40 03 21 40 00 15 05 40  // ......V.@.!@...@
    9880: 19 5C 02 50 50 FF FF FF F1 40 3A 00 00 5B 5B 00  // .\.PP....@:..[[.
    9890: CA 00 02 01 04 04 37 00 00 66 0C 03 0C 41 00 00  // ......7..f...A..
    98A0: 2D 0A 41 42 2D 0D 42 04 00 3D 24 00 06 00 44 31  // -.AB-.B..=$...D1
    98B0: 00 2D 0D 42 08 00 3E 0A 42 41 45 19 00 55 20 00  // .-.B..>.BAE..U .
    98C0: 5B 56 00 43 03 24 43 05 00 03 04 46 00 00 33 05  // [V.C.$C....F..3.
    98D0: 46 01 00 00 00 01 02 00 00 46 03 00 00 01 00 0D  // F........F......
    98E0: 02 01 00 44 2D 05 46 02 00 00 00 01 02 00 00 46  // ...D-.F........F
    98F0: 03 24 43 04 00 4B E5 00 01 49 AA 00 07 02 01 00  // .$C..K...I......
    9900: 45 2D 05 46 01 00 00 00 01 02 00 00 46 4A 02 01  // E-.F........FJ..
    9910: 00 44 44 90 00 03 29 43 00 0E A2 00 44 43 98 00  // .DD...)C....DC..
    9920: 03 29 43 00 08 A2 00 45 33 05 46 03 00 00 00 01  // .)C....E3.F.....
    9930: 02 00 00 46 01 02 01 00 00 5B 0D 02 01 00 44 01  // ...F.....[....D.
    9940: 04 00 00 00 00 3D A5 00 01 44 C4 00 07 02 01 00  // .....=...D......
    9950: 45 43 C9 00 0D 02 01 00 44 5B 17 04 01 07 10 08  // EC......D[......
    9960: 37 00 00 4A 25 48 00 01 44 12 00 5B 3D 25 01 FF  // 7..J%H..D..[=%..
    9970: 44 F9 03 3D 25 01 18 46 F5 03 3D 25 01 02 47 F5  // D..=%..F..=%..G.
    9980: 03 3D 25 01 14 45 F9 03 3D 05 00 00 00 00 00 44  // .=%..E..=......D
    9990: 06 02 66 1B 56 00 02 3D A5 01 02 49 4A 00 56 08  // ..f.V..=...IJ.V.
    99A0: 40 43 5C 00 3D A5 01 03 49 57 00 56 08 40 43 5C  // @C\.=...IW.V.@C\
    99B0: 00 03 0C 40 18 00 3E 0D 40 00 00 44 6B 00 03 0A  // ...@..>.@..Dk...
    99C0: 02 40 43 6F 00 0E E5 01 80 4B E5 01 02 49 7D 00  // .@Co.....K...I}.
    99D0: 02 A9 02 02 55 28 02 03 01 00 00 03 05 46 C0 5D  // ....U(.......F.]
    99E0: 00 00 3D A5 01 00 44 96 00 03 05 46 80 BB 00 00  // ..=...D....F....
    99F0: 5C A5 0F 5E F3 08 55 28 01 3E 05 00 40 4B 4C 00  // \..^..U(.>..@KL.
    9A00: 47 B0 00 1B 05 00 01 43 C5 00 2C 65 01 01 3E 05  // G......C..,e..>.
    9A10: 00 A0 25 26 00 48 C5 00 15 05 00 01 43 B0 00 14  // ..%&.H......C...
    9A20: 2D 01 04 4B E5 01 80 49 F4 00 21 05 02 80 00 00  // -..K...I..!.....
    9A30: 00 7C 02 40 00 7E 02 40 46 7C 05 40 10 00 00 00  // .|.@.~.@F|.@....
    9A40: 7E 05 40 35 0C 00 00 03 02 02 40 43 F7 00 56 00  // ~.@5......@C..V.
    9A50: 02 27 02 00 46 21 05 41 00 00 01 00 27 02 40 46  // .'..F!.A....'.@F
    9A60: 03 0A 42 40 3E 05 41 00 00 00 00 49 1F 01 03 0D  // ..B@>.A....I....
    9A70: 40 01 00 56 08 01 43 49 01 03 02 40 46 03 02 01  // @..V..CI...@F...
    9A80: 41 03 02 03 41 27 02 40 41 03 02 40 03 3E 05 41  // A...A'.@A..@.>.A
    9A90: 00 00 00 00 49 27 01 27 02 01 03 03 0A 01 40 27  // ....I'.'......@'
    9AA0: 02 46 03 03 0A 03 01 03 0A 01 40 03 8A 01 42 27  // .F........@...B'
    9AB0: 02 00 46 33 05 40 10 00 00 00 15 05 40 05 03 8A  // ..F3.@......@...
    9AC0: 03 40 66 FF 2D 0D 42 03 04 56 00 40 03 21 40 01  // .@f.-.B..V.@.!@.
    9AD0: 33 25 40 14 15 25 40 01 2D 0A 42 40 03 0C 48 00  // 3%@..%@.-.B@..H.
    9AE0: 00 4A 25 06 5E 04 44 2C 02 56 00 40 4B E5 01 30  // .J%.^.D,.V.@K..0
    9AF0: 44 A4 01 4A 25 F1 5D 01 44 E5 01 43 AC 01 4A 25  // D..J%.].D..C..J%
    9B00: F1 5D 01 49 E5 01 03 00 40 0B 5E 09 0D 40 F0 FF  // .].I....@.^..@..
    9B10: 3E 1A 40 03 49 E5 01 3C 02 07 5E 01 49 E5 01 3C  // >.@.I..<..^.I..<
    9B20: 0A 0A 5E 03 49 E5 01 03 00 40 0C 5E 09 25 40 70  // ..^.I....@.^.%@p
    9B30: 3E 29 40 01 49 E5 01 3C 02 08 5E 02 44 E9 01 0E  // >)@.I..<..^.D...
    9B40: E5 01 01 3A 00 00 4B E5 01 01 44 CD 03 4B E5 01  // ...:..K...D..K..
    9B50: 02 49 06 02 3D 25 02 03 46 06 02 55 28 02 52 23  // .I..=%..F..U(.R#
    9B60: 3A 00 00 02 01 03 02 02 05 02 00 00 03 04 02 21  // :..............!
    9B70: 02 01 32 25 02 14 52 4D 02 01 02 03 3D 05 00 00  // ..2%..RM....=...
    9B80: 00 00 00 44 F5 03 3D A5 01 00 44 57 02 02 01 03  // ...D..=...DW....
    9B90: 02 02 05 02 00 0F 03 00 02 21 02 01 32 25 02 14  // .........!..2%..
    9BA0: 4B E5 01 30 44 51 02 0E E5 02 01 52 4D 02 01 02  // K..0DQ.....RM...
    9BB0: 03 66 FF 2D 0D 42 03 04 56 00 40 03 21 40 01 33  // .f.-.B..V.@.!@.3
    9BC0: 25 40 14 15 25 40 01 2D 0A 42 40 03 0C 48 00 00  // %@..%@.-.B@..H..
    9BD0: 03 05 40 00 00 38 00 3E 05 00 C0 C6 2D 00 47 A9  // ..@..8.>....-.G.
    9BE0: 02 5E A5 40 CF 20 3E 05 00 E0 67 35 00 47 A9 02  // .^.@. >...g5.G..
    9BF0: 5E A5 40 CF 10 3E 05 00 00 09 3D 00 47 A9 02 09  // ^.@..>....=.G...
    9C00: A5 40 CF 5C B2 0F 5E C3 40 3D A5 01 00 49 D1 02  // .@.\..^.@=...I..
    9C10: 5C 05 0F 5E FF FF 3F E0 00 00 40 10 5C 05 11 5E  // \..^..?...@.\..^
    9C20: FF FF 7F C0 00 00 80 3F 43 E9 02 5C 05 0F 5E 3F  // .......?C..\..^?
    9C30: E0 FF FF 00 00 00 10 5C 05 11 5E 7F C0 FF FF 00  // .......\..^.....
    9C40: 00 00 3E 03 05 40 00 00 14 1E 3D A5 01 00 49 0C  // ..>..@....=...I.
    9C50: 03 03 05 40 10 00 1C 24 3D 25 01 17 45 0C 03 03  // ...@...$=%..E...
    9C60: 05 40 00 00 1C 24 3D A5 01 00 44 1A 03 5C 9A 10  // .@...$=...D..\..
    9C70: 5E 03 00 40 5C 1A 0B 5E 0F 00 03 5C A2 0B 5E 8F  // ^..@\..^...\..^.
    9C80: 40 56 00 40 03 29 40 01 0F 25 40 01 4B E5 01 80  // @V.@.)@..%@.K...
    9C90: 49 3D 03 0F 65 40 01 5C 0A 0C 5E 8B FE 40 07 8D  // I=..e@.\..^..@..
    9CA0: 0D 5E 0F E0 3E 8D 01 00 00 49 62 03 3E 0D 03 00  // .^..>....Ib.>...
    9CB0: 00 49 62 03 07 E5 0E 5E FE 43 67 03 0D E5 0E 5E  // .Ib....^.Cg....^
    9CC0: 01 4A E5 0E 5E 01 49 7F 03 4A 65 0C 5E 01 49 7F  // .J..^.I..Je.^.I.
    9CD0: 03 07 E5 0E 5E EF 43 84 03 0D E5 0E 5E 10 01 02  // ....^.C.....^...
    9CE0: 07 5E 01 01 02 08 5E 02 7C 05 02 00 EC 04 00 7E  // .^....^.|......~
    9CF0: 02 40 46 27 05 40 0A 00 00 00 01 02 09 5E 40 01  // .@F'.@.......^@.
    9D00: 0A 0A 5E 03 3A 00 00 3D A5 01 00 44 F5 03 03 01  // ..^.:..=...D....
    9D10: 00 02 02 05 02 00 01 03 04 02 21 02 01 32 25 02  // ..........!..2%.
    9D20: 14 52 4D 02 02 02 00 3A 00 00 3D 25 02 03 46 F5  // .RM....:..=%..F.
    9D30: 03 02 25 03 02 02 E1 03 02 02 61 03 01 02 B9 03  // ..%.......a.....
    9D40: 01 08 A5 03 04 0E B1 03 02 02 01 02 00 52 2E 3A  // .............R.:
    9D50: 00 00 5B 02 25 01 0B 43 CD 03 7A 14 00 00 00 D8  // ..[.%..C..z.....
    9D60: 00 B0 01 88 02 60 03 00 00 00 01 00 02 00 03 00  // .....`..........
    9D70: 04 00 D6 04 02 01 04 04 37 00 00 42 29 00 63 07  // ........7..B).c.
    9D80: 1D 00 63 08 17 00 5A 5A 5B 0D 25 C8 39 02 5B 01  // ..c...ZZ[.%.9.[.
    9D90: 05 1F 35 FF FF FF FF 01 05 20 35 3F 00 00 00 01  // ..5...... 5?....
    9DA0: 05 3B 01 30 02 12 00 01 05 30 01 80 BB 10 00 01  // .;.0.....0......
    9DB0: 05 31 01 3C 00 01 08 01 05 34 01 00 00 00 00 01  // .1.<.....4......
    9DC0: 05 3C 01 00 00 00 00 01 8D 83 38 30 00 01 25 82  // .<........80..%.
    9DD0: 38 01 01 25 32 01 00 01 05 42 35 00 00 00 00 01  // 8..%2....B5.....
    9DE0: 05 40 35 00 00 00 00 01 05 46 35 00 00 00 00 01  // .@5......F5.....
    9DF0: 05 44 35 00 00 00 00 01 05 4A 35 00 00 00 00 01  // .D5......J5.....
    9E00: 05 48 35 00 00 00 00 01 05 4E 35 00 00 00 00 01  // .H5......N5.....
    9E10: 05 4C 35 00 00 00 00 01 05 61 35 00 00 00 00 01  // .L5......a5.....
    9E20: 05 63 35 00 00 00 00 01 05 65 35 00 00 00 00 01  // .c5......e5.....
    9E30: 05 72 35 01 00 00 00 01 05 DF 39 01 10 00 00 01  // .r5.......9.....
    9E40: 05 F4 39 01 00 02 00 07 05 F0 39 FF FF FF 7F 07  // ..9.......9.....
    9E50: 05 EF 39 9F FF FF FF 54 20 6D 91 01 05 B3 3A 01  // ..9....T m....:.
    9E60: 00 00 00 01 05 8F 3B 11 00 00 00 01 05 6B 3C 21  // ......;......k<!
    9E70: 00 00 00 01 05 47 3D 31 00 00 00 55 00 01 20 0D  // .....G=1...U.. .
    9E80: 01 DC 00 03 0A 48 40 01 05 B1 3A 00 1B 5D 05 01  // .....H@...:..]..
    9E90: 05 06 3B 35 00 13 00 01 05 07 3B 36 11 00 00 01  // ..;5......;6....
    9EA0: 05 08 3B 41 E6 01 00 01 05 09 3B 00 00 00 00 01  // ..;A......;.....
    9EB0: 05 0A 3B 00 00 08 2C 01 05 0C 3B 02 04 00 00 01  // ..;...,...;.....
    9EC0: 05 1F 3B 5E 4E 01 00 01 05 0A 3B 00 00 08 2C 01  // ..;^N.....;...,.
    9ED0: 05 0D 3B A4 01 00 00 01 05 0F 3B A4 01 00 00 01  // ..;.......;.....
    9EE0: 05 14 3B 00 02 00 00 01 05 15 3B 49 D2 00 00 01  // ..;.......;I....
    9EF0: 05 18 3B 20 00 00 00 01 05 19 3B 24 0D 00 00 01  // ..; ......;$....
    9F00: 05 1C 3B 00 00 00 00 01 05 1D 3B 00 00 00 00 01  // ..;.......;.....
    9F10: 05 ED 3A 00 00 92 06 01 05 EE 3A AA 08 00 E0 2C  // ..:.......:....,
    9F20: 05 01 01 00 00 00 3D 0D 01 04 00 45 0C 01 56 08  // ......=....E..V.
    9F30: 48 01 05 C9 39 FE 01 00 00 01 05 CB 39 BA 04 00  // H...9.......9...
    9F40: 00 01 05 CC 39 24 04 00 00 01 05 CD 39 A2 08 00  // ....9$......9...
    9F50: 00 01 05 CE 39 FE 01 00 00 01 05 D0 39 BA 04 00  // ....9.......9...
    9F60: 00 01 05 D1 39 24 04 00 00 01 05 D2 39 A2 08 00  // ....9$......9...
    9F70: 00 01 05 D3 39 FE 01 00 00 01 05 D5 39 BA 04 00  // ....9.......9...
    9F80: 00 01 05 D6 39 24 04 00 00 01 05 D7 39 A2 08 00  // ....9$......9...
    9F90: 00 01 05 D8 39 FE 01 00 00 01 05 DA 39 BA 04 00  // ....9.......9...
    9FA0: 00 01 05 DB 39 24 04 00 00 01 05 DC 39 A2 08 00  // ....9$......9...
    9FB0: 00 0D 25 C8 39 02 55 00 01 66 FF 2D 0D 42 CE 04  // ..%.9.U..f.-.B..
    9FC0: 03 0C 48 00 00 0D 25 DA 41 01 20 0D 01 1B 00 03  // ..H...%.A. .....
    9FD0: 0A 48 40 01 21 33 47 01 01 21 31 47 01 01 21 32  // .H@.!3G..!1G..!2
    9FE0: 47 01 20 0D 01 04 00 03 0A 48 40 01 21 45 48 01  // G. ......H@.!EH.
    9FF0: 20 0D 01 10 00 03 0A 48 40 03 0D 40 00 F0 0F 61  //  ......H@..@...a
    A000: 40 01 01 6A 8B 4F 40 2C 0D 01 01 00 2D 0D 42 02  // @..j.O@,....-.B.
    A010: 00 3D 25 01 04 45 4E 02 56 08 48 55 00 01 52 17  // .=%..EN.V.HU..R.
    A020: 2C 25 01 01 3D 25 01 04 45 AC 02 02 05 01 01 02  // ,%..=%..E.......
    A030: 00 00 52 29 56 00 46 66 08 03 0C 46 0C 00 26 05  // ..R)V.Ff...F..&.
    A040: 01 40 0D 03 00 21 02 40 46 32 02 01 40 01 01 42  // .@...!.@F2..@..B
    A050: 01 01 01 01 46 01 01 01 01 4A 01 01 01 01 4E 01  // ....F....J....N.
    A060: 01 55 00 01 52 4E 5C 05 63 53 FF FF FF 00 00 00  // .U..RN\.cS......
    A070: 00 30 5C 05 65 53 FF FF FF 00 00 00 00 30 5C 05  // .0\.eS.......0\.
    A080: 67 53 FF FF FF 00 00 00 00 30 5C 05 69 53 FF FF  // gS.......0\.iS..
    A090: FF 00 00 00 00 30 5C 05 6B 53 FF FF FF 00 00 00  // .....0\.kS......
    A0A0: 00 30 01 05 DC 5D 22 22 02 00 01 05 DD 5D AA F2  // .0...]"".....]..
    A0B0: 01 00 01 05 31 55 11 00 01 00 01 05 31 56 11 00  // ....1U......1V..
    A0C0: 01 00 01 05 31 57 11 00 01 00 01 05 31 58 11 00  // ....1W......1X..
    A0D0: 01 00 01 05 31 59 11 00 01 00 01 05 9A 55 01 00  // ....1Y.......U..
    A0E0: 00 00 01 05 9A 56 01 00 00 00 01 05 9A 57 01 00  // .....V.......W..
    A0F0: 00 00 01 05 9A 58 01 00 00 00 01 05 9A 59 01 00  // .....X.......Y..
    A100: 00 00 02 25 01 07 52 33 02 05 01 00 07 00 00 55  // ...%..R3.......U
    A110: 00 02 52 4D 2C 25 01 01 3D 25 01 05 45 A0 03 66  // ..RM,%..=%..E..f
    A120: 16 03 A4 00 06 00 2D 0D 42 08 00 03 0A 00 42 3E  // ......-.B.....B>
    A130: A5 00 00 44 33 04 03 0A 42 00 03 0C 40 04 00 3E  // ...D3...B...@..>
    A140: 0D 40 20 22 44 DD 03 3E 0D 40 21 21 49 27 04 03  // .@ "D..>.@!!I'..
    A150: 0C 40 08 00 66 16 2D 0A 42 40 03 24 40 00 00 3E  // .@..f.-.B@.$@..>
    A160: 25 40 FF 44 27 04 3E 25 40 14 49 1F 04 03 04 40  // %@.D'.>%@.I....@
    A170: 02 00 4C 05 40 00 01 00 00 44 27 04 4A 25 48 00  // ..L.@....D'.J%H.
    A180: 01 49 33 04 01 A5 7F 60 01 01 A5 57 61 01 43 33  // .I3....`...Wa.C3
    A190: 04 2D 0C 42 01 00 43 E8 03 2D 0D 00 10 00 33 A5  // .-.B..C..-....3.
    A1A0: 00 01 43 BD 03 66 16 03 0C 41 04 00 4C 0D 41 02  // ..C..f...A..L.A.
    A1B0: 00 44 47 04 0D A5 4C 00 02 01 05 00 00 2C A8 01  // .DG...L......,..
    A1C0: 00 01 00 53 39 01 00 01 05 00 00 2D A8 01 00 01  // ...S9......-....
    A1D0: 00 54 39 01 00 01 05 00 00 17 A8 01 00 01 00 55  // .T9............U
    A1E0: 39 01 00 01 05 00 00 31 A8 01 00 01 00 F7 3A 01  // 9......1......:.
    A1F0: 00 01 05 00 00 32 A8 01 00 01 00 F8 3A 01 00 01  // .....2......:...
    A200: 05 00 00 20 A8 01 00 01 00 59 39 01 00 01 05 00  // ... .....Y9.....
    A210: 00 21 A8 01 00 01 00 5A 39 01 00 02 00 01 53 39  // .!.....Z9.....S9
    A220: 03 01 41 01 15 05 41 18 01 02 C4 00 41 03 01 41  // ..A...A.....A..A
    A230: 01 1B 05 41 08 01 02 C9 00 41 52 4B 5B 7A 08 00  // ...A.....ARK[z..
    A240: 00 00 6B 01 D6 02 41 04 AC 00 02 01 00 04 66 FF  // ..k...A.......f.
    A250: 56 08 47 2D 0D 42 74 00 03 21 47 00 09 25 47 F0  // V.G-.Bt..!G..%G.
    A260: 42 22 47 63 00 5B 00 63 60 56 00 63 20 36 00 63  // B"Gc.[.c`V.c 6.c
    A270: 90 4E 00 63 A0 3E 00 63 B0 46 00 5A 5A 5B 2D 0D  // .N.c.>.c.F.ZZ[-.
    A280: 42 26 00 43 5B 00 2D 0D 42 1E 00 43 5B 00 2D 0D  // B&.C[.-.B..C[.-.
    A290: 42 30 00 43 5B 00 2D 0D 42 16 00 43 5B 00 2D 0D  // B0.C[.-.B..C[.-.
    A2A0: 42 0C 00 03 21 47 00 09 25 47 07 2D 0A 42 47 2D  // B...!G..%G.-.BG-
    A2B0: 0A 42 47 03 0C 48 00 00 5B 7A AC 00 00 00 80 00  // .BG..H..[z......
    A2C0: 00 01 80 01 00 02 80 02 00 00 00 01 00 02 00 03  // ................
    A2D0: 00 04 00 00 DC 00 B8 01 94 02 00 00 6B 01 D6 02  // ............k...
    A2E0: 41 04 00 00 D8 00 B0 01 88 02 60 03 00 00 5A 00  // A.........`...Z.
    A2F0: B4 00 0E 01 72 00 01 01 00 00 37 00 00 56 00 40  // ....r.....7..V.@
    A300: 03 21 40 00 21 0D 40 6B 01 03 02 48 40 01 25 AC  // .!@.!.@k...H@.%.
    A310: 41 01 3D 65 00 02 49 4C 00 01 0D BD 41 01 00 54  // A.=e..IL....A..T
    A320: 00 BB 41 0D 25 AE 41 01 01 05 AD 41 11 00 00 00  // ..A.%.A....A....
    A330: 07 A5 AC 41 FE 01 05 AF 41 11 01 11 01 43 6E 00  // ...A....A....Cn.
    A340: 01 05 B1 41 00 00 00 01 01 05 B5 41 00 00 00 01  // ...A.......A....
    A350: 01 05 AF 41 11 01 11 01 54 00 AD 41 01 0D BD 41  // ...A....T..A...A
    A360: 00 01 3A 00 00 5B 73 00 01 01 00 00 37 00 00 52  // ..:..[s.....7..R
    A370: 14 03 00 41 C0 41 33 1A 41 41 03 8A 40 41 03 00  // ...A.A3.AA..@A..
    A380: 41 C1 41 33 1A 41 41 03 0A 40 41 3E 05 40 00 00  // A.A3.AA..@A>.@..
    A390: 00 00 49 36 00 03 05 40 70 08 00 0F 0E 25 00 B0  // ..I6...@p....%..
    A3A0: 52 14 3D 65 00 00 44 6D 00 01 02 16 4D 40 01 05  // R.=e..Dm....M@..
    A3B0: 17 4D 00 00 00 00 01 05 18 4D 00 00 00 00 01 05  // .M.......M......
    A3C0: 19 4D 00 00 00 00 5C 05 14 4D 8F FF 0F FF 31 00  // .M....\..M....1.
    A3D0: 00 00 5B 07 25 14 4D FE 5B 00 43 00 01 01 00 00  // ..[.%.M.[.C.....
    A3E0: 37 00 00 52 14 3D 65 00 01 44 3A 00 0D 65 01 50  // 7..R.=e..D:..e.P
    A3F0: 03 54 20 01 50 4A A5 01 50 01 49 1B 00 54 20 0F  // .T .PJ..P.I..T .
    A400: 50 56 00 40 20 25 00 01 03 0A 48 40 07 E5 E8 39  // PV.@ %....H@...9
    A410: 7F 43 3F 00 0D 25 01 50 01 3A 00 00 5B 00 CF 00  // .C?..%.P.:..[...
    A420: 02 01 00 00 37 00 00 42 29 00 63 00 1B 00 63 01  // ....7..B).c...c.
    A430: 1B 00 63 02 AA 00 5A 5A 5B 66 FF 56 08 40 2D 0D  // ..c...ZZ[f.V.@-.
    A440: 42 C3 00 03 21 40 00 15 25 40 01 2D 0A 42 40 03  // B...!@..%@.-.B@.
    A450: 0C 48 00 00 3D 65 00 00 44 72 00 0D 25 CC 00 01  // .H..=e..Dr..%...
    A460: 3A 00 00 01 8D C0 00 00 02 51 02 01 05 C6 00 00  // :........Q......
    A470: 00 10 00 01 05 C8 00 00 00 50 00 01 0D C3 00 02  // .........P......
    A480: 00 54 20 CA 00 01 05 C2 00 00 01 00 00 43 1A 00  // .T ..........C..
    A490: 07 25 CC 00 FE 3A 00 00 0D 25 CA 00 01 01 25 C2  // .%...:...%....%.
    A4A0: 00 01 07 A5 C1 00 FE 0D 25 D5 00 01 0D 65 D5 00  // ........%....e..
    A4B0: 01 4A 65 D5 00 01 44 93 00 54 08 D5 00 54 00 C6  // .Je...D..T...T..
    A4C0: 00 54 00 C8 00 43 1A 00 5C 65 D4 00 FC 02 01 A1  // .T...C..\e......
    A4D0: C0 00 00 2B A5 C0 00 01 0D A5 C1 00 01 5B 7A 0C  // ...+.........[z.
    A4E0: 00 00 00 02 00 2C 00 2D 00 2E 00 2F 00 00 BD 01  // .....,.-.../....
    A4F0: 03 01 04 00 37 00 00 66 08 03 05 46 C0 12 00 00  // ....7..f...F....
    A500: 3D A5 00 02 49 1E 00 02 02 00 46 5B 03 05 40 0C  // =...I.....F[..@.
    A510: 00 00 00 21 21 40 00 66 FF 2D 0D 42 81 01 2D 0A  // ...!!@.f.-.B..-.
    A520: 42 40 03 04 40 00 00 03 04 41 04 00 03 04 00 08  // B@..@....A......
    A530: 00 01 02 00 00 40 03 88 40 01 00 03 18 40 01 00  // .....@..@....@..
    A540: 09 8D 40 FF 01 3E 8D 40 00 00 49 99 00 01 02 00  // ..@..>.@..I.....
    A550: 00 41 03 00 40 01 00 09 05 40 FF 01 00 00 3E 0D  // .A..@....@....>.
    A560: 40 00 00 49 82 00 03 05 46 00 71 02 00 43 BC 00  // @..I....F.q..C..
    A570: 21 02 40 46 03 00 41 01 00 09 05 41 00 1E 00 00  // !.@F..A....A....
    A580: 1B 05 41 09 43 B4 00 7C 02 40 46 7E 05 40 00 00  // ..A.C..|.@F~.@..
    A590: 01 00 03 00 41 01 00 09 05 41 00 F0 00 00 1B 05  // ....A....A......
    A5A0: 41 0C 75 02 40 41 03 02 46 40 3D A5 00 01 49 C8  // A.u.@A..F@=...I.
    A5B0: 00 02 02 00 46 5B 3D E5 00 00 49 0B 01 56 00 40  // ....F[=...I..V.@
    A5C0: 03 29 40 00 21 0D 40 0A 00 03 02 41 00 2D 02 40  // .)@.!.@....A.-.@
    A5D0: 41 01 02 00 00 40 03 00 41 01 00 09 05 41 00 00  // A....@..A....A..
    A5E0: F0 07 1B 05 41 14 02 E2 00 41 3D E5 00 00 49 0B  // ....A....A=...I.
    A5F0: 01 02 05 00 00 46 C3 23 5B 56 00 40 03 39 40 00  // .....F.#[V.@.9@.
    A600: 55 38 00 66 FF 2D 0D 42 59 01 3E 0C 40 02 00 47  // U8.f.-.BY.>.@..G
    A610: 2C 01 2D 0D 42 08 00 43 1C 01 33 0C 40 04 00 21  // ,.-.B..C..3.@..!
    A620: 0C 40 06 00 2D 0C 40 00 00 03 09 42 00 55 00 00  // .@..-.@....B.U..
    A630: 02 0A 00 40 7C 05 46 40 42 0F 00 7E 01 40 00 02  // ...@|.F@B..~.@..
    A640: 02 00 40 5B 7A 64 00 FF FF 07 00 00 00 00 00 C8  // ..@[zd..........
    A650: 00 3F 00 08 00 19 00 40 06 5F 00 40 00 32 00 80  // .?.....@._.@.2..
    A660: 0C 7E 00 60 00 64 00 00 32 7F 00 7F 00 64 00 16  // .~.`.d..2....d..
    A670: 6C 01 00 00 6C 01 00 51 6C 01 00 0F 6E 01 00 00  // l...l..Ql...n...
    A680: 6E 01 00 4A 6E 01 00 0C 7E 01 00 00 7E 01 00 47  // n..Jn...~...~..G
    A690: 7E 01 00 0C 70 01 00 00 70 01 00 47 70 01 00 0C  // ~...p...p..Gp...
    A6A0: 72 01 00 00 72 01 00 47 72 01 00 00 BF 00 02 03  // r...r..Gr.......
    A6B0: 04 00 37 00 00 56 00 46 56 00 00 03 21 00 00 55  // ..7..V.FV...!..U
    A6C0: 20 00 3D 65 00 03 44 2C 00 3D 65 00 0B 46 B4 00  //  .=e..D,.=e..F..
    A6D0: 02 29 00 00 32 25 00 08 0E 25 00 60 52 14 5C 22  // .)..2%...%.`R.\"
    A6E0: 28 55 F8 00 02 22 00 00 03 0D 41 01 00 66 FF 2D  // (U..."....A..f.-
    A6F0: 0D 42 BB 00 2D 0A 42 41 03 24 00 00 00 3D E2 00  // .B..-.BA.$...=..
    A700: 00 48 A0 00 3E 25 00 04 44 6F 00 03 22 46 00 33  // .H..>%..Do.."F.3
    A710: 25 46 01 15 25 46 04 0F 25 46 01 33 39 00 00 3E  // %F..%F..%F.39..>
    A720: 25 00 01 44 8C 00 3E 25 00 02 44 85 00 03 25 46  // %..D..>%..D...%F
    A730: 21 03 65 00 2F 43 90 00 03 65 00 13 03 79 46 00  // !.e./C...e...yF.
    A740: 33 65 46 01 15 2D 46 03 0F 65 46 01 52 14 01 02  // 3eF..-F..eF.R...
    A750: 01 4D 46 01 52 00 4D 00 54 00 05 4D 54 00 FF 4C  // .MF.R.M.T..MT..L
    A760: 3A 00 00 5B 7A 04 00 03 02 01 04 00 CB 00 01 01  // :..[z...........
    A770: 00 00 37 00 00 3D 65 00 01 44 61 00 56 00 40 20  // ..7..=e..Da.V.@ 
    A780: 25 00 10 03 0A 48 40 07 25 8F 4F FD 4A 25 8F 4F  // %....H@.%.O.J%.O
    A790: 04 49 20 00 52 14 07 25 46 50 FE 4A 65 46 50 01  // .I .R..%FP.JeFP.
    A7A0: 49 2F 00 03 21 40 00 21 0D 40 DC 00 03 0A 48 40  // I/..!@.!.@....H@
    A7B0: 07 25 B4 3A FE 56 00 40 03 21 40 00 21 0D 40 6B  // .%.:.V.@.!@.!.@k
    A7C0: 01 03 0A 48 40 07 25 85 41 EF 43 C7 00 56 00 40  // ...H@.%.A.C..V.@
    A7D0: 20 25 00 10 03 0A 48 40 0D 25 8F 4F 02 4A 25 8F  //  %....H@.%.O.J%.
    A7E0: 4F 04 44 71 00 52 14 0D 25 46 50 01 4A 65 46 50  // O.Dq.R..%FP.JeFP
    A7F0: 01 44 80 00 56 00 40 03 21 40 00 21 0D 40 DC 00  // .D..V.@.!@.!.@..
    A800: 03 0A 48 40 0D 25 B4 3A 01 56 00 40 03 21 40 00  // ..H@.%.:.V.@.!@.
    A810: 21 0D 40 6B 01 03 0A 48 40 0D 25 85 41 10 56 00  // !.@k...H@.%.A.V.
    A820: 40 03 21 40 00 21 0D 40 5A 00 03 0A 48 40 0D 25  // @.!@.!.@Z...H@.%
    A830: 4C 4D 01 3A 00 00 5B 00 5E 01 01 04 04 08 37 00  // LM.:..[.^.....7.
    A840: 00 3D 65 02 01 49 27 01 4B A5 02 03 49 2A 00 52  // .=e..I'.K...I*.R
    A850: 25 02 05 00 00 00 00 00 02 05 01 00 05 02 00 43  // %..............C
    A860: 2F 00 55 28 02 52 25 03 38 00 C4 00 03 48 00 C9  // /.U(.R%.8....H..
    A870: 00 0E 25 02 90 52 14 08 25 02 07 0D 05 B4 3A 11  // ..%..R..%.....:.
    A880: 11 01 00 5C 25 B3 3A 0B 01 03 21 41 02 15 25 41  // ...\%.:...!A..%A
    A890: 04 0D 22 B3 3A 41 0D 65 B6 3A 01 5C 25 DB 3A FD  // ..".:A.e.:.\%.:.
    A8A0: 01 03 02 41 00 1B 05 41 08 01 0A CB 3A 41 01 0A  // ...A...A....:A..
    A8B0: CF 3A 41 15 05 00 18 01 02 CA 3A 00 01 02 CE 3A  // .:A.......:....:
    A8C0: 00 4B A5 02 03 49 A0 00 2B 05 CA 3A 00 00 10 00  // .K...I..+..:....
    A8D0: 2B 05 CE 3A 00 00 50 00 01 0D A7 3A 80 00 01 0D  // +..:..P....:....
    A8E0: B1 3A 00 03 01 0D 0C 3B 01 03 01 05 0A 3B 00 00  // .:.....;.....;..
    A8F0: 08 28 01 05 0B 3B 00 00 08 00 01 E5 EF 3A 08 01  // .(...;.......:..
    A900: E5 EE 3A E0 54 00 A9 3A 01 19 AA 3A 00 01 89 AA  // ..:.T..:...:....
    A910: 3A 00 01 19 AE 3A 00 01 89 AE 3A 00 07 0D A5 3A  // :....:....:....:
    A920: FF F8 66 FF 2D 0D 42 4F 01 03 0C 40 00 00 3E 0D  // ..f.-.BO...@..>.
    A930: 40 FF FF 44 0E 01 3D 8C 01 00 00 44 0E 01 2D 0D  // @..D..=....D..-.
    A940: 42 03 00 43 F1 00 01 24 A5 3A 02 00 01 09 C7 3A  // B..C...$.:.....:
    A950: 01 07 25 B3 3A FE 07 25 DB 3A FE 3A 00 00 5B 0E  // ..%.:..%.:.:..[.
    A960: 25 02 90 52 14 3D 65 02 00 49 3C 01 0D 25 B3 3A  // %..R.=e..I<..%.:
    A970: 01 43 48 01 3D 65 02 10 44 48 01 01 09 C7 3A 01  // .CH.=e..DH....:.
    A980: 3A 00 00 5B 7A 0F 00 01 00 01 01 01 03 01 05 02  // :..[z...........
    A990: 02 00 08 FF FF 08 42 00 01 01 00 00 37 00 00 52  // ......B.....7..R
    A9A0: 14 3D 65 00 01 44 21 00 54 20 4B 50 4A 65 4B 50  // .=e..D!.T KPJeKP
    A9B0: 01 49 16 00 43 3E 00 5C 4D 1B 50 FE FF 00 01 4A  // .I..C>.\M.P....J
    A9C0: A5 01 50 01 44 3E 00 0D 25 4B 50 01 4A 65 4B 50  // ..P.D>..%KP.JeKP
    A9D0: 01 44 36 00 3A 00 00 5B 13 00 01 03 00 00 37 00  // .D6.:..[......7.
    A9E0: 00 0E 25 00 A0 52 14 3A 00 00 5B 00 C6 01 01 01  // ..%..R.:..[.....
    A9F0: 00 18 56 00 40 03 21 40 05 21 0D 40 80 00 03 0A  // ..V.@.!@.!.@....
    AA00: 48 40 37 00 00 01 0D 47 50 0D 00 3D 8D 01 0D 00  // H@7....GP..=....
    AA10: 46 2C 00 01 19 47 50 01 01 8D 48 50 40 01 01 0D  // F,...GP...HP@...
    AA20: 49 50 2C 01 03 09 41 00 2D 19 41 00 03 8A 41 41  // IP,...A.-.A...AA
    AA30: 2D 8D 41 01 00 1B 1D 41 02 01 1A 48 50 41 33 0D  // -.A....A...HPA3.
    AA40: 41 01 00 01 0A EA 4F 41 54 08 EC 4F 01 99 EC 4F  // A.....OAT..O...O
    AA50: 02 03 19 41 00 33 09 41 02 56 18 41 03 B1 41 04  // ...A.3.A.V.A..A.
    AA60: 33 1A 41 41 01 8A EB 4F 41 03 19 41 00 33 09 41  // 3.AA...OA..A.3.A
    AA70: 02 2D 1A 41 41 2D 09 41 00 4B 25 04 10 44 98 00  // .-.AA-.A.K%..D..
    AA80: 2D 09 41 00 01 0A EB 4F 41 03 21 41 04 09 25 41  // -.A....OA.!A..%A
    AA90: 02 1B 25 41 01 01 22 ED 4F 41 03 09 41 01 2D 19  // ..%A..".OA..A.-.
    AAA0: 41 01 33 0D 41 01 00 01 0A EF 4F 41 54 08 F7 4F  // A.3.A.....OAT..O
    AAB0: 01 99 F7 4F 03 03 19 41 01 33 09 41 03 56 18 41  // ...O...A.3.A.V.A
    AAC0: 03 B9 41 04 33 1A 41 41 01 8A F6 4F 41 03 19 41  // ..A.3.AA...OA..A
    AAD0: 01 33 09 41 03 2D 1A 41 41 2D 09 41 01 4B 25 04  // .3.A.-.AA-.A.K%.
    AAE0: 20 44 FC 00 2D 09 41 01 01 0A F6 4F 41 03 21 41  //  D..-.A....OA.!A
    AAF0: 04 09 25 41 04 1B 25 41 02 01 22 F8 4F 41 3D 65  // ..%A..%A..".OA=e
    AB00: 05 00 44 21 01 07 65 01 50 EF 43 26 01 0D 65 01  // ..D!..e.P.C&..e.
    AB10: 50 10 03 00 46 EB 4F 02 00 02 F6 4F 56 00 40 03  // P...F.O....OV.@.
    AB20: 21 40 05 21 0D 40 01 00 03 0A 48 40 56 00 40 03  // !@.!.@....H@V.@.
    AB30: 09 40 02 3D 65 05 00 49 53 01 33 0D 40 02 00 15  // .@.=e..IS.3.@...
    AB40: 05 40 10 56 00 41 3D 8D 02 0D 00 48 6B 01 03 0D  // .@.V.A=....Hk...
    AB50: 41 0D 00 33 19 41 02 0F 02 40 41 0F E5 40 80 01  // A..3.A...@A..@..
    AB60: 02 E8 39 40 56 00 40 03 21 40 05 21 0D 40 6B 01  // ..9@V.@.!@.!.@k.
    AB70: 03 0A 48 40 01 09 C3 41 00 01 89 C3 41 01 01 09  // ..H@...A....A...
    AB80: C4 41 00 01 89 C4 41 01 01 02 C0 41 46 01 01 C1  // .A....A....AF...
    AB90: 41 02 54 00 BE 41 01 31 BE 41 04 01 B1 BE 41 04  // A.T..A.1.A....A.
    ABA0: 54 00 BF 41 01 39 BF 41 04 01 B9 BF 41 04 3A 00  // T..A.9.A....A.:.
    ABB0: 00 5B 0A 00 02 03 08 00 37 00 00 5B CC 01 01 01  // .[......7..[....
    ABC0: 00 00 37 00 00 56 00 41 03 39 41 01 09 25 41 0F  // ..7..V.A.9A..%A.
    ABD0: 56 00 40 03 62 40 41 01 02 58 53 40 03 0A 46 42  // V.@.b@A..XS@..FB
    ABE0: 66 FF 2D 0D 42 B8 01 15 25 41 02 2D 0A 42 41 03  // f.-.B...%A.-.BA.
    ABF0: 0C 48 00 00 07 05 90 5D 00 00 01 00 03 0C 48 02  // .H.....]......H.
    AC00: 00 03 05 40 C0 5D 00 00 56 00 41 03 21 41 00 27  // ...@.]..V.A.!A.'
    AC10: 02 40 41 15 05 40 10 03 25 40 02 01 02 62 53 40  // .@A..@..%@...bS@
    AC20: 01 05 63 53 40 00 00 30 03 0A 42 46 56 08 48 0D  // ..cS@..0..BFV.H.
    AC30: 25 5A 53 01 54 00 59 53 56 00 41 03 71 41 01 0F  // %ZS.T.YSV.A.qA..
    AC40: E5 41 80 01 02 72 53 41 03 69 41 00 03 A5 41 01  // .A...rSA.iA...A.
    AC50: 01 02 72 53 41 4B 25 01 01 44 CD 00 03 71 41 00  // ..rSAK%..D...qA.
    AC60: 03 A5 41 02 01 02 72 53 41 03 79 41 00 03 A5 41  // ..A...rSA.yA...A
    AC70: 03 01 02 72 53 41 03 05 40 00 31 01 00 2D A9 40  // ...rSA..@.1..-.@
    AC80: 01 01 02 6E 53 40 43 00 01 03 71 41 01 0F 65 41  // ...nS@C...qA..eA
    AC90: 01 03 A5 41 02 01 02 72 53 41 03 05 40 00 11 01  // ...A...rSA..@...
    ACA0: 00 01 02 6E 53 40 03 05 40 01 30 00 00 03 A9 40  // ...nS@..@.0....@
    ACB0: 01 01 02 6F 53 40 5C A5 58 53 CF 10 0D 25 58 53  // ...oS@\.XS...%XS
    ACC0: 01 02 65 00 02 56 00 40 03 29 40 01 2D 25 40 04  // ..e..V.@.)@.-%@.
    ACD0: 21 05 40 C8 00 00 00 56 00 41 03 21 41 00 27 02  // !.@....V.A.!A.'.
    ACE0: 40 41 03 0A 41 40 33 0D 41 01 00 3E 0D 41 00 00  // @A..A@3.A..>.A..
    ACF0: 44 A4 01 51 64 4A 25 5B 53 04 44 2A 01 4A 65 5B  // D..QdJ%[S.D*.Je[
    AD00: 53 31 49 A4 01 02 65 00 01 4B 25 01 01 49 A4 01  // S1I...e..K%..I..
    AD10: 01 05 72 53 01 00 03 80 3D 65 01 01 49 6B 01 02  // ..rS....=e..Ik..
    AD20: A8 00 72 53 43 A4 01 56 00 41 03 19 41 00 56 00  // ..rSC..V.A..A.V.
    AD30: 40 03 0A 40 41 3B 02 40 03 28 40 72 53 03 68 40  // @..@A;.@.(@rS.h@
    AD40: 72 53 03 A8 40 72 53 03 E8 40 72 53 04 02 00 40  // rS..@rS..@rS...@
    AD50: 2D A5 41 04 2D 0D 41 04 00 3E A9 41 01 45 72 01  // -.A.-.A..>.A.Er.
    AD60: 0D 25 5A 53 02 01 25 58 53 02 51 01 54 00 58 53  // .%ZS..%XS.Q.T.XS
    AD70: 5B 7A 14 00 00 00 00 00 04 00 02 00 08 00 04 00  // [z..............
    AD80: 0C 00 06 00 10 00 08 00 46 00 02 02 00 04 37 00  // ........F.....7.
    AD90: 00 55 30 00 32 25 00 01 20 25 00 08 56 08 48 03  // .U0.2%.. %..V.H.
    ADA0: 22 48 40 0D A5 D5 53 01 02 A0 00 D4 53 08 A5 00  // "H@...S.....S...
    ADB0: 03 4A 25 D4 53 02 44 3C 00 5C 0D D5 53 FF FE 01  // .J%.S.D<.\..S...
    ADC0: 00 43 42 00 0D 0D D5 53 01 01 3A 00 00 5B E7 00  // .CB....S..:..[..
    ADD0: 01 08 08 00 03 01 00 00 02 05 00 01 00 01 00 52  // ...............R
    ADE0: 29 20 05 00 64 00 00 00 03 02 46 40 02 02 00 00  // ) ..d.....F@....
    ADF0: 03 01 00 00 55 38 00 03 05 40 00 32 00 00 3D 05  // ....U8...@.2..=.
    AE00: 00 00 00 00 00 44 64 00 03 02 40 46 27 01 40 00  // .....Dd...@F'.@.
    AE10: 3E 05 40 9C 18 00 00 47 53 00 03 05 40 00 32 00  // >.@....GS...@.2.
    AE20: 00 3E 05 40 C8 00 00 00 46 64 00 03 05 40 C8 00  // .>.@....Fd...@..
    AE30: 00 00 66 FF 2D 0D 42 C7 00 3E 0C 40 02 00 47 7B  // ..f.-.B..>.@..G{
    AE40: 00 2D 0D 42 08 00 43 6B 00 33 0C 40 00 00 03 0C  // .-.B..Ck.3.@....
    AE50: 01 06 00 3E 0D 01 19 00 49 9A 00 27 0D 40 32 00  // ...>....I..'.@2.
    AE60: 21 0D 40 02 00 43 9F 00 27 0C 40 06 00 2D 0C 40  // !.@..C..'.@..-.@
    AE70: 04 00 02 E2 00 40 33 0C 40 04 00 21 0C 40 06 00  // .....@3.@..!.@..
    AE80: 2D 0C 40 00 00 27 02 46 40 02 0A 00 40 02 B2 00  // -.@..'.F@...@...
    AE90: 40 5B 7A 20 00 C8 00 40 06 08 00 19 00 40 06 80  // @[z ...@.....@..
    AEA0: 0C 40 00 32 00 80 0C 38 18 60 00 64 00 00 32 00  // .@.2...8.`.d..2.
    AEB0: 32 7F 00 64 00 00 07 00 02 01 00 00 5B 00 14 03  // 2..d........[...
    AEC0: 01 05 00 00 37 00 00 0E 25 00 60 52 14 08 25 00  // ....7...%.`R..%.
    AED0: 0F 42 29 00 63 0F 53 00 63 11 09 02 63 12 66 02  // .B).c.S.c...c.f.
    AEE0: 63 01 CC 02 63 00 F5 02 63 08 D8 01 63 09 B9 01  // c...c...c...c...
    AEF0: 63 0A C0 01 63 13 C8 01 63 14 D0 01 63 0B E0 01  // c...c...c...c...
    AF00: 63 0C BC 02 63 0D E8 01 63 10 01 02 5A 5A 43 B5  // c...c...c...ZZC.
    AF10: 01 54 00 9A 55 01 0D 2B 55 1F 00 3D A5 00 00 44  // .T..U..+U..=...D
    AF20: 72 00 3D A5 00 02 44 A2 01 3D A5 00 05 49 A2 01  // r.=...D..=...I..
    AF30: 54 00 C9 55 3D 25 02 00 49 81 00 02 25 02 02 32  // T..U=%..I...%..2
    AF40: 25 02 01 01 E1 C9 55 02 4A 25 CC 55 01 49 B5 01  // %.....U.J%.U.I..
    AF50: 7B 05 01 00 80 00 00 7E 05 40 8C 0A 00 00 56 00  // {......~.@....V.
    AF60: 46 03 29 46 02 27 02 40 46 07 65 D0 55 FE 01 05  // F.)F.'.@F.e.U...
    AF70: D1 55 00 80 00 00 01 02 D2 55 40 0D E5 D3 55 10  // .U.......U@...U.
    AF80: 0D 65 28 55 04 51 01 07 65 28 55 FB 51 01 03 21  // .e(U.Q..e(U.Q..!
    AF90: 40 02 15 25 40 05 01 E2 CA 55 40 54 20 CE 55 02  // @..%@....U@T .U.
    AFA0: A0 02 28 55 03 0A 46 48 08 A5 02 07 56 00 40 03  // ..(U..FH....V.@.
    AFB0: 31 40 02 21 0D 40 80 00 03 8A 46 40 03 0A 48 40  // 1@.!.@....F@..H@
    AFC0: 03 88 40 EA 4F 03 08 40 EF 4F 2D 05 40 01 00 01  // ..@.O..@.O-.@...
    AFD0: 00 03 98 41 EB 4F 03 18 41 F6 4F 03 0A 48 46 01  // ...A.O..A.O..HF.
    AFE0: 02 0C 56 40 01 02 0D 56 41 03 1A 48 46 03 00 40  // ..V@...VA..HF..@
    AFF0: EB 4F 33 1A 40 40 33 08 40 BE 41 33 08 40 BE 41  // .O3.@@3.@.A3.@.A
    B000: 03 00 41 F6 4F 33 1A 41 41 33 08 41 BF 41 33 08  // ..A.O3.AA3.A.A3.
    B010: 41 BF 41 03 0A 48 46 01 0A 0F 56 41 01 8A 0F 56  // A.A..HF...VA...V
    B020: 40 03 1A 48 46 03 00 40 EC 4F 33 8A 40 40 03 00  // @..HF..@.O3.@@..
    B030: 41 F7 4F 33 8A 41 41 4A 25 ED 4F 01 44 85 01 0F  // A.O3.AAJ%.O.D...
    B040: E5 40 80 4A 25 F8 4F 01 44 91 01 0F E5 41 80 03  // .@.J%.O.D....A..
    B050: 0A 48 46 01 1A 0E 56 41 01 9A 0E 56 40 43 B5 01  // .HF...VA...V@C..
    B060: 07 E5 28 55 2F 0D 65 28 55 04 51 01 07 65 28 55  // ..(U/.e(U.Q..e(U
    B070: FB 51 01 3A 00 00 5B 54 20 D8 55 43 B5 01 01 25  // .Q.:..[T .UC...%
    B080: D8 55 01 43 B5 01 01 25 D8 55 02 43 B5 01 01 25  // .U.C...%.U.C...%
    B090: D8 55 03 43 B5 01 07 25 C8 55 EF 43 B5 01 0D 25  // .U.C...%.U.C...%
    B0A0: C8 55 10 43 B5 01 0D 65 D0 55 01 51 0A 07 25 CD  // .U.C...e.U.Q..%.
    B0B0: 55 FE 51 0A 01 0D CC 55 01 02 51 C8 43 B5 01 0D  // U.Q....U..Q.C...
    B0C0: 25 DE 55 10 43 B5 01 01 69 6F 55 02 3D A5 00 03  // %.U.C...ioU.=...
    B0D0: 49 25 02 4A 25 35 55 10 49 25 02 01 A5 6F 55 02  // I%.J%5U.I%...oU.
    B0E0: 43 2A 02 01 B1 6F 55 00 3D 25 02 00 44 3F 02 32  // C*...oU.=%..D?.2
    B0F0: 25 02 01 14 25 02 04 5C E1 6F 55 8F 02 3D A5 00  // %...%..\.oU..=..
    B100: 05 44 4D 02 3D A5 00 00 49 5E 02 02 A5 00 00 03  // .DM.=...I^......
    B110: 39 40 00 33 25 40 01 01 22 CB 55 40 02 E0 02 70  // 9@.3%@..".U@...p
    B120: 55 43 B5 01 02 E0 02 70 55 4B E5 02 01 44 B5 01  // UC.....pUK...D..
    B130: 02 B0 00 6F 55 3D A5 00 00 44 8C 02 3D A5 00 05  // ...oU=...D..=...
    B140: 44 8C 02 02 E5 00 04 43 95 02 02 E0 00 CB 55 2C  // D......C......U,
    B150: E5 00 01 3D A5 00 02 44 A3 02 3D A5 00 03 49 AC  // ...=...D..=...I.
    B160: 02 54 00 70 55 50 02 43 B5 01 02 A5 00 00 03 31  // .T.pUP.C.......1
    B170: 43 00 4A 62 6F 55 44 44 B5 01 54 08 CC 55 51 C8  // C.JboUDD..T..UQ.
    B180: 0D 25 CD 55 01 51 32 43 B5 01 0D 25 70 55 01 3D  // .%.U.Q2C...%pU.=
    B190: A5 00 00 44 E1 02 01 0D A1 55 0F 01 43 B5 01 03  // ...D.....U..C...
    B1A0: 39 43 00 03 02 40 44 33 25 40 01 01 0A A1 55 40  // 9C...@D3%@....U@
    B1B0: 43 B5 01 54 00 A1 55 07 25 70 55 FE 07 0D 6F 55  // C..T..U.%pU...oU
    B1C0: FF 80 07 25 35 55 EF 54 20 C8 55 54 20 D8 55 43  // ...%5U.T .UT .UC
    B1D0: B5 01 0C 01 01 06 04 00 37 00 00 42 29 00 63 07  // ........7..B).c.
    B1E0: EA 00 63 01 25 00 63 00 C0 00 63 0B ED 00 63 04  // ..c.%.c...c...c.
    B1F0: F2 00 5A 5A 43 05 01 02 65 00 10 52 4D 3D 65 00  // ..ZZC...e..RM=e.
    B200: 00 44 E6 00 02 65 00 11 52 04 4B E5 02 01 49 E6  // .D...e..R.K...I.
    B210: 00 3D A5 00 00 49 57 00 03 01 00 00 02 65 00 0F  // .=...IW......e..
    B220: 55 38 00 52 4D 02 02 00 00 02 65 00 0A 55 08 02  // U8.RM.....e..U..
    B230: 52 4D 3D A5 00 00 49 70 00 02 65 00 0B 52 4D 43  // RM=...Ip..e..RMC
    B240: 79 00 02 65 00 0E 52 4D 43 AD 00 20 05 01 64 00  // y..e..RMC.. ..d.
    B250: 00 00 02 05 01 14 1E 00 02 2C 21 01 00 03 01 00  // .........,!.....
    B260: 00 02 02 00 40 52 0C 26 05 00 64 00 00 00 02 02  // ....@R.&..d.....
    B270: 01 40 02 02 00 00 02 65 00 01 55 08 02 52 4D 51  // .@.....e..U..RMQ
    B280: 05 02 65 00 01 52 04 51 0A 02 65 00 09 52 4D 43  // ..e..R.Q..e..RMC
    B290: E6 00 02 65 00 12 52 04 4B E5 02 01 44 E6 00 02  // ...e..R.K...D...
    B2A0: 65 00 08 52 4D 02 65 00 00 52 04 3D A5 00 00 49  // e..RM.e..R.=...I
    B2B0: E6 00 02 65 00 00 52 4D 3A 00 00 5B 43 E6 00 52  // ...e..RM:..[C..R
    B2C0: 4D 43 E6 00 66 06 02 29 00 00 02 68 00 4E 00 02  // MC..f..)...h.N..
    B2D0: 8C 00 20 00 52 33 5B 02 29 00 00 52 33 5B F6 0F  // .. .R3[.)..R3[..
    B2E0: 02 02 08 00 37 00 00 4A 25 48 00 01 44 12 00 5B  // ....7..J%H..D..[
    B2F0: 66 FF 2D 0D 42 A1 0F 56 00 40 03 21 40 00 15 25  // f.-.B..V.@.!@..%
    B300: 40 01 2D 0A 42 40 03 0C 48 00 00 3D 65 00 10 49  // @.-.B@..H..=e..I
    B310: 76 00 02 65 00 01 3D 25 00 03 45 9A 0F 4A A5 F7  // v..e..=%..E..J..
    B320: 5D 01 44 9A 0F 02 65 00 00 4A A5 15 5E 02 49 9A  // ].D...e..J..^.I.
    B330: 0F 0D 25 16 5E 01 07 05 15 5E FF FF FB FF 3D E5  // ..%.^....^....=.
    B340: 00 04 45 6F 00 4A A5 15 5E 01 44 9A 0F 02 65 00  // ..Eo.J..^.D...e.
    B350: 01 43 9A 0F 3D 25 00 03 48 87 00 03 05 00 01 01  // .C..=%..H.......
    B360: 01 01 43 C7 00 4A A5 F7 5D 01 44 7D 00 4A A5 15  // ..C..J..].D}.J..
    B370: 5E 02 49 9A 0F 0D 25 16 5E 01 07 05 15 5E FF FF  // ^.I...%.^....^..
    B380: FB FF 03 05 00 01 00 00 00 3D E5 00 01 44 C7 00  // .........=...D..
    B390: 03 05 00 01 01 00 00 3D E5 00 02 44 C7 00 03 05  // .......=...D....
    B3A0: 00 01 01 01 01 42 29 00 63 07 F1 00 63 0A 51 06  // .....B).c...c.Q.
    B3B0: 63 01 5E 07 63 00 EB 08 63 09 94 0A 63 08 04 0C  // c.^.c...c...c...
    B3C0: 63 0B 51 0E 63 0E 6D 0D 63 0F 59 01 5A 5A 5B 01  // c.Q.c.m.c.Y.ZZ[.
    B3D0: 05 FD 5D 00 00 00 00 01 05 EE 5D 00 40 00 00 5C  // ..].......].@..\
    B3E0: 05 F0 5D FF FF 0F FE 00 00 D0 00 56 00 40 3D 25  // ..]........V.@=%
    B3F0: 00 03 45 56 01 0D A5 00 5E 20 01 05 F4 5D 5A 00  // ..EV....^ ...]Z.
    B400: 00 00 01 05 F5 5D 05 00 00 00 03 05 40 EB 10 00  // .....]......@...
    B410: 00 01 02 F4 5D 40 01 05 F5 5D 07 00 00 00 2D 05  // ....]@...]....-.
    B420: 40 00 01 00 00 3E 05 40 EB 13 00 00 47 33 01 07  // @....>.@....G3..
    B430: A5 00 5E DF 43 9A 0F 4A A5 F7 5D 01 49 9A 0F 4A  // ..^.C..J..].I..J
    B440: 25 00 5E 01 49 8D 01 3C 25 F7 5D 00 49 8D 01 3C  // %.^.I..<%.].I..<
    B450: 71 F7 5D 00 49 8D 01 08 E5 00 01 03 00 40 F1 5D  // q.].I........@.]
    B460: 09 25 40 01 3E 39 40 00 44 9A 0F 54 20 F7 5D 07  // .%@.>9@.D..T .].
    B470: 4D F1 5D DF FE 4A 65 F1 5D 40 49 97 01 0D 05 03  // M.]..Je.]@I.....
    B480: 5E 01 01 01 01 0D 25 00 5E 01 0D A5 00 5E 20 0D  // ^.....%.^....^ .
    B490: 25 00 5E 01 0D 05 03 5E 01 01 01 01 03 39 40 00  // %.^....^.....9@.
    B4A0: 09 25 40 01 5C 22 F1 5D FE 40 5C 65 00 5E C1 02  // .%@.\".].@\e.^..
    B4B0: 0D 25 02 5E 08 3D 65 00 07 49 E6 01 07 E5 00 5E  // .%.^.=e..I.....^
    B4C0: 5F 43 EB 01 0D E5 00 5E A0 5C 05 06 5E BB BB FF  // _C.....^.\..^...
    B4D0: FF 33 33 00 00 5C 05 03 5E F7 F7 F7 F7 02 02 02  // .33..\..^.......
    B4E0: 02 66 1E 2D 0D 42 0C 03 03 21 43 00 03 A2 46 44  // .f.-.B...!C...FD
    B4F0: 4C A4 46 00 00 44 3A 02 56 00 40 2D 0D 42 01 00  // L.F..D:.V.@-.B..
    B500: 03 21 40 00 2D 0A 42 40 03 24 40 00 00 03 62 40  // .!@.-.B@.$@...b@
    B510: 40 03 8A 40 40 43 59 02 66 07 2D 0C 42 0A 00 56  // @..@@CY.f.-.B..V
    B520: 00 40 20 25 00 0C 2D 0A 42 40 03 24 40 09 00 03  // .@ %..-.B@.$@...
    B530: 62 40 40 03 8A 40 40 5C 02 04 5E F8 F8 F8 F8 40  // b@@..@@\..^....@
    B540: 03 21 43 00 03 A2 46 44 3D A5 00 00 44 FD 02 03  // .!C...FD=...D...
    B550: 05 40 04 00 00 00 66 1E 2D 0D 42 C4 00 3D A5 00  // .@....f.-.B..=..
    B560: 02 44 AC 02 2D 0D 42 0C 00 3D 05 01 30 75 00 00  // .D..-.B..=..0u..
    B570: 47 AC 02 3D 05 01 40 9C 00 00 46 A7 02 2D 0D 42  // G..=..@...F..-.B
    B580: 28 02 43 AC 02 2D 0D 42 0C 00 4C A4 46 05 00 44  // (.C..-.B..L.F..D
    B590: CF 02 03 04 40 00 00 3E 05 40 00 00 00 00 44 CF  // ....@..>.@....D.
    B5A0: 02 03 24 40 0A 00 09 25 40 1C 43 BE 03 66 07 2D  // ..$@...%@.C..f.-
    B5B0: 0C 42 04 00 03 04 41 00 00 3E 05 41 00 00 00 00  // .B....A..>.A....
    B5C0: 44 BE 03 4C A4 46 06 00 49 F5 02 2D 0D 42 0C 00  // D..L.F..I..-.B..
    B5D0: 43 D6 02 03 24 40 07 00 43 BE 03 03 05 40 05 00  // C...$@..C....@..
    B5E0: 00 00 66 1E 2D 0D 42 C0 02 03 0C 46 02 00 4C A4  // ..f.-.B....F..L.
    B5F0: 46 00 00 49 5F 03 66 1E 2D 0D 42 E8 00 3D 05 01  // F..I_.f.-.B..=..
    B600: 48 3F 00 00 47 52 03 66 1E 2D 0D 42 50 02 3D 05  // H?..GR.f.-.BP.=.
    B610: 01 78 69 00 00 47 52 03 66 1E 2D 0D 42 88 02 3D  // .xi..GR.f.-.B..=
    B620: 05 01 F0 D2 00 00 47 52 03 66 1E 2D 0D 42 20 01  // ......GR.f.-.B .
    B630: 03 0C 46 02 00 4C A4 46 00 00 44 8E 03 2D 0D 42  // ..F..L.F..D..-.B
    B640: 06 00 56 20 41 3D A4 00 00 00 44 82 03 2D 25 41  // ..V A=....D..-%A
    B650: 01 3E 25 41 0A 44 8E 03 2D 0D 42 05 00 43 67 03  // .>%A.D..-.B..Cg.
    B660: 03 24 40 04 00 09 25 40 1C 43 BE 03 66 07 2D 0C  // .$@...%@.C..f.-.
    B670: 42 08 00 03 04 41 00 00 3E 05 41 00 00 00 00 44  // B....A..>.A....D
    B680: BE 03 4C A4 46 04 00 49 B4 03 2D 0D 42 44 00 43  // ..L.F..I..-.BD.C
    B690: 95 03 2D 0D 42 08 00 03 24 40 05 00 15 05 40 1A  // ..-.B...$@....@.
    B6A0: 5C 02 12 5E FF FF FF E3 40 07 65 00 5E FE 3D A5  // \..^....@.e.^.=.
    B6B0: 00 00 49 76 04 5C 05 0B 5E FF FF 8F FF 00 00 10  // ..Iv.\..^.......
    B6C0: 00 0D 05 0C 5E 01 01 00 00 5C 05 0B 5E 0F 00 FF  // ....^....\..^...
    B6D0: FF 40 17 00 00 0D 05 0E 5E 00 00 00 01 01 05 07  // .@......^.......
    B6E0: 5E 01 00 00 80 01 05 0A 5E 00 00 00 00 01 05 09  // ^.......^.......
    B6F0: 5E 87 39 01 00 01 05 08 5E 48 E9 00 00 01 05 0D  // ^.9.....^H......
    B700: 5E 00 00 00 00 5C 05 0B 5E FF FF F8 FF 00 00 00  // ^....\..^.......
    B710: 00 5C 05 0C 5E 8F FF FF FF 20 00 00 00 0D 05 0E  // .\..^.... ......
    B720: 5E 00 00 00 10 07 05 0C 5E FB FF FF FF 01 05 0F  // ^.......^.......
    B730: 5E 3E 00 48 B0 01 05 10 5E 3E 00 18 26 01 05 11  // ^>.H....^>..&...
    B740: 5E 3E 00 80 3F 5C 05 12 5E 00 00 00 1C 3E 00 44  // ^>..?\..^....>.D
    B750: 00 43 0A 05 5C 05 0B 5E FF FF 8F FF 00 00 00 00  // .C..\..^........
    B760: 0D 05 0C 5E 01 01 00 00 5C 05 0B 5E 0F 00 FF FF  // ...^....\..^....
    B770: 00 0B 00 00 0D 05 0E 5E 00 00 00 01 01 05 07 5E  // .......^.......^
    B780: 03 00 AA 22 54 00 0A 5E 01 05 09 5E C1 0A 00 00  // ..."T..^...^....
    B790: 01 05 08 5E 00 10 00 00 01 05 0D 5E 00 00 00 00  // ...^.......^....
    B7A0: 5C 05 0B 5E FF FF F8 FF 00 00 04 00 07 05 0C 5E  // \..^...........^
    B7B0: 8F FF FF FF 0D 05 0E 5E 00 00 00 10 0D 05 0C 5E  // .......^.......^
    B7C0: 04 00 00 00 01 05 0F 5E 3E 00 08 B0 01 05 10 5E  // .......^>......^
    B7D0: 3E 00 1C 12 01 05 11 5E 3E 00 00 3E 5C 05 12 5E  // >......^>..>\..^
    B7E0: 00 00 00 1C 3E 00 44 00 0D A5 06 5E 08 0D 25 F3  // ....>.D....^..%.
    B7F0: 5D 01 0D 65 F1 5D 20 4A 65 F1 5D 40 49 19 05 0D  // ]..e.] Je.]@I...
    B800: A5 F1 5D 01 07 25 00 5E FE 07 05 03 5E FE FE FE  // ..]..%.^....^...
    B810: FE 4A E5 00 5E 10 44 33 05 66 07 2D 0C 42 0C 00  // .J..^.D3.f.-.B..
    B820: 03 04 40 00 00 3E 05 40 FF FF FF FF 44 65 05 01  // ..@..>.@....De..
    B830: 04 F4 5D 00 00 01 04 F5 5D 04 00 2D 0D 42 08 00  // ..].....]..-.B..
    B840: 43 42 05 01 05 F4 5D 38 20 00 00 01 05 F5 5D 0C  // CB....]8 .....].
    B850: 00 00 00 56 00 01 4A 05 03 5E 20 20 20 20 44 9E  // ...V..J..^    D.
    B860: 05 51 02 2D 05 01 01 00 00 00 3E 05 01 A0 86 01  // .Q.-......>.....
    B870: 00 49 78 05 01 25 F7 5D 03 43 9A 0F 03 00 40 04  // .Ix..%.].C....@.
    B880: 5E 09 05 40 07 00 00 00 21 05 40 03 00 00 00 03  // ^..@....!.@.....
    B890: 05 41 21 20 00 00 2D 02 41 40 01 02 F4 5D 41 03  // .A! ..-.A@...]A.
    B8A0: 00 41 F5 5D 01 05 F4 5D 84 00 00 00 01 02 F5 5D  // .A.]...].......]
    B8B0: 41 03 05 41 22 20 00 00 2D 02 41 40 01 02 F4 5D  // A..A" ..-.A@...]
    B8C0: 41 03 00 41 F5 5D 01 05 F4 5D 85 00 00 00 01 02  // A..A.]...]......
    B8D0: F5 5D 41 03 00 40 12 5E 09 05 40 00 00 00 1C 1B  // .]A..@.^..@.....
    B8E0: 05 40 16 01 05 F4 5D 22 00 00 00 03 00 41 F5 5D  // .@....]".....A.]
    B8F0: 09 25 41 0F 0F 22 41 40 0F 25 41 80 01 05 F4 5D  // .%A.."A@.%A....]
    B900: 22 00 00 00 01 02 F5 5D 41 56 00 41 3D A5 00 00  // "......]AV.A=...
    B910: 49 43 06 5C A5 0B 5E F8 00 07 65 00 5E FE 43 9A  // IC.\..^...e.^.C.
    B920: 0F 5C A5 0B 5E F8 01 0D 65 00 5E 01 43 9A 0F 03  // .\..^...e.^.C...
    B930: 0A 46 48 66 07 2D 0C 42 0A 00 56 00 40 20 25 00  // .FHf.-.B..V.@ %.
    B940: 0C 2D 0A 42 40 20 25 00 02 03 0A 48 40 01 04 2E  // .-.B@ %....H@...
    B950: 5D 00 00 07 E5 2D 5D FC 03 0A 48 46 66 1E 2D 0D  // ]....-]...HFf.-.
    B960: 42 04 03 03 21 43 00 03 A2 46 44 4C A4 46 00 00  // B...!C...FDL.F..
    B970: 44 E7 06 56 00 40 56 00 41 2D 0D 42 01 00 03 21  // D..V.@V.A-.B...!
    B980: 40 00 2D 0A 42 40 3D 25 00 03 45 B4 06 0D A5 00  // @.-.B@=%..E.....
    B990: 5E 20 03 24 41 00 00 03 05 40 EB 10 00 00 01 02  // ^ .$A....@......
    B9A0: F4 5D 40 01 02 F5 5D 41 2D 05 40 00 01 00 00 3E  // .]@...]A-.@....>
    B9B0: 05 40 EB 13 00 00 47 C0 06 3D 25 00 03 45 E7 06  // .@....G..=%..E..
    B9C0: 07 A5 00 5E DF 3D A5 00 00 49 22 07 66 FF 2D 0D  // ...^.=...I".f.-.
    B9D0: 42 AE 0F 03 04 40 04 00 3D 04 01 00 00 44 1B 07  // B....@..=....D..
    B9E0: 2D 0D 42 08 00 03 04 40 00 00 3E 05 40 00 00 00  // -.B....@..>.@...
    B9F0: 00 49 F5 06 03 04 40 04 00 5C 9A 10 5E 03 00 40  // .I....@..\..^..@
    BA00: 03 05 40 01 01 01 01 4A A5 F7 5D 01 44 40 07 4A  // ..@....J..].D@.J
    BA10: A5 06 5E 01 49 40 07 09 05 40 FF FF FE FE 0D 02  // ..^.I@...@......
    BA20: 03 5E 40 51 05 03 02 40 00 69 05 40 FF FF FF FF  // .^@Q...@.i.@....
    BA30: 07 02 03 5E 40 51 C8 51 C8 43 9A 0F 4A 25 FC 5D  // ...^@Q.Q.C..J%.]
    BA40: 01 49 9A 0F 3C 25 F7 5D 00 49 9A 0F 4C 25 00 01  // .I..<%.].I..L%..
    BA50: 44 7D 07 0D 05 06 5E 04 00 00 00 4C 65 00 01 44  // D}....^....Le..D
    BA60: 8C 07 0D 05 06 5E 40 00 00 00 4C A5 00 01 44 9B  // .....^@...L...D.
    BA70: 07 0D 05 06 5E 00 04 00 00 4C E5 00 01 44 AA 07  // ....^....L...D..
    BA80: 0D 05 06 5E 00 40 00 00 03 02 40 00 15 05 40 04  // ...^.@....@...@.
    BA90: 0D 02 03 5E 40 56 00 01 4A 25 FC 5D 01 49 9A 0F  // ...^@V..J%.].I..
    BAA0: 03 02 40 00 15 05 40 05 03 00 41 03 5E 09 02 41  // ..@...@...A.^..A
    BAB0: 40 09 05 40 20 20 20 20 3E 02 41 40 44 FC 07 51  // @..@    >.A@D..Q
    BAC0: 02 2D 05 01 01 00 00 00 3E 05 01 A0 86 01 00 49  // .-......>......I
    BAD0: BA 07 01 25 F7 5D 04 43 9A 0F 03 02 40 00 15 05  // ...%.].C....@...
    BAE0: 40 04 69 05 40 FF FF FF FF 07 02 03 5E 40 56 00  // @.i.@.......^@V.
    BAF0: 01 4A 25 FC 5D 01 49 9A 0F 03 02 40 00 15 05 40  // .J%.].I....@...@
    BB00: 05 03 00 41 03 5E 09 02 41 40 3E 05 41 00 00 00  // ...A.^..A@>.A...
    BB10: 00 44 51 08 51 02 2D 05 01 01 00 00 00 3E 05 01  // .DQ.Q.-......>..
    BB20: A0 86 01 00 49 13 08 01 25 F7 5D 05 43 9A 0F 56  // ....I...%.].C..V
    BB30: 00 01 4A 25 FC 5D 01 49 9A 0F 4A 25 0C 5E 80 49  // ..J%.].I..J%.^.I
    BB40: 7F 08 51 02 2D 05 01 01 00 00 00 3E 05 01 A0 86  // ..Q.-......>....
    BB50: 01 00 49 54 08 01 25 F7 5D 06 43 9A 0F 03 0A 41  // ..IT..%.].C....A
    BB60: 48 56 00 40 03 21 40 00 03 0A 48 40 0D 25 60 01  // HV.@.!@...H@.%`.
    BB70: 01 51 0A 03 0A 48 41 0D 25 E8 5D 03 4A 25 E8 5D  // .Q...HA.%.].J%.]
    BB80: 04 44 9E 08 0D 65 F1 5D 12 4A 65 F1 5D 04 44 AB  // .D...e.].Je.].D.
    BB90: 08 4C 25 00 01 44 BF 08 0D 65 F0 5D 10 4C 65 00  // .L%..D...e.].Le.
    BBA0: 01 44 CB 08 0D 65 F0 5D 20 4C A5 00 01 44 D7 08  // .D...e.] L...D..
    BBB0: 0D 65 F0 5D 40 4C E5 00 01 44 E3 08 0D 65 F0 5D  // .e.]@L...D...e.]
    BBC0: 80 01 71 F7 5D 00 43 9A 0F 4A 05 06 5E 44 44 00  // ..q.].C..J..^DD.
    BBD0: 00 44 9A 0F 07 65 F1 5D FD 07 25 E8 5D FD 03 0A  // .D...e.]..%.]...
    BBE0: 41 48 56 00 40 03 21 40 00 03 0A 48 40 07 25 60  // AHV.@.!@...H@.%`
    BBF0: 01 FE 03 0A 48 41 4C 25 00 01 44 27 09 07 05 06  // ....HAL%..D'....
    BC00: 5E FB FF FF FF 4C 65 00 01 44 36 09 07 05 06 5E  // ^....Le..D6....^
    BC10: BF FF FF FF 4C A5 00 01 44 45 09 07 05 06 5E FF  // ....L...DE....^.
    BC20: FB FF FF 4C E5 00 01 44 54 09 07 05 06 5E FF BF  // ...L...DT....^..
    BC30: FF FF 07 65 0C 5E FE 54 00 08 5E 54 00 09 5E 3D  // ...e.^.T..^T..^=
    BC40: 25 00 03 45 C2 09 03 00 40 06 5E 4C 25 00 01 44  // %..E....@.^L%..D
    BC50: 7F 09 5E 05 40 FC FF FF FF 03 00 00 00 4C 65 00  // ..^.@........Le.
    BC60: 01 44 91 09 5E 05 40 CF FF FF FF 30 00 00 00 4C  // .D..^.@....0...L
    BC70: A5 00 01 44 A3 09 5E 05 40 FF FC FF FF 00 03 00  // ...D..^.@.......
    BC80: 00 4C E5 00 01 44 B5 09 5E 05 40 FF CF FF FF 00  // .L...D..^.@.....
    BC90: 30 00 00 3C 02 06 5E 40 44 69 0A 01 02 06 5E 40  // 0..<..^@Di....^@
    BCA0: 03 02 40 00 15 05 40 04 0D 02 03 5E 40 56 00 01  // ..@...@....^@V..
    BCB0: 4A 25 FC 5D 01 49 14 0A 03 02 40 00 15 05 40 05  // J%.].I....@...@.
    BCC0: 03 00 41 03 5E 09 02 41 40 09 05 40 20 20 20 20  // ..A.^..A@..@    
    BCD0: 3E 02 41 40 44 14 0A 51 02 2D 05 01 01 00 00 00  // >.A@D..Q.-......
    BCE0: 3E 05 01 A0 86 01 00 49 D2 09 01 25 F7 5D 07 43  // >......I...%.].C
    BCF0: 9A 0F 03 02 40 00 15 05 40 04 69 05 40 FF FF FF  // ....@...@.i.@...
    BD00: FF 07 02 03 5E 40 56 00 01 4A 25 FC 5D 01 49 69  // ....^@V..J%.].Ii
    BD10: 0A 03 02 40 00 15 05 40 05 03 00 41 03 5E 09 02  // ...@...@...A.^..
    BD20: 41 40 3E 05 41 00 00 00 00 44 69 0A 51 02 2D 05  // A@>.A....Di.Q.-.
    BD30: 01 01 00 00 00 3E 05 01 A0 86 01 00 49 2B 0A 01  // .....>......I+..
    BD40: 25 F7 5D 08 43 9A 0F 03 02 40 00 15 05 40 02 69  // %.].C....@...@.i
    BD50: 05 40 FF FF FF FF 07 02 03 5E 40 03 02 40 00 15  // .@.......^@..@..
    BD60: 05 40 01 09 05 40 02 02 02 02 0D 02 03 5E 40 43  // .@...@.......^@C
    BD70: 9A 0F 4A 25 FC 5D 01 49 9A 0F 56 00 40 20 25 00  // ..J%.].I..V.@ %.
    BD80: 02 03 0A 41 48 03 02 48 40 0D E5 2E 5D 10 03 0A  // ...AH..H@...]...
    BD90: 48 41 3D A5 00 00 44 C0 0A 0D 65 F0 5D F0 0D A5  // HA=...D...e.]...
    BDA0: F0 5D 01 0D A5 E9 5D 01 3D A5 00 00 44 DC 0A 4A  // .]....].=...D..J
    BDB0: 05 06 5E 33 33 00 00 44 ED 0B 03 02 40 00 15 05  // ..^33..D....@...
    BDC0: 40 01 69 05 40 FF FF FF FF 07 02 03 5E 40 03 02  // @.i.@.......^@..
    BDD0: 40 00 15 05 40 02 09 05 40 04 04 04 04 0D 02 03  // @...@...@.......
    BDE0: 5E 40 03 00 40 06 5E 4C 25 00 01 44 17 0B 09 05  // ^@..@.^L%..D....
    BDF0: 40 FC FF FF FF 4C 65 00 01 44 25 0B 09 05 40 CF  // @....Le..D%...@.
    BE00: FF FF FF 4C A5 00 01 44 33 0B 09 05 40 FF FC FF  // ...L...D3...@...
    BE10: FF 4C E5 00 01 44 41 0B 09 05 40 FF CF FF FF 01  // .L...DA...@.....
    BE20: 02 06 5E 40 03 02 40 00 15 05 40 04 0D 02 03 5E  // ..^@..@...@....^
    BE30: 40 56 00 01 4A 25 FC 5D 01 49 9A 0F 03 02 40 00  // @V..J%.].I....@.
    BE40: 15 05 40 05 03 00 41 03 5E 09 02 41 40 09 05 40  // ..@...A.^..A@..@
    BE50: 20 20 20 20 3E 02 41 40 44 98 0B 51 02 2D 05 01  //     >.A@D..Q.-..
    BE60: 01 00 00 00 3E 05 01 A0 86 01 00 49 56 0B 01 25  // ....>......IV..%
    BE70: F7 5D 09 43 9A 0F 03 02 40 00 15 05 40 04 69 05  // .].C....@...@.i.
    BE80: 40 FF FF FF FF 07 02 03 5E 40 56 00 01 4A 25 FC  // @.......^@V..J%.
    BE90: 5D 01 49 9A 0F 03 02 40 00 15 05 40 05 03 00 41  // ].I....@...@...A
    BEA0: 03 5E 09 02 41 40 3E 05 41 00 00 00 00 44 ED 0B  // .^..A@>.A....D..
    BEB0: 51 02 2D 05 01 01 00 00 00 3E 05 01 A0 86 01 00  // Q.-......>......
    BEC0: 49 AF 0B 01 25 F7 5D 0A 43 9A 0F 03 02 40 00 15  // I...%.].C....@..
    BED0: 05 40 03 09 05 40 08 08 08 08 0D 02 03 5E 40 43  // .@...@.......^@C
    BEE0: 9A 0F 03 02 40 00 15 05 40 03 69 05 40 FF FF FF  // ....@...@.i.@...
    BEF0: FF 07 02 03 5E 40 3D 25 00 03 48 20 0D 03 00 40  // ....^@=%..H ...@
    BF00: 06 5E 4C 25 00 01 44 36 0C 5E 05 40 FC FF FF FF  // .^L%..D6.^.@....
    BF10: 03 00 00 00 4C 65 00 01 44 48 0C 5E 05 40 CF FF  // ....Le..DH.^.@..
    BF20: FF FF 30 00 00 00 4C A5 00 01 44 5A 0C 5E 05 40  // ..0...L...DZ.^.@
    BF30: FF FC FF FF 00 03 00 00 4C E5 00 01 44 6C 0C 5E  // ........L...Dl.^
    BF40: 05 40 FF CF FF FF 00 30 00 00 3C 02 06 5E 40 44  // .@.....0..<..^@D
    BF50: 20 0D 01 02 06 5E 40 03 02 40 00 15 05 40 04 0D  //  ....^@..@...@..
    BF60: 02 03 5E 40 56 00 01 4A 25 FC 5D 01 49 CB 0C 03  // ..^@V..J%.].I...
    BF70: 02 40 00 15 05 40 05 03 00 41 03 5E 09 02 41 40  // .@...@...A.^..A@
    BF80: 09 05 40 20 20 20 20 3E 02 41 40 44 CB 0C 51 02  // ..@    >.A@D..Q.
    BF90: 2D 05 01 01 00 00 00 3E 05 01 A0 86 01 00 49 89  // -......>......I.
    BFA0: 0C 01 25 F7 5D 07 43 9A 0F 03 02 40 00 15 05 40  // ..%.].C....@...@
    BFB0: 04 69 05 40 FF FF FF FF 07 02 03 5E 40 56 00 01  // .i.@.......^@V..
    BFC0: 4A 25 FC 5D 01 49 20 0D 03 02 40 00 15 05 40 05  // J%.].I ...@...@.
    BFD0: 03 00 41 03 5E 09 02 41 40 3E 05 41 00 00 00 00  // ..A.^..A@>.A....
    BFE0: 44 20 0D 51 02 2D 05 01 01 00 00 00 3E 05 01 A0  // D .Q.-......>...
    BFF0: 86 01 00 49 E2 0C 01 25 F7 5D 08 43 9A 0F 07 A5  // ...I...%.].C....
    C000: F0 5D FE 4C 25 00 01 44 31 0D 07 65 F0 5D EF 4C  // .].L%..D1..e.].L
    C010: 65 00 01 44 3D 0D 07 65 F0 5D DF 4C A5 00 01 44  // e..D=..e.].L...D
    C020: 49 0D 07 65 F0 5D BF 4C E5 00 01 44 55 0D 07 65  // I..e.].L...DU..e
    C030: F0 5D 7F 07 A5 E9 5D FE 56 00 40 20 25 00 02 03  // .]....].V.@ %...
    C040: 0A 48 40 07 E5 2E 5D EF 43 9A 0F 66 1E 2D 0D 42  // .H@...].C..f.-.B
    C050: C4 00 3D A5 00 02 44 A8 0D 2D 0D 42 0C 00 3D A5  // ..=...D..-.B..=.
    C060: 00 03 49 9A 0F 3D 05 01 30 75 00 00 47 A8 0D 3D  // ..I..=..0u..G..=
    C070: 05 01 40 9C 00 00 46 A3 0D 2D 0D 42 28 02 43 A8  // ..@...F..-.B(.C.
    C080: 0D 2D 0D 42 0C 00 03 21 43 00 03 A2 46 44 4C A4  // .-.B...!C...FDL.
    C090: 46 05 00 44 FF 0D 03 04 40 00 00 3E 05 40 00 00  // F..D....@..>.@..
    C0A0: 00 00 44 FF 0D 56 00 41 56 00 40 03 24 40 06 00  // ..D..V.AV.@.$@..
    C0B0: 09 25 40 3F 03 22 41 40 03 24 40 07 00 09 25 40  // .%@?."A@.$@...%@
    C0C0: 3F 15 0D 40 06 0F 0A 41 40 03 64 40 08 00 09 65  // ?..@...A@.d@...e
    C0D0: 40 3F 15 15 40 04 0F 52 41 40 43 76 0F 03 21 43  // @?..@..RA@Cv..!C
    C0E0: 00 03 A2 46 44 66 07 2D 0C 42 04 00 3D A5 00 03  // ...FDf.-.B..=...
    C0F0: 44 23 0E 66 07 2D 0C 42 06 00 3D A5 00 02 49 9A  // D#.f.-.B..=...I.
    C100: 0F 03 04 41 00 00 3E 05 41 00 00 00 00 44 9A 0F  // ...A..>.A....D..
    C110: 3D 02 01 41 46 41 0E 4C A4 46 06 00 49 49 0E 2D  // =..AFA.L.F..II.-
    C120: 0D 42 0C 00 43 23 0E 03 04 41 08 00 43 76 0F 08  // .B..C#...A..Cv..
    C130: A5 00 1B 66 1E 2D 0D 42 C0 02 03 21 43 00 03 A2  // ...f.-.B...!C...
    C140: 46 44 03 0C 46 02 00 4C A4 46 00 00 49 C0 0E 66  // FD..F..L.F..I..f
    C150: 1E 2D 0D 42 E8 00 3D 05 01 48 3F 00 00 47 AB 0E  // .-.B..=..H?..G..
    C160: 66 1E 2D 0D 42 50 02 3D 05 01 78 69 00 00 47 AB  // f.-.BP.=..xi..G.
    C170: 0E 66 1E 2D 0D 42 88 02 3D 05 01 F0 D2 00 00 47  // .f.-.B..=......G
    C180: AB 0E 66 1E 2D 0D 42 20 01 03 21 43 00 03 A2 46  // ..f.-.B ..!C...F
    C190: 44 03 0C 46 02 00 4C A4 46 00 00 44 1B 0F 2D 0D  // D..F..L.F..D..-.
    C1A0: 42 06 00 56 20 41 3D A4 00 00 00 44 E3 0E 2D 25  // B..V A=....D..-%
    C1B0: 41 01 3E 25 41 0A 44 1B 0F 2D 0D 42 05 00 43 C8  // A.>%A.D..-.B..C.
    C1C0: 0E 56 00 41 56 00 40 03 24 40 01 00 09 25 40 3F  // .V.AV.@.$@...%@?
    C1D0: 03 22 41 40 03 24 40 02 00 09 25 40 3F 15 0D 40  // ."A@.$@...%@?..@
    C1E0: 06 0F 0A 41 40 03 64 40 03 00 09 65 40 3F 15 15  // ...A@.d@...e@?..
    C1F0: 40 04 0F 52 41 40 43 76 0F 66 07 2D 0C 42 08 00  // @..RA@Cv.f.-.B..
    C200: 03 21 43 00 03 A2 46 44 03 04 41 00 00 3E 05 41  // .!C...FD..A..>.A
    C210: 00 00 00 00 44 9A 0F 3D 02 01 41 46 48 0F 4C A4  // ....D..=..AFH.L.
    C220: 46 04 00 49 50 0F 2D 0D 42 44 00 43 2A 0F 2D 0D  // F..IP.-.BD.C*.-.
    C230: 42 08 00 3D A4 00 00 00 44 71 0F 03 24 41 00 00  // B..=....Dq..$A..
    C240: 3E 25 41 18 44 71 0F 2D 0D 42 06 00 43 55 0F 03  // >%A.Dq.-.B..CU..
    C250: 04 41 01 00 5C 02 0F 5E 00 00 FC FF 41 5C 02 10  // .A..\..^....A\..
    C260: 5E 00 00 FC FF 41 5C 02 11 5E 00 00 FC FF 41 5C  // ^....A\..^....A\
    C270: 02 12 5E 00 00 FC FF 41 3A 00 00 5B 7A 0A 00 00  // ..^....A:..[z...
    C280: 00 D8 00 B0 01 88 02 60 03 7A 48 00 48 3F 00 00  // .......`.zH.H?..
    C290: 00 00 10 28 78 69 00 00 00 00 10 28 F0 D2 00 00  // ...(xi.....(....
    C2A0: 00 00 10 26 68 3C 01 00 00 00 10 26 60 54 00 00  // ...&h<.....&`T..
    C2B0: 00 00 10 26 EC 5E 00 00 00 00 10 2A 90 7E 00 00  // ...&.^.....*.~..
    C2C0: 00 00 10 28 C0 A8 00 00 00 00 10 26 00 00 00 00  // ...(.......&....
    C2D0: 00 00 10 28 1B 02 01 02 00 00 37 00 00 3D 0D 00  // ...(......7..=..
    C2E0: 00 00 44 CE 01 56 00 41 03 21 41 01 09 25 41 0F  // ..D..V.A.!A..%A.
    C2F0: 15 0D 41 02 03 0A 40 42 66 FF 2D 0D 42 07 02 2D  // ..A...@Bf.-.B..-
    C300: 0A 42 41 03 0C 48 02 00 0D A5 90 5D 01 54 08 90  // .BA..H.....].T..
    C310: 5D 03 0C 48 00 00 03 F9 41 01 15 3D 41 04 5C BA  // ]..H....A..=A.\.
    C320: 10 54 8F 41 03 0A 42 40 4A 25 10 54 01 49 81 00  // .T.A..B@J%.T.I..
    C330: 0D 0D 10 54 01 01 0D 25 10 54 10 4A 25 10 54 20  // ...T...%.T.J%.T 
    C340: 44 67 00 07 25 10 54 EF 4A 25 10 54 20 49 74 00  // Dg..%.T.J%.T It.
    C350: 0D 25 13 54 40 56 00 41 03 09 41 00 3B 02 41 03  // .%.T@V.A..A.;.A.
    C360: 3B 41 00 1B 25 41 04 01 A2 11 54 41 03 69 41 01  // ;A..%A....TA.iA.
    C370: 15 2D 41 04 01 2A 11 54 41 56 00 40 0F E5 40 80  // .-A..*.TAV.@..@.
    C380: 03 73 40 00 01 02 16 54 40 56 00 40 03 6B 40 00  // .s@....T@V.@.k@.
    C390: 01 02 16 54 40 03 63 40 00 01 02 16 54 40 03 7B  // ...T@.c@....T@.{
    C3A0: 40 00 09 65 40 0F 01 02 16 54 40 3E 25 41 04 47  // @..e@....T@>%A.G
    C3B0: 10 01 33 25 41 04 2D 05 46 04 00 00 00 03 63 40  // ..3%A.-.F.....c@
    C3C0: 00 01 02 16 54 40 03 6B 40 00 01 02 16 54 40 03  // ....T@.k@....T@.
    C3D0: 73 40 00 01 02 16 54 40 03 7B 40 00 01 02 16 54  // s@....T@.{@....T
    C3E0: 40 43 D7 00 0D 25 13 54 02 0D 25 11 54 01 03 29  // @C...%.T..%.T..)
    C3F0: 40 01 21 25 40 0A 2D 25 40 96 4A 25 14 54 01 49  // @.!%@.-%@.J%.T.I
    C400: 42 01 51 14 33 25 40 01 3E 25 40 00 49 26 01 02  // B.Q.3%@.>%@.I&..
    C410: 65 01 01 43 CA 01 4A 05 14 54 F0 8F FF 00 44 54  // e..C..J..T....DT
    C420: 01 02 65 01 02 43 CA 01 01 05 16 54 01 00 00 80  // ..e..C.....T....
    C430: 03 00 40 16 54 02 6A 01 40 02 B8 01 14 54 08 A5  // ..@.T.j.@....T..
    C440: 01 1F 3D A5 01 00 46 7C 01 02 65 01 03 43 CA 01  // ..=...F|..e..C..
    C450: 32 A5 01 01 3D 8D 00 00 00 44 CA 01 3D A5 01 00  // 2...=....D..=...
    C460: 44 CA 01 03 31 41 01 03 19 40 00 56 18 40 3B 02  // D...1A...@.V.@;.
    C470: 40 03 28 40 16 54 03 68 40 16 54 03 A8 40 16 54  // @.(@.T.h@.T..@.T
    C480: 03 E8 40 16 54 04 02 00 40 3E 25 41 04 47 CA 01  // ..@.T...@>%A.G..
    C490: 33 25 41 04 2D 05 46 04 00 00 00 43 9D 01 3A 00  // 3%A.-.F....C..:.
    C4A0: 00 5B 66 FF 2D 0D 42 07 02 03 0C 48 00 00 01 8D  // .[f.-.B....H....
    C4B0: 18 54 18 00 01 05 19 54 4D 1C 02 00 01 05 1A 54  // .T.....TM......T
    C4C0: 10 11 3D 10 2D 0D 42 04 00 2C 25 00 01 3D 25 00  // ..=.-.B..,%..=%.
    C4D0: 05 49 D5 01 56 08 48 5B 7A 14 00 00 00 00 00 1C  // .I..V.H[z.......
    C4E0: 00 04 00 38 00 08 00 54 00 0C 00 70 00 10 00 00  // ...8...T...p....
    C4F0: 5A 00 01 02 00 04 02 25 01 04 03 31 41 00 09 0D  // Z......%...1A...
    C500: 41 0F 00 15 0D 41 01 66 FF 2D 0D 42 50 00 2D 0A  // A....A.f.-.BP.-.
    C510: 42 41 03 0C 48 00 00 07 A5 90 5D FE 01 0D 90 5D  // BA..H.....]....]
    C520: 11 11 50 02 4A 0D 93 5D 01 00 49 41 00 02 25 01  // ..P.J..]..IA..%.
    C530: 13 54 08 90 5D 54 00 92 5D 3A 00 00 5B 7A 0A 00  // .T..]T..]:..[z..
    C540: 00 00 04 00 08 00 0C 00 10 00 62 01 02 01 04 04  // ..........b.....
    C550: 37 00 00 42 21 00 63 07 29 00 63 03 4E 00 63 02  // 7..B!.c.).c.N.c.
    C560: 60 00 63 04 84 00 63 0C 19 01 63 0D 22 01 5A 5A  // `.c...c...c.".ZZ
    C570: 43 61 01 01 0D 45 5D 9F 0F 66 06 01 24 47 5D 30  // Ca...E]..f..$G]0
    C580: 00 01 4C 47 5D 31 00 03 24 46 3B 00 3E 25 46 00  // ..LG]1..$F;.>%F.
    C590: 44 61 01 54 20 47 5D 5B 0D E5 47 5D 01 5C 05 43  // Da.T G][..G].\.C
    C5A0: 5D FF FF FF FD 11 00 03 00 5B 0D E5 47 5D 01 4A  // ]........[..G].J
    C5B0: 25 44 5D 02 44 72 00 0D A5 43 5D 01 0D A5 43 5D  // %D].Dr...C]...C]
    C5C0: 02 5C 05 43 5D EF FF FF FD 01 00 00 00 5B 4A 05  // .\.C]........[J.
    C5D0: 53 00 00 02 00 00 44 94 00 0D 25 4B 5D 01 3D 8D  // S.....D...%K].=.
    C5E0: 00 00 00 44 18 01 03 05 46 00 36 6E 01 56 00 41  // ...D....F.6n.V.A
    C5F0: 03 19 41 00 21 05 41 FF 0F 00 00 27 02 46 40 3E  // ..A.!.A....'.F@>
    C600: 05 41 00 00 00 00 44 C4 00 2D 0D 40 01 00 01 8A  // .A....D..-.@....
    C610: 45 5D 40 56 00 41 03 19 41 00 21 02 40 41 27 02  // E]@V.A..A.!.@A'.
    C620: 46 40 01 A5 4A 5D 0C 01 0A 4A 5D 40 15 05 40 04  // F@..J]...J]@..@.
    C630: 56 00 41 03 29 41 00 3E 25 41 FF 49 F9 00 2D 0D  // V.A.)A.>%A.I..-.
    C640: 41 01 00 21 02 40 41 1B 05 40 08 01 0A 48 5D 40  // A..!.@A..@...H]@
    C650: 0D E5 48 5D C0 07 25 4B 5D FE 4A 65 4B 5D 01 49  // ..H]..%K].JeK].I
    C660: 10 01 5B 01 05 43 5D 00 00 03 00 5B 0D E5 47 5D  // ..[..C]....[..G]
    C670: 01 4A 05 43 5D 01 00 00 00 44 48 01 4A 05 43 5D  // .J.C]....DH.J.C]
    C680: 10 00 00 00 49 55 01 4A 05 44 5D 01 00 00 00 49  // ....IU.J.D]....I
    C690: 3D 01 5C 05 43 5D FF FF FE FF 00 00 02 00 5B 5C  // =.\.C]........[\
    C6A0: 05 43 5D EF FF FD FD 01 00 00 00 5B 9E 00 03 02  // .C]........[....
    C6B0: 00 10 37 00 00 01 05 00 00 2C A8 01 00 03 00 46  // ..7......,.....F
    C6C0: 01 00 1B 05 46 08 3D 65 02 00 49 25 00 2C 22 02  // ....F.=e..I%.,".
    C6D0: 46 3D E5 02 00 49 30 00 2C A2 02 46 3D 65 02 02  // F=...I0.,..F=e..
    C6E0: 49 37 00 03 01 40 03 09 05 40 00 00 00 FC 3E 05  // I7...@...@....>.
    C6F0: 40 00 00 00 D0 49 5D 00 01 05 63 C0 00 00 00 40  // @....I]...c....@
    C700: 55 00 00 55 20 02 43 61 00 54 00 63 C0 01 01 64  // U..U .Ca.T.c...d
    C710: C0 00 56 00 40 03 21 40 02 01 02 65 C0 40 01 01  // ..V.@.!@...e.@..
    C720: 66 C0 01 03 31 40 02 01 02 67 C0 40 01 01 E8 C0  // f...1@...g.@....
    C730: 03 3D 65 02 01 44 95 00 3D E5 02 01 44 95 00 51  // .=e..D..=...D..Q
    C740: 02 4A E5 A0 21 80 49 95 00 5B A4 01 02 02 00 00  // .J..!.I..[......
    C750: 37 00 00 3D 25 01 01 44 93 00 3D 25 01 02 44 94  // 7..=%..D..=%..D.
    C760: 00 3D 25 01 03 44 33 00 3D 25 01 00 49 8D 01 3D  // .=%..D3.=%..I..=
    C770: 05 00 00 00 00 00 49 61 00 3A 00 00 5B 3C 01 4A  // ......Ia.:..[<.J
    C780: 00 00 49 3C 00 5B 01 01 4A 00 00 26 05 00 64 00  // ..I<.[..J..&..d.
    C790: 00 00 02 02 01 40 02 05 00 07 00 00 00 52 13 20  // .....@.......R. 
    C7A0: 05 01 64 00 00 00 02 02 00 40 5B 3C 01 4B 00 00  // ..d......@[<.K..
    C7B0: 49 6A 00 5B 01 01 4B 00 00 54 20 A4 53 26 05 00  // Ij.[..K..T .S&..
    C7C0: 64 00 00 00 02 02 01 40 02 05 00 04 00 00 00 52  // d......@.......R
    C7D0: 13 20 05 01 64 00 00 00 02 02 00 40 5B 5B 66 FF  // . ..d......@[[f.
    C7E0: 2D 0D 42 94 01 56 00 41 03 39 41 01 15 25 41 02  // -.B..V.A.9A..%A.
    C7F0: 2D 0A 42 41 3D 65 01 0B 49 07 01 20 05 00 64 00  // -.BA=e..I.. ..d.
    C800: 00 00 03 0C 48 02 00 03 00 41 40 01 0F 25 41 10  // ....H....A@..%A.
    C810: 09 0D 41 DF FF 03 0C 48 00 00 4A 05 01 50 01 00  // ..A....H..J..P..
    C820: 00 00 44 F0 00 03 0C 48 02 00 3C 02 41 01 40 49  // ..D....H..<.A.@I
    C830: F0 00 3C 02 40 01 41 44 8D 01 03 0C 48 02 00 07  // ..<.@.AD....H...
    C840: 25 40 01 EF 01 02 41 01 40 01 0A 40 01 41 43 8D  // %@....A.@..@.AC.
    C850: 01 56 00 40 03 8D 40 0C 00 3D 65 01 18 44 1E 01  // .V.@..@..=e..D..
    C860: 03 A9 40 01 33 A5 40 14 03 31 40 01 09 25 40 03  // ..@.3.@..1@..%@.
    C870: 15 25 40 04 0F 0D 40 01 01 56 00 41 03 29 41 01  // .%@...@..V.A.)A.
    C880: 33 25 41 14 03 0C 48 00 00 4A 05 01 50 01 00 00  // 3%A...H..J..P...
    C890: 00 44 6B 01 03 0C 48 02 00 4A 25 40 01 10 49 6B  // .Dk...H..J%@..Ik
    C8A0: 01 3C 22 43 01 41 49 6B 01 03 1A 48 40 3C 0A 00  // .<"C.AIk...H@<..
    C8B0: 01 40 44 8D 01 03 1A 48 40 07 25 00 01 FE 03 0C  // .@D....H@.%.....
    C8C0: 48 02 00 01 22 43 01 41 07 0D 40 01 EF FF 03 1A  // H..."C.A..@.....
    C8D0: 48 40 01 0A 00 01 40 3A 00 00 5B 7A 10 00 00 00  // H@....@:..[z....
    C8E0: 00 00 80 00 04 00 00 01 08 00 80 01 0C 00 E6 00  // ................
    C8F0: 01 01 04 00 37 00 00 56 00 00 66 1E 2D 0D 42 4C  // ....7..V..f.-.BL
    C900: 00 56 00 40 21 25 00 10 2D 0A 42 40 03 24 41 0C  // .V.@!%..-.B@.$A.
    C910: 00 4C 25 41 08 44 DA 00 02 25 00 64 02 0D 01 01  // .L%A.D...%.d....
    C920: 01 02 E4 01 06 00 0E E5 01 90 66 1E 43 58 00 2D  // ..........f.CX.-
    C930: 0D 42 35 02 02 A4 01 00 00 03 64 00 01 00 2D 0D  // .B5.......d...-.
    C940: 42 03 00 43 C0 00 3E 0D 00 00 00 44 7B 00 3E 0D  // B..C..>....D{.>.
    C950: 00 01 00 44 92 00 3E 0D 00 02 00 44 A9 00 3E 0D  // ...D..>....D..>.
    C960: 00 03 00 44 41 00 43 DA 00 2D 0D 42 E4 01 02 A4  // ...DA.C..-.B....
    C970: 01 00 00 03 64 00 01 00 2D 0D 42 03 00 43 C0 00  // ....d...-.B..C..
    C980: 2D 0D 42 FF 01 02 A4 01 00 00 03 64 00 01 00 2D  // -.B........d...-
    C990: 0D 42 03 00 43 C0 00 2D 0D 42 1A 02 02 A4 01 00  // .B..C..-.B......
    C9A0: 00 03 64 00 01 00 2D 0D 42 03 00 43 C0 00 3E 65  // ..d...-.B..C..>e
    C9B0: 00 00 44 DA 00 33 65 00 01 02 4C 00 00 00 52 36  // ..D..3e...L...R6
    C9C0: 2D 0D 42 02 00 43 C0 00 2D 25 00 01 3E 25 00 04  // -.B..C..-%..>%..
    C9D0: 45 0C 00 5B 54 01 02 01 D6 09 80 02 A0 00 E0 01  // E..[T...........
    C9E0: 2D 00 10 00 60 00 0A 00 02 00 00 00 00 00 08 08  // -...`...........
    C9F0: 06 00 12 3C A0 0F 20 03 00 01 58 02 1C 00 28 00  // ...<.. ...X...(.
    CA00: 80 00 01 00 04 00 00 00 00 00 00 00 00 00 6A 3C  // ..............j<
    CA10: 64 19 00 04 40 01 00 03 26 00 18 00 88 00 03 00  // d...@...&.......
    CA20: 06 00 00 00 00 00 00 00 06 00 55 3C 01 1D 00 05  // ..........U<....
    CA30: 72 01 D0 02 1E 00 6E 00 28 00 05 00 05 00 00 00  // r.....n.(.......
    CA40: 00 00 00 00 00 00 E8 3C 30 2A 00 05 08 02 C0 03  // .......<0*......
    CA50: 28 00 60 00 70 00 01 00 03 00 00 00 00 00 00 00  // (.`.p...........
    CA60: 00 00 E9 3C 30 2A 00 05 98 01 00 04 2A 00 30 00  // ...<0*......*.0.
    CA70: 70 00 01 00 03 00 00 00 00 00 00 00 00 00 EA 3C  // p..............<
    CA80: 66 21 56 05 AA 01 00 03 1E 00 46 00 8F 00 03 00  // f!V.......F.....
    CA90: 03 00 00 00 00 00 00 00 02 00 ED 3C 8F 2F 78 05  // ...........<./x.
    CAA0: D0 01 1A 04 27 00 58 00 90 00 03 00 04 00 00 00  // ....'.X.........
    CAB0: 00 00 00 00 02 00 EB 3C 48 3F 40 06 30 02 B0 04  // .......<H?@.0...
    CAC0: 32 00 40 00 C0 00 01 00 03 00 00 00 00 00 00 00  // 2.@.............
    CAD0: 00 00 EC 3C 02 3A 80 07 18 01 38 04 2D 00 58 00  // ...<.:....8.-.X.
    CAE0: 2C 00 04 00 05 00 00 00 00 00 00 00 02 00 F3 3C  // ,..............<
    CAF0: 7D 4B 80 07 A0 02 B0 04 2D 00 88 00 C8 00 03 00  // }K......-.......
    CB00: 06 00 00 00 00 00 00 00 02 00 F0 3C 68 5B 80 07  // ...........<h[..
    CB10: A8 02 A0 05 3C 00 80 00 D0 00 01 00 03 00 00 00  // ....<...........
    CB20: 00 00 00 00 02 00 F1 3C 48 00 03 02 1D 00 0A 11  // .......<H.......
    CB30: 20 4E 00 00 20 4E 00 00 01 00 00 00 5C 2D 00 00  //  N.. N......\-..
    CB40: 4C 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // L...............
    CB50: F4 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CB60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CB70: 04 03 02 01 00 00 00 00 00 2A 00 2A 00 00 2A 2A  // .........*.*..**
    CB80: 2A 00 00 2A 00 2A 2A 15 00 2A 2A 2A 15 15 15 15  // *..*.**..***....
    CB90: 15 3F 15 3F 15 15 3F 3F 3F 15 15 3F 15 3F 3F 3F  // .?.?..???..?.???
    CBA0: 15 3F 3F 3F 00 00 00 05 05 05 08 08 08 0B 0B 0B  // .???............
    CBB0: 0E 0E 0E 11 11 11 14 14 14 18 18 18 1C 1C 1C 20  // ............... 
    CBC0: 20 20 24 24 24 28 28 28 2D 2D 2D 32 32 32 38 38  //   $$$(((---22288
    CBD0: 38 3F 3F 3F 00 00 3F 10 00 3F 1F 00 3F 2F 00 3F  // 8???..?..?..?/.?
    CBE0: 3F 00 3F 3F 00 2F 3F 00 1F 3F 00 10 3F 00 00 3F  // ?.??./?..?..?..?
    CBF0: 10 00 3F 1F 00 3F 2F 00 3F 3F 00 2F 3F 00 1F 3F  // ..?..?/.??./?..?
    CC00: 00 10 3F 00 00 3F 00 00 3F 10 00 3F 1F 00 3F 2F  // ..?..?..?..?..?/
    CC10: 00 3F 3F 00 2F 3F 00 1F 3F 00 10 3F 1F 1F 3F 27  // .??./?..?..?..?'
    CC20: 1F 3F 2F 1F 3F 37 1F 3F 3F 1F 3F 3F 1F 37 3F 1F  // .?/.?7.??.??.7?.
    CC30: 2F 3F 1F 27 3F 1F 1F 3F 27 1F 3F 2F 1F 3F 37 1F  // /?.'?..?'.?/.?7.
    CC40: 3F 3F 1F 37 3F 1F 2F 3F 1F 27 3F 1F 1F 3F 1F 1F  // ??.7?./?.'?..?..
    CC50: 3F 27 1F 3F 2F 1F 3F 37 1F 3F 3F 1F 37 3F 1F 2F  // ?'.?/.?7.??.7?./
    CC60: 3F 1F 27 3F 2D 2D 3F 31 2D 3F 36 2D 3F 3A 2D 3F  // ?.'?--?1-?6-?:-?
    CC70: 3F 2D 3F 3F 2D 3A 3F 2D 36 3F 2D 31 3F 2D 2D 3F  // ?-??-:?-6?-1?--?
    CC80: 31 2D 3F 36 2D 3F 3A 2D 3F 3F 2D 3A 3F 2D 36 3F  // 1-?6-?:-??-:?-6?
    CC90: 2D 31 3F 2D 2D 3F 2D 2D 3F 31 2D 3F 36 2D 3F 3A  // -1?--?--?1-?6-?:
    CCA0: 2D 3F 3F 2D 3A 3F 2D 36 3F 2D 31 3F 00 00 1C 07  // -??-:?-6?-1?....
    CCB0: 00 1C 0E 00 1C 15 00 1C 1C 00 1C 1C 00 15 1C 00  // ................
    CCC0: 0E 1C 00 07 1C 00 00 1C 07 00 1C 0E 00 1C 15 00  // ................
    CCD0: 1C 1C 00 15 1C 00 0E 1C 00 07 1C 00 00 1C 00 00  // ................
    CCE0: 1C 07 00 1C 0E 00 1C 15 00 1C 1C 00 15 1C 00 0E  // ................
    CCF0: 1C 00 07 1C 0E 0E 1C 11 0E 1C 15 0E 1C 18 0E 1C  // ................
    CD00: 1C 0E 1C 1C 0E 18 1C 0E 15 1C 0E 11 1C 0E 0E 1C  // ................
    CD10: 11 0E 1C 15 0E 1C 18 0E 1C 1C 0E 18 1C 0E 15 1C  // ................
    CD20: 0E 11 1C 0E 0E 1C 0E 0E 1C 11 0E 1C 15 0E 1C 18  // ................
    CD30: 0E 1C 1C 0E 18 1C 0E 15 1C 0E 11 1C 14 14 1C 16  // ................
    CD40: 14 1C 18 14 1C 1A 14 1C 1C 14 1C 1C 14 1A 1C 14  // ................
    CD50: 18 1C 14 16 1C 14 14 1C 16 14 1C 18 14 1C 1A 14  // ................
    CD60: 1C 1C 14 1A 1C 14 18 1C 14 16 1C 14 14 1C 14 14  // ................
    CD70: 1C 16 14 1C 18 14 1C 1A 14 1C 1C 14 1A 1C 14 18  // ................
    CD80: 1C 14 16 1C 00 00 10 04 00 10 08 00 10 0C 00 10  // ................
    CD90: 10 00 10 10 00 0C 10 00 08 10 00 04 10 00 00 10  // ................
    CDA0: 04 00 10 08 00 10 0C 00 10 10 00 0C 10 00 08 10  // ................
    CDB0: 00 04 10 00 00 10 00 00 10 04 00 10 08 00 10 0C  // ................
    CDC0: 00 10 10 00 0C 10 00 08 10 00 04 10 08 08 10 0A  // ................
    CDD0: 08 10 0C 08 10 0E 08 10 10 08 10 10 08 0E 10 08  // ................
    CDE0: 0C 10 08 0A 10 08 08 10 0A 08 10 0C 08 10 0E 08  // ................
    CDF0: 10 10 08 0E 10 08 0C 10 08 0A 10 08 08 10 08 08  // ................
    CE00: 10 0A 08 10 0C 08 10 0E 08 10 10 08 0E 10 08 0C  // ................
    CE10: 10 08 0A 10 0B 0B 10 0C 0B 10 0D 0B 10 0F 0B 10  // ................
    CE20: 10 0B 10 10 0B 0F 10 0B 0D 10 0B 0C 10 0B 0B 10  // ................
    CE30: 0C 0B 10 0D 0B 10 0F 0B 10 10 0B 0F 10 0B 0D 10  // ................
    CE40: 0B 0C 10 0B 0B 10 0B 0B 10 0C 0B 10 0D 0B 10 0F  // ................
    CE50: 0B 10 10 0B 0F 10 0B 0D 10 0B 0C 10 00 00 00 00  // ................
    CE60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CE70: 00 00 00 00 5C 00 02 01 38 36 80 07 A0 00 38 04  // ....\...86....8.
    CE80: 20 00 18 00 30 00 03 00 0C 00 26 01 A5 00 00 00  //  ...0.....&.....
    CE90: 06 00 00 3C C8 00 00 00 02 00 34 21 00 00 B8 0B  // ...<......4!....
    CEA0: 00 00 00 00 7D 00 03 02 0B 0A C2 41 00 FF FF 00  // ....}......A....
    CEB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CEC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CED0: 0C 00 02 01 00 00 00 00 00 00 00 00 00 04 01 0C  // ................
    CEE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CEF0: 77 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // w...............
    CF00: 00 00 00 00 C8 00 1A 02 00 00 00 00 00 00 03 00  // ................
    CF10: 00 00 00 00 8C 00 01 01 00 00 00 00 00 00 00 00  // ................
    CF20: 00 00 00 00 00 00 00 00 02 00 10 01 14 31 00 00  // .............1..
    CF30: 00 00 E4 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CF40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CF50: 00 00 00 00 00 00 00 00 08 00 10 02 13 31 02 02  // .............1..
    CF60: 00 00 E4 00 00 01 00 00 80 00 20 02 13 32 03 03  // .......... ..2..
    CF70: 00 00 E4 00 00 01 00 00 00 00 00 00 00 00 00 00  // ................
    CF80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CF90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CFA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CFB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CFC0: 00 00 00 00 00 00 00 00 00 00 FF FF FF FF FF FF  // ................
    CFD0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    CFE0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    CFF0: FF FF FF FF FF FF FF FF FF FF FF FF 00 00 00 00  // ................
    D000: 00 00 FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D010: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D020: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D030: FF FF FF FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D040: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D050: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D060: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D070: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D090: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D0A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D0B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D0C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D0D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D0E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D0F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D110: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D120: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 05 00  // ................
    D130: 00 00 00 3F 00 08 00 FF 00 00 00 00 00 00 00 00  // ...?............
    D140: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D150: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D160: 00 00 00 00 08 00 05 00 00 00 00 3F 00 08 00 01  // ...........?....
    D170: 3F 00 08 00 02 3F 00 08 00 00 00 00 00 00 00 00  // ?....?..........
    D180: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D190: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 05 00  // ................
    D1A0: 00 00 00 3F 00 08 00 FF 00 00 00 00 00 00 00 00  // ...?............
    D1B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D1C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D1D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D1E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D1F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D200: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D210: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D220: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D230: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D240: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D250: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D260: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D270: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D280: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D290: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D2A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D2B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D2C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D2D0: 00 00 00 00 00 00 00 00 00 00 00 00 54 00 02 01  // ............T...
    D2E0: B5 5D 00 00 00 00 01 00 B5 5D 00 00 08 08 02 00  // .].......]......
    D2F0: B5 5D 00 00 10 10 03 00 B5 5D 00 00 18 14 04 00  // .].......]......
    D300: B5 5D 00 00 1A 18 05 00 91 5D 00 00 08 08 90 00  // .].......]......
    D310: 95 5D 00 00 08 08 91 00 99 5D 00 00 08 08 92 00  // .].......]......
    D320: 9D 5D 00 00 08 08 93 00 A1 5D 00 00 08 08 94 00  // .].......]......
    D330: 9C 00 01 01 10 01 06 12 11 01 16 12 21 01 0A 12  // ............!...
    D340: 13 01 06 6A 14 01 16 6A 22 01 0A 6A 16 01 06 55  // ...j...j"..j...U
    D350: 17 01 16 55 23 01 0A 55 63 01 16 E8 64 01 0A E8  // ...U#..Uc...d...
    D360: 65 01 16 E9 66 01 0A E9 19 01 06 EA 1A 01 16 EA  // e...f...........
    D370: 24 01 0A EA 47 01 16 ED 48 01 0A ED 45 01 16 EB  // $...G...H...E...
    D380: 46 01 0A EB 75 01 16 EC 76 01 0A EC A5 01 16 F3  // F...u...v.......
    D390: A6 01 0A F3 A0 01 16 F0 A1 01 0A F0 A2 01 16 F1  // ................
    D3A0: A3 01 0A F1 D2 01 16 70 D4 01 0A 70 D8 01 16 71  // .......p...p...q
    D3B0: D9 01 0A 71 E2 01 16 72 E4 01 0A 72 E8 01 16 73  // ...q...r...r...s
    D3C0: E9 01 0A 73 F5 01 16 74 F6 01 0A 74 00 04 09 01  // ...s...t...t....
    D3D0: 14 00 02 01 08 00 02 00 80 00 FF FF 00 04 00 08  // ................
    D3E0: 40 00 FF FF EB 00 01 04 8A 00 06 00 14 31 68 00  // @............1h.
    D3F0: 1E 21 00 00 B3 00 00 00 02 00 00 00 00 00 77 00  // .!............w.
    D400: 1E 22 00 00 BA 00 00 00 00 00 00 00 00 00 86 00  // ."..............
    D410: 20 21 00 00 C1 00 00 00 00 00 00 00 13 31 95 00  //  !...........1..
    D420: 20 22 00 00 C8 00 00 00 08 00 00 00 13 32 A4 00  //  "...........2..
    D430: 21 21 00 00 CF 00 00 00 80 00 00 00 03 71 D6 00  // !!...........q..
    D440: 00 00 00 00 00 00 00 00 00 00 00 00 01 04 90 00  // ................
    D450: 02 04 01 00 17 06 00 00 00 00 FF 01 04 90 00 02  // ................
    D460: 04 00 00 17 06 00 00 00 00 FF 01 04 90 00 02 04  // ................
    D470: 00 00 17 06 00 00 00 00 FF 01 04 92 00 02 04 03  // ................
    D480: 00 17 06 00 00 00 00 FF 01 04 93 00 02 04 04 00  // ................
    D490: 17 06 00 00 00 00 FF 14 06 0F 00 00 00 FF 14 06  // ................
    D4A0: 0F 00 00 00 FF 14 06 0F 00 00 00 FF 14 06 0F 01  // ................
    D4B0: 00 00 FF 14 06 0F 01 00 00 FF 10 0A 01 02 03 04  // ................
    D4C0: 05 00 00 00 11 0A 90 91 92 93 94 00 00 00 FF 00  // ................
    D4D0: 05 00 01 01 00 00 38 00 04 03 04 00 00 00 70 11  // ......8.......p.
    D4E0: 01 00 C0 12 60 09 00 00 00 00 00 00 00 00 7C 01  // ....`.........|.
    D4F0: 4E 0C 01 01 00 00 55 00 00 00 C0 12 00 00 01 02  // N.....U.........
    D500: 04 01 00 05 05 00 00 00 00 00 00 00 00 00 06 02  // ................
    D510: 05 03 0E 00 36 00 46 00 5A 01 96 01 30 75 00 00  // ....6.F.Z...0u..
    D520: 0C 00 3F 05 3A 40 00 00 40 9C 00 00 0C 00 3F 05  // ..?.:@..@.....?.
    D530: 3E 00 00 00 FF FF FF 00 0C 00 3F 05 77 21 00 00  // >.........?.w!..
    D540: 00 00 00 00 FF FF FF 00 0C 00 3F 05 34 A0 00 00  // ..........?.4...
    D550: 00 00 00 00 48 3F 00 00 3F 00 44 00 00 16 00 00  // ....H?..?.D.....
    D560: 00 05 01 1F 00 00 00 05 02 2C 00 00 00 05 03 3E  // .........,.....>
    D570: 00 00 00 05 08 1B 50 00 00 05 09 25 60 00 00 05  // ......P....%`...
    D580: 0A 35 90 00 00 05 10 21 B0 00 00 05 11 2F F0 00  // .5.....!...../..
    D590: 00 05 18 2A 40 01 00 05 78 69 00 00 3F 00 44 00  // ...*@...xi..?.D.
    D5A0: 00 16 00 00 00 05 01 1F 00 00 00 05 02 2C 00 00  // .............,..
    D5B0: 00 05 03 3E 00 00 00 05 08 1B 50 00 00 05 09 25  // ...>......P....%
    D5C0: 60 00 00 05 0A 35 90 00 00 05 10 21 B0 00 00 05  // `....5.....!....
    D5D0: 11 2F F0 00 00 05 18 2A 40 01 00 05 F0 D2 00 00  // ./.....*@.......
    D5E0: 3F 00 44 00 00 1E 00 00 00 05 01 26 00 00 00 05  // ?.D........&....
    D5F0: 02 30 00 00 00 05 03 3E 00 00 00 05 08 22 40 00  // .0.....>....."@.
    D600: 00 05 09 2C 60 00 00 05 0A 37 70 00 00 05 10 27  // ...,`....7p....'
    D610: 90 00 00 05 11 32 C0 00 00 05 18 2E 00 01 00 05  // .....2..........
    D620: 68 3C 01 00 3F 00 44 00 00 1E 00 00 00 05 01 26  // h<..?.D........&
    D630: 00 00 00 05 02 30 00 00 00 05 03 3E 00 00 00 05  // .....0.....>....
    D640: 08 22 40 00 00 05 09 2C 60 00 00 05 0A 37 70 00  // ."@....,`....7p.
    D650: 00 05 10 27 90 00 00 05 11 32 C0 00 00 05 18 2E  // ...'.....2......
    D660: 00 01 00 05 00 00 00 00 02 03 00 01 00 01 02 03  // ................
    D670: 00 07 03 00 02 03 00 01 00 01 02 03 00 07 03 00  // ................
    D680: 02 03 00 01 00 01 02 03 00 07 03 00 00 01 02 03  // ................
    D690: 00 01 02 03 00 07 03 00 00 01 02 03 00 01 02 03  // ................
    D6A0: 00 07 03 00 08 30 00 00 8D 00 00 00 07 30 00 00  // .....0.......0..
    D6B0: 4A 25 00 00 08 31 00 00 8D 00 00 00 07 31 00 00  // J%...1.......1..
    D6C0: 4A 25 00 00 08 32 00 00 8D 00 00 00 07 32 00 00  // J%...2.......2..
    D6D0: 4A 25 00 00 08 33 00 00 8D 00 00 00 07 33 00 00  // J%...3.......3..
    D6E0: 4A 25 00 00 5A 00 00 00 05 00 00 00 EB 10 00 00  // J%..Z...........
    D6F0: 07 00 00 00 EB 11 00 00 07 00 00 00 EB 12 00 00  // ................
    D700: 07 00 00 00 EB 13 00 00 07 00 00 00 FF FF FF FF  // ................
    D710: 00 00 00 00 1C 00 03 01 00 0C 00 00 00 00 00 00  // ................
    D720: 77 01 35 0C C0 12 00 00 FF 00 FF 00 FF 00 00 00  // w.5.............
    D730: 34 00 02 03 00 09 01 02 08 01 02 02 64 C0 00 00  // 4...........d...
    D740: 65 C0 00 00 66 C0 00 00 67 C0 00 00 E8 C0 00 00  // e...f...g.......
    D750: A0 21 00 00 42 EC 00 00 10 27 00 00 08 02 00 00  // .!..B....'......
    D760: 25 00 00 00 FF FF FF FF FF FF FF FF FF FF FF FF  // %...............
    D770: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D780: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D790: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D7A0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D7B0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D7C0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D7D0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D7E0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D7F0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D800: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D810: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D820: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D830: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D840: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D850: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D860: FF FF FF FF FF FF FF FF 00 00 00 00 00 00 00 00  // ................
    D870: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D880: 00 00 00 00                                      // ....


WSMT
----
[000h 0000   4]                    Signature : "WSMT"    [Windows SMM Security Mitigations Table]
[004h 0004   4]                 Table Length : 00000028
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 1D
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "CB-01   "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "ACPI"
[020h 0032   4]        Asl Compiler Revision : 00040000

[024h 0036   4]             Protection Flags : 00000007
                          FIXED_COMM_BUFFERS : 1
           COMM_BUFFER_NESTED_PTR_PROTECTION : 1
                  SYSTEM_RESOURCE_PROTECTION : 1

Raw Table Data: Length 40 (0x28)

    0000: 57 53 4D 54 28 00 00 00 01 1D 4C 45 4E 4F 56 4F  // WSMT(.....LENOVO
    0010: 43 42 2D 30 31 20 20 20 01 00 00 00 41 43 50 49  // CB-01   ....ACPI
    0020: 00 00 04 00 07 00 00 00                          // ........


