
Intel ACPI Component Architecture
ACPI Binary Table Extraction Utility version 20210604
Copyright (c) 2000 - 2021 Intel Corporation


 Signature  Length    Version Oem       Oem         Oem         Compiler Compiler
                              Id        TableId     RevisionId  Name     Revision
 _________  __________  ____  ________  __________  __________  _______  __________

 01)  SSDT  0x000008F2  0x02  "MSFT  "  "xh_ca000"  0x00000000  "INTL"   0x20160422
 02)  MCFG  0x0000003C  0x01  "MSFT  "  "MSFT    "  0x00000001  "MSFT"   0x0000005F
 03)  APIC  0x0000012C  0x03  "MSFT  "  "MSFT    "  0x00000001  "MSFT"   0x0000005F
 04)  SSDT  0x0000312B  0x02  "SaSsdt"  "SaSsdt  "  0x00003000  "INTL"   0x20160422
 05)  NHLT  0x0000002D  0x00  "MSFT  "  "MSFT    "  0x00000002  "MSFT"   0x0000005F
 06)  DSDT  0x0001706A  0x02  "MSFT  "  "MSFT    "  0x00000000  "INTL"   0x20160422
 07)  WSMT  0x00000028  0x01  "MSFT  "  "MSFT    "  0x00000002  "MSFT"   0x0000005F
 08)  LPIT  0x00000094  0x01  "MSFT  "  "MSFT    "  0x00000000  "MSFT"   0x0000005F
 09)  SSDT  0x000017AE  0x02  "CpuRef"  "CpuSsdt "  0x00003000  "INTL"   0x20160422
 10)  SSDT  0x0000350A  0x02  "MSFT  "  "RTD3_CA "  0x00001000  "INTL"   0x20160422
 11)  DMAR  0x0000015C  0x01  "MSFT  "  "MSFT    "  0x00000001  "INTL"   0x00000001
 12)  FACP  0x0000010C  0x05  "MSFT  "  "MSFT    "  0x00000000  "MSFT"   0x0000005F
 13)  FPDT  0x00000034  0x01  "MSFT  "  "MSFT    "  0x00000002  "MSFT"   0x0000005F
 14)  SSDT  0x000182F0  0x02  "DptfTa"  "DptfTabl"  0x00001000  "INTL"   0x20160422
 15)  MSDM  0x00000055  0x01  "MSFT  "  "        "  0x00000001  "MSFT"   0x00000001
 16)  HPET  0x00000038  0x01  "MSFT  "  "MSFT    "  0x00000001  "MSFT"   0x0000005F
 17)  SSDT  0x000006B4  0x02  "PmRef "  "Cpu0Ist "  0x00003000  "INTL"   0x20160422
 18)  FACS  0x00000040  0x02
 19)  BGRT  0x00000038  0x01  "MSFT  "  "MSFT    "  0x00000002  "MSFT"   0x0000005F
 20)  SSDT  0x00000628  0x02  "PmRef "  "HwpLvt  "  0x00003000  "INTL"   0x20160422
 21)  SSDT  0x000003FF  0x02  "PmRef "  "Cpu0Cst "  0x00003001  "INTL"   0x20160422
 22)  SSDT  0x0000030A  0x02  "PmRef "  "ApCst   "  0x00003000  "INTL"   0x20160422
 23)  SSDT  0x00000D14  0x02  "PmRef "  "ApIst   "  0x00003000  "INTL"   0x20160422
 24)  SSDT  0x000000BA  0x02  "PmRef "  "Cpu0Hwp "  0x00003000  "INTL"   0x20160422
 25)  SSDT  0x00000317  0x02  "PmRef "  "ApHwp   "  0x00003000  "INTL"   0x20160422

Found 25 ACPI tables in acpidump

APIC
----
[000h 0000   4]                    Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004   4]                 Table Length : 0000012C
[008h 0008   1]                     Revision : 03
[009h 0009   1]                     Checksum : 72
[00Ah 0010   6]                       Oem ID : "MSFT  "
[010h 0016   8]                 Oem Table ID : "MSFT    "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 0000005F

[024h 0036   4]           Local Apic Address : FEE00000
[028h 0040   4]        Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044   1]                Subtable Type : 00 [Processor Local APIC]
[02Dh 0045   1]                       Length : 08
[02Eh 0046   1]                 Processor ID : 01
[02Fh 0047   1]                Local Apic ID : 00
[030h 0048   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[034h 0052   1]                Subtable Type : 00 [Processor Local APIC]
[035h 0053   1]                       Length : 08
[036h 0054   1]                 Processor ID : 02
[037h 0055   1]                Local Apic ID : 02
[038h 0056   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[03Ch 0060   1]                Subtable Type : 00 [Processor Local APIC]
[03Dh 0061   1]                       Length : 08
[03Eh 0062   1]                 Processor ID : 03
[03Fh 0063   1]                Local Apic ID : 01
[040h 0064   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[044h 0068   1]                Subtable Type : 00 [Processor Local APIC]
[045h 0069   1]                       Length : 08
[046h 0070   1]                 Processor ID : 04
[047h 0071   1]                Local Apic ID : 03
[048h 0072   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[04Ch 0076   1]                Subtable Type : 00 [Processor Local APIC]
[04Dh 0077   1]                       Length : 08
[04Eh 0078   1]                 Processor ID : 05
[04Fh 0079   1]                Local Apic ID : FF
[050h 0080   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[054h 0084   1]                Subtable Type : 00 [Processor Local APIC]
[055h 0085   1]                       Length : 08
[056h 0086   1]                 Processor ID : 06
[057h 0087   1]                Local Apic ID : FF
[058h 0088   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[05Ch 0092   1]                Subtable Type : 00 [Processor Local APIC]
[05Dh 0093   1]                       Length : 08
[05Eh 0094   1]                 Processor ID : 07
[05Fh 0095   1]                Local Apic ID : FF
[060h 0096   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[064h 0100   1]                Subtable Type : 00 [Processor Local APIC]
[065h 0101   1]                       Length : 08
[066h 0102   1]                 Processor ID : 08
[067h 0103   1]                Local Apic ID : FF
[068h 0104   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[06Ch 0108   1]                Subtable Type : 00 [Processor Local APIC]
[06Dh 0109   1]                       Length : 08
[06Eh 0110   1]                 Processor ID : 09
[06Fh 0111   1]                Local Apic ID : FF
[070h 0112   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[074h 0116   1]                Subtable Type : 00 [Processor Local APIC]
[075h 0117   1]                       Length : 08
[076h 0118   1]                 Processor ID : 0A
[077h 0119   1]                Local Apic ID : FF
[078h 0120   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[07Ch 0124   1]                Subtable Type : 00 [Processor Local APIC]
[07Dh 0125   1]                       Length : 08
[07Eh 0126   1]                 Processor ID : 0B
[07Fh 0127   1]                Local Apic ID : FF
[080h 0128   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[084h 0132   1]                Subtable Type : 00 [Processor Local APIC]
[085h 0133   1]                       Length : 08
[086h 0134   1]                 Processor ID : 0C
[087h 0135   1]                Local Apic ID : FF
[088h 0136   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[08Ch 0140   1]                Subtable Type : 00 [Processor Local APIC]
[08Dh 0141   1]                       Length : 08
[08Eh 0142   1]                 Processor ID : 0D
[08Fh 0143   1]                Local Apic ID : FF
[090h 0144   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[094h 0148   1]                Subtable Type : 00 [Processor Local APIC]
[095h 0149   1]                       Length : 08
[096h 0150   1]                 Processor ID : 0E
[097h 0151   1]                Local Apic ID : FF
[098h 0152   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[09Ch 0156   1]                Subtable Type : 00 [Processor Local APIC]
[09Dh 0157   1]                       Length : 08
[09Eh 0158   1]                 Processor ID : 0F
[09Fh 0159   1]                Local Apic ID : FF
[0A0h 0160   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0A4h 0164   1]                Subtable Type : 00 [Processor Local APIC]
[0A5h 0165   1]                       Length : 08
[0A6h 0166   1]                 Processor ID : 10
[0A7h 0167   1]                Local Apic ID : FF
[0A8h 0168   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0ACh 0172   1]                Subtable Type : 01 [I/O APIC]
[0ADh 0173   1]                       Length : 0C
[0AEh 0174   1]                  I/O Apic ID : 02
[0AFh 0175   1]                     Reserved : 00
[0B0h 0176   4]                      Address : FEC00000
[0B4h 0180   4]                    Interrupt : 00000000

[0B8h 0184   1]                Subtable Type : 02 [Interrupt Source Override]
[0B9h 0185   1]                       Length : 0A
[0BAh 0186   1]                          Bus : 00
[0BBh 0187   1]                       Source : 00
[0BCh 0188   4]                    Interrupt : 00000002
[0C0h 0192   2]        Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0

[0C2h 0194   1]                Subtable Type : 02 [Interrupt Source Override]
[0C3h 0195   1]                       Length : 0A
[0C4h 0196   1]                          Bus : 00
[0C5h 0197   1]                       Source : 09
[0C6h 0198   4]                    Interrupt : 00000009
[0CAh 0202   2]        Flags (decoded below) : 000D
                                    Polarity : 1
                                Trigger Mode : 3

[0CCh 0204   1]                Subtable Type : 04 [Local APIC NMI]
[0CDh 0205   1]                       Length : 06
[0CEh 0206   1]                 Processor ID : 01
[0CFh 0207   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0D1h 0209   1]         Interrupt Input LINT : 01

[0D2h 0210   1]                Subtable Type : 04 [Local APIC NMI]
[0D3h 0211   1]                       Length : 06
[0D4h 0212   1]                 Processor ID : 02
[0D5h 0213   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0D7h 0215   1]         Interrupt Input LINT : 01

[0D8h 0216   1]                Subtable Type : 04 [Local APIC NMI]
[0D9h 0217   1]                       Length : 06
[0DAh 0218   1]                 Processor ID : 03
[0DBh 0219   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0DDh 0221   1]         Interrupt Input LINT : 01

[0DEh 0222   1]                Subtable Type : 04 [Local APIC NMI]
[0DFh 0223   1]                       Length : 06
[0E0h 0224   1]                 Processor ID : 04
[0E1h 0225   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0E3h 0227   1]         Interrupt Input LINT : 01

[0E4h 0228   1]                Subtable Type : 04 [Local APIC NMI]
[0E5h 0229   1]                       Length : 06
[0E6h 0230   1]                 Processor ID : 05
[0E7h 0231   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0E9h 0233   1]         Interrupt Input LINT : 01

[0EAh 0234   1]                Subtable Type : 04 [Local APIC NMI]
[0EBh 0235   1]                       Length : 06
[0ECh 0236   1]                 Processor ID : 06
[0EDh 0237   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0EFh 0239   1]         Interrupt Input LINT : 01

[0F0h 0240   1]                Subtable Type : 04 [Local APIC NMI]
[0F1h 0241   1]                       Length : 06
[0F2h 0242   1]                 Processor ID : 07
[0F3h 0243   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0F5h 0245   1]         Interrupt Input LINT : 01

[0F6h 0246   1]                Subtable Type : 04 [Local APIC NMI]
[0F7h 0247   1]                       Length : 06
[0F8h 0248   1]                 Processor ID : 08
[0F9h 0249   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0FBh 0251   1]         Interrupt Input LINT : 01

[0FCh 0252   1]                Subtable Type : 04 [Local APIC NMI]
[0FDh 0253   1]                       Length : 06
[0FEh 0254   1]                 Processor ID : 09
[0FFh 0255   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[101h 0257   1]         Interrupt Input LINT : 01

[102h 0258   1]                Subtable Type : 04 [Local APIC NMI]
[103h 0259   1]                       Length : 06
[104h 0260   1]                 Processor ID : 0A
[105h 0261   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[107h 0263   1]         Interrupt Input LINT : 01

[108h 0264   1]                Subtable Type : 04 [Local APIC NMI]
[109h 0265   1]                       Length : 06
[10Ah 0266   1]                 Processor ID : 0B
[10Bh 0267   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[10Dh 0269   1]         Interrupt Input LINT : 01

[10Eh 0270   1]                Subtable Type : 04 [Local APIC NMI]
[10Fh 0271   1]                       Length : 06
[110h 0272   1]                 Processor ID : 0C
[111h 0273   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[113h 0275   1]         Interrupt Input LINT : 01

[114h 0276   1]                Subtable Type : 04 [Local APIC NMI]
[115h 0277   1]                       Length : 06
[116h 0278   1]                 Processor ID : 0D
[117h 0279   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[119h 0281   1]         Interrupt Input LINT : 01

[11Ah 0282   1]                Subtable Type : 04 [Local APIC NMI]
[11Bh 0283   1]                       Length : 06
[11Ch 0284   1]                 Processor ID : 0E
[11Dh 0285   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[11Fh 0287   1]         Interrupt Input LINT : 01

[120h 0288   1]                Subtable Type : 04 [Local APIC NMI]
[121h 0289   1]                       Length : 06
[122h 0290   1]                 Processor ID : 0F
[123h 0291   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[125h 0293   1]         Interrupt Input LINT : 01

[126h 0294   1]                Subtable Type : 04 [Local APIC NMI]
[127h 0295   1]                       Length : 06
[128h 0296   1]                 Processor ID : 10
[129h 0297   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[12Bh 0299   1]         Interrupt Input LINT : 01

Raw Table Data: Length 300 (0x12C)

    0000: 41 50 49 43 2C 01 00 00 03 72 4D 53 46 54 20 20  // APIC,....rMSFT  
    0010: 4D 53 46 54 20 20 20 20 01 00 00 00 4D 53 46 54  // MSFT    ....MSFT
    0020: 5F 00 00 00 00 00 E0 FE 01 00 00 00 00 08 01 00  // _...............
    0030: 01 00 00 00 00 08 02 02 01 00 00 00 00 08 03 01  // ................
    0040: 01 00 00 00 00 08 04 03 01 00 00 00 00 08 05 FF  // ................
    0050: 00 00 00 00 00 08 06 FF 00 00 00 00 00 08 07 FF  // ................
    0060: 00 00 00 00 00 08 08 FF 00 00 00 00 00 08 09 FF  // ................
    0070: 00 00 00 00 00 08 0A FF 00 00 00 00 00 08 0B FF  // ................
    0080: 00 00 00 00 00 08 0C FF 00 00 00 00 00 08 0D FF  // ................
    0090: 00 00 00 00 00 08 0E FF 00 00 00 00 00 08 0F FF  // ................
    00A0: 00 00 00 00 00 08 10 FF 00 00 00 00 01 0C 02 00  // ................
    00B0: 00 00 C0 FE 00 00 00 00 02 0A 00 00 02 00 00 00  // ................
    00C0: 00 00 02 0A 00 09 09 00 00 00 0D 00 04 06 01 05  // ................
    00D0: 00 01 04 06 02 05 00 01 04 06 03 05 00 01 04 06  // ................
    00E0: 04 05 00 01 04 06 05 05 00 01 04 06 06 05 00 01  // ................
    00F0: 04 06 07 05 00 01 04 06 08 05 00 01 04 06 09 05  // ................
    0100: 00 01 04 06 0A 05 00 01 04 06 0B 05 00 01 04 06  // ................
    0110: 0C 05 00 01 04 06 0D 05 00 01 04 06 0E 05 00 01  // ................
    0120: 04 06 0F 05 00 01 04 06 10 05 00 01              // ............


BGRT
----
[000h 0000   4]                    Signature : "BGRT"    [Boot Graphics Resource Table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 39
[00Ah 0010   6]                       Oem ID : "MSFT  "
[010h 0016   8]                 Oem Table ID : "MSFT    "
[018h 0024   4]                 Oem Revision : 00000002
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 0000005F

[024h 0036   2]                      Version : 0001
[026h 0038   1]       Status (decoded below) : 00
                                   Displayed : 0
                          Orientation Offset : 0
[027h 0039   1]                   Image Type : 00
[028h 0040   8]                Image Address : 00000000894AF000
[030h 0048   4]                Image OffsetX : 000004C7
[034h 0052   4]                Image OffsetY : 000002FF

Raw Table Data: Length 56 (0x38)

    0000: 42 47 52 54 38 00 00 00 01 39 4D 53 46 54 20 20  // BGRT8....9MSFT  
    0010: 4D 53 46 54 20 20 20 20 02 00 00 00 4D 53 46 54  // MSFT    ....MSFT
    0020: 5F 00 00 00 01 00 00 00 00 F0 4A 89 00 00 00 00  // _.........J.....
    0030: C7 04 00 00 FF 02 00 00                          // ........


DMAR
----
[000h 0000   4]                    Signature : "DMAR"    [DMA Remapping Table]
[004h 0004   4]                 Table Length : 0000015C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : D4
[00Ah 0010   6]                       Oem ID : "MSFT  "
[010h 0016   8]                 Oem Table ID : "MSFT    "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "INTL"
[020h 0032   4]        Asl Compiler Revision : 00000001

[024h 0036   1]           Host Address Width : 26
[025h 0037   1]                        Flags : 01
[026h 0038  10]                     Reserved : 00 00 00 00 00 00 00 00 00 00

[030h 0048   2]                Subtable Type : 0000 [Hardware Unit Definition]
[032h 0050   2]                       Length : 0018

[034h 0052   1]                        Flags : 00
[035h 0053   1]                     Reserved : 00
[036h 0054   2]           PCI Segment Number : 0000
[038h 0056   8]        Register Base Address : 00000000FED90000

[040h 0064   1]            Device Scope Type : 01 [PCI Endpoint Device]
[041h 0065   1]                 Entry Length : 08
[042h 0066   2]                     Reserved : 0000
[044h 0068   1]               Enumeration ID : 00
[045h 0069   1]               PCI Bus Number : 00

[046h 0070   2]                     PCI Path : 02,00


[048h 0072   2]                Subtable Type : 0000 [Hardware Unit Definition]
[04Ah 0074   2]                       Length : 0048

[04Ch 0076   1]                        Flags : 01
[04Dh 0077   1]                     Reserved : 00
[04Eh 0078   2]           PCI Segment Number : 0000
[050h 0080   8]        Register Base Address : 00000000FED91000

[058h 0088   1]            Device Scope Type : 03 [IOAPIC Device]
[059h 0089   1]                 Entry Length : 08
[05Ah 0090   2]                     Reserved : 0000
[05Ch 0092   1]               Enumeration ID : 02
[05Dh 0093   1]               PCI Bus Number : F0

[05Eh 0094   2]                     PCI Path : 1F,00


[060h 0096   1]            Device Scope Type : 04 [Message-capable HPET Device]
[061h 0097   1]                 Entry Length : 08
[062h 0098   2]                     Reserved : 0000
[064h 0100   1]               Enumeration ID : 00
[065h 0101   1]               PCI Bus Number : 00

[066h 0102   2]                     PCI Path : 1F,00


[068h 0104   1]            Device Scope Type : 05 [Namespace Device]
[069h 0105   1]                 Entry Length : 08
[06Ah 0106   2]                     Reserved : 0000
[06Ch 0108   1]               Enumeration ID : 01
[06Dh 0109   1]               PCI Bus Number : 00

[06Eh 0110   2]                     PCI Path : 15,00


[070h 0112   1]            Device Scope Type : 05 [Namespace Device]
[071h 0113   1]                 Entry Length : 08
[072h 0114   2]                     Reserved : 0000
[074h 0116   1]               Enumeration ID : 02
[075h 0117   1]               PCI Bus Number : 00

[076h 0118   2]                     PCI Path : 15,01


[078h 0120   1]            Device Scope Type : 05 [Namespace Device]
[079h 0121   1]                 Entry Length : 08
[07Ah 0122   2]                     Reserved : 0000
[07Ch 0124   1]               Enumeration ID : 03
[07Dh 0125   1]               PCI Bus Number : 00

[07Eh 0126   2]                     PCI Path : 15,02


[080h 0128   1]            Device Scope Type : 05 [Namespace Device]
[081h 0129   1]                 Entry Length : 08
[082h 0130   2]                     Reserved : 0000
[084h 0132   1]               Enumeration ID : 04
[085h 0133   1]               PCI Bus Number : 00

[086h 0134   2]                     PCI Path : 15,03


[088h 0136   1]            Device Scope Type : 05 [Namespace Device]
[089h 0137   1]                 Entry Length : 08
[08Ah 0138   2]                     Reserved : 0000
[08Ch 0140   1]               Enumeration ID : 09
[08Dh 0141   1]               PCI Bus Number : 00

[08Eh 0142   2]                     PCI Path : 1E,00


[090h 0144   2]                Subtable Type : 0001 [Reserved Memory Region]
[092h 0146   2]                       Length : 0020

[094h 0148   2]                     Reserved : 0000
[096h 0150   2]           PCI Segment Number : 0000
[098h 0152   8]                 Base Address : 000000003E2E0000
[0A0h 0160   8]          End Address (limit) : 000000003E2FFFFF

[0A8h 0168   1]            Device Scope Type : 01 [PCI Endpoint Device]
[0A9h 0169   1]                 Entry Length : 08
[0AAh 0170   2]                     Reserved : 0000
[0ACh 0172   1]               Enumeration ID : 00
[0ADh 0173   1]               PCI Bus Number : 00

[0AEh 0174   2]                     PCI Path : 14,00


[0B0h 0176   2]                Subtable Type : 0001 [Reserved Memory Region]
[0B2h 0178   2]                       Length : 0020

[0B4h 0180   2]                     Reserved : 0000
[0B6h 0182   2]           PCI Segment Number : 0000
[0B8h 0184   8]                 Base Address : 000000008D000000
[0C0h 0192   8]          End Address (limit) : 000000008F7FFFFF

[0C8h 0200   1]            Device Scope Type : 01 [PCI Endpoint Device]
[0C9h 0201   1]                 Entry Length : 08
[0CAh 0202   2]                     Reserved : 0000
[0CCh 0204   1]               Enumeration ID : 00
[0CDh 0205   1]               PCI Bus Number : 00

[0CEh 0206   2]                     PCI Path : 02,00


[0D0h 0208   2]                Subtable Type : 0004 [ACPI Namespace Device Declaration]
[0D2h 0210   2]                       Length : 001C

[0D4h 0212   3]                     Reserved : 000000
[0D7h 0215   1]                Device Number : 01
[0D8h 0216  15]                  Device Name : "\_SB.PCI0.I2C0"

[0ECh 0236   2]                Subtable Type : 0004 [ACPI Namespace Device Declaration]
[0EEh 0238   2]                       Length : 001C

[0F0h 0240   3]                     Reserved : 000000
[0F3h 0243   1]                Device Number : 02
[0F4h 0244  15]                  Device Name : "\_SB.PCI0.I2C1"

[108h 0264   2]                Subtable Type : 0004 [ACPI Namespace Device Declaration]
[10Ah 0266   2]                       Length : 001C

[10Ch 0268   3]                     Reserved : 000000
[10Fh 0271   1]                Device Number : 03
[110h 0272  15]                  Device Name : "\_SB.PCI0.I2C2"

[124h 0292   2]                Subtable Type : 0004 [ACPI Namespace Device Declaration]
[126h 0294   2]                       Length : 001C

[128h 0296   3]                     Reserved : 000000
[12Bh 0299   1]                Device Number : 04
[12Ch 0300  15]                  Device Name : "\_SB.PCI0.I2C3"

[140h 0320   2]                Subtable Type : 0004 [ACPI Namespace Device Declaration]
[142h 0322   2]                       Length : 001C

[144h 0324   3]                     Reserved : 000000
[147h 0327   1]                Device Number : 09
[148h 0328  15]                  Device Name : "\_SB.PCI0.UA00"

Raw Table Data: Length 348 (0x15C)

    0000: 44 4D 41 52 5C 01 00 00 01 D4 4D 53 46 54 20 20  // DMAR\.....MSFT  
    0010: 4D 53 46 54 20 20 20 20 01 00 00 00 49 4E 54 4C  // MSFT    ....INTL
    0020: 01 00 00 00 26 01 00 00 00 00 00 00 00 00 00 00  // ....&...........
    0030: 00 00 18 00 00 00 00 00 00 00 D9 FE 00 00 00 00  // ................
    0040: 01 08 00 00 00 00 02 00 00 00 48 00 01 00 00 00  // ..........H.....
    0050: 00 10 D9 FE 00 00 00 00 03 08 00 00 02 F0 1F 00  // ................
    0060: 04 08 00 00 00 00 1F 00 05 08 00 00 01 00 15 00  // ................
    0070: 05 08 00 00 02 00 15 01 05 08 00 00 03 00 15 02  // ................
    0080: 05 08 00 00 04 00 15 03 05 08 00 00 09 00 1E 00  // ................
    0090: 01 00 20 00 00 00 00 00 00 00 2E 3E 00 00 00 00  // .. ........>....
    00A0: FF FF 2F 3E 00 00 00 00 01 08 00 00 00 00 14 00  // ../>............
    00B0: 01 00 20 00 00 00 00 00 00 00 00 8D 00 00 00 00  // .. .............
    00C0: FF FF 7F 8F 00 00 00 00 01 08 00 00 00 00 02 00  // ................
    00D0: 04 00 1C 00 00 00 00 01 5C 5F 53 42 2E 50 43 49  // ........\_SB.PCI
    00E0: 30 2E 49 32 43 30 00 00 00 00 00 00 04 00 1C 00  // 0.I2C0..........
    00F0: 00 00 00 02 5C 5F 53 42 2E 50 43 49 30 2E 49 32  // ....\_SB.PCI0.I2
    0100: 43 31 00 00 00 00 00 00 04 00 1C 00 00 00 00 03  // C1..............
    0110: 5C 5F 53 42 2E 50 43 49 30 2E 49 32 43 32 00 00  // \_SB.PCI0.I2C2..
    0120: 00 00 00 00 04 00 1C 00 00 00 00 04 5C 5F 53 42  // ............\_SB
    0130: 2E 50 43 49 30 2E 49 32 43 33 00 00 00 00 00 00  // .PCI0.I2C3......
    0140: 04 00 1C 00 00 00 00 09 5C 5F 53 42 2E 50 43 49  // ........\_SB.PCI
    0150: 30 2E 55 41 30 30 00 00 00 00 00 00              // 0.UA00......


DSDT
----
DefinitionBlock ("", "DSDT", 2, "MSFT  ", "MSFT    ", 0x00000000)
{
    External (_GPE.AL6F, MethodObj)    // 0 Arguments
    External (_GPE.HLVT, MethodObj)    // 0 Arguments
    External (_PR_.BGIA, UnknownObj)
    External (_PR_.BGMA, UnknownObj)
    External (_PR_.BGMS, UnknownObj)
    External (_PR_.CFGD, UnknownObj)
    External (_PR_.CPPC, IntObj)
    External (_PR_.DSAE, UnknownObj)
    External (_PR_.DTS1, UnknownObj)
    External (_PR_.DTS2, UnknownObj)
    External (_PR_.DTS3, UnknownObj)
    External (_PR_.DTS4, UnknownObj)
    External (_PR_.DTSE, UnknownObj)
    External (_PR_.DTSF, UnknownObj)
    External (_PR_.DTSI, IntObj)
    External (_PR_.ELNG, UnknownObj)
    External (_PR_.EMNA, UnknownObj)
    External (_PR_.EPCS, UnknownObj)
    External (_PR_.HWPI, IntObj)
    External (_PR_.PDTS, UnknownObj)
    External (_PR_.PKGA, UnknownObj)
    External (_PR_.PR00, DeviceObj)
    External (_PR_.PR00.LPSS, PkgObj)
    External (_PR_.PR00.TPSS, PkgObj)
    External (_PR_.TRPD, UnknownObj)
    External (_PR_.TRPF, UnknownObj)
    External (_SB_._SAN.GEN1, DeviceObj)
    External (_SB_._SAN.GEN2, DeviceObj)
    External (_SB_._SAN.GEN3, DeviceObj)
    External (_SB_._SAN.GEN4, DeviceObj)
    External (_SB_._SAN.GEN5, DeviceObj)
    External (_SB_._SAN.GEN6, DeviceObj)
    External (_SB_._SAN.GEN7, DeviceObj)
    External (_SB_._SAN.GEN8, DeviceObj)
    External (_SB_.BAT2, DeviceObj)
    External (_SB_.IETM, DeviceObj)
    External (_SB_.LID0, DeviceObj)
    External (_SB_.LID0.ULID, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GFX0, DeviceObj)
    External (_SB_.PCI0.GFX0.ALSI, UnknownObj)
    External (_SB_.PCI0.GFX0.CBLV, UnknownObj)
    External (_SB_.PCI0.GFX0.CDCK, UnknownObj)
    External (_SB_.PCI0.GFX0.CLID, UnknownObj)
    External (_SB_.PCI0.GFX0.DD1F, DeviceObj)
    External (_SB_.PCI0.GFX0.GLID, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GFX0.GSCI, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GFX0.GSSE, UnknownObj)
    External (_SB_.PCI0.GFX0.STAT, UnknownObj)
    External (_SB_.PCI0.GFX0.TCHE, UnknownObj)
    External (_SB_.PCI0.HDAS, DeviceObj)
    External (_SB_.PCI0.HDAS.PPMS, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.HDAS.PS0X, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.HDAS.PS3X, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.HIDW, MethodObj)    // 4 Arguments
    External (_SB_.PCI0.HIWC, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.ISP0, DeviceObj)
    External (_SB_.PCI0.LPCB.H_EC.XDAT, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.PAUD.PUAM, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.PEG0, DeviceObj)
    External (_SB_.PCI0.PEG0.HPME, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.PEG0.PEGP, DeviceObj)
    External (_SB_.PCI0.PEG1, DeviceObj)
    External (_SB_.PCI0.PEG1.HPME, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.PEG2, DeviceObj)
    External (_SB_.PCI0.PEG2.HPME, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP05.PWRG, UnknownObj)
    External (_SB_.PCI0.RP05.RSTG, UnknownObj)
    External (_SB_.PCI0.RP05.SCLK, UnknownObj)
    External (_SB_.PCI0.RP09.PWRG, UnknownObj)
    External (_SB_.PCI0.RP09.RSTG, UnknownObj)
    External (_SB_.PCI0.RP09.SCLK, UnknownObj)
    External (_SB_.PCI0.RP13.PWRG, UnknownObj)
    External (_SB_.PCI0.RP13.RSTG, UnknownObj)
    External (_SB_.PCI0.RP13.SCLK, UnknownObj)
    External (_SB_.PCI0.RP17.PWRG, UnknownObj)
    External (_SB_.PCI0.RP17.RSTG, UnknownObj)
    External (_SB_.PCI0.RP17.SCLK, UnknownObj)
    External (_SB_.PCI0.SAT0.SDSM, MethodObj)    // 4 Arguments
    External (_SB_.PCI0.XHC_.PS0X, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.XHC_.PS3X, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.XHC_.RHUB.INIR, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.XHC_.RHUB.PS0X, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.XHC_.RHUB.PS2X, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.XHC_.RHUB.PS3X, MethodObj)    // 0 Arguments
    External (_SB_.TPM_.PTS_, MethodObj)    // 1 Arguments
    External (_SB_.TPWR, DeviceObj)
    External (_TZ_.ETMD, IntObj)
    External (_TZ_.TZ00, DeviceObj)
    External (_TZ_.TZ01, DeviceObj)
    External (ALSE, UnknownObj)
    External (BNUM, UnknownObj)    // Conflicts with a later declaration
    External (BRTL, UnknownObj)
    External (D1F0, UnknownObj)
    External (D1F1, UnknownObj)
    External (D1F2, UnknownObj)
    External (DIDX, UnknownObj)
    External (DPTF, IntObj)
    External (GSMI, UnknownObj)
    External (IGDS, UnknownObj)
    External (LHIH, UnknownObj)
    External (LIDS, UnknownObj)
    External (LLOW, UnknownObj)
    External (M32B, UnknownObj)
    External (M32L, UnknownObj)
    External (M64B, UnknownObj)
    External (M64L, UnknownObj)
    External (ODV2, IntObj)
    External (ODV3, IntObj)
    External (ODV4, IntObj)
    External (PC00, IntObj)
    External (PC01, UnknownObj)
    External (PC02, UnknownObj)
    External (PC03, UnknownObj)
    External (PC04, UnknownObj)
    External (PC05, UnknownObj)
    External (PC06, UnknownObj)
    External (PC07, UnknownObj)
    External (PC08, UnknownObj)
    External (PC09, UnknownObj)
    External (PC10, UnknownObj)
    External (PC11, UnknownObj)
    External (PC12, UnknownObj)
    External (PC13, UnknownObj)
    External (PC14, UnknownObj)
    External (PC15, UnknownObj)
    External (RP05.PWRG, UnknownObj)
    External (RP05.RSTG, UnknownObj)
    External (RP05.SCLK, UnknownObj)
    External (RP09.PWRG, UnknownObj)
    External (RP09.RSTG, UnknownObj)
    External (RP09.SCLK, UnknownObj)
    External (RP13.PWRG, UnknownObj)
    External (RP13.RSTG, UnknownObj)
    External (RP13.SCLK, UnknownObj)
    External (RP17.PWRG, UnknownObj)
    External (RP17.RSTG, UnknownObj)
    External (RP17.SCLK, UnknownObj)
    External (SAT0.NVM1.VLPM, UnknownObj)
    External (SAT0.NVM2.VLPM, UnknownObj)
    External (SAT0.NVM3.VLPM, UnknownObj)
    External (SGMD, UnknownObj)

    Method (UDBG, 7, Serialized)
    {
    }

    Method (UDB0, 1, Serialized)
    {
    }

    Method (UDB1, 2, Serialized)
    {
    }

    Method (UDB2, 3, Serialized)
    {
    }

    Method (UDB3, 4, Serialized)
    {
    }

    Method (UDB4, 5, Serialized)
    {
    }

    Method (UDB5, 6, Serialized)
    {
    }

    Method (UDB6, 7, Serialized)
    {
    }

    Name (SS1, Zero)
    Name (SS2, Zero)
    Name (SS3, Zero)
    Name (SS4, One)
    OperationRegion (GNVS, SystemMemory, 0x8BE99000, 0x077C)
    Field (GNVS, AnyAcc, Lock, Preserve)
    {
        OSYS,   16, 
        SMIF,   8, 
        PRM0,   8, 
        PRM1,   8, 
        SCIF,   8, 
        PRM2,   8, 
        PRM3,   8, 
        LCKF,   8, 
        PRM4,   8, 
        PRM5,   8, 
        P80D,   32, 
        PWRS,   8, 
        DBGU,   8, 
        THOF,   8, 
        ACT1,   8, 
        ACTT,   8, 
        PSVT,   8, 
        TC1V,   8, 
        TC2V,   8, 
        TSPV,   8, 
        CRTT,   8, 
        DTSE,   8, 
        DTS1,   8, 
        DTS2,   8, 
        DTSF,   8, 
        Offset (0x1E), 
        BNUM,   8, 
        Offset (0x20), 
        Offset (0x21), 
        Offset (0x22), 
        Offset (0x23), 
        Offset (0x24), 
        Offset (0x25), 
        REVN,   8, 
        APIC,   8, 
        TCNT,   8, 
        PCP0,   8, 
        PCP1,   8, 
        PPCM,   8, 
        PPMF,   32, 
        C67L,   8, 
        NATP,   8, 
        CMAP,   8, 
        CMBP,   8, 
        LPTP,   8, 
        FDCP,   8, 
        CMCP,   8, 
        CIRP,   8, 
        SMSC,   8, 
        W381,   8, 
        SMC1,   8, 
        EMAE,   8, 
        EMAP,   16, 
        EMAL,   16, 
        MEFE,   8, 
        DSTS,   8, 
        MORD,   8, 
        TCGP,   8, 
        PPRP,   32, 
        PPRQ,   8, 
        LPPR,   8, 
        IDEM,   8, 
        OMPR,   8, 
        OMBR,   8, 
        OSCC,   8, 
        NEXP,   8, 
        SBV1,   8, 
        SBV2,   8, 
        ECON,   8, 
        DSEN,   8, 
        GPIC,   8, 
        CTYP,   8, 
        L01C,   8, 
        VFN0,   8, 
        VFN1,   8, 
        VFN2,   8, 
        VFN3,   8, 
        VFN4,   8, 
        VFN5,   8, 
        VFN6,   8, 
        VFN7,   8, 
        VFN8,   8, 
        VFN9,   8, 
        Offset (0x61), 
        CPFM,   8, 
        CPSP,   8, 
        CPPT,   8, 
        CPPS,   8, 
        TBAL,   32, 
        TBAH,   32, 
        RTIP,   8, 
        TSOD,   8, 
        PFLV,   8, 
        BREV,   8, 
        PDTS,   8, 
        PKGA,   8, 
        PAMT,   8, 
        AC0F,   8, 
        AC1F,   8, 
        DTS3,   8, 
        DTS4,   8, 
        LTR1,   8, 
        LTR2,   8, 
        LTR3,   8, 
        LTR4,   8, 
        LTR5,   8, 
        LTR6,   8, 
        LTR7,   8, 
        LTR8,   8, 
        LTR9,   8, 
        LTRA,   8, 
        LTRB,   8, 
        LTRC,   8, 
        LTRD,   8, 
        LTRE,   8, 
        LTRF,   8, 
        LTRG,   8, 
        LTRH,   8, 
        LTRI,   8, 
        LTRJ,   8, 
        LTRK,   8, 
        LTRL,   8, 
        LTRM,   8, 
        LTRN,   8, 
        LTRO,   8, 
        OBF1,   8, 
        OBF2,   8, 
        OBF3,   8, 
        OBF4,   8, 
        OBF5,   8, 
        OBF6,   8, 
        OBF7,   8, 
        OBF8,   8, 
        OBF9,   8, 
        OBFA,   8, 
        OBFB,   8, 
        OBFC,   8, 
        OBFD,   8, 
        OBFE,   8, 
        OBFF,   8, 
        OBFG,   8, 
        OBFH,   8, 
        OBFI,   8, 
        OBFJ,   8, 
        OBFK,   8, 
        OBFL,   8, 
        OBFM,   8, 
        OBFN,   8, 
        OBFO,   8, 
        XTUB,   32, 
        XTUS,   32, 
        XMPB,   32, 
        DDRF,   8, 
        RTD3,   8, 
        PEP0,   8, 
        PEP3,   8, 
        Offset (0xEF), 
        BGMA,   64, 
        BGMS,   8, 
        BGIA,   16, 
        IRMC,   8, 
        NFCE,   8, 
        CHEN,   8, 
        S0ID,   8, 
        CTDB,   8, 
        DKSM,   8, 
        SIO1,   16, 
        SIO2,   16, 
        SPBA,   16, 
        SEC0,   32, 
        SEC1,   32, 
        SEC2,   32, 
        SEC3,   32, 
        SEC4,   32, 
        SEC5,   32, 
        SEC6,   32, 
        SEC7,   32, 
        SEC8,   32, 
        Offset (0x1F4), 
        Offset (0x200), 
        Offset (0x203), 
        XHPR,   8, 
        RIC0,   8, 
        GBSX,   8, 
        IUBE,   8, 
        IUCE,   8, 
        IUDE,   8, 
        ECNO,   8, 
        AUDD,   16, 
        IC0D,   16, 
        IC1D,   16, 
        IC1S,   16, 
        VRRD,   16, 
        PSCP,   8, 
        I20D,   16, 
        I21D,   16, 
        RCG0,   16, 
        RCG1,   16, 
        ECDB,   8, 
        P2ME,   8, 
        P2MK,   8, 
        SSH0,   16, 
        SSL0,   16, 
        SSD0,   16, 
        FMH0,   16, 
        FML0,   16, 
        FMD0,   16, 
        FPH0,   16, 
        FPL0,   16, 
        FPD0,   16, 
        SSH1,   16, 
        SSL1,   16, 
        SSD1,   16, 
        FMH1,   16, 
        FML1,   16, 
        FMD1,   16, 
        FPH1,   16, 
        FPL1,   16, 
        FPD1,   16, 
        M0C0,   16, 
        M1C0,   16, 
        M2C0,   16, 
        M0C1,   16, 
        M1C1,   16, 
        M2C1,   16, 
        M0C2,   16, 
        M1C2,   16, 
        M0C3,   16, 
        M1C3,   16, 
        M0C4,   16, 
        M1C4,   16, 
        M0C5,   16, 
        M1C5,   16, 
        TBSF,   8, 
        GIRQ,   32, 
        DMTP,   8, 
        DMTD,   8, 
        DMSH,   8, 
        SHSB,   8, 
        PLCS,   8, 
        PLVL,   16, 
        Offset (0x27E), 
        SDWE,   8, 
        USBH,   8, 
        BCV4,   8, 
        WTV0,   8, 
        WTV1,   8, 
        APFU,   8, 
        SOHP,   8, 
        GP5F,   8, 
        NOHP,   8, 
        TBSE,   8, 
        WKFN,   8, 
        PEPC,   32, 
        VRSD,   16, 
        PB1E,   8, 
        GNID,   8, 
        Offset (0x2B2), 
        SPST,   8, 
        Offset (0x2CD), 
        ECLP,   8, 
        Offset (0x320), 
        PSME,   8, 
        PDT1,   8, 
        PLM1,   32, 
        PTW1,   32, 
        PDT2,   8, 
        PLM2,   32, 
        PTW2,   32, 
        DDT1,   8, 
        DDP1,   8, 
        DLI1,   16, 
        DPL1,   16, 
        DTW1,   32, 
        DMI1,   16, 
        DMA1,   16, 
        DMT1,   16, 
        DDT2,   8, 
        DDP2,   8, 
        DLI2,   16, 
        DPL2,   16, 
        DTW2,   32, 
        DMI2,   16, 
        DMA2,   16, 
        DMT2,   16, 
        WIFE,   8, 
        DOM1,   8, 
        LIM1,   16, 
        TIM1,   32, 
        DOM2,   8, 
        LIM2,   16, 
        TIM2,   32, 
        DOM3,   8, 
        LIM3,   16, 
        TIM3,   32, 
        TRD0,   8, 
        TRL0,   8, 
        TRD1,   8, 
        TRL1,   8, 
        WDM1,   8, 
        CID1,   16, 
        WDM2,   8, 
        CID2,   16, 
        Offset (0x378), 
        Offset (0x37D), 
        SDS0,   8, 
        SDS1,   8, 
        SDS2,   8, 
        SDS3,   8, 
        SDS4,   8, 
        SDS5,   8, 
        SDS6,   8, 
        SDS7,   8, 
        SDS8,   8, 
        SDS9,   8, 
        SDSA,   8, 
        TPLB,   8, 
        TPLH,   16, 
        WTVX,   8, 
        WITX,   8, 
        GPTD,   8, 
        GDBT,   16, 
        UTKX,   8, 
        SPTD,   8, 
        GEXN,   8, 
        TBTS,   8, 
        TBWS,   8, 
        AICS,   8, 
        TARS,   8, 
        FPAT,   8, 
        FPEN,   8, 
        FPGN,   32, 
        FPLV,   8, 
        CPAD,   16, 
        CPAB,   8, 
        TNAT,   8, 
        CPGN,   32, 
        CF2T,   8, 
        TDGS,   8, 
        DCSC,   8, 
        DCKE,   8, 
        UDCK,   8, 
        SUDK,   8, 
        OHPN,   8, 
        GHPN,   8, 
        EGPC,   32, 
        EGPV,   8, 
        TBDT,   32, 
        ATLB,   32, 
        SDM0,   8, 
        SDM1,   8, 
        SDM2,   8, 
        SDM3,   8, 
        SDM4,   8, 
        SDM5,   8, 
        SDM6,   8, 
        SDM7,   8, 
        SDM8,   8, 
        SDM9,   8, 
        SDMA,   8, 
        USTP,   8, 
        SSHI,   16, 
        SSLI,   16, 
        SSDI,   16, 
        FMHI,   16, 
        FMLI,   16, 
        FMDI,   16, 
        FPHI,   16, 
        FPLI,   16, 
        FPDI,   16, 
        M0CI,   16, 
        M1CI,   16, 
        M0CS,   16, 
        M1CS,   16, 
        M0CU,   16, 
        M1CU,   16, 
        CAMT,   8, 
        IVDF,   8, 
        IFWG,   64, 
        IVWS,   8, 
        IVPR,   8, 
        DIVO,   16, 
        DIVF,   16, 
        IVAD,   8, 
        IVRS,   8, 
        IVDG,   64, 
        DSPR,   8, 
        DDSO,   16, 
        DDSF,   16, 
        DSAD,   8, 
        DSRS,   8, 
        DVDG,   64, 
        EIDF,   8, 
        Offset (0x429), 
        GPDI,   32, 
        Offset (0x431), 
        CL00,   8, 
        CL01,   8, 
        CL02,   8, 
        CL03,   8, 
        L0EN,   8, 
        L1EN,   8, 
        L2EN,   8, 
        L3EN,   8, 
        CDIV,   8, 
        C0TP,   8, 
        C0CV,   8, 
        C0GP,   8, 
        C0IB,   8, 
        C0IA,   16, 
        C0P0,   8, 
        C0P1,   8, 
        C0P2,   8, 
        C0P3,   8, 
        C0G0,   8, 
        C0G1,   8, 
        C0G2,   8, 
        C0G3,   8, 
        C0F0,   8, 
        C0F1,   8, 
        C0F2,   8, 
        C0F3,   8, 
        C0A0,   8, 
        C0A1,   8, 
        C0A2,   8, 
        C0A3,   8, 
        C0I0,   8, 
        C0I1,   8, 
        C0I2,   8, 
        C0I3,   8, 
        C0PL,   8, 
        C1TP,   8, 
        C1CV,   8, 
        C1GP,   8, 
        C1IB,   8, 
        C1IA,   16, 
        C1P0,   8, 
        C1P1,   8, 
        C1P2,   8, 
        C1P3,   8, 
        C1G0,   8, 
        C1G1,   8, 
        C1G2,   8, 
        C1G3,   8, 
        C1F0,   8, 
        C1F1,   8, 
        C1F2,   8, 
        C1F3,   8, 
        C1A0,   8, 
        C1A1,   8, 
        C1A2,   8, 
        C1A3,   8, 
        C1I0,   8, 
        C1I1,   8, 
        C1I2,   8, 
        C1I3,   8, 
        C1PL,   8, 
        C2TP,   8, 
        C2CV,   8, 
        C2GP,   8, 
        C2IB,   8, 
        C2IA,   16, 
        C2P0,   8, 
        C2P1,   8, 
        C2P2,   8, 
        C2P3,   8, 
        C2G0,   8, 
        C2G1,   8, 
        C2G2,   8, 
        C2G3,   8, 
        C2F0,   8, 
        C2F1,   8, 
        C2F2,   8, 
        C2F3,   8, 
        C2A0,   8, 
        C2A1,   8, 
        C2A2,   8, 
        C2A3,   8, 
        C2I0,   8, 
        C2I1,   8, 
        C2I2,   8, 
        C2I3,   8, 
        C2PL,   8, 
        C3TP,   8, 
        C3CV,   8, 
        C3GP,   8, 
        C3IB,   8, 
        C3IA,   16, 
        C3P0,   8, 
        C3P1,   8, 
        C3P2,   8, 
        C3P3,   8, 
        C3G0,   8, 
        C3G1,   8, 
        C3G2,   8, 
        C3G3,   8, 
        C3F0,   8, 
        C3F1,   8, 
        C3F2,   8, 
        C3F3,   8, 
        C3A0,   8, 
        C3A1,   8, 
        C3A2,   8, 
        C3A3,   8, 
        C3I0,   8, 
        C3I1,   8, 
        C3I2,   8, 
        C3I3,   8, 
        C3PL,   8, 
        L0SM,   8, 
        L0H0,   8, 
        L0H1,   8, 
        L0H2,   8, 
        L0H3,   8, 
        L0H4,   8, 
        L0H5,   8, 
        L0H6,   8, 
        L0H7,   8, 
        L0H8,   8, 
        L0PL,   8, 
        L0M0,   8, 
        L0M1,   8, 
        L0M2,   8, 
        L0M3,   8, 
        L0M4,   8, 
        L0M5,   8, 
        L0M6,   8, 
        L0M7,   8, 
        L0M8,   8, 
        L0M9,   8, 
        L0MA,   8, 
        L0MB,   8, 
        L0MC,   8, 
        L0MD,   8, 
        L0ME,   8, 
        L0MF,   8, 
        L0DI,   8, 
        L0BS,   8, 
        L0A0,   16, 
        L0A1,   16, 
        L0A2,   16, 
        L0A3,   16, 
        L0A4,   16, 
        L0A5,   16, 
        L0A6,   16, 
        L0A7,   16, 
        L0A8,   16, 
        L0A9,   16, 
        L0AA,   16, 
        L0AB,   16, 
        L0D0,   8, 
        L0D1,   8, 
        L0D2,   8, 
        L0D3,   8, 
        L0D4,   8, 
        L0D5,   8, 
        L0D6,   8, 
        L0D7,   8, 
        L0D8,   8, 
        L0D9,   8, 
        L0DA,   8, 
        L0DB,   8, 
        L0DV,   8, 
        L0CV,   8, 
        L0LU,   8, 
        L0NL,   8, 
        L0EE,   8, 
        L0VC,   8, 
        L0FS,   8, 
        L0DG,   8, 
        L0C0,   8, 
        L0C1,   8, 
        L0C2,   8, 
        L0C3,   8, 
        L0CK,   32, 
        L0CL,   8, 
        L1SM,   8, 
        L1H0,   8, 
        L1H1,   8, 
        L1H2,   8, 
        L1H3,   8, 
        L1H4,   8, 
        L1H5,   8, 
        L1H6,   8, 
        L1H7,   8, 
        L1H8,   8, 
        L1PL,   8, 
        L1M0,   8, 
        L1M1,   8, 
        L1M2,   8, 
        L1M3,   8, 
        L1M4,   8, 
        L1M5,   8, 
        L1M6,   8, 
        L1M7,   8, 
        L1M8,   8, 
        L1M9,   8, 
        L1MA,   8, 
        L1MB,   8, 
        L1MC,   8, 
        L1MD,   8, 
        L1ME,   8, 
        L1MF,   8, 
        L1DI,   8, 
        L1BS,   8, 
        L1A0,   16, 
        L1A1,   16, 
        L1A2,   16, 
        L1A3,   16, 
        L1A4,   16, 
        L1A5,   16, 
        L1A6,   16, 
        L1A7,   16, 
        L1A8,   16, 
        L1A9,   16, 
        L1AA,   16, 
        L1AB,   16, 
        L1D0,   8, 
        L1D1,   8, 
        L1D2,   8, 
        L1D3,   8, 
        L1D4,   8, 
        L1D5,   8, 
        L1D6,   8, 
        L1D7,   8, 
        L1D8,   8, 
        L1D9,   8, 
        L1DA,   8, 
        L1DB,   8, 
        L1DV,   8, 
        L1CV,   8, 
        L1LU,   8, 
        L1NL,   8, 
        L1EE,   8, 
        L1VC,   8, 
        L1FS,   8, 
        L1DG,   8, 
        L1C0,   8, 
        L1C1,   8, 
        L1C2,   8, 
        L1C3,   8, 
        L1CK,   32, 
        L1CL,   8, 
        L2SM,   8, 
        L2H0,   8, 
        L2H1,   8, 
        L2H2,   8, 
        L2H3,   8, 
        L2H4,   8, 
        L2H5,   8, 
        L2H6,   8, 
        L2H7,   8, 
        L2H8,   8, 
        L2PL,   8, 
        L2M0,   8, 
        L2M1,   8, 
        L2M2,   8, 
        L2M3,   8, 
        L2M4,   8, 
        L2M5,   8, 
        L2M6,   8, 
        L2M7,   8, 
        L2M8,   8, 
        L2M9,   8, 
        L2MA,   8, 
        L2MB,   8, 
        L2MC,   8, 
        L2MD,   8, 
        L2ME,   8, 
        L2MF,   8, 
        L2DI,   8, 
        L2BS,   8, 
        L2A0,   16, 
        L2A1,   16, 
        L2A2,   16, 
        L2A3,   16, 
        L2A4,   16, 
        L2A5,   16, 
        L2A6,   16, 
        L2A7,   16, 
        L2A8,   16, 
        L2A9,   16, 
        L2AA,   16, 
        L2AB,   16, 
        L2D0,   8, 
        L2D1,   8, 
        L2D2,   8, 
        L2D3,   8, 
        L2D4,   8, 
        L2D5,   8, 
        L2D6,   8, 
        L2D7,   8, 
        L2D8,   8, 
        L2D9,   8, 
        L2DA,   8, 
        L2DB,   8, 
        L2DV,   8, 
        L2CV,   8, 
        L2LU,   8, 
        L2NL,   8, 
        L2EE,   8, 
        L2VC,   8, 
        L2FS,   8, 
        L2DG,   8, 
        L2C0,   8, 
        L2C1,   8, 
        L2C2,   8, 
        L2C3,   8, 
        L2CK,   32, 
        L2CL,   8, 
        L3SM,   8, 
        L3H0,   8, 
        L3H1,   8, 
        L3H2,   8, 
        L3H3,   8, 
        L3H4,   8, 
        L3H5,   8, 
        L3H6,   8, 
        L3H7,   8, 
        L3H8,   8, 
        L3PL,   8, 
        L3M0,   8, 
        L3M1,   8, 
        L3M2,   8, 
        L3M3,   8, 
        L3M4,   8, 
        L3M5,   8, 
        L3M6,   8, 
        L3M7,   8, 
        L3M8,   8, 
        L3M9,   8, 
        L3MA,   8, 
        L3MB,   8, 
        L3MC,   8, 
        L3MD,   8, 
        L3ME,   8, 
        L3MF,   8, 
        L3DI,   8, 
        L3BS,   8, 
        L3A0,   16, 
        L3A1,   16, 
        L3A2,   16, 
        L3A3,   16, 
        L3A4,   16, 
        L3A5,   16, 
        L3A6,   16, 
        L3A7,   16, 
        L3A8,   16, 
        L3A9,   16, 
        L3AA,   16, 
        L3AB,   16, 
        L3D0,   8, 
        L3D1,   8, 
        L3D2,   8, 
        L3D3,   8, 
        L3D4,   8, 
        L3D5,   8, 
        L3D6,   8, 
        L3D7,   8, 
        L3D8,   8, 
        L3D9,   8, 
        L3DA,   8, 
        L3DB,   8, 
        L3DV,   8, 
        L3CV,   8, 
        L3LU,   8, 
        L3NL,   8, 
        L3EE,   8, 
        L3VC,   8, 
        L3FS,   8, 
        L3DG,   8, 
        L3C0,   8, 
        L3C1,   8, 
        L3C2,   8, 
        L3C3,   8, 
        L3CK,   32, 
        L3CL,   8, 
        ECR1,   8, 
        Offset (0x60E), 
        I2SC,   8, 
        Offset (0x615), 
        UBCB,   32, 
        EMOD,   8, 
        WIFC,   8, 
        Offset (0x622), 
        TPLS,   8, 
        TPDB,   8, 
        TPDH,   16, 
        TPDS,   8, 
        ADPM,   32, 
        AG1L,   64, 
        AG1H,   64, 
        AG2L,   64, 
        AG2H,   64, 
        AG3L,   64, 
        AG3H,   64, 
        HEFE,   8, 
        XDCE,   8, 
        STXE,   8, 
        STX0,   8, 
        STX1,   8, 
        STX2,   8, 
        STX3,   8, 
        STX4,   8, 
        STX5,   8, 
        STX6,   8, 
        STX7,   8, 
        STX8,   8, 
        STX9,   8, 
        RTVM,   8, 
        USTC,   8, 
        BATP,   8, 
        TSDB,   8, 
        DEPC,   8, 
        PDFC,   8, 
        IVCM,   8, 
        HEB1,   32, 
        RBY1,   8, 
        RBY2,   8, 
        SCSS,   8, 
        HAID,   8, 
        NCTC,   8, 
        NCTI,   8, 
        NCTH,   8, 
        HSIO,   8, 
        TPPT,   8, 
        SHAP,   8, 
        EIAP,   8, 
        ZPOD,   8, 
        SRSP,   32, 
        CEDS,   8, 
        EHK3,   8, 
        EHK4,   8, 
        EHK5,   8, 
        EHK6,   8, 
        EHK7,   8, 
        EHK8,   8, 
        VBVP,   8, 
        VBVD,   8, 
        VBHB,   8, 
        VBRL,   8, 
        SMSS,   8, 
        VBST,   8, 
        ADAS,   8, 
        PPBG,   32, 
        AEAB,   8, 
        AHDB,   8, 
        PBSD,   8, 
        DPLL,   8, 
        DPHL,   8, 
        PWIG,   8, 
        MESE,   8, 
        Offset (0x6A1), 
        XSMI,   32, 
        PAPE,   32, 
        PSTW,   32, 
        MWLR,   32, 
        UP8P,   32, 
        MS2R,   32, 
        MS2P,   32, 
        UCSI,   8, 
        UCG1,   32, 
        UCG2,   32, 
        WGUR,   32, 
        WRFE,   8, 
        WRC1,   8, 
        WRC2,   8, 
        WRC3,   8, 
        WRC4,   8, 
        AWVI,   32, 
        Offset (0x6E1), 
        WGWS,   8, 
        Offset (0x6E3), 
        C0VE,   8, 
        C0W0,   8, 
        C0W1,   8, 
        C0W2,   8, 
        C0W3,   8, 
        C0W4,   8, 
        C0W5,   8, 
        C1VE,   8, 
        C1W0,   8, 
        C1W1,   8, 
        C1W2,   8, 
        C1W3,   8, 
        C1W4,   8, 
        C1W5,   8, 
        C2VE,   8, 
        C2W0,   8, 
        C2W1,   8, 
        C2W2,   8, 
        C2W3,   8, 
        C2W4,   8, 
        C2W5,   8, 
        C3VE,   8, 
        C3W0,   8, 
        C3W1,   8, 
        C3W2,   8, 
        C3W3,   8, 
        C3W4,   8, 
        C3W5,   8, 
        L0LE,   8, 
        L0PP,   8, 
        L0VR,   8, 
        L1LE,   8, 
        L1PP,   8, 
        L1VR,   8, 
        L2LE,   8, 
        L2PP,   8, 
        L2VR,   8, 
        L3LE,   8, 
        L3PP,   8, 
        L3VR,   8, 
        WLRP,   8, 
        SSRP,   8, 
        WIPR,   8, 
        TBS1,   8, 
        TBMP,   8, 
        FPA1,   8, 
        FPE1,   8, 
        FPG1,   32, 
        FP1L,   8, 
        CPD1,   16, 
        CPB1,   8, 
        CPG1,   32, 
        UTCM,   8, 
        USME,   8, 
        UPT1,   8, 
        UPT2,   8, 
        TWIN,   8, 
        TRWA,   8, 
        PEWE,   8, 
        Offset (0x74E), 
        ELPM,   32, 
        ELPS,   32, 
        Offset (0x758), 
        UCRT,   8, 
        TBOD,   16, 
        TSXW,   8, 
        VRGP,   32, 
        PVSC,   8, 
        RTBT,   8, 
        RTBC,   8, 
        TBCD,   16, 
        TBTE,   8, 
        RWAN,   8, 
        MANF,   8, 
        OADR,   64, 
        OSIZ,   32, 
        PSBR,   32, 
        EBID,   32
    }

    Scope (_SB)
    {
        Name (PR00, Package (0x21)
        {
            Package (0x04)
            {
                0x001FFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                Zero, 
                LNKA, 
                Zero
            }
        })
        Name (AR00, Package (0x2D)
        {
            Package (0x04)
            {
                0x001FFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                Zero, 
                Zero, 
                0x14
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                One, 
                Zero, 
                0x15
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x02, 
                Zero, 
                0x16
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x03, 
                Zero, 
                0x17
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0019FFFF, 
                Zero, 
                Zero, 
                0x20
            }, 

            Package (0x04)
            {
                0x0019FFFF, 
                One, 
                Zero, 
                0x21
            }, 

            Package (0x04)
            {
                0x0019FFFF, 
                0x02, 
                Zero, 
                0x22
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                Zero, 
                Zero, 
                0x14
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                Zero, 
                Zero, 
                0x10
            }
        })
        Name (PR04, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR04, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PR05, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                Zero
            }
        })
        Name (AR05, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x10
            }
        })
        Name (PR06, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR06, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x11
            }
        })
        Name (PR07, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKC, 
                Zero
            }
        })
        Name (AR07, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x12
            }
        })
        Name (PR08, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR08, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PR09, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                Zero
            }
        })
        Name (AR09, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x10
            }
        })
        Name (PR0E, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR0E, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x11
            }
        })
        Name (PR0F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKC, 
                Zero
            }
        })
        Name (AR0F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x12
            }
        })
        Name (PR02, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR02, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PR0A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                Zero
            }
        })
        Name (AR0A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x10
            }
        })
        Name (PR0B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR0B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x11
            }
        })
        Name (PRSA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {3,4,5,6,10,11,12,14,15}
        })
        Alias (PRSA, PRSB)
        Alias (PRSA, PRSC)
        Alias (PRSA, PRSD)
        Alias (PRSA, PRSE)
        Alias (PRSA, PRSF)
        Alias (PRSA, PRSG)
        Alias (PRSA, PRSH)
        Device (PCI0)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, Zero)  // _ADR: Address
            Method (^BN00, 0, NotSerialized)
            {
                Return (Zero)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BN00 ())
            }

            Name (_UID, Zero)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR00 ())
                }

                Return (PR00 ())
            }

            OperationRegion (HBUS, PCI_Config, Zero, 0x0100)
            Field (HBUS, DWordAcc, NoLock, Preserve)
            {
                Offset (0x40), 
                EPEN,   1, 
                    ,   11, 
                EPBR,   20, 
                Offset (0x48), 
                MHEN,   1, 
                    ,   14, 
                MHBR,   17, 
                Offset (0x50), 
                GCLK,   1, 
                Offset (0x54), 
                D0EN,   1, 
                D1F2,   1, 
                D1F1,   1, 
                D1F0,   1, 
                Offset (0x60), 
                PXEN,   1, 
                PXSZ,   2, 
                    ,   23, 
                PXBR,   6, 
                Offset (0x68), 
                DIEN,   1, 
                    ,   11, 
                DIBR,   20, 
                Offset (0x70), 
                    ,   20, 
                MEBR,   12, 
                Offset (0x80), 
                PMLK,   1, 
                    ,   3, 
                PM0H,   2, 
                Offset (0x81), 
                PM1L,   2, 
                    ,   2, 
                PM1H,   2, 
                Offset (0x82), 
                PM2L,   2, 
                    ,   2, 
                PM2H,   2, 
                Offset (0x83), 
                PM3L,   2, 
                    ,   2, 
                PM3H,   2, 
                Offset (0x84), 
                PM4L,   2, 
                    ,   2, 
                PM4H,   2, 
                Offset (0x85), 
                PM5L,   2, 
                    ,   2, 
                PM5H,   2, 
                Offset (0x86), 
                PM6L,   2, 
                    ,   2, 
                PM6H,   2, 
                Offset (0x87), 
                Offset (0xA8), 
                    ,   20, 
                TUUD,   19, 
                Offset (0xBC), 
                    ,   20, 
                TLUD,   12, 
                Offset (0xC8), 
                    ,   7, 
                HTSE,   1
            }

            Name (BUF0, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0100,             // Length
                    ,, _Y00)
                DWordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000CF7,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000CF8,         // Length
                    ,, , TypeStatic, DenseTranslation)
                IO (Decode16,
                    0x0CF8,             // Range Minimum
                    0x0CF8,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                DWordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x00000000,         // Granularity
                    0x00000D00,         // Range Minimum
                    0x0000FFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x0000F300,         // Length
                    ,, , TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000A0000,         // Range Minimum
                    0x000BFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C0000,         // Range Minimum
                    0x000C3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y01, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C4000,         // Range Minimum
                    0x000C7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y02, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C8000,         // Range Minimum
                    0x000CBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y03, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000CC000,         // Range Minimum
                    0x000CFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y04, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D0000,         // Range Minimum
                    0x000D3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y05, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D4000,         // Range Minimum
                    0x000D7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y06, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D8000,         // Range Minimum
                    0x000DBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y07, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000DC000,         // Range Minimum
                    0x000DFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y08, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E0000,         // Range Minimum
                    0x000E3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y09, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E4000,         // Range Minimum
                    0x000E7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y0A, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E8000,         // Range Minimum
                    0x000EBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y0B, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000EC000,         // Range Minimum
                    0x000EFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y0C, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000F0000,         // Range Minimum
                    0x000FFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00010000,         // Length
                    ,, _Y0D, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0xDFFFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0xE0000000,         // Length
                    ,, _Y0E, AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000010000, // Range Minimum
                    0x000000000001FFFF, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000010000, // Length
                    ,, _Y0F, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0xFD000000,         // Range Minimum
                    0xFE7FFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x01800000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
            })
            Name (EP_B, Zero)
            Name (MH_B, Zero)
            Name (PC_B, Zero)
            Name (PC_L, Zero)
            Name (DM_B, Zero)
            Method (GEPB, 0, Serialized)
            {
                If ((EP_B == Zero))
                {
                    EP_B = (EPBR << 0x0C)
                }

                Return (EP_B) /* \_SB_.PCI0.EP_B */
            }

            Method (GMHB, 0, Serialized)
            {
                If ((MH_B == Zero))
                {
                    MH_B = (MHBR << 0x0F)
                }

                Return (MH_B) /* \_SB_.PCI0.MH_B */
            }

            Method (GPCB, 0, Serialized)
            {
                If ((PC_B == Zero))
                {
                    PC_B = (PXBR << 0x1A)
                }

                Return (PC_B) /* \_SB_.PCI0.PC_B */
            }

            Method (GPCL, 0, Serialized)
            {
                If ((PC_L == Zero))
                {
                    PC_L = (0x10000000 >> PXSZ) /* \_SB_.PCI0.PXSZ */
                }

                Return (PC_L) /* \_SB_.PCI0.PC_L */
            }

            Method (GDMB, 0, Serialized)
            {
                If ((DM_B == Zero))
                {
                    DM_B = (DIBR << 0x0C)
                }

                Return (DM_B) /* \_SB_.PCI0.DM_B */
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Local0 = GPCL ()
                CreateWordField (BUF0, \_SB.PCI0._Y00._MAX, PBMX)  // _MAX: Maximum Base Address
                PBMX = ((Local0 >> 0x14) - 0x02)
                CreateWordField (BUF0, \_SB.PCI0._Y00._LEN, PBLN)  // _LEN: Length
                PBLN = ((Local0 >> 0x14) - One)
                If (PM1L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y01._LEN, C0LN)  // _LEN: Length
                    C0LN = Zero
                }

                If ((PM1L == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y01._RW, C0RW)  // _RW_: Read-Write Status
                    C0RW = Zero
                }

                If (PM1H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y02._LEN, C4LN)  // _LEN: Length
                    C4LN = Zero
                }

                If ((PM1H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y02._RW, C4RW)  // _RW_: Read-Write Status
                    C4RW = Zero
                }

                If (PM2L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y03._LEN, C8LN)  // _LEN: Length
                    C8LN = Zero
                }

                If ((PM2L == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y03._RW, C8RW)  // _RW_: Read-Write Status
                    C8RW = Zero
                }

                If (PM2H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y04._LEN, CCLN)  // _LEN: Length
                    CCLN = Zero
                }

                If ((PM2H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y04._RW, CCRW)  // _RW_: Read-Write Status
                    CCRW = Zero
                }

                If (PM3L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y05._LEN, D0LN)  // _LEN: Length
                    D0LN = Zero
                }

                If ((PM3L == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y05._RW, D0RW)  // _RW_: Read-Write Status
                    D0RW = Zero
                }

                If (PM3H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y06._LEN, D4LN)  // _LEN: Length
                    D4LN = Zero
                }

                If ((PM3H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y06._RW, D4RW)  // _RW_: Read-Write Status
                    D4RW = Zero
                }

                If (PM4L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y07._LEN, D8LN)  // _LEN: Length
                    D8LN = Zero
                }

                If ((PM4L == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y07._RW, D8RW)  // _RW_: Read-Write Status
                    D8RW = Zero
                }

                If (PM4H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y08._LEN, DCLN)  // _LEN: Length
                    DCLN = Zero
                }

                If ((PM4H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y08._RW, DCRW)  // _RW_: Read-Write Status
                    DCRW = Zero
                }

                If (PM5L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y09._LEN, E0LN)  // _LEN: Length
                    E0LN = Zero
                }

                If ((PM5L == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y09._RW, E0RW)  // _RW_: Read-Write Status
                    E0RW = Zero
                }

                If (PM5H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y0A._LEN, E4LN)  // _LEN: Length
                    E4LN = Zero
                }

                If ((PM5H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y0A._RW, E4RW)  // _RW_: Read-Write Status
                    E4RW = Zero
                }

                If (PM6L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y0B._LEN, E8LN)  // _LEN: Length
                    E8LN = Zero
                }

                If ((PM6L == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y0B._RW, E8RW)  // _RW_: Read-Write Status
                    E8RW = Zero
                }

                If (PM6H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y0C._LEN, ECLN)  // _LEN: Length
                    ECLN = Zero
                }

                If ((PM6H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y0C._RW, ECRW)  // _RW_: Read-Write Status
                    ECRW = Zero
                }

                If (PM0H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y0D._LEN, F0LN)  // _LEN: Length
                    F0LN = Zero
                }

                If ((PM0H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y0D._RW, F0RW)  // _RW_: Read-Write Status
                    F0RW = Zero
                }

                CreateDWordField (BUF0, \_SB.PCI0._Y0E._MIN, M1MN)  // _MIN: Minimum Base Address
                CreateDWordField (BUF0, \_SB.PCI0._Y0E._MAX, M1MX)  // _MAX: Maximum Base Address
                CreateDWordField (BUF0, \_SB.PCI0._Y0E._LEN, M1LN)  // _LEN: Length
                M1LN = M32L /* External reference */
                M1MN = M32B /* External reference */
                M1MX = ((M1MN + M1LN) - One)
                If ((M64L == Zero))
                {
                    CreateQWordField (BUF0, \_SB.PCI0._Y0F._LEN, MSLN)  // _LEN: Length
                    MSLN = Zero
                }
                Else
                {
                    CreateQWordField (BUF0, \_SB.PCI0._Y0F._LEN, M2LN)  // _LEN: Length
                    CreateQWordField (BUF0, \_SB.PCI0._Y0F._MIN, M2MN)  // _MIN: Minimum Base Address
                    CreateQWordField (BUF0, \_SB.PCI0._Y0F._MAX, M2MX)  // _MAX: Maximum Base Address
                    M2LN = M64L /* External reference */
                    M2MN = M64B /* External reference */
                    M2MX = ((M2MN + M2LN) - One)
                }

                Return (BUF0) /* \_SB_.PCI0.BUF0 */
            }

            Name (GUID, ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */)
            Name (SUPP, Zero)
            Name (CTRL, Zero)
            Name (XCNT, Zero)
            Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
            {
                Local0 = Arg3
                CreateDWordField (Local0, Zero, CDW1)
                CreateDWordField (Local0, 0x04, CDW2)
                CreateDWordField (Local0, 0x08, CDW3)
                If ((Arg0 == GUID))
                {
                    SUPP = CDW2 /* \_SB_.PCI0._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.PCI0._OSC.CDW3 */
                    If (!NEXP)
                    {
                        CTRL &= 0xFFFFFFF8
                    }

                    If ((TBTS == One))
                    {
                        CTRL &= 0xFFFFFFF7
                    }

                    If (~(CDW1 & One))
                    {
                        If ((CTRL & One))
                        {
                            NHPG ()
                        }

                        If ((CTRL & 0x04))
                        {
                            NPME ()
                        }
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.PCI0.CTRL */
                    OSCC = CTRL /* \_SB_.PCI0.CTRL */
                    Return (Local0)
                }
                Else
                {
                    CDW1 |= 0x04
                    Return (Local0)
                }
            }

            Scope (\_SB.PCI0)
            {
                Method (AR00, 0, NotSerialized)
                {
                    Return (^^AR00) /* \_SB_.AR00 */
                }

                Method (PR00, 0, NotSerialized)
                {
                    Return (^^PR00) /* \_SB_.PR00 */
                }

                Method (AR02, 0, NotSerialized)
                {
                    Return (^^AR02) /* \_SB_.AR02 */
                }

                Method (PR02, 0, NotSerialized)
                {
                    Return (^^PR02) /* \_SB_.PR02 */
                }

                Method (AR04, 0, NotSerialized)
                {
                    Return (^^AR04) /* \_SB_.AR04 */
                }

                Method (PR04, 0, NotSerialized)
                {
                    Return (^^PR04) /* \_SB_.PR04 */
                }

                Method (AR05, 0, NotSerialized)
                {
                    Return (^^AR05) /* \_SB_.AR05 */
                }

                Method (PR05, 0, NotSerialized)
                {
                    Return (^^PR05) /* \_SB_.PR05 */
                }

                Method (AR06, 0, NotSerialized)
                {
                    Return (^^AR06) /* \_SB_.AR06 */
                }

                Method (PR06, 0, NotSerialized)
                {
                    Return (^^PR06) /* \_SB_.PR06 */
                }

                Method (AR07, 0, NotSerialized)
                {
                    Return (^^AR07) /* \_SB_.AR07 */
                }

                Method (PR07, 0, NotSerialized)
                {
                    Return (^^PR07) /* \_SB_.PR07 */
                }

                Method (AR08, 0, NotSerialized)
                {
                    Return (^^AR08) /* \_SB_.AR08 */
                }

                Method (PR08, 0, NotSerialized)
                {
                    Return (^^PR08) /* \_SB_.PR08 */
                }

                Method (AR09, 0, NotSerialized)
                {
                    Return (^^AR09) /* \_SB_.AR09 */
                }

                Method (PR09, 0, NotSerialized)
                {
                    Return (^^PR09) /* \_SB_.PR09 */
                }

                Method (AR0A, 0, NotSerialized)
                {
                    Return (^^AR0A) /* \_SB_.AR0A */
                }

                Method (PR0A, 0, NotSerialized)
                {
                    Return (^^PR0A) /* \_SB_.PR0A */
                }

                Method (AR0B, 0, NotSerialized)
                {
                    Return (^^AR0B) /* \_SB_.AR0B */
                }

                Method (PR0B, 0, NotSerialized)
                {
                    Return (^^PR0B) /* \_SB_.PR0B */
                }

                Device (PEG0)
                {
                    Name (_ADR, 0x00010000)  // _ADR: Address
                    Device (PEGP)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                    }
                }

                Device (PEG1)
                {
                    Name (_ADR, 0x00010001)  // _ADR: Address
                    Device (PEGP)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                    }
                }

                Device (PEG2)
                {
                    Name (_ADR, 0x00010002)  // _ADR: Address
                    Device (PEGP)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                    }
                }

                Device (GFX0)
                {
                    Name (_ADR, 0x00020000)  // _ADR: Address
                }

                Device (B0D4)
                {
                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        If (PCIC (Arg0))
                        {
                            Return (PCID (Arg0, Arg1, Arg2, Arg3))
                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }

                    Name (_ADR, 0x00040000)  // _ADR: Address
                }

                Device (ISP0)
                {
                    Name (_ADR, 0x00050000)  // _ADR: Address
                }
            }
        }
    }

    Method (PBCL, 0, NotSerialized)
    {
        Return (Package (0x67)
        {
            0x32, 
            0x32, 
            One, 
            0x02, 
            0x03, 
            0x04, 
            0x05, 
            0x06, 
            0x07, 
            0x08, 
            0x09, 
            0x0A, 
            0x0B, 
            0x0C, 
            0x0D, 
            0x0E, 
            0x0F, 
            0x10, 
            0x11, 
            0x12, 
            0x13, 
            0x14, 
            0x15, 
            0x16, 
            0x17, 
            0x18, 
            0x19, 
            0x1A, 
            0x1B, 
            0x1C, 
            0x1D, 
            0x1E, 
            0x1F, 
            0x20, 
            0x21, 
            0x22, 
            0x23, 
            0x24, 
            0x25, 
            0x26, 
            0x27, 
            0x28, 
            0x29, 
            0x2A, 
            0x2B, 
            0x2C, 
            0x2D, 
            0x2E, 
            0x2F, 
            0x30, 
            0x31, 
            0x32, 
            0x33, 
            0x34, 
            0x35, 
            0x36, 
            0x37, 
            0x38, 
            0x39, 
            0x3A, 
            0x3B, 
            0x3C, 
            0x3D, 
            0x3E, 
            0x3F, 
            0x40, 
            0x41, 
            0x42, 
            0x43, 
            0x44, 
            0x45, 
            0x46, 
            0x47, 
            0x48, 
            0x49, 
            0x4A, 
            0x4B, 
            0x4C, 
            0x4D, 
            0x4E, 
            0x4F, 
            0x50, 
            0x51, 
            0x52, 
            0x53, 
            0x54, 
            0x55, 
            0x56, 
            0x57, 
            0x58, 
            0x59, 
            0x5A, 
            0x5B, 
            0x5C, 
            0x5D, 
            0x5E, 
            0x5F, 
            0x60, 
            0x61, 
            0x62, 
            0x63, 
            0x63, 
            0x64
        })
    }

    If ((ECR1 == One))
    {
        Scope (_SB.PCI0)
        {
            Name (PCIG, ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */)
            Method (PCID, 4, Serialized)
            {
                If ((Arg0 == PCIG))
                {
                    If ((Arg1 >= 0x03))
                    {
                        If ((Arg2 == Zero))
                        {
                            Return (Buffer (0x02)
                            {
                                 0x01, 0x03                                       // ..
                            })
                        }

                        If ((Arg2 == 0x08))
                        {
                            Return (One)
                        }

                        If ((Arg2 == 0x09))
                        {
                            Return (Package (0x05)
                            {
                                0xC350, 
                                Ones, 
                                Ones, 
                                0xC350, 
                                Ones
                            })
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Method (PCIC, 1, Serialized)
        {
            If ((ECR1 == One))
            {
                If ((Arg0 == PCIG))
                {
                    Return (One)
                }
            }

            Return (Zero)
        }
    }

    Name (PNVB, 0x8BE9F018)
    Name (PNVL, 0x0287)
    OperationRegion (PNVA, SystemMemory, PNVB, PNVL)
    Field (PNVA, AnyAcc, Lock, Preserve)
    {
        PCHS,   16, 
        PCHG,   16, 
        RPA1,   32, 
        RPA2,   32, 
        RPA3,   32, 
        RPA4,   32, 
        RPA5,   32, 
        RPA6,   32, 
        RPA7,   32, 
        RPA8,   32, 
        RPA9,   32, 
        RPAA,   32, 
        RPAB,   32, 
        RPAC,   32, 
        RPAD,   32, 
        RPAE,   32, 
        RPAF,   32, 
        RPAG,   32, 
        RPAH,   32, 
        RPAI,   32, 
        RPAJ,   32, 
        RPAK,   32, 
        RPAL,   32, 
        RPAM,   32, 
        RPAN,   32, 
        RPAO,   32, 
        NHLA,   64, 
        NHLL,   32, 
        ADFM,   32, 
        SBRG,   32, 
        GPEM,   32, 
        G2L0,   32, 
        G2L1,   32, 
        G2L2,   32, 
        G2L3,   32, 
        G2L4,   32, 
        G2L5,   32, 
        G2L6,   32, 
        G2L7,   32, 
        G2L8,   32, 
        G2L9,   32, 
        PML1,   16, 
        PML2,   16, 
        PML3,   16, 
        PML4,   16, 
        PML5,   16, 
        PML6,   16, 
        PML7,   16, 
        PML8,   16, 
        PML9,   16, 
        PMLA,   16, 
        PMLB,   16, 
        PMLC,   16, 
        PMLD,   16, 
        PMLE,   16, 
        PMLF,   16, 
        PMLG,   16, 
        PMLH,   16, 
        PMLI,   16, 
        PMLJ,   16, 
        PMLK,   16, 
        PMLL,   16, 
        PMLM,   16, 
        PMLN,   16, 
        PMLO,   16, 
        PNL1,   16, 
        PNL2,   16, 
        PNL3,   16, 
        PNL4,   16, 
        PNL5,   16, 
        PNL6,   16, 
        PNL7,   16, 
        PNL8,   16, 
        PNL9,   16, 
        PNLA,   16, 
        PNLB,   16, 
        PNLC,   16, 
        PNLD,   16, 
        PNLE,   16, 
        PNLF,   16, 
        PNLG,   16, 
        PNLH,   16, 
        PNLI,   16, 
        PNLJ,   16, 
        PNLK,   16, 
        PNLL,   16, 
        PNLM,   16, 
        PNLN,   16, 
        PNLO,   16, 
        U0C0,   32, 
        U1C0,   32, 
        XHPC,   8, 
        XRPC,   8, 
        XSPC,   8, 
        XSPA,   8, 
        HPTB,   32, 
        HPTE,   8, 
        SMD0,   8, 
        SMD1,   8, 
        SMD2,   8, 
        SMD3,   8, 
        SMD4,   8, 
        SMD5,   8, 
        SMD6,   8, 
        SMD7,   8, 
        SMD8,   8, 
        SMD9,   8, 
        SMDA,   8, 
        SIR0,   8, 
        SIR1,   8, 
        SIR2,   8, 
        SIR3,   8, 
        SIR4,   8, 
        SIR5,   8, 
        SIR6,   8, 
        SIR7,   8, 
        SIR8,   8, 
        SIR9,   8, 
        SIRA,   8, 
        SB00,   64, 
        SB01,   64, 
        SB02,   64, 
        SB03,   64, 
        SB04,   64, 
        SB05,   64, 
        SB06,   64, 
        SB07,   64, 
        SB08,   64, 
        SB09,   64, 
        SB0A,   64, 
        SB10,   64, 
        SB11,   64, 
        SB12,   64, 
        SB13,   64, 
        SB14,   64, 
        SB15,   64, 
        SB16,   64, 
        SB17,   64, 
        SB18,   64, 
        SB19,   64, 
        SB1A,   64, 
        GPEN,   8, 
        SGIR,   8, 
        NIT1,   8, 
        NIT2,   8, 
        NIT3,   8, 
        NPM1,   8, 
        NPM2,   8, 
        NPM3,   8, 
        NPC1,   8, 
        NPC2,   8, 
        NPC3,   8, 
        NL11,   16, 
        NL12,   16, 
        NL13,   16, 
        ND21,   8, 
        ND22,   8, 
        ND23,   8, 
        ND11,   32, 
        ND12,   32, 
        ND13,   32, 
        NLR1,   16, 
        NLR2,   16, 
        NLR3,   16, 
        NLD1,   32, 
        NLD2,   32, 
        NLD3,   32, 
        NEA1,   16, 
        NEA2,   16, 
        NEA3,   16, 
        NEB1,   16, 
        NEB2,   16, 
        NEB3,   16, 
        NEC1,   16, 
        NEC2,   16, 
        NEC3,   16, 
        NRA1,   16, 
        NRA2,   16, 
        NRA3,   16, 
        NMB1,   32, 
        NMB2,   32, 
        NMB3,   32, 
        NMV1,   32, 
        NMV2,   32, 
        NMV3,   32, 
        NPB1,   32, 
        NPB2,   32, 
        NPB3,   32, 
        NPV1,   32, 
        NPV2,   32, 
        NPV3,   32, 
        NRP1,   32, 
        NRP2,   32, 
        NRP3,   32, 
        Offset (0x262), 
        SXRB,   32, 
        SXRS,   32, 
        CIOE,   8, 
        CIOI,   8, 
        TAEN,   8, 
        TIRQ,   8, 
        XWMB,   32, 
        EMH4,   8, 
        EMDS,   8, 
        CSKU,   8, 
        ITA0,   16, 
        ITA1,   16, 
        ITA2,   16, 
        ITA3,   16, 
        ITS0,   8, 
        ITS1,   8, 
        ITS2,   8, 
        ITS3,   8, 
        PMBS,   16, 
        PWRM,   32
    }

    Scope (_SB)
    {
        Name (GPCL, Package (0x08)
        {
            Package (0x06)
            {
                0x00AF0000, 
                0x18, 
                0x0400, 
                0xD0, 
                0x20, 
                0x0140
            }, 

            Package (0x06)
            {
                0x00AF0000, 
                0x18, 
                0x04C0, 
                0xD4, 
                0x30, 
                0x0144
            }, 

            Package (0x06)
            {
                0x00AE0000, 
                0x18, 
                0x0400, 
                0xD0, 
                0x20, 
                0x0140
            }, 

            Package (0x06)
            {
                0x00AE0000, 
                0x18, 
                0x04C0, 
                0xD4, 
                0x30, 
                0x0144
            }, 

            Package (0x06)
            {
                0x00AE0000, 
                0x18, 
                0x0580, 
                0xD8, 
                0x40, 
                0x0148
            }, 

            Package (0x06)
            {
                0x00AC0000, 
                0x18, 
                0x0400, 
                0xD0, 
                0x20, 
                0x0140
            }, 

            Package (0x06)
            {
                0x00AC0000, 
                0x08, 
                0x04C0, 
                0xD4, 
                0x30, 
                0x0144
            }, 

            Package (0x06)
            {
                0x00AD0000, 
                0x0C, 
                0x0400, 
                0xD0, 
                0x20, 
                0x0140
            }
        })
        Name (GPCH, Package (0x0A)
        {
            Package (0x06)
            {
                0x00AF0000, 
                0x18, 
                0x0400, 
                0xD0, 
                0x20, 
                0x0140
            }, 

            Package (0x06)
            {
                0x00AF0000, 
                0x18, 
                0x04C0, 
                0xD4, 
                0x2C, 
                0x0144
            }, 

            Package (0x06)
            {
                0x00AE0000, 
                0x18, 
                0x0400, 
                0xD0, 
                0x20, 
                0x0140
            }, 

            Package (0x06)
            {
                0x00AE0000, 
                0x18, 
                0x04C0, 
                0xD4, 
                0x2C, 
                0x0144
            }, 

            Package (0x06)
            {
                0x00AE0000, 
                0x0D, 
                0x0580, 
                0xD8, 
                0x38, 
                0x0148
            }, 

            Package (0x06)
            {
                0x00AE0000, 
                0x18, 
                0x05E8, 
                0xDC, 
                0x40, 
                0x014C
            }, 

            Package (0x06)
            {
                0x00AE0000, 
                0x18, 
                0x06A8, 
                0xE0, 
                0x4C, 
                0x0150
            }, 

            Package (0x06)
            {
                0x00AE0000, 
                0x18, 
                0x0768, 
                0xE4, 
                0x58, 
                0x0154
            }, 

            Package (0x06)
            {
                0x00AC0000, 
                0x0B, 
                0x0400, 
                0xD0, 
                0x20, 
                0x0140
            }, 

            Package (0x06)
            {
                0x00AD0000, 
                0x0C, 
                0x0400, 
                0xD0, 
                0x20, 
                0x0140
            }
        })
        Name (RXEV, Package (0x0A)
        {
            Buffer (0x18) {}, 
            Buffer (0x18) {}, 
            Buffer (0x18) {}, 
            Buffer (0x18) {}, 
            Buffer (0x18) {}, 
            Buffer (0x18) {}, 
            Buffer (0x18) {}, 
            Buffer (0x18) {}, 
            Buffer (0x0B) {}, 
            Buffer (0x0C) {}
        })
    }

    Scope (_SB)
    {
        Method (GINF, 2, NotSerialized)
        {
            If ((PCHS == SPTL))
            {
                Return (DerefOf (DerefOf (GPCL [Arg0]) [Arg1]))
            }
            Else
            {
                Return (DerefOf (DerefOf (GPCH [Arg0]) [Arg1]))
            }
        }

        Method (GMXG, 0, NotSerialized)
        {
            If ((PCHS == SPTL))
            {
                Return (0x08)
            }
            Else
            {
                Return (0x0A)
            }
        }

        Method (GADR, 2, NotSerialized)
        {
            Local0 = (GINF (Arg0, Zero) + SBRG)
            Local1 = GINF (Arg0, Arg1)
            Return ((Local0 + Local1))
        }

        Method (GNUM, 1, NotSerialized)
        {
            Local0 = GNMB (Arg0)
            Local1 = GGRP (Arg0)
            Return ((Local0 + (Local1 * 0x18)))
        }

        Method (INUM, 1, NotSerialized)
        {
            Local1 = GNMB (Arg0)
            Local2 = GGRP (Arg0)
            Local3 = Zero
            While ((Local3 < Local2))
            {
                Local1 += GINF (Local3, One)
                Local3++
            }

            Return ((0x18 + (Local1 % 0x60)))
        }

        Method (GGRP, 1, Serialized)
        {
            Local0 = ((Arg0 & 0x00FF0000) >> 0x10)
            Return (Local0)
        }

        Method (GNMB, 1, Serialized)
        {
            Return ((Arg0 & 0xFFFF))
        }

        Method (GGPE, 1, NotSerialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            If ((((GPEM >> (Local0 * 0x02)) & 0x03) == 
                Zero))
            {
                Return (0x6F)
            }
            Else
            {
                Local2 = ((GPEM >> (Local0 * 0x02)) & 0x03)
                Return ((((Local2 - One) * 0x20) + Local1))
            }
        }

        Method (GPC0, 1, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x08))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                TEMP,   32
            }

            Return (TEMP) /* \_SB_.GPC0.TEMP */
        }

        Method (SPC0, 2, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x08))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                TEMP,   32
            }

            TEMP = Arg1
        }

        Method (GPC1, 1, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = ((GADR (Local0, 0x02) + (Local1 * 0x08)) + 
                0x04)
            OperationRegion (PDW1, SystemMemory, Local2, 0x04)
            Field (PDW1, AnyAcc, NoLock, Preserve)
            {
                TEMP,   32
            }

            Return (TEMP) /* \_SB_.GPC1.TEMP */
        }

        Method (SPC1, 2, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = ((GADR (Local0, 0x02) + (Local1 * 0x08)) + 
                0x04)
            OperationRegion (PDW1, SystemMemory, Local2, 0x04)
            Field (PDW1, AnyAcc, NoLock, Preserve)
            {
                TEMP,   32
            }

            TEMP = Arg1
        }

        Method (SRXO, 2, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x08))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   28, 
                TEMP,   1, 
                Offset (0x04)
            }

            TEMP = Arg1
        }

        Method (GGIV, 1, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x08))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   1, 
                TEMP,   1, 
                Offset (0x04)
            }

            Return (TEMP) /* \_SB_.GGIV.TEMP */
        }

        Method (GGOV, 1, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x08))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                TEMP,   1, 
                Offset (0x04)
            }

            Return (TEMP) /* \_SB_.GGOV.TEMP */
        }

        Method (SGOV, 2, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x08))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                TEMP,   1, 
                Offset (0x04)
            }

            TEMP = Arg1
        }

        Method (GGII, 1, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x08))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   23, 
                TEMP,   1, 
                Offset (0x04)
            }

            Return (TEMP) /* \_SB_.GGII.TEMP */
        }

        Method (SGII, 2, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x08))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   23, 
                TEMP,   1, 
                Offset (0x04)
            }

            TEMP = Arg1
        }

        Method (GPMV, 1, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x08))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   10, 
                TEMP,   3, 
                Offset (0x04)
            }

            Return (TEMP) /* \_SB_.GPMV.TEMP */
        }

        Method (SPMV, 2, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x08))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   10, 
                TEMP,   3, 
                Offset (0x04)
            }

            TEMP = Arg1
        }

        Method (GHPO, 1, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local3 = (GADR (Local0, 0x03) + ((Local1 >> 0x05) * 0x04))
            Local4 = (Local1 & 0x1F)
            OperationRegion (PREG, SystemMemory, Local3, 0x04)
            Field (PREG, AnyAcc, NoLock, Preserve)
            {
                TEMP,   32
            }

            Return (((TEMP >> Local4) & One))
        }

        Method (SHPO, 2, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local3 = (GADR (Local0, 0x03) + ((Local1 >> 0x05) * 0x04))
            Local4 = (Local1 & 0x1F)
            OperationRegion (PREG, SystemMemory, Local3, 0x04)
            Field (PREG, AnyAcc, NoLock, Preserve)
            {
                TEMP,   32
            }

            If (Arg1)
            {
                TEMP |= (One << Local4)
            }
            Else
            {
                TEMP &= ~(One << Local4)
            }
        }

        Method (GGPO, 1, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x04) + ((Local1 >> 0x03) * 0x04
                ))
            OperationRegion (PREG, SystemMemory, Local2, 0x04)
            Field (PREG, AnyAcc, NoLock, Preserve)
            {
                TEMP,   32
            }

            Return (((TEMP >> ((Local1 & 0x07) * 0x04)) & 
                0x03))
        }

        Method (SGRA, 2, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x08))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   20, 
                TEMP,   1, 
                Offset (0x04)
            }

            TEMP = Arg1
        }

        Method (SGWP, 2, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = ((GADR (Local0, 0x02) + (Local1 * 0x08)) + 
                0x04)
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   10, 
                TEMP,   4, 
                Offset (0x04)
            }

            TEMP = Arg1
        }

        Method (UGPS, 0, Serialized)
        {
        }

        Method (CGPS, 0, Serialized)
        {
        }

        Method (CGLS, 0, Serialized)
        {
        }

        Method (CAGS, 1, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local4 = ((Local1 >> 0x05) * 0x04)
            If ((((GPEM >> (Local0 * 0x02)) & 0x03) == 
                Zero))
            {
                OperationRegion (GPPX, SystemMemory, (GADR (Local0, 0x05) + Local4), 0x04)
                Field (GPPX, AnyAcc, NoLock, Preserve)
                {
                    STSX,   32
                }

                Local2 = (One << (Local1 % 0x20))
                STSX = Local2
            }
        }

        Method (ISME, 1, NotSerialized)
        {
            If ((((GPEM >> (Arg0 * 0x02)) & 0x03
                ) != Zero))
            {
                Return (Zero)
            }

            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x05) + ((Local1 >> 0x05) * 0x04))
            Local3 = (Local1 & 0x1F)
            OperationRegion (GPPX, SystemMemory, Local2, 0x24)
            Field (GPPX, AnyAcc, NoLock, Preserve)
            {
                STSX,   32, 
                Offset (0x20), 
                GENX,   32
            }

            Return ((((STSX & GENX) >> Local3) & One))
        }

        Method (DIPI, 1, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x08))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   9, 
                RDIS,   1, 
                    ,   15, 
                RCFG,   2, 
                Offset (0x04)
            }

            If ((RCFG != 0x02))
            {
                DerefOf (RXEV [Local0]) [Local1] = RCFG /* \_SB_.DIPI.RCFG */
                RCFG = 0x02
                RDIS = One
            }
        }

        Method (UIPI, 1, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x08))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   9, 
                RDIS,   1, 
                    ,   15, 
                RCFG,   2, 
                Offset (0x04)
            }

            Local3 = DerefOf (DerefOf (RXEV [Local0]) [Local1])
            If ((Local3 != 0x02))
            {
                RDIS = Zero
                RCFG = Local3
            }
        }
    }

    Scope (\)
    {
        Method (THEN, 0, Serialized)
        {
            OperationRegion (THBA, SystemMemory, 0xFE200000, 0x10)
            Field (THBA, DWordAcc, NoLock, Preserve)
            {
                DO00,   32
            }

            Return ((DO00 != 0xFFFFFFFF))
        }

        Method (THDA, 2, Serialized)
        {
            Local0 = 0xFE200000
            Local0 += (0x40 * (0x80 * (Arg0 - 0x20)))
            Local0 += (0x40 * Arg1)
            Return (Local0)
        }

        Method (STRD, 3, Serialized)
        {
            If (((Arg1 + Arg2) > SizeOf (Arg0)))
            {
                Return (Zero)
            }

            ToBuffer (Arg0, Local3)
            Local0 = Zero
            Local1 = Zero
            While ((Local1 < Arg2))
            {
                Local2 = DerefOf (Local3 [(Arg1 + Local1)])
                Local0 += (Local2 << (0x08 * Local1))
                Local1++
            }

            Return (Local0)
        }

        Method (THDS, 1, Serialized)
        {
            If (!THEN ())
            {
                Return (Zero)
            }

            Concatenate (Arg0, "\n", Local2)
            Local0 = SizeOf (Local2)
            Local1 = THDA (0x20, 0x16)
            OperationRegion (THBA, SystemMemory, Local1, 0x40)
            Field (THBA, QWordAcc, NoLock, Preserve)
            {
                QO00,   64
            }

            Field (THBA, DWordAcc, NoLock, Preserve)
            {
                DO00,   32, 
                Offset (0x10), 
                DO10,   32, 
                Offset (0x30), 
                DO30,   32
            }

            Field (THBA, WordAcc, NoLock, Preserve)
            {
                WO00,   16
            }

            Field (THBA, ByteAcc, NoLock, Preserve)
            {
                BO00,   8
            }

            DO10 = 0x01000242
            WO00 = Local0
            Local6 = Zero
            Local7 = Local0
            While ((Local7 >= 0x08))
            {
                QO00 = STRD (Local2, Local6, 0x08)
                Local6 += 0x08
                Local7 -= 0x08
            }

            If ((Local7 >= 0x04))
            {
                DO00 = STRD (Local2, Local6, 0x04)
                Local6 += 0x04
                Local7 -= 0x04
            }

            If ((Local7 >= 0x02))
            {
                WO00 = STRD (Local2, Local6, 0x02)
                Local6 += 0x02
                Local7 -= 0x02
            }

            If ((Local7 >= One))
            {
                BO00 = STRD (Local2, Local6, One)
                Local6 += One
                Local7 -= One
            }

            DO30 = Zero
        }

        Method (THDH, 1, Serialized)
        {
            THDS (ToHexString (Arg0))
        }

        Method (THDD, 1, Serialized)
        {
            THDS (ToDecimalString (Arg0))
        }
    }

    Name (SPTH, One)
    Name (SPTL, 0x02)
    Method (PCHV, 0, NotSerialized)
    {
        If ((PCHS == One))
        {
            Return (SPTH) /* \SPTH */
        }

        If ((PCHS == 0x02))
        {
            Return (SPTL) /* \SPTL */
        }

        Return (Zero)
    }

    Scope (_GPE)
    {
        Method (_L6D, 0, Serialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            \_SB.PCI0.XHC.GPEH ()
            \_SB.PCI0.HDAS.GPEH ()
            \_SB.PCI0.GLAN.GPEH ()
        }
    }

    Scope (_SB.PCI0)
    {
        Name (TEMP, Zero)
        Device (PRRE)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, "PCHRESV")  // _UID: Unique ID
            Name (_STA, 0x03)  // _STA: Status
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0xFD000000,         // Address Base
                        0x00AC0000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFDAD0000,         // Address Base
                        0x00010000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFDB00000,         // Address Base
                        0x00500000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFE000000,         // Address Base
                        0x00020000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFE036000,         // Address Base
                        0x00006000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFE03D000,         // Address Base
                        0x003C3000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFE410000,         // Address Base
                        0x003F0000,         // Address Length
                        )
                })
                Return (BUF0) /* \_SB_.PCI0.PRRE._CRS.BUF0 */
            }
        }

        Device (IOTR)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, "IoTraps")  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = Buffer (0x02)
                    {
                         0x79, 0x00                                       // y.
                    }
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x0000,             // Range Minimum
                        0x0000,             // Range Maximum
                        0x01,               // Alignment
                        0xFF,               // Length
                        _Y10)
                })
                Name (BUF1, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x0000,             // Range Minimum
                        0x0000,             // Range Maximum
                        0x01,               // Alignment
                        0xFF,               // Length
                        _Y11)
                })
                Name (BUF2, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x0000,             // Range Minimum
                        0x0000,             // Range Maximum
                        0x01,               // Alignment
                        0xFF,               // Length
                        _Y12)
                })
                Name (BUF3, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x0000,             // Range Minimum
                        0x0000,             // Range Maximum
                        0x01,               // Alignment
                        0xFF,               // Length
                        _Y13)
                })
                CreateWordField (BUF0, \_SB.PCI0.IOTR._CRS._Y10._MIN, AMI0)  // _MIN: Minimum Base Address
                CreateWordField (BUF0, \_SB.PCI0.IOTR._CRS._Y10._MAX, AMA0)  // _MAX: Maximum Base Address
                CreateWordField (BUF1, \_SB.PCI0.IOTR._CRS._Y11._MIN, AMI1)  // _MIN: Minimum Base Address
                CreateWordField (BUF1, \_SB.PCI0.IOTR._CRS._Y11._MAX, AMA1)  // _MAX: Maximum Base Address
                CreateWordField (BUF2, \_SB.PCI0.IOTR._CRS._Y12._MIN, AMI2)  // _MIN: Minimum Base Address
                CreateWordField (BUF2, \_SB.PCI0.IOTR._CRS._Y12._MAX, AMA2)  // _MAX: Maximum Base Address
                CreateWordField (BUF3, \_SB.PCI0.IOTR._CRS._Y13._MIN, AMI3)  // _MIN: Minimum Base Address
                CreateWordField (BUF3, \_SB.PCI0.IOTR._CRS._Y13._MAX, AMA3)  // _MAX: Maximum Base Address
                AMI0 = ITA0 /* \ITA0 */
                AMA0 = ITA0 /* \ITA0 */
                AMI1 = ITA1 /* \ITA1 */
                AMA1 = ITA1 /* \ITA1 */
                AMI2 = ITA2 /* \ITA2 */
                AMA2 = ITA2 /* \ITA2 */
                AMI3 = ITA3 /* \ITA3 */
                AMA3 = ITA3 /* \ITA3 */
                If ((ITS0 == One))
                {
                    ConcatenateResTemplate (Local0, BUF0, Local1)
                    Local0 = Local1
                }

                If ((ITS1 == One))
                {
                    ConcatenateResTemplate (Local0, BUF1, Local1)
                    Local0 = Local1
                }

                If ((ITS2 == One))
                {
                    ConcatenateResTemplate (Local0, BUF2, Local1)
                    Local0 = Local1
                }

                If ((ITS3 == One))
                {
                    ConcatenateResTemplate (Local0, BUF3, Local1)
                    Local0 = Local1
                }

                Return (Local0)
            }
        }

        Device (LPCB)
        {
            Name (_ADR, 0x001F0000)  // _ADR: Address
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            OperationRegion (LPC, PCI_Config, Zero, 0x0100)
            Field (LPC, AnyAcc, NoLock, Preserve)
            {
                Offset (0x02), 
                CDID,   16, 
                Offset (0x08), 
                CRID,   8, 
                Offset (0x80), 
                IOD0,   8, 
                IOD1,   8, 
                Offset (0xA0), 
                    ,   9, 
                PRBL,   1, 
                Offset (0xDC), 
                    ,   2, 
                ESPI,   1
            }
        }

        Device (PPMC)
        {
            Name (_ADR, 0x001F0002)  // _ADR: Address
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }

        Device (SBUS)
        {
            Name (_ADR, 0x001F0004)  // _ADR: Address
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }

    Scope (_SB)
    {
        Device (LNKA)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_DIS, 0, Serialized)  // _DIS: Disable Device
            {
                PARC |= 0x80
            }

            Method (_PRS, 0, Serialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSA) /* \_SB_.PRSA */
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (RTLA, ResourceTemplate ()
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {}
                })
                CreateWordField (RTLA, One, IRQ0)
                IRQ0 = Zero
                IRQ0 = (One << (PARC & 0x0F))
                Return (RTLA) /* \_SB_.LNKA._CRS.RTLA */
            }

            Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRQ0)
                FindSetRightBit (IRQ0, Local0)
                Local0--
                PARC = Local0
            }

            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If ((PARC & 0x80))
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }
        }

        Device (LNKB)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_DIS, 0, Serialized)  // _DIS: Disable Device
            {
                PBRC |= 0x80
            }

            Method (_PRS, 0, Serialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSB) /* \_SB_.PRSB */
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (RTLB, ResourceTemplate ()
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {}
                })
                CreateWordField (RTLB, One, IRQ0)
                IRQ0 = Zero
                IRQ0 = (One << (PBRC & 0x0F))
                Return (RTLB) /* \_SB_.LNKB._CRS.RTLB */
            }

            Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRQ0)
                FindSetRightBit (IRQ0, Local0)
                Local0--
                PBRC = Local0
            }

            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If ((PBRC & 0x80))
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }
        }

        Device (LNKC)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_DIS, 0, Serialized)  // _DIS: Disable Device
            {
                PCRC |= 0x80
            }

            Method (_PRS, 0, Serialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSC) /* \_SB_.PRSC */
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (RTLC, ResourceTemplate ()
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {}
                })
                CreateWordField (RTLC, One, IRQ0)
                IRQ0 = Zero
                IRQ0 = (One << (PCRC & 0x0F))
                Return (RTLC) /* \_SB_.LNKC._CRS.RTLC */
            }

            Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRQ0)
                FindSetRightBit (IRQ0, Local0)
                Local0--
                PCRC = Local0
            }

            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If ((PCRC & 0x80))
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }
        }

        Device (LNKD)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_DIS, 0, Serialized)  // _DIS: Disable Device
            {
                PDRC |= 0x80
            }

            Method (_PRS, 0, Serialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSD) /* \_SB_.PRSD */
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (RTLD, ResourceTemplate ()
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {}
                })
                CreateWordField (RTLD, One, IRQ0)
                IRQ0 = Zero
                IRQ0 = (One << (PDRC & 0x0F))
                Return (RTLD) /* \_SB_.LNKD._CRS.RTLD */
            }

            Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRQ0)
                FindSetRightBit (IRQ0, Local0)
                Local0--
                PDRC = Local0
            }

            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If ((PDRC & 0x80))
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }
        }

        Device (LNKE)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x05)  // _UID: Unique ID
            Method (_DIS, 0, Serialized)  // _DIS: Disable Device
            {
                PERC |= 0x80
            }

            Method (_PRS, 0, Serialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSE) /* \_SB_.PRSE */
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (RTLE, ResourceTemplate ()
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {}
                })
                CreateWordField (RTLE, One, IRQ0)
                IRQ0 = Zero
                IRQ0 = (One << (PERC & 0x0F))
                Return (RTLE) /* \_SB_.LNKE._CRS.RTLE */
            }

            Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRQ0)
                FindSetRightBit (IRQ0, Local0)
                Local0--
                PERC = Local0
            }

            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If ((PERC & 0x80))
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }
        }

        Device (LNKF)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x06)  // _UID: Unique ID
            Method (_DIS, 0, Serialized)  // _DIS: Disable Device
            {
                PFRC |= 0x80
            }

            Method (_PRS, 0, Serialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSF) /* \_SB_.PRSF */
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (RTLF, ResourceTemplate ()
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {}
                })
                CreateWordField (RTLF, One, IRQ0)
                IRQ0 = Zero
                IRQ0 = (One << (PFRC & 0x0F))
                Return (RTLF) /* \_SB_.LNKF._CRS.RTLF */
            }

            Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRQ0)
                FindSetRightBit (IRQ0, Local0)
                Local0--
                PFRC = Local0
            }

            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If ((PFRC & 0x80))
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }
        }

        Device (LNKG)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x07)  // _UID: Unique ID
            Method (_DIS, 0, Serialized)  // _DIS: Disable Device
            {
                PGRC |= 0x80
            }

            Method (_PRS, 0, Serialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSG) /* \_SB_.PRSG */
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (RTLG, ResourceTemplate ()
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {}
                })
                CreateWordField (RTLG, One, IRQ0)
                IRQ0 = Zero
                IRQ0 = (One << (PGRC & 0x0F))
                Return (RTLG) /* \_SB_.LNKG._CRS.RTLG */
            }

            Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRQ0)
                FindSetRightBit (IRQ0, Local0)
                Local0--
                PGRC = Local0
            }

            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If ((PGRC & 0x80))
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }
        }

        Device (LNKH)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x08)  // _UID: Unique ID
            Method (_DIS, 0, Serialized)  // _DIS: Disable Device
            {
                PHRC |= 0x80
            }

            Method (_PRS, 0, Serialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSH) /* \_SB_.PRSH */
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (RTLH, ResourceTemplate ()
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {}
                })
                CreateWordField (RTLH, One, IRQ0)
                IRQ0 = Zero
                IRQ0 = (One << (PHRC & 0x0F))
                Return (RTLH) /* \_SB_.LNKH._CRS.RTLH */
            }

            Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRQ0)
                FindSetRightBit (IRQ0, Local0)
                Local0--
                PHRC = Local0
            }

            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If ((PHRC & 0x80))
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }
        }
    }

    Scope (\)
    {
        Method (PCRR, 2, Serialized)
        {
            Local0 = ((Arg0 << 0x10) + Arg1)
            Local0 += SBRG
            OperationRegion (PCR0, SystemMemory, Local0, 0x04)
            Field (PCR0, DWordAcc, Lock, Preserve)
            {
                DAT0,   32
            }

            Return (DAT0) /* \PCRR.DAT0 */
        }

        Method (PCRW, 3, Serialized)
        {
            Local0 = ((Arg0 << 0x10) + Arg1)
            Local0 += SBRG
            OperationRegion (PCR0, SystemMemory, Local0, 0x04)
            Field (PCR0, DWordAcc, Lock, Preserve)
            {
                DAT0,   32
            }

            DAT0 = Arg2
            Local0 = PCRR (0xC7, 0x3418)
        }

        Method (PCRO, 3, Serialized)
        {
            Local0 = PCRR (Arg0, Arg1)
            Local1 = (Local0 | Arg2)
            PCRW (Arg0, Arg1, Local1)
        }

        Method (PCRA, 3, Serialized)
        {
            Local0 = PCRR (Arg0, Arg1)
            Local1 = (Local0 & Arg2)
            PCRW (Arg0, Arg1, Local1)
        }

        Method (PCAO, 4, Serialized)
        {
            Local0 = PCRR (Arg0, Arg1)
            Local1 = ((Local0 & Arg2) | Arg3)
            PCRW (Arg0, Arg1, Local1)
        }

        Name (TCBV, Zero)
        Method (TCBS, 0, NotSerialized)
        {
            If ((TCBV == Zero))
            {
                Local0 = PCRR (0xEF, 0x2778)
                TCBV = (Local0 & 0xFFE0)
            }

            Return (TCBV) /* \TCBV */
        }

        OperationRegion (PMIO, SystemIO, PMBS, 0x60)
        Field (PMIO, ByteAcc, NoLock, Preserve)
        {
            Offset (0x01), 
            PBSS,   1, 
            Offset (0x40), 
                ,   17, 
            GPEC,   1
        }

        OperationRegion (TCBA, SystemIO, TCBS (), 0x10)
        Field (TCBA, ByteAcc, NoLock, Preserve)
        {
            Offset (0x04), 
                ,   9, 
            CPSC,   1
        }

        OperationRegion (PWMR, SystemMemory, PWRM, 0x0800)
        Field (PWMR, AnyAcc, NoLock, Preserve)
        {
            Offset (0xE0), 
            Offset (0xE2), 
            DWLE,   1, 
            HWLE,   1, 
            Offset (0x31C), 
                ,   13, 
            SLS0,   1, 
                ,   8, 
            XSQD,   1
        }

        OperationRegion (PMST, SystemMemory, PWRM, 0x80)
        Field (PMST, DWordAcc, NoLock, Preserve)
        {
            Offset (0x18), 
                ,   25, 
            USBP,   1, 
            Offset (0x1C), 
            Offset (0x1F), 
            PMFS,   1, 
            Offset (0x20), 
            MPMC,   32, 
                ,   20, 
            UWAB,   1
        }
    }

    Scope (_SB.PCI0)
    {
        Device (GLAN)
        {
            Name (_ADR, 0x001F0006)  // _ADR: Address
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            OperationRegion (GLBA, PCI_Config, Zero, 0x0100)
            Field (GLBA, AnyAcc, NoLock, Preserve)
            {
                DVID,   16
            }

            Field (GLBA, ByteAcc, NoLock, Preserve)
            {
                Offset (0xCC), 
                Offset (0xCD), 
                PMEE,   1, 
                    ,   6, 
                PMES,   1
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x6D, 0x04))
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                PMEE = Arg0
            }

            Method (GPEH, 0, NotSerialized)
            {
                If ((DVID == 0xFFFF))
                {
                    Return (Zero)
                }

                If ((PMEE && PMES))
                {
                    PMES = One
                    Notify (GLAN, 0x02) // Device Wake
                }
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (XHC)
        {
            Name (_ADR, 0x00140000)  // _ADR: Address
            OperationRegion (XPRT, PCI_Config, Zero, 0x0100)
            Field (XPRT, AnyAcc, NoLock, Preserve)
            {
                DVID,   16, 
                Offset (0x10), 
                XADL,   32, 
                XADH,   32, 
                Offset (0x50), 
                    ,   2, 
                STGE,   1, 
                Offset (0xA2), 
                    ,   2, 
                D3HE,   1
            }

            Field (XPRT, ByteAcc, NoLock, Preserve)
            {
                Offset (0x74), 
                D0D3,   2, 
                Offset (0x75), 
                PMEE,   1, 
                    ,   6, 
                PMES,   1
            }

            Name (XFLT, Zero)
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                ADBG ("_DSM")
                Local0 = (XADH << 0x20)
                Local0 |= XADL /* \_SB_.PCI0.XHC_.XADL */
                Local0 &= 0xFFFFFFFFFFFFFFF0
                OperationRegion (XMIO, SystemMemory, Local0, 0x9000)
                Field (XMIO, AnyAcc, Lock, Preserve)
                {
                    Offset (0x550), 
                    PCCS,   1, 
                        ,   4, 
                    PPLS,   4, 
                    PTPP,   1, 
                    Offset (0x8420), 
                    PRTM,   2
                }

                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                If ((Arg0 == ToUUID ("ac340cb7-e901-45bf-b7e6-2b34ec931e23") /* Unknown UUID */))
                {
                    If ((Arg1 == 0x03))
                    {
                        XFLT = Arg1
                    }

                    If (((PRTM > Zero) && ((Arg1 == 0x05) || (Arg1 == 0x06))))
                    {
                        ADBG ("SSIC")
                        If ((((PCCS == Zero) || (PTPP == Zero)) || ((
                            PPLS >= 0x04) && (PPLS <= 0x0F))))
                        {
                            If ((PPLS == 0x08))
                            {
                                D3HE = One
                            }
                            Else
                            {
                                D3HE = Zero
                            }
                        }
                        Else
                        {
                            D3HE = One
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
            {
                Return (0x03)
            }

            Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
            {
                Return (0x03)
            }

            Method (_S3W, 0, NotSerialized)  // _S3W: S3 Device Wake State
            {
                Return (0x03)
            }

            Method (_S4W, 0, NotSerialized)  // _S4W: S4 Device Wake State
            {
                Return (0x03)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((XFLT == Zero))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (0x03)
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x6D, 0x04))
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                PMEE = Arg0
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If (CondRefOf (\_SB.PCI0.XHC.RHUB.INIR))
                {
                    ^RHUB.INIR ()
                }
            }

            Method (GPEH, 0, NotSerialized)
            {
                If ((DVID == 0xFFFF))
                {
                    Return (Zero)
                }

                Local0 = PMES /* \_SB_.PCI0.XHC_.PMES */
                PMES = One
                If ((PMEE && Local0))
                {
                    Notify (XHC, 0x02) // Device Wake
                }
            }

            OperationRegion (XHCP, SystemMemory, (GPCB () + 0x000A0000), 0x0100)
            Field (XHCP, AnyAcc, Lock, Preserve)
            {
                Offset (0x04), 
                PDBM,   16, 
                Offset (0x10), 
                MEMB,   64
            }

            Method (USRA, 0, Serialized)
            {
                If ((PCHV () == SPTH))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (SSPA, 0, Serialized)
            {
                If ((PCHV () == SPTH))
                {
                    Return (0x11)
                }
                Else
                {
                    Return (0x0D)
                }
            }

            Name (XRST, Zero)
            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                If ((DVID == 0xFFFF))
                {
                    Return (Zero)
                }

                Local2 = MEMB /* \_SB_.PCI0.XHC_.MEMB */
                Local1 = PDBM /* \_SB_.PCI0.XHC_.PDBM */
                PDBM &= 0xFFFFFFFFFFFFFFF9
                D3HE = Zero
                STGE = Zero
                D0D3 = Zero
                MEMB = XWMB /* \XWMB */
                PDBM = (Local1 | 0x02)
                OperationRegion (MC11, SystemMemory, XWMB, 0x9000)
                Field (MC11, DWordAcc, Lock, Preserve)
                {
                    Offset (0x81C4), 
                        ,   2, 
                    UPSW,   2
                }

                UPSW = Zero
                PDBM &= 0xFFFFFFFFFFFFFFFD
                MEMB = Local2
                PDBM = Local1
                If (CondRefOf (\_SB.PCI0.XHC.PS0X))
                {
                    PS0X ()
                }

                If ((UWAB && (D0D3 == Zero)))
                {
                    MPMC = One
                    While (PMFS)
                    {
                        Sleep (0x0A)
                    }
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                If ((DVID == 0xFFFF))
                {
                    Return (Zero)
                }

                Local2 = MEMB /* \_SB_.PCI0.XHC_.MEMB */
                Local1 = PDBM /* \_SB_.PCI0.XHC_.PDBM */
                PDBM &= 0xFFFFFFFFFFFFFFF9
                D0D3 = Zero
                MEMB = XWMB /* \XWMB */
                PDBM = (Local1 | 0x02)
                OperationRegion (MC11, SystemMemory, XWMB, 0x9000)
                Field (MC11, DWordAcc, Lock, Preserve)
                {
                    Offset (0x81A0), 
                    LFU3,   6, 
                    Offset (0x81C4), 
                        ,   2, 
                    UPSW,   2
                }

                Name (U3PS, Zero)
                If ((PCHV () == SPTL))
                {
                    U3PS = 0x0540
                }
                Else
                {
                    U3PS = 0x0580
                }

                OperationRegion (UPSC, SystemMemory, (XWMB + U3PS), 0x0100)
                Field (UPSC, DWordAcc, Lock, Preserve)
                {
                        ,   5, 
                    PLS1,   4, 
                        ,   13, 
                    PLC1,   1, 
                    Offset (0x03), 
                    CAS1,   1, 
                    Offset (0x10), 
                        ,   5, 
                    PLS2,   4, 
                        ,   13, 
                    PLC2,   1, 
                    Offset (0x13), 
                    CAS2,   1, 
                    Offset (0x20), 
                        ,   5, 
                    PLS3,   4, 
                        ,   13, 
                    PLC3,   1, 
                    Offset (0x23), 
                    CAS3,   1, 
                    Offset (0x30), 
                        ,   5, 
                    PLS4,   4, 
                        ,   13, 
                    PLC4,   1, 
                    Offset (0x33), 
                    CAS4,   1, 
                    Offset (0x40), 
                        ,   5, 
                    PLS5,   4, 
                        ,   13, 
                    PLC5,   1, 
                    Offset (0x43), 
                    CAS5,   1, 
                    Offset (0x50), 
                        ,   5, 
                    PLS6,   4, 
                        ,   13, 
                    PLC6,   1, 
                    Offset (0x53), 
                    CAS6,   1, 
                    Offset (0x60), 
                    Offset (0x63), 
                    CAS7,   1, 
                    Offset (0x70), 
                    Offset (0x73), 
                    CAS8,   1, 
                    Offset (0x80), 
                    Offset (0x83), 
                    CAS9,   1, 
                    Offset (0x90), 
                    Offset (0x93), 
                    CASA,   1
                }

                UPSW = 0x03
                STGE = One
                LFU3 = 0x3F
                Name (FLAG, Zero)
                Sleep (One)
                If (((PLS1 == 0x03) && PLC1))
                {
                    FLAG = One
                }

                If (((PLS2 == 0x03) && PLC2))
                {
                    FLAG = One
                }

                If (((PLS3 == 0x03) && PLC3))
                {
                    FLAG = One
                }

                If (((PLS4 == 0x03) && PLC4))
                {
                    FLAG = One
                }

                If (((PLS5 == 0x03) && PLC5))
                {
                    FLAG = One
                }

                If (((PLS6 == 0x03) && PLC6))
                {
                    FLAG = One
                }

                If ((FLAG == One))
                {
                    D3HE = One
                    D0D3 = 0x03
                    If ((UWAB && (D0D3 == 0x03)))
                    {
                        MPMC = 0x03
                        While (PMFS)
                        {
                            Sleep (0x0A)
                        }
                    }

                    Stall (0x0A)
                    D0D3 = Zero
                    D3HE = Zero
                }
                ElseIf (((((((CAS1 || CAS2) || CAS3) || CAS4) || 
                    CAS5) || CAS6) || ((PCHV () == SPTH) && (((CAS7 || CAS8) || CAS9) || CASA))))
                {
                    D3HE = Zero
                    Sleep (One)
                }
                Else
                {
                    D3HE = One
                }

                LFU3 = Zero
                PDBM &= 0xFFFFFFFFFFFFFFFD
                D0D3 = 0x03
                MEMB = Local2
                PDBM = Local1
                If (CondRefOf (\_SB.PCI0.XHC.PS3X))
                {
                    PS3X ()
                }

                If ((UWAB && (D0D3 == 0x03)))
                {
                    MPMC = 0x03
                    While (PMFS)
                    {
                        Sleep (0x0A)
                    }
                }
            }

            Method (CUID, 1, Serialized)
            {
                If ((Arg0 == ToUUID ("7c9512a9-1705-4cb4-af7d-506a2423ab71") /* Unknown UUID */))
                {
                    Return (One)
                }

                Return (Zero)
            }

            Device (RHUB)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    If ((DVID == 0xFFFF))
                    {
                        Return (Zero)
                    }

                    If (CondRefOf (\_SB.PCI0.XHC.RHUB.PS0X))
                    {
                        PS0X ()
                    }
                }

                Method (_PS2, 0, Serialized)  // _PS2: Power State 2
                {
                    If ((DVID == 0xFFFF))
                    {
                        Return (Zero)
                    }

                    If (CondRefOf (\_SB.PCI0.XHC.RHUB.PS2X))
                    {
                        PS2X ()
                    }
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    If ((DVID == 0xFFFF))
                    {
                        Return (Zero)
                    }

                    If (CondRefOf (\_SB.PCI0.XHC.RHUB.PS3X))
                    {
                        PS3X ()
                    }
                }

                Device (HS01)
                {
                    Name (_ADR, One)  // _ADR: Address
                }

                Device (HS02)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                }

                Device (HS03)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                }

                Device (HS04)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                }

                Device (HS05)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                }

                Device (HS06)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                }

                Device (HS07)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                }

                Device (HS08)
                {
                    Name (_ADR, 0x08)  // _ADR: Address
                }

                Device (HS09)
                {
                    Name (_ADR, 0x09)  // _ADR: Address
                }

                Device (HS10)
                {
                    Name (_ADR, 0x0A)  // _ADR: Address
                }

                Device (USR1)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return ((USRA () + Zero))
                    }
                }

                Device (USR2)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return ((USRA () + One))
                    }
                }

                Device (SS01)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return ((SSPA () + Zero))
                    }
                }

                Device (SS02)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return ((SSPA () + One))
                    }
                }

                Device (SS03)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return ((SSPA () + 0x02))
                    }
                }

                Device (SS04)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return ((SSPA () + 0x03))
                    }
                }

                Device (SS05)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return ((SSPA () + 0x04))
                    }
                }

                Device (SS06)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return ((SSPA () + 0x05))
                    }
                }
            }
        }
    }

    If ((PCHV () == SPTH))
    {
        Scope (_SB.PCI0.XHC.RHUB)
        {
            Device (HS11)
            {
                Name (_ADR, 0x0B)  // _ADR: Address
            }

            Device (HS12)
            {
                Name (_ADR, 0x0C)  // _ADR: Address
            }

            Device (HS13)
            {
                Name (_ADR, 0x0D)  // _ADR: Address
            }

            Device (HS14)
            {
                Name (_ADR, 0x0E)  // _ADR: Address
            }

            Device (SS07)
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return ((SSPA () + 0x06))
                }
            }

            Device (SS08)
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return ((SSPA () + 0x07))
                }
            }

            Device (SS09)
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return ((SSPA () + 0x08))
                }
            }

            Device (SS10)
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return ((SSPA () + 0x09))
                }
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (XDCI)
        {
            Name (_ADR, 0x00140001)  // _ADR: Address
            OperationRegion (OTGD, PCI_Config, Zero, 0x0100)
            Field (OTGD, DWordAcc, NoLock, Preserve)
            {
                DVID,   16, 
                Offset (0x10), 
                XDCB,   64
            }

            Field (OTGD, ByteAcc, NoLock, Preserve)
            {
                Offset (0x84), 
                D0I3,   2, 
                Offset (0x85), 
                PMEE,   1, 
                    ,   6, 
                PMES,   1
            }

            Method (XDBA, 0, NotSerialized)
            {
                Return ((XDCB & 0xFFFFFFFFFFFFFF00))
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                If ((Arg0 == ToUUID ("732b85d5-b7a7-4a1b-9ba0-4bbd00ffd511") /* Unknown UUID */))
                {
                    If ((Arg1 == One))
                    {
                        Method (SPPS, 2, Serialized)
                        {
                            OperationRegion (XDBW, SystemMemory, XDBA (), 0x00110000)
                            Field (XDBW, WordAcc, NoLock, Preserve)
                            {
                                Offset (0x10F810), 
                                Offset (0x10F811), 
                                U2CP,   2, 
                                U3CP,   2, 
                                Offset (0x10F818), 
                                PUPS,   2, 
                                    ,   1, 
                                PURC,   1, 
                                Offset (0x10F81A), 
                                Offset (0x10F81C), 
                                    ,   3, 
                                UXPE,   2, 
                                Offset (0x10F81E)
                            }

                            Local1 = Arg0
                            Local2 = Arg1
                            If ((Local1 == Zero))
                            {
                                UXPE = Zero
                                Local0 = Zero
                                While ((Local0 < 0x0A))
                                {
                                    Stall (0x64)
                                    Local0++
                                }

                                PUPS = Zero
                                Local0 = Zero
                                While ((Local0 < 0x07D0))
                                {
                                    Stall (0x64)
                                    If (((U2CP == Zero) && (U3CP == Zero)))
                                    {
                                        Break
                                    }

                                    Local0++
                                }

                                If ((U2CP != Zero)) {}
                                If ((U3CP != Zero)) {}
                                Return (Zero)
                            }

                            If ((Local1 == 0x03))
                            {
                                If ((U2CP != Zero)) {}
                                If ((U3CP != Zero)) {}
                                PUPS = 0x03
                                Local0 = Zero
                                While ((Local0 < 0x07D0))
                                {
                                    Stall (0x64)
                                    If (((U2CP == 0x03) && (U3CP == 0x03)))
                                    {
                                        Break
                                    }

                                    Local0++
                                }

                                If ((U2CP != 0x03)) {}
                                If ((U3CP != 0x03)) {}
                                UXPE = Local2
                                Return (Zero)
                            }

                            Return (Zero)
                        }

                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Return (Buffer (One)
                                {
                                     0xF3                                             // .
                                })
                            }
                            Case (One)
                            {
                                Return (One)
                            }
                            Case (0x04)
                            {
                                Local1 = DerefOf (Arg3 [Zero])
                                SPPS (Local1, Zero)
                            }
                            Case (0x05)
                            {
                                If (CondRefOf (\_SB.PCI0.LPCB.H_EC.XDAT))
                                {
                                    If ((^^LPCB.H_EC.XDAT () == One))
                                    {
                                        Notify (XDCI, 0x80) // Status Change
                                    }
                                    Else
                                    {
                                        Notify (XDCI, 0x81) // Information Change
                                    }
                                }

                                Return (Zero)
                            }
                            Case (0x06)
                            {
                                OperationRegion (XDBD, SystemMemory, XDBA (), 0x00110000)
                                Field (XDBD, DWordAcc, NoLock, Preserve)
                                {
                                    Offset (0xC704), 
                                        ,   30, 
                                    CSFR,   1, 
                                    Offset (0xC708)
                                }

                                OperationRegion (XDW2, SystemMemory, XDBA (), 0x00110000)
                                Field (XDW2, WordAcc, NoLock, Preserve)
                                {
                                    Offset (0x10F820), 
                                        ,   13, 
                                    OTHC,   1
                                }

                                If ((OTHC == Zero))
                                {
                                    CSFR = One
                                    Local0 = Zero
                                    While ((Local0 < 0x64))
                                    {
                                        If ((CSFR == Zero))
                                        {
                                            Break
                                        }

                                        Sleep (One)
                                    }
                                }

                                Return (Zero)
                            }
                            Case (0x07)
                            {
                                OperationRegion (XD22, SystemMemory, XDBA (), 0x00110000)
                                Field (XD22, WordAcc, NoLock, Preserve)
                                {
                                    Offset (0x10F818), 
                                    P2PS,   2, 
                                    Offset (0x10F81A)
                                }

                                Local0 = P2PS /* \_SB_.PCI0.XDCI._DSM.P2PS */
                                Return (Local0)
                            }

                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Name (_DDN, "SPT XHCI controller")  // _DDN: DOS Device Name
            Name (_STR, Unicode ("SPT XHCI controller"))  // _STR: Description String
            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                Return (0x03)
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((DVID != 0xFFFFFFFF))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x6D, 0x04))
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                PMEE = Arg0
            }

            Method (GPEH, 0, NotSerialized)
            {
                If ((DVID == 0xFFFF))
                {
                    Return (Zero)
                }

                Local0 = PMES /* \_SB_.PCI0.XDCI.PMES */
                PMES = One
                If ((PMEE && Local0))
                {
                    Notify (XDCI, 0x02) // Device Wake
                }
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (HDAS)
        {
            Name (_ADR, 0x001F0003)  // _ADR: Address
            OperationRegion (HDAR, PCI_Config, Zero, 0x0100)
            Field (HDAR, WordAcc, NoLock, Preserve)
            {
                VDID,   32
            }

            Field (HDAR, ByteAcc, NoLock, Preserve)
            {
                Offset (0x54), 
                Offset (0x55), 
                PMEE,   1, 
                    ,   6, 
                PMES,   1
            }

            Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                PMEE = Arg0
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x6D, 0x04))
            }

            Method (GPEH, 0, NotSerialized)
            {
                If ((VDID == 0xFFFFFFFF))
                {
                    Return (Zero)
                }

                If ((PMEE && PMES))
                {
                    ADBG ("HDAS GPEH")
                    PMES = One
                    Notify (HDAS, 0x02) // Device Wake
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                If ((VDID != 0xFFFFFFFF))
                {
                    VMMH (Zero, One)
                }

                If (CondRefOf (\_SB.PCI0.HDAS.PS0X))
                {
                    PS0X ()
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                If ((VDID != 0xFFFFFFFF))
                {
                    VMMH (Zero, Zero)
                }

                If (CondRefOf (\_SB.PCI0.HDAS.PS3X))
                {
                    PS3X ()
                }
            }

            Name (NBUF, ResourceTemplate ()
            {
                QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, NonCacheable, ReadOnly,
                    0x0000000000000001, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, _Y14, AddressRangeACPI, TypeStatic)
            })
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                ADBG ("HDAS _INI")
                CreateQWordField (NBUF, \_SB.PCI0.HDAS._Y14._MIN, NBAS)  // _MIN: Minimum Base Address
                CreateQWordField (NBUF, \_SB.PCI0.HDAS._Y14._MAX, NMAS)  // _MAX: Maximum Base Address
                CreateQWordField (NBUF, \_SB.PCI0.HDAS._Y14._LEN, NLEN)  // _LEN: Length
                NBAS = NHLA /* \NHLA */
                NMAS = (NHLA + (NHLL - One))
                NLEN = NHLL /* \NHLL */
                If ((VDID != 0xFFFFFFFF))
                {
                    VMMH (Zero, One)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                ADBG ("HDAS _DSM")
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                If ((Arg0 == ToUUID ("a69f886e-6ceb-4594-a41f-7b5dce24c553") /* Unknown UUID */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Return (Buffer (One)
                            {
                                 0x0F                                             // .
                            })
                        }
                        Case (One)
                        {
                            ADBG ("_DSM Fun 1 NHLT")
                            Return (NBUF) /* \_SB_.PCI0.HDAS.NBUF */
                        }
                        Case (0x02)
                        {
                            ADBG ("_DSM Fun 2 FMSK")
                            Return (ADFM) /* \ADFM */
                        }
                        Case (0x03)
                        {
                            ADBG ("_DSM Fun 3 PPMS")
                            If (CondRefOf (\_SB.PCI0.HDAS.PPMS))
                            {
                                Return (PPMS (Arg3))
                            }

                            Return (Zero)
                        }
                        Default
                        {
                            ADBG ("_DSM Fun NOK")
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }

                    }
                }

                If (CondRefOf (HIWC))
                {
                    If (HIWC (Arg0))
                    {
                        If (CondRefOf (HIDW))
                        {
                            Return (HIDW (Arg0, Arg1, Arg2, Arg3))
                        }
                    }
                }

                ADBG ("_DSM UUID NOK")
                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }

        Device (RP01)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPA1 != Zero))
                {
                    Return (RPA1) /* \RPA1 */
                }
                Else
                {
                    Return (0x001C0000)
                }
            }

            Name (LTRZ, Zero)
            Name (OBFZ, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTR1 /* \LTR1 */
                LMSL = PML1 /* \PML1 */
                LNSL = PNL1 /* \PNL1 */
                OBFZ = OBF1 /* \OBF1 */
            }

            OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x324), 
                    ,   3, 
                LEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRZ)
                                {
                                    FUN6 = One
                                }

                                If (OBFZ)
                                {
                                    FUN4 = One
                                }

                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        FUN8 = One
                                        FUN9 = One
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PCI0.RP01._DSM.OPTS */
                        }
                        Case (0x04)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (OBFZ)
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                                Else
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                            }
                        }
                        Case (0x05)
                        {
                            If ((Arg1 == One))
                            {
                                Return (One)
                            }
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == Zero) || (LNSL == Zero)))
                                    {
                                        If ((PCHS == SPTH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == SPTL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PCI0.RP01.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If ((ECR1 == One))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (One)
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If ((ECR1 == One))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (Package (0x05)
                                    {
                                        0xC350, 
                                        Ones, 
                                        Ones, 
                                        0xC350, 
                                        Ones
                                    })
                                }
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR04 ())
                }

                Return (PR04 ())
            }
        }

        Device (RP02)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPA2 != Zero))
                {
                    Return (RPA2) /* \RPA2 */
                }
                Else
                {
                    Return (0x001C0001)
                }
            }

            Name (LTRZ, Zero)
            Name (OBFZ, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTR2 /* \LTR2 */
                LMSL = PML2 /* \PML2 */
                LNSL = PNL2 /* \PNL2 */
                OBFZ = OBF2 /* \OBF2 */
            }

            OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x324), 
                    ,   3, 
                LEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRZ)
                                {
                                    FUN6 = One
                                }

                                If (OBFZ)
                                {
                                    FUN4 = One
                                }

                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        FUN8 = One
                                        FUN9 = One
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PCI0.RP02._DSM.OPTS */
                        }
                        Case (0x04)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (OBFZ)
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                                Else
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                            }
                        }
                        Case (0x05)
                        {
                            If ((Arg1 == One))
                            {
                                Return (One)
                            }
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == Zero) || (LNSL == Zero)))
                                    {
                                        If ((PCHS == SPTH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == SPTL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PCI0.RP02.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If ((ECR1 == One))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (One)
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If ((ECR1 == One))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (Package (0x05)
                                    {
                                        0xC350, 
                                        Ones, 
                                        Ones, 
                                        0xC350, 
                                        Ones
                                    })
                                }
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR05 ())
                }

                Return (PR05 ())
            }
        }

        Device (RP03)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPA3 != Zero))
                {
                    Return (RPA3) /* \RPA3 */
                }
                Else
                {
                    Return (0x001C0002)
                }
            }

            Name (LTRZ, Zero)
            Name (OBFZ, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTR3 /* \LTR3 */
                LMSL = PML3 /* \PML3 */
                LNSL = PNL3 /* \PNL3 */
                OBFZ = OBF3 /* \OBF3 */
            }

            OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x324), 
                    ,   3, 
                LEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRZ)
                                {
                                    FUN6 = One
                                }

                                If (OBFZ)
                                {
                                    FUN4 = One
                                }

                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        FUN8 = One
                                        FUN9 = One
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PCI0.RP03._DSM.OPTS */
                        }
                        Case (0x04)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (OBFZ)
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                                Else
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                            }
                        }
                        Case (0x05)
                        {
                            If ((Arg1 == One))
                            {
                                Return (One)
                            }
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == Zero) || (LNSL == Zero)))
                                    {
                                        If ((PCHS == SPTH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == SPTL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PCI0.RP03.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If ((ECR1 == One))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (One)
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If ((ECR1 == One))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (Package (0x05)
                                    {
                                        0xC350, 
                                        Ones, 
                                        Ones, 
                                        0xC350, 
                                        Ones
                                    })
                                }
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR06 ())
                }

                Return (PR06 ())
            }
        }

        Device (RP04)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPA4 != Zero))
                {
                    Return (RPA4) /* \RPA4 */
                }
                Else
                {
                    Return (0x001C0003)
                }
            }

            Name (LTRZ, Zero)
            Name (OBFZ, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTR4 /* \LTR4 */
                LMSL = PML4 /* \PML4 */
                LNSL = PNL4 /* \PNL4 */
                OBFZ = OBF4 /* \OBF4 */
            }

            OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x324), 
                    ,   3, 
                LEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRZ)
                                {
                                    FUN6 = One
                                }

                                If (OBFZ)
                                {
                                    FUN4 = One
                                }

                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        FUN8 = One
                                        FUN9 = One
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PCI0.RP04._DSM.OPTS */
                        }
                        Case (0x04)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (OBFZ)
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                                Else
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                            }
                        }
                        Case (0x05)
                        {
                            If ((Arg1 == One))
                            {
                                Return (One)
                            }
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == Zero) || (LNSL == Zero)))
                                    {
                                        If ((PCHS == SPTH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == SPTL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PCI0.RP04.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If ((ECR1 == One))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (One)
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If ((ECR1 == One))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (Package (0x05)
                                    {
                                        0xC350, 
                                        Ones, 
                                        Ones, 
                                        0xC350, 
                                        Ones
                                    })
                                }
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR07 ())
                }

                Return (PR07 ())
            }
        }

        Device (RP05)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPA5 != Zero))
                {
                    Return (RPA5) /* \RPA5 */
                }
                Else
                {
                    Return (0x001C0004)
                }
            }

            Name (LTRZ, Zero)
            Name (OBFZ, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTR5 /* \LTR5 */
                LMSL = PML5 /* \PML5 */
                LNSL = PNL5 /* \PNL5 */
                OBFZ = OBF5 /* \OBF5 */
            }

            OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x324), 
                    ,   3, 
                LEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRZ)
                                {
                                    FUN6 = One
                                }

                                If (OBFZ)
                                {
                                    FUN4 = One
                                }

                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        FUN8 = One
                                        FUN9 = One
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PCI0.RP05._DSM.OPTS */
                        }
                        Case (0x04)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (OBFZ)
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                                Else
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                            }
                        }
                        Case (0x05)
                        {
                            If ((Arg1 == One))
                            {
                                Return (One)
                            }
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == Zero) || (LNSL == Zero)))
                                    {
                                        If ((PCHS == SPTH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == SPTL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PCI0.RP05.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If ((ECR1 == One))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (One)
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If ((ECR1 == One))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (Package (0x05)
                                    {
                                        0xC350, 
                                        Ones, 
                                        Ones, 
                                        0xC350, 
                                        Ones
                                    })
                                }
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR04 ())
                }

                Return (PR04 ())
            }
        }

        Device (RP06)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPA6 != Zero))
                {
                    Return (RPA6) /* \RPA6 */
                }
                Else
                {
                    Return (0x001C0005)
                }
            }

            Name (LTRZ, Zero)
            Name (OBFZ, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTR6 /* \LTR6 */
                LMSL = PML6 /* \PML6 */
                LNSL = PNL6 /* \PNL6 */
                OBFZ = OBF6 /* \OBF6 */
            }

            OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x324), 
                    ,   3, 
                LEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRZ)
                                {
                                    FUN6 = One
                                }

                                If (OBFZ)
                                {
                                    FUN4 = One
                                }

                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        FUN8 = One
                                        FUN9 = One
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PCI0.RP06._DSM.OPTS */
                        }
                        Case (0x04)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (OBFZ)
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                                Else
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                            }
                        }
                        Case (0x05)
                        {
                            If ((Arg1 == One))
                            {
                                Return (One)
                            }
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == Zero) || (LNSL == Zero)))
                                    {
                                        If ((PCHS == SPTH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == SPTL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PCI0.RP06.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If ((ECR1 == One))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (One)
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If ((ECR1 == One))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (Package (0x05)
                                    {
                                        0xC350, 
                                        Ones, 
                                        Ones, 
                                        0xC350, 
                                        Ones
                                    })
                                }
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR05 ())
                }

                Return (PR05 ())
            }
        }

        Device (RP07)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPA7 != Zero))
                {
                    Return (RPA7) /* \RPA7 */
                }
                Else
                {
                    Return (0x001C0006)
                }
            }

            Name (LTRZ, Zero)
            Name (OBFZ, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTR7 /* \LTR7 */
                LMSL = PML7 /* \PML7 */
                LNSL = PNL7 /* \PNL7 */
                OBFZ = OBF7 /* \OBF7 */
            }

            OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x324), 
                    ,   3, 
                LEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRZ)
                                {
                                    FUN6 = One
                                }

                                If (OBFZ)
                                {
                                    FUN4 = One
                                }

                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        FUN8 = One
                                        FUN9 = One
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PCI0.RP07._DSM.OPTS */
                        }
                        Case (0x04)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (OBFZ)
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                                Else
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                            }
                        }
                        Case (0x05)
                        {
                            If ((Arg1 == One))
                            {
                                Return (One)
                            }
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == Zero) || (LNSL == Zero)))
                                    {
                                        If ((PCHS == SPTH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == SPTL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PCI0.RP07.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If ((ECR1 == One))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (One)
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If ((ECR1 == One))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (Package (0x05)
                                    {
                                        0xC350, 
                                        Ones, 
                                        Ones, 
                                        0xC350, 
                                        Ones
                                    })
                                }
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR06 ())
                }

                Return (PR06 ())
            }
        }

        Device (RP08)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPA8 != Zero))
                {
                    Return (RPA8) /* \RPA8 */
                }
                Else
                {
                    Return (0x001C0007)
                }
            }

            Name (LTRZ, Zero)
            Name (OBFZ, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTR8 /* \LTR8 */
                LMSL = PML8 /* \PML8 */
                LNSL = PNL8 /* \PNL8 */
                OBFZ = OBF8 /* \OBF8 */
            }

            OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x324), 
                    ,   3, 
                LEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRZ)
                                {
                                    FUN6 = One
                                }

                                If (OBFZ)
                                {
                                    FUN4 = One
                                }

                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        FUN8 = One
                                        FUN9 = One
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PCI0.RP08._DSM.OPTS */
                        }
                        Case (0x04)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (OBFZ)
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                                Else
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                            }
                        }
                        Case (0x05)
                        {
                            If ((Arg1 == One))
                            {
                                Return (One)
                            }
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == Zero) || (LNSL == Zero)))
                                    {
                                        If ((PCHS == SPTH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == SPTL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PCI0.RP08.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If ((ECR1 == One))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (One)
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If ((ECR1 == One))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (Package (0x05)
                                    {
                                        0xC350, 
                                        Ones, 
                                        Ones, 
                                        0xC350, 
                                        Ones
                                    })
                                }
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR07 ())
                }

                Return (PR07 ())
            }
        }

        Device (RP09)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPA9 != Zero))
                {
                    Return (RPA9) /* \RPA9 */
                }
                Else
                {
                    Return (0x001D0000)
                }
            }

            Name (LTRZ, Zero)
            Name (OBFZ, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTR9 /* \LTR9 */
                LMSL = PML9 /* \PML9 */
                LNSL = PNL9 /* \PNL9 */
                OBFZ = OBF9 /* \OBF9 */
            }

            OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x324), 
                    ,   3, 
                LEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRZ)
                                {
                                    FUN6 = One
                                }

                                If (OBFZ)
                                {
                                    FUN4 = One
                                }

                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        FUN8 = One
                                        FUN9 = One
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PCI0.RP09._DSM.OPTS */
                        }
                        Case (0x04)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (OBFZ)
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                                Else
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                            }
                        }
                        Case (0x05)
                        {
                            If ((Arg1 == One))
                            {
                                Return (One)
                            }
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == Zero) || (LNSL == Zero)))
                                    {
                                        If ((PCHS == SPTH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == SPTL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PCI0.RP09.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If ((ECR1 == One))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (One)
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If ((ECR1 == One))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (Package (0x05)
                                    {
                                        0xC350, 
                                        Ones, 
                                        Ones, 
                                        0xC350, 
                                        Ones
                                    })
                                }
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR04 ())
                }

                Return (PR04 ())
            }
        }

        Device (RP10)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPAA != Zero))
                {
                    Return (RPAA) /* \RPAA */
                }
                Else
                {
                    Return (0x001D0001)
                }
            }

            Name (LTRZ, Zero)
            Name (OBFZ, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTRA /* \LTRA */
                LMSL = PMLA /* \PMLA */
                LNSL = PNLA /* \PNLA */
                OBFZ = OBFA /* \OBFA */
            }

            OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x324), 
                    ,   3, 
                LEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRZ)
                                {
                                    FUN6 = One
                                }

                                If (OBFZ)
                                {
                                    FUN4 = One
                                }

                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        FUN8 = One
                                        FUN9 = One
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PCI0.RP10._DSM.OPTS */
                        }
                        Case (0x04)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (OBFZ)
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                                Else
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                            }
                        }
                        Case (0x05)
                        {
                            If ((Arg1 == One))
                            {
                                Return (One)
                            }
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == Zero) || (LNSL == Zero)))
                                    {
                                        If ((PCHS == SPTH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == SPTL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PCI0.RP10.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If ((ECR1 == One))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (One)
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If ((ECR1 == One))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (Package (0x05)
                                    {
                                        0xC350, 
                                        Ones, 
                                        Ones, 
                                        0xC350, 
                                        Ones
                                    })
                                }
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR05 ())
                }

                Return (PR05 ())
            }
        }

        Device (RP11)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPAB != Zero))
                {
                    Return (RPAB) /* \RPAB */
                }
                Else
                {
                    Return (0x001D0002)
                }
            }

            Name (LTRZ, Zero)
            Name (OBFZ, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTRB /* \LTRB */
                LMSL = PMLB /* \PMLB */
                LNSL = PNLB /* \PNLB */
                OBFZ = OBFB /* \OBFB */
            }

            OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x324), 
                    ,   3, 
                LEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRZ)
                                {
                                    FUN6 = One
                                }

                                If (OBFZ)
                                {
                                    FUN4 = One
                                }

                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        FUN8 = One
                                        FUN9 = One
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PCI0.RP11._DSM.OPTS */
                        }
                        Case (0x04)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (OBFZ)
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                                Else
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                            }
                        }
                        Case (0x05)
                        {
                            If ((Arg1 == One))
                            {
                                Return (One)
                            }
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == Zero) || (LNSL == Zero)))
                                    {
                                        If ((PCHS == SPTH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == SPTL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PCI0.RP11.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If ((ECR1 == One))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (One)
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If ((ECR1 == One))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (Package (0x05)
                                    {
                                        0xC350, 
                                        Ones, 
                                        Ones, 
                                        0xC350, 
                                        Ones
                                    })
                                }
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR06 ())
                }

                Return (PR06 ())
            }
        }

        Device (RP12)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPAC != Zero))
                {
                    Return (RPAC) /* \RPAC */
                }
                Else
                {
                    Return (0x001D0003)
                }
            }

            Name (LTRZ, Zero)
            Name (OBFZ, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTRC /* \LTRC */
                LMSL = PMLC /* \PMLC */
                LNSL = PNLC /* \PNLC */
                OBFZ = OBFC /* \OBFC */
            }

            OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x324), 
                    ,   3, 
                LEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRZ)
                                {
                                    FUN6 = One
                                }

                                If (OBFZ)
                                {
                                    FUN4 = One
                                }

                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        FUN8 = One
                                        FUN9 = One
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PCI0.RP12._DSM.OPTS */
                        }
                        Case (0x04)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (OBFZ)
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                                Else
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                            }
                        }
                        Case (0x05)
                        {
                            If ((Arg1 == One))
                            {
                                Return (One)
                            }
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == Zero) || (LNSL == Zero)))
                                    {
                                        If ((PCHS == SPTH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == SPTL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PCI0.RP12.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If ((ECR1 == One))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (One)
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If ((ECR1 == One))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (Package (0x05)
                                    {
                                        0xC350, 
                                        Ones, 
                                        Ones, 
                                        0xC350, 
                                        Ones
                                    })
                                }
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR07 ())
                }

                Return (PR07 ())
            }
        }

        Device (RP13)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPAD != Zero))
                {
                    Return (RPAD) /* \RPAD */
                }
                Else
                {
                    Return (0x001D0004)
                }
            }

            Name (LTRZ, Zero)
            Name (OBFZ, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTRD /* \LTRD */
                LMSL = PMLD /* \PMLD */
                LNSL = PNLD /* \PNLD */
                OBFZ = OBFD /* \OBFD */
            }

            OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x324), 
                    ,   3, 
                LEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRZ)
                                {
                                    FUN6 = One
                                }

                                If (OBFZ)
                                {
                                    FUN4 = One
                                }

                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        FUN8 = One
                                        FUN9 = One
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PCI0.RP13._DSM.OPTS */
                        }
                        Case (0x04)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (OBFZ)
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                                Else
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                            }
                        }
                        Case (0x05)
                        {
                            If ((Arg1 == One))
                            {
                                Return (One)
                            }
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == Zero) || (LNSL == Zero)))
                                    {
                                        If ((PCHS == SPTH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == SPTL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PCI0.RP13.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If ((ECR1 == One))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (One)
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If ((ECR1 == One))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (Package (0x05)
                                    {
                                        0xC350, 
                                        Ones, 
                                        Ones, 
                                        0xC350, 
                                        Ones
                                    })
                                }
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR04 ())
                }

                Return (PR04 ())
            }
        }

        Device (RP14)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPAE != Zero))
                {
                    Return (RPAE) /* \RPAE */
                }
                Else
                {
                    Return (0x001D0005)
                }
            }

            Name (LTRZ, Zero)
            Name (OBFZ, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTRE /* \LTRE */
                LMSL = PMLE /* \PMLE */
                LNSL = PNLE /* \PNLE */
                OBFZ = OBFE /* \OBFE */
            }

            OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x324), 
                    ,   3, 
                LEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRZ)
                                {
                                    FUN6 = One
                                }

                                If (OBFZ)
                                {
                                    FUN4 = One
                                }

                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        FUN8 = One
                                        FUN9 = One
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PCI0.RP14._DSM.OPTS */
                        }
                        Case (0x04)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (OBFZ)
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                                Else
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                            }
                        }
                        Case (0x05)
                        {
                            If ((Arg1 == One))
                            {
                                Return (One)
                            }
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == Zero) || (LNSL == Zero)))
                                    {
                                        If ((PCHS == SPTH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == SPTL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PCI0.RP14.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If ((ECR1 == One))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (One)
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If ((ECR1 == One))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (Package (0x05)
                                    {
                                        0xC350, 
                                        Ones, 
                                        Ones, 
                                        0xC350, 
                                        Ones
                                    })
                                }
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR05 ())
                }

                Return (PR05 ())
            }
        }

        Device (RP15)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPAF != Zero))
                {
                    Return (RPAF) /* \RPAF */
                }
                Else
                {
                    Return (0x001D0006)
                }
            }

            Name (LTRZ, Zero)
            Name (OBFZ, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTRF /* \LTRF */
                LMSL = PMLF /* \PMLF */
                LNSL = PNLF /* \PNLF */
                OBFZ = OBFF /* \OBFF */
            }

            OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x324), 
                    ,   3, 
                LEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRZ)
                                {
                                    FUN6 = One
                                }

                                If (OBFZ)
                                {
                                    FUN4 = One
                                }

                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        FUN8 = One
                                        FUN9 = One
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PCI0.RP15._DSM.OPTS */
                        }
                        Case (0x04)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (OBFZ)
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                                Else
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                            }
                        }
                        Case (0x05)
                        {
                            If ((Arg1 == One))
                            {
                                Return (One)
                            }
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == Zero) || (LNSL == Zero)))
                                    {
                                        If ((PCHS == SPTH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == SPTL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PCI0.RP15.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If ((ECR1 == One))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (One)
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If ((ECR1 == One))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (Package (0x05)
                                    {
                                        0xC350, 
                                        Ones, 
                                        Ones, 
                                        0xC350, 
                                        Ones
                                    })
                                }
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR06 ())
                }

                Return (PR06 ())
            }
        }

        Device (RP16)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPAG != Zero))
                {
                    Return (RPAG) /* \RPAG */
                }
                Else
                {
                    Return (0x001D0007)
                }
            }

            Name (LTRZ, Zero)
            Name (OBFZ, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTRG /* \LTRG */
                LMSL = PMLG /* \PMLG */
                LNSL = PNLG /* \PNLG */
                OBFZ = OBFG /* \OBFG */
            }

            OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x324), 
                    ,   3, 
                LEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRZ)
                                {
                                    FUN6 = One
                                }

                                If (OBFZ)
                                {
                                    FUN4 = One
                                }

                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        FUN8 = One
                                        FUN9 = One
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PCI0.RP16._DSM.OPTS */
                        }
                        Case (0x04)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (OBFZ)
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                                Else
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                            }
                        }
                        Case (0x05)
                        {
                            If ((Arg1 == One))
                            {
                                Return (One)
                            }
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == Zero) || (LNSL == Zero)))
                                    {
                                        If ((PCHS == SPTH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == SPTL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PCI0.RP16.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If ((ECR1 == One))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (One)
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If ((ECR1 == One))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (Package (0x05)
                                    {
                                        0xC350, 
                                        Ones, 
                                        Ones, 
                                        0xC350, 
                                        Ones
                                    })
                                }
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR07 ())
                }

                Return (PR07 ())
            }
        }

        Device (RP17)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPAH != Zero))
                {
                    Return (RPAH) /* \RPAH */
                }
                Else
                {
                    Return (0x001B0000)
                }
            }

            Name (LTRZ, Zero)
            Name (OBFZ, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTRH /* \LTRH */
                LMSL = PMLH /* \PMLH */
                LNSL = PNLH /* \PNLH */
                OBFZ = OBFH /* \OBFH */
            }

            OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x324), 
                    ,   3, 
                LEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRZ)
                                {
                                    FUN6 = One
                                }

                                If (OBFZ)
                                {
                                    FUN4 = One
                                }

                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        FUN8 = One
                                        FUN9 = One
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PCI0.RP17._DSM.OPTS */
                        }
                        Case (0x04)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (OBFZ)
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                                Else
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                            }
                        }
                        Case (0x05)
                        {
                            If ((Arg1 == One))
                            {
                                Return (One)
                            }
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == Zero) || (LNSL == Zero)))
                                    {
                                        If ((PCHS == SPTH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == SPTL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PCI0.RP17.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If ((ECR1 == One))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (One)
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If ((ECR1 == One))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (Package (0x05)
                                    {
                                        0xC350, 
                                        Ones, 
                                        Ones, 
                                        0xC350, 
                                        Ones
                                    })
                                }
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR04 ())
                }

                Return (PR04 ())
            }
        }

        Device (RP18)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPAI != Zero))
                {
                    Return (RPAI) /* \RPAI */
                }
                Else
                {
                    Return (0x001B0001)
                }
            }

            Name (LTRZ, Zero)
            Name (OBFZ, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTRI /* \LTRI */
                LMSL = PMLI /* \PMLI */
                LNSL = PNLI /* \PNLI */
                OBFZ = OBFI /* \OBFI */
            }

            OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x324), 
                    ,   3, 
                LEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRZ)
                                {
                                    FUN6 = One
                                }

                                If (OBFZ)
                                {
                                    FUN4 = One
                                }

                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        FUN8 = One
                                        FUN9 = One
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PCI0.RP18._DSM.OPTS */
                        }
                        Case (0x04)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (OBFZ)
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                                Else
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                            }
                        }
                        Case (0x05)
                        {
                            If ((Arg1 == One))
                            {
                                Return (One)
                            }
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == Zero) || (LNSL == Zero)))
                                    {
                                        If ((PCHS == SPTH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == SPTL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PCI0.RP18.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If ((ECR1 == One))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (One)
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If ((ECR1 == One))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (Package (0x05)
                                    {
                                        0xC350, 
                                        Ones, 
                                        Ones, 
                                        0xC350, 
                                        Ones
                                    })
                                }
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR05 ())
                }

                Return (PR05 ())
            }
        }

        Device (RP19)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPAJ != Zero))
                {
                    Return (RPAJ) /* \RPAJ */
                }
                Else
                {
                    Return (0x001B0002)
                }
            }

            Name (LTRZ, Zero)
            Name (OBFZ, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTRJ /* \LTRJ */
                LMSL = PMLJ /* \PMLJ */
                LNSL = PNLJ /* \PNLJ */
                OBFZ = OBFJ /* \OBFJ */
            }

            OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x324), 
                    ,   3, 
                LEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRZ)
                                {
                                    FUN6 = One
                                }

                                If (OBFZ)
                                {
                                    FUN4 = One
                                }

                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        FUN8 = One
                                        FUN9 = One
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PCI0.RP19._DSM.OPTS */
                        }
                        Case (0x04)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (OBFZ)
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                                Else
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                            }
                        }
                        Case (0x05)
                        {
                            If ((Arg1 == One))
                            {
                                Return (One)
                            }
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == Zero) || (LNSL == Zero)))
                                    {
                                        If ((PCHS == SPTH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == SPTL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PCI0.RP19.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If ((ECR1 == One))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (One)
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If ((ECR1 == One))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (Package (0x05)
                                    {
                                        0xC350, 
                                        Ones, 
                                        Ones, 
                                        0xC350, 
                                        Ones
                                    })
                                }
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR06 ())
                }

                Return (PR06 ())
            }
        }

        Device (RP20)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPAK != Zero))
                {
                    Return (RPAK) /* \RPAK */
                }
                Else
                {
                    Return (0x001B0003)
                }
            }

            Name (LTRZ, Zero)
            Name (OBFZ, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTRK /* \LTRK */
                LMSL = PMLK /* \_SB_.PCI0.PMLK */
                LNSL = PNLK /* \PNLK */
                OBFZ = OBFK /* \OBFK */
            }

            OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x324), 
                    ,   3, 
                LEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRZ)
                                {
                                    FUN6 = One
                                }

                                If (OBFZ)
                                {
                                    FUN4 = One
                                }

                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        FUN8 = One
                                        FUN9 = One
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PCI0.RP20._DSM.OPTS */
                        }
                        Case (0x04)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (OBFZ)
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                                Else
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                            }
                        }
                        Case (0x05)
                        {
                            If ((Arg1 == One))
                            {
                                Return (One)
                            }
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == Zero) || (LNSL == Zero)))
                                    {
                                        If ((PCHS == SPTH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == SPTL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PCI0.RP20.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If ((ECR1 == One))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (One)
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If ((ECR1 == One))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (Package (0x05)
                                    {
                                        0xC350, 
                                        Ones, 
                                        Ones, 
                                        0xC350, 
                                        Ones
                                    })
                                }
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR07 ())
                }

                Return (PR07 ())
            }
        }

        Device (RP21)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPAL != Zero))
                {
                    Return (RPAL) /* \RPAL */
                }
                Else
                {
                    Return (0x001B0004)
                }
            }

            Name (LTRZ, Zero)
            Name (OBFZ, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTRL /* \LTRL */
                LMSL = PMLL /* \PMLL */
                LNSL = PNLL /* \PNLL */
                OBFZ = OBFL /* \OBFL */
            }

            OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x324), 
                    ,   3, 
                LEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRZ)
                                {
                                    FUN6 = One
                                }

                                If (OBFZ)
                                {
                                    FUN4 = One
                                }

                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        FUN8 = One
                                        FUN9 = One
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PCI0.RP21._DSM.OPTS */
                        }
                        Case (0x04)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (OBFZ)
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                                Else
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                            }
                        }
                        Case (0x05)
                        {
                            If ((Arg1 == One))
                            {
                                Return (One)
                            }
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == Zero) || (LNSL == Zero)))
                                    {
                                        If ((PCHS == SPTH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == SPTL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PCI0.RP21.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If ((ECR1 == One))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (One)
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If ((ECR1 == One))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (Package (0x05)
                                    {
                                        0xC350, 
                                        Ones, 
                                        Ones, 
                                        0xC350, 
                                        Ones
                                    })
                                }
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR04 ())
                }

                Return (PR04 ())
            }
        }

        Device (RP22)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPAM != Zero))
                {
                    Return (RPAM) /* \RPAM */
                }
                Else
                {
                    Return (0x001B0005)
                }
            }

            Name (LTRZ, Zero)
            Name (OBFZ, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTRM /* \LTRM */
                LMSL = PMLM /* \PMLM */
                LNSL = PNLM /* \PNLM */
                OBFZ = OBFM /* \OBFM */
            }

            OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x324), 
                    ,   3, 
                LEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRZ)
                                {
                                    FUN6 = One
                                }

                                If (OBFZ)
                                {
                                    FUN4 = One
                                }

                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        FUN8 = One
                                        FUN9 = One
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PCI0.RP22._DSM.OPTS */
                        }
                        Case (0x04)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (OBFZ)
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                                Else
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                            }
                        }
                        Case (0x05)
                        {
                            If ((Arg1 == One))
                            {
                                Return (One)
                            }
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == Zero) || (LNSL == Zero)))
                                    {
                                        If ((PCHS == SPTH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == SPTL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PCI0.RP22.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If ((ECR1 == One))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (One)
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If ((ECR1 == One))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (Package (0x05)
                                    {
                                        0xC350, 
                                        Ones, 
                                        Ones, 
                                        0xC350, 
                                        Ones
                                    })
                                }
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR05 ())
                }

                Return (PR05 ())
            }
        }

        Device (RP23)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPAN != Zero))
                {
                    Return (RPAN) /* \RPAN */
                }
                Else
                {
                    Return (0x001B0006)
                }
            }

            Name (LTRZ, Zero)
            Name (OBFZ, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTRN /* \LTRN */
                LMSL = PMLN /* \PMLN */
                LNSL = PNLN /* \PNLN */
                OBFZ = OBFN /* \OBFN */
            }

            OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x324), 
                    ,   3, 
                LEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRZ)
                                {
                                    FUN6 = One
                                }

                                If (OBFZ)
                                {
                                    FUN4 = One
                                }

                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        FUN8 = One
                                        FUN9 = One
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PCI0.RP23._DSM.OPTS */
                        }
                        Case (0x04)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (OBFZ)
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                                Else
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                            }
                        }
                        Case (0x05)
                        {
                            If ((Arg1 == One))
                            {
                                Return (One)
                            }
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == Zero) || (LNSL == Zero)))
                                    {
                                        If ((PCHS == SPTH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == SPTL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PCI0.RP23.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If ((ECR1 == One))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (One)
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If ((ECR1 == One))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (Package (0x05)
                                    {
                                        0xC350, 
                                        Ones, 
                                        Ones, 
                                        0xC350, 
                                        Ones
                                    })
                                }
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR06 ())
                }

                Return (PR06 ())
            }
        }

        Device (RP24)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPAO != Zero))
                {
                    Return (RPAO) /* \RPAO */
                }
                Else
                {
                    Return (0x001B0007)
                }
            }

            Name (LTRZ, Zero)
            Name (OBFZ, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRZ = LTRO /* \LTRO */
                LMSL = PMLO /* \PMLO */
                LNSL = PNLO /* \PNLO */
                OBFZ = OBFO /* \OBFO */
            }

            OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x324), 
                    ,   3, 
                LEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                       // ..
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x04, FUN4)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            If ((Arg1 >= 0x02))
                            {
                                FUN0 = One
                                If (LTRZ)
                                {
                                    FUN6 = One
                                }

                                If (OBFZ)
                                {
                                    FUN4 = One
                                }

                                If ((ECR1 == One))
                                {
                                    If ((Arg1 >= 0x03))
                                    {
                                        FUN8 = One
                                        FUN9 = One
                                    }
                                }
                            }

                            Return (OPTS) /* \_SB_.PCI0.RP24._DSM.OPTS */
                        }
                        Case (0x04)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (OBFZ)
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                                Else
                                {
                                    Return (Buffer (0x10)
                                    {
                                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    })
                                }
                            }
                        }
                        Case (0x05)
                        {
                            If ((Arg1 == One))
                            {
                                Return (One)
                            }
                        }
                        Case (0x06)
                        {
                            If ((Arg1 >= 0x02))
                            {
                                If (LTRZ)
                                {
                                    If (((LMSL == Zero) || (LNSL == Zero)))
                                    {
                                        If ((PCHS == SPTH))
                                        {
                                            LMSL = 0x0846
                                            LNSL = 0x0846
                                        }
                                        ElseIf ((PCHS == SPTL))
                                        {
                                            LMSL = 0x1003
                                            LNSL = 0x1003
                                        }
                                    }

                                    LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                    LTRV [One] = (LMSL & 0x03FF)
                                    LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                    LTRV [0x03] = (LNSL & 0x03FF)
                                    Return (LTRV) /* \_SB_.PCI0.RP24.LTRV */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                        Case (0x08)
                        {
                            If ((ECR1 == One))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (One)
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If ((ECR1 == One))
                            {
                                If ((Arg1 >= 0x03))
                                {
                                    Return (Package (0x05)
                                    {
                                        0xC350, 
                                        Ones, 
                                        Ones, 
                                        0xC350, 
                                        Ones
                                    })
                                }
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x69, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = One
                    PSPX = One
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x69, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR07 ())
                }

                Return (PR07 ())
            }
        }

        Device (SAT0)
        {
            Name (_ADR, 0x00170000)  // _ADR: Address
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                If (CondRefOf (\_SB.PCI0.SAT0.SDSM))
                {
                    Return (SDSM (Arg0, Arg1, Arg2, Arg3))
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PRT0)
            {
                Name (_ADR, 0xFFFF)  // _ADR: Address
            }

            Device (PRT1)
            {
                Name (_ADR, 0x0001FFFF)  // _ADR: Address
            }

            Device (PRT2)
            {
                Name (_ADR, 0x0002FFFF)  // _ADR: Address
            }

            Device (PRT3)
            {
                Name (_ADR, 0x0003FFFF)  // _ADR: Address
            }

            Device (PRT4)
            {
                Name (_ADR, 0x0004FFFF)  // _ADR: Address
            }

            Device (PRT5)
            {
                Name (_ADR, 0x0005FFFF)  // _ADR: Address
            }

            Device (VOL0)
            {
                Name (_ADR, 0x0080FFFF)  // _ADR: Address
            }

            Device (VOL1)
            {
                Name (_ADR, 0x0081FFFF)  // _ADR: Address
            }

            Device (VOL2)
            {
                Name (_ADR, 0x0082FFFF)  // _ADR: Address
            }

            Method (RDCA, 5, Serialized)
            {
                OperationRegion (RPAL, SystemMemory, (GPCB () + (0x000B8100 + Arg1)), 0x04)
                Field (RPAL, DWordAcc, Lock, Preserve)
                {
                    RPCD,   32
                }

                OperationRegion (EPAC, SystemMemory, (GPCB () + 0x000B8308), 0x08)
                Field (EPAC, DWordAcc, Lock, Preserve)
                {
                    CAIR,   32, 
                    CADR,   32
                }

                OperationRegion (NCRG, SystemMemory, (GPCB () + 0x000B8FC0), 0x04)
                Field (NCRG, DWordAcc, Lock, Preserve)
                {
                    CRGC,   32
                }

                If ((Arg0 > 0x02))
                {
                    Return (Zero)
                }
                Else
                {
                    CRGC = Arg0
                }

                Switch (ToInteger (Arg4))
                {
                    Case (Zero)
                    {
                        Return (RPCD) /* \_SB_.PCI0.SAT0.RDCA.RPCD */
                    }
                    Case (0x02)
                    {
                        CAIR = Arg1
                        Return (CADR) /* \_SB_.PCI0.SAT0.RDCA.CADR */
                    }
                    Case (One)
                    {
                        Local0 = (Arg2 & RPCD) /* \_SB_.PCI0.SAT0.RDCA.RPCD */
                        Local0 |= Arg3
                        RPCD = Local0
                    }
                    Case (0x03)
                    {
                        CAIR = Arg1
                        Local0 = (Arg2 & CADR) /* \_SB_.PCI0.SAT0.RDCA.CADR */
                        Local0 |= Arg3
                        CADR = Local0
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }

                Return (Zero)
            }

            Method (ARPC, 4, Serialized)
            {
                ADBG (Concatenate ("NRPN: ", ToHexString (Arg0)))
                Switch (ToInteger (Arg0))
                {
                    Case (0x04)
                    {
                        If (CondRefOf (\_SB.PCI0.RP05.PWRG))
                        {
                            CopyObject (^^RP05.PWRG, Arg1)
                        }

                        If (CondRefOf (\_SB.PCI0.RP05.RSTG))
                        {
                            CopyObject (^^RP05.RSTG, Arg2)
                        }

                        If (CondRefOf (\_SB.PCI0.RP05.SCLK))
                        {
                            CopyObject (^^RP05.SCLK, Arg3)
                        }
                    }
                    Case (0x08)
                    {
                        If (CondRefOf (\_SB.PCI0.RP09.PWRG))
                        {
                            CopyObject (^^RP09.PWRG, Arg1)
                        }

                        If (CondRefOf (\_SB.PCI0.RP09.RSTG))
                        {
                            CopyObject (^^RP09.RSTG, Arg2)
                        }

                        If (CondRefOf (\_SB.PCI0.RP09.SCLK))
                        {
                            CopyObject (^^RP09.SCLK, Arg3)
                        }
                    }
                    Case (0x0C)
                    {
                        If (CondRefOf (\_SB.PCI0.RP13.PWRG))
                        {
                            CopyObject (^^RP13.PWRG, Arg1)
                        }

                        If (CondRefOf (\_SB.PCI0.RP13.RSTG))
                        {
                            CopyObject (^^RP13.RSTG, Arg2)
                        }

                        If (CondRefOf (\_SB.PCI0.RP13.SCLK))
                        {
                            CopyObject (^^RP13.SCLK, Arg3)
                        }
                    }
                    Case (0x10)
                    {
                        If (CondRefOf (\_SB.PCI0.RP17.PWRG))
                        {
                            CopyObject (^^RP17.PWRG, Arg1)
                        }

                        If (CondRefOf (\_SB.PCI0.RP17.RSTG))
                        {
                            CopyObject (^^RP17.RSTG, Arg2)
                        }

                        If (CondRefOf (\_SB.PCI0.RP17.SCLK))
                        {
                            CopyObject (^^RP17.SCLK, Arg3)
                        }
                    }
                    Default
                    {
                        ADBG (Concatenate ("ERR!NRPN: ", ToHexString (Arg0)))
                    }

                }
            }

            Device (NVM1)
            {
                Name (_ADR, 0x00C1FFFF)  // _ADR: Address
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    NITV = NIT1 /* \NIT1 */
                    NPMV = NPM1 /* \NPM1 */
                    NPCV = NPC1 /* \NPC1 */
                    NL1V = NL11 /* \NL11 */
                    ND2V = ND21 /* \ND21 */
                    ND1V = ND11 /* \ND11 */
                    NLRV = NLR1 /* \NLR1 */
                    NLDV = NLD1 /* \NLD1 */
                    NEAV = NEA1 /* \NEA1 */
                    NEBV = NEB1 /* \NEB1 */
                    NECV = NEC1 /* \NEC1 */
                    NRAV = NRA1 /* \NRA1 */
                    NMBV = NMB1 /* \NMB1 */
                    NMVV = NMV1 /* \NMV1 */
                    NPBV = NPB1 /* \NPB1 */
                    NPVV = NPV1 /* \NPV1 */
                    NRPN = NRP1 /* \NRP1 */
                    NCRN = Zero
                    ARPC (NRPN, RefOf (PWRG), RefOf (RSTG), RefOf (SCLK))
                }

                Name (PRBI, Zero)
                Name (PRBD, Zero)
                Name (PCMD, Zero)
                Name (RSTG, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Name (PWRG, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Name (SCLK, Package (0x03)
                {
                    Zero, 
                    Zero, 
                    Zero
                })
                Name (NCRN, Zero)
                Name (NITV, Zero)
                Name (NPMV, Zero)
                Name (NPCV, Zero)
                Name (NL1V, Zero)
                Name (ND2V, Zero)
                Name (ND1V, Zero)
                Name (NLRV, Zero)
                Name (NLDV, Zero)
                Name (NEAV, Zero)
                Name (NEBV, Zero)
                Name (NECV, Zero)
                Name (NRAV, Zero)
                Name (NMBV, Zero)
                Name (NMVV, Zero)
                Name (NPBV, Zero)
                Name (NPVV, Zero)
                Name (NRPN, Zero)
                Name (MXIE, Zero)
                Name (ISD3, Zero)
                Method (RPON, 0, Serialized)
                {
                    If ((ISD3 == Zero))
                    {
                        Return (Zero)
                    }

                    ISD3 = Zero
                    ADBG (Concatenate ("RPONs: ", ToHexString (NRPN)))
                    PON (PWRG)
                    If ((DerefOf (SCLK [Zero]) != Zero))
                    {
                        PCRA (0xDC, 0x100C, ~DerefOf (SCLK [One]))
                        Sleep (0x10)
                    }

                    PON (RSTG)
                    RDCA (NCRN, 0x0420, 0xBFFFFFFF, Zero, One)
                    RDCA (NCRN, 0xE2, 0xFFFFFFFF, 0x08, One)
                    Sleep (0x10)
                    Local0 = Zero
                    While ((RDCA (NCRN, 0xE2, Zero, Zero, Zero) & 0x08))
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    RDCA (NCRN, 0x0420, 0xFFFFFFFF, 0x40000000, One)
                    Local0 = Zero
                    While (((RDCA (NCRN, 0x52, Zero, Zero, Zero) & 0x2000) == Zero))
                    {
                        If ((Local0 > 0x08))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    RDCA (NCRN, 0x0324, 0xFFFFFFF7, Zero, One)
                    Sleep (0x07D0)
                    NVD0 ()
                    ADBG (Concatenate ("RPONe: ", ToHexString (NRPN)))
                }

                Method (RPOF, 0, Serialized)
                {
                    If ((NVD3 () == Zero))
                    {
                        Return (Zero)
                    }

                    ADBG (Concatenate ("POFF NRPN: ", ToHexString (NRPN)))
                    RDCA (NCRN, 0xE2, 0xFFFFFFFF, 0x04, One)
                    Sleep (0x10)
                    Local0 = Zero
                    While ((RDCA (NCRN, 0xE2, Zero, Zero, Zero) & 0x04))
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    RDCA (NCRN, 0x0324, 0xFFFFFFFF, 0x08, One)
                    POFF (RSTG)
                    If ((DerefOf (SCLK [Zero]) != Zero))
                    {
                        PCRO (0xDC, 0x100C, DerefOf (SCLK [One]))
                        Sleep (0x10)
                    }

                    POFF (PWRG)
                    RDCA (NCRN, 0x50, 0xFFFFFFFF, 0x10, One)
                    RDCA (NCRN, 0x50, 0xFFFFFFEF, Zero, One)
                    ISD3 = 0x03
                }

                Method (NVD3, 0, Serialized)
                {
                    If ((NITV == Zero))
                    {
                        Return (Zero)
                    }

                    PCMD = RDCA (NCRN, 0x04, Zero, Zero, 0x02)
                    If ((NITV == One))
                    {
                        PRBI = 0x24
                        PRBD = RDCA (NCRN, 0x24, Zero, Zero, 0x02)
                    }
                    ElseIf ((NITV == 0x02))
                    {
                        PRBI = 0x10
                        PRBD = RDCA (NCRN, 0x10, Zero, Zero, 0x02)
                        OperationRegion (MCRC, SystemMemory, (GPCB () + 0x000B833C), 0x04)
                        Field (MCRC, AnyAcc, NoLock, Preserve)
                        {
                            SCSO,   8, 
                            Offset (0x02), 
                            TCSO,   8, 
                                ,   7, 
                            RE,     1
                        }

                        MXIE = RDCA (NCRN, TCSO, Zero, Zero, 0x02)
                    }

                    RDCA (NCRN, (NPMV + 0x04), 0xFFFFFFFC, 0x03, 0x03)
                    RDCA (NCRN, 0xA4, 0xFFFFFFFC, 0x03, One)
                    Return (One)
                }

                Method (NVD0, 0, Serialized)
                {
                    If ((NITV == Zero))
                    {
                        Return (Zero)
                    }

                    RDCA (NCRN, 0xA4, 0xFFFFFFFC, Zero, One)
                    RDCA (NCRN, (NPMV + 0x04), 0xFFFFFFFC, Zero, 0x03)
                    CNRS ()
                    If ((NITV == 0x02))
                    {
                        OperationRegion (MCRC, SystemMemory, (GPCB () + 0x000B833C), 0x04)
                        Field (MCRC, AnyAcc, NoLock, Preserve)
                        {
                            SCSO,   8, 
                            Offset (0x02), 
                            TCSO,   8, 
                                ,   7, 
                            RE,     1
                        }

                        RDCA (NCRN, TCSO, 0xFFFFFFFF, (MXIE & 0x80000000), 0x03)
                        ADBG ("NVD0:  MSIXe")
                    }
                    Else
                    {
                    }

                    Return (One)
                }

                Method (CNRS, 0, Serialized)
                {
                    Debug = "[ACPI RST] Restore Remapped Device and Hidden RP context |start"
                    ADBG (Concatenate ("CNRSs ", ToDecimalString (Timer)))
                    If ((NITV == Zero))
                    {
                        Return (Zero)
                    }

                    RDCA (NCRN, 0x10, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x14, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x18, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x1C, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x20, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x24, Zero, Zero, 0x03)
                    RDCA (NCRN, PRBI, Zero, PRBD, 0x03)
                    RDCA (NCRN, 0x04, 0xFFFFFFF8, PCMD, 0x03)
                    If ((NL1V != Zero))
                    {
                        RDCA (NCRN, (NL1V + 0x0C), 0xFFFFFF00, ND2V, 0x03)
                        RDCA (NCRN, (NL1V + 0x08), 0x0F, (ND1V & 0xFFFFFFF0), 0x03)
                        RDCA (NCRN, (NL1V + 0x08), 0xFFFFFFFF, ND1V, 0x03)
                    }

                    If ((NLRV != Zero))
                    {
                        RDCA (NCRN, (NLRV + 0x04), 0xFFFFFFFF, NLDV, 0x03)
                    }

                    RDCA (NCRN, (NPCV + 0x10), 0xFFFFFEBF, (NEAV & 0xFFFC), 0x03)
                    RDCA (NCRN, (NPCV + 0x28), 0xFFFFFBFF, NECV, 0x03)
                    RDCA (NCRN, (NPCV + 0x08), 0xFFFFFF1F, NEBV, 0x03)
                    RDCA (NCRN, 0x68, 0xFFFFFBFF, NRAV, One)
                    If (((NEAV & 0x40) == 0x40))
                    {
                        RDCA (NCRN, 0x50, 0xFFFFFFDF, 0x20, One)
                        ADBG (Concatenate ("CNRSw ", ToDecimalString (Timer)))
                        While (((RDCA (NCRN, 0x52, Zero, Zero, Zero) & 0x2000) == Zero))
                        {
                            Stall (0x0A)
                        }
                    }

                    ADBG (Concatenate ("CNRSx ", ToDecimalString (Timer)))
                    RDCA (NCRN, (NPCV + 0x10), 0xFFFFFFFC, (NEAV & 0x03), 0x03)
                    If ((NMVV != Zero))
                    {
                        RDCA (NCRN, NMBV, Zero, NMVV, 0x03)
                    }

                    If ((NPVV != Zero))
                    {
                        RDCA (NCRN, NPBV, Zero, NPVV, 0x03)
                    }

                    ADBG (Concatenate ("CNRSe ", ToDecimalString (Timer)))
                    Debug = "[ACPI RST] Restore Remapped Device and Hidden RP context |complete"
                }
            }

            Device (NVM2)
            {
                Name (_ADR, 0x00C2FFFF)  // _ADR: Address
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    NITV = NIT2 /* \NIT2 */
                    NPMV = NPM2 /* \NPM2 */
                    NPCV = NPC2 /* \NPC2 */
                    NL1V = NL12 /* \NL12 */
                    ND2V = ND22 /* \ND22 */
                    ND1V = ND12 /* \ND12 */
                    NLRV = NLR2 /* \NLR2 */
                    NLDV = NLD2 /* \NLD2 */
                    NEAV = NEA2 /* \NEA2 */
                    NEBV = NEB2 /* \NEB2 */
                    NECV = NEC2 /* \NEC2 */
                    NRAV = NRA2 /* \NRA2 */
                    NMBV = NMB2 /* \NMB2 */
                    NMVV = NMV2 /* \NMV2 */
                    NPBV = NPB2 /* \NPB2 */
                    NPVV = NPV2 /* \NPV2 */
                    NRPN = NRP2 /* \NRP2 */
                    NCRN = One
                    ARPC (NRPN, RefOf (PWRG), RefOf (RSTG), RefOf (SCLK))
                }

                Name (PRBI, Zero)
                Name (PRBD, Zero)
                Name (PCMD, Zero)
                Name (RSTG, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Name (PWRG, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Name (SCLK, Package (0x03)
                {
                    Zero, 
                    Zero, 
                    Zero
                })
                Name (NCRN, Zero)
                Name (NITV, Zero)
                Name (NPMV, Zero)
                Name (NPCV, Zero)
                Name (NL1V, Zero)
                Name (ND2V, Zero)
                Name (ND1V, Zero)
                Name (NLRV, Zero)
                Name (NLDV, Zero)
                Name (NEAV, Zero)
                Name (NEBV, Zero)
                Name (NECV, Zero)
                Name (NRAV, Zero)
                Name (NMBV, Zero)
                Name (NMVV, Zero)
                Name (NPBV, Zero)
                Name (NPVV, Zero)
                Name (NRPN, Zero)
                Name (MXIE, Zero)
                Name (ISD3, Zero)
                Method (RPON, 0, Serialized)
                {
                    If ((ISD3 == Zero))
                    {
                        Return (Zero)
                    }

                    ISD3 = Zero
                    ADBG (Concatenate ("RPONs: ", ToHexString (NRPN)))
                    PON (PWRG)
                    If ((DerefOf (SCLK [Zero]) != Zero))
                    {
                        PCRA (0xDC, 0x100C, ~DerefOf (SCLK [One]))
                        Sleep (0x10)
                    }

                    PON (RSTG)
                    RDCA (NCRN, 0x0420, 0xBFFFFFFF, Zero, One)
                    RDCA (NCRN, 0xE2, 0xFFFFFFFF, 0x08, One)
                    Sleep (0x10)
                    Local0 = Zero
                    While ((RDCA (NCRN, 0xE2, Zero, Zero, Zero) & 0x08))
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    RDCA (NCRN, 0x0420, 0xFFFFFFFF, 0x40000000, One)
                    Local0 = Zero
                    While (((RDCA (NCRN, 0x52, Zero, Zero, Zero) & 0x2000) == Zero))
                    {
                        If ((Local0 > 0x08))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    RDCA (NCRN, 0x0324, 0xFFFFFFF7, Zero, One)
                    Sleep (0x07D0)
                    NVD0 ()
                    ADBG (Concatenate ("RPONe: ", ToHexString (NRPN)))
                }

                Method (RPOF, 0, Serialized)
                {
                    If ((NVD3 () == Zero))
                    {
                        Return (Zero)
                    }

                    ADBG (Concatenate ("POFF NRPN: ", ToHexString (NRPN)))
                    RDCA (NCRN, 0xE2, 0xFFFFFFFF, 0x04, One)
                    Sleep (0x10)
                    Local0 = Zero
                    While ((RDCA (NCRN, 0xE2, Zero, Zero, Zero) & 0x04))
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    RDCA (NCRN, 0x0324, 0xFFFFFFFF, 0x08, One)
                    POFF (RSTG)
                    If ((DerefOf (SCLK [Zero]) != Zero))
                    {
                        PCRO (0xDC, 0x100C, DerefOf (SCLK [One]))
                        Sleep (0x10)
                    }

                    POFF (PWRG)
                    RDCA (NCRN, 0x50, 0xFFFFFFFF, 0x10, One)
                    RDCA (NCRN, 0x50, 0xFFFFFFEF, Zero, One)
                    ISD3 = 0x03
                }

                Method (NVD3, 0, Serialized)
                {
                    If ((NITV == Zero))
                    {
                        Return (Zero)
                    }

                    PCMD = RDCA (NCRN, 0x04, Zero, Zero, 0x02)
                    If ((NITV == One))
                    {
                        PRBI = 0x24
                        PRBD = RDCA (NCRN, 0x24, Zero, Zero, 0x02)
                    }
                    ElseIf ((NITV == 0x02))
                    {
                        PRBI = 0x10
                        PRBD = RDCA (NCRN, 0x10, Zero, Zero, 0x02)
                        OperationRegion (MCRC, SystemMemory, (GPCB () + 0x000B833C), 0x04)
                        Field (MCRC, AnyAcc, NoLock, Preserve)
                        {
                            SCSO,   8, 
                            Offset (0x02), 
                            TCSO,   8, 
                                ,   7, 
                            RE,     1
                        }

                        MXIE = RDCA (NCRN, TCSO, Zero, Zero, 0x02)
                    }

                    RDCA (NCRN, (NPMV + 0x04), 0xFFFFFFFC, 0x03, 0x03)
                    RDCA (NCRN, 0xA4, 0xFFFFFFFC, 0x03, One)
                    Return (One)
                }

                Method (NVD0, 0, Serialized)
                {
                    If ((NITV == Zero))
                    {
                        Return (Zero)
                    }

                    RDCA (NCRN, 0xA4, 0xFFFFFFFC, Zero, One)
                    RDCA (NCRN, (NPMV + 0x04), 0xFFFFFFFC, Zero, 0x03)
                    CNRS ()
                    If ((NITV == 0x02))
                    {
                        OperationRegion (MCRC, SystemMemory, (GPCB () + 0x000B833C), 0x04)
                        Field (MCRC, AnyAcc, NoLock, Preserve)
                        {
                            SCSO,   8, 
                            Offset (0x02), 
                            TCSO,   8, 
                                ,   7, 
                            RE,     1
                        }

                        RDCA (NCRN, TCSO, 0xFFFFFFFF, (MXIE & 0x80000000), 0x03)
                        ADBG ("NVD0:  MSIXe")
                    }
                    Else
                    {
                    }

                    Return (One)
                }

                Method (CNRS, 0, Serialized)
                {
                    Debug = "[ACPI RST] Restore Remapped Device and Hidden RP context |start"
                    ADBG (Concatenate ("CNRSs ", ToDecimalString (Timer)))
                    If ((NITV == Zero))
                    {
                        Return (Zero)
                    }

                    RDCA (NCRN, 0x10, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x14, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x18, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x1C, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x20, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x24, Zero, Zero, 0x03)
                    RDCA (NCRN, PRBI, Zero, PRBD, 0x03)
                    RDCA (NCRN, 0x04, 0xFFFFFFF8, PCMD, 0x03)
                    If ((NL1V != Zero))
                    {
                        RDCA (NCRN, (NL1V + 0x0C), 0xFFFFFF00, ND2V, 0x03)
                        RDCA (NCRN, (NL1V + 0x08), 0x0F, (ND1V & 0xFFFFFFF0), 0x03)
                        RDCA (NCRN, (NL1V + 0x08), 0xFFFFFFFF, ND1V, 0x03)
                    }

                    If ((NLRV != Zero))
                    {
                        RDCA (NCRN, (NLRV + 0x04), 0xFFFFFFFF, NLDV, 0x03)
                    }

                    RDCA (NCRN, (NPCV + 0x10), 0xFFFFFEBF, (NEAV & 0xFFFC), 0x03)
                    RDCA (NCRN, (NPCV + 0x28), 0xFFFFFBFF, NECV, 0x03)
                    RDCA (NCRN, (NPCV + 0x08), 0xFFFFFF1F, NEBV, 0x03)
                    RDCA (NCRN, 0x68, 0xFFFFFBFF, NRAV, One)
                    If (((NEAV & 0x40) == 0x40))
                    {
                        RDCA (NCRN, 0x50, 0xFFFFFFDF, 0x20, One)
                        ADBG (Concatenate ("CNRSw ", ToDecimalString (Timer)))
                        While (((RDCA (NCRN, 0x52, Zero, Zero, Zero) & 0x2000) == Zero))
                        {
                            Stall (0x0A)
                        }
                    }

                    ADBG (Concatenate ("CNRSx ", ToDecimalString (Timer)))
                    RDCA (NCRN, (NPCV + 0x10), 0xFFFFFFFC, (NEAV & 0x03), 0x03)
                    If ((NMVV != Zero))
                    {
                        RDCA (NCRN, NMBV, Zero, NMVV, 0x03)
                    }

                    If ((NPVV != Zero))
                    {
                        RDCA (NCRN, NPBV, Zero, NPVV, 0x03)
                    }

                    ADBG (Concatenate ("CNRSe ", ToDecimalString (Timer)))
                    Debug = "[ACPI RST] Restore Remapped Device and Hidden RP context |complete"
                }
            }

            Device (NVM3)
            {
                Name (_ADR, 0x00C3FFFF)  // _ADR: Address
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    NITV = NIT3 /* \NIT3 */
                    NPMV = NPM3 /* \NPM3 */
                    NPCV = NPC3 /* \NPC3 */
                    NL1V = NL13 /* \NL13 */
                    ND2V = ND23 /* \ND23 */
                    ND1V = ND13 /* \ND13 */
                    NLRV = NLR3 /* \NLR3 */
                    NLDV = NLD3 /* \NLD3 */
                    NEAV = NEA3 /* \NEA3 */
                    NEBV = NEB3 /* \NEB3 */
                    NECV = NEC3 /* \NEC3 */
                    NRAV = NRA3 /* \NRA3 */
                    NMBV = NMB3 /* \NMB3 */
                    NMVV = NMV3 /* \NMV3 */
                    NPBV = NPB3 /* \NPB3 */
                    NPVV = NPV3 /* \NPV3 */
                    NRPN = NRP3 /* \NRP3 */
                    NCRN = 0x02
                    ARPC (NRPN, RefOf (PWRG), RefOf (RSTG), RefOf (SCLK))
                }

                Name (PRBI, Zero)
                Name (PRBD, Zero)
                Name (PCMD, Zero)
                Name (RSTG, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Name (PWRG, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Name (SCLK, Package (0x03)
                {
                    Zero, 
                    Zero, 
                    Zero
                })
                Name (NCRN, Zero)
                Name (NITV, Zero)
                Name (NPMV, Zero)
                Name (NPCV, Zero)
                Name (NL1V, Zero)
                Name (ND2V, Zero)
                Name (ND1V, Zero)
                Name (NLRV, Zero)
                Name (NLDV, Zero)
                Name (NEAV, Zero)
                Name (NEBV, Zero)
                Name (NECV, Zero)
                Name (NRAV, Zero)
                Name (NMBV, Zero)
                Name (NMVV, Zero)
                Name (NPBV, Zero)
                Name (NPVV, Zero)
                Name (NRPN, Zero)
                Name (MXIE, Zero)
                Name (ISD3, Zero)
                Method (RPON, 0, Serialized)
                {
                    If ((ISD3 == Zero))
                    {
                        Return (Zero)
                    }

                    ISD3 = Zero
                    ADBG (Concatenate ("RPONs: ", ToHexString (NRPN)))
                    PON (PWRG)
                    If ((DerefOf (SCLK [Zero]) != Zero))
                    {
                        PCRA (0xDC, 0x100C, ~DerefOf (SCLK [One]))
                        Sleep (0x10)
                    }

                    PON (RSTG)
                    RDCA (NCRN, 0x0420, 0xBFFFFFFF, Zero, One)
                    RDCA (NCRN, 0xE2, 0xFFFFFFFF, 0x08, One)
                    Sleep (0x10)
                    Local0 = Zero
                    While ((RDCA (NCRN, 0xE2, Zero, Zero, Zero) & 0x08))
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    RDCA (NCRN, 0x0420, 0xFFFFFFFF, 0x40000000, One)
                    Local0 = Zero
                    While (((RDCA (NCRN, 0x52, Zero, Zero, Zero) & 0x2000) == Zero))
                    {
                        If ((Local0 > 0x08))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    RDCA (NCRN, 0x0324, 0xFFFFFFF7, Zero, One)
                    Sleep (0x07D0)
                    NVD0 ()
                    ADBG (Concatenate ("RPONe: ", ToHexString (NRPN)))
                }

                Method (RPOF, 0, Serialized)
                {
                    If ((NVD3 () == Zero))
                    {
                        Return (Zero)
                    }

                    ADBG (Concatenate ("POFF NRPN: ", ToHexString (NRPN)))
                    RDCA (NCRN, 0xE2, 0xFFFFFFFF, 0x04, One)
                    Sleep (0x10)
                    Local0 = Zero
                    While ((RDCA (NCRN, 0xE2, Zero, Zero, Zero) & 0x04))
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    RDCA (NCRN, 0x0324, 0xFFFFFFFF, 0x08, One)
                    POFF (RSTG)
                    If ((DerefOf (SCLK [Zero]) != Zero))
                    {
                        PCRO (0xDC, 0x100C, DerefOf (SCLK [One]))
                        Sleep (0x10)
                    }

                    POFF (PWRG)
                    RDCA (NCRN, 0x50, 0xFFFFFFFF, 0x10, One)
                    RDCA (NCRN, 0x50, 0xFFFFFFEF, Zero, One)
                    ISD3 = 0x03
                }

                Method (NVD3, 0, Serialized)
                {
                    If ((NITV == Zero))
                    {
                        Return (Zero)
                    }

                    PCMD = RDCA (NCRN, 0x04, Zero, Zero, 0x02)
                    If ((NITV == One))
                    {
                        PRBI = 0x24
                        PRBD = RDCA (NCRN, 0x24, Zero, Zero, 0x02)
                    }
                    ElseIf ((NITV == 0x02))
                    {
                        PRBI = 0x10
                        PRBD = RDCA (NCRN, 0x10, Zero, Zero, 0x02)
                        OperationRegion (MCRC, SystemMemory, (GPCB () + 0x000B833C), 0x04)
                        Field (MCRC, AnyAcc, NoLock, Preserve)
                        {
                            SCSO,   8, 
                            Offset (0x02), 
                            TCSO,   8, 
                                ,   7, 
                            RE,     1
                        }

                        MXIE = RDCA (NCRN, TCSO, Zero, Zero, 0x02)
                    }

                    RDCA (NCRN, (NPMV + 0x04), 0xFFFFFFFC, 0x03, 0x03)
                    RDCA (NCRN, 0xA4, 0xFFFFFFFC, 0x03, One)
                    Return (One)
                }

                Method (NVD0, 0, Serialized)
                {
                    If ((NITV == Zero))
                    {
                        Return (Zero)
                    }

                    RDCA (NCRN, 0xA4, 0xFFFFFFFC, Zero, One)
                    RDCA (NCRN, (NPMV + 0x04), 0xFFFFFFFC, Zero, 0x03)
                    CNRS ()
                    If ((NITV == 0x02))
                    {
                        OperationRegion (MCRC, SystemMemory, (GPCB () + 0x000B833C), 0x04)
                        Field (MCRC, AnyAcc, NoLock, Preserve)
                        {
                            SCSO,   8, 
                            Offset (0x02), 
                            TCSO,   8, 
                                ,   7, 
                            RE,     1
                        }

                        RDCA (NCRN, TCSO, 0xFFFFFFFF, (MXIE & 0x80000000), 0x03)
                        ADBG ("NVD0:  MSIXe")
                    }
                    Else
                    {
                    }

                    Return (One)
                }

                Method (CNRS, 0, Serialized)
                {
                    Debug = "[ACPI RST] Restore Remapped Device and Hidden RP context |start"
                    ADBG (Concatenate ("CNRSs ", ToDecimalString (Timer)))
                    If ((NITV == Zero))
                    {
                        Return (Zero)
                    }

                    RDCA (NCRN, 0x10, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x14, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x18, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x1C, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x20, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x24, Zero, Zero, 0x03)
                    RDCA (NCRN, PRBI, Zero, PRBD, 0x03)
                    RDCA (NCRN, 0x04, 0xFFFFFFF8, PCMD, 0x03)
                    If ((NL1V != Zero))
                    {
                        RDCA (NCRN, (NL1V + 0x0C), 0xFFFFFF00, ND2V, 0x03)
                        RDCA (NCRN, (NL1V + 0x08), 0x0F, (ND1V & 0xFFFFFFF0), 0x03)
                        RDCA (NCRN, (NL1V + 0x08), 0xFFFFFFFF, ND1V, 0x03)
                    }

                    If ((NLRV != Zero))
                    {
                        RDCA (NCRN, (NLRV + 0x04), 0xFFFFFFFF, NLDV, 0x03)
                    }

                    RDCA (NCRN, (NPCV + 0x10), 0xFFFFFEBF, (NEAV & 0xFFFC), 0x03)
                    RDCA (NCRN, (NPCV + 0x28), 0xFFFFFBFF, NECV, 0x03)
                    RDCA (NCRN, (NPCV + 0x08), 0xFFFFFF1F, NEBV, 0x03)
                    RDCA (NCRN, 0x68, 0xFFFFFBFF, NRAV, One)
                    If (((NEAV & 0x40) == 0x40))
                    {
                        RDCA (NCRN, 0x50, 0xFFFFFFDF, 0x20, One)
                        ADBG (Concatenate ("CNRSw ", ToDecimalString (Timer)))
                        While (((RDCA (NCRN, 0x52, Zero, Zero, Zero) & 0x2000) == Zero))
                        {
                            Stall (0x0A)
                        }
                    }

                    ADBG (Concatenate ("CNRSx ", ToDecimalString (Timer)))
                    RDCA (NCRN, (NPCV + 0x10), 0xFFFFFFFC, (NEAV & 0x03), 0x03)
                    If ((NMVV != Zero))
                    {
                        RDCA (NCRN, NMBV, Zero, NMVV, 0x03)
                    }

                    If ((NPVV != Zero))
                    {
                        RDCA (NCRN, NPBV, Zero, NPVV, 0x03)
                    }

                    ADBG (Concatenate ("CNRSe ", ToDecimalString (Timer)))
                    Debug = "[ACPI RST] Restore Remapped Device and Hidden RP context |complete"
                }
            }

            Method (PSTA, 1, Serialized)
            {
                If ((DerefOf (Arg0 [Zero]) == Zero))
                {
                    Return (One)
                }

                If ((DerefOf (Arg0 [Zero]) == One))
                {
                    If ((GGOV (DerefOf (Arg0 [0x02])) == DerefOf (Arg0 [0x03]
                        )))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                If ((DerefOf (Arg0 [Zero]) == 0x02))
                {
                    ADBG ("IO expander access attempted")
                    Return (Zero)
                }

                Return (Zero)
            }

            Method (PON, 1, Serialized)
            {
                If ((DerefOf (Arg0 [Zero]) != Zero))
                {
                    If ((DerefOf (Arg0 [Zero]) == One))
                    {
                        ADBG (Concatenate ("PON GPIO=", ToHexString (DerefOf (Arg0 [0x02]))))
                        SGOV (DerefOf (Arg0 [0x02]), DerefOf (Arg0 [0x03]))
                    }

                    If ((DerefOf (Arg0 [Zero]) == 0x02))
                    {
                        ADBG ("IO expander access attempted")
                    }
                }
            }

            Method (POFF, 1, Serialized)
            {
                If ((DerefOf (Arg0 [Zero]) != Zero))
                {
                    If ((DerefOf (Arg0 [Zero]) == One))
                    {
                        ADBG (Concatenate ("POFF GPIO=", ToHexString (DerefOf (Arg0 [0x02]))))
                        SGOV (DerefOf (Arg0 [0x02]), (DerefOf (Arg0 [0x03]) ^ 
                            One))
                    }

                    If ((DerefOf (Arg0 [Zero]) == 0x02))
                    {
                        ADBG ("IO expander access attempted")
                    }
                }
            }
        }

        Device (CIO2)
        {
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((CIOE == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Name (_HID, "INT343E")  // _HID: Hardware ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (CBUF, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, _Y15)
                    {
                        0x00000010,
                    }
                    Memory32Fixed (ReadWrite,
                        0xFE400000,         // Address Base
                        0x00010000,         // Address Length
                        )
                })
                CreateDWordField (CBUF, \_SB.PCI0.CIO2._CRS._Y15._INT, CIOV)  // _INT: Interrupts
                CIOV = CIOI /* \CIOI */
                Return (CBUF) /* \_SB_.PCI0.CIO2._CRS.CBUF */
            }
        }

        Device (TERM)
        {
            Name (_HID, "INT343D")  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0xFE03C000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, _Y16)
                    {
                        0x00000012,
                    }
                })
                CreateDWordField (RBUF, \_SB.PCI0.TERM._CRS._Y16._INT, IRQN)  // _INT: Interrupts
                IRQN = TIRQ /* \TIRQ */
                Return (RBUF) /* \_SB_.PCI0.TERM._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TAEN == Zero))
                {
                    Return (Zero)
                }

                If ((TIRQ == Zero))
                {
                    Return (Zero)
                }

                Return (0x0F)
            }
        }
    }

    Scope (_SB)
    {
        Name (HDAA, Zero)
        Name (DISA, One)
        Method (DION, 0, NotSerialized)
        {
            VMMH (One, One)
        }

        Method (DIOF, 0, NotSerialized)
        {
            VMMH (One, Zero)
        }

        Method (VMMH, 2, Serialized)
        {
            If ((!CondRefOf (\_SB.VMON) || !CondRefOf (\_SB.VMOF)))
            {
                Return (Zero)
            }

            Switch (ToInteger (Arg0))
            {
                Case (Zero)
                {
                    HDAA = Arg1
                }
                Case (One)
                {
                    DISA = Arg1
                }
                Default
                {
                    Return (Zero)
                }

            }

            If ((!DISA && !HDAA))
            {
                XSQD = Zero
                SLS0 = One
                VMON ()
            }
            Else
            {
                XSQD = One
                SLS0 = Zero
                VMOF ()
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Method (LPD3, 1, Serialized)
        {
            OperationRegion (ICB1, SystemMemory, (Arg0 + 0x84), 0x04)
            Field (ICB1, DWordAcc, NoLock, Preserve)
            {
                PMEC,   32
            }

            PMEC = 0x03
            TEMP = PMEC /* \_SB_.PCI0.LPD3.PMEC */
        }

        Method (LPD0, 1, Serialized)
        {
            OperationRegion (ICB1, SystemMemory, (Arg0 + 0x84), 0x04)
            Field (ICB1, DWordAcc, NoLock, Preserve)
            {
                PMEC,   32
            }

            PMEC &= 0xFFFF7FFC
            TEMP = PMEC /* \_SB_.PCI0.LPD0.PMEC */
        }

        Method (LHRV, 1, Serialized)
        {
            OperationRegion (ICB1, SystemMemory, (Arg0 + 0x08), 0x04)
            Field (ICB1, DWordAcc, NoLock, Preserve)
            {
                HRV,    8
            }

            Return (HRV) /* \_SB_.PCI0.LHRV.HRV_ */
        }

        Method (GETD, 1, Serialized)
        {
            OperationRegion (ICB1, SystemMemory, (Arg0 + 0x84), 0x04)
            Field (ICB1, DWordAcc, NoLock, Preserve)
            {
                PMEC,   32
            }

            Return ((PMEC & 0x03))
        }

        Method (LCRS, 3, Serialized)
        {
            Name (RBUF, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y17)
                Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, _Y18)
                {
                    0x00000014,
                }
            })
            CreateDWordField (RBUF, \_SB.PCI0.LCRS._Y17._BAS, BVAL)  // _BAS: Base Address
            CreateDWordField (RBUF, \_SB.PCI0.LCRS._Y17._LEN, BLEN)  // _LEN: Length
            CreateDWordField (RBUF, \_SB.PCI0.LCRS._Y18._INT, IRQN)  // _INT: Interrupts
            BVAL = Arg1
            IRQN = Arg2
            If ((Arg0 == 0x04))
            {
                BLEN = 0x08
            }

            Return (RBUF) /* \_SB_.PCI0.LCRS.RBUF */
        }

        Method (LSTA, 1, Serialized)
        {
            If (((Arg0 == Zero) || (Arg0 == 0x03)))
            {
                Return (Zero)
            }

            If ((OSYS < 0x07DC))
            {
                Return (Zero)
            }

            Return (0x0F)
        }

        Method (GIRQ, 1, Serialized)
        {
            Return ((0x18 + (Arg0 % 0x60)))
        }
    }

    Scope (_SB.PCI0)
    {
        Device (SIRC)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_STA, 0x03)  // _STA: Status
            Name (_UID, 0x05)  // _UID: Unique ID
            Method (ADDB, 4, Serialized)
            {
                Name (BUFF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00001000,         // Address Length
                        _Y19)
                })
                CreateDWordField (BUFF, \_SB.PCI0.SIRC.ADDB._Y19._BAS, ADDR)  // _BAS: Base Address
                CreateDWordField (BUFF, \_SB.PCI0.SIRC.ADDB._Y19._LEN, LENG)  // _LEN: Length
                Local0 = Buffer (0x02)
                    {
                         0x79, 0x00                                       // y.
                    }
                If ((((Arg0 == One) || (Arg0 == 0x03)) || (Arg0 == 0x04)))
                {
                    ADDR = Arg2
                    ConcatenateResTemplate (Local0, BUFF, Local1)
                    Local0 = Local1
                }

                If ((Arg0 == 0x03))
                {
                    ADDR = Arg1
                    ConcatenateResTemplate (Local0, BUFF, Local1)
                    Local0 = Local1
                }

                If ((Arg0 == 0x04))
                {
                    ADDR = (0x08 + Arg1)
                    LENG = 0x0FF8
                    ConcatenateResTemplate (Local0, BUFF, Local1)
                    Local0 = Local1
                }

                If (((Arg0 == Zero) || (Arg0 == 0x02)))
                {
                    ADDR = ((0x2000 * Arg3) + 0xFE020000)
                    LENG = 0x2000
                    ConcatenateResTemplate (Local0, BUFF, Local1)
                    Local0 = Local1
                }

                Return (Local0)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Local0 = Buffer (0x02)
                    {
                         0x79, 0x00                                       // y.
                    }
                ConcatenateResTemplate (Local0, ADDB (SMD0, SB00, SB10, Zero), Local1)
                Local0 = Local1
                ConcatenateResTemplate (Local0, ADDB (SMD1, SB01, SB11, One), Local1)
                Local0 = Local1
                ConcatenateResTemplate (Local0, ADDB (SMD2, SB02, SB12, 0x02), Local1)
                Local0 = Local1
                ConcatenateResTemplate (Local0, ADDB (SMD3, SB03, SB13, 0x03), Local1)
                Local0 = Local1
                ConcatenateResTemplate (Local0, ADDB (SMD4, SB04, SB14, 0x04), Local1)
                Local0 = Local1
                ConcatenateResTemplate (Local0, ADDB (SMD5, SB05, SB15, 0x05), Local1)
                Local0 = Local1
                ConcatenateResTemplate (Local0, ADDB (SMD6, SB06, SB16, 0x06), Local1)
                Local0 = Local1
                ConcatenateResTemplate (Local0, ADDB (SMD7, SB07, SB17, 0x07), Local1)
                Local0 = Local1
                ConcatenateResTemplate (Local0, ADDB (SMD8, SB08, SB18, 0x08), Local1)
                Local0 = Local1
                ConcatenateResTemplate (Local0, ADDB (SMD9, SB09, SB19, 0x09), Local1)
                Local0 = Local1
                ConcatenateResTemplate (Local0, ADDB (SMDA, SB0A, SB1A, 0x0A), Local1)
                Local0 = Local1
                If ((^^GPI0._STA () == Zero))
                {
                    ConcatenateResTemplate (Local0, ^^GPI0._CRS (), Local1)
                    Local0 = Local1
                }

                Return (Local0)
            }
        }

        Device (GPI0)
        {
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                If ((PCHV () == SPTH))
                {
                    If ((PCHG == 0x02))
                    {
                        Return ("INT3451")
                    }

                    Return ("INT345D")
                }

                Return ("INT344B")
            }

            Name (LINK, "\\_SB.PCI0.GPI0")
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00010000,         // Address Length
                        _Y1A)
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00010000,         // Address Length
                        _Y1B)
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00010000,         // Address Length
                        _Y1D)
                    Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, _Y1C)
                    {
                        0x0000000E,
                    }
                })
                CreateDWordField (RBUF, \_SB.PCI0.GPI0._CRS._Y1A._BAS, COM0)  // _BAS: Base Address
                CreateDWordField (RBUF, \_SB.PCI0.GPI0._CRS._Y1B._BAS, COM1)  // _BAS: Base Address
                CreateDWordField (RBUF, \_SB.PCI0.GPI0._CRS._Y1C._INT, IRQN)  // _INT: Interrupts
                COM0 = (SBRG + 0x00AF0000)
                COM1 = (SBRG + 0x00AE0000)
                CreateDWordField (RBUF, \_SB.PCI0.GPI0._CRS._Y1D._BAS, COM3)  // _BAS: Base Address
                COM3 = (SBRG + 0x00AC0000)
                IRQN = SGIR /* \SGIR */
                Return (RBUF) /* \_SB_.PCI0.GPI0._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((SBRG == Zero))
                {
                    Return (Zero)
                }

                If ((GPEN == Zero))
                {
                    Return (Zero)
                }

                Return (0x0F)
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (I2C0)
        {
            Name (LINK, "\\_SB.PCI0.I2C0")
            Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
            {
                Return (GETD (SB10))
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                LPD0 (SB10)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                LPD3 (SB10)
            }

            If ((SMD0 != 0x02))
            {
                Name (_HID, "INT3442")  // _HID: Hardware ID
                Method (_HRV, 0, NotSerialized)  // _HRV: Hardware Revision
                {
                    Return (LHRV (SB10))
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (LCRS (SMD0, SB00, SIR0))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (LSTA (SMD0))
                }
            }

            If ((SMD0 == 0x02))
            {
                Name (_ADR, 0x00150000)  // _ADR: Address
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (I2C1)
        {
            Name (LINK, "\\_SB.PCI0.I2C1")
            Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
            {
                Return (GETD (SB11))
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                LPD0 (SB11)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                LPD3 (SB11)
            }

            If ((SMD1 != 0x02))
            {
                Name (_HID, "INT3443")  // _HID: Hardware ID
                Method (_HRV, 0, NotSerialized)  // _HRV: Hardware Revision
                {
                    Return (LHRV (SB11))
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (LCRS (SMD1, SB01, SIR1))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (LSTA (SMD1))
                }
            }

            If ((SMD1 == 0x02))
            {
                Name (_ADR, 0x00150001)  // _ADR: Address
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (I2C2)
        {
            Name (LINK, "\\_SB.PCI0.I2C2")
            Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
            {
                Return (GETD (SB12))
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                LPD0 (SB12)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                LPD3 (SB12)
            }

            If ((SMD2 != 0x02))
            {
                Name (_HID, "INT3444")  // _HID: Hardware ID
                Method (_HRV, 0, NotSerialized)  // _HRV: Hardware Revision
                {
                    Return (LHRV (SB12))
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (LCRS (SMD2, SB02, SIR2))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (LSTA (SMD2))
                }
            }

            If ((SMD2 == 0x02))
            {
                Name (_ADR, 0x00150002)  // _ADR: Address
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (I2C3)
        {
            Name (LINK, "\\_SB.PCI0.I2C3")
            Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
            {
                Return (GETD (SB13))
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                LPD0 (SB13)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                LPD3 (SB13)
            }

            If ((SMD3 != 0x02))
            {
                Name (_HID, "INT3445")  // _HID: Hardware ID
                Method (_HRV, 0, NotSerialized)  // _HRV: Hardware Revision
                {
                    Return (LHRV (SB13))
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (LCRS (SMD3, SB03, SIR3))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (LSTA (SMD3))
                }
            }

            If ((SMD3 == 0x02))
            {
                Name (_ADR, 0x00150003)  // _ADR: Address
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (I2C4)
        {
            Name (LINK, "\\_SB.PCI0.I2C4")
            Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
            {
                Return (GETD (SB14))
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                LPD0 (SB14)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                LPD3 (SB14)
            }

            If ((SMD4 != 0x02))
            {
                Name (_HID, "INT3446")  // _HID: Hardware ID
                Method (_HRV, 0, NotSerialized)  // _HRV: Hardware Revision
                {
                    Return (LHRV (SB14))
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (LCRS (SMD4, SB04, SIR4))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (LSTA (SMD4))
                }
            }

            If ((SMD4 == 0x02))
            {
                Name (_ADR, 0x00190002)  // _ADR: Address
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (I2C5)
        {
            Name (LINK, "\\_SB.PCI0.I2C5")
            Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
            {
                Return (GETD (SB15))
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                LPD0 (SB15)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                LPD3 (SB15)
            }

            If ((SMD5 != 0x02))
            {
                Name (_HID, "INT3447")  // _HID: Hardware ID
                Method (_HRV, 0, NotSerialized)  // _HRV: Hardware Revision
                {
                    Return (LHRV (SB15))
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (LCRS (SMD5, SB05, SIR5))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (LSTA (SMD5))
                }
            }

            If ((SMD5 == 0x02))
            {
                Name (_ADR, 0x00190001)  // _ADR: Address
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (SPI0)
        {
            Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
            {
                Return (GETD (SB16))
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                LPD0 (SB16)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                LPD3 (SB16)
            }

            If ((SMD6 != 0x02))
            {
                Name (_HID, "INT3440")  // _HID: Hardware ID
                Method (_HRV, 0, NotSerialized)  // _HRV: Hardware Revision
                {
                    Return (LHRV (SB16))
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (LCRS (SMD6, SB06, SIR6))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (LSTA (SMD6))
                }
            }

            If ((SMD6 == 0x02))
            {
                Name (_ADR, 0x001E0002)  // _ADR: Address
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (SPI1)
        {
            Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
            {
                Return (GETD (SB17))
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                LPD0 (SB17)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                LPD3 (SB17)
            }

            If ((SMD7 != 0x02))
            {
                Name (_HID, "INT3441")  // _HID: Hardware ID
                Method (_HRV, 0, NotSerialized)  // _HRV: Hardware Revision
                {
                    Return (LHRV (SB17))
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (LCRS (SMD7, SB07, SIR7))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (LSTA (SMD7))
                }
            }

            If ((SMD7 == 0x02))
            {
                Name (_ADR, 0x001E0003)  // _ADR: Address
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (UA00)
        {
            If ((SMD8 != 0x02))
            {
                Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                {
                    If ((SMD8 == 0x04))
                    {
                        Return (0x0105D041)
                    }
                    Else
                    {
                        Return ("INT3448")
                    }
                }

                Name (_UID, "SerialIoUart0")  // _UID: Unique ID
                Name (_DDN, "SerialIoUart0")  // _DDN: DOS Device Name
                Method (_HRV, 0, NotSerialized)  // _HRV: Hardware Revision
                {
                    Return (LHRV (SB18))
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (LCRS (SMD8, SB08, SIR8))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (LSTA (SMD8))
                }
            }

            If ((SMD8 == 0x02))
            {
                Name (_ADR, 0x001E0000)  // _ADR: Address
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            If (One)
            {
                Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                {
                    Return (GETD (SB18))
                }

                Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                {
                    LPD0 (SB18)
                }

                Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                {
                    LPD3 (SB18)
                }
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (UA01)
        {
            If ((SMD9 != 0x02))
            {
                Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                {
                    If ((SMD9 == 0x04))
                    {
                        Return (0x0105D041)
                    }
                    Else
                    {
                        Return ("INT3449")
                    }
                }

                Name (_UID, "SerialIoUart1")  // _UID: Unique ID
                Name (_DDN, "SerialIoUart1")  // _DDN: DOS Device Name
                Method (_HRV, 0, NotSerialized)  // _HRV: Hardware Revision
                {
                    Return (LHRV (SB19))
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (LCRS (SMD9, SB09, SIR9))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (LSTA (SMD9))
                }
            }

            If ((SMD9 == 0x02))
            {
                Name (_ADR, 0x001E0001)  // _ADR: Address
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            If ((SMD9 != 0x04))
            {
                Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                {
                    Return (GETD (SB19))
                }

                Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                {
                    LPD0 (SB19)
                }

                Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                {
                    LPD3 (SB19)
                }
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (UA02)
        {
            If ((SMDA != 0x02))
            {
                Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                {
                    If ((SMDA == 0x04))
                    {
                        Return (0x0105D041)
                    }
                    Else
                    {
                        Return ("INT344A")
                    }
                }

                Name (_UID, "SerialIoUart2")  // _UID: Unique ID
                Name (_DDN, "SerialIoUart2")  // _DDN: DOS Device Name
                Method (_HRV, 0, NotSerialized)  // _HRV: Hardware Revision
                {
                    Return (LHRV (SB1A))
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (LCRS (SMDA, SB0A, SIRA))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (LSTA (SMDA))
                }
            }

            If ((SMDA == 0x02))
            {
                Name (_ADR, 0x00190000)  // _ADR: Address
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            If ((SMDA != 0x04))
            {
                Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                {
                    Return (GETD (SB1A))
                }

                Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                {
                    LPD0 (SB1A)
                }

                Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                {
                    LPD3 (SB1A)
                }
            }
        }
    }

    If ((PCHV () == SPTL))
    {
        Scope (_SB.PCI0)
        {
            Device (PEMC)
            {
                Name (_ADR, 0x001E0004)  // _ADR: Address
                OperationRegion (SCSR, PCI_Config, Zero, 0x0100)
                Field (SCSR, WordAcc, NoLock, Preserve)
                {
                    Offset (0x84), 
                    PSTA,   32, 
                    Offset (0xA2), 
                        ,   2, 
                    PGEN,   1
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    PGEN = Zero
                    PCRA (0xC0, 0x0600, 0x7FFFFFBA)
                    Sleep (0x02)
                    PCRO (0xC0, 0x0600, 0x80000045)
                    PSTA &= 0xFFFFFFFC
                    TEMP = PSTA /* \_SB_.PCI0.PEMC.PSTA */
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    PGEN = One
                    PSTA |= 0x03
                    TEMP = PSTA /* \_SB_.PCI0.PEMC.PSTA */
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    ADBG (Concatenate ("EMH4=", ToDecimalString (EMH4)))
                    If ((Arg0 == ToUUID ("f6c13ea5-65cd-461f-ab7a-29f7e8d5bd61") /* Unknown UUID */))
                    {
                        If ((Arg1 >= Zero))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    If ((EMH4 == One))
                                    {
                                        Return (Buffer (0x02)
                                        {
                                             0x61, 0x02                                       // a.
                                        })
                                    }

                                    Return (Buffer (0x02)
                                    {
                                         0x21, 0x02                                       // !.
                                    })
                                }
                                Case (0x05)
                                {
                                    Return (Buffer (One)
                                    {
                                         0x03                                             // .
                                    })
                                }
                                Case (0x06)
                                {
                                    Return (Buffer (One)
                                    {
                                         0x05                                             // .
                                    })
                                }
                                Case (0x09)
                                {
                                    Switch (EMDS)
                                    {
                                        Case (Zero)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x00                                             // .
                                            })
                                        }
                                        Case (One)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x01                                             // .
                                            })
                                        }
                                        Case (0x04)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x04                                             // .
                                            })
                                        }

                                    }
                                }

                            }
                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Device (CARD)
                {
                    Name (_ADR, 0x08)  // _ADR: Address
                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (Zero)
                    }
                }
            }

            Device (PSDC)
            {
                Name (_ADR, 0x001E0006)  // _ADR: Address
                Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
                OperationRegion (SCSR, PCI_Config, Zero, 0x0100)
                Field (SCSR, WordAcc, NoLock, Preserve)
                {
                    Offset (0x84), 
                    PSTA,   32, 
                    Offset (0xA2), 
                        ,   2, 
                    PGEN,   1
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    PGEN = Zero
                    PCRA (0xC0, 0x0600, 0xFFFFFE7A)
                    Sleep (0x02)
                    PCRO (0xC0, 0x0600, 0x0185)
                    PSTA &= 0xFFFFFFFC
                    TEMP = PSTA /* \_SB_.PCI0.PSDC.PSTA */
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    PGEN = One
                    PSTA |= 0x03
                    TEMP = PSTA /* \_SB_.PCI0.PSDC.PSTA */
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    If ((Arg0 == ToUUID ("f6c13ea5-65cd-461f-ab7a-29f7e8d5bd61") /* Unknown UUID */))
                    {
                        If ((Arg1 >= Zero))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Return (Buffer (One)
                                    {
                                         0x19                                             // .
                                    })
                                }
                                Case (0x03)
                                {
                                    Sleep (0x64)
                                    Return (Buffer (One)
                                    {
                                         0x00                                             // .
                                    })
                                }
                                Case (0x04)
                                {
                                    Sleep (0x64)
                                    Return (Buffer (One)
                                    {
                                         0x00                                             // .
                                    })
                                }

                            }
                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (ISHD)
        {
            Name (_ADR, 0x00130000)  // _ADR: Address
            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                If (CondRefOf (HIWC))
                {
                    If (HIWC (Arg0))
                    {
                        If (CondRefOf (HIDW))
                        {
                            Return (HIDW (Arg0, Arg1, Arg2, Arg3))
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (HECI)
        {
            Name (_ADR, 0x00160000)  // _ADR: Address
            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                If (CondRefOf (HIWC))
                {
                    If (HIWC (Arg0))
                    {
                        If (CondRefOf (HIDW))
                        {
                            Return (HIDW (Arg0, Arg1, Arg2, Arg3))
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }

    Scope (_SB.PCI0.LPCB)
    {
        Device (FWHD)
        {
            Name (_HID, EisaId ("INT0800") /* Intel 82802 Firmware Hub Device */)  // _HID: Hardware ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                Memory32Fixed (ReadOnly,
                    0xFF000000,         // Address Base
                    0x01000000,         // Address Length
                    )
            })
        }

        Device (HPET)
        {
            Name (_HID, EisaId ("PNP0103") /* HPET System Timer */)  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Name (BUF0, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0xFED00000,         // Address Base
                    0x00000400,         // Address Length
                    _Y1E)
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (HPTE)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                If (HPTE)
                {
                    CreateDWordField (BUF0, \_SB.PCI0.LPCB.HPET._Y1E._BAS, HPT0)  // _BAS: Base Address
                    HPT0 = HPTB /* \HPTB */
                }

                Return (BUF0) /* \_SB_.PCI0.LPCB.HPET.BUF0 */
            }
        }

        Device (IPIC)
        {
            Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x0020,             // Range Minimum
                    0x0020,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x0024,             // Range Minimum
                    0x0024,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x0028,             // Range Minimum
                    0x0028,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x002C,             // Range Minimum
                    0x002C,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x0030,             // Range Minimum
                    0x0030,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x0034,             // Range Minimum
                    0x0034,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x0038,             // Range Minimum
                    0x0038,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x003C,             // Range Minimum
                    0x003C,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x00A0,             // Range Minimum
                    0x00A0,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x00A4,             // Range Minimum
                    0x00A4,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x00A8,             // Range Minimum
                    0x00A8,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x00AC,             // Range Minimum
                    0x00AC,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x00B0,             // Range Minimum
                    0x00B0,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x00B4,             // Range Minimum
                    0x00B4,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x00B8,             // Range Minimum
                    0x00B8,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x00BC,             // Range Minimum
                    0x00BC,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x04D0,             // Range Minimum
                    0x04D0,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IRQNoFlags ()
                    {2}
            })
        }

        Device (MATH)
        {
            Name (_HID, EisaId ("PNP0C04") /* x87-compatible Floating Point Processing Unit */)  // _HID: Hardware ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x00F0,             // Range Minimum
                    0x00F0,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IRQNoFlags ()
                    {13}
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((PCHV () == SPTH))
                {
                    Return (0x1F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (LDRC)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x002E,             // Range Minimum
                    0x002E,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x004E,             // Range Minimum
                    0x004E,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x0061,             // Range Minimum
                    0x0061,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0063,             // Range Minimum
                    0x0063,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0065,             // Range Minimum
                    0x0065,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0067,             // Range Minimum
                    0x0067,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0070,             // Range Minimum
                    0x0070,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0080,             // Range Minimum
                    0x0080,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0092,             // Range Minimum
                    0x0092,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x00B2,             // Range Minimum
                    0x00B2,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x0680,             // Range Minimum
                    0x0680,             // Range Maximum
                    0x01,               // Alignment
                    0x20,               // Length
                    )
                IO (Decode16,
                    0xFFFF,             // Range Minimum
                    0xFFFF,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0xFFFF,             // Range Minimum
                    0xFFFF,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0xFFFF,             // Range Minimum
                    0xFFFF,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x1800,             // Range Minimum
                    0x1800,             // Range Maximum
                    0x01,               // Alignment
                    0xFF,               // Length
                    )
                IO (Decode16,
                    0x164E,             // Range Minimum
                    0x164E,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
            })
        }

        Device (LDR2)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, "LPC_DEV")  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x0800,             // Range Minimum
                    0x0800,             // Range Maximum
                    0x01,               // Alignment
                    0x80,               // Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((PCHV () == SPTH))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (RTC)
        {
            Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x0070,             // Range Minimum
                    0x0070,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                IRQNoFlags ()
                    {8}
            })
        }

        Device (TIMR)
        {
            Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x0040,             // Range Minimum
                    0x0040,             // Range Maximum
                    0x01,               // Alignment
                    0x04,               // Length
                    )
                IO (Decode16,
                    0x0050,             // Range Minimum
                    0x0050,             // Range Maximum
                    0x10,               // Alignment
                    0x04,               // Length
                    )
                IRQNoFlags ()
                    {0}
            })
        }

        Device (CWDT)
        {
            Name (_HID, EisaId ("INT3F0D") /* ACPI Motherboard Resources */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _CID: Compatible ID
            Name (BUF0, ResourceTemplate ()
            {
                IO (Decode16,
                    0x1854,             // Range Minimum
                    0x1854,             // Range Maximum
                    0x04,               // Alignment
                    0x04,               // Length
                    )
            })
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                Return (0x0F)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Return (BUF0) /* \_SB_.PCI0.LPCB.CWDT.BUF0 */
            }
        }
    }

    Scope (_SB)
    {
        Device (_SSH)
        {
            Name (_HID, "MSHW0084")  // _HID: Hardware ID
            Name (SULS, Zero)
            Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }

            Name (_DEP, Package (0x02)  // _DEP: Dependencies
            {
                ^PCI0.UA00, 
                PEPD
            })
            Name (SBUF, ResourceTemplate ()
            {
                UartSerialBusV2 (0x00000000, DataBitsEight, StopBitsOne,
                    0x00, LittleEndian, ParityTypeNone, FlowControlNone,
                    0x0020, 0x0020, "\\_SB.PCI0.UA00",
                    0x00, ResourceConsumer, _Y1F, Exclusive,
                    )
                GpioInt (Edge, ActiveHigh, SharedAndWake, PullNone, 0x0000,
                    "\\_SB.PCI0.GPI0", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x003E
                    }
                GpioIo (Shared, PullNone, 0x0000, 0x0000, IoRestrictionInputOnly,
                    "\\_SB.PCI0.GPI0", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x003E
                    }
            })
            CreateDWordField (SBUF, \_SB._SSH._Y1F._SPE, BAUD)  // _SPE: Speed
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If ((SULS == Zero))
                {
                    BAUD = PSBR /* \PSBR */
                }
                Else
                {
                    BAUD = 0x002DC6C0
                }
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (SBUF) /* \_SB_._SSH.SBUF */
            }
        }
    }

    Scope (_SB)
    {
        Device (_SAN)
        {
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                _SSH
            })
            Name (_HID, "MSHW0091")  // _HID: Hardware ID
            Name (DVER, Zero)
            Name (AVBL, Zero)
            Name (RQBF, Buffer (0xFF)
            {
                /* 0000 */  0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00,  // ........
                /* 0008 */  0x00, 0x00                                       // ..
            })
            CreateByteField (RQBF, Zero, RSTS)
            CreateByteField (RQBF, One, RTL)
            CreateByteField (RQBF, 0x02, RCV)
            CreateByteField (RQBF, 0x03, RTC)
            CreateByteField (RQBF, 0x04, RTID)
            CreateByteField (RQBF, 0x05, RIID)
            CreateByteField (RQBF, 0x06, RSNC)
            CreateByteField (RQBF, 0x07, RCID)
            CreateWordField (RQBF, 0x08, RCDL)
            CreateField (RQBF, 0x50, 0x07A8, RPLD)
            CreateByteField (RQBF, Zero, VSTS)
            CreateByteField (RQBF, One, VLEN)
            CreateByteField (RQBF, 0x02, ASTS)
            CreateByteField (RQBF, 0x03, ALEN)
            Name (ETWB, Buffer (0x78) {})
            CreateByteField (ETWB, Zero, ETW0)
            CreateByteField (ETWB, One, ETW1)
            CreateByteField (ETWB, 0x02, ETW2)
            CreateByteField (ETWB, 0x03, ETW3)
            CreateByteField (ETWB, 0x04, ETW4)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("93b666c5-70c6-469f-a215-3d487c91ab3c") /* Unknown UUID */))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (0x02)
                            {
                                 0x7F, 0x02                                       // ..
                            })
                        }
                    }

                    If ((Arg1 == Zero))
                    {
                        Switch (Arg2)
                        {
                            Case (One)
                            {
                                DVER = Arg3
                            }
                            Case (0x02)
                            {
                                Return (OMBR) /* \OMBR */
                            }
                            Case (0x03)
                            {
                                Notify (BAT1, 0x80) // Status Change
                                Notify (TPWR, 0x80) // Status Change
                            }
                            Case (0x04)
                            {
                                Notify (BAT1, 0x81) // Information Change
                                Notify (TPWR, 0x82) // Device-Specific Change
                            }
                            Case (0x05)
                            {
                                Notify (ADP1, 0x80) // Status Change
                                Notify (TPWR, 0x81) // Information Change
                                Notify (TPWR, 0x80) // Status Change
                            }
                            Case (0x06)
                            {
                                Notify (ADP1, 0x81) // Information Change
                                Notify (TPWR, 0x81) // Information Change
                                Notify (TPWR, 0x80) // Status Change
                            }
                            Case (0x07)
                            {
                                If (CondRefOf (BAT2))
                                {
                                    Notify (BAT2, 0x80) // Status Change
                                }
                            }
                            Case (0x08)
                            {
                                If (CondRefOf (BAT2))
                                {
                                    Notify (BAT2, 0x81) // Information Change
                                }
                            }
                            Case (0x09)
                            {
                                If ((ToInteger (Arg3) == One))
                                {
                                    If (CondRefOf (\_SB._SAN.GEN1))
                                    {
                                        Notify (GEN1, 0x90) // Device-Specific
                                    }
                                }
                                ElseIf ((ToInteger (Arg3) == 0x02))
                                {
                                    If (CondRefOf (\_SB._SAN.GEN2))
                                    {
                                        Notify (GEN2, 0x90) // Device-Specific
                                    }
                                }
                                ElseIf ((ToInteger (Arg3) == 0x03))
                                {
                                    If (CondRefOf (\_SB._SAN.GEN3))
                                    {
                                        Notify (GEN3, 0x90) // Device-Specific
                                    }
                                }
                                ElseIf ((ToInteger (Arg3) == 0x04))
                                {
                                    If (CondRefOf (\_SB._SAN.GEN4))
                                    {
                                        Notify (GEN4, 0x90) // Device-Specific
                                    }
                                }
                                ElseIf ((ToInteger (Arg3) == 0x05))
                                {
                                    If (CondRefOf (\_SB._SAN.GEN5))
                                    {
                                        Notify (GEN5, 0x90) // Device-Specific
                                    }
                                }
                                ElseIf ((ToInteger (Arg3) == 0x06))
                                {
                                    If (CondRefOf (\_SB._SAN.GEN6))
                                    {
                                        Notify (GEN6, 0x90) // Device-Specific
                                    }
                                }
                                ElseIf ((ToInteger (Arg3) == 0x07))
                                {
                                    If (CondRefOf (\_SB._SAN.GEN7))
                                    {
                                        Notify (GEN7, 0x90) // Device-Specific
                                    }
                                }
                                ElseIf ((ToInteger (Arg3) == 0x08))
                                {
                                    If (CondRefOf (\_SB._SAN.GEN8))
                                    {
                                        Notify (GEN8, 0x90) // Device-Specific
                                    }
                                }
                            }
                            Case (0x0A)
                            {
                                If ((ObjectType (Arg3) == 0x03))
                                {
                                    If ((SizeOf (Arg3) == 0x0C))
                                    {
                                        CreateDWordField (Arg3, Zero, _DR0)
                                        CreateDWordField (Arg3, 0x04, _DR1)
                                        If ((_DR1 != ODV4))
                                        {
                                            ODV4 = _DR1 /* \_SB_._SAN._DSM._DR1 */
                                            If (CondRefOf (\_SB.IETM))
                                            {
                                                Notify (IETM, 0x88) // Device-Specific
                                            }
                                        }
                                    }
                                    Else
                                    {
                                    }
                                }
                                Else
                                {
                                }
                            }

                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Method (_REG, 2, NotSerialized)  // _REG: Region Availability
            {
                If ((Arg0 == 0x09))
                {
                    AVBL = Arg1
                    Notify (ADP1, 0x80) // Status Change
                    Notify (BAT1, 0x81) // Information Change
                    If (CondRefOf (BAT2))
                    {
                        Notify (BAT2, One) // Device Check
                    }

                    If (CondRefOf (\_SB.LID0))
                    {
                        Notify (LID0, 0x80) // Status Change
                    }
                }
            }

            Name (I2Z0, ResourceTemplate ()
            {
                I2cSerialBusV2 (0x0000, ControllerInitiated, 0x000186A0,
                    AddressingMode7Bit, "\\_SB._SAN",
                    0x00, ResourceConsumer, , Exclusive,
                    )
            })
            OperationRegion (OR01, GenericSerialBus, Zero, 0x0100)
            Field (OR01, BufferAcc, NoLock, Preserve)
            {
                Connection (I2Z0), 
                AccessAs (BufferAcc, AttribRawProcessBytes (0x02)), 
                SAN0,   8
            }

            Method (RQST, 5, Serialized)
            {
                Return (RQSX (Arg0, Arg1, Arg2, Arg3, Arg4, One))
            }

            Method (RQSG, 5, Serialized)
            {
                Return (RQSX (Arg0, Arg1, Arg2, Arg3, Arg4, 0x03))
            }

            Method (RQSX, 6, Serialized)
            {
                Local4 = One
                If ((AVBL == One))
                {
                    Local0 = ObjectType (Arg3)
                    If (((Local0 == Zero) || (Local0 == One)))
                    {
                        Local1 = Zero
                    }
                    ElseIf ((Local0 == 0x03))
                    {
                        Local1 = SizeOf (Arg3)
                        If ((Local1 > 0xF5))
                        {
                            Return (0x02)
                        }
                    }
                    Else
                    {
                        Return (0x03)
                    }

                    Local2 = (Local1 + 0x08)
                    RSTS = Zero
                    RTL = Local2
                    RCV = Arg5
                    RTC = Arg0
                    RTID = One
                    RIID = Arg2
                    RSNC = Arg4
                    RCID = Arg1
                    RCDL = Local1
                    If ((Local1 != Zero))
                    {
                        RPLD = Arg3
                    }

                    VSTS = One
                    RQBF = SAN0 = RQBF /* \_SB_._SAN.RQBF */
                    If ((VSTS == Zero))
                    {
                        If ((VLEN >= 0x02))
                        {
                            If ((ASTS == Zero))
                            {
                                If ((Arg4 == Zero))
                                {
                                    Local4 = Zero
                                }
                                ElseIf ((Arg4 == 0x02))
                                {
                                    Local4 = Zero
                                }
                                ElseIf (((ALEN + 0x02) > VLEN))
                                {
                                    Local4 = 0x04
                                }
                                ElseIf (((ALEN <= 0xFB) && (ALEN != Zero)))
                                {
                                    Local3 = (ALEN * 0x08)
                                    CreateField (RQBF, 0x20, Local3, ARB)
                                    Local4 = ARB /* \_SB_._SAN.RQSX.ARB_ */
                                }
                                Else
                                {
                                    Local4 = 0x04
                                }
                            }
                            Else
                            {
                                Local4 = 0x05
                            }
                        }
                        Else
                        {
                            Local4 = 0x07
                        }
                    }
                    Else
                    {
                        Local4 = 0x06
                    }

                    If ((ObjectType (Local4) == One))
                    {
                        If ((Local4 != Zero))
                        {
                            Local5 = Package (0x04) {}
                            Local5 [Zero] = Arg0
                            Local5 [One] = Arg1
                            Local5 [0x02] = Arg2
                            Local5 [0x03] = Local4
                            ETWL (One, 0x02, "RQST(%0, %1, %2) error: %3", Local5)
                        }
                    }
                }

                Return (Local4)
            }

            Method (ETWL, 4, Serialized)
            {
                If ((AVBL == One))
                {
                    ToBuffer (Arg2, Local2)
                    Local0 = SizeOf (Arg2)
                    Local1 = Zero
                    Local6 = 0x05
                    While (((Local1 < Local0) && (Local6 < 0x78)))
                    {
                        Local3 = DerefOf (Local2 [Local1])
                        Local1++
                        If ((Local3 == 0x25))
                        {
                            ToInteger (DerefOf (Local2 [Local1]), Local3)
                            Local1++
                            If ((ObjectType (Arg3) == 0x04))
                            {
                                If (((Local3 >= 0x30) && (Local3 <= 0x39)))
                                {
                                    Local3 -= 0x30
                                    If ((Local3 < SizeOf (Arg3)))
                                    {
                                        Local4 = DerefOf (Arg3 [Local3])
                                        Local3 = DerefOf (Local2 [Local1])
                                        If ((Local3 == 0x58))
                                        {
                                            ToHexString (Local4, Local3)
                                            Local1++
                                        }
                                        Else
                                        {
                                            ToDecimalString (Local4, Local3)
                                        }

                                        Local4 = SizeOf (Local3)
                                        Local5 = Zero
                                        ToBuffer (Local3, Local3)
                                        While (((Local5 < Local4) && (Local6 < 0x78)))
                                        {
                                            ETWB [Local6] = DerefOf (Local3 [Local5])
                                            Local5++
                                            Local6++
                                        }
                                    }
                                    Else
                                    {
                                        ETWB [Local6] = 0x25
                                        Local6++
                                        ETWB [Local6] = Local3
                                        Local6++
                                    }
                                }
                                Else
                                {
                                    ETWB [Local6] = 0x25
                                    Local6++
                                    ETWB [Local6] = Local3
                                    Local6++
                                }
                            }
                            Else
                            {
                                ETWB [Local6] = 0x25
                                Local6++
                                ETWB [Local6] = Local3
                                Local6++
                            }
                        }
                        Else
                        {
                            ETWB [Local6] = Local3
                            Local6++
                        }
                    }

                    Local6 -= 0x02
                    ETW0 = Zero
                    ETW1 = Local6
                    ETW2 = 0x02
                    If ((Arg0 == One))
                    {
                        ETW3 = One
                    }
                    Else
                    {
                        ETW3 = 0x02
                    }

                    ETW4 = Arg1
                    SAN0 = ETWB /* \_SB_._SAN.ETWB */
                }
            }

            Method (EWP1, 1, NotSerialized)
            {
                Local0 = Package (0x01) {}
                Local0 [Zero] = Arg0
                Return (Local0)
            }

            Method (EWP2, 2, NotSerialized)
            {
                Local0 = Package (0x02) {}
                Local0 [Zero] = Arg0
                Local0 [One] = Arg1
                Return (Local0)
            }

            Method (EWP3, 3, NotSerialized)
            {
                Local0 = Package (0x02) {}
                Local0 [Zero] = Arg0
                Local0 [One] = Arg1
                Local0 [0x02] = Arg2
                Return (Local0)
            }

            Method (EWP4, 4, NotSerialized)
            {
                Local0 = Package (0x02) {}
                Local0 [Zero] = Arg0
                Local0 [One] = Arg1
                Local0 [0x02] = Arg2
                Local0 [0x03] = Arg3
                Return (Local0)
            }
        }
    }

    Device (ADP1)
    {
        Name (_HID, "ACPI0003" /* Power Source Device */)  // _HID: Hardware ID
        Name (_DEP, Package (0x01)  // _DEP: Dependencies
        {
            \_SB._SAN
        })
        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            Return (0x0F)
        }

        Method (_PSR, 0, NotSerialized)  // _PSR: Power Source
        {
            Local0 = ACST ()
            PWRS = Local0
            If ((Local0 == One))
            {
                Return (One)
            }

            Return (Zero)
        }

        Method (_PCL, 0, NotSerialized)  // _PCL: Power Consumer List
        {
            Return (_SB) /* \_SB_ */
        }

        Method (ACST, 0, Serialized)
        {
            Local2 = Zero
            Local0 = \_SB._SAN.RQST (0x02, 0x0D, One, Zero, One)
            If ((ObjectType (Local0) != 0x03)) {}
            ElseIf ((SizeOf (Local0) == 0x04))
            {
                Local2 = ToInteger (Local0)
            }
            Else
            {
            }

            Return (Local2)
        }
    }

    Scope (_SB)
    {
        Device (BAT1)
        {
            Name (_HID, EisaId ("PNP0C0A") /* Control Method Battery */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (_SUN, One)  // _SUN: Slot User Number
            Name (LFCC, Buffer (0x04)
            {
                 0xFF, 0xFF, 0xFF, 0xFF                           // ....
            })
            Name (LBRC, Buffer (0x04)
            {
                 0xFF, 0xFF, 0xFF, 0xFF                           // ....
            })
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                _SAN
            })
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                Local2 = 0x1F
                Local0 = ^^_SAN.RQST (0x02, One, One, Zero, One)
                If ((ObjectType (Local0) != 0x03))
                {
                    If ((Local0 == One)) {}
                    Else
                    {
                    }
                }
                ElseIf ((SizeOf (Local0) == 0x04))
                {
                    CreateDWordField (Local0, Zero, BAST)
                    If ((BAST & 0x10))
                    {
                        Local2 = 0x1F
                    }
                    Else
                    {
                        Local2 = Zero
                    }
                }
                Else
                {
                }

                Return (Local2)
            }

            Method (_BIX, 0, Serialized)  // _BIX: Battery Information Extended
            {
                Name (BPKG, Package (0x14)
                {
                    Zero, 
                    Zero, 
                    0xB090, 
                    0xB6DA, 
                    One, 
                    0x1D93, 
                    0x1A7C, 
                    0x054C, 
                    Zero, 
                    0x03E8, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0x03E8, 
                    0x03E8, 
                    One, 
                    One, 
                    "SDS-BAT             ", 
                    "1234567890", 
                    "BAT ", 
                    "SDS-BAT-MANUFACTURER"
                })
                Local0 = ^^_SAN.RQST (0x02, 0x02, One, Zero, One)
                If ((ObjectType (Local0) != 0x03))
                {
                    ^^_SAN.ETWL (One, 0x02, "BAT%0._BIX: _SAN.RQST error %1", ^^_SAN.EWP2 (One, Local0))
                }
                ElseIf ((SizeOf (Local0) == 0x77))
                {
                    CreateByteField (Local0, Zero, _B00)
                    CreateDWordField (Local0, One, _B01)
                    CreateDWordField (Local0, 0x05, _B02)
                    CreateDWordField (Local0, 0x09, _B03)
                    CreateDWordField (Local0, 0x0D, _B04)
                    CreateDWordField (Local0, 0x11, _B05)
                    CreateDWordField (Local0, 0x15, _B06)
                    CreateDWordField (Local0, 0x19, _B07)
                    CreateDWordField (Local0, 0x1D, _B08)
                    CreateDWordField (Local0, 0x21, _B09)
                    CreateDWordField (Local0, 0x25, _B10)
                    CreateDWordField (Local0, 0x29, _B11)
                    CreateDWordField (Local0, 0x2D, _B12)
                    CreateDWordField (Local0, 0x31, _B13)
                    CreateDWordField (Local0, 0x35, _B14)
                    CreateDWordField (Local0, 0x39, _B15)
                    CreateField (Local0, 0x01E8, 0xA8, _B16)
                    CreateField (Local0, 0x0290, 0x58, _B17)
                    CreateField (Local0, 0x02E8, 0x28, _B18)
                    CreateField (Local0, 0x0310, 0xA8, _B19)
                    BPKG [Zero] = ToInteger (_B00)
                    BPKG [One] = ToInteger (_B01)
                    BPKG [0x02] = ToInteger (_B02)
                    BPKG [0x03] = ToInteger (_B03)
                    LFCC = ToInteger (_B03)
                    BPKG [0x04] = ToInteger (_B04)
                    BPKG [0x05] = ToInteger (_B05)
                    BPKG [0x06] = ToInteger (_B06)
                    BPKG [0x07] = ToInteger (_B07)
                    BPKG [0x08] = ToInteger (_B08)
                    BPKG [0x09] = ToInteger (_B09)
                    BPKG [0x0A] = ToInteger (_B10)
                    BPKG [0x0B] = ToInteger (_B11)
                    BPKG [0x0C] = ToInteger (_B12)
                    BPKG [0x0D] = ToInteger (_B13)
                    BPKG [0x0E] = ToInteger (_B14)
                    BPKG [0x0F] = ToInteger (_B15)
                    BPKG [0x10] = _B16 /* \_SB_.BAT1._BIX._B16 */
                    BPKG [0x11] = _B17 /* \_SB_.BAT1._BIX._B17 */
                    BPKG [0x12] = _B18 /* \_SB_.BAT1._BIX._B18 */
                    BPKG [0x13] = _B19 /* \_SB_.BAT1._BIX._B19 */
                    UODV ()
                }
                Else
                {
                }

                Return (BPKG) /* \_SB_.BAT1._BIX.BPKG */
            }

            Method (_BST, 0, Serialized)  // _BST: Battery Status
            {
                Name (PKG1, Package (0x04)
                {
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF
                })
                Local0 = ^^_SAN.RQST (0x02, 0x03, One, Zero, One)
                If ((ObjectType (Local0) != 0x03))
                {
                    ^^_SAN.ETWL (One, 0x02, "BAT%0._BST: _SAN.RQST error %1", ^^_SAN.EWP2 (One, Local0))
                }
                ElseIf ((SizeOf (Local0) == 0x10))
                {
                    CreateDWordField (Local0, Zero, _B00)
                    CreateDWordField (Local0, 0x04, _B01)
                    CreateDWordField (Local0, 0x08, _B02)
                    CreateDWordField (Local0, 0x0C, _B03)
                    PKG1 [Zero] = ToInteger (_B00)
                    PKG1 [One] = ToInteger (_B01)
                    PKG1 [0x02] = ToInteger (_B02)
                    LBRC = ToInteger (_B02)
                    PKG1 [0x03] = ToInteger (_B03)
                    UODV ()
                }
                Else
                {
                }

                Return (PKG1) /* \_SB_.BAT1._BST.PKG1 */
            }

            Method (UODV, 0, NotSerialized)
            {
                If (((ToInteger (LFCC) != 0xFFFFFFFF) && (ToInteger (LBRC
                    ) != 0xFFFFFFFF)))
                {
                    If ((ToInteger (LFCC) != Zero))
                    {
                        Local0 = ((0x64 * ToInteger (LBRC)) / ToInteger (LFCC)
                            )
                        If ((Local0 < 0x0A))
                        {
                            ODV2 |= One /* External reference */
                        }
                        Else
                        {
                            ODV2 &= 0xFFFFFFFFFFFFFFFE /* External reference */
                        }
                    }
                }
            }

            Method (_BTP, 1, Serialized)  // _BTP: Battery Trip Point
            {
                Name (INPT, Buffer (0x04) {})
                CreateDWordField (INPT, Zero, BTPV)
                BTPV = Arg0
                Local0 = ^^_SAN.RQST (0x02, 0x04, One, INPT, Zero)
                If ((Local0 != Zero)) {}
            }

            Method (_PCL, 0, NotSerialized)  // _PCL: Power Consumer List
            {
                Return (Package (0x01)
                {
                    _SB
                })
            }

            Method (PMAX, 0, Serialized)
            {
                Local2 = 0xFFFFFFFF
                Local0 = ^^_SAN.RQST (0x02, 0x0B, One, Zero, One)
                If ((ObjectType (Local0) != 0x03)) {}
                ElseIf ((SizeOf (Local0) == 0x04))
                {
                    CreateDWordField (Local0, Zero, _DR3)
                    Local2 = _DR3 /* \_SB_.BAT1.PMAX._DR3 */
                }
                Else
                {
                }

                Return (Local2)
            }

            Method (PSOC, 0, Serialized)
            {
                Local2 = 0xFFFFFFFF
                Local0 = ^^_SAN.RQST (0x02, 0x0C, One, Zero, One)
                If ((ObjectType (Local0) != 0x03)) {}
                ElseIf ((SizeOf (Local0) == 0x04))
                {
                    CreateDWordField (Local0, Zero, _DR3)
                    Local2 = _DR3 /* \_SB_.BAT1.PSOC._DR3 */
                }
                Else
                {
                }

                Return (Local2)
            }

            Method (PSRC, 0, Serialized)
            {
                Local2 = 0xFFFFFFFF
                Local0 = ^^_SAN.RQST (0x02, 0x0D, One, Zero, One)
                If ((ObjectType (Local0) != 0x03)) {}
                ElseIf ((SizeOf (Local0) == 0x04))
                {
                    CreateDWordField (Local0, Zero, _DR3)
                    Local2 = _DR3 /* \_SB_.BAT1.PSRC._DR3 */
                }
                Else
                {
                }

                Return (Local2)
            }

            Method (ARTG, 0, Serialized)
            {
                Local2 = 0xFFFFFFFF
                Local0 = ^^_SAN.RQST (0x02, 0x0F, One, Zero, One)
                If ((ObjectType (Local0) != 0x03)) {}
                ElseIf ((SizeOf (Local0) == 0x04))
                {
                    CreateDWordField (Local0, Zero, _DR3)
                    Local2 = _DR3 /* \_SB_.BAT1.ARTG._DR3 */
                }
                Else
                {
                }

                Return (Local2)
            }

            Method (CHGI, 1, Serialized)
            {
                Name (INPT, Buffer (0x04) {})
                CreateDWordField (INPT, Zero, IVAL)
                IVAL = Arg0
                Local0 = ^^_SAN.RQST (0x02, 0x0E, One, INPT, Zero)
                If ((Local0 != Zero)) {}
                Return (Zero)
            }
        }
    }

    Scope (_SB)
    {
        Device (SRTC)
        {
            Name (TIME, Buffer (0x10) {})
            CreateWordField (TIME, Zero, YEAR)
            CreateByteField (TIME, 0x02, MNTH)
            CreateByteField (TIME, 0x03, DAYS)
            CreateByteField (TIME, 0x04, HOUR)
            CreateByteField (TIME, 0x05, MINS)
            CreateByteField (TIME, 0x06, SECS)
            CreateByteField (TIME, 0x07, ISOK)
            CreateWordField (TIME, 0x08, MILS)
            CreateWordField (TIME, 0x0A, TMZN)
            CreateByteField (TIME, 0x0C, DASV)
            CreateField (TIME, 0x68, 0x18, PAD2)
            Name (SGCP, 0x15)
            ISOK = Zero
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                Return ("ACPI000E")
            }

            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                _SAN
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }

            Method (_GCP, 0, NotSerialized)  // _GCP: Get Capabilities
            {
                Return (SGCP) /* \_SB_.SRTC.SGCP */
            }

            Method (PRNT, 0, NotSerialized)
            {
            }

            Method (_GRT, 0, Serialized)  // _GRT: Get Real Time
            {
                YEAR = Zero
                MNTH = Zero
                DAYS = Zero
                HOUR = Zero
                MINS = Zero
                SECS = Zero
                ISOK = Zero
                TMZN = Zero
                DASV = Zero
                PAD2 = Zero
                Local1 = ^^_SAN.RQST (One, 0x1F, Zero, Zero, One)
                If ((ObjectType (Local1) == 0x03))
                {
                    If ((SizeOf (Local1) == 0x10))
                    {
                        CreateWordField (Local1, Zero, TYEA)
                        CreateByteField (Local1, 0x02, TMNT)
                        CreateByteField (Local1, 0x03, TDAY)
                        CreateByteField (Local1, 0x04, THOU)
                        CreateByteField (Local1, 0x05, TMIN)
                        CreateByteField (Local1, 0x06, TSEC)
                        CreateByteField (Local1, 0x07, TISO)
                        CreateWordField (Local1, 0x08, TMIL)
                        CreateWordField (Local1, 0x0A, TTMZ)
                        CreateByteField (Local1, 0x0C, TDAS)
                        YEAR = TYEA /* \_SB_.SRTC._GRT.TYEA */
                        MNTH = TMNT /* \_SB_.SRTC._GRT.TMNT */
                        DAYS = TDAY /* \_SB_.SRTC._GRT.TDAY */
                        HOUR = THOU /* \_SB_.SRTC._GRT.THOU */
                        MINS = TMIN /* \_SB_.SRTC._GRT.TMIN */
                        SECS = TSEC /* \_SB_.SRTC._GRT.TSEC */
                        ISOK = TISO /* \_SB_.SRTC._GRT.TISO */
                        MILS = TMIL /* \_SB_.SRTC._GRT.TMIL */
                        TMZN = TTMZ /* \_SB_.SRTC._GRT.TTMZ */
                        DASV = TDAS /* \_SB_.SRTC._GRT.TDAS */
                    }
                    Else
                    {
                    }
                }
                Else
                {
                }

                PRNT ()
                Return (TIME) /* \_SB_.SRTC.TIME */
            }

            Method (_SRT, 1, Serialized)  // _SRT: Set Real Time
            {
                Local0 = 0xFFFFFFFF
                CreateField (Arg0, Zero, 0x80, TMPS)
                CreateField (TIME, Zero, 0x80, TMPD)
                TMPD = TMPS /* \_SB_.SRTC._SRT.TMPS */
                PRNT ()
                Local1 = ^^_SAN.RQST (One, 0x20, Zero, TIME, One)
                If ((ObjectType (Local1) == 0x03))
                {
                    If ((SizeOf (Local1) == 0x04))
                    {
                        ToInteger (Local1, Local0)
                    }
                    Else
                    {
                    }
                }
                Else
                {
                }

                Return (Local0)
            }

            Method (_GWS, 1, Serialized)  // _GWS: Get Wake Status
            {
                Name (TASB, Buffer (0x04) {})
                CreateDWordField (TASB, Zero, _SB0)
                _SB0 = Arg0
                Local0 = Zero
                Local1 = ^^_SAN.RQST (One, 0x1B, Zero, TASB, One)
                If ((ObjectType (Local1) == 0x03))
                {
                    If ((SizeOf (Local1) == 0x04))
                    {
                        ToInteger (Local1, Local0)
                    }
                    Else
                    {
                    }
                }
                Else
                {
                }

                Return (Local0)
            }

            Method (_CWS, 1, Serialized)  // _CWS: Clear Wake Alarm Status
            {
                Local0 = One
                Name (TASB, Buffer (0x04) {})
                CreateDWordField (TASB, Zero, _SB0)
                _SB0 = Arg0
                Local1 = ^^_SAN.RQST (One, 0x1C, Zero, TASB, One)
                If ((ObjectType (Local1) == 0x03))
                {
                    If ((SizeOf (Local1) == 0x04))
                    {
                        ToInteger (Local1, Local0)
                    }
                    Else
                    {
                    }
                }
                Else
                {
                }

                Return (Local0)
            }

            Method (_STP, 2, NotSerialized)  // _STP: Set Expired Timer Wake Policy
            {
                Return (0xFFFFFFFF)
            }

            Method (_STV, 2, Serialized)  // _STV: Set Timer Value
            {
                Local0 = One
                Name (TASB, Buffer (0x08) {})
                CreateDWordField (TASB, Zero, _SB0)
                CreateDWordField (TASB, 0x04, _SB1)
                _SB0 = Arg0
                _SB1 = Arg1
                Local1 = ^^_SAN.RQST (One, 0x1A, Zero, TASB, One)
                If ((ObjectType (Local1) == 0x03))
                {
                    If ((SizeOf (Local1) == 0x04))
                    {
                        ToInteger (Local1, Local0)
                    }
                    Else
                    {
                    }
                }
                Else
                {
                }

                Return (Local0)
            }

            Method (_TIP, 1, NotSerialized)  // _TIP: Expired Timer Wake Policy
            {
                Return (0xFFFFFFFF)
            }

            Method (_TIV, 1, Serialized)  // _TIV: Timer Values
            {
                Name (TASB, Buffer (0x04) {})
                CreateDWordField (TASB, Zero, _SB0)
                _SB0 = Arg0
                Local0 = 0xFFFFFFFF
                Local1 = ^^_SAN.RQST (One, 0x1D, Zero, TASB, One)
                If ((ObjectType (Local1) == 0x03))
                {
                    If ((SizeOf (Local1) == 0x04))
                    {
                        ToInteger (Local1, Local0)
                    }
                    Else
                    {
                    }
                }
                Else
                {
                }

                Return (Local0)
            }
        }
    }

    Scope (_SB)
    {
        Device (LID0)
        {
            Name (_HID, EisaId ("PNP0C0D") /* Lid Device */)  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }

            Method (_LID, 0, NotSerialized)  // _LID: Lid Status
            {
                ULID ()
                Return (LIDS) /* External reference */
            }

            Method (ULID, 0, NotSerialized)
            {
                If ((GGIV (0x0204000F) == One))
                {
                    LIDS = Zero
                }
                Else
                {
                    LIDS = One
                }

                Local0 = (^^PCI0.GFX0.CLID & 0x0F)
                If (((LIDS == One) && (Local0 == 0x03)))
                {
                    Return (Zero)
                }

                If (((LIDS == Zero) && (Local0 == Zero)))
                {
                    Return (Zero)
                }

                If (IGDS)
                {
                    If ((LIDS == Zero))
                    {
                        ^^PCI0.GFX0.CLID = 0x80000000
                    }

                    If ((LIDS == One))
                    {
                        ^^PCI0.GFX0.CLID = 0x80000003
                    }
                }

                Notify (LID0, 0x80) // Status Change
            }
        }
    }

    Scope (_SB)
    {
        Device (WSLT)
        {
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                Return ("MSHW0005")
            }

            Name (_CID, "PNP0C60" /* Display Sensor Device */)  // _CID: Compatible ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }
        }

        Device (WSAF)
        {
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                Return ("MSHW0006")
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }
        }

        Device (WSID)
        {
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                _SSH
            })
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                Return ("MSHW0081")
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("a653cdf4-476c-44fb-b366-a73cedf6e14c") /* Unknown UUID */))
                {
                    If ((ToInteger (Arg2) == Zero))
                    {
                        If ((ToInteger (Arg1) == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x07                                             // .
                            })
                        }
                    }

                    If ((ToInteger (Arg1) == Zero))
                    {
                        If ((ToInteger (Arg2) == One))
                        {
                            ODV3 = ToInteger (Arg3)
                            Notify (IETM, 0x88) // Device-Specific
                        }

                        If ((ToInteger (Arg2) == 0x02))
                        {
                            Local0 = ToInteger (CPFM)
                            Return (Local0)
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }

        Device (SDCA)
        {
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                Return ("MSHW0036")
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }
        }

        Device (SFWU)
        {
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                Return ("MSHW0048")
            }

            Method (_STA, 0, Serialized)  // _STA: Status
            {
                Return (0x0F)
            }
        }

        Device (SCDS)
        {
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                Return ("MSHW0045")
            }

            Method (_STA, 0, Serialized)  // _STA: Status
            {
                Return (0x0F)
            }
        }

        Device (VGBI)
        {
            Name (_HID, "MSHW0040")  // _HID: Hardware ID
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                Return (0x0F)
            }

            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                ^PCI0.GPI0
            })
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (SBUF, ResourceTemplate ()
                {
                    GpioInt (Edge, ActiveBoth, SharedAndWake, PullNone, 0x0000,
                        "\\_SB.PCI0.GPI0", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0070
                        }
                    GpioIo (Shared, PullNone, 0x0000, 0x0000, IoRestrictionInputOnly,
                        "\\_SB.PCI0.GPI0", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0070
                        }
                    GpioInt (Edge, ActiveBoth, Shared, PullNone, 0x0000,
                        "\\_SB.PCI0.GPI0", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x003A
                        }
                    GpioIo (Shared, PullNone, 0x0000, 0x0000, IoRestrictionInputOnly,
                        "\\_SB.PCI0.GPI0", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x003A
                        }
                    GpioInt (Edge, ActiveBoth, Shared, PullNone, 0x0000,
                        "\\_SB.PCI0.GPI0", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x003B
                        }
                    GpioIo (Shared, PullNone, 0x0000, 0x0000, IoRestrictionInputOnly,
                        "\\_SB.PCI0.GPI0", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x003B
                        }
                })
                Return (SBUF) /* \_SB_.VGBI._CRS.SBUF */
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("6fd05c69-cde3-49f4-95ed-ab1665498035") /* Unknown UUID */))
                {
                    If ((ToInteger (Arg1) == One))
                    {
                        If ((ToInteger (Arg2) == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x0F                                             // .
                            })
                        }

                        If ((ToInteger (Arg2) == One)) {}
                        If ((ToInteger (Arg2) == 0x02))
                        {
                            Return (OMPR) /* \OMPR */
                        }

                        If ((ToInteger (Arg2) == 0x03))
                        {
                            Local0 = Zero
                            Return (Local0)
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }

        Device (TSML)
        {
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                Return ("MSHW0102")
            }
        }

        Device (CSRP)
        {
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                Return ("MSHW0131")
            }
        }
    }

    Scope (_SB.PCI0.I2C0)
    {
        Device (FINK)
        {
            Name (_HID, "MSHW0125")  // _HID: Hardware ID
            Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    GpioInt (Edge, ActiveHigh, Exclusive, PullNone, 0x0000,
                        "\\_SB.PCI0.GPI0", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x004E
                        }
                    I2cSerialBusV2 (0x003E, ControllerInitiated, 0x000F4240,
                        AddressingMode7Bit, "\\_SB.PCI0.I2C0",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                    I2cSerialBusV2 (0x0044, ControllerInitiated, 0x000F4240,
                        AddressingMode7Bit, "\\_SB.PCI0.I2C0",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                    I2cSerialBusV2 (0x0066, ControllerInitiated, 0x000F4240,
                        AddressingMode7Bit, "\\_SB.PCI0.I2C0",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.PCI0.I2C0.FINK._CRS.RBUF */
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
            }
        }
    }

    If (((EBID & 0x20) == 0x20))
    {
        Scope (_SB.PCI0.XHC.RHUB.SS02)
        {
            Device (NUSB)
            {
                Method (_ADR, 0, Serialized)  // _ADR: Address
                {
                    Return ((SSPA () + 0x03))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (0x0F)
                }
            }
        }

        Scope (_SB)
        {
            Device (QCMU)
            {
                Name (_DEP, Package (0x01)  // _DEP: Dependencies
                {
                    ^PCI0.XHC.RHUB.SS02.NUSB
                })
                Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                {
                    Return ("MSHW0143")
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (0x0F)
                }
            }

            Device (QCMX)
            {
                Name (_DEP, Package (0x01)  // _DEP: Dependencies
                {
                    QCMU
                })
                Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                {
                    Return ("MSHW0142")
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (0x0F)
                }
            }

            Device (QCGN)
            {
                Name (_DEP, Package (0x01)  // _DEP: Dependencies
                {
                    QCMX
                })
                Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                {
                    Return ("MSHW0144")
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (0x0F)
                }
            }
        }
    }

    Scope (_SB)
    {
        PowerResource (CAMP, 0x00, 0x0000)
        {
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((GGOV (0x0203000B) == One))
                {
                    Return (One)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
                ADBG ("CAMP: Camera rails ON in _ON method")
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
                ADBG ("CAMP: Camera rails ON in _OFF method")
            }
        }
    }

    Scope (_SB.PCI0.I2C2)
    {
        Device (CAMF)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "INT33BE" /* Camera Sensor OV5693 */)  // _HID: Hardware ID
            Name (_CID, "INT33BE" /* Camera Sensor OV5693 */)  // _CID: Compatible ID
            Name (_DDN, "OV5693-CRDD")  // _DDN: DOS Device Name
            Name (_SUB, "MSHW0120")  // _SUB: Subsystem ID
            Name (_UID, "0")  // _UID: Unique ID
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                SKC1
            })
            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                CAMP
            })
            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
            {
                ToPLD (
                    PLD_Revision           = 0x2,
                    PLD_IgnoreColor        = 0x1,
                    PLD_Red                = 0x0,
                    PLD_Green              = 0x0,
                    PLD_Blue               = 0x0,
                    PLD_Width              = 0x0,
                    PLD_Height             = 0x0,
                    PLD_UserVisible        = 0x1,
                    PLD_Dock               = 0x0,
                    PLD_Lid                = 0x0,
                    PLD_Panel              = "FRONT",
                    PLD_VerticalPosition   = "CENTER",
                    PLD_HorizontalPosition = "RIGHT",
                    PLD_Shape              = "VERTICALRECTANGLE",
                    PLD_GroupOrientation   = 0x0,
                    PLD_GroupToken         = 0x0,
                    PLD_GroupPosition      = 0x0,
                    PLD_Bay                = 0x0,
                    PLD_Ejectable          = 0x1,
                    PLD_EjectRequired      = 0x1,
                    PLD_CabinetNumber      = 0x0,
                    PLD_CardCageNumber     = 0x0,
                    PLD_Reference          = 0x0,
                    PLD_Rotation           = 0x0,
                    PLD_Order              = 0x0,
                    PLD_VerticalOffset     = 0xFFFF,
                    PLD_HorizontalOffset   = 0xFFFF)

            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (SBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0036, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.PCI0.I2C2",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (SBUF) /* \_SB_.PCI0.I2C2.CAMF._CRS.SBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }

            Method (SSDB, 0, NotSerialized)
            {
                Name (PAR, Buffer (0x6C)
                {
                    /* 0000 */  0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // . ......
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x00, 0x00,  // ........
                    /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0038 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0040 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                    /* 0050 */  0x09, 0x00, 0x02, 0x01, 0x01, 0x01, 0x00, 0xF8,  // ........
                    /* 0058 */  0x24, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // $.......
                    /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0068 */  0x00, 0x00, 0x00, 0x00                           // ....
                })
                Return (PAR) /* \_SB_.PCI0.I2C2.CAMF.SSDB.PAR_ */
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("822ace8f-2814-4174-a56b-5f029fe079ee") /* Unknown UUID */))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                    }

                    If ((Arg1 == Zero))
                    {
                        If ((Arg2 == One))
                        {
                            Return ("MSHW0120")
                        }
                    }
                    Else
                    {
                        ADBG ("CAMF: Revision 1 not supported")
                    }
                }

                If ((Arg0 == ToUUID ("26257549-9271-4ca4-bb43-c4899d5a4881") /* Unknown UUID */))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x07                                             // .
                            })
                        }
                    }

                    If ((Arg1 == Zero))
                    {
                        If ((Arg2 == One))
                        {
                            Return (One)
                        }

                        If ((Arg2 == 0x02))
                        {
                            Return (0x02003600)
                        }
                    }
                    Else
                    {
                        ADBG ("CAMF: Revision 1 not supported")
                    }
                }

                Return (Zero)
            }
        }

        Device (SKC1)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "INT3472")  // _HID: Hardware ID
            Name (_CID, "INT3472")  // _CID: Compatible ID
            Name (_DDN, "INCL-CRDD")  // _DDN: DOS Device Name
            Name (_UID, "1")  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (SBUF, ResourceTemplate ()
                {
                    GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                        "\\_SB.PCI0.GPI0", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x008C
                        }
                    GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                        "\\_SB.PCI0.GPI0", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0084
                        }
                    GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                        "\\_SB.PCI0.GPI0", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0096
                        }
                })
                Return (SBUF) /* \_SB_.PCI0.I2C2.SKC1._CRS.SBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }

            Method (CLDB, 0, NotSerialized)
            {
                Name (PAR, Buffer (0x20)
                {
                    /* 0000 */  0x00, 0x01, 0x01, 0x20, 0x00, 0x00, 0x00, 0x00,  // ... ....
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                })
                Return (PAR) /* \_SB_.PCI0.I2C2.SKC1.CLDB.PAR_ */
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("79234640-9e10-4fea-a5c1-b5aa8b19756f") /* Unknown UUID */))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x1F                                             // .
                            })
                        }
                    }

                    If ((Arg1 == Zero))
                    {
                        If ((Arg2 == One))
                        {
                            Return (0x03)
                        }

                        If ((Arg2 == 0x02))
                        {
                            Return (0x01008C0C)
                        }

                        If ((Arg2 == 0x03))
                        {
                            Return (0x01008400)
                        }

                        If ((Arg2 == 0x04))
                        {
                            Return (0x0100960D)
                        }
                    }
                    Else
                    {
                        ADBG ("SKC1: Revision 1 not supported")
                    }
                }

                Return (Zero)
            }
        }
    }

    Scope (_SB.PCI0.I2C3)
    {
        Device (CAMR)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "INT347A")  // _HID: Hardware ID
            Name (_CID, "INT347A")  // _CID: Compatible ID
            Name (_DDN, "OV8865-CRDD")  // _DDN: DOS Device Name
            Name (_SUB, "MSHW0121")  // _SUB: Subsystem ID
            Name (_UID, "0")  // _UID: Unique ID
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                SKC0
            })
            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                CAMP
            })
            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
            {
                ToPLD (
                    PLD_Revision           = 0x2,
                    PLD_IgnoreColor        = 0x1,
                    PLD_Red                = 0x0,
                    PLD_Green              = 0x0,
                    PLD_Blue               = 0x0,
                    PLD_Width              = 0x0,
                    PLD_Height             = 0x0,
                    PLD_UserVisible        = 0x1,
                    PLD_Dock               = 0x0,
                    PLD_Lid                = 0x0,
                    PLD_Panel              = "BACK",
                    PLD_VerticalPosition   = "CENTER",
                    PLD_HorizontalPosition = "RIGHT",
                    PLD_Shape              = "VERTICALRECTANGLE",
                    PLD_GroupOrientation   = 0x0,
                    PLD_GroupToken         = 0x0,
                    PLD_GroupPosition      = 0x0,
                    PLD_Bay                = 0x0,
                    PLD_Ejectable          = 0x1,
                    PLD_EjectRequired      = 0x1,
                    PLD_CabinetNumber      = 0x0,
                    PLD_CardCageNumber     = 0x0,
                    PLD_Reference          = 0x0,
                    PLD_Rotation           = 0x0,
                    PLD_Order              = 0x0,
                    PLD_VerticalOffset     = 0xFFFF,
                    PLD_HorizontalOffset   = 0xFFFF)

            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (SBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0010, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.PCI0.I2C3",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                    I2cSerialBusV2 (0x000C, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.PCI0.I2C3",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (SBUF) /* \_SB_.PCI0.I2C3.CAMR._CRS.SBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (CL00)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (SSDB, 0, NotSerialized)
            {
                Name (PAR, Buffer (0x6C)
                {
                    /* 0000 */  0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // . ......
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                    /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0038 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0040 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x04,  // ........
                    /* 0050 */  0x09, 0x00, 0x02, 0x01, 0x01, 0x01, 0x00, 0xF8,  // ........
                    /* 0058 */  0x24, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // $.......
                    /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0068 */  0x00, 0x00, 0x00, 0x00                           // ....
                })
                Return (PAR) /* \_SB_.PCI0.I2C3.CAMR.SSDB.PAR_ */
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("822ace8f-2814-4174-a56b-5f029fe079ee") /* Unknown UUID */))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                    }

                    If ((Arg1 == Zero))
                    {
                        If ((Arg2 == One))
                        {
                            Return ("MSHW0121")
                        }
                    }
                    Else
                    {
                        ADBG ("CAMR: Revision 1 not supported")
                    }
                }

                If ((Arg0 == ToUUID ("26257549-9271-4ca4-bb43-c4899d5a4881") /* Unknown UUID */))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x0F                                             // .
                            })
                        }
                    }

                    If ((Arg1 == Zero))
                    {
                        If ((Arg2 == One))
                        {
                            Return (0x02)
                        }

                        If ((Arg2 == 0x02))
                        {
                            Return (0x03001000)
                        }

                        If ((Arg2 == 0x03))
                        {
                            Return (0x03000C01)
                        }
                    }
                    Else
                    {
                        ADBG ("CAMR: Revision 1 not supported")
                    }
                }

                Return (Zero)
            }
        }

        Device (SKC0)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "INT3472")  // _HID: Hardware ID
            Name (_CID, "INT3472")  // _CID: Compatible ID
            Name (_DDN, "INCL-CRDD")  // _DDN: DOS Device Name
            Name (_UID, "0")  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (SBUF, ResourceTemplate ()
                {
                    GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                        "\\_SB.PCI0.GPI0", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x008B
                        }
                    GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                        "\\_SB.PCI0.GPI0", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0085
                        }
                    GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                        "\\_SB.PCI0.GPI0", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0097
                        }
                })
                Return (SBUF) /* \_SB_.PCI0.I2C3.SKC0._CRS.SBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (CL00)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (CLDB, 0, NotSerialized)
            {
                Name (PAR, Buffer (0x20)
                {
                    /* 0000 */  0x00, 0x01, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00,  // ... ....
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                })
                Return (PAR) /* \_SB_.PCI0.I2C3.SKC0.CLDB.PAR_ */
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("79234640-9e10-4fea-a5c1-b5aa8b19756f") /* Unknown UUID */))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x1F                                             // .
                            })
                        }
                    }

                    If ((Arg1 == Zero))
                    {
                        If ((Arg2 == One))
                        {
                            Return (0x03)
                        }

                        If ((Arg2 == 0x02))
                        {
                            Return (0x01008B0C)
                        }

                        If ((Arg2 == 0x03))
                        {
                            Return (0x01008500)
                        }

                        If ((Arg2 == 0x04))
                        {
                            Return (0x0100970D)
                        }
                    }
                    Else
                    {
                        ADBG ("SKC0: Revision 1 not supported")
                    }
                }

                Return (Zero)
            }
        }
    }

    Scope (_SB.PCI0.I2C3)
    {
        Device (CAM3)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "INT347E")  // _HID: Hardware ID
            Name (_CID, "INT347E")  // _CID: Compatible ID
            Name (_DDN, "OV7251-CRDD")  // _DDN: DOS Device Name
            Name (_SUB, "MSHW0122")  // _SUB: Subsystem ID
            Name (_UID, "0")  // _UID: Unique ID
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                SKC2
            })
            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                CAMP
            })
            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
            {
                ToPLD (
                    PLD_Revision           = 0x2,
                    PLD_IgnoreColor        = 0x1,
                    PLD_Red                = 0x0,
                    PLD_Green              = 0x0,
                    PLD_Blue               = 0x0,
                    PLD_Width              = 0x0,
                    PLD_Height             = 0x0,
                    PLD_UserVisible        = 0x1,
                    PLD_Dock               = 0x0,
                    PLD_Lid                = 0x0,
                    PLD_Panel              = "FRONT",
                    PLD_VerticalPosition   = "CENTER",
                    PLD_HorizontalPosition = "RIGHT",
                    PLD_Shape              = "VERTICALRECTANGLE",
                    PLD_GroupOrientation   = 0x0,
                    PLD_GroupToken         = 0x0,
                    PLD_GroupPosition      = 0x0,
                    PLD_Bay                = 0x0,
                    PLD_Ejectable          = 0x1,
                    PLD_EjectRequired      = 0x1,
                    PLD_CabinetNumber      = 0x0,
                    PLD_CardCageNumber     = 0x0,
                    PLD_Reference          = 0x0,
                    PLD_Rotation           = 0x0,
                    PLD_Order              = 0x0,
                    PLD_VerticalOffset     = 0xFFFF,
                    PLD_HorizontalOffset   = 0xFFFF)

            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (SBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0060, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.PCI0.I2C3",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (SBUF) /* \_SB_.PCI0.I2C3.CAM3._CRS.SBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (CL02)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (SSDB, 0, NotSerialized)
            {
                Name (PAR, Buffer (0x6C)
                {
                    /* 0000 */  0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // . ......
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x02, 0x01, 0x00, 0x00,  // ........
                    /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0038 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0040 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0050 */  0x09, 0x00, 0x02, 0x00, 0x00, 0x01, 0x00, 0xF8,  // ........
                    /* 0058 */  0x24, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // $.......
                    /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0068 */  0x00, 0x00, 0x00, 0x00                           // ....
                })
                Return (PAR) /* \_SB_.PCI0.I2C3.CAM3.SSDB.PAR_ */
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("822ace8f-2814-4174-a56b-5f029fe079ee") /* Unknown UUID */))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                    }

                    If ((Arg1 == Zero))
                    {
                        If ((Arg2 == One))
                        {
                            Return ("MSHW0122")
                        }
                    }
                    Else
                    {
                        ADBG ("CAMF: Revision 1 not supported")
                    }
                }

                If ((Arg0 == ToUUID ("26257549-9271-4ca4-bb43-c4899d5a4881") /* Unknown UUID */))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x07                                             // .
                            })
                        }
                    }

                    If ((Arg1 == Zero))
                    {
                        If ((Arg2 == One))
                        {
                            Return (One)
                        }

                        If ((Arg2 == 0x02))
                        {
                            Return (0x03006000)
                        }
                    }
                    Else
                    {
                        ADBG ("CAM3: Revision 1 not supported")
                    }
                }

                Return (Zero)
            }
        }

        Device (SKC2)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "INT3472")  // _HID: Hardware ID
            Name (_CID, "INT3472")  // _CID: Compatible ID
            Name (_DDN, "INCL-CRDD")  // _DDN: DOS Device Name
            Name (_UID, "2")  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (SBUF, ResourceTemplate ()
                {
                    GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                        "\\_SB.PCI0.GPI0", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x005B
                        }
                    GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                        "\\_SB.PCI0.GPI0", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x005C
                        }
                })
                Return (SBUF) /* \_SB_.PCI0.I2C3.SKC2._CRS.SBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (CL02)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (CLDB, 0, NotSerialized)
            {
                Name (PAR, Buffer (0x20)
                {
                    /* 0000 */  0x00, 0x01, 0x02, 0x20, 0x00, 0x00, 0x00, 0x00,  // ... ....
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                })
                Return (PAR) /* \_SB_.PCI0.I2C3.SKC2.CLDB.PAR_ */
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("79234640-9e10-4fea-a5c1-b5aa8b19756f") /* Unknown UUID */))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x0F                                             // .
                            })
                        }
                    }

                    If ((Arg1 == Zero))
                    {
                        If ((Arg2 == One))
                        {
                            Return (0x02)
                        }

                        If ((Arg2 == 0x02))
                        {
                            Return (0x01005B0C)
                        }

                        If ((Arg2 == 0x03))
                        {
                            Return (0x01005C00)
                        }
                    }
                    Else
                    {
                        ADBG ("SKC2: Revision 1 not supported")
                    }
                }

                Return (Zero)
            }
        }
    }

    If (((EBID & 0x20) == 0x20))
    {
        Local0 = Zero
        Switch (OMBR)
        {
            Case (0x03)
            {
                Local0 = One
            }
            Case (0x04)
            {
                Local0 = One
            }
            Case (0x05)
            {
                Local0 = One
            }
            Case (0x07)
            {
                Local0 = One
            }
            Case (0x09)
            {
                Local0 = One
            }

        }

        If ((Local0 == One))
        {
            Scope (_SB.PCI0.I2C1)
            {
                Device (PA01)
                {
                    Name (_HID, "MAX34407")  // _HID: Hardware ID
                    Name (_CID, "MAX34407")  // _CID: Compatible ID
                    Name (_UID, One)  // _UID: Unique ID
                    Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Name (RBUF, ResourceTemplate ()
                        {
                            I2cSerialBusV2 (0x001E, ControllerInitiated, 0x000186A0,
                                AddressingMode7Bit, "\\_SB.PCI0.I2C1",
                                0x00, ResourceConsumer, , Exclusive,
                                )
                        })
                        Return (RBUF) /* \_SB_.PCI0.I2C1.PA01._CRS.RBUF */
                    }

                    Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
                    {
                        If ((Arg0 == ToUUID ("4993a436-e1ac-4dc7-b4f8-46a5008fb9e7") /* Unknown UUID */))
                        {
                            If ((Arg2 == Zero))
                            {
                                If ((Arg1 == Zero))
                                {
                                    Return (Buffer (One)
                                    {
                                         0x07                                             // .
                                    })
                                }

                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }

                            If ((Arg2 == One))
                            {
                                If ((Arg1 == Zero))
                                {
                                    Name (PBUF, Package (0x08)
                                    {
                                        "GPU", 
                                        0x0A, 
                                        "CPU_CORES", 
                                        0x0A, 
                                        "BATTERY", 
                                        0x0A, 
                                        "MEMORY_1P2V_DUA", 
                                        0x0A
                                    })
                                    Return (PBUF) /* \_SB_.PCI0.I2C1.PA01._DSM.PBUF */
                                }
                                Else
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                             // .
                                    })
                                }
                            }

                            If ((Arg2 == 0x02))
                            {
                                If ((Arg1 == Zero))
                                {
                                    Name (CBUF, Package (0x01)
                                    {
                                        0x04
                                    })
                                    Return (CBUF) /* \_SB_.PCI0.I2C1.PA01._DSM.CBUF */
                                }
                                Else
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                             // .
                                    })
                                }
                            }

                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }
                }
            }

            Scope (_SB.PCI0.I2C1)
            {
                Device (PA02)
                {
                    Name (_HID, "MAX34407")  // _HID: Hardware ID
                    Name (_CID, "MAX34407")  // _CID: Compatible ID
                    Name (_UID, 0x02)  // _UID: Unique ID
                    Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Name (RBUF, ResourceTemplate ()
                        {
                            I2cSerialBusV2 (0x0012, ControllerInitiated, 0x000186A0,
                                AddressingMode7Bit, "\\_SB.PCI0.I2C1",
                                0x00, ResourceConsumer, , Exclusive,
                                )
                        })
                        Return (RBUF) /* \_SB_.PCI0.I2C1.PA02._CRS.RBUF */
                    }

                    Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
                    {
                        If ((Arg0 == ToUUID ("4993a436-e1ac-4dc7-b4f8-46a5008fb9e7") /* Unknown UUID */))
                        {
                            If ((Arg2 == Zero))
                            {
                                If ((Arg1 == Zero))
                                {
                                    Return (Buffer (One)
                                    {
                                         0x07                                             // .
                                    })
                                }

                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }

                            If ((Arg2 == One))
                            {
                                If ((Arg1 == Zero))
                                {
                                    Name (PBUF, Package (0x08)
                                    {
                                        "SOUTHBRIDGE_1VSB", 
                                        0x0A, 
                                        "DISPLAY_LOGIC", 
                                        0x0A, 
                                        "DISPLAY_BACKLIGHT", 
                                        0x0A, 
                                        "CPU_SA", 
                                        0x0A
                                    })
                                    Return (PBUF) /* \_SB_.PCI0.I2C1.PA02._DSM.PBUF */
                                }
                                Else
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                             // .
                                    })
                                }
                            }

                            If ((Arg2 == 0x02))
                            {
                                If ((Arg1 == Zero))
                                {
                                    Name (CBUF, Package (0x01)
                                    {
                                        0x04
                                    })
                                    Return (CBUF) /* \_SB_.PCI0.I2C1.PA02._DSM.CBUF */
                                }
                                Else
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                             // .
                                    })
                                }
                            }

                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }
                }
            }

            Scope (_SB.PCI0.I2C1)
            {
                Device (PA03)
                {
                    Name (_HID, "MAX34407")  // _HID: Hardware ID
                    Name (_CID, "MAX34407")  // _CID: Compatible ID
                    Name (_UID, 0x03)  // _UID: Unique ID
                    Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Name (RBUF, ResourceTemplate ()
                        {
                            I2cSerialBusV2 (0x0010, ControllerInitiated, 0x000186A0,
                                AddressingMode7Bit, "\\_SB.PCI0.I2C1",
                                0x00, ResourceConsumer, , Exclusive,
                                )
                        })
                        Return (RBUF) /* \_SB_.PCI0.I2C1.PA03._CRS.RBUF */
                    }

                    Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
                    {
                        If ((Arg0 == ToUUID ("4993a436-e1ac-4dc7-b4f8-46a5008fb9e7") /* Unknown UUID */))
                        {
                            If ((Arg2 == Zero))
                            {
                                If ((Arg1 == Zero))
                                {
                                    Return (Buffer (One)
                                    {
                                         0x07                                             // .
                                    })
                                }

                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }

                            If ((Arg2 == One))
                            {
                                If ((Arg1 == Zero))
                                {
                                    Name (PBUF, Package (0x08)
                                    {
                                        "SYSTEM_5V_CONN", 
                                        0x0A, 
                                        "SYSTEM_1P8_VSB", 
                                        0x0A, 
                                        "STORAGE_SSD", 
                                        0x0A, 
                                        "WLAN_BT", 
                                        0x0A
                                    })
                                    Return (PBUF) /* \_SB_.PCI0.I2C1.PA03._DSM.PBUF */
                                }
                                Else
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                             // .
                                    })
                                }
                            }

                            If ((Arg2 == 0x02))
                            {
                                If ((Arg1 == Zero))
                                {
                                    Name (CBUF, Package (0x01)
                                    {
                                        0x04
                                    })
                                    Return (CBUF) /* \_SB_.PCI0.I2C1.PA03._DSM.CBUF */
                                }
                                Else
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                             // .
                                    })
                                }
                            }

                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }
                }
            }

            Scope (_SB.PCI0.I2C1)
            {
                Device (PA04)
                {
                    Name (_HID, "MAX34407")  // _HID: Hardware ID
                    Name (_CID, "MAX34407")  // _CID: Compatible ID
                    Name (_UID, 0x04)  // _UID: Unique ID
                    Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Name (RBUF, ResourceTemplate ()
                        {
                            I2cSerialBusV2 (0x001C, ControllerInitiated, 0x000186A0,
                                AddressingMode7Bit, "\\_SB.PCI0.I2C1",
                                0x00, ResourceConsumer, , Exclusive,
                                )
                        })
                        Return (RBUF) /* \_SB_.PCI0.I2C1.PA04._CRS.RBUF */
                    }

                    Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
                    {
                        If ((Arg0 == ToUUID ("4993a436-e1ac-4dc7-b4f8-46a5008fb9e7") /* Unknown UUID */))
                        {
                            If ((Arg2 == Zero))
                            {
                                If ((Arg1 == Zero))
                                {
                                    Return (Buffer (One)
                                    {
                                         0x07                                             // .
                                    })
                                }

                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }

                            If ((Arg2 == One))
                            {
                                If ((Arg1 == Zero))
                                {
                                    Name (PBUF, Package (0x08)
                                    {
                                        "LTE_IN", 
                                        0x0A, 
                                        "LTE_PA", 
                                        0x0A, 
                                        "NONE", 
                                        Ones, 
                                        "NONE", 
                                        Ones
                                    })
                                    Return (PBUF) /* \_SB_.PCI0.I2C1.PA04._DSM.PBUF */
                                }
                                Else
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                             // .
                                    })
                                }
                            }

                            If ((Arg2 == 0x02))
                            {
                                If ((Arg1 == Zero))
                                {
                                    Name (CBUF, Package (0x01)
                                    {
                                        0x04
                                    })
                                    Return (CBUF) /* \_SB_.PCI0.I2C1.PA04._DSM.CBUF */
                                }
                                Else
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                             // .
                                    })
                                }
                            }

                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }
                }
            }
        }
        Else
        {
        }
    }

    If (((EBID & 0x20) == 0x20))
    {
        Scope (_SB)
        {
            Device (ESIM)
            {
                Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                {
                    Return ("GEM7001")
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (0x0F)
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (SBUF, ResourceTemplate ()
                    {
                        GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                            "\\_SB.PCI0.GPI0", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x004D
                            }
                        GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                            "\\_SB.PCI0.GPI0", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0058
                            }
                    })
                    Return (SBUF) /* \_SB_.ESIM._CRS.SBUF */
                }
            }
        }
    }

    Scope (_SB.PCI0.RP04.PXSX)
    {
        PowerResource (PRWF, 0x05, 0x0000)
        {
            Name (_STA, One)  // _STA: Status
            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
                If ((_STA == Zero))
                {
                    SGOV (0x02040006, One)
                    Sleep (0x96)
                    SGOV (0x02040005, One)
                    Sleep (0x64)
                    _STA = One
                }
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
                If ((_STA == One))
                {
                    SGOV (0x02040006, Zero)
                    Sleep (0x96)
                    SGOV (0x02040005, Zero)
                    Sleep (0x64)
                    _STA = Zero
                }
            }

            Method (_RST, 0, NotSerialized)  // _RST: Device Reset
            {
                SGOV (0x02040006, Zero)
                Sleep (0xFA)
                SGOV (0x02040006, One)
                Sleep (0xFA)
                _STA = One
            }
        }

        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
        {
            PRWF
        })
        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
        {
            PRWF
        })
        Name (_PRR, Package (0x01)  // _PRR: Power Resource for Reset
        {
            PRWF
        })
        Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
        {
            Return (0x03)
        }

        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
        {
        }

        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
        {
            GPEC = Zero
        }
    }

    Name (ECUP, One)
    Mutex (EHLD, 0x00)
    Scope (_SB)
    {
        OperationRegion (ITSS, SystemMemory, 0xFDC43100, 0x0208)
        Field (ITSS, ByteAcc, NoLock, Preserve)
        {
            PARC,   8, 
            PBRC,   8, 
            PCRC,   8, 
            PDRC,   8, 
            PERC,   8, 
            PFRC,   8, 
            PGRC,   8, 
            PHRC,   8, 
            Offset (0x200), 
                ,   1, 
                ,   1, 
            SCGE,   1
        }
    }

    Mutex (MUTX, 0x00)
    Mutex (OSUM, 0x00)
    Event (WFEV)
    OperationRegion (PRT0, SystemIO, 0x80, 0x02)
    Field (PRT0, WordAcc, Lock, Preserve)
    {
        P80B,   16
    }

    Name (P80T, Zero)
    Method (D8XH, 2, Serialized)
    {
        If ((Arg0 == Zero))
        {
            P80T = ((P80T & 0xFF00) | (Arg1 & 0xFF))
        }

        If ((Arg0 == One))
        {
            P80T = ((P80T & 0xFF) | (Arg1 << 0x08))
        }

        P80B = P80T /* \P80T */
    }

    Method (P8XH, 2, Serialized)
    {
        If (CondRefOf (MDBG))
        {
            D8XH (Arg0, Arg1)
        }
    }

    Method (ADBG, 1, Serialized)
    {
        Debug = Arg0
        Return (Zero)
    }

    OperationRegion (SPRT, SystemIO, 0xB2, 0x02)
    Field (SPRT, ByteAcc, Lock, Preserve)
    {
        SSMP,   8
    }

    Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        GPIC = Arg0
        PICM = Arg0
    }

    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        P80T = Zero
        D8XH (Zero, Arg0)
        ADBG (Concatenate ("_PTS=", ToHexString (Arg0)))
        If ((Arg0 == 0x03))
        {
            If (CondRefOf (\_PR.DTSE))
            {
                If ((\_PR.DTSE && (TCNT > One)))
                {
                    TRAP (0x02, 0x1E)
                }
            }
        }

        If (CondRefOf (\_SB.TPM.PTS))
        {
            \_SB.TPM.PTS (Arg0)
        }
    }

    Method (_WAK, 1, Serialized)  // _WAK: Wake
    {
        D8XH (One, 0xAB)
        ADBG ("_WAK")
        If ((S0ID == One))
        {
            \_SB.SCGE = One
        }

        If (NEXP)
        {
            If ((OSCC & 0x02))
            {
                \_SB.PCI0.NHPG ()
            }

            If ((OSCC & 0x04))
            {
                \_SB.PCI0.NPME ()
            }
        }

        If (((Arg0 == 0x03) || (Arg0 == 0x04)))
        {
            If (CondRefOf (\_PR.DTSE))
            {
                If ((\_PR.DTSE && (TCNT > One)))
                {
                    TRAP (0x02, 0x14)
                }
            }

            If (((Arg0 == 0x03) || (Arg0 == 0x04)))
            {
                \_SB.LID0.ULID ()
            }

            If ((\_SB.PCI0.RP01.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP01, Zero) // Bus Check
            }

            If ((\_SB.PCI0.RP02.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP02, Zero) // Bus Check
            }

            If ((\_SB.PCI0.RP03.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP03, Zero) // Bus Check
            }

            If ((\_SB.PCI0.RP04.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP04, Zero) // Bus Check
            }

            If ((\_SB.PCI0.RP05.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP05, Zero) // Bus Check
            }

            If ((\_SB.PCI0.RP06.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP06, Zero) // Bus Check
            }

            If ((\_SB.PCI0.RP07.VDID != 0xFFFFFFFF))
            {
                If ((DSTS == Zero))
                {
                    Notify (\_SB.PCI0.RP07, Zero) // Bus Check
                }
            }

            If ((\_SB.PCI0.RP08.VDID != 0xFFFFFFFF))
            {
                If ((DSTS == Zero))
                {
                    Notify (\_SB.PCI0.RP08, Zero) // Bus Check
                }
            }

            If ((\_SB.PCI0.RP09.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP09, Zero) // Bus Check
            }

            If ((\_SB.PCI0.RP10.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP10, Zero) // Bus Check
            }

            If ((\_SB.PCI0.RP11.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP11, Zero) // Bus Check
            }

            If ((\_SB.PCI0.RP12.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP12, Zero) // Bus Check
            }

            If ((\_SB.PCI0.RP13.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP13, Zero) // Bus Check
            }

            If ((\_SB.PCI0.RP14.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP14, Zero) // Bus Check
            }

            If ((\_SB.PCI0.RP15.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP15, Zero) // Bus Check
            }

            If ((\_SB.PCI0.RP16.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP16, Zero) // Bus Check
            }

            If ((\_SB.PCI0.RP17.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP17, Zero) // Bus Check
            }

            If ((\_SB.PCI0.RP18.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP18, Zero) // Bus Check
            }

            If ((\_SB.PCI0.RP19.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP19, Zero) // Bus Check
            }

            If ((\_SB.PCI0.RP20.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP20, Zero) // Bus Check
            }

            If (CondRefOf (\_SB.VMEN))
            {
                \_SB.VMEN = 0xFF
            }
        }

        Return (Package (0x02)
        {
            Zero, 
            Zero
        })
    }

    Method (GETB, 3, Serialized)
    {
        Local0 = (Arg0 * 0x08)
        Local1 = (Arg1 * 0x08)
        CreateField (Arg2, Local0, Local1, TBF3)
        Return (TBF3) /* \GETB.TBF3 */
    }

    Method (PNOT, 0, Serialized)
    {
        If ((TCNT > One))
        {
            If ((PC00 & 0x08))
            {
                Notify (\_PR.PR00, 0x80) // Performance Capability Change
            }

            If ((PC01 & 0x08))
            {
                Notify (\_PR.PR01, 0x80) // Performance Capability Change
            }

            If ((PC02 & 0x08))
            {
                Notify (\_PR.PR02, 0x80) // Performance Capability Change
            }

            If ((PC03 & 0x08))
            {
                Notify (\_PR.PR03, 0x80) // Performance Capability Change
            }

            If ((PC04 & 0x08))
            {
                Notify (\_PR.PR04, 0x80) // Performance Capability Change
            }

            If ((PC05 & 0x08))
            {
                Notify (\_PR.PR05, 0x80) // Performance Capability Change
            }

            If ((PC06 & 0x08))
            {
                Notify (\_PR.PR06, 0x80) // Performance Capability Change
            }

            If ((PC07 & 0x08))
            {
                Notify (\_PR.PR07, 0x80) // Performance Capability Change
            }

            If ((PC08 & 0x08))
            {
                Notify (\_PR.PR08, 0x80) // Performance Capability Change
            }

            If ((PC09 & 0x08))
            {
                Notify (\_PR.PR09, 0x80) // Performance Capability Change
            }

            If ((PC10 & 0x08))
            {
                Notify (\_PR.PR10, 0x80) // Performance Capability Change
            }

            If ((PC11 & 0x08))
            {
                Notify (\_PR.PR11, 0x80) // Performance Capability Change
            }

            If ((PC12 & 0x08))
            {
                Notify (\_PR.PR12, 0x80) // Performance Capability Change
            }

            If ((PC13 & 0x08))
            {
                Notify (\_PR.PR13, 0x80) // Performance Capability Change
            }

            If ((PC14 & 0x08))
            {
                Notify (\_PR.PR14, 0x80) // Performance Capability Change
            }

            If ((PC15 & 0x08))
            {
                Notify (\_PR.PR15, 0x80) // Performance Capability Change
            }
        }
        Else
        {
            Notify (\_PR.PR00, 0x80) // Performance Capability Change
        }

        If ((TCNT > One))
        {
            If (((PC00 & 0x08) && (PC00 & 0x10)))
            {
                Notify (\_PR.PR00, 0x81) // C-State Change
            }

            If (((PC01 & 0x08) && (PC01 & 0x10)))
            {
                Notify (\_PR.PR01, 0x81) // C-State Change
            }

            If (((PC02 & 0x08) && (PC02 & 0x10)))
            {
                Notify (\_PR.PR02, 0x81) // C-State Change
            }

            If (((PC03 & 0x08) && (PC03 & 0x10)))
            {
                Notify (\_PR.PR03, 0x81) // C-State Change
            }

            If (((PC04 & 0x08) && (PC04 & 0x10)))
            {
                Notify (\_PR.PR04, 0x81) // C-State Change
            }

            If (((PC05 & 0x08) && (PC05 & 0x10)))
            {
                Notify (\_PR.PR05, 0x81) // C-State Change
            }

            If (((PC06 & 0x08) && (PC06 & 0x10)))
            {
                Notify (\_PR.PR06, 0x81) // C-State Change
            }

            If (((PC07 & 0x08) && (PC07 & 0x10)))
            {
                Notify (\_PR.PR07, 0x81) // C-State Change
            }

            If (((PC08 & 0x08) && (PC08 & 0x10)))
            {
                Notify (\_PR.PR08, 0x81) // C-State Change
            }

            If (((PC09 & 0x08) && (PC09 & 0x10)))
            {
                Notify (\_PR.PR09, 0x81) // C-State Change
            }

            If (((PC10 & 0x08) && (PC10 & 0x10)))
            {
                Notify (\_PR.PR10, 0x81) // C-State Change
            }

            If (((PC11 & 0x08) && (PC11 & 0x10)))
            {
                Notify (\_PR.PR11, 0x81) // C-State Change
            }

            If (((PC12 & 0x08) && (PC12 & 0x10)))
            {
                Notify (\_PR.PR12, 0x81) // C-State Change
            }

            If (((PC13 & 0x08) && (PC13 & 0x10)))
            {
                Notify (\_PR.PR13, 0x81) // C-State Change
            }

            If (((PC14 & 0x08) && (PC14 & 0x10)))
            {
                Notify (\_PR.PR14, 0x81) // C-State Change
            }

            If (((PC15 & 0x08) && (PC15 & 0x10)))
            {
                Notify (\_PR.PR15, 0x81) // C-State Change
            }
        }
        Else
        {
            Notify (\_PR.PR00, 0x81) // C-State Change
        }

        If ((DPTF == One))
        {
            Notify (\_SB.IETM, 0x86) // Device-Specific
        }
    }

    OperationRegion (MBAR, SystemMemory, (\_SB.PCI0.GMHB () + 0x5000), 0x1000)
    Field (MBAR, ByteAcc, NoLock, Preserve)
    {
        Offset (0x938), 
        PWRU,   4, 
        Offset (0x9A0), 
        PPL1,   15, 
        PL1E,   1, 
        CLP1,   1
    }

    Name (CLMP, Zero)
    Name (PLEN, Zero)
    Name (PLSV, 0x8000)
    Name (CSEM, Zero)
    Method (SPL1, 0, Serialized)
    {
        Name (PPUU, Zero)
        If ((CSEM == One))
        {
            Return (Zero)
        }

        CSEM = One
        PLSV = PPL1 /* \PPL1 */
        PLEN = PL1E /* \PL1E */
        CLMP = CLP1 /* \CLP1 */
        If ((PWRU == Zero))
        {
            PPUU = One
        }
        Else
        {
            PPUU = (PWRU-- << 0x02)
        }

        Local0 = (PLVL * PPUU) /* \SPL1.PPUU */
        Local1 = (Local0 / 0x03E8)
        PPL1 = Local1
        PL1E = One
        CLP1 = One
    }

    Method (RPL1, 0, Serialized)
    {
        PPL1 = PLSV /* \PLSV */
        PL1E = PLEN /* \PLEN */
        CLP1 = CLMP /* \CLMP */
        CSEM = Zero
    }

    Name (UAMS, Zero)
    Name (GLCK, Zero)
    Method (GUAM, 1, Serialized)
    {
        Switch (ToInteger (Arg0))
        {
            Case (Zero)
            {
                If ((GLCK == One))
                {
                    GLCK = Zero
                    P8XH (Zero, 0xE1)
                    P8XH (One, 0xAB)
                    ADBG ("Exit Resiliency")
                    \_SB.DION ()
                    If (PSCP)
                    {
                        If (CondRefOf (\_PR.PR00._PPC))
                        {
                            \_PR.CPPC = Zero
                            PNOT ()
                        }
                    }

                    If (PLCS)
                    {
                        RPL1 ()
                    }
                }
            }
            Case (One)
            {
                If ((GLCK == Zero))
                {
                    GLCK = One
                    P8XH (Zero, 0xE0)
                    P8XH (One, Zero)
                    ADBG ("Enter Resiliency")
                    \_SB.DIOF ()
                    If (PSCP)
                    {
                        If ((CondRefOf (\_PR.PR00._PSS) && CondRefOf (\_PR.PR00._PPC)))
                        {
                            If ((PC00 & 0x0400))
                            {
                                \_PR.CPPC = (SizeOf (\_PR.PR00.TPSS) - One)
                            }
                            Else
                            {
                                \_PR.CPPC = (SizeOf (\_PR.PR00.LPSS) - One)
                            }

                            PNOT ()
                        }
                    }

                    If (PLCS)
                    {
                        SPL1 ()
                    }
                }
            }
            Default
            {
                Return (Zero)
            }

        }

        UAMS = (Arg0 && !PWRS)
        P_CS ()
    }

    Method (P_CS, 0, Serialized)
    {
        If (CondRefOf (\_SB.PCI0.PAUD.PUAM))
        {
            \_SB.PCI0.PAUD.PUAM ()
        }
    }

    Scope (\)
    {
        OperationRegion (IO_H, SystemIO, 0x1000, 0x04)
        Field (IO_H, ByteAcc, NoLock, Preserve)
        {
            TRPH,   8
        }
    }

    Method (TRAP, 2, Serialized)
    {
        SMIF = Arg1
        If ((Arg0 == 0x02))
        {
            \_PR.DTSF = Arg1
            \_PR.TRPD = Zero
            Return (\_PR.DTSF) /* External reference */
        }

        If ((Arg0 == 0x03))
        {
            TRPH = Zero
        }

        If ((Arg0 == 0x04))
        {
            \_PR.TRPF = Zero
        }

        Return (SMIF) /* \SMIF */
    }

    Scope (_SB.PCI0)
    {
        Method (PTMA, 0, NotSerialized)
        {
            Return (\_PR.BGMA) /* External reference */
        }

        Method (PTMS, 0, NotSerialized)
        {
            Return (\_PR.BGMS) /* External reference */
        }

        Method (PTIA, 0, NotSerialized)
        {
            Return (\_PR.BGIA) /* External reference */
        }

        Method (_INI, 0, Serialized)  // _INI: Initialize
        {
            OSYS = 0x07D0
            If (CondRefOf (\_OSI))
            {
                If (_OSI ("Linux"))
                {
                    OSYS = 0x03E8
                }

                If (_OSI ("Windows 2001"))
                {
                    OSYS = 0x07D1
                }

                If (_OSI ("Windows 2001 SP1"))
                {
                    OSYS = 0x07D1
                }

                If (_OSI ("Windows 2001 SP2"))
                {
                    OSYS = 0x07D2
                }

                If (_OSI ("Windows 2001.1"))
                {
                    OSYS = 0x07D3
                }

                If (_OSI ("Windows 2006"))
                {
                    OSYS = 0x07D6
                }

                If (_OSI ("Windows 2009"))
                {
                    OSYS = 0x07D9
                }

                If (_OSI ("Windows 2012"))
                {
                    OSYS = 0x07DC
                }

                If (_OSI ("Windows 2013"))
                {
                    OSYS = 0x07DD
                }

                If (_OSI ("Windows 2015"))
                {
                    OSYS = 0x07DF
                }
            }

            If (CondRefOf (\_PR.DTSE))
            {
                If ((\_PR.DTSE >= One))
                {
                    \_PR.DSAE = One
                }
            }
        }

        Method (NHPG, 0, Serialized)
        {
            ^RP01.HPEX = Zero
            ^RP02.HPEX = Zero
            ^RP03.HPEX = Zero
            ^RP04.HPEX = Zero
            ^RP05.HPEX = Zero
            ^RP06.HPEX = Zero
            ^RP07.HPEX = Zero
            ^RP08.HPEX = Zero
            ^RP09.HPEX = Zero
            ^RP10.HPEX = Zero
            ^RP11.HPEX = Zero
            ^RP12.HPEX = Zero
            ^RP13.HPEX = Zero
            ^RP14.HPEX = Zero
            ^RP15.HPEX = Zero
            ^RP16.HPEX = Zero
            ^RP17.HPEX = Zero
            ^RP18.HPEX = Zero
            ^RP19.HPEX = Zero
            ^RP20.HPEX = Zero
            ^RP01.HPSX = One
            ^RP02.HPSX = One
            ^RP03.HPSX = One
            ^RP04.HPSX = One
            ^RP05.HPSX = One
            ^RP06.HPSX = One
            ^RP07.HPSX = One
            ^RP08.HPSX = One
            ^RP09.HPSX = One
            ^RP10.HPSX = One
            ^RP11.HPSX = One
            ^RP12.HPSX = One
            ^RP13.HPSX = One
            ^RP14.HPSX = One
            ^RP15.HPSX = One
            ^RP16.HPSX = One
            ^RP17.HPSX = One
            ^RP18.HPSX = One
            ^RP19.HPSX = One
            ^RP20.HPSX = One
        }

        Method (NPME, 0, Serialized)
        {
            ^RP01.PMEX = Zero
            ^RP02.PMEX = Zero
            ^RP03.PMEX = Zero
            ^RP04.PMEX = Zero
            ^RP05.PMEX = Zero
            ^RP06.PMEX = Zero
            ^RP07.PMEX = Zero
            ^RP08.PMEX = Zero
            ^RP09.PMEX = Zero
            ^RP10.PMEX = Zero
            ^RP11.PMEX = Zero
            ^RP12.PMEX = Zero
            ^RP13.PMEX = Zero
            ^RP14.PMEX = Zero
            ^RP15.PMEX = Zero
            ^RP16.PMEX = Zero
            ^RP17.PMEX = Zero
            ^RP18.PMEX = Zero
            ^RP19.PMEX = Zero
            ^RP20.PMEX = Zero
            ^RP01.PMSX = One
            ^RP02.PMSX = One
            ^RP03.PMSX = One
            ^RP04.PMSX = One
            ^RP05.PMSX = One
            ^RP06.PMSX = One
            ^RP07.PMSX = One
            ^RP08.PMSX = One
            ^RP09.PMSX = One
            ^RP10.PMSX = One
            ^RP11.PMSX = One
            ^RP12.PMSX = One
            ^RP13.PMSX = One
            ^RP14.PMSX = One
            ^RP15.PMSX = One
            ^RP16.PMSX = One
            ^RP17.PMSX = One
            ^RP18.PMSX = One
            ^RP19.PMSX = One
            ^RP20.PMSX = One
        }
    }

    Scope (\)
    {
        Name (PICM, Zero)
        Name (PRWP, Package (0x02)
        {
            Zero, 
            Zero
        })
        Method (GPRW, 2, NotSerialized)
        {
            PRWP [Zero] = Arg0
            Local0 = (SS1 << One)
            Local0 |= (SS2 << 0x02)
            Local0 |= (SS3 << 0x03)
            Local0 |= (SS4 << 0x04)
            If (((One << Arg1) & Local0))
            {
                PRWP [One] = Arg1
            }
            Else
            {
                Local0 >>= One
                FindSetLeftBit (Local0, PRWP [One])
            }

            Return (PRWP) /* \PRWP */
        }
    }

    Scope (_SB)
    {
        Name (OSCI, Zero)
        Name (OSCO, Zero)
        Name (OSCP, Zero)
        Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, Zero, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            If ((S0ID == One))
            {
                SCGE = One
            }

            If ((Arg0 == ToUUID ("0811b06e-4a27-44f9-8d60-3cbbc22e7b48") /* Platform-wide Capabilities */))
            {
                If ((Arg1 == One))
                {
                    OSCP = CAP0 /* \_SB_._OSC.CAP0 */
                    If ((CAP0 & 0x04))
                    {
                        OSCO = 0x04
                        If (((SGMD & 0x0F) != 0x02))
                        {
                            If ((RTD3 == Zero))
                            {
                                CAP0 &= 0x3B
                                STS0 |= 0x10
                            }
                        }
                    }
                }
                Else
                {
                    STS0 &= 0xFFFFFF00
                    STS0 |= 0x0A
                }
            }
            Else
            {
                STS0 &= 0xFFFFFF00
                STS0 |= 0x06
            }

            Return (Arg3)
        }

        Device (EPC)
        {
            Name (_HID, EisaId ("INT0E0C"))  // _HID: Hardware ID
            Name (_STR, Unicode ("Enclave Page Cache 1.0"))  // _STR: Description String
            Name (_MLS, Package (0x01)  // _MLS: Multiple Language String
            {
                Package (0x02)
                {
                    "en", 
                    Unicode ("Enclave Page Cache 1.0")
                }
            })
            Name (RBUF, ResourceTemplate ()
            {
                QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, NonCacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000001, // Length
                    ,, _Y20, AddressRangeMemory, TypeStatic)
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateQWordField (RBUF, \_SB.EPC._Y20._MIN, EMIN)  // _MIN: Minimum Base Address
                CreateQWordField (RBUF, \_SB.EPC._Y20._MAX, EMAX)  // _MAX: Maximum Base Address
                CreateQWordField (RBUF, \_SB.EPC._Y20._LEN, ELEN)  // _LEN: Length
                EMIN = \_PR.EMNA /* External reference */
                ELEN = \_PR.ELNG /* External reference */
                EMAX = ((\_PR.EMNA + \_PR.ELNG) - One)
                Return (RBUF) /* \_SB_.EPC_.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((\_PR.EPCS != Zero))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }
        }
    }

    If ((RTVM != Zero))
    {
        Scope (_SB)
        {
            Name (VMEN, 0xFF)
            Method (VMON, 0, Serialized)
            {
                If ((VMEN == One))
                {
                    Return (Zero)
                }

                VMEN = One
            }

            Method (VMOF, 0, Serialized)
            {
                If ((VMEN == Zero))
                {
                    Return (Zero)
                }

                VMEN = Zero
            }
        }
    }

    Scope (_PR)
    {
        Processor (PR00, 0x01, 0x00001810, 0x06) {}
        Processor (PR01, 0x02, 0x00001810, 0x06) {}
        Processor (PR02, 0x03, 0x00001810, 0x06) {}
        Processor (PR03, 0x04, 0x00001810, 0x06) {}
        Processor (PR04, 0x05, 0x00001810, 0x06) {}
        Processor (PR05, 0x06, 0x00001810, 0x06) {}
        Processor (PR06, 0x07, 0x00001810, 0x06) {}
        Processor (PR07, 0x08, 0x00001810, 0x06) {}
        Processor (PR08, 0x09, 0x00001810, 0x06) {}
        Processor (PR09, 0x0A, 0x00001810, 0x06) {}
        Processor (PR10, 0x0B, 0x00001810, 0x06) {}
        Processor (PR11, 0x0C, 0x00001810, 0x06) {}
        Processor (PR12, 0x0D, 0x00001810, 0x06) {}
        Processor (PR13, 0x0E, 0x00001810, 0x06) {}
        Processor (PR14, 0x0F, 0x00001810, 0x06) {}
        Processor (PR15, 0x10, 0x00001810, 0x06) {}
    }

    Scope (_PR.PR00)
    {
        Name (CPC2, Package (0x15)
        {
            0x15, 
            0x02, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000771, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000000000CE, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x0000000000000771, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x0000000000000771, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x0000000000000771, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x01,               // Bit Offset
                    0x0000000000000777, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000770, // Address
                    0x04,               // Access Size
                    )
            }, 

            One, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x0A,               // Bit Width
                    0x20,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            Zero
        })
        Name (CPOC, Package (0x15)
        {
            0x15, 
            0x02, 
            0xFF, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000000000CE, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x0000000000000771, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x0000000000000771, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x0000000000000771, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x01,               // Bit Offset
                    0x0000000000000777, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000770, // Address
                    0x04,               // Access Size
                    )
            }, 

            One, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x0A,               // Bit Width
                    0x20,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            Zero
        })
    }

    Scope (_SB)
    {
        Device (PAGD)
        {
            Name (_HID, "ACPI000C" /* Processor Aggregator Device */)  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (_OSI ("Processor Aggregator Device"))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Name (_PUR, Package (0x02)  // _PUR: Processor Utilization Request
            {
                One, 
                Zero
            })
        }
    }

    Scope (_SB.PCI0)
    {
        Device (PDRC)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (BUF0, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00008000,         // Address Length
                    _Y21)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y22)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y23)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00000000,         // Address Length
                    _Y24)
                Memory32Fixed (ReadWrite,
                    0xFED20000,         // Address Base
                    0x00020000,         // Address Length
                    )
                Memory32Fixed (ReadOnly,
                    0xFED90000,         // Address Base
                    0x00004000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xFED45000,         // Address Base
                    0x0004B000,         // Address Length
                    )
                Memory32Fixed (ReadOnly,
                    0xFF000000,         // Address Base
                    0x01000000,         // Address Length
                    )
                Memory32Fixed (ReadOnly,
                    0xFEE00000,         // Address Base
                    0x00100000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00000000,         // Address Length
                    _Y25)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00000000,         // Address Length
                    _Y26)
            })
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y21._BAS, MBR0)  // _BAS: Base Address
                MBR0 = GMHB ()
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y22._BAS, DBR0)  // _BAS: Base Address
                DBR0 = GDMB ()
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y23._BAS, EBR0)  // _BAS: Base Address
                EBR0 = GEPB ()
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y24._BAS, XBR0)  // _BAS: Base Address
                XBR0 = GPCB ()
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y24._LEN, XSZ0)  // _LEN: Length
                XSZ0 = GPCL ()
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y25._BAS, SXRA)  // _BAS: Base Address
                SXRA = SXRB /* \SXRB */
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y25._LEN, SXRL)  // _LEN: Length
                SXRL = SXRS /* \SXRS */
                If (!HPTE)
                {
                    CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y26._BAS, HBAS)  // _BAS: Base Address
                    CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y26._LEN, HLEN)  // _LEN: Length
                    HBAS = HPTB /* \HPTB */
                    HLEN = 0x0400
                }

                Return (BUF0) /* \_SB_.PCI0.PDRC.BUF0 */
            }
        }
    }

    Method (BRTN, 1, Serialized)
    {
        If (((DIDX & 0x0F00) == 0x0400))
        {
            Notify (\_SB.PCI0.GFX0.DD1F, Arg0)
        }
    }

    Scope (_GPE)
    {
        Method (_L69, 0, Serialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            \_SB.PCI0.RP01.HPME ()
            \_SB.PCI0.RP02.HPME ()
            \_SB.PCI0.RP03.HPME ()
            \_SB.PCI0.RP04.HPME ()
            \_SB.PCI0.RP05.HPME ()
            \_SB.PCI0.RP06.HPME ()
            \_SB.PCI0.RP07.HPME ()
            \_SB.PCI0.RP08.HPME ()
            \_SB.PCI0.RP09.HPME ()
            \_SB.PCI0.RP10.HPME ()
            \_SB.PCI0.RP11.HPME ()
            \_SB.PCI0.RP12.HPME ()
            \_SB.PCI0.RP13.HPME ()
            \_SB.PCI0.RP14.HPME ()
            \_SB.PCI0.RP15.HPME ()
            \_SB.PCI0.RP16.HPME ()
            \_SB.PCI0.RP17.HPME ()
            \_SB.PCI0.RP18.HPME ()
            \_SB.PCI0.RP19.HPME ()
            \_SB.PCI0.RP20.HPME ()
            \_SB.PCI0.RP21.HPME ()
            \_SB.PCI0.RP22.HPME ()
            \_SB.PCI0.RP23.HPME ()
            \_SB.PCI0.RP24.HPME ()
            If ((D1F0 == One))
            {
                \_SB.PCI0.PEG0.HPME ()
                Notify (\_SB.PCI0.PEG0, 0x02) // Device Wake
                Notify (\_SB.PCI0.PEG0.PEGP, 0x02) // Device Wake
            }

            If ((D1F1 == One))
            {
                \_SB.PCI0.PEG1.HPME ()
                Notify (\_SB.PCI0.PEG1, 0x02) // Device Wake
            }

            If ((D1F2 == One))
            {
                \_SB.PCI0.PEG2.HPME ()
                Notify (\_SB.PCI0.PEG2, 0x02) // Device Wake
            }
        }

        Method (_L61, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            L01C += One
            P8XH (Zero, One)
            P8XH (One, L01C)
            If (((\_SB.PCI0.RP01.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP01.HPSX))
            {
                If (((TBTS != One) || ((TBSE != One) || 
                    (TBS1 != One))))
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP01.PDCX)
                {
                    \_SB.PCI0.RP01.PDCX = One
                    \_SB.PCI0.RP01.HPSX = One
                    If (!\_SB.PCI0.RP01.PDSX)
                    {
                        \_SB.PCI0.RP01.L0SE = Zero
                    }

                    If (((TBTS != One) || ((TBSE != One) || 
                        (TBS1 != One))))
                    {
                        Notify (\_SB.PCI0.RP01, Zero) // Bus Check
                    }
                }
                Else
                {
                    \_SB.PCI0.RP01.HPSX = One
                }
            }

            If (((\_SB.PCI0.RP02.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP02.HPSX))
            {
                If (((TBTS != One) || ((TBSE != 0x02) || 
                    (TBS1 != 0x02))))
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP02.PDCX)
                {
                    \_SB.PCI0.RP02.PDCX = One
                    \_SB.PCI0.RP02.HPSX = One
                    If (!\_SB.PCI0.RP02.PDSX)
                    {
                        \_SB.PCI0.RP02.L0SE = Zero
                    }

                    If (((TBTS != One) || ((TBSE != 0x02) || 
                        (TBS1 != 0x02))))
                    {
                        Notify (\_SB.PCI0.RP02, Zero) // Bus Check
                    }
                }
                Else
                {
                    \_SB.PCI0.RP02.HPSX = One
                }
            }

            If (((\_SB.PCI0.RP03.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP03.HPSX))
            {
                If (((TBTS != One) || ((TBSE != 0x03) || 
                    (TBS1 != 0x03))))
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP03.PDCX)
                {
                    \_SB.PCI0.RP03.PDCX = One
                    \_SB.PCI0.RP03.HPSX = One
                    If (!\_SB.PCI0.RP03.PDSX)
                    {
                        \_SB.PCI0.RP03.L0SE = Zero
                    }

                    If (((TBTS != One) || ((TBSE != 0x03) || 
                        (TBS1 != 0x03))))
                    {
                        Notify (\_SB.PCI0.RP03, Zero) // Bus Check
                    }
                }
                Else
                {
                    \_SB.PCI0.RP03.HPSX = One
                }
            }

            If (((\_SB.PCI0.RP04.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP04.HPSX))
            {
                If (((TBTS != One) || ((TBSE != 0x04) || 
                    (TBS1 != 0x04))))
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP04.PDCX)
                {
                    \_SB.PCI0.RP04.PDCX = One
                    \_SB.PCI0.RP04.HPSX = One
                    If (!\_SB.PCI0.RP04.PDSX)
                    {
                        \_SB.PCI0.RP04.L0SE = Zero
                    }

                    If (((TBTS != One) || ((TBSE != 0x04) || 
                        (TBS1 != 0x04))))
                    {
                        Notify (\_SB.PCI0.RP04, Zero) // Bus Check
                    }
                }
                Else
                {
                    \_SB.PCI0.RP04.HPSX = One
                }
            }

            If (((\_SB.PCI0.RP05.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP05.HPSX))
            {
                If (((TBTS != One) || ((TBSE != 0x05) || 
                    (TBS1 != 0x05))))
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP05.PDCX)
                {
                    \_SB.PCI0.RP05.PDCX = One
                    \_SB.PCI0.RP05.HPSX = One
                    If (!\_SB.PCI0.RP05.PDSX)
                    {
                        \_SB.PCI0.RP05.L0SE = Zero
                    }

                    If (((TBTS != One) || ((TBSE != 0x05) || 
                        (TBS1 != 0x05))))
                    {
                        Notify (\_SB.PCI0.RP05, Zero) // Bus Check
                    }
                }
                Else
                {
                    \_SB.PCI0.RP05.HPSX = One
                }
            }

            If (((\_SB.PCI0.RP06.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP06.HPSX))
            {
                If (((TBTS != One) || ((TBSE != 0x06) || 
                    (TBS1 != 0x06))))
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP06.PDCX)
                {
                    \_SB.PCI0.RP06.PDCX = One
                    \_SB.PCI0.RP06.HPSX = One
                    If (!\_SB.PCI0.RP06.PDSX)
                    {
                        \_SB.PCI0.RP06.L0SE = Zero
                    }

                    If (((TBTS != One) || ((TBSE != 0x06) || 
                        (TBS1 != 0x06))))
                    {
                        Notify (\_SB.PCI0.RP06, Zero) // Bus Check
                    }
                }
                Else
                {
                    \_SB.PCI0.RP06.HPSX = One
                }
            }

            If (((\_SB.PCI0.RP07.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP07.HPSX))
            {
                If (((TBTS != One) || ((TBSE != 0x07) || 
                    (TBS1 != 0x07))))
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP07.PDCX)
                {
                    \_SB.PCI0.RP07.PDCX = One
                    \_SB.PCI0.RP07.HPSX = One
                    If (!\_SB.PCI0.RP07.PDSX)
                    {
                        \_SB.PCI0.RP07.L0SE = Zero
                    }
                }
                Else
                {
                    \_SB.PCI0.RP07.HPSX = One
                }
            }

            If (((\_SB.PCI0.RP08.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP08.HPSX))
            {
                If (((TBTS != One) || ((TBSE != 0x08) || 
                    (TBS1 != 0x08))))
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP08.PDCX)
                {
                    \_SB.PCI0.RP08.PDCX = One
                    \_SB.PCI0.RP08.HPSX = One
                    If (!\_SB.PCI0.RP08.PDSX)
                    {
                        \_SB.PCI0.RP08.L0SE = Zero
                    }
                }
                Else
                {
                    \_SB.PCI0.RP08.HPSX = One
                }
            }

            If (((\_SB.PCI0.RP09.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP09.HPSX))
            {
                If (((TBTS != One) || ((TBSE != 0x09) || 
                    (TBS1 != 0x09))))
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP09.PDCX)
                {
                    \_SB.PCI0.RP09.PDCX = One
                    \_SB.PCI0.RP09.HPSX = One
                    If (!\_SB.PCI0.RP09.PDSX)
                    {
                        \_SB.PCI0.RP09.L0SE = Zero
                    }

                    If (((TBTS != One) || ((TBSE != 0x09) || 
                        (TBS1 != 0x09))))
                    {
                        Notify (\_SB.PCI0.RP09, Zero) // Bus Check
                    }
                }
                Else
                {
                    \_SB.PCI0.RP09.HPSX = One
                }
            }

            If (((\_SB.PCI0.RP10.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP10.HPSX))
            {
                If (((TBTS != One) || ((TBSE != 0x0A) || 
                    (TBS1 != 0x0A))))
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP10.PDCX)
                {
                    \_SB.PCI0.RP10.PDCX = One
                    \_SB.PCI0.RP10.HPSX = One
                    If (!\_SB.PCI0.RP10.PDSX)
                    {
                        \_SB.PCI0.RP10.L0SE = Zero
                    }

                    If (((TBTS != One) || ((TBSE != 0x0A) || 
                        (TBS1 != 0x0A))))
                    {
                        Notify (\_SB.PCI0.RP10, Zero) // Bus Check
                    }
                }
                Else
                {
                    \_SB.PCI0.RP10.HPSX = One
                }
            }

            If (((\_SB.PCI0.RP11.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP11.HPSX))
            {
                If (((TBTS != One) || ((TBSE != 0x0B) || 
                    (TBS1 != 0x0B))))
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP11.PDCX)
                {
                    \_SB.PCI0.RP11.PDCX = One
                    \_SB.PCI0.RP11.HPSX = One
                    If (!\_SB.PCI0.RP11.PDSX)
                    {
                        \_SB.PCI0.RP11.L0SE = Zero
                    }

                    If (((TBTS != One) || ((TBSE != 0x0B) || 
                        (TBS1 != 0x0B))))
                    {
                        Notify (\_SB.PCI0.RP11, Zero) // Bus Check
                    }
                }
                Else
                {
                    \_SB.PCI0.RP11.HPSX = One
                }
            }

            If (((\_SB.PCI0.RP12.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP12.HPSX))
            {
                If (((TBTS != One) || ((TBSE != 0x0C) || 
                    (TBS1 != 0x0C))))
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP12.PDCX)
                {
                    \_SB.PCI0.RP12.PDCX = One
                    \_SB.PCI0.RP12.HPSX = One
                    If (!\_SB.PCI0.RP12.PDSX)
                    {
                        \_SB.PCI0.RP12.L0SE = Zero
                    }

                    If (((TBTS != One) || ((TBSE != 0x0C) || 
                        (TBS1 != 0x0C))))
                    {
                        Notify (\_SB.PCI0.RP12, Zero) // Bus Check
                    }
                }
                Else
                {
                    \_SB.PCI0.RP12.HPSX = One
                }
            }

            If (((\_SB.PCI0.RP13.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP13.HPSX))
            {
                If (((TBTS != One) || ((TBSE != 0x0D) || 
                    (TBS1 != 0x0D))))
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP13.PDCX)
                {
                    \_SB.PCI0.RP13.PDCX = One
                    \_SB.PCI0.RP13.HPSX = One
                    If (!\_SB.PCI0.RP13.PDSX)
                    {
                        \_SB.PCI0.RP13.L0SE = Zero
                    }

                    If (((TBTS != One) || ((TBSE != 0x0D) || 
                        (TBS1 != 0x0D))))
                    {
                        Notify (\_SB.PCI0.RP13, Zero) // Bus Check
                    }
                }
                Else
                {
                    \_SB.PCI0.RP13.HPSX = One
                }
            }

            If (((\_SB.PCI0.RP14.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP14.HPSX))
            {
                If (((TBTS != One) || ((TBSE != 0x0E) || 
                    (TBS1 != 0x0E))))
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP14.PDCX)
                {
                    \_SB.PCI0.RP14.PDCX = One
                    \_SB.PCI0.RP14.HPSX = One
                    If (!\_SB.PCI0.RP14.PDSX)
                    {
                        \_SB.PCI0.RP14.L0SE = Zero
                    }

                    If (((TBTS != One) || ((TBSE != 0x0E) || 
                        (TBS1 != 0x0E))))
                    {
                        Notify (\_SB.PCI0.RP14, Zero) // Bus Check
                    }
                }
                Else
                {
                    \_SB.PCI0.RP14.HPSX = One
                }
            }

            If (((\_SB.PCI0.RP15.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP15.HPSX))
            {
                If (((TBTS != One) || ((TBSE != 0x0F) || 
                    (TBS1 != 0x0F))))
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP15.PDCX)
                {
                    \_SB.PCI0.RP15.PDCX = One
                    \_SB.PCI0.RP15.HPSX = One
                    If (!\_SB.PCI0.RP15.PDSX)
                    {
                        \_SB.PCI0.RP15.L0SE = Zero
                    }

                    If (((TBTS != One) || ((TBSE != 0x0F) || 
                        (TBS1 != 0x0F))))
                    {
                        Notify (\_SB.PCI0.RP15, Zero) // Bus Check
                    }
                }
                Else
                {
                    \_SB.PCI0.RP15.HPSX = One
                }
            }

            If (((\_SB.PCI0.RP16.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP16.HPSX))
            {
                If (((TBTS != One) || ((TBSE != 0x10) || 
                    (TBS1 != 0x10))))
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP16.PDCX)
                {
                    \_SB.PCI0.RP16.PDCX = One
                    \_SB.PCI0.RP16.HPSX = One
                    If (!\_SB.PCI0.RP16.PDSX)
                    {
                        \_SB.PCI0.RP16.L0SE = Zero
                    }

                    If (((TBTS != One) || ((TBSE != 0x10) || 
                        (TBS1 != 0x10))))
                    {
                        Notify (\_SB.PCI0.RP16, Zero) // Bus Check
                    }
                }
                Else
                {
                    \_SB.PCI0.RP16.HPSX = One
                }
            }

            If (((\_SB.PCI0.RP17.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP17.HPSX))
            {
                If (((TBTS != One) || ((TBSE != 0x11) || 
                    (TBS1 != 0x11))))
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP17.PDCX)
                {
                    \_SB.PCI0.RP17.PDCX = One
                    \_SB.PCI0.RP17.HPSX = One
                    If (!\_SB.PCI0.RP17.PDSX)
                    {
                        \_SB.PCI0.RP17.L0SE = Zero
                    }

                    If (((TBTS != One) || ((TBSE != 0x11) || 
                        (TBS1 != 0x11))))
                    {
                        Notify (\_SB.PCI0.RP17, Zero) // Bus Check
                    }
                }
                Else
                {
                    \_SB.PCI0.RP17.HPSX = One
                }
            }

            If (((\_SB.PCI0.RP18.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP18.HPSX))
            {
                If (((TBTS != One) || ((TBSE != 0x12) || 
                    (TBS1 != 0x12))))
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP18.PDCX)
                {
                    \_SB.PCI0.RP18.PDCX = One
                    \_SB.PCI0.RP18.HPSX = One
                    If (!\_SB.PCI0.RP18.PDSX)
                    {
                        \_SB.PCI0.RP18.L0SE = Zero
                    }

                    If (((TBTS != One) || ((TBSE != 0x12) || 
                        (TBS1 != 0x12))))
                    {
                        Notify (\_SB.PCI0.RP18, Zero) // Bus Check
                    }
                }
                Else
                {
                    \_SB.PCI0.RP18.HPSX = One
                }
            }

            If (((\_SB.PCI0.RP19.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP19.HPSX))
            {
                If (((TBTS != One) || ((TBSE != 0x13) || 
                    (TBS1 != 0x13))))
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP19.PDCX)
                {
                    \_SB.PCI0.RP19.PDCX = One
                    \_SB.PCI0.RP19.HPSX = One
                    If (!\_SB.PCI0.RP19.PDSX)
                    {
                        \_SB.PCI0.RP19.L0SE = Zero
                    }

                    If (((TBTS != One) || ((TBSE != 0x13) || 
                        (TBS1 != 0x13))))
                    {
                        Notify (\_SB.PCI0.RP19, Zero) // Bus Check
                    }
                }
                Else
                {
                    \_SB.PCI0.RP19.HPSX = One
                }
            }

            If (((\_SB.PCI0.RP20.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP20.HPSX))
            {
                If (((TBTS != One) || ((TBSE != 0x14) || 
                    (TBS1 != 0x14))))
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP20.PDCX)
                {
                    \_SB.PCI0.RP20.PDCX = One
                    \_SB.PCI0.RP20.HPSX = One
                    If (!\_SB.PCI0.RP20.PDSX)
                    {
                        \_SB.PCI0.RP20.L0SE = Zero
                    }

                    If (((TBTS != One) || ((TBSE != 0x14) || 
                        (TBS1 != 0x14))))
                    {
                        Notify (\_SB.PCI0.RP20, Zero) // Bus Check
                    }
                }
                Else
                {
                    \_SB.PCI0.RP20.HPSX = One
                }
            }

            If (((\_SB.PCI0.RP21.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP21.HPSX))
            {
                If (((TBTS != One) || ((TBSE != 0x21) || 
                    (TBS1 != 0x21))))
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP21.PDCX)
                {
                    \_SB.PCI0.RP21.PDCX = One
                    \_SB.PCI0.RP21.HPSX = One
                    If (!\_SB.PCI0.RP21.PDSX)
                    {
                        \_SB.PCI0.RP21.L0SE = Zero
                    }

                    If (((TBTS != One) || ((TBSE != 0x21) || 
                        (TBS1 != 0x21))))
                    {
                        Notify (\_SB.PCI0.RP21, Zero) // Bus Check
                    }
                }
                Else
                {
                    \_SB.PCI0.RP21.HPSX = One
                }
            }

            If (((\_SB.PCI0.RP22.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP22.HPSX))
            {
                If (((TBTS != One) || ((TBSE != 0x22) || 
                    (TBS1 != 0x22))))
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP22.PDCX)
                {
                    \_SB.PCI0.RP22.PDCX = One
                    \_SB.PCI0.RP22.HPSX = One
                    If (!\_SB.PCI0.RP22.PDSX)
                    {
                        \_SB.PCI0.RP22.L0SE = Zero
                    }

                    If (((TBTS != One) || ((TBSE != 0x22) || 
                        (TBS1 != 0x22))))
                    {
                        Notify (\_SB.PCI0.RP22, Zero) // Bus Check
                    }
                }
                Else
                {
                    \_SB.PCI0.RP22.HPSX = One
                }
            }

            If (((\_SB.PCI0.RP23.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP23.HPSX))
            {
                If (((TBTS != One) || ((TBSE != 0x23) || 
                    (TBS1 != 0x23))))
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP23.PDCX)
                {
                    \_SB.PCI0.RP23.PDCX = One
                    \_SB.PCI0.RP23.HPSX = One
                    If (!\_SB.PCI0.RP23.PDSX)
                    {
                        \_SB.PCI0.RP23.L0SE = Zero
                    }

                    If (((TBTS != One) || ((TBSE != 0x23) || 
                        (TBS1 != 0x23))))
                    {
                        Notify (\_SB.PCI0.RP23, Zero) // Bus Check
                    }
                }
                Else
                {
                    \_SB.PCI0.RP23.HPSX = One
                }
            }

            If (((\_SB.PCI0.RP24.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP24.HPSX))
            {
                If (((TBTS != One) || ((TBSE != 0x24) || 
                    (TBS1 != 0x24))))
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP24.PDCX)
                {
                    \_SB.PCI0.RP24.PDCX = One
                    \_SB.PCI0.RP24.HPSX = One
                    If (!\_SB.PCI0.RP24.PDSX)
                    {
                        \_SB.PCI0.RP24.L0SE = Zero
                    }

                    If (((TBTS != One) || ((TBSE != 0x24) || 
                        (TBS1 != 0x24))))
                    {
                        Notify (\_SB.PCI0.RP24, Zero) // Bus Check
                    }
                }
                Else
                {
                    \_SB.PCI0.RP24.HPSX = One
                }
            }
        }

        Method (_L62, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            GPEC = Zero
            If (CondRefOf (\_PR.DTSE))
            {
                If ((\_PR.DTSE >= One))
                {
                    If ((\_PR.DTSI == One))
                    {
                        \_PR.DTSI = Zero
                    }
                }
            }

            If ((\_PR.HWPI == One))
            {
                If (CondRefOf (\_GPE.HLVT))
                {
                    HLVT ()
                }

                \_PR.HWPI = Zero
            }
        }

        Method (_L66, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            If ((\_SB.PCI0.GFX0.GSSE && !GSMI))
            {
                \_SB.PCI0.GFX0.GSCI ()
            }
        }

        Method (_L68, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            ADBG ("Error: Unexpected _L68 event")
        }

        Name (PRES, One)
        Method (_L6F, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            If ((RTD3 == One))
            {
                If (CondRefOf (\_GPE.AL6F))
                {
                    AL6F ()
                }
            }

            ADBG ("Unexpected 2-tier GPE event occurred")
        }

        Method (_L4F, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            ADBG ("_L4F")
            If ((\_SB.GGIV (0x0204000F) == Zero))
            {
                \_SB.SGII (0x0204000F, Zero)
                Local0 = One
            }
            Else
            {
                \_SB.SGII (0x0204000F, One)
                Local0 = Zero
            }

            If ((LIDS != Local0))
            {
                LIDS = Local0
                If (IGDS)
                {
                    If (\_SB.PCI0.GFX0.GLID (LIDS))
                    {
                        \_SB.PCI0.GFX0.CLID |= 0x80000000 /* External reference */
                    }
                }

                Notify (\_SB.LID0, 0x80) // Status Change
            }
        }

        Method (_L0F, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.RP04.PXSX, 0x02) // Device Wake
        }
    }

    Scope (_SB.PCI0.GFX0)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If (((S0ID == One) || (OSYS >= 0x07DF)))
            {
                Return (Package (0x01)
                {
                    PEPD
                })
            }
            Else
            {
                Return (Package (0x00) {})
            }
        }
    }

    Scope (_SB.PCI0.ISP0)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If (((S0ID == One) || (OSYS >= 0x07DF)))
            {
                Return (Package (0x01)
                {
                    PEPD
                })
            }
            Else
            {
                Return (Package (0x00) {})
            }
        }
    }

    Scope (_SB.PCI0.SAT0)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If ((((S0ID == One) || (OSYS >= 0x07DF)) && ((
                PEPC & 0x00300000) == 0x00200000)))
            {
                Return (Package (0x01)
                {
                    PEPD
                })
            }
            Else
            {
                Return (Package (0x00) {})
            }
        }
    }

    If (((S0ID == One) || (OSYS >= 0x07DF)))
    {
        Scope (_SB.PCI0.I2C0)
        {
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                PEPD
            })
        }

        Scope (_SB.PCI0.I2C1)
        {
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                PEPD
            })
        }

        Scope (_SB.PCI0.I2C2)
        {
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                PEPD
            })
        }

        Scope (_SB.PCI0.I2C3)
        {
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                PEPD
            })
        }

        Scope (_SB.PCI0.I2C4)
        {
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                PEPD
            })
        }

        Scope (_SB.PCI0.I2C5)
        {
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                PEPD
            })
        }

        Scope (_SB.PCI0.SPI0)
        {
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                PEPD
            })
        }

        Scope (_SB.PCI0.SPI1)
        {
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                PEPD
            })
        }

        Scope (_SB.PCI0.UA00)
        {
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                PEPD
            })
        }

        Scope (_SB.PCI0.UA01)
        {
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                PEPD
            })
        }

        Scope (_SB.PCI0.UA02)
        {
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                PEPD
            })
        }

        Scope (_SB.PCI0.HECI)
        {
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                PEPD
            })
        }
    }

    Scope (_SB.PCI0.XHC)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If (((S0ID == One) || (OSYS >= 0x07DF)))
            {
                Return (Package (0x01)
                {
                    PEPD
                })
            }
            Else
            {
                Return (Package (0x00) {})
            }
        }
    }

    Scope (_SB.PCI0.HDAS)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If ((S0ID == One))
            {
                Return (Package (0x01)
                {
                    PEPD
                })
            }
            Else
            {
                Return (Package (0x00) {})
            }
        }
    }

    Scope (_SB.PCI0.RP01.PXSX)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If ((PAHC () || PNVM ()))
            {
                If ((((S0ID == One) || (OSYS >= 0x07DF)) && ((
                    (PEPC & 0x0400) == 0x0400) || ((PEPC & 0x0800) == 0x0800))))
                {
                    Return (Package (0x01)
                    {
                        PEPD
                    })
                }
            }

            Return (Package (0x00) {})
        }

        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    Scope (_SB.PCI0.RP02.PXSX)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If ((PAHC () || PNVM ()))
            {
                If ((((S0ID == One) || (OSYS >= 0x07DF)) && ((
                    (PEPC & 0x0400) == 0x0400) || ((PEPC & 0x0800) == 0x0800))))
                {
                    Return (Package (0x01)
                    {
                        PEPD
                    })
                }
            }

            Return (Package (0x00) {})
        }

        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    Scope (_SB.PCI0.RP03.PXSX)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If ((PAHC () || PNVM ()))
            {
                If ((((S0ID == One) || (OSYS >= 0x07DF)) && ((
                    (PEPC & 0x0400) == 0x0400) || ((PEPC & 0x0800) == 0x0800))))
                {
                    Return (Package (0x01)
                    {
                        PEPD
                    })
                }
            }

            Return (Package (0x00) {})
        }

        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    Scope (_SB.PCI0.RP04.PXSX)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If ((PAHC () || PNVM ()))
            {
                If ((((S0ID == One) || (OSYS >= 0x07DF)) && ((
                    (PEPC & 0x0400) == 0x0400) || ((PEPC & 0x0800) == 0x0800))))
                {
                    Return (Package (0x01)
                    {
                        PEPD
                    })
                }
            }

            Return (Package (0x00) {})
        }

        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    Scope (_SB.PCI0.RP05.PXSX)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If ((PAHC () || PNVM ()))
            {
                If ((((S0ID == One) || (OSYS >= 0x07DF)) && ((
                    (PEPC & 0x0400) == 0x0400) || ((PEPC & 0x0800) == 0x0800))))
                {
                    Return (Package (0x01)
                    {
                        PEPD
                    })
                }
            }

            Return (Package (0x00) {})
        }

        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    Scope (_SB.PCI0.RP06.PXSX)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If ((PAHC () || PNVM ()))
            {
                If ((((S0ID == One) || (OSYS >= 0x07DF)) && ((
                    (PEPC & 0x0400) == 0x0400) || ((PEPC & 0x0800) == 0x0800))))
                {
                    Return (Package (0x01)
                    {
                        PEPD
                    })
                }
            }

            Return (Package (0x00) {})
        }

        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    Scope (_SB.PCI0.RP07.PXSX)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If ((PAHC () || PNVM ()))
            {
                If ((((S0ID == One) || (OSYS >= 0x07DF)) && ((
                    (PEPC & 0x0400) == 0x0400) || ((PEPC & 0x0800) == 0x0800))))
                {
                    Return (Package (0x01)
                    {
                        PEPD
                    })
                }
            }

            Return (Package (0x00) {})
        }

        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    Scope (_SB.PCI0.RP08.PXSX)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If ((PAHC () || PNVM ()))
            {
                If ((((S0ID == One) || (OSYS >= 0x07DF)) && ((
                    (PEPC & 0x0400) == 0x0400) || ((PEPC & 0x0800) == 0x0800))))
                {
                    Return (Package (0x01)
                    {
                        PEPD
                    })
                }
            }

            Return (Package (0x00) {})
        }

        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    Scope (_SB.PCI0.RP09.PXSX)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If ((PAHC () || PNVM ()))
            {
                If ((((S0ID == One) || (OSYS >= 0x07DF)) && ((
                    (PEPC & 0x0400) == 0x0400) || ((PEPC & 0x0800) == 0x0800))))
                {
                    Return (Package (0x01)
                    {
                        PEPD
                    })
                }
            }

            Return (Package (0x00) {})
        }

        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    Scope (_SB.PCI0.RP10.PXSX)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If ((PAHC () || PNVM ()))
            {
                If ((((S0ID == One) || (OSYS >= 0x07DF)) && ((
                    (PEPC & 0x0400) == 0x0400) || ((PEPC & 0x0800) == 0x0800))))
                {
                    Return (Package (0x01)
                    {
                        PEPD
                    })
                }
            }

            Return (Package (0x00) {})
        }

        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    Scope (_SB.PCI0.RP11.PXSX)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If ((PAHC () || PNVM ()))
            {
                If ((((S0ID == One) || (OSYS >= 0x07DF)) && ((
                    (PEPC & 0x0400) == 0x0400) || ((PEPC & 0x0800) == 0x0800))))
                {
                    Return (Package (0x01)
                    {
                        PEPD
                    })
                }
            }

            Return (Package (0x00) {})
        }

        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    Scope (_SB.PCI0.RP12.PXSX)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If ((PAHC () || PNVM ()))
            {
                If ((((S0ID == One) || (OSYS >= 0x07DF)) && ((
                    (PEPC & 0x0400) == 0x0400) || ((PEPC & 0x0800) == 0x0800))))
                {
                    Return (Package (0x01)
                    {
                        PEPD
                    })
                }
            }

            Return (Package (0x00) {})
        }

        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    Scope (_SB.PCI0.RP13.PXSX)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If ((PAHC () || PNVM ()))
            {
                If ((((S0ID == One) || (OSYS >= 0x07DF)) && ((
                    (PEPC & 0x0400) == 0x0400) || ((PEPC & 0x0800) == 0x0800))))
                {
                    Return (Package (0x01)
                    {
                        PEPD
                    })
                }
            }

            Return (Package (0x00) {})
        }

        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    Scope (_SB.PCI0.RP14.PXSX)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If ((PAHC () || PNVM ()))
            {
                If ((((S0ID == One) || (OSYS >= 0x07DF)) && ((
                    (PEPC & 0x0400) == 0x0400) || ((PEPC & 0x0800) == 0x0800))))
                {
                    Return (Package (0x01)
                    {
                        PEPD
                    })
                }
            }

            Return (Package (0x00) {})
        }

        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    Scope (_SB.PCI0.RP15.PXSX)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If ((PAHC () || PNVM ()))
            {
                If ((((S0ID == One) || (OSYS >= 0x07DF)) && ((
                    (PEPC & 0x0400) == 0x0400) || ((PEPC & 0x0800) == 0x0800))))
                {
                    Return (Package (0x01)
                    {
                        PEPD
                    })
                }
            }

            Return (Package (0x00) {})
        }

        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    Scope (_SB.PCI0.RP16.PXSX)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If ((PAHC () || PNVM ()))
            {
                If ((((S0ID == One) || (OSYS >= 0x07DF)) && ((
                    (PEPC & 0x0400) == 0x0400) || ((PEPC & 0x0800) == 0x0800))))
                {
                    Return (Package (0x01)
                    {
                        PEPD
                    })
                }
            }

            Return (Package (0x00) {})
        }

        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    Scope (_SB.PCI0.RP17.PXSX)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If ((PAHC () || PNVM ()))
            {
                If ((((S0ID == One) || (OSYS >= 0x07DF)) && ((
                    (PEPC & 0x0400) == 0x0400) || ((PEPC & 0x0800) == 0x0800))))
                {
                    Return (Package (0x01)
                    {
                        PEPD
                    })
                }
            }

            Return (Package (0x00) {})
        }

        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    Scope (_SB.PCI0.RP18.PXSX)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If ((PAHC () || PNVM ()))
            {
                If ((((S0ID == One) || (OSYS >= 0x07DF)) && ((
                    (PEPC & 0x0400) == 0x0400) || ((PEPC & 0x0800) == 0x0800))))
                {
                    Return (Package (0x01)
                    {
                        PEPD
                    })
                }
            }

            Return (Package (0x00) {})
        }

        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    Scope (_SB.PCI0.RP19.PXSX)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If ((PAHC () || PNVM ()))
            {
                If ((((S0ID == One) || (OSYS >= 0x07DF)) && ((
                    (PEPC & 0x0400) == 0x0400) || ((PEPC & 0x0800) == 0x0800))))
                {
                    Return (Package (0x01)
                    {
                        PEPD
                    })
                }
            }

            Return (Package (0x00) {})
        }

        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    Scope (_SB.PCI0.RP20.PXSX)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If ((PAHC () || PNVM ()))
            {
                If ((((S0ID == One) || (OSYS >= 0x07DF)) && ((
                    (PEPC & 0x0400) == 0x0400) || ((PEPC & 0x0800) == 0x0800))))
                {
                    Return (Package (0x01)
                    {
                        PEPD
                    })
                }
            }

            Return (Package (0x00) {})
        }

        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    Scope (_PR.PR00)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If (((S0ID == One) || (OSYS >= 0x07DF)))
            {
                Return (Package (0x01)
                {
                    \_SB.PEPD
                })
            }
            Else
            {
                Return (Package (0x00) {})
            }
        }
    }

    Scope (_PR.PR01)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If (((S0ID == One) || (OSYS >= 0x07DF)))
            {
                Return (Package (0x01)
                {
                    \_SB.PEPD
                })
            }
            Else
            {
                Return (Package (0x00) {})
            }
        }
    }

    Scope (_PR.PR02)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If (((S0ID == One) || (OSYS >= 0x07DF)))
            {
                Return (Package (0x01)
                {
                    \_SB.PEPD
                })
            }
            Else
            {
                Return (Package (0x00) {})
            }
        }
    }

    Scope (_PR.PR03)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            ADBG ("PR03 DEP Call")
            If (((S0ID == One) || (OSYS >= 0x07DF)))
            {
                Return (Package (0x01)
                {
                    \_SB.PEPD
                })
            }
            Else
            {
                Return (Package (0x00) {})
            }
        }
    }

    Scope (_PR.PR04)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If (((S0ID == One) || (OSYS >= 0x07DF)))
            {
                Return (Package (0x01)
                {
                    \_SB.PEPD
                })
            }
            Else
            {
                Return (Package (0x00) {})
            }
        }
    }

    Scope (_PR.PR05)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If (((S0ID == One) || (OSYS >= 0x07DF)))
            {
                Return (Package (0x01)
                {
                    \_SB.PEPD
                })
            }
            Else
            {
                Return (Package (0x00) {})
            }
        }
    }

    Scope (_PR.PR06)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If (((S0ID == One) || (OSYS >= 0x07DF)))
            {
                Return (Package (0x01)
                {
                    \_SB.PEPD
                })
            }
            Else
            {
                Return (Package (0x00) {})
            }
        }
    }

    Scope (_PR.PR07)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If (((S0ID == One) || (OSYS >= 0x07DF)))
            {
                Return (Package (0x01)
                {
                    \_SB.PEPD
                })
            }
            Else
            {
                Return (Package (0x00) {})
            }
        }
    }

    Scope (_PR.PR08)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If (((S0ID == One) || (OSYS >= 0x07DF)))
            {
                Return (Package (0x01)
                {
                    \_SB.PEPD
                })
            }
            Else
            {
                Return (Package (0x00) {})
            }
        }
    }

    Scope (_PR.PR09)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If (((S0ID == One) || (OSYS >= 0x07DF)))
            {
                Return (Package (0x01)
                {
                    \_SB.PEPD
                })
            }
            Else
            {
                Return (Package (0x00) {})
            }
        }
    }

    Scope (_PR.PR10)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If (((S0ID == One) || (OSYS >= 0x07DF)))
            {
                Return (Package (0x01)
                {
                    \_SB.PEPD
                })
            }
            Else
            {
                Return (Package (0x00) {})
            }
        }
    }

    Scope (_PR.PR11)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If (((S0ID == One) || (OSYS >= 0x07DF)))
            {
                Return (Package (0x01)
                {
                    \_SB.PEPD
                })
            }
            Else
            {
                Return (Package (0x00) {})
            }
        }
    }

    Scope (_PR.PR12)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If (((S0ID == One) || (OSYS >= 0x07DF)))
            {
                Return (Package (0x01)
                {
                    \_SB.PEPD
                })
            }
            Else
            {
                Return (Package (0x00) {})
            }
        }
    }

    Scope (_PR.PR13)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If (((S0ID == One) || (OSYS >= 0x07DF)))
            {
                Return (Package (0x01)
                {
                    \_SB.PEPD
                })
            }
            Else
            {
                Return (Package (0x00) {})
            }
        }
    }

    Scope (_PR.PR14)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If (((S0ID == One) || (OSYS >= 0x07DF)))
            {
                Return (Package (0x01)
                {
                    \_SB.PEPD
                })
            }
            Else
            {
                Return (Package (0x00) {})
            }
        }
    }

    Scope (_PR.PR15)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If (((S0ID == One) || (OSYS >= 0x07DF)))
            {
                Return (Package (0x01)
                {
                    \_SB.PEPD
                })
            }
            Else
            {
                Return (Package (0x00) {})
            }
        }
    }

    Scope (_SB)
    {
        Device (PEPD)
        {
            Name (_HID, "INT33A1" /* Intel Power Engine */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0D80") /* Windows-compatible System Power Management Controller */)  // _CID: Compatible ID
            Name (_UID, One)  // _UID: Unique ID
            Name (DEVY, Package (0x42)
            {
                Package (0x03)
                {
                    "\\_PR.PR00", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_PR.PR01", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_PR.PR02", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_PR.PR03", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_PR.PR04", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_PR.PR05", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_PR.PR06", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_PR.PR07", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.GFX0", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.SAT0", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.UA00", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.UA01", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.I2C0", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.I2C1", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.XHC", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.HDAS", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.PEMC", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.PSDC", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.I2C2", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.I2C3", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.I2C4", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.I2C5", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.UA02", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.SPI0", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.SPI1", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP01.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP02.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP03.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP04.PXSX", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP05.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP06.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP07.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP08.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP09.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP10.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP11.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP12.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP13.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP14.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP15.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP16.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP17.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP18.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP19.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP20.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB._SSH", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.ISP0", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.SAT0.PRT0", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.SAT0.PRT1", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.SAT0.PRT2", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.SAT0.PRT3", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.SAT0.PRT4", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.SAT0.PRT5", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.SAT0.NVM1", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.SAT0.NVM2", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.SAT0.NVM3", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.SAT0.VOL0", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_PR.PR08", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_PR.PR09", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_PR.PR10", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_PR.PR11", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_PR.PR12", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_PR.PR13", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_PR.PR14", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_PR.PR15", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.HECI", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }
            })
            Name (BCCD, Package (0x01)
            {
                Package (0x02)
                {
                    "\\_SB.PCI0.ASL_PCI_RP_SSDBGA1.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((OSYS >= 0x07DF) || ((OSYS >= 0x07DC) && (
                    S0ID == One))))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("c4eb40a0-6cd2-11e2-bcfd-0800200c9a66") /* Unknown UUID */))
                {
                    If ((Arg2 == Zero))
                    {
                        Return (Buffer (One)
                        {
                             0x7F                                             // .
                        })
                    }

                    If ((Arg2 == One))
                    {
                        If ((S0ID == Zero))
                        {
                            Return (Package (0x00) {})
                        }

                        If (((PEPC & 0x00100000) != Zero))
                        {
                            If ((^^PCI0.RP09.PXSX.PAHC () || ^^PCI0.RP09.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x21]) [One] = One
                            }

                            If ((^^PCI0.RP05.PXSX.PAHC () || ^^PCI0.RP05.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x1D]) [One] = One
                            }

                            If (((EBID & 0x20) == Zero))
                            {
                                If ((^^PCI0.RP01.PXSX.PAHC () || ^^PCI0.RP01.PXSX.PNVM ()))
                                {
                                    DerefOf (DEVY [0x19]) [One] = One
                                }
                            }
                        }

                        If (((PEPC & 0x00300000) == 0x00200000))
                        {
                            If ((SPST != Zero))
                            {
                                DerefOf (DEVY [0x09]) [One] = One
                            }
                        }

                        If (((PEPC & 0x00400000) != Zero))
                        {
                            DerefOf (DEVY [0x2F]) [One] = One
                        }

                        If (((PEPC & 0x00800000) != Zero))
                        {
                            DerefOf (DEVY [0x30]) [One] = One
                        }

                        If (((PEPC & 0x01000000) != Zero))
                        {
                            DerefOf (DEVY [0x31]) [One] = One
                        }

                        If (((PEPC & 0x02000000) != Zero))
                        {
                            DerefOf (DEVY [0x32]) [One] = One
                        }

                        If (((PEPC & 0x04000000) != Zero))
                        {
                            DerefOf (DEVY [0x33]) [One] = One
                        }

                        If (((PEPC & 0x08000000) != Zero))
                        {
                            DerefOf (DEVY [0x34]) [One] = One
                        }

                        If (((PEPC & 0x10000000) != Zero))
                        {
                            DerefOf (DEVY [0x35]) [One] = One
                        }

                        If (((PEPC & 0x20000000) != Zero))
                        {
                            DerefOf (DEVY [0x36]) [One] = One
                        }

                        If (((PEPC & 0x40000000) != Zero))
                        {
                            DerefOf (DEVY [0x37]) [One] = One
                        }

                        If (((PEPC & 0x80000000) == Zero))
                        {
                            DerefOf (DEVY [0x41]) [One] = Zero
                        }

                        If (((PEPC & 0x04) == Zero))
                        {
                            DerefOf (DEVY [0x0A]) [One] = Zero
                        }

                        If (((PEPC & 0x08) == Zero))
                        {
                            DerefOf (DEVY [0x0B]) [One] = Zero
                        }

                        If (((PEPC & 0x10) == Zero)) {}
                        If (((PEPC & 0x20) == Zero))
                        {
                            DerefOf (DEVY [0x0C]) [One] = Zero
                        }

                        If (((PEPC & 0x40) == Zero))
                        {
                            DerefOf (DEVY [0x0D]) [One] = Zero
                        }

                        If (((PEPC & 0x80) == Zero))
                        {
                            DerefOf (DEVY [0x0E]) [One] = Zero
                        }

                        If (((PEPC & 0x0100) == Zero))
                        {
                            DerefOf (DEVY [0x0F]) [One] = Zero
                        }
                        ElseIf ((^^PCI0.HDAS.VDID == 0xFFFFFFFF))
                        {
                            DerefOf (DEVY [0x0F]) [One] = Zero
                        }

                        If (((PEPC & 0x0200) == Zero))
                        {
                            DerefOf (DEVY [0x08]) [One] = Zero
                        }

                        If ((TCNT >= One))
                        {
                            DerefOf (DEVY [Zero]) [One] = One
                        }

                        If ((TCNT >= 0x02))
                        {
                            DerefOf (DEVY [One]) [One] = One
                        }

                        If ((TCNT >= 0x03))
                        {
                            DerefOf (DEVY [0x02]) [One] = One
                        }

                        If ((TCNT >= 0x04))
                        {
                            DerefOf (DEVY [0x03]) [One] = One
                        }

                        If ((TCNT >= 0x05))
                        {
                            DerefOf (DEVY [0x04]) [One] = One
                        }

                        If ((TCNT >= 0x06))
                        {
                            DerefOf (DEVY [0x05]) [One] = One
                        }

                        If ((TCNT >= 0x07))
                        {
                            DerefOf (DEVY [0x06]) [One] = One
                        }

                        If ((TCNT >= 0x08))
                        {
                            DerefOf (DEVY [0x07]) [One] = One
                        }

                        If ((TCNT >= 0x09))
                        {
                            DerefOf (DEVY [0x39]) [One] = One
                        }

                        If ((TCNT >= 0x0A))
                        {
                            DerefOf (DEVY [0x3A]) [One] = One
                        }

                        If ((TCNT >= 0x0B))
                        {
                            DerefOf (DEVY [0x3B]) [One] = One
                        }

                        If ((TCNT >= 0x0C))
                        {
                            DerefOf (DEVY [0x3C]) [One] = One
                        }

                        If ((TCNT >= 0x0D))
                        {
                            DerefOf (DEVY [0x3D]) [One] = One
                        }

                        If ((TCNT >= 0x0E))
                        {
                            DerefOf (DEVY [0x3E]) [One] = One
                        }

                        If ((TCNT >= 0x0F))
                        {
                            DerefOf (DEVY [0x3F]) [One] = One
                        }

                        If ((TCNT >= 0x10))
                        {
                            DerefOf (DEVY [0x40]) [One] = One
                        }

                        If (((PEPC & 0x0400) == Zero))
                        {
                            DerefOf (DEVY [Zero]) [One] = Zero
                            DerefOf (DEVY [One]) [One] = Zero
                            DerefOf (DEVY [0x02]) [One] = Zero
                            DerefOf (DEVY [0x03]) [One] = Zero
                            DerefOf (DEVY [0x04]) [One] = Zero
                            DerefOf (DEVY [0x05]) [One] = Zero
                            DerefOf (DEVY [0x06]) [One] = Zero
                            DerefOf (DEVY [0x07]) [One] = Zero
                            DerefOf (DEVY [0x39]) [One] = Zero
                            DerefOf (DEVY [0x3A]) [One] = Zero
                            DerefOf (DEVY [0x3B]) [One] = Zero
                            DerefOf (DEVY [0x3C]) [One] = Zero
                            DerefOf (DEVY [0x3D]) [One] = Zero
                            DerefOf (DEVY [0x3E]) [One] = Zero
                            DerefOf (DEVY [0x3F]) [One] = Zero
                            DerefOf (DEVY [0x40]) [One] = Zero
                        }

                        If (((PEPC & 0x0800) == Zero))
                        {
                            DerefOf (DEVY [0x10]) [One] = Zero
                        }

                        If (((PEPC & 0x1000) == Zero))
                        {
                            DerefOf (DEVY [0x11]) [One] = Zero
                        }

                        If (((PEPC & 0x2000) == Zero))
                        {
                            DerefOf (DEVY [0x12]) [One] = Zero
                        }

                        If (((PEPC & 0x4000) == Zero))
                        {
                            DerefOf (DEVY [0x13]) [One] = Zero
                        }

                        If (((PEPC & 0x8000) == Zero))
                        {
                            DerefOf (DEVY [0x14]) [One] = Zero
                        }

                        If (((PEPC & 0x00010000) == Zero))
                        {
                            DerefOf (DEVY [0x15]) [One] = Zero
                        }

                        If (((PEPC & 0x00020000) == Zero))
                        {
                            DerefOf (DEVY [0x16]) [One] = Zero
                        }

                        If (((PEPC & 0x00040000) == Zero))
                        {
                            DerefOf (DEVY [0x17]) [One] = Zero
                        }

                        If (((PEPC & 0x00080000) == Zero))
                        {
                            DerefOf (DEVY [0x18]) [One] = Zero
                        }

                        If (((PEPC & 0x02) == Zero))
                        {
                            DerefOf (DEVY [0x2E]) [One] = Zero
                        }

                        If ((^^PCI0.RP04.VDID == 0xFFFFFFFF))
                        {
                            DerefOf (DEVY [0x1C]) [One] = Zero
                        }
                        Else
                        {
                            DerefOf (DEVY [0x1C]) [One] = One
                        }

                        Return (DEVY) /* \_SB_.PEPD.DEVY */
                    }

                    If ((Arg2 == 0x02))
                    {
                        UDB0 ("uPEP DSM: Function 2: Return BCCD\n")
                        Return (BCCD) /* \_SB_.PEPD.BCCD */
                    }

                    If ((Arg2 == 0x03)) {}
                    If ((Arg2 == 0x04)) {}
                    If ((Arg2 == 0x05))
                    {
                        UDB0 ("uPEP DSM: Function 5: Enter resiliency\n")
                        If ((S0ID == One))
                        {
                            GUAM (One)
                        }
                    }

                    If ((Arg2 == 0x06))
                    {
                        UDB0 ("uPEP DSM: Function 6: Exit resiliency\n")
                        If ((S0ID == One))
                        {
                            GUAM (Zero)
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }

    Scope (_SB.PCI0.HDAS)
    {
        Method (PPMS, 1, Serialized)
        {
            If ((Arg0 == ToUUID ("7c708106-3aff-40fe-88be-8c999b3f7445") /* Unknown UUID */))
            {
                Return ((ADPM & 0x04))
            }

            If ((Arg0 == ToUUID ("e0e018a8-3550-4b54-a8d0-a8e05d0fcba2") /* Unknown UUID */))
            {
                Return ((ADPM & 0x08))
            }

            If ((Arg0 == ToUUID ("ec774fa9-28d3-424a-90e4-69f984f1eeb7") /* Unknown UUID */))
            {
                Return ((ADPM & 0x0100))
            }

            If ((Arg0 == ACCG (AG1L, AG1H)))
            {
                Return ((ADPM & 0x20000000))
            }

            If ((Arg0 == ACCG (AG2L, AG2H)))
            {
                Return ((ADPM & 0x40000000))
            }

            If ((Arg0 == ACCG (AG3L, AG3H)))
            {
                Return ((ADPM & 0x80000000))
            }

            Return (Zero)
        }

        Method (ACCG, 2, Serialized)
        {
            Name (GBUF, Buffer (0x10) {})
            Concatenate (Arg0, Arg1, GBUF) /* \_SB_.PCI0.HDAS.ACCG.GBUF */
            Return (GBUF) /* \_SB_.PCI0.HDAS.ACCG.GBUF */
        }
    }

    Name (_S0, Package (0x04)  // _S0_: S0 System State
    {
        Zero, 
        Zero, 
        Zero, 
        Zero
    })
    If (SS1)
    {
        Name (_S1, Package (0x04)  // _S1_: S1 System State
        {
            One, 
            Zero, 
            Zero, 
            Zero
        })
    }

    If (SS3)
    {
        Name (_S3, Package (0x04)  // _S3_: S3 System State
        {
            0x05, 
            Zero, 
            Zero, 
            Zero
        })
    }

    If (SS4)
    {
        Name (_S4, Package (0x04)  // _S4_: S4 System State
        {
            0x06, 
            Zero, 
            Zero, 
            Zero
        })
    }

    Name (_S5, Package (0x04)  // _S5_: S5 System State
    {
        0x07, 
        Zero, 
        Zero, 
        Zero
    })
    Method (PTS, 1, NotSerialized)
    {
        If (Arg0) {}
    }

    Method (WAK, 1, NotSerialized)
    {
    }

    Device (MTEI)
    {
        Name (_HID, "MSHW0008")  // _HID: Hardware ID
        Name (_CID, "PNP0C14" /* Windows Management Instrumentation Device */)  // _CID: Compatible ID
        Name (_UID, One)  // _UID: Unique ID
        Name (_WDG, Buffer (0x14)
        {
            /* 0000 */  0xED, 0x25, 0xCC, 0xF7, 0x0B, 0xD2, 0x4C, 0x40,  // .%....L@
            /* 0008 */  0x89, 0x03, 0x0E, 0xD4, 0x35, 0x9C, 0x18, 0xAE,  // ....5...
            /* 0010 */  0x43, 0x44, 0x01, 0x01                           // CD..
        })
        Method (WQCD, 1, NotSerialized)
        {
            If ((\_SB.GGIV (0x02020005) == Zero))
            {
                Return (One)
            }
            Else
            {
                Return (Zero)
            }
        }
    }
}



FACP
----
[000h 0000   4]                    Signature : "FACP"    [Fixed ACPI Description Table (FADT)]
[004h 0004   4]                 Table Length : 0000010C
[008h 0008   1]                     Revision : 05
[009h 0009   1]                     Checksum : 70
[00Ah 0010   6]                       Oem ID : "MSFT  "
[010h 0016   8]                 Oem Table ID : "MSFT    "
[018h 0024   4]                 Oem Revision : 00000000
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 0000005F

[024h 0036   4]                 FACS Address : 8BE88000
[028h 0040   4]                 DSDT Address : 8BEC2000
[02Ch 0044   1]                        Model : 00
[02Dh 0045   1]                   PM Profile : 08 [Tablet]
[02Eh 0046   2]                SCI Interrupt : 0009
[030h 0048   4]             SMI Command Port : 000000B2
[034h 0052   1]            ACPI Enable Value : F0
[035h 0053   1]           ACPI Disable Value : F1
[036h 0054   1]               S4BIOS Command : F2
[037h 0055   1]              P-State Control : 00
[038h 0056   4]     PM1A Event Block Address : 00001800
[03Ch 0060   4]     PM1B Event Block Address : 00000000
[040h 0064   4]   PM1A Control Block Address : 00001804
[044h 0068   4]   PM1B Control Block Address : 00000000
[048h 0072   4]    PM2 Control Block Address : 00001850
[04Ch 0076   4]       PM Timer Block Address : 00001808
[050h 0080   4]           GPE0 Block Address : 00001880
[054h 0084   4]           GPE1 Block Address : 00000000
[058h 0088   1]       PM1 Event Block Length : 04
[059h 0089   1]     PM1 Control Block Length : 02
[05Ah 0090   1]     PM2 Control Block Length : 01
[05Bh 0091   1]        PM Timer Block Length : 04
[05Ch 0092   1]            GPE0 Block Length : 20
[05Dh 0093   1]            GPE1 Block Length : 00
[05Eh 0094   1]             GPE1 Base Offset : 10
[05Fh 0095   1]                 _CST Support : 00
[060h 0096   2]                   C2 Latency : 0065
[062h 0098   2]                   C3 Latency : 03E9
[064h 0100   2]               CPU Cache Size : 0000
[066h 0102   2]           Cache Flush Stride : 0000
[068h 0104   1]            Duty Cycle Offset : 01
[069h 0105   1]             Duty Cycle Width : 03
[06Ah 0106   1]          RTC Day Alarm Index : 0D
[06Bh 0107   1]        RTC Month Alarm Index : 00
[06Ch 0108   1]            RTC Century Index : 32
[06Dh 0109   2]   Boot Flags (decoded below) : 0001
               Legacy Devices Supported (V2) : 1
            8042 Present on ports 60/64 (V2) : 0
                        VGA Not Present (V4) : 0
                      MSI Not Supported (V4) : 0
                PCIe ASPM Not Supported (V4) : 0
                   CMOS RTC Not Present (V5) : 0
[06Fh 0111   1]                     Reserved : 00
[070h 0112   4]        Flags (decoded below) : 0020C4B5
      WBINVD instruction is operational (V1) : 1
              WBINVD flushes all caches (V1) : 0
                    All CPUs support C1 (V1) : 1
                  C2 works on MP system (V1) : 0
            Control Method Power Button (V1) : 1
            Control Method Sleep Button (V1) : 1
        RTC wake not in fixed reg space (V1) : 0
            RTC can wake system from S4 (V1) : 1
                        32-bit PM Timer (V1) : 0
                      Docking Supported (V1) : 0
               Reset Register Supported (V2) : 1
                            Sealed Case (V3) : 0
                    Headless - No Video (V3) : 0
        Use native instr after SLP_TYPx (V3) : 0
              PCIEXP_WAK Bits Supported (V4) : 1
                     Use Platform Timer (V4) : 1
               RTC_STS valid on S4 wake (V4) : 0
                Remote Power-on capable (V4) : 0
                 Use APIC Cluster Model (V4) : 0
     Use APIC Physical Destination Mode (V4) : 0
                       Hardware Reduced (V5) : 0
                      Low Power S0 Idle (V5) : 1

[074h 0116  12]               Reset Register : [Generic Address Structure]
[074h 0116   1]                     Space ID : 01 [SystemIO]
[075h 0117   1]                    Bit Width : 08
[076h 0118   1]                   Bit Offset : 00
[077h 0119   1]         Encoded Access Width : 01 [Byte Access:8]
[078h 0120   8]                      Address : 0000000000000CF9

[080h 0128   1]         Value to cause reset : 06
[081h 0129   2]    ARM Flags (decoded below) : 0000
                              PSCI Compliant : 0
                       Must use HVC for PSCI : 0

[083h 0131   1]          FADT Minor Revision : 00
[084h 0132   8]                 FACS Address : 0000000000000000
[08Ch 0140   8]                 DSDT Address : 000000008BEC2000
[094h 0148  12]             PM1A Event Block : [Generic Address Structure]
[094h 0148   1]                     Space ID : 01 [SystemIO]
[095h 0149   1]                    Bit Width : 20
[096h 0150   1]                   Bit Offset : 00
[097h 0151   1]         Encoded Access Width : 02 [Word Access:16]
[098h 0152   8]                      Address : 0000000000001800

[0A0h 0160  12]             PM1B Event Block : [Generic Address Structure]
[0A0h 0160   1]                     Space ID : 01 [SystemIO]
[0A1h 0161   1]                    Bit Width : 00
[0A2h 0162   1]                   Bit Offset : 00
[0A3h 0163   1]         Encoded Access Width : 02 [Word Access:16]
[0A4h 0164   8]                      Address : 0000000000000000

[0ACh 0172  12]           PM1A Control Block : [Generic Address Structure]
[0ACh 0172   1]                     Space ID : 01 [SystemIO]
[0ADh 0173   1]                    Bit Width : 10
[0AEh 0174   1]                   Bit Offset : 00
[0AFh 0175   1]         Encoded Access Width : 02 [Word Access:16]
[0B0h 0176   8]                      Address : 0000000000001804

[0B8h 0184  12]           PM1B Control Block : [Generic Address Structure]
[0B8h 0184   1]                     Space ID : 01 [SystemIO]
[0B9h 0185   1]                    Bit Width : 00
[0BAh 0186   1]                   Bit Offset : 00
[0BBh 0187   1]         Encoded Access Width : 02 [Word Access:16]
[0BCh 0188   8]                      Address : 0000000000000000

[0C4h 0196  12]            PM2 Control Block : [Generic Address Structure]
[0C4h 0196   1]                     Space ID : 01 [SystemIO]
[0C5h 0197   1]                    Bit Width : 08
[0C6h 0198   1]                   Bit Offset : 00
[0C7h 0199   1]         Encoded Access Width : 01 [Byte Access:8]
[0C8h 0200   8]                      Address : 0000000000001850

[0D0h 0208  12]               PM Timer Block : [Generic Address Structure]
[0D0h 0208   1]                     Space ID : 01 [SystemIO]
[0D1h 0209   1]                    Bit Width : 20
[0D2h 0210   1]                   Bit Offset : 00
[0D3h 0211   1]         Encoded Access Width : 03 [DWord Access:32]
[0D4h 0212   8]                      Address : 0000000000001808

[0DCh 0220  12]                   GPE0 Block : [Generic Address Structure]
[0DCh 0220   1]                     Space ID : 01 [SystemIO]
[0DDh 0221   1]                    Bit Width : 00
[0DEh 0222   1]                   Bit Offset : 00
[0DFh 0223   1]         Encoded Access Width : 01 [Byte Access:8]
[0E0h 0224   8]                      Address : 0000000000001880

[0E8h 0232  12]                   GPE1 Block : [Generic Address Structure]
[0E8h 0232   1]                     Space ID : 01 [SystemIO]
[0E9h 0233   1]                    Bit Width : 00
[0EAh 0234   1]                   Bit Offset : 00
[0EBh 0235   1]         Encoded Access Width : 01 [Byte Access:8]
[0ECh 0236   8]                      Address : 0000000000000000


[0F4h 0244  12]       Sleep Control Register : [Generic Address Structure]
[0F4h 0244   1]                     Space ID : 01 [SystemIO]
[0F5h 0245   1]                    Bit Width : 08
[0F6h 0246   1]                   Bit Offset : 00
[0F7h 0247   1]         Encoded Access Width : 03 [DWord Access:32]
[0F8h 0248   8]                      Address : 0000000000001804

[100h 0256  12]        Sleep Status Register : [Generic Address Structure]
[100h 0256   1]                     Space ID : 01 [SystemIO]
[101h 0257   1]                    Bit Width : 08
[102h 0258   1]                   Bit Offset : 00
[103h 0259   1]         Encoded Access Width : 03 [DWord Access:32]
[104h 0260   8]                      Address : 0000000000001800

/**** ACPI table terminates in the middle of a data structure! (dump table) */

Raw Table Data: Length 268 (0x10C)

    0000: 46 41 43 50 0C 01 00 00 05 70 4D 53 46 54 20 20  // FACP.....pMSFT  
    0010: 4D 53 46 54 20 20 20 20 00 00 00 00 4D 53 46 54  // MSFT    ....MSFT
    0020: 5F 00 00 00 00 80 E8 8B 00 20 EC 8B 00 08 09 00  // _........ ......
    0030: B2 00 00 00 F0 F1 F2 00 00 18 00 00 00 00 00 00  // ................
    0040: 04 18 00 00 00 00 00 00 50 18 00 00 08 18 00 00  // ........P.......
    0050: 80 18 00 00 00 00 00 00 04 02 01 04 20 00 10 00  // ............ ...
    0060: 65 00 E9 03 00 00 00 00 01 03 0D 00 32 01 00 00  // e...........2...
    0070: B5 C4 20 00 01 08 00 01 F9 0C 00 00 00 00 00 00  // .. .............
    0080: 06 00 00 00 00 00 00 00 00 00 00 00 00 20 EC 8B  // ............. ..
    0090: 00 00 00 00 01 20 00 02 00 18 00 00 00 00 00 00  // ..... ..........
    00A0: 01 00 00 02 00 00 00 00 00 00 00 00 01 10 00 02  // ................
    00B0: 04 18 00 00 00 00 00 00 01 00 00 02 00 00 00 00  // ................
    00C0: 00 00 00 00 01 08 00 01 50 18 00 00 00 00 00 00  // ........P.......
    00D0: 01 20 00 03 08 18 00 00 00 00 00 00 01 00 00 01  // . ..............
    00E0: 80 18 00 00 00 00 00 00 01 00 00 01 00 00 00 00  // ................
    00F0: 00 00 00 00 01 08 00 03 04 18 00 00 00 00 00 00  // ................
    0100: 01 08 00 03 00 18 00 00 00 00 00 00              // ............


FACS
----
[000h 0000   4]                    Signature : "FACS"
[004h 0004   4]                       Length : 00000040
[008h 0008   4]           Hardware Signature : D93D92B8
[00Ch 0012   4]    32 Firmware Waking Vector : 00000000
[010h 0016   4]                  Global Lock : 00000000
[014h 0020   4]        Flags (decoded below) : 00000000
                      S4BIOS Support Present : 0
                  64-bit Wake Supported (V2) : 0
[018h 0024   8]    64 Firmware Waking Vector : 0000000000000000
[020h 0032   1]                      Version : 02
[021h 0033   3]                     Reserved : 000000
[024h 0036   4]    OspmFlags (decoded below) : 00000000
               64-bit Wake Env Required (V2) : 0

Raw Table Data: Length 64 (0x40)

    0000: 46 41 43 53 40 00 00 00 B8 92 3D D9 00 00 00 00  // FACS@.....=.....
    0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0020: 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


FPDT
----
[000h 0000   4]                    Signature : "FPDT"    [Firmware Performance Data Table]
[004h 0004   4]                 Table Length : 00000034
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 1F
[00Ah 0010   6]                       Oem ID : "MSFT  "
[010h 0016   8]                 Oem Table ID : "MSFT    "
[018h 0024   4]                 Oem Revision : 00000002
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 0000005F


[024h 0036   2]                Subtable Type : 0000
[026h 0038   1]                       Length : 10
[027h 0039   1]                     Revision : 01
[028h 0040   4]                     Reserved : 00000000
[02Ch 0044   8]     FPDT Boot Record Address : 000000008BE33000

Raw Table Data: Length 52 (0x34)

    0000: 46 50 44 54 34 00 00 00 01 1F 4D 53 46 54 20 20  // FPDT4.....MSFT  
    0010: 4D 53 46 54 20 20 20 20 02 00 00 00 4D 53 46 54  // MSFT    ....MSFT
    0020: 5F 00 00 00 00 00 10 01 00 00 00 00 00 30 E3 8B  // _............0..
    0030: 00 00 00 00                                      // ....


HPET
----
[000h 0000   4]                    Signature : "HPET"    [High Precision Event Timer Table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 91
[00Ah 0010   6]                       Oem ID : "MSFT  "
[010h 0016   8]                 Oem Table ID : "MSFT    "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 0000005F

[024h 0036   4]            Hardware Block ID : 8086A201

[028h 0040  12]         Timer Block Register : [Generic Address Structure]
[028h 0040   1]                     Space ID : 00 [SystemMemory]
[029h 0041   1]                    Bit Width : 40
[02Ah 0042   1]                   Bit Offset : 00
[02Bh 0043   1]         Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044   8]                      Address : 00000000FED00000

[034h 0052   1]              Sequence Number : 00
[035h 0053   2]          Minimum Clock Ticks : 0080
[037h 0055   1]        Flags (decoded below) : 00
                             4K Page Protect : 0
                            64K Page Protect : 0

Raw Table Data: Length 56 (0x38)

    0000: 48 50 45 54 38 00 00 00 01 91 4D 53 46 54 20 20  // HPET8.....MSFT  
    0010: 4D 53 46 54 20 20 20 20 01 00 00 00 4D 53 46 54  // MSFT    ....MSFT
    0020: 5F 00 00 00 01 A2 86 80 00 40 00 00 00 00 D0 FE  // _........@......
    0030: 00 00 00 00 00 80 00 00                          // ........


LPIT
----
[000h 0000   4]                    Signature : "LPIT"    [Low Power Idle Table]
[004h 0004   4]                 Table Length : 00000094
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 7A
[00Ah 0010   6]                       Oem ID : "MSFT  "
[010h 0016   8]                 Oem Table ID : "MSFT    "
[018h 0024   4]                 Oem Revision : 00000000
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 0000005F

[024h 0036   4]                Subtable Type : 00000000 [Native C-state Idle Structure]
[028h 0040   4]                       Length : 00000038
[02Ch 0044   2]                    Unique ID : 0000
[02Eh 0046   2]                     Reserved : 0000
[030h 0048   4]        Flags (decoded below) : 00000000
                              State Disabled : 0
                                  No Counter : 0

[034h 0052  12]                Entry Trigger : [Generic Address Structure]
[034h 0052   1]                     Space ID : 7F [FunctionalFixedHW]
[035h 0053   1]                    Bit Width : 01
[036h 0054   1]                   Bit Offset : 02
[037h 0055   1]         Encoded Access Width : 00 [Undefined/Legacy]
[038h 0056   8]                      Address : 0000000000000060

[040h 0064   4]                    Residency : 00007530
[044h 0068   4]                      Latency : 00000BB8
[048h 0072  12]            Residency Counter : [Generic Address Structure]
[048h 0072   1]                     Space ID : 7F [FunctionalFixedHW]
[049h 0073   1]                    Bit Width : 40
[04Ah 0074   1]                   Bit Offset : 00
[04Bh 0075   1]         Encoded Access Width : 00 [Undefined/Legacy]
[04Ch 0076   8]                      Address : 0000000000000632

[054h 0084   8]            Counter Frequency : 0000000000000000

[05Ch 0092   4]                Subtable Type : 00000000 [Native C-state Idle Structure]
[060h 0096   4]                       Length : 00000038
[064h 0100   2]                    Unique ID : 0001
[066h 0102   2]                     Reserved : 0000
[068h 0104   4]        Flags (decoded below) : 00000000
                              State Disabled : 0
                                  No Counter : 0

[06Ch 0108  12]                Entry Trigger : [Generic Address Structure]
[06Ch 0108   1]                     Space ID : 7F [FunctionalFixedHW]
[06Dh 0109   1]                    Bit Width : 01
[06Eh 0110   1]                   Bit Offset : 02
[06Fh 0111   1]         Encoded Access Width : 00 [Undefined/Legacy]
[070h 0112   8]                      Address : 0000000000000060

[078h 0120   4]                    Residency : 00007530
[07Ch 0124   4]                      Latency : 00000BB8
[080h 0128  12]            Residency Counter : [Generic Address Structure]
[080h 0128   1]                     Space ID : 00 [SystemMemory]
[081h 0129   1]                    Bit Width : 20
[082h 0130   1]                   Bit Offset : 00
[083h 0131   1]         Encoded Access Width : 03 [DWord Access:32]
[084h 0132   8]                      Address : 00000000FE00013C

[08Ch 0140   8]            Counter Frequency : 000000000000256C


Raw Table Data: Length 148 (0x94)

    0000: 4C 50 49 54 94 00 00 00 01 7A 4D 53 46 54 20 20  // LPIT.....zMSFT  
    0010: 4D 53 46 54 20 20 20 20 00 00 00 00 4D 53 46 54  // MSFT    ....MSFT
    0020: 5F 00 00 00 00 00 00 00 38 00 00 00 00 00 00 00  // _.......8.......
    0030: 00 00 00 00 7F 01 02 00 60 00 00 00 00 00 00 00  // ........`.......
    0040: 30 75 00 00 B8 0B 00 00 7F 40 00 00 32 06 00 00  // 0u.......@..2...
    0050: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0060: 38 00 00 00 01 00 00 00 00 00 00 00 7F 01 02 00  // 8...............
    0070: 60 00 00 00 00 00 00 00 30 75 00 00 B8 0B 00 00  // `.......0u......
    0080: 00 20 00 03 3C 01 00 FE 00 00 00 00 6C 25 00 00  // . ..<.......l%..
    0090: 00 00 00 00                                      // ....


MCFG
----
[000h 0000   4]                    Signature : "MCFG"    [Memory Mapped Configuration Table]
[004h 0004   4]                 Table Length : 0000003C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : F9
[00Ah 0010   6]                       Oem ID : "MSFT  "
[010h 0016   8]                 Oem Table ID : "MSFT    "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 0000005F

[024h 0036   8]                     Reserved : 0000000000000000

[02Ch 0044   8]                 Base Address : 00000000E0000000
[034h 0052   2]         Segment Group Number : 0000
[036h 0054   1]             Start Bus Number : 00
[037h 0055   1]               End Bus Number : FF
[038h 0056   4]                     Reserved : 00000000

Raw Table Data: Length 60 (0x3C)

    0000: 4D 43 46 47 3C 00 00 00 01 F9 4D 53 46 54 20 20  // MCFG<.....MSFT  
    0010: 4D 53 46 54 20 20 20 20 01 00 00 00 4D 53 46 54  // MSFT    ....MSFT
    0020: 5F 00 00 00 00 00 00 00 00 00 00 00 00 00 00 E0  // _...............
    0030: 00 00 00 00 00 00 00 FF 00 00 00 00              // ............


MSDM
----
[000h 0000   4]                    Signature : "MSDM"    [Microsoft Data Management Table]
[004h 0004   4]                 Table Length : 00000055
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : DD
[00Ah 0010   6]                       Oem ID : "MSFT  "
[010h 0016   8]                 Oem Table ID : ""
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00000001

[024h 0036  49] Software Licensing Structure : \
    45 45 53 54 00 00 00 00 61 0A 00 00 00 00 00 00 \
    E0 AC 5F 0B 9F 7F 00 00 E0 AC 5F 0B 9F 7F 00 00 \
    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \
    00 

Raw Table Data: Length 85 (0x55)

    0000: 4D 53 44 4D 55 00 00 00 01 DD 4D 53 46 54 20 20  // MSDMU.....MSFT  
    0010: 00 00 00 00 00 00 00 00 01 00 00 00 4D 53 46 54  // ............MSFT
    0020: 01 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00  // ................
    0030: 00 00 00 00 1D 00 00 00 4D 43 38 50 4B 2D 4E 54  // ........MC8PK-NT
    0040: 48 52 54 2D 34 51 32 56 52 2D 50 46 54 39 36 2D  // HRT-4Q2VR-PFT96-
    0050: 56 36 44 47 51                                   // V6DGQ


NHLT
----
[000h 0000   4]                    Signature : "NHLT"    
[004h 0004   4]                 Table Length : 0000002D
[008h 0008   1]                     Revision : 00
[009h 0009   1]                     Checksum : 92
[00Ah 0010   6]                       Oem ID : "MSFT  "
[010h 0016   8]                 Oem Table ID : "MSFT    "
[018h 0024   4]                 Oem Revision : 00000002
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 0000005F


**** Unknown ACPI table signature [NHLT]


Raw Table Data: Length 45 (0x2D)

    0000: 4E 48 4C 54 2D 00 00 00 00 92 4D 53 46 54 20 20  // NHLT-.....MSFT  
    0010: 4D 53 46 54 20 20 20 20 02 00 00 00 4D 53 46 54  // MSFT    ....MSFT
    0020: 5F 00 00 00 00 04 00 00 00 DE AD BE EF           // _............


SSDT1
-----
DefinitionBlock ("", "SSDT", 2, "MSFT  ", "xh_ca000", 0x00000000)
{
    External (_SB_.GGIV, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.XHC_.RHUB, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.HS01, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.HS02, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.HS03, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.HS04, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.HS05, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.HS06, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.HS07, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.HS08, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.HS09, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.HS10, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.SS01, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.SS02, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.SS03, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.SS04, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.SS05, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.SS06, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.USR1, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.USR2, DeviceObj)
    External (_SB_.PCI0.XHC_.SSPA, MethodObj)    // 0 Arguments
    External (EBID, IntObj)

    Scope (\_SB.PCI0.XHC.RHUB)
    {
        Method (GPLD, 2, Serialized)
        {
            Name (PCKG, Package (0x01)
            {
                Buffer (0x10) {}
            })
            CreateField (DerefOf (PCKG [Zero]), Zero, 0x07, REV)
            REV = 0x02
            CreateField (DerefOf (PCKG [Zero]), 0x07, One, RGB)
            RGB = One
            CreateField (DerefOf (PCKG [Zero]), 0x40, One, VISI)
            VISI = Arg0
            CreateField (DerefOf (PCKG [Zero]), 0x57, 0x08, GPOS)
            GPOS = Arg1
            Return (PCKG) /* \_SB_.PCI0.XHC_.RHUB.GPLD.PCKG */
        }

        Method (SPLD, 3, Serialized)
        {
            Name (PCKG, Package (0x01)
            {
                Buffer (0x14)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                }
            })
            CreateField (DerefOf (PCKG [Zero]), Zero, 0x07, REV)
            REV = 0x02
            CreateField (DerefOf (PCKG [Zero]), 0x07, One, RGB)
            RGB = One
            CreateField (DerefOf (PCKG [Zero]), 0x40, One, VISI)
            VISI = Arg0
            CreateField (DerefOf (PCKG [Zero]), 0x57, 0x08, GPOS)
            GPOS = Arg1
            CreateField (DerefOf (PCKG [Zero]), 0x60, 0x02, EJCT)
            EJCT = Arg2
            Return (PCKG) /* \_SB_.PCI0.XHC_.RHUB.SPLD.PCKG */
        }

        Method (GUPC, 1, Serialized)
        {
            Name (PCKG, Package (0x04)
            {
                Zero, 
                0xFF, 
                Zero, 
                Zero
            })
            If ((Arg0 != Zero))
            {
                PCKG [Zero] = 0xFF
            }

            Return (PCKG) /* \_SB_.PCI0.XHC_.RHUB.GUPC.PCKG */
        }

        Method (SUPC, 2, Serialized)
        {
            Name (PCKG, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            If ((Arg0 != Zero))
            {
                PCKG [Zero] = 0xFF
            }

            PCKG [One] = Arg1
            Return (PCKG) /* \_SB_.PCI0.XHC_.RHUB.SUPC.PCKG */
        }
    }

    Scope (\_SB.PCI0.XHC.RHUB.HS01)
    {
        Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
        {
            Return (SUPC (0xFF, 0x03))
        }

        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
        {
            Return (SPLD (One, One, 0x03))
        }
    }

    Scope (\_SB.PCI0.XHC.RHUB.HS02)
    {
        Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
        {
            If (((EBID & 0x20) == 0x20))
            {
                Return (SUPC (0xFF, 0xFF))
            }
            Else
            {
                Return (SUPC (Zero, Zero))
            }
        }

        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
        {
            Return (SPLD (Zero, 0x02, Zero))
        }
    }

    Scope (\_SB.PCI0.XHC.RHUB.HS03)
    {
        Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
        {
            Return (SUPC (0xFF, 0xFF))
        }

        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
        {
            Return (SPLD (One, 0x03, 0x03))
        }
    }

    Scope (\_SB.PCI0.XHC.RHUB.HS04)
    {
        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
        {
            Return (SUPC (Zero, Zero))
        }

        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
        {
            Return (SPLD (Zero, 0x04, Zero))
        }
    }

    Scope (\_SB.PCI0.XHC.RHUB.HS05)
    {
        Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
        {
            Return (SUPC (0xFF, 0xFF))
        }

        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
        {
            Return (SPLD (Zero, 0x05, Zero))
        }
    }

    Scope (\_SB.PCI0.XHC.RHUB.HS06)
    {
        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
        {
            Return (SUPC (Zero, Zero))
        }

        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
        {
            Return (SPLD (Zero, 0x06, Zero))
        }
    }

    Scope (\_SB.PCI0.XHC.RHUB.HS07)
    {
        Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            Return (SUPC (0xFF, 0xFF))
        }

        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
        {
            Return (SPLD (One, 0x07, 0x03))
        }
    }

    Scope (\_SB.PCI0.XHC.RHUB.HS08)
    {
        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
        {
            Return (SUPC (Zero, Zero))
        }

        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
        {
            Return (SPLD (Zero, 0x08, Zero))
        }
    }

    Scope (\_SB.PCI0.XHC.RHUB.HS09)
    {
        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
        {
            Return (SUPC (Zero, Zero))
        }

        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
        {
            Return (SPLD (Zero, 0x09, Zero))
        }
    }

    Scope (\_SB.PCI0.XHC.RHUB.HS10)
    {
        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
        {
            Return (SUPC (Zero, Zero))
        }

        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
        {
            Return (SPLD (Zero, 0x0A, Zero))
        }
    }

    Scope (\_SB.PCI0.XHC.RHUB.USR1)
    {
        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
        {
            Return (SUPC (Zero, Zero))
        }

        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
        {
            Return (SPLD (Zero, Zero, Zero))
        }
    }

    Scope (\_SB.PCI0.XHC.RHUB.USR2)
    {
        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
        {
            Return (SUPC (Zero, Zero))
        }

        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
        {
            Return (SPLD (Zero, Zero, Zero))
        }
    }

    Scope (\_SB.PCI0.XHC.RHUB.SS01)
    {
        Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
        {
            Return (SUPC (0xFF, 0x03))
        }

        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
        {
            Return (SPLD (One, One, 0x03))
        }
    }

    Scope (\_SB.PCI0.XHC.RHUB.SS02)
    {
        Name (_S0W, 0x02)  // _S0W: S0 Device Wake State
        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
        {
            If (((EBID & 0x20) == 0x20))
            {
                Return (SUPC (0xFF, 0xFF))
            }
            Else
            {
                Return (SUPC (Zero, Zero))
            }
        }

        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
        {
            Return (SPLD (Zero, 0x02, Zero))
        }
    }

    Scope (\_SB.PCI0.XHC.RHUB.SS03)
    {
        Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
        {
            Return (SUPC (0xFF, 0xFF))
        }

        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
        {
            Return (SPLD (One, 0x03, 0x03))
        }
    }

    Scope (_SB.PCI0.XHC.RHUB.SS04)
    {
        Method (_STA, 0, Serialized)  // _STA: Status
        {
            If ((\_SB.GGIV (0x02020005) == Zero))
            {
                Return (0x0F)
            }

            Return (Zero)
        }
    }

    Scope (\_SB.PCI0.XHC.RHUB.SS04)
    {
        Name (_S0W, 0x02)  // _S0W: S0 Device Wake State
        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
        {
            Name (UPCP, Package (0x04)
            {
                0xFF, 
                0x03, 
                Zero, 
                Zero
            })
            Return (UPCP) /* \_SB_.PCI0.XHC_.RHUB.SS04._UPC.UPCP */
        }

        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
        {
            Name (PLDP, Package (0x01)
            {
                Buffer (0x14)
                {
                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,  // ........
                    /* 0010 */  0xFF, 0xFF, 0xFF, 0x7F                           // ....
                }
            })
            Return (PLDP) /* \_SB_.PCI0.XHC_.RHUB.SS04._PLD.PLDP */
        }

        Device (SDXC)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                Return ((SSPA () + 0x03))
            }

            Name (_S0W, 0x02)  // _S0W: S0 Device Wake State
            Name (_STA, 0x0F)  // _STA: Status
            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
            {
                Name (UPCP, Package (0x04)
                {
                    0xFF, 
                    0xFF, 
                    Zero, 
                    Zero
                })
                Return (UPCP) /* \_SB_.PCI0.XHC_.RHUB.SS04.SDXC._UPC.UPCP */
            }

            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
            {
                Name (PLDP, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0008 */  0x99, 0x0D, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,  // ........
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                    }
                })
                Return (PLDP) /* \_SB_.PCI0.XHC_.RHUB.SS04.SDXC._PLD.PLDP */
            }
        }
    }

    Scope (\_SB.PCI0.XHC.RHUB.SS05)
    {
        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
        {
            Return (SUPC (Zero, Zero))
        }

        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
        {
            Return (SPLD (Zero, 0x08, Zero))
        }
    }

    Scope (\_SB.PCI0.XHC.RHUB.SS06)
    {
        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
        {
            Return (SUPC (Zero, Zero))
        }

        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
        {
            Return (SPLD (Zero, 0x09, Zero))
        }
    }
}



SSDT10
------
DefinitionBlock ("", "SSDT", 2, "PmRef", "ApIst", 0x00003000)
{
    External (_PR_.PR00, DeviceObj)
    External (_PR_.PR00._PCT, MethodObj)    // 0 Arguments
    External (_PR_.PR00._PPC, MethodObj)    // 0 Arguments
    External (_PR_.PR00._PSS, MethodObj)    // 0 Arguments
    External (_PR_.PR01, DeviceObj)
    External (_PR_.PR02, DeviceObj)
    External (_PR_.PR03, DeviceObj)
    External (_PR_.PR04, DeviceObj)
    External (_PR_.PR05, DeviceObj)
    External (_PR_.PR06, DeviceObj)
    External (_PR_.PR07, DeviceObj)
    External (_PR_.PR08, DeviceObj)
    External (_PR_.PR09, DeviceObj)
    External (_PR_.PR10, DeviceObj)
    External (_PR_.PR11, DeviceObj)
    External (_PR_.PR12, DeviceObj)
    External (_PR_.PR13, DeviceObj)
    External (_PR_.PR14, DeviceObj)
    External (_PR_.PR15, DeviceObj)
    External (PC00, IntObj)
    External (TCNT, FieldUnitObj)

    Scope (\_PR.PR01)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_PR.PR00._PPC ())
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.PR00._PCT ())
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.PR00._PSS ())
        }

        Name (PSDF, Zero)
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If (!PSDF)
            {
                DerefOf (HPSD [Zero]) [0x04] = TCNT /* External reference */
                DerefOf (SPSD [Zero]) [0x04] = TCNT /* External reference */
                PSDF = Ones
            }

            If ((PC00 & 0x0800))
            {
                Return (HPSD) /* \_PR_.PR01.HPSD */
            }

            Return (SPSD) /* \_PR_.PR01.SPSD */
        }

        Name (HPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFE, 
                0x80
            }
        })
        Name (SPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFC, 
                0x80
            }
        })
    }

    Scope (\_PR.PR02)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_PR.PR00._PPC ())
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.PR00._PCT ())
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.PR00._PSS ())
        }

        Name (PSDF, Zero)
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If (!PSDF)
            {
                DerefOf (HPSD [Zero]) [0x04] = TCNT /* External reference */
                DerefOf (SPSD [Zero]) [0x04] = TCNT /* External reference */
                PSDF = Ones
            }

            If ((PC00 & 0x0800))
            {
                Return (HPSD) /* \_PR_.PR02.HPSD */
            }

            Return (SPSD) /* \_PR_.PR02.SPSD */
        }

        Name (HPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFE, 
                0x80
            }
        })
        Name (SPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFC, 
                0x80
            }
        })
    }

    Scope (\_PR.PR03)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_PR.PR00._PPC ())
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.PR00._PCT ())
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.PR00._PSS ())
        }

        Name (PSDF, Zero)
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If (!PSDF)
            {
                DerefOf (HPSD [Zero]) [0x04] = TCNT /* External reference */
                DerefOf (SPSD [Zero]) [0x04] = TCNT /* External reference */
                PSDF = Ones
            }

            If ((PC00 & 0x0800))
            {
                Return (HPSD) /* \_PR_.PR03.HPSD */
            }

            Return (SPSD) /* \_PR_.PR03.SPSD */
        }

        Name (HPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFE, 
                0x80
            }
        })
        Name (SPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFC, 
                0x80
            }
        })
    }

    Scope (\_PR.PR04)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_PR.PR00._PPC ())
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.PR00._PCT ())
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.PR00._PSS ())
        }

        Name (PSDF, Zero)
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If (!PSDF)
            {
                DerefOf (HPSD [Zero]) [0x04] = TCNT /* External reference */
                DerefOf (SPSD [Zero]) [0x04] = TCNT /* External reference */
                PSDF = Ones
            }

            If ((PC00 & 0x0800))
            {
                Return (HPSD) /* \_PR_.PR04.HPSD */
            }

            Return (SPSD) /* \_PR_.PR04.SPSD */
        }

        Name (HPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFE, 
                0x80
            }
        })
        Name (SPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFC, 
                0x80
            }
        })
    }

    Scope (\_PR.PR05)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_PR.PR00._PPC ())
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.PR00._PCT ())
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.PR00._PSS ())
        }

        Name (PSDF, Zero)
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If (!PSDF)
            {
                DerefOf (HPSD [Zero]) [0x04] = TCNT /* External reference */
                DerefOf (SPSD [Zero]) [0x04] = TCNT /* External reference */
                PSDF = Ones
            }

            If ((PC00 & 0x0800))
            {
                Return (HPSD) /* \_PR_.PR05.HPSD */
            }

            Return (SPSD) /* \_PR_.PR05.SPSD */
        }

        Name (HPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFE, 
                0x80
            }
        })
        Name (SPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFC, 
                0x80
            }
        })
    }

    Scope (\_PR.PR06)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_PR.PR00._PPC ())
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.PR00._PCT ())
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.PR00._PSS ())
        }

        Name (PSDF, Zero)
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If (!PSDF)
            {
                DerefOf (HPSD [Zero]) [0x04] = TCNT /* External reference */
                DerefOf (SPSD [Zero]) [0x04] = TCNT /* External reference */
                PSDF = Ones
            }

            If ((PC00 & 0x0800))
            {
                Return (HPSD) /* \_PR_.PR06.HPSD */
            }

            Return (SPSD) /* \_PR_.PR06.SPSD */
        }

        Name (HPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFE, 
                0x80
            }
        })
        Name (SPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFC, 
                0x80
            }
        })
    }

    Scope (\_PR.PR07)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_PR.PR00._PPC ())
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.PR00._PCT ())
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.PR00._PSS ())
        }

        Name (PSDF, Zero)
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If (!PSDF)
            {
                DerefOf (HPSD [Zero]) [0x04] = TCNT /* External reference */
                DerefOf (SPSD [Zero]) [0x04] = TCNT /* External reference */
                PSDF = Ones
            }

            If ((PC00 & 0x0800))
            {
                Return (HPSD) /* \_PR_.PR07.HPSD */
            }

            Return (SPSD) /* \_PR_.PR07.SPSD */
        }

        Name (HPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFE, 
                0x80
            }
        })
        Name (SPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFC, 
                0x80
            }
        })
    }

    Scope (\_PR.PR08)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_PR.PR00._PPC ())
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.PR00._PCT ())
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.PR00._PSS ())
        }

        Name (PSDF, Zero)
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If (!PSDF)
            {
                DerefOf (HPSD [Zero]) [0x04] = TCNT /* External reference */
                DerefOf (SPSD [Zero]) [0x04] = TCNT /* External reference */
                PSDF = Ones
            }

            If ((PC00 & 0x0800))
            {
                Return (HPSD) /* \_PR_.PR08.HPSD */
            }

            Return (SPSD) /* \_PR_.PR08.SPSD */
        }

        Name (HPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFE, 
                0x80
            }
        })
        Name (SPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFC, 
                0x80
            }
        })
    }

    Scope (\_PR.PR09)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_PR.PR00._PPC ())
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.PR00._PCT ())
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.PR00._PSS ())
        }

        Name (PSDF, Zero)
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If (!PSDF)
            {
                DerefOf (HPSD [Zero]) [0x04] = TCNT /* External reference */
                DerefOf (SPSD [Zero]) [0x04] = TCNT /* External reference */
                PSDF = Ones
            }

            If ((PC00 & 0x0800))
            {
                Return (HPSD) /* \_PR_.PR09.HPSD */
            }

            Return (SPSD) /* \_PR_.PR09.SPSD */
        }

        Name (HPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFE, 
                0x80
            }
        })
        Name (SPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFC, 
                0x80
            }
        })
    }

    Scope (\_PR.PR10)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_PR.PR00._PPC ())
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.PR00._PCT ())
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.PR00._PSS ())
        }

        Name (PSDF, Zero)
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If (!PSDF)
            {
                DerefOf (HPSD [Zero]) [0x04] = TCNT /* External reference */
                DerefOf (SPSD [Zero]) [0x04] = TCNT /* External reference */
                PSDF = Ones
            }

            If ((PC00 & 0x0800))
            {
                Return (HPSD) /* \_PR_.PR10.HPSD */
            }

            Return (SPSD) /* \_PR_.PR10.SPSD */
        }

        Name (HPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFE, 
                0x80
            }
        })
        Name (SPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFC, 
                0x80
            }
        })
    }

    Scope (\_PR.PR11)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_PR.PR00._PPC ())
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.PR00._PCT ())
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.PR00._PSS ())
        }

        Name (PSDF, Zero)
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If (!PSDF)
            {
                DerefOf (HPSD [Zero]) [0x04] = TCNT /* External reference */
                DerefOf (SPSD [Zero]) [0x04] = TCNT /* External reference */
                PSDF = Ones
            }

            If ((PC00 & 0x0800))
            {
                Return (HPSD) /* \_PR_.PR11.HPSD */
            }

            Return (SPSD) /* \_PR_.PR11.SPSD */
        }

        Name (HPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFE, 
                0x80
            }
        })
        Name (SPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFC, 
                0x80
            }
        })
    }

    Scope (\_PR.PR12)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_PR.PR00._PPC ())
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.PR00._PCT ())
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.PR00._PSS ())
        }

        Name (PSDF, Zero)
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If (!PSDF)
            {
                DerefOf (HPSD [Zero]) [0x04] = TCNT /* External reference */
                DerefOf (SPSD [Zero]) [0x04] = TCNT /* External reference */
                PSDF = Ones
            }

            If ((PC00 & 0x0800))
            {
                Return (HPSD) /* \_PR_.PR12.HPSD */
            }

            Return (SPSD) /* \_PR_.PR12.SPSD */
        }

        Name (HPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFE, 
                0x80
            }
        })
        Name (SPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFC, 
                0x80
            }
        })
    }

    Scope (\_PR.PR13)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_PR.PR00._PPC ())
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.PR00._PCT ())
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.PR00._PSS ())
        }

        Name (PSDF, Zero)
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If (!PSDF)
            {
                DerefOf (HPSD [Zero]) [0x04] = TCNT /* External reference */
                DerefOf (SPSD [Zero]) [0x04] = TCNT /* External reference */
                PSDF = Ones
            }

            If ((PC00 & 0x0800))
            {
                Return (HPSD) /* \_PR_.PR13.HPSD */
            }

            Return (SPSD) /* \_PR_.PR13.SPSD */
        }

        Name (HPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFE, 
                0x80
            }
        })
        Name (SPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFC, 
                0x80
            }
        })
    }

    Scope (\_PR.PR14)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_PR.PR00._PPC ())
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.PR00._PCT ())
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.PR00._PSS ())
        }

        Name (PSDF, Zero)
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If (!PSDF)
            {
                DerefOf (HPSD [Zero]) [0x04] = TCNT /* External reference */
                DerefOf (SPSD [Zero]) [0x04] = TCNT /* External reference */
                PSDF = Ones
            }

            If ((PC00 & 0x0800))
            {
                Return (HPSD) /* \_PR_.PR14.HPSD */
            }

            Return (SPSD) /* \_PR_.PR14.SPSD */
        }

        Name (HPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFE, 
                0x80
            }
        })
        Name (SPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFC, 
                0x80
            }
        })
    }

    Scope (\_PR.PR15)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_PR.PR00._PPC ())
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.PR00._PCT ())
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.PR00._PSS ())
        }

        Name (PSDF, Zero)
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If (!PSDF)
            {
                DerefOf (HPSD [Zero]) [0x04] = TCNT /* External reference */
                DerefOf (SPSD [Zero]) [0x04] = TCNT /* External reference */
                PSDF = Ones
            }

            If ((PC00 & 0x0800))
            {
                Return (HPSD) /* \_PR_.PR15.HPSD */
            }

            Return (SPSD) /* \_PR_.PR15.SPSD */
        }

        Name (HPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFE, 
                0x80
            }
        })
        Name (SPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFC, 
                0x80
            }
        })
    }
}



SSDT11
------
DefinitionBlock ("", "SSDT", 2, "PmRef", "Cpu0Hwp", 0x00003000)
{
    External (_PR_.CFGD, IntObj)
    External (_PR_.HWPA, FieldUnitObj)
    External (_PR_.HWPV, IntObj)
    External (_PR_.PR00, DeviceObj)
    External (_PR_.PR00.CPC2, PkgObj)
    External (_PR_.PR00.CPOC, PkgObj)
    External (CPC2, IntObj)
    External (CPOC, IntObj)
    External (TCNT, FieldUnitObj)

    Scope (\_PR.PR00)
    {
        Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
        {
            If ((\_PR.CFGD & 0x01000000))
            {
                Return (CPOC) /* External reference */
            }
            Else
            {
                Return (CPC2) /* External reference */
            }
        }
    }
}



SSDT12
------
DefinitionBlock ("", "SSDT", 2, "PmRef", "ApHwp", 0x00003000)
{
    External (_PR_.PR00, ProcessorObj)
    External (_PR_.PR00._CPC, MethodObj)    // 0 Arguments
    External (_PR_.PR01, ProcessorObj)
    External (_PR_.PR02, ProcessorObj)
    External (_PR_.PR03, ProcessorObj)
    External (_PR_.PR04, ProcessorObj)
    External (_PR_.PR05, ProcessorObj)
    External (_PR_.PR06, ProcessorObj)
    External (_PR_.PR07, ProcessorObj)
    External (_PR_.PR08, ProcessorObj)
    External (_PR_.PR09, ProcessorObj)
    External (_PR_.PR10, ProcessorObj)
    External (_PR_.PR11, ProcessorObj)
    External (_PR_.PR12, ProcessorObj)
    External (_PR_.PR13, ProcessorObj)
    External (_PR_.PR14, ProcessorObj)
    External (_PR_.PR15, ProcessorObj)

    Scope (\_PR.PR01)
    {
        Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
        {
            Return (\_PR.PR00._CPC ())
        }
    }

    Scope (\_PR.PR02)
    {
        Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
        {
            Return (\_PR.PR00._CPC ())
        }
    }

    Scope (\_PR.PR03)
    {
        Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
        {
            Return (\_PR.PR00._CPC ())
        }
    }

    Scope (\_PR.PR04)
    {
        Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
        {
            Return (\_PR.PR00._CPC ())
        }
    }

    Scope (\_PR.PR05)
    {
        Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
        {
            Return (\_PR.PR00._CPC ())
        }
    }

    Scope (\_PR.PR06)
    {
        Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
        {
            Return (\_PR.PR00._CPC ())
        }
    }

    Scope (\_PR.PR07)
    {
        Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
        {
            Return (\_PR.PR00._CPC ())
        }
    }

    Scope (\_PR.PR08)
    {
        Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
        {
            Return (\_PR.PR00._CPC ())
        }
    }

    Scope (\_PR.PR09)
    {
        Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
        {
            Return (\_PR.PR00._CPC ())
        }
    }

    Scope (\_PR.PR10)
    {
        Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
        {
            Return (\_PR.PR00._CPC ())
        }
    }

    Scope (\_PR.PR11)
    {
        Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
        {
            Return (\_PR.PR00._CPC ())
        }
    }

    Scope (\_PR.PR12)
    {
        Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
        {
            Return (\_PR.PR00._CPC ())
        }
    }

    Scope (\_PR.PR13)
    {
        Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
        {
            Return (\_PR.PR00._CPC ())
        }
    }

    Scope (\_PR.PR14)
    {
        Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
        {
            Return (\_PR.PR00._CPC ())
        }
    }

    Scope (\_PR.PR15)
    {
        Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
        {
            Return (\_PR.PR00._CPC ())
        }
    }
}



SSDT2
-----
DefinitionBlock ("", "SSDT", 2, "SaSsdt", "SaSsdt ", 0x00003000)
{
    External (_SB_.PCI0, DeviceObj)
    External (_SB_.PCI0.GFX0, DeviceObj)
    External (_SB_.PCI0.GFX0.HDOS, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GFX0.HNOT, MethodObj)    // 1 Arguments
    External (CPSC, UnknownObj)
    External (DSEN, UnknownObj)
    External (ECON, IntObj)
    External (GUAM, MethodObj)    // 1 Arguments
    External (OSYS, IntObj)
    External (PBCL, MethodObj)    // 0 Arguments
    External (PNHM, IntObj)
    External (S0ID, UnknownObj)

    OperationRegion (SANV, SystemMemory, 0x8BE9F418, 0x01FE)
    Field (SANV, AnyAcc, Lock, Preserve)
    {
        ASLB,   32, 
        IMON,   8, 
        IGDS,   8, 
        IBTT,   8, 
        IPAT,   8, 
        IPSC,   8, 
        IBIA,   8, 
        ISSC,   8, 
        IDMS,   8, 
        IF1E,   8, 
        HVCO,   8, 
        GSMI,   8, 
        PAVP,   8, 
        CADL,   8, 
        CSTE,   16, 
        NSTE,   16, 
        NDID,   8, 
        DID1,   32, 
        DID2,   32, 
        DID3,   32, 
        DID4,   32, 
        DID5,   32, 
        DID6,   32, 
        DID7,   32, 
        DID8,   32, 
        DID9,   32, 
        DIDA,   32, 
        DIDB,   32, 
        DIDC,   32, 
        DIDD,   32, 
        DIDE,   32, 
        DIDF,   32, 
        DIDX,   32, 
        NXD1,   32, 
        NXD2,   32, 
        NXD3,   32, 
        NXD4,   32, 
        NXD5,   32, 
        NXD6,   32, 
        NXD7,   32, 
        NXD8,   32, 
        NXDX,   32, 
        LIDS,   8, 
        KSV0,   32, 
        KSV1,   8, 
        BRTL,   8, 
        ALSE,   8, 
        ALAF,   8, 
        LLOW,   8, 
        LHIH,   8, 
        ALFP,   8, 
        IMTP,   8, 
        EDPV,   8, 
        SGMD,   8, 
        SGFL,   8, 
        SGGP,   8, 
        HRE0,   8, 
        HRG0,   32, 
        HRA0,   8, 
        PWE0,   8, 
        PWG0,   32, 
        PWA0,   8, 
        P1GP,   8, 
        HRE1,   8, 
        HRG1,   32, 
        HRA1,   8, 
        PWE1,   8, 
        PWG1,   32, 
        PWA1,   8, 
        P2GP,   8, 
        HRE2,   8, 
        HRG2,   32, 
        HRA2,   8, 
        PWE2,   8, 
        PWG2,   32, 
        PWA2,   8, 
        DLPW,   16, 
        DLHR,   16, 
        EECP,   8, 
        XBAS,   32, 
        GBAS,   16, 
        NVGA,   32, 
        NVHA,   32, 
        AMDA,   32, 
        LTRX,   8, 
        OBFX,   8, 
        LTRY,   8, 
        OBFY,   8, 
        LTRZ,   8, 
        OBFZ,   8, 
        SMSL,   16, 
        SNSL,   16, 
        P0UB,   8, 
        P1UB,   8, 
        P2UB,   8, 
        PCSL,   8, 
        PBGE,   8, 
        M64B,   64, 
        M64L,   64, 
        CPEX,   32, 
        EEC1,   8, 
        EEC2,   8, 
        SBN0,   8, 
        SBN1,   8, 
        SBN2,   8, 
        M32B,   32, 
        M32L,   32, 
        P0WK,   32, 
        P1WK,   32, 
        P2WK,   32, 
        CKM0,   32, 
        CKM1,   32, 
        CKM2,   32, 
        Offset (0x1F4), 
        Offset (0x1F7), 
        Offset (0x1FE)
    }

    Scope (\_SB.PCI0.GFX0)
    {
        Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
        {
            DSEN = (Arg0 & 0x07)
            If (((Arg0 & 0x03) == Zero))
            {
                If (CondRefOf (HDOS))
                {
                    HDOS ()
                }
            }
        }

        Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
        {
            If ((IMTP == One))
            {
                NDID = One
            }
            Else
            {
                NDID = Zero
            }

            If ((DIDL != Zero))
            {
                DID1 = SDDL (DIDL)
            }

            If ((DDL2 != Zero))
            {
                DID2 = SDDL (DDL2)
            }

            If ((DDL3 != Zero))
            {
                DID3 = SDDL (DDL3)
            }

            If ((DDL4 != Zero))
            {
                DID4 = SDDL (DDL4)
            }

            If ((DDL5 != Zero))
            {
                DID5 = SDDL (DDL5)
            }

            If ((DDL6 != Zero))
            {
                DID6 = SDDL (DDL6)
            }

            If ((DDL7 != Zero))
            {
                DID7 = SDDL (DDL7)
            }

            If ((DDL8 != Zero))
            {
                DID8 = SDDL (DDL8)
            }

            If ((DDL9 != Zero))
            {
                DID9 = SDDL (DDL9)
            }

            If ((DD10 != Zero))
            {
                DIDA = SDDL (DD10)
            }

            If ((DD11 != Zero))
            {
                DIDB = SDDL (DD11)
            }

            If ((DD12 != Zero))
            {
                DIDC = SDDL (DD12)
            }

            If ((DD13 != Zero))
            {
                DIDD = SDDL (DD13)
            }

            If ((DD14 != Zero))
            {
                DIDE = SDDL (DD14)
            }

            If ((DD15 != Zero))
            {
                DIDF = SDDL (DD15)
            }

            If ((NDID == One))
            {
                Name (TMP1, Package (0x01)
                {
                    0xFFFFFFFF
                })
                If ((IMTP == One))
                {
                    TMP1 [Zero] = 0x0002CA00
                }
                Else
                {
                    TMP1 [Zero] = (0x00010000 | DID1)
                }

                Return (TMP1) /* \_SB_.PCI0.GFX0._DOD.TMP1 */
            }

            If ((NDID == 0x02))
            {
                Name (TMP2, Package (0x02)
                {
                    0xFFFFFFFF, 
                    0xFFFFFFFF
                })
                TMP2 [Zero] = (0x00010000 | DID1)
                If ((IMTP == One))
                {
                    TMP2 [One] = 0x0002CA00
                }
                Else
                {
                    TMP2 [One] = (0x00010000 | DID2)
                }

                Return (TMP2) /* \_SB_.PCI0.GFX0._DOD.TMP2 */
            }

            If ((NDID == 0x03))
            {
                Name (TMP3, Package (0x03)
                {
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF
                })
                TMP3 [Zero] = (0x00010000 | DID1)
                TMP3 [One] = (0x00010000 | DID2)
                If ((IMTP == One))
                {
                    TMP3 [0x02] = 0x0002CA00
                }
                Else
                {
                    TMP3 [0x02] = (0x00010000 | DID3)
                }

                Return (TMP3) /* \_SB_.PCI0.GFX0._DOD.TMP3 */
            }

            If ((NDID == 0x04))
            {
                Name (TMP4, Package (0x04)
                {
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF
                })
                TMP4 [Zero] = (0x00010000 | DID1)
                TMP4 [One] = (0x00010000 | DID2)
                TMP4 [0x02] = (0x00010000 | DID3)
                If ((IMTP == One))
                {
                    TMP4 [0x03] = 0x0002CA00
                }
                Else
                {
                    TMP4 [0x03] = (0x00010000 | DID4)
                }

                Return (TMP4) /* \_SB_.PCI0.GFX0._DOD.TMP4 */
            }

            If ((NDID == 0x05))
            {
                Name (TMP5, Package (0x05)
                {
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF
                })
                TMP5 [Zero] = (0x00010000 | DID1)
                TMP5 [One] = (0x00010000 | DID2)
                TMP5 [0x02] = (0x00010000 | DID3)
                TMP5 [0x03] = (0x00010000 | DID4)
                If ((IMTP == One))
                {
                    TMP5 [0x04] = 0x0002CA00
                }
                Else
                {
                    TMP5 [0x04] = (0x00010000 | DID5)
                }

                Return (TMP5) /* \_SB_.PCI0.GFX0._DOD.TMP5 */
            }

            If ((NDID == 0x06))
            {
                Name (TMP6, Package (0x06)
                {
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF
                })
                TMP6 [Zero] = (0x00010000 | DID1)
                TMP6 [One] = (0x00010000 | DID2)
                TMP6 [0x02] = (0x00010000 | DID3)
                TMP6 [0x03] = (0x00010000 | DID4)
                TMP6 [0x04] = (0x00010000 | DID5)
                If ((IMTP == One))
                {
                    TMP6 [0x05] = 0x0002CA00
                }
                Else
                {
                    TMP6 [0x05] = (0x00010000 | DID6)
                }

                Return (TMP6) /* \_SB_.PCI0.GFX0._DOD.TMP6 */
            }

            If ((NDID == 0x07))
            {
                Name (TMP7, Package (0x07)
                {
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF
                })
                TMP7 [Zero] = (0x00010000 | DID1)
                TMP7 [One] = (0x00010000 | DID2)
                TMP7 [0x02] = (0x00010000 | DID3)
                TMP7 [0x03] = (0x00010000 | DID4)
                TMP7 [0x04] = (0x00010000 | DID5)
                TMP7 [0x05] = (0x00010000 | DID6)
                If ((IMTP == One))
                {
                    TMP7 [0x06] = 0x0002CA00
                }
                Else
                {
                    TMP7 [0x06] = (0x00010000 | DID7)
                }

                Return (TMP7) /* \_SB_.PCI0.GFX0._DOD.TMP7 */
            }

            If ((NDID == 0x08))
            {
                Name (TMP8, Package (0x08)
                {
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF
                })
                TMP8 [Zero] = (0x00010000 | DID1)
                TMP8 [One] = (0x00010000 | DID2)
                TMP8 [0x02] = (0x00010000 | DID3)
                TMP8 [0x03] = (0x00010000 | DID4)
                TMP8 [0x04] = (0x00010000 | DID5)
                TMP8 [0x05] = (0x00010000 | DID6)
                TMP8 [0x06] = (0x00010000 | DID7)
                If ((IMTP == One))
                {
                    TMP8 [0x07] = 0x0002CA00
                }
                Else
                {
                    TMP8 [0x07] = (0x00010000 | DID8)
                }

                Return (TMP8) /* \_SB_.PCI0.GFX0._DOD.TMP8 */
            }

            If ((NDID == 0x09))
            {
                Name (TMP9, Package (0x09)
                {
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF
                })
                TMP9 [Zero] = (0x00010000 | DID1)
                TMP9 [One] = (0x00010000 | DID2)
                TMP9 [0x02] = (0x00010000 | DID3)
                TMP9 [0x03] = (0x00010000 | DID4)
                TMP9 [0x04] = (0x00010000 | DID5)
                TMP9 [0x05] = (0x00010000 | DID6)
                TMP9 [0x06] = (0x00010000 | DID7)
                TMP9 [0x07] = (0x00010000 | DID8)
                If ((IMTP == One))
                {
                    TMP9 [0x08] = 0x0002CA00
                }
                Else
                {
                    TMP9 [0x08] = (0x00010000 | DID9)
                }

                Return (TMP9) /* \_SB_.PCI0.GFX0._DOD.TMP9 */
            }

            If ((NDID == 0x0A))
            {
                Name (TMPA, Package (0x0A)
                {
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF
                })
                TMPA [Zero] = (0x00010000 | DID1)
                TMPA [One] = (0x00010000 | DID2)
                TMPA [0x02] = (0x00010000 | DID3)
                TMPA [0x03] = (0x00010000 | DID4)
                TMPA [0x04] = (0x00010000 | DID5)
                TMPA [0x05] = (0x00010000 | DID6)
                TMPA [0x06] = (0x00010000 | DID7)
                TMPA [0x07] = (0x00010000 | DID8)
                TMPA [0x08] = (0x00010000 | DID9)
                If ((IMTP == One))
                {
                    TMPA [0x09] = 0x0002CA00
                }
                Else
                {
                    TMPA [0x09] = (0x00010000 | DIDA)
                }

                Return (TMPA) /* \_SB_.PCI0.GFX0._DOD.TMPA */
            }

            If ((NDID == 0x0B))
            {
                Name (TMPB, Package (0x0B)
                {
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF
                })
                TMPB [Zero] = (0x00010000 | DID1)
                TMPB [One] = (0x00010000 | DID2)
                TMPB [0x02] = (0x00010000 | DID3)
                TMPB [0x03] = (0x00010000 | DID4)
                TMPB [0x04] = (0x00010000 | DID5)
                TMPB [0x05] = (0x00010000 | DID6)
                TMPB [0x06] = (0x00010000 | DID7)
                TMPB [0x07] = (0x00010000 | DID8)
                TMPB [0x08] = (0x00010000 | DID9)
                TMPB [0x09] = (0x00010000 | DIDA)
                If ((IMTP == One))
                {
                    TMPB [0x0A] = 0x0002CA00
                }
                Else
                {
                    TMPB [0x0A] = (0x00010000 | DIDB)
                }

                Return (TMPB) /* \_SB_.PCI0.GFX0._DOD.TMPB */
            }

            If ((NDID == 0x0C))
            {
                Name (TMPC, Package (0x0C)
                {
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF
                })
                TMPC [Zero] = (0x00010000 | DID1)
                TMPC [One] = (0x00010000 | DID2)
                TMPC [0x02] = (0x00010000 | DID3)
                TMPC [0x03] = (0x00010000 | DID4)
                TMPC [0x04] = (0x00010000 | DID5)
                TMPC [0x05] = (0x00010000 | DID6)
                TMPC [0x06] = (0x00010000 | DID7)
                TMPC [0x07] = (0x00010000 | DID8)
                TMPC [0x08] = (0x00010000 | DID9)
                TMPC [0x09] = (0x00010000 | DIDA)
                TMPC [0x0A] = (0x00010000 | DIDB)
                If ((IMTP == One))
                {
                    TMPC [0x0B] = 0x0002CA00
                }
                Else
                {
                    TMPC [0x0B] = (0x00010000 | DIDC)
                }

                Return (TMPC) /* \_SB_.PCI0.GFX0._DOD.TMPC */
            }

            If ((NDID == 0x0D))
            {
                Name (TMPD, Package (0x0D)
                {
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF
                })
                TMPD [Zero] = (0x00010000 | DID1)
                TMPD [One] = (0x00010000 | DID2)
                TMPD [0x02] = (0x00010000 | DID3)
                TMPD [0x03] = (0x00010000 | DID4)
                TMPD [0x04] = (0x00010000 | DID5)
                TMPD [0x05] = (0x00010000 | DID6)
                TMPD [0x06] = (0x00010000 | DID7)
                TMPD [0x07] = (0x00010000 | DID8)
                TMPD [0x08] = (0x00010000 | DID9)
                TMPD [0x09] = (0x00010000 | DIDA)
                TMPD [0x0A] = (0x00010000 | DIDB)
                TMPD [0x0B] = (0x00010000 | DIDC)
                If ((IMTP == One))
                {
                    TMPD [0x0C] = 0x0002CA00
                }
                Else
                {
                    TMPD [0x0C] = (0x00010000 | DIDD)
                }

                Return (TMPD) /* \_SB_.PCI0.GFX0._DOD.TMPD */
            }

            If ((NDID == 0x0E))
            {
                Name (TMPE, Package (0x0E)
                {
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF
                })
                TMPE [Zero] = (0x00010000 | DID1)
                TMPE [One] = (0x00010000 | DID2)
                TMPE [0x02] = (0x00010000 | DID3)
                TMPE [0x03] = (0x00010000 | DID4)
                TMPE [0x04] = (0x00010000 | DID5)
                TMPE [0x05] = (0x00010000 | DID6)
                TMPE [0x06] = (0x00010000 | DID7)
                TMPE [0x07] = (0x00010000 | DID8)
                TMPE [0x08] = (0x00010000 | DID9)
                TMPE [0x09] = (0x00010000 | DIDA)
                TMPE [0x0A] = (0x00010000 | DIDB)
                TMPE [0x0B] = (0x00010000 | DIDC)
                TMPE [0x0C] = (0x00010000 | DIDD)
                If ((IMTP == One))
                {
                    TMPE [0x0D] = 0x0002CA00
                }
                Else
                {
                    TMPE [0x0D] = (0x00010000 | DIDE)
                }

                Return (TMPE) /* \_SB_.PCI0.GFX0._DOD.TMPE */
            }

            If ((NDID == 0x0F))
            {
                Name (TMPF, Package (0x0F)
                {
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF
                })
                TMPF [Zero] = (0x00010000 | DID1)
                TMPF [One] = (0x00010000 | DID2)
                TMPF [0x02] = (0x00010000 | DID3)
                TMPF [0x03] = (0x00010000 | DID4)
                TMPF [0x04] = (0x00010000 | DID5)
                TMPF [0x05] = (0x00010000 | DID6)
                TMPF [0x06] = (0x00010000 | DID7)
                TMPF [0x07] = (0x00010000 | DID8)
                TMPF [0x08] = (0x00010000 | DID9)
                TMPF [0x09] = (0x00010000 | DIDA)
                TMPF [0x0A] = (0x00010000 | DIDB)
                TMPF [0x0B] = (0x00010000 | DIDC)
                TMPF [0x0C] = (0x00010000 | DIDD)
                TMPF [0x0D] = (0x00010000 | DIDE)
                If ((IMTP == One))
                {
                    TMPF [0x0E] = 0x0002CA00
                }
                Else
                {
                    TMPF [0x0E] = (0x00010000 | DIDF)
                }

                Return (TMPF) /* \_SB_.PCI0.GFX0._DOD.TMPF */
            }

            If ((NDID == 0x10))
            {
                Name (TMPG, Package (0x10)
                {
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF
                })
                TMPG [Zero] = (0x00010000 | DID1)
                TMPG [One] = (0x00010000 | DID2)
                TMPG [0x02] = (0x00010000 | DID3)
                TMPG [0x03] = (0x00010000 | DID4)
                TMPG [0x04] = (0x00010000 | DID5)
                TMPG [0x05] = (0x00010000 | DID6)
                TMPG [0x06] = (0x00010000 | DID7)
                TMPG [0x07] = (0x00010000 | DID8)
                TMPG [0x08] = (0x00010000 | DID9)
                TMPG [0x09] = (0x00010000 | DIDA)
                TMPG [0x0A] = (0x00010000 | DIDB)
                TMPG [0x0B] = (0x00010000 | DIDC)
                TMPG [0x0C] = (0x00010000 | DIDD)
                TMPG [0x0D] = (0x00010000 | DIDE)
                TMPG [0x0E] = (0x00010000 | DIDF)
                TMPG [0x0F] = 0x0002CA00
                Return (TMPG) /* \_SB_.PCI0.GFX0._DOD.TMPG */
            }

            Return (Package (0x01)
            {
                0x0400
            })
        }

        Device (DD01)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DID1) == 0x0400))
                {
                    EDPV = One
                    NXDX = NXD1 /* \NXD1 */
                    DIDX = DID1 /* \DID1 */
                    Return (One)
                }

                If ((DID1 == Zero))
                {
                    Return (One)
                }
                Else
                {
                    Return ((0xFFFF & DID1))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                Return (CDDS (DID1))
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((SGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXD1) /* \NXD1 */
                }

                Return (NDDS (DID1))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }
        }

        Device (DD02)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DID2) == 0x0400))
                {
                    EDPV = 0x02
                    NXDX = NXD2 /* \NXD2 */
                    DIDX = DID2 /* \DID2 */
                    Return (0x02)
                }

                If ((DID2 == Zero))
                {
                    Return (0x02)
                }
                Else
                {
                    Return ((0xFFFF & DID2))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((LIDS == Zero))
                {
                    Return (Zero)
                }

                Return (CDDS (DID2))
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((SGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXD2) /* \NXD2 */
                }

                Return (NDDS (DID2))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }
        }

        Device (DD03)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DID3) == 0x0400))
                {
                    EDPV = 0x03
                    NXDX = NXD3 /* \NXD3 */
                    DIDX = DID3 /* \DID3 */
                    Return (0x03)
                }

                If ((DID3 == Zero))
                {
                    Return (0x03)
                }
                Else
                {
                    Return ((0xFFFF & DID3))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((DID3 == Zero))
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (CDDS (DID3))
                }
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((SGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXD3) /* \NXD3 */
                }

                Return (NDDS (DID3))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }
        }

        Device (DD04)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DID4) == 0x0400))
                {
                    EDPV = 0x04
                    NXDX = NXD4 /* \NXD4 */
                    DIDX = DID4 /* \DID4 */
                    Return (0x04)
                }

                If ((DID4 == Zero))
                {
                    Return (0x04)
                }
                Else
                {
                    Return ((0xFFFF & DID4))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((DID4 == Zero))
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (CDDS (DID4))
                }
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((SGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXD4) /* \NXD4 */
                }

                Return (NDDS (DID4))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }
        }

        Device (DD05)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DID5) == 0x0400))
                {
                    EDPV = 0x05
                    NXDX = NXD5 /* \NXD5 */
                    DIDX = DID5 /* \DID5 */
                    Return (0x05)
                }

                If ((DID5 == Zero))
                {
                    Return (0x05)
                }
                Else
                {
                    Return ((0xFFFF & DID5))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((DID5 == Zero))
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (CDDS (DID5))
                }
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((SGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXD5) /* \NXD5 */
                }

                Return (NDDS (DID5))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }
        }

        Device (DD06)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DID6) == 0x0400))
                {
                    EDPV = 0x06
                    NXDX = NXD6 /* \NXD6 */
                    DIDX = DID6 /* \DID6 */
                    Return (0x06)
                }

                If ((DID6 == Zero))
                {
                    Return (0x06)
                }
                Else
                {
                    Return ((0xFFFF & DID6))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((DID6 == Zero))
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (CDDS (DID6))
                }
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((SGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXD6) /* \NXD6 */
                }

                Return (NDDS (DID6))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }
        }

        Device (DD07)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DID7) == 0x0400))
                {
                    EDPV = 0x07
                    NXDX = NXD7 /* \NXD7 */
                    DIDX = DID7 /* \DID7 */
                    Return (0x07)
                }

                If ((DID7 == Zero))
                {
                    Return (0x07)
                }
                Else
                {
                    Return ((0xFFFF & DID7))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((DID7 == Zero))
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (CDDS (DID7))
                }
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((SGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXD7) /* \NXD7 */
                }

                Return (NDDS (DID7))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }
        }

        Device (DD08)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DID8) == 0x0400))
                {
                    EDPV = 0x08
                    NXDX = NXD8 /* \NXD8 */
                    DIDX = DID8 /* \DID8 */
                    Return (0x08)
                }

                If ((DID8 == Zero))
                {
                    Return (0x08)
                }
                Else
                {
                    Return ((0xFFFF & DID8))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((DID8 == Zero))
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (CDDS (DID8))
                }
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((SGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXD8) /* \NXD8 */
                }

                Return (NDDS (DID8))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }
        }

        Device (DD09)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DID9) == 0x0400))
                {
                    EDPV = 0x09
                    NXDX = NXD8 /* \NXD8 */
                    DIDX = DID9 /* \DID9 */
                    Return (0x09)
                }

                If ((DID9 == Zero))
                {
                    Return (0x09)
                }
                Else
                {
                    Return ((0xFFFF & DID9))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((DID9 == Zero))
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (CDDS (DID9))
                }
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((SGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXD8) /* \NXD8 */
                }

                Return (NDDS (DID9))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }
        }

        Device (DD0A)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DIDA) == 0x0400))
                {
                    EDPV = 0x0A
                    NXDX = NXD8 /* \NXD8 */
                    DIDX = DIDA /* \DIDA */
                    Return (0x0A)
                }

                If ((DIDA == Zero))
                {
                    Return (0x0A)
                }
                Else
                {
                    Return ((0xFFFF & DIDA))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((DIDA == Zero))
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (CDDS (DIDA))
                }
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((SGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXD8) /* \NXD8 */
                }

                Return (NDDS (DIDA))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }
        }

        Device (DD0B)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DIDB) == 0x0400))
                {
                    EDPV = 0x0B
                    NXDX = NXD8 /* \NXD8 */
                    DIDX = DIDB /* \DIDB */
                    Return (0x0B)
                }

                If ((DIDB == Zero))
                {
                    Return (0x0B)
                }
                Else
                {
                    Return ((0xFFFF & DIDB))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((DIDB == Zero))
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (CDDS (DIDB))
                }
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((SGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXD8) /* \NXD8 */
                }

                Return (NDDS (DIDB))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }
        }

        Device (DD0C)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DIDC) == 0x0400))
                {
                    EDPV = 0x0C
                    NXDX = NXD8 /* \NXD8 */
                    DIDX = DIDC /* \DIDC */
                    Return (0x0C)
                }

                If ((DIDC == Zero))
                {
                    Return (0x0C)
                }
                Else
                {
                    Return ((0xFFFF & DIDC))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((DIDC == Zero))
                {
                    Return (0x0C)
                }
                Else
                {
                    Return (CDDS (DIDC))
                }
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((SGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXD8) /* \NXD8 */
                }

                Return (NDDS (DIDC))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }
        }

        Device (DD0D)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DIDD) == 0x0400))
                {
                    EDPV = 0x0D
                    NXDX = NXD8 /* \NXD8 */
                    DIDX = DIDD /* \DIDD */
                    Return (0x0D)
                }

                If ((DIDD == Zero))
                {
                    Return (0x0D)
                }
                Else
                {
                    Return ((0xFFFF & DIDD))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((DIDD == Zero))
                {
                    Return (0x0D)
                }
                Else
                {
                    Return (CDDS (DIDD))
                }
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((SGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXD8) /* \NXD8 */
                }

                Return (NDDS (DIDD))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }
        }

        Device (DD0E)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DIDE) == 0x0400))
                {
                    EDPV = 0x0E
                    NXDX = NXD8 /* \NXD8 */
                    DIDX = DIDE /* \DIDE */
                    Return (0x0E)
                }

                If ((DIDE == Zero))
                {
                    Return (0x0E)
                }
                Else
                {
                    Return ((0xFFFF & DIDE))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((DIDE == Zero))
                {
                    Return (0x0E)
                }
                Else
                {
                    Return (CDDS (DIDE))
                }
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((SGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXD8) /* \NXD8 */
                }

                Return (NDDS (DIDE))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }
        }

        Device (DD0F)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DIDF) == 0x0400))
                {
                    EDPV = 0x0F
                    NXDX = NXD8 /* \NXD8 */
                    DIDX = DIDF /* \DIDF */
                    Return (0x0F)
                }

                If ((DIDF == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return ((0xFFFF & DIDF))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((DIDC == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (CDDS (DIDF))
                }
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((SGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXD8) /* \NXD8 */
                }

                Return (NDDS (DIDF))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }
        }

        Device (DD1F)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If ((EDPV == Zero))
                {
                    Return (0x1F)
                }
                Else
                {
                    Return ((0xFFFF & DIDX))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((EDPV == Zero))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (CDDS (DIDX))
                }
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((SGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXDX) /* \NXDX */
                }

                Return (NDDS (DIDX))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }

            Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
            {
                If (CondRefOf (\PBCL))
                {
                    PBCL ()
                }
                Else
                {
                    Return (Package (0x67)
                    {
                        0x50, 
                        0x32, 
                        Zero, 
                        One, 
                        0x02, 
                        0x03, 
                        0x04, 
                        0x05, 
                        0x06, 
                        0x07, 
                        0x08, 
                        0x09, 
                        0x0A, 
                        0x0B, 
                        0x0C, 
                        0x0D, 
                        0x0E, 
                        0x0F, 
                        0x10, 
                        0x11, 
                        0x12, 
                        0x13, 
                        0x14, 
                        0x15, 
                        0x16, 
                        0x17, 
                        0x18, 
                        0x19, 
                        0x1A, 
                        0x1B, 
                        0x1C, 
                        0x1D, 
                        0x1E, 
                        0x1F, 
                        0x20, 
                        0x21, 
                        0x22, 
                        0x23, 
                        0x24, 
                        0x25, 
                        0x26, 
                        0x27, 
                        0x28, 
                        0x29, 
                        0x2A, 
                        0x2B, 
                        0x2C, 
                        0x2D, 
                        0x2E, 
                        0x2F, 
                        0x30, 
                        0x31, 
                        0x32, 
                        0x33, 
                        0x34, 
                        0x35, 
                        0x36, 
                        0x37, 
                        0x38, 
                        0x39, 
                        0x3A, 
                        0x3B, 
                        0x3C, 
                        0x3D, 
                        0x3E, 
                        0x3F, 
                        0x40, 
                        0x41, 
                        0x42, 
                        0x43, 
                        0x44, 
                        0x45, 
                        0x46, 
                        0x47, 
                        0x48, 
                        0x49, 
                        0x4A, 
                        0x4B, 
                        0x4C, 
                        0x4D, 
                        0x4E, 
                        0x4F, 
                        0x50, 
                        0x51, 
                        0x52, 
                        0x53, 
                        0x54, 
                        0x55, 
                        0x56, 
                        0x57, 
                        0x58, 
                        0x59, 
                        0x5A, 
                        0x5B, 
                        0x5C, 
                        0x5D, 
                        0x5E, 
                        0x5F, 
                        0x60, 
                        0x61, 
                        0x62, 
                        0x63, 
                        0x64
                    })
                }
            }

            Method (_BCM, 1, NotSerialized)  // _BCM: Brightness Control Method
            {
                If (((Arg0 >= Zero) && (Arg0 <= 0x64)))
                {
                    \_SB.PCI0.GFX0.AINT (One, Arg0)
                    BRTL = Arg0
                }
            }

            Method (_BQC, 0, NotSerialized)  // _BQC: Brightness Query Current
            {
                Return (BRTL) /* \BRTL */
            }
        }

        Method (SDDL, 1, NotSerialized)
        {
            NDID++
            Local0 = (Arg0 & 0x0F0F)
            Local1 = (0x80000000 | Local0)
            If ((DIDL == Local0))
            {
                Return (Local1)
            }

            If ((DDL2 == Local0))
            {
                Return (Local1)
            }

            If ((DDL3 == Local0))
            {
                Return (Local1)
            }

            If ((DDL4 == Local0))
            {
                Return (Local1)
            }

            If ((DDL5 == Local0))
            {
                Return (Local1)
            }

            If ((DDL6 == Local0))
            {
                Return (Local1)
            }

            If ((DDL7 == Local0))
            {
                Return (Local1)
            }

            If ((DDL8 == Local0))
            {
                Return (Local1)
            }

            If ((DDL9 == Local0))
            {
                Return (Local1)
            }

            If ((DD10 == Local0))
            {
                Return (Local1)
            }

            If ((DD11 == Local0))
            {
                Return (Local1)
            }

            If ((DD12 == Local0))
            {
                Return (Local1)
            }

            If ((DD13 == Local0))
            {
                Return (Local1)
            }

            If ((DD14 == Local0))
            {
                Return (Local1)
            }

            If ((DD15 == Local0))
            {
                Return (Local1)
            }

            Return (Zero)
        }

        Method (CDDS, 1, NotSerialized)
        {
            Local0 = (Arg0 & 0x0F0F)
            If ((Zero == Local0))
            {
                Return (0x1D)
            }

            If ((CADL == Local0))
            {
                Return (0x1F)
            }

            If ((CAL2 == Local0))
            {
                Return (0x1F)
            }

            If ((CAL3 == Local0))
            {
                Return (0x1F)
            }

            If ((CAL4 == Local0))
            {
                Return (0x1F)
            }

            If ((CAL5 == Local0))
            {
                Return (0x1F)
            }

            If ((CAL6 == Local0))
            {
                Return (0x1F)
            }

            If ((CAL7 == Local0))
            {
                Return (0x1F)
            }

            If ((CAL8 == Local0))
            {
                Return (0x1F)
            }

            Return (0x1D)
        }

        Method (NDDS, 1, NotSerialized)
        {
            Local0 = (Arg0 & 0x0F0F)
            If ((Zero == Local0))
            {
                Return (Zero)
            }

            If ((NADL == Local0))
            {
                Return (One)
            }

            If ((NDL2 == Local0))
            {
                Return (One)
            }

            If ((NDL3 == Local0))
            {
                Return (One)
            }

            If ((NDL4 == Local0))
            {
                Return (One)
            }

            If ((NDL5 == Local0))
            {
                Return (One)
            }

            If ((NDL6 == Local0))
            {
                Return (One)
            }

            If ((NDL7 == Local0))
            {
                Return (One)
            }

            If ((NDL8 == Local0))
            {
                Return (One)
            }

            Return (Zero)
        }

        Method (DSST, 1, NotSerialized)
        {
            If (((Arg0 & 0xC0000000) == 0xC0000000))
            {
                CSTE = NSTE /* \NSTE */
            }
        }

        Scope (\_SB.PCI0)
        {
            OperationRegion (MCHP, PCI_Config, 0x40, 0xC0)
            Field (MCHP, AnyAcc, NoLock, Preserve)
            {
                Offset (0x14), 
                AUDE,   8, 
                Offset (0x60), 
                TASM,   10, 
                Offset (0x62)
            }
        }

        OperationRegion (IGDP, PCI_Config, 0x40, 0xC0)
        Field (IGDP, AnyAcc, NoLock, Preserve)
        {
            Offset (0x10), 
                ,   1, 
            GIVD,   1, 
                ,   2, 
            GUMA,   3, 
            Offset (0x12), 
            Offset (0x14), 
                ,   4, 
            GMFN,   1, 
            Offset (0x18), 
            Offset (0xA4), 
            ASLE,   8, 
            Offset (0xA8), 
            GSSE,   1, 
            GSSB,   14, 
            GSES,   1, 
            Offset (0xB0), 
                ,   12, 
            CDVL,   1, 
            Offset (0xB2), 
            Offset (0xB5), 
            LBPC,   8, 
            Offset (0xBC), 
            ASLS,   32
        }

        OperationRegion (IGDM, SystemMemory, ASLB, 0x2000)
        Field (IGDM, AnyAcc, NoLock, Preserve)
        {
            SIGN,   128, 
            SIZE,   32, 
            OVER,   32, 
            SVER,   256, 
            VVER,   128, 
            GVER,   128, 
            MBOX,   32, 
            DMOD,   32, 
            PCON,   32, 
            DVER,   64, 
            Offset (0x100), 
            DRDY,   32, 
            CSTS,   32, 
            CEVT,   32, 
            Offset (0x120), 
            DIDL,   32, 
            DDL2,   32, 
            DDL3,   32, 
            DDL4,   32, 
            DDL5,   32, 
            DDL6,   32, 
            DDL7,   32, 
            DDL8,   32, 
            CPDL,   32, 
            CPL2,   32, 
            CPL3,   32, 
            CPL4,   32, 
            CPL5,   32, 
            CPL6,   32, 
            CPL7,   32, 
            CPL8,   32, 
            CADL,   32, 
            CAL2,   32, 
            CAL3,   32, 
            CAL4,   32, 
            CAL5,   32, 
            CAL6,   32, 
            CAL7,   32, 
            CAL8,   32, 
            NADL,   32, 
            NDL2,   32, 
            NDL3,   32, 
            NDL4,   32, 
            NDL5,   32, 
            NDL6,   32, 
            NDL7,   32, 
            NDL8,   32, 
            ASLP,   32, 
            TIDX,   32, 
            CHPD,   32, 
            CLID,   32, 
            CDCK,   32, 
            SXSW,   32, 
            EVTS,   32, 
            CNOT,   32, 
            NRDY,   32, 
            DDL9,   32, 
            DD10,   32, 
            DD11,   32, 
            DD12,   32, 
            DD13,   32, 
            DD14,   32, 
            DD15,   32, 
            CPL9,   32, 
            CP10,   32, 
            CP11,   32, 
            CP12,   32, 
            CP13,   32, 
            CP14,   32, 
            CP15,   32, 
            Offset (0x200), 
            SCIE,   1, 
            GEFC,   4, 
            GXFC,   3, 
            GESF,   8, 
            Offset (0x204), 
            PARM,   32, 
            DSLP,   32, 
            Offset (0x300), 
            ARDY,   32, 
            ASLC,   32, 
            TCHE,   32, 
            ALSI,   32, 
            BCLP,   32, 
            PFIT,   32, 
            CBLV,   32, 
            BCLM,   320, 
            CPFM,   32, 
            EPFM,   32, 
            PLUT,   592, 
            PFMB,   32, 
            CCDV,   32, 
            PCFT,   32, 
            SROT,   32, 
            IUER,   32, 
            FDSP,   64, 
            FDSS,   32, 
            STAT,   32, 
            Offset (0x400), 
            GVD1,   49152, 
            PHED,   32, 
            BDDC,   2048
        }

        Name (DBTB, Package (0x15)
        {
            Zero, 
            0x07, 
            0x38, 
            0x01C0, 
            0x0E00, 
            0x3F, 
            0x01C7, 
            0x0E07, 
            0x01F8, 
            0x0E38, 
            0x0FC0, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            0x7000, 
            0x7007, 
            0x7038, 
            0x71C0, 
            0x7E00
        })
        Name (CDCT, Package (0x05)
        {
            Package (0x02)
            {
                0xE4, 
                0x0140
            }, 

            Package (0x02)
            {
                0xDE, 
                0x014D
            }, 

            Package (0x02)
            {
                0xDE, 
                0x014D
            }, 

            Package (0x02)
            {
                Zero, 
                Zero
            }, 

            Package (0x02)
            {
                0xDE, 
                0x014D
            }
        })
        Name (SUCC, One)
        Name (NVLD, 0x02)
        Name (CRIT, 0x04)
        Name (NCRT, 0x06)
        Method (GSCI, 0, Serialized)
        {
            Method (GBDA, 0, Serialized)
            {
                If ((GESF == Zero))
                {
                    PARM = 0x0659
                    GESF = Zero
                    Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                }

                If ((GESF == One))
                {
                    PARM = 0x00300482
                    If ((S0ID == One))
                    {
                        PARM |= 0x0100
                    }

                    GESF = Zero
                    Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                }

                If ((GESF == 0x04))
                {
                    PARM &= 0xEFFF0000
                    PARM &= (DerefOf (DBTB [IBTT]) << 0x10)
                    PARM |= IBTT /* \_SB_.PCI0.GFX0.PARM */
                    GESF = Zero
                    Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                }

                If ((GESF == 0x05))
                {
                    PARM = IPSC /* \IPSC */
                    PARM |= (IPAT << 0x08)
                    PARM += 0x0100
                    PARM |= (LIDS << 0x10)
                    PARM += 0x00010000
                    PARM |= (IBIA << 0x14)
                    GESF = Zero
                    Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                }

                If ((GESF == 0x07))
                {
                    PARM = GIVD /* \_SB_.PCI0.GFX0.GIVD */
                    PARM ^= One
                    PARM |= (GMFN << One)
                    PARM |= 0x1800
                    PARM |= (IDMS << 0x11)
                    PARM |= (DerefOf (DerefOf (CDCT [HVCO]) [CDVL]) << 
                        0x15) /* \_SB_.PCI0.GFX0.PARM */
                    GESF = One
                    Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                }

                If ((GESF == 0x0A))
                {
                    PARM = Zero
                    If (ISSC)
                    {
                        PARM |= 0x03
                    }

                    GESF = Zero
                    Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                }

                If ((GESF == 0x0B))
                {
                    PARM = KSV0 /* \KSV0 */
                    GESF = KSV1 /* \KSV1 */
                    Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                }

                GESF = Zero
                Return (CRIT) /* \_SB_.PCI0.GFX0.CRIT */
            }

            Method (SBCB, 0, Serialized)
            {
                If ((GESF == Zero))
                {
                    PARM = Zero
                    PARM = 0x000F87DD
                    GESF = Zero
                    Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                }

                If ((GESF == One))
                {
                    GESF = Zero
                    PARM = Zero
                    Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                }

                If ((GESF == 0x03))
                {
                    GESF = Zero
                    PARM = Zero
                    Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                }

                If ((GESF == 0x04))
                {
                    GESF = Zero
                    PARM = Zero
                    Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                }

                If ((GESF == 0x05))
                {
                    GESF = Zero
                    PARM = Zero
                    Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                }

                If ((GESF == 0x07))
                {
                    If (((S0ID == One) && (OSYS < 0x07DF)))
                    {
                        If (((PARM & 0xFF) == One))
                        {
                            \GUAM (One)
                        }

                        If (((PARM & 0xFF) == Zero))
                        {
                            \GUAM (Zero)
                        }
                    }

                    If ((PARM == Zero))
                    {
                        Local0 = CLID /* \_SB_.PCI0.GFX0.CLID */
                        If ((0x80000000 & Local0))
                        {
                            CLID &= 0x0F
                            GLID (CLID)
                        }
                    }

                    GESF = Zero
                    PARM = Zero
                    Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                }

                If ((GESF == 0x08))
                {
                    GESF = Zero
                    PARM = Zero
                    Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                }

                If ((GESF == 0x09))
                {
                    IBTT = (PARM & 0xFF)
                    GESF = Zero
                    PARM = Zero
                    Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                }

                If ((GESF == 0x0A))
                {
                    IPSC = (PARM & 0xFF)
                    If (((PARM >> 0x08) & 0xFF))
                    {
                        IPAT = ((PARM >> 0x08) & 0xFF)
                        IPAT--
                    }

                    IBIA = ((PARM >> 0x14) & 0x07)
                    GESF = Zero
                    PARM = Zero
                    Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                }

                If ((GESF == 0x0B))
                {
                    IF1E = ((PARM >> One) & One)
                    If ((PARM & 0x0001E000))
                    {
                        IDMS = ((PARM >> 0x0D) & 0x0F)
                    }
                    Else
                    {
                        IDMS = ((PARM >> 0x11) & 0x0F)
                    }

                    GESF = Zero
                    PARM = Zero
                    Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                }

                If ((GESF == 0x10))
                {
                    GESF = Zero
                    PARM = Zero
                    Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                }

                If ((GESF == 0x11))
                {
                    PARM = (LIDS << 0x08)
                    PARM += 0x0100
                    GESF = Zero
                    Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                }

                If ((GESF == 0x12))
                {
                    If ((PARM & One))
                    {
                        If (((PARM >> One) == One))
                        {
                            ISSC = One
                        }
                        Else
                        {
                            GESF = Zero
                            Return (CRIT) /* \_SB_.PCI0.GFX0.CRIT */
                        }
                    }
                    Else
                    {
                        ISSC = Zero
                    }

                    GESF = Zero
                    PARM = Zero
                    Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                }

                If ((GESF == 0x13))
                {
                    GESF = Zero
                    PARM = Zero
                    Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                }

                If ((GESF == 0x14))
                {
                    PAVP = (PARM & 0x0F)
                    GESF = Zero
                    PARM = Zero
                    Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                }

                GESF = Zero
                Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
            }

            If ((GEFC == 0x04))
            {
                GXFC = GBDA ()
            }

            If ((GEFC == 0x06))
            {
                GXFC = SBCB ()
            }

            GEFC = Zero
            CPSC = One
            GSSE = Zero
            SCIE = Zero
            Return (Zero)
        }

        Method (PDRD, 0, NotSerialized)
        {
            Return (!DRDY)
        }

        Method (PSTS, 0, NotSerialized)
        {
            If ((CSTS > 0x02))
            {
                Sleep (ASLP)
            }

            Return ((CSTS == 0x03))
        }

        Method (GNOT, 2, NotSerialized)
        {
            If (PDRD ())
            {
                Return (One)
            }

            CEVT = Arg0
            CSTS = 0x03
            If (((CHPD == Zero) && (Arg1 == Zero)))
            {
                Notify (\_SB.PCI0.GFX0, Arg1)
            }

            If (CondRefOf (HNOT))
            {
                HNOT (Arg0)
            }
            Else
            {
                Notify (\_SB.PCI0.GFX0, 0x80) // Status Change
            }

            Return (Zero)
        }

        Method (GHDS, 1, NotSerialized)
        {
            TIDX = Arg0
            Return (GNOT (One, Zero))
        }

        Method (GLID, 1, NotSerialized)
        {
            If ((Arg0 == One))
            {
                CLID = 0x03
            }
            Else
            {
                CLID = Arg0
            }

            If (GNOT (0x02, Zero))
            {
                CLID |= 0x80000000
                Return (One)
            }

            Return (Zero)
        }

        Method (GDCK, 1, NotSerialized)
        {
            CDCK = Arg0
            Return (GNOT (0x04, Zero))
        }

        Method (PARD, 0, NotSerialized)
        {
            If (!ARDY)
            {
                Sleep (ASLP)
            }

            Return (!ARDY)
        }

        Method (IUEH, 1, Serialized)
        {
            IUER &= 0xC0
            IUER ^= (One << Arg0)
            If ((Arg0 <= 0x04))
            {
                Return (AINT (0x05, Zero))
            }
            Else
            {
                Return (AINT (Arg0, Zero))
            }
        }

        Method (AINT, 2, NotSerialized)
        {
            If (!(TCHE & (One << Arg0)))
            {
                Return (One)
            }

            If (PARD ())
            {
                Return (One)
            }

            If (((Arg0 >= 0x05) && (Arg0 <= 0x07)))
            {
                ASLC = (One << Arg0)
                ASLE = One
                Local2 = Zero
                While (((Local2 < 0xFA) && (ASLC != Zero)))
                {
                    Sleep (0x04)
                    Local2++
                }

                Return (Zero)
            }

            If ((Arg0 == 0x02))
            {
                If (CPFM)
                {
                    Local0 = (CPFM & 0x0F)
                    Local1 = (EPFM & 0x0F)
                    If ((Local0 == One))
                    {
                        If ((Local1 & 0x06))
                        {
                            PFIT = 0x06
                        }
                        ElseIf ((Local1 & 0x08))
                        {
                            PFIT = 0x08
                        }
                        Else
                        {
                            PFIT = One
                        }
                    }

                    If ((Local0 == 0x06))
                    {
                        If ((Local1 & 0x08))
                        {
                            PFIT = 0x08
                        }
                        ElseIf ((Local1 & One))
                        {
                            PFIT = One
                        }
                        Else
                        {
                            PFIT = 0x06
                        }
                    }

                    If ((Local0 == 0x08))
                    {
                        If ((Local1 & One))
                        {
                            PFIT = One
                        }
                        ElseIf ((Local1 & 0x06))
                        {
                            PFIT = 0x06
                        }
                        Else
                        {
                            PFIT = 0x08
                        }
                    }
                }
                Else
                {
                    PFIT ^= 0x07
                }

                PFIT |= 0x80000000
                ASLC = 0x04
            }
            ElseIf ((Arg0 == One))
            {
                BCLP = ((Arg1 * 0xFF) / 0x64)
                BCLP |= 0x80000000
                ASLC = 0x02
            }
            ElseIf ((Arg0 == Zero))
            {
                ALSI = Arg1
                ASLC = One
            }
            Else
            {
                Return (One)
            }

            ASLE = One
            Return (Zero)
        }

        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("3e5b41c6-eb1d-4260-9d15-c71fbadae414") /* Unknown UUID */))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        If ((Arg1 == One))
                        {
                            Debug = "iGfx Supported Functions Bitmap "
                            Return (0x0001E7FF)
                        }
                    }
                    Case (One)
                    {
                        If ((Arg1 == One))
                        {
                            Debug = " Adapter Power State Notification "
                            If (((S0ID == One) && (OSYS < 0x07DF)))
                            {
                                If (((DerefOf (Arg3 [Zero]) & 0xFF) == One))
                                {
                                    \GUAM (One)
                                }

                                Local0 = (DerefOf (Arg3 [One]) & 0xFF)
                                If ((Local0 == Zero))
                                {
                                    \GUAM (Zero)
                                }
                            }

                            If ((DerefOf (Arg3 [Zero]) == Zero))
                            {
                                Local0 = CLID /* \_SB_.PCI0.GFX0.CLID */
                                If ((0x80000000 & Local0))
                                {
                                    CLID &= 0x0F
                                    GLID (CLID)
                                }
                            }

                            Return (One)
                        }
                    }
                    Case (0x02)
                    {
                        If ((Arg1 == One))
                        {
                            Debug = "Display Power State Notification "
                            Return (One)
                        }
                    }
                    Case (0x03)
                    {
                        If ((Arg1 == One))
                        {
                            Debug = "BIOS POST Completion Notification "
                            Return (One)
                        }
                    }
                    Case (0x04)
                    {
                        If ((Arg1 == One))
                        {
                            Debug = "Pre-Hires Set Mode "
                            Return (One)
                        }
                    }
                    Case (0x05)
                    {
                        If ((Arg1 == One))
                        {
                            Debug = "Post-Hires Set Mode "
                            Return (One)
                        }
                    }
                    Case (0x06)
                    {
                        If ((Arg1 == One))
                        {
                            Debug = "SetDisplayDeviceNotification"
                            Return (One)
                        }
                    }
                    Case (0x07)
                    {
                        If ((Arg1 == One))
                        {
                            Debug = "SetBootDevicePreference "
                            IBTT = (DerefOf (Arg3 [Zero]) & 0xFF)
                            Return (One)
                        }
                    }
                    Case (0x08)
                    {
                        If ((Arg1 == One))
                        {
                            Debug = "SetPanelPreference "
                            IPSC = (DerefOf (Arg3 [Zero]) & 0xFF)
                            If ((DerefOf (Arg3 [One]) & 0xFF))
                            {
                                IPAT = (DerefOf (Arg3 [One]) & 0xFF)
                                IPAT--
                            }

                            IBIA = ((DerefOf (Arg3 [0x02]) >> 0x04) & 0x07)
                            Return (One)
                        }
                    }
                    Case (0x09)
                    {
                        If ((Arg1 == One))
                        {
                            Debug = "FullScreenDOS "
                            Return (One)
                        }
                    }
                    Case (0x0A)
                    {
                        If ((Arg1 == One))
                        {
                            Debug = "APM Complete "
                            Local0 = (LIDS << 0x08)
                            Local0 += 0x0100
                            Return (Local0)
                        }
                    }
                    Case (0x0D)
                    {
                        If ((Arg1 == One))
                        {
                            Debug = "GetBootDisplayPreference "
                            Local0 = ((DerefOf (Arg3 [0x03]) << 0x18) | (DerefOf (
                                Arg3 [0x02]) << 0x10))
                            Local0 &= 0xEFFF0000
                            Local0 &= (DerefOf (DBTB [IBTT]) << 0x10)
                            Local0 |= IBTT
                            Return (Local0)
                        }
                    }
                    Case (0x0E)
                    {
                        If ((Arg1 == One))
                        {
                            Debug = "GetPanelDetails "
                            Local0 = IPSC /* \IPSC */
                            Local0 |= (IPAT << 0x08)
                            Local0 += 0x0100
                            Local0 |= (LIDS << 0x10)
                            Local0 += 0x00010000
                            Local0 |= (IBIA << 0x14)
                            Return (Local0)
                        }
                    }
                    Case (0x0F)
                    {
                        If ((Arg1 == One))
                        {
                            Debug = "GetInternalGraphics "
                            Local0 = GIVD /* \_SB_.PCI0.GFX0.GIVD */
                            Local0 ^= One
                            Local0 |= (GMFN << One)
                            Local0 |= 0x1800
                            Local0 |= (IDMS << 0x11)
                            Local0 |= (DerefOf (DerefOf (CDCT [HVCO]) [CDVL]) << 
                                0x15)
                            Return (Local0)
                        }
                    }
                    Case (0x10)
                    {
                        If ((Arg1 == One))
                        {
                            Debug = "GetAKSV "
                            Name (KSVP, Package (0x02)
                            {
                                0x80000000, 
                                0x8000
                            })
                            KSVP [Zero] = KSV0 /* \KSV0 */
                            KSVP [One] = KSV1 /* \KSV1 */
                            Return (KSVP) /* \_SB_.PCI0.GFX0._DSM.KSVP */
                        }
                    }

                }
            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }
    }

    Scope (\_SB)
    {
        Device (SKC0)
        {
            Name (_HID, "INT3470")  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _CID: Compatible ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((IMTP == 0x02))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (\_SB.PCI0.GFX0)
    {
        Device (SKC0)
        {
            Name (_ADR, 0xCA00)  // _ADR: Address
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((IMTP == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }
}



SSDT3
-----
DefinitionBlock ("", "SSDT", 2, "CpuRef", "CpuSsdt", 0x00003000)
{
    External (_PR_.PR00, DeviceObj)
    External (_PR_.PR01, DeviceObj)
    External (_PR_.PR02, DeviceObj)
    External (_PR_.PR03, DeviceObj)
    External (_PR_.PR04, DeviceObj)
    External (_PR_.PR05, DeviceObj)
    External (_PR_.PR06, DeviceObj)
    External (_PR_.PR07, DeviceObj)
    External (_PR_.PR08, DeviceObj)
    External (_PR_.PR09, DeviceObj)
    External (_PR_.PR10, DeviceObj)
    External (_PR_.PR11, DeviceObj)
    External (_PR_.PR12, DeviceObj)
    External (_PR_.PR13, DeviceObj)
    External (_PR_.PR14, DeviceObj)
    External (_PR_.PR15, DeviceObj)
    External (_SB_.OSCP, IntObj)
    External (OSYS, UnknownObj)

    Scope (\)
    {
        Name (SSDT, Package (0x15)
        {
            "CPU0IST ", 
            0x8BE79098, 
            0x000006B4, 
            "APIST   ", 
            0x8BE35018, 
            0x00000D14, 
            "CPU0CST ", 
            0x8BE36698, 
            0x000003FF, 
            "APCST   ", 
            0x8BE34018, 
            0x0000030A, 
            "CPU0HWP ", 
            0x8BE79B18, 
            0x000000BA, 
            "APHWP   ", 
            0x8BE34418, 
            0x00000317, 
            "HWPLVT  ", 
            0x8BE36018, 
            0x00000628
        })
        Name (\PC00, 0x80000000)
        Name (\PC01, 0x80000000)
        Name (\PC02, 0x80000000)
        Name (\PC03, 0x80000000)
        Name (\PC04, 0x80000000)
        Name (\PC05, 0x80000000)
        Name (\PC06, 0x80000000)
        Name (\PC07, 0x80000000)
        Name (\PC08, 0x80000000)
        Name (\PC09, 0x80000000)
        Name (\PC10, 0x80000000)
        Name (\PC11, 0x80000000)
        Name (\PC12, 0x80000000)
        Name (\PC13, 0x80000000)
        Name (\PC14, 0x80000000)
        Name (\PC15, 0x80000000)
        Name (\SDTL, Zero)
    }

    Scope (\_PR)
    {
        Name (CTPC, Zero)
        OperationRegion (PNVS, SystemMemory, 0x8AC5C000, 0x006C)
        Field (PNVS, AnyAcc, Lock, Preserve)
        {
            PGRV,   8, 
            CFGD,   32, 
            Offset (0x06), 
            ACRT,   8, 
            APSV,   8, 
            AAC0,   8, 
            CPID,   32, 
            CPPC,   8, 
            CLVL,   8, 
            CBMI,   8, 
            PL10,   16, 
            PL20,   16, 
            PLW0,   8, 
            CTC0,   8, 
            TAR0,   8, 
            PPC0,   8, 
            PL11,   16, 
            PL21,   16, 
            PLW1,   8, 
            CTC1,   8, 
            TAR1,   8, 
            PPC1,   8, 
            PL12,   16, 
            PL22,   16, 
            PLW2,   8, 
            CTC2,   8, 
            TAR2,   8, 
            PPC2,   8, 
            C3MW,   8, 
            C6MW,   8, 
            C7MW,   8, 
            CDMW,   8, 
            C3LT,   16, 
            C6LT,   16, 
            C7LT,   16, 
            CDLT,   16, 
            CDLV,   16, 
            CDPW,   16, 
            MPMF,   8, 
            DTSE,   8, 
            DTS1,   8, 
            DTS2,   8, 
            DTSF,   8, 
            PDTS,   8, 
            PKGA,   8, 
            DTS3,   8, 
            DTS4,   8, 
            BGMA,   64, 
            BGMS,   8, 
            BGIA,   16, 
            BGIL,   16, 
            DSIA,   16, 
            DSIL,   8, 
            DSAE,   8, 
            EPCS,   8, 
            EMNA,   64, 
            ELNG,   64, 
            HWPV,   8, 
            HWPA,   16, 
            HWPL,   16, 
            POWS,   8, 
            HDCE,   8, 
            HWPI,   8, 
            DTSI,   8
        }

        OperationRegion (IO_D, SystemIO, \_PR.DSIA, \_PR.DSIL)
        Field (IO_D, ByteAcc, NoLock, Preserve)
        {
            TRPD,   8
        }

        OperationRegion (IO_P, SystemIO, \_PR.BGIA, \_PR.BGIL)
        Field (IO_P, ByteAcc, NoLock, Preserve)
        {
            TRPF,   8
        }
    }

    Scope (\_PR.PR00)
    {
        Name (HI0, Zero)
        Name (HC0, Zero)
        Name (HW0, Zero)
        Name (HW2, Zero)
        Method (_PDC, 1, Serialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
        {
            Local0 = COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Name (STS0, Buffer (0x04)
        {
             0x00, 0x00, 0x00, 0x00                           // ....
        })
        Method (CPDC, 1, Serialized)
        {
            CreateDWordField (Arg0, Zero, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Concatenate (STS0, TEMP, Local2)
            Return (COSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2))
        }

        Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
        OperationRegion (SMIP, SystemIO, 0xB2, One)
        Field (SMIP, ByteAcc, NoLock, Preserve)
        {
            IOB2,   8
        }

        Method (COSC, 4, Serialized)
        {
            CreateDWordField (Arg3, Zero, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, Zero, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            CreateDWordField (UID0, Zero, EID0)
            CreateDWordField (UID0, 0x04, EID1)
            CreateDWordField (UID0, 0x08, EID2)
            CreateDWordField (UID0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 = 0x06
                Return (Arg3)
            }

            If ((Arg1 != One))
            {
                STS0 = 0x0A
                Return (Arg3)
            }

            If (!(Arg2 >= 0x02))
            {
                STS0 = 0x02
                Return (Arg3)
            }

            If (~(STS0 & One))
            {
                If ((CAP0 & 0x2000))
                {
                    \_PR.HDCE = Zero
                }
                Else
                {
                    IOB2 = 0x28
                }
            }

            Return (Arg3)
        }

        Method (GCAP, 1, Serialized)
        {
            CreateDWordField (Arg0, Zero, STS0)
            CreateDWordField (Arg0, 0x04, CAP0)
            If (((STS0 == 0x06) || (STS0 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS0 & One))
            {
                CAP0 &= 0x0BFF
                Return (Zero)
            }

            PC00 = ((PC00 & 0x7FFFFFFF) | CAP0) /* \_PR_.PR00.GCAP.CAP0 */
            If ((CFGD & 0x7A))
            {
                If ((((CFGD & 0x0200) && (PC00 & 0x18)) && !
                    (SDTL & 0x02)))
                {
                    SDTL |= 0x02
                    OperationRegion (CST0, SystemMemory, DerefOf (SSDT [0x07]), DerefOf (SSDT [0x08]))
                    Load (CST0, HC0) /* \_PR_.PR00.HC0_ */
                }
            }

            If (((CFGD & One) && !(SDTL & 0x08)))
            {
                SDTL |= 0x08
                OperationRegion (IST0, SystemMemory, DerefOf (SSDT [One]), DerefOf (SSDT [0x02]))
                Load (IST0, HI0) /* \_PR_.PR00.HI0_ */
            }

            If ((OSYS >= 0x07DF))
            {
                If (((CFGD & 0x00400000) && !(SDTL & 0x40)))
                {
                    If ((\_SB.OSCP & 0x40))
                    {
                        SDTL |= 0x40
                        OperationRegion (HWP0, SystemMemory, DerefOf (SSDT [0x0D]), DerefOf (SSDT [0x0E]))
                        Load (HWP0, HW0) /* \_PR_.PR00.HW0_ */
                        If ((CFGD & 0x00800000))
                        {
                            OperationRegion (HWPL, SystemMemory, DerefOf (SSDT [0x13]), DerefOf (SSDT [0x14]))
                            Load (HWPL, HW2) /* \_PR_.PR00.HW2_ */
                        }
                    }

                    If ((\_SB.OSCP & 0x20))
                    {
                        If (!(\_SB.OSCP & 0x40))
                        {
                            HWPV = Zero
                        }
                    }

                    If ((\_SB.OSCP & 0x40))
                    {
                        HWPV = 0x02
                    }
                }
            }

            If (!(PC00 & 0x1000))
            {
                IOB2 = 0x27
            }

            Return (Zero)
        }
    }

    Scope (\_PR.PR01)
    {
        Name (HI1, Zero)
        Name (HC1, Zero)
        Name (HW1, Zero)
        Method (_PDC, 1, Serialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, Serialized)
        {
            CreateDWordField (Arg0, Zero, ST01)
            CreateDWordField (Arg0, 0x04, CP01)
            If (((ST01 == 0x06) || (ST01 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST01 & One))
            {
                CP01 &= 0x0BFF
                Return (Zero)
            }

            PC01 = ((PC01 & 0x7FFFFFFF) | CP01) /* \_PR_.PR01.GCAP.CP01 */
            If (((PC01 & 0x09) == 0x09))
            {
                APPT ()
            }

            If ((\_SB.OSCP & 0x20))
            {
                HWPT ()
            }

            If ((PC01 & 0x18))
            {
                APCT ()
            }

            PC00 = PC01 /* \PC01 */
            Return (Zero)
        }

        Method (APCT, 0, Serialized)
        {
            If (((CFGD & 0x7A) && !(SDTL & 0x20)))
            {
                SDTL |= 0x20
                OperationRegion (CST1, SystemMemory, DerefOf (SSDT [0x0A]), DerefOf (SSDT [0x0B]))
                Load (CST1, HC1) /* \_PR_.PR01.HC1_ */
            }
        }

        Method (APPT, 0, Serialized)
        {
            If (((CFGD & One) && !(SDTL & 0x10)))
            {
                SDTL |= 0x10
                OperationRegion (IST1, SystemMemory, DerefOf (SSDT [0x04]), DerefOf (SSDT [0x05]))
                Load (IST1, HI1) /* \_PR_.PR01.HI1_ */
            }
        }

        Method (HWPT, 0, Serialized)
        {
            If ((OSYS >= 0x07DF))
            {
                If (((CFGD & 0x00400000) && !(SDTL & 0x80)))
                {
                    SDTL |= 0x80
                    OperationRegion (HWP1, SystemMemory, DerefOf (SSDT [0x10]), DerefOf (SSDT [0x11]))
                    Load (HWP1, HW1) /* \_PR_.PR01.HW1_ */
                }
            }
        }
    }

    Scope (\_PR.PR02)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, ST02)
            CreateDWordField (Arg0, 0x04, CP02)
            If (((ST02 == 0x06) || (ST02 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST02 & One))
            {
                CP02 &= 0x0BFF
                Return (Zero)
            }

            PC02 = ((PC02 & 0x7FFFFFFF) | CP02) /* \_PR_.PR02.GCAP.CP02 */
            If (((PC02 & 0x09) == 0x09))
            {
                \_PR.PR01.APPT ()
            }

            If ((\_SB.OSCP & 0x20))
            {
                \_PR.PR01.HWPT ()
            }

            If ((PC02 & 0x18))
            {
                \_PR.PR01.APCT ()
            }

            PC00 = PC02 /* \PC02 */
            Return (Zero)
        }
    }

    Scope (\_PR.PR03)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, ST03)
            CreateDWordField (Arg0, 0x04, CP03)
            If (((ST03 == 0x06) || (ST03 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST03 & One))
            {
                CP03 &= 0x0BFF
                Return (Zero)
            }

            PC03 = ((PC03 & 0x7FFFFFFF) | CP03) /* \_PR_.PR03.GCAP.CP03 */
            If (((PC03 & 0x09) == 0x09))
            {
                \_PR.PR01.APPT ()
            }

            If ((\_SB.OSCP & 0x20))
            {
                \_PR.PR01.HWPT ()
            }

            If ((PC03 & 0x18))
            {
                \_PR.PR01.APCT ()
            }

            PC00 = PC03 /* \PC03 */
            Return (Zero)
        }
    }

    Scope (\_PR.PR04)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, ST04)
            CreateDWordField (Arg0, 0x04, CP04)
            If (((ST04 == 0x06) || (ST04 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST04 & One))
            {
                CP04 &= 0x0BFF
                Return (Zero)
            }

            PC04 = ((PC04 & 0x7FFFFFFF) | CP04) /* \_PR_.PR04.GCAP.CP04 */
            If (((PC04 & 0x09) == 0x09))
            {
                \_PR.PR01.APPT ()
            }

            If ((\_SB.OSCP & 0x20))
            {
                \_PR.PR01.HWPT ()
            }

            If ((PC04 & 0x18))
            {
                \_PR.PR01.APCT ()
            }

            PC00 = PC04 /* \PC04 */
            Return (Zero)
        }
    }

    Scope (\_PR.PR05)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, ST05)
            CreateDWordField (Arg0, 0x04, CP05)
            If (((ST05 == 0x06) || (ST05 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST05 & One))
            {
                CP05 &= 0x0BFF
                Return (Zero)
            }

            PC05 = ((PC05 & 0x7FFFFFFF) | CP05) /* \_PR_.PR05.GCAP.CP05 */
            If (((PC05 & 0x09) == 0x09))
            {
                \_PR.PR01.APPT ()
            }

            If ((\_SB.OSCP & 0x20))
            {
                \_PR.PR01.HWPT ()
            }

            If ((PC05 & 0x18))
            {
                \_PR.PR01.APCT ()
            }

            PC00 = PC05 /* \PC05 */
            Return (Zero)
        }
    }

    Scope (\_PR.PR06)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, ST06)
            CreateDWordField (Arg0, 0x04, CP06)
            If (((ST06 == 0x06) || (ST06 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST06 & One))
            {
                CP06 &= 0x0BFF
                Return (Zero)
            }

            PC06 = ((PC06 & 0x7FFFFFFF) | CP06) /* \_PR_.PR06.GCAP.CP06 */
            If (((PC06 & 0x09) == 0x09))
            {
                \_PR.PR01.APPT ()
            }

            If ((\_SB.OSCP & 0x20))
            {
                \_PR.PR01.HWPT ()
            }

            If ((PC06 & 0x18))
            {
                \_PR.PR01.APCT ()
            }

            PC00 = PC06 /* \PC06 */
            Return (Zero)
        }
    }

    Scope (\_PR.PR07)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, ST07)
            CreateDWordField (Arg0, 0x04, CP07)
            If (((ST07 == 0x06) || (ST07 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST07 & One))
            {
                CP07 &= 0x0BFF
                Return (Zero)
            }

            PC07 = ((PC07 & 0x7FFFFFFF) | CP07) /* \_PR_.PR07.GCAP.CP07 */
            If (((PC07 & 0x09) == 0x09))
            {
                \_PR.PR01.APPT ()
            }

            If ((\_SB.OSCP & 0x20))
            {
                \_PR.PR01.HWPT ()
            }

            If ((PC07 & 0x18))
            {
                \_PR.PR01.APCT ()
            }

            PC00 = PC07 /* \PC07 */
            Return (Zero)
        }
    }

    Scope (\_PR.PR08)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, ST08)
            CreateDWordField (Arg0, 0x04, CP08)
            If (((ST08 == 0x06) || (ST08 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST08 & One))
            {
                CP08 &= 0x0BFF
                Return (Zero)
            }

            PC08 = ((PC08 & 0x7FFFFFFF) | CP08) /* \_PR_.PR08.GCAP.CP08 */
            If (((PC08 & 0x09) == 0x09))
            {
                \_PR.PR01.APPT ()
            }

            If ((\_SB.OSCP & 0x20))
            {
                \_PR.PR01.HWPT ()
            }

            If ((PC08 & 0x18))
            {
                \_PR.PR01.APCT ()
            }

            PC00 = PC08 /* \PC08 */
            Return (Zero)
        }
    }

    Scope (\_PR.PR09)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, ST09)
            CreateDWordField (Arg0, 0x04, CP09)
            If (((ST09 == 0x06) || (ST09 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST09 & One))
            {
                CP09 &= 0x0BFF
                Return (Zero)
            }

            PC09 = ((PC09 & 0x7FFFFFFF) | CP09) /* \_PR_.PR09.GCAP.CP09 */
            If (((PC09 & 0x09) == 0x09))
            {
                \_PR.PR01.APPT ()
            }

            If ((\_SB.OSCP & 0x20))
            {
                \_PR.PR01.HWPT ()
            }

            If ((PC09 & 0x18))
            {
                \_PR.PR01.APCT ()
            }

            PC00 = PC09 /* \PC09 */
            Return (Zero)
        }
    }

    Scope (\_PR.PR10)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, ST10)
            CreateDWordField (Arg0, 0x04, CP10)
            If (((ST10 == 0x06) || (ST10 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST10 & One))
            {
                CP10 = (ST10 & 0x0BFF)
                Return (Zero)
            }

            PC10 = ((PC10 & 0x7FFFFFFF) | CP10) /* \_PR_.PR10.GCAP.CP10 */
            If (((PC10 & 0x09) == 0x09))
            {
                \_PR.PR01.APPT ()
            }

            If ((\_SB.OSCP & 0x20))
            {
                \_PR.PR01.HWPT ()
            }

            If ((PC10 & 0x18))
            {
                \_PR.PR01.APCT ()
            }

            PC00 = PC10 /* \PC10 */
            Return (Zero)
        }
    }

    Scope (\_PR.PR11)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, ST11)
            CreateDWordField (Arg0, 0x04, CP11)
            If (((ST11 == 0x06) || (ST11 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST11 & One))
            {
                CP11 = (ST11 & 0x0BFF)
                Return (Zero)
            }

            PC11 = ((PC11 & 0x7FFFFFFF) | CP11) /* \_PR_.PR11.GCAP.CP11 */
            If (((PC11 & 0x09) == 0x09))
            {
                \_PR.PR01.APPT ()
            }

            If ((\_SB.OSCP & 0x20))
            {
                \_PR.PR01.HWPT ()
            }

            If ((PC11 & 0x18))
            {
                \_PR.PR01.APCT ()
            }

            PC00 = PC11 /* \PC11 */
            Return (Zero)
        }
    }

    Scope (\_PR.PR12)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, ST12)
            CreateDWordField (Arg0, 0x04, CP12)
            If (((ST12 == 0x06) || (ST12 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST12 & One))
            {
                CP12 = (ST12 & 0x0BFF)
                Return (Zero)
            }

            PC12 = ((PC12 & 0x7FFFFFFF) | CP12) /* \_PR_.PR12.GCAP.CP12 */
            If (((PC12 & 0x09) == 0x09))
            {
                \_PR.PR01.APPT ()
            }

            If ((\_SB.OSCP & 0x20))
            {
                \_PR.PR01.HWPT ()
            }

            If ((PC12 & 0x18))
            {
                \_PR.PR01.APCT ()
            }

            PC00 = PC12 /* \PC12 */
            Return (Zero)
        }
    }

    Scope (\_PR.PR13)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, ST13)
            CreateDWordField (Arg0, 0x04, CP13)
            If (((ST13 == 0x06) || (ST13 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST13 & One))
            {
                CP13 = (ST13 & 0x0BFF)
                Return (Zero)
            }

            PC13 = ((PC13 & 0x7FFFFFFF) | CP13) /* \_PR_.PR13.GCAP.CP13 */
            If (((PC13 & 0x09) == 0x09))
            {
                \_PR.PR01.APPT ()
            }

            If ((\_SB.OSCP & 0x20))
            {
                \_PR.PR01.HWPT ()
            }

            If ((PC13 & 0x18))
            {
                \_PR.PR01.APCT ()
            }

            PC00 = PC13 /* \PC13 */
            Return (Zero)
        }
    }

    Scope (\_PR.PR14)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, ST14)
            CreateDWordField (Arg0, 0x04, CP14)
            If (((ST14 == 0x06) || (ST14 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST14 & One))
            {
                CP14 = (ST14 & 0x0BFF)
                Return (Zero)
            }

            PC14 = ((PC14 & 0x7FFFFFFF) | CP14) /* \_PR_.PR14.GCAP.CP14 */
            If (((PC14 & 0x09) == 0x09))
            {
                \_PR.PR01.APPT ()
            }

            If ((\_SB.OSCP & 0x20))
            {
                \_PR.PR01.HWPT ()
            }

            If ((PC14 & 0x18))
            {
                \_PR.PR01.APCT ()
            }

            PC00 = PC14 /* \PC14 */
            Return (Zero)
        }
    }

    Scope (\_PR.PR15)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, ST15)
            CreateDWordField (Arg0, 0x04, CP15)
            If (((ST15 == 0x06) || (ST15 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST15 & One))
            {
                CP15 = (ST15 & 0x0BFF)
                Return (Zero)
            }

            PC15 = ((PC15 & 0x7FFFFFFF) | CP15) /* \_PR_.PR15.GCAP.CP15 */
            If (((PC15 & 0x09) == 0x09))
            {
                \_PR.PR01.APPT ()
            }

            If ((\_SB.OSCP & 0x20))
            {
                \_PR.PR01.HWPT ()
            }

            If ((PC15 & 0x18))
            {
                \_PR.PR01.APCT ()
            }

            PC00 = PC15 /* \PC15 */
            Return (Zero)
        }
    }
}



SSDT4
-----
DefinitionBlock ("", "SSDT", 2, "MSFT  ", "RTD3_CA", 0x00001000)
{
    External (_SB_.GGOV, MethodObj)    // 1 Arguments
    External (_SB_.PCI0, DeviceObj)
    External (_SB_.PCI0.HDAS, DeviceObj)
    External (_SB_.PCI0.HDAS.VDID, UnknownObj)
    External (_SB_.PCI0.RP01, DeviceObj)
    External (_SB_.PCI0.RP01.DPGE, UnknownObj)
    External (_SB_.PCI0.RP01.L23E, UnknownObj)
    External (_SB_.PCI0.RP01.L23R, UnknownObj)
    External (_SB_.PCI0.RP01.LASX, UnknownObj)
    External (_SB_.PCI0.RP01.LDIS, UnknownObj)
    External (_SB_.PCI0.RP01.LEDM, UnknownObj)
    External (_SB_.PCI0.RP01.PCRA, MethodObj)    // 3 Arguments
    External (_SB_.PCI0.RP01.PCRO, MethodObj)    // 3 Arguments
    External (_SB_.PCI0.RP01.PXSX, DeviceObj)
    External (_SB_.PCI0.RP01.PXSX.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP01.PXSX.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP01.VDID, UnknownObj)
    External (_SB_.PCI0.RP02, DeviceObj)
    External (_SB_.PCI0.RP02.DPGE, UnknownObj)
    External (_SB_.PCI0.RP02.L23E, UnknownObj)
    External (_SB_.PCI0.RP02.L23R, UnknownObj)
    External (_SB_.PCI0.RP02.LASX, UnknownObj)
    External (_SB_.PCI0.RP02.LDIS, UnknownObj)
    External (_SB_.PCI0.RP02.LEDM, UnknownObj)
    External (_SB_.PCI0.RP02.VDID, UnknownObj)
    External (_SB_.PCI0.RP03, DeviceObj)
    External (_SB_.PCI0.RP03.DPGE, UnknownObj)
    External (_SB_.PCI0.RP03.L23E, UnknownObj)
    External (_SB_.PCI0.RP03.L23R, UnknownObj)
    External (_SB_.PCI0.RP03.LASX, UnknownObj)
    External (_SB_.PCI0.RP03.LDIS, UnknownObj)
    External (_SB_.PCI0.RP03.LEDM, UnknownObj)
    External (_SB_.PCI0.RP03.VDID, UnknownObj)
    External (_SB_.PCI0.RP04, DeviceObj)
    External (_SB_.PCI0.RP04.DPGE, UnknownObj)
    External (_SB_.PCI0.RP04.L23E, UnknownObj)
    External (_SB_.PCI0.RP04.L23R, UnknownObj)
    External (_SB_.PCI0.RP04.LASX, UnknownObj)
    External (_SB_.PCI0.RP04.LDIS, UnknownObj)
    External (_SB_.PCI0.RP04.LEDM, UnknownObj)
    External (_SB_.PCI0.RP04.PCRA, MethodObj)    // 3 Arguments
    External (_SB_.PCI0.RP04.PCRO, MethodObj)    // 3 Arguments
    External (_SB_.PCI0.RP04.VDID, UnknownObj)
    External (_SB_.PCI0.RP05, DeviceObj)
    External (_SB_.PCI0.RP05.DPGE, UnknownObj)
    External (_SB_.PCI0.RP05.L23E, UnknownObj)
    External (_SB_.PCI0.RP05.L23R, UnknownObj)
    External (_SB_.PCI0.RP05.LASX, UnknownObj)
    External (_SB_.PCI0.RP05.LDIS, UnknownObj)
    External (_SB_.PCI0.RP05.LEDM, UnknownObj)
    External (_SB_.PCI0.RP05.PCRA, MethodObj)    // 3 Arguments
    External (_SB_.PCI0.RP05.PCRO, MethodObj)    // 3 Arguments
    External (_SB_.PCI0.RP05.PXSX, DeviceObj)
    External (_SB_.PCI0.RP05.PXSX.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP05.PXSX.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP05.VDID, UnknownObj)
    External (_SB_.PCI0.RP06, DeviceObj)
    External (_SB_.PCI0.RP06.DPGE, UnknownObj)
    External (_SB_.PCI0.RP06.L23E, UnknownObj)
    External (_SB_.PCI0.RP06.L23R, UnknownObj)
    External (_SB_.PCI0.RP06.LASX, UnknownObj)
    External (_SB_.PCI0.RP06.LDIS, UnknownObj)
    External (_SB_.PCI0.RP06.LEDM, UnknownObj)
    External (_SB_.PCI0.RP06.VDID, UnknownObj)
    External (_SB_.PCI0.RP07, DeviceObj)
    External (_SB_.PCI0.RP07.DPGE, UnknownObj)
    External (_SB_.PCI0.RP07.L23E, UnknownObj)
    External (_SB_.PCI0.RP07.L23R, UnknownObj)
    External (_SB_.PCI0.RP07.LASX, UnknownObj)
    External (_SB_.PCI0.RP07.LDIS, UnknownObj)
    External (_SB_.PCI0.RP07.LEDM, UnknownObj)
    External (_SB_.PCI0.RP07.VDID, UnknownObj)
    External (_SB_.PCI0.RP08, DeviceObj)
    External (_SB_.PCI0.RP08.DPGE, UnknownObj)
    External (_SB_.PCI0.RP08.L23E, UnknownObj)
    External (_SB_.PCI0.RP08.L23R, UnknownObj)
    External (_SB_.PCI0.RP08.LASX, UnknownObj)
    External (_SB_.PCI0.RP08.LDIS, UnknownObj)
    External (_SB_.PCI0.RP08.LEDM, UnknownObj)
    External (_SB_.PCI0.RP08.VDID, UnknownObj)
    External (_SB_.PCI0.RP09, DeviceObj)
    External (_SB_.PCI0.RP09.DPGE, UnknownObj)
    External (_SB_.PCI0.RP09.L23E, UnknownObj)
    External (_SB_.PCI0.RP09.L23R, UnknownObj)
    External (_SB_.PCI0.RP09.LASX, UnknownObj)
    External (_SB_.PCI0.RP09.LDIS, UnknownObj)
    External (_SB_.PCI0.RP09.LEDM, UnknownObj)
    External (_SB_.PCI0.RP09.PCRA, MethodObj)    // 3 Arguments
    External (_SB_.PCI0.RP09.PCRO, MethodObj)    // 3 Arguments
    External (_SB_.PCI0.RP09.PXSX, DeviceObj)
    External (_SB_.PCI0.RP09.PXSX.PAHC, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP09.PXSX.PNVM, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP09.VDID, UnknownObj)
    External (_SB_.PCI0.RP10, DeviceObj)
    External (_SB_.PCI0.RP10.DPGE, UnknownObj)
    External (_SB_.PCI0.RP10.L23E, UnknownObj)
    External (_SB_.PCI0.RP10.L23R, UnknownObj)
    External (_SB_.PCI0.RP10.LASX, UnknownObj)
    External (_SB_.PCI0.RP10.LDIS, UnknownObj)
    External (_SB_.PCI0.RP10.LEDM, UnknownObj)
    External (_SB_.PCI0.RP10.VDID, UnknownObj)
    External (_SB_.PCI0.RP11, DeviceObj)
    External (_SB_.PCI0.RP11.DPGE, UnknownObj)
    External (_SB_.PCI0.RP11.L23E, UnknownObj)
    External (_SB_.PCI0.RP11.L23R, UnknownObj)
    External (_SB_.PCI0.RP11.LASX, UnknownObj)
    External (_SB_.PCI0.RP11.LDIS, UnknownObj)
    External (_SB_.PCI0.RP11.LEDM, UnknownObj)
    External (_SB_.PCI0.RP11.VDID, UnknownObj)
    External (_SB_.PCI0.RP12, DeviceObj)
    External (_SB_.PCI0.RP12.DPGE, UnknownObj)
    External (_SB_.PCI0.RP12.L23E, UnknownObj)
    External (_SB_.PCI0.RP12.L23R, UnknownObj)
    External (_SB_.PCI0.RP12.LASX, UnknownObj)
    External (_SB_.PCI0.RP12.LDIS, UnknownObj)
    External (_SB_.PCI0.RP12.LEDM, UnknownObj)
    External (_SB_.PCI0.RP12.VDID, UnknownObj)
    External (_SB_.PCI0.RP13, DeviceObj)
    External (_SB_.PCI0.RP13.DPGE, UnknownObj)
    External (_SB_.PCI0.RP13.L23E, UnknownObj)
    External (_SB_.PCI0.RP13.L23R, UnknownObj)
    External (_SB_.PCI0.RP13.LASX, UnknownObj)
    External (_SB_.PCI0.RP13.LDIS, UnknownObj)
    External (_SB_.PCI0.RP13.LEDM, UnknownObj)
    External (_SB_.PCI0.RP13.VDID, UnknownObj)
    External (_SB_.PCI0.RP14, DeviceObj)
    External (_SB_.PCI0.RP14.DPGE, UnknownObj)
    External (_SB_.PCI0.RP14.L23E, UnknownObj)
    External (_SB_.PCI0.RP14.L23R, UnknownObj)
    External (_SB_.PCI0.RP14.LASX, UnknownObj)
    External (_SB_.PCI0.RP14.LDIS, UnknownObj)
    External (_SB_.PCI0.RP14.LEDM, UnknownObj)
    External (_SB_.PCI0.RP14.VDID, UnknownObj)
    External (_SB_.PCI0.RP15, DeviceObj)
    External (_SB_.PCI0.RP15.DPGE, UnknownObj)
    External (_SB_.PCI0.RP15.L23E, UnknownObj)
    External (_SB_.PCI0.RP15.L23R, UnknownObj)
    External (_SB_.PCI0.RP15.LASX, UnknownObj)
    External (_SB_.PCI0.RP15.LDIS, UnknownObj)
    External (_SB_.PCI0.RP15.LEDM, UnknownObj)
    External (_SB_.PCI0.RP15.VDID, UnknownObj)
    External (_SB_.PCI0.RP16, DeviceObj)
    External (_SB_.PCI0.RP16.DPGE, UnknownObj)
    External (_SB_.PCI0.RP16.L23E, UnknownObj)
    External (_SB_.PCI0.RP16.L23R, UnknownObj)
    External (_SB_.PCI0.RP16.LASX, UnknownObj)
    External (_SB_.PCI0.RP16.LDIS, UnknownObj)
    External (_SB_.PCI0.RP16.LEDM, UnknownObj)
    External (_SB_.PCI0.RP16.VDID, UnknownObj)
    External (_SB_.PCI0.RP17, DeviceObj)
    External (_SB_.PCI0.RP17.DPGE, UnknownObj)
    External (_SB_.PCI0.RP17.L23E, UnknownObj)
    External (_SB_.PCI0.RP17.L23R, UnknownObj)
    External (_SB_.PCI0.RP17.LASX, UnknownObj)
    External (_SB_.PCI0.RP17.LDIS, UnknownObj)
    External (_SB_.PCI0.RP17.LEDM, UnknownObj)
    External (_SB_.PCI0.RP17.VDID, UnknownObj)
    External (_SB_.PCI0.RP18, DeviceObj)
    External (_SB_.PCI0.RP18.DPGE, UnknownObj)
    External (_SB_.PCI0.RP18.L23E, UnknownObj)
    External (_SB_.PCI0.RP18.L23R, UnknownObj)
    External (_SB_.PCI0.RP18.LASX, UnknownObj)
    External (_SB_.PCI0.RP18.LDIS, UnknownObj)
    External (_SB_.PCI0.RP18.LEDM, UnknownObj)
    External (_SB_.PCI0.RP18.VDID, UnknownObj)
    External (_SB_.PCI0.RP19, DeviceObj)
    External (_SB_.PCI0.RP19.DPGE, UnknownObj)
    External (_SB_.PCI0.RP19.L23E, UnknownObj)
    External (_SB_.PCI0.RP19.L23R, UnknownObj)
    External (_SB_.PCI0.RP19.LASX, UnknownObj)
    External (_SB_.PCI0.RP19.LDIS, UnknownObj)
    External (_SB_.PCI0.RP19.LEDM, UnknownObj)
    External (_SB_.PCI0.RP19.VDID, UnknownObj)
    External (_SB_.PCI0.RP20, DeviceObj)
    External (_SB_.PCI0.RP20.DPGE, UnknownObj)
    External (_SB_.PCI0.RP20.L23E, UnknownObj)
    External (_SB_.PCI0.RP20.L23R, UnknownObj)
    External (_SB_.PCI0.RP20.LASX, UnknownObj)
    External (_SB_.PCI0.RP20.LDIS, UnknownObj)
    External (_SB_.PCI0.RP20.LEDM, UnknownObj)
    External (_SB_.PCI0.RP20.VDID, UnknownObj)
    External (_SB_.PCI0.SAT0, DeviceObj)
    External (_SB_.PCI0.SAT0.PRT0, DeviceObj)
    External (_SB_.PCI0.SAT0.PRT1, DeviceObj)
    External (_SB_.PCI0.SAT0.PRT2, DeviceObj)
    External (_SB_.PCI0.SAT0.PRT3, DeviceObj)
    External (_SB_.PCI0.SAT0.PRT4, DeviceObj)
    External (_SB_.PCI0.SAT0.PRT5, DeviceObj)
    External (_SB_.PCI0.XDCI, DeviceObj)
    External (_SB_.PCI0.XDCI.D0I3, UnknownObj)
    External (_SB_.PCI0.XDCI.XDCB, UnknownObj)
    External (_SB_.PCI0.XHC_, DeviceObj)
    External (_SB_.PCI0.XHC_.MEMB, UnknownObj)
    External (_SB_.PCI0.XHC_.RHUB, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.HS01, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.HS02, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.HS03, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.HS04, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.HS05, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.HS06, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.HS07, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.HS08, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.HS09, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.HS10, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.SS01, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.SS02, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.SS03, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.SS04, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.SS05, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.SS06, DeviceObj)
    External (_SB_.SGOV, MethodObj)    // 2 Arguments
    External (_SB_.SHPO, MethodObj)    // 2 Arguments
    External (ADBG, MethodObj)    // 1 Arguments
    External (AUDD, FieldUnitObj)
    External (DVID, UnknownObj)
    External (EBID, IntObj)
    External (EMOD, IntObj)
    External (L23E, IntObj)
    External (L23R, IntObj)
    External (OMBR, FieldUnitObj)
    External (OSYS, UnknownObj)
    External (PEP0, UnknownObj)
    External (RCG0, IntObj)
    External (RCG1, IntObj)
    External (S0ID, FieldUnitObj)
    External (SPST, IntObj)
    External (UAMS, UnknownObj)
    External (VRRD, FieldUnitObj)
    External (VRSD, FieldUnitObj)

    Scope (\_SB.PCI0.RP04)
    {
        Name (SLOT, 0x04)
        Name (RSTG, Package (0x04)
        {
            Zero, 
            Zero, 
            Zero, 
            Zero
        })
        Name (PWRG, Package (0x04)
        {
            Zero, 
            Zero, 
            Zero, 
            Zero
        })
        Name (WAKG, Package (0x04)
        {
            Zero, 
            Zero, 
            Zero, 
            Zero
        })
        Name (SCLK, Package (0x03)
        {
            One, 
            0x20, 
            Zero
        })
        Name (WKEN, Zero)
        Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
        {
            Return (0x03)
        }

        Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
        {
            If (Arg1)
            {
                WKEN = Zero
            }
            ElseIf ((Arg0 && Arg2))
            {
                WKEN = One
            }
            Else
            {
                WKEN = Zero
            }
        }

        PowerResource (PXP, 0x00, 0x0000)
        {
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((\EMOD == One))
                {
                    Return (One)
                }
                Else
                {
                    Return (PSTA ())
                }
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
                If ((\EMOD == One)) {}
                Else
                {
                    PON ()
                }
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
                If ((\EMOD == One)) {}
                Else
                {
                    POFF ()
                }
            }
        }

        Method (PSTA, 0, NotSerialized)
        {
            If ((VDID == 0xFFFFFFFF))
            {
                Return (Zero)
            }

            If ((DerefOf (PWRG [Zero]) != Zero))
            {
                If ((DerefOf (PWRG [Zero]) == One))
                {
                    If ((\_SB.GGOV (DerefOf (PWRG [0x02])) == DerefOf (PWRG [0x03]
                        )))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                If ((DerefOf (PWRG [Zero]) == 0x02))
                {
                    ADBG ("IO expander access attempted")
                    Return (Zero)
                }
            }

            If ((DerefOf (RSTG [Zero]) != Zero))
            {
                If ((DerefOf (RSTG [Zero]) == One))
                {
                    If ((\_SB.GGOV (DerefOf (RSTG [0x02])) == DerefOf (RSTG [0x03]
                        )))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                If ((DerefOf (RSTG [Zero]) == 0x02))
                {
                    ADBG ("IO expander access attempted")
                    Return (Zero)
                }
            }

            Return (Zero)
        }

        Method (PON, 0, NotSerialized)
        {
            If ((VDID == 0xFFFFFFFF))
            {
                Return (Zero)
            }

            If ((DerefOf (PWRG [Zero]) != Zero))
            {
                If ((DerefOf (PWRG [Zero]) == One))
                {
                    \_SB.SGOV (DerefOf (PWRG [0x02]), DerefOf (PWRG [0x03]))
                    Sleep (PEP0)
                }

                If ((DerefOf (PWRG [Zero]) == 0x02))
                {
                    ADBG ("IO expander access attempted")
                    Sleep (PEP0)
                }
            }

            If ((DerefOf (SCLK [Zero]) != Zero))
            {
                PCRA (0xDC, 0x100C, ~DerefOf (SCLK [One]))
                Sleep (0x10)
            }

            If ((DerefOf (RSTG [Zero]) != Zero))
            {
                If ((DerefOf (RSTG [Zero]) == One))
                {
                    \_SB.SGOV (DerefOf (RSTG [0x02]), DerefOf (RSTG [0x03]))
                }

                If ((DerefOf (RSTG [Zero]) == 0x02))
                {
                    ADBG ("IO expander access attempted")
                }
            }

            DPGE = Zero
            L23R = One
            Sleep (0x10)
            Local0 = Zero
            While (L23R)
            {
                If ((Local0 > 0x04))
                {
                    Break
                }

                Sleep (0x10)
                Local0++
            }

            DPGE = One
            Local0 = Zero
            While ((LASX == Zero))
            {
                If ((Local0 > 0x08))
                {
                    Break
                }

                Sleep (0x10)
                Local0++
            }

            LEDM = Zero
        }

        Method (POFF, 0, NotSerialized)
        {
            If ((VDID == 0xFFFFFFFF))
            {
                Return (Zero)
            }

            L23E = One
            Sleep (0x10)
            Local0 = Zero
            While (L23E)
            {
                If ((Local0 > 0x04))
                {
                    Break
                }

                Sleep (0x10)
                Local0++
            }

            LEDM = One
            If ((DerefOf (RSTG [Zero]) != Zero))
            {
                If ((DerefOf (RSTG [Zero]) == One))
                {
                    \_SB.SGOV (DerefOf (RSTG [0x02]), (DerefOf (RSTG [0x03]) ^ 
                        One))
                }

                If ((DerefOf (RSTG [Zero]) == 0x02))
                {
                    ADBG ("IO expander access attempted")
                }
            }

            If ((DerefOf (SCLK [Zero]) != Zero))
            {
                PCRO (0xDC, 0x100C, DerefOf (SCLK [One]))
                Sleep (0x10)
            }

            If ((DerefOf (PWRG [Zero]) != Zero))
            {
                If ((DerefOf (PWRG [Zero]) == One))
                {
                    \_SB.SGOV (DerefOf (PWRG [0x02]), (DerefOf (PWRG [0x03]) ^ 
                        One))
                }

                If ((DerefOf (PWRG [Zero]) == 0x02))
                {
                    ADBG ("IO expander access attempted")
                }
            }

            LDIS = One
            LDIS = Zero
            If (WKEN)
            {
                If ((DerefOf (WAKG [Zero]) != Zero))
                {
                    If ((DerefOf (WAKG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (WAKG [0x02]), DerefOf (WAKG [0x03]))
                        \_SB.SHPO (DerefOf (WAKG [0x02]), Zero)
                    }

                    If ((DerefOf (WAKG [Zero]) == 0x02))
                    {
                        ADBG ("IO expander access attempted")
                    }
                }
            }
        }

        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
        {
            PXP
        })
    }

    Scope (\_SB.PCI0.RP09)
    {
        Name (SLOT, 0x09)
        Name (RSTG, Package (0x04)
        {
            Zero, 
            Zero, 
            Zero, 
            Zero
        })
        Name (PWRG, Package (0x04)
        {
            Zero, 
            Zero, 
            Zero, 
            Zero
        })
        Name (WAKG, Package (0x04)
        {
            Zero, 
            Zero, 
            Zero, 
            Zero
        })
        Name (SCLK, Package (0x03)
        {
            One, 
            0x02, 
            Zero
        })
        Name (WKEN, Zero)
        Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
        {
            Return (0x03)
        }

        Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
        {
            If (Arg1)
            {
                WKEN = Zero
            }
            ElseIf ((Arg0 && Arg2))
            {
                WKEN = One
            }
            Else
            {
                WKEN = Zero
            }
        }

        PowerResource (PXP, 0x00, 0x0000)
        {
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((\EMOD == One))
                {
                    Return (One)
                }
                Else
                {
                    Return (PSTA ())
                }
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
                If ((\EMOD == One)) {}
                Else
                {
                    PON ()
                }
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
                If ((\EMOD == One)) {}
                Else
                {
                    POFF ()
                }
            }
        }

        Method (PSTA, 0, NotSerialized)
        {
            If ((VDID == 0xFFFFFFFF))
            {
                Return (Zero)
            }

            If ((DerefOf (PWRG [Zero]) != Zero))
            {
                If ((DerefOf (PWRG [Zero]) == One))
                {
                    If ((\_SB.GGOV (DerefOf (PWRG [0x02])) == DerefOf (PWRG [0x03]
                        )))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                If ((DerefOf (PWRG [Zero]) == 0x02))
                {
                    ADBG ("IO expander access attempted")
                    Return (Zero)
                }
            }

            If ((DerefOf (RSTG [Zero]) != Zero))
            {
                If ((DerefOf (RSTG [Zero]) == One))
                {
                    If ((\_SB.GGOV (DerefOf (RSTG [0x02])) == DerefOf (RSTG [0x03]
                        )))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                If ((DerefOf (RSTG [Zero]) == 0x02))
                {
                    ADBG ("IO expander access attempted")
                    Return (Zero)
                }
            }

            Return (Zero)
        }

        Method (PON, 0, NotSerialized)
        {
            If ((VDID == 0xFFFFFFFF))
            {
                Return (Zero)
            }

            If ((DerefOf (PWRG [Zero]) != Zero))
            {
                If ((DerefOf (PWRG [Zero]) == One))
                {
                    \_SB.SGOV (DerefOf (PWRG [0x02]), DerefOf (PWRG [0x03]))
                    Sleep (PEP0)
                }

                If ((DerefOf (PWRG [Zero]) == 0x02))
                {
                    ADBG ("IO expander access attempted")
                    Sleep (PEP0)
                }
            }

            If ((DerefOf (SCLK [Zero]) != Zero))
            {
                PCRA (0xDC, 0x100C, ~DerefOf (SCLK [One]))
                Sleep (0x10)
            }

            If ((DerefOf (RSTG [Zero]) != Zero))
            {
                If ((DerefOf (RSTG [Zero]) == One))
                {
                    \_SB.SGOV (DerefOf (RSTG [0x02]), DerefOf (RSTG [0x03]))
                }

                If ((DerefOf (RSTG [Zero]) == 0x02))
                {
                    ADBG ("IO expander access attempted")
                }
            }

            DPGE = Zero
            L23R = One
            Sleep (0x10)
            Local0 = Zero
            While (L23R)
            {
                If ((Local0 > 0x04))
                {
                    Break
                }

                Sleep (0x10)
                Local0++
            }

            DPGE = One
            Local0 = Zero
            While ((LASX == Zero))
            {
                If ((Local0 > 0x08))
                {
                    Break
                }

                Sleep (0x10)
                Local0++
            }

            LEDM = Zero
        }

        Method (POFF, 0, NotSerialized)
        {
            If ((VDID == 0xFFFFFFFF))
            {
                Return (Zero)
            }

            L23E = One
            Sleep (0x10)
            Local0 = Zero
            While (L23E)
            {
                If ((Local0 > 0x04))
                {
                    Break
                }

                Sleep (0x10)
                Local0++
            }

            LEDM = One
            If ((DerefOf (RSTG [Zero]) != Zero))
            {
                If ((DerefOf (RSTG [Zero]) == One))
                {
                    \_SB.SGOV (DerefOf (RSTG [0x02]), (DerefOf (RSTG [0x03]) ^ 
                        One))
                }

                If ((DerefOf (RSTG [Zero]) == 0x02))
                {
                    ADBG ("IO expander access attempted")
                }
            }

            If ((DerefOf (SCLK [Zero]) != Zero))
            {
                PCRO (0xDC, 0x100C, DerefOf (SCLK [One]))
                Sleep (0x10)
            }

            If ((DerefOf (PWRG [Zero]) != Zero))
            {
                If ((DerefOf (PWRG [Zero]) == One))
                {
                    \_SB.SGOV (DerefOf (PWRG [0x02]), (DerefOf (PWRG [0x03]) ^ 
                        One))
                }

                If ((DerefOf (PWRG [Zero]) == 0x02))
                {
                    ADBG ("IO expander access attempted")
                }
            }

            LDIS = One
            LDIS = Zero
            If (WKEN)
            {
                If ((DerefOf (WAKG [Zero]) != Zero))
                {
                    If ((DerefOf (WAKG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (WAKG [0x02]), DerefOf (WAKG [0x03]))
                        \_SB.SHPO (DerefOf (WAKG [0x02]), Zero)
                    }

                    If ((DerefOf (WAKG [Zero]) == 0x02))
                    {
                        ADBG ("IO expander access attempted")
                    }
                }
            }
        }

        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
        {
            PXP
        })
    }

    Scope (\_SB.PCI0.RP09.PXSX)
    {
        Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
        Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
        {
            If ((PAHC () || PNVM ()))
            {
                If (((\OSYS >= 0x07DF) && (\EMOD == One)))
                {
                    If (CondRefOf (\_SB.MODS))
                    {
                        Return (Package (0x01)
                        {
                            \_SB.MODS
                        })
                    }
                }
                ElseIf (CondRefOf (\_SB.PCI0.RP09.PXP))
                {
                    Return (Package (0x01)
                    {
                        \_SB.PCI0.RP09.PXP
                    })
                }
            }

            Return (Package (0x00) {})
        }

        Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
        {
            If ((PAHC () || PNVM ()))
            {
                If (((\OSYS >= 0x07DF) && (\EMOD == One)))
                {
                    If (CondRefOf (\_SB.MODS))
                    {
                        Return (Package (0x01)
                        {
                            \_SB.MODS
                        })
                    }
                }
                ElseIf (CondRefOf (\_SB.PCI0.RP09.PXP))
                {
                    Return (Package (0x01)
                    {
                        \_SB.PCI0.RP09.PXP
                    })
                }
            }

            Return (Package (0x00) {})
        }

        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
        {
        }

        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
        {
        }

        Device (MINI)
        {
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If (PAHC ())
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Name (_ADR, 0xFFFF)  // _ADR: Address
            Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
            }

            Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
            {
                If (PAHC ())
                {
                    If (((\OSYS >= 0x07DF) && (\EMOD == One)))
                    {
                        If (CondRefOf (\_SB.MODS))
                        {
                            Return (Package (0x01)
                            {
                                \_SB.MODS
                            })
                        }
                    }
                    ElseIf (CondRefOf (\_SB.PCI0.RP09.PXP))
                    {
                        Return (Package (0x01)
                        {
                            \_SB.PCI0.RP09.PXP
                        })
                    }
                }

                Return (Package (0x00) {})
            }

            Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
            {
                If (PAHC ())
                {
                    If (((\OSYS >= 0x07DF) && (\EMOD == One)))
                    {
                        If (CondRefOf (\_SB.MODS))
                        {
                            Return (Package (0x01)
                            {
                                \_SB.MODS
                            })
                        }
                    }
                    ElseIf (CondRefOf (\_SB.PCI0.RP09.PXP))
                    {
                        Return (Package (0x01)
                        {
                            \_SB.PCI0.RP09.PXP
                        })
                    }
                }

                Return (Package (0x00) {})
            }
        }
    }

    Scope (\_SB.PCI0.RP05)
    {
        Name (SLOT, 0x05)
        Name (RSTG, Package (0x04)
        {
            Zero, 
            Zero, 
            Zero, 
            Zero
        })
        Name (PWRG, Package (0x04)
        {
            Zero, 
            Zero, 
            Zero, 
            Zero
        })
        Name (WAKG, Package (0x04)
        {
            Zero, 
            Zero, 
            Zero, 
            Zero
        })
        Name (SCLK, Package (0x03)
        {
            One, 
            0x04, 
            Zero
        })
        Name (WKEN, Zero)
        Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
        {
            Return (0x03)
        }

        Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
        {
            If (Arg1)
            {
                WKEN = Zero
            }
            ElseIf ((Arg0 && Arg2))
            {
                WKEN = One
            }
            Else
            {
                WKEN = Zero
            }
        }

        PowerResource (PXP, 0x00, 0x0000)
        {
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((\EMOD == One))
                {
                    Return (One)
                }
                Else
                {
                    Return (PSTA ())
                }
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
                If ((\EMOD == One)) {}
                Else
                {
                    PON ()
                }
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
                If ((\EMOD == One)) {}
                Else
                {
                    POFF ()
                }
            }
        }

        Method (PSTA, 0, NotSerialized)
        {
            If ((VDID == 0xFFFFFFFF))
            {
                Return (Zero)
            }

            If ((DerefOf (PWRG [Zero]) != Zero))
            {
                If ((DerefOf (PWRG [Zero]) == One))
                {
                    If ((\_SB.GGOV (DerefOf (PWRG [0x02])) == DerefOf (PWRG [0x03]
                        )))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                If ((DerefOf (PWRG [Zero]) == 0x02))
                {
                    ADBG ("IO expander access attempted")
                    Return (Zero)
                }
            }

            If ((DerefOf (RSTG [Zero]) != Zero))
            {
                If ((DerefOf (RSTG [Zero]) == One))
                {
                    If ((\_SB.GGOV (DerefOf (RSTG [0x02])) == DerefOf (RSTG [0x03]
                        )))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                If ((DerefOf (RSTG [Zero]) == 0x02))
                {
                    ADBG ("IO expander access attempted")
                    Return (Zero)
                }
            }

            Return (Zero)
        }

        Method (PON, 0, NotSerialized)
        {
            If ((VDID == 0xFFFFFFFF))
            {
                Return (Zero)
            }

            If ((DerefOf (PWRG [Zero]) != Zero))
            {
                If ((DerefOf (PWRG [Zero]) == One))
                {
                    \_SB.SGOV (DerefOf (PWRG [0x02]), DerefOf (PWRG [0x03]))
                    Sleep (PEP0)
                }

                If ((DerefOf (PWRG [Zero]) == 0x02))
                {
                    ADBG ("IO expander access attempted")
                    Sleep (PEP0)
                }
            }

            If ((DerefOf (SCLK [Zero]) != Zero))
            {
                PCRA (0xDC, 0x100C, ~DerefOf (SCLK [One]))
                Sleep (0x10)
            }

            If ((DerefOf (RSTG [Zero]) != Zero))
            {
                If ((DerefOf (RSTG [Zero]) == One))
                {
                    \_SB.SGOV (DerefOf (RSTG [0x02]), DerefOf (RSTG [0x03]))
                }

                If ((DerefOf (RSTG [Zero]) == 0x02))
                {
                    ADBG ("IO expander access attempted")
                }
            }

            DPGE = Zero
            L23R = One
            Sleep (0x10)
            Local0 = Zero
            While (L23R)
            {
                If ((Local0 > 0x04))
                {
                    Break
                }

                Sleep (0x10)
                Local0++
            }

            DPGE = One
            Local0 = Zero
            While ((LASX == Zero))
            {
                If ((Local0 > 0x08))
                {
                    Break
                }

                Sleep (0x10)
                Local0++
            }

            LEDM = Zero
        }

        Method (POFF, 0, NotSerialized)
        {
            If ((VDID == 0xFFFFFFFF))
            {
                Return (Zero)
            }

            L23E = One
            Sleep (0x10)
            Local0 = Zero
            While (L23E)
            {
                If ((Local0 > 0x04))
                {
                    Break
                }

                Sleep (0x10)
                Local0++
            }

            LEDM = One
            If ((DerefOf (RSTG [Zero]) != Zero))
            {
                If ((DerefOf (RSTG [Zero]) == One))
                {
                    \_SB.SGOV (DerefOf (RSTG [0x02]), (DerefOf (RSTG [0x03]) ^ 
                        One))
                }

                If ((DerefOf (RSTG [Zero]) == 0x02))
                {
                    ADBG ("IO expander access attempted")
                }
            }

            If ((DerefOf (SCLK [Zero]) != Zero))
            {
                PCRO (0xDC, 0x100C, DerefOf (SCLK [One]))
                Sleep (0x10)
            }

            If ((DerefOf (PWRG [Zero]) != Zero))
            {
                If ((DerefOf (PWRG [Zero]) == One))
                {
                    \_SB.SGOV (DerefOf (PWRG [0x02]), (DerefOf (PWRG [0x03]) ^ 
                        One))
                }

                If ((DerefOf (PWRG [Zero]) == 0x02))
                {
                    ADBG ("IO expander access attempted")
                }
            }

            LDIS = One
            LDIS = Zero
            If (WKEN)
            {
                If ((DerefOf (WAKG [Zero]) != Zero))
                {
                    If ((DerefOf (WAKG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (WAKG [0x02]), DerefOf (WAKG [0x03]))
                        \_SB.SHPO (DerefOf (WAKG [0x02]), Zero)
                    }

                    If ((DerefOf (WAKG [Zero]) == 0x02))
                    {
                        ADBG ("IO expander access attempted")
                    }
                }
            }
        }

        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
        {
            PXP
        })
    }

    Scope (\_SB.PCI0.RP05.PXSX)
    {
        Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
        Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
        {
            If ((PAHC () || PNVM ()))
            {
                If (((\OSYS >= 0x07DF) && (\EMOD == One)))
                {
                    If (CondRefOf (\_SB.MODS))
                    {
                        Return (Package (0x01)
                        {
                            \_SB.MODS
                        })
                    }
                }
                ElseIf (CondRefOf (\_SB.PCI0.RP05.PXP))
                {
                    Return (Package (0x01)
                    {
                        \_SB.PCI0.RP05.PXP
                    })
                }
            }

            Return (Package (0x00) {})
        }

        Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
        {
            If ((PAHC () || PNVM ()))
            {
                If (((\OSYS >= 0x07DF) && (\EMOD == One)))
                {
                    If (CondRefOf (\_SB.MODS))
                    {
                        Return (Package (0x01)
                        {
                            \_SB.MODS
                        })
                    }
                }
                ElseIf (CondRefOf (\_SB.PCI0.RP05.PXP))
                {
                    Return (Package (0x01)
                    {
                        \_SB.PCI0.RP05.PXP
                    })
                }
            }

            Return (Package (0x00) {})
        }

        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
        {
        }

        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
        {
        }

        Device (MINI)
        {
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If (PAHC ())
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Name (_ADR, 0xFFFF)  // _ADR: Address
            Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
            }

            Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
            {
                If (PAHC ())
                {
                    If (((\OSYS >= 0x07DF) && (\EMOD == One)))
                    {
                        If (CondRefOf (\_SB.MODS))
                        {
                            Return (Package (0x01)
                            {
                                \_SB.MODS
                            })
                        }
                    }
                    ElseIf (CondRefOf (\_SB.PCI0.RP05.PXP))
                    {
                        Return (Package (0x01)
                        {
                            \_SB.PCI0.RP05.PXP
                        })
                    }
                }

                Return (Package (0x00) {})
            }

            Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
            {
                If (PAHC ())
                {
                    If (((\OSYS >= 0x07DF) && (\EMOD == One)))
                    {
                        If (CondRefOf (\_SB.MODS))
                        {
                            Return (Package (0x01)
                            {
                                \_SB.MODS
                            })
                        }
                    }
                    ElseIf (CondRefOf (\_SB.PCI0.RP05.PXP))
                    {
                        Return (Package (0x01)
                        {
                            \_SB.PCI0.RP05.PXP
                        })
                    }
                }

                Return (Package (0x00) {})
            }
        }
    }

    Scope (\_SB.PCI0.RP01)
    {
        Name (SLOT, One)
        Name (RSTG, Package (0x04)
        {
            Zero, 
            Zero, 
            Zero, 
            Zero
        })
        Name (PWRG, Package (0x04)
        {
            Zero, 
            Zero, 
            Zero, 
            Zero
        })
        Name (WAKG, Package (0x04)
        {
            Zero, 
            Zero, 
            Zero, 
            Zero
        })
        Name (SCLK, Package (0x03)
        {
            One, 
            0x10, 
            Zero
        })
        Name (WKEN, Zero)
        Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
        {
            Return (0x03)
        }

        Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
        {
            If (Arg1)
            {
                WKEN = Zero
            }
            ElseIf ((Arg0 && Arg2))
            {
                WKEN = One
            }
            Else
            {
                WKEN = Zero
            }
        }

        PowerResource (PXP, 0x00, 0x0000)
        {
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((\EMOD == One))
                {
                    Return (One)
                }
                Else
                {
                    Return (PSTA ())
                }
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
                If ((\EMOD == One)) {}
                Else
                {
                    PON ()
                }
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
                If ((\EMOD == One)) {}
                Else
                {
                    POFF ()
                }
            }
        }

        Method (PSTA, 0, NotSerialized)
        {
            If ((VDID == 0xFFFFFFFF))
            {
                Return (Zero)
            }

            If ((DerefOf (PWRG [Zero]) != Zero))
            {
                If ((DerefOf (PWRG [Zero]) == One))
                {
                    If ((\_SB.GGOV (DerefOf (PWRG [0x02])) == DerefOf (PWRG [0x03]
                        )))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                If ((DerefOf (PWRG [Zero]) == 0x02))
                {
                    ADBG ("IO expander access attempted")
                    Return (Zero)
                }
            }

            If ((DerefOf (RSTG [Zero]) != Zero))
            {
                If ((DerefOf (RSTG [Zero]) == One))
                {
                    If ((\_SB.GGOV (DerefOf (RSTG [0x02])) == DerefOf (RSTG [0x03]
                        )))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                If ((DerefOf (RSTG [Zero]) == 0x02))
                {
                    ADBG ("IO expander access attempted")
                    Return (Zero)
                }
            }

            Return (Zero)
        }

        Method (PON, 0, NotSerialized)
        {
            If ((VDID == 0xFFFFFFFF))
            {
                Return (Zero)
            }

            If ((DerefOf (PWRG [Zero]) != Zero))
            {
                If ((DerefOf (PWRG [Zero]) == One))
                {
                    \_SB.SGOV (DerefOf (PWRG [0x02]), DerefOf (PWRG [0x03]))
                    Sleep (PEP0)
                }

                If ((DerefOf (PWRG [Zero]) == 0x02))
                {
                    ADBG ("IO expander access attempted")
                    Sleep (PEP0)
                }
            }

            If ((DerefOf (SCLK [Zero]) != Zero))
            {
                PCRA (0xDC, 0x100C, ~DerefOf (SCLK [One]))
                Sleep (0x10)
            }

            If ((DerefOf (RSTG [Zero]) != Zero))
            {
                If ((DerefOf (RSTG [Zero]) == One))
                {
                    \_SB.SGOV (DerefOf (RSTG [0x02]), DerefOf (RSTG [0x03]))
                }

                If ((DerefOf (RSTG [Zero]) == 0x02))
                {
                    ADBG ("IO expander access attempted")
                }
            }

            DPGE = Zero
            L23R = One
            Sleep (0x10)
            Local0 = Zero
            While (L23R)
            {
                If ((Local0 > 0x04))
                {
                    Break
                }

                Sleep (0x10)
                Local0++
            }

            DPGE = One
            Local0 = Zero
            While ((LASX == Zero))
            {
                If ((Local0 > 0x08))
                {
                    Break
                }

                Sleep (0x10)
                Local0++
            }

            LEDM = Zero
        }

        Method (POFF, 0, NotSerialized)
        {
            If ((VDID == 0xFFFFFFFF))
            {
                Return (Zero)
            }

            L23E = One
            Sleep (0x10)
            Local0 = Zero
            While (L23E)
            {
                If ((Local0 > 0x04))
                {
                    Break
                }

                Sleep (0x10)
                Local0++
            }

            LEDM = One
            If ((DerefOf (RSTG [Zero]) != Zero))
            {
                If ((DerefOf (RSTG [Zero]) == One))
                {
                    \_SB.SGOV (DerefOf (RSTG [0x02]), (DerefOf (RSTG [0x03]) ^ 
                        One))
                }

                If ((DerefOf (RSTG [Zero]) == 0x02))
                {
                    ADBG ("IO expander access attempted")
                }
            }

            If ((DerefOf (SCLK [Zero]) != Zero))
            {
                PCRO (0xDC, 0x100C, DerefOf (SCLK [One]))
                Sleep (0x10)
            }

            If ((DerefOf (PWRG [Zero]) != Zero))
            {
                If ((DerefOf (PWRG [Zero]) == One))
                {
                    \_SB.SGOV (DerefOf (PWRG [0x02]), (DerefOf (PWRG [0x03]) ^ 
                        One))
                }

                If ((DerefOf (PWRG [Zero]) == 0x02))
                {
                    ADBG ("IO expander access attempted")
                }
            }

            LDIS = One
            LDIS = Zero
            If (WKEN)
            {
                If ((DerefOf (WAKG [Zero]) != Zero))
                {
                    If ((DerefOf (WAKG [Zero]) == One))
                    {
                        \_SB.SGOV (DerefOf (WAKG [0x02]), DerefOf (WAKG [0x03]))
                        \_SB.SHPO (DerefOf (WAKG [0x02]), Zero)
                    }

                    If ((DerefOf (WAKG [Zero]) == 0x02))
                    {
                        ADBG ("IO expander access attempted")
                    }
                }
            }
        }

        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
        {
            PXP
        })
    }

    Scope (\_SB.PCI0.RP01.PXSX)
    {
        Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
        Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
        {
            If ((PAHC () || PNVM ()))
            {
                If (((\OSYS >= 0x07DF) && (\EMOD == One)))
                {
                    If (CondRefOf (\_SB.MODS))
                    {
                        Return (Package (0x01)
                        {
                            \_SB.MODS
                        })
                    }
                }
                ElseIf (CondRefOf (\_SB.PCI0.RP01.PXP))
                {
                    Return (Package (0x01)
                    {
                        \_SB.PCI0.RP01.PXP
                    })
                }
            }

            Return (Package (0x00) {})
        }

        Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
        {
            If ((PAHC () || PNVM ()))
            {
                If (((\OSYS >= 0x07DF) && (\EMOD == One)))
                {
                    If (CondRefOf (\_SB.MODS))
                    {
                        Return (Package (0x01)
                        {
                            \_SB.MODS
                        })
                    }
                }
                ElseIf (CondRefOf (\_SB.PCI0.RP01.PXP))
                {
                    Return (Package (0x01)
                    {
                        \_SB.PCI0.RP01.PXP
                    })
                }
            }

            Return (Package (0x00) {})
        }

        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
        {
        }

        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
        {
        }

        Device (MINI)
        {
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If (PAHC ())
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Name (_ADR, 0xFFFF)  // _ADR: Address
            Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
            }

            Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
            {
                If (PAHC ())
                {
                    If (((\OSYS >= 0x07DF) && (\EMOD == One)))
                    {
                        If (CondRefOf (\_SB.MODS))
                        {
                            Return (Package (0x01)
                            {
                                \_SB.MODS
                            })
                        }
                    }
                    ElseIf (CondRefOf (\_SB.PCI0.RP01.PXP))
                    {
                        Return (Package (0x01)
                        {
                            \_SB.PCI0.RP01.PXP
                        })
                    }
                }

                Return (Package (0x00) {})
            }

            Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
            {
                If (PAHC ())
                {
                    If (((\OSYS >= 0x07DF) && (\EMOD == One)))
                    {
                        If (CondRefOf (\_SB.MODS))
                        {
                            Return (Package (0x01)
                            {
                                \_SB.MODS
                            })
                        }
                    }
                    ElseIf (CondRefOf (\_SB.PCI0.RP01.PXP))
                    {
                        Return (Package (0x01)
                        {
                            \_SB.PCI0.RP01.PXP
                        })
                    }
                }

                Return (Package (0x00) {})
            }
        }
    }

    Scope (\_SB.PCI0.XHC.RHUB)
    {
        Method (PS0X, 0, Serialized)
        {
        }

        Method (PS2X, 0, Serialized)
        {
        }

        Method (PS3X, 0, Serialized)
        {
        }

        PowerResource (PX01, 0x00, 0x0000)
        {
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (One)
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
            }
        }

        PowerResource (PX02, 0x00, 0x0000)
        {
            Name (_STA, One)  // _STA: Status
            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
                If ((_STA == Zero))
                {
                    \_SB.SGOV (0x02040008, One)
                    Sleep (0x32)
                    \_SB.SGOV (0x02030011, Zero)
                    Sleep (0x32)
                    \_SB.SGOV (0x02030011, One)
                    _STA = One
                }
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
                If ((_STA == One))
                {
                    \_SB.SGOV (0x02040008, Zero)
                    Sleep (0x14)
                    _STA = Zero
                }
            }
        }

        PowerResource (PX03, 0x00, 0x0000)
        {
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (One)
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
            }
        }

        PowerResource (PX04, 0x00, 0x0000)
        {
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (One)
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
            }
        }

        PowerResource (PX05, 0x00, 0x0000)
        {
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (One)
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
            }
        }

        PowerResource (PX06, 0x00, 0x0000)
        {
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (One)
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
            }
        }

        PowerResource (PX07, 0x00, 0x0000)
        {
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (One)
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
            }
        }
    }

    Scope (\_SB.PCI0.XHC.RHUB.HS01)
    {
        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
        {
            \_SB.PCI0.XHC.RHUB.PX01
        })
        Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
        {
            \_SB.PCI0.XHC.RHUB.PX01
        })
        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
        {
            \_SB.PCI0.XHC.RHUB.PX01
        })
    }

    Scope (\_SB.PCI0.XHC.RHUB.HS02)
    {
        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
        {
            \_SB.PCI0.XHC.RHUB.PX02
        })
        Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
        {
            \_SB.PCI0.XHC.RHUB.PX02
        })
        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
        {
            \_SB.PCI0.XHC.RHUB.PX02
        })
    }

    Scope (\_SB.PCI0.XHC.RHUB.HS03)
    {
        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
        {
            \_SB.PCI0.XHC.RHUB.PX03
        })
        Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
        {
            \_SB.PCI0.XHC.RHUB.PX03
        })
        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
        {
            \_SB.PCI0.XHC.RHUB.PX03
        })
    }

    Scope (\_SB.PCI0.XHC.RHUB.HS04)
    {
        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
        {
            \_SB.PCI0.XHC.RHUB.PX04
        })
        Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
        {
            \_SB.PCI0.XHC.RHUB.PX04
        })
        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
        {
            \_SB.PCI0.XHC.RHUB.PX04
        })
    }

    Scope (\_SB.PCI0.XHC.RHUB.HS05)
    {
        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
        {
            \_SB.PCI0.XHC.RHUB.PX05
        })
        Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
        {
            \_SB.PCI0.XHC.RHUB.PX05
        })
        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
        {
            \_SB.PCI0.XHC.RHUB.PX05
        })
    }

    Scope (\_SB.PCI0.XHC.RHUB.HS06)
    {
        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
        {
            \_SB.PCI0.XHC.RHUB.PX06
        })
        Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
        {
            \_SB.PCI0.XHC.RHUB.PX06
        })
        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
        {
            \_SB.PCI0.XHC.RHUB.PX06
        })
    }

    Scope (\_SB.PCI0.XHC.RHUB.HS07)
    {
        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
        {
            \_SB.PCI0.XHC.RHUB.PX07
        })
        Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
        {
            \_SB.PCI0.XHC.RHUB.PX07
        })
        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
        {
            \_SB.PCI0.XHC.RHUB.PX07
        })
    }

    Scope (\_SB.PCI0.XHC.RHUB.SS01)
    {
        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
        {
            \_SB.PCI0.XHC.RHUB.PX01
        })
        Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
        {
            \_SB.PCI0.XHC.RHUB.PX01
        })
        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
        {
            \_SB.PCI0.XHC.RHUB.PX01
        })
    }

    Scope (\_SB.PCI0.XHC.RHUB.SS02)
    {
        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
        {
            \_SB.PCI0.XHC.RHUB.PX02
        })
        Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
        {
            \_SB.PCI0.XHC.RHUB.PX02
        })
        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
        {
            \_SB.PCI0.XHC.RHUB.PX02
        })
    }

    Scope (\_SB.PCI0.XHC.RHUB.SS03)
    {
        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
        {
            \_SB.PCI0.XHC.RHUB.PX03
        })
        Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
        {
            \_SB.PCI0.XHC.RHUB.PX03
        })
        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
        {
            \_SB.PCI0.XHC.RHUB.PX03
        })
    }

    Scope (\_SB.PCI0.XHC.RHUB.SS04)
    {
        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
        {
            \_SB.PCI0.XHC.RHUB.PX04
        })
        Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
        {
            \_SB.PCI0.XHC.RHUB.PX04
        })
        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
        {
            \_SB.PCI0.XHC.RHUB.PX04
        })
    }

    Scope (\_SB)
    {
        PowerResource (USBC, 0x00, 0x0000)
        {
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
            }
        }
    }

    Scope (\_SB.PCI0.XDCI)
    {
        OperationRegion (GENR, SystemMemory, ((XDCB & 0xFF000000) + 0x0010F81C), 0x04)
        Field (GENR, WordAcc, NoLock, Preserve)
        {
                ,   2, 
            CPME,   1, 
            U3EN,   1, 
            U2EN,   1
        }

        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
        {
            CPME = One
            U2EN = One
            U3EN = One
        }

        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
        {
            CPME = Zero
            U2EN = Zero
            U3EN = Zero
        }

        Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
        {
            Return (Zero)
        }

        Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
        {
            Return (Package (0x01)
            {
                USBC
            })
        }
    }

    If ((\_SB.PCI0.HDAS.VDID != 0xFFFFFFFF))
    {
        Scope (\_SB.PCI0.HDAS)
        {
            Name (PSTA, One)
            Method (PS0X, 0, Serialized)
            {
                ^PSTA = One
            }

            Method (PS3X, 0, Serialized)
            {
                ^PSTA = Zero
            }
        }
    }

    If ((\EMOD == One))
    {
        Scope (\_SB)
        {
            Name (GBPS, Zero)
            PowerResource (MODS, 0x00, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((OSYS >= 0x07DF))
                    {
                        Return (GBPS) /* \_SB_.GBPS */
                    }

                    Return (Zero)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    If ((OSYS >= 0x07DF))
                    {
                        GBPS = One
                    }
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    If ((OSYS >= 0x07DF))
                    {
                        GBPS = Zero
                    }
                }
            }
        }
    }
}



SSDT5
-----
DefinitionBlock ("", "SSDT", 2, "DptfTa", "DptfTabl", 0x00001000)
{
    External (_PR_.AAC0, FieldUnitObj)
    External (_PR_.ACRT, FieldUnitObj)
    External (_PR_.APSV, FieldUnitObj)
    External (_PR_.CBMI, FieldUnitObj)
    External (_PR_.CFGD, FieldUnitObj)
    External (_PR_.CLVL, FieldUnitObj)
    External (_PR_.CPPC, FieldUnitObj)
    External (_PR_.CTC0, FieldUnitObj)
    External (_PR_.CTC1, FieldUnitObj)
    External (_PR_.CTC2, FieldUnitObj)
    External (_PR_.HDCE, FieldUnitObj)
    External (_PR_.PL10, FieldUnitObj)
    External (_PR_.PL11, FieldUnitObj)
    External (_PR_.PL12, FieldUnitObj)
    External (_PR_.PL20, FieldUnitObj)
    External (_PR_.PL21, FieldUnitObj)
    External (_PR_.PL22, FieldUnitObj)
    External (_PR_.PLW0, FieldUnitObj)
    External (_PR_.PLW1, FieldUnitObj)
    External (_PR_.PLW2, FieldUnitObj)
    External (_PR_.PR00, ProcessorObj)
    External (_PR_.PR00._PSS, MethodObj)    // 0 Arguments
    External (_PR_.PR00._TPC, IntObj)
    External (_PR_.PR00._TSD, MethodObj)    // 0 Arguments
    External (_PR_.PR00._TSS, MethodObj)    // 0 Arguments
    External (_PR_.PR00.LPSS, PkgObj)
    External (_PR_.PR00.TPSS, PkgObj)
    External (_PR_.PR00.TSMC, PkgObj)
    External (_PR_.PR00.TSMF, PkgObj)
    External (_PR_.PR01, ProcessorObj)
    External (_PR_.PR02, ProcessorObj)
    External (_PR_.PR03, ProcessorObj)
    External (_PR_.PR04, ProcessorObj)
    External (_PR_.PR05, ProcessorObj)
    External (_PR_.PR06, ProcessorObj)
    External (_PR_.PR07, ProcessorObj)
    External (_PR_.PR08, ProcessorObj)
    External (_PR_.PR09, ProcessorObj)
    External (_PR_.PR10, ProcessorObj)
    External (_PR_.PR11, ProcessorObj)
    External (_PR_.PR12, ProcessorObj)
    External (_PR_.PR13, ProcessorObj)
    External (_PR_.PR14, ProcessorObj)
    External (_PR_.PR15, ProcessorObj)
    External (_PR_.TAR0, FieldUnitObj)
    External (_PR_.TAR1, FieldUnitObj)
    External (_PR_.TAR2, FieldUnitObj)
    External (_SB_._SAN, DeviceObj)
    External (_SB_._SAN.GEN1, DeviceObj)
    External (_SB_._SAN.GEN2, DeviceObj)
    External (_SB_._SAN.GEN3, DeviceObj)
    External (_SB_._SAN.GEN4, DeviceObj)
    External (_SB_._SAN.RQSG, MethodObj)    // 5 Arguments
    External (_SB_._SAN.RQST, MethodObj)    // 5 Arguments
    External (_SB_._SAN.SDXP, MethodObj)    // 1 Arguments
    External (_SB_._SAN.STRP, MethodObj)    // 2 Arguments
    External (_SB_._SAN.TEMP, MethodObj)    // 1 Arguments
    External (_SB_.BAT1._BIX, MethodObj)    // 0 Arguments
    External (_SB_.BAT1._BST, MethodObj)    // 0 Arguments
    External (_SB_.BAT1.ARTG, MethodObj)    // 0 Arguments
    External (_SB_.BAT1.CHGI, MethodObj)    // 1 Arguments
    External (_SB_.BAT1.PMAX, MethodObj)    // 0 Arguments
    External (_SB_.BAT1.PSOC, MethodObj)    // 0 Arguments
    External (_SB_.BAT1.PSRC, MethodObj)    // 0 Arguments
    External (_SB_.IETM, DeviceObj)
    External (_SB_.OSCP, IntObj)
    External (_SB_.PAGD, DeviceObj)
    External (_SB_.PAGD._PUR, PkgObj)
    External (_SB_.PAGD._STA, MethodObj)    // 0 Arguments
    External (_SB_.PCI0, DeviceObj)
    External (_SB_.PCI0.B0D4, DeviceObj)
    External (_SB_.PCI0.MHBR, FieldUnitObj)
    External (_SB_.SLPB, DeviceObj)
    External (ACTT, IntObj)
    External (CRTT, IntObj)
    External (EBID, IntObj)
    External (OMBR, FieldUnitObj)
    External (P8XH, MethodObj)    // 2 Arguments
    External (PC00, IntObj)
    External (PWRS, IntObj)
    External (TCNT, IntObj)

    OperationRegion (DNVS, SystemMemory, 0x8BE9E000, 0x010B)
    Field (DNVS, AnyAcc, Lock, Preserve)
    {
        ATMC,   8, 
        PTMC,   8, 
        DPTF,   8, 
        DCFE,   16, 
        SADE,   8, 
        SACR,   8, 
        SAHT,   8, 
        CPUS,   8, 
        CTDP,   8, 
        LPMP,   8, 
        LPMV,   8, 
        ECEU,   8, 
        TGFG,   16, 
        MEMD,   8, 
        ATRA,   8, 
        PTRA,   8, 
        MEMC,   8, 
        MEMH,   8, 
        FND1,   8, 
        FND2,   8, 
        AMBD,   8, 
        AMAT,   8, 
        AMPT,   8, 
        AMCT,   8, 
        AMHT,   8, 
        SKDE,   8, 
        SKAT,   8, 
        SKPT,   8, 
        SKCT,   8, 
        SKHT,   8, 
        EFDE,   8, 
        EFAT,   8, 
        EFPT,   8, 
        EFCT,   8, 
        EFHT,   8, 
        VRDE,   8, 
        VRAT,   8, 
        VRPT,   8, 
        VRCT,   8, 
        VRHT,   8, 
        DPAP,   8, 
        DPPP,   8, 
        DPCP,   8, 
        DCMP,   8, 
        TRTV,   8, 
        LPOE,   8, 
        LPOP,   8, 
        LPOS,   8, 
        LPOW,   8, 
        LPER,   8, 
        PPSZ,   32, 
        DISE,   8, 
        WIFD,   8, 
        WFAT,   8, 
        WFPT,   8, 
        WFCT,   8, 
        WFHT,   8, 
        PWRE,   8, 
        PPPR,   16, 
        PBPE,   8, 
        VSPE,   8, 
        GN1E,   8, 
        G1AT,   8, 
        G1PT,   8, 
        G1CT,   8, 
        G1HT,   8, 
        GN2E,   8, 
        G2AT,   8, 
        G2PT,   8, 
        G2CT,   8, 
        G2HT,   8, 
        WWSD,   8, 
        CVSD,   8, 
        SSDD,   8, 
        INLD,   8, 
        IFAT,   8, 
        IFPT,   8, 
        IFCT,   8, 
        IFHT,   8, 
        WAND,   8, 
        WWAT,   8, 
        WWPT,   8, 
        WWCT,   8, 
        WWHT,   8, 
        MPL0,   16, 
        CHGE,   8, 
        SAC3,   8, 
        MEM3,   8, 
        AMC3,   8, 
        SKC3,   8, 
        EFC3,   8, 
        VRC3,   8, 
        WFC3,   8, 
        G1C3,   8, 
        G2C3,   8, 
        IFC3,   8, 
        WWC3,   8, 
        WGC3,   8, 
        PERE,   8, 
        PEAT,   8, 
        PEPV,   8, 
        PECR,   8, 
        PEC3,   8, 
        PEHT,   8, 
        GN3E,   8, 
        G3AT,   8, 
        G3PT,   8, 
        G3CT,   8, 
        G3HT,   8, 
        GN4E,   8, 
        G4AT,   8, 
        G4PT,   8, 
        G4CT,   8, 
        G4HT,   8, 
        GN5E,   8, 
        G5AT,   8, 
        G5PT,   8, 
        G5CT,   8, 
        G5HT,   8, 
        GN6E,   8, 
        G6AT,   8, 
        G6PT,   8, 
        G6CT,   8, 
        G6HT,   8, 
        G3C3,   8, 
        G4C3,   8, 
        G5C3,   8, 
        G6C3,   8, 
        TSP1,   8, 
        TSP2,   8, 
        TSP3,   8, 
        TSP4,   8, 
        TSP5,   8, 
        TSP6,   8, 
        TSP7,   8, 
        TSP8,   8, 
        SSP1,   8, 
        SSP2,   8, 
        SSP3,   8, 
        SSP4,   8, 
        SSP5,   8, 
        SSP6,   8, 
        SSP7,   8, 
        SSP8,   8, 
        MEMS,   8, 
        STGE,   8, 
        STAT,   8, 
        STPT,   8, 
        STCT,   8, 
        STC3,   8, 
        STHT,   8, 
        VSP1,   8, 
        V1AT,   8, 
        V1PV,   8, 
        V1CR,   8, 
        V1C3,   8, 
        V1HT,   8, 
        VSP2,   8, 
        V2AT,   8, 
        V2PV,   8, 
        V2CR,   8, 
        V2C3,   8, 
        V2HT,   8, 
        S1DE,   8, 
        S1AT,   8, 
        S1PT,   8, 
        S1CT,   8, 
        S1HT,   8, 
        S2DE,   8, 
        S2AT,   8, 
        S2PT,   8, 
        S2CT,   8, 
        S2HT,   8, 
        S3DE,   8, 
        S3AT,   8, 
        S3PT,   8, 
        S3CT,   8, 
        S3HT,   8, 
        S4DE,   8, 
        S4AT,   8, 
        S4PT,   8, 
        S4CT,   8, 
        S4HT,   8, 
        S5DE,   8, 
        S5AT,   8, 
        S5PT,   8, 
        S5CT,   8, 
        S5HT,   8, 
        S6DE,   8, 
        S6AT,   8, 
        S6PT,   8, 
        S6CT,   8, 
        S6HT,   8, 
        S7DE,   8, 
        S7AT,   8, 
        S7PT,   8, 
        S7CT,   8, 
        S7HT,   8, 
        S1S3,   8, 
        S2S3,   8, 
        S3S3,   8, 
        S4S3,   8, 
        S5S3,   8, 
        S6S3,   8, 
        S7S3,   8, 
        ICAE,   8, 
        APPE,   8, 
        MPL1,   16, 
        MPL2,   16, 
        ICAT,   8, 
        ICPV,   8, 
        ICCR,   8, 
        ICC3,   8, 
        ICHT,   8, 
        Offset (0xE0), 
        ODV0,   32, 
        ODV1,   32, 
        ODV2,   32, 
        ODV3,   32, 
        ODV4,   32, 
        ODV5,   32, 
        G1TP,   8, 
        G2TP,   8, 
        G3TP,   8, 
        G4TP,   8, 
        PIDE,   8, 
        TRPC,   8, 
        GN7E,   8, 
        G7AT,   8, 
        G7PT,   8, 
        G7CT,   8, 
        G7HT,   8, 
        G7C3,   8, 
        GN8E,   8, 
        G8AT,   8, 
        G8PT,   8, 
        G8CT,   8, 
        G8HT,   8, 
        G8C3,   8, 
        DGXE,   8
    }

    Scope (\_SB)
    {
        Device (IETM)
        {
            Name (_HID, EisaId ("INT3400") /* Intel Dynamic Power Performance Management */)  // _HID: Hardware ID
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                \_SB._SAN
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((DPTF == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Name (TMPP, Package (0x0C)
            {
                Buffer (0x10)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x10)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x10)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x10)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x10)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x10)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x10)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x10)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x10)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x10)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x10)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x10)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            })
            Name (PTRP, Zero)
            Name (PSEM, Zero)
            Name (ATRP, Zero)
            Name (ASEM, Zero)
            Name (YTRP, Zero)
            Name (YSEM, Zero)
            Method (IDSP, 0, Serialized)
            {
                Name (TMPI, Zero)
                If (((\DPPP == 0x02) && CondRefOf (DP2P)))
                {
                    TMPP [TMPI] = DerefOf (DP2P [Zero])
                    TMPI++
                }

                If (((\DPCP == One) && CondRefOf (DCSP)))
                {
                    TMPP [TMPI] = DerefOf (DCSP [Zero])
                    TMPI++
                }

                If (((\VSPE == One) && CondRefOf (DVSP)))
                {
                    TMPP [TMPI] = DerefOf (DVSP [Zero])
                    TMPI++
                }

                If (((\PBPE == One) && CondRefOf (POBP)))
                {
                    TMPP [TMPI] = DerefOf (POBP [Zero])
                    TMPI++
                }

                If (((\_PR.HDCE == One) && CondRefOf (HDCP)))
                {
                    TMPP [TMPI] = DerefOf (HDCP [Zero])
                    TMPI++
                }

                If (((\APPE == One) && CondRefOf (DAPP)))
                {
                    TMPP [TMPI] = DerefOf (DAPP [Zero])
                    TMPI++
                }

                If (((\PIDE == One) && CondRefOf (DPID)))
                {
                    TMPP [TMPI] = DerefOf (DPID [Zero])
                    TMPI++
                }

                Return (TMPP) /* \_SB_.IETM.TMPP */
            }

            Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
            {
                Name (NUMP, Zero)
                Name (UID2, Buffer (0x10)
                {
                    /* 0000 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                    /* 0008 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF   // ........
                })
                CreateDWordField (Arg3, Zero, STS1)
                CreateDWordField (Arg3, 0x04, CAP1)
                IDSP ()
                NUMP = SizeOf (TMPP)
                CreateDWordField (Arg0, Zero, IID0)
                CreateDWordField (Arg0, 0x04, IID1)
                CreateDWordField (Arg0, 0x08, IID2)
                CreateDWordField (Arg0, 0x0C, IID3)
                CreateDWordField (UID2, Zero, EID0)
                CreateDWordField (UID2, 0x04, EID1)
                CreateDWordField (UID2, 0x08, EID2)
                CreateDWordField (UID2, 0x0C, EID3)
                While (NUMP)
                {
                    UID2 = DerefOf (TMPP [(NUMP - One)])
                    If ((((IID0 == EID0) && (IID1 == EID1)) && ((IID2 == 
                        EID2) && (IID3 == EID3))))
                    {
                        Break
                    }

                    NUMP--
                }

                If ((NUMP == Zero))
                {
                    STS1 &= 0xFFFFFF00
                    STS1 |= 0x06
                    Return (Arg3)
                }

                If ((Arg1 != One))
                {
                    STS1 &= 0xFFFFFF00
                    STS1 |= 0x0A
                    Return (Arg3)
                }

                If ((Arg2 != 0x02))
                {
                    STS1 &= 0xFFFFFF00
                    STS1 |= 0x02
                    Return (Arg3)
                }

                If (((\DPPP == 0x02) && CondRefOf (\_PR.APSV)))
                {
                    If ((PSEM == Zero))
                    {
                        PSEM = One
                        PTRP = \_PR.APSV /* External reference */
                    }

                    If (CondRefOf (DP2P))
                    {
                        UID2 = DerefOf (DP2P [Zero])
                    }

                    If ((((IID0 == EID0) && (IID1 == EID1)) && ((IID2 == 
                        EID2) && (IID3 == EID3))))
                    {
                        If (~(STS1 & One))
                        {
                            If ((CAP1 & One))
                            {
                                \_PR.APSV = 0x6E
                            }
                            Else
                            {
                                \_PR.APSV = PTRP /* \_SB_.IETM.PTRP */
                            }
                        }

                        Return (Arg3)
                    }
                }

                If (((\DPPP == One) && CondRefOf (\_PR.APSV)))
                {
                    If ((PSEM == Zero))
                    {
                        PSEM = One
                        PTRP = \_PR.APSV /* External reference */
                    }

                    If (CondRefOf (DPSP))
                    {
                        UID2 = DerefOf (DPSP [Zero])
                    }

                    If ((((IID0 == EID0) && (IID1 == EID1)) && ((IID2 == 
                        EID2) && (IID3 == EID3))))
                    {
                        If (~(STS1 & One))
                        {
                            If ((CAP1 & One))
                            {
                                \_PR.APSV = 0x6E
                            }
                            Else
                            {
                                \_PR.APSV = PTRP /* \_SB_.IETM.PTRP */
                            }
                        }

                        Return (Arg3)
                    }
                }

                If (((\PIDE == One) && CondRefOf (\_PR.APSV)))
                {
                    If ((PSEM == Zero))
                    {
                        PSEM = One
                        PTRP = \_PR.APSV /* External reference */
                    }

                    If (CondRefOf (DPID))
                    {
                        UID2 = DerefOf (DPID [Zero])
                    }

                    If ((((IID0 == EID0) && (IID1 == EID1)) && ((IID2 == 
                        EID2) && (IID3 == EID3))))
                    {
                        If (~(STS1 & One))
                        {
                            If ((CAP1 & One))
                            {
                                \_PR.APSV = 0x6E
                            }
                            Else
                            {
                                \_PR.APSV = PTRP /* \_SB_.IETM.PTRP */
                            }
                        }

                        Return (Arg3)
                    }
                }

                If (((\DPAP == One) && CondRefOf (\_PR.AAC0)))
                {
                    If ((ASEM == Zero))
                    {
                        ASEM = One
                        ATRP = \_PR.AAC0 /* External reference */
                    }

                    If (CondRefOf (DASP))
                    {
                        UID2 = DerefOf (DASP [Zero])
                    }

                    If ((((IID0 == EID0) && (IID1 == EID1)) && ((IID2 == 
                        EID2) && (IID3 == EID3))))
                    {
                        If (~(STS1 & One))
                        {
                            If ((CAP1 & One))
                            {
                                \_PR.AAC0 = 0x6E
                            }
                            Else
                            {
                                \_PR.AAC0 = ATRP /* \_SB_.IETM.ATRP */
                            }
                        }

                        Return (Arg3)
                    }
                }

                If (((\DPAP == 0x02) && CondRefOf (\_PR.AAC0)))
                {
                    If ((ASEM == Zero))
                    {
                        ASEM = One
                        ATRP = \_PR.AAC0 /* External reference */
                    }

                    If (CondRefOf (DA2P))
                    {
                        UID2 = DerefOf (DA2P [Zero])
                    }

                    If ((((IID0 == EID0) && (IID1 == EID1)) && ((IID2 == 
                        EID2) && (IID3 == EID3))))
                    {
                        If (~(STS1 & One))
                        {
                            If ((CAP1 & One))
                            {
                                \_PR.AAC0 = 0x6E
                            }
                            Else
                            {
                                \_PR.AAC0 = ATRP /* \_SB_.IETM.ATRP */
                            }
                        }

                        Return (Arg3)
                    }
                }

                If (((\DPCP == One) && CondRefOf (\_PR.ACRT)))
                {
                    If ((YSEM == Zero))
                    {
                        YSEM = One
                        YTRP = \_PR.ACRT /* External reference */
                    }

                    If (CondRefOf (DCSP))
                    {
                        UID2 = DerefOf (DCSP [Zero])
                    }

                    If ((((IID0 == EID0) && (IID1 == EID1)) && ((IID2 == 
                        EID2) && (IID3 == EID3))))
                    {
                        If (~(STS1 & One))
                        {
                            If ((CAP1 & One))
                            {
                                \_PR.ACRT = 0xD2
                            }
                            Else
                            {
                                \_PR.ACRT = YTRP /* \_SB_.IETM.YTRP */
                            }
                        }

                        Return (Arg3)
                    }
                }

                Return (Arg3)
            }

            Method (KTOC, 1, Serialized)
            {
                If ((Arg0 > 0x0AAC))
                {
                    Return (((Arg0 - 0x0AAC) / 0x0A))
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (CTOK, 1, Serialized)
            {
                Return (((Arg0 * 0x0A) + 0x0AAC))
            }

            Name (VERS, Zero)
            Name (CTYP, Zero)
            Name (ALMT, Zero)
            Name (PLMT, Zero)
            Name (WKLD, Zero)
            Name (DSTA, Zero)
            Name (RES1, Zero)
            Method (DSCP, 7, Serialized)
            {
                Name (CHNG, Zero)
                If ((Arg0 != Zero))
                {
                    Return (Zero)
                }

                If (((Arg1 == Zero) || (Arg1 == One)))
                {
                    If ((Arg1 != CTYP))
                    {
                        CHNG = One
                        CTYP = Arg1
                    }
                }

                If (((Arg1 >= Zero) || (Arg1 <= 0x05)))
                {
                    If ((Arg2 != ALMT))
                    {
                        CHNG = One
                        ALMT = Arg2
                    }
                }

                If (((Arg1 >= Zero) || (Arg1 <= 0x05)))
                {
                    If ((Arg3 != PLMT))
                    {
                        CHNG = One
                        PLMT = Arg3
                    }
                }

                If ((Arg4 != WKLD))
                {
                    CHNG = One
                    WKLD = Arg4
                }

                If ((Arg5 != DSTA))
                {
                    CHNG = One
                    DSTA = Arg5
                }

                If ((Arg6 != RES1))
                {
                    CHNG = One
                    RES1 = Arg6
                }

                If (CHNG)
                {
                    If ((\DPPP == One))
                    {
                        Notify (\_SB.IETM, 0x83) // Device-Specific Change
                    }

                    If ((\DPPP == 0x02))
                    {
                        Notify (\_SB.IETM, 0x87) // Device-Specific
                    }

                    If ((\DPAP == One))
                    {
                        Notify (\_SB.IETM, 0x84) // Reserved
                    }
                }
            }

            Method (DCFG, 0, NotSerialized)
            {
                Return (\DCFE)
            }

            Name (ODVX, Package (0x06)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Method (ODVP, 0, Serialized)
            {
                ODVX [Zero] = \ODV0
                ODVX [One] = \ODV1
                ODVX [0x02] = \ODV2
                ODVX [0x03] = \ODV3
                ODVX [0x04] = \ODV4
                ODVX [0x05] = \ODV5
                Return (ODVX) /* \_SB_.IETM.ODVX */
            }
        }
    }

    Scope (\_SB.PCI0.B0D4)
    {
        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((\SADE == One))
            {
                Return (0x0F)
            }
            Else
            {
                Return (Zero)
            }
        }

        OperationRegion (MBAR, SystemMemory, ((MHBR << 0x0F) + 0x5000), 0x1000)
        Field (MBAR, ByteAcc, NoLock, Preserve)
        {
            Offset (0x930), 
            PTDP,   15, 
            Offset (0x932), 
            PMIN,   15, 
            Offset (0x934), 
            PMAX,   15, 
            Offset (0x936), 
            TMAX,   7, 
            Offset (0x938), 
            PWRU,   4, 
            Offset (0x939), 
            EGYU,   5, 
            Offset (0x93A), 
            TIMU,   4, 
            Offset (0x958), 
            Offset (0x95C), 
            LPMS,   1, 
            CTNL,   2, 
            Offset (0x978), 
            PCTP,   8, 
            Offset (0x998), 
            RP0C,   8, 
            RP1C,   8, 
            RPNC,   8, 
            Offset (0xF3C), 
            TRAT,   8, 
            Offset (0xF40), 
            PTD1,   15, 
            Offset (0xF42), 
            TRA1,   8, 
            Offset (0xF44), 
            PMX1,   15, 
            Offset (0xF46), 
            PMN1,   15, 
            Offset (0xF48), 
            PTD2,   15, 
            Offset (0xF4A), 
            TRA2,   8, 
            Offset (0xF4C), 
            PMX2,   15, 
            Offset (0xF4E), 
            PMN2,   15, 
            Offset (0xF50), 
            CTCL,   2, 
                ,   29, 
            CLCK,   1, 
            MNTR,   8
        }

        Name (XPCC, Zero)
        Method (PPCC, 0, Serialized)
        {
            If (((XPCC == Zero) && CondRefOf (\_PR.CBMI)))
            {
                Switch (ToInteger (\_PR.CBMI))
                {
                    Case (Zero)
                    {
                        If (((\_PR.CLVL >= One) && (\_PR.CLVL <= 0x03)))
                        {
                            CPL0 ()
                            XPCC = One
                        }
                    }
                    Case (One)
                    {
                        If (((\_PR.CLVL == 0x02) || (\_PR.CLVL == 0x03)))
                        {
                            CPL1 ()
                            XPCC = One
                        }
                    }
                    Case (0x02)
                    {
                        If ((\_PR.CLVL == 0x03))
                        {
                            CPL2 ()
                            XPCC = One
                        }
                    }

                }
            }

            Return (NPCC) /* \_SB_.PCI0.B0D4.NPCC */
        }

        Name (NPCC, Package (0x03)
        {
            0x02, 
            Package (0x06)
            {
                Zero, 
                0x88B8, 
                0xAFC8, 
                0x6D60, 
                0x7D00, 
                0x03E8
            }, 

            Package (0x06)
            {
                One, 
                0xDBBA, 
                0xDBBA, 
                Zero, 
                Zero, 
                0x03E8
            }
        })
        Method (CPNU, 2, Serialized)
        {
            Name (CNVT, Zero)
            Name (PPUU, Zero)
            Name (RMDR, Zero)
            If ((PWRU == Zero))
            {
                PPUU = One
            }
            Else
            {
                PPUU = (PWRU-- << 0x02)
            }

            Divide (Arg0, PPUU, RMDR, CNVT) /* \_SB_.PCI0.B0D4.CPNU.CNVT */
            If ((Arg1 == Zero))
            {
                Return (CNVT) /* \_SB_.PCI0.B0D4.CPNU.CNVT */
            }
            Else
            {
                CNVT *= 0x03E8
                RMDR *= 0x03E8
                RMDR /= PPUU
                CNVT += RMDR /* \_SB_.PCI0.B0D4.CPNU.RMDR */
                Return (CNVT) /* \_SB_.PCI0.B0D4.CPNU.CNVT */
            }
        }

        Method (CPL0, 0, NotSerialized)
        {
            \_SB.PCI0.B0D4.NPCC [Zero] = 0x02
            DerefOf (\_SB.PCI0.B0D4.NPCC [One]) [Zero] = Zero
            DerefOf (\_SB.PCI0.B0D4.NPCC [One]) [One] = \MPL0
            DerefOf (\_SB.PCI0.B0D4.NPCC [One]) [0x02] = CPNU (\_PR.PL10, One)
            DerefOf (\_SB.PCI0.B0D4.NPCC [One]) [0x03] = (\_PR.PLW0 * 0x03E8)
            DerefOf (\_SB.PCI0.B0D4.NPCC [One]) [0x04] = ((\_PR.PLW0 * 0x03E8
                ) + 0x0FA0)
            DerefOf (\_SB.PCI0.B0D4.NPCC [One]) [0x05] = PPSZ /* \PPSZ */
            DerefOf (\_SB.PCI0.B0D4.NPCC [0x02]) [Zero] = One
            DerefOf (\_SB.PCI0.B0D4.NPCC [0x02]) [One] = CPNU (\_PR.PL20, One)
            DerefOf (\_SB.PCI0.B0D4.NPCC [0x02]) [0x02] = CPNU (\_PR.PL20, One)
            DerefOf (\_SB.PCI0.B0D4.NPCC [0x02]) [0x03] = Zero
            DerefOf (\_SB.PCI0.B0D4.NPCC [0x02]) [0x04] = Zero
            DerefOf (\_SB.PCI0.B0D4.NPCC [0x02]) [0x05] = PPSZ /* \PPSZ */
        }

        Method (CPL1, 0, NotSerialized)
        {
            \_SB.PCI0.B0D4.NPCC [Zero] = 0x02
            DerefOf (\_SB.PCI0.B0D4.NPCC [One]) [Zero] = Zero
            DerefOf (\_SB.PCI0.B0D4.NPCC [One]) [One] = \MPL1
            DerefOf (\_SB.PCI0.B0D4.NPCC [One]) [0x02] = CPNU (\_PR.PL11, One)
            DerefOf (\_SB.PCI0.B0D4.NPCC [One]) [0x03] = (\_PR.PLW1 * 0x03E8)
            DerefOf (\_SB.PCI0.B0D4.NPCC [One]) [0x04] = ((\_PR.PLW1 * 0x03E8
                ) + 0x0FA0)
            DerefOf (\_SB.PCI0.B0D4.NPCC [One]) [0x05] = PPSZ /* \PPSZ */
            DerefOf (\_SB.PCI0.B0D4.NPCC [0x02]) [Zero] = One
            DerefOf (\_SB.PCI0.B0D4.NPCC [0x02]) [One] = CPNU (\_PR.PL21, One)
            DerefOf (\_SB.PCI0.B0D4.NPCC [0x02]) [0x02] = CPNU (\_PR.PL21, One)
            DerefOf (\_SB.PCI0.B0D4.NPCC [0x02]) [0x03] = Zero
            DerefOf (\_SB.PCI0.B0D4.NPCC [0x02]) [0x04] = Zero
            DerefOf (\_SB.PCI0.B0D4.NPCC [0x02]) [0x05] = PPSZ /* \PPSZ */
        }

        Method (CPL2, 0, NotSerialized)
        {
            \_SB.PCI0.B0D4.NPCC [Zero] = 0x02
            DerefOf (\_SB.PCI0.B0D4.NPCC [One]) [Zero] = Zero
            DerefOf (\_SB.PCI0.B0D4.NPCC [One]) [One] = \MPL2
            DerefOf (\_SB.PCI0.B0D4.NPCC [One]) [0x02] = CPNU (\_PR.PL12, One)
            DerefOf (\_SB.PCI0.B0D4.NPCC [One]) [0x03] = (\_PR.PLW2 * 0x03E8)
            DerefOf (\_SB.PCI0.B0D4.NPCC [One]) [0x04] = ((\_PR.PLW2 * 0x03E8
                ) + 0x0FA0)
            DerefOf (\_SB.PCI0.B0D4.NPCC [One]) [0x05] = PPSZ /* \PPSZ */
            DerefOf (\_SB.PCI0.B0D4.NPCC [0x02]) [Zero] = One
            DerefOf (\_SB.PCI0.B0D4.NPCC [0x02]) [One] = CPNU (\_PR.PL22, One)
            DerefOf (\_SB.PCI0.B0D4.NPCC [0x02]) [0x02] = CPNU (\_PR.PL22, One)
            DerefOf (\_SB.PCI0.B0D4.NPCC [0x02]) [0x03] = Zero
            DerefOf (\_SB.PCI0.B0D4.NPCC [0x02]) [0x04] = Zero
            DerefOf (\_SB.PCI0.B0D4.NPCC [0x02]) [0x05] = PPSZ /* \PPSZ */
        }

        Name (LSTM, Zero)
        Name (_PPC, Zero)  // _PPC: Performance Present Capabilities
        Method (SPPC, 1, Serialized)
        {
            If (CondRefOf (\_PR.CPPC))
            {
                \_PR.CPPC = Arg0
            }

            Switch (ToInteger (\TCNT))
            {
                Case (0x10)
                {
                    Notify (\_PR.PR00, 0x80) // Status Change
                    Notify (\_PR.PR01, 0x80) // Status Change
                    Notify (\_PR.PR02, 0x80) // Status Change
                    Notify (\_PR.PR03, 0x80) // Status Change
                    Notify (\_PR.PR04, 0x80) // Status Change
                    Notify (\_PR.PR05, 0x80) // Status Change
                    Notify (\_PR.PR06, 0x80) // Status Change
                    Notify (\_PR.PR07, 0x80) // Status Change
                    Notify (\_PR.PR08, 0x80) // Status Change
                    Notify (\_PR.PR09, 0x80) // Status Change
                    Notify (\_PR.PR10, 0x80) // Status Change
                    Notify (\_PR.PR11, 0x80) // Status Change
                    Notify (\_PR.PR12, 0x80) // Status Change
                    Notify (\_PR.PR13, 0x80) // Status Change
                    Notify (\_PR.PR14, 0x80) // Status Change
                    Notify (\_PR.PR15, 0x80) // Status Change
                }
                Case (0x0E)
                {
                    Notify (\_PR.PR00, 0x80) // Status Change
                    Notify (\_PR.PR01, 0x80) // Status Change
                    Notify (\_PR.PR02, 0x80) // Status Change
                    Notify (\_PR.PR03, 0x80) // Status Change
                    Notify (\_PR.PR04, 0x80) // Status Change
                    Notify (\_PR.PR05, 0x80) // Status Change
                    Notify (\_PR.PR06, 0x80) // Status Change
                    Notify (\_PR.PR07, 0x80) // Status Change
                    Notify (\_PR.PR08, 0x80) // Status Change
                    Notify (\_PR.PR09, 0x80) // Status Change
                    Notify (\_PR.PR10, 0x80) // Status Change
                    Notify (\_PR.PR11, 0x80) // Status Change
                    Notify (\_PR.PR12, 0x80) // Status Change
                    Notify (\_PR.PR13, 0x80) // Status Change
                }
                Case (0x0C)
                {
                    Notify (\_PR.PR00, 0x80) // Status Change
                    Notify (\_PR.PR01, 0x80) // Status Change
                    Notify (\_PR.PR02, 0x80) // Status Change
                    Notify (\_PR.PR03, 0x80) // Status Change
                    Notify (\_PR.PR04, 0x80) // Status Change
                    Notify (\_PR.PR05, 0x80) // Status Change
                    Notify (\_PR.PR06, 0x80) // Status Change
                    Notify (\_PR.PR07, 0x80) // Status Change
                    Notify (\_PR.PR08, 0x80) // Status Change
                    Notify (\_PR.PR09, 0x80) // Status Change
                    Notify (\_PR.PR10, 0x80) // Status Change
                    Notify (\_PR.PR11, 0x80) // Status Change
                }
                Case (0x0A)
                {
                    Notify (\_PR.PR00, 0x80) // Status Change
                    Notify (\_PR.PR01, 0x80) // Status Change
                    Notify (\_PR.PR02, 0x80) // Status Change
                    Notify (\_PR.PR03, 0x80) // Status Change
                    Notify (\_PR.PR04, 0x80) // Status Change
                    Notify (\_PR.PR05, 0x80) // Status Change
                    Notify (\_PR.PR06, 0x80) // Status Change
                    Notify (\_PR.PR07, 0x80) // Status Change
                    Notify (\_PR.PR08, 0x80) // Status Change
                    Notify (\_PR.PR09, 0x80) // Status Change
                }
                Case (0x08)
                {
                    Notify (\_PR.PR00, 0x80) // Status Change
                    Notify (\_PR.PR01, 0x80) // Status Change
                    Notify (\_PR.PR02, 0x80) // Status Change
                    Notify (\_PR.PR03, 0x80) // Status Change
                    Notify (\_PR.PR04, 0x80) // Status Change
                    Notify (\_PR.PR05, 0x80) // Status Change
                    Notify (\_PR.PR06, 0x80) // Status Change
                    Notify (\_PR.PR07, 0x80) // Status Change
                }
                Case (0x07)
                {
                    Notify (\_PR.PR00, 0x80) // Status Change
                    Notify (\_PR.PR01, 0x80) // Status Change
                    Notify (\_PR.PR02, 0x80) // Status Change
                    Notify (\_PR.PR03, 0x80) // Status Change
                    Notify (\_PR.PR04, 0x80) // Status Change
                    Notify (\_PR.PR05, 0x80) // Status Change
                    Notify (\_PR.PR06, 0x80) // Status Change
                }
                Case (0x06)
                {
                    Notify (\_PR.PR00, 0x80) // Status Change
                    Notify (\_PR.PR01, 0x80) // Status Change
                    Notify (\_PR.PR02, 0x80) // Status Change
                    Notify (\_PR.PR03, 0x80) // Status Change
                    Notify (\_PR.PR04, 0x80) // Status Change
                    Notify (\_PR.PR05, 0x80) // Status Change
                }
                Case (0x05)
                {
                    Notify (\_PR.PR00, 0x80) // Status Change
                    Notify (\_PR.PR01, 0x80) // Status Change
                    Notify (\_PR.PR02, 0x80) // Status Change
                    Notify (\_PR.PR03, 0x80) // Status Change
                    Notify (\_PR.PR04, 0x80) // Status Change
                }
                Case (0x04)
                {
                    Notify (\_PR.PR00, 0x80) // Status Change
                    Notify (\_PR.PR01, 0x80) // Status Change
                    Notify (\_PR.PR02, 0x80) // Status Change
                    Notify (\_PR.PR03, 0x80) // Status Change
                }
                Case (0x03)
                {
                    Notify (\_PR.PR00, 0x80) // Status Change
                    Notify (\_PR.PR01, 0x80) // Status Change
                    Notify (\_PR.PR02, 0x80) // Status Change
                }
                Case (0x02)
                {
                    Notify (\_PR.PR00, 0x80) // Status Change
                    Notify (\_PR.PR01, 0x80) // Status Change
                }
                Default
                {
                    Notify (\_PR.PR00, 0x80) // Status Change
                }

            }
        }

        Name (TLPO, Package (0x06)
        {
            One, 
            One, 
            Zero, 
            One, 
            One, 
            0x02
        })
        Method (CLPO, 0, NotSerialized)
        {
            TLPO [One] = LPOE /* \LPOE */
            If (CondRefOf (\_PR.PR00._PSS))
            {
                If ((\_SB.OSCP & 0x0400))
                {
                    Local1 = SizeOf (\_PR.PR00.TPSS)
                }
                Else
                {
                    Local1 = SizeOf (\_PR.PR00.LPSS)
                }
            }
            Else
            {
                Local1 = Zero
            }

            If ((LPOP < Local1))
            {
                TLPO [0x02] = LPOP /* \LPOP */
            }
            Else
            {
                Local1--
                TLPO [0x02] = Local1
            }

            TLPO [0x03] = LPOS /* \LPOS */
            TLPO [0x04] = LPOW /* \LPOW */
            TLPO [0x05] = LPER /* \LPER */
            Return (TLPO) /* \_SB_.PCI0.B0D4.TLPO */
        }

        Method (SPUR, 1, NotSerialized)
        {
            If ((Arg0 <= \TCNT))
            {
                If ((\_SB.PAGD._STA () == 0x0F))
                {
                    \_SB.PAGD._PUR [One] = Arg0
                    Notify (\_SB.PAGD, 0x80) // Status Change
                }
            }
        }

        Name (AEXL, Package (0x04)
        {
            "svchost.exe", 
            "dllhost.exe", 
            "smss.exe", 
            "WinSAT.exe"
        })
        Method (PCCC, 0, Serialized)
        {
            PCCX [Zero] = One
            Switch (ToInteger (CPNU (PTDP, Zero)))
            {
                Case (0x39)
                {
                    DerefOf (PCCX [One]) [Zero] = 0xA7F8
                    DerefOf (PCCX [One]) [One] = 0x00017318
                }
                Case (0x2F)
                {
                    DerefOf (PCCX [One]) [Zero] = 0x9858
                    DerefOf (PCCX [One]) [One] = 0x00014C08
                }
                Case (0x25)
                {
                    DerefOf (PCCX [One]) [Zero] = 0x7148
                    DerefOf (PCCX [One]) [One] = 0xD6D8
                }
                Case (0x19)
                {
                    DerefOf (PCCX [One]) [Zero] = 0x3E80
                    DerefOf (PCCX [One]) [One] = 0x7D00
                }
                Case (0x0F)
                {
                    DerefOf (PCCX [One]) [Zero] = 0x36B0
                    DerefOf (PCCX [One]) [One] = 0x7D00
                }
                Case (0x0B)
                {
                    DerefOf (PCCX [One]) [Zero] = 0x36B0
                    DerefOf (PCCX [One]) [One] = 0x61A8
                }
                Default
                {
                    DerefOf (PCCX [One]) [Zero] = 0xFF
                    DerefOf (PCCX [One]) [One] = 0xFF
                }

            }

            Return (PCCX) /* \_SB_.PCI0.B0D4.PCCX */
        }

        Name (PCCX, Package (0x02)
        {
            0x80000000, 
            Package (0x02)
            {
                0x80000000, 
                0x80000000
            }
        })
        Name (KEFF, Package (0x1E)
        {
            Package (0x02)
            {
                0x01BC, 
                Zero
            }, 

            Package (0x02)
            {
                0x01CF, 
                0x27
            }, 

            Package (0x02)
            {
                0x01E1, 
                0x4B
            }, 

            Package (0x02)
            {
                0x01F3, 
                0x6C
            }, 

            Package (0x02)
            {
                0x0206, 
                0x8B
            }, 

            Package (0x02)
            {
                0x0218, 
                0xA8
            }, 

            Package (0x02)
            {
                0x022A, 
                0xC3
            }, 

            Package (0x02)
            {
                0x023D, 
                0xDD
            }, 

            Package (0x02)
            {
                0x024F, 
                0xF4
            }, 

            Package (0x02)
            {
                0x0261, 
                0x010B
            }, 

            Package (0x02)
            {
                0x0274, 
                0x011F
            }, 

            Package (0x02)
            {
                0x032C, 
                0x01BD
            }, 

            Package (0x02)
            {
                0x03D7, 
                0x0227
            }, 

            Package (0x02)
            {
                0x048B, 
                0x026D
            }, 

            Package (0x02)
            {
                0x053E, 
                0x02A1
            }, 

            Package (0x02)
            {
                0x05F7, 
                0x02C6
            }, 

            Package (0x02)
            {
                0x06A8, 
                0x02E6
            }, 

            Package (0x02)
            {
                0x075D, 
                0x02FF
            }, 

            Package (0x02)
            {
                0x0818, 
                0x0311
            }, 

            Package (0x02)
            {
                0x08CF, 
                0x0322
            }, 

            Package (0x02)
            {
                0x179C, 
                0x0381
            }, 

            Package (0x02)
            {
                0x2DDC, 
                0x039C
            }, 

            Package (0x02)
            {
                0x44A8, 
                0x039E
            }, 

            Package (0x02)
            {
                0x5C35, 
                0x0397
            }, 

            Package (0x02)
            {
                0x747D, 
                0x038D
            }, 

            Package (0x02)
            {
                0x8D7F, 
                0x0382
            }, 

            Package (0x02)
            {
                0xA768, 
                0x0376
            }, 

            Package (0x02)
            {
                0xC23B, 
                0x0369
            }, 

            Package (0x02)
            {
                0xDE26, 
                0x035A
            }, 

            Package (0x02)
            {
                0xFB7C, 
                0x034A
            }
        })
        Name (CEUP, Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        })
        Method (CEUC, 0, NotSerialized)
        {
            CEUP [Zero] = One
            CEUP [One] = ECEU /* \ECEU */
            CEUP [0x02] = TGFG /* \TGFG */
            CEUP [0x03] = 0x28
            CEUP [0x04] = 0x14
            CEUP [0x05] = 0x14
            Return (CEUP) /* \_SB_.PCI0.B0D4.CEUP */
        }

        Method (_DTI, 1, NotSerialized)  // _DTI: Device Temperature Indication
        {
            LSTM = Arg0
            Notify (\_SB.PCI0.B0D4, 0x91) // Device-Specific
        }

        Method (_NTT, 0, NotSerialized)  // _NTT: Notification Temperature Threshold
        {
            Return (0x0ADE)
        }

        Name (PTYP, Zero)
        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If (CondRefOf (\_PR.PR00._PSS))
            {
                Return (\_PR.PR00._PSS ())
            }
            Else
            {
                Return (Package (0x02)
                {
                    Package (0x06)
                    {
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x06)
                    {
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
            }
        }

        Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
        {
            If (CondRefOf (\_PR.PR00._TSS))
            {
                Return (\_PR.PR00._TSS ())
            }
            Else
            {
                Return (Package (0x02)
                {
                    Package (0x05)
                    {
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x05)
                    {
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
            }
        }

        Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
        {
            If (CondRefOf (\_PR.PR00._TPC))
            {
                Return (\_PR.PR00._TPC) /* External reference */
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
        {
            If ((CondRefOf (\PC00) && (\PC00 != 0x80000000)))
            {
                If ((\PC00 & 0x04))
                {
                    Return (Package (0x02)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }
                    })
                }
                Else
                {
                    Return (Package (0x02)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x05,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000001810, // Address
                                ,)
                        }, 

                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x05,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000001810, // Address
                                ,)
                        }
                    })
                }
            }
            Else
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }
        }

        Method (_TSD, 0, NotSerialized)  // _TSD: Throttling State Dependencies
        {
            If (CondRefOf (\_PR.PR00._TSD))
            {
                Return (\_PR.PR00._TSD ())
            }
            Else
            {
                Return (Package (0x02)
                {
                    Package (0x05)
                    {
                        0x05, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x05)
                    {
                        0x05, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
            }
        }

        Method (_TDL, 0, NotSerialized)  // _TDL: T-State Depth Limit
        {
            If ((CondRefOf (\_PR.PR00._TSS) && CondRefOf (\_PR.CFGD)))
            {
                If ((\_PR.CFGD & 0x2000))
                {
                    Return ((SizeOf (\_PR.PR00.TSMF) - One))
                }
                Else
                {
                    Return ((SizeOf (\_PR.PR00.TSMC) - One))
                }
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (_PDL, 0, NotSerialized)  // _PDL: P-state Depth Limit
        {
            If (CondRefOf (\_PR.PR00._PSS))
            {
                If ((\_SB.OSCP & 0x0400))
                {
                    Return ((SizeOf (\_PR.PR00.TPSS) - One))
                }
                Else
                {
                    Return ((SizeOf (\_PR.PR00.LPSS) - One))
                }
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (_TSP, 0, Serialized)  // _TSP: Thermal Sampling Period
        {
            Return (\CPUS)
        }

        Method (_AC0, 0, Serialized)  // _ACx: Active Cooling, x=0-9
        {
            If (CTYP)
            {
                If ((\PTMC == Zero))
                {
                    Return (0xFFFFFFFF)
                }

                Local1 = \_SB.IETM.CTOK (\PTMC)
            }
            Else
            {
                If ((\ATMC == Zero))
                {
                    Return (0xFFFFFFFF)
                }

                Local1 = \_SB.IETM.CTOK (\ATMC)
            }

            If ((LSTM >= Local1))
            {
                Return ((Local1 - 0x14))
            }
            Else
            {
                Return (Local1)
            }
        }

        Method (_AC1, 0, Serialized)  // _ACx: Active Cooling, x=0-9
        {
            If (CTYP)
            {
                If ((\PTMC == Zero))
                {
                    Return (0xFFFFFFFF)
                }

                Local0 = \_SB.IETM.CTOK (\PTMC)
            }
            Else
            {
                If ((\ATMC == Zero))
                {
                    Return (0xFFFFFFFF)
                }

                Local0 = \_SB.IETM.CTOK (\ATMC)
            }

            Local0 -= 0x32
            If ((LSTM >= Local0))
            {
                Return ((Local0 - 0x14))
            }
            Else
            {
                Return (Local0)
            }
        }

        Method (_PSV, 0, Serialized)  // _PSV: Passive Temperature
        {
            If (CTYP)
            {
                If ((\ATMC == Zero))
                {
                    Return (0xFFFFFFFF)
                }

                Return (\_SB.IETM.CTOK (\ATMC))
            }
            Else
            {
                If ((\PTMC == Zero))
                {
                    Return (0xFFFFFFFF)
                }

                Return (\_SB.IETM.CTOK (\PTMC))
            }
        }

        Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
        {
            If ((\SACR == Zero))
            {
                Return (0xFFFFFFFF)
            }

            Return (\_SB.IETM.CTOK (\SACR))
        }

        Method (_CR3, 0, Serialized)  // _CR3: Warm/Standby Temperature
        {
            If ((\SAC3 == Zero))
            {
                Return (0xFFFFFFFF)
            }

            Return (\_SB.IETM.CTOK (\SAC3))
        }

        Method (_HOT, 0, Serialized)  // _HOT: Hot Temperature
        {
            If ((\SAHT == Zero))
            {
                Return (0xFFFFFFFF)
            }

            Return (\_SB.IETM.CTOK (\SAHT))
        }

        Method (_SCP, 3, Serialized)  // _SCP: Set Cooling Policy
        {
            If (((Arg0 == Zero) || (Arg0 == One)))
            {
                CTYP = Arg0
                P8XH (Zero, Arg1)
                P8XH (One, Arg2)
                Notify (\_SB.PCI0.B0D4, 0x91) // Device-Specific
            }
        }

        Name (VERS, Zero)
        Name (CTYP, Zero)
        Name (ALMT, Zero)
        Name (PLMT, Zero)
        Name (WKLD, Zero)
        Name (DSTA, Zero)
        Name (RES1, Zero)
        Method (DSCP, 7, Serialized)
        {
            If (((Arg1 == Zero) || (Arg1 == One)))
            {
                VERS = Arg0
                CTYP = Arg1
                ALMT = Arg2
                PLMT = Arg3
                WKLD = Arg4
                DSTA = Arg5
                RES1 = Arg6
                P8XH (Zero, Arg2)
                P8XH (One, Arg3)
                Notify (\_SB.PCI0.B0D4, 0x91) // Device-Specific
            }
        }
    }

    Scope (\_SB.IETM)
    {
        Name (LPSP, Package (0x01)
        {
            ToUUID ("b9455b06-7949-40c6-abf2-363a70c8706c") /* Unknown UUID */
        })
        Method (CLPM, 0, NotSerialized)
        {
            If ((\_SB.PCI0.B0D4.LPMS == Zero))
            {
                Return (Zero)
            }

            Return (LPMV) /* \LPMV */
        }

        Name (LPMT, Package (0x05)
        {
            One, 
            Package (0x06)
            {
                \_SB.PCI0.B0D4, 
                Zero, 
                0x00020000, 
                0x32, 
                0x80000000, 
                0x80000000
            }, 

            Package (0x06)
            {
                \_SB.PCI0.B0D4, 
                Zero, 
                0x00040000, 
                0x02, 
                0x80000000, 
                0x80000000
            }, 

            Package (0x06)
            {
                \_SB.PCI0.B0D4, 
                One, 
                0x00020000, 
                0x32, 
                0x80000000, 
                0x80000000
            }, 

            Package (0x06)
            {
                \_SB.PCI0.B0D4, 
                0x09, 
                0x00010000, 
                0x3A98, 
                0x80000000, 
                0x80000000
            }
        })
    }

    Scope (\_SB._SAN)
    {
        Device (GEN1)
        {
            Name (_HID, EisaId ("INT3403") /* DPTF Temperature Sensor */)  // _HID: Hardware ID
            Name (_UID, "GEN1")  // _UID: Unique ID
            Name (_STR, Unicode ("Thermal Sensor #1"))  // _STR: Description String
            Name (PTYP, 0x03)
            Name (CTYP, Zero)
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                \_SB.IETM
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (GN1E)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                Local0 = \_SB._SAN.TEMP (One)
                Return (Local0)
            }

            Name (PATF, Zero)
            Name (TMPX, Zero)
            Method (PATC, 0, Serialized)
            {
                Return (TRPC) /* \TRPC */
            }

            Method (PAT0, 1, Serialized)
            {
                If ((PATF == 0x02))
                {
                    Local0 = ((Arg0 << 0x10) | TMPX)
                    \_SB._SAN.STRP (One, Local0)
                    PATF = Zero
                    TMPX = Zero
                }
                Else
                {
                    TMPX = Arg0
                    PATF = One
                }
            }

            Method (PAT1, 1, Serialized)
            {
                If ((PATF == One))
                {
                    Local0 = ((TMPX << 0x10) | Arg0)
                    \_SB._SAN.STRP (One, Local0)
                    PATF = Zero
                    TMPX = Zero
                }
                Else
                {
                    TMPX = Arg0
                    PATF = 0x02
                }
            }

            Method (_TSP, 0, Serialized)  // _TSP: Thermal Sampling Period
            {
                Return (\TSP1)
            }

            Method (_AC0, 0, Serialized)  // _ACx: Active Cooling, x=0-9
            {
                If (CTYP)
                {
                    If ((G1PT == Zero))
                    {
                        Return (0xFFFFFFFF)
                    }

                    Local1 = \_SB.IETM.CTOK (G1PT)
                }
                Else
                {
                    If ((G1AT == Zero))
                    {
                        Return (0xFFFFFFFF)
                    }

                    Local1 = \_SB.IETM.CTOK (G1AT)
                }

                Return (Local1)
            }

            Method (_PSV, 0, Serialized)  // _PSV: Passive Temperature
            {
                If (CTYP)
                {
                    If ((G1AT == Zero))
                    {
                        Return (0xFFFFFFFF)
                    }

                    Return (\_SB.IETM.CTOK (G1AT))
                }
                Else
                {
                    If ((G1PT == Zero))
                    {
                        Return (0xFFFFFFFF)
                    }

                    Return (\_SB.IETM.CTOK (G1PT))
                }
            }

            Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
            {
                If ((G1CT == Zero))
                {
                    Return (0xFFFFFFFF)
                }

                Return (\_SB.IETM.CTOK (G1CT))
            }

            Method (_CR3, 0, Serialized)  // _CR3: Warm/Standby Temperature
            {
                If ((G1C3 == Zero))
                {
                    Return (0xFFFFFFFF)
                }

                Return (\_SB.IETM.CTOK (G1C3))
            }

            Method (_HOT, 0, Serialized)  // _HOT: Hot Temperature
            {
                If ((G1HT == Zero))
                {
                    Return (0xFFFFFFFF)
                }

                Return (\_SB.IETM.CTOK (G1HT))
            }

            Method (_SCP, 3, Serialized)  // _SCP: Set Cooling Policy
            {
                If (((Arg0 == Zero) || (Arg0 == One)))
                {
                    CTYP = Arg0
                    P8XH (Zero, Arg1)
                    P8XH (One, Arg2)
                    Notify (\_SB._SAN.GEN1, 0x91) // Device-Specific
                }
            }

            Name (VERS, Zero)
            Name (ALMT, Zero)
            Name (PLMT, Zero)
            Name (WKLD, Zero)
            Name (DSTA, Zero)
            Name (RES1, Zero)
            Method (DSCP, 7, Serialized)
            {
                If (((Arg1 == Zero) || (Arg1 == One)))
                {
                    VERS = Arg0
                    CTYP = Arg1
                    ALMT = Arg2
                    PLMT = Arg3
                    WKLD = Arg4
                    DSTA = Arg5
                    RES1 = Arg6
                    P8XH (Zero, Arg2)
                    P8XH (One, Arg3)
                    Notify (\_SB._SAN.GEN1, 0x91) // Device-Specific
                }
            }
        }
    }

    Scope (\_SB._SAN)
    {
        Device (GEN2)
        {
            Name (_HID, EisaId ("INT3403") /* DPTF Temperature Sensor */)  // _HID: Hardware ID
            Name (_UID, "GEN2")  // _UID: Unique ID
            Name (_STR, Unicode ("Thermal Sensor #2"))  // _STR: Description String
            Name (PTYP, 0x03)
            Name (CTYP, Zero)
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                \_SB.IETM
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (GN2E)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                Return (\_SB._SAN.TEMP (0x02))
            }

            Name (PATF, Zero)
            Name (TMPX, Zero)
            Method (PATC, 0, Serialized)
            {
                Return (TRPC) /* \TRPC */
            }

            Method (PAT0, 1, Serialized)
            {
                If ((PATF == 0x02))
                {
                    Local0 = ((Arg0 << 0x10) | TMPX)
                    \_SB._SAN.STRP (0x02, Local0)
                    PATF = Zero
                    TMPX = Zero
                }
                Else
                {
                    TMPX = Arg0
                    PATF = One
                }
            }

            Method (PAT1, 1, Serialized)
            {
                If ((PATF == One))
                {
                    Local0 = ((TMPX << 0x10) | Arg0)
                    \_SB._SAN.STRP (0x02, Local0)
                    PATF = Zero
                    TMPX = Zero
                }
                Else
                {
                    TMPX = Arg0
                    PATF = 0x02
                }
            }

            Method (_TSP, 0, Serialized)  // _TSP: Thermal Sampling Period
            {
                Return (\TSP2)
            }

            Method (_AC0, 0, Serialized)  // _ACx: Active Cooling, x=0-9
            {
                If (CTYP)
                {
                    If ((G2PT == Zero))
                    {
                        Return (0xFFFFFFFF)
                    }

                    Local1 = \_SB.IETM.CTOK (G2PT)
                }
                Else
                {
                    If ((G2AT == Zero))
                    {
                        Return (0xFFFFFFFF)
                    }

                    Local1 = \_SB.IETM.CTOK (G2AT)
                }

                Return (Local1)
            }

            Method (_PSV, 0, Serialized)  // _PSV: Passive Temperature
            {
                If (CTYP)
                {
                    If ((G2AT == Zero))
                    {
                        Return (0xFFFFFFFF)
                    }

                    Return (\_SB.IETM.CTOK (G2AT))
                }
                Else
                {
                    If ((G2PT == Zero))
                    {
                        Return (0xFFFFFFFF)
                    }

                    Return (\_SB.IETM.CTOK (G2PT))
                }
            }

            Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
            {
                If ((G2CT == Zero))
                {
                    Return (0xFFFFFFFF)
                }

                Return (\_SB.IETM.CTOK (G2CT))
            }

            Method (_CR3, 0, Serialized)  // _CR3: Warm/Standby Temperature
            {
                If ((G2C3 == Zero))
                {
                    Return (0xFFFFFFFF)
                }

                Return (\_SB.IETM.CTOK (G2C3))
            }

            Method (_HOT, 0, Serialized)  // _HOT: Hot Temperature
            {
                If ((G2HT == Zero))
                {
                    Return (0xFFFFFFFF)
                }

                Return (\_SB.IETM.CTOK (G2HT))
            }

            Method (_SCP, 3, Serialized)  // _SCP: Set Cooling Policy
            {
                If (((Arg0 == Zero) || (Arg0 == One)))
                {
                    CTYP = Arg0
                    P8XH (Zero, Arg1)
                    P8XH (One, Arg2)
                    Notify (\_SB._SAN.GEN2, 0x91) // Device-Specific
                }
            }

            Name (VERS, Zero)
            Name (ALMT, Zero)
            Name (PLMT, Zero)
            Name (WKLD, Zero)
            Name (DSTA, Zero)
            Name (RES1, Zero)
            Method (DSCP, 7, Serialized)
            {
                If (((Arg1 == Zero) || (Arg1 == One)))
                {
                    VERS = Arg0
                    CTYP = Arg1
                    ALMT = Arg2
                    PLMT = Arg3
                    WKLD = Arg4
                    DSTA = Arg5
                    RES1 = Arg6
                    P8XH (Zero, Arg2)
                    P8XH (One, Arg3)
                    Notify (\_SB._SAN.GEN2, 0x91) // Device-Specific
                }
            }
        }
    }

    Scope (\_SB._SAN)
    {
        Device (GEN3)
        {
            Name (_HID, EisaId ("INT3403") /* DPTF Temperature Sensor */)  // _HID: Hardware ID
            Name (_UID, "GEN3")  // _UID: Unique ID
            Name (_STR, Unicode ("Thermal Sensor #3"))  // _STR: Description String
            Name (PTYP, 0x03)
            Name (CTYP, Zero)
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                \_SB.IETM
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (GN3E)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                Return (\_SB._SAN.TEMP (0x03))
            }

            Name (PATF, Zero)
            Name (TMPX, Zero)
            Method (PATC, 0, Serialized)
            {
                Return (TRPC) /* \TRPC */
            }

            Method (PAT0, 1, Serialized)
            {
                If ((PATF == 0x02))
                {
                    Local0 = ((Arg0 << 0x10) | TMPX)
                    \_SB._SAN.STRP (0x03, Local0)
                    PATF = Zero
                    TMPX = Zero
                }
                Else
                {
                    TMPX = Arg0
                    PATF = One
                }
            }

            Method (PAT1, 1, Serialized)
            {
                If ((PATF == One))
                {
                    Local0 = ((TMPX << 0x10) | Arg0)
                    \_SB._SAN.STRP (0x03, Local0)
                    PATF = Zero
                    TMPX = Zero
                }
                Else
                {
                    TMPX = Arg0
                    PATF = 0x02
                }
            }

            Method (_TSP, 0, Serialized)  // _TSP: Thermal Sampling Period
            {
                Return (\TSP3)
            }

            Method (_AC0, 0, Serialized)  // _ACx: Active Cooling, x=0-9
            {
                If (CTYP)
                {
                    If ((G3PT == Zero))
                    {
                        Return (0xFFFFFFFF)
                    }

                    Local1 = \_SB.IETM.CTOK (G3PT)
                }
                Else
                {
                    If ((G3AT == Zero))
                    {
                        Return (0xFFFFFFFF)
                    }

                    Local1 = \_SB.IETM.CTOK (G3AT)
                }

                Return (Local1)
            }

            Method (_PSV, 0, Serialized)  // _PSV: Passive Temperature
            {
                If (CTYP)
                {
                    If ((G3AT == Zero))
                    {
                        Return (0xFFFFFFFF)
                    }

                    Return (\_SB.IETM.CTOK (G3AT))
                }
                Else
                {
                    If ((G3PT == Zero))
                    {
                        Return (0xFFFFFFFF)
                    }

                    Return (\_SB.IETM.CTOK (G3PT))
                }
            }

            Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
            {
                If ((G3CT == Zero))
                {
                    Return (0xFFFFFFFF)
                }

                Return (\_SB.IETM.CTOK (G3CT))
            }

            Method (_CR3, 0, Serialized)  // _CR3: Warm/Standby Temperature
            {
                If ((G3C3 == Zero))
                {
                    Return (0xFFFFFFFF)
                }

                Return (\_SB.IETM.CTOK (G3C3))
            }

            Method (_HOT, 0, Serialized)  // _HOT: Hot Temperature
            {
                If ((G3HT == Zero))
                {
                    Return (0xFFFFFFFF)
                }

                Return (\_SB.IETM.CTOK (G3HT))
            }

            Method (_SCP, 3, Serialized)  // _SCP: Set Cooling Policy
            {
                If (((Arg0 == Zero) || (Arg0 == One)))
                {
                    CTYP = Arg0
                    P8XH (Zero, Arg1)
                    P8XH (One, Arg2)
                    Notify (\_SB._SAN.GEN3, 0x91) // Device-Specific
                }
            }

            Name (VERS, Zero)
            Name (ALMT, Zero)
            Name (PLMT, Zero)
            Name (WKLD, Zero)
            Name (DSTA, Zero)
            Name (RES1, Zero)
            Method (DSCP, 7, Serialized)
            {
                If (((Arg1 == Zero) || (Arg1 == One)))
                {
                    VERS = Arg0
                    CTYP = Arg1
                    ALMT = Arg2
                    PLMT = Arg3
                    WKLD = Arg4
                    DSTA = Arg5
                    RES1 = Arg6
                    P8XH (Zero, Arg2)
                    P8XH (One, Arg3)
                    Notify (\_SB._SAN.GEN3, 0x91) // Device-Specific
                }
            }
        }
    }

    Scope (\_SB._SAN)
    {
        Device (GEN4)
        {
            Name (_HID, EisaId ("INT3403") /* DPTF Temperature Sensor */)  // _HID: Hardware ID
            Name (_UID, "GEN4")  // _UID: Unique ID
            Name (_STR, Unicode ("Thermal Sensor #4"))  // _STR: Description String
            Name (PTYP, 0x03)
            Name (CTYP, Zero)
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                \_SB.IETM
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (GN4E)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                Local0 = \_SB._SAN.TEMP (0x04)
                Return (Local0)
            }

            Name (PATF, Zero)
            Name (TMPX, Zero)
            Method (PATC, 0, Serialized)
            {
                Return (TRPC) /* \TRPC */
            }

            Method (PAT0, 1, Serialized)
            {
                If ((PATF == 0x02))
                {
                    Local0 = ((Arg0 << 0x10) | TMPX)
                    \_SB._SAN.STRP (0x04, Local0)
                    PATF = Zero
                    TMPX = Zero
                }
                Else
                {
                    TMPX = Arg0
                    PATF = One
                }
            }

            Method (PAT1, 1, Serialized)
            {
                If ((PATF == One))
                {
                    Local0 = ((TMPX << 0x10) | Arg0)
                    \_SB._SAN.STRP (0x04, Local0)
                    PATF = Zero
                    TMPX = Zero
                }
                Else
                {
                    TMPX = Arg0
                    PATF = 0x02
                }
            }

            Method (_TSP, 0, Serialized)  // _TSP: Thermal Sampling Period
            {
                Return (\TSP4)
            }

            Method (_AC0, 0, Serialized)  // _ACx: Active Cooling, x=0-9
            {
                If (CTYP)
                {
                    If ((G4PT == Zero))
                    {
                        Return (0xFFFFFFFF)
                    }

                    Local1 = \_SB.IETM.CTOK (G4PT)
                }
                Else
                {
                    If ((G4AT == Zero))
                    {
                        Return (0xFFFFFFFF)
                    }

                    Local1 = \_SB.IETM.CTOK (G4AT)
                }

                Return (Local1)
            }

            Method (_PSV, 0, Serialized)  // _PSV: Passive Temperature
            {
                If (CTYP)
                {
                    If ((G4AT == Zero))
                    {
                        Return (0xFFFFFFFF)
                    }

                    Return (\_SB.IETM.CTOK (G4AT))
                }
                Else
                {
                    If ((G4PT == Zero))
                    {
                        Return (0xFFFFFFFF)
                    }

                    Return (\_SB.IETM.CTOK (G4PT))
                }
            }

            Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
            {
                If ((G4CT == Zero))
                {
                    Return (0xFFFFFFFF)
                }

                Return (\_SB.IETM.CTOK (G4CT))
            }

            Method (_CR3, 0, Serialized)  // _CR3: Warm/Standby Temperature
            {
                If ((G4C3 == Zero))
                {
                    Return (0xFFFFFFFF)
                }

                Return (\_SB.IETM.CTOK (G4C3))
            }

            Method (_HOT, 0, Serialized)  // _HOT: Hot Temperature
            {
                If ((G4HT == Zero))
                {
                    Return (0xFFFFFFFF)
                }

                Return (\_SB.IETM.CTOK (G4HT))
            }

            Method (_SCP, 3, Serialized)  // _SCP: Set Cooling Policy
            {
                If (((Arg0 == Zero) || (Arg0 == One)))
                {
                    CTYP = Arg0
                    P8XH (Zero, Arg1)
                    P8XH (One, Arg2)
                    Notify (\_SB._SAN.GEN4, 0x91) // Device-Specific
                }
            }

            Name (VERS, Zero)
            Name (ALMT, Zero)
            Name (PLMT, Zero)
            Name (WKLD, Zero)
            Name (DSTA, Zero)
            Name (RES1, Zero)
            Method (DSCP, 7, Serialized)
            {
                If (((Arg1 == Zero) || (Arg1 == One)))
                {
                    VERS = Arg0
                    CTYP = Arg1
                    ALMT = Arg2
                    PLMT = Arg3
                    WKLD = Arg4
                    DSTA = Arg5
                    RES1 = Arg6
                    P8XH (Zero, Arg2)
                    P8XH (One, Arg3)
                    Notify (\_SB._SAN.GEN4, 0x91) // Device-Specific
                }
            }
        }
    }

    Scope (\_SB._SAN)
    {
        Device (GEN5)
        {
            Name (_HID, EisaId ("INT3403") /* DPTF Temperature Sensor */)  // _HID: Hardware ID
            Name (_UID, "GEN5")  // _UID: Unique ID
            Name (_STR, Unicode ("Battery Temperature"))  // _STR: Description String
            Name (PTYP, 0x03)
            Name (CTYP, Zero)
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                \_SB.IETM
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (GN5E)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                Return (\_SB._SAN.TEMP (0x05))
            }

            Name (PATF, Zero)
            Name (TMPX, Zero)
            Method (PATC, 0, Serialized)
            {
                Return (TRPC) /* \TRPC */
            }

            Method (PAT0, 1, Serialized)
            {
                If ((PATF == 0x02))
                {
                    Local0 = ((Arg0 << 0x10) | TMPX)
                    \_SB._SAN.STRP (0x05, Local0)
                    PATF = Zero
                    TMPX = Zero
                }
                Else
                {
                    TMPX = Arg0
                    PATF = One
                }
            }

            Method (PAT1, 1, Serialized)
            {
                If ((PATF == One))
                {
                    Local0 = ((TMPX << 0x10) | Arg0)
                    \_SB._SAN.STRP (0x05, Local0)
                    PATF = Zero
                    TMPX = Zero
                }
                Else
                {
                    TMPX = Arg0
                    PATF = 0x02
                }
            }

            Method (_TSP, 0, Serialized)  // _TSP: Thermal Sampling Period
            {
                Return (\TSP5)
            }

            Method (_AC0, 0, Serialized)  // _ACx: Active Cooling, x=0-9
            {
                If (CTYP)
                {
                    If ((G5PT == Zero))
                    {
                        Return (0xFFFFFFFF)
                    }

                    Local1 = \_SB.IETM.CTOK (G5PT)
                }
                Else
                {
                    If ((G5AT == Zero))
                    {
                        Return (0xFFFFFFFF)
                    }

                    Local1 = \_SB.IETM.CTOK (G5AT)
                }

                Return (Local1)
            }

            Method (_PSV, 0, Serialized)  // _PSV: Passive Temperature
            {
                If (CTYP)
                {
                    If ((G5AT == Zero))
                    {
                        Return (0xFFFFFFFF)
                    }

                    Return (\_SB.IETM.CTOK (G5AT))
                }
                Else
                {
                    If ((G5PT == Zero))
                    {
                        Return (0xFFFFFFFF)
                    }

                    Return (\_SB.IETM.CTOK (G5PT))
                }
            }

            Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
            {
                If ((G5CT == Zero))
                {
                    Return (0xFFFFFFFF)
                }

                Return (\_SB.IETM.CTOK (G5CT))
            }

            Method (_CR3, 0, Serialized)  // _CR3: Warm/Standby Temperature
            {
                If ((G5C3 == Zero))
                {
                    Return (0xFFFFFFFF)
                }

                Return (\_SB.IETM.CTOK (G5C3))
            }

            Method (_HOT, 0, Serialized)  // _HOT: Hot Temperature
            {
                If ((G5HT == Zero))
                {
                    Return (0xFFFFFFFF)
                }

                Return (\_SB.IETM.CTOK (G5HT))
            }

            Method (_SCP, 3, Serialized)  // _SCP: Set Cooling Policy
            {
                If (((Arg0 == Zero) || (Arg0 == One)))
                {
                    CTYP = Arg0
                    P8XH (Zero, Arg1)
                    P8XH (One, Arg2)
                    Notify (\_SB._SAN.GEN5, 0x91) // Device-Specific
                }
            }

            Name (VERS, Zero)
            Name (ALMT, Zero)
            Name (PLMT, Zero)
            Name (WKLD, Zero)
            Name (DSTA, Zero)
            Name (RES1, Zero)
            Method (DSCP, 7, Serialized)
            {
                If (((Arg1 == Zero) || (Arg1 == One)))
                {
                    VERS = Arg0
                    CTYP = Arg1
                    ALMT = Arg2
                    PLMT = Arg3
                    WKLD = Arg4
                    DSTA = Arg5
                    RES1 = Arg6
                    P8XH (Zero, Arg2)
                    P8XH (One, Arg3)
                    Notify (\_SB._SAN.GEN5, 0x91) // Device-Specific
                }
            }
        }
    }

    Scope (\_SB._SAN)
    {
        Device (GEN6)
        {
            Name (_HID, EisaId ("INT3403") /* DPTF Temperature Sensor */)  // _HID: Hardware ID
            Name (_UID, "GEN6")  // _UID: Unique ID
            Name (_STR, Unicode ("dGPU Temperature"))  // _STR: Description String
            Name (PTYP, 0x03)
            Name (CTYP, Zero)
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                \_SB.IETM
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (GN6E)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                Return (\_SB._SAN.TEMP (0x06))
            }

            Name (PATF, Zero)
            Name (TMPX, Zero)
            Method (PATC, 0, Serialized)
            {
                Return (TRPC) /* \TRPC */
            }

            Method (PAT0, 1, Serialized)
            {
                If ((PATF == 0x02))
                {
                    Local0 = ((Arg0 << 0x10) | TMPX)
                    \_SB._SAN.STRP (0x06, Local0)
                    PATF = Zero
                    TMPX = Zero
                }
                Else
                {
                    TMPX = Arg0
                    PATF = One
                }
            }

            Method (PAT1, 1, Serialized)
            {
                If ((PATF == One))
                {
                    Local0 = ((TMPX << 0x10) | Arg0)
                    \_SB._SAN.STRP (0x06, Local0)
                    PATF = Zero
                    TMPX = Zero
                }
                Else
                {
                    TMPX = Arg0
                    PATF = 0x02
                }
            }

            Method (_TSP, 0, Serialized)  // _TSP: Thermal Sampling Period
            {
                Return (\TSP6)
            }

            Method (_AC0, 0, Serialized)  // _ACx: Active Cooling, x=0-9
            {
                If (CTYP)
                {
                    If ((G6PT == Zero))
                    {
                        Return (0xFFFFFFFF)
                    }

                    Local1 = \_SB.IETM.CTOK (G6PT)
                }
                Else
                {
                    If ((G6AT == Zero))
                    {
                        Return (0xFFFFFFFF)
                    }

                    Local1 = \_SB.IETM.CTOK (G6AT)
                }

                Return (Local1)
            }

            Method (_PSV, 0, Serialized)  // _PSV: Passive Temperature
            {
                If (CTYP)
                {
                    If ((G6AT == Zero))
                    {
                        Return (0xFFFFFFFF)
                    }

                    Return (\_SB.IETM.CTOK (G6AT))
                }
                Else
                {
                    If ((G6PT == Zero))
                    {
                        Return (0xFFFFFFFF)
                    }

                    Return (\_SB.IETM.CTOK (G6PT))
                }
            }

            Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
            {
                If ((G6CT == Zero))
                {
                    Return (0xFFFFFFFF)
                }

                Return (\_SB.IETM.CTOK (G6CT))
            }

            Method (_CR3, 0, Serialized)  // _CR3: Warm/Standby Temperature
            {
                If ((G6C3 == Zero))
                {
                    Return (0xFFFFFFFF)
                }

                Return (\_SB.IETM.CTOK (G6C3))
            }

            Method (_HOT, 0, Serialized)  // _HOT: Hot Temperature
            {
                If ((G6HT == Zero))
                {
                    Return (0xFFFFFFFF)
                }

                Return (\_SB.IETM.CTOK (G6HT))
            }

            Method (_SCP, 3, Serialized)  // _SCP: Set Cooling Policy
            {
                If (((Arg0 == Zero) || (Arg0 == One)))
                {
                    CTYP = Arg0
                    P8XH (Zero, Arg1)
                    P8XH (One, Arg2)
                    Notify (\_SB._SAN.GEN6, 0x91) // Device-Specific
                }
            }

            Name (VERS, Zero)
            Name (ALMT, Zero)
            Name (PLMT, Zero)
            Name (WKLD, Zero)
            Name (DSTA, Zero)
            Name (RES1, Zero)
            Method (DSCP, 7, Serialized)
            {
                If (((Arg1 == Zero) || (Arg1 == One)))
                {
                    VERS = Arg0
                    CTYP = Arg1
                    ALMT = Arg2
                    PLMT = Arg3
                    WKLD = Arg4
                    DSTA = Arg5
                    RES1 = Arg6
                    P8XH (Zero, Arg2)
                    P8XH (One, Arg3)
                    Notify (\_SB._SAN.GEN6, 0x91) // Device-Specific
                }
            }
        }
    }

    Scope (\_SB._SAN)
    {
        Device (GEN7)
        {
            Name (_HID, EisaId ("INT3403") /* DPTF Temperature Sensor */)  // _HID: Hardware ID
            Name (_UID, "GEN7")  // _UID: Unique ID
            Name (_STR, Unicode ("Thermal Sensor #7"))  // _STR: Description String
            Name (PTYP, 0x03)
            Name (CTYP, Zero)
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                \_SB.IETM
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (GN7E)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                Return (\_SB._SAN.TEMP (0x07))
            }

            Name (PATF, Zero)
            Name (TMPX, Zero)
            Method (PATC, 0, Serialized)
            {
                Return (TRPC) /* \TRPC */
            }

            Method (PAT0, 1, Serialized)
            {
                If ((PATF == 0x02))
                {
                    Local0 = ((Arg0 << 0x10) | TMPX)
                    \_SB._SAN.STRP (0x07, Local0)
                    PATF = Zero
                    TMPX = Zero
                }
                Else
                {
                    TMPX = Arg0
                    PATF = One
                }
            }

            Method (PAT1, 1, Serialized)
            {
                If ((PATF == One))
                {
                    Local0 = ((TMPX << 0x10) | Arg0)
                    \_SB._SAN.STRP (0x07, Local0)
                    PATF = Zero
                    TMPX = Zero
                }
                Else
                {
                    TMPX = Arg0
                    PATF = 0x02
                }
            }

            Method (_TSP, 0, Serialized)  // _TSP: Thermal Sampling Period
            {
                Return (\TSP7)
            }

            Method (_AC0, 0, Serialized)  // _ACx: Active Cooling, x=0-9
            {
                If (CTYP)
                {
                    If ((G7PT == Zero))
                    {
                        Return (0xFFFFFFFF)
                    }

                    Local1 = \_SB.IETM.CTOK (G7PT)
                }
                Else
                {
                    If ((G7AT == Zero))
                    {
                        Return (0xFFFFFFFF)
                    }

                    Local1 = \_SB.IETM.CTOK (G7AT)
                }

                Return (Local1)
            }

            Method (_PSV, 0, Serialized)  // _PSV: Passive Temperature
            {
                If (CTYP)
                {
                    If ((G7AT == Zero))
                    {
                        Return (0xFFFFFFFF)
                    }

                    Return (\_SB.IETM.CTOK (G7AT))
                }
                Else
                {
                    If ((G7PT == Zero))
                    {
                        Return (0xFFFFFFFF)
                    }

                    Return (\_SB.IETM.CTOK (G7PT))
                }
            }

            Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
            {
                If ((G7CT == Zero))
                {
                    Return (0xFFFFFFFF)
                }

                Return (\_SB.IETM.CTOK (G7CT))
            }

            Method (_CR3, 0, Serialized)  // _CR3: Warm/Standby Temperature
            {
                If ((G7C3 == Zero))
                {
                    Return (0xFFFFFFFF)
                }

                Return (\_SB.IETM.CTOK (G7C3))
            }

            Method (_HOT, 0, Serialized)  // _HOT: Hot Temperature
            {
                If ((G7HT == Zero))
                {
                    Return (0xFFFFFFFF)
                }

                Return (\_SB.IETM.CTOK (G7HT))
            }

            Method (_SCP, 3, Serialized)  // _SCP: Set Cooling Policy
            {
                If (((Arg0 == Zero) || (Arg0 == One)))
                {
                    CTYP = Arg0
                    P8XH (Zero, Arg1)
                    P8XH (One, Arg2)
                    Notify (\_SB._SAN.GEN7, 0x91) // Device-Specific
                }
            }

            Name (VERS, Zero)
            Name (ALMT, Zero)
            Name (PLMT, Zero)
            Name (WKLD, Zero)
            Name (DSTA, Zero)
            Name (RES1, Zero)
            Method (DSCP, 7, Serialized)
            {
                If (((Arg1 == Zero) || (Arg1 == One)))
                {
                    VERS = Arg0
                    CTYP = Arg1
                    ALMT = Arg2
                    PLMT = Arg3
                    WKLD = Arg4
                    DSTA = Arg5
                    RES1 = Arg6
                    P8XH (Zero, Arg2)
                    P8XH (One, Arg3)
                    Notify (\_SB._SAN.GEN7, 0x91) // Device-Specific
                }
            }
        }
    }

    Scope (\_SB._SAN)
    {
        Device (GEN8)
        {
            Name (_HID, EisaId ("INT3403") /* DPTF Temperature Sensor */)  // _HID: Hardware ID
            Name (_UID, "GEN8")  // _UID: Unique ID
            Name (_STR, Unicode ("Thermal Sensor #8"))  // _STR: Description String
            Name (PTYP, 0x03)
            Name (CTYP, Zero)
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                \_SB.IETM
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (GN8E)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                Return (\_SB._SAN.TEMP (0x08))
            }

            Name (PATF, Zero)
            Name (TMPX, Zero)
            Method (PATC, 0, Serialized)
            {
                Return (TRPC) /* \TRPC */
            }

            Method (PAT0, 1, Serialized)
            {
                If ((PATF == 0x02))
                {
                    Local0 = ((Arg0 << 0x10) | TMPX)
                    \_SB._SAN.STRP (0x08, Local0)
                    PATF = Zero
                    TMPX = Zero
                }
                Else
                {
                    TMPX = Arg0
                    PATF = One
                }
            }

            Method (PAT1, 1, Serialized)
            {
                If ((PATF == One))
                {
                    Local0 = ((TMPX << 0x10) | Arg0)
                    \_SB._SAN.STRP (0x08, Local0)
                    PATF = Zero
                    TMPX = Zero
                }
                Else
                {
                    TMPX = Arg0
                    PATF = 0x02
                }
            }

            Method (_TSP, 0, Serialized)  // _TSP: Thermal Sampling Period
            {
                Return (\TSP8)
            }

            Method (_AC0, 0, Serialized)  // _ACx: Active Cooling, x=0-9
            {
                If (CTYP)
                {
                    If ((G8PT == Zero))
                    {
                        Return (0xFFFFFFFF)
                    }

                    Local1 = \_SB.IETM.CTOK (G8PT)
                }
                Else
                {
                    If ((G8AT == Zero))
                    {
                        Return (0xFFFFFFFF)
                    }

                    Local1 = \_SB.IETM.CTOK (G8AT)
                }

                Return (Local1)
            }

            Method (_PSV, 0, Serialized)  // _PSV: Passive Temperature
            {
                If (CTYP)
                {
                    If ((G8AT == Zero))
                    {
                        Return (0xFFFFFFFF)
                    }

                    Return (\_SB.IETM.CTOK (G8AT))
                }
                Else
                {
                    If ((G8PT == Zero))
                    {
                        Return (0xFFFFFFFF)
                    }

                    Return (\_SB.IETM.CTOK (G8PT))
                }
            }

            Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
            {
                If ((G8CT == Zero))
                {
                    Return (0xFFFFFFFF)
                }

                Return (\_SB.IETM.CTOK (G8CT))
            }

            Method (_CR3, 0, Serialized)  // _CR3: Warm/Standby Temperature
            {
                If ((G8C3 == Zero))
                {
                    Return (0xFFFFFFFF)
                }

                Return (\_SB.IETM.CTOK (G8C3))
            }

            Method (_HOT, 0, Serialized)  // _HOT: Hot Temperature
            {
                If ((G8HT == Zero))
                {
                    Return (0xFFFFFFFF)
                }

                Return (\_SB.IETM.CTOK (G8HT))
            }

            Method (_SCP, 3, Serialized)  // _SCP: Set Cooling Policy
            {
                If (((Arg0 == Zero) || (Arg0 == One)))
                {
                    CTYP = Arg0
                    P8XH (Zero, Arg1)
                    P8XH (One, Arg2)
                    Notify (\_SB._SAN.GEN8, 0x91) // Device-Specific
                }
            }

            Name (VERS, Zero)
            Name (ALMT, Zero)
            Name (PLMT, Zero)
            Name (WKLD, Zero)
            Name (DSTA, Zero)
            Name (RES1, Zero)
            Method (DSCP, 7, Serialized)
            {
                If (((Arg1 == Zero) || (Arg1 == One)))
                {
                    VERS = Arg0
                    CTYP = Arg1
                    ALMT = Arg2
                    PLMT = Arg3
                    WKLD = Arg4
                    DSTA = Arg5
                    RES1 = Arg6
                    P8XH (Zero, Arg2)
                    P8XH (One, Arg3)
                    Notify (\_SB._SAN.GEN8, 0x91) // Device-Specific
                }
            }
        }
    }

    Scope (\_SB)
    {
        Device (CHRG)
        {
            Name (_HID, EisaId ("INT3403") /* DPTF Temperature Sensor */)  // _HID: Hardware ID
            Name (_UID, "CHRG")  // _UID: Unique ID
            Name (_STR, Unicode ("Charger participant"))  // _STR: Description String
            Name (PTYP, 0x0B)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((CHGE == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Name (PPSS, Package (0x05)
            {
                Package (0x08)
                {
                    0x07D0, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    0x07D0, 
                    "MilliAmps", 
                    Zero
                }, 

                Package (0x08)
                {
                    0x05DC, 
                    Zero, 
                    Zero, 
                    Zero, 
                    One, 
                    0x05DC, 
                    "MilliAmps", 
                    Zero
                }, 

                Package (0x08)
                {
                    0x03E8, 
                    Zero, 
                    Zero, 
                    Zero, 
                    0x02, 
                    0x03E8, 
                    "MilliAmps", 
                    Zero
                }, 

                Package (0x08)
                {
                    0x01F4, 
                    Zero, 
                    Zero, 
                    Zero, 
                    0x03, 
                    0x01F4, 
                    "MilliAmps", 
                    Zero
                }, 

                Package (0x08)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    0x04, 
                    Zero, 
                    "MilliAmps", 
                    Zero
                }
            })
            Method (PPPC, 0, NotSerialized)
            {
                If (\PWRS)
                {
                    Return (Zero)
                }
                Else
                {
                    Return ((SizeOf (PPSS) - One))
                }
            }

            Method (SPPC, 1, Serialized)
            {
                \_SB.BAT1.CHGI (Arg0)
            }

            Method (PPDL, 0, NotSerialized)
            {
                Return ((SizeOf (PPSS) - One))
            }
        }
    }

    Scope (\_SB)
    {
        Device (DGFX)
        {
            Name (_HID, EisaId ("INT3403") /* DPTF Temperature Sensor */)  // _HID: Hardware ID
            Name (_UID, "DGFX")  // _UID: Unique ID
            Name (_STR, Unicode ("dGPU Throttling Participant"))  // _STR: Description String
            Name (PTYP, 0x0B)
            Name (LPL0, Zero)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((DGXE == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Name (PPCC, Package (0x02)
            {
                One, 
                Package (0x06)
                {
                    Zero, 
                    0x1F40, 
                    0x00011170, 
                    Zero, 
                    Zero, 
                    One
                }
            })
            Method (SPL0, 1, Serialized)
            {
                Debug = "SPL0: Set DGPU Power limit to %0 mW"
                Debug = Arg0
                LPL0 = Arg0
                \_SB._SAN.SDXP (Arg0)
            }

            Method (GPL0, 0, Serialized)
            {
                Debug = "GPL0: Get DGPU Power limit returns %0 mW"
                Debug = LPL0 /* \_SB_.DGFX.LPL0 */
                Return (LPL0) /* \_SB_.DGFX.LPL0 */
            }
        }
    }

    Scope (\_SB)
    {
        Device (TPWR)
        {
            Name (_HID, EisaId ("INT3407") /* DPTF Platform Power Meter */)  // _HID: Hardware ID
            Name (_UID, "TPWR")  // _UID: Unique ID
            Name (_STR, Unicode ("Platform Power"))  // _STR: Description String
            Name (PTYP, 0x11)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((\PWRE == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_BST, 0, NotSerialized)  // _BST: Battery Status
            {
                Return (\_SB.BAT1._BST ())
            }

            Method (_BIX, 0, NotSerialized)  // _BIX: Battery Information Extended
            {
                Return (\_SB.BAT1._BIX ())
            }

            Method (PSOC, 0, NotSerialized)
            {
                Return (\_SB.BAT1.PSOC ())
            }

            Method (PMAX, 0, Serialized)
            {
                Return (\_SB.BAT1.PMAX ())
            }

            Method (PSRC, 0, NotSerialized)
            {
                Return (\_SB.BAT1.PSRC ())
            }

            Method (ARTG, 0, NotSerialized)
            {
                If ((PSRC () == Zero))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (\_SB.BAT1.ARTG ())
                }
            }

            Method (CTYP, 0, NotSerialized)
            {
                Return (0x02)
            }

            Method (PROP, 0, NotSerialized)
            {
                Return (0x32C8)
            }

            Method (APKP, 0, NotSerialized)
            {
                Return (0x00015F90)
            }

            Method (APKT, 0, NotSerialized)
            {
                Return (0x0A)
            }

            Method (DPSP, 0, Serialized)
            {
                Return (\PPPR)
            }
        }
    }

    Scope (\_SB.IETM)
    {
        Name (DP2P, Package (0x01)
        {
            ToUUID ("9e04115a-ae87-4d1c-9500-0f3e340bfe75") /* Unknown UUID */
        })
        Name (DPSP, Package (0x01)
        {
            ToUUID ("42a441d6-ae6a-462b-a84b-4a8ce79027d3") /* Unknown UUID */
        })
        Name (DASP, Package (0x01)
        {
            ToUUID ("3a95c389-e4b8-4629-a526-c52c88626bae") /* Unknown UUID */
        })
        Name (DA2P, Package (0x01)
        {
            ToUUID ("0e56fab6-bdfc-4e8c-8246-40ecfd4d74ea") /* Unknown UUID */
        })
        Name (DCSP, Package (0x01)
        {
            ToUUID ("97c68ae7-15fa-499c-b8c9-5da81d606e0a") /* Unknown UUID */
        })
        Name (POBP, Package (0x01)
        {
            ToUUID ("f5a35014-c209-46a4-993a-eb56de7530a1") /* Unknown UUID */
        })
        Name (WPSP, Package (0x01)
        {
            ToUUID ("64568ccd-6597-4bfc-b9d6-9d33854013ce") /* Unknown UUID */
        })
        Name (HDCP, Package (0x01)
        {
            ToUUID ("be84babf-c4d4-403d-b495-3128fd44dac1") /* Unknown UUID */
        })
        Name (DAPP, Package (0x01)
        {
            ToUUID ("63be270f-1c11-48fd-a6f7-3af253ff3e2d") /* Unknown UUID */
        })
        Name (DVSP, Package (0x01)
        {
            ToUUID ("6ed722a7-9240-48a5-b479-31eef723d7cf") /* Unknown UUID */
        })
        Name (DPID, Package (0x01)
        {
            ToUUID ("42496e14-bc1b-46e8-a798-ca915464426f") /* Unknown UUID */
        })
    }

    Scope (\_SB._SAN)
    {
        Method (TEMP, 1, Serialized)
        {
            Local2 = 0x0BB8
            Local0 = \_SB._SAN.RQST (0x03, One, Arg0, Zero, One)
            If ((ObjectType (Local0) != 0x03)) {}
            ElseIf ((SizeOf (Local0) == 0x02))
            {
                CreateWordField (Local0, Zero, TTR3)
                Local2 = TTR3 /* \_SB_._SAN.TEMP.TTR3 */
            }
            Else
            {
            }

            Return (Local2)
        }

        Method (STRP, 2, Serialized)
        {
            Local0 = \_SB._SAN.RQST (0x03, 0x09, Arg0, ToBuffer (Arg1), One)
            If ((ObjectType (Local0) != 0x03)) {}
            ElseIf ((SizeOf (Local0) == One))
            {
                Debug = ToInteger (Local0)
            }
            Else
            {
            }
        }

        Method (SDXP, 1, Serialized)
        {
            Name (INPT, Buffer (0x04) {})
            CreateDWordField (INPT, Zero, GPWR)
            GPWR = Arg0
            Local0 = \_SB._SAN.RQSG (0x13, One, Zero, INPT, Zero)
            If ((Local0 != Zero)) {}
        }
    }

    Scope (\_SB.IETM)
    {
        Method (GDDV, 0, Serialized)
        {
            If (((EBID & 0x20) == 0x20))
            {
                Return (Package (0x01)
                {
                    Buffer (0x4BEA)
                    {
                        /* 0000 */  0xE5, 0x1F, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x01,  // ........
                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                        /* 0010 */  0x1B, 0x00, 0x00, 0x00, 0x2F, 0x70, 0x61, 0x72,  // ..../par
                        /* 0018 */  0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6E, 0x74,  // ticipant
                        /* 0020 */  0x73, 0x2F, 0x47, 0x45, 0x4E, 0x35, 0x2E, 0x44,  // s/GEN5.D
                        /* 0028 */  0x30, 0x2F, 0x67, 0x74, 0x73, 0x68, 0x00, 0x06,  // 0/gtsh..
                        /* 0030 */  0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xC0,  // ........
                        /* 0038 */  0x0A, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x25,  // .......%
                        /* 0040 */  0x00, 0x00, 0x00, 0x2F, 0x70, 0x61, 0x72, 0x74,  // .../part
                        /* 0048 */  0x69, 0x63, 0x69, 0x70, 0x61, 0x6E, 0x74, 0x73,  // icipants
                        /* 0050 */  0x2F, 0x47, 0x45, 0x4E, 0x35, 0x2E, 0x44, 0x30,  // /GEN5.D0
                        /* 0058 */  0x2F, 0x74, 0x72, 0x69, 0x70, 0x70, 0x6F, 0x69,  // /trippoi
                        /* 0060 */  0x6E, 0x74, 0x2F, 0x5F, 0x61, 0x63, 0x30, 0x00,  // nt/_ac0.
                        /* 0068 */  0x06, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 0070 */  0x68, 0x0D, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // h.......
                        /* 0078 */  0x25, 0x00, 0x00, 0x00, 0x2F, 0x70, 0x61, 0x72,  // %.../par
                        /* 0080 */  0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6E, 0x74,  // ticipant
                        /* 0088 */  0x73, 0x2F, 0x47, 0x45, 0x4E, 0x35, 0x2E, 0x44,  // s/GEN5.D
                        /* 0090 */  0x30, 0x2F, 0x74, 0x72, 0x69, 0x70, 0x70, 0x6F,  // 0/trippo
                        /* 0098 */  0x69, 0x6E, 0x74, 0x2F, 0x5F, 0x61, 0x63, 0x31,  // int/_ac1
                        /* 00A0 */  0x00, 0x06, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 00A8 */  0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x00,  // ........
                        /* 00B0 */  0x00, 0x25, 0x00, 0x00, 0x00, 0x2F, 0x70, 0x61,  // .%.../pa
                        /* 00B8 */  0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6E,  // rticipan
                        /* 00C0 */  0x74, 0x73, 0x2F, 0x47, 0x45, 0x4E, 0x35, 0x2E,  // ts/GEN5.
                        /* 00C8 */  0x44, 0x30, 0x2F, 0x74, 0x72, 0x69, 0x70, 0x70,  // D0/tripp
                        /* 00D0 */  0x6F, 0x69, 0x6E, 0x74, 0x2F, 0x5F, 0x61, 0x63,  // oint/_ac
                        /* 00D8 */  0x32, 0x00, 0x06, 0x00, 0x00, 0x00, 0x04, 0x00,  // 2.......
                        /* 00E0 */  0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00,  // ........
                        /* 00E8 */  0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0x2F, 0x70,  // ..%.../p
                        /* 00F0 */  0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,  // articipa
                        /* 00F8 */  0x6E, 0x74, 0x73, 0x2F, 0x47, 0x45, 0x4E, 0x35,  // nts/GEN5
                        /* 0100 */  0x2E, 0x44, 0x30, 0x2F, 0x74, 0x72, 0x69, 0x70,  // .D0/trip
                        /* 0108 */  0x70, 0x6F, 0x69, 0x6E, 0x74, 0x2F, 0x5F, 0x61,  // point/_a
                        /* 0110 */  0x63, 0x33, 0x00, 0x06, 0x00, 0x00, 0x00, 0x04,  // c3......
                        /* 0118 */  0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x01,  // ........
                        /* 0120 */  0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0x2F,  // ...%.../
                        /* 0128 */  0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,  // particip
                        /* 0130 */  0x61, 0x6E, 0x74, 0x73, 0x2F, 0x47, 0x45, 0x4E,  // ants/GEN
                        /* 0138 */  0x35, 0x2E, 0x44, 0x30, 0x2F, 0x74, 0x72, 0x69,  // 5.D0/tri
                        /* 0140 */  0x70, 0x70, 0x6F, 0x69, 0x6E, 0x74, 0x2F, 0x5F,  // ppoint/_
                        /* 0148 */  0x61, 0x63, 0x34, 0x00, 0x06, 0x00, 0x00, 0x00,  // ac4.....
                        /* 0150 */  0x04, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                        /* 0158 */  0x01, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00,  // ....%...
                        /* 0160 */  0x2F, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,  // /partici
                        /* 0168 */  0x70, 0x61, 0x6E, 0x74, 0x73, 0x2F, 0x47, 0x45,  // pants/GE
                        /* 0170 */  0x4E, 0x35, 0x2E, 0x44, 0x30, 0x2F, 0x74, 0x72,  // N5.D0/tr
                        /* 0178 */  0x69, 0x70, 0x70, 0x6F, 0x69, 0x6E, 0x74, 0x2F,  // ippoint/
                        /* 0180 */  0x5F, 0x61, 0x63, 0x35, 0x00, 0x06, 0x00, 0x00,  // _ac5....
                        /* 0188 */  0x00, 0x04, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF,  // ........
                        /* 0190 */  0xFF, 0x01, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00,  // .....%..
                        /* 0198 */  0x00, 0x2F, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,  // ./partic
                        /* 01A0 */  0x69, 0x70, 0x61, 0x6E, 0x74, 0x73, 0x2F, 0x47,  // ipants/G
                        /* 01A8 */  0x45, 0x4E, 0x35, 0x2E, 0x44, 0x30, 0x2F, 0x74,  // EN5.D0/t
                        /* 01B0 */  0x72, 0x69, 0x70, 0x70, 0x6F, 0x69, 0x6E, 0x74,  // rippoint
                        /* 01B8 */  0x2F, 0x5F, 0x61, 0x63, 0x36, 0x00, 0x06, 0x00,  // /_ac6...
                        /* 01C0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xFF, 0xFF,  // ........
                        /* 01C8 */  0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x25, 0x00,  // ......%.
                        /* 01D0 */  0x00, 0x00, 0x2F, 0x70, 0x61, 0x72, 0x74, 0x69,  // ../parti
                        /* 01D8 */  0x63, 0x69, 0x70, 0x61, 0x6E, 0x74, 0x73, 0x2F,  // cipants/
                        /* 01E0 */  0x47, 0x45, 0x4E, 0x35, 0x2E, 0x44, 0x30, 0x2F,  // GEN5.D0/
                        /* 01E8 */  0x74, 0x72, 0x69, 0x70, 0x70, 0x6F, 0x69, 0x6E,  // trippoin
                        /* 01F0 */  0x74, 0x2F, 0x5F, 0x61, 0x63, 0x37, 0x00, 0x06,  // t/_ac7..
                        /* 01F8 */  0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xFF,  // ........
                        /* 0200 */  0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x25,  // .......%
                        /* 0208 */  0x00, 0x00, 0x00, 0x2F, 0x70, 0x61, 0x72, 0x74,  // .../part
                        /* 0210 */  0x69, 0x63, 0x69, 0x70, 0x61, 0x6E, 0x74, 0x73,  // icipants
                        /* 0218 */  0x2F, 0x47, 0x45, 0x4E, 0x35, 0x2E, 0x44, 0x30,  // /GEN5.D0
                        /* 0220 */  0x2F, 0x74, 0x72, 0x69, 0x70, 0x70, 0x6F, 0x69,  // /trippoi
                        /* 0228 */  0x6E, 0x74, 0x2F, 0x5F, 0x61, 0x63, 0x38, 0x00,  // nt/_ac8.
                        /* 0230 */  0x06, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 0238 */  0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00,  // ........
                        /* 0240 */  0x25, 0x00, 0x00, 0x00, 0x2F, 0x70, 0x61, 0x72,  // %.../par
                        /* 0248 */  0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6E, 0x74,  // ticipant
                        /* 0250 */  0x73, 0x2F, 0x47, 0x45, 0x4E, 0x35, 0x2E, 0x44,  // s/GEN5.D
                        /* 0258 */  0x30, 0x2F, 0x74, 0x72, 0x69, 0x70, 0x70, 0x6F,  // 0/trippo
                        /* 0260 */  0x69, 0x6E, 0x74, 0x2F, 0x5F, 0x61, 0x63, 0x39,  // int/_ac9
                        /* 0268 */  0x00, 0x06, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 0270 */  0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x00,  // ........
                        /* 0278 */  0x00, 0x25, 0x00, 0x00, 0x00, 0x2F, 0x70, 0x61,  // .%.../pa
                        /* 0280 */  0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6E,  // rticipan
                        /* 0288 */  0x74, 0x73, 0x2F, 0x47, 0x45, 0x4E, 0x35, 0x2E,  // ts/GEN5.
                        /* 0290 */  0x44, 0x30, 0x2F, 0x74, 0x72, 0x69, 0x70, 0x70,  // D0/tripp
                        /* 0298 */  0x6F, 0x69, 0x6E, 0x74, 0x2F, 0x5F, 0x63, 0x72,  // oint/_cr
                        /* 02A0 */  0x33, 0x00, 0x06, 0x00, 0x00, 0x00, 0x04, 0x00,  // 3.......
                        /* 02A8 */  0x00, 0x00, 0xF1, 0x0C, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 02B0 */  0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0x2F, 0x70,  // ..%.../p
                        /* 02B8 */  0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,  // articipa
                        /* 02C0 */  0x6E, 0x74, 0x73, 0x2F, 0x47, 0x45, 0x4E, 0x35,  // nts/GEN5
                        /* 02C8 */  0x2E, 0x44, 0x30, 0x2F, 0x74, 0x72, 0x69, 0x70,  // .D0/trip
                        /* 02D0 */  0x70, 0x6F, 0x69, 0x6E, 0x74, 0x2F, 0x5F, 0x63,  // point/_c
                        /* 02D8 */  0x72, 0x74, 0x00, 0x06, 0x00, 0x00, 0x00, 0x04,  // rt......
                        /* 02E0 */  0x00, 0x00, 0x00, 0x18, 0x0D, 0x00, 0x00, 0x01,  // ........
                        /* 02E8 */  0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0x2F,  // ...%.../
                        /* 02F0 */  0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,  // particip
                        /* 02F8 */  0x61, 0x6E, 0x74, 0x73, 0x2F, 0x47, 0x45, 0x4E,  // ants/GEN
                        /* 0300 */  0x35, 0x2E, 0x44, 0x30, 0x2F, 0x74, 0x72, 0x69,  // 5.D0/tri
                        /* 0308 */  0x70, 0x70, 0x6F, 0x69, 0x6E, 0x74, 0x2F, 0x5F,  // ppoint/_
                        /* 0310 */  0x68, 0x6F, 0x74, 0x00, 0x06, 0x00, 0x00, 0x00,  // hot.....
                        /* 0318 */  0x04, 0x00, 0x00, 0x00, 0x04, 0x0D, 0x00, 0x00,  // ........
                        /* 0320 */  0x01, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00,  // ....%...
                        /* 0328 */  0x2F, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,  // /partici
                        /* 0330 */  0x70, 0x61, 0x6E, 0x74, 0x73, 0x2F, 0x47, 0x45,  // pants/GE
                        /* 0338 */  0x4E, 0x35, 0x2E, 0x44, 0x30, 0x2F, 0x74, 0x72,  // N5.D0/tr
                        /* 0340 */  0x69, 0x70, 0x70, 0x6F, 0x69, 0x6E, 0x74, 0x2F,  // ippoint/
                        /* 0348 */  0x5F, 0x70, 0x73, 0x76, 0x00, 0x06, 0x00, 0x00,  // _psv....
                        /* 0350 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x68, 0x0D, 0x00,  // .....h..
                        /* 0358 */  0x00, 0x01, 0x00, 0x00, 0x00, 0x1B, 0x00, 0x00,  // ........
                        /* 0360 */  0x00, 0x2F, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,  // ./partic
                        /* 0368 */  0x69, 0x70, 0x61, 0x6E, 0x74, 0x73, 0x2F, 0x49,  // ipants/I
                        /* 0370 */  0x45, 0x54, 0x4D, 0x2E, 0x44, 0x30, 0x2F, 0x70,  // ETM.D0/p
                        /* 0378 */  0x73, 0x76, 0x74, 0x00, 0x07, 0x00, 0x00, 0x00,  // svt.....
                        /* 0380 */  0xCC, 0x02, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 0388 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0390 */  0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,  // ........
                        /* 0398 */  0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42,  // ....\_SB
                        /* 03A0 */  0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30, 0x2E, 0x42,  // _.PCI0.B
                        /* 03A8 */  0x30, 0x44, 0x34, 0x00, 0x08, 0x00, 0x00, 0x00,  // 0D4.....
                        /* 03B0 */  0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 03B8 */  0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x5F, 0x53,  // \_SB_._S
                        /* 03C0 */  0x41, 0x4E, 0x2E, 0x47, 0x45, 0x4E, 0x34, 0x00,  // AN.GEN4.
                        /* 03C8 */  0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                        /* 03D0 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 03D8 */  0x84, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 03E0 */  0x04, 0x00, 0x00, 0x00, 0x78, 0x0C, 0x00, 0x00,  // ....x...
                        /* 03E8 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 03F0 */  0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 03F8 */  0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 0400 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 0408 */  0xE0, 0x2E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0410 */  0x04, 0x00, 0x00, 0x00, 0x7D, 0x00, 0x00, 0x00,  // ....}...
                        /* 0418 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 0420 */  0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0428 */  0x04, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00,  // ....d...
                        /* 0430 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 0438 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0440 */  0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,  // ........
                        /* 0448 */  0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42,  // ....\_SB
                        /* 0450 */  0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30, 0x2E, 0x42,  // _.PCI0.B
                        /* 0458 */  0x30, 0x44, 0x34, 0x00, 0x08, 0x00, 0x00, 0x00,  // 0D4.....
                        /* 0460 */  0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0468 */  0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x5F, 0x53,  // \_SB_._S
                        /* 0470 */  0x41, 0x4E, 0x2E, 0x47, 0x45, 0x4E, 0x34, 0x00,  // AN.GEN4.
                        /* 0478 */  0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                        /* 0480 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 0488 */  0x84, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0490 */  0x04, 0x00, 0x00, 0x00, 0x93, 0x0C, 0x00, 0x00,  // ........
                        /* 0498 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 04A0 */  0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 04A8 */  0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 04B0 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 04B8 */  0xE0, 0x2E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 04C0 */  0x04, 0x00, 0x00, 0x00, 0x7D, 0x00, 0x00, 0x00,  // ....}...
                        /* 04C8 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 04D0 */  0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 04D8 */  0x04, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00,  // ....d...
                        /* 04E0 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 04E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 04F0 */  0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,  // ........
                        /* 04F8 */  0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42,  // ....\_SB
                        /* 0500 */  0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30, 0x2E, 0x42,  // _.PCI0.B
                        /* 0508 */  0x30, 0x44, 0x34, 0x00, 0x08, 0x00, 0x00, 0x00,  // 0D4.....
                        /* 0510 */  0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0518 */  0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x5F, 0x53,  // \_SB_._S
                        /* 0520 */  0x41, 0x4E, 0x2E, 0x47, 0x45, 0x4E, 0x34, 0x00,  // AN.GEN4.
                        /* 0528 */  0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                        /* 0530 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 0538 */  0x84, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0540 */  0x04, 0x00, 0x00, 0x00, 0x96, 0x0C, 0x00, 0x00,  // ........
                        /* 0548 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 0550 */  0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0558 */  0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 0560 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 0568 */  0x1C, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // .%......
                        /* 0570 */  0x04, 0x00, 0x00, 0x00, 0x7D, 0x00, 0x00, 0x00,  // ....}...
                        /* 0578 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 0580 */  0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0588 */  0x04, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00,  // ....d...
                        /* 0590 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 0598 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 05A0 */  0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,  // ........
                        /* 05A8 */  0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42,  // ....\_SB
                        /* 05B0 */  0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30, 0x2E, 0x42,  // _.PCI0.B
                        /* 05B8 */  0x30, 0x44, 0x34, 0x00, 0x08, 0x00, 0x00, 0x00,  // 0D4.....
                        /* 05C0 */  0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 05C8 */  0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x5F, 0x53,  // \_SB_._S
                        /* 05D0 */  0x41, 0x4E, 0x2E, 0x47, 0x45, 0x4E, 0x34, 0x00,  // AN.GEN4.
                        /* 05D8 */  0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                        /* 05E0 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 05E8 */  0x84, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 05F0 */  0x04, 0x00, 0x00, 0x00, 0x30, 0x0E, 0x00, 0x00,  // ....0...
                        /* 05F8 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 0600 */  0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0608 */  0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 0610 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 0618 */  0x1C, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // .%......
                        /* 0620 */  0x04, 0x00, 0x00, 0x00, 0x7D, 0x00, 0x00, 0x00,  // ....}...
                        /* 0628 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 0630 */  0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0638 */  0x04, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00,  // ....d...
                        /* 0640 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 0648 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0650 */  0x01, 0x00, 0x00, 0x00, 0x1B, 0x00, 0x00, 0x00,  // ........
                        /* 0658 */  0x2F, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,  // /partici
                        /* 0660 */  0x70, 0x61, 0x6E, 0x74, 0x73, 0x2F, 0x54, 0x43,  // pants/TC
                        /* 0668 */  0x50, 0x55, 0x2E, 0x44, 0x30, 0x2F, 0x67, 0x74,  // PU.D0/gt
                        /* 0670 */  0x73, 0x68, 0x00, 0x06, 0x00, 0x00, 0x00, 0x04,  // sh......
                        /* 0678 */  0x00, 0x00, 0x00, 0xC0, 0x0A, 0x00, 0x00, 0x01,  // ........
                        /* 0680 */  0x00, 0x00, 0x00, 0x26, 0x00, 0x00, 0x00, 0x2F,  // ...&.../
                        /* 0688 */  0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,  // particip
                        /* 0690 */  0x61, 0x6E, 0x74, 0x73, 0x2F, 0x54, 0x43, 0x50,  // ants/TCP
                        /* 0698 */  0x55, 0x2E, 0x44, 0x30, 0x2F, 0x6C, 0x61, 0x73,  // U.D0/las
                        /* 06A0 */  0x74, 0x5F, 0x65, 0x77, 0x6D, 0x61, 0x5F, 0x70,  // t_ewma_p
                        /* 06A8 */  0x6F, 0x77, 0x65, 0x72, 0x00, 0x1A, 0x00, 0x00,  // ower....
                        /* 06B0 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x57, 0x2B, 0x00,  // .....W+.
                        /* 06B8 */  0x00, 0x01, 0x00, 0x00, 0x00, 0x26, 0x00, 0x00,  // .....&..
                        /* 06C0 */  0x00, 0x2F, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,  // ./partic
                        /* 06C8 */  0x69, 0x70, 0x61, 0x6E, 0x74, 0x73, 0x2F, 0x54,  // ipants/T
                        /* 06D0 */  0x43, 0x50, 0x55, 0x2E, 0x44, 0x30, 0x2F, 0x6C,  // CPU.D0/l
                        /* 06D8 */  0x61, 0x73, 0x74, 0x5F, 0x70, 0x6F, 0x77, 0x65,  // ast_powe
                        /* 06E0 */  0x72, 0x5F, 0x75, 0x73, 0x65, 0x64, 0x00, 0x1A,  // r_used..
                        /* 06E8 */  0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x9A,  // ........
                        /* 06F0 */  0x2A, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1B,  // *.......
                        /* 06F8 */  0x00, 0x00, 0x00, 0x2F, 0x70, 0x61, 0x72, 0x74,  // .../part
                        /* 0700 */  0x69, 0x63, 0x69, 0x70, 0x61, 0x6E, 0x74, 0x73,  // icipants
                        /* 0708 */  0x2F, 0x54, 0x43, 0x50, 0x55, 0x2E, 0x44, 0x30,  // /TCPU.D0
                        /* 0710 */  0x2F, 0x70, 0x70, 0x63, 0x63, 0x00, 0x07, 0x00,  // /ppcc...
                        /* 0718 */  0x00, 0x00, 0x9C, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0720 */  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0728 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0730 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0738 */  0x00, 0x00, 0xB8, 0x0B, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0740 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x50, 0x46,  // ......PF
                        /* 0748 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0750 */  0x00, 0x00, 0x60, 0x6D, 0x00, 0x00, 0x00, 0x00,  // ..`m....
                        /* 0758 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x7D,  // .......}
                        /* 0760 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0768 */  0x00, 0x00, 0xF4, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0770 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 0778 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0780 */  0x00, 0x00, 0xB8, 0x88, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0788 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xB8, 0x88,  // ........
                        /* 0790 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0798 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 07A0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 07A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 07B0 */  0x00, 0x00, 0xF4, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 07B8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x25, 0x00,  // ......%.
                        /* 07C0 */  0x00, 0x00, 0x2F, 0x70, 0x61, 0x72, 0x74, 0x69,  // ../parti
                        /* 07C8 */  0x63, 0x69, 0x70, 0x61, 0x6E, 0x74, 0x73, 0x2F,  // cipants/
                        /* 07D0 */  0x54, 0x43, 0x50, 0x55, 0x2E, 0x44, 0x30, 0x2F,  // TCPU.D0/
                        /* 07D8 */  0x74, 0x72, 0x69, 0x70, 0x70, 0x6F, 0x69, 0x6E,  // trippoin
                        /* 07E0 */  0x74, 0x2F, 0x5F, 0x61, 0x63, 0x30, 0x00, 0x06,  // t/_ac0..
                        /* 07E8 */  0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x94,  // ........
                        /* 07F0 */  0x0E, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x25,  // .......%
                        /* 07F8 */  0x00, 0x00, 0x00, 0x2F, 0x70, 0x61, 0x72, 0x74,  // .../part
                        /* 0800 */  0x69, 0x63, 0x69, 0x70, 0x61, 0x6E, 0x74, 0x73,  // icipants
                        /* 0808 */  0x2F, 0x54, 0x43, 0x50, 0x55, 0x2E, 0x44, 0x30,  // /TCPU.D0
                        /* 0810 */  0x2F, 0x74, 0x72, 0x69, 0x70, 0x70, 0x6F, 0x69,  // /trippoi
                        /* 0818 */  0x6E, 0x74, 0x2F, 0x5F, 0x61, 0x63, 0x31, 0x00,  // nt/_ac1.
                        /* 0820 */  0x06, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 0828 */  0x62, 0x0E, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // b.......
                        /* 0830 */  0x25, 0x00, 0x00, 0x00, 0x2F, 0x70, 0x61, 0x72,  // %.../par
                        /* 0838 */  0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6E, 0x74,  // ticipant
                        /* 0840 */  0x73, 0x2F, 0x54, 0x43, 0x50, 0x55, 0x2E, 0x44,  // s/TCPU.D
                        /* 0848 */  0x30, 0x2F, 0x74, 0x72, 0x69, 0x70, 0x70, 0x6F,  // 0/trippo
                        /* 0850 */  0x69, 0x6E, 0x74, 0x2F, 0x5F, 0x61, 0x63, 0x32,  // int/_ac2
                        /* 0858 */  0x00, 0x06, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 0860 */  0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x00,  // ........
                        /* 0868 */  0x00, 0x25, 0x00, 0x00, 0x00, 0x2F, 0x70, 0x61,  // .%.../pa
                        /* 0870 */  0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6E,  // rticipan
                        /* 0878 */  0x74, 0x73, 0x2F, 0x54, 0x43, 0x50, 0x55, 0x2E,  // ts/TCPU.
                        /* 0880 */  0x44, 0x30, 0x2F, 0x74, 0x72, 0x69, 0x70, 0x70,  // D0/tripp
                        /* 0888 */  0x6F, 0x69, 0x6E, 0x74, 0x2F, 0x5F, 0x61, 0x63,  // oint/_ac
                        /* 0890 */  0x33, 0x00, 0x06, 0x00, 0x00, 0x00, 0x04, 0x00,  // 3.......
                        /* 0898 */  0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00,  // ........
                        /* 08A0 */  0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0x2F, 0x70,  // ..%.../p
                        /* 08A8 */  0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,  // articipa
                        /* 08B0 */  0x6E, 0x74, 0x73, 0x2F, 0x54, 0x43, 0x50, 0x55,  // nts/TCPU
                        /* 08B8 */  0x2E, 0x44, 0x30, 0x2F, 0x74, 0x72, 0x69, 0x70,  // .D0/trip
                        /* 08C0 */  0x70, 0x6F, 0x69, 0x6E, 0x74, 0x2F, 0x5F, 0x61,  // point/_a
                        /* 08C8 */  0x63, 0x34, 0x00, 0x06, 0x00, 0x00, 0x00, 0x04,  // c4......
                        /* 08D0 */  0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x01,  // ........
                        /* 08D8 */  0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0x2F,  // ...%.../
                        /* 08E0 */  0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,  // particip
                        /* 08E8 */  0x61, 0x6E, 0x74, 0x73, 0x2F, 0x54, 0x43, 0x50,  // ants/TCP
                        /* 08F0 */  0x55, 0x2E, 0x44, 0x30, 0x2F, 0x74, 0x72, 0x69,  // U.D0/tri
                        /* 08F8 */  0x70, 0x70, 0x6F, 0x69, 0x6E, 0x74, 0x2F, 0x5F,  // ppoint/_
                        /* 0900 */  0x61, 0x63, 0x35, 0x00, 0x06, 0x00, 0x00, 0x00,  // ac5.....
                        /* 0908 */  0x04, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                        /* 0910 */  0x01, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00,  // ....%...
                        /* 0918 */  0x2F, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,  // /partici
                        /* 0920 */  0x70, 0x61, 0x6E, 0x74, 0x73, 0x2F, 0x54, 0x43,  // pants/TC
                        /* 0928 */  0x50, 0x55, 0x2E, 0x44, 0x30, 0x2F, 0x74, 0x72,  // PU.D0/tr
                        /* 0930 */  0x69, 0x70, 0x70, 0x6F, 0x69, 0x6E, 0x74, 0x2F,  // ippoint/
                        /* 0938 */  0x5F, 0x61, 0x63, 0x36, 0x00, 0x06, 0x00, 0x00,  // _ac6....
                        /* 0940 */  0x00, 0x04, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF,  // ........
                        /* 0948 */  0xFF, 0x01, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00,  // .....%..
                        /* 0950 */  0x00, 0x2F, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,  // ./partic
                        /* 0958 */  0x69, 0x70, 0x61, 0x6E, 0x74, 0x73, 0x2F, 0x54,  // ipants/T
                        /* 0960 */  0x43, 0x50, 0x55, 0x2E, 0x44, 0x30, 0x2F, 0x74,  // CPU.D0/t
                        /* 0968 */  0x72, 0x69, 0x70, 0x70, 0x6F, 0x69, 0x6E, 0x74,  // rippoint
                        /* 0970 */  0x2F, 0x5F, 0x61, 0x63, 0x37, 0x00, 0x06, 0x00,  // /_ac7...
                        /* 0978 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xFF, 0xFF,  // ........
                        /* 0980 */  0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x25, 0x00,  // ......%.
                        /* 0988 */  0x00, 0x00, 0x2F, 0x70, 0x61, 0x72, 0x74, 0x69,  // ../parti
                        /* 0990 */  0x63, 0x69, 0x70, 0x61, 0x6E, 0x74, 0x73, 0x2F,  // cipants/
                        /* 0998 */  0x54, 0x43, 0x50, 0x55, 0x2E, 0x44, 0x30, 0x2F,  // TCPU.D0/
                        /* 09A0 */  0x74, 0x72, 0x69, 0x70, 0x70, 0x6F, 0x69, 0x6E,  // trippoin
                        /* 09A8 */  0x74, 0x2F, 0x5F, 0x61, 0x63, 0x38, 0x00, 0x06,  // t/_ac8..
                        /* 09B0 */  0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xFF,  // ........
                        /* 09B8 */  0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x25,  // .......%
                        /* 09C0 */  0x00, 0x00, 0x00, 0x2F, 0x70, 0x61, 0x72, 0x74,  // .../part
                        /* 09C8 */  0x69, 0x63, 0x69, 0x70, 0x61, 0x6E, 0x74, 0x73,  // icipants
                        /* 09D0 */  0x2F, 0x54, 0x43, 0x50, 0x55, 0x2E, 0x44, 0x30,  // /TCPU.D0
                        /* 09D8 */  0x2F, 0x74, 0x72, 0x69, 0x70, 0x70, 0x6F, 0x69,  // /trippoi
                        /* 09E0 */  0x6E, 0x74, 0x2F, 0x5F, 0x61, 0x63, 0x39, 0x00,  // nt/_ac9.
                        /* 09E8 */  0x06, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 09F0 */  0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00,  // ........
                        /* 09F8 */  0x25, 0x00, 0x00, 0x00, 0x2F, 0x70, 0x61, 0x72,  // %.../par
                        /* 0A00 */  0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6E, 0x74,  // ticipant
                        /* 0A08 */  0x73, 0x2F, 0x54, 0x43, 0x50, 0x55, 0x2E, 0x44,  // s/TCPU.D
                        /* 0A10 */  0x30, 0x2F, 0x74, 0x72, 0x69, 0x70, 0x70, 0x6F,  // 0/trippo
                        /* 0A18 */  0x69, 0x6E, 0x74, 0x2F, 0x5F, 0x63, 0x72, 0x33,  // int/_cr3
                        /* 0A20 */  0x00, 0x06, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 0A28 */  0x00, 0x8E, 0x0F, 0x00, 0x00, 0x01, 0x00, 0x00,  // ........
                        /* 0A30 */  0x00, 0x25, 0x00, 0x00, 0x00, 0x2F, 0x70, 0x61,  // .%.../pa
                        /* 0A38 */  0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6E,  // rticipan
                        /* 0A40 */  0x74, 0x73, 0x2F, 0x54, 0x43, 0x50, 0x55, 0x2E,  // ts/TCPU.
                        /* 0A48 */  0x44, 0x30, 0x2F, 0x74, 0x72, 0x69, 0x70, 0x70,  // D0/tripp
                        /* 0A50 */  0x6F, 0x69, 0x6E, 0x74, 0x2F, 0x5F, 0x63, 0x72,  // oint/_cr
                        /* 0A58 */  0x74, 0x00, 0x06, 0x00, 0x00, 0x00, 0x04, 0x00,  // t.......
                        /* 0A60 */  0x00, 0x00, 0x8E, 0x0F, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 0A68 */  0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0x2F, 0x70,  // ..%.../p
                        /* 0A70 */  0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,  // articipa
                        /* 0A78 */  0x6E, 0x74, 0x73, 0x2F, 0x54, 0x43, 0x50, 0x55,  // nts/TCPU
                        /* 0A80 */  0x2E, 0x44, 0x30, 0x2F, 0x74, 0x72, 0x69, 0x70,  // .D0/trip
                        /* 0A88 */  0x70, 0x6F, 0x69, 0x6E, 0x74, 0x2F, 0x5F, 0x68,  // point/_h
                        /* 0A90 */  0x6F, 0x74, 0x00, 0x06, 0x00, 0x00, 0x00, 0x04,  // ot......
                        /* 0A98 */  0x00, 0x00, 0x00, 0x8E, 0x0F, 0x00, 0x00, 0x01,  // ........
                        /* 0AA0 */  0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0x2F,  // ...%.../
                        /* 0AA8 */  0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,  // particip
                        /* 0AB0 */  0x61, 0x6E, 0x74, 0x73, 0x2F, 0x54, 0x43, 0x50,  // ants/TCP
                        /* 0AB8 */  0x55, 0x2E, 0x44, 0x30, 0x2F, 0x74, 0x72, 0x69,  // U.D0/tri
                        /* 0AC0 */  0x70, 0x70, 0x6F, 0x69, 0x6E, 0x74, 0x2F, 0x5F,  // ppoint/_
                        /* 0AC8 */  0x70, 0x73, 0x76, 0x00, 0x06, 0x00, 0x00, 0x00,  // psv.....
                        /* 0AD0 */  0x04, 0x00, 0x00, 0x00, 0x94, 0x0E, 0x00, 0x00,  // ........
                        /* 0AD8 */  0x01, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00,  // ........
                        /* 0AE0 */  0x2F, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2F,  // /shared/
                        /* 0AE8 */  0x65, 0x78, 0x70, 0x6F, 0x72, 0x74, 0x2F, 0x61,  // export/a
                        /* 0AF0 */  0x70, 0x61, 0x74, 0x00, 0x07, 0x00, 0x00, 0x00,  // pat.....
                        /* 0AF8 */  0x1E, 0x03, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 0B00 */  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0B08 */  0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 0B10 */  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,  // ........
                        /* 0B18 */  0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0B20 */  0x52, 0x65, 0x63, 0x00, 0x08, 0x00, 0x00, 0x00,  // Rec.....
                        /* 0B28 */  0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0B30 */  0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x49, 0x45,  // \_SB_.IE
                        /* 0B38 */  0x54, 0x4D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0E,  // TM......
                        /* 0B40 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08,  // ........
                        /* 0B48 */  0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0B50 */  0x00, 0x00, 0x00, 0x50, 0x53, 0x56, 0x54, 0x00,  // ...PSVT.
                        /* 0B58 */  0x08, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 0B60 */  0x00, 0x00, 0x00, 0x00, 0x34, 0x36, 0x63, 0x00,  // ....46c.
                        /* 0B68 */  0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 0B70 */  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,  // ........
                        /* 0B78 */  0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0B80 */  0x52, 0x65, 0x63, 0x00, 0x08, 0x00, 0x00, 0x00,  // Rec.....
                        /* 0B88 */  0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0B90 */  0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x49, 0x45,  // \_SB_.IE
                        /* 0B98 */  0x54, 0x4D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0E,  // TM......
                        /* 0BA0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08,  // ........
                        /* 0BA8 */  0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0BB0 */  0x00, 0x00, 0x00, 0x50, 0x49, 0x44, 0x41, 0x00,  // ...PIDA.
                        /* 0BB8 */  0x08, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 0BC0 */  0x00, 0x00, 0x00, 0x00, 0x34, 0x36, 0x63, 0x00,  // ....46c.
                        /* 0BC8 */  0x04, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,  // ........
                        /* 0BD0 */  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,  // ........
                        /* 0BD8 */  0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0BE0 */  0x42, 0x65, 0x74, 0x74, 0x65, 0x72, 0x00, 0x08,  // Better..
                        /* 0BE8 */  0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0BF0 */  0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F,  // ...\_SB_
                        /* 0BF8 */  0x2E, 0x49, 0x45, 0x54, 0x4D, 0x00, 0x04, 0x00,  // .IETM...
                        /* 0C00 */  0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0C08 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x05, 0x00,  // ........
                        /* 0C10 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x53,  // ......PS
                        /* 0C18 */  0x56, 0x54, 0x00, 0x08, 0x00, 0x00, 0x00, 0x04,  // VT......
                        /* 0C20 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34,  // .......4
                        /* 0C28 */  0x37, 0x63, 0x00, 0x04, 0x00, 0x00, 0x00, 0x05,  // 7c......
                        /* 0C30 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08,  // ........
                        /* 0C38 */  0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0C40 */  0x00, 0x00, 0x00, 0x42, 0x65, 0x74, 0x74, 0x65,  // ...Bette
                        /* 0C48 */  0x72, 0x00, 0x08, 0x00, 0x00, 0x00, 0x0B, 0x00,  // r.......
                        /* 0C50 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F,  // ......\_
                        /* 0C58 */  0x53, 0x42, 0x5F, 0x2E, 0x49, 0x45, 0x54, 0x4D,  // SB_.IETM
                        /* 0C60 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00,  // ........
                        /* 0C68 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,  // ........
                        /* 0C70 */  0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0C78 */  0x00, 0x50, 0x49, 0x44, 0x41, 0x00, 0x08, 0x00,  // .PIDA...
                        /* 0C80 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0C88 */  0x00, 0x00, 0x34, 0x37, 0x63, 0x00, 0x04, 0x00,  // ..47c...
                        /* 0C90 */  0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0C98 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x05, 0x00,  // ........
                        /* 0CA0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x65,  // ......Be
                        /* 0CA8 */  0x73, 0x74, 0x00, 0x08, 0x00, 0x00, 0x00, 0x0B,  // st......
                        /* 0CB0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C,  // .......\
                        /* 0CB8 */  0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x49, 0x45, 0x54,  // _SB_.IET
                        /* 0CC0 */  0x4D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0E, 0x00,  // M.......
                        /* 0CC8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 0CD0 */  0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0CD8 */  0x00, 0x00, 0x50, 0x53, 0x56, 0x54, 0x00, 0x08,  // ..PSVT..
                        /* 0CE0 */  0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0CE8 */  0x00, 0x00, 0x00, 0x34, 0x38, 0x63, 0x00, 0x04,  // ...48c..
                        /* 0CF0 */  0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0CF8 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x05,  // ........
                        /* 0D00 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42,  // .......B
                        /* 0D08 */  0x65, 0x73, 0x74, 0x00, 0x08, 0x00, 0x00, 0x00,  // est.....
                        /* 0D10 */  0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0D18 */  0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x49, 0x45,  // \_SB_.IE
                        /* 0D20 */  0x54, 0x4D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0E,  // TM......
                        /* 0D28 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08,  // ........
                        /* 0D30 */  0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0D38 */  0x00, 0x00, 0x00, 0x50, 0x49, 0x44, 0x41, 0x00,  // ...PIDA.
                        /* 0D40 */  0x08, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 0D48 */  0x00, 0x00, 0x00, 0x00, 0x34, 0x38, 0x63, 0x00,  // ....48c.
                        /* 0D50 */  0x04, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,  // ........
                        /* 0D58 */  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,  // ........
                        /* 0D60 */  0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0D68 */  0x44, 0x43, 0x20, 0x53, 0x61, 0x76, 0x65, 0x72,  // DC Saver
                        /* 0D70 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00,  // ........
                        /* 0D78 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53,  // .....\_S
                        /* 0D80 */  0x42, 0x5F, 0x2E, 0x49, 0x45, 0x54, 0x4D, 0x00,  // B_.IETM.
                        /* 0D88 */  0x04, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00,  // ........
                        /* 0D90 */  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,  // ........
                        /* 0D98 */  0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0DA0 */  0x50, 0x53, 0x56, 0x54, 0x00, 0x08, 0x00, 0x00,  // PSVT....
                        /* 0DA8 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0DB0 */  0x00, 0x34, 0x35, 0x63, 0x00, 0x04, 0x00, 0x00,  // .45c....
                        /* 0DB8 */  0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0DC0 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00,  // ........
                        /* 0DC8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x43, 0x20,  // .....DC 
                        /* 0DD0 */  0x53, 0x61, 0x76, 0x65, 0x72, 0x00, 0x08, 0x00,  // Saver...
                        /* 0DD8 */  0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0DE0 */  0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E,  // ..\_SB_.
                        /* 0DE8 */  0x49, 0x45, 0x54, 0x4D, 0x00, 0x04, 0x00, 0x00,  // IETM....
                        /* 0DF0 */  0x00, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0DF8 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00,  // ........
                        /* 0E00 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x49, 0x44,  // .....PID
                        /* 0E08 */  0x41, 0x00, 0x08, 0x00, 0x00, 0x00, 0x04, 0x00,  // A.......
                        /* 0E10 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x35,  // ......45
                        /* 0E18 */  0x63, 0x00, 0x01, 0x00, 0x00, 0x00, 0x14, 0x00,  // c.......
                        /* 0E20 */  0x00, 0x00, 0x2F, 0x73, 0x68, 0x61, 0x72, 0x65,  // ../share
                        /* 0E28 */  0x64, 0x2F, 0x65, 0x78, 0x70, 0x6F, 0x72, 0x74,  // d/export
                        /* 0E30 */  0x2F, 0x61, 0x70, 0x63, 0x74, 0x00, 0x07, 0x00,  // /apct...
                        /* 0E38 */  0x00, 0x00, 0x2C, 0x0D, 0x00, 0x00, 0x04, 0x00,  // ..,.....
                        /* 0E40 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0E48 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x06, 0x00,  // ........
                        /* 0E50 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0E58 */  0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0E60 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 0E68 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0E70 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0E78 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 0E80 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0E88 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0E90 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 0E98 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0EA0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0EA8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 0EB0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0EB8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0EC0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 0EC8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0ED0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0ED8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 0EE0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0EE8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0EF0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 0EF8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0F00 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0F08 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 0F10 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0F18 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0F20 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 0F28 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0F30 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0F38 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 0F40 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0F48 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0F50 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 0F58 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0F60 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0F68 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 0F70 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0F78 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0F80 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 0F88 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0F90 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0F98 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 0FA0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0FA8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0FB0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 0FB8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0FC0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0FC8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 0FD0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0FD8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0FE0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 0FE8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0FF0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0FF8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1008 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1010 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1020 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1028 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x07, 0x00,  // ........
                        /* 1030 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1038 */  0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1040 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1050 */  0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1058 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1068 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1070 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1078 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1080 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1088 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1090 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1098 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 10A0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 10A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 10B0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 10B8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 10C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 10C8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 10D0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 10D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 10E0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 10E8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 10F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 10F8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1100 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1108 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1110 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1118 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1120 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1128 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1130 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1138 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1140 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1148 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1150 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1158 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1160 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1168 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1170 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1178 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1180 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1188 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1190 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1198 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 11A0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 11A8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 11B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 11B8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 11C0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 11C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 11D0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 11D8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 11E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 11E8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 11F0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 11F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1200 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1208 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1210 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1218 */  0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1220 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1228 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1230 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1238 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1240 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1248 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1250 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1258 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1260 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1268 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1270 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1278 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1280 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1288 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1290 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1298 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 12A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 12A8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 12B0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 12B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 12C0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 12C8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 12D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 12D8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 12E0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 12E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 12F0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 12F8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1300 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1308 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1310 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1318 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1320 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1328 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1330 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1338 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1340 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1348 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1350 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1358 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1360 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1368 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1370 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1378 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1380 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1388 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1390 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1398 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 13A0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 13A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 13B0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 13B8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 13C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 13C8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 13D0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 13D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 13E0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 13E8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 13F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 13F8 */  0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1400 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1408 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1410 */  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1418 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1420 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1428 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1430 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1438 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1440 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1448 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1450 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1458 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1460 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1468 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1470 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1478 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1480 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1488 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1490 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1498 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 14A0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 14A8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 14B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 14B8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 14C0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 14C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 14D0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 14D8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 14E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 14E8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 14F0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 14F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1500 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1508 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1510 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1518 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1520 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1528 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1530 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1538 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1540 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1548 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1550 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1558 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1560 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1568 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1570 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1578 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1580 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1588 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1590 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1598 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 15A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 15A8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 15B0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 15B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 15C0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 15C8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00,  // ........
                        /* 15D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 15D8 */  0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 15E0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 15E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 15F0 */  0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 15F8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1600 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1608 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1610 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1618 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1620 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1628 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1630 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1638 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1640 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1648 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1650 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1658 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1660 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1668 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1670 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1678 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1680 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1688 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1690 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1698 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 16A0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 16A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 16B0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 16B8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 16C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 16C8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 16D0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 16D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 16E0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 16E8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 16F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 16F8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1700 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1708 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1710 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1718 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1720 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1728 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1730 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1738 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1740 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1748 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1750 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1758 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1760 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1768 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1770 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1778 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1780 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1788 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1790 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1798 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 17A0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 17A8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00,  // ........
                        /* 17B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 17B8 */  0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 17C0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 17C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 17D0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 17D8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 17E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 17E8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 17F0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 17F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1800 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1808 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1810 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1818 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1820 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1828 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1830 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1838 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1840 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1848 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1850 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1858 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1860 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1868 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1870 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1878 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1880 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1888 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1890 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1898 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 18A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 18A8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 18B0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 18B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 18C0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 18C8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 18D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 18D8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 18E0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 18E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 18F0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 18F8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1900 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1908 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1910 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1918 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1920 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1928 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1930 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1938 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1940 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1948 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1950 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1958 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1960 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1968 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1970 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1978 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1980 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1988 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x06, 0x00,  // ........
                        /* 1990 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1998 */  0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 19A0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 19A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 19B0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 19B8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 19C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 19C8 */  0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 19D0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 19D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 19E0 */  0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 19E8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 19F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 19F8 */  0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1A00 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1A08 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1A10 */  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1A18 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1A20 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1A28 */  0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1A30 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1A38 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1A40 */  0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1A48 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1A50 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1A58 */  0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1A60 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1A68 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1A70 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1A78 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1A80 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1A88 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1A90 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1A98 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1AA0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1AA8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1AB0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1AB8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1AC0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1AC8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1AD0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1AD8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1AE0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1AE8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1AF0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1AF8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1B00 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1B08 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1B10 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1B18 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1B20 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1B28 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1B30 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1B38 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1B40 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1B48 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1B50 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1B58 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1B60 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1B68 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x14, 0x00,  // ........
                        /* 1B70 */  0x00, 0x00, 0x2F, 0x73, 0x68, 0x61, 0x72, 0x65,  // ../share
                        /* 1B78 */  0x64, 0x2F, 0x65, 0x78, 0x70, 0x6F, 0x72, 0x74,  // d/export
                        /* 1B80 */  0x2F, 0x70, 0x62, 0x61, 0x74, 0x00, 0x07, 0x00,  // /pbat...
                        /* 1B88 */  0x00, 0x00, 0x2C, 0x0D, 0x00, 0x00, 0x04, 0x00,  // ..,.....
                        /* 1B90 */  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1B98 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1BA0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 1BA8 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1BB0 */  0x00, 0x00, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6C,  // ..defaul
                        /* 1BB8 */  0x74, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00,  // t.......
                        /* 1BC0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F,  // ......\_
                        /* 1BC8 */  0x53, 0x42, 0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30,  // SB_.PCI0
                        /* 1BD0 */  0x2E, 0x42, 0x30, 0x44, 0x34, 0x00, 0x04, 0x00,  // .B0D4...
                        /* 1BD8 */  0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1BE0 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x0D, 0x00,  // ........
                        /* 1BE8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x53,  // ......PS
                        /* 1BF0 */  0x79, 0x73, 0x50, 0x4C, 0x31, 0x4C, 0x69, 0x6D,  // ysPL1Lim
                        /* 1BF8 */  0x69, 0x74, 0x00, 0x08, 0x00, 0x00, 0x00, 0x06,  // it......
                        /* 1C00 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34,  // .......4
                        /* 1C08 */  0x35, 0x30, 0x30, 0x30, 0x00, 0x04, 0x00, 0x00,  // 5000....
                        /* 1C10 */  0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1C18 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,  // ........
                        /* 1C20 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x65, 0x66,  // .....def
                        /* 1C28 */  0x61, 0x75, 0x6C, 0x74, 0x00, 0x08, 0x00, 0x00,  // ault....
                        /* 1C30 */  0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1C38 */  0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x50,  // .\_SB_.P
                        /* 1C40 */  0x43, 0x49, 0x30, 0x2E, 0x42, 0x30, 0x44, 0x34,  // CI0.B0D4
                        /* 1C48 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00,  // ........
                        /* 1C50 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,  // ........
                        /* 1C58 */  0x00, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1C60 */  0x00, 0x50, 0x53, 0x79, 0x73, 0x50, 0x4C, 0x32,  // .PSysPL2
                        /* 1C68 */  0x4C, 0x69, 0x6D, 0x69, 0x74, 0x00, 0x08, 0x00,  // Limit...
                        /* 1C70 */  0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1C78 */  0x00, 0x00, 0x34, 0x35, 0x30, 0x30, 0x30, 0x00,  // ..45000.
                        /* 1C80 */  0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                        /* 1C88 */  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,  // ........
                        /* 1C90 */  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1C98 */  0x64, 0x65, 0x66, 0x61, 0x75, 0x6C, 0x74, 0x00,  // default.
                        /* 1CA0 */  0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,  // ........
                        /* 1CA8 */  0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42,  // ....\_SB
                        /* 1CB0 */  0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30, 0x2E, 0x42,  // _.PCI0.B
                        /* 1CB8 */  0x30, 0x44, 0x34, 0x00, 0x04, 0x00, 0x00, 0x00,  // 0D4.....
                        /* 1CC0 */  0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1CC8 */  0x08, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00,  // ........
                        /* 1CD0 */  0x00, 0x00, 0x00, 0x00, 0x50, 0x4C, 0x34, 0x50,  // ....PL4P
                        /* 1CD8 */  0x6F, 0x77, 0x65, 0x72, 0x4C, 0x69, 0x6D, 0x69,  // owerLimi
                        /* 1CE0 */  0x74, 0x00, 0x08, 0x00, 0x00, 0x00, 0x06, 0x00,  // t.......
                        /* 1CE8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x30,  // ......60
                        /* 1CF0 */  0x30, 0x30, 0x30, 0x00, 0x04, 0x00, 0x00, 0x00,  // 000.....
                        /* 1CF8 */  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1D00 */  0x08, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00,  // ........
                        /* 1D08 */  0x00, 0x00, 0x00, 0x00, 0x6C, 0x6F, 0x77, 0x5F,  // ....low_
                        /* 1D10 */  0x62, 0x61, 0x74, 0x74, 0x5F, 0x6E, 0x6F, 0x5F,  // batt_no_
                        /* 1D18 */  0x62, 0x72, 0x69, 0x63, 0x6B, 0x00, 0x08, 0x00,  // brick...
                        /* 1D20 */  0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1D28 */  0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E,  // ..\_SB_.
                        /* 1D30 */  0x50, 0x43, 0x49, 0x30, 0x2E, 0x42, 0x30, 0x44,  // PCI0.B0D
                        /* 1D38 */  0x34, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00,  // 4.......
                        /* 1D40 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 1D48 */  0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1D50 */  0x00, 0x00, 0x50, 0x53, 0x79, 0x73, 0x50, 0x4C,  // ..PSysPL
                        /* 1D58 */  0x31, 0x4C, 0x69, 0x6D, 0x69, 0x74, 0x00, 0x08,  // 1Limit..
                        /* 1D60 */  0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1D68 */  0x00, 0x00, 0x00, 0x33, 0x31, 0x35, 0x30, 0x30,  // ...31500
                        /* 1D70 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,  // ........
                        /* 1D78 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,  // ........
                        /* 1D80 */  0x00, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1D88 */  0x00, 0x6C, 0x6F, 0x77, 0x5F, 0x62, 0x61, 0x74,  // .low_bat
                        /* 1D90 */  0x74, 0x5F, 0x6E, 0x6F, 0x5F, 0x62, 0x72, 0x69,  // t_no_bri
                        /* 1D98 */  0x63, 0x6B, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10,  // ck......
                        /* 1DA0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C,  // .......\
                        /* 1DA8 */  0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x50, 0x43, 0x49,  // _SB_.PCI
                        /* 1DB0 */  0x30, 0x2E, 0x42, 0x30, 0x44, 0x34, 0x00, 0x04,  // 0.B0D4..
                        /* 1DB8 */  0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1DC0 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x0D,  // ........
                        /* 1DC8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50,  // .......P
                        /* 1DD0 */  0x53, 0x79, 0x73, 0x50, 0x4C, 0x32, 0x4C, 0x69,  // SysPL2Li
                        /* 1DD8 */  0x6D, 0x69, 0x74, 0x00, 0x08, 0x00, 0x00, 0x00,  // mit.....
                        /* 1DE0 */  0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1DE8 */  0x34, 0x35, 0x30, 0x30, 0x30, 0x00, 0x04, 0x00,  // 45000...
                        /* 1DF0 */  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1DF8 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x12, 0x00,  // ........
                        /* 1E00 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6C, 0x6F,  // ......lo
                        /* 1E08 */  0x77, 0x5F, 0x62, 0x61, 0x74, 0x74, 0x5F, 0x6E,  // w_batt_n
                        /* 1E10 */  0x6F, 0x5F, 0x62, 0x72, 0x69, 0x63, 0x6B, 0x00,  // o_brick.
                        /* 1E18 */  0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,  // ........
                        /* 1E20 */  0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42,  // ....\_SB
                        /* 1E28 */  0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30, 0x2E, 0x42,  // _.PCI0.B
                        /* 1E30 */  0x30, 0x44, 0x34, 0x00, 0x04, 0x00, 0x00, 0x00,  // 0D4.....
                        /* 1E38 */  0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1E40 */  0x08, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00,  // ........
                        /* 1E48 */  0x00, 0x00, 0x00, 0x00, 0x50, 0x4C, 0x34, 0x50,  // ....PL4P
                        /* 1E50 */  0x6F, 0x77, 0x65, 0x72, 0x4C, 0x69, 0x6D, 0x69,  // owerLimi
                        /* 1E58 */  0x74, 0x00, 0x08, 0x00, 0x00, 0x00, 0x06, 0x00,  // t.......
                        /* 1E60 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x30,  // ......60
                        /* 1E68 */  0x30, 0x30, 0x30, 0x00, 0x04, 0x00, 0x00, 0x00,  // 000.....
                        /* 1E70 */  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1E78 */  0x08, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00,  // ........
                        /* 1E80 */  0x00, 0x00, 0x00, 0x00, 0x6C, 0x6F, 0x77, 0x5F,  // ....low_
                        /* 1E88 */  0x62, 0x61, 0x74, 0x74, 0x5F, 0x32, 0x34, 0x57,  // batt_24W
                        /* 1E90 */  0x5F, 0x62, 0x72, 0x69, 0x63, 0x6B, 0x00, 0x08,  // _brick..
                        /* 1E98 */  0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1EA0 */  0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F,  // ...\_SB_
                        /* 1EA8 */  0x2E, 0x50, 0x43, 0x49, 0x30, 0x2E, 0x42, 0x30,  // .PCI0.B0
                        /* 1EB0 */  0x44, 0x34, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09,  // D4......
                        /* 1EB8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08,  // ........
                        /* 1EC0 */  0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1EC8 */  0x00, 0x00, 0x00, 0x50, 0x53, 0x79, 0x73, 0x50,  // ...PSysP
                        /* 1ED0 */  0x4C, 0x31, 0x4C, 0x69, 0x6D, 0x69, 0x74, 0x00,  // L1Limit.
                        /* 1ED8 */  0x08, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,  // ........
                        /* 1EE0 */  0x00, 0x00, 0x00, 0x00, 0x32, 0x31, 0x35, 0x30,  // ....2150
                        /* 1EE8 */  0x30, 0x00, 0x04, 0x00, 0x00, 0x00, 0x03, 0x00,  // 0.......
                        /* 1EF0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 1EF8 */  0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1F00 */  0x00, 0x00, 0x6C, 0x6F, 0x77, 0x5F, 0x62, 0x61,  // ..low_ba
                        /* 1F08 */  0x74, 0x74, 0x5F, 0x32, 0x34, 0x57, 0x5F, 0x62,  // tt_24W_b
                        /* 1F10 */  0x72, 0x69, 0x63, 0x6B, 0x00, 0x08, 0x00, 0x00,  // rick....
                        /* 1F18 */  0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1F20 */  0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x50,  // .\_SB_.P
                        /* 1F28 */  0x43, 0x49, 0x30, 0x2E, 0x42, 0x30, 0x44, 0x34,  // CI0.B0D4
                        /* 1F30 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00,  // ........
                        /* 1F38 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,  // ........
                        /* 1F40 */  0x00, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1F48 */  0x00, 0x50, 0x53, 0x79, 0x73, 0x50, 0x4C, 0x32,  // .PSysPL2
                        /* 1F50 */  0x4C, 0x69, 0x6D, 0x69, 0x74, 0x00, 0x08, 0x00,  // Limit...
                        /* 1F58 */  0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1F60 */  0x00, 0x00, 0x33, 0x30, 0x30, 0x30, 0x30, 0x00,  // ..30000.
                        /* 1F68 */  0x04, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,  // ........
                        /* 1F70 */  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,  // ........
                        /* 1F78 */  0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1F80 */  0x6C, 0x6F, 0x77, 0x5F, 0x62, 0x61, 0x74, 0x74,  // low_batt
                        /* 1F88 */  0x5F, 0x32, 0x34, 0x57, 0x5F, 0x62, 0x72, 0x69,  // _24W_bri
                        /* 1F90 */  0x63, 0x6B, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10,  // ck......
                        /* 1F98 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C,  // .......\
                        /* 1FA0 */  0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x50, 0x43, 0x49,  // _SB_.PCI
                        /* 1FA8 */  0x30, 0x2E, 0x42, 0x30, 0x44, 0x34, 0x00, 0x04,  // 0.B0D4..
                        /* 1FB0 */  0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1FB8 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x0E,  // ........
                        /* 1FC0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50,  // .......P
                        /* 1FC8 */  0x4C, 0x34, 0x50, 0x6F, 0x77, 0x65, 0x72, 0x4C,  // L4PowerL
                        /* 1FD0 */  0x69, 0x6D, 0x69, 0x74, 0x00, 0x08, 0x00, 0x00,  // imit....
                        /* 1FD8 */  0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1FE0 */  0x00, 0x36, 0x30, 0x30, 0x30, 0x30, 0x00, 0x04,  // .60000..
                        /* 1FE8 */  0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1FF0 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x13,  // ........
                        /* 1FF8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6C,  // .......l
                        /* 2000 */  0x6F, 0x77, 0x5F, 0x62, 0x61, 0x74, 0x74, 0x5F,  // ow_batt_
                        /* 2008 */  0x33, 0x30, 0x57, 0x5F, 0x62, 0x72, 0x69, 0x63,  // 30W_bric
                        /* 2010 */  0x6B, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00,  // k.......
                        /* 2018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F,  // ......\_
                        /* 2020 */  0x53, 0x42, 0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30,  // SB_.PCI0
                        /* 2028 */  0x2E, 0x42, 0x30, 0x44, 0x34, 0x00, 0x04, 0x00,  // .B0D4...
                        /* 2030 */  0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2038 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x0D, 0x00,  // ........
                        /* 2040 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x53,  // ......PS
                        /* 2048 */  0x79, 0x73, 0x50, 0x4C, 0x31, 0x4C, 0x69, 0x6D,  // ysPL1Lim
                        /* 2050 */  0x69, 0x74, 0x00, 0x08, 0x00, 0x00, 0x00, 0x06,  // it......
                        /* 2058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32,  // .......2
                        /* 2060 */  0x37, 0x30, 0x30, 0x30, 0x00, 0x04, 0x00, 0x00,  // 7000....
                        /* 2068 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2070 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00,  // ........
                        /* 2078 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x6C, 0x6F, 0x77,  // .....low
                        /* 2080 */  0x5F, 0x62, 0x61, 0x74, 0x74, 0x5F, 0x33, 0x30,  // _batt_30
                        /* 2088 */  0x57, 0x5F, 0x62, 0x72, 0x69, 0x63, 0x6B, 0x00,  // W_brick.
                        /* 2090 */  0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,  // ........
                        /* 2098 */  0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42,  // ....\_SB
                        /* 20A0 */  0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30, 0x2E, 0x42,  // _.PCI0.B
                        /* 20A8 */  0x30, 0x44, 0x34, 0x00, 0x04, 0x00, 0x00, 0x00,  // 0D4.....
                        /* 20B0 */  0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 20B8 */  0x08, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00,  // ........
                        /* 20C0 */  0x00, 0x00, 0x00, 0x00, 0x50, 0x53, 0x79, 0x73,  // ....PSys
                        /* 20C8 */  0x50, 0x4C, 0x32, 0x4C, 0x69, 0x6D, 0x69, 0x74,  // PL2Limit
                        /* 20D0 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00,  // ........
                        /* 20D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x30, 0x30,  // .....300
                        /* 20E0 */  0x30, 0x30, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04,  // 00......
                        /* 20E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08,  // ........
                        /* 20F0 */  0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 20F8 */  0x00, 0x00, 0x00, 0x6C, 0x6F, 0x77, 0x5F, 0x62,  // ...low_b
                        /* 2100 */  0x61, 0x74, 0x74, 0x5F, 0x33, 0x30, 0x57, 0x5F,  // att_30W_
                        /* 2108 */  0x62, 0x72, 0x69, 0x63, 0x6B, 0x00, 0x08, 0x00,  // brick...
                        /* 2110 */  0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2118 */  0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E,  // ..\_SB_.
                        /* 2120 */  0x50, 0x43, 0x49, 0x30, 0x2E, 0x42, 0x30, 0x44,  // PCI0.B0D
                        /* 2128 */  0x34, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00,  // 4.......
                        /* 2130 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 2138 */  0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2140 */  0x00, 0x00, 0x50, 0x4C, 0x34, 0x50, 0x6F, 0x77,  // ..PL4Pow
                        /* 2148 */  0x65, 0x72, 0x4C, 0x69, 0x6D, 0x69, 0x74, 0x00,  // erLimit.
                        /* 2150 */  0x08, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,  // ........
                        /* 2158 */  0x00, 0x00, 0x00, 0x00, 0x36, 0x30, 0x30, 0x30,  // ....6000
                        /* 2160 */  0x30, 0x00, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00,  // 0.......
                        /* 2168 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 2170 */  0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2178 */  0x00, 0x00, 0x63, 0x72, 0x69, 0x74, 0x5F, 0x62,  // ..crit_b
                        /* 2180 */  0x61, 0x74, 0x74, 0x5F, 0x6E, 0x6F, 0x5F, 0x62,  // att_no_b
                        /* 2188 */  0x72, 0x69, 0x63, 0x6B, 0x00, 0x08, 0x00, 0x00,  // rick....
                        /* 2190 */  0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2198 */  0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x50,  // .\_SB_.P
                        /* 21A0 */  0x43, 0x49, 0x30, 0x2E, 0x42, 0x30, 0x44, 0x34,  // CI0.B0D4
                        /* 21A8 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00,  // ........
                        /* 21B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,  // ........
                        /* 21B8 */  0x00, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 21C0 */  0x00, 0x50, 0x53, 0x79, 0x73, 0x50, 0x4C, 0x31,  // .PSysPL1
                        /* 21C8 */  0x4C, 0x69, 0x6D, 0x69, 0x74, 0x00, 0x08, 0x00,  // Limit...
                        /* 21D0 */  0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 21D8 */  0x00, 0x00, 0x32, 0x31, 0x35, 0x30, 0x30, 0x00,  // ..21500.
                        /* 21E0 */  0x04, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,  // ........
                        /* 21E8 */  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,  // ........
                        /* 21F0 */  0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 21F8 */  0x63, 0x72, 0x69, 0x74, 0x5F, 0x62, 0x61, 0x74,  // crit_bat
                        /* 2200 */  0x74, 0x5F, 0x6E, 0x6F, 0x5F, 0x62, 0x72, 0x69,  // t_no_bri
                        /* 2208 */  0x63, 0x6B, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10,  // ck......
                        /* 2210 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C,  // .......\
                        /* 2218 */  0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x50, 0x43, 0x49,  // _SB_.PCI
                        /* 2220 */  0x30, 0x2E, 0x42, 0x30, 0x44, 0x34, 0x00, 0x04,  // 0.B0D4..
                        /* 2228 */  0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2230 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x0D,  // ........
                        /* 2238 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50,  // .......P
                        /* 2240 */  0x53, 0x79, 0x73, 0x50, 0x4C, 0x32, 0x4C, 0x69,  // SysPL2Li
                        /* 2248 */  0x6D, 0x69, 0x74, 0x00, 0x08, 0x00, 0x00, 0x00,  // mit.....
                        /* 2250 */  0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2258 */  0x33, 0x30, 0x30, 0x30, 0x30, 0x00, 0x04, 0x00,  // 30000...
                        /* 2260 */  0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2268 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x13, 0x00,  // ........
                        /* 2270 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0x72,  // ......cr
                        /* 2278 */  0x69, 0x74, 0x5F, 0x62, 0x61, 0x74, 0x74, 0x5F,  // it_batt_
                        /* 2280 */  0x6E, 0x6F, 0x5F, 0x62, 0x72, 0x69, 0x63, 0x6B,  // no_brick
                        /* 2288 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,  // ........
                        /* 2290 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53,  // .....\_S
                        /* 2298 */  0x42, 0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30, 0x2E,  // B_.PCI0.
                        /* 22A0 */  0x42, 0x30, 0x44, 0x34, 0x00, 0x04, 0x00, 0x00,  // B0D4....
                        /* 22A8 */  0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 22B0 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00,  // ........
                        /* 22B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x4C, 0x34,  // .....PL4
                        /* 22C0 */  0x50, 0x6F, 0x77, 0x65, 0x72, 0x4C, 0x69, 0x6D,  // PowerLim
                        /* 22C8 */  0x69, 0x74, 0x00, 0x08, 0x00, 0x00, 0x00, 0x06,  // it......
                        /* 22D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31,  // .......1
                        /* 22D8 */  0x30, 0x30, 0x30, 0x30, 0x00, 0x04, 0x00, 0x00,  // 0000....
                        /* 22E0 */  0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 22E8 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00,  // ........
                        /* 22F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0x72, 0x69,  // .....cri
                        /* 22F8 */  0x74, 0x5F, 0x62, 0x61, 0x74, 0x74, 0x5F, 0x32,  // t_batt_2
                        /* 2300 */  0x34, 0x57, 0x5F, 0x62, 0x72, 0x69, 0x63, 0x6B,  // 4W_brick
                        /* 2308 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,  // ........
                        /* 2310 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53,  // .....\_S
                        /* 2318 */  0x42, 0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30, 0x2E,  // B_.PCI0.
                        /* 2320 */  0x42, 0x30, 0x44, 0x34, 0x00, 0x04, 0x00, 0x00,  // B0D4....
                        /* 2328 */  0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2330 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00,  // ........
                        /* 2338 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x53, 0x79,  // .....PSy
                        /* 2340 */  0x73, 0x50, 0x4C, 0x31, 0x4C, 0x69, 0x6D, 0x69,  // sPL1Limi
                        /* 2348 */  0x74, 0x00, 0x08, 0x00, 0x00, 0x00, 0x06, 0x00,  // t.......
                        /* 2350 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x31,  // ......21
                        /* 2358 */  0x35, 0x30, 0x30, 0x00, 0x04, 0x00, 0x00, 0x00,  // 500.....
                        /* 2360 */  0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2368 */  0x08, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00,  // ........
                        /* 2370 */  0x00, 0x00, 0x00, 0x00, 0x63, 0x72, 0x69, 0x74,  // ....crit
                        /* 2378 */  0x5F, 0x62, 0x61, 0x74, 0x74, 0x5F, 0x32, 0x34,  // _batt_24
                        /* 2380 */  0x57, 0x5F, 0x62, 0x72, 0x69, 0x63, 0x6B, 0x00,  // W_brick.
                        /* 2388 */  0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,  // ........
                        /* 2390 */  0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42,  // ....\_SB
                        /* 2398 */  0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30, 0x2E, 0x42,  // _.PCI0.B
                        /* 23A0 */  0x30, 0x44, 0x34, 0x00, 0x04, 0x00, 0x00, 0x00,  // 0D4.....
                        /* 23A8 */  0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 23B0 */  0x08, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00,  // ........
                        /* 23B8 */  0x00, 0x00, 0x00, 0x00, 0x50, 0x53, 0x79, 0x73,  // ....PSys
                        /* 23C0 */  0x50, 0x4C, 0x32, 0x4C, 0x69, 0x6D, 0x69, 0x74,  // PL2Limit
                        /* 23C8 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00,  // ........
                        /* 23D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x30, 0x30,  // .....300
                        /* 23D8 */  0x30, 0x30, 0x00, 0x04, 0x00, 0x00, 0x00, 0x06,  // 00......
                        /* 23E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08,  // ........
                        /* 23E8 */  0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 23F0 */  0x00, 0x00, 0x00, 0x63, 0x72, 0x69, 0x74, 0x5F,  // ...crit_
                        /* 23F8 */  0x62, 0x61, 0x74, 0x74, 0x5F, 0x32, 0x34, 0x57,  // batt_24W
                        /* 2400 */  0x5F, 0x62, 0x72, 0x69, 0x63, 0x6B, 0x00, 0x08,  // _brick..
                        /* 2408 */  0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2410 */  0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F,  // ...\_SB_
                        /* 2418 */  0x2E, 0x50, 0x43, 0x49, 0x30, 0x2E, 0x42, 0x30,  // .PCI0.B0
                        /* 2420 */  0x44, 0x34, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09,  // D4......
                        /* 2428 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08,  // ........
                        /* 2430 */  0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2438 */  0x00, 0x00, 0x00, 0x50, 0x4C, 0x34, 0x50, 0x6F,  // ...PL4Po
                        /* 2440 */  0x77, 0x65, 0x72, 0x4C, 0x69, 0x6D, 0x69, 0x74,  // werLimit
                        /* 2448 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00,  // ........
                        /* 2450 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0x31, 0x30,  // .....110
                        /* 2458 */  0x30, 0x30, 0x00, 0x04, 0x00, 0x00, 0x00, 0x07,  // 00......
                        /* 2460 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08,  // ........
                        /* 2468 */  0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2470 */  0x00, 0x00, 0x00, 0x63, 0x72, 0x69, 0x74, 0x5F,  // ...crit_
                        /* 2478 */  0x62, 0x61, 0x74, 0x74, 0x5F, 0x33, 0x30, 0x57,  // batt_30W
                        /* 2480 */  0x5F, 0x62, 0x72, 0x69, 0x63, 0x6B, 0x00, 0x08,  // _brick..
                        /* 2488 */  0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2490 */  0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F,  // ...\_SB_
                        /* 2498 */  0x2E, 0x50, 0x43, 0x49, 0x30, 0x2E, 0x42, 0x30,  // .PCI0.B0
                        /* 24A0 */  0x44, 0x34, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09,  // D4......
                        /* 24A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08,  // ........
                        /* 24B0 */  0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 24B8 */  0x00, 0x00, 0x00, 0x50, 0x53, 0x79, 0x73, 0x50,  // ...PSysP
                        /* 24C0 */  0x4C, 0x31, 0x4C, 0x69, 0x6D, 0x69, 0x74, 0x00,  // L1Limit.
                        /* 24C8 */  0x08, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,  // ........
                        /* 24D0 */  0x00, 0x00, 0x00, 0x00, 0x32, 0x37, 0x30, 0x30,  // ....2700
                        /* 24D8 */  0x30, 0x00, 0x04, 0x00, 0x00, 0x00, 0x07, 0x00,  // 0.......
                        /* 24E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 24E8 */  0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 24F0 */  0x00, 0x00, 0x63, 0x72, 0x69, 0x74, 0x5F, 0x62,  // ..crit_b
                        /* 24F8 */  0x61, 0x74, 0x74, 0x5F, 0x33, 0x30, 0x57, 0x5F,  // att_30W_
                        /* 2500 */  0x62, 0x72, 0x69, 0x63, 0x6B, 0x00, 0x08, 0x00,  // brick...
                        /* 2508 */  0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2510 */  0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E,  // ..\_SB_.
                        /* 2518 */  0x50, 0x43, 0x49, 0x30, 0x2E, 0x42, 0x30, 0x44,  // PCI0.B0D
                        /* 2520 */  0x34, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00,  // 4.......
                        /* 2528 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 2530 */  0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2538 */  0x00, 0x00, 0x50, 0x53, 0x79, 0x73, 0x50, 0x4C,  // ..PSysPL
                        /* 2540 */  0x32, 0x4C, 0x69, 0x6D, 0x69, 0x74, 0x00, 0x08,  // 2Limit..
                        /* 2548 */  0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2550 */  0x00, 0x00, 0x00, 0x32, 0x35, 0x30, 0x30, 0x30,  // ...25000
                        /* 2558 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00,  // ........
                        /* 2560 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,  // ........
                        /* 2568 */  0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2570 */  0x00, 0x63, 0x72, 0x69, 0x74, 0x5F, 0x62, 0x61,  // .crit_ba
                        /* 2578 */  0x74, 0x74, 0x5F, 0x33, 0x30, 0x57, 0x5F, 0x62,  // tt_30W_b
                        /* 2580 */  0x72, 0x69, 0x63, 0x6B, 0x00, 0x08, 0x00, 0x00,  // rick....
                        /* 2588 */  0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2590 */  0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x50,  // .\_SB_.P
                        /* 2598 */  0x43, 0x49, 0x30, 0x2E, 0x42, 0x30, 0x44, 0x34,  // CI0.B0D4
                        /* 25A0 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00,  // ........
                        /* 25A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,  // ........
                        /* 25B0 */  0x00, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 25B8 */  0x00, 0x50, 0x4C, 0x34, 0x50, 0x6F, 0x77, 0x65,  // .PL4Powe
                        /* 25C0 */  0x72, 0x4C, 0x69, 0x6D, 0x69, 0x74, 0x00, 0x08,  // rLimit..
                        /* 25C8 */  0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 25D0 */  0x00, 0x00, 0x00, 0x31, 0x37, 0x30, 0x30, 0x30,  // ...17000
                        /* 25D8 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,  // ........
                        /* 25E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,  // ........
                        /* 25E8 */  0x00, 0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 25F0 */  0x00, 0x6C, 0x6F, 0x77, 0x5F, 0x62, 0x61, 0x74,  // .low_bat
                        /* 25F8 */  0x74, 0x5F, 0x75, 0x6E, 0x6B, 0x6E, 0x6F, 0x77,  // t_unknow
                        /* 2600 */  0x6E, 0x5F, 0x62, 0x72, 0x69, 0x63, 0x6B, 0x00,  // n_brick.
                        /* 2608 */  0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,  // ........
                        /* 2610 */  0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42,  // ....\_SB
                        /* 2618 */  0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30, 0x2E, 0x42,  // _.PCI0.B
                        /* 2620 */  0x30, 0x44, 0x34, 0x00, 0x04, 0x00, 0x00, 0x00,  // 0D4.....
                        /* 2628 */  0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2630 */  0x08, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00,  // ........
                        /* 2638 */  0x00, 0x00, 0x00, 0x00, 0x50, 0x53, 0x79, 0x73,  // ....PSys
                        /* 2640 */  0x50, 0x4C, 0x31, 0x4C, 0x69, 0x6D, 0x69, 0x74,  // PL1Limit
                        /* 2648 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00,  // ........
                        /* 2650 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x31, 0x35,  // .....215
                        /* 2658 */  0x30, 0x30, 0x00, 0x04, 0x00, 0x00, 0x00, 0x08,  // 00......
                        /* 2660 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08,  // ........
                        /* 2668 */  0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2670 */  0x00, 0x00, 0x00, 0x6C, 0x6F, 0x77, 0x5F, 0x62,  // ...low_b
                        /* 2678 */  0x61, 0x74, 0x74, 0x5F, 0x75, 0x6E, 0x6B, 0x6E,  // att_unkn
                        /* 2680 */  0x6F, 0x77, 0x6E, 0x5F, 0x62, 0x72, 0x69, 0x63,  // own_bric
                        /* 2688 */  0x6B, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00,  // k.......
                        /* 2690 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F,  // ......\_
                        /* 2698 */  0x53, 0x42, 0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30,  // SB_.PCI0
                        /* 26A0 */  0x2E, 0x42, 0x30, 0x44, 0x34, 0x00, 0x04, 0x00,  // .B0D4...
                        /* 26A8 */  0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 26B0 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x0D, 0x00,  // ........
                        /* 26B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x53,  // ......PS
                        /* 26C0 */  0x79, 0x73, 0x50, 0x4C, 0x32, 0x4C, 0x69, 0x6D,  // ysPL2Lim
                        /* 26C8 */  0x69, 0x74, 0x00, 0x08, 0x00, 0x00, 0x00, 0x06,  // it......
                        /* 26D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33,  // .......3
                        /* 26D8 */  0x30, 0x30, 0x30, 0x30, 0x00, 0x04, 0x00, 0x00,  // 0000....
                        /* 26E0 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 26E8 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00,  // ........
                        /* 26F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x6C, 0x6F, 0x77,  // .....low
                        /* 26F8 */  0x5F, 0x62, 0x61, 0x74, 0x74, 0x5F, 0x75, 0x6E,  // _batt_un
                        /* 2700 */  0x6B, 0x6E, 0x6F, 0x77, 0x6E, 0x5F, 0x62, 0x72,  // known_br
                        /* 2708 */  0x69, 0x63, 0x6B, 0x00, 0x08, 0x00, 0x00, 0x00,  // ick.....
                        /* 2710 */  0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2718 */  0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x50, 0x43,  // \_SB_.PC
                        /* 2720 */  0x49, 0x30, 0x2E, 0x42, 0x30, 0x44, 0x34, 0x00,  // I0.B0D4.
                        /* 2728 */  0x04, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00,  // ........
                        /* 2730 */  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,  // ........
                        /* 2738 */  0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2740 */  0x50, 0x4C, 0x34, 0x50, 0x6F, 0x77, 0x65, 0x72,  // PL4Power
                        /* 2748 */  0x4C, 0x69, 0x6D, 0x69, 0x74, 0x00, 0x08, 0x00,  // Limit...
                        /* 2750 */  0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2758 */  0x00, 0x00, 0x31, 0x31, 0x30, 0x30, 0x30, 0x00,  // ..11000.
                        /* 2760 */  0x04, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00,  // ........
                        /* 2768 */  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,  // ........
                        /* 2770 */  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2778 */  0x6E, 0x6F, 0x5F, 0x62, 0x61, 0x74, 0x74, 0x00,  // no_batt.
                        /* 2780 */  0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,  // ........
                        /* 2788 */  0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42,  // ....\_SB
                        /* 2790 */  0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30, 0x2E, 0x42,  // _.PCI0.B
                        /* 2798 */  0x30, 0x44, 0x34, 0x00, 0x04, 0x00, 0x00, 0x00,  // 0D4.....
                        /* 27A0 */  0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 27A8 */  0x08, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00,  // ........
                        /* 27B0 */  0x00, 0x00, 0x00, 0x00, 0x50, 0x53, 0x79, 0x73,  // ....PSys
                        /* 27B8 */  0x50, 0x4C, 0x31, 0x4C, 0x69, 0x6D, 0x69, 0x74,  // PL1Limit
                        /* 27C0 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00,  // ........
                        /* 27C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x31, 0x35,  // .....215
                        /* 27D0 */  0x30, 0x30, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09,  // 00......
                        /* 27D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08,  // ........
                        /* 27E0 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 27E8 */  0x00, 0x00, 0x00, 0x6E, 0x6F, 0x5F, 0x62, 0x61,  // ...no_ba
                        /* 27F0 */  0x74, 0x74, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10,  // tt......
                        /* 27F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C,  // .......\
                        /* 2800 */  0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x50, 0x43, 0x49,  // _SB_.PCI
                        /* 2808 */  0x30, 0x2E, 0x42, 0x30, 0x44, 0x34, 0x00, 0x04,  // 0.B0D4..
                        /* 2810 */  0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2818 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x0D,  // ........
                        /* 2820 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50,  // .......P
                        /* 2828 */  0x53, 0x79, 0x73, 0x50, 0x4C, 0x32, 0x4C, 0x69,  // SysPL2Li
                        /* 2830 */  0x6D, 0x69, 0x74, 0x00, 0x08, 0x00, 0x00, 0x00,  // mit.....
                        /* 2838 */  0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2840 */  0x33, 0x30, 0x30, 0x30, 0x30, 0x00, 0x04, 0x00,  // 30000...
                        /* 2848 */  0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2850 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 2858 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6E, 0x6F,  // ......no
                        /* 2860 */  0x5F, 0x62, 0x61, 0x74, 0x74, 0x00, 0x08, 0x00,  // _batt...
                        /* 2868 */  0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2870 */  0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E,  // ..\_SB_.
                        /* 2878 */  0x50, 0x43, 0x49, 0x30, 0x2E, 0x42, 0x30, 0x44,  // PCI0.B0D
                        /* 2880 */  0x34, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00,  // 4.......
                        /* 2888 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 2890 */  0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2898 */  0x00, 0x00, 0x50, 0x4C, 0x34, 0x50, 0x6F, 0x77,  // ..PL4Pow
                        /* 28A0 */  0x65, 0x72, 0x4C, 0x69, 0x6D, 0x69, 0x74, 0x00,  // erLimit.
                        /* 28A8 */  0x08, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,  // ........
                        /* 28B0 */  0x00, 0x00, 0x00, 0x00, 0x31, 0x31, 0x30, 0x30,  // ....1100
                        /* 28B8 */  0x30, 0x00, 0x01, 0x00, 0x00, 0x00, 0x14, 0x00,  // 0.......
                        /* 28C0 */  0x00, 0x00, 0x2F, 0x73, 0x68, 0x61, 0x72, 0x65,  // ../share
                        /* 28C8 */  0x64, 0x2F, 0x65, 0x78, 0x70, 0x6F, 0x72, 0x74,  // d/export
                        /* 28D0 */  0x2F, 0x70, 0x62, 0x63, 0x74, 0x00, 0x07, 0x00,  // /pbct...
                        /* 28D8 */  0x00, 0x00, 0xCC, 0x12, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 28E0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 28E8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x03, 0x00,  // ........
                        /* 28F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 28F8 */  0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2900 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00,  // ........
                        /* 2908 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2910 */  0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2918 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2920 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2928 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2930 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2938 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2940 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2948 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2950 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2958 */  0x00, 0x00, 0x1B, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2960 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00,  // ........
                        /* 2968 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2970 */  0x00, 0x00, 0x48, 0x71, 0x00, 0x00, 0x00, 0x00,  // ..Hq....
                        /* 2978 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2980 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2988 */  0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2990 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00,  // ........
                        /* 2998 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 29A0 */  0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 29A8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 29B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 29B8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 29C0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 29C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 29D0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 29D8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 29E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 29E8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 29F0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 29F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2A00 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2A08 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2A10 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2A18 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2A20 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2A28 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2A30 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2A38 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2A40 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2A48 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2A50 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2A58 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2A60 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2A68 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2A70 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2A78 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2A80 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2A88 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2A90 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2A98 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2AA0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2AA8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2AB0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2AB8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2AC0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2AC8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00,  // ........
                        /* 2AD0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2AD8 */  0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2AE0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00,  // ........
                        /* 2AE8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2AF0 */  0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2AF8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2B00 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2B08 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2B10 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2B18 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2B20 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2B28 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2B30 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2B38 */  0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2B40 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00,  // ........
                        /* 2B48 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2B50 */  0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2B58 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2B60 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2B68 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2B70 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2B78 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2B80 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2B88 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2B90 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2B98 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2BA0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2BA8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2BB0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2BB8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2BC0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2BC8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2BD0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2BD8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2BE0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2BE8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2BF0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2BF8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2C00 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2C08 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2C10 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2C18 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2C20 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2C28 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2C30 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2C38 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2C40 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2C48 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2C50 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2C58 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2C60 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2C68 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2C70 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2C78 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2C80 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2C88 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2C90 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2C98 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2CA0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2CA8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2CB0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2CB8 */  0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2CC0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00,  // ........
                        /* 2CC8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2CD0 */  0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2CD8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2CE0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2CE8 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2CF0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2CF8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2D00 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2D08 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2D10 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2D18 */  0x00, 0x00, 0x1B, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2D20 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x03, 0x00,  // ........
                        /* 2D28 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2D30 */  0x00, 0x00, 0x30, 0x75, 0x00, 0x00, 0x00, 0x00,  // ..0u....
                        /* 2D38 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2D40 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2D48 */  0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2D50 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00,  // ........
                        /* 2D58 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2D60 */  0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2D68 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2D70 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2D78 */  0x00, 0x00, 0x1B, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2D80 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00,  // ........
                        /* 2D88 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2D90 */  0x00, 0x00, 0x78, 0xE6, 0x00, 0x00, 0x00, 0x00,  // ..x.....
                        /* 2D98 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2DA0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2DA8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2DB0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2DB8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2DC0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2DC8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2DD0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2DD8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2DE0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2DE8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2DF0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2DF8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2E00 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2E08 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2E10 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2E18 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2E20 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2E28 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2E30 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2E38 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2E40 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2E48 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2E50 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2E58 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2E60 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2E68 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2E70 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2E78 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2E80 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2E88 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2E90 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2E98 */  0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2EA0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00,  // ........
                        /* 2EA8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2EB0 */  0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2EB8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2EC0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2EC8 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2ED0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2ED8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2EE0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2EE8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2EF0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2EF8 */  0x00, 0x00, 0x1B, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2F00 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x03, 0x00,  // ........
                        /* 2F08 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2F10 */  0x00, 0x00, 0x60, 0xEA, 0x00, 0x00, 0x00, 0x00,  // ..`.....
                        /* 2F18 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2F20 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2F28 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2F30 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2F38 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2F40 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2F48 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2F50 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2F58 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2F60 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2F68 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2F70 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2F78 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2F80 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2F88 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2F90 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2F98 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2FA0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2FA8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2FB0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2FB8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2FC0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2FC8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2FD0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2FD8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2FE0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2FE8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2FF0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2FF8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3000 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3008 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3018 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3020 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3030 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3038 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3040 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3048 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3050 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3060 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3068 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00,  // ........
                        /* 3070 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3078 */  0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3080 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00,  // ........
                        /* 3088 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3090 */  0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3098 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 30A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 30A8 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 30B0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 30B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 30C0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 30C8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 30D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 30D8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 30E0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 30E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 30F0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 30F8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3100 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3108 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3110 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3118 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3120 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3128 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3130 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3138 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3140 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3148 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3150 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3158 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3160 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3168 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3170 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3178 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3180 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3188 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3190 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3198 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 31A0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 31A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 31B0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 31B8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 31C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 31C8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 31D0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 31D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 31E0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 31E8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 31F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 31F8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3200 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3208 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3210 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3218 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3220 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3228 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3230 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3238 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3240 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3248 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x07, 0x00,  // ........
                        /* 3250 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3258 */  0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3260 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00,  // ........
                        /* 3268 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3270 */  0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3278 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3280 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3288 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3290 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3298 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 32A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 32A8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 32B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 32B8 */  0x00, 0x00, 0x1B, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 32C0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x03, 0x00,  // ........
                        /* 32C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 32D0 */  0x00, 0x00, 0x30, 0x75, 0x00, 0x00, 0x00, 0x00,  // ..0u....
                        /* 32D8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 32E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 32E8 */  0x00, 0x00, 0x1B, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 32F0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00,  // ........
                        /* 32F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3300 */  0x00, 0x00, 0x78, 0xE6, 0x00, 0x00, 0x00, 0x00,  // ..x.....
                        /* 3308 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3310 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3318 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3320 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3328 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3330 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3338 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3340 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3348 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3350 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3358 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3360 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3368 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3370 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3378 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3380 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3388 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3390 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3398 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 33A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 33A8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 33B0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 33B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 33C0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 33C8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 33D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 33D8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 33E0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 33E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 33F0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 33F8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3400 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3408 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3410 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3418 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3420 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3428 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x06, 0x00,  // ........
                        /* 3430 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3438 */  0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3440 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00,  // ........
                        /* 3448 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3450 */  0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3458 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3460 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3468 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3470 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3478 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3480 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3488 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3490 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3498 */  0x00, 0x00, 0x1B, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 34A0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00,  // ........
                        /* 34A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 34B0 */  0x00, 0x00, 0x48, 0x71, 0x00, 0x00, 0x00, 0x00,  // ..Hq....
                        /* 34B8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 34C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 34C8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 34D0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 34D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 34E0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 34E8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 34F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 34F8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3500 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3508 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3510 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3518 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3520 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3528 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3530 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3538 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3540 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3548 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3550 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3558 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3560 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3568 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3570 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3578 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3580 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3588 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3590 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3598 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 35A0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 35A8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 35B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 35B8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 35C0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 35C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 35D0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 35D8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 35E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 35E8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 35F0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 35F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3600 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3608 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3610 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3618 */  0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3620 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00,  // ........
                        /* 3628 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3630 */  0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3638 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3640 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3648 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3650 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3658 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3660 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3668 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3670 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3678 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3680 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3688 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3690 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3698 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 36A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 36A8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 36B0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 36B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 36C0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 36C8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 36D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 36D8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 36E0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 36E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 36F0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 36F8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3700 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3708 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3710 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3718 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3720 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3728 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3730 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3738 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3740 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3748 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3750 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3758 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3760 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3768 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3770 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3778 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3780 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3788 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3790 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3798 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 37A0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 37A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 37B0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 37B8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 37C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 37C8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 37D0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 37D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 37E0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 37E8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 37F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 37F8 */  0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3800 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00,  // ........
                        /* 3808 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3810 */  0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3818 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3820 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3828 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3830 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3838 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3840 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3848 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3850 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3858 */  0x00, 0x00, 0x1B, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3860 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3868 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3870 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3878 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3880 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3888 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3890 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3898 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 38A0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 38A8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 38B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 38B8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 38C0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 38C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 38D0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 38D8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 38E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 38E8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 38F0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 38F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3900 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3908 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3910 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3918 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3920 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3928 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3930 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3938 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3940 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3948 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3950 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3958 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3960 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3968 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3970 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3978 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3980 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3988 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3990 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3998 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 39A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 39A8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 39B0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 39B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 39C0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 39C8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00,  // ........
                        /* 39D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 39D8 */  0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00,  // ..".....
                        /* 39E0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 39E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 39F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 39F8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3A00 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3A08 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3A10 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3A18 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3A20 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3A28 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3A30 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3A38 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3A40 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3A48 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3A50 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3A58 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3A60 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3A68 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3A70 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3A78 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3A80 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3A88 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3A90 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3A98 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3AA0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3AA8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3AB0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3AB8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3AC0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3AC8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3AD0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3AD8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3AE0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3AE8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3AF0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3AF8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3B00 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3B08 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3B10 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3B18 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3B20 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3B28 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3B30 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3B38 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3B40 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3B48 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3B50 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3B58 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3B60 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3B68 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3B70 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3B78 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3B80 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3B88 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3B90 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3B98 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3BA0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3BA8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x14, 0x00,  // ........
                        /* 3BB0 */  0x00, 0x00, 0x2F, 0x73, 0x68, 0x61, 0x72, 0x65,  // ../share
                        /* 3BB8 */  0x64, 0x2F, 0x65, 0x78, 0x70, 0x6F, 0x72, 0x74,  // d/export
                        /* 3BC0 */  0x2F, 0x70, 0x69, 0x64, 0x61, 0x00, 0x07, 0x00,  // /pida...
                        /* 3BC8 */  0x00, 0x00, 0xBC, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3BD0 */  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3BD8 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                        /* 3BE0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F,  // ......\_
                        /* 3BE8 */  0x53, 0x42, 0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30,  // SB_.PCI0
                        /* 3BF0 */  0x2E, 0x42, 0x30, 0x44, 0x34, 0x00, 0x04, 0x00,  // .B0D4...
                        /* 3BF8 */  0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3C00 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3C08 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 3C10 */  0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3C18 */  0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E,  // ..\_SB_.
                        /* 3C20 */  0x5F, 0x53, 0x41, 0x4E, 0x2E, 0x47, 0x45, 0x4E,  // _SAN.GEN
                        /* 3C28 */  0x34, 0x00, 0x04, 0x00, 0x00, 0x00, 0x8C, 0x0C,  // 4.......
                        /* 3C30 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3C38 */  0x00, 0x00, 0x8C, 0x0C, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3C40 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xAF, 0x0A,  // ........
                        /* 3C48 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3C50 */  0x00, 0x00, 0x2C, 0x01, 0x00, 0x00, 0x00, 0x00,  // ..,.....
                        /* 3C58 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x14, 0x05,  // ........
                        /* 3C60 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3C68 */  0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3C70 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3C78 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3C80 */  0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00,  // ........
                        /* 3C88 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x18, 0x00,  // ........
                        /* 3C90 */  0x00, 0x00, 0x2F, 0x73, 0x68, 0x61, 0x72, 0x65,  // ../share
                        /* 3C98 */  0x64, 0x2F, 0x74, 0x61, 0x62, 0x6C, 0x65, 0x73,  // d/tables
                        /* 3CA0 */  0x2F, 0x70, 0x69, 0x64, 0x61, 0x2F, 0x34, 0x35,  // /pida/45
                        /* 3CA8 */  0x63, 0x00, 0x07, 0x00, 0x00, 0x00, 0xBC, 0x00,  // c.......
                        /* 3CB0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00,  // ........
                        /* 3CB8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 3CC0 */  0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3CC8 */  0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E,  // ..\_SB_.
                        /* 3CD0 */  0x50, 0x43, 0x49, 0x30, 0x2E, 0x42, 0x30, 0x44,  // PCI0.B0D
                        /* 3CD8 */  0x34, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00,  // 4.......
                        /* 3CE0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3CE8 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                        /* 3CF0 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                        /* 3CF8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F,  // ......\_
                        /* 3D00 */  0x53, 0x42, 0x5F, 0x2E, 0x5F, 0x53, 0x41, 0x4E,  // SB_._SAN
                        /* 3D08 */  0x2E, 0x47, 0x45, 0x4E, 0x34, 0x00, 0x04, 0x00,  // .GEN4...
                        /* 3D10 */  0x00, 0x00, 0x6E, 0x0C, 0x00, 0x00, 0x00, 0x00,  // ..n.....
                        /* 3D18 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6E, 0x0C,  // ......n.
                        /* 3D20 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3D28 */  0x00, 0x00, 0xAF, 0x0A, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3D30 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x2C, 0x01,  // ......,.
                        /* 3D38 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3D40 */  0x00, 0x00, 0x14, 0x05, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3D48 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x03, 0x00,  // ........
                        /* 3D50 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3D58 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3D60 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xFF, 0xFF,  // ........
                        /* 3D68 */  0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3D70 */  0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x2F, 0x73,  // ....../s
                        /* 3D78 */  0x68, 0x61, 0x72, 0x65, 0x64, 0x2F, 0x74, 0x61,  // hared/ta
                        /* 3D80 */  0x62, 0x6C, 0x65, 0x73, 0x2F, 0x70, 0x69, 0x64,  // bles/pid
                        /* 3D88 */  0x61, 0x2F, 0x34, 0x36, 0x63, 0x00, 0x07, 0x00,  // a/46c...
                        /* 3D90 */  0x00, 0x00, 0xBC, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3D98 */  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3DA0 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                        /* 3DA8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F,  // ......\_
                        /* 3DB0 */  0x53, 0x42, 0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30,  // SB_.PCI0
                        /* 3DB8 */  0x2E, 0x42, 0x30, 0x44, 0x34, 0x00, 0x04, 0x00,  // .B0D4...
                        /* 3DC0 */  0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3DC8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3DD0 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 3DD8 */  0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3DE0 */  0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E,  // ..\_SB_.
                        /* 3DE8 */  0x5F, 0x53, 0x41, 0x4E, 0x2E, 0x47, 0x45, 0x4E,  // _SAN.GEN
                        /* 3DF0 */  0x34, 0x00, 0x04, 0x00, 0x00, 0x00, 0x78, 0x0C,  // 4.....x.
                        /* 3DF8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3E00 */  0x00, 0x00, 0x78, 0x0C, 0x00, 0x00, 0x00, 0x00,  // ..x.....
                        /* 3E08 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xAF, 0x0A,  // ........
                        /* 3E10 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3E18 */  0x00, 0x00, 0x2C, 0x01, 0x00, 0x00, 0x00, 0x00,  // ..,.....
                        /* 3E20 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x14, 0x05,  // ........
                        /* 3E28 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3E30 */  0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3E38 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3E40 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3E48 */  0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00,  // ........
                        /* 3E50 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x18, 0x00,  // ........
                        /* 3E58 */  0x00, 0x00, 0x2F, 0x73, 0x68, 0x61, 0x72, 0x65,  // ../share
                        /* 3E60 */  0x64, 0x2F, 0x74, 0x61, 0x62, 0x6C, 0x65, 0x73,  // d/tables
                        /* 3E68 */  0x2F, 0x70, 0x69, 0x64, 0x61, 0x2F, 0x34, 0x37,  // /pida/47
                        /* 3E70 */  0x63, 0x00, 0x07, 0x00, 0x00, 0x00, 0xBC, 0x00,  // c.......
                        /* 3E78 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00,  // ........
                        /* 3E80 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 3E88 */  0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3E90 */  0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E,  // ..\_SB_.
                        /* 3E98 */  0x50, 0x43, 0x49, 0x30, 0x2E, 0x42, 0x30, 0x44,  // PCI0.B0D
                        /* 3EA0 */  0x34, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00,  // 4.......
                        /* 3EA8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3EB0 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                        /* 3EB8 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                        /* 3EC0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F,  // ......\_
                        /* 3EC8 */  0x53, 0x42, 0x5F, 0x2E, 0x5F, 0x53, 0x41, 0x4E,  // SB_._SAN
                        /* 3ED0 */  0x2E, 0x47, 0x45, 0x4E, 0x34, 0x00, 0x04, 0x00,  // .GEN4...
                        /* 3ED8 */  0x00, 0x00, 0x82, 0x0C, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3EE0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x82, 0x0C,  // ........
                        /* 3EE8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3EF0 */  0x00, 0x00, 0xAF, 0x0A, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3EF8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x2C, 0x01,  // ......,.
                        /* 3F00 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3F08 */  0x00, 0x00, 0x14, 0x05, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3F10 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x03, 0x00,  // ........
                        /* 3F18 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3F20 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3F28 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xFF, 0xFF,  // ........
                        /* 3F30 */  0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3F38 */  0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x2F, 0x73,  // ....../s
                        /* 3F40 */  0x68, 0x61, 0x72, 0x65, 0x64, 0x2F, 0x74, 0x61,  // hared/ta
                        /* 3F48 */  0x62, 0x6C, 0x65, 0x73, 0x2F, 0x70, 0x69, 0x64,  // bles/pid
                        /* 3F50 */  0x61, 0x2F, 0x34, 0x38, 0x63, 0x00, 0x07, 0x00,  // a/48c...
                        /* 3F58 */  0x00, 0x00, 0xBC, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3F60 */  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3F68 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                        /* 3F70 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F,  // ......\_
                        /* 3F78 */  0x53, 0x42, 0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30,  // SB_.PCI0
                        /* 3F80 */  0x2E, 0x42, 0x30, 0x44, 0x34, 0x00, 0x04, 0x00,  // .B0D4...
                        /* 3F88 */  0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3F90 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3F98 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 3FA0 */  0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3FA8 */  0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E,  // ..\_SB_.
                        /* 3FB0 */  0x5F, 0x53, 0x41, 0x4E, 0x2E, 0x47, 0x45, 0x4E,  // _SAN.GEN
                        /* 3FB8 */  0x34, 0x00, 0x04, 0x00, 0x00, 0x00, 0x8C, 0x0C,  // 4.......
                        /* 3FC0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3FC8 */  0x00, 0x00, 0x8C, 0x0C, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3FD0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xAF, 0x0A,  // ........
                        /* 3FD8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3FE0 */  0x00, 0x00, 0x2C, 0x01, 0x00, 0x00, 0x00, 0x00,  // ..,.....
                        /* 3FE8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x14, 0x05,  // ........
                        /* 3FF0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3FF8 */  0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4000 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4010 */  0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00,  // ........
                        /* 4018 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x18, 0x00,  // ........
                        /* 4020 */  0x00, 0x00, 0x2F, 0x73, 0x68, 0x61, 0x72, 0x65,  // ../share
                        /* 4028 */  0x64, 0x2F, 0x74, 0x61, 0x62, 0x6C, 0x65, 0x73,  // d/tables
                        /* 4030 */  0x2F, 0x70, 0x73, 0x76, 0x74, 0x2F, 0x34, 0x35,  // /psvt/45
                        /* 4038 */  0x63, 0x00, 0x07, 0x00, 0x00, 0x00, 0xCC, 0x02,  // c.......
                        /* 4040 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 4048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 4050 */  0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4058 */  0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E,  // ..\_SB_.
                        /* 4060 */  0x50, 0x43, 0x49, 0x30, 0x2E, 0x42, 0x30, 0x44,  // PCI0.B0D
                        /* 4068 */  0x34, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00,  // 4.......
                        /* 4070 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F,  // ......\_
                        /* 4078 */  0x53, 0x42, 0x5F, 0x2E, 0x5F, 0x53, 0x41, 0x4E,  // SB_._SAN
                        /* 4080 */  0x2E, 0x47, 0x45, 0x4E, 0x34, 0x00, 0x04, 0x00,  // .GEN4...
                        /* 4088 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4090 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x84, 0x03,  // ........
                        /* 4098 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 40A0 */  0x00, 0x00, 0x5A, 0x0C, 0x00, 0x00, 0x00, 0x00,  // ..Z.....
                        /* 40A8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00,  // ........
                        /* 40B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 40B8 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                        /* 40C0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x28, 0x23,  // ......(#
                        /* 40C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 40D0 */  0x00, 0x00, 0x7D, 0x00, 0x00, 0x00, 0x00, 0x00,  // ..}.....
                        /* 40D8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0A, 0x00,  // ........
                        /* 40E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 40E8 */  0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00,  // ..d.....
                        /* 40F0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 40F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 4100 */  0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4108 */  0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E,  // ..\_SB_.
                        /* 4110 */  0x50, 0x43, 0x49, 0x30, 0x2E, 0x42, 0x30, 0x44,  // PCI0.B0D
                        /* 4118 */  0x34, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00,  // 4.......
                        /* 4120 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F,  // ......\_
                        /* 4128 */  0x53, 0x42, 0x5F, 0x2E, 0x5F, 0x53, 0x41, 0x4E,  // SB_._SAN
                        /* 4130 */  0x2E, 0x47, 0x45, 0x4E, 0x34, 0x00, 0x04, 0x00,  // .GEN4...
                        /* 4138 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4140 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x84, 0x03,  // ........
                        /* 4148 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4150 */  0x00, 0x00, 0x75, 0x0C, 0x00, 0x00, 0x00, 0x00,  // ..u.....
                        /* 4158 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00,  // ........
                        /* 4160 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4168 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                        /* 4170 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x28, 0x23,  // ......(#
                        /* 4178 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4180 */  0x00, 0x00, 0x7D, 0x00, 0x00, 0x00, 0x00, 0x00,  // ..}.....
                        /* 4188 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0A, 0x00,  // ........
                        /* 4190 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4198 */  0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00,  // ..d.....
                        /* 41A0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 41A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 41B0 */  0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 41B8 */  0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E,  // ..\_SB_.
                        /* 41C0 */  0x50, 0x43, 0x49, 0x30, 0x2E, 0x42, 0x30, 0x44,  // PCI0.B0D
                        /* 41C8 */  0x34, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00,  // 4.......
                        /* 41D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F,  // ......\_
                        /* 41D8 */  0x53, 0x42, 0x5F, 0x2E, 0x5F, 0x53, 0x41, 0x4E,  // SB_._SAN
                        /* 41E0 */  0x2E, 0x47, 0x45, 0x4E, 0x34, 0x00, 0x04, 0x00,  // .GEN4...
                        /* 41E8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 41F0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x84, 0x03,  // ........
                        /* 41F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4200 */  0x00, 0x00, 0x78, 0x0C, 0x00, 0x00, 0x00, 0x00,  // ..x.....
                        /* 4208 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00,  // ........
                        /* 4210 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4218 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                        /* 4220 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x64, 0x19,  // ......d.
                        /* 4228 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4230 */  0x00, 0x00, 0x7D, 0x00, 0x00, 0x00, 0x00, 0x00,  // ..}.....
                        /* 4238 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0A, 0x00,  // ........
                        /* 4240 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4248 */  0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00,  // ..d.....
                        /* 4250 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4258 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 4260 */  0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4268 */  0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E,  // ..\_SB_.
                        /* 4270 */  0x50, 0x43, 0x49, 0x30, 0x2E, 0x42, 0x30, 0x44,  // PCI0.B0D
                        /* 4278 */  0x34, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00,  // 4.......
                        /* 4280 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F,  // ......\_
                        /* 4288 */  0x53, 0x42, 0x5F, 0x2E, 0x5F, 0x53, 0x41, 0x4E,  // SB_._SAN
                        /* 4290 */  0x2E, 0x47, 0x45, 0x4E, 0x34, 0x00, 0x04, 0x00,  // .GEN4...
                        /* 4298 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 42A0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x84, 0x03,  // ........
                        /* 42A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 42B0 */  0x00, 0x00, 0x30, 0x0E, 0x00, 0x00, 0x00, 0x00,  // ..0.....
                        /* 42B8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00,  // ........
                        /* 42C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 42C8 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                        /* 42D0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x64, 0x19,  // ......d.
                        /* 42D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 42E0 */  0x00, 0x00, 0x7D, 0x00, 0x00, 0x00, 0x00, 0x00,  // ..}.....
                        /* 42E8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0A, 0x00,  // ........
                        /* 42F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 42F8 */  0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00,  // ..d.....
                        /* 4300 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4308 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 4310 */  0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x2F, 0x73,  // ....../s
                        /* 4318 */  0x68, 0x61, 0x72, 0x65, 0x64, 0x2F, 0x74, 0x61,  // hared/ta
                        /* 4320 */  0x62, 0x6C, 0x65, 0x73, 0x2F, 0x70, 0x73, 0x76,  // bles/psv
                        /* 4328 */  0x74, 0x2F, 0x34, 0x36, 0x63, 0x00, 0x07, 0x00,  // t/46c...
                        /* 4330 */  0x00, 0x00, 0xCC, 0x02, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4338 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4340 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                        /* 4348 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F,  // ......\_
                        /* 4350 */  0x53, 0x42, 0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30,  // SB_.PCI0
                        /* 4358 */  0x2E, 0x42, 0x30, 0x44, 0x34, 0x00, 0x08, 0x00,  // .B0D4...
                        /* 4360 */  0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4368 */  0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E,  // ..\_SB_.
                        /* 4370 */  0x5F, 0x53, 0x41, 0x4E, 0x2E, 0x47, 0x45, 0x4E,  // _SAN.GEN
                        /* 4378 */  0x34, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // 4.......
                        /* 4380 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4388 */  0x00, 0x00, 0x84, 0x03, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4390 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x64, 0x0C,  // ......d.
                        /* 4398 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 43A0 */  0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 43A8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 43B0 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 43B8 */  0x00, 0x00, 0x10, 0x27, 0x00, 0x00, 0x00, 0x00,  // ...'....
                        /* 43C0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x7D, 0x00,  // ......}.
                        /* 43C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 43D0 */  0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 43D8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x64, 0x00,  // ......d.
                        /* 43E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 43E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 43F0 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                        /* 43F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F,  // ......\_
                        /* 4400 */  0x53, 0x42, 0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30,  // SB_.PCI0
                        /* 4408 */  0x2E, 0x42, 0x30, 0x44, 0x34, 0x00, 0x08, 0x00,  // .B0D4...
                        /* 4410 */  0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4418 */  0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E,  // ..\_SB_.
                        /* 4420 */  0x5F, 0x53, 0x41, 0x4E, 0x2E, 0x47, 0x45, 0x4E,  // _SAN.GEN
                        /* 4428 */  0x34, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // 4.......
                        /* 4430 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4438 */  0x00, 0x00, 0x84, 0x03, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4440 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x7F, 0x0C,  // ........
                        /* 4448 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4450 */  0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4458 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4460 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4468 */  0x00, 0x00, 0x10, 0x27, 0x00, 0x00, 0x00, 0x00,  // ...'....
                        /* 4470 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x7D, 0x00,  // ......}.
                        /* 4478 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4480 */  0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4488 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x64, 0x00,  // ......d.
                        /* 4490 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4498 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 44A0 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                        /* 44A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F,  // ......\_
                        /* 44B0 */  0x53, 0x42, 0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30,  // SB_.PCI0
                        /* 44B8 */  0x2E, 0x42, 0x30, 0x44, 0x34, 0x00, 0x08, 0x00,  // .B0D4...
                        /* 44C0 */  0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 44C8 */  0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E,  // ..\_SB_.
                        /* 44D0 */  0x5F, 0x53, 0x41, 0x4E, 0x2E, 0x47, 0x45, 0x4E,  // _SAN.GEN
                        /* 44D8 */  0x34, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // 4.......
                        /* 44E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 44E8 */  0x00, 0x00, 0x84, 0x03, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 44F0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x82, 0x0C,  // ........
                        /* 44F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4500 */  0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4508 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4510 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4518 */  0x00, 0x00, 0x4C, 0x1D, 0x00, 0x00, 0x00, 0x00,  // ..L.....
                        /* 4520 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x7D, 0x00,  // ......}.
                        /* 4528 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4530 */  0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4538 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x64, 0x00,  // ......d.
                        /* 4540 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4548 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4550 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                        /* 4558 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F,  // ......\_
                        /* 4560 */  0x53, 0x42, 0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30,  // SB_.PCI0
                        /* 4568 */  0x2E, 0x42, 0x30, 0x44, 0x34, 0x00, 0x08, 0x00,  // .B0D4...
                        /* 4570 */  0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4578 */  0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E,  // ..\_SB_.
                        /* 4580 */  0x5F, 0x53, 0x41, 0x4E, 0x2E, 0x47, 0x45, 0x4E,  // _SAN.GEN
                        /* 4588 */  0x34, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // 4.......
                        /* 4590 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4598 */  0x00, 0x00, 0x84, 0x03, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 45A0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x30, 0x0E,  // ......0.
                        /* 45A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 45B0 */  0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 45B8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 45C0 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 45C8 */  0x00, 0x00, 0x4C, 0x1D, 0x00, 0x00, 0x00, 0x00,  // ..L.....
                        /* 45D0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x7D, 0x00,  // ......}.
                        /* 45D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 45E0 */  0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 45E8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x64, 0x00,  // ......d.
                        /* 45F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 45F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4600 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x18, 0x00,  // ........
                        /* 4608 */  0x00, 0x00, 0x2F, 0x73, 0x68, 0x61, 0x72, 0x65,  // ../share
                        /* 4610 */  0x64, 0x2F, 0x74, 0x61, 0x62, 0x6C, 0x65, 0x73,  // d/tables
                        /* 4618 */  0x2F, 0x70, 0x73, 0x76, 0x74, 0x2F, 0x34, 0x37,  // /psvt/47
                        /* 4620 */  0x63, 0x00, 0x07, 0x00, 0x00, 0x00, 0xCC, 0x02,  // c.......
                        /* 4628 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 4630 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 4638 */  0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4640 */  0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E,  // ..\_SB_.
                        /* 4648 */  0x50, 0x43, 0x49, 0x30, 0x2E, 0x42, 0x30, 0x44,  // PCI0.B0D
                        /* 4650 */  0x34, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00,  // 4.......
                        /* 4658 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F,  // ......\_
                        /* 4660 */  0x53, 0x42, 0x5F, 0x2E, 0x5F, 0x53, 0x41, 0x4E,  // SB_._SAN
                        /* 4668 */  0x2E, 0x47, 0x45, 0x4E, 0x34, 0x00, 0x04, 0x00,  // .GEN4...
                        /* 4670 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4678 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x84, 0x03,  // ........
                        /* 4680 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4688 */  0x00, 0x00, 0x6E, 0x0C, 0x00, 0x00, 0x00, 0x00,  // ..n.....
                        /* 4690 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00,  // ........
                        /* 4698 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 46A0 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                        /* 46A8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xF8, 0x2A,  // .......*
                        /* 46B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 46B8 */  0x00, 0x00, 0x7D, 0x00, 0x00, 0x00, 0x00, 0x00,  // ..}.....
                        /* 46C0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0A, 0x00,  // ........
                        /* 46C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 46D0 */  0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00,  // ..d.....
                        /* 46D8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 46E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 46E8 */  0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 46F0 */  0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E,  // ..\_SB_.
                        /* 46F8 */  0x50, 0x43, 0x49, 0x30, 0x2E, 0x42, 0x30, 0x44,  // PCI0.B0D
                        /* 4700 */  0x34, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00,  // 4.......
                        /* 4708 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F,  // ......\_
                        /* 4710 */  0x53, 0x42, 0x5F, 0x2E, 0x5F, 0x53, 0x41, 0x4E,  // SB_._SAN
                        /* 4718 */  0x2E, 0x47, 0x45, 0x4E, 0x34, 0x00, 0x04, 0x00,  // .GEN4...
                        /* 4720 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4728 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x84, 0x03,  // ........
                        /* 4730 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4738 */  0x00, 0x00, 0x89, 0x0C, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4740 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00,  // ........
                        /* 4748 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4750 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                        /* 4758 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xF8, 0x2A,  // .......*
                        /* 4760 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4768 */  0x00, 0x00, 0x7D, 0x00, 0x00, 0x00, 0x00, 0x00,  // ..}.....
                        /* 4770 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0A, 0x00,  // ........
                        /* 4778 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4780 */  0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00,  // ..d.....
                        /* 4788 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4790 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 4798 */  0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 47A0 */  0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E,  // ..\_SB_.
                        /* 47A8 */  0x50, 0x43, 0x49, 0x30, 0x2E, 0x42, 0x30, 0x44,  // PCI0.B0D
                        /* 47B0 */  0x34, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00,  // 4.......
                        /* 47B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F,  // ......\_
                        /* 47C0 */  0x53, 0x42, 0x5F, 0x2E, 0x5F, 0x53, 0x41, 0x4E,  // SB_._SAN
                        /* 47C8 */  0x2E, 0x47, 0x45, 0x4E, 0x34, 0x00, 0x04, 0x00,  // .GEN4...
                        /* 47D0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 47D8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x84, 0x03,  // ........
                        /* 47E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 47E8 */  0x00, 0x00, 0x8C, 0x0C, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 47F0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00,  // ........
                        /* 47F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4800 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                        /* 4808 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x34, 0x21,  // ......4!
                        /* 4810 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4818 */  0x00, 0x00, 0x7D, 0x00, 0x00, 0x00, 0x00, 0x00,  // ..}.....
                        /* 4820 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0A, 0x00,  // ........
                        /* 4828 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4830 */  0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00,  // ..d.....
                        /* 4838 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4840 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 4848 */  0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4850 */  0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E,  // ..\_SB_.
                        /* 4858 */  0x50, 0x43, 0x49, 0x30, 0x2E, 0x42, 0x30, 0x44,  // PCI0.B0D
                        /* 4860 */  0x34, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00,  // 4.......
                        /* 4868 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F,  // ......\_
                        /* 4870 */  0x53, 0x42, 0x5F, 0x2E, 0x5F, 0x53, 0x41, 0x4E,  // SB_._SAN
                        /* 4878 */  0x2E, 0x47, 0x45, 0x4E, 0x34, 0x00, 0x04, 0x00,  // .GEN4...
                        /* 4880 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4888 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x84, 0x03,  // ........
                        /* 4890 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4898 */  0x00, 0x00, 0x30, 0x0E, 0x00, 0x00, 0x00, 0x00,  // ..0.....
                        /* 48A0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00,  // ........
                        /* 48A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 48B0 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                        /* 48B8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x34, 0x21,  // ......4!
                        /* 48C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 48C8 */  0x00, 0x00, 0x7D, 0x00, 0x00, 0x00, 0x00, 0x00,  // ..}.....
                        /* 48D0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0A, 0x00,  // ........
                        /* 48D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 48E0 */  0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00,  // ..d.....
                        /* 48E8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 48F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 48F8 */  0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x2F, 0x73,  // ....../s
                        /* 4900 */  0x68, 0x61, 0x72, 0x65, 0x64, 0x2F, 0x74, 0x61,  // hared/ta
                        /* 4908 */  0x62, 0x6C, 0x65, 0x73, 0x2F, 0x70, 0x73, 0x76,  // bles/psv
                        /* 4910 */  0x74, 0x2F, 0x34, 0x38, 0x63, 0x00, 0x07, 0x00,  // t/48c...
                        /* 4918 */  0x00, 0x00, 0xCC, 0x02, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4920 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4928 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                        /* 4930 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F,  // ......\_
                        /* 4938 */  0x53, 0x42, 0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30,  // SB_.PCI0
                        /* 4940 */  0x2E, 0x42, 0x30, 0x44, 0x34, 0x00, 0x08, 0x00,  // .B0D4...
                        /* 4948 */  0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4950 */  0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E,  // ..\_SB_.
                        /* 4958 */  0x5F, 0x53, 0x41, 0x4E, 0x2E, 0x47, 0x45, 0x4E,  // _SAN.GEN
                        /* 4960 */  0x34, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // 4.......
                        /* 4968 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4970 */  0x00, 0x00, 0x84, 0x03, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4978 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x78, 0x0C,  // ......x.
                        /* 4980 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4988 */  0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4990 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4998 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 49A0 */  0x00, 0x00, 0xE0, 0x2E, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 49A8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x7D, 0x00,  // ......}.
                        /* 49B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 49B8 */  0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 49C0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x64, 0x00,  // ......d.
                        /* 49C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 49D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 49D8 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                        /* 49E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F,  // ......\_
                        /* 49E8 */  0x53, 0x42, 0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30,  // SB_.PCI0
                        /* 49F0 */  0x2E, 0x42, 0x30, 0x44, 0x34, 0x00, 0x08, 0x00,  // .B0D4...
                        /* 49F8 */  0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4A00 */  0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E,  // ..\_SB_.
                        /* 4A08 */  0x5F, 0x53, 0x41, 0x4E, 0x2E, 0x47, 0x45, 0x4E,  // _SAN.GEN
                        /* 4A10 */  0x34, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // 4.......
                        /* 4A18 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4A20 */  0x00, 0x00, 0x84, 0x03, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4A28 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x93, 0x0C,  // ........
                        /* 4A30 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4A38 */  0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4A40 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4A48 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4A50 */  0x00, 0x00, 0xE0, 0x2E, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4A58 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x7D, 0x00,  // ......}.
                        /* 4A60 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4A68 */  0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4A70 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x64, 0x00,  // ......d.
                        /* 4A78 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4A80 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4A88 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                        /* 4A90 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F,  // ......\_
                        /* 4A98 */  0x53, 0x42, 0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30,  // SB_.PCI0
                        /* 4AA0 */  0x2E, 0x42, 0x30, 0x44, 0x34, 0x00, 0x08, 0x00,  // .B0D4...
                        /* 4AA8 */  0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4AB0 */  0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E,  // ..\_SB_.
                        /* 4AB8 */  0x5F, 0x53, 0x41, 0x4E, 0x2E, 0x47, 0x45, 0x4E,  // _SAN.GEN
                        /* 4AC0 */  0x34, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // 4.......
                        /* 4AC8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4AD0 */  0x00, 0x00, 0x84, 0x03, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4AD8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x96, 0x0C,  // ........
                        /* 4AE0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4AE8 */  0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4AF0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4AF8 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4B00 */  0x00, 0x00, 0x1C, 0x25, 0x00, 0x00, 0x00, 0x00,  // ...%....
                        /* 4B08 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x7D, 0x00,  // ......}.
                        /* 4B10 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4B18 */  0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4B20 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x64, 0x00,  // ......d.
                        /* 4B28 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4B30 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4B38 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                        /* 4B40 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F,  // ......\_
                        /* 4B48 */  0x53, 0x42, 0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30,  // SB_.PCI0
                        /* 4B50 */  0x2E, 0x42, 0x30, 0x44, 0x34, 0x00, 0x08, 0x00,  // .B0D4...
                        /* 4B58 */  0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4B60 */  0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E,  // ..\_SB_.
                        /* 4B68 */  0x5F, 0x53, 0x41, 0x4E, 0x2E, 0x47, 0x45, 0x4E,  // _SAN.GEN
                        /* 4B70 */  0x34, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // 4.......
                        /* 4B78 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4B80 */  0x00, 0x00, 0x84, 0x03, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4B88 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x30, 0x0E,  // ......0.
                        /* 4B90 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4B98 */  0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4BA0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4BA8 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4BB0 */  0x00, 0x00, 0x1C, 0x25, 0x00, 0x00, 0x00, 0x00,  // ...%....
                        /* 4BB8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x7D, 0x00,  // ......}.
                        /* 4BC0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4BC8 */  0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4BD0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x64, 0x00,  // ......d.
                        /* 4BD8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4BE0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4BE8 */  0x00, 0x00                                       // ..
                    }
                })
            }
            ElseIf (((EBID & 0x0C) == 0x04))
            {
                Return (Package (0x01)
                {
                    Buffer (0x504C)
                    {
                        /* 0000 */  0xE5, 0x1F, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x01,  // ........
                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                        /* 0010 */  0x1B, 0x00, 0x00, 0x00, 0x2F, 0x70, 0x61, 0x72,  // ..../par
                        /* 0018 */  0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6E, 0x74,  // ticipant
                        /* 0020 */  0x73, 0x2F, 0x47, 0x45, 0x4E, 0x35, 0x2E, 0x44,  // s/GEN5.D
                        /* 0028 */  0x30, 0x2F, 0x67, 0x74, 0x73, 0x68, 0x00, 0x06,  // 0/gtsh..
                        /* 0030 */  0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xC0,  // ........
                        /* 0038 */  0x0A, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x25,  // .......%
                        /* 0040 */  0x00, 0x00, 0x00, 0x2F, 0x70, 0x61, 0x72, 0x74,  // .../part
                        /* 0048 */  0x69, 0x63, 0x69, 0x70, 0x61, 0x6E, 0x74, 0x73,  // icipants
                        /* 0050 */  0x2F, 0x47, 0x45, 0x4E, 0x35, 0x2E, 0x44, 0x30,  // /GEN5.D0
                        /* 0058 */  0x2F, 0x74, 0x72, 0x69, 0x70, 0x70, 0x6F, 0x69,  // /trippoi
                        /* 0060 */  0x6E, 0x74, 0x2F, 0x5F, 0x61, 0x63, 0x30, 0x00,  // nt/_ac0.
                        /* 0068 */  0x06, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 0070 */  0x68, 0x0D, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // h.......
                        /* 0078 */  0x25, 0x00, 0x00, 0x00, 0x2F, 0x70, 0x61, 0x72,  // %.../par
                        /* 0080 */  0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6E, 0x74,  // ticipant
                        /* 0088 */  0x73, 0x2F, 0x47, 0x45, 0x4E, 0x35, 0x2E, 0x44,  // s/GEN5.D
                        /* 0090 */  0x30, 0x2F, 0x74, 0x72, 0x69, 0x70, 0x70, 0x6F,  // 0/trippo
                        /* 0098 */  0x69, 0x6E, 0x74, 0x2F, 0x5F, 0x61, 0x63, 0x31,  // int/_ac1
                        /* 00A0 */  0x00, 0x06, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 00A8 */  0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x00,  // ........
                        /* 00B0 */  0x00, 0x25, 0x00, 0x00, 0x00, 0x2F, 0x70, 0x61,  // .%.../pa
                        /* 00B8 */  0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6E,  // rticipan
                        /* 00C0 */  0x74, 0x73, 0x2F, 0x47, 0x45, 0x4E, 0x35, 0x2E,  // ts/GEN5.
                        /* 00C8 */  0x44, 0x30, 0x2F, 0x74, 0x72, 0x69, 0x70, 0x70,  // D0/tripp
                        /* 00D0 */  0x6F, 0x69, 0x6E, 0x74, 0x2F, 0x5F, 0x61, 0x63,  // oint/_ac
                        /* 00D8 */  0x32, 0x00, 0x06, 0x00, 0x00, 0x00, 0x04, 0x00,  // 2.......
                        /* 00E0 */  0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00,  // ........
                        /* 00E8 */  0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0x2F, 0x70,  // ..%.../p
                        /* 00F0 */  0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,  // articipa
                        /* 00F8 */  0x6E, 0x74, 0x73, 0x2F, 0x47, 0x45, 0x4E, 0x35,  // nts/GEN5
                        /* 0100 */  0x2E, 0x44, 0x30, 0x2F, 0x74, 0x72, 0x69, 0x70,  // .D0/trip
                        /* 0108 */  0x70, 0x6F, 0x69, 0x6E, 0x74, 0x2F, 0x5F, 0x61,  // point/_a
                        /* 0110 */  0x63, 0x33, 0x00, 0x06, 0x00, 0x00, 0x00, 0x04,  // c3......
                        /* 0118 */  0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x01,  // ........
                        /* 0120 */  0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0x2F,  // ...%.../
                        /* 0128 */  0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,  // particip
                        /* 0130 */  0x61, 0x6E, 0x74, 0x73, 0x2F, 0x47, 0x45, 0x4E,  // ants/GEN
                        /* 0138 */  0x35, 0x2E, 0x44, 0x30, 0x2F, 0x74, 0x72, 0x69,  // 5.D0/tri
                        /* 0140 */  0x70, 0x70, 0x6F, 0x69, 0x6E, 0x74, 0x2F, 0x5F,  // ppoint/_
                        /* 0148 */  0x61, 0x63, 0x34, 0x00, 0x06, 0x00, 0x00, 0x00,  // ac4.....
                        /* 0150 */  0x04, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                        /* 0158 */  0x01, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00,  // ....%...
                        /* 0160 */  0x2F, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,  // /partici
                        /* 0168 */  0x70, 0x61, 0x6E, 0x74, 0x73, 0x2F, 0x47, 0x45,  // pants/GE
                        /* 0170 */  0x4E, 0x35, 0x2E, 0x44, 0x30, 0x2F, 0x74, 0x72,  // N5.D0/tr
                        /* 0178 */  0x69, 0x70, 0x70, 0x6F, 0x69, 0x6E, 0x74, 0x2F,  // ippoint/
                        /* 0180 */  0x5F, 0x61, 0x63, 0x35, 0x00, 0x06, 0x00, 0x00,  // _ac5....
                        /* 0188 */  0x00, 0x04, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF,  // ........
                        /* 0190 */  0xFF, 0x01, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00,  // .....%..
                        /* 0198 */  0x00, 0x2F, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,  // ./partic
                        /* 01A0 */  0x69, 0x70, 0x61, 0x6E, 0x74, 0x73, 0x2F, 0x47,  // ipants/G
                        /* 01A8 */  0x45, 0x4E, 0x35, 0x2E, 0x44, 0x30, 0x2F, 0x74,  // EN5.D0/t
                        /* 01B0 */  0x72, 0x69, 0x70, 0x70, 0x6F, 0x69, 0x6E, 0x74,  // rippoint
                        /* 01B8 */  0x2F, 0x5F, 0x61, 0x63, 0x36, 0x00, 0x06, 0x00,  // /_ac6...
                        /* 01C0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xFF, 0xFF,  // ........
                        /* 01C8 */  0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x25, 0x00,  // ......%.
                        /* 01D0 */  0x00, 0x00, 0x2F, 0x70, 0x61, 0x72, 0x74, 0x69,  // ../parti
                        /* 01D8 */  0x63, 0x69, 0x70, 0x61, 0x6E, 0x74, 0x73, 0x2F,  // cipants/
                        /* 01E0 */  0x47, 0x45, 0x4E, 0x35, 0x2E, 0x44, 0x30, 0x2F,  // GEN5.D0/
                        /* 01E8 */  0x74, 0x72, 0x69, 0x70, 0x70, 0x6F, 0x69, 0x6E,  // trippoin
                        /* 01F0 */  0x74, 0x2F, 0x5F, 0x61, 0x63, 0x37, 0x00, 0x06,  // t/_ac7..
                        /* 01F8 */  0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xFF,  // ........
                        /* 0200 */  0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x25,  // .......%
                        /* 0208 */  0x00, 0x00, 0x00, 0x2F, 0x70, 0x61, 0x72, 0x74,  // .../part
                        /* 0210 */  0x69, 0x63, 0x69, 0x70, 0x61, 0x6E, 0x74, 0x73,  // icipants
                        /* 0218 */  0x2F, 0x47, 0x45, 0x4E, 0x35, 0x2E, 0x44, 0x30,  // /GEN5.D0
                        /* 0220 */  0x2F, 0x74, 0x72, 0x69, 0x70, 0x70, 0x6F, 0x69,  // /trippoi
                        /* 0228 */  0x6E, 0x74, 0x2F, 0x5F, 0x61, 0x63, 0x38, 0x00,  // nt/_ac8.
                        /* 0230 */  0x06, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 0238 */  0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00,  // ........
                        /* 0240 */  0x25, 0x00, 0x00, 0x00, 0x2F, 0x70, 0x61, 0x72,  // %.../par
                        /* 0248 */  0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6E, 0x74,  // ticipant
                        /* 0250 */  0x73, 0x2F, 0x47, 0x45, 0x4E, 0x35, 0x2E, 0x44,  // s/GEN5.D
                        /* 0258 */  0x30, 0x2F, 0x74, 0x72, 0x69, 0x70, 0x70, 0x6F,  // 0/trippo
                        /* 0260 */  0x69, 0x6E, 0x74, 0x2F, 0x5F, 0x61, 0x63, 0x39,  // int/_ac9
                        /* 0268 */  0x00, 0x06, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 0270 */  0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x00,  // ........
                        /* 0278 */  0x00, 0x25, 0x00, 0x00, 0x00, 0x2F, 0x70, 0x61,  // .%.../pa
                        /* 0280 */  0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6E,  // rticipan
                        /* 0288 */  0x74, 0x73, 0x2F, 0x47, 0x45, 0x4E, 0x35, 0x2E,  // ts/GEN5.
                        /* 0290 */  0x44, 0x30, 0x2F, 0x74, 0x72, 0x69, 0x70, 0x70,  // D0/tripp
                        /* 0298 */  0x6F, 0x69, 0x6E, 0x74, 0x2F, 0x5F, 0x63, 0x72,  // oint/_cr
                        /* 02A0 */  0x33, 0x00, 0x06, 0x00, 0x00, 0x00, 0x04, 0x00,  // 3.......
                        /* 02A8 */  0x00, 0x00, 0x18, 0x0D, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 02B0 */  0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0x2F, 0x70,  // ..%.../p
                        /* 02B8 */  0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,  // articipa
                        /* 02C0 */  0x6E, 0x74, 0x73, 0x2F, 0x47, 0x45, 0x4E, 0x35,  // nts/GEN5
                        /* 02C8 */  0x2E, 0x44, 0x30, 0x2F, 0x74, 0x72, 0x69, 0x70,  // .D0/trip
                        /* 02D0 */  0x70, 0x6F, 0x69, 0x6E, 0x74, 0x2F, 0x5F, 0x63,  // point/_c
                        /* 02D8 */  0x72, 0x74, 0x00, 0x06, 0x00, 0x00, 0x00, 0x04,  // rt......
                        /* 02E0 */  0x00, 0x00, 0x00, 0x18, 0x0D, 0x00, 0x00, 0x01,  // ........
                        /* 02E8 */  0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0x2F,  // ...%.../
                        /* 02F0 */  0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,  // particip
                        /* 02F8 */  0x61, 0x6E, 0x74, 0x73, 0x2F, 0x47, 0x45, 0x4E,  // ants/GEN
                        /* 0300 */  0x35, 0x2E, 0x44, 0x30, 0x2F, 0x74, 0x72, 0x69,  // 5.D0/tri
                        /* 0308 */  0x70, 0x70, 0x6F, 0x69, 0x6E, 0x74, 0x2F, 0x5F,  // ppoint/_
                        /* 0310 */  0x68, 0x6F, 0x74, 0x00, 0x06, 0x00, 0x00, 0x00,  // hot.....
                        /* 0318 */  0x04, 0x00, 0x00, 0x00, 0xF0, 0x0C, 0x00, 0x00,  // ........
                        /* 0320 */  0x01, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00,  // ....%...
                        /* 0328 */  0x2F, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,  // /partici
                        /* 0330 */  0x70, 0x61, 0x6E, 0x74, 0x73, 0x2F, 0x47, 0x45,  // pants/GE
                        /* 0338 */  0x4E, 0x35, 0x2E, 0x44, 0x30, 0x2F, 0x74, 0x72,  // N5.D0/tr
                        /* 0340 */  0x69, 0x70, 0x70, 0x6F, 0x69, 0x6E, 0x74, 0x2F,  // ippoint/
                        /* 0348 */  0x5F, 0x70, 0x73, 0x76, 0x00, 0x06, 0x00, 0x00,  // _psv....
                        /* 0350 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x68, 0x0D, 0x00,  // .....h..
                        /* 0358 */  0x00, 0x01, 0x00, 0x00, 0x00, 0x1B, 0x00, 0x00,  // ........
                        /* 0360 */  0x00, 0x2F, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,  // ./partic
                        /* 0368 */  0x69, 0x70, 0x61, 0x6E, 0x74, 0x73, 0x2F, 0x49,  // ipants/I
                        /* 0370 */  0x45, 0x54, 0x4D, 0x2E, 0x44, 0x30, 0x2F, 0x70,  // ETM.D0/p
                        /* 0378 */  0x73, 0x76, 0x74, 0x00, 0x07, 0x00, 0x00, 0x00,  // svt.....
                        /* 0380 */  0xCC, 0x02, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 0388 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0390 */  0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,  // ........
                        /* 0398 */  0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42,  // ....\_SB
                        /* 03A0 */  0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30, 0x2E, 0x42,  // _.PCI0.B
                        /* 03A8 */  0x30, 0x44, 0x34, 0x00, 0x08, 0x00, 0x00, 0x00,  // 0D4.....
                        /* 03B0 */  0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 03B8 */  0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x5F, 0x53,  // \_SB_._S
                        /* 03C0 */  0x41, 0x4E, 0x2E, 0x47, 0x45, 0x4E, 0x34, 0x00,  // AN.GEN4.
                        /* 03C8 */  0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                        /* 03D0 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 03D8 */  0x58, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // X.......
                        /* 03E0 */  0x04, 0x00, 0x00, 0x00, 0x78, 0x0C, 0x00, 0x00,  // ....x...
                        /* 03E8 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 03F0 */  0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 03F8 */  0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 0400 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 0408 */  0xBC, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // .4......
                        /* 0410 */  0x04, 0x00, 0x00, 0x00, 0x7D, 0x00, 0x00, 0x00,  // ....}...
                        /* 0418 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 0420 */  0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0428 */  0x04, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00,  // ....d...
                        /* 0430 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 0438 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0440 */  0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,  // ........
                        /* 0448 */  0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42,  // ....\_SB
                        /* 0450 */  0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30, 0x2E, 0x42,  // _.PCI0.B
                        /* 0458 */  0x30, 0x44, 0x34, 0x00, 0x08, 0x00, 0x00, 0x00,  // 0D4.....
                        /* 0460 */  0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0468 */  0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x5F, 0x53,  // \_SB_._S
                        /* 0470 */  0x41, 0x4E, 0x2E, 0x47, 0x45, 0x4E, 0x34, 0x00,  // AN.GEN4.
                        /* 0478 */  0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                        /* 0480 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 0488 */  0x58, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // X.......
                        /* 0490 */  0x04, 0x00, 0x00, 0x00, 0x94, 0x0C, 0x00, 0x00,  // ........
                        /* 0498 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 04A0 */  0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 04A8 */  0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 04B0 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 04B8 */  0xBC, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // .4......
                        /* 04C0 */  0x04, 0x00, 0x00, 0x00, 0x7D, 0x00, 0x00, 0x00,  // ....}...
                        /* 04C8 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 04D0 */  0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 04D8 */  0x04, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00,  // ....d...
                        /* 04E0 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 04E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 04F0 */  0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,  // ........
                        /* 04F8 */  0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42,  // ....\_SB
                        /* 0500 */  0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30, 0x2E, 0x42,  // _.PCI0.B
                        /* 0508 */  0x30, 0x44, 0x34, 0x00, 0x08, 0x00, 0x00, 0x00,  // 0D4.....
                        /* 0510 */  0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0518 */  0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x5F, 0x53,  // \_SB_._S
                        /* 0520 */  0x41, 0x4E, 0x2E, 0x47, 0x45, 0x4E, 0x34, 0x00,  // AN.GEN4.
                        /* 0528 */  0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                        /* 0530 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 0538 */  0x58, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // X.......
                        /* 0540 */  0x04, 0x00, 0x00, 0x00, 0x96, 0x0C, 0x00, 0x00,  // ........
                        /* 0548 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 0550 */  0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0558 */  0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 0560 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 0568 */  0xEC, 0x2C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // .,......
                        /* 0570 */  0x04, 0x00, 0x00, 0x00, 0x7D, 0x00, 0x00, 0x00,  // ....}...
                        /* 0578 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 0580 */  0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0588 */  0x04, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00,  // ....d...
                        /* 0590 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 0598 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 05A0 */  0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,  // ........
                        /* 05A8 */  0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42,  // ....\_SB
                        /* 05B0 */  0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30, 0x2E, 0x42,  // _.PCI0.B
                        /* 05B8 */  0x30, 0x44, 0x34, 0x00, 0x08, 0x00, 0x00, 0x00,  // 0D4.....
                        /* 05C0 */  0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 05C8 */  0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x5F, 0x53,  // \_SB_._S
                        /* 05D0 */  0x41, 0x4E, 0x2E, 0x47, 0x45, 0x4E, 0x34, 0x00,  // AN.GEN4.
                        /* 05D8 */  0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                        /* 05E0 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 05E8 */  0x58, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // X.......
                        /* 05F0 */  0x04, 0x00, 0x00, 0x00, 0x30, 0x0E, 0x00, 0x00,  // ....0...
                        /* 05F8 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 0600 */  0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0608 */  0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 0610 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 0618 */  0xEC, 0x2C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // .,......
                        /* 0620 */  0x04, 0x00, 0x00, 0x00, 0x7D, 0x00, 0x00, 0x00,  // ....}...
                        /* 0628 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 0630 */  0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0638 */  0x04, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00,  // ....d...
                        /* 0640 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 0648 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0650 */  0x01, 0x00, 0x00, 0x00, 0x1B, 0x00, 0x00, 0x00,  // ........
                        /* 0658 */  0x2F, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,  // /partici
                        /* 0660 */  0x70, 0x61, 0x6E, 0x74, 0x73, 0x2F, 0x54, 0x43,  // pants/TC
                        /* 0668 */  0x50, 0x55, 0x2E, 0x44, 0x30, 0x2F, 0x67, 0x74,  // PU.D0/gt
                        /* 0670 */  0x73, 0x68, 0x00, 0x06, 0x00, 0x00, 0x00, 0x04,  // sh......
                        /* 0678 */  0x00, 0x00, 0x00, 0xC0, 0x0A, 0x00, 0x00, 0x01,  // ........
                        /* 0680 */  0x00, 0x00, 0x00, 0x26, 0x00, 0x00, 0x00, 0x2F,  // ...&.../
                        /* 0688 */  0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,  // particip
                        /* 0690 */  0x61, 0x6E, 0x74, 0x73, 0x2F, 0x54, 0x43, 0x50,  // ants/TCP
                        /* 0698 */  0x55, 0x2E, 0x44, 0x30, 0x2F, 0x6C, 0x61, 0x73,  // U.D0/las
                        /* 06A0 */  0x74, 0x5F, 0x65, 0x77, 0x6D, 0x61, 0x5F, 0x70,  // t_ewma_p
                        /* 06A8 */  0x6F, 0x77, 0x65, 0x72, 0x00, 0x1A, 0x00, 0x00,  // ower....
                        /* 06B0 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x57, 0x2B, 0x00,  // .....W+.
                        /* 06B8 */  0x00, 0x01, 0x00, 0x00, 0x00, 0x26, 0x00, 0x00,  // .....&..
                        /* 06C0 */  0x00, 0x2F, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,  // ./partic
                        /* 06C8 */  0x69, 0x70, 0x61, 0x6E, 0x74, 0x73, 0x2F, 0x54,  // ipants/T
                        /* 06D0 */  0x43, 0x50, 0x55, 0x2E, 0x44, 0x30, 0x2F, 0x6C,  // CPU.D0/l
                        /* 06D8 */  0x61, 0x73, 0x74, 0x5F, 0x70, 0x6F, 0x77, 0x65,  // ast_powe
                        /* 06E0 */  0x72, 0x5F, 0x75, 0x73, 0x65, 0x64, 0x00, 0x1A,  // r_used..
                        /* 06E8 */  0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x9A,  // ........
                        /* 06F0 */  0x2A, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1B,  // *.......
                        /* 06F8 */  0x00, 0x00, 0x00, 0x2F, 0x70, 0x61, 0x72, 0x74,  // .../part
                        /* 0700 */  0x69, 0x63, 0x69, 0x70, 0x61, 0x6E, 0x74, 0x73,  // icipants
                        /* 0708 */  0x2F, 0x54, 0x43, 0x50, 0x55, 0x2E, 0x44, 0x30,  // /TCPU.D0
                        /* 0710 */  0x2F, 0x70, 0x70, 0x63, 0x63, 0x00, 0x07, 0x00,  // /ppcc...
                        /* 0718 */  0x00, 0x00, 0x9C, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0720 */  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0728 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0730 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0738 */  0x00, 0x00, 0xAC, 0x0D, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0740 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x50, 0x46,  // ......PF
                        /* 0748 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0750 */  0x00, 0x00, 0x60, 0x6D, 0x00, 0x00, 0x00, 0x00,  // ..`m....
                        /* 0758 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x7D,  // .......}
                        /* 0760 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0768 */  0x00, 0x00, 0xF4, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0770 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 0778 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0780 */  0x00, 0x00, 0xB8, 0x88, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0788 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xB8, 0x88,  // ........
                        /* 0790 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0798 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 07A0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 07A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 07B0 */  0x00, 0x00, 0xF4, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 07B8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x25, 0x00,  // ......%.
                        /* 07C0 */  0x00, 0x00, 0x2F, 0x70, 0x61, 0x72, 0x74, 0x69,  // ../parti
                        /* 07C8 */  0x63, 0x69, 0x70, 0x61, 0x6E, 0x74, 0x73, 0x2F,  // cipants/
                        /* 07D0 */  0x54, 0x43, 0x50, 0x55, 0x2E, 0x44, 0x30, 0x2F,  // TCPU.D0/
                        /* 07D8 */  0x74, 0x72, 0x69, 0x70, 0x70, 0x6F, 0x69, 0x6E,  // trippoin
                        /* 07E0 */  0x74, 0x2F, 0x5F, 0x61, 0x63, 0x30, 0x00, 0x06,  // t/_ac0..
                        /* 07E8 */  0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x94,  // ........
                        /* 07F0 */  0x0E, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x25,  // .......%
                        /* 07F8 */  0x00, 0x00, 0x00, 0x2F, 0x70, 0x61, 0x72, 0x74,  // .../part
                        /* 0800 */  0x69, 0x63, 0x69, 0x70, 0x61, 0x6E, 0x74, 0x73,  // icipants
                        /* 0808 */  0x2F, 0x54, 0x43, 0x50, 0x55, 0x2E, 0x44, 0x30,  // /TCPU.D0
                        /* 0810 */  0x2F, 0x74, 0x72, 0x69, 0x70, 0x70, 0x6F, 0x69,  // /trippoi
                        /* 0818 */  0x6E, 0x74, 0x2F, 0x5F, 0x61, 0x63, 0x31, 0x00,  // nt/_ac1.
                        /* 0820 */  0x06, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 0828 */  0x62, 0x0E, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // b.......
                        /* 0830 */  0x25, 0x00, 0x00, 0x00, 0x2F, 0x70, 0x61, 0x72,  // %.../par
                        /* 0838 */  0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6E, 0x74,  // ticipant
                        /* 0840 */  0x73, 0x2F, 0x54, 0x43, 0x50, 0x55, 0x2E, 0x44,  // s/TCPU.D
                        /* 0848 */  0x30, 0x2F, 0x74, 0x72, 0x69, 0x70, 0x70, 0x6F,  // 0/trippo
                        /* 0850 */  0x69, 0x6E, 0x74, 0x2F, 0x5F, 0x61, 0x63, 0x32,  // int/_ac2
                        /* 0858 */  0x00, 0x06, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 0860 */  0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x00,  // ........
                        /* 0868 */  0x00, 0x25, 0x00, 0x00, 0x00, 0x2F, 0x70, 0x61,  // .%.../pa
                        /* 0870 */  0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6E,  // rticipan
                        /* 0878 */  0x74, 0x73, 0x2F, 0x54, 0x43, 0x50, 0x55, 0x2E,  // ts/TCPU.
                        /* 0880 */  0x44, 0x30, 0x2F, 0x74, 0x72, 0x69, 0x70, 0x70,  // D0/tripp
                        /* 0888 */  0x6F, 0x69, 0x6E, 0x74, 0x2F, 0x5F, 0x61, 0x63,  // oint/_ac
                        /* 0890 */  0x33, 0x00, 0x06, 0x00, 0x00, 0x00, 0x04, 0x00,  // 3.......
                        /* 0898 */  0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00,  // ........
                        /* 08A0 */  0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0x2F, 0x70,  // ..%.../p
                        /* 08A8 */  0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,  // articipa
                        /* 08B0 */  0x6E, 0x74, 0x73, 0x2F, 0x54, 0x43, 0x50, 0x55,  // nts/TCPU
                        /* 08B8 */  0x2E, 0x44, 0x30, 0x2F, 0x74, 0x72, 0x69, 0x70,  // .D0/trip
                        /* 08C0 */  0x70, 0x6F, 0x69, 0x6E, 0x74, 0x2F, 0x5F, 0x61,  // point/_a
                        /* 08C8 */  0x63, 0x34, 0x00, 0x06, 0x00, 0x00, 0x00, 0x04,  // c4......
                        /* 08D0 */  0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x01,  // ........
                        /* 08D8 */  0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0x2F,  // ...%.../
                        /* 08E0 */  0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,  // particip
                        /* 08E8 */  0x61, 0x6E, 0x74, 0x73, 0x2F, 0x54, 0x43, 0x50,  // ants/TCP
                        /* 08F0 */  0x55, 0x2E, 0x44, 0x30, 0x2F, 0x74, 0x72, 0x69,  // U.D0/tri
                        /* 08F8 */  0x70, 0x70, 0x6F, 0x69, 0x6E, 0x74, 0x2F, 0x5F,  // ppoint/_
                        /* 0900 */  0x61, 0x63, 0x35, 0x00, 0x06, 0x00, 0x00, 0x00,  // ac5.....
                        /* 0908 */  0x04, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                        /* 0910 */  0x01, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00,  // ....%...
                        /* 0918 */  0x2F, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,  // /partici
                        /* 0920 */  0x70, 0x61, 0x6E, 0x74, 0x73, 0x2F, 0x54, 0x43,  // pants/TC
                        /* 0928 */  0x50, 0x55, 0x2E, 0x44, 0x30, 0x2F, 0x74, 0x72,  // PU.D0/tr
                        /* 0930 */  0x69, 0x70, 0x70, 0x6F, 0x69, 0x6E, 0x74, 0x2F,  // ippoint/
                        /* 0938 */  0x5F, 0x61, 0x63, 0x36, 0x00, 0x06, 0x00, 0x00,  // _ac6....
                        /* 0940 */  0x00, 0x04, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF,  // ........
                        /* 0948 */  0xFF, 0x01, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00,  // .....%..
                        /* 0950 */  0x00, 0x2F, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,  // ./partic
                        /* 0958 */  0x69, 0x70, 0x61, 0x6E, 0x74, 0x73, 0x2F, 0x54,  // ipants/T
                        /* 0960 */  0x43, 0x50, 0x55, 0x2E, 0x44, 0x30, 0x2F, 0x74,  // CPU.D0/t
                        /* 0968 */  0x72, 0x69, 0x70, 0x70, 0x6F, 0x69, 0x6E, 0x74,  // rippoint
                        /* 0970 */  0x2F, 0x5F, 0x61, 0x63, 0x37, 0x00, 0x06, 0x00,  // /_ac7...
                        /* 0978 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xFF, 0xFF,  // ........
                        /* 0980 */  0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x25, 0x00,  // ......%.
                        /* 0988 */  0x00, 0x00, 0x2F, 0x70, 0x61, 0x72, 0x74, 0x69,  // ../parti
                        /* 0990 */  0x63, 0x69, 0x70, 0x61, 0x6E, 0x74, 0x73, 0x2F,  // cipants/
                        /* 0998 */  0x54, 0x43, 0x50, 0x55, 0x2E, 0x44, 0x30, 0x2F,  // TCPU.D0/
                        /* 09A0 */  0x74, 0x72, 0x69, 0x70, 0x70, 0x6F, 0x69, 0x6E,  // trippoin
                        /* 09A8 */  0x74, 0x2F, 0x5F, 0x61, 0x63, 0x38, 0x00, 0x06,  // t/_ac8..
                        /* 09B0 */  0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xFF,  // ........
                        /* 09B8 */  0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x25,  // .......%
                        /* 09C0 */  0x00, 0x00, 0x00, 0x2F, 0x70, 0x61, 0x72, 0x74,  // .../part
                        /* 09C8 */  0x69, 0x63, 0x69, 0x70, 0x61, 0x6E, 0x74, 0x73,  // icipants
                        /* 09D0 */  0x2F, 0x54, 0x43, 0x50, 0x55, 0x2E, 0x44, 0x30,  // /TCPU.D0
                        /* 09D8 */  0x2F, 0x74, 0x72, 0x69, 0x70, 0x70, 0x6F, 0x69,  // /trippoi
                        /* 09E0 */  0x6E, 0x74, 0x2F, 0x5F, 0x61, 0x63, 0x39, 0x00,  // nt/_ac9.
                        /* 09E8 */  0x06, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 09F0 */  0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00,  // ........
                        /* 09F8 */  0x25, 0x00, 0x00, 0x00, 0x2F, 0x70, 0x61, 0x72,  // %.../par
                        /* 0A00 */  0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6E, 0x74,  // ticipant
                        /* 0A08 */  0x73, 0x2F, 0x54, 0x43, 0x50, 0x55, 0x2E, 0x44,  // s/TCPU.D
                        /* 0A10 */  0x30, 0x2F, 0x74, 0x72, 0x69, 0x70, 0x70, 0x6F,  // 0/trippo
                        /* 0A18 */  0x69, 0x6E, 0x74, 0x2F, 0x5F, 0x63, 0x72, 0x33,  // int/_cr3
                        /* 0A20 */  0x00, 0x06, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 0A28 */  0x00, 0x8E, 0x0F, 0x00, 0x00, 0x01, 0x00, 0x00,  // ........
                        /* 0A30 */  0x00, 0x25, 0x00, 0x00, 0x00, 0x2F, 0x70, 0x61,  // .%.../pa
                        /* 0A38 */  0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6E,  // rticipan
                        /* 0A40 */  0x74, 0x73, 0x2F, 0x54, 0x43, 0x50, 0x55, 0x2E,  // ts/TCPU.
                        /* 0A48 */  0x44, 0x30, 0x2F, 0x74, 0x72, 0x69, 0x70, 0x70,  // D0/tripp
                        /* 0A50 */  0x6F, 0x69, 0x6E, 0x74, 0x2F, 0x5F, 0x63, 0x72,  // oint/_cr
                        /* 0A58 */  0x74, 0x00, 0x06, 0x00, 0x00, 0x00, 0x04, 0x00,  // t.......
                        /* 0A60 */  0x00, 0x00, 0x8E, 0x0F, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 0A68 */  0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0x2F, 0x70,  // ..%.../p
                        /* 0A70 */  0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,  // articipa
                        /* 0A78 */  0x6E, 0x74, 0x73, 0x2F, 0x54, 0x43, 0x50, 0x55,  // nts/TCPU
                        /* 0A80 */  0x2E, 0x44, 0x30, 0x2F, 0x74, 0x72, 0x69, 0x70,  // .D0/trip
                        /* 0A88 */  0x70, 0x6F, 0x69, 0x6E, 0x74, 0x2F, 0x5F, 0x68,  // point/_h
                        /* 0A90 */  0x6F, 0x74, 0x00, 0x06, 0x00, 0x00, 0x00, 0x04,  // ot......
                        /* 0A98 */  0x00, 0x00, 0x00, 0x8E, 0x0F, 0x00, 0x00, 0x01,  // ........
                        /* 0AA0 */  0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0x2F,  // ...%.../
                        /* 0AA8 */  0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,  // particip
                        /* 0AB0 */  0x61, 0x6E, 0x74, 0x73, 0x2F, 0x54, 0x43, 0x50,  // ants/TCP
                        /* 0AB8 */  0x55, 0x2E, 0x44, 0x30, 0x2F, 0x74, 0x72, 0x69,  // U.D0/tri
                        /* 0AC0 */  0x70, 0x70, 0x6F, 0x69, 0x6E, 0x74, 0x2F, 0x5F,  // ppoint/_
                        /* 0AC8 */  0x70, 0x73, 0x76, 0x00, 0x06, 0x00, 0x00, 0x00,  // psv.....
                        /* 0AD0 */  0x04, 0x00, 0x00, 0x00, 0x94, 0x0E, 0x00, 0x00,  // ........
                        /* 0AD8 */  0x01, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00,  // ........
                        /* 0AE0 */  0x2F, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2F,  // /shared/
                        /* 0AE8 */  0x65, 0x78, 0x70, 0x6F, 0x72, 0x74, 0x2F, 0x61,  // export/a
                        /* 0AF0 */  0x70, 0x61, 0x74, 0x00, 0x07, 0x00, 0x00, 0x00,  // pat.....
                        /* 0AF8 */  0xDA, 0x03, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 0B00 */  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0B08 */  0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 0B10 */  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,  // ........
                        /* 0B18 */  0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0B20 */  0x52, 0x65, 0x63, 0x00, 0x08, 0x00, 0x00, 0x00,  // Rec.....
                        /* 0B28 */  0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0B30 */  0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x49, 0x45,  // \_SB_.IE
                        /* 0B38 */  0x54, 0x4D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0E,  // TM......
                        /* 0B40 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08,  // ........
                        /* 0B48 */  0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0B50 */  0x00, 0x00, 0x00, 0x50, 0x53, 0x56, 0x54, 0x00,  // ...PSVT.
                        /* 0B58 */  0x08, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 0B60 */  0x00, 0x00, 0x00, 0x00, 0x34, 0x36, 0x63, 0x00,  // ....46c.
                        /* 0B68 */  0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 0B70 */  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,  // ........
                        /* 0B78 */  0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0B80 */  0x52, 0x65, 0x63, 0x00, 0x08, 0x00, 0x00, 0x00,  // Rec.....
                        /* 0B88 */  0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0B90 */  0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x49, 0x45,  // \_SB_.IE
                        /* 0B98 */  0x54, 0x4D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0E,  // TM......
                        /* 0BA0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08,  // ........
                        /* 0BA8 */  0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0BB0 */  0x00, 0x00, 0x00, 0x50, 0x49, 0x44, 0x41, 0x00,  // ...PIDA.
                        /* 0BB8 */  0x08, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 0BC0 */  0x00, 0x00, 0x00, 0x00, 0x34, 0x36, 0x63, 0x00,  // ....46c.
                        /* 0BC8 */  0x04, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,  // ........
                        /* 0BD0 */  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,  // ........
                        /* 0BD8 */  0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0BE0 */  0x42, 0x65, 0x74, 0x74, 0x65, 0x72, 0x00, 0x08,  // Better..
                        /* 0BE8 */  0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0BF0 */  0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F,  // ...\_SB_
                        /* 0BF8 */  0x2E, 0x49, 0x45, 0x54, 0x4D, 0x00, 0x04, 0x00,  // .IETM...
                        /* 0C00 */  0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0C08 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x05, 0x00,  // ........
                        /* 0C10 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x53,  // ......PS
                        /* 0C18 */  0x56, 0x54, 0x00, 0x08, 0x00, 0x00, 0x00, 0x04,  // VT......
                        /* 0C20 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34,  // .......4
                        /* 0C28 */  0x37, 0x63, 0x00, 0x04, 0x00, 0x00, 0x00, 0x05,  // 7c......
                        /* 0C30 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08,  // ........
                        /* 0C38 */  0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0C40 */  0x00, 0x00, 0x00, 0x42, 0x65, 0x74, 0x74, 0x65,  // ...Bette
                        /* 0C48 */  0x72, 0x00, 0x08, 0x00, 0x00, 0x00, 0x0B, 0x00,  // r.......
                        /* 0C50 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F,  // ......\_
                        /* 0C58 */  0x53, 0x42, 0x5F, 0x2E, 0x49, 0x45, 0x54, 0x4D,  // SB_.IETM
                        /* 0C60 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00,  // ........
                        /* 0C68 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,  // ........
                        /* 0C70 */  0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0C78 */  0x00, 0x50, 0x49, 0x44, 0x41, 0x00, 0x08, 0x00,  // .PIDA...
                        /* 0C80 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0C88 */  0x00, 0x00, 0x34, 0x37, 0x63, 0x00, 0x04, 0x00,  // ..47c...
                        /* 0C90 */  0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0C98 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x05, 0x00,  // ........
                        /* 0CA0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x65,  // ......Be
                        /* 0CA8 */  0x73, 0x74, 0x00, 0x08, 0x00, 0x00, 0x00, 0x0B,  // st......
                        /* 0CB0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C,  // .......\
                        /* 0CB8 */  0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x49, 0x45, 0x54,  // _SB_.IET
                        /* 0CC0 */  0x4D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0E, 0x00,  // M.......
                        /* 0CC8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 0CD0 */  0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0CD8 */  0x00, 0x00, 0x50, 0x53, 0x56, 0x54, 0x00, 0x08,  // ..PSVT..
                        /* 0CE0 */  0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0CE8 */  0x00, 0x00, 0x00, 0x34, 0x38, 0x63, 0x00, 0x04,  // ...48c..
                        /* 0CF0 */  0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0CF8 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x05,  // ........
                        /* 0D00 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42,  // .......B
                        /* 0D08 */  0x65, 0x73, 0x74, 0x00, 0x08, 0x00, 0x00, 0x00,  // est.....
                        /* 0D10 */  0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0D18 */  0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x49, 0x45,  // \_SB_.IE
                        /* 0D20 */  0x54, 0x4D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0E,  // TM......
                        /* 0D28 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08,  // ........
                        /* 0D30 */  0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0D38 */  0x00, 0x00, 0x00, 0x50, 0x49, 0x44, 0x41, 0x00,  // ...PIDA.
                        /* 0D40 */  0x08, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 0D48 */  0x00, 0x00, 0x00, 0x00, 0x34, 0x38, 0x63, 0x00,  // ....48c.
                        /* 0D50 */  0x04, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,  // ........
                        /* 0D58 */  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,  // ........
                        /* 0D60 */  0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0D68 */  0x44, 0x43, 0x20, 0x53, 0x61, 0x76, 0x65, 0x72,  // DC Saver
                        /* 0D70 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00,  // ........
                        /* 0D78 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53,  // .....\_S
                        /* 0D80 */  0x42, 0x5F, 0x2E, 0x49, 0x45, 0x54, 0x4D, 0x00,  // B_.IETM.
                        /* 0D88 */  0x04, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00,  // ........
                        /* 0D90 */  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,  // ........
                        /* 0D98 */  0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0DA0 */  0x50, 0x53, 0x56, 0x54, 0x00, 0x08, 0x00, 0x00,  // PSVT....
                        /* 0DA8 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0DB0 */  0x00, 0x34, 0x35, 0x63, 0x00, 0x04, 0x00, 0x00,  // .45c....
                        /* 0DB8 */  0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0DC0 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00,  // ........
                        /* 0DC8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x43, 0x20,  // .....DC 
                        /* 0DD0 */  0x53, 0x61, 0x76, 0x65, 0x72, 0x00, 0x08, 0x00,  // Saver...
                        /* 0DD8 */  0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0DE0 */  0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E,  // ..\_SB_.
                        /* 0DE8 */  0x49, 0x45, 0x54, 0x4D, 0x00, 0x04, 0x00, 0x00,  // IETM....
                        /* 0DF0 */  0x00, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0DF8 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00,  // ........
                        /* 0E00 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x49, 0x44,  // .....PID
                        /* 0E08 */  0x41, 0x00, 0x08, 0x00, 0x00, 0x00, 0x04, 0x00,  // A.......
                        /* 0E10 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x35,  // ......45
                        /* 0E18 */  0x63, 0x00, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00,  // c.......
                        /* 0E20 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 0E28 */  0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0E30 */  0x00, 0x00, 0x4D, 0x52, 0x00, 0x08, 0x00, 0x00,  // ..MR....
                        /* 0E38 */  0x00, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0E40 */  0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x49,  // .\_SB_.I
                        /* 0E48 */  0x45, 0x54, 0x4D, 0x00, 0x04, 0x00, 0x00, 0x00,  // ETM.....
                        /* 0E50 */  0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0E58 */  0x08, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,  // ........
                        /* 0E60 */  0x00, 0x00, 0x00, 0x00, 0x50, 0x53, 0x56, 0x54,  // ....PSVT
                        /* 0E68 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00,  // ........
                        /* 0E70 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x4D, 0x52, 0x00,  // .....MR.
                        /* 0E78 */  0x04, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,  // ........
                        /* 0E80 */  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,  // ........
                        /* 0E88 */  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0E90 */  0x4D, 0x52, 0x00, 0x08, 0x00, 0x00, 0x00, 0x0B,  // MR......
                        /* 0E98 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C,  // .......\
                        /* 0EA0 */  0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x49, 0x45, 0x54,  // _SB_.IET
                        /* 0EA8 */  0x4D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0E, 0x00,  // M.......
                        /* 0EB0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 0EB8 */  0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0EC0 */  0x00, 0x00, 0x50, 0x49, 0x44, 0x41, 0x00, 0x08,  // ..PIDA..
                        /* 0EC8 */  0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0ED0 */  0x00, 0x00, 0x00, 0x4D, 0x52, 0x00, 0x01, 0x00,  // ...MR...
                        /* 0ED8 */  0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x2F, 0x73,  // ....../s
                        /* 0EE0 */  0x68, 0x61, 0x72, 0x65, 0x64, 0x2F, 0x65, 0x78,  // hared/ex
                        /* 0EE8 */  0x70, 0x6F, 0x72, 0x74, 0x2F, 0x61, 0x70, 0x63,  // port/apc
                        /* 0EF0 */  0x74, 0x00, 0x07, 0x00, 0x00, 0x00, 0x2C, 0x0D,  // t.....,.
                        /* 0EF8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 0F00 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0F08 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0F10 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x14, 0x00,  // ........
                        /* 0F18 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0F20 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0F28 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 0F30 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0F38 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0F40 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 0F48 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0F50 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0F58 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 0F60 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0F68 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0F70 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 0F78 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0F80 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0F88 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 0F90 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0F98 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0FA0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 0FA8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0FB0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0FB8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 0FC0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0FC8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0FD0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 0FD8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0FE0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0FE8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 0FF0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0FF8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1000 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1010 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1018 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1028 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1030 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1038 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1040 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1048 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1058 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1060 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1068 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1070 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1078 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1080 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1088 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1090 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1098 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 10A0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 10A8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 10B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 10B8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 10C0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 10C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 10D0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 10D8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 10E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 10E8 */  0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 10F0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x16, 0x00,  // ........
                        /* 10F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1100 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1108 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x07, 0x00,  // ........
                        /* 1110 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1118 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1120 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1128 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1130 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1138 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1140 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1148 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1150 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1158 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1160 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1168 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1170 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1178 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1180 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1188 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1190 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1198 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 11A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 11A8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 11B0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 11B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 11C0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 11C8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 11D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 11D8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 11E0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 11E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 11F0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 11F8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1200 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1208 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1210 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1218 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1220 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1228 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1230 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1238 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1240 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1248 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1250 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1258 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1260 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1268 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1270 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1278 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1280 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1288 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1290 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1298 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 12A0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 12A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 12B0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 12B8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 12C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 12C8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 12D0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x16, 0x00,  // ........
                        /* 12D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 12E0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 12E8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 12F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 12F8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1300 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1308 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1310 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1318 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1320 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1328 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1330 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1338 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1340 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1348 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1350 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1358 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1360 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1368 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1370 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1378 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1380 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1388 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1390 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1398 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 13A0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 13A8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 13B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 13B8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 13C0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 13C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 13D0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 13D8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 13E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 13E8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 13F0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 13F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1400 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1408 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1410 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1418 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1420 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1428 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1430 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1438 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1440 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1448 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1450 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1458 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1460 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1468 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1470 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1478 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1480 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1488 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1490 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1498 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 14A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 14A8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 14B0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x16, 0x00,  // ........
                        /* 14B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 14C0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 14C8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00,  // ........
                        /* 14D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 14D8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 14E0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 14E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 14F0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 14F8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1500 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1508 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1510 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1518 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1520 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1528 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1530 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1538 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1540 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1548 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1550 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1558 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1560 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1568 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1570 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1578 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1580 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1588 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1590 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1598 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 15A0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 15A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 15B0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 15B8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 15C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 15C8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 15D0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 15D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 15E0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 15E8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 15F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 15F8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1600 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1608 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1610 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1618 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1620 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1628 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1630 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1638 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1640 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1648 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1650 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1658 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1660 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1668 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1670 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1678 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1680 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1688 */  0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1690 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x16, 0x00,  // ........
                        /* 1698 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 16A0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 16A8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x03, 0x00,  // ........
                        /* 16B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 16B8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 16C0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 16C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 16D0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 16D8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 16E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 16E8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 16F0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 16F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1700 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1708 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1710 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1718 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1720 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1728 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1730 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1738 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1740 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1748 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1750 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1758 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1760 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1768 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1770 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1778 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1780 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1788 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1790 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1798 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 17A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 17A8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 17B0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 17B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 17C0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 17C8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 17D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 17D8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 17E0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 17E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 17F0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 17F8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1800 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1808 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1810 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1818 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1820 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1828 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1830 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1838 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1840 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1848 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1850 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1858 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1860 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1868 */  0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1870 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x16, 0x00,  // ........
                        /* 1878 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1880 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1888 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1890 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1898 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 18A0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 18A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 18B0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 18B8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 18C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 18C8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 18D0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 18D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 18E0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 18E8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 18F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 18F8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1900 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1908 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1910 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1918 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1920 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1928 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1930 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1938 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1940 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1948 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1950 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1958 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1960 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1968 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1970 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1978 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1980 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1988 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1990 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1998 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 19A0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 19A8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 19B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 19B8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 19C0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 19C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 19D0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 19D8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 19E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 19E8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 19F0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 19F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1A00 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1A08 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1A10 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1A18 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1A20 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1A28 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1A30 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1A38 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1A40 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1A48 */  0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1A50 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x16, 0x00,  // ........
                        /* 1A58 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1A60 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1A68 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1A70 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1A78 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1A80 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x16, 0x00,  // ........
                        /* 1A88 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1A90 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1A98 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x07, 0x00,  // ........
                        /* 1AA0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1AA8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1AB0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x16, 0x00,  // ........
                        /* 1AB8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1AC0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1AC8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00,  // ........
                        /* 1AD0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1AD8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1AE0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x16, 0x00,  // ........
                        /* 1AE8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1AF0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1AF8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x03, 0x00,  // ........
                        /* 1B00 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1B08 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1B10 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x16, 0x00,  // ........
                        /* 1B18 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1B20 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1B28 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1B30 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1B38 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1B40 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1B48 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1B50 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1B58 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1B60 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1B68 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1B70 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1B78 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1B80 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1B88 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1B90 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1B98 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1BA0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1BA8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1BB0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1BB8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1BC0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1BC8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1BD0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1BD8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1BE0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1BE8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1BF0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1BF8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1C00 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1C08 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1C10 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1C18 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1C20 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1C28 */  0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x2F, 0x73,  // ....../s
                        /* 1C30 */  0x68, 0x61, 0x72, 0x65, 0x64, 0x2F, 0x65, 0x78,  // hared/ex
                        /* 1C38 */  0x70, 0x6F, 0x72, 0x74, 0x2F, 0x70, 0x62, 0x61,  // port/pba
                        /* 1C40 */  0x74, 0x00, 0x07, 0x00, 0x00, 0x00, 0x2C, 0x0D,  // t.....,.
                        /* 1C48 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00,  // ........
                        /* 1C50 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1C58 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1C60 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 1C68 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x65,  // ......de
                        /* 1C70 */  0x66, 0x61, 0x75, 0x6C, 0x74, 0x00, 0x08, 0x00,  // fault...
                        /* 1C78 */  0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1C80 */  0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E,  // ..\_SB_.
                        /* 1C88 */  0x50, 0x43, 0x49, 0x30, 0x2E, 0x42, 0x30, 0x44,  // PCI0.B0D
                        /* 1C90 */  0x34, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00,  // 4.......
                        /* 1C98 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 1CA0 */  0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1CA8 */  0x00, 0x00, 0x50, 0x53, 0x79, 0x73, 0x50, 0x4C,  // ..PSysPL
                        /* 1CB0 */  0x31, 0x4C, 0x69, 0x6D, 0x69, 0x74, 0x00, 0x08,  // 1Limit..
                        /* 1CB8 */  0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1CC0 */  0x00, 0x00, 0x00, 0x34, 0x35, 0x30, 0x30, 0x30,  // ...45000
                        /* 1CC8 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,  // ........
                        /* 1CD0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,  // ........
                        /* 1CD8 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1CE0 */  0x00, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6C, 0x74,  // .default
                        /* 1CE8 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,  // ........
                        /* 1CF0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53,  // .....\_S
                        /* 1CF8 */  0x42, 0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30, 0x2E,  // B_.PCI0.
                        /* 1D00 */  0x42, 0x30, 0x44, 0x34, 0x00, 0x04, 0x00, 0x00,  // B0D4....
                        /* 1D08 */  0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1D10 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00,  // ........
                        /* 1D18 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x53, 0x79,  // .....PSy
                        /* 1D20 */  0x73, 0x50, 0x4C, 0x32, 0x4C, 0x69, 0x6D, 0x69,  // sPL2Limi
                        /* 1D28 */  0x74, 0x00, 0x08, 0x00, 0x00, 0x00, 0x06, 0x00,  // t.......
                        /* 1D30 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x35,  // ......45
                        /* 1D38 */  0x30, 0x30, 0x30, 0x00, 0x04, 0x00, 0x00, 0x00,  // 000.....
                        /* 1D40 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1D48 */  0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,  // ........
                        /* 1D50 */  0x00, 0x00, 0x00, 0x00, 0x64, 0x65, 0x66, 0x61,  // ....defa
                        /* 1D58 */  0x75, 0x6C, 0x74, 0x00, 0x08, 0x00, 0x00, 0x00,  // ult.....
                        /* 1D60 */  0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1D68 */  0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x50, 0x43,  // \_SB_.PC
                        /* 1D70 */  0x49, 0x30, 0x2E, 0x42, 0x30, 0x44, 0x34, 0x00,  // I0.B0D4.
                        /* 1D78 */  0x04, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00,  // ........
                        /* 1D80 */  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,  // ........
                        /* 1D88 */  0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1D90 */  0x50, 0x4C, 0x34, 0x50, 0x6F, 0x77, 0x65, 0x72,  // PL4Power
                        /* 1D98 */  0x4C, 0x69, 0x6D, 0x69, 0x74, 0x00, 0x08, 0x00,  // Limit...
                        /* 1DA0 */  0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1DA8 */  0x00, 0x00, 0x36, 0x30, 0x30, 0x30, 0x30, 0x00,  // ..60000.
                        /* 1DB0 */  0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,  // ........
                        /* 1DB8 */  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,  // ........
                        /* 1DC0 */  0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1DC8 */  0x6C, 0x6F, 0x77, 0x5F, 0x62, 0x61, 0x74, 0x74,  // low_batt
                        /* 1DD0 */  0x5F, 0x6E, 0x6F, 0x5F, 0x62, 0x72, 0x69, 0x63,  // _no_bric
                        /* 1DD8 */  0x6B, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00,  // k.......
                        /* 1DE0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F,  // ......\_
                        /* 1DE8 */  0x53, 0x42, 0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30,  // SB_.PCI0
                        /* 1DF0 */  0x2E, 0x42, 0x30, 0x44, 0x34, 0x00, 0x04, 0x00,  // .B0D4...
                        /* 1DF8 */  0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1E00 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x0D, 0x00,  // ........
                        /* 1E08 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x53,  // ......PS
                        /* 1E10 */  0x79, 0x73, 0x50, 0x4C, 0x31, 0x4C, 0x69, 0x6D,  // ysPL1Lim
                        /* 1E18 */  0x69, 0x74, 0x00, 0x08, 0x00, 0x00, 0x00, 0x06,  // it......
                        /* 1E20 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33,  // .......3
                        /* 1E28 */  0x31, 0x35, 0x30, 0x30, 0x00, 0x04, 0x00, 0x00,  // 1500....
                        /* 1E30 */  0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1E38 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00,  // ........
                        /* 1E40 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x6C, 0x6F, 0x77,  // .....low
                        /* 1E48 */  0x5F, 0x62, 0x61, 0x74, 0x74, 0x5F, 0x6E, 0x6F,  // _batt_no
                        /* 1E50 */  0x5F, 0x62, 0x72, 0x69, 0x63, 0x6B, 0x00, 0x08,  // _brick..
                        /* 1E58 */  0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1E60 */  0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F,  // ...\_SB_
                        /* 1E68 */  0x2E, 0x50, 0x43, 0x49, 0x30, 0x2E, 0x42, 0x30,  // .PCI0.B0
                        /* 1E70 */  0x44, 0x34, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09,  // D4......
                        /* 1E78 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08,  // ........
                        /* 1E80 */  0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1E88 */  0x00, 0x00, 0x00, 0x50, 0x53, 0x79, 0x73, 0x50,  // ...PSysP
                        /* 1E90 */  0x4C, 0x32, 0x4C, 0x69, 0x6D, 0x69, 0x74, 0x00,  // L2Limit.
                        /* 1E98 */  0x08, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,  // ........
                        /* 1EA0 */  0x00, 0x00, 0x00, 0x00, 0x34, 0x35, 0x30, 0x30,  // ....4500
                        /* 1EA8 */  0x30, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00,  // 0.......
                        /* 1EB0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 1EB8 */  0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1EC0 */  0x00, 0x00, 0x6C, 0x6F, 0x77, 0x5F, 0x62, 0x61,  // ..low_ba
                        /* 1EC8 */  0x74, 0x74, 0x5F, 0x6E, 0x6F, 0x5F, 0x62, 0x72,  // tt_no_br
                        /* 1ED0 */  0x69, 0x63, 0x6B, 0x00, 0x08, 0x00, 0x00, 0x00,  // ick.....
                        /* 1ED8 */  0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1EE0 */  0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x50, 0x43,  // \_SB_.PC
                        /* 1EE8 */  0x49, 0x30, 0x2E, 0x42, 0x30, 0x44, 0x34, 0x00,  // I0.B0D4.
                        /* 1EF0 */  0x04, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00,  // ........
                        /* 1EF8 */  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,  // ........
                        /* 1F00 */  0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1F08 */  0x50, 0x4C, 0x34, 0x50, 0x6F, 0x77, 0x65, 0x72,  // PL4Power
                        /* 1F10 */  0x4C, 0x69, 0x6D, 0x69, 0x74, 0x00, 0x08, 0x00,  // Limit...
                        /* 1F18 */  0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1F20 */  0x00, 0x00, 0x36, 0x30, 0x30, 0x30, 0x30, 0x00,  // ..60000.
                        /* 1F28 */  0x04, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,  // ........
                        /* 1F30 */  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,  // ........
                        /* 1F38 */  0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1F40 */  0x6C, 0x6F, 0x77, 0x5F, 0x62, 0x61, 0x74, 0x74,  // low_batt
                        /* 1F48 */  0x5F, 0x32, 0x34, 0x57, 0x5F, 0x62, 0x72, 0x69,  // _24W_bri
                        /* 1F50 */  0x63, 0x6B, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10,  // ck......
                        /* 1F58 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C,  // .......\
                        /* 1F60 */  0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x50, 0x43, 0x49,  // _SB_.PCI
                        /* 1F68 */  0x30, 0x2E, 0x42, 0x30, 0x44, 0x34, 0x00, 0x04,  // 0.B0D4..
                        /* 1F70 */  0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1F78 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x0D,  // ........
                        /* 1F80 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50,  // .......P
                        /* 1F88 */  0x53, 0x79, 0x73, 0x50, 0x4C, 0x31, 0x4C, 0x69,  // SysPL1Li
                        /* 1F90 */  0x6D, 0x69, 0x74, 0x00, 0x08, 0x00, 0x00, 0x00,  // mit.....
                        /* 1F98 */  0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1FA0 */  0x32, 0x31, 0x35, 0x30, 0x30, 0x00, 0x04, 0x00,  // 21500...
                        /* 1FA8 */  0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1FB0 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x13, 0x00,  // ........
                        /* 1FB8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6C, 0x6F,  // ......lo
                        /* 1FC0 */  0x77, 0x5F, 0x62, 0x61, 0x74, 0x74, 0x5F, 0x32,  // w_batt_2
                        /* 1FC8 */  0x34, 0x57, 0x5F, 0x62, 0x72, 0x69, 0x63, 0x6B,  // 4W_brick
                        /* 1FD0 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,  // ........
                        /* 1FD8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53,  // .....\_S
                        /* 1FE0 */  0x42, 0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30, 0x2E,  // B_.PCI0.
                        /* 1FE8 */  0x42, 0x30, 0x44, 0x34, 0x00, 0x04, 0x00, 0x00,  // B0D4....
                        /* 1FF0 */  0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1FF8 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00,  // ........
                        /* 2000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x53, 0x79,  // .....PSy
                        /* 2008 */  0x73, 0x50, 0x4C, 0x32, 0x4C, 0x69, 0x6D, 0x69,  // sPL2Limi
                        /* 2010 */  0x74, 0x00, 0x08, 0x00, 0x00, 0x00, 0x06, 0x00,  // t.......
                        /* 2018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x30,  // ......30
                        /* 2020 */  0x30, 0x30, 0x30, 0x00, 0x04, 0x00, 0x00, 0x00,  // 000.....
                        /* 2028 */  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2030 */  0x08, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00,  // ........
                        /* 2038 */  0x00, 0x00, 0x00, 0x00, 0x6C, 0x6F, 0x77, 0x5F,  // ....low_
                        /* 2040 */  0x62, 0x61, 0x74, 0x74, 0x5F, 0x32, 0x34, 0x57,  // batt_24W
                        /* 2048 */  0x5F, 0x62, 0x72, 0x69, 0x63, 0x6B, 0x00, 0x08,  // _brick..
                        /* 2050 */  0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2058 */  0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F,  // ...\_SB_
                        /* 2060 */  0x2E, 0x50, 0x43, 0x49, 0x30, 0x2E, 0x42, 0x30,  // .PCI0.B0
                        /* 2068 */  0x44, 0x34, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09,  // D4......
                        /* 2070 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08,  // ........
                        /* 2078 */  0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2080 */  0x00, 0x00, 0x00, 0x50, 0x4C, 0x34, 0x50, 0x6F,  // ...PL4Po
                        /* 2088 */  0x77, 0x65, 0x72, 0x4C, 0x69, 0x6D, 0x69, 0x74,  // werLimit
                        /* 2090 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00,  // ........
                        /* 2098 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x30, 0x30,  // .....600
                        /* 20A0 */  0x30, 0x30, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04,  // 00......
                        /* 20A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08,  // ........
                        /* 20B0 */  0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 20B8 */  0x00, 0x00, 0x00, 0x6C, 0x6F, 0x77, 0x5F, 0x62,  // ...low_b
                        /* 20C0 */  0x61, 0x74, 0x74, 0x5F, 0x33, 0x30, 0x57, 0x5F,  // att_30W_
                        /* 20C8 */  0x62, 0x72, 0x69, 0x63, 0x6B, 0x00, 0x08, 0x00,  // brick...
                        /* 20D0 */  0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 20D8 */  0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E,  // ..\_SB_.
                        /* 20E0 */  0x50, 0x43, 0x49, 0x30, 0x2E, 0x42, 0x30, 0x44,  // PCI0.B0D
                        /* 20E8 */  0x34, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00,  // 4.......
                        /* 20F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 20F8 */  0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2100 */  0x00, 0x00, 0x50, 0x53, 0x79, 0x73, 0x50, 0x4C,  // ..PSysPL
                        /* 2108 */  0x31, 0x4C, 0x69, 0x6D, 0x69, 0x74, 0x00, 0x08,  // 1Limit..
                        /* 2110 */  0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2118 */  0x00, 0x00, 0x00, 0x32, 0x37, 0x30, 0x30, 0x30,  // ...27000
                        /* 2120 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 2128 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,  // ........
                        /* 2130 */  0x00, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2138 */  0x00, 0x6C, 0x6F, 0x77, 0x5F, 0x62, 0x61, 0x74,  // .low_bat
                        /* 2140 */  0x74, 0x5F, 0x33, 0x30, 0x57, 0x5F, 0x62, 0x72,  // t_30W_br
                        /* 2148 */  0x69, 0x63, 0x6B, 0x00, 0x08, 0x00, 0x00, 0x00,  // ick.....
                        /* 2150 */  0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2158 */  0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x50, 0x43,  // \_SB_.PC
                        /* 2160 */  0x49, 0x30, 0x2E, 0x42, 0x30, 0x44, 0x34, 0x00,  // I0.B0D4.
                        /* 2168 */  0x04, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00,  // ........
                        /* 2170 */  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,  // ........
                        /* 2178 */  0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2180 */  0x50, 0x53, 0x79, 0x73, 0x50, 0x4C, 0x32, 0x4C,  // PSysPL2L
                        /* 2188 */  0x69, 0x6D, 0x69, 0x74, 0x00, 0x08, 0x00, 0x00,  // imit....
                        /* 2190 */  0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2198 */  0x00, 0x33, 0x30, 0x30, 0x30, 0x30, 0x00, 0x04,  // .30000..
                        /* 21A0 */  0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 21A8 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x13,  // ........
                        /* 21B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6C,  // .......l
                        /* 21B8 */  0x6F, 0x77, 0x5F, 0x62, 0x61, 0x74, 0x74, 0x5F,  // ow_batt_
                        /* 21C0 */  0x33, 0x30, 0x57, 0x5F, 0x62, 0x72, 0x69, 0x63,  // 30W_bric
                        /* 21C8 */  0x6B, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00,  // k.......
                        /* 21D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F,  // ......\_
                        /* 21D8 */  0x53, 0x42, 0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30,  // SB_.PCI0
                        /* 21E0 */  0x2E, 0x42, 0x30, 0x44, 0x34, 0x00, 0x04, 0x00,  // .B0D4...
                        /* 21E8 */  0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 21F0 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x0E, 0x00,  // ........
                        /* 21F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x4C,  // ......PL
                        /* 2200 */  0x34, 0x50, 0x6F, 0x77, 0x65, 0x72, 0x4C, 0x69,  // 4PowerLi
                        /* 2208 */  0x6D, 0x69, 0x74, 0x00, 0x08, 0x00, 0x00, 0x00,  // mit.....
                        /* 2210 */  0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2218 */  0x36, 0x30, 0x30, 0x30, 0x30, 0x00, 0x04, 0x00,  // 60000...
                        /* 2220 */  0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2228 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x13, 0x00,  // ........
                        /* 2230 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0x72,  // ......cr
                        /* 2238 */  0x69, 0x74, 0x5F, 0x62, 0x61, 0x74, 0x74, 0x5F,  // it_batt_
                        /* 2240 */  0x6E, 0x6F, 0x5F, 0x62, 0x72, 0x69, 0x63, 0x6B,  // no_brick
                        /* 2248 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,  // ........
                        /* 2250 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53,  // .....\_S
                        /* 2258 */  0x42, 0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30, 0x2E,  // B_.PCI0.
                        /* 2260 */  0x42, 0x30, 0x44, 0x34, 0x00, 0x04, 0x00, 0x00,  // B0D4....
                        /* 2268 */  0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2270 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00,  // ........
                        /* 2278 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x53, 0x79,  // .....PSy
                        /* 2280 */  0x73, 0x50, 0x4C, 0x31, 0x4C, 0x69, 0x6D, 0x69,  // sPL1Limi
                        /* 2288 */  0x74, 0x00, 0x08, 0x00, 0x00, 0x00, 0x06, 0x00,  // t.......
                        /* 2290 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x31,  // ......21
                        /* 2298 */  0x35, 0x30, 0x30, 0x00, 0x04, 0x00, 0x00, 0x00,  // 500.....
                        /* 22A0 */  0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 22A8 */  0x08, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00,  // ........
                        /* 22B0 */  0x00, 0x00, 0x00, 0x00, 0x63, 0x72, 0x69, 0x74,  // ....crit
                        /* 22B8 */  0x5F, 0x62, 0x61, 0x74, 0x74, 0x5F, 0x6E, 0x6F,  // _batt_no
                        /* 22C0 */  0x5F, 0x62, 0x72, 0x69, 0x63, 0x6B, 0x00, 0x08,  // _brick..
                        /* 22C8 */  0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 22D0 */  0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F,  // ...\_SB_
                        /* 22D8 */  0x2E, 0x50, 0x43, 0x49, 0x30, 0x2E, 0x42, 0x30,  // .PCI0.B0
                        /* 22E0 */  0x44, 0x34, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09,  // D4......
                        /* 22E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08,  // ........
                        /* 22F0 */  0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 22F8 */  0x00, 0x00, 0x00, 0x50, 0x53, 0x79, 0x73, 0x50,  // ...PSysP
                        /* 2300 */  0x4C, 0x32, 0x4C, 0x69, 0x6D, 0x69, 0x74, 0x00,  // L2Limit.
                        /* 2308 */  0x08, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,  // ........
                        /* 2310 */  0x00, 0x00, 0x00, 0x00, 0x33, 0x30, 0x30, 0x30,  // ....3000
                        /* 2318 */  0x30, 0x00, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00,  // 0.......
                        /* 2320 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 2328 */  0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2330 */  0x00, 0x00, 0x63, 0x72, 0x69, 0x74, 0x5F, 0x62,  // ..crit_b
                        /* 2338 */  0x61, 0x74, 0x74, 0x5F, 0x6E, 0x6F, 0x5F, 0x62,  // att_no_b
                        /* 2340 */  0x72, 0x69, 0x63, 0x6B, 0x00, 0x08, 0x00, 0x00,  // rick....
                        /* 2348 */  0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2350 */  0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x50,  // .\_SB_.P
                        /* 2358 */  0x43, 0x49, 0x30, 0x2E, 0x42, 0x30, 0x44, 0x34,  // CI0.B0D4
                        /* 2360 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00,  // ........
                        /* 2368 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,  // ........
                        /* 2370 */  0x00, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2378 */  0x00, 0x50, 0x4C, 0x34, 0x50, 0x6F, 0x77, 0x65,  // .PL4Powe
                        /* 2380 */  0x72, 0x4C, 0x69, 0x6D, 0x69, 0x74, 0x00, 0x08,  // rLimit..
                        /* 2388 */  0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2390 */  0x00, 0x00, 0x00, 0x31, 0x30, 0x30, 0x30, 0x30,  // ...10000
                        /* 2398 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00,  // ........
                        /* 23A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,  // ........
                        /* 23A8 */  0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 23B0 */  0x00, 0x63, 0x72, 0x69, 0x74, 0x5F, 0x62, 0x61,  // .crit_ba
                        /* 23B8 */  0x74, 0x74, 0x5F, 0x32, 0x34, 0x57, 0x5F, 0x62,  // tt_24W_b
                        /* 23C0 */  0x72, 0x69, 0x63, 0x6B, 0x00, 0x08, 0x00, 0x00,  // rick....
                        /* 23C8 */  0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 23D0 */  0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x50,  // .\_SB_.P
                        /* 23D8 */  0x43, 0x49, 0x30, 0x2E, 0x42, 0x30, 0x44, 0x34,  // CI0.B0D4
                        /* 23E0 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00,  // ........
                        /* 23E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,  // ........
                        /* 23F0 */  0x00, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 23F8 */  0x00, 0x50, 0x53, 0x79, 0x73, 0x50, 0x4C, 0x31,  // .PSysPL1
                        /* 2400 */  0x4C, 0x69, 0x6D, 0x69, 0x74, 0x00, 0x08, 0x00,  // Limit...
                        /* 2408 */  0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2410 */  0x00, 0x00, 0x32, 0x31, 0x35, 0x30, 0x30, 0x00,  // ..21500.
                        /* 2418 */  0x04, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,  // ........
                        /* 2420 */  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,  // ........
                        /* 2428 */  0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2430 */  0x63, 0x72, 0x69, 0x74, 0x5F, 0x62, 0x61, 0x74,  // crit_bat
                        /* 2438 */  0x74, 0x5F, 0x32, 0x34, 0x57, 0x5F, 0x62, 0x72,  // t_24W_br
                        /* 2440 */  0x69, 0x63, 0x6B, 0x00, 0x08, 0x00, 0x00, 0x00,  // ick.....
                        /* 2448 */  0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2450 */  0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x50, 0x43,  // \_SB_.PC
                        /* 2458 */  0x49, 0x30, 0x2E, 0x42, 0x30, 0x44, 0x34, 0x00,  // I0.B0D4.
                        /* 2460 */  0x04, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00,  // ........
                        /* 2468 */  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,  // ........
                        /* 2470 */  0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2478 */  0x50, 0x53, 0x79, 0x73, 0x50, 0x4C, 0x32, 0x4C,  // PSysPL2L
                        /* 2480 */  0x69, 0x6D, 0x69, 0x74, 0x00, 0x08, 0x00, 0x00,  // imit....
                        /* 2488 */  0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2490 */  0x00, 0x33, 0x30, 0x30, 0x30, 0x30, 0x00, 0x04,  // .30000..
                        /* 2498 */  0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 24A0 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x14,  // ........
                        /* 24A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63,  // .......c
                        /* 24B0 */  0x72, 0x69, 0x74, 0x5F, 0x62, 0x61, 0x74, 0x74,  // rit_batt
                        /* 24B8 */  0x5F, 0x32, 0x34, 0x57, 0x5F, 0x62, 0x72, 0x69,  // _24W_bri
                        /* 24C0 */  0x63, 0x6B, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10,  // ck......
                        /* 24C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C,  // .......\
                        /* 24D0 */  0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x50, 0x43, 0x49,  // _SB_.PCI
                        /* 24D8 */  0x30, 0x2E, 0x42, 0x30, 0x44, 0x34, 0x00, 0x04,  // 0.B0D4..
                        /* 24E0 */  0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 24E8 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x0E,  // ........
                        /* 24F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50,  // .......P
                        /* 24F8 */  0x4C, 0x34, 0x50, 0x6F, 0x77, 0x65, 0x72, 0x4C,  // L4PowerL
                        /* 2500 */  0x69, 0x6D, 0x69, 0x74, 0x00, 0x08, 0x00, 0x00,  // imit....
                        /* 2508 */  0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2510 */  0x00, 0x31, 0x31, 0x30, 0x30, 0x30, 0x00, 0x04,  // .11000..
                        /* 2518 */  0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2520 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x14,  // ........
                        /* 2528 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63,  // .......c
                        /* 2530 */  0x72, 0x69, 0x74, 0x5F, 0x62, 0x61, 0x74, 0x74,  // rit_batt
                        /* 2538 */  0x5F, 0x33, 0x30, 0x57, 0x5F, 0x62, 0x72, 0x69,  // _30W_bri
                        /* 2540 */  0x63, 0x6B, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10,  // ck......
                        /* 2548 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C,  // .......\
                        /* 2550 */  0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x50, 0x43, 0x49,  // _SB_.PCI
                        /* 2558 */  0x30, 0x2E, 0x42, 0x30, 0x44, 0x34, 0x00, 0x04,  // 0.B0D4..
                        /* 2560 */  0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2568 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x0D,  // ........
                        /* 2570 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50,  // .......P
                        /* 2578 */  0x53, 0x79, 0x73, 0x50, 0x4C, 0x31, 0x4C, 0x69,  // SysPL1Li
                        /* 2580 */  0x6D, 0x69, 0x74, 0x00, 0x08, 0x00, 0x00, 0x00,  // mit.....
                        /* 2588 */  0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2590 */  0x32, 0x37, 0x30, 0x30, 0x30, 0x00, 0x04, 0x00,  // 27000...
                        /* 2598 */  0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 25A0 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x14, 0x00,  // ........
                        /* 25A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0x72,  // ......cr
                        /* 25B0 */  0x69, 0x74, 0x5F, 0x62, 0x61, 0x74, 0x74, 0x5F,  // it_batt_
                        /* 25B8 */  0x33, 0x30, 0x57, 0x5F, 0x62, 0x72, 0x69, 0x63,  // 30W_bric
                        /* 25C0 */  0x6B, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00,  // k.......
                        /* 25C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F,  // ......\_
                        /* 25D0 */  0x53, 0x42, 0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30,  // SB_.PCI0
                        /* 25D8 */  0x2E, 0x42, 0x30, 0x44, 0x34, 0x00, 0x04, 0x00,  // .B0D4...
                        /* 25E0 */  0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 25E8 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x0D, 0x00,  // ........
                        /* 25F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x53,  // ......PS
                        /* 25F8 */  0x79, 0x73, 0x50, 0x4C, 0x32, 0x4C, 0x69, 0x6D,  // ysPL2Lim
                        /* 2600 */  0x69, 0x74, 0x00, 0x08, 0x00, 0x00, 0x00, 0x06,  // it......
                        /* 2608 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32,  // .......2
                        /* 2610 */  0x35, 0x30, 0x30, 0x30, 0x00, 0x04, 0x00, 0x00,  // 5000....
                        /* 2618 */  0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2620 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00,  // ........
                        /* 2628 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0x72, 0x69,  // .....cri
                        /* 2630 */  0x74, 0x5F, 0x62, 0x61, 0x74, 0x74, 0x5F, 0x33,  // t_batt_3
                        /* 2638 */  0x30, 0x57, 0x5F, 0x62, 0x72, 0x69, 0x63, 0x6B,  // 0W_brick
                        /* 2640 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,  // ........
                        /* 2648 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53,  // .....\_S
                        /* 2650 */  0x42, 0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30, 0x2E,  // B_.PCI0.
                        /* 2658 */  0x42, 0x30, 0x44, 0x34, 0x00, 0x04, 0x00, 0x00,  // B0D4....
                        /* 2660 */  0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2668 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00,  // ........
                        /* 2670 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x4C, 0x34,  // .....PL4
                        /* 2678 */  0x50, 0x6F, 0x77, 0x65, 0x72, 0x4C, 0x69, 0x6D,  // PowerLim
                        /* 2680 */  0x69, 0x74, 0x00, 0x08, 0x00, 0x00, 0x00, 0x06,  // it......
                        /* 2688 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31,  // .......1
                        /* 2690 */  0x37, 0x30, 0x30, 0x30, 0x00, 0x04, 0x00, 0x00,  // 7000....
                        /* 2698 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 26A0 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00,  // ........
                        /* 26A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x6C, 0x6F, 0x77,  // .....low
                        /* 26B0 */  0x5F, 0x62, 0x61, 0x74, 0x74, 0x5F, 0x75, 0x6E,  // _batt_un
                        /* 26B8 */  0x6B, 0x6E, 0x6F, 0x77, 0x6E, 0x5F, 0x62, 0x72,  // known_br
                        /* 26C0 */  0x69, 0x63, 0x6B, 0x00, 0x08, 0x00, 0x00, 0x00,  // ick.....
                        /* 26C8 */  0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 26D0 */  0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x50, 0x43,  // \_SB_.PC
                        /* 26D8 */  0x49, 0x30, 0x2E, 0x42, 0x30, 0x44, 0x34, 0x00,  // I0.B0D4.
                        /* 26E0 */  0x04, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00,  // ........
                        /* 26E8 */  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,  // ........
                        /* 26F0 */  0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 26F8 */  0x50, 0x53, 0x79, 0x73, 0x50, 0x4C, 0x31, 0x4C,  // PSysPL1L
                        /* 2700 */  0x69, 0x6D, 0x69, 0x74, 0x00, 0x08, 0x00, 0x00,  // imit....
                        /* 2708 */  0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2710 */  0x00, 0x32, 0x31, 0x35, 0x30, 0x30, 0x00, 0x04,  // .21500..
                        /* 2718 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2720 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x17,  // ........
                        /* 2728 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6C,  // .......l
                        /* 2730 */  0x6F, 0x77, 0x5F, 0x62, 0x61, 0x74, 0x74, 0x5F,  // ow_batt_
                        /* 2738 */  0x75, 0x6E, 0x6B, 0x6E, 0x6F, 0x77, 0x6E, 0x5F,  // unknown_
                        /* 2740 */  0x62, 0x72, 0x69, 0x63, 0x6B, 0x00, 0x08, 0x00,  // brick...
                        /* 2748 */  0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2750 */  0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E,  // ..\_SB_.
                        /* 2758 */  0x50, 0x43, 0x49, 0x30, 0x2E, 0x42, 0x30, 0x44,  // PCI0.B0D
                        /* 2760 */  0x34, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00,  // 4.......
                        /* 2768 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 2770 */  0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2778 */  0x00, 0x00, 0x50, 0x53, 0x79, 0x73, 0x50, 0x4C,  // ..PSysPL
                        /* 2780 */  0x32, 0x4C, 0x69, 0x6D, 0x69, 0x74, 0x00, 0x08,  // 2Limit..
                        /* 2788 */  0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2790 */  0x00, 0x00, 0x00, 0x33, 0x30, 0x30, 0x30, 0x30,  // ...30000
                        /* 2798 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,  // ........
                        /* 27A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,  // ........
                        /* 27A8 */  0x00, 0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 27B0 */  0x00, 0x6C, 0x6F, 0x77, 0x5F, 0x62, 0x61, 0x74,  // .low_bat
                        /* 27B8 */  0x74, 0x5F, 0x75, 0x6E, 0x6B, 0x6E, 0x6F, 0x77,  // t_unknow
                        /* 27C0 */  0x6E, 0x5F, 0x62, 0x72, 0x69, 0x63, 0x6B, 0x00,  // n_brick.
                        /* 27C8 */  0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,  // ........
                        /* 27D0 */  0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42,  // ....\_SB
                        /* 27D8 */  0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30, 0x2E, 0x42,  // _.PCI0.B
                        /* 27E0 */  0x30, 0x44, 0x34, 0x00, 0x04, 0x00, 0x00, 0x00,  // 0D4.....
                        /* 27E8 */  0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 27F0 */  0x08, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00,  // ........
                        /* 27F8 */  0x00, 0x00, 0x00, 0x00, 0x50, 0x4C, 0x34, 0x50,  // ....PL4P
                        /* 2800 */  0x6F, 0x77, 0x65, 0x72, 0x4C, 0x69, 0x6D, 0x69,  // owerLimi
                        /* 2808 */  0x74, 0x00, 0x08, 0x00, 0x00, 0x00, 0x06, 0x00,  // t.......
                        /* 2810 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0x31,  // ......11
                        /* 2818 */  0x30, 0x30, 0x30, 0x00, 0x04, 0x00, 0x00, 0x00,  // 000.....
                        /* 2820 */  0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2828 */  0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,  // ........
                        /* 2830 */  0x00, 0x00, 0x00, 0x00, 0x6E, 0x6F, 0x5F, 0x62,  // ....no_b
                        /* 2838 */  0x61, 0x74, 0x74, 0x00, 0x08, 0x00, 0x00, 0x00,  // att.....
                        /* 2840 */  0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2848 */  0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x50, 0x43,  // \_SB_.PC
                        /* 2850 */  0x49, 0x30, 0x2E, 0x42, 0x30, 0x44, 0x34, 0x00,  // I0.B0D4.
                        /* 2858 */  0x04, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00,  // ........
                        /* 2860 */  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,  // ........
                        /* 2868 */  0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2870 */  0x50, 0x53, 0x79, 0x73, 0x50, 0x4C, 0x31, 0x4C,  // PSysPL1L
                        /* 2878 */  0x69, 0x6D, 0x69, 0x74, 0x00, 0x08, 0x00, 0x00,  // imit....
                        /* 2880 */  0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2888 */  0x00, 0x32, 0x31, 0x35, 0x30, 0x30, 0x00, 0x04,  // .21500..
                        /* 2890 */  0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2898 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08,  // ........
                        /* 28A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6E,  // .......n
                        /* 28A8 */  0x6F, 0x5F, 0x62, 0x61, 0x74, 0x74, 0x00, 0x08,  // o_batt..
                        /* 28B0 */  0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 28B8 */  0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F,  // ...\_SB_
                        /* 28C0 */  0x2E, 0x50, 0x43, 0x49, 0x30, 0x2E, 0x42, 0x30,  // .PCI0.B0
                        /* 28C8 */  0x44, 0x34, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09,  // D4......
                        /* 28D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08,  // ........
                        /* 28D8 */  0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 28E0 */  0x00, 0x00, 0x00, 0x50, 0x53, 0x79, 0x73, 0x50,  // ...PSysP
                        /* 28E8 */  0x4C, 0x32, 0x4C, 0x69, 0x6D, 0x69, 0x74, 0x00,  // L2Limit.
                        /* 28F0 */  0x08, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,  // ........
                        /* 28F8 */  0x00, 0x00, 0x00, 0x00, 0x33, 0x30, 0x30, 0x30,  // ....3000
                        /* 2900 */  0x30, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00,  // 0.......
                        /* 2908 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 2910 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2918 */  0x00, 0x00, 0x6E, 0x6F, 0x5F, 0x62, 0x61, 0x74,  // ..no_bat
                        /* 2920 */  0x74, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00,  // t.......
                        /* 2928 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F,  // ......\_
                        /* 2930 */  0x53, 0x42, 0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30,  // SB_.PCI0
                        /* 2938 */  0x2E, 0x42, 0x30, 0x44, 0x34, 0x00, 0x04, 0x00,  // .B0D4...
                        /* 2940 */  0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2948 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x0E, 0x00,  // ........
                        /* 2950 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x4C,  // ......PL
                        /* 2958 */  0x34, 0x50, 0x6F, 0x77, 0x65, 0x72, 0x4C, 0x69,  // 4PowerLi
                        /* 2960 */  0x6D, 0x69, 0x74, 0x00, 0x08, 0x00, 0x00, 0x00,  // mit.....
                        /* 2968 */  0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2970 */  0x31, 0x31, 0x30, 0x30, 0x30, 0x00, 0x01, 0x00,  // 11000...
                        /* 2978 */  0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x2F, 0x73,  // ....../s
                        /* 2980 */  0x68, 0x61, 0x72, 0x65, 0x64, 0x2F, 0x65, 0x78,  // hared/ex
                        /* 2988 */  0x70, 0x6F, 0x72, 0x74, 0x2F, 0x70, 0x62, 0x63,  // port/pbc
                        /* 2990 */  0x74, 0x00, 0x07, 0x00, 0x00, 0x00, 0xCC, 0x12,  // t.......
                        /* 2998 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 29A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 29A8 */  0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 29B0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00,  // ........
                        /* 29B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 29C0 */  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 29C8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0A, 0x00,  // ........
                        /* 29D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 29D8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 29E0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 29E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 29F0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 29F8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2A00 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2A08 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2A10 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x1B, 0x00,  // ........
                        /* 2A18 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2A20 */  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2A28 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x48, 0x71,  // ......Hq
                        /* 2A30 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2A38 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2A40 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00,  // ........
                        /* 2A48 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2A50 */  0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2A58 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00,  // ........
                        /* 2A60 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2A68 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2A70 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2A78 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2A80 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2A88 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2A90 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2A98 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2AA0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2AA8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2AB0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2AB8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2AC0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2AC8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2AD0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2AD8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2AE0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2AE8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2AF0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2AF8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2B00 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2B08 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2B10 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2B18 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2B20 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2B28 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2B30 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2B38 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2B40 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2B48 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2B50 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2B58 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2B60 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2B68 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2B70 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2B78 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2B80 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2B88 */  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2B90 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00,  // ........
                        /* 2B98 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2BA0 */  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2BA8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0A, 0x00,  // ........
                        /* 2BB0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2BB8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2BC0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 2BC8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2BD0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2BD8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2BE0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2BE8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2BF0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00,  // ........
                        /* 2BF8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2C00 */  0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2C08 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00,  // ........
                        /* 2C10 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2C18 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2C20 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2C28 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2C30 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2C38 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2C40 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2C48 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2C50 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2C58 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2C60 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2C68 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2C70 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2C78 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2C80 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2C88 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2C90 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2C98 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2CA0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2CA8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2CB0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2CB8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2CC0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2CC8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2CD0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2CD8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2CE0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2CE8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2CF0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2CF8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2D00 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2D08 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2D10 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2D18 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2D20 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2D28 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2D30 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2D38 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2D40 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2D48 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2D50 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2D58 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2D60 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2D68 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2D70 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00,  // ........
                        /* 2D78 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2D80 */  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2D88 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0A, 0x00,  // ........
                        /* 2D90 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2D98 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2DA0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 2DA8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2DB0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2DB8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2DC0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2DC8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2DD0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x1B, 0x00,  // ........
                        /* 2DD8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2DE0 */  0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2DE8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x30, 0x75,  // ......0u
                        /* 2DF0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2DF8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2E00 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00,  // ........
                        /* 2E08 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2E10 */  0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2E18 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00,  // ........
                        /* 2E20 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2E28 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2E30 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x1B, 0x00,  // ........
                        /* 2E38 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2E40 */  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2E48 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x78, 0xE6,  // ......x.
                        /* 2E50 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2E58 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2E60 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2E68 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2E70 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2E78 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2E80 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2E88 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2E90 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2E98 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2EA0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2EA8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2EB0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2EB8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2EC0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2EC8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2ED0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2ED8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2EE0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2EE8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2EF0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2EF8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2F00 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2F08 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2F10 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2F18 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2F20 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2F28 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2F30 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2F38 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2F40 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2F48 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2F50 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00,  // ........
                        /* 2F58 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2F60 */  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2F68 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0A, 0x00,  // ........
                        /* 2F70 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2F78 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2F80 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 2F88 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2F90 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2F98 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2FA0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2FA8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2FB0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x1B, 0x00,  // ........
                        /* 2FB8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2FC0 */  0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2FC8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x60, 0xEA,  // ......`.
                        /* 2FD0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2FD8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2FE0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2FE8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2FF0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2FF8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3008 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3010 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3020 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3028 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3030 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3038 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3040 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3050 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3058 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3068 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3070 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3078 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3080 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3088 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3090 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3098 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 30A0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 30A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 30B0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 30B8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 30C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 30C8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 30D0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 30D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 30E0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 30E8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 30F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 30F8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3100 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3108 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3110 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3118 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3120 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3128 */  0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3130 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00,  // ........
                        /* 3138 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3140 */  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3148 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00,  // ........
                        /* 3150 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3158 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3160 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 3168 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3170 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3178 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3180 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3188 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3190 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3198 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 31A0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 31A8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 31B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 31B8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 31C0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 31C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 31D0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 31D8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 31E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 31E8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 31F0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 31F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3200 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3208 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3210 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3218 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3220 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3228 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3230 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3238 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3240 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3248 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3250 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3258 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3260 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3268 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3270 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3278 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3280 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3288 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3290 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3298 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 32A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 32A8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 32B0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 32B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 32C0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 32C8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 32D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 32D8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 32E0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 32E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 32F0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 32F8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3300 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3308 */  0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3310 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00,  // ........
                        /* 3318 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3320 */  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3328 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00,  // ........
                        /* 3330 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3338 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3340 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 3348 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3350 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3358 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3360 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3368 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3370 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x1B, 0x00,  // ........
                        /* 3378 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3380 */  0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3388 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x30, 0x75,  // ......0u
                        /* 3390 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3398 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 33A0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x1B, 0x00,  // ........
                        /* 33A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 33B0 */  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 33B8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x78, 0xE6,  // ......x.
                        /* 33C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 33C8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 33D0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 33D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 33E0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 33E8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 33F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 33F8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3400 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3408 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3410 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3418 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3420 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3428 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3430 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3438 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3440 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3448 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3450 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3458 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3460 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3468 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3470 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3478 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3480 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3488 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3490 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3498 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 34A0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 34A8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 34B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 34B8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 34C0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 34C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 34D0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 34D8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 34E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 34E8 */  0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 34F0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00,  // ........
                        /* 34F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3500 */  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3508 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00,  // ........
                        /* 3510 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3518 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3520 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 3528 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3530 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3538 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3540 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3548 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3550 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x1B, 0x00,  // ........
                        /* 3558 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3560 */  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3568 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x48, 0x71,  // ......Hq
                        /* 3570 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3578 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3580 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3588 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3590 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3598 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 35A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 35A8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 35B0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 35B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 35C0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 35C8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 35D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 35D8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 35E0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 35E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 35F0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 35F8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3600 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3608 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3610 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3618 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3620 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3628 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3630 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3638 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3640 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3648 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3650 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3658 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3660 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3668 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3670 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3678 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3680 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3688 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3690 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3698 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 36A0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 36A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 36B0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 36B8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 36C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 36C8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 36D0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00,  // ........
                        /* 36D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 36E0 */  0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 36E8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0A, 0x00,  // ........
                        /* 36F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 36F8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3700 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3708 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3710 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3718 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3720 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3728 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3730 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3738 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3740 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3748 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3750 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3758 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3760 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3768 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3770 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3778 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3780 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3788 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3790 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3798 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 37A0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 37A8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 37B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 37B8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 37C0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 37C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 37D0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 37D8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 37E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 37E8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 37F0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 37F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3800 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3808 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3810 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3818 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3820 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3828 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3830 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3838 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3840 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3848 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3850 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3858 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3860 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3868 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3870 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3878 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3880 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3888 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3890 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3898 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 38A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 38A8 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 38B0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00,  // ........
                        /* 38B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 38C0 */  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 38C8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0A, 0x00,  // ........
                        /* 38D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 38D8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 38E0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 38E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 38F0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 38F8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3900 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3908 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3910 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x1B, 0x00,  // ........
                        /* 3918 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3920 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3928 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3930 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3938 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3940 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3948 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3950 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3958 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3960 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3968 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3970 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3978 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3980 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3988 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3990 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3998 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 39A0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 39A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 39B0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 39B8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 39C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 39C8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 39D0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 39D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 39E0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 39E8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 39F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 39F8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3A00 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3A08 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3A10 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3A18 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3A20 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3A28 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3A30 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3A38 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3A40 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3A48 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3A50 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3A58 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3A60 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3A68 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3A70 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3A78 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3A80 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3A88 */  0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3A90 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x22, 0x00,  // ......".
                        /* 3A98 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3AA0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3AA8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3AB0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3AB8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3AC0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3AC8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3AD0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3AD8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3AE0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3AE8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3AF0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3AF8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3B00 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3B08 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3B10 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3B18 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3B20 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3B28 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3B30 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3B38 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3B40 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3B48 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3B50 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3B58 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3B60 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3B68 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3B70 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3B78 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3B80 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3B88 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3B90 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3B98 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3BA0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3BA8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3BB0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3BB8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3BC0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3BC8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3BD0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3BD8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3BE0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3BE8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3BF0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3BF8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3C00 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3C08 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3C10 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3C18 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3C20 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3C28 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3C30 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3C38 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3C40 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3C48 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3C50 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3C58 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3C60 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3C68 */  0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x2F, 0x73,  // ....../s
                        /* 3C70 */  0x68, 0x61, 0x72, 0x65, 0x64, 0x2F, 0x65, 0x78,  // hared/ex
                        /* 3C78 */  0x70, 0x6F, 0x72, 0x74, 0x2F, 0x70, 0x69, 0x64,  // port/pid
                        /* 3C80 */  0x61, 0x00, 0x07, 0x00, 0x00, 0x00, 0xBC, 0x00,  // a.......
                        /* 3C88 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00,  // ........
                        /* 3C90 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 3C98 */  0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3CA0 */  0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E,  // ..\_SB_.
                        /* 3CA8 */  0x50, 0x43, 0x49, 0x30, 0x2E, 0x42, 0x30, 0x44,  // PCI0.B0D
                        /* 3CB0 */  0x34, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00,  // 4.......
                        /* 3CB8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3CC0 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                        /* 3CC8 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                        /* 3CD0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F,  // ......\_
                        /* 3CD8 */  0x53, 0x42, 0x5F, 0x2E, 0x5F, 0x53, 0x41, 0x4E,  // SB_._SAN
                        /* 3CE0 */  0x2E, 0x47, 0x45, 0x4E, 0x34, 0x00, 0x04, 0x00,  // .GEN4...
                        /* 3CE8 */  0x00, 0x00, 0x91, 0x0C, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3CF0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x91, 0x0C,  // ........
                        /* 3CF8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3D00 */  0x00, 0x00, 0xB1, 0x0A, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3D08 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xC8, 0x00,  // ........
                        /* 3D10 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3D18 */  0x00, 0x00, 0x14, 0x05, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3D20 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x03, 0x00,  // ........
                        /* 3D28 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3D30 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3D38 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xFF, 0xFF,  // ........
                        /* 3D40 */  0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3D48 */  0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x2F, 0x73,  // ....../s
                        /* 3D50 */  0x68, 0x61, 0x72, 0x65, 0x64, 0x2F, 0x74, 0x61,  // hared/ta
                        /* 3D58 */  0x62, 0x6C, 0x65, 0x73, 0x2F, 0x70, 0x69, 0x64,  // bles/pid
                        /* 3D60 */  0x61, 0x2F, 0x34, 0x35, 0x63, 0x00, 0x07, 0x00,  // a/45c...
                        /* 3D68 */  0x00, 0x00, 0xB0, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3D70 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3D78 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                        /* 3D80 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F,  // ......\_
                        /* 3D88 */  0x53, 0x42, 0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30,  // SB_.PCI0
                        /* 3D90 */  0x2E, 0x42, 0x30, 0x44, 0x34, 0x00, 0x04, 0x00,  // .B0D4...
                        /* 3D98 */  0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3DA0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3DA8 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 3DB0 */  0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3DB8 */  0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E,  // ..\_SB_.
                        /* 3DC0 */  0x5F, 0x53, 0x41, 0x4E, 0x2E, 0x47, 0x45, 0x4E,  // _SAN.GEN
                        /* 3DC8 */  0x34, 0x00, 0x04, 0x00, 0x00, 0x00, 0x8E, 0x0F,  // 4.......
                        /* 3DD0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3DD8 */  0x00, 0x00, 0x6E, 0x0C, 0x00, 0x00, 0x00, 0x00,  // ..n.....
                        /* 3DE0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xAF, 0x0A,  // ........
                        /* 3DE8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3DF0 */  0x00, 0x00, 0x2C, 0x01, 0x00, 0x00, 0x00, 0x00,  // ..,.....
                        /* 3DF8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x14, 0x05,  // ........
                        /* 3E00 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3E08 */  0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3E10 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3E18 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3E20 */  0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x2F, 0x73,  // ....../s
                        /* 3E28 */  0x68, 0x61, 0x72, 0x65, 0x64, 0x2F, 0x74, 0x61,  // hared/ta
                        /* 3E30 */  0x62, 0x6C, 0x65, 0x73, 0x2F, 0x70, 0x69, 0x64,  // bles/pid
                        /* 3E38 */  0x61, 0x2F, 0x34, 0x36, 0x63, 0x00, 0x07, 0x00,  // a/46c...
                        /* 3E40 */  0x00, 0x00, 0xB0, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3E48 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3E50 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                        /* 3E58 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F,  // ......\_
                        /* 3E60 */  0x53, 0x42, 0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30,  // SB_.PCI0
                        /* 3E68 */  0x2E, 0x42, 0x30, 0x44, 0x34, 0x00, 0x04, 0x00,  // .B0D4...
                        /* 3E70 */  0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3E78 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3E80 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 3E88 */  0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3E90 */  0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E,  // ..\_SB_.
                        /* 3E98 */  0x5F, 0x53, 0x41, 0x4E, 0x2E, 0x47, 0x45, 0x4E,  // _SAN.GEN
                        /* 3EA0 */  0x34, 0x00, 0x04, 0x00, 0x00, 0x00, 0x8E, 0x0F,  // 4.......
                        /* 3EA8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3EB0 */  0x00, 0x00, 0x78, 0x0C, 0x00, 0x00, 0x00, 0x00,  // ..x.....
                        /* 3EB8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xAF, 0x0A,  // ........
                        /* 3EC0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3EC8 */  0x00, 0x00, 0x2C, 0x01, 0x00, 0x00, 0x00, 0x00,  // ..,.....
                        /* 3ED0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x14, 0x05,  // ........
                        /* 3ED8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3EE0 */  0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3EE8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3EF0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3EF8 */  0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x2F, 0x73,  // ....../s
                        /* 3F00 */  0x68, 0x61, 0x72, 0x65, 0x64, 0x2F, 0x74, 0x61,  // hared/ta
                        /* 3F08 */  0x62, 0x6C, 0x65, 0x73, 0x2F, 0x70, 0x69, 0x64,  // bles/pid
                        /* 3F10 */  0x61, 0x2F, 0x34, 0x37, 0x63, 0x00, 0x07, 0x00,  // a/47c...
                        /* 3F18 */  0x00, 0x00, 0xB0, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3F20 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3F28 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                        /* 3F30 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F,  // ......\_
                        /* 3F38 */  0x53, 0x42, 0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30,  // SB_.PCI0
                        /* 3F40 */  0x2E, 0x42, 0x30, 0x44, 0x34, 0x00, 0x04, 0x00,  // .B0D4...
                        /* 3F48 */  0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3F50 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3F58 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 3F60 */  0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3F68 */  0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E,  // ..\_SB_.
                        /* 3F70 */  0x5F, 0x53, 0x41, 0x4E, 0x2E, 0x47, 0x45, 0x4E,  // _SAN.GEN
                        /* 3F78 */  0x34, 0x00, 0x04, 0x00, 0x00, 0x00, 0x8E, 0x0F,  // 4.......
                        /* 3F80 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3F88 */  0x00, 0x00, 0x82, 0x0C, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3F90 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xAF, 0x0A,  // ........
                        /* 3F98 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3FA0 */  0x00, 0x00, 0x2C, 0x01, 0x00, 0x00, 0x00, 0x00,  // ..,.....
                        /* 3FA8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x14, 0x05,  // ........
                        /* 3FB0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3FB8 */  0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3FC0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3FC8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3FD0 */  0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x2F, 0x73,  // ....../s
                        /* 3FD8 */  0x68, 0x61, 0x72, 0x65, 0x64, 0x2F, 0x74, 0x61,  // hared/ta
                        /* 3FE0 */  0x62, 0x6C, 0x65, 0x73, 0x2F, 0x70, 0x69, 0x64,  // bles/pid
                        /* 3FE8 */  0x61, 0x2F, 0x34, 0x38, 0x63, 0x00, 0x07, 0x00,  // a/48c...
                        /* 3FF0 */  0x00, 0x00, 0xB0, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3FF8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4000 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                        /* 4008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F,  // ......\_
                        /* 4010 */  0x53, 0x42, 0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30,  // SB_.PCI0
                        /* 4018 */  0x2E, 0x42, 0x30, 0x44, 0x34, 0x00, 0x04, 0x00,  // .B0D4...
                        /* 4020 */  0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4028 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4030 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 4038 */  0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4040 */  0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E,  // ..\_SB_.
                        /* 4048 */  0x5F, 0x53, 0x41, 0x4E, 0x2E, 0x47, 0x45, 0x4E,  // _SAN.GEN
                        /* 4050 */  0x34, 0x00, 0x04, 0x00, 0x00, 0x00, 0x8E, 0x0F,  // 4.......
                        /* 4058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4060 */  0x00, 0x00, 0x8C, 0x0C, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4068 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xAF, 0x0A,  // ........
                        /* 4070 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4078 */  0x00, 0x00, 0x2C, 0x01, 0x00, 0x00, 0x00, 0x00,  // ..,.....
                        /* 4080 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x14, 0x05,  // ........
                        /* 4088 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4090 */  0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4098 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 40A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 40A8 */  0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0x2F, 0x73,  // ....../s
                        /* 40B0 */  0x68, 0x61, 0x72, 0x65, 0x64, 0x2F, 0x74, 0x61,  // hared/ta
                        /* 40B8 */  0x62, 0x6C, 0x65, 0x73, 0x2F, 0x70, 0x69, 0x64,  // bles/pid
                        /* 40C0 */  0x61, 0x2F, 0x6D, 0x72, 0x00, 0x07, 0x00, 0x00,  // a/mr....
                        /* 40C8 */  0x00, 0xBC, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 40D0 */  0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 40D8 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,  // ........
                        /* 40E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53,  // .....\_S
                        /* 40E8 */  0x42, 0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30, 0x2E,  // B_.PCI0.
                        /* 40F0 */  0x42, 0x30, 0x44, 0x34, 0x00, 0x04, 0x00, 0x00,  // B0D4....
                        /* 40F8 */  0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4100 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,  // ........
                        /* 4108 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,  // ........
                        /* 4110 */  0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4118 */  0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x5F,  // .\_SB_._
                        /* 4120 */  0x53, 0x41, 0x4E, 0x2E, 0x47, 0x45, 0x4E, 0x34,  // SAN.GEN4
                        /* 4128 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x91, 0x0C, 0x00,  // ........
                        /* 4130 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 4138 */  0x00, 0x91, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4140 */  0x00, 0x04, 0x00, 0x00, 0x00, 0xB1, 0x0A, 0x00,  // ........
                        /* 4148 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 4150 */  0x00, 0xC8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4158 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x14, 0x05, 0x00,  // ........
                        /* 4160 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 4168 */  0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4170 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4178 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 4180 */  0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00,  // ........
                        /* 4188 */  0x00, 0x01, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00,  // ........
                        /* 4190 */  0x00, 0x2F, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,  // ./shared
                        /* 4198 */  0x2F, 0x74, 0x61, 0x62, 0x6C, 0x65, 0x73, 0x2F,  // /tables/
                        /* 41A0 */  0x70, 0x73, 0x76, 0x74, 0x2F, 0x34, 0x35, 0x63,  // psvt/45c
                        /* 41A8 */  0x00, 0x07, 0x00, 0x00, 0x00, 0xCC, 0x02, 0x00,  // ........
                        /* 41B0 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,  // ........
                        /* 41B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,  // ........
                        /* 41C0 */  0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 41C8 */  0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x50,  // .\_SB_.P
                        /* 41D0 */  0x43, 0x49, 0x30, 0x2E, 0x42, 0x30, 0x44, 0x34,  // CI0.B0D4
                        /* 41D8 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,  // ........
                        /* 41E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53,  // .....\_S
                        /* 41E8 */  0x42, 0x5F, 0x2E, 0x5F, 0x53, 0x41, 0x4E, 0x2E,  // B_._SAN.
                        /* 41F0 */  0x47, 0x45, 0x4E, 0x34, 0x00, 0x04, 0x00, 0x00,  // GEN4....
                        /* 41F8 */  0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4200 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x58, 0x02, 0x00,  // .....X..
                        /* 4208 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 4210 */  0x00, 0x5A, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00,  // .Z......
                        /* 4218 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00,  // ........
                        /* 4220 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 4228 */  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4230 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x10, 0x27, 0x00,  // ......'.
                        /* 4238 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 4240 */  0x00, 0x7D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // .}......
                        /* 4248 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00,  // ........
                        /* 4250 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 4258 */  0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // .d......
                        /* 4260 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4268 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,  // ........
                        /* 4270 */  0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4278 */  0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x50,  // .\_SB_.P
                        /* 4280 */  0x43, 0x49, 0x30, 0x2E, 0x42, 0x30, 0x44, 0x34,  // CI0.B0D4
                        /* 4288 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,  // ........
                        /* 4290 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53,  // .....\_S
                        /* 4298 */  0x42, 0x5F, 0x2E, 0x5F, 0x53, 0x41, 0x4E, 0x2E,  // B_._SAN.
                        /* 42A0 */  0x47, 0x45, 0x4E, 0x34, 0x00, 0x04, 0x00, 0x00,  // GEN4....
                        /* 42A8 */  0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 42B0 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x58, 0x02, 0x00,  // .....X..
                        /* 42B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 42C0 */  0x00, 0x76, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00,  // .v......
                        /* 42C8 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00,  // ........
                        /* 42D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 42D8 */  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 42E0 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x10, 0x27, 0x00,  // ......'.
                        /* 42E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 42F0 */  0x00, 0x7D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // .}......
                        /* 42F8 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00,  // ........
                        /* 4300 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 4308 */  0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // .d......
                        /* 4310 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4318 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,  // ........
                        /* 4320 */  0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4328 */  0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x50,  // .\_SB_.P
                        /* 4330 */  0x43, 0x49, 0x30, 0x2E, 0x42, 0x30, 0x44, 0x34,  // CI0.B0D4
                        /* 4338 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,  // ........
                        /* 4340 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53,  // .....\_S
                        /* 4348 */  0x42, 0x5F, 0x2E, 0x5F, 0x53, 0x41, 0x4E, 0x2E,  // B_._SAN.
                        /* 4350 */  0x47, 0x45, 0x4E, 0x34, 0x00, 0x04, 0x00, 0x00,  // GEN4....
                        /* 4358 */  0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4360 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x58, 0x02, 0x00,  // .....X..
                        /* 4368 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 4370 */  0x00, 0x78, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00,  // .x......
                        /* 4378 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00,  // ........
                        /* 4380 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 4388 */  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4390 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x40, 0x1F, 0x00,  // .....@..
                        /* 4398 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 43A0 */  0x00, 0x7D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // .}......
                        /* 43A8 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00,  // ........
                        /* 43B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 43B8 */  0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // .d......
                        /* 43C0 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 43C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,  // ........
                        /* 43D0 */  0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 43D8 */  0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x50,  // .\_SB_.P
                        /* 43E0 */  0x43, 0x49, 0x30, 0x2E, 0x42, 0x30, 0x44, 0x34,  // CI0.B0D4
                        /* 43E8 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,  // ........
                        /* 43F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53,  // .....\_S
                        /* 43F8 */  0x42, 0x5F, 0x2E, 0x5F, 0x53, 0x41, 0x4E, 0x2E,  // B_._SAN.
                        /* 4400 */  0x47, 0x45, 0x4E, 0x34, 0x00, 0x04, 0x00, 0x00,  // GEN4....
                        /* 4408 */  0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4410 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x58, 0x02, 0x00,  // .....X..
                        /* 4418 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 4420 */  0x00, 0x30, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00,  // .0......
                        /* 4428 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00,  // ........
                        /* 4430 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 4438 */  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4440 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x40, 0x1F, 0x00,  // .....@..
                        /* 4448 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 4450 */  0x00, 0x7D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // .}......
                        /* 4458 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00,  // ........
                        /* 4460 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 4468 */  0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // .d......
                        /* 4470 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4478 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,  // ........
                        /* 4480 */  0x00, 0x18, 0x00, 0x00, 0x00, 0x2F, 0x73, 0x68,  // ...../sh
                        /* 4488 */  0x61, 0x72, 0x65, 0x64, 0x2F, 0x74, 0x61, 0x62,  // ared/tab
                        /* 4490 */  0x6C, 0x65, 0x73, 0x2F, 0x70, 0x73, 0x76, 0x74,  // les/psvt
                        /* 4498 */  0x2F, 0x34, 0x36, 0x63, 0x00, 0x07, 0x00, 0x00,  // /46c....
                        /* 44A0 */  0x00, 0xCC, 0x02, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 44A8 */  0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 44B0 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,  // ........
                        /* 44B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53,  // .....\_S
                        /* 44C0 */  0x42, 0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30, 0x2E,  // B_.PCI0.
                        /* 44C8 */  0x42, 0x30, 0x44, 0x34, 0x00, 0x08, 0x00, 0x00,  // B0D4....
                        /* 44D0 */  0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 44D8 */  0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x5F,  // .\_SB_._
                        /* 44E0 */  0x53, 0x41, 0x4E, 0x2E, 0x47, 0x45, 0x4E, 0x34,  // SAN.GEN4
                        /* 44E8 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,  // ........
                        /* 44F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 44F8 */  0x00, 0x58, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // .X......
                        /* 4500 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x64, 0x0C, 0x00,  // .....d..
                        /* 4508 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 4510 */  0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4518 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,  // ........
                        /* 4520 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 4528 */  0x00, 0xF8, 0x2A, 0x00, 0x00, 0x00, 0x00, 0x00,  // ..*.....
                        /* 4530 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x7D, 0x00, 0x00,  // .....}..
                        /* 4538 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 4540 */  0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4548 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00,  // .....d..
                        /* 4550 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 4558 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4560 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,  // ........
                        /* 4568 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53,  // .....\_S
                        /* 4570 */  0x42, 0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30, 0x2E,  // B_.PCI0.
                        /* 4578 */  0x42, 0x30, 0x44, 0x34, 0x00, 0x08, 0x00, 0x00,  // B0D4....
                        /* 4580 */  0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4588 */  0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x5F,  // .\_SB_._
                        /* 4590 */  0x53, 0x41, 0x4E, 0x2E, 0x47, 0x45, 0x4E, 0x34,  // SAN.GEN4
                        /* 4598 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,  // ........
                        /* 45A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 45A8 */  0x00, 0x58, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // .X......
                        /* 45B0 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x80, 0x0C, 0x00,  // ........
                        /* 45B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 45C0 */  0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 45C8 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,  // ........
                        /* 45D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 45D8 */  0x00, 0xF8, 0x2A, 0x00, 0x00, 0x00, 0x00, 0x00,  // ..*.....
                        /* 45E0 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x7D, 0x00, 0x00,  // .....}..
                        /* 45E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 45F0 */  0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 45F8 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00,  // .....d..
                        /* 4600 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 4608 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4610 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,  // ........
                        /* 4618 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53,  // .....\_S
                        /* 4620 */  0x42, 0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30, 0x2E,  // B_.PCI0.
                        /* 4628 */  0x42, 0x30, 0x44, 0x34, 0x00, 0x08, 0x00, 0x00,  // B0D4....
                        /* 4630 */  0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4638 */  0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x5F,  // .\_SB_._
                        /* 4640 */  0x53, 0x41, 0x4E, 0x2E, 0x47, 0x45, 0x4E, 0x34,  // SAN.GEN4
                        /* 4648 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,  // ........
                        /* 4650 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 4658 */  0x00, 0x58, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // .X......
                        /* 4660 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x82, 0x0C, 0x00,  // ........
                        /* 4668 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 4670 */  0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4678 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,  // ........
                        /* 4680 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 4688 */  0x00, 0x28, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00,  // .(#.....
                        /* 4690 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x7D, 0x00, 0x00,  // .....}..
                        /* 4698 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 46A0 */  0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 46A8 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00,  // .....d..
                        /* 46B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 46B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 46C0 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,  // ........
                        /* 46C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53,  // .....\_S
                        /* 46D0 */  0x42, 0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30, 0x2E,  // B_.PCI0.
                        /* 46D8 */  0x42, 0x30, 0x44, 0x34, 0x00, 0x08, 0x00, 0x00,  // B0D4....
                        /* 46E0 */  0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 46E8 */  0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x5F,  // .\_SB_._
                        /* 46F0 */  0x53, 0x41, 0x4E, 0x2E, 0x47, 0x45, 0x4E, 0x34,  // SAN.GEN4
                        /* 46F8 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,  // ........
                        /* 4700 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 4708 */  0x00, 0x58, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // .X......
                        /* 4710 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x30, 0x0E, 0x00,  // .....0..
                        /* 4718 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 4720 */  0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4728 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,  // ........
                        /* 4730 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 4738 */  0x00, 0x28, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00,  // .(#.....
                        /* 4740 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x7D, 0x00, 0x00,  // .....}..
                        /* 4748 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 4750 */  0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4758 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00,  // .....d..
                        /* 4760 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 4768 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4770 */  0x00, 0x01, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00,  // ........
                        /* 4778 */  0x00, 0x2F, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,  // ./shared
                        /* 4780 */  0x2F, 0x74, 0x61, 0x62, 0x6C, 0x65, 0x73, 0x2F,  // /tables/
                        /* 4788 */  0x70, 0x73, 0x76, 0x74, 0x2F, 0x34, 0x37, 0x63,  // psvt/47c
                        /* 4790 */  0x00, 0x07, 0x00, 0x00, 0x00, 0xCC, 0x02, 0x00,  // ........
                        /* 4798 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,  // ........
                        /* 47A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,  // ........
                        /* 47A8 */  0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 47B0 */  0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x50,  // .\_SB_.P
                        /* 47B8 */  0x43, 0x49, 0x30, 0x2E, 0x42, 0x30, 0x44, 0x34,  // CI0.B0D4
                        /* 47C0 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,  // ........
                        /* 47C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53,  // .....\_S
                        /* 47D0 */  0x42, 0x5F, 0x2E, 0x5F, 0x53, 0x41, 0x4E, 0x2E,  // B_._SAN.
                        /* 47D8 */  0x47, 0x45, 0x4E, 0x34, 0x00, 0x04, 0x00, 0x00,  // GEN4....
                        /* 47E0 */  0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 47E8 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x58, 0x02, 0x00,  // .....X..
                        /* 47F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 47F8 */  0x00, 0x6E, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00,  // .n......
                        /* 4800 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00,  // ........
                        /* 4808 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 4810 */  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4818 */  0x00, 0x04, 0x00, 0x00, 0x00, 0xD4, 0x30, 0x00,  // ......0.
                        /* 4820 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 4828 */  0x00, 0x7D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // .}......
                        /* 4830 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00,  // ........
                        /* 4838 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 4840 */  0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // .d......
                        /* 4848 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4850 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,  // ........
                        /* 4858 */  0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4860 */  0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x50,  // .\_SB_.P
                        /* 4868 */  0x43, 0x49, 0x30, 0x2E, 0x42, 0x30, 0x44, 0x34,  // CI0.B0D4
                        /* 4870 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,  // ........
                        /* 4878 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53,  // .....\_S
                        /* 4880 */  0x42, 0x5F, 0x2E, 0x5F, 0x53, 0x41, 0x4E, 0x2E,  // B_._SAN.
                        /* 4888 */  0x47, 0x45, 0x4E, 0x34, 0x00, 0x04, 0x00, 0x00,  // GEN4....
                        /* 4890 */  0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4898 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x58, 0x02, 0x00,  // .....X..
                        /* 48A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 48A8 */  0x00, 0x8A, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 48B0 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00,  // ........
                        /* 48B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 48C0 */  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 48C8 */  0x00, 0x04, 0x00, 0x00, 0x00, 0xD4, 0x30, 0x00,  // ......0.
                        /* 48D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 48D8 */  0x00, 0x7D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // .}......
                        /* 48E0 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00,  // ........
                        /* 48E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 48F0 */  0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // .d......
                        /* 48F8 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4900 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,  // ........
                        /* 4908 */  0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4910 */  0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x50,  // .\_SB_.P
                        /* 4918 */  0x43, 0x49, 0x30, 0x2E, 0x42, 0x30, 0x44, 0x34,  // CI0.B0D4
                        /* 4920 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,  // ........
                        /* 4928 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53,  // .....\_S
                        /* 4930 */  0x42, 0x5F, 0x2E, 0x5F, 0x53, 0x41, 0x4E, 0x2E,  // B_._SAN.
                        /* 4938 */  0x47, 0x45, 0x4E, 0x34, 0x00, 0x04, 0x00, 0x00,  // GEN4....
                        /* 4940 */  0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4948 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x58, 0x02, 0x00,  // .....X..
                        /* 4950 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 4958 */  0x00, 0x8C, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4960 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00,  // ........
                        /* 4968 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 4970 */  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4978 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x29, 0x00,  // ......).
                        /* 4980 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 4988 */  0x00, 0x7D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // .}......
                        /* 4990 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00,  // ........
                        /* 4998 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 49A0 */  0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // .d......
                        /* 49A8 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 49B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,  // ........
                        /* 49B8 */  0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 49C0 */  0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x50,  // .\_SB_.P
                        /* 49C8 */  0x43, 0x49, 0x30, 0x2E, 0x42, 0x30, 0x44, 0x34,  // CI0.B0D4
                        /* 49D0 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,  // ........
                        /* 49D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53,  // .....\_S
                        /* 49E0 */  0x42, 0x5F, 0x2E, 0x5F, 0x53, 0x41, 0x4E, 0x2E,  // B_._SAN.
                        /* 49E8 */  0x47, 0x45, 0x4E, 0x34, 0x00, 0x04, 0x00, 0x00,  // GEN4....
                        /* 49F0 */  0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 49F8 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x58, 0x02, 0x00,  // .....X..
                        /* 4A00 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 4A08 */  0x00, 0x30, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00,  // .0......
                        /* 4A10 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00,  // ........
                        /* 4A18 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 4A20 */  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4A28 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x29, 0x00,  // ......).
                        /* 4A30 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 4A38 */  0x00, 0x7D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // .}......
                        /* 4A40 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00,  // ........
                        /* 4A48 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 4A50 */  0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // .d......
                        /* 4A58 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4A60 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,  // ........
                        /* 4A68 */  0x00, 0x18, 0x00, 0x00, 0x00, 0x2F, 0x73, 0x68,  // ...../sh
                        /* 4A70 */  0x61, 0x72, 0x65, 0x64, 0x2F, 0x74, 0x61, 0x62,  // ared/tab
                        /* 4A78 */  0x6C, 0x65, 0x73, 0x2F, 0x70, 0x73, 0x76, 0x74,  // les/psvt
                        /* 4A80 */  0x2F, 0x34, 0x38, 0x63, 0x00, 0x07, 0x00, 0x00,  // /48c....
                        /* 4A88 */  0x00, 0xCC, 0x02, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 4A90 */  0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4A98 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,  // ........
                        /* 4AA0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53,  // .....\_S
                        /* 4AA8 */  0x42, 0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30, 0x2E,  // B_.PCI0.
                        /* 4AB0 */  0x42, 0x30, 0x44, 0x34, 0x00, 0x08, 0x00, 0x00,  // B0D4....
                        /* 4AB8 */  0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4AC0 */  0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x5F,  // .\_SB_._
                        /* 4AC8 */  0x53, 0x41, 0x4E, 0x2E, 0x47, 0x45, 0x4E, 0x34,  // SAN.GEN4
                        /* 4AD0 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,  // ........
                        /* 4AD8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 4AE0 */  0x00, 0x58, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // .X......
                        /* 4AE8 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x78, 0x0C, 0x00,  // .....x..
                        /* 4AF0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 4AF8 */  0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4B00 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,  // ........
                        /* 4B08 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 4B10 */  0x00, 0xBC, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00,  // ..4.....
                        /* 4B18 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x7D, 0x00, 0x00,  // .....}..
                        /* 4B20 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 4B28 */  0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4B30 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00,  // .....d..
                        /* 4B38 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 4B40 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4B48 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,  // ........
                        /* 4B50 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53,  // .....\_S
                        /* 4B58 */  0x42, 0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30, 0x2E,  // B_.PCI0.
                        /* 4B60 */  0x42, 0x30, 0x44, 0x34, 0x00, 0x08, 0x00, 0x00,  // B0D4....
                        /* 4B68 */  0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4B70 */  0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x5F,  // .\_SB_._
                        /* 4B78 */  0x53, 0x41, 0x4E, 0x2E, 0x47, 0x45, 0x4E, 0x34,  // SAN.GEN4
                        /* 4B80 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,  // ........
                        /* 4B88 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 4B90 */  0x00, 0x58, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // .X......
                        /* 4B98 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x94, 0x0C, 0x00,  // ........
                        /* 4BA0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 4BA8 */  0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4BB0 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,  // ........
                        /* 4BB8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 4BC0 */  0x00, 0xBC, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00,  // ..4.....
                        /* 4BC8 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x7D, 0x00, 0x00,  // .....}..
                        /* 4BD0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 4BD8 */  0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4BE0 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00,  // .....d..
                        /* 4BE8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 4BF0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4BF8 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,  // ........
                        /* 4C00 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53,  // .....\_S
                        /* 4C08 */  0x42, 0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30, 0x2E,  // B_.PCI0.
                        /* 4C10 */  0x42, 0x30, 0x44, 0x34, 0x00, 0x08, 0x00, 0x00,  // B0D4....
                        /* 4C18 */  0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4C20 */  0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x5F,  // .\_SB_._
                        /* 4C28 */  0x53, 0x41, 0x4E, 0x2E, 0x47, 0x45, 0x4E, 0x34,  // SAN.GEN4
                        /* 4C30 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,  // ........
                        /* 4C38 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 4C40 */  0x00, 0x58, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // .X......
                        /* 4C48 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x96, 0x0C, 0x00,  // ........
                        /* 4C50 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 4C58 */  0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4C60 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,  // ........
                        /* 4C68 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 4C70 */  0x00, 0xEC, 0x2C, 0x00, 0x00, 0x00, 0x00, 0x00,  // ..,.....
                        /* 4C78 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x7D, 0x00, 0x00,  // .....}..
                        /* 4C80 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 4C88 */  0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4C90 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00,  // .....d..
                        /* 4C98 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 4CA0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4CA8 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,  // ........
                        /* 4CB0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53,  // .....\_S
                        /* 4CB8 */  0x42, 0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30, 0x2E,  // B_.PCI0.
                        /* 4CC0 */  0x42, 0x30, 0x44, 0x34, 0x00, 0x08, 0x00, 0x00,  // B0D4....
                        /* 4CC8 */  0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4CD0 */  0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x5F,  // .\_SB_._
                        /* 4CD8 */  0x53, 0x41, 0x4E, 0x2E, 0x47, 0x45, 0x4E, 0x34,  // SAN.GEN4
                        /* 4CE0 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,  // ........
                        /* 4CE8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 4CF0 */  0x00, 0x58, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // .X......
                        /* 4CF8 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x30, 0x0E, 0x00,  // .....0..
                        /* 4D00 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 4D08 */  0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4D10 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,  // ........
                        /* 4D18 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 4D20 */  0x00, 0xEC, 0x2C, 0x00, 0x00, 0x00, 0x00, 0x00,  // ..,.....
                        /* 4D28 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x7D, 0x00, 0x00,  // .....}..
                        /* 4D30 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 4D38 */  0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4D40 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00,  // .....d..
                        /* 4D48 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 4D50 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4D58 */  0x00, 0x01, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00,  // ........
                        /* 4D60 */  0x00, 0x2F, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,  // ./shared
                        /* 4D68 */  0x2F, 0x74, 0x61, 0x62, 0x6C, 0x65, 0x73, 0x2F,  // /tables/
                        /* 4D70 */  0x70, 0x73, 0x76, 0x74, 0x2F, 0x6D, 0x72, 0x00,  // psvt/mr.
                        /* 4D78 */  0x07, 0x00, 0x00, 0x00, 0xCC, 0x02, 0x00, 0x00,  // ........
                        /* 4D80 */  0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                        /* 4D88 */  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,  // ........
                        /* 4D90 */  0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4D98 */  0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x50, 0x43,  // \_SB_.PC
                        /* 4DA0 */  0x49, 0x30, 0x2E, 0x42, 0x30, 0x44, 0x34, 0x00,  // I0.B0D4.
                        /* 4DA8 */  0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,  // ........
                        /* 4DB0 */  0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42,  // ....\_SB
                        /* 4DB8 */  0x5F, 0x2E, 0x5F, 0x53, 0x41, 0x4E, 0x2E, 0x47,  // _._SAN.G
                        /* 4DC0 */  0x45, 0x4E, 0x34, 0x00, 0x04, 0x00, 0x00, 0x00,  // EN4.....
                        /* 4DC8 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4DD0 */  0x04, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00,  // ........
                        /* 4DD8 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 4DE0 */  0x6E, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // n.......
                        /* 4DE8 */  0x04, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00,  // ........
                        /* 4DF0 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 4DF8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4E00 */  0x04, 0x00, 0x00, 0x00, 0x98, 0x3A, 0x00, 0x00,  // .....:..
                        /* 4E08 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 4E10 */  0x7D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // }.......
                        /* 4E18 */  0x04, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00,  // ........
                        /* 4E20 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 4E28 */  0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // d.......
                        /* 4E30 */  0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4E38 */  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,  // ........
                        /* 4E40 */  0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4E48 */  0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x50, 0x43,  // \_SB_.PC
                        /* 4E50 */  0x49, 0x30, 0x2E, 0x42, 0x30, 0x44, 0x34, 0x00,  // I0.B0D4.
                        /* 4E58 */  0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,  // ........
                        /* 4E60 */  0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42,  // ....\_SB
                        /* 4E68 */  0x5F, 0x2E, 0x5F, 0x53, 0x41, 0x4E, 0x2E, 0x47,  // _._SAN.G
                        /* 4E70 */  0x45, 0x4E, 0x34, 0x00, 0x04, 0x00, 0x00, 0x00,  // EN4.....
                        /* 4E78 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4E80 */  0x04, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00,  // ........
                        /* 4E88 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 4E90 */  0x91, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4E98 */  0x04, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00,  // ........
                        /* 4EA0 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 4EA8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4EB0 */  0x04, 0x00, 0x00, 0x00, 0xD4, 0x30, 0x00, 0x00,  // .....0..
                        /* 4EB8 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 4EC0 */  0x7D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // }.......
                        /* 4EC8 */  0x04, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00,  // ........
                        /* 4ED0 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 4ED8 */  0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // d.......
                        /* 4EE0 */  0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4EE8 */  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,  // ........
                        /* 4EF0 */  0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4EF8 */  0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x50, 0x43,  // \_SB_.PC
                        /* 4F00 */  0x49, 0x30, 0x2E, 0x42, 0x30, 0x44, 0x34, 0x00,  // I0.B0D4.
                        /* 4F08 */  0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,  // ........
                        /* 4F10 */  0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42,  // ....\_SB
                        /* 4F18 */  0x5F, 0x2E, 0x5F, 0x53, 0x41, 0x4E, 0x2E, 0x47,  // _._SAN.G
                        /* 4F20 */  0x45, 0x4E, 0x34, 0x00, 0x04, 0x00, 0x00, 0x00,  // EN4.....
                        /* 4F28 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4F30 */  0x04, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00,  // ........
                        /* 4F38 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 4F40 */  0x99, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4F48 */  0x04, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00,  // ........
                        /* 4F50 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 4F58 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4F60 */  0x04, 0x00, 0x00, 0x00, 0xD4, 0x30, 0x00, 0x00,  // .....0..
                        /* 4F68 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 4F70 */  0x7D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // }.......
                        /* 4F78 */  0x04, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00,  // ........
                        /* 4F80 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 4F88 */  0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // d.......
                        /* 4F90 */  0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4F98 */  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,  // ........
                        /* 4FA0 */  0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4FA8 */  0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x50, 0x43,  // \_SB_.PC
                        /* 4FB0 */  0x49, 0x30, 0x2E, 0x42, 0x30, 0x44, 0x34, 0x00,  // I0.B0D4.
                        /* 4FB8 */  0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,  // ........
                        /* 4FC0 */  0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42,  // ....\_SB
                        /* 4FC8 */  0x5F, 0x2E, 0x5F, 0x53, 0x41, 0x4E, 0x2E, 0x47,  // _._SAN.G
                        /* 4FD0 */  0x45, 0x4E, 0x34, 0x00, 0x04, 0x00, 0x00, 0x00,  // EN4.....
                        /* 4FD8 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4FE0 */  0x04, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00,  // ....2...
                        /* 4FE8 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 4FF0 */  0x30, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 0.......
                        /* 4FF8 */  0x04, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00,  // ........
                        /* 5000 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 5008 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 5010 */  0x04, 0x00, 0x00, 0x00, 0x88, 0x13, 0x00, 0x00,  // ........
                        /* 5018 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 5020 */  0x7D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // }.......
                        /* 5028 */  0x04, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00,  // ........
                        /* 5030 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 5038 */  0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // d.......
                        /* 5040 */  0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 5048 */  0x00, 0x00, 0x00, 0x00                           // ....
                    }
                })
            }
            ElseIf (((EBID & 0x0C) == 0x08))
            {
                Return (Package (0x01)
                {
                    Buffer (0x552C)
                    {
                        /* 0000 */  0xE5, 0x1F, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x01,  // ........
                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                        /* 0010 */  0x1B, 0x00, 0x00, 0x00, 0x2F, 0x70, 0x61, 0x72,  // ..../par
                        /* 0018 */  0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6E, 0x74,  // ticipant
                        /* 0020 */  0x73, 0x2F, 0x47, 0x45, 0x4E, 0x35, 0x2E, 0x44,  // s/GEN5.D
                        /* 0028 */  0x30, 0x2F, 0x67, 0x74, 0x73, 0x68, 0x00, 0x06,  // 0/gtsh..
                        /* 0030 */  0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xC0,  // ........
                        /* 0038 */  0x0A, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x25,  // .......%
                        /* 0040 */  0x00, 0x00, 0x00, 0x2F, 0x70, 0x61, 0x72, 0x74,  // .../part
                        /* 0048 */  0x69, 0x63, 0x69, 0x70, 0x61, 0x6E, 0x74, 0x73,  // icipants
                        /* 0050 */  0x2F, 0x47, 0x45, 0x4E, 0x35, 0x2E, 0x44, 0x30,  // /GEN5.D0
                        /* 0058 */  0x2F, 0x74, 0x72, 0x69, 0x70, 0x70, 0x6F, 0x69,  // /trippoi
                        /* 0060 */  0x6E, 0x74, 0x2F, 0x5F, 0x61, 0x63, 0x30, 0x00,  // nt/_ac0.
                        /* 0068 */  0x06, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 0070 */  0x68, 0x0D, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // h.......
                        /* 0078 */  0x25, 0x00, 0x00, 0x00, 0x2F, 0x70, 0x61, 0x72,  // %.../par
                        /* 0080 */  0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6E, 0x74,  // ticipant
                        /* 0088 */  0x73, 0x2F, 0x47, 0x45, 0x4E, 0x35, 0x2E, 0x44,  // s/GEN5.D
                        /* 0090 */  0x30, 0x2F, 0x74, 0x72, 0x69, 0x70, 0x70, 0x6F,  // 0/trippo
                        /* 0098 */  0x69, 0x6E, 0x74, 0x2F, 0x5F, 0x61, 0x63, 0x31,  // int/_ac1
                        /* 00A0 */  0x00, 0x06, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 00A8 */  0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x00,  // ........
                        /* 00B0 */  0x00, 0x25, 0x00, 0x00, 0x00, 0x2F, 0x70, 0x61,  // .%.../pa
                        /* 00B8 */  0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6E,  // rticipan
                        /* 00C0 */  0x74, 0x73, 0x2F, 0x47, 0x45, 0x4E, 0x35, 0x2E,  // ts/GEN5.
                        /* 00C8 */  0x44, 0x30, 0x2F, 0x74, 0x72, 0x69, 0x70, 0x70,  // D0/tripp
                        /* 00D0 */  0x6F, 0x69, 0x6E, 0x74, 0x2F, 0x5F, 0x61, 0x63,  // oint/_ac
                        /* 00D8 */  0x32, 0x00, 0x06, 0x00, 0x00, 0x00, 0x04, 0x00,  // 2.......
                        /* 00E0 */  0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00,  // ........
                        /* 00E8 */  0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0x2F, 0x70,  // ..%.../p
                        /* 00F0 */  0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,  // articipa
                        /* 00F8 */  0x6E, 0x74, 0x73, 0x2F, 0x47, 0x45, 0x4E, 0x35,  // nts/GEN5
                        /* 0100 */  0x2E, 0x44, 0x30, 0x2F, 0x74, 0x72, 0x69, 0x70,  // .D0/trip
                        /* 0108 */  0x70, 0x6F, 0x69, 0x6E, 0x74, 0x2F, 0x5F, 0x61,  // point/_a
                        /* 0110 */  0x63, 0x33, 0x00, 0x06, 0x00, 0x00, 0x00, 0x04,  // c3......
                        /* 0118 */  0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x01,  // ........
                        /* 0120 */  0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0x2F,  // ...%.../
                        /* 0128 */  0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,  // particip
                        /* 0130 */  0x61, 0x6E, 0x74, 0x73, 0x2F, 0x47, 0x45, 0x4E,  // ants/GEN
                        /* 0138 */  0x35, 0x2E, 0x44, 0x30, 0x2F, 0x74, 0x72, 0x69,  // 5.D0/tri
                        /* 0140 */  0x70, 0x70, 0x6F, 0x69, 0x6E, 0x74, 0x2F, 0x5F,  // ppoint/_
                        /* 0148 */  0x61, 0x63, 0x34, 0x00, 0x06, 0x00, 0x00, 0x00,  // ac4.....
                        /* 0150 */  0x04, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                        /* 0158 */  0x01, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00,  // ....%...
                        /* 0160 */  0x2F, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,  // /partici
                        /* 0168 */  0x70, 0x61, 0x6E, 0x74, 0x73, 0x2F, 0x47, 0x45,  // pants/GE
                        /* 0170 */  0x4E, 0x35, 0x2E, 0x44, 0x30, 0x2F, 0x74, 0x72,  // N5.D0/tr
                        /* 0178 */  0x69, 0x70, 0x70, 0x6F, 0x69, 0x6E, 0x74, 0x2F,  // ippoint/
                        /* 0180 */  0x5F, 0x61, 0x63, 0x35, 0x00, 0x06, 0x00, 0x00,  // _ac5....
                        /* 0188 */  0x00, 0x04, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF,  // ........
                        /* 0190 */  0xFF, 0x01, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00,  // .....%..
                        /* 0198 */  0x00, 0x2F, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,  // ./partic
                        /* 01A0 */  0x69, 0x70, 0x61, 0x6E, 0x74, 0x73, 0x2F, 0x47,  // ipants/G
                        /* 01A8 */  0x45, 0x4E, 0x35, 0x2E, 0x44, 0x30, 0x2F, 0x74,  // EN5.D0/t
                        /* 01B0 */  0x72, 0x69, 0x70, 0x70, 0x6F, 0x69, 0x6E, 0x74,  // rippoint
                        /* 01B8 */  0x2F, 0x5F, 0x61, 0x63, 0x36, 0x00, 0x06, 0x00,  // /_ac6...
                        /* 01C0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xFF, 0xFF,  // ........
                        /* 01C8 */  0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x25, 0x00,  // ......%.
                        /* 01D0 */  0x00, 0x00, 0x2F, 0x70, 0x61, 0x72, 0x74, 0x69,  // ../parti
                        /* 01D8 */  0x63, 0x69, 0x70, 0x61, 0x6E, 0x74, 0x73, 0x2F,  // cipants/
                        /* 01E0 */  0x47, 0x45, 0x4E, 0x35, 0x2E, 0x44, 0x30, 0x2F,  // GEN5.D0/
                        /* 01E8 */  0x74, 0x72, 0x69, 0x70, 0x70, 0x6F, 0x69, 0x6E,  // trippoin
                        /* 01F0 */  0x74, 0x2F, 0x5F, 0x61, 0x63, 0x37, 0x00, 0x06,  // t/_ac7..
                        /* 01F8 */  0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xFF,  // ........
                        /* 0200 */  0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x25,  // .......%
                        /* 0208 */  0x00, 0x00, 0x00, 0x2F, 0x70, 0x61, 0x72, 0x74,  // .../part
                        /* 0210 */  0x69, 0x63, 0x69, 0x70, 0x61, 0x6E, 0x74, 0x73,  // icipants
                        /* 0218 */  0x2F, 0x47, 0x45, 0x4E, 0x35, 0x2E, 0x44, 0x30,  // /GEN5.D0
                        /* 0220 */  0x2F, 0x74, 0x72, 0x69, 0x70, 0x70, 0x6F, 0x69,  // /trippoi
                        /* 0228 */  0x6E, 0x74, 0x2F, 0x5F, 0x61, 0x63, 0x38, 0x00,  // nt/_ac8.
                        /* 0230 */  0x06, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 0238 */  0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00,  // ........
                        /* 0240 */  0x25, 0x00, 0x00, 0x00, 0x2F, 0x70, 0x61, 0x72,  // %.../par
                        /* 0248 */  0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6E, 0x74,  // ticipant
                        /* 0250 */  0x73, 0x2F, 0x47, 0x45, 0x4E, 0x35, 0x2E, 0x44,  // s/GEN5.D
                        /* 0258 */  0x30, 0x2F, 0x74, 0x72, 0x69, 0x70, 0x70, 0x6F,  // 0/trippo
                        /* 0260 */  0x69, 0x6E, 0x74, 0x2F, 0x5F, 0x61, 0x63, 0x39,  // int/_ac9
                        /* 0268 */  0x00, 0x06, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 0270 */  0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x00,  // ........
                        /* 0278 */  0x00, 0x25, 0x00, 0x00, 0x00, 0x2F, 0x70, 0x61,  // .%.../pa
                        /* 0280 */  0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6E,  // rticipan
                        /* 0288 */  0x74, 0x73, 0x2F, 0x47, 0x45, 0x4E, 0x35, 0x2E,  // ts/GEN5.
                        /* 0290 */  0x44, 0x30, 0x2F, 0x74, 0x72, 0x69, 0x70, 0x70,  // D0/tripp
                        /* 0298 */  0x6F, 0x69, 0x6E, 0x74, 0x2F, 0x5F, 0x63, 0x72,  // oint/_cr
                        /* 02A0 */  0x33, 0x00, 0x06, 0x00, 0x00, 0x00, 0x04, 0x00,  // 3.......
                        /* 02A8 */  0x00, 0x00, 0x18, 0x0D, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 02B0 */  0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0x2F, 0x70,  // ..%.../p
                        /* 02B8 */  0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,  // articipa
                        /* 02C0 */  0x6E, 0x74, 0x73, 0x2F, 0x47, 0x45, 0x4E, 0x35,  // nts/GEN5
                        /* 02C8 */  0x2E, 0x44, 0x30, 0x2F, 0x74, 0x72, 0x69, 0x70,  // .D0/trip
                        /* 02D0 */  0x70, 0x6F, 0x69, 0x6E, 0x74, 0x2F, 0x5F, 0x63,  // point/_c
                        /* 02D8 */  0x72, 0x74, 0x00, 0x06, 0x00, 0x00, 0x00, 0x04,  // rt......
                        /* 02E0 */  0x00, 0x00, 0x00, 0x18, 0x0D, 0x00, 0x00, 0x01,  // ........
                        /* 02E8 */  0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0x2F,  // ...%.../
                        /* 02F0 */  0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,  // particip
                        /* 02F8 */  0x61, 0x6E, 0x74, 0x73, 0x2F, 0x47, 0x45, 0x4E,  // ants/GEN
                        /* 0300 */  0x35, 0x2E, 0x44, 0x30, 0x2F, 0x74, 0x72, 0x69,  // 5.D0/tri
                        /* 0308 */  0x70, 0x70, 0x6F, 0x69, 0x6E, 0x74, 0x2F, 0x5F,  // ppoint/_
                        /* 0310 */  0x68, 0x6F, 0x74, 0x00, 0x06, 0x00, 0x00, 0x00,  // hot.....
                        /* 0318 */  0x04, 0x00, 0x00, 0x00, 0xF0, 0x0C, 0x00, 0x00,  // ........
                        /* 0320 */  0x01, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00,  // ....%...
                        /* 0328 */  0x2F, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,  // /partici
                        /* 0330 */  0x70, 0x61, 0x6E, 0x74, 0x73, 0x2F, 0x47, 0x45,  // pants/GE
                        /* 0338 */  0x4E, 0x35, 0x2E, 0x44, 0x30, 0x2F, 0x74, 0x72,  // N5.D0/tr
                        /* 0340 */  0x69, 0x70, 0x70, 0x6F, 0x69, 0x6E, 0x74, 0x2F,  // ippoint/
                        /* 0348 */  0x5F, 0x70, 0x73, 0x76, 0x00, 0x06, 0x00, 0x00,  // _psv....
                        /* 0350 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x68, 0x0D, 0x00,  // .....h..
                        /* 0358 */  0x00, 0x01, 0x00, 0x00, 0x00, 0x1B, 0x00, 0x00,  // ........
                        /* 0360 */  0x00, 0x2F, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,  // ./partic
                        /* 0368 */  0x69, 0x70, 0x61, 0x6E, 0x74, 0x73, 0x2F, 0x49,  // ipants/I
                        /* 0370 */  0x45, 0x54, 0x4D, 0x2E, 0x44, 0x30, 0x2F, 0x70,  // ETM.D0/p
                        /* 0378 */  0x73, 0x76, 0x74, 0x00, 0x07, 0x00, 0x00, 0x00,  // svt.....
                        /* 0380 */  0x6C, 0x01, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // l.......
                        /* 0388 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0390 */  0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,  // ........
                        /* 0398 */  0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42,  // ....\_SB
                        /* 03A0 */  0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30, 0x2E, 0x42,  // _.PCI0.B
                        /* 03A8 */  0x30, 0x44, 0x34, 0x00, 0x08, 0x00, 0x00, 0x00,  // 0D4.....
                        /* 03B0 */  0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 03B8 */  0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x5F, 0x53,  // \_SB_._S
                        /* 03C0 */  0x41, 0x4E, 0x2E, 0x47, 0x45, 0x4E, 0x34, 0x00,  // AN.GEN4.
                        /* 03C8 */  0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                        /* 03D0 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 03D8 */  0x58, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // X.......
                        /* 03E0 */  0x04, 0x00, 0x00, 0x00, 0x78, 0x0C, 0x00, 0x00,  // ....x...
                        /* 03E8 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 03F0 */  0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 03F8 */  0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 0400 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 0408 */  0x68, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // hB......
                        /* 0410 */  0x04, 0x00, 0x00, 0x00, 0x7D, 0x00, 0x00, 0x00,  // ....}...
                        /* 0418 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 0420 */  0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0428 */  0x04, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00,  // ....d...
                        /* 0430 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 0438 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0440 */  0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,  // ........
                        /* 0448 */  0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42,  // ....\_SB
                        /* 0450 */  0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30, 0x2E, 0x42,  // _.PCI0.B
                        /* 0458 */  0x30, 0x44, 0x34, 0x00, 0x08, 0x00, 0x00, 0x00,  // 0D4.....
                        /* 0460 */  0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0468 */  0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x5F, 0x53,  // \_SB_._S
                        /* 0470 */  0x41, 0x4E, 0x2E, 0x47, 0x45, 0x4E, 0x34, 0x00,  // AN.GEN4.
                        /* 0478 */  0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                        /* 0480 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 0488 */  0x58, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // X.......
                        /* 0490 */  0x04, 0x00, 0x00, 0x00, 0x30, 0x0E, 0x00, 0x00,  // ....0...
                        /* 0498 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 04A0 */  0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 04A8 */  0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 04B0 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 04B8 */  0x68, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // hB......
                        /* 04C0 */  0x04, 0x00, 0x00, 0x00, 0x7D, 0x00, 0x00, 0x00,  // ....}...
                        /* 04C8 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 04D0 */  0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 04D8 */  0x04, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00,  // ....d...
                        /* 04E0 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 04E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 04F0 */  0x01, 0x00, 0x00, 0x00, 0x1B, 0x00, 0x00, 0x00,  // ........
                        /* 04F8 */  0x2F, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,  // /partici
                        /* 0500 */  0x70, 0x61, 0x6E, 0x74, 0x73, 0x2F, 0x54, 0x43,  // pants/TC
                        /* 0508 */  0x50, 0x55, 0x2E, 0x44, 0x30, 0x2F, 0x67, 0x74,  // PU.D0/gt
                        /* 0510 */  0x73, 0x68, 0x00, 0x06, 0x00, 0x00, 0x00, 0x04,  // sh......
                        /* 0518 */  0x00, 0x00, 0x00, 0xC0, 0x0A, 0x00, 0x00, 0x01,  // ........
                        /* 0520 */  0x00, 0x00, 0x00, 0x26, 0x00, 0x00, 0x00, 0x2F,  // ...&.../
                        /* 0528 */  0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,  // particip
                        /* 0530 */  0x61, 0x6E, 0x74, 0x73, 0x2F, 0x54, 0x43, 0x50,  // ants/TCP
                        /* 0538 */  0x55, 0x2E, 0x44, 0x30, 0x2F, 0x6C, 0x61, 0x73,  // U.D0/las
                        /* 0540 */  0x74, 0x5F, 0x65, 0x77, 0x6D, 0x61, 0x5F, 0x70,  // t_ewma_p
                        /* 0548 */  0x6F, 0x77, 0x65, 0x72, 0x00, 0x1A, 0x00, 0x00,  // ower....
                        /* 0550 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x57, 0x2B, 0x00,  // .....W+.
                        /* 0558 */  0x00, 0x01, 0x00, 0x00, 0x00, 0x26, 0x00, 0x00,  // .....&..
                        /* 0560 */  0x00, 0x2F, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,  // ./partic
                        /* 0568 */  0x69, 0x70, 0x61, 0x6E, 0x74, 0x73, 0x2F, 0x54,  // ipants/T
                        /* 0570 */  0x43, 0x50, 0x55, 0x2E, 0x44, 0x30, 0x2F, 0x6C,  // CPU.D0/l
                        /* 0578 */  0x61, 0x73, 0x74, 0x5F, 0x70, 0x6F, 0x77, 0x65,  // ast_powe
                        /* 0580 */  0x72, 0x5F, 0x75, 0x73, 0x65, 0x64, 0x00, 0x1A,  // r_used..
                        /* 0588 */  0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x9A,  // ........
                        /* 0590 */  0x2A, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1B,  // *.......
                        /* 0598 */  0x00, 0x00, 0x00, 0x2F, 0x70, 0x61, 0x72, 0x74,  // .../part
                        /* 05A0 */  0x69, 0x63, 0x69, 0x70, 0x61, 0x6E, 0x74, 0x73,  // icipants
                        /* 05A8 */  0x2F, 0x54, 0x43, 0x50, 0x55, 0x2E, 0x44, 0x30,  // /TCPU.D0
                        /* 05B0 */  0x2F, 0x70, 0x70, 0x63, 0x63, 0x00, 0x07, 0x00,  // /ppcc...
                        /* 05B8 */  0x00, 0x00, 0x9C, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 05C0 */  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 05C8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 05D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 05D8 */  0x00, 0x00, 0xAC, 0x0D, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 05E0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xA8, 0x61,  // .......a
                        /* 05E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 05F0 */  0x00, 0x00, 0x60, 0x6D, 0x00, 0x00, 0x00, 0x00,  // ..`m....
                        /* 05F8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x7D,  // .......}
                        /* 0600 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0608 */  0x00, 0x00, 0xF4, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0610 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 0618 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0620 */  0x00, 0x00, 0xB8, 0x88, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0628 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xB8, 0x88,  // ........
                        /* 0630 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0638 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0640 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0648 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0650 */  0x00, 0x00, 0xF4, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0658 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x25, 0x00,  // ......%.
                        /* 0660 */  0x00, 0x00, 0x2F, 0x70, 0x61, 0x72, 0x74, 0x69,  // ../parti
                        /* 0668 */  0x63, 0x69, 0x70, 0x61, 0x6E, 0x74, 0x73, 0x2F,  // cipants/
                        /* 0670 */  0x54, 0x43, 0x50, 0x55, 0x2E, 0x44, 0x30, 0x2F,  // TCPU.D0/
                        /* 0678 */  0x74, 0x72, 0x69, 0x70, 0x70, 0x6F, 0x69, 0x6E,  // trippoin
                        /* 0680 */  0x74, 0x2F, 0x5F, 0x61, 0x63, 0x30, 0x00, 0x06,  // t/_ac0..
                        /* 0688 */  0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x94,  // ........
                        /* 0690 */  0x0E, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x25,  // .......%
                        /* 0698 */  0x00, 0x00, 0x00, 0x2F, 0x70, 0x61, 0x72, 0x74,  // .../part
                        /* 06A0 */  0x69, 0x63, 0x69, 0x70, 0x61, 0x6E, 0x74, 0x73,  // icipants
                        /* 06A8 */  0x2F, 0x54, 0x43, 0x50, 0x55, 0x2E, 0x44, 0x30,  // /TCPU.D0
                        /* 06B0 */  0x2F, 0x74, 0x72, 0x69, 0x70, 0x70, 0x6F, 0x69,  // /trippoi
                        /* 06B8 */  0x6E, 0x74, 0x2F, 0x5F, 0x61, 0x63, 0x31, 0x00,  // nt/_ac1.
                        /* 06C0 */  0x06, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 06C8 */  0x62, 0x0E, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // b.......
                        /* 06D0 */  0x25, 0x00, 0x00, 0x00, 0x2F, 0x70, 0x61, 0x72,  // %.../par
                        /* 06D8 */  0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6E, 0x74,  // ticipant
                        /* 06E0 */  0x73, 0x2F, 0x54, 0x43, 0x50, 0x55, 0x2E, 0x44,  // s/TCPU.D
                        /* 06E8 */  0x30, 0x2F, 0x74, 0x72, 0x69, 0x70, 0x70, 0x6F,  // 0/trippo
                        /* 06F0 */  0x69, 0x6E, 0x74, 0x2F, 0x5F, 0x61, 0x63, 0x32,  // int/_ac2
                        /* 06F8 */  0x00, 0x06, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 0700 */  0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x00,  // ........
                        /* 0708 */  0x00, 0x25, 0x00, 0x00, 0x00, 0x2F, 0x70, 0x61,  // .%.../pa
                        /* 0710 */  0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6E,  // rticipan
                        /* 0718 */  0x74, 0x73, 0x2F, 0x54, 0x43, 0x50, 0x55, 0x2E,  // ts/TCPU.
                        /* 0720 */  0x44, 0x30, 0x2F, 0x74, 0x72, 0x69, 0x70, 0x70,  // D0/tripp
                        /* 0728 */  0x6F, 0x69, 0x6E, 0x74, 0x2F, 0x5F, 0x61, 0x63,  // oint/_ac
                        /* 0730 */  0x33, 0x00, 0x06, 0x00, 0x00, 0x00, 0x04, 0x00,  // 3.......
                        /* 0738 */  0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00,  // ........
                        /* 0740 */  0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0x2F, 0x70,  // ..%.../p
                        /* 0748 */  0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,  // articipa
                        /* 0750 */  0x6E, 0x74, 0x73, 0x2F, 0x54, 0x43, 0x50, 0x55,  // nts/TCPU
                        /* 0758 */  0x2E, 0x44, 0x30, 0x2F, 0x74, 0x72, 0x69, 0x70,  // .D0/trip
                        /* 0760 */  0x70, 0x6F, 0x69, 0x6E, 0x74, 0x2F, 0x5F, 0x61,  // point/_a
                        /* 0768 */  0x63, 0x34, 0x00, 0x06, 0x00, 0x00, 0x00, 0x04,  // c4......
                        /* 0770 */  0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x01,  // ........
                        /* 0778 */  0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0x2F,  // ...%.../
                        /* 0780 */  0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,  // particip
                        /* 0788 */  0x61, 0x6E, 0x74, 0x73, 0x2F, 0x54, 0x43, 0x50,  // ants/TCP
                        /* 0790 */  0x55, 0x2E, 0x44, 0x30, 0x2F, 0x74, 0x72, 0x69,  // U.D0/tri
                        /* 0798 */  0x70, 0x70, 0x6F, 0x69, 0x6E, 0x74, 0x2F, 0x5F,  // ppoint/_
                        /* 07A0 */  0x61, 0x63, 0x35, 0x00, 0x06, 0x00, 0x00, 0x00,  // ac5.....
                        /* 07A8 */  0x04, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                        /* 07B0 */  0x01, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00,  // ....%...
                        /* 07B8 */  0x2F, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,  // /partici
                        /* 07C0 */  0x70, 0x61, 0x6E, 0x74, 0x73, 0x2F, 0x54, 0x43,  // pants/TC
                        /* 07C8 */  0x50, 0x55, 0x2E, 0x44, 0x30, 0x2F, 0x74, 0x72,  // PU.D0/tr
                        /* 07D0 */  0x69, 0x70, 0x70, 0x6F, 0x69, 0x6E, 0x74, 0x2F,  // ippoint/
                        /* 07D8 */  0x5F, 0x61, 0x63, 0x36, 0x00, 0x06, 0x00, 0x00,  // _ac6....
                        /* 07E0 */  0x00, 0x04, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF,  // ........
                        /* 07E8 */  0xFF, 0x01, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00,  // .....%..
                        /* 07F0 */  0x00, 0x2F, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,  // ./partic
                        /* 07F8 */  0x69, 0x70, 0x61, 0x6E, 0x74, 0x73, 0x2F, 0x54,  // ipants/T
                        /* 0800 */  0x43, 0x50, 0x55, 0x2E, 0x44, 0x30, 0x2F, 0x74,  // CPU.D0/t
                        /* 0808 */  0x72, 0x69, 0x70, 0x70, 0x6F, 0x69, 0x6E, 0x74,  // rippoint
                        /* 0810 */  0x2F, 0x5F, 0x61, 0x63, 0x37, 0x00, 0x06, 0x00,  // /_ac7...
                        /* 0818 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xFF, 0xFF,  // ........
                        /* 0820 */  0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x25, 0x00,  // ......%.
                        /* 0828 */  0x00, 0x00, 0x2F, 0x70, 0x61, 0x72, 0x74, 0x69,  // ../parti
                        /* 0830 */  0x63, 0x69, 0x70, 0x61, 0x6E, 0x74, 0x73, 0x2F,  // cipants/
                        /* 0838 */  0x54, 0x43, 0x50, 0x55, 0x2E, 0x44, 0x30, 0x2F,  // TCPU.D0/
                        /* 0840 */  0x74, 0x72, 0x69, 0x70, 0x70, 0x6F, 0x69, 0x6E,  // trippoin
                        /* 0848 */  0x74, 0x2F, 0x5F, 0x61, 0x63, 0x38, 0x00, 0x06,  // t/_ac8..
                        /* 0850 */  0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xFF,  // ........
                        /* 0858 */  0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x25,  // .......%
                        /* 0860 */  0x00, 0x00, 0x00, 0x2F, 0x70, 0x61, 0x72, 0x74,  // .../part
                        /* 0868 */  0x69, 0x63, 0x69, 0x70, 0x61, 0x6E, 0x74, 0x73,  // icipants
                        /* 0870 */  0x2F, 0x54, 0x43, 0x50, 0x55, 0x2E, 0x44, 0x30,  // /TCPU.D0
                        /* 0878 */  0x2F, 0x74, 0x72, 0x69, 0x70, 0x70, 0x6F, 0x69,  // /trippoi
                        /* 0880 */  0x6E, 0x74, 0x2F, 0x5F, 0x61, 0x63, 0x39, 0x00,  // nt/_ac9.
                        /* 0888 */  0x06, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 0890 */  0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00,  // ........
                        /* 0898 */  0x25, 0x00, 0x00, 0x00, 0x2F, 0x70, 0x61, 0x72,  // %.../par
                        /* 08A0 */  0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6E, 0x74,  // ticipant
                        /* 08A8 */  0x73, 0x2F, 0x54, 0x43, 0x50, 0x55, 0x2E, 0x44,  // s/TCPU.D
                        /* 08B0 */  0x30, 0x2F, 0x74, 0x72, 0x69, 0x70, 0x70, 0x6F,  // 0/trippo
                        /* 08B8 */  0x69, 0x6E, 0x74, 0x2F, 0x5F, 0x63, 0x72, 0x33,  // int/_cr3
                        /* 08C0 */  0x00, 0x06, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 08C8 */  0x00, 0x8E, 0x0F, 0x00, 0x00, 0x01, 0x00, 0x00,  // ........
                        /* 08D0 */  0x00, 0x25, 0x00, 0x00, 0x00, 0x2F, 0x70, 0x61,  // .%.../pa
                        /* 08D8 */  0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6E,  // rticipan
                        /* 08E0 */  0x74, 0x73, 0x2F, 0x54, 0x43, 0x50, 0x55, 0x2E,  // ts/TCPU.
                        /* 08E8 */  0x44, 0x30, 0x2F, 0x74, 0x72, 0x69, 0x70, 0x70,  // D0/tripp
                        /* 08F0 */  0x6F, 0x69, 0x6E, 0x74, 0x2F, 0x5F, 0x63, 0x72,  // oint/_cr
                        /* 08F8 */  0x74, 0x00, 0x06, 0x00, 0x00, 0x00, 0x04, 0x00,  // t.......
                        /* 0900 */  0x00, 0x00, 0x8E, 0x0F, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 0908 */  0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0x2F, 0x70,  // ..%.../p
                        /* 0910 */  0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,  // articipa
                        /* 0918 */  0x6E, 0x74, 0x73, 0x2F, 0x54, 0x43, 0x50, 0x55,  // nts/TCPU
                        /* 0920 */  0x2E, 0x44, 0x30, 0x2F, 0x74, 0x72, 0x69, 0x70,  // .D0/trip
                        /* 0928 */  0x70, 0x6F, 0x69, 0x6E, 0x74, 0x2F, 0x5F, 0x68,  // point/_h
                        /* 0930 */  0x6F, 0x74, 0x00, 0x06, 0x00, 0x00, 0x00, 0x04,  // ot......
                        /* 0938 */  0x00, 0x00, 0x00, 0x8E, 0x0F, 0x00, 0x00, 0x01,  // ........
                        /* 0940 */  0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0x2F,  // ...%.../
                        /* 0948 */  0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,  // particip
                        /* 0950 */  0x61, 0x6E, 0x74, 0x73, 0x2F, 0x54, 0x43, 0x50,  // ants/TCP
                        /* 0958 */  0x55, 0x2E, 0x44, 0x30, 0x2F, 0x74, 0x72, 0x69,  // U.D0/tri
                        /* 0960 */  0x70, 0x70, 0x6F, 0x69, 0x6E, 0x74, 0x2F, 0x5F,  // ppoint/_
                        /* 0968 */  0x70, 0x73, 0x76, 0x00, 0x06, 0x00, 0x00, 0x00,  // psv.....
                        /* 0970 */  0x04, 0x00, 0x00, 0x00, 0x94, 0x0E, 0x00, 0x00,  // ........
                        /* 0978 */  0x01, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00,  // ........
                        /* 0980 */  0x2F, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2F,  // /shared/
                        /* 0988 */  0x65, 0x78, 0x70, 0x6F, 0x72, 0x74, 0x2F, 0x61,  // export/a
                        /* 0990 */  0x70, 0x61, 0x74, 0x00, 0x07, 0x00, 0x00, 0x00,  // pat.....
                        /* 0998 */  0x1A, 0x05, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 09A0 */  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 09A8 */  0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                        /* 09B0 */  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,  // ........
                        /* 09B8 */  0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 09C0 */  0x44, 0x43, 0x20, 0x53, 0x61, 0x76, 0x65, 0x72,  // DC Saver
                        /* 09C8 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00,  // ........
                        /* 09D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53,  // .....\_S
                        /* 09D8 */  0x42, 0x5F, 0x2E, 0x49, 0x45, 0x54, 0x4D, 0x00,  // B_.IETM.
                        /* 09E0 */  0x04, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00,  // ........
                        /* 09E8 */  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,  // ........
                        /* 09F0 */  0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 09F8 */  0x50, 0x53, 0x56, 0x54, 0x00, 0x08, 0x00, 0x00,  // PSVT....
                        /* 0A00 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0A08 */  0x00, 0x34, 0x35, 0x63, 0x00, 0x04, 0x00, 0x00,  // .45c....
                        /* 0A10 */  0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0A18 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00,  // ........
                        /* 0A20 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x43, 0x20,  // .....DC 
                        /* 0A28 */  0x53, 0x61, 0x76, 0x65, 0x72, 0x00, 0x08, 0x00,  // Saver...
                        /* 0A30 */  0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0A38 */  0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E,  // ..\_SB_.
                        /* 0A40 */  0x49, 0x45, 0x54, 0x4D, 0x00, 0x04, 0x00, 0x00,  // IETM....
                        /* 0A48 */  0x00, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0A50 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00,  // ........
                        /* 0A58 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x49, 0x44,  // .....PID
                        /* 0A60 */  0x41, 0x00, 0x08, 0x00, 0x00, 0x00, 0x04, 0x00,  // A.......
                        /* 0A68 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x35,  // ......45
                        /* 0A70 */  0x63, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00,  // c.......
                        /* 0A78 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 0A80 */  0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0A88 */  0x00, 0x00, 0x42, 0x61, 0x6C, 0x61, 0x6E, 0x63,  // ..Balanc
                        /* 0A90 */  0x65, 0x64, 0x20, 0x54, 0x61, 0x62, 0x6C, 0x65,  // ed Table
                        /* 0A98 */  0x74, 0x00, 0x08, 0x00, 0x00, 0x00, 0x0B, 0x00,  // t.......
                        /* 0AA0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F,  // ......\_
                        /* 0AA8 */  0x53, 0x42, 0x5F, 0x2E, 0x49, 0x45, 0x54, 0x4D,  // SB_.IETM
                        /* 0AB0 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00,  // ........
                        /* 0AB8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,  // ........
                        /* 0AC0 */  0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0AC8 */  0x00, 0x50, 0x53, 0x56, 0x54, 0x00, 0x08, 0x00,  // .PSVT...
                        /* 0AD0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0AD8 */  0x00, 0x00, 0x34, 0x36, 0x63, 0x00, 0x04, 0x00,  // ..46c...
                        /* 0AE0 */  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0AE8 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                        /* 0AF0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x61,  // ......Ba
                        /* 0AF8 */  0x6C, 0x61, 0x6E, 0x63, 0x65, 0x64, 0x20, 0x54,  // lanced T
                        /* 0B00 */  0x61, 0x62, 0x6C, 0x65, 0x74, 0x00, 0x08, 0x00,  // ablet...
                        /* 0B08 */  0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0B10 */  0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E,  // ..\_SB_.
                        /* 0B18 */  0x49, 0x45, 0x54, 0x4D, 0x00, 0x04, 0x00, 0x00,  // IETM....
                        /* 0B20 */  0x00, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0B28 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00,  // ........
                        /* 0B30 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x49, 0x44,  // .....PID
                        /* 0B38 */  0x41, 0x00, 0x08, 0x00, 0x00, 0x00, 0x04, 0x00,  // A.......
                        /* 0B40 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x36,  // ......46
                        /* 0B48 */  0x63, 0x00, 0x04, 0x00, 0x00, 0x00, 0x03, 0x00,  // c.......
                        /* 0B50 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 0B58 */  0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0B60 */  0x00, 0x00, 0x42, 0x61, 0x6C, 0x61, 0x6E, 0x63,  // ..Balanc
                        /* 0B68 */  0x65, 0x64, 0x20, 0x4C, 0x61, 0x70, 0x74, 0x6F,  // ed Lapto
                        /* 0B70 */  0x70, 0x00, 0x08, 0x00, 0x00, 0x00, 0x0B, 0x00,  // p.......
                        /* 0B78 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F,  // ......\_
                        /* 0B80 */  0x53, 0x42, 0x5F, 0x2E, 0x49, 0x45, 0x54, 0x4D,  // SB_.IETM
                        /* 0B88 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00,  // ........
                        /* 0B90 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,  // ........
                        /* 0B98 */  0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0BA0 */  0x00, 0x50, 0x53, 0x56, 0x54, 0x00, 0x08, 0x00,  // .PSVT...
                        /* 0BA8 */  0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0BB0 */  0x00, 0x00, 0x34, 0x38, 0x63, 0x5F, 0x62, 0x61,  // ..48c_ba
                        /* 0BB8 */  0x6C, 0x61, 0x6E, 0x63, 0x65, 0x64, 0x00, 0x04,  // lanced..
                        /* 0BC0 */  0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0BC8 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10,  // ........
                        /* 0BD0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42,  // .......B
                        /* 0BD8 */  0x61, 0x6C, 0x61, 0x6E, 0x63, 0x65, 0x64, 0x20,  // alanced 
                        /* 0BE0 */  0x4C, 0x61, 0x70, 0x74, 0x6F, 0x70, 0x00, 0x08,  // Laptop..
                        /* 0BE8 */  0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0BF0 */  0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F,  // ...\_SB_
                        /* 0BF8 */  0x2E, 0x49, 0x45, 0x54, 0x4D, 0x00, 0x04, 0x00,  // .IETM...
                        /* 0C00 */  0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0C08 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x05, 0x00,  // ........
                        /* 0C10 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x49,  // ......PI
                        /* 0C18 */  0x44, 0x41, 0x00, 0x08, 0x00, 0x00, 0x00, 0x0D,  // DA......
                        /* 0C20 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34,  // .......4
                        /* 0C28 */  0x38, 0x63, 0x5F, 0x62, 0x61, 0x6C, 0x61, 0x6E,  // 8c_balan
                        /* 0C30 */  0x63, 0x65, 0x64, 0x00, 0x04, 0x00, 0x00, 0x00,  // ced.....
                        /* 0C38 */  0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0C40 */  0x08, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00,  // ........
                        /* 0C48 */  0x00, 0x00, 0x00, 0x00, 0x42, 0x65, 0x74, 0x74,  // ....Bett
                        /* 0C50 */  0x65, 0x72, 0x20, 0x54, 0x61, 0x62, 0x6C, 0x65,  // er Table
                        /* 0C58 */  0x74, 0x00, 0x08, 0x00, 0x00, 0x00, 0x0B, 0x00,  // t.......
                        /* 0C60 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F,  // ......\_
                        /* 0C68 */  0x53, 0x42, 0x5F, 0x2E, 0x49, 0x45, 0x54, 0x4D,  // SB_.IETM
                        /* 0C70 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00,  // ........
                        /* 0C78 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,  // ........
                        /* 0C80 */  0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0C88 */  0x00, 0x50, 0x53, 0x56, 0x54, 0x00, 0x08, 0x00,  // .PSVT...
                        /* 0C90 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0C98 */  0x00, 0x00, 0x34, 0x37, 0x63, 0x00, 0x04, 0x00,  // ..47c...
                        /* 0CA0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0CA8 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x0E, 0x00,  // ........
                        /* 0CB0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x65,  // ......Be
                        /* 0CB8 */  0x74, 0x74, 0x65, 0x72, 0x20, 0x54, 0x61, 0x62,  // tter Tab
                        /* 0CC0 */  0x6C, 0x65, 0x74, 0x00, 0x08, 0x00, 0x00, 0x00,  // let.....
                        /* 0CC8 */  0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0CD0 */  0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x49, 0x45,  // \_SB_.IE
                        /* 0CD8 */  0x54, 0x4D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0E,  // TM......
                        /* 0CE0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08,  // ........
                        /* 0CE8 */  0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0CF0 */  0x00, 0x00, 0x00, 0x50, 0x49, 0x44, 0x41, 0x00,  // ...PIDA.
                        /* 0CF8 */  0x08, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 0D00 */  0x00, 0x00, 0x00, 0x00, 0x34, 0x37, 0x63, 0x00,  // ....47c.
                        /* 0D08 */  0x04, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,  // ........
                        /* 0D10 */  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,  // ........
                        /* 0D18 */  0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0D20 */  0x42, 0x65, 0x74, 0x74, 0x65, 0x72, 0x20, 0x4C,  // Better L
                        /* 0D28 */  0x61, 0x70, 0x74, 0x6F, 0x70, 0x00, 0x08, 0x00,  // aptop...
                        /* 0D30 */  0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0D38 */  0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E,  // ..\_SB_.
                        /* 0D40 */  0x49, 0x45, 0x54, 0x4D, 0x00, 0x04, 0x00, 0x00,  // IETM....
                        /* 0D48 */  0x00, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0D50 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00,  // ........
                        /* 0D58 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x53, 0x56,  // .....PSV
                        /* 0D60 */  0x54, 0x00, 0x08, 0x00, 0x00, 0x00, 0x0B, 0x00,  // T.......
                        /* 0D68 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x38,  // ......48
                        /* 0D70 */  0x63, 0x5F, 0x62, 0x65, 0x74, 0x74, 0x65, 0x72,  // c_better
                        /* 0D78 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00,  // ........
                        /* 0D80 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,  // ........
                        /* 0D88 */  0x00, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0D90 */  0x00, 0x42, 0x65, 0x74, 0x74, 0x65, 0x72, 0x20,  // .Better 
                        /* 0D98 */  0x4C, 0x61, 0x70, 0x74, 0x6F, 0x70, 0x00, 0x08,  // Laptop..
                        /* 0DA0 */  0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0DA8 */  0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F,  // ...\_SB_
                        /* 0DB0 */  0x2E, 0x49, 0x45, 0x54, 0x4D, 0x00, 0x04, 0x00,  // .IETM...
                        /* 0DB8 */  0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0DC0 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x05, 0x00,  // ........
                        /* 0DC8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x49,  // ......PI
                        /* 0DD0 */  0x44, 0x41, 0x00, 0x08, 0x00, 0x00, 0x00, 0x0B,  // DA......
                        /* 0DD8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34,  // .......4
                        /* 0DE0 */  0x38, 0x63, 0x5F, 0x62, 0x65, 0x74, 0x74, 0x65,  // 8c_bette
                        /* 0DE8 */  0x72, 0x00, 0x04, 0x00, 0x00, 0x00, 0x06, 0x00,  // r.......
                        /* 0DF0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 0DF8 */  0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0E00 */  0x00, 0x00, 0x42, 0x65, 0x73, 0x74, 0x00, 0x08,  // ..Best..
                        /* 0E08 */  0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0E10 */  0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F,  // ...\_SB_
                        /* 0E18 */  0x2E, 0x49, 0x45, 0x54, 0x4D, 0x00, 0x04, 0x00,  // .IETM...
                        /* 0E20 */  0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0E28 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x05, 0x00,  // ........
                        /* 0E30 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x53,  // ......PS
                        /* 0E38 */  0x56, 0x54, 0x00, 0x08, 0x00, 0x00, 0x00, 0x09,  // VT......
                        /* 0E40 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34,  // .......4
                        /* 0E48 */  0x38, 0x63, 0x5F, 0x62, 0x65, 0x73, 0x74, 0x00,  // 8c_best.
                        /* 0E50 */  0x04, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,  // ........
                        /* 0E58 */  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,  // ........
                        /* 0E60 */  0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0E68 */  0x42, 0x65, 0x73, 0x74, 0x00, 0x08, 0x00, 0x00,  // Best....
                        /* 0E70 */  0x00, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0E78 */  0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x49,  // .\_SB_.I
                        /* 0E80 */  0x45, 0x54, 0x4D, 0x00, 0x04, 0x00, 0x00, 0x00,  // ETM.....
                        /* 0E88 */  0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0E90 */  0x08, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,  // ........
                        /* 0E98 */  0x00, 0x00, 0x00, 0x00, 0x50, 0x49, 0x44, 0x41,  // ....PIDA
                        /* 0EA0 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00,  // ........
                        /* 0EA8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x38, 0x63,  // .....48c
                        /* 0EB0 */  0x5F, 0x62, 0x65, 0x73, 0x74, 0x00, 0x01, 0x00,  // _best...
                        /* 0EB8 */  0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x2F, 0x73,  // ....../s
                        /* 0EC0 */  0x68, 0x61, 0x72, 0x65, 0x64, 0x2F, 0x65, 0x78,  // hared/ex
                        /* 0EC8 */  0x70, 0x6F, 0x72, 0x74, 0x2F, 0x61, 0x70, 0x63,  // port/apc
                        /* 0ED0 */  0x74, 0x00, 0x07, 0x00, 0x00, 0x00, 0x8C, 0x16,  // t.......
                        /* 0ED8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 0EE0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0EE8 */  0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0EF0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x14, 0x00,  // ........
                        /* 0EF8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0F00 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0F08 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 0F10 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0F18 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0F20 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 0F28 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0F30 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0F38 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 0F40 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0F48 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0F50 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 0F58 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0F60 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0F68 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 0F70 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0F78 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0F80 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 0F88 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0F90 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0F98 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 0FA0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0FA8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0FB0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 0FB8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0FC0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0FC8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 0FD0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0FD8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0FE0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 0FE8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0FF0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0FF8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1008 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1010 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1020 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1028 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1030 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1038 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1040 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1050 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1058 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1068 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1070 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1078 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1080 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1088 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1090 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1098 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 10A0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 10A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 10B0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 10B8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 10C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 10C8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 10D0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x16, 0x00,  // ........
                        /* 10D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 10E0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 10E8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x07, 0x00,  // ........
                        /* 10F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 10F8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1100 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1108 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1110 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1118 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1120 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1128 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1130 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1138 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1140 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1148 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1150 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1158 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1160 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1168 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1170 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1178 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1180 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1188 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1190 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1198 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 11A0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 11A8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 11B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 11B8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 11C0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 11C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 11D0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 11D8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 11E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 11E8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 11F0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 11F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1200 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1208 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1210 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1218 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1220 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1228 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1230 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1238 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1240 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1248 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1250 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1258 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1260 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1268 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1270 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1278 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1280 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1288 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1290 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1298 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 12A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 12A8 */  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 12B0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x16, 0x00,  // ........
                        /* 12B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 12C0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 12C8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 12D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 12D8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 12E0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0B, 0x00,  // ........
                        /* 12E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 12F0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 12F8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00,  // ........
                        /* 1300 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1308 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1310 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1318 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1320 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1328 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1330 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1338 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1340 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1348 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1350 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1358 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1360 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1368 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1370 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1378 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1380 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1388 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1390 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1398 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 13A0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 13A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 13B0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 13B8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 13C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 13C8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 13D0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 13D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 13E0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 13E8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 13F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 13F8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1400 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1408 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1410 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1418 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1420 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1428 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1430 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1438 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1440 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1448 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1450 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1458 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1460 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1468 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1470 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1478 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1480 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1488 */  0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1490 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x16, 0x00,  // ........
                        /* 1498 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 14A0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 14A8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 14B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 14B8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 14C0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0B, 0x00,  // ........
                        /* 14C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 14D0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 14D8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 14E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 14E8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 14F0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 14F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1500 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1508 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1510 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1518 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1520 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1528 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1530 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1538 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1540 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1548 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1550 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1558 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1560 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1568 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1570 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1578 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1580 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1588 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1590 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1598 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 15A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 15A8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 15B0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 15B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 15C0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 15C8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 15D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 15D8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 15E0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 15E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 15F0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 15F8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1600 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1608 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1610 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1618 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1620 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1628 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1630 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1638 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1640 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1648 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1650 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1658 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1660 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1668 */  0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1670 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x16, 0x00,  // ........
                        /* 1678 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1680 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1688 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00,  // ........
                        /* 1690 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1698 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 16A0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0B, 0x00,  // ........
                        /* 16A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 16B0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 16B8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 16C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 16C8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 16D0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 16D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 16E0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 16E8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 16F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 16F8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1700 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1708 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1710 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1718 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1720 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1728 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1730 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1738 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1740 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1748 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1750 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1758 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1760 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1768 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1770 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1778 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1780 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1788 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1790 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1798 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 17A0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 17A8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 17B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 17B8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 17C0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 17C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 17D0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 17D8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 17E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 17E8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 17F0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 17F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1800 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1808 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1810 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1818 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1820 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1828 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1830 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1838 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1840 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1848 */  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1850 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x16, 0x00,  // ........
                        /* 1858 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1860 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1868 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00,  // ........
                        /* 1870 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1878 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1880 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0B, 0x00,  // ........
                        /* 1888 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1890 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1898 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00,  // ........
                        /* 18A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 18A8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 18B0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 18B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 18C0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 18C8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 18D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 18D8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 18E0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 18E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 18F0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 18F8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1900 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1908 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1910 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1918 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1920 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1928 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1930 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1938 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1940 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1948 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1950 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1958 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1960 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1968 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1970 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1978 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1980 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1988 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1990 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1998 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 19A0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 19A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 19B0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 19B8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 19C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 19C8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 19D0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 19D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 19E0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 19E8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 19F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 19F8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1A00 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1A08 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1A10 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1A18 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1A20 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1A28 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1A30 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x16, 0x00,  // ........
                        /* 1A38 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1A40 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1A48 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x03, 0x00,  // ........
                        /* 1A50 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1A58 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1A60 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0B, 0x00,  // ........
                        /* 1A68 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1A70 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1A78 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00,  // ........
                        /* 1A80 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1A88 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1A90 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1A98 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1AA0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1AA8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1AB0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1AB8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1AC0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1AC8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1AD0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1AD8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1AE0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1AE8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1AF0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1AF8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1B00 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1B08 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1B10 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1B18 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1B20 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1B28 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1B30 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1B38 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1B40 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1B48 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1B50 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1B58 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1B60 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1B68 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1B70 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1B78 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1B80 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1B88 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1B90 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1B98 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1BA0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1BA8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1BB0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1BB8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1BC0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1BC8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1BD0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1BD8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1BE0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1BE8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1BF0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1BF8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1C00 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1C08 */  0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1C10 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x16, 0x00,  // ........
                        /* 1C18 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1C20 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1C28 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x03, 0x00,  // ........
                        /* 1C30 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1C38 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1C40 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0B, 0x00,  // ........
                        /* 1C48 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1C50 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1C58 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1C60 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1C68 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1C70 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1C78 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1C80 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1C88 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1C90 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1C98 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1CA0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1CA8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1CB0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1CB8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1CC0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1CC8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1CD0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1CD8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1CE0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1CE8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1CF0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1CF8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1D00 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1D08 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1D10 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1D18 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1D20 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1D28 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1D30 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1D38 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1D40 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1D48 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1D50 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1D58 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1D60 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1D68 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1D70 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1D78 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1D80 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1D88 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1D90 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1D98 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1DA0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1DA8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1DB0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1DB8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1DC0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1DC8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1DD0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1DD8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1DE0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1DE8 */  0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1DF0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x16, 0x00,  // ........
                        /* 1DF8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1E00 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1E08 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00,  // ........
                        /* 1E10 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1E18 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1E20 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1E28 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1E30 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1E38 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1E40 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1E48 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1E50 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1E58 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1E60 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1E68 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1E70 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1E78 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1E80 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1E88 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1E90 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1E98 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1EA0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1EA8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1EB0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1EB8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1EC0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1EC8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1ED0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1ED8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1EE0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1EE8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1EF0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1EF8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1F00 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1F08 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1F10 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1F18 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1F20 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1F28 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1F30 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1F38 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1F40 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1F48 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1F50 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1F58 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1F60 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1F68 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1F70 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1F78 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1F80 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1F88 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1F90 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1F98 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1FA0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1FA8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1FB0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1FB8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1FC0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1FC8 */  0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1FD0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x16, 0x00,  // ........
                        /* 1FD8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1FE0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1FE8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x06, 0x00,  // ........
                        /* 1FF0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1FF8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2000 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2010 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2018 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2028 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2030 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2038 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2040 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2048 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2058 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2060 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2068 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2070 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2078 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2080 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2088 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2090 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2098 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 20A0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 20A8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 20B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 20B8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 20C0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 20C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 20D0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 20D8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 20E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 20E8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 20F0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 20F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2100 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2108 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2110 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2118 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2120 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2128 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2130 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2138 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2140 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2148 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2150 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2158 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2160 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2168 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2170 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2178 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2180 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2188 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2190 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2198 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 21A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 21A8 */  0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 21B0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x16, 0x00,  // ........
                        /* 21B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 21C0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 21C8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 21D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 21D8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 21E0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0B, 0x00,  // ........
                        /* 21E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 21F0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 21F8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2200 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2208 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2210 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2218 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2220 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2228 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2230 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2238 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2240 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2248 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2250 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2258 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2260 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2268 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2270 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2278 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2280 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2288 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2290 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2298 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 22A0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 22A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 22B0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 22B8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 22C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 22C8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 22D0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 22D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 22E0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 22E8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 22F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 22F8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2300 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2308 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2310 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2318 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2320 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2328 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2330 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2338 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2340 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2348 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2350 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2358 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2360 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2368 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2370 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2378 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2380 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2388 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2390 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x16, 0x00,  // ........
                        /* 2398 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 23A0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 23A8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 23B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 23B8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 23C0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0B, 0x00,  // ........
                        /* 23C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 23D0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 23D8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00,  // ........
                        /* 23E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 23E8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 23F0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 23F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2400 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2408 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2410 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2418 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2420 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2428 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2430 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2438 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2440 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2448 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2450 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2458 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2460 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2468 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2470 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2478 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2480 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2488 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2490 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2498 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 24A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 24A8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 24B0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 24B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 24C0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 24C8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 24D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 24D8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 24E0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 24E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 24F0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 24F8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2500 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2508 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2510 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2518 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2520 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2528 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2530 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2538 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2540 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2548 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2550 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2558 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2560 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2568 */  0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x2F, 0x73,  // ....../s
                        /* 2570 */  0x68, 0x61, 0x72, 0x65, 0x64, 0x2F, 0x65, 0x78,  // hared/ex
                        /* 2578 */  0x70, 0x6F, 0x72, 0x74, 0x2F, 0x70, 0x62, 0x61,  // port/pba
                        /* 2580 */  0x74, 0x00, 0x07, 0x00, 0x00, 0x00, 0x2C, 0x0D,  // t.....,.
                        /* 2588 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00,  // ........
                        /* 2590 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2598 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 25A0 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 25A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x65,  // ......de
                        /* 25B0 */  0x66, 0x61, 0x75, 0x6C, 0x74, 0x00, 0x08, 0x00,  // fault...
                        /* 25B8 */  0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 25C0 */  0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E,  // ..\_SB_.
                        /* 25C8 */  0x50, 0x43, 0x49, 0x30, 0x2E, 0x42, 0x30, 0x44,  // PCI0.B0D
                        /* 25D0 */  0x34, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00,  // 4.......
                        /* 25D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 25E0 */  0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 25E8 */  0x00, 0x00, 0x50, 0x53, 0x79, 0x73, 0x50, 0x4C,  // ..PSysPL
                        /* 25F0 */  0x31, 0x4C, 0x69, 0x6D, 0x69, 0x74, 0x00, 0x08,  // 1Limit..
                        /* 25F8 */  0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2600 */  0x00, 0x00, 0x00, 0x34, 0x35, 0x30, 0x30, 0x30,  // ...45000
                        /* 2608 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,  // ........
                        /* 2610 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,  // ........
                        /* 2618 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2620 */  0x00, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6C, 0x74,  // .default
                        /* 2628 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,  // ........
                        /* 2630 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53,  // .....\_S
                        /* 2638 */  0x42, 0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30, 0x2E,  // B_.PCI0.
                        /* 2640 */  0x42, 0x30, 0x44, 0x34, 0x00, 0x04, 0x00, 0x00,  // B0D4....
                        /* 2648 */  0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2650 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00,  // ........
                        /* 2658 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x53, 0x79,  // .....PSy
                        /* 2660 */  0x73, 0x50, 0x4C, 0x32, 0x4C, 0x69, 0x6D, 0x69,  // sPL2Limi
                        /* 2668 */  0x74, 0x00, 0x08, 0x00, 0x00, 0x00, 0x06, 0x00,  // t.......
                        /* 2670 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x35,  // ......45
                        /* 2678 */  0x30, 0x30, 0x30, 0x00, 0x04, 0x00, 0x00, 0x00,  // 000.....
                        /* 2680 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2688 */  0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,  // ........
                        /* 2690 */  0x00, 0x00, 0x00, 0x00, 0x64, 0x65, 0x66, 0x61,  // ....defa
                        /* 2698 */  0x75, 0x6C, 0x74, 0x00, 0x08, 0x00, 0x00, 0x00,  // ult.....
                        /* 26A0 */  0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 26A8 */  0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x50, 0x43,  // \_SB_.PC
                        /* 26B0 */  0x49, 0x30, 0x2E, 0x42, 0x30, 0x44, 0x34, 0x00,  // I0.B0D4.
                        /* 26B8 */  0x04, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00,  // ........
                        /* 26C0 */  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,  // ........
                        /* 26C8 */  0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 26D0 */  0x50, 0x4C, 0x34, 0x50, 0x6F, 0x77, 0x65, 0x72,  // PL4Power
                        /* 26D8 */  0x4C, 0x69, 0x6D, 0x69, 0x74, 0x00, 0x08, 0x00,  // Limit...
                        /* 26E0 */  0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 26E8 */  0x00, 0x00, 0x36, 0x30, 0x30, 0x30, 0x30, 0x00,  // ..60000.
                        /* 26F0 */  0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,  // ........
                        /* 26F8 */  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,  // ........
                        /* 2700 */  0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2708 */  0x6C, 0x6F, 0x77, 0x5F, 0x62, 0x61, 0x74, 0x74,  // low_batt
                        /* 2710 */  0x5F, 0x6E, 0x6F, 0x5F, 0x62, 0x72, 0x69, 0x63,  // _no_bric
                        /* 2718 */  0x6B, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00,  // k.......
                        /* 2720 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F,  // ......\_
                        /* 2728 */  0x53, 0x42, 0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30,  // SB_.PCI0
                        /* 2730 */  0x2E, 0x42, 0x30, 0x44, 0x34, 0x00, 0x04, 0x00,  // .B0D4...
                        /* 2738 */  0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2740 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x0D, 0x00,  // ........
                        /* 2748 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x53,  // ......PS
                        /* 2750 */  0x79, 0x73, 0x50, 0x4C, 0x31, 0x4C, 0x69, 0x6D,  // ysPL1Lim
                        /* 2758 */  0x69, 0x74, 0x00, 0x08, 0x00, 0x00, 0x00, 0x06,  // it......
                        /* 2760 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33,  // .......3
                        /* 2768 */  0x31, 0x35, 0x30, 0x30, 0x00, 0x04, 0x00, 0x00,  // 1500....
                        /* 2770 */  0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2778 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00,  // ........
                        /* 2780 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x6C, 0x6F, 0x77,  // .....low
                        /* 2788 */  0x5F, 0x62, 0x61, 0x74, 0x74, 0x5F, 0x6E, 0x6F,  // _batt_no
                        /* 2790 */  0x5F, 0x62, 0x72, 0x69, 0x63, 0x6B, 0x00, 0x08,  // _brick..
                        /* 2798 */  0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 27A0 */  0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F,  // ...\_SB_
                        /* 27A8 */  0x2E, 0x50, 0x43, 0x49, 0x30, 0x2E, 0x42, 0x30,  // .PCI0.B0
                        /* 27B0 */  0x44, 0x34, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09,  // D4......
                        /* 27B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08,  // ........
                        /* 27C0 */  0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 27C8 */  0x00, 0x00, 0x00, 0x50, 0x53, 0x79, 0x73, 0x50,  // ...PSysP
                        /* 27D0 */  0x4C, 0x32, 0x4C, 0x69, 0x6D, 0x69, 0x74, 0x00,  // L2Limit.
                        /* 27D8 */  0x08, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,  // ........
                        /* 27E0 */  0x00, 0x00, 0x00, 0x00, 0x34, 0x35, 0x30, 0x30,  // ....4500
                        /* 27E8 */  0x30, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00,  // 0.......
                        /* 27F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 27F8 */  0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2800 */  0x00, 0x00, 0x6C, 0x6F, 0x77, 0x5F, 0x62, 0x61,  // ..low_ba
                        /* 2808 */  0x74, 0x74, 0x5F, 0x6E, 0x6F, 0x5F, 0x62, 0x72,  // tt_no_br
                        /* 2810 */  0x69, 0x63, 0x6B, 0x00, 0x08, 0x00, 0x00, 0x00,  // ick.....
                        /* 2818 */  0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2820 */  0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x50, 0x43,  // \_SB_.PC
                        /* 2828 */  0x49, 0x30, 0x2E, 0x42, 0x30, 0x44, 0x34, 0x00,  // I0.B0D4.
                        /* 2830 */  0x04, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00,  // ........
                        /* 2838 */  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,  // ........
                        /* 2840 */  0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2848 */  0x50, 0x4C, 0x34, 0x50, 0x6F, 0x77, 0x65, 0x72,  // PL4Power
                        /* 2850 */  0x4C, 0x69, 0x6D, 0x69, 0x74, 0x00, 0x08, 0x00,  // Limit...
                        /* 2858 */  0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2860 */  0x00, 0x00, 0x36, 0x30, 0x30, 0x30, 0x30, 0x00,  // ..60000.
                        /* 2868 */  0x04, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,  // ........
                        /* 2870 */  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,  // ........
                        /* 2878 */  0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2880 */  0x6C, 0x6F, 0x77, 0x5F, 0x62, 0x61, 0x74, 0x74,  // low_batt
                        /* 2888 */  0x5F, 0x32, 0x34, 0x57, 0x5F, 0x62, 0x72, 0x69,  // _24W_bri
                        /* 2890 */  0x63, 0x6B, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10,  // ck......
                        /* 2898 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C,  // .......\
                        /* 28A0 */  0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x50, 0x43, 0x49,  // _SB_.PCI
                        /* 28A8 */  0x30, 0x2E, 0x42, 0x30, 0x44, 0x34, 0x00, 0x04,  // 0.B0D4..
                        /* 28B0 */  0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 28B8 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x0D,  // ........
                        /* 28C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50,  // .......P
                        /* 28C8 */  0x53, 0x79, 0x73, 0x50, 0x4C, 0x31, 0x4C, 0x69,  // SysPL1Li
                        /* 28D0 */  0x6D, 0x69, 0x74, 0x00, 0x08, 0x00, 0x00, 0x00,  // mit.....
                        /* 28D8 */  0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 28E0 */  0x32, 0x31, 0x35, 0x30, 0x30, 0x00, 0x04, 0x00,  // 21500...
                        /* 28E8 */  0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 28F0 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x13, 0x00,  // ........
                        /* 28F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6C, 0x6F,  // ......lo
                        /* 2900 */  0x77, 0x5F, 0x62, 0x61, 0x74, 0x74, 0x5F, 0x32,  // w_batt_2
                        /* 2908 */  0x34, 0x57, 0x5F, 0x62, 0x72, 0x69, 0x63, 0x6B,  // 4W_brick
                        /* 2910 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,  // ........
                        /* 2918 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53,  // .....\_S
                        /* 2920 */  0x42, 0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30, 0x2E,  // B_.PCI0.
                        /* 2928 */  0x42, 0x30, 0x44, 0x34, 0x00, 0x04, 0x00, 0x00,  // B0D4....
                        /* 2930 */  0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2938 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00,  // ........
                        /* 2940 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x53, 0x79,  // .....PSy
                        /* 2948 */  0x73, 0x50, 0x4C, 0x32, 0x4C, 0x69, 0x6D, 0x69,  // sPL2Limi
                        /* 2950 */  0x74, 0x00, 0x08, 0x00, 0x00, 0x00, 0x06, 0x00,  // t.......
                        /* 2958 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x30,  // ......30
                        /* 2960 */  0x30, 0x30, 0x30, 0x00, 0x04, 0x00, 0x00, 0x00,  // 000.....
                        /* 2968 */  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2970 */  0x08, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00,  // ........
                        /* 2978 */  0x00, 0x00, 0x00, 0x00, 0x6C, 0x6F, 0x77, 0x5F,  // ....low_
                        /* 2980 */  0x62, 0x61, 0x74, 0x74, 0x5F, 0x32, 0x34, 0x57,  // batt_24W
                        /* 2988 */  0x5F, 0x62, 0x72, 0x69, 0x63, 0x6B, 0x00, 0x08,  // _brick..
                        /* 2990 */  0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2998 */  0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F,  // ...\_SB_
                        /* 29A0 */  0x2E, 0x50, 0x43, 0x49, 0x30, 0x2E, 0x42, 0x30,  // .PCI0.B0
                        /* 29A8 */  0x44, 0x34, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09,  // D4......
                        /* 29B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08,  // ........
                        /* 29B8 */  0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 29C0 */  0x00, 0x00, 0x00, 0x50, 0x4C, 0x34, 0x50, 0x6F,  // ...PL4Po
                        /* 29C8 */  0x77, 0x65, 0x72, 0x4C, 0x69, 0x6D, 0x69, 0x74,  // werLimit
                        /* 29D0 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00,  // ........
                        /* 29D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x30, 0x30,  // .....600
                        /* 29E0 */  0x30, 0x30, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04,  // 00......
                        /* 29E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08,  // ........
                        /* 29F0 */  0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 29F8 */  0x00, 0x00, 0x00, 0x6C, 0x6F, 0x77, 0x5F, 0x62,  // ...low_b
                        /* 2A00 */  0x61, 0x74, 0x74, 0x5F, 0x33, 0x30, 0x57, 0x5F,  // att_30W_
                        /* 2A08 */  0x62, 0x72, 0x69, 0x63, 0x6B, 0x00, 0x08, 0x00,  // brick...
                        /* 2A10 */  0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2A18 */  0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E,  // ..\_SB_.
                        /* 2A20 */  0x50, 0x43, 0x49, 0x30, 0x2E, 0x42, 0x30, 0x44,  // PCI0.B0D
                        /* 2A28 */  0x34, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00,  // 4.......
                        /* 2A30 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 2A38 */  0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2A40 */  0x00, 0x00, 0x50, 0x53, 0x79, 0x73, 0x50, 0x4C,  // ..PSysPL
                        /* 2A48 */  0x31, 0x4C, 0x69, 0x6D, 0x69, 0x74, 0x00, 0x08,  // 1Limit..
                        /* 2A50 */  0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2A58 */  0x00, 0x00, 0x00, 0x32, 0x37, 0x30, 0x30, 0x30,  // ...27000
                        /* 2A60 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 2A68 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,  // ........
                        /* 2A70 */  0x00, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2A78 */  0x00, 0x6C, 0x6F, 0x77, 0x5F, 0x62, 0x61, 0x74,  // .low_bat
                        /* 2A80 */  0x74, 0x5F, 0x33, 0x30, 0x57, 0x5F, 0x62, 0x72,  // t_30W_br
                        /* 2A88 */  0x69, 0x63, 0x6B, 0x00, 0x08, 0x00, 0x00, 0x00,  // ick.....
                        /* 2A90 */  0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2A98 */  0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x50, 0x43,  // \_SB_.PC
                        /* 2AA0 */  0x49, 0x30, 0x2E, 0x42, 0x30, 0x44, 0x34, 0x00,  // I0.B0D4.
                        /* 2AA8 */  0x04, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00,  // ........
                        /* 2AB0 */  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,  // ........
                        /* 2AB8 */  0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2AC0 */  0x50, 0x53, 0x79, 0x73, 0x50, 0x4C, 0x32, 0x4C,  // PSysPL2L
                        /* 2AC8 */  0x69, 0x6D, 0x69, 0x74, 0x00, 0x08, 0x00, 0x00,  // imit....
                        /* 2AD0 */  0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2AD8 */  0x00, 0x33, 0x30, 0x30, 0x30, 0x30, 0x00, 0x04,  // .30000..
                        /* 2AE0 */  0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2AE8 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x13,  // ........
                        /* 2AF0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6C,  // .......l
                        /* 2AF8 */  0x6F, 0x77, 0x5F, 0x62, 0x61, 0x74, 0x74, 0x5F,  // ow_batt_
                        /* 2B00 */  0x33, 0x30, 0x57, 0x5F, 0x62, 0x72, 0x69, 0x63,  // 30W_bric
                        /* 2B08 */  0x6B, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00,  // k.......
                        /* 2B10 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F,  // ......\_
                        /* 2B18 */  0x53, 0x42, 0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30,  // SB_.PCI0
                        /* 2B20 */  0x2E, 0x42, 0x30, 0x44, 0x34, 0x00, 0x04, 0x00,  // .B0D4...
                        /* 2B28 */  0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2B30 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x0E, 0x00,  // ........
                        /* 2B38 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x4C,  // ......PL
                        /* 2B40 */  0x34, 0x50, 0x6F, 0x77, 0x65, 0x72, 0x4C, 0x69,  // 4PowerLi
                        /* 2B48 */  0x6D, 0x69, 0x74, 0x00, 0x08, 0x00, 0x00, 0x00,  // mit.....
                        /* 2B50 */  0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2B58 */  0x36, 0x30, 0x30, 0x30, 0x30, 0x00, 0x04, 0x00,  // 60000...
                        /* 2B60 */  0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2B68 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x13, 0x00,  // ........
                        /* 2B70 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0x72,  // ......cr
                        /* 2B78 */  0x69, 0x74, 0x5F, 0x62, 0x61, 0x74, 0x74, 0x5F,  // it_batt_
                        /* 2B80 */  0x6E, 0x6F, 0x5F, 0x62, 0x72, 0x69, 0x63, 0x6B,  // no_brick
                        /* 2B88 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,  // ........
                        /* 2B90 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53,  // .....\_S
                        /* 2B98 */  0x42, 0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30, 0x2E,  // B_.PCI0.
                        /* 2BA0 */  0x42, 0x30, 0x44, 0x34, 0x00, 0x04, 0x00, 0x00,  // B0D4....
                        /* 2BA8 */  0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2BB0 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00,  // ........
                        /* 2BB8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x53, 0x79,  // .....PSy
                        /* 2BC0 */  0x73, 0x50, 0x4C, 0x31, 0x4C, 0x69, 0x6D, 0x69,  // sPL1Limi
                        /* 2BC8 */  0x74, 0x00, 0x08, 0x00, 0x00, 0x00, 0x06, 0x00,  // t.......
                        /* 2BD0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x31,  // ......21
                        /* 2BD8 */  0x35, 0x30, 0x30, 0x00, 0x04, 0x00, 0x00, 0x00,  // 500.....
                        /* 2BE0 */  0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2BE8 */  0x08, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00,  // ........
                        /* 2BF0 */  0x00, 0x00, 0x00, 0x00, 0x63, 0x72, 0x69, 0x74,  // ....crit
                        /* 2BF8 */  0x5F, 0x62, 0x61, 0x74, 0x74, 0x5F, 0x6E, 0x6F,  // _batt_no
                        /* 2C00 */  0x5F, 0x62, 0x72, 0x69, 0x63, 0x6B, 0x00, 0x08,  // _brick..
                        /* 2C08 */  0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2C10 */  0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F,  // ...\_SB_
                        /* 2C18 */  0x2E, 0x50, 0x43, 0x49, 0x30, 0x2E, 0x42, 0x30,  // .PCI0.B0
                        /* 2C20 */  0x44, 0x34, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09,  // D4......
                        /* 2C28 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08,  // ........
                        /* 2C30 */  0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2C38 */  0x00, 0x00, 0x00, 0x50, 0x53, 0x79, 0x73, 0x50,  // ...PSysP
                        /* 2C40 */  0x4C, 0x32, 0x4C, 0x69, 0x6D, 0x69, 0x74, 0x00,  // L2Limit.
                        /* 2C48 */  0x08, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,  // ........
                        /* 2C50 */  0x00, 0x00, 0x00, 0x00, 0x33, 0x30, 0x30, 0x30,  // ....3000
                        /* 2C58 */  0x30, 0x00, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00,  // 0.......
                        /* 2C60 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 2C68 */  0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2C70 */  0x00, 0x00, 0x63, 0x72, 0x69, 0x74, 0x5F, 0x62,  // ..crit_b
                        /* 2C78 */  0x61, 0x74, 0x74, 0x5F, 0x6E, 0x6F, 0x5F, 0x62,  // att_no_b
                        /* 2C80 */  0x72, 0x69, 0x63, 0x6B, 0x00, 0x08, 0x00, 0x00,  // rick....
                        /* 2C88 */  0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2C90 */  0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x50,  // .\_SB_.P
                        /* 2C98 */  0x43, 0x49, 0x30, 0x2E, 0x42, 0x30, 0x44, 0x34,  // CI0.B0D4
                        /* 2CA0 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00,  // ........
                        /* 2CA8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,  // ........
                        /* 2CB0 */  0x00, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2CB8 */  0x00, 0x50, 0x4C, 0x34, 0x50, 0x6F, 0x77, 0x65,  // .PL4Powe
                        /* 2CC0 */  0x72, 0x4C, 0x69, 0x6D, 0x69, 0x74, 0x00, 0x08,  // rLimit..
                        /* 2CC8 */  0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2CD0 */  0x00, 0x00, 0x00, 0x31, 0x30, 0x30, 0x30, 0x30,  // ...10000
                        /* 2CD8 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00,  // ........
                        /* 2CE0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,  // ........
                        /* 2CE8 */  0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2CF0 */  0x00, 0x63, 0x72, 0x69, 0x74, 0x5F, 0x62, 0x61,  // .crit_ba
                        /* 2CF8 */  0x74, 0x74, 0x5F, 0x32, 0x34, 0x57, 0x5F, 0x62,  // tt_24W_b
                        /* 2D00 */  0x72, 0x69, 0x63, 0x6B, 0x00, 0x08, 0x00, 0x00,  // rick....
                        /* 2D08 */  0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2D10 */  0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x50,  // .\_SB_.P
                        /* 2D18 */  0x43, 0x49, 0x30, 0x2E, 0x42, 0x30, 0x44, 0x34,  // CI0.B0D4
                        /* 2D20 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00,  // ........
                        /* 2D28 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,  // ........
                        /* 2D30 */  0x00, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2D38 */  0x00, 0x50, 0x53, 0x79, 0x73, 0x50, 0x4C, 0x31,  // .PSysPL1
                        /* 2D40 */  0x4C, 0x69, 0x6D, 0x69, 0x74, 0x00, 0x08, 0x00,  // Limit...
                        /* 2D48 */  0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2D50 */  0x00, 0x00, 0x32, 0x31, 0x35, 0x30, 0x30, 0x00,  // ..21500.
                        /* 2D58 */  0x04, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,  // ........
                        /* 2D60 */  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,  // ........
                        /* 2D68 */  0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2D70 */  0x63, 0x72, 0x69, 0x74, 0x5F, 0x62, 0x61, 0x74,  // crit_bat
                        /* 2D78 */  0x74, 0x5F, 0x32, 0x34, 0x57, 0x5F, 0x62, 0x72,  // t_24W_br
                        /* 2D80 */  0x69, 0x63, 0x6B, 0x00, 0x08, 0x00, 0x00, 0x00,  // ick.....
                        /* 2D88 */  0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2D90 */  0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x50, 0x43,  // \_SB_.PC
                        /* 2D98 */  0x49, 0x30, 0x2E, 0x42, 0x30, 0x44, 0x34, 0x00,  // I0.B0D4.
                        /* 2DA0 */  0x04, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00,  // ........
                        /* 2DA8 */  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,  // ........
                        /* 2DB0 */  0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2DB8 */  0x50, 0x53, 0x79, 0x73, 0x50, 0x4C, 0x32, 0x4C,  // PSysPL2L
                        /* 2DC0 */  0x69, 0x6D, 0x69, 0x74, 0x00, 0x08, 0x00, 0x00,  // imit....
                        /* 2DC8 */  0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2DD0 */  0x00, 0x33, 0x30, 0x30, 0x30, 0x30, 0x00, 0x04,  // .30000..
                        /* 2DD8 */  0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2DE0 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x14,  // ........
                        /* 2DE8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63,  // .......c
                        /* 2DF0 */  0x72, 0x69, 0x74, 0x5F, 0x62, 0x61, 0x74, 0x74,  // rit_batt
                        /* 2DF8 */  0x5F, 0x32, 0x34, 0x57, 0x5F, 0x62, 0x72, 0x69,  // _24W_bri
                        /* 2E00 */  0x63, 0x6B, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10,  // ck......
                        /* 2E08 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C,  // .......\
                        /* 2E10 */  0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x50, 0x43, 0x49,  // _SB_.PCI
                        /* 2E18 */  0x30, 0x2E, 0x42, 0x30, 0x44, 0x34, 0x00, 0x04,  // 0.B0D4..
                        /* 2E20 */  0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2E28 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x0E,  // ........
                        /* 2E30 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50,  // .......P
                        /* 2E38 */  0x4C, 0x34, 0x50, 0x6F, 0x77, 0x65, 0x72, 0x4C,  // L4PowerL
                        /* 2E40 */  0x69, 0x6D, 0x69, 0x74, 0x00, 0x08, 0x00, 0x00,  // imit....
                        /* 2E48 */  0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2E50 */  0x00, 0x31, 0x31, 0x30, 0x30, 0x30, 0x00, 0x04,  // .11000..
                        /* 2E58 */  0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2E60 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x14,  // ........
                        /* 2E68 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63,  // .......c
                        /* 2E70 */  0x72, 0x69, 0x74, 0x5F, 0x62, 0x61, 0x74, 0x74,  // rit_batt
                        /* 2E78 */  0x5F, 0x33, 0x30, 0x57, 0x5F, 0x62, 0x72, 0x69,  // _30W_bri
                        /* 2E80 */  0x63, 0x6B, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10,  // ck......
                        /* 2E88 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C,  // .......\
                        /* 2E90 */  0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x50, 0x43, 0x49,  // _SB_.PCI
                        /* 2E98 */  0x30, 0x2E, 0x42, 0x30, 0x44, 0x34, 0x00, 0x04,  // 0.B0D4..
                        /* 2EA0 */  0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2EA8 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x0D,  // ........
                        /* 2EB0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50,  // .......P
                        /* 2EB8 */  0x53, 0x79, 0x73, 0x50, 0x4C, 0x31, 0x4C, 0x69,  // SysPL1Li
                        /* 2EC0 */  0x6D, 0x69, 0x74, 0x00, 0x08, 0x00, 0x00, 0x00,  // mit.....
                        /* 2EC8 */  0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2ED0 */  0x32, 0x37, 0x30, 0x30, 0x30, 0x00, 0x04, 0x00,  // 27000...
                        /* 2ED8 */  0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2EE0 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x14, 0x00,  // ........
                        /* 2EE8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0x72,  // ......cr
                        /* 2EF0 */  0x69, 0x74, 0x5F, 0x62, 0x61, 0x74, 0x74, 0x5F,  // it_batt_
                        /* 2EF8 */  0x33, 0x30, 0x57, 0x5F, 0x62, 0x72, 0x69, 0x63,  // 30W_bric
                        /* 2F00 */  0x6B, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00,  // k.......
                        /* 2F08 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F,  // ......\_
                        /* 2F10 */  0x53, 0x42, 0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30,  // SB_.PCI0
                        /* 2F18 */  0x2E, 0x42, 0x30, 0x44, 0x34, 0x00, 0x04, 0x00,  // .B0D4...
                        /* 2F20 */  0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2F28 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x0D, 0x00,  // ........
                        /* 2F30 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x53,  // ......PS
                        /* 2F38 */  0x79, 0x73, 0x50, 0x4C, 0x32, 0x4C, 0x69, 0x6D,  // ysPL2Lim
                        /* 2F40 */  0x69, 0x74, 0x00, 0x08, 0x00, 0x00, 0x00, 0x06,  // it......
                        /* 2F48 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32,  // .......2
                        /* 2F50 */  0x35, 0x30, 0x30, 0x30, 0x00, 0x04, 0x00, 0x00,  // 5000....
                        /* 2F58 */  0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2F60 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00,  // ........
                        /* 2F68 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0x72, 0x69,  // .....cri
                        /* 2F70 */  0x74, 0x5F, 0x62, 0x61, 0x74, 0x74, 0x5F, 0x33,  // t_batt_3
                        /* 2F78 */  0x30, 0x57, 0x5F, 0x62, 0x72, 0x69, 0x63, 0x6B,  // 0W_brick
                        /* 2F80 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,  // ........
                        /* 2F88 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53,  // .....\_S
                        /* 2F90 */  0x42, 0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30, 0x2E,  // B_.PCI0.
                        /* 2F98 */  0x42, 0x30, 0x44, 0x34, 0x00, 0x04, 0x00, 0x00,  // B0D4....
                        /* 2FA0 */  0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2FA8 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00,  // ........
                        /* 2FB0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x4C, 0x34,  // .....PL4
                        /* 2FB8 */  0x50, 0x6F, 0x77, 0x65, 0x72, 0x4C, 0x69, 0x6D,  // PowerLim
                        /* 2FC0 */  0x69, 0x74, 0x00, 0x08, 0x00, 0x00, 0x00, 0x06,  // it......
                        /* 2FC8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31,  // .......1
                        /* 2FD0 */  0x37, 0x30, 0x30, 0x30, 0x00, 0x04, 0x00, 0x00,  // 7000....
                        /* 2FD8 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2FE0 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00,  // ........
                        /* 2FE8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x6C, 0x6F, 0x77,  // .....low
                        /* 2FF0 */  0x5F, 0x62, 0x61, 0x74, 0x74, 0x5F, 0x75, 0x6E,  // _batt_un
                        /* 2FF8 */  0x6B, 0x6E, 0x6F, 0x77, 0x6E, 0x5F, 0x62, 0x72,  // known_br
                        /* 3000 */  0x69, 0x63, 0x6B, 0x00, 0x08, 0x00, 0x00, 0x00,  // ick.....
                        /* 3008 */  0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3010 */  0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x50, 0x43,  // \_SB_.PC
                        /* 3018 */  0x49, 0x30, 0x2E, 0x42, 0x30, 0x44, 0x34, 0x00,  // I0.B0D4.
                        /* 3020 */  0x04, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00,  // ........
                        /* 3028 */  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,  // ........
                        /* 3030 */  0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3038 */  0x50, 0x53, 0x79, 0x73, 0x50, 0x4C, 0x31, 0x4C,  // PSysPL1L
                        /* 3040 */  0x69, 0x6D, 0x69, 0x74, 0x00, 0x08, 0x00, 0x00,  // imit....
                        /* 3048 */  0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3050 */  0x00, 0x32, 0x31, 0x35, 0x30, 0x30, 0x00, 0x04,  // .21500..
                        /* 3058 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3060 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x17,  // ........
                        /* 3068 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6C,  // .......l
                        /* 3070 */  0x6F, 0x77, 0x5F, 0x62, 0x61, 0x74, 0x74, 0x5F,  // ow_batt_
                        /* 3078 */  0x75, 0x6E, 0x6B, 0x6E, 0x6F, 0x77, 0x6E, 0x5F,  // unknown_
                        /* 3080 */  0x62, 0x72, 0x69, 0x63, 0x6B, 0x00, 0x08, 0x00,  // brick...
                        /* 3088 */  0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3090 */  0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E,  // ..\_SB_.
                        /* 3098 */  0x50, 0x43, 0x49, 0x30, 0x2E, 0x42, 0x30, 0x44,  // PCI0.B0D
                        /* 30A0 */  0x34, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00,  // 4.......
                        /* 30A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 30B0 */  0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 30B8 */  0x00, 0x00, 0x50, 0x53, 0x79, 0x73, 0x50, 0x4C,  // ..PSysPL
                        /* 30C0 */  0x32, 0x4C, 0x69, 0x6D, 0x69, 0x74, 0x00, 0x08,  // 2Limit..
                        /* 30C8 */  0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 30D0 */  0x00, 0x00, 0x00, 0x33, 0x30, 0x30, 0x30, 0x30,  // ...30000
                        /* 30D8 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,  // ........
                        /* 30E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,  // ........
                        /* 30E8 */  0x00, 0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 30F0 */  0x00, 0x6C, 0x6F, 0x77, 0x5F, 0x62, 0x61, 0x74,  // .low_bat
                        /* 30F8 */  0x74, 0x5F, 0x75, 0x6E, 0x6B, 0x6E, 0x6F, 0x77,  // t_unknow
                        /* 3100 */  0x6E, 0x5F, 0x62, 0x72, 0x69, 0x63, 0x6B, 0x00,  // n_brick.
                        /* 3108 */  0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,  // ........
                        /* 3110 */  0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42,  // ....\_SB
                        /* 3118 */  0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30, 0x2E, 0x42,  // _.PCI0.B
                        /* 3120 */  0x30, 0x44, 0x34, 0x00, 0x04, 0x00, 0x00, 0x00,  // 0D4.....
                        /* 3128 */  0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3130 */  0x08, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00,  // ........
                        /* 3138 */  0x00, 0x00, 0x00, 0x00, 0x50, 0x4C, 0x34, 0x50,  // ....PL4P
                        /* 3140 */  0x6F, 0x77, 0x65, 0x72, 0x4C, 0x69, 0x6D, 0x69,  // owerLimi
                        /* 3148 */  0x74, 0x00, 0x08, 0x00, 0x00, 0x00, 0x06, 0x00,  // t.......
                        /* 3150 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0x31,  // ......11
                        /* 3158 */  0x30, 0x30, 0x30, 0x00, 0x04, 0x00, 0x00, 0x00,  // 000.....
                        /* 3160 */  0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3168 */  0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,  // ........
                        /* 3170 */  0x00, 0x00, 0x00, 0x00, 0x6E, 0x6F, 0x5F, 0x62,  // ....no_b
                        /* 3178 */  0x61, 0x74, 0x74, 0x00, 0x08, 0x00, 0x00, 0x00,  // att.....
                        /* 3180 */  0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3188 */  0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x50, 0x43,  // \_SB_.PC
                        /* 3190 */  0x49, 0x30, 0x2E, 0x42, 0x30, 0x44, 0x34, 0x00,  // I0.B0D4.
                        /* 3198 */  0x04, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00,  // ........
                        /* 31A0 */  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,  // ........
                        /* 31A8 */  0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 31B0 */  0x50, 0x53, 0x79, 0x73, 0x50, 0x4C, 0x31, 0x4C,  // PSysPL1L
                        /* 31B8 */  0x69, 0x6D, 0x69, 0x74, 0x00, 0x08, 0x00, 0x00,  // imit....
                        /* 31C0 */  0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 31C8 */  0x00, 0x32, 0x31, 0x35, 0x30, 0x30, 0x00, 0x04,  // .21500..
                        /* 31D0 */  0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 31D8 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08,  // ........
                        /* 31E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6E,  // .......n
                        /* 31E8 */  0x6F, 0x5F, 0x62, 0x61, 0x74, 0x74, 0x00, 0x08,  // o_batt..
                        /* 31F0 */  0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 31F8 */  0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F,  // ...\_SB_
                        /* 3200 */  0x2E, 0x50, 0x43, 0x49, 0x30, 0x2E, 0x42, 0x30,  // .PCI0.B0
                        /* 3208 */  0x44, 0x34, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09,  // D4......
                        /* 3210 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08,  // ........
                        /* 3218 */  0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3220 */  0x00, 0x00, 0x00, 0x50, 0x53, 0x79, 0x73, 0x50,  // ...PSysP
                        /* 3228 */  0x4C, 0x32, 0x4C, 0x69, 0x6D, 0x69, 0x74, 0x00,  // L2Limit.
                        /* 3230 */  0x08, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,  // ........
                        /* 3238 */  0x00, 0x00, 0x00, 0x00, 0x33, 0x30, 0x30, 0x30,  // ....3000
                        /* 3240 */  0x30, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00,  // 0.......
                        /* 3248 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 3250 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3258 */  0x00, 0x00, 0x6E, 0x6F, 0x5F, 0x62, 0x61, 0x74,  // ..no_bat
                        /* 3260 */  0x74, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00,  // t.......
                        /* 3268 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F,  // ......\_
                        /* 3270 */  0x53, 0x42, 0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30,  // SB_.PCI0
                        /* 3278 */  0x2E, 0x42, 0x30, 0x44, 0x34, 0x00, 0x04, 0x00,  // .B0D4...
                        /* 3280 */  0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3288 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x0E, 0x00,  // ........
                        /* 3290 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x4C,  // ......PL
                        /* 3298 */  0x34, 0x50, 0x6F, 0x77, 0x65, 0x72, 0x4C, 0x69,  // 4PowerLi
                        /* 32A0 */  0x6D, 0x69, 0x74, 0x00, 0x08, 0x00, 0x00, 0x00,  // mit.....
                        /* 32A8 */  0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 32B0 */  0x31, 0x31, 0x30, 0x30, 0x30, 0x00, 0x01, 0x00,  // 11000...
                        /* 32B8 */  0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x2F, 0x73,  // ....../s
                        /* 32C0 */  0x68, 0x61, 0x72, 0x65, 0x64, 0x2F, 0x65, 0x78,  // hared/ex
                        /* 32C8 */  0x70, 0x6F, 0x72, 0x74, 0x2F, 0x70, 0x62, 0x63,  // port/pbc
                        /* 32D0 */  0x74, 0x00, 0x07, 0x00, 0x00, 0x00, 0xCC, 0x12,  // t.......
                        /* 32D8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 32E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 32E8 */  0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 32F0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00,  // ........
                        /* 32F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3300 */  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3308 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0A, 0x00,  // ........
                        /* 3310 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3318 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3320 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 3328 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3330 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3338 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3340 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3348 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3350 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x1B, 0x00,  // ........
                        /* 3358 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3360 */  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3368 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x48, 0x71,  // ......Hq
                        /* 3370 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3378 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3380 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00,  // ........
                        /* 3388 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3390 */  0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3398 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00,  // ........
                        /* 33A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 33A8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 33B0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 33B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 33C0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 33C8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 33D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 33D8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 33E0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 33E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 33F0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 33F8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3400 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3408 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3410 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3418 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3420 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3428 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3430 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3438 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3440 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3448 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3450 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3458 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3460 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3468 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3470 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3478 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3480 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3488 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3490 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3498 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 34A0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 34A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 34B0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 34B8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 34C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 34C8 */  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 34D0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00,  // ........
                        /* 34D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 34E0 */  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 34E8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0A, 0x00,  // ........
                        /* 34F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 34F8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3500 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 3508 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3510 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3518 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3520 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3528 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3530 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00,  // ........
                        /* 3538 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3540 */  0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3548 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00,  // ........
                        /* 3550 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3558 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3560 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3568 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3570 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3578 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3580 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3588 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3590 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3598 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 35A0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 35A8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 35B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 35B8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 35C0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 35C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 35D0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 35D8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 35E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 35E8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 35F0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 35F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3600 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3608 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3610 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3618 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3620 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3628 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3630 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3638 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3640 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3648 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3650 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3658 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3660 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3668 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3670 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3678 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3680 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3688 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3690 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3698 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 36A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 36A8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 36B0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00,  // ........
                        /* 36B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 36C0 */  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 36C8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0A, 0x00,  // ........
                        /* 36D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 36D8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 36E0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 36E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 36F0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 36F8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3700 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3708 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3710 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x1B, 0x00,  // ........
                        /* 3718 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3720 */  0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3728 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x30, 0x75,  // ......0u
                        /* 3730 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3738 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3740 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00,  // ........
                        /* 3748 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3750 */  0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3758 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00,  // ........
                        /* 3760 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3768 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3770 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x1B, 0x00,  // ........
                        /* 3778 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3780 */  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3788 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x78, 0xE6,  // ......x.
                        /* 3790 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3798 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 37A0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 37A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 37B0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 37B8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 37C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 37C8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 37D0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 37D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 37E0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 37E8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 37F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 37F8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3800 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3808 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3810 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3818 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3820 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3828 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3830 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3838 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3840 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3848 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3850 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3858 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3860 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3868 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3870 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3878 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3880 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3888 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3890 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00,  // ........
                        /* 3898 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 38A0 */  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 38A8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0A, 0x00,  // ........
                        /* 38B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 38B8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 38C0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 38C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 38D0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 38D8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 38E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 38E8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 38F0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x1B, 0x00,  // ........
                        /* 38F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3900 */  0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3908 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x60, 0xEA,  // ......`.
                        /* 3910 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3918 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3920 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3928 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3930 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3938 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3940 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3948 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3950 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3958 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3960 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3968 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3970 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3978 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3980 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3988 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3990 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3998 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 39A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 39A8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 39B0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 39B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 39C0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 39C8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 39D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 39D8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 39E0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 39E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 39F0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 39F8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3A00 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3A08 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3A10 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3A18 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3A20 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3A28 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3A30 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3A38 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3A40 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3A48 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3A50 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3A58 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3A60 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3A68 */  0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3A70 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00,  // ........
                        /* 3A78 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3A80 */  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3A88 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00,  // ........
                        /* 3A90 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3A98 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3AA0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 3AA8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3AB0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3AB8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3AC0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3AC8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3AD0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3AD8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3AE0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3AE8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3AF0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3AF8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3B00 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3B08 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3B10 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3B18 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3B20 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3B28 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3B30 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3B38 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3B40 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3B48 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3B50 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3B58 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3B60 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3B68 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3B70 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3B78 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3B80 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3B88 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3B90 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3B98 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3BA0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3BA8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3BB0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3BB8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3BC0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3BC8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3BD0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3BD8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3BE0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3BE8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3BF0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3BF8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3C00 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3C08 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3C10 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3C18 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3C20 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3C28 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3C30 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3C38 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3C40 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3C48 */  0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3C50 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00,  // ........
                        /* 3C58 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3C60 */  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3C68 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00,  // ........
                        /* 3C70 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3C78 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3C80 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 3C88 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3C90 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3C98 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3CA0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3CA8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3CB0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x1B, 0x00,  // ........
                        /* 3CB8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3CC0 */  0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3CC8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x30, 0x75,  // ......0u
                        /* 3CD0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3CD8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3CE0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x1B, 0x00,  // ........
                        /* 3CE8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3CF0 */  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3CF8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x78, 0xE6,  // ......x.
                        /* 3D00 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3D08 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3D10 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3D18 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3D20 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3D28 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3D30 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3D38 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3D40 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3D48 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3D50 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3D58 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3D60 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3D68 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3D70 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3D78 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3D80 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3D88 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3D90 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3D98 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3DA0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3DA8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3DB0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3DB8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3DC0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3DC8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3DD0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3DD8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3DE0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3DE8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3DF0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3DF8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3E00 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3E08 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3E10 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3E18 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3E20 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3E28 */  0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3E30 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00,  // ........
                        /* 3E38 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3E40 */  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3E48 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00,  // ........
                        /* 3E50 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3E58 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3E60 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 3E68 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3E70 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3E78 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3E80 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3E88 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3E90 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x1B, 0x00,  // ........
                        /* 3E98 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3EA0 */  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3EA8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x48, 0x71,  // ......Hq
                        /* 3EB0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3EB8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3EC0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3EC8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3ED0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3ED8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3EE0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3EE8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3EF0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3EF8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3F00 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3F08 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3F10 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3F18 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3F20 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3F28 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3F30 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3F38 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3F40 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3F48 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3F50 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3F58 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3F60 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3F68 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3F70 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3F78 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3F80 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3F88 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3F90 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3F98 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3FA0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3FA8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3FB0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3FB8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3FC0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3FC8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3FD0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3FD8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3FE0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3FE8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3FF0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3FF8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 4000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4008 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4010 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00,  // ........
                        /* 4018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4020 */  0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4028 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0A, 0x00,  // ........
                        /* 4030 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4038 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4040 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 4048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4050 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4058 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 4060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4068 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4070 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 4078 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4080 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4088 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 4090 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4098 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 40A0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 40A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 40B0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 40B8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 40C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 40C8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 40D0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 40D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 40E0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 40E8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 40F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 40F8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4100 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 4108 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4110 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4118 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 4120 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4128 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4130 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 4138 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4140 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4148 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 4150 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4158 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4160 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 4168 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4170 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4178 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 4180 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4188 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4190 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 4198 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 41A0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 41A8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 41B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 41B8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 41C0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 41C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 41D0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 41D8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 41E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 41E8 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 41F0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00,  // ........
                        /* 41F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4200 */  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4208 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0A, 0x00,  // ........
                        /* 4210 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4218 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4220 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 4228 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4230 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4238 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4240 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4248 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4250 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x1B, 0x00,  // ........
                        /* 4258 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4260 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4268 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4270 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4278 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4280 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 4288 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4290 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4298 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 42A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 42A8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 42B0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 42B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 42C0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 42C8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 42D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 42D8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 42E0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 42E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 42F0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 42F8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 4300 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4308 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4310 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 4318 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4320 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4328 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 4330 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4338 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4340 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 4348 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4350 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4358 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 4360 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4368 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4370 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 4378 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4380 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4388 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 4390 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4398 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 43A0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 43A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 43B0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 43B8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 43C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 43C8 */  0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 43D0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x22, 0x00,  // ......".
                        /* 43D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 43E0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 43E8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 43F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 43F8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4400 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 4408 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4410 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4418 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 4420 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4428 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4430 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 4438 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4440 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4448 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 4450 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4458 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4460 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 4468 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4470 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4478 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 4480 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4488 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4490 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 4498 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 44A0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 44A8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 44B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 44B8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 44C0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 44C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 44D0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 44D8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 44E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 44E8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 44F0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 44F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4500 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4508 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 4510 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4518 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4520 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 4528 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4530 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4538 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 4540 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4548 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4550 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 4558 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4560 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4568 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 4570 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4578 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4580 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 4588 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4590 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4598 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 45A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 45A8 */  0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x2F, 0x73,  // ....../s
                        /* 45B0 */  0x68, 0x61, 0x72, 0x65, 0x64, 0x2F, 0x65, 0x78,  // hared/ex
                        /* 45B8 */  0x70, 0x6F, 0x72, 0x74, 0x2F, 0x70, 0x69, 0x64,  // port/pid
                        /* 45C0 */  0x61, 0x00, 0x07, 0x00, 0x00, 0x00, 0xB0, 0x00,  // a.......
                        /* 45C8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 45D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 45D8 */  0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 45E0 */  0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E,  // ..\_SB_.
                        /* 45E8 */  0x50, 0x43, 0x49, 0x30, 0x2E, 0x42, 0x30, 0x44,  // PCI0.B0D
                        /* 45F0 */  0x34, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00,  // 4.......
                        /* 45F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4600 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                        /* 4608 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                        /* 4610 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F,  // ......\_
                        /* 4618 */  0x53, 0x42, 0x5F, 0x2E, 0x5F, 0x53, 0x41, 0x4E,  // SB_._SAN
                        /* 4620 */  0x2E, 0x47, 0x45, 0x4E, 0x34, 0x00, 0x04, 0x00,  // .GEN4...
                        /* 4628 */  0x00, 0x00, 0x8E, 0x0F, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4630 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x7D, 0x0C,  // ......}.
                        /* 4638 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4640 */  0x00, 0x00, 0xAF, 0x0A, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4648 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x2C, 0x01,  // ......,.
                        /* 4650 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4658 */  0x00, 0x00, 0xDC, 0x05, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4660 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00,  // ........
                        /* 4668 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4670 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4678 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x18, 0x00,  // ........
                        /* 4680 */  0x00, 0x00, 0x2F, 0x73, 0x68, 0x61, 0x72, 0x65,  // ../share
                        /* 4688 */  0x64, 0x2F, 0x74, 0x61, 0x62, 0x6C, 0x65, 0x73,  // d/tables
                        /* 4690 */  0x2F, 0x70, 0x69, 0x64, 0x61, 0x2F, 0x34, 0x35,  // /pida/45
                        /* 4698 */  0x63, 0x00, 0x07, 0x00, 0x00, 0x00, 0xB0, 0x00,  // c.......
                        /* 46A0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 46A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 46B0 */  0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 46B8 */  0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E,  // ..\_SB_.
                        /* 46C0 */  0x50, 0x43, 0x49, 0x30, 0x2E, 0x42, 0x30, 0x44,  // PCI0.B0D
                        /* 46C8 */  0x34, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00,  // 4.......
                        /* 46D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 46D8 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                        /* 46E0 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                        /* 46E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F,  // ......\_
                        /* 46F0 */  0x53, 0x42, 0x5F, 0x2E, 0x5F, 0x53, 0x41, 0x4E,  // SB_._SAN
                        /* 46F8 */  0x2E, 0x47, 0x45, 0x4E, 0x34, 0x00, 0x04, 0x00,  // .GEN4...
                        /* 4700 */  0x00, 0x00, 0x8E, 0x0F, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4708 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6E, 0x0C,  // ......n.
                        /* 4710 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4718 */  0x00, 0x00, 0xAF, 0x0A, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4720 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x2C, 0x01,  // ......,.
                        /* 4728 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4730 */  0x00, 0x00, 0xDC, 0x05, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4738 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00,  // ........
                        /* 4740 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4748 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4750 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x18, 0x00,  // ........
                        /* 4758 */  0x00, 0x00, 0x2F, 0x73, 0x68, 0x61, 0x72, 0x65,  // ../share
                        /* 4760 */  0x64, 0x2F, 0x74, 0x61, 0x62, 0x6C, 0x65, 0x73,  // d/tables
                        /* 4768 */  0x2F, 0x70, 0x69, 0x64, 0x61, 0x2F, 0x34, 0x36,  // /pida/46
                        /* 4770 */  0x63, 0x00, 0x07, 0x00, 0x00, 0x00, 0xB0, 0x00,  // c.......
                        /* 4778 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 4780 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 4788 */  0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4790 */  0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E,  // ..\_SB_.
                        /* 4798 */  0x50, 0x43, 0x49, 0x30, 0x2E, 0x42, 0x30, 0x44,  // PCI0.B0D
                        /* 47A0 */  0x34, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00,  // 4.......
                        /* 47A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 47B0 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                        /* 47B8 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                        /* 47C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F,  // ......\_
                        /* 47C8 */  0x53, 0x42, 0x5F, 0x2E, 0x5F, 0x53, 0x41, 0x4E,  // SB_._SAN
                        /* 47D0 */  0x2E, 0x47, 0x45, 0x4E, 0x34, 0x00, 0x04, 0x00,  // .GEN4...
                        /* 47D8 */  0x00, 0x00, 0x8E, 0x0F, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 47E0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6E, 0x0C,  // ......n.
                        /* 47E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 47F0 */  0x00, 0x00, 0xAF, 0x0A, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 47F8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x2C, 0x01,  // ......,.
                        /* 4800 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4808 */  0x00, 0x00, 0xDC, 0x05, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4810 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00,  // ........
                        /* 4818 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4820 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4828 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x18, 0x00,  // ........
                        /* 4830 */  0x00, 0x00, 0x2F, 0x73, 0x68, 0x61, 0x72, 0x65,  // ../share
                        /* 4838 */  0x64, 0x2F, 0x74, 0x61, 0x62, 0x6C, 0x65, 0x73,  // d/tables
                        /* 4840 */  0x2F, 0x70, 0x69, 0x64, 0x61, 0x2F, 0x34, 0x37,  // /pida/47
                        /* 4848 */  0x63, 0x00, 0x07, 0x00, 0x00, 0x00, 0xB0, 0x00,  // c.......
                        /* 4850 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 4858 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 4860 */  0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4868 */  0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E,  // ..\_SB_.
                        /* 4870 */  0x50, 0x43, 0x49, 0x30, 0x2E, 0x42, 0x30, 0x44,  // PCI0.B0D
                        /* 4878 */  0x34, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00,  // 4.......
                        /* 4880 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4888 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                        /* 4890 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                        /* 4898 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F,  // ......\_
                        /* 48A0 */  0x53, 0x42, 0x5F, 0x2E, 0x5F, 0x53, 0x41, 0x4E,  // SB_._SAN
                        /* 48A8 */  0x2E, 0x47, 0x45, 0x4E, 0x34, 0x00, 0x04, 0x00,  // .GEN4...
                        /* 48B0 */  0x00, 0x00, 0x8E, 0x0F, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 48B8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x73, 0x0C,  // ......s.
                        /* 48C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 48C8 */  0x00, 0x00, 0xAF, 0x0A, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 48D0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x2C, 0x01,  // ......,.
                        /* 48D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 48E0 */  0x00, 0x00, 0xDC, 0x05, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 48E8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00,  // ........
                        /* 48F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 48F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4900 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x21, 0x00,  // ......!.
                        /* 4908 */  0x00, 0x00, 0x2F, 0x73, 0x68, 0x61, 0x72, 0x65,  // ../share
                        /* 4910 */  0x64, 0x2F, 0x74, 0x61, 0x62, 0x6C, 0x65, 0x73,  // d/tables
                        /* 4918 */  0x2F, 0x70, 0x69, 0x64, 0x61, 0x2F, 0x34, 0x38,  // /pida/48
                        /* 4920 */  0x63, 0x5F, 0x62, 0x61, 0x6C, 0x61, 0x6E, 0x63,  // c_balanc
                        /* 4928 */  0x65, 0x64, 0x00, 0x07, 0x00, 0x00, 0x00, 0xB0,  // ed......
                        /* 4930 */  0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01,  // ........
                        /* 4938 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08,  // ........
                        /* 4940 */  0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4948 */  0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F,  // ...\_SB_
                        /* 4950 */  0x2E, 0x50, 0x43, 0x49, 0x30, 0x2E, 0x42, 0x30,  // .PCI0.B0
                        /* 4958 */  0x44, 0x34, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09,  // D4......
                        /* 4960 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,  // ........
                        /* 4968 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,  // ........
                        /* 4970 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10,  // ........
                        /* 4978 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C,  // .......\
                        /* 4980 */  0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x5F, 0x53, 0x41,  // _SB_._SA
                        /* 4988 */  0x4E, 0x2E, 0x47, 0x45, 0x4E, 0x34, 0x00, 0x04,  // N.GEN4..
                        /* 4990 */  0x00, 0x00, 0x00, 0x8E, 0x0F, 0x00, 0x00, 0x00,  // ........
                        /* 4998 */  0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x82,  // ........
                        /* 49A0 */  0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,  // ........
                        /* 49A8 */  0x00, 0x00, 0x00, 0xAF, 0x0A, 0x00, 0x00, 0x00,  // ........
                        /* 49B0 */  0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x2C,  // .......,
                        /* 49B8 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,  // ........
                        /* 49C0 */  0x00, 0x00, 0x00, 0xDC, 0x05, 0x00, 0x00, 0x00,  // ........
                        /* 49C8 */  0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x05,  // ........
                        /* 49D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,  // ........
                        /* 49D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 49E0 */  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1D,  // ........
                        /* 49E8 */  0x00, 0x00, 0x00, 0x2F, 0x73, 0x68, 0x61, 0x72,  // .../shar
                        /* 49F0 */  0x65, 0x64, 0x2F, 0x74, 0x61, 0x62, 0x6C, 0x65,  // ed/table
                        /* 49F8 */  0x73, 0x2F, 0x70, 0x69, 0x64, 0x61, 0x2F, 0x34,  // s/pida/4
                        /* 4A00 */  0x38, 0x63, 0x5F, 0x62, 0x65, 0x73, 0x74, 0x00,  // 8c_best.
                        /* 4A08 */  0x07, 0x00, 0x00, 0x00, 0xB0, 0x00, 0x00, 0x00,  // ........
                        /* 4A10 */  0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                        /* 4A18 */  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,  // ........
                        /* 4A20 */  0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4A28 */  0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x50, 0x43,  // \_SB_.PC
                        /* 4A30 */  0x49, 0x30, 0x2E, 0x42, 0x30, 0x44, 0x34, 0x00,  // I0.B0D4.
                        /* 4A38 */  0x04, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00,  // ........
                        /* 4A40 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 4A48 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4A50 */  0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,  // ........
                        /* 4A58 */  0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42,  // ....\_SB
                        /* 4A60 */  0x5F, 0x2E, 0x5F, 0x53, 0x41, 0x4E, 0x2E, 0x47,  // _._SAN.G
                        /* 4A68 */  0x45, 0x4E, 0x34, 0x00, 0x04, 0x00, 0x00, 0x00,  // EN4.....
                        /* 4A70 */  0x8E, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4A78 */  0x04, 0x00, 0x00, 0x00, 0x7D, 0x0C, 0x00, 0x00,  // ....}...
                        /* 4A80 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 4A88 */  0xAF, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4A90 */  0x04, 0x00, 0x00, 0x00, 0x2C, 0x01, 0x00, 0x00,  // ....,...
                        /* 4A98 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 4AA0 */  0xDC, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4AA8 */  0x04, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,  // ........
                        /* 4AB0 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 4AB8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4AC0 */  0x01, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00,  // ........
                        /* 4AC8 */  0x2F, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2F,  // /shared/
                        /* 4AD0 */  0x74, 0x61, 0x62, 0x6C, 0x65, 0x73, 0x2F, 0x70,  // tables/p
                        /* 4AD8 */  0x69, 0x64, 0x61, 0x2F, 0x34, 0x38, 0x63, 0x5F,  // ida/48c_
                        /* 4AE0 */  0x62, 0x65, 0x74, 0x74, 0x65, 0x72, 0x00, 0x07,  // better..
                        /* 4AE8 */  0x00, 0x00, 0x00, 0xB0, 0x00, 0x00, 0x00, 0x04,  // ........
                        /* 4AF0 */  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4AF8 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10,  // ........
                        /* 4B00 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C,  // .......\
                        /* 4B08 */  0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x50, 0x43, 0x49,  // _SB_.PCI
                        /* 4B10 */  0x30, 0x2E, 0x42, 0x30, 0x44, 0x34, 0x00, 0x04,  // 0.B0D4..
                        /* 4B18 */  0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4B20 */  0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4B28 */  0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08,  // ........
                        /* 4B30 */  0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4B38 */  0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F,  // ...\_SB_
                        /* 4B40 */  0x2E, 0x5F, 0x53, 0x41, 0x4E, 0x2E, 0x47, 0x45,  // ._SAN.GE
                        /* 4B48 */  0x4E, 0x34, 0x00, 0x04, 0x00, 0x00, 0x00, 0x8E,  // N4......
                        /* 4B50 */  0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,  // ........
                        /* 4B58 */  0x00, 0x00, 0x00, 0x7D, 0x0C, 0x00, 0x00, 0x00,  // ...}....
                        /* 4B60 */  0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xAF,  // ........
                        /* 4B68 */  0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,  // ........
                        /* 4B70 */  0x00, 0x00, 0x00, 0x2C, 0x01, 0x00, 0x00, 0x00,  // ...,....
                        /* 4B78 */  0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xDC,  // ........
                        /* 4B80 */  0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,  // ........
                        /* 4B88 */  0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4B90 */  0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4B98 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,  // ........
                        /* 4BA0 */  0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x2F,  // ......./
                        /* 4BA8 */  0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2F, 0x74,  // shared/t
                        /* 4BB0 */  0x61, 0x62, 0x6C, 0x65, 0x73, 0x2F, 0x70, 0x73,  // ables/ps
                        /* 4BB8 */  0x76, 0x74, 0x2F, 0x34, 0x35, 0x63, 0x00, 0x07,  // vt/45c..
                        /* 4BC0 */  0x00, 0x00, 0x00, 0x6C, 0x01, 0x00, 0x00, 0x04,  // ...l....
                        /* 4BC8 */  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4BD0 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10,  // ........
                        /* 4BD8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C,  // .......\
                        /* 4BE0 */  0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x50, 0x43, 0x49,  // _SB_.PCI
                        /* 4BE8 */  0x30, 0x2E, 0x42, 0x30, 0x44, 0x34, 0x00, 0x08,  // 0.B0D4..
                        /* 4BF0 */  0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4BF8 */  0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F,  // ...\_SB_
                        /* 4C00 */  0x2E, 0x5F, 0x53, 0x41, 0x4E, 0x2E, 0x47, 0x45,  // ._SAN.GE
                        /* 4C08 */  0x4E, 0x34, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01,  // N4......
                        /* 4C10 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,  // ........
                        /* 4C18 */  0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x00,  // ...2....
                        /* 4C20 */  0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x5A,  // .......Z
                        /* 4C28 */  0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,  // ........
                        /* 4C30 */  0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4C38 */  0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4C40 */  0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,  // ........
                        /* 4C48 */  0x00, 0x00, 0x00, 0xF8, 0x2A, 0x00, 0x00, 0x00,  // ....*...
                        /* 4C50 */  0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x7D,  // .......}
                        /* 4C58 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,  // ........
                        /* 4C60 */  0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4C68 */  0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x64,  // .......d
                        /* 4C70 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,  // ........
                        /* 4C78 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4C80 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10,  // ........
                        /* 4C88 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C,  // .......\
                        /* 4C90 */  0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x50, 0x43, 0x49,  // _SB_.PCI
                        /* 4C98 */  0x30, 0x2E, 0x42, 0x30, 0x44, 0x34, 0x00, 0x08,  // 0.B0D4..
                        /* 4CA0 */  0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4CA8 */  0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F,  // ...\_SB_
                        /* 4CB0 */  0x2E, 0x5F, 0x53, 0x41, 0x4E, 0x2E, 0x47, 0x45,  // ._SAN.GE
                        /* 4CB8 */  0x4E, 0x34, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01,  // N4......
                        /* 4CC0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,  // ........
                        /* 4CC8 */  0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x00,  // ...2....
                        /* 4CD0 */  0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x30,  // .......0
                        /* 4CD8 */  0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,  // ........
                        /* 4CE0 */  0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4CE8 */  0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4CF0 */  0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,  // ........
                        /* 4CF8 */  0x00, 0x00, 0x00, 0xF8, 0x2A, 0x00, 0x00, 0x00,  // ....*...
                        /* 4D00 */  0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x7D,  // .......}
                        /* 4D08 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,  // ........
                        /* 4D10 */  0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4D18 */  0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x64,  // .......d
                        /* 4D20 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,  // ........
                        /* 4D28 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4D30 */  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x18,  // ........
                        /* 4D38 */  0x00, 0x00, 0x00, 0x2F, 0x73, 0x68, 0x61, 0x72,  // .../shar
                        /* 4D40 */  0x65, 0x64, 0x2F, 0x74, 0x61, 0x62, 0x6C, 0x65,  // ed/table
                        /* 4D48 */  0x73, 0x2F, 0x70, 0x73, 0x76, 0x74, 0x2F, 0x34,  // s/psvt/4
                        /* 4D50 */  0x36, 0x63, 0x00, 0x07, 0x00, 0x00, 0x00, 0x6C,  // 6c.....l
                        /* 4D58 */  0x01, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01,  // ........
                        /* 4D60 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08,  // ........
                        /* 4D68 */  0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4D70 */  0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F,  // ...\_SB_
                        /* 4D78 */  0x2E, 0x50, 0x43, 0x49, 0x30, 0x2E, 0x42, 0x30,  // .PCI0.B0
                        /* 4D80 */  0x44, 0x34, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10,  // D4......
                        /* 4D88 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C,  // .......\
                        /* 4D90 */  0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x5F, 0x53, 0x41,  // _SB_._SA
                        /* 4D98 */  0x4E, 0x2E, 0x47, 0x45, 0x4E, 0x34, 0x00, 0x04,  // N.GEN4..
                        /* 4DA0 */  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4DA8 */  0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x58,  // .......X
                        /* 4DB0 */  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,  // ........
                        /* 4DB8 */  0x00, 0x00, 0x00, 0x64, 0x0C, 0x00, 0x00, 0x00,  // ...d....
                        /* 4DC0 */  0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09,  // ........
                        /* 4DC8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,  // ........
                        /* 4DD0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,  // ........
                        /* 4DD8 */  0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xB0,  // ........
                        /* 4DE0 */  0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,  // 6.......
                        /* 4DE8 */  0x00, 0x00, 0x00, 0x7D, 0x00, 0x00, 0x00, 0x00,  // ...}....
                        /* 4DF0 */  0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0A,  // ........
                        /* 4DF8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,  // ........
                        /* 4E00 */  0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x00,  // ...d....
                        /* 4E08 */  0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4E10 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08,  // ........
                        /* 4E18 */  0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4E20 */  0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F,  // ...\_SB_
                        /* 4E28 */  0x2E, 0x50, 0x43, 0x49, 0x30, 0x2E, 0x42, 0x30,  // .PCI0.B0
                        /* 4E30 */  0x44, 0x34, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10,  // D4......
                        /* 4E38 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C,  // .......\
                        /* 4E40 */  0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x5F, 0x53, 0x41,  // _SB_._SA
                        /* 4E48 */  0x4E, 0x2E, 0x47, 0x45, 0x4E, 0x34, 0x00, 0x04,  // N.GEN4..
                        /* 4E50 */  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4E58 */  0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x58,  // .......X
                        /* 4E60 */  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,  // ........
                        /* 4E68 */  0x00, 0x00, 0x00, 0x30, 0x0E, 0x00, 0x00, 0x00,  // ...0....
                        /* 4E70 */  0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09,  // ........
                        /* 4E78 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,  // ........
                        /* 4E80 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,  // ........
                        /* 4E88 */  0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xB0,  // ........
                        /* 4E90 */  0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,  // 6.......
                        /* 4E98 */  0x00, 0x00, 0x00, 0x7D, 0x00, 0x00, 0x00, 0x00,  // ...}....
                        /* 4EA0 */  0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0A,  // ........
                        /* 4EA8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,  // ........
                        /* 4EB0 */  0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x00,  // ...d....
                        /* 4EB8 */  0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4EC0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,  // ........
                        /* 4EC8 */  0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x2F,  // ......./
                        /* 4ED0 */  0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2F, 0x74,  // shared/t
                        /* 4ED8 */  0x61, 0x62, 0x6C, 0x65, 0x73, 0x2F, 0x70, 0x73,  // ables/ps
                        /* 4EE0 */  0x76, 0x74, 0x2F, 0x34, 0x37, 0x63, 0x00, 0x07,  // vt/47c..
                        /* 4EE8 */  0x00, 0x00, 0x00, 0x6C, 0x01, 0x00, 0x00, 0x04,  // ...l....
                        /* 4EF0 */  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4EF8 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10,  // ........
                        /* 4F00 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C,  // .......\
                        /* 4F08 */  0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x50, 0x43, 0x49,  // _SB_.PCI
                        /* 4F10 */  0x30, 0x2E, 0x42, 0x30, 0x44, 0x34, 0x00, 0x08,  // 0.B0D4..
                        /* 4F18 */  0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4F20 */  0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F,  // ...\_SB_
                        /* 4F28 */  0x2E, 0x5F, 0x53, 0x41, 0x4E, 0x2E, 0x47, 0x45,  // ._SAN.GE
                        /* 4F30 */  0x4E, 0x34, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01,  // N4......
                        /* 4F38 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,  // ........
                        /* 4F40 */  0x00, 0x00, 0x00, 0x58, 0x02, 0x00, 0x00, 0x00,  // ...X....
                        /* 4F48 */  0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6E,  // .......n
                        /* 4F50 */  0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,  // ........
                        /* 4F58 */  0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4F60 */  0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4F68 */  0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,  // ........
                        /* 4F70 */  0x00, 0x00, 0x00, 0x80, 0x3E, 0x00, 0x00, 0x00,  // ....>...
                        /* 4F78 */  0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x7D,  // .......}
                        /* 4F80 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,  // ........
                        /* 4F88 */  0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4F90 */  0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x64,  // .......d
                        /* 4F98 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,  // ........
                        /* 4FA0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4FA8 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10,  // ........
                        /* 4FB0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C,  // .......\
                        /* 4FB8 */  0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x50, 0x43, 0x49,  // _SB_.PCI
                        /* 4FC0 */  0x30, 0x2E, 0x42, 0x30, 0x44, 0x34, 0x00, 0x08,  // 0.B0D4..
                        /* 4FC8 */  0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4FD0 */  0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F,  // ...\_SB_
                        /* 4FD8 */  0x2E, 0x5F, 0x53, 0x41, 0x4E, 0x2E, 0x47, 0x45,  // ._SAN.GE
                        /* 4FE0 */  0x4E, 0x34, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01,  // N4......
                        /* 4FE8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,  // ........
                        /* 4FF0 */  0x00, 0x00, 0x00, 0x58, 0x02, 0x00, 0x00, 0x00,  // ...X....
                        /* 4FF8 */  0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x30,  // .......0
                        /* 5000 */  0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,  // ........
                        /* 5008 */  0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 5010 */  0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 5018 */  0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,  // ........
                        /* 5020 */  0x00, 0x00, 0x00, 0x80, 0x3E, 0x00, 0x00, 0x00,  // ....>...
                        /* 5028 */  0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x7D,  // .......}
                        /* 5030 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,  // ........
                        /* 5038 */  0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 5040 */  0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x64,  // .......d
                        /* 5048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,  // ........
                        /* 5050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 5058 */  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x21,  // .......!
                        /* 5060 */  0x00, 0x00, 0x00, 0x2F, 0x73, 0x68, 0x61, 0x72,  // .../shar
                        /* 5068 */  0x65, 0x64, 0x2F, 0x74, 0x61, 0x62, 0x6C, 0x65,  // ed/table
                        /* 5070 */  0x73, 0x2F, 0x70, 0x73, 0x76, 0x74, 0x2F, 0x34,  // s/psvt/4
                        /* 5078 */  0x38, 0x63, 0x5F, 0x62, 0x61, 0x6C, 0x61, 0x6E,  // 8c_balan
                        /* 5080 */  0x63, 0x65, 0x64, 0x00, 0x07, 0x00, 0x00, 0x00,  // ced.....
                        /* 5088 */  0x6C, 0x01, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // l.......
                        /* 5090 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 5098 */  0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,  // ........
                        /* 50A0 */  0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42,  // ....\_SB
                        /* 50A8 */  0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30, 0x2E, 0x42,  // _.PCI0.B
                        /* 50B0 */  0x30, 0x44, 0x34, 0x00, 0x08, 0x00, 0x00, 0x00,  // 0D4.....
                        /* 50B8 */  0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 50C0 */  0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x5F, 0x53,  // \_SB_._S
                        /* 50C8 */  0x41, 0x4E, 0x2E, 0x47, 0x45, 0x4E, 0x34, 0x00,  // AN.GEN4.
                        /* 50D0 */  0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                        /* 50D8 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 50E0 */  0x58, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // X.......
                        /* 50E8 */  0x04, 0x00, 0x00, 0x00, 0x78, 0x0C, 0x00, 0x00,  // ....x...
                        /* 50F0 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 50F8 */  0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 5100 */  0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 5108 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 5110 */  0x80, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // .>......
                        /* 5118 */  0x04, 0x00, 0x00, 0x00, 0x7D, 0x00, 0x00, 0x00,  // ....}...
                        /* 5120 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 5128 */  0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 5130 */  0x04, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00,  // ....d...
                        /* 5138 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 5140 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 5148 */  0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,  // ........
                        /* 5150 */  0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42,  // ....\_SB
                        /* 5158 */  0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30, 0x2E, 0x42,  // _.PCI0.B
                        /* 5160 */  0x30, 0x44, 0x34, 0x00, 0x08, 0x00, 0x00, 0x00,  // 0D4.....
                        /* 5168 */  0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 5170 */  0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x5F, 0x53,  // \_SB_._S
                        /* 5178 */  0x41, 0x4E, 0x2E, 0x47, 0x45, 0x4E, 0x34, 0x00,  // AN.GEN4.
                        /* 5180 */  0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                        /* 5188 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 5190 */  0x58, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // X.......
                        /* 5198 */  0x04, 0x00, 0x00, 0x00, 0x30, 0x0E, 0x00, 0x00,  // ....0...
                        /* 51A0 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 51A8 */  0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 51B0 */  0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 51B8 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 51C0 */  0x80, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // .>......
                        /* 51C8 */  0x04, 0x00, 0x00, 0x00, 0x7D, 0x00, 0x00, 0x00,  // ....}...
                        /* 51D0 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 51D8 */  0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 51E0 */  0x04, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00,  // ....d...
                        /* 51E8 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 51F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 51F8 */  0x01, 0x00, 0x00, 0x00, 0x1D, 0x00, 0x00, 0x00,  // ........
                        /* 5200 */  0x2F, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2F,  // /shared/
                        /* 5208 */  0x74, 0x61, 0x62, 0x6C, 0x65, 0x73, 0x2F, 0x70,  // tables/p
                        /* 5210 */  0x73, 0x76, 0x74, 0x2F, 0x34, 0x38, 0x63, 0x5F,  // svt/48c_
                        /* 5218 */  0x62, 0x65, 0x73, 0x74, 0x00, 0x07, 0x00, 0x00,  // best....
                        /* 5220 */  0x00, 0x6C, 0x01, 0x00, 0x00, 0x04, 0x00, 0x00,  // .l......
                        /* 5228 */  0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 5230 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,  // ........
                        /* 5238 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53,  // .....\_S
                        /* 5240 */  0x42, 0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30, 0x2E,  // B_.PCI0.
                        /* 5248 */  0x42, 0x30, 0x44, 0x34, 0x00, 0x08, 0x00, 0x00,  // B0D4....
                        /* 5250 */  0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 5258 */  0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x5F,  // .\_SB_._
                        /* 5260 */  0x53, 0x41, 0x4E, 0x2E, 0x47, 0x45, 0x4E, 0x34,  // SAN.GEN4
                        /* 5268 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,  // ........
                        /* 5270 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 5278 */  0x00, 0x58, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // .X......
                        /* 5280 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x78, 0x0C, 0x00,  // .....x..
                        /* 5288 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 5290 */  0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 5298 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,  // ........
                        /* 52A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 52A8 */  0x00, 0x38, 0x4A, 0x00, 0x00, 0x00, 0x00, 0x00,  // .8J.....
                        /* 52B0 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x7D, 0x00, 0x00,  // .....}..
                        /* 52B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 52C0 */  0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 52C8 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00,  // .....d..
                        /* 52D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 52D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 52E0 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,  // ........
                        /* 52E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53,  // .....\_S
                        /* 52F0 */  0x42, 0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30, 0x2E,  // B_.PCI0.
                        /* 52F8 */  0x42, 0x30, 0x44, 0x34, 0x00, 0x08, 0x00, 0x00,  // B0D4....
                        /* 5300 */  0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 5308 */  0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x5F,  // .\_SB_._
                        /* 5310 */  0x53, 0x41, 0x4E, 0x2E, 0x47, 0x45, 0x4E, 0x34,  // SAN.GEN4
                        /* 5318 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,  // ........
                        /* 5320 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 5328 */  0x00, 0x58, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // .X......
                        /* 5330 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x30, 0x0E, 0x00,  // .....0..
                        /* 5338 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 5340 */  0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 5348 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,  // ........
                        /* 5350 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 5358 */  0x00, 0x38, 0x4A, 0x00, 0x00, 0x00, 0x00, 0x00,  // .8J.....
                        /* 5360 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x7D, 0x00, 0x00,  // .....}..
                        /* 5368 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 5370 */  0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 5378 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00,  // .....d..
                        /* 5380 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 5388 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 5390 */  0x00, 0x01, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00,  // ........
                        /* 5398 */  0x00, 0x2F, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,  // ./shared
                        /* 53A0 */  0x2F, 0x74, 0x61, 0x62, 0x6C, 0x65, 0x73, 0x2F,  // /tables/
                        /* 53A8 */  0x70, 0x73, 0x76, 0x74, 0x2F, 0x34, 0x38, 0x63,  // psvt/48c
                        /* 53B0 */  0x5F, 0x62, 0x65, 0x74, 0x74, 0x65, 0x72, 0x00,  // _better.
                        /* 53B8 */  0x07, 0x00, 0x00, 0x00, 0x6C, 0x01, 0x00, 0x00,  // ....l...
                        /* 53C0 */  0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                        /* 53C8 */  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,  // ........
                        /* 53D0 */  0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 53D8 */  0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x50, 0x43,  // \_SB_.PC
                        /* 53E0 */  0x49, 0x30, 0x2E, 0x42, 0x30, 0x44, 0x34, 0x00,  // I0.B0D4.
                        /* 53E8 */  0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,  // ........
                        /* 53F0 */  0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42,  // ....\_SB
                        /* 53F8 */  0x5F, 0x2E, 0x5F, 0x53, 0x41, 0x4E, 0x2E, 0x47,  // _._SAN.G
                        /* 5400 */  0x45, 0x4E, 0x34, 0x00, 0x04, 0x00, 0x00, 0x00,  // EN4.....
                        /* 5408 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 5410 */  0x04, 0x00, 0x00, 0x00, 0x58, 0x02, 0x00, 0x00,  // ....X...
                        /* 5418 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 5420 */  0x78, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // x.......
                        /* 5428 */  0x04, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00,  // ........
                        /* 5430 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 5438 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 5440 */  0x04, 0x00, 0x00, 0x00, 0x68, 0x42, 0x00, 0x00,  // ....hB..
                        /* 5448 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 5450 */  0x7D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // }.......
                        /* 5458 */  0x04, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00,  // ........
                        /* 5460 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 5468 */  0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // d.......
                        /* 5470 */  0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 5478 */  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,  // ........
                        /* 5480 */  0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 5488 */  0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x50, 0x43,  // \_SB_.PC
                        /* 5490 */  0x49, 0x30, 0x2E, 0x42, 0x30, 0x44, 0x34, 0x00,  // I0.B0D4.
                        /* 5498 */  0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,  // ........
                        /* 54A0 */  0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42,  // ....\_SB
                        /* 54A8 */  0x5F, 0x2E, 0x5F, 0x53, 0x41, 0x4E, 0x2E, 0x47,  // _._SAN.G
                        /* 54B0 */  0x45, 0x4E, 0x34, 0x00, 0x04, 0x00, 0x00, 0x00,  // EN4.....
                        /* 54B8 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 54C0 */  0x04, 0x00, 0x00, 0x00, 0x58, 0x02, 0x00, 0x00,  // ....X...
                        /* 54C8 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 54D0 */  0x30, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 0.......
                        /* 54D8 */  0x04, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00,  // ........
                        /* 54E0 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 54E8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 54F0 */  0x04, 0x00, 0x00, 0x00, 0x68, 0x42, 0x00, 0x00,  // ....hB..
                        /* 54F8 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 5500 */  0x7D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // }.......
                        /* 5508 */  0x04, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00,  // ........
                        /* 5510 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 5518 */  0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // d.......
                        /* 5520 */  0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 5528 */  0x00, 0x00, 0x00, 0x00                           // ....
                    }
                })
            }
            Else
            {
                Return (Package (0x01)
                {
                    Buffer (0x470E)
                    {
                        /* 0000 */  0xE5, 0x1F, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x01,  // ........
                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                        /* 0010 */  0x1B, 0x00, 0x00, 0x00, 0x2F, 0x70, 0x61, 0x72,  // ..../par
                        /* 0018 */  0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6E, 0x74,  // ticipant
                        /* 0020 */  0x73, 0x2F, 0x47, 0x45, 0x4E, 0x35, 0x2E, 0x44,  // s/GEN5.D
                        /* 0028 */  0x30, 0x2F, 0x67, 0x74, 0x73, 0x68, 0x00, 0x06,  // 0/gtsh..
                        /* 0030 */  0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xC0,  // ........
                        /* 0038 */  0x0A, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x25,  // .......%
                        /* 0040 */  0x00, 0x00, 0x00, 0x2F, 0x70, 0x61, 0x72, 0x74,  // .../part
                        /* 0048 */  0x69, 0x63, 0x69, 0x70, 0x61, 0x6E, 0x74, 0x73,  // icipants
                        /* 0050 */  0x2F, 0x47, 0x45, 0x4E, 0x35, 0x2E, 0x44, 0x30,  // /GEN5.D0
                        /* 0058 */  0x2F, 0x74, 0x72, 0x69, 0x70, 0x70, 0x6F, 0x69,  // /trippoi
                        /* 0060 */  0x6E, 0x74, 0x2F, 0x5F, 0x61, 0x63, 0x30, 0x00,  // nt/_ac0.
                        /* 0068 */  0x06, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 0070 */  0x68, 0x0D, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // h.......
                        /* 0078 */  0x25, 0x00, 0x00, 0x00, 0x2F, 0x70, 0x61, 0x72,  // %.../par
                        /* 0080 */  0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6E, 0x74,  // ticipant
                        /* 0088 */  0x73, 0x2F, 0x47, 0x45, 0x4E, 0x35, 0x2E, 0x44,  // s/GEN5.D
                        /* 0090 */  0x30, 0x2F, 0x74, 0x72, 0x69, 0x70, 0x70, 0x6F,  // 0/trippo
                        /* 0098 */  0x69, 0x6E, 0x74, 0x2F, 0x5F, 0x61, 0x63, 0x31,  // int/_ac1
                        /* 00A0 */  0x00, 0x06, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 00A8 */  0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x00,  // ........
                        /* 00B0 */  0x00, 0x25, 0x00, 0x00, 0x00, 0x2F, 0x70, 0x61,  // .%.../pa
                        /* 00B8 */  0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6E,  // rticipan
                        /* 00C0 */  0x74, 0x73, 0x2F, 0x47, 0x45, 0x4E, 0x35, 0x2E,  // ts/GEN5.
                        /* 00C8 */  0x44, 0x30, 0x2F, 0x74, 0x72, 0x69, 0x70, 0x70,  // D0/tripp
                        /* 00D0 */  0x6F, 0x69, 0x6E, 0x74, 0x2F, 0x5F, 0x61, 0x63,  // oint/_ac
                        /* 00D8 */  0x32, 0x00, 0x06, 0x00, 0x00, 0x00, 0x04, 0x00,  // 2.......
                        /* 00E0 */  0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00,  // ........
                        /* 00E8 */  0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0x2F, 0x70,  // ..%.../p
                        /* 00F0 */  0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,  // articipa
                        /* 00F8 */  0x6E, 0x74, 0x73, 0x2F, 0x47, 0x45, 0x4E, 0x35,  // nts/GEN5
                        /* 0100 */  0x2E, 0x44, 0x30, 0x2F, 0x74, 0x72, 0x69, 0x70,  // .D0/trip
                        /* 0108 */  0x70, 0x6F, 0x69, 0x6E, 0x74, 0x2F, 0x5F, 0x61,  // point/_a
                        /* 0110 */  0x63, 0x33, 0x00, 0x06, 0x00, 0x00, 0x00, 0x04,  // c3......
                        /* 0118 */  0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x01,  // ........
                        /* 0120 */  0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0x2F,  // ...%.../
                        /* 0128 */  0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,  // particip
                        /* 0130 */  0x61, 0x6E, 0x74, 0x73, 0x2F, 0x47, 0x45, 0x4E,  // ants/GEN
                        /* 0138 */  0x35, 0x2E, 0x44, 0x30, 0x2F, 0x74, 0x72, 0x69,  // 5.D0/tri
                        /* 0140 */  0x70, 0x70, 0x6F, 0x69, 0x6E, 0x74, 0x2F, 0x5F,  // ppoint/_
                        /* 0148 */  0x61, 0x63, 0x34, 0x00, 0x06, 0x00, 0x00, 0x00,  // ac4.....
                        /* 0150 */  0x04, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                        /* 0158 */  0x01, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00,  // ....%...
                        /* 0160 */  0x2F, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,  // /partici
                        /* 0168 */  0x70, 0x61, 0x6E, 0x74, 0x73, 0x2F, 0x47, 0x45,  // pants/GE
                        /* 0170 */  0x4E, 0x35, 0x2E, 0x44, 0x30, 0x2F, 0x74, 0x72,  // N5.D0/tr
                        /* 0178 */  0x69, 0x70, 0x70, 0x6F, 0x69, 0x6E, 0x74, 0x2F,  // ippoint/
                        /* 0180 */  0x5F, 0x61, 0x63, 0x35, 0x00, 0x06, 0x00, 0x00,  // _ac5....
                        /* 0188 */  0x00, 0x04, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF,  // ........
                        /* 0190 */  0xFF, 0x01, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00,  // .....%..
                        /* 0198 */  0x00, 0x2F, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,  // ./partic
                        /* 01A0 */  0x69, 0x70, 0x61, 0x6E, 0x74, 0x73, 0x2F, 0x47,  // ipants/G
                        /* 01A8 */  0x45, 0x4E, 0x35, 0x2E, 0x44, 0x30, 0x2F, 0x74,  // EN5.D0/t
                        /* 01B0 */  0x72, 0x69, 0x70, 0x70, 0x6F, 0x69, 0x6E, 0x74,  // rippoint
                        /* 01B8 */  0x2F, 0x5F, 0x61, 0x63, 0x36, 0x00, 0x06, 0x00,  // /_ac6...
                        /* 01C0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xFF, 0xFF,  // ........
                        /* 01C8 */  0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x25, 0x00,  // ......%.
                        /* 01D0 */  0x00, 0x00, 0x2F, 0x70, 0x61, 0x72, 0x74, 0x69,  // ../parti
                        /* 01D8 */  0x63, 0x69, 0x70, 0x61, 0x6E, 0x74, 0x73, 0x2F,  // cipants/
                        /* 01E0 */  0x47, 0x45, 0x4E, 0x35, 0x2E, 0x44, 0x30, 0x2F,  // GEN5.D0/
                        /* 01E8 */  0x74, 0x72, 0x69, 0x70, 0x70, 0x6F, 0x69, 0x6E,  // trippoin
                        /* 01F0 */  0x74, 0x2F, 0x5F, 0x61, 0x63, 0x37, 0x00, 0x06,  // t/_ac7..
                        /* 01F8 */  0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xFF,  // ........
                        /* 0200 */  0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x25,  // .......%
                        /* 0208 */  0x00, 0x00, 0x00, 0x2F, 0x70, 0x61, 0x72, 0x74,  // .../part
                        /* 0210 */  0x69, 0x63, 0x69, 0x70, 0x61, 0x6E, 0x74, 0x73,  // icipants
                        /* 0218 */  0x2F, 0x47, 0x45, 0x4E, 0x35, 0x2E, 0x44, 0x30,  // /GEN5.D0
                        /* 0220 */  0x2F, 0x74, 0x72, 0x69, 0x70, 0x70, 0x6F, 0x69,  // /trippoi
                        /* 0228 */  0x6E, 0x74, 0x2F, 0x5F, 0x61, 0x63, 0x38, 0x00,  // nt/_ac8.
                        /* 0230 */  0x06, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 0238 */  0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00,  // ........
                        /* 0240 */  0x25, 0x00, 0x00, 0x00, 0x2F, 0x70, 0x61, 0x72,  // %.../par
                        /* 0248 */  0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6E, 0x74,  // ticipant
                        /* 0250 */  0x73, 0x2F, 0x47, 0x45, 0x4E, 0x35, 0x2E, 0x44,  // s/GEN5.D
                        /* 0258 */  0x30, 0x2F, 0x74, 0x72, 0x69, 0x70, 0x70, 0x6F,  // 0/trippo
                        /* 0260 */  0x69, 0x6E, 0x74, 0x2F, 0x5F, 0x61, 0x63, 0x39,  // int/_ac9
                        /* 0268 */  0x00, 0x06, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 0270 */  0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x00,  // ........
                        /* 0278 */  0x00, 0x25, 0x00, 0x00, 0x00, 0x2F, 0x70, 0x61,  // .%.../pa
                        /* 0280 */  0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6E,  // rticipan
                        /* 0288 */  0x74, 0x73, 0x2F, 0x47, 0x45, 0x4E, 0x35, 0x2E,  // ts/GEN5.
                        /* 0290 */  0x44, 0x30, 0x2F, 0x74, 0x72, 0x69, 0x70, 0x70,  // D0/tripp
                        /* 0298 */  0x6F, 0x69, 0x6E, 0x74, 0x2F, 0x5F, 0x63, 0x72,  // oint/_cr
                        /* 02A0 */  0x33, 0x00, 0x06, 0x00, 0x00, 0x00, 0x04, 0x00,  // 3.......
                        /* 02A8 */  0x00, 0x00, 0x18, 0x0D, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 02B0 */  0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0x2F, 0x70,  // ..%.../p
                        /* 02B8 */  0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,  // articipa
                        /* 02C0 */  0x6E, 0x74, 0x73, 0x2F, 0x47, 0x45, 0x4E, 0x35,  // nts/GEN5
                        /* 02C8 */  0x2E, 0x44, 0x30, 0x2F, 0x74, 0x72, 0x69, 0x70,  // .D0/trip
                        /* 02D0 */  0x70, 0x6F, 0x69, 0x6E, 0x74, 0x2F, 0x5F, 0x63,  // point/_c
                        /* 02D8 */  0x72, 0x74, 0x00, 0x06, 0x00, 0x00, 0x00, 0x04,  // rt......
                        /* 02E0 */  0x00, 0x00, 0x00, 0x18, 0x0D, 0x00, 0x00, 0x01,  // ........
                        /* 02E8 */  0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0x2F,  // ...%.../
                        /* 02F0 */  0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,  // particip
                        /* 02F8 */  0x61, 0x6E, 0x74, 0x73, 0x2F, 0x47, 0x45, 0x4E,  // ants/GEN
                        /* 0300 */  0x35, 0x2E, 0x44, 0x30, 0x2F, 0x74, 0x72, 0x69,  // 5.D0/tri
                        /* 0308 */  0x70, 0x70, 0x6F, 0x69, 0x6E, 0x74, 0x2F, 0x5F,  // ppoint/_
                        /* 0310 */  0x68, 0x6F, 0x74, 0x00, 0x06, 0x00, 0x00, 0x00,  // hot.....
                        /* 0318 */  0x04, 0x00, 0x00, 0x00, 0xF0, 0x0C, 0x00, 0x00,  // ........
                        /* 0320 */  0x01, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00,  // ....%...
                        /* 0328 */  0x2F, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,  // /partici
                        /* 0330 */  0x70, 0x61, 0x6E, 0x74, 0x73, 0x2F, 0x47, 0x45,  // pants/GE
                        /* 0338 */  0x4E, 0x35, 0x2E, 0x44, 0x30, 0x2F, 0x74, 0x72,  // N5.D0/tr
                        /* 0340 */  0x69, 0x70, 0x70, 0x6F, 0x69, 0x6E, 0x74, 0x2F,  // ippoint/
                        /* 0348 */  0x5F, 0x70, 0x73, 0x76, 0x00, 0x06, 0x00, 0x00,  // _psv....
                        /* 0350 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x68, 0x0D, 0x00,  // .....h..
                        /* 0358 */  0x00, 0x01, 0x00, 0x00, 0x00, 0x1B, 0x00, 0x00,  // ........
                        /* 0360 */  0x00, 0x2F, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,  // ./partic
                        /* 0368 */  0x69, 0x70, 0x61, 0x6E, 0x74, 0x73, 0x2F, 0x49,  // ipants/I
                        /* 0370 */  0x45, 0x54, 0x4D, 0x2E, 0x44, 0x30, 0x2F, 0x70,  // ETM.D0/p
                        /* 0378 */  0x73, 0x76, 0x74, 0x00, 0x07, 0x00, 0x00, 0x00,  // svt.....
                        /* 0380 */  0x6C, 0x01, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // l.......
                        /* 0388 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0390 */  0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,  // ........
                        /* 0398 */  0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42,  // ....\_SB
                        /* 03A0 */  0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30, 0x2E, 0x42,  // _.PCI0.B
                        /* 03A8 */  0x30, 0x44, 0x34, 0x00, 0x08, 0x00, 0x00, 0x00,  // 0D4.....
                        /* 03B0 */  0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 03B8 */  0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x5F, 0x53,  // \_SB_._S
                        /* 03C0 */  0x41, 0x4E, 0x2E, 0x47, 0x45, 0x4E, 0x34, 0x00,  // AN.GEN4.
                        /* 03C8 */  0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                        /* 03D0 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 03D8 */  0xC8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 03E0 */  0x04, 0x00, 0x00, 0x00, 0x78, 0x0C, 0x00, 0x00,  // ....x...
                        /* 03E8 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 03F0 */  0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 03F8 */  0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 0400 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 0408 */  0x28, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // (#......
                        /* 0410 */  0x04, 0x00, 0x00, 0x00, 0x7D, 0x00, 0x00, 0x00,  // ....}...
                        /* 0418 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 0420 */  0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0428 */  0x04, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00,  // ....d...
                        /* 0430 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 0438 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0440 */  0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,  // ........
                        /* 0448 */  0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42,  // ....\_SB
                        /* 0450 */  0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30, 0x2E, 0x42,  // _.PCI0.B
                        /* 0458 */  0x30, 0x44, 0x34, 0x00, 0x08, 0x00, 0x00, 0x00,  // 0D4.....
                        /* 0460 */  0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0468 */  0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x5F, 0x53,  // \_SB_._S
                        /* 0470 */  0x41, 0x4E, 0x2E, 0x47, 0x45, 0x4E, 0x34, 0x00,  // AN.GEN4.
                        /* 0478 */  0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                        /* 0480 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 0488 */  0xC8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0490 */  0x04, 0x00, 0x00, 0x00, 0x30, 0x0E, 0x00, 0x00,  // ....0...
                        /* 0498 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 04A0 */  0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 04A8 */  0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 04B0 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 04B8 */  0x28, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // (#......
                        /* 04C0 */  0x04, 0x00, 0x00, 0x00, 0x7D, 0x00, 0x00, 0x00,  // ....}...
                        /* 04C8 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 04D0 */  0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 04D8 */  0x04, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00,  // ....d...
                        /* 04E0 */  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 04E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 04F0 */  0x01, 0x00, 0x00, 0x00, 0x1B, 0x00, 0x00, 0x00,  // ........
                        /* 04F8 */  0x2F, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,  // /partici
                        /* 0500 */  0x70, 0x61, 0x6E, 0x74, 0x73, 0x2F, 0x54, 0x43,  // pants/TC
                        /* 0508 */  0x50, 0x55, 0x2E, 0x44, 0x30, 0x2F, 0x67, 0x74,  // PU.D0/gt
                        /* 0510 */  0x73, 0x68, 0x00, 0x06, 0x00, 0x00, 0x00, 0x04,  // sh......
                        /* 0518 */  0x00, 0x00, 0x00, 0xC0, 0x0A, 0x00, 0x00, 0x01,  // ........
                        /* 0520 */  0x00, 0x00, 0x00, 0x26, 0x00, 0x00, 0x00, 0x2F,  // ...&.../
                        /* 0528 */  0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,  // particip
                        /* 0530 */  0x61, 0x6E, 0x74, 0x73, 0x2F, 0x54, 0x43, 0x50,  // ants/TCP
                        /* 0538 */  0x55, 0x2E, 0x44, 0x30, 0x2F, 0x6C, 0x61, 0x73,  // U.D0/las
                        /* 0540 */  0x74, 0x5F, 0x65, 0x77, 0x6D, 0x61, 0x5F, 0x70,  // t_ewma_p
                        /* 0548 */  0x6F, 0x77, 0x65, 0x72, 0x00, 0x1A, 0x00, 0x00,  // ower....
                        /* 0550 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x57, 0x2B, 0x00,  // .....W+.
                        /* 0558 */  0x00, 0x01, 0x00, 0x00, 0x00, 0x26, 0x00, 0x00,  // .....&..
                        /* 0560 */  0x00, 0x2F, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,  // ./partic
                        /* 0568 */  0x69, 0x70, 0x61, 0x6E, 0x74, 0x73, 0x2F, 0x54,  // ipants/T
                        /* 0570 */  0x43, 0x50, 0x55, 0x2E, 0x44, 0x30, 0x2F, 0x6C,  // CPU.D0/l
                        /* 0578 */  0x61, 0x73, 0x74, 0x5F, 0x70, 0x6F, 0x77, 0x65,  // ast_powe
                        /* 0580 */  0x72, 0x5F, 0x75, 0x73, 0x65, 0x64, 0x00, 0x1A,  // r_used..
                        /* 0588 */  0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x9A,  // ........
                        /* 0590 */  0x2A, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1B,  // *.......
                        /* 0598 */  0x00, 0x00, 0x00, 0x2F, 0x70, 0x61, 0x72, 0x74,  // .../part
                        /* 05A0 */  0x69, 0x63, 0x69, 0x70, 0x61, 0x6E, 0x74, 0x73,  // icipants
                        /* 05A8 */  0x2F, 0x54, 0x43, 0x50, 0x55, 0x2E, 0x44, 0x30,  // /TCPU.D0
                        /* 05B0 */  0x2F, 0x70, 0x70, 0x63, 0x63, 0x00, 0x07, 0x00,  // /ppcc...
                        /* 05B8 */  0x00, 0x00, 0x9C, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 05C0 */  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 05C8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 05D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 05D8 */  0x00, 0x00, 0xB8, 0x0B, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 05E0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x98, 0x3A,  // .......:
                        /* 05E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 05F0 */  0x00, 0x00, 0x60, 0x6D, 0x00, 0x00, 0x00, 0x00,  // ..`m....
                        /* 05F8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x7D,  // .......}
                        /* 0600 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0608 */  0x00, 0x00, 0xF4, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0610 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 0618 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0620 */  0x00, 0x00, 0x20, 0x4E, 0x00, 0x00, 0x00, 0x00,  // .. N....
                        /* 0628 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x20, 0x4E,  // ...... N
                        /* 0630 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0638 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0640 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0648 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0650 */  0x00, 0x00, 0xF4, 0x01, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0658 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x25, 0x00,  // ......%.
                        /* 0660 */  0x00, 0x00, 0x2F, 0x70, 0x61, 0x72, 0x74, 0x69,  // ../parti
                        /* 0668 */  0x63, 0x69, 0x70, 0x61, 0x6E, 0x74, 0x73, 0x2F,  // cipants/
                        /* 0670 */  0x54, 0x43, 0x50, 0x55, 0x2E, 0x44, 0x30, 0x2F,  // TCPU.D0/
                        /* 0678 */  0x74, 0x72, 0x69, 0x70, 0x70, 0x6F, 0x69, 0x6E,  // trippoin
                        /* 0680 */  0x74, 0x2F, 0x5F, 0x61, 0x63, 0x30, 0x00, 0x06,  // t/_ac0..
                        /* 0688 */  0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x94,  // ........
                        /* 0690 */  0x0E, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x25,  // .......%
                        /* 0698 */  0x00, 0x00, 0x00, 0x2F, 0x70, 0x61, 0x72, 0x74,  // .../part
                        /* 06A0 */  0x69, 0x63, 0x69, 0x70, 0x61, 0x6E, 0x74, 0x73,  // icipants
                        /* 06A8 */  0x2F, 0x54, 0x43, 0x50, 0x55, 0x2E, 0x44, 0x30,  // /TCPU.D0
                        /* 06B0 */  0x2F, 0x74, 0x72, 0x69, 0x70, 0x70, 0x6F, 0x69,  // /trippoi
                        /* 06B8 */  0x6E, 0x74, 0x2F, 0x5F, 0x61, 0x63, 0x31, 0x00,  // nt/_ac1.
                        /* 06C0 */  0x06, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 06C8 */  0x62, 0x0E, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // b.......
                        /* 06D0 */  0x25, 0x00, 0x00, 0x00, 0x2F, 0x70, 0x61, 0x72,  // %.../par
                        /* 06D8 */  0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6E, 0x74,  // ticipant
                        /* 06E0 */  0x73, 0x2F, 0x54, 0x43, 0x50, 0x55, 0x2E, 0x44,  // s/TCPU.D
                        /* 06E8 */  0x30, 0x2F, 0x74, 0x72, 0x69, 0x70, 0x70, 0x6F,  // 0/trippo
                        /* 06F0 */  0x69, 0x6E, 0x74, 0x2F, 0x5F, 0x61, 0x63, 0x32,  // int/_ac2
                        /* 06F8 */  0x00, 0x06, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 0700 */  0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x00,  // ........
                        /* 0708 */  0x00, 0x25, 0x00, 0x00, 0x00, 0x2F, 0x70, 0x61,  // .%.../pa
                        /* 0710 */  0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6E,  // rticipan
                        /* 0718 */  0x74, 0x73, 0x2F, 0x54, 0x43, 0x50, 0x55, 0x2E,  // ts/TCPU.
                        /* 0720 */  0x44, 0x30, 0x2F, 0x74, 0x72, 0x69, 0x70, 0x70,  // D0/tripp
                        /* 0728 */  0x6F, 0x69, 0x6E, 0x74, 0x2F, 0x5F, 0x61, 0x63,  // oint/_ac
                        /* 0730 */  0x33, 0x00, 0x06, 0x00, 0x00, 0x00, 0x04, 0x00,  // 3.......
                        /* 0738 */  0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00,  // ........
                        /* 0740 */  0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0x2F, 0x70,  // ..%.../p
                        /* 0748 */  0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,  // articipa
                        /* 0750 */  0x6E, 0x74, 0x73, 0x2F, 0x54, 0x43, 0x50, 0x55,  // nts/TCPU
                        /* 0758 */  0x2E, 0x44, 0x30, 0x2F, 0x74, 0x72, 0x69, 0x70,  // .D0/trip
                        /* 0760 */  0x70, 0x6F, 0x69, 0x6E, 0x74, 0x2F, 0x5F, 0x61,  // point/_a
                        /* 0768 */  0x63, 0x34, 0x00, 0x06, 0x00, 0x00, 0x00, 0x04,  // c4......
                        /* 0770 */  0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x01,  // ........
                        /* 0778 */  0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0x2F,  // ...%.../
                        /* 0780 */  0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,  // particip
                        /* 0788 */  0x61, 0x6E, 0x74, 0x73, 0x2F, 0x54, 0x43, 0x50,  // ants/TCP
                        /* 0790 */  0x55, 0x2E, 0x44, 0x30, 0x2F, 0x74, 0x72, 0x69,  // U.D0/tri
                        /* 0798 */  0x70, 0x70, 0x6F, 0x69, 0x6E, 0x74, 0x2F, 0x5F,  // ppoint/_
                        /* 07A0 */  0x61, 0x63, 0x35, 0x00, 0x06, 0x00, 0x00, 0x00,  // ac5.....
                        /* 07A8 */  0x04, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                        /* 07B0 */  0x01, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00,  // ....%...
                        /* 07B8 */  0x2F, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,  // /partici
                        /* 07C0 */  0x70, 0x61, 0x6E, 0x74, 0x73, 0x2F, 0x54, 0x43,  // pants/TC
                        /* 07C8 */  0x50, 0x55, 0x2E, 0x44, 0x30, 0x2F, 0x74, 0x72,  // PU.D0/tr
                        /* 07D0 */  0x69, 0x70, 0x70, 0x6F, 0x69, 0x6E, 0x74, 0x2F,  // ippoint/
                        /* 07D8 */  0x5F, 0x61, 0x63, 0x36, 0x00, 0x06, 0x00, 0x00,  // _ac6....
                        /* 07E0 */  0x00, 0x04, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF,  // ........
                        /* 07E8 */  0xFF, 0x01, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00,  // .....%..
                        /* 07F0 */  0x00, 0x2F, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,  // ./partic
                        /* 07F8 */  0x69, 0x70, 0x61, 0x6E, 0x74, 0x73, 0x2F, 0x54,  // ipants/T
                        /* 0800 */  0x43, 0x50, 0x55, 0x2E, 0x44, 0x30, 0x2F, 0x74,  // CPU.D0/t
                        /* 0808 */  0x72, 0x69, 0x70, 0x70, 0x6F, 0x69, 0x6E, 0x74,  // rippoint
                        /* 0810 */  0x2F, 0x5F, 0x61, 0x63, 0x37, 0x00, 0x06, 0x00,  // /_ac7...
                        /* 0818 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xFF, 0xFF,  // ........
                        /* 0820 */  0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x25, 0x00,  // ......%.
                        /* 0828 */  0x00, 0x00, 0x2F, 0x70, 0x61, 0x72, 0x74, 0x69,  // ../parti
                        /* 0830 */  0x63, 0x69, 0x70, 0x61, 0x6E, 0x74, 0x73, 0x2F,  // cipants/
                        /* 0838 */  0x54, 0x43, 0x50, 0x55, 0x2E, 0x44, 0x30, 0x2F,  // TCPU.D0/
                        /* 0840 */  0x74, 0x72, 0x69, 0x70, 0x70, 0x6F, 0x69, 0x6E,  // trippoin
                        /* 0848 */  0x74, 0x2F, 0x5F, 0x61, 0x63, 0x38, 0x00, 0x06,  // t/_ac8..
                        /* 0850 */  0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xFF,  // ........
                        /* 0858 */  0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x25,  // .......%
                        /* 0860 */  0x00, 0x00, 0x00, 0x2F, 0x70, 0x61, 0x72, 0x74,  // .../part
                        /* 0868 */  0x69, 0x63, 0x69, 0x70, 0x61, 0x6E, 0x74, 0x73,  // icipants
                        /* 0870 */  0x2F, 0x54, 0x43, 0x50, 0x55, 0x2E, 0x44, 0x30,  // /TCPU.D0
                        /* 0878 */  0x2F, 0x74, 0x72, 0x69, 0x70, 0x70, 0x6F, 0x69,  // /trippoi
                        /* 0880 */  0x6E, 0x74, 0x2F, 0x5F, 0x61, 0x63, 0x39, 0x00,  // nt/_ac9.
                        /* 0888 */  0x06, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 0890 */  0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00,  // ........
                        /* 0898 */  0x25, 0x00, 0x00, 0x00, 0x2F, 0x70, 0x61, 0x72,  // %.../par
                        /* 08A0 */  0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6E, 0x74,  // ticipant
                        /* 08A8 */  0x73, 0x2F, 0x54, 0x43, 0x50, 0x55, 0x2E, 0x44,  // s/TCPU.D
                        /* 08B0 */  0x30, 0x2F, 0x74, 0x72, 0x69, 0x70, 0x70, 0x6F,  // 0/trippo
                        /* 08B8 */  0x69, 0x6E, 0x74, 0x2F, 0x5F, 0x63, 0x72, 0x33,  // int/_cr3
                        /* 08C0 */  0x00, 0x06, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 08C8 */  0x00, 0x8E, 0x0F, 0x00, 0x00, 0x01, 0x00, 0x00,  // ........
                        /* 08D0 */  0x00, 0x25, 0x00, 0x00, 0x00, 0x2F, 0x70, 0x61,  // .%.../pa
                        /* 08D8 */  0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6E,  // rticipan
                        /* 08E0 */  0x74, 0x73, 0x2F, 0x54, 0x43, 0x50, 0x55, 0x2E,  // ts/TCPU.
                        /* 08E8 */  0x44, 0x30, 0x2F, 0x74, 0x72, 0x69, 0x70, 0x70,  // D0/tripp
                        /* 08F0 */  0x6F, 0x69, 0x6E, 0x74, 0x2F, 0x5F, 0x63, 0x72,  // oint/_cr
                        /* 08F8 */  0x74, 0x00, 0x06, 0x00, 0x00, 0x00, 0x04, 0x00,  // t.......
                        /* 0900 */  0x00, 0x00, 0x8E, 0x0F, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 0908 */  0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0x2F, 0x70,  // ..%.../p
                        /* 0910 */  0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,  // articipa
                        /* 0918 */  0x6E, 0x74, 0x73, 0x2F, 0x54, 0x43, 0x50, 0x55,  // nts/TCPU
                        /* 0920 */  0x2E, 0x44, 0x30, 0x2F, 0x74, 0x72, 0x69, 0x70,  // .D0/trip
                        /* 0928 */  0x70, 0x6F, 0x69, 0x6E, 0x74, 0x2F, 0x5F, 0x68,  // point/_h
                        /* 0930 */  0x6F, 0x74, 0x00, 0x06, 0x00, 0x00, 0x00, 0x04,  // ot......
                        /* 0938 */  0x00, 0x00, 0x00, 0x8E, 0x0F, 0x00, 0x00, 0x01,  // ........
                        /* 0940 */  0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0x2F,  // ...%.../
                        /* 0948 */  0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,  // particip
                        /* 0950 */  0x61, 0x6E, 0x74, 0x73, 0x2F, 0x54, 0x43, 0x50,  // ants/TCP
                        /* 0958 */  0x55, 0x2E, 0x44, 0x30, 0x2F, 0x74, 0x72, 0x69,  // U.D0/tri
                        /* 0960 */  0x70, 0x70, 0x6F, 0x69, 0x6E, 0x74, 0x2F, 0x5F,  // ppoint/_
                        /* 0968 */  0x70, 0x73, 0x76, 0x00, 0x06, 0x00, 0x00, 0x00,  // psv.....
                        /* 0970 */  0x04, 0x00, 0x00, 0x00, 0x94, 0x0E, 0x00, 0x00,  // ........
                        /* 0978 */  0x01, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00,  // ........
                        /* 0980 */  0x2F, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2F,  // /shared/
                        /* 0988 */  0x65, 0x78, 0x70, 0x6F, 0x72, 0x74, 0x2F, 0x61,  // export/a
                        /* 0990 */  0x70, 0x61, 0x74, 0x00, 0x07, 0x00, 0x00, 0x00,  // pat.....
                        /* 0998 */  0x1E, 0x03, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 09A0 */  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 09A8 */  0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                        /* 09B0 */  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,  // ........
                        /* 09B8 */  0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 09C0 */  0x44, 0x43, 0x20, 0x53, 0x61, 0x76, 0x65, 0x72,  // DC Saver
                        /* 09C8 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00,  // ........
                        /* 09D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53,  // .....\_S
                        /* 09D8 */  0x42, 0x5F, 0x2E, 0x49, 0x45, 0x54, 0x4D, 0x00,  // B_.IETM.
                        /* 09E0 */  0x04, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00,  // ........
                        /* 09E8 */  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,  // ........
                        /* 09F0 */  0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 09F8 */  0x50, 0x53, 0x56, 0x54, 0x00, 0x08, 0x00, 0x00,  // PSVT....
                        /* 0A00 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0A08 */  0x00, 0x34, 0x35, 0x63, 0x00, 0x04, 0x00, 0x00,  // .45c....
                        /* 0A10 */  0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0A18 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00,  // ........
                        /* 0A20 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x43, 0x20,  // .....DC 
                        /* 0A28 */  0x53, 0x61, 0x76, 0x65, 0x72, 0x00, 0x08, 0x00,  // Saver...
                        /* 0A30 */  0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0A38 */  0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E,  // ..\_SB_.
                        /* 0A40 */  0x49, 0x45, 0x54, 0x4D, 0x00, 0x04, 0x00, 0x00,  // IETM....
                        /* 0A48 */  0x00, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0A50 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00,  // ........
                        /* 0A58 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x49, 0x44,  // .....PID
                        /* 0A60 */  0x41, 0x00, 0x08, 0x00, 0x00, 0x00, 0x04, 0x00,  // A.......
                        /* 0A68 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x35,  // ......45
                        /* 0A70 */  0x63, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00,  // c.......
                        /* 0A78 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 0A80 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0A88 */  0x00, 0x00, 0x52, 0x65, 0x63, 0x00, 0x08, 0x00,  // ..Rec...
                        /* 0A90 */  0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0A98 */  0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E,  // ..\_SB_.
                        /* 0AA0 */  0x49, 0x45, 0x54, 0x4D, 0x00, 0x04, 0x00, 0x00,  // IETM....
                        /* 0AA8 */  0x00, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0AB0 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00,  // ........
                        /* 0AB8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x53, 0x56,  // .....PSV
                        /* 0AC0 */  0x54, 0x00, 0x08, 0x00, 0x00, 0x00, 0x04, 0x00,  // T.......
                        /* 0AC8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x36,  // ......46
                        /* 0AD0 */  0x63, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00,  // c.......
                        /* 0AD8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 0AE0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0AE8 */  0x00, 0x00, 0x52, 0x65, 0x63, 0x00, 0x08, 0x00,  // ..Rec...
                        /* 0AF0 */  0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0AF8 */  0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E,  // ..\_SB_.
                        /* 0B00 */  0x49, 0x45, 0x54, 0x4D, 0x00, 0x04, 0x00, 0x00,  // IETM....
                        /* 0B08 */  0x00, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0B10 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00,  // ........
                        /* 0B18 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x49, 0x44,  // .....PID
                        /* 0B20 */  0x41, 0x00, 0x08, 0x00, 0x00, 0x00, 0x04, 0x00,  // A.......
                        /* 0B28 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x36,  // ......46
                        /* 0B30 */  0x63, 0x00, 0x04, 0x00, 0x00, 0x00, 0x03, 0x00,  // c.......
                        /* 0B38 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 0B40 */  0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0B48 */  0x00, 0x00, 0x42, 0x65, 0x74, 0x74, 0x65, 0x72,  // ..Better
                        /* 0B50 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00,  // ........
                        /* 0B58 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53,  // .....\_S
                        /* 0B60 */  0x42, 0x5F, 0x2E, 0x49, 0x45, 0x54, 0x4D, 0x00,  // B_.IETM.
                        /* 0B68 */  0x04, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00,  // ........
                        /* 0B70 */  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,  // ........
                        /* 0B78 */  0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0B80 */  0x50, 0x53, 0x56, 0x54, 0x00, 0x08, 0x00, 0x00,  // PSVT....
                        /* 0B88 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0B90 */  0x00, 0x34, 0x37, 0x63, 0x00, 0x04, 0x00, 0x00,  // .47c....
                        /* 0B98 */  0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0BA0 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00,  // ........
                        /* 0BA8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x65, 0x74,  // .....Bet
                        /* 0BB0 */  0x74, 0x65, 0x72, 0x00, 0x08, 0x00, 0x00, 0x00,  // ter.....
                        /* 0BB8 */  0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0BC0 */  0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x49, 0x45,  // \_SB_.IE
                        /* 0BC8 */  0x54, 0x4D, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0E,  // TM......
                        /* 0BD0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08,  // ........
                        /* 0BD8 */  0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0BE0 */  0x00, 0x00, 0x00, 0x50, 0x49, 0x44, 0x41, 0x00,  // ...PIDA.
                        /* 0BE8 */  0x08, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 0BF0 */  0x00, 0x00, 0x00, 0x00, 0x34, 0x37, 0x63, 0x00,  // ....47c.
                        /* 0BF8 */  0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ........
                        /* 0C00 */  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,  // ........
                        /* 0C08 */  0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0C10 */  0x42, 0x65, 0x73, 0x74, 0x00, 0x08, 0x00, 0x00,  // Best....
                        /* 0C18 */  0x00, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0C20 */  0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x49,  // .\_SB_.I
                        /* 0C28 */  0x45, 0x54, 0x4D, 0x00, 0x04, 0x00, 0x00, 0x00,  // ETM.....
                        /* 0C30 */  0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0C38 */  0x08, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,  // ........
                        /* 0C40 */  0x00, 0x00, 0x00, 0x00, 0x50, 0x53, 0x56, 0x54,  // ....PSVT
                        /* 0C48 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 0C50 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x38, 0x63,  // .....48c
                        /* 0C58 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                        /* 0C60 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,  // ........
                        /* 0C68 */  0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0C70 */  0x00, 0x42, 0x65, 0x73, 0x74, 0x00, 0x08, 0x00,  // .Best...
                        /* 0C78 */  0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0C80 */  0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E,  // ..\_SB_.
                        /* 0C88 */  0x49, 0x45, 0x54, 0x4D, 0x00, 0x04, 0x00, 0x00,  // IETM....
                        /* 0C90 */  0x00, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0C98 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00,  // ........
                        /* 0CA0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x49, 0x44,  // .....PID
                        /* 0CA8 */  0x41, 0x00, 0x08, 0x00, 0x00, 0x00, 0x04, 0x00,  // A.......
                        /* 0CB0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x38,  // ......48
                        /* 0CB8 */  0x63, 0x00, 0x01, 0x00, 0x00, 0x00, 0x14, 0x00,  // c.......
                        /* 0CC0 */  0x00, 0x00, 0x2F, 0x73, 0x68, 0x61, 0x72, 0x65,  // ../share
                        /* 0CC8 */  0x64, 0x2F, 0x65, 0x78, 0x70, 0x6F, 0x72, 0x74,  // d/export
                        /* 0CD0 */  0x2F, 0x61, 0x70, 0x63, 0x74, 0x00, 0x07, 0x00,  // /apct...
                        /* 0CD8 */  0x00, 0x00, 0x4C, 0x0B, 0x00, 0x00, 0x04, 0x00,  // ..L.....
                        /* 0CE0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0CE8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 0CF0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0CF8 */  0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0D00 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 0D08 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0D10 */  0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0D18 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 0D20 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0D28 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0D30 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 0D38 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0D40 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0D48 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 0D50 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0D58 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0D60 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 0D68 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0D70 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0D78 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 0D80 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0D88 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0D90 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 0D98 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0DA0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0DA8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 0DB0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0DB8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0DC0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 0DC8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0DD0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0DD8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 0DE0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0DE8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0DF0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 0DF8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0E00 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0E08 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 0E10 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0E18 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0E20 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 0E28 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0E30 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0E38 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 0E40 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0E48 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0E50 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 0E58 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0E60 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0E68 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 0E70 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0E78 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0E80 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 0E88 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0E90 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0E98 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 0EA0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0EA8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0EB0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 0EB8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0EC0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0EC8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00,  // ........
                        /* 0ED0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0ED8 */  0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0EE0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 0EE8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0EF0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0EF8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 0F00 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0F08 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0F10 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 0F18 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0F20 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0F28 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 0F30 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0F38 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0F40 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 0F48 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0F50 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0F58 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 0F60 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0F68 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0F70 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 0F78 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0F80 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0F88 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 0F90 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0F98 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0FA0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 0FA8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0FB0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0FB8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 0FC0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0FC8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0FD0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 0FD8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0FE0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0FE8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 0FF0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 0FF8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1000 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1010 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1018 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1028 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1030 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1038 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1040 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1048 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1058 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1060 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1068 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1070 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1078 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1080 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1088 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1090 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1098 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 10A0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 10A8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00,  // ........
                        /* 10B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 10B8 */  0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 10C0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 10C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 10D0 */  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 10D8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 10E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 10E8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 10F0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 10F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1100 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1108 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1110 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1118 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1120 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1128 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1130 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1138 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1140 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1148 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1150 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1158 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1160 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1168 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1170 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1178 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1180 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1188 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1190 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1198 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 11A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 11A8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 11B0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 11B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 11C0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 11C8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 11D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 11D8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 11E0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 11E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 11F0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 11F8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1200 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1208 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1210 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1218 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1220 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1228 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1230 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1238 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1240 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1248 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1250 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1258 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1260 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1268 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1270 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1278 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1280 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1288 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x03, 0x00,  // ........
                        /* 1290 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1298 */  0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 12A0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 12A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 12B0 */  0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 12B8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 12C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 12C8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 12D0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 12D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 12E0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 12E8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 12F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 12F8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1300 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1308 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1310 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1318 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1320 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1328 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1330 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1338 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1340 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1348 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1350 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1358 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1360 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1368 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1370 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1378 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1380 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1388 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1390 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1398 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 13A0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 13A8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 13B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 13B8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 13C0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 13C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 13D0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 13D8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 13E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 13E8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 13F0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 13F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1400 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1408 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1410 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1418 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1420 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1428 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1430 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1438 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1440 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1448 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1450 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1458 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1460 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1468 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x03, 0x00,  // ........
                        /* 1470 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1478 */  0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1480 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1488 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1490 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1498 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 14A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 14A8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 14B0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 14B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 14C0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 14C8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 14D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 14D8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 14E0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 14E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 14F0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 14F8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1500 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1508 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1510 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1518 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1520 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1528 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1530 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1538 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1540 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1548 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1550 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1558 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1560 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1568 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1570 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1578 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1580 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1588 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1590 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1598 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 15A0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 15A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 15B0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 15B8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 15C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 15C8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 15D0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 15D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 15E0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 15E8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 15F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 15F8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1600 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1608 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1610 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1618 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1620 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1628 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1630 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1638 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1640 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1648 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1650 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1658 */  0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1660 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1668 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1670 */  0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1678 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1680 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1688 */  0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1690 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1698 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 16A0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 16A8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 16B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 16B8 */  0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 16C0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 16C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 16D0 */  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 16D8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 16E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 16E8 */  0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 16F0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 16F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1700 */  0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1708 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1710 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1718 */  0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1720 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1728 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1730 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1738 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1740 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1748 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1750 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1758 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1760 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1768 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1770 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1778 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1780 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1788 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1790 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1798 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 17A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 17A8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 17B0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 17B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 17C0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 17C8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 17D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 17D8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 17E0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 17E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 17F0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 17F8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1800 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1808 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1810 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1818 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 1820 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1828 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x14, 0x00,  // ........
                        /* 1830 */  0x00, 0x00, 0x2F, 0x73, 0x68, 0x61, 0x72, 0x65,  // ../share
                        /* 1838 */  0x64, 0x2F, 0x65, 0x78, 0x70, 0x6F, 0x72, 0x74,  // d/export
                        /* 1840 */  0x2F, 0x70, 0x62, 0x61, 0x74, 0x00, 0x07, 0x00,  // /pbat...
                        /* 1848 */  0x00, 0x00, 0x2C, 0x0D, 0x00, 0x00, 0x04, 0x00,  // ..,.....
                        /* 1850 */  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1858 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 1860 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 1868 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1870 */  0x00, 0x00, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6C,  // ..defaul
                        /* 1878 */  0x74, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00,  // t.......
                        /* 1880 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F,  // ......\_
                        /* 1888 */  0x53, 0x42, 0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30,  // SB_.PCI0
                        /* 1890 */  0x2E, 0x42, 0x30, 0x44, 0x34, 0x00, 0x04, 0x00,  // .B0D4...
                        /* 1898 */  0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 18A0 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x0D, 0x00,  // ........
                        /* 18A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x53,  // ......PS
                        /* 18B0 */  0x79, 0x73, 0x50, 0x4C, 0x31, 0x4C, 0x69, 0x6D,  // ysPL1Lim
                        /* 18B8 */  0x69, 0x74, 0x00, 0x08, 0x00, 0x00, 0x00, 0x06,  // it......
                        /* 18C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34,  // .......4
                        /* 18C8 */  0x35, 0x30, 0x30, 0x30, 0x00, 0x04, 0x00, 0x00,  // 5000....
                        /* 18D0 */  0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 18D8 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,  // ........
                        /* 18E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x65, 0x66,  // .....def
                        /* 18E8 */  0x61, 0x75, 0x6C, 0x74, 0x00, 0x08, 0x00, 0x00,  // ault....
                        /* 18F0 */  0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 18F8 */  0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x50,  // .\_SB_.P
                        /* 1900 */  0x43, 0x49, 0x30, 0x2E, 0x42, 0x30, 0x44, 0x34,  // CI0.B0D4
                        /* 1908 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00,  // ........
                        /* 1910 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,  // ........
                        /* 1918 */  0x00, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1920 */  0x00, 0x50, 0x53, 0x79, 0x73, 0x50, 0x4C, 0x32,  // .PSysPL2
                        /* 1928 */  0x4C, 0x69, 0x6D, 0x69, 0x74, 0x00, 0x08, 0x00,  // Limit...
                        /* 1930 */  0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1938 */  0x00, 0x00, 0x34, 0x35, 0x30, 0x30, 0x30, 0x00,  // ..45000.
                        /* 1940 */  0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                        /* 1948 */  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,  // ........
                        /* 1950 */  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1958 */  0x64, 0x65, 0x66, 0x61, 0x75, 0x6C, 0x74, 0x00,  // default.
                        /* 1960 */  0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,  // ........
                        /* 1968 */  0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42,  // ....\_SB
                        /* 1970 */  0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30, 0x2E, 0x42,  // _.PCI0.B
                        /* 1978 */  0x30, 0x44, 0x34, 0x00, 0x04, 0x00, 0x00, 0x00,  // 0D4.....
                        /* 1980 */  0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1988 */  0x08, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00,  // ........
                        /* 1990 */  0x00, 0x00, 0x00, 0x00, 0x50, 0x4C, 0x34, 0x50,  // ....PL4P
                        /* 1998 */  0x6F, 0x77, 0x65, 0x72, 0x4C, 0x69, 0x6D, 0x69,  // owerLimi
                        /* 19A0 */  0x74, 0x00, 0x08, 0x00, 0x00, 0x00, 0x06, 0x00,  // t.......
                        /* 19A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x36,  // ......46
                        /* 19B0 */  0x30, 0x30, 0x30, 0x00, 0x04, 0x00, 0x00, 0x00,  // 000.....
                        /* 19B8 */  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 19C0 */  0x08, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00,  // ........
                        /* 19C8 */  0x00, 0x00, 0x00, 0x00, 0x6C, 0x6F, 0x77, 0x5F,  // ....low_
                        /* 19D0 */  0x62, 0x61, 0x74, 0x74, 0x5F, 0x6E, 0x6F, 0x5F,  // batt_no_
                        /* 19D8 */  0x62, 0x72, 0x69, 0x63, 0x6B, 0x00, 0x08, 0x00,  // brick...
                        /* 19E0 */  0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 19E8 */  0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E,  // ..\_SB_.
                        /* 19F0 */  0x50, 0x43, 0x49, 0x30, 0x2E, 0x42, 0x30, 0x44,  // PCI0.B0D
                        /* 19F8 */  0x34, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00,  // 4.......
                        /* 1A00 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 1A08 */  0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1A10 */  0x00, 0x00, 0x50, 0x53, 0x79, 0x73, 0x50, 0x4C,  // ..PSysPL
                        /* 1A18 */  0x31, 0x4C, 0x69, 0x6D, 0x69, 0x74, 0x00, 0x08,  // 1Limit..
                        /* 1A20 */  0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1A28 */  0x00, 0x00, 0x00, 0x33, 0x31, 0x35, 0x30, 0x30,  // ...31500
                        /* 1A30 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,  // ........
                        /* 1A38 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,  // ........
                        /* 1A40 */  0x00, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1A48 */  0x00, 0x6C, 0x6F, 0x77, 0x5F, 0x62, 0x61, 0x74,  // .low_bat
                        /* 1A50 */  0x74, 0x5F, 0x6E, 0x6F, 0x5F, 0x62, 0x72, 0x69,  // t_no_bri
                        /* 1A58 */  0x63, 0x6B, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10,  // ck......
                        /* 1A60 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C,  // .......\
                        /* 1A68 */  0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x50, 0x43, 0x49,  // _SB_.PCI
                        /* 1A70 */  0x30, 0x2E, 0x42, 0x30, 0x44, 0x34, 0x00, 0x04,  // 0.B0D4..
                        /* 1A78 */  0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1A80 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x0D,  // ........
                        /* 1A88 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50,  // .......P
                        /* 1A90 */  0x53, 0x79, 0x73, 0x50, 0x4C, 0x32, 0x4C, 0x69,  // SysPL2Li
                        /* 1A98 */  0x6D, 0x69, 0x74, 0x00, 0x08, 0x00, 0x00, 0x00,  // mit.....
                        /* 1AA0 */  0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1AA8 */  0x34, 0x35, 0x30, 0x30, 0x30, 0x00, 0x04, 0x00,  // 45000...
                        /* 1AB0 */  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1AB8 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x12, 0x00,  // ........
                        /* 1AC0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6C, 0x6F,  // ......lo
                        /* 1AC8 */  0x77, 0x5F, 0x62, 0x61, 0x74, 0x74, 0x5F, 0x6E,  // w_batt_n
                        /* 1AD0 */  0x6F, 0x5F, 0x62, 0x72, 0x69, 0x63, 0x6B, 0x00,  // o_brick.
                        /* 1AD8 */  0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,  // ........
                        /* 1AE0 */  0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42,  // ....\_SB
                        /* 1AE8 */  0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30, 0x2E, 0x42,  // _.PCI0.B
                        /* 1AF0 */  0x30, 0x44, 0x34, 0x00, 0x04, 0x00, 0x00, 0x00,  // 0D4.....
                        /* 1AF8 */  0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1B00 */  0x08, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00,  // ........
                        /* 1B08 */  0x00, 0x00, 0x00, 0x00, 0x50, 0x4C, 0x34, 0x50,  // ....PL4P
                        /* 1B10 */  0x6F, 0x77, 0x65, 0x72, 0x4C, 0x69, 0x6D, 0x69,  // owerLimi
                        /* 1B18 */  0x74, 0x00, 0x08, 0x00, 0x00, 0x00, 0x06, 0x00,  // t.......
                        /* 1B20 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x36,  // ......46
                        /* 1B28 */  0x30, 0x30, 0x30, 0x00, 0x04, 0x00, 0x00, 0x00,  // 000.....
                        /* 1B30 */  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1B38 */  0x08, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00,  // ........
                        /* 1B40 */  0x00, 0x00, 0x00, 0x00, 0x6C, 0x6F, 0x77, 0x5F,  // ....low_
                        /* 1B48 */  0x62, 0x61, 0x74, 0x74, 0x5F, 0x32, 0x34, 0x57,  // batt_24W
                        /* 1B50 */  0x5F, 0x62, 0x72, 0x69, 0x63, 0x6B, 0x00, 0x08,  // _brick..
                        /* 1B58 */  0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1B60 */  0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F,  // ...\_SB_
                        /* 1B68 */  0x2E, 0x50, 0x43, 0x49, 0x30, 0x2E, 0x42, 0x30,  // .PCI0.B0
                        /* 1B70 */  0x44, 0x34, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09,  // D4......
                        /* 1B78 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08,  // ........
                        /* 1B80 */  0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1B88 */  0x00, 0x00, 0x00, 0x50, 0x53, 0x79, 0x73, 0x50,  // ...PSysP
                        /* 1B90 */  0x4C, 0x31, 0x4C, 0x69, 0x6D, 0x69, 0x74, 0x00,  // L1Limit.
                        /* 1B98 */  0x08, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,  // ........
                        /* 1BA0 */  0x00, 0x00, 0x00, 0x00, 0x32, 0x31, 0x35, 0x30,  // ....2150
                        /* 1BA8 */  0x30, 0x00, 0x04, 0x00, 0x00, 0x00, 0x03, 0x00,  // 0.......
                        /* 1BB0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 1BB8 */  0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1BC0 */  0x00, 0x00, 0x6C, 0x6F, 0x77, 0x5F, 0x62, 0x61,  // ..low_ba
                        /* 1BC8 */  0x74, 0x74, 0x5F, 0x32, 0x34, 0x57, 0x5F, 0x62,  // tt_24W_b
                        /* 1BD0 */  0x72, 0x69, 0x63, 0x6B, 0x00, 0x08, 0x00, 0x00,  // rick....
                        /* 1BD8 */  0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1BE0 */  0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x50,  // .\_SB_.P
                        /* 1BE8 */  0x43, 0x49, 0x30, 0x2E, 0x42, 0x30, 0x44, 0x34,  // CI0.B0D4
                        /* 1BF0 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00,  // ........
                        /* 1BF8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,  // ........
                        /* 1C00 */  0x00, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1C08 */  0x00, 0x50, 0x53, 0x79, 0x73, 0x50, 0x4C, 0x32,  // .PSysPL2
                        /* 1C10 */  0x4C, 0x69, 0x6D, 0x69, 0x74, 0x00, 0x08, 0x00,  // Limit...
                        /* 1C18 */  0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1C20 */  0x00, 0x00, 0x33, 0x30, 0x30, 0x30, 0x30, 0x00,  // ..30000.
                        /* 1C28 */  0x04, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,  // ........
                        /* 1C30 */  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,  // ........
                        /* 1C38 */  0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1C40 */  0x6C, 0x6F, 0x77, 0x5F, 0x62, 0x61, 0x74, 0x74,  // low_batt
                        /* 1C48 */  0x5F, 0x32, 0x34, 0x57, 0x5F, 0x62, 0x72, 0x69,  // _24W_bri
                        /* 1C50 */  0x63, 0x6B, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10,  // ck......
                        /* 1C58 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C,  // .......\
                        /* 1C60 */  0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x50, 0x43, 0x49,  // _SB_.PCI
                        /* 1C68 */  0x30, 0x2E, 0x42, 0x30, 0x44, 0x34, 0x00, 0x04,  // 0.B0D4..
                        /* 1C70 */  0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1C78 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x0E,  // ........
                        /* 1C80 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50,  // .......P
                        /* 1C88 */  0x4C, 0x34, 0x50, 0x6F, 0x77, 0x65, 0x72, 0x4C,  // L4PowerL
                        /* 1C90 */  0x69, 0x6D, 0x69, 0x74, 0x00, 0x08, 0x00, 0x00,  // imit....
                        /* 1C98 */  0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1CA0 */  0x00, 0x34, 0x36, 0x30, 0x30, 0x30, 0x00, 0x04,  // .46000..
                        /* 1CA8 */  0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1CB0 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x13,  // ........
                        /* 1CB8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6C,  // .......l
                        /* 1CC0 */  0x6F, 0x77, 0x5F, 0x62, 0x61, 0x74, 0x74, 0x5F,  // ow_batt_
                        /* 1CC8 */  0x33, 0x30, 0x57, 0x5F, 0x62, 0x72, 0x69, 0x63,  // 30W_bric
                        /* 1CD0 */  0x6B, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00,  // k.......
                        /* 1CD8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F,  // ......\_
                        /* 1CE0 */  0x53, 0x42, 0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30,  // SB_.PCI0
                        /* 1CE8 */  0x2E, 0x42, 0x30, 0x44, 0x34, 0x00, 0x04, 0x00,  // .B0D4...
                        /* 1CF0 */  0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1CF8 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x0D, 0x00,  // ........
                        /* 1D00 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x53,  // ......PS
                        /* 1D08 */  0x79, 0x73, 0x50, 0x4C, 0x31, 0x4C, 0x69, 0x6D,  // ysPL1Lim
                        /* 1D10 */  0x69, 0x74, 0x00, 0x08, 0x00, 0x00, 0x00, 0x06,  // it......
                        /* 1D18 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32,  // .......2
                        /* 1D20 */  0x37, 0x30, 0x30, 0x30, 0x00, 0x04, 0x00, 0x00,  // 7000....
                        /* 1D28 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1D30 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00,  // ........
                        /* 1D38 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x6C, 0x6F, 0x77,  // .....low
                        /* 1D40 */  0x5F, 0x62, 0x61, 0x74, 0x74, 0x5F, 0x33, 0x30,  // _batt_30
                        /* 1D48 */  0x57, 0x5F, 0x62, 0x72, 0x69, 0x63, 0x6B, 0x00,  // W_brick.
                        /* 1D50 */  0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,  // ........
                        /* 1D58 */  0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42,  // ....\_SB
                        /* 1D60 */  0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30, 0x2E, 0x42,  // _.PCI0.B
                        /* 1D68 */  0x30, 0x44, 0x34, 0x00, 0x04, 0x00, 0x00, 0x00,  // 0D4.....
                        /* 1D70 */  0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1D78 */  0x08, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00,  // ........
                        /* 1D80 */  0x00, 0x00, 0x00, 0x00, 0x50, 0x53, 0x79, 0x73,  // ....PSys
                        /* 1D88 */  0x50, 0x4C, 0x32, 0x4C, 0x69, 0x6D, 0x69, 0x74,  // PL2Limit
                        /* 1D90 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00,  // ........
                        /* 1D98 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x30, 0x30,  // .....300
                        /* 1DA0 */  0x30, 0x30, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04,  // 00......
                        /* 1DA8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08,  // ........
                        /* 1DB0 */  0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1DB8 */  0x00, 0x00, 0x00, 0x6C, 0x6F, 0x77, 0x5F, 0x62,  // ...low_b
                        /* 1DC0 */  0x61, 0x74, 0x74, 0x5F, 0x33, 0x30, 0x57, 0x5F,  // att_30W_
                        /* 1DC8 */  0x62, 0x72, 0x69, 0x63, 0x6B, 0x00, 0x08, 0x00,  // brick...
                        /* 1DD0 */  0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1DD8 */  0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E,  // ..\_SB_.
                        /* 1DE0 */  0x50, 0x43, 0x49, 0x30, 0x2E, 0x42, 0x30, 0x44,  // PCI0.B0D
                        /* 1DE8 */  0x34, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00,  // 4.......
                        /* 1DF0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 1DF8 */  0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1E00 */  0x00, 0x00, 0x50, 0x4C, 0x34, 0x50, 0x6F, 0x77,  // ..PL4Pow
                        /* 1E08 */  0x65, 0x72, 0x4C, 0x69, 0x6D, 0x69, 0x74, 0x00,  // erLimit.
                        /* 1E10 */  0x08, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,  // ........
                        /* 1E18 */  0x00, 0x00, 0x00, 0x00, 0x34, 0x36, 0x30, 0x30,  // ....4600
                        /* 1E20 */  0x30, 0x00, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00,  // 0.......
                        /* 1E28 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 1E30 */  0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1E38 */  0x00, 0x00, 0x63, 0x72, 0x69, 0x74, 0x5F, 0x62,  // ..crit_b
                        /* 1E40 */  0x61, 0x74, 0x74, 0x5F, 0x6E, 0x6F, 0x5F, 0x62,  // att_no_b
                        /* 1E48 */  0x72, 0x69, 0x63, 0x6B, 0x00, 0x08, 0x00, 0x00,  // rick....
                        /* 1E50 */  0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1E58 */  0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x50,  // .\_SB_.P
                        /* 1E60 */  0x43, 0x49, 0x30, 0x2E, 0x42, 0x30, 0x44, 0x34,  // CI0.B0D4
                        /* 1E68 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00,  // ........
                        /* 1E70 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,  // ........
                        /* 1E78 */  0x00, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1E80 */  0x00, 0x50, 0x53, 0x79, 0x73, 0x50, 0x4C, 0x31,  // .PSysPL1
                        /* 1E88 */  0x4C, 0x69, 0x6D, 0x69, 0x74, 0x00, 0x08, 0x00,  // Limit...
                        /* 1E90 */  0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1E98 */  0x00, 0x00, 0x32, 0x31, 0x35, 0x30, 0x30, 0x00,  // ..21500.
                        /* 1EA0 */  0x04, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,  // ........
                        /* 1EA8 */  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,  // ........
                        /* 1EB0 */  0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1EB8 */  0x63, 0x72, 0x69, 0x74, 0x5F, 0x62, 0x61, 0x74,  // crit_bat
                        /* 1EC0 */  0x74, 0x5F, 0x6E, 0x6F, 0x5F, 0x62, 0x72, 0x69,  // t_no_bri
                        /* 1EC8 */  0x63, 0x6B, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10,  // ck......
                        /* 1ED0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C,  // .......\
                        /* 1ED8 */  0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x50, 0x43, 0x49,  // _SB_.PCI
                        /* 1EE0 */  0x30, 0x2E, 0x42, 0x30, 0x44, 0x34, 0x00, 0x04,  // 0.B0D4..
                        /* 1EE8 */  0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1EF0 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x0D,  // ........
                        /* 1EF8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50,  // .......P
                        /* 1F00 */  0x53, 0x79, 0x73, 0x50, 0x4C, 0x32, 0x4C, 0x69,  // SysPL2Li
                        /* 1F08 */  0x6D, 0x69, 0x74, 0x00, 0x08, 0x00, 0x00, 0x00,  // mit.....
                        /* 1F10 */  0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1F18 */  0x33, 0x30, 0x30, 0x30, 0x30, 0x00, 0x04, 0x00,  // 30000...
                        /* 1F20 */  0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1F28 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x13, 0x00,  // ........
                        /* 1F30 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0x72,  // ......cr
                        /* 1F38 */  0x69, 0x74, 0x5F, 0x62, 0x61, 0x74, 0x74, 0x5F,  // it_batt_
                        /* 1F40 */  0x6E, 0x6F, 0x5F, 0x62, 0x72, 0x69, 0x63, 0x6B,  // no_brick
                        /* 1F48 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,  // ........
                        /* 1F50 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53,  // .....\_S
                        /* 1F58 */  0x42, 0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30, 0x2E,  // B_.PCI0.
                        /* 1F60 */  0x42, 0x30, 0x44, 0x34, 0x00, 0x04, 0x00, 0x00,  // B0D4....
                        /* 1F68 */  0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1F70 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00,  // ........
                        /* 1F78 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x4C, 0x34,  // .....PL4
                        /* 1F80 */  0x50, 0x6F, 0x77, 0x65, 0x72, 0x4C, 0x69, 0x6D,  // PowerLim
                        /* 1F88 */  0x69, 0x74, 0x00, 0x08, 0x00, 0x00, 0x00, 0x06,  // it......
                        /* 1F90 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31,  // .......1
                        /* 1F98 */  0x30, 0x30, 0x30, 0x30, 0x00, 0x04, 0x00, 0x00,  // 0000....
                        /* 1FA0 */  0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1FA8 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00,  // ........
                        /* 1FB0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0x72, 0x69,  // .....cri
                        /* 1FB8 */  0x74, 0x5F, 0x62, 0x61, 0x74, 0x74, 0x5F, 0x32,  // t_batt_2
                        /* 1FC0 */  0x34, 0x57, 0x5F, 0x62, 0x72, 0x69, 0x63, 0x6B,  // 4W_brick
                        /* 1FC8 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,  // ........
                        /* 1FD0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53,  // .....\_S
                        /* 1FD8 */  0x42, 0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30, 0x2E,  // B_.PCI0.
                        /* 1FE0 */  0x42, 0x30, 0x44, 0x34, 0x00, 0x04, 0x00, 0x00,  // B0D4....
                        /* 1FE8 */  0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 1FF0 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00,  // ........
                        /* 1FF8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x53, 0x79,  // .....PSy
                        /* 2000 */  0x73, 0x50, 0x4C, 0x31, 0x4C, 0x69, 0x6D, 0x69,  // sPL1Limi
                        /* 2008 */  0x74, 0x00, 0x08, 0x00, 0x00, 0x00, 0x06, 0x00,  // t.......
                        /* 2010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x31,  // ......21
                        /* 2018 */  0x35, 0x30, 0x30, 0x00, 0x04, 0x00, 0x00, 0x00,  // 500.....
                        /* 2020 */  0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2028 */  0x08, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00,  // ........
                        /* 2030 */  0x00, 0x00, 0x00, 0x00, 0x63, 0x72, 0x69, 0x74,  // ....crit
                        /* 2038 */  0x5F, 0x62, 0x61, 0x74, 0x74, 0x5F, 0x32, 0x34,  // _batt_24
                        /* 2040 */  0x57, 0x5F, 0x62, 0x72, 0x69, 0x63, 0x6B, 0x00,  // W_brick.
                        /* 2048 */  0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,  // ........
                        /* 2050 */  0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42,  // ....\_SB
                        /* 2058 */  0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30, 0x2E, 0x42,  // _.PCI0.B
                        /* 2060 */  0x30, 0x44, 0x34, 0x00, 0x04, 0x00, 0x00, 0x00,  // 0D4.....
                        /* 2068 */  0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2070 */  0x08, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00,  // ........
                        /* 2078 */  0x00, 0x00, 0x00, 0x00, 0x50, 0x53, 0x79, 0x73,  // ....PSys
                        /* 2080 */  0x50, 0x4C, 0x32, 0x4C, 0x69, 0x6D, 0x69, 0x74,  // PL2Limit
                        /* 2088 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00,  // ........
                        /* 2090 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x30, 0x30,  // .....300
                        /* 2098 */  0x30, 0x30, 0x00, 0x04, 0x00, 0x00, 0x00, 0x06,  // 00......
                        /* 20A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08,  // ........
                        /* 20A8 */  0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 20B0 */  0x00, 0x00, 0x00, 0x63, 0x72, 0x69, 0x74, 0x5F,  // ...crit_
                        /* 20B8 */  0x62, 0x61, 0x74, 0x74, 0x5F, 0x32, 0x34, 0x57,  // batt_24W
                        /* 20C0 */  0x5F, 0x62, 0x72, 0x69, 0x63, 0x6B, 0x00, 0x08,  // _brick..
                        /* 20C8 */  0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 20D0 */  0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F,  // ...\_SB_
                        /* 20D8 */  0x2E, 0x50, 0x43, 0x49, 0x30, 0x2E, 0x42, 0x30,  // .PCI0.B0
                        /* 20E0 */  0x44, 0x34, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09,  // D4......
                        /* 20E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08,  // ........
                        /* 20F0 */  0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 20F8 */  0x00, 0x00, 0x00, 0x50, 0x4C, 0x34, 0x50, 0x6F,  // ...PL4Po
                        /* 2100 */  0x77, 0x65, 0x72, 0x4C, 0x69, 0x6D, 0x69, 0x74,  // werLimit
                        /* 2108 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00,  // ........
                        /* 2110 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0x31, 0x30,  // .....110
                        /* 2118 */  0x30, 0x30, 0x00, 0x04, 0x00, 0x00, 0x00, 0x07,  // 00......
                        /* 2120 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08,  // ........
                        /* 2128 */  0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2130 */  0x00, 0x00, 0x00, 0x63, 0x72, 0x69, 0x74, 0x5F,  // ...crit_
                        /* 2138 */  0x62, 0x61, 0x74, 0x74, 0x5F, 0x33, 0x30, 0x57,  // batt_30W
                        /* 2140 */  0x5F, 0x62, 0x72, 0x69, 0x63, 0x6B, 0x00, 0x08,  // _brick..
                        /* 2148 */  0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2150 */  0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F,  // ...\_SB_
                        /* 2158 */  0x2E, 0x50, 0x43, 0x49, 0x30, 0x2E, 0x42, 0x30,  // .PCI0.B0
                        /* 2160 */  0x44, 0x34, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09,  // D4......
                        /* 2168 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08,  // ........
                        /* 2170 */  0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2178 */  0x00, 0x00, 0x00, 0x50, 0x53, 0x79, 0x73, 0x50,  // ...PSysP
                        /* 2180 */  0x4C, 0x31, 0x4C, 0x69, 0x6D, 0x69, 0x74, 0x00,  // L1Limit.
                        /* 2188 */  0x08, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,  // ........
                        /* 2190 */  0x00, 0x00, 0x00, 0x00, 0x32, 0x37, 0x30, 0x30,  // ....2700
                        /* 2198 */  0x30, 0x00, 0x04, 0x00, 0x00, 0x00, 0x07, 0x00,  // 0.......
                        /* 21A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 21A8 */  0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 21B0 */  0x00, 0x00, 0x63, 0x72, 0x69, 0x74, 0x5F, 0x62,  // ..crit_b
                        /* 21B8 */  0x61, 0x74, 0x74, 0x5F, 0x33, 0x30, 0x57, 0x5F,  // att_30W_
                        /* 21C0 */  0x62, 0x72, 0x69, 0x63, 0x6B, 0x00, 0x08, 0x00,  // brick...
                        /* 21C8 */  0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 21D0 */  0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E,  // ..\_SB_.
                        /* 21D8 */  0x50, 0x43, 0x49, 0x30, 0x2E, 0x42, 0x30, 0x44,  // PCI0.B0D
                        /* 21E0 */  0x34, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00,  // 4.......
                        /* 21E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 21F0 */  0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 21F8 */  0x00, 0x00, 0x50, 0x53, 0x79, 0x73, 0x50, 0x4C,  // ..PSysPL
                        /* 2200 */  0x32, 0x4C, 0x69, 0x6D, 0x69, 0x74, 0x00, 0x08,  // 2Limit..
                        /* 2208 */  0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2210 */  0x00, 0x00, 0x00, 0x32, 0x35, 0x30, 0x30, 0x30,  // ...25000
                        /* 2218 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00,  // ........
                        /* 2220 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,  // ........
                        /* 2228 */  0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2230 */  0x00, 0x63, 0x72, 0x69, 0x74, 0x5F, 0x62, 0x61,  // .crit_ba
                        /* 2238 */  0x74, 0x74, 0x5F, 0x33, 0x30, 0x57, 0x5F, 0x62,  // tt_30W_b
                        /* 2240 */  0x72, 0x69, 0x63, 0x6B, 0x00, 0x08, 0x00, 0x00,  // rick....
                        /* 2248 */  0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2250 */  0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x50,  // .\_SB_.P
                        /* 2258 */  0x43, 0x49, 0x30, 0x2E, 0x42, 0x30, 0x44, 0x34,  // CI0.B0D4
                        /* 2260 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00,  // ........
                        /* 2268 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,  // ........
                        /* 2270 */  0x00, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2278 */  0x00, 0x50, 0x4C, 0x34, 0x50, 0x6F, 0x77, 0x65,  // .PL4Powe
                        /* 2280 */  0x72, 0x4C, 0x69, 0x6D, 0x69, 0x74, 0x00, 0x08,  // rLimit..
                        /* 2288 */  0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2290 */  0x00, 0x00, 0x00, 0x31, 0x37, 0x30, 0x30, 0x30,  // ...17000
                        /* 2298 */  0x00, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,  // ........
                        /* 22A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,  // ........
                        /* 22A8 */  0x00, 0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 22B0 */  0x00, 0x6C, 0x6F, 0x77, 0x5F, 0x62, 0x61, 0x74,  // .low_bat
                        /* 22B8 */  0x74, 0x5F, 0x75, 0x6E, 0x6B, 0x6E, 0x6F, 0x77,  // t_unknow
                        /* 22C0 */  0x6E, 0x5F, 0x62, 0x72, 0x69, 0x63, 0x6B, 0x00,  // n_brick.
                        /* 22C8 */  0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,  // ........
                        /* 22D0 */  0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42,  // ....\_SB
                        /* 22D8 */  0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30, 0x2E, 0x42,  // _.PCI0.B
                        /* 22E0 */  0x30, 0x44, 0x34, 0x00, 0x04, 0x00, 0x00, 0x00,  // 0D4.....
                        /* 22E8 */  0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 22F0 */  0x08, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00,  // ........
                        /* 22F8 */  0x00, 0x00, 0x00, 0x00, 0x50, 0x53, 0x79, 0x73,  // ....PSys
                        /* 2300 */  0x50, 0x4C, 0x31, 0x4C, 0x69, 0x6D, 0x69, 0x74,  // PL1Limit
                        /* 2308 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00,  // ........
                        /* 2310 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x31, 0x35,  // .....215
                        /* 2318 */  0x30, 0x30, 0x00, 0x04, 0x00, 0x00, 0x00, 0x08,  // 00......
                        /* 2320 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08,  // ........
                        /* 2328 */  0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2330 */  0x00, 0x00, 0x00, 0x6C, 0x6F, 0x77, 0x5F, 0x62,  // ...low_b
                        /* 2338 */  0x61, 0x74, 0x74, 0x5F, 0x75, 0x6E, 0x6B, 0x6E,  // att_unkn
                        /* 2340 */  0x6F, 0x77, 0x6E, 0x5F, 0x62, 0x72, 0x69, 0x63,  // own_bric
                        /* 2348 */  0x6B, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00,  // k.......
                        /* 2350 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F,  // ......\_
                        /* 2358 */  0x53, 0x42, 0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30,  // SB_.PCI0
                        /* 2360 */  0x2E, 0x42, 0x30, 0x44, 0x34, 0x00, 0x04, 0x00,  // .B0D4...
                        /* 2368 */  0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2370 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x0D, 0x00,  // ........
                        /* 2378 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x53,  // ......PS
                        /* 2380 */  0x79, 0x73, 0x50, 0x4C, 0x32, 0x4C, 0x69, 0x6D,  // ysPL2Lim
                        /* 2388 */  0x69, 0x74, 0x00, 0x08, 0x00, 0x00, 0x00, 0x06,  // it......
                        /* 2390 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33,  // .......3
                        /* 2398 */  0x30, 0x30, 0x30, 0x30, 0x00, 0x04, 0x00, 0x00,  // 0000....
                        /* 23A0 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 23A8 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00,  // ........
                        /* 23B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x6C, 0x6F, 0x77,  // .....low
                        /* 23B8 */  0x5F, 0x62, 0x61, 0x74, 0x74, 0x5F, 0x75, 0x6E,  // _batt_un
                        /* 23C0 */  0x6B, 0x6E, 0x6F, 0x77, 0x6E, 0x5F, 0x62, 0x72,  // known_br
                        /* 23C8 */  0x69, 0x63, 0x6B, 0x00, 0x08, 0x00, 0x00, 0x00,  // ick.....
                        /* 23D0 */  0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 23D8 */  0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x50, 0x43,  // \_SB_.PC
                        /* 23E0 */  0x49, 0x30, 0x2E, 0x42, 0x30, 0x44, 0x34, 0x00,  // I0.B0D4.
                        /* 23E8 */  0x04, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00,  // ........
                        /* 23F0 */  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,  // ........
                        /* 23F8 */  0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2400 */  0x50, 0x4C, 0x34, 0x50, 0x6F, 0x77, 0x65, 0x72,  // PL4Power
                        /* 2408 */  0x4C, 0x69, 0x6D, 0x69, 0x74, 0x00, 0x08, 0x00,  // Limit...
                        /* 2410 */  0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2418 */  0x00, 0x00, 0x31, 0x31, 0x30, 0x30, 0x30, 0x00,  // ..11000.
                        /* 2420 */  0x04, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00,  // ........
                        /* 2428 */  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,  // ........
                        /* 2430 */  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2438 */  0x6E, 0x6F, 0x5F, 0x62, 0x61, 0x74, 0x74, 0x00,  // no_batt.
                        /* 2440 */  0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,  // ........
                        /* 2448 */  0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42,  // ....\_SB
                        /* 2450 */  0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30, 0x2E, 0x42,  // _.PCI0.B
                        /* 2458 */  0x30, 0x44, 0x34, 0x00, 0x04, 0x00, 0x00, 0x00,  // 0D4.....
                        /* 2460 */  0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2468 */  0x08, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00,  // ........
                        /* 2470 */  0x00, 0x00, 0x00, 0x00, 0x50, 0x53, 0x79, 0x73,  // ....PSys
                        /* 2478 */  0x50, 0x4C, 0x31, 0x4C, 0x69, 0x6D, 0x69, 0x74,  // PL1Limit
                        /* 2480 */  0x00, 0x08, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00,  // ........
                        /* 2488 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x31, 0x35,  // .....215
                        /* 2490 */  0x30, 0x30, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09,  // 00......
                        /* 2498 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08,  // ........
                        /* 24A0 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 24A8 */  0x00, 0x00, 0x00, 0x6E, 0x6F, 0x5F, 0x62, 0x61,  // ...no_ba
                        /* 24B0 */  0x74, 0x74, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10,  // tt......
                        /* 24B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C,  // .......\
                        /* 24C0 */  0x5F, 0x53, 0x42, 0x5F, 0x2E, 0x50, 0x43, 0x49,  // _SB_.PCI
                        /* 24C8 */  0x30, 0x2E, 0x42, 0x30, 0x44, 0x34, 0x00, 0x04,  // 0.B0D4..
                        /* 24D0 */  0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 24D8 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x0D,  // ........
                        /* 24E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50,  // .......P
                        /* 24E8 */  0x53, 0x79, 0x73, 0x50, 0x4C, 0x32, 0x4C, 0x69,  // SysPL2Li
                        /* 24F0 */  0x6D, 0x69, 0x74, 0x00, 0x08, 0x00, 0x00, 0x00,  // mit.....
                        /* 24F8 */  0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2500 */  0x33, 0x30, 0x30, 0x30, 0x30, 0x00, 0x04, 0x00,  // 30000...
                        /* 2508 */  0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2510 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 2518 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6E, 0x6F,  // ......no
                        /* 2520 */  0x5F, 0x62, 0x61, 0x74, 0x74, 0x00, 0x08, 0x00,  // _batt...
                        /* 2528 */  0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2530 */  0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E,  // ..\_SB_.
                        /* 2538 */  0x50, 0x43, 0x49, 0x30, 0x2E, 0x42, 0x30, 0x44,  // PCI0.B0D
                        /* 2540 */  0x34, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00,  // 4.......
                        /* 2548 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 2550 */  0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2558 */  0x00, 0x00, 0x50, 0x4C, 0x34, 0x50, 0x6F, 0x77,  // ..PL4Pow
                        /* 2560 */  0x65, 0x72, 0x4C, 0x69, 0x6D, 0x69, 0x74, 0x00,  // erLimit.
                        /* 2568 */  0x08, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,  // ........
                        /* 2570 */  0x00, 0x00, 0x00, 0x00, 0x31, 0x31, 0x30, 0x30,  // ....1100
                        /* 2578 */  0x30, 0x00, 0x01, 0x00, 0x00, 0x00, 0x14, 0x00,  // 0.......
                        /* 2580 */  0x00, 0x00, 0x2F, 0x73, 0x68, 0x61, 0x72, 0x65,  // ../share
                        /* 2588 */  0x64, 0x2F, 0x65, 0x78, 0x70, 0x6F, 0x72, 0x74,  // d/export
                        /* 2590 */  0x2F, 0x70, 0x62, 0x63, 0x74, 0x00, 0x07, 0x00,  // /pbct...
                        /* 2598 */  0x00, 0x00, 0xCC, 0x12, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 25A0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 25A8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x03, 0x00,  // ........
                        /* 25B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 25B8 */  0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 25C0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00,  // ........
                        /* 25C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 25D0 */  0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 25D8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 25E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 25E8 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 25F0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 25F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2600 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2608 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2610 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2618 */  0x00, 0x00, 0x1B, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2620 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00,  // ........
                        /* 2628 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2630 */  0x00, 0x00, 0x48, 0x71, 0x00, 0x00, 0x00, 0x00,  // ..Hq....
                        /* 2638 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2640 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2648 */  0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2650 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00,  // ........
                        /* 2658 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2660 */  0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2668 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2670 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2678 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2680 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2688 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2690 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2698 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 26A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 26A8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 26B0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 26B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 26C0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 26C8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 26D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 26D8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 26E0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 26E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 26F0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 26F8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2700 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2708 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2710 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2718 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2720 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2728 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2730 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2738 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2740 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2748 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2750 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2758 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2760 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2768 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2770 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2778 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2780 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2788 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00,  // ........
                        /* 2790 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2798 */  0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 27A0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00,  // ........
                        /* 27A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 27B0 */  0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 27B8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 27C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 27C8 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 27D0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 27D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 27E0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 27E8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 27F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 27F8 */  0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2800 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00,  // ........
                        /* 2808 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2810 */  0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2818 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2820 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2828 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2830 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2838 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2840 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2848 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2850 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2858 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2860 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2868 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2870 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2878 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2880 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2888 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2890 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2898 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 28A0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 28A8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 28B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 28B8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 28C0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 28C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 28D0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 28D8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 28E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 28E8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 28F0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 28F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2900 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2908 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2910 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2918 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2920 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2928 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2930 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2938 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2940 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2948 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2950 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2958 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2960 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2968 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2970 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2978 */  0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2980 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00,  // ........
                        /* 2988 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2990 */  0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2998 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 29A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 29A8 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 29B0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 29B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 29C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 29C8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 29D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 29D8 */  0x00, 0x00, 0x1B, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 29E0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x03, 0x00,  // ........
                        /* 29E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 29F0 */  0x00, 0x00, 0x30, 0x75, 0x00, 0x00, 0x00, 0x00,  // ..0u....
                        /* 29F8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2A00 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2A08 */  0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2A10 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00,  // ........
                        /* 2A18 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2A20 */  0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2A28 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2A30 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2A38 */  0x00, 0x00, 0x1B, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2A40 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00,  // ........
                        /* 2A48 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2A50 */  0x00, 0x00, 0x78, 0xE6, 0x00, 0x00, 0x00, 0x00,  // ..x.....
                        /* 2A58 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2A60 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2A68 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2A70 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2A78 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2A80 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2A88 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2A90 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2A98 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2AA0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2AA8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2AB0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2AB8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2AC0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2AC8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2AD0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2AD8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2AE0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2AE8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2AF0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2AF8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2B00 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2B08 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2B10 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2B18 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2B20 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2B28 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2B30 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2B38 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2B40 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2B48 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2B50 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2B58 */  0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2B60 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00,  // ........
                        /* 2B68 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2B70 */  0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2B78 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2B80 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2B88 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2B90 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2B98 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2BA0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2BA8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2BB0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2BB8 */  0x00, 0x00, 0x1B, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2BC0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x03, 0x00,  // ........
                        /* 2BC8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2BD0 */  0x00, 0x00, 0x60, 0xEA, 0x00, 0x00, 0x00, 0x00,  // ..`.....
                        /* 2BD8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2BE0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2BE8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2BF0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2BF8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2C00 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2C08 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2C10 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2C18 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2C20 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2C28 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2C30 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2C38 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2C40 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2C48 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2C50 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2C58 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2C60 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2C68 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2C70 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2C78 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2C80 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2C88 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2C90 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2C98 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2CA0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2CA8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2CB0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2CB8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2CC0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2CC8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2CD0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2CD8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2CE0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2CE8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2CF0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2CF8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2D00 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2D08 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2D10 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2D18 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2D20 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2D28 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00,  // ........
                        /* 2D30 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2D38 */  0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2D40 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00,  // ........
                        /* 2D48 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2D50 */  0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2D58 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2D60 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2D68 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2D70 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2D78 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2D80 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2D88 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2D90 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2D98 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2DA0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2DA8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2DB0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2DB8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2DC0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2DC8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2DD0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2DD8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2DE0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2DE8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2DF0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2DF8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2E00 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2E08 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2E10 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2E18 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2E20 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2E28 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2E30 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2E38 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2E40 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2E48 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2E50 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2E58 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2E60 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2E68 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2E70 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2E78 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2E80 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2E88 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2E90 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2E98 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2EA0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2EA8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2EB0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2EB8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2EC0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2EC8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2ED0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2ED8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2EE0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2EE8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2EF0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2EF8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2F00 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2F08 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x07, 0x00,  // ........
                        /* 2F10 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2F18 */  0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2F20 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00,  // ........
                        /* 2F28 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2F30 */  0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2F38 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2F40 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2F48 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2F50 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2F58 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2F60 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2F68 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2F70 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2F78 */  0x00, 0x00, 0x1B, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2F80 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x03, 0x00,  // ........
                        /* 2F88 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2F90 */  0x00, 0x00, 0x30, 0x75, 0x00, 0x00, 0x00, 0x00,  // ..0u....
                        /* 2F98 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2FA0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2FA8 */  0x00, 0x00, 0x1B, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2FB0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00,  // ........
                        /* 2FB8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2FC0 */  0x00, 0x00, 0x78, 0xE6, 0x00, 0x00, 0x00, 0x00,  // ..x.....
                        /* 2FC8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2FD0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2FD8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2FE0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 2FE8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 2FF0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 2FF8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3008 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3010 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3020 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3028 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3030 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3038 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3040 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3050 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3058 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3068 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3070 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3078 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3080 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3088 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3090 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3098 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 30A0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 30A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 30B0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 30B8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 30C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 30C8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 30D0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 30D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 30E0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 30E8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x06, 0x00,  // ........
                        /* 30F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 30F8 */  0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3100 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00,  // ........
                        /* 3108 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3110 */  0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3118 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3120 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3128 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3130 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3138 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3140 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3148 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3150 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3158 */  0x00, 0x00, 0x1B, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3160 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00,  // ........
                        /* 3168 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3170 */  0x00, 0x00, 0x48, 0x71, 0x00, 0x00, 0x00, 0x00,  // ..Hq....
                        /* 3178 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3180 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3188 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3190 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3198 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 31A0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 31A8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 31B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 31B8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 31C0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 31C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 31D0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 31D8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 31E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 31E8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 31F0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 31F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3200 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3208 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3210 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3218 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3220 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3228 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3230 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3238 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3240 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3248 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3250 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3258 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3260 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3268 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3270 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3278 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3280 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3288 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3290 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3298 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 32A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 32A8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 32B0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 32B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 32C0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 32C8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 32D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 32D8 */  0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 32E0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00,  // ........
                        /* 32E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 32F0 */  0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 32F8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3300 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3308 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3310 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3318 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3320 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3328 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3330 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3338 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3340 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3348 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3350 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3358 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3360 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3368 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3370 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3378 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3380 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3388 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3390 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3398 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 33A0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 33A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 33B0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 33B8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 33C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 33C8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 33D0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 33D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 33E0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 33E8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 33F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 33F8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3400 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3408 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3410 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3418 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3420 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3428 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3430 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3438 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3440 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3448 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3450 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3458 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3460 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3468 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3470 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3478 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3480 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3488 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3490 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3498 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 34A0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 34A8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 34B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 34B8 */  0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 34C0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00,  // ........
                        /* 34C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 34D0 */  0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 34D8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 34E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 34E8 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 34F0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 34F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3500 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3508 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3510 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3518 */  0x00, 0x00, 0x1B, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3520 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3528 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3530 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3538 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3540 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3548 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3550 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3558 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3560 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3568 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3570 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3578 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3580 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3588 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3590 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3598 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 35A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 35A8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 35B0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 35B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 35C0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 35C8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 35D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 35D8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 35E0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 35E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 35F0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 35F8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3600 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3608 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3610 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3618 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3620 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3628 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3630 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3638 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3640 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3648 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3650 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3658 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3660 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3668 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3670 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3678 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3680 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3688 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00,  // ........
                        /* 3690 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3698 */  0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00,  // ..".....
                        /* 36A0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 36A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 36B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 36B8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 36C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 36C8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 36D0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 36D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 36E0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 36E8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 36F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 36F8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3700 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3708 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3710 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3718 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3720 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3728 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3730 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3738 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3740 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3748 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3750 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3758 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3760 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3768 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3770 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3778 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3780 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3788 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3790 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3798 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 37A0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 37A8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 37B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 37B8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 37C0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 37C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 37D0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 37D8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 37E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 37E8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 37F0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 37F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3800 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3808 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3810 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3818 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3820 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3828 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3830 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3838 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3840 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3848 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3850 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3858 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3860 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3868 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x14, 0x00,  // ........
                        /* 3870 */  0x00, 0x00, 0x2F, 0x73, 0x68, 0x61, 0x72, 0x65,  // ../share
                        /* 3878 */  0x64, 0x2F, 0x65, 0x78, 0x70, 0x6F, 0x72, 0x74,  // d/export
                        /* 3880 */  0x2F, 0x70, 0x69, 0x64, 0x61, 0x00, 0x07, 0x00,  // /pida...
                        /* 3888 */  0x00, 0x00, 0xB0, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3890 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3898 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                        /* 38A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F,  // ......\_
                        /* 38A8 */  0x53, 0x42, 0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30,  // SB_.PCI0
                        /* 38B0 */  0x2E, 0x42, 0x30, 0x44, 0x34, 0x00, 0x04, 0x00,  // .B0D4...
                        /* 38B8 */  0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 38C0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 38C8 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 38D0 */  0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 38D8 */  0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E,  // ..\_SB_.
                        /* 38E0 */  0x5F, 0x53, 0x41, 0x4E, 0x2E, 0x47, 0x45, 0x4E,  // _SAN.GEN
                        /* 38E8 */  0x34, 0x00, 0x04, 0x00, 0x00, 0x00, 0x8E, 0x0F,  // 4.......
                        /* 38F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 38F8 */  0x00, 0x00, 0x8C, 0x0C, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3900 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xAF, 0x0A,  // ........
                        /* 3908 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3910 */  0x00, 0x00, 0x2C, 0x01, 0x00, 0x00, 0x00, 0x00,  // ..,.....
                        /* 3918 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x14, 0x05,  // ........
                        /* 3920 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3928 */  0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3930 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3938 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3940 */  0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x2F, 0x73,  // ....../s
                        /* 3948 */  0x68, 0x61, 0x72, 0x65, 0x64, 0x2F, 0x74, 0x61,  // hared/ta
                        /* 3950 */  0x62, 0x6C, 0x65, 0x73, 0x2F, 0x70, 0x69, 0x64,  // bles/pid
                        /* 3958 */  0x61, 0x2F, 0x34, 0x35, 0x63, 0x00, 0x07, 0x00,  // a/45c...
                        /* 3960 */  0x00, 0x00, 0xB0, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3968 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3970 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                        /* 3978 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F,  // ......\_
                        /* 3980 */  0x53, 0x42, 0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30,  // SB_.PCI0
                        /* 3988 */  0x2E, 0x42, 0x30, 0x44, 0x34, 0x00, 0x04, 0x00,  // .B0D4...
                        /* 3990 */  0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3998 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 39A0 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 39A8 */  0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 39B0 */  0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E,  // ..\_SB_.
                        /* 39B8 */  0x5F, 0x53, 0x41, 0x4E, 0x2E, 0x47, 0x45, 0x4E,  // _SAN.GEN
                        /* 39C0 */  0x34, 0x00, 0x04, 0x00, 0x00, 0x00, 0x8E, 0x0F,  // 4.......
                        /* 39C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 39D0 */  0x00, 0x00, 0x6E, 0x0C, 0x00, 0x00, 0x00, 0x00,  // ..n.....
                        /* 39D8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xAF, 0x0A,  // ........
                        /* 39E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 39E8 */  0x00, 0x00, 0x2C, 0x01, 0x00, 0x00, 0x00, 0x00,  // ..,.....
                        /* 39F0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x14, 0x05,  // ........
                        /* 39F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3A00 */  0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3A08 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3A10 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3A18 */  0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x2F, 0x73,  // ....../s
                        /* 3A20 */  0x68, 0x61, 0x72, 0x65, 0x64, 0x2F, 0x74, 0x61,  // hared/ta
                        /* 3A28 */  0x62, 0x6C, 0x65, 0x73, 0x2F, 0x70, 0x69, 0x64,  // bles/pid
                        /* 3A30 */  0x61, 0x2F, 0x34, 0x36, 0x63, 0x00, 0x07, 0x00,  // a/46c...
                        /* 3A38 */  0x00, 0x00, 0xB0, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3A40 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3A48 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                        /* 3A50 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F,  // ......\_
                        /* 3A58 */  0x53, 0x42, 0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30,  // SB_.PCI0
                        /* 3A60 */  0x2E, 0x42, 0x30, 0x44, 0x34, 0x00, 0x04, 0x00,  // .B0D4...
                        /* 3A68 */  0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3A70 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3A78 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 3A80 */  0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3A88 */  0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E,  // ..\_SB_.
                        /* 3A90 */  0x5F, 0x53, 0x41, 0x4E, 0x2E, 0x47, 0x45, 0x4E,  // _SAN.GEN
                        /* 3A98 */  0x34, 0x00, 0x04, 0x00, 0x00, 0x00, 0x8E, 0x0F,  // 4.......
                        /* 3AA0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3AA8 */  0x00, 0x00, 0x78, 0x0C, 0x00, 0x00, 0x00, 0x00,  // ..x.....
                        /* 3AB0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xAF, 0x0A,  // ........
                        /* 3AB8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3AC0 */  0x00, 0x00, 0x2C, 0x01, 0x00, 0x00, 0x00, 0x00,  // ..,.....
                        /* 3AC8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x14, 0x05,  // ........
                        /* 3AD0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3AD8 */  0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3AE0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3AE8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3AF0 */  0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x2F, 0x73,  // ....../s
                        /* 3AF8 */  0x68, 0x61, 0x72, 0x65, 0x64, 0x2F, 0x74, 0x61,  // hared/ta
                        /* 3B00 */  0x62, 0x6C, 0x65, 0x73, 0x2F, 0x70, 0x69, 0x64,  // bles/pid
                        /* 3B08 */  0x61, 0x2F, 0x34, 0x37, 0x63, 0x00, 0x07, 0x00,  // a/47c...
                        /* 3B10 */  0x00, 0x00, 0xB0, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3B18 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3B20 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                        /* 3B28 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F,  // ......\_
                        /* 3B30 */  0x53, 0x42, 0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30,  // SB_.PCI0
                        /* 3B38 */  0x2E, 0x42, 0x30, 0x44, 0x34, 0x00, 0x04, 0x00,  // .B0D4...
                        /* 3B40 */  0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3B48 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3B50 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 3B58 */  0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3B60 */  0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E,  // ..\_SB_.
                        /* 3B68 */  0x5F, 0x53, 0x41, 0x4E, 0x2E, 0x47, 0x45, 0x4E,  // _SAN.GEN
                        /* 3B70 */  0x34, 0x00, 0x04, 0x00, 0x00, 0x00, 0x8E, 0x0F,  // 4.......
                        /* 3B78 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3B80 */  0x00, 0x00, 0x82, 0x0C, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3B88 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xAF, 0x0A,  // ........
                        /* 3B90 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3B98 */  0x00, 0x00, 0x2C, 0x01, 0x00, 0x00, 0x00, 0x00,  // ..,.....
                        /* 3BA0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x14, 0x05,  // ........
                        /* 3BA8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3BB0 */  0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3BB8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3BC0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3BC8 */  0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x2F, 0x73,  // ....../s
                        /* 3BD0 */  0x68, 0x61, 0x72, 0x65, 0x64, 0x2F, 0x74, 0x61,  // hared/ta
                        /* 3BD8 */  0x62, 0x6C, 0x65, 0x73, 0x2F, 0x70, 0x69, 0x64,  // bles/pid
                        /* 3BE0 */  0x61, 0x2F, 0x34, 0x38, 0x63, 0x00, 0x07, 0x00,  // a/48c...
                        /* 3BE8 */  0x00, 0x00, 0xB0, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3BF0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3BF8 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                        /* 3C00 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F,  // ......\_
                        /* 3C08 */  0x53, 0x42, 0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30,  // SB_.PCI0
                        /* 3C10 */  0x2E, 0x42, 0x30, 0x44, 0x34, 0x00, 0x04, 0x00,  // .B0D4...
                        /* 3C18 */  0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3C20 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3C28 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 3C30 */  0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3C38 */  0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E,  // ..\_SB_.
                        /* 3C40 */  0x5F, 0x53, 0x41, 0x4E, 0x2E, 0x47, 0x45, 0x4E,  // _SAN.GEN
                        /* 3C48 */  0x34, 0x00, 0x04, 0x00, 0x00, 0x00, 0x8E, 0x0F,  // 4.......
                        /* 3C50 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3C58 */  0x00, 0x00, 0x8C, 0x0C, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3C60 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xAF, 0x0A,  // ........
                        /* 3C68 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3C70 */  0x00, 0x00, 0x2C, 0x01, 0x00, 0x00, 0x00, 0x00,  // ..,.....
                        /* 3C78 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x14, 0x05,  // ........
                        /* 3C80 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3C88 */  0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3C90 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3C98 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3CA0 */  0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x2F, 0x73,  // ....../s
                        /* 3CA8 */  0x68, 0x61, 0x72, 0x65, 0x64, 0x2F, 0x74, 0x61,  // hared/ta
                        /* 3CB0 */  0x62, 0x6C, 0x65, 0x73, 0x2F, 0x70, 0x73, 0x76,  // bles/psv
                        /* 3CB8 */  0x74, 0x2F, 0x34, 0x35, 0x63, 0x00, 0x07, 0x00,  // t/45c...
                        /* 3CC0 */  0x00, 0x00, 0xCC, 0x02, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3CC8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3CD0 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                        /* 3CD8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F,  // ......\_
                        /* 3CE0 */  0x53, 0x42, 0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30,  // SB_.PCI0
                        /* 3CE8 */  0x2E, 0x42, 0x30, 0x44, 0x34, 0x00, 0x08, 0x00,  // .B0D4...
                        /* 3CF0 */  0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3CF8 */  0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E,  // ..\_SB_.
                        /* 3D00 */  0x5F, 0x53, 0x41, 0x4E, 0x2E, 0x47, 0x45, 0x4E,  // _SAN.GEN
                        /* 3D08 */  0x34, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // 4.......
                        /* 3D10 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3D18 */  0x00, 0x00, 0xC8, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3D20 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x5A, 0x0C,  // ......Z.
                        /* 3D28 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3D30 */  0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3D38 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3D40 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3D48 */  0x00, 0x00, 0x58, 0x1B, 0x00, 0x00, 0x00, 0x00,  // ..X.....
                        /* 3D50 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x7D, 0x00,  // ......}.
                        /* 3D58 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3D60 */  0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3D68 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x64, 0x00,  // ......d.
                        /* 3D70 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3D78 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3D80 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                        /* 3D88 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F,  // ......\_
                        /* 3D90 */  0x53, 0x42, 0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30,  // SB_.PCI0
                        /* 3D98 */  0x2E, 0x42, 0x30, 0x44, 0x34, 0x00, 0x08, 0x00,  // .B0D4...
                        /* 3DA0 */  0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3DA8 */  0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E,  // ..\_SB_.
                        /* 3DB0 */  0x5F, 0x53, 0x41, 0x4E, 0x2E, 0x47, 0x45, 0x4E,  // _SAN.GEN
                        /* 3DB8 */  0x34, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // 4.......
                        /* 3DC0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3DC8 */  0x00, 0x00, 0xC8, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3DD0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x76, 0x0C,  // ......v.
                        /* 3DD8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3DE0 */  0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3DE8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3DF0 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3DF8 */  0x00, 0x00, 0x58, 0x1B, 0x00, 0x00, 0x00, 0x00,  // ..X.....
                        /* 3E00 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x7D, 0x00,  // ......}.
                        /* 3E08 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3E10 */  0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3E18 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x64, 0x00,  // ......d.
                        /* 3E20 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3E28 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3E30 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                        /* 3E38 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F,  // ......\_
                        /* 3E40 */  0x53, 0x42, 0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30,  // SB_.PCI0
                        /* 3E48 */  0x2E, 0x42, 0x30, 0x44, 0x34, 0x00, 0x08, 0x00,  // .B0D4...
                        /* 3E50 */  0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3E58 */  0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E,  // ..\_SB_.
                        /* 3E60 */  0x5F, 0x53, 0x41, 0x4E, 0x2E, 0x47, 0x45, 0x4E,  // _SAN.GEN
                        /* 3E68 */  0x34, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // 4.......
                        /* 3E70 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3E78 */  0x00, 0x00, 0xC8, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3E80 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x78, 0x0C,  // ......x.
                        /* 3E88 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3E90 */  0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3E98 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3EA0 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3EA8 */  0x00, 0x00, 0x70, 0x17, 0x00, 0x00, 0x00, 0x00,  // ..p.....
                        /* 3EB0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x7D, 0x00,  // ......}.
                        /* 3EB8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3EC0 */  0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3EC8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x64, 0x00,  // ......d.
                        /* 3ED0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3ED8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3EE0 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                        /* 3EE8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F,  // ......\_
                        /* 3EF0 */  0x53, 0x42, 0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30,  // SB_.PCI0
                        /* 3EF8 */  0x2E, 0x42, 0x30, 0x44, 0x34, 0x00, 0x08, 0x00,  // .B0D4...
                        /* 3F00 */  0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3F08 */  0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E,  // ..\_SB_.
                        /* 3F10 */  0x5F, 0x53, 0x41, 0x4E, 0x2E, 0x47, 0x45, 0x4E,  // _SAN.GEN
                        /* 3F18 */  0x34, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // 4.......
                        /* 3F20 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3F28 */  0x00, 0x00, 0xC8, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3F30 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x30, 0x0E,  // ......0.
                        /* 3F38 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3F40 */  0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3F48 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3F50 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3F58 */  0x00, 0x00, 0x70, 0x17, 0x00, 0x00, 0x00, 0x00,  // ..p.....
                        /* 3F60 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x7D, 0x00,  // ......}.
                        /* 3F68 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3F70 */  0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3F78 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x64, 0x00,  // ......d.
                        /* 3F80 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 3F88 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3F90 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x18, 0x00,  // ........
                        /* 3F98 */  0x00, 0x00, 0x2F, 0x73, 0x68, 0x61, 0x72, 0x65,  // ../share
                        /* 3FA0 */  0x64, 0x2F, 0x74, 0x61, 0x62, 0x6C, 0x65, 0x73,  // d/tables
                        /* 3FA8 */  0x2F, 0x70, 0x73, 0x76, 0x74, 0x2F, 0x34, 0x36,  // /psvt/46
                        /* 3FB0 */  0x63, 0x00, 0x07, 0x00, 0x00, 0x00, 0xCC, 0x02,  // c.......
                        /* 3FB8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 3FC0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 3FC8 */  0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 3FD0 */  0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E,  // ..\_SB_.
                        /* 3FD8 */  0x50, 0x43, 0x49, 0x30, 0x2E, 0x42, 0x30, 0x44,  // PCI0.B0D
                        /* 3FE0 */  0x34, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00,  // 4.......
                        /* 3FE8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F,  // ......\_
                        /* 3FF0 */  0x53, 0x42, 0x5F, 0x2E, 0x5F, 0x53, 0x41, 0x4E,  // SB_._SAN
                        /* 3FF8 */  0x2E, 0x47, 0x45, 0x4E, 0x34, 0x00, 0x04, 0x00,  // .GEN4...
                        /* 4000 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4008 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xC8, 0x00,  // ........
                        /* 4010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4018 */  0x00, 0x00, 0x64, 0x0C, 0x00, 0x00, 0x00, 0x00,  // ..d.....
                        /* 4020 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00,  // ........
                        /* 4028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4030 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                        /* 4038 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x40, 0x1F,  // ......@.
                        /* 4040 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4048 */  0x00, 0x00, 0x7D, 0x00, 0x00, 0x00, 0x00, 0x00,  // ..}.....
                        /* 4050 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0A, 0x00,  // ........
                        /* 4058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4060 */  0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00,  // ..d.....
                        /* 4068 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4070 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 4078 */  0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4080 */  0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E,  // ..\_SB_.
                        /* 4088 */  0x50, 0x43, 0x49, 0x30, 0x2E, 0x42, 0x30, 0x44,  // PCI0.B0D
                        /* 4090 */  0x34, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00,  // 4.......
                        /* 4098 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F,  // ......\_
                        /* 40A0 */  0x53, 0x42, 0x5F, 0x2E, 0x5F, 0x53, 0x41, 0x4E,  // SB_._SAN
                        /* 40A8 */  0x2E, 0x47, 0x45, 0x4E, 0x34, 0x00, 0x04, 0x00,  // .GEN4...
                        /* 40B0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 40B8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xC8, 0x00,  // ........
                        /* 40C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 40C8 */  0x00, 0x00, 0x80, 0x0C, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 40D0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00,  // ........
                        /* 40D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 40E0 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                        /* 40E8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x40, 0x1F,  // ......@.
                        /* 40F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 40F8 */  0x00, 0x00, 0x7D, 0x00, 0x00, 0x00, 0x00, 0x00,  // ..}.....
                        /* 4100 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0A, 0x00,  // ........
                        /* 4108 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4110 */  0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00,  // ..d.....
                        /* 4118 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4120 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 4128 */  0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4130 */  0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E,  // ..\_SB_.
                        /* 4138 */  0x50, 0x43, 0x49, 0x30, 0x2E, 0x42, 0x30, 0x44,  // PCI0.B0D
                        /* 4140 */  0x34, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00,  // 4.......
                        /* 4148 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F,  // ......\_
                        /* 4150 */  0x53, 0x42, 0x5F, 0x2E, 0x5F, 0x53, 0x41, 0x4E,  // SB_._SAN
                        /* 4158 */  0x2E, 0x47, 0x45, 0x4E, 0x34, 0x00, 0x04, 0x00,  // .GEN4...
                        /* 4160 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4168 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xC8, 0x00,  // ........
                        /* 4170 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4178 */  0x00, 0x00, 0x82, 0x0C, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4180 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00,  // ........
                        /* 4188 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4190 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                        /* 4198 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x70, 0x17,  // ......p.
                        /* 41A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 41A8 */  0x00, 0x00, 0x7D, 0x00, 0x00, 0x00, 0x00, 0x00,  // ..}.....
                        /* 41B0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0A, 0x00,  // ........
                        /* 41B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 41C0 */  0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00,  // ..d.....
                        /* 41C8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 41D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 41D8 */  0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 41E0 */  0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E,  // ..\_SB_.
                        /* 41E8 */  0x50, 0x43, 0x49, 0x30, 0x2E, 0x42, 0x30, 0x44,  // PCI0.B0D
                        /* 41F0 */  0x34, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00,  // 4.......
                        /* 41F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F,  // ......\_
                        /* 4200 */  0x53, 0x42, 0x5F, 0x2E, 0x5F, 0x53, 0x41, 0x4E,  // SB_._SAN
                        /* 4208 */  0x2E, 0x47, 0x45, 0x4E, 0x34, 0x00, 0x04, 0x00,  // .GEN4...
                        /* 4210 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4218 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xC8, 0x00,  // ........
                        /* 4220 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4228 */  0x00, 0x00, 0x30, 0x0E, 0x00, 0x00, 0x00, 0x00,  // ..0.....
                        /* 4230 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00,  // ........
                        /* 4238 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4240 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                        /* 4248 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x70, 0x17,  // ......p.
                        /* 4250 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4258 */  0x00, 0x00, 0x7D, 0x00, 0x00, 0x00, 0x00, 0x00,  // ..}.....
                        /* 4260 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0A, 0x00,  // ........
                        /* 4268 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4270 */  0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00,  // ..d.....
                        /* 4278 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4280 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 4288 */  0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x2F, 0x73,  // ....../s
                        /* 4290 */  0x68, 0x61, 0x72, 0x65, 0x64, 0x2F, 0x74, 0x61,  // hared/ta
                        /* 4298 */  0x62, 0x6C, 0x65, 0x73, 0x2F, 0x70, 0x73, 0x76,  // bles/psv
                        /* 42A0 */  0x74, 0x2F, 0x34, 0x37, 0x63, 0x00, 0x07, 0x00,  // t/47c...
                        /* 42A8 */  0x00, 0x00, 0xCC, 0x02, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 42B0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 42B8 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                        /* 42C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F,  // ......\_
                        /* 42C8 */  0x53, 0x42, 0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30,  // SB_.PCI0
                        /* 42D0 */  0x2E, 0x42, 0x30, 0x44, 0x34, 0x00, 0x08, 0x00,  // .B0D4...
                        /* 42D8 */  0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 42E0 */  0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E,  // ..\_SB_.
                        /* 42E8 */  0x5F, 0x53, 0x41, 0x4E, 0x2E, 0x47, 0x45, 0x4E,  // _SAN.GEN
                        /* 42F0 */  0x34, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // 4.......
                        /* 42F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4300 */  0x00, 0x00, 0xC8, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4308 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6E, 0x0C,  // ......n.
                        /* 4310 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4318 */  0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4320 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4328 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4330 */  0x00, 0x00, 0x34, 0x21, 0x00, 0x00, 0x00, 0x00,  // ..4!....
                        /* 4338 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x7D, 0x00,  // ......}.
                        /* 4340 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4348 */  0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4350 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x64, 0x00,  // ......d.
                        /* 4358 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4360 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4368 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                        /* 4370 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F,  // ......\_
                        /* 4378 */  0x53, 0x42, 0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30,  // SB_.PCI0
                        /* 4380 */  0x2E, 0x42, 0x30, 0x44, 0x34, 0x00, 0x08, 0x00,  // .B0D4...
                        /* 4388 */  0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4390 */  0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E,  // ..\_SB_.
                        /* 4398 */  0x5F, 0x53, 0x41, 0x4E, 0x2E, 0x47, 0x45, 0x4E,  // _SAN.GEN
                        /* 43A0 */  0x34, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // 4.......
                        /* 43A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 43B0 */  0x00, 0x00, 0xC8, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 43B8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x8A, 0x0C,  // ........
                        /* 43C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 43C8 */  0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 43D0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 43D8 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 43E0 */  0x00, 0x00, 0x34, 0x21, 0x00, 0x00, 0x00, 0x00,  // ..4!....
                        /* 43E8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x7D, 0x00,  // ......}.
                        /* 43F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 43F8 */  0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4400 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x64, 0x00,  // ......d.
                        /* 4408 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4410 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4418 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                        /* 4420 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F,  // ......\_
                        /* 4428 */  0x53, 0x42, 0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30,  // SB_.PCI0
                        /* 4430 */  0x2E, 0x42, 0x30, 0x44, 0x34, 0x00, 0x08, 0x00,  // .B0D4...
                        /* 4438 */  0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4440 */  0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E,  // ..\_SB_.
                        /* 4448 */  0x5F, 0x53, 0x41, 0x4E, 0x2E, 0x47, 0x45, 0x4E,  // _SAN.GEN
                        /* 4450 */  0x34, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // 4.......
                        /* 4458 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4460 */  0x00, 0x00, 0xC8, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4468 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x8C, 0x0C,  // ........
                        /* 4470 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4478 */  0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4480 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4488 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4490 */  0x00, 0x00, 0x58, 0x1B, 0x00, 0x00, 0x00, 0x00,  // ..X.....
                        /* 4498 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x7D, 0x00,  // ......}.
                        /* 44A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 44A8 */  0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 44B0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x64, 0x00,  // ......d.
                        /* 44B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 44C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 44C8 */  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                        /* 44D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F,  // ......\_
                        /* 44D8 */  0x53, 0x42, 0x5F, 0x2E, 0x50, 0x43, 0x49, 0x30,  // SB_.PCI0
                        /* 44E0 */  0x2E, 0x42, 0x30, 0x44, 0x34, 0x00, 0x08, 0x00,  // .B0D4...
                        /* 44E8 */  0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 44F0 */  0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E,  // ..\_SB_.
                        /* 44F8 */  0x5F, 0x53, 0x41, 0x4E, 0x2E, 0x47, 0x45, 0x4E,  // _SAN.GEN
                        /* 4500 */  0x34, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // 4.......
                        /* 4508 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4510 */  0x00, 0x00, 0xC8, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4518 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x30, 0x0E,  // ......0.
                        /* 4520 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4528 */  0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4530 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4538 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4540 */  0x00, 0x00, 0x58, 0x1B, 0x00, 0x00, 0x00, 0x00,  // ..X.....
                        /* 4548 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x7D, 0x00,  // ......}.
                        /* 4550 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4558 */  0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4560 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x64, 0x00,  // ......d.
                        /* 4568 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4570 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4578 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x18, 0x00,  // ........
                        /* 4580 */  0x00, 0x00, 0x2F, 0x73, 0x68, 0x61, 0x72, 0x65,  // ../share
                        /* 4588 */  0x64, 0x2F, 0x74, 0x61, 0x62, 0x6C, 0x65, 0x73,  // d/tables
                        /* 4590 */  0x2F, 0x70, 0x73, 0x76, 0x74, 0x2F, 0x34, 0x38,  // /psvt/48
                        /* 4598 */  0x63, 0x00, 0x07, 0x00, 0x00, 0x00, 0x6C, 0x01,  // c.....l.
                        /* 45A0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
                        /* 45A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 45B0 */  0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 45B8 */  0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E,  // ..\_SB_.
                        /* 45C0 */  0x50, 0x43, 0x49, 0x30, 0x2E, 0x42, 0x30, 0x44,  // PCI0.B0D
                        /* 45C8 */  0x34, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00,  // 4.......
                        /* 45D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F,  // ......\_
                        /* 45D8 */  0x53, 0x42, 0x5F, 0x2E, 0x5F, 0x53, 0x41, 0x4E,  // SB_._SAN
                        /* 45E0 */  0x2E, 0x47, 0x45, 0x4E, 0x34, 0x00, 0x04, 0x00,  // .GEN4...
                        /* 45E8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 45F0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xC8, 0x00,  // ........
                        /* 45F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4600 */  0x00, 0x00, 0x78, 0x0C, 0x00, 0x00, 0x00, 0x00,  // ..x.....
                        /* 4608 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00,  // ........
                        /* 4610 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4618 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                        /* 4620 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x28, 0x23,  // ......(#
                        /* 4628 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4630 */  0x00, 0x00, 0x7D, 0x00, 0x00, 0x00, 0x00, 0x00,  // ..}.....
                        /* 4638 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0A, 0x00,  // ........
                        /* 4640 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 4648 */  0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00,  // ..d.....
                        /* 4650 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4658 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,  // ........
                        /* 4660 */  0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4668 */  0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x5F, 0x2E,  // ..\_SB_.
                        /* 4670 */  0x50, 0x43, 0x49, 0x30, 0x2E, 0x42, 0x30, 0x44,  // PCI0.B0D
                        /* 4678 */  0x34, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00,  // 4.......
                        /* 4680 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F,  // ......\_
                        /* 4688 */  0x53, 0x42, 0x5F, 0x2E, 0x5F, 0x53, 0x41, 0x4E,  // SB_._SAN
                        /* 4690 */  0x2E, 0x47, 0x45, 0x4E, 0x34, 0x00, 0x04, 0x00,  // .GEN4...
                        /* 4698 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 46A0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xC8, 0x00,  // ........
                        /* 46A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 46B0 */  0x00, 0x00, 0x30, 0x0E, 0x00, 0x00, 0x00, 0x00,  // ..0.....
                        /* 46B8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00,  // ........
                        /* 46C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 46C8 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // ........
                        /* 46D0 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x28, 0x23,  // ......(#
                        /* 46D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 46E0 */  0x00, 0x00, 0x7D, 0x00, 0x00, 0x00, 0x00, 0x00,  // ..}.....
                        /* 46E8 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0A, 0x00,  // ........
                        /* 46F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,  // ........
                        /* 46F8 */  0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00,  // ..d.....
                        /* 4700 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 4708 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00               // ......
                    }
                })
            }
        }
    }
}



SSDT6
-----
DefinitionBlock ("", "SSDT", 2, "PmRef", "Cpu0Ist", 0x00003000)
{
    External (_PR_.CFGD, FieldUnitObj)
    External (_PR_.CPPC, FieldUnitObj)
    External (_PR_.PR00, DeviceObj)
    External (_SB_.OSCP, IntObj)
    External (PC00, IntObj)
    External (TCNT, FieldUnitObj)

    Scope (\_PR.PR00)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_PR.CPPC) /* External reference */
        }

        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If ((\_SB.OSCP & 0x0400))
            {
                Return (TPSS) /* \_PR_.PR00.TPSS */
            }
            Else
            {
                Return (LPSS) /* \_PR_.PR00.LPSS */
            }
        }

        Name (LPSS, Package (0x10)
        {
            Package (0x06)
            {
                0x00000A8D, 
                0x00003A98, 
                0x0000000A, 
                0x0000000A, 
                0x00002300, 
                0x00002300
            }, 

            Package (0x06)
            {
                0x00000A8C, 
                0x00003A98, 
                0x0000000A, 
                0x0000000A, 
                0x00001B00, 
                0x00001B00
            }, 

            Package (0x06)
            {
                0x000009C4, 
                0x000034AF, 
                0x0000000A, 
                0x0000000A, 
                0x00001900, 
                0x00001900
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x000031D0, 
                0x0000000A, 
                0x0000000A, 
                0x00001800, 
                0x00001800
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00002CCB, 
                0x0000000A, 
                0x0000000A, 
                0x00001600, 
                0x00001600
            }, 

            Package (0x06)
            {
                0x000007D0, 
                0x000027FA, 
                0x0000000A, 
                0x0000000A, 
                0x00001400, 
                0x00001400
            }, 

            Package (0x06)
            {
                0x0000076C, 
                0x0000255E, 
                0x0000000A, 
                0x0000000A, 
                0x00001300, 
                0x00001300
            }, 

            Package (0x06)
            {
                0x000006A4, 
                0x0000204F, 
                0x0000000A, 
                0x0000000A, 
                0x00001100, 
                0x00001100
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x00001BFB, 
                0x0000000A, 
                0x0000000A, 
                0x00000F00, 
                0x00000F00
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x000019A1, 
                0x0000000A, 
                0x0000000A, 
                0x00000E00, 
                0x00000E00
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x00001592, 
                0x0000000A, 
                0x0000000A, 
                0x00000C00, 
                0x00000C00
            }, 

            Package (0x06)
            {
                0x0000044C, 
                0x0000135D, 
                0x0000000A, 
                0x0000000A, 
                0x00000B00, 
                0x00000B00
            }, 

            Package (0x06)
            {
                0x00000384, 
                0x00000F95, 
                0x0000000A, 
                0x0000000A, 
                0x00000900, 
                0x00000900
            }, 

            Package (0x06)
            {
                0x000002BC, 
                0x00000B81, 
                0x0000000A, 
                0x0000000A, 
                0x00000700, 
                0x00000700
            }, 

            Package (0x06)
            {
                0x00000258, 
                0x000009FF, 
                0x0000000A, 
                0x0000000A, 
                0x00000600, 
                0x00000600
            }, 

            Package (0x06)
            {
                0x00000190, 
                0x00000632, 
                0x0000000A, 
                0x0000000A, 
                0x00000400, 
                0x00000400
            }
        })
        Name (TPSS, Package (0x19)
        {
            Package (0x06)
            {
                0x00000A8D, 
                0x00003A98, 
                0x0000000A, 
                0x0000000A, 
                0x00002300, 
                0x00002300
            }, 

            Package (0x06)
            {
                0x00000A8C, 
                0x00003A98, 
                0x0000000A, 
                0x0000000A, 
                0x00001B00, 
                0x00001B00
            }, 

            Package (0x06)
            {
                0x00000A28, 
                0x0000379C, 
                0x0000000A, 
                0x0000000A, 
                0x00001A00, 
                0x00001A00
            }, 

            Package (0x06)
            {
                0x000009C4, 
                0x000034AF, 
                0x0000000A, 
                0x0000000A, 
                0x00001900, 
                0x00001900
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x000031D0, 
                0x0000000A, 
                0x0000000A, 
                0x00001800, 
                0x00001800
            }, 

            Package (0x06)
            {
                0x000008FC, 
                0x00002F8F, 
                0x0000000A, 
                0x0000000A, 
                0x00001700, 
                0x00001700
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00002CCB, 
                0x0000000A, 
                0x0000000A, 
                0x00001600, 
                0x00001600
            }, 

            Package (0x06)
            {
                0x00000834, 
                0x00002A17, 
                0x0000000A, 
                0x0000000A, 
                0x00001500, 
                0x00001500
            }, 

            Package (0x06)
            {
                0x000007D0, 
                0x000027FA, 
                0x0000000A, 
                0x0000000A, 
                0x00001400, 
                0x00001400
            }, 

            Package (0x06)
            {
                0x0000076C, 
                0x0000255E, 
                0x0000000A, 
                0x0000000A, 
                0x00001300, 
                0x00001300
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x000022D0, 
                0x0000000A, 
                0x0000000A, 
                0x00001200, 
                0x00001200
            }, 

            Package (0x06)
            {
                0x000006A4, 
                0x0000204F, 
                0x0000000A, 
                0x0000000A, 
                0x00001100, 
                0x00001100
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00001E62, 
                0x0000000A, 
                0x0000000A, 
                0x00001000, 
                0x00001000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x00001BFB, 
                0x0000000A, 
                0x0000000A, 
                0x00000F00, 
                0x00000F00
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x000019A1, 
                0x0000000A, 
                0x0000000A, 
                0x00000E00, 
                0x00000E00
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x000017D3, 
                0x0000000A, 
                0x0000000A, 
                0x00000D00, 
                0x00000D00
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x00001592, 
                0x0000000A, 
                0x0000000A, 
                0x00000C00, 
                0x00000C00
            }, 

            Package (0x06)
            {
                0x0000044C, 
                0x0000135D, 
                0x0000000A, 
                0x0000000A, 
                0x00000B00, 
                0x00000B00
            }, 

            Package (0x06)
            {
                0x000003E8, 
                0x000011B1, 
                0x0000000A, 
                0x0000000A, 
                0x00000A00, 
                0x00000A00
            }, 

            Package (0x06)
            {
                0x00000384, 
                0x00000F95, 
                0x0000000A, 
                0x0000000A, 
                0x00000900, 
                0x00000900
            }, 

            Package (0x06)
            {
                0x00000320, 
                0x00000D85, 
                0x0000000A, 
                0x0000000A, 
                0x00000800, 
                0x00000800
            }, 

            Package (0x06)
            {
                0x000002BC, 
                0x00000B81, 
                0x0000000A, 
                0x0000000A, 
                0x00000700, 
                0x00000700
            }, 

            Package (0x06)
            {
                0x00000258, 
                0x000009FF, 
                0x0000000A, 
                0x0000000A, 
                0x00000600, 
                0x00000600
            }, 

            Package (0x06)
            {
                0x000001F4, 
                0x00000813, 
                0x0000000A, 
                0x0000000A, 
                0x00000500, 
                0x00000500
            }, 

            Package (0x06)
            {
                0x00000190, 
                0x00000632, 
                0x0000000A, 
                0x0000000A, 
                0x00000400, 
                0x00000400
            }
        })
        Name (PSDF, Zero)
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If (!PSDF)
            {
                DerefOf (HPSD [Zero]) [0x04] = TCNT /* External reference */
                DerefOf (SPSD [Zero]) [0x04] = TCNT /* External reference */
                PSDF = Ones
            }

            If ((PC00 & 0x0800))
            {
                Return (HPSD) /* \_PR_.PR00.HPSD */
            }

            Return (SPSD) /* \_PR_.PR00.SPSD */
        }

        Name (HPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFE, 
                0x80
            }
        })
        Name (SPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFC, 
                0x80
            }
        })
    }
}



SSDT7
-----
DefinitionBlock ("", "SSDT", 2, "PmRef", "HwpLvt", 0x00003000)
{
    External (_PR_.PR00, DeviceObj)
    External (_PR_.PR01, ProcessorObj)
    External (_PR_.PR02, ProcessorObj)
    External (_PR_.PR03, ProcessorObj)
    External (_PR_.PR04, ProcessorObj)
    External (_PR_.PR05, ProcessorObj)
    External (_PR_.PR06, ProcessorObj)
    External (_PR_.PR07, ProcessorObj)
    External (_PR_.PR08, ProcessorObj)
    External (_PR_.PR09, ProcessorObj)
    External (_PR_.PR10, ProcessorObj)
    External (_PR_.PR11, ProcessorObj)
    External (_PR_.PR12, ProcessorObj)
    External (_PR_.PR13, ProcessorObj)
    External (_PR_.PR14, ProcessorObj)
    External (_PR_.PR15, ProcessorObj)
    External (TCNT, FieldUnitObj)

    Scope (\_GPE)
    {
        Method (HLVT, 0, Serialized)
        {
            Switch (ToInteger (TCNT))
            {
                Case (0x10)
                {
                    Notify (\_PR.PR00, 0x83) // Device-Specific Change
                    Notify (\_PR.PR01, 0x83) // Device-Specific Change
                    Notify (\_PR.PR02, 0x83) // Device-Specific Change
                    Notify (\_PR.PR03, 0x83) // Device-Specific Change
                    Notify (\_PR.PR04, 0x83) // Device-Specific Change
                    Notify (\_PR.PR05, 0x83) // Device-Specific Change
                    Notify (\_PR.PR06, 0x83) // Device-Specific Change
                    Notify (\_PR.PR07, 0x83) // Device-Specific Change
                    Notify (\_PR.PR08, 0x83) // Device-Specific Change
                    Notify (\_PR.PR09, 0x83) // Device-Specific Change
                    Notify (\_PR.PR10, 0x83) // Device-Specific Change
                    Notify (\_PR.PR11, 0x83) // Device-Specific Change
                    Notify (\_PR.PR12, 0x83) // Device-Specific Change
                    Notify (\_PR.PR13, 0x83) // Device-Specific Change
                    Notify (\_PR.PR14, 0x83) // Device-Specific Change
                    Notify (\_PR.PR15, 0x83) // Device-Specific Change
                }
                Case (0x0E)
                {
                    Notify (\_PR.PR00, 0x83) // Device-Specific Change
                    Notify (\_PR.PR01, 0x83) // Device-Specific Change
                    Notify (\_PR.PR02, 0x83) // Device-Specific Change
                    Notify (\_PR.PR03, 0x83) // Device-Specific Change
                    Notify (\_PR.PR04, 0x83) // Device-Specific Change
                    Notify (\_PR.PR05, 0x83) // Device-Specific Change
                    Notify (\_PR.PR06, 0x83) // Device-Specific Change
                    Notify (\_PR.PR07, 0x83) // Device-Specific Change
                    Notify (\_PR.PR08, 0x83) // Device-Specific Change
                    Notify (\_PR.PR09, 0x83) // Device-Specific Change
                    Notify (\_PR.PR10, 0x83) // Device-Specific Change
                    Notify (\_PR.PR11, 0x83) // Device-Specific Change
                    Notify (\_PR.PR12, 0x83) // Device-Specific Change
                    Notify (\_PR.PR13, 0x83) // Device-Specific Change
                }
                Case (0x0C)
                {
                    Notify (\_PR.PR00, 0x83) // Device-Specific Change
                    Notify (\_PR.PR01, 0x83) // Device-Specific Change
                    Notify (\_PR.PR02, 0x83) // Device-Specific Change
                    Notify (\_PR.PR03, 0x83) // Device-Specific Change
                    Notify (\_PR.PR04, 0x83) // Device-Specific Change
                    Notify (\_PR.PR05, 0x83) // Device-Specific Change
                    Notify (\_PR.PR06, 0x83) // Device-Specific Change
                    Notify (\_PR.PR07, 0x83) // Device-Specific Change
                    Notify (\_PR.PR08, 0x83) // Device-Specific Change
                    Notify (\_PR.PR09, 0x83) // Device-Specific Change
                    Notify (\_PR.PR10, 0x83) // Device-Specific Change
                    Notify (\_PR.PR11, 0x83) // Device-Specific Change
                }
                Case (0x0A)
                {
                    Notify (\_PR.PR00, 0x83) // Device-Specific Change
                    Notify (\_PR.PR01, 0x83) // Device-Specific Change
                    Notify (\_PR.PR02, 0x83) // Device-Specific Change
                    Notify (\_PR.PR03, 0x83) // Device-Specific Change
                    Notify (\_PR.PR04, 0x83) // Device-Specific Change
                    Notify (\_PR.PR05, 0x83) // Device-Specific Change
                    Notify (\_PR.PR06, 0x83) // Device-Specific Change
                    Notify (\_PR.PR07, 0x83) // Device-Specific Change
                    Notify (\_PR.PR08, 0x83) // Device-Specific Change
                    Notify (\_PR.PR09, 0x83) // Device-Specific Change
                }
                Case (0x08)
                {
                    Notify (\_PR.PR00, 0x83) // Device-Specific Change
                    Notify (\_PR.PR01, 0x83) // Device-Specific Change
                    Notify (\_PR.PR02, 0x83) // Device-Specific Change
                    Notify (\_PR.PR03, 0x83) // Device-Specific Change
                    Notify (\_PR.PR04, 0x83) // Device-Specific Change
                    Notify (\_PR.PR05, 0x83) // Device-Specific Change
                    Notify (\_PR.PR06, 0x83) // Device-Specific Change
                    Notify (\_PR.PR07, 0x83) // Device-Specific Change
                }
                Case (0x07)
                {
                    Notify (\_PR.PR00, 0x83) // Device-Specific Change
                    Notify (\_PR.PR01, 0x83) // Device-Specific Change
                    Notify (\_PR.PR02, 0x83) // Device-Specific Change
                    Notify (\_PR.PR03, 0x83) // Device-Specific Change
                    Notify (\_PR.PR04, 0x83) // Device-Specific Change
                    Notify (\_PR.PR05, 0x83) // Device-Specific Change
                    Notify (\_PR.PR06, 0x83) // Device-Specific Change
                }
                Case (0x06)
                {
                    Notify (\_PR.PR00, 0x83) // Device-Specific Change
                    Notify (\_PR.PR01, 0x83) // Device-Specific Change
                    Notify (\_PR.PR02, 0x83) // Device-Specific Change
                    Notify (\_PR.PR03, 0x83) // Device-Specific Change
                    Notify (\_PR.PR04, 0x83) // Device-Specific Change
                    Notify (\_PR.PR05, 0x83) // Device-Specific Change
                }
                Case (0x05)
                {
                    Notify (\_PR.PR00, 0x83) // Device-Specific Change
                    Notify (\_PR.PR01, 0x83) // Device-Specific Change
                    Notify (\_PR.PR02, 0x83) // Device-Specific Change
                    Notify (\_PR.PR03, 0x83) // Device-Specific Change
                    Notify (\_PR.PR04, 0x83) // Device-Specific Change
                }
                Case (0x04)
                {
                    Notify (\_PR.PR00, 0x83) // Device-Specific Change
                    Notify (\_PR.PR01, 0x83) // Device-Specific Change
                    Notify (\_PR.PR02, 0x83) // Device-Specific Change
                    Notify (\_PR.PR03, 0x83) // Device-Specific Change
                }
                Case (0x03)
                {
                    Notify (\_PR.PR00, 0x83) // Device-Specific Change
                    Notify (\_PR.PR01, 0x83) // Device-Specific Change
                    Notify (\_PR.PR02, 0x83) // Device-Specific Change
                }
                Case (0x02)
                {
                    Notify (\_PR.PR00, 0x83) // Device-Specific Change
                    Notify (\_PR.PR01, 0x83) // Device-Specific Change
                }
                Default
                {
                    Notify (\_PR.PR00, 0x83) // Device-Specific Change
                }

            }
        }
    }
}



SSDT8
-----
DefinitionBlock ("", "SSDT", 2, "PmRef", "Cpu0Cst", 0x00003001)
{
    External (_PR_.PR00, DeviceObj)
    External (C3LT, UnknownObj)
    External (C3MW, UnknownObj)
    External (C6LT, UnknownObj)
    External (C6MW, UnknownObj)
    External (C7LT, UnknownObj)
    External (C7MW, UnknownObj)
    External (CDLT, UnknownObj)
    External (CDLV, UnknownObj)
    External (CDMW, UnknownObj)
    External (CDPW, UnknownObj)
    External (CFGD, UnknownObj)
    External (FEMD, UnknownObj)
    External (FMBL, UnknownObj)
    External (PC00, UnknownObj)
    External (PFLV, UnknownObj)

    Scope (\_PR.PR00)
    {
        Name (C1TM, Package (0x04)
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            One, 
            One, 
            0x03E8
        })
        Name (C3TM, Package (0x04)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001814, // Address
                    ,)
            }, 

            0x02, 
            Zero, 
            0x01F4
        })
        Name (C6TM, Package (0x04)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001815, // Address
                    ,)
            }, 

            0x02, 
            Zero, 
            0x015E
        })
        Name (C7TM, Package (0x04)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001816, // Address
                    ,)
            }, 

            0x02, 
            Zero, 
            0xC8
        })
        Name (CDTM, Package (0x04)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001816, // Address
                    ,)
            }, 

            0x03, 
            Zero, 
            Zero
        })
        Name (MWES, ResourceTemplate ()
        {
            Register (FFixedHW, 
                0x01,               // Bit Width
                0x02,               // Bit Offset
                0x0000000000000000, // Address
                0x01,               // Access Size
                )
        })
        Name (AC2V, Zero)
        Name (AC3V, Zero)
        Name (C3ST, Package (0x04)
        {
            0x03, 
            Package (0x01)
            {
                Zero
            }, 

            Package (0x01)
            {
                Zero
            }, 

            Package (0x01)
            {
                Zero
            }
        })
        Name (C2ST, Package (0x03)
        {
            0x02, 
            Package (0x01)
            {
                Zero
            }, 

            Package (0x01)
            {
                Zero
            }
        })
        Name (C1ST, Package (0x02)
        {
            One, 
            Package (0x01)
            {
                Zero
            }
        })
        Name (CSTF, Zero)
        Method (_CST, 0, Serialized)  // _CST: C-States
        {
            If (!CSTF)
            {
                C3TM [0x02] = C3LT /* External reference */
                C6TM [0x02] = C6LT /* External reference */
                C7TM [0x02] = C7LT /* External reference */
                CDTM [0x02] = CDLT /* External reference */
                CDTM [0x03] = CDPW /* External reference */
                DerefOf (CDTM [Zero]) [0x07] = CDLV /* External reference */
                If (((CFGD & 0x0800) && (PC00 & 0x0200)))
                {
                    C1TM [Zero] = MWES /* \_PR_.PR00.MWES */
                    C3TM [Zero] = MWES /* \_PR_.PR00.MWES */
                    C6TM [Zero] = MWES /* \_PR_.PR00.MWES */
                    C7TM [Zero] = MWES /* \_PR_.PR00.MWES */
                    CDTM [Zero] = MWES /* \_PR_.PR00.MWES */
                    DerefOf (C3TM [Zero]) [0x07] = C3MW /* External reference */
                    DerefOf (C6TM [Zero]) [0x07] = C6MW /* External reference */
                    DerefOf (C7TM [Zero]) [0x07] = C7MW /* External reference */
                    DerefOf (CDTM [Zero]) [0x07] = CDMW /* External reference */
                }
                ElseIf (((CFGD & 0x0800) && (PC00 & 0x0100)))
                {
                    C1TM [Zero] = MWES /* \_PR_.PR00.MWES */
                }

                CSTF = Ones
            }

            AC2V = Zero
            AC3V = Zero
            C3ST [One] = C1TM /* \_PR_.PR00.C1TM */
            If ((CFGD & 0x20))
            {
                C3ST [0x02] = C7TM /* \_PR_.PR00.C7TM */
                AC2V = Ones
            }
            ElseIf ((CFGD & 0x10))
            {
                C3ST [0x02] = C6TM /* \_PR_.PR00.C6TM */
                AC2V = Ones
            }
            ElseIf ((CFGD & 0x08))
            {
                C3ST [0x02] = C3TM /* \_PR_.PR00.C3TM */
                AC2V = Ones
            }

            If ((CFGD & 0x4000))
            {
                C3ST [0x03] = CDTM /* \_PR_.PR00.CDTM */
                AC3V = Ones
            }

            If ((AC2V && AC3V))
            {
                Return (C3ST) /* \_PR_.PR00.C3ST */
            }
            ElseIf (AC2V)
            {
                C2ST [One] = DerefOf (C3ST [One])
                C2ST [0x02] = DerefOf (C3ST [0x02])
                Return (C2ST) /* \_PR_.PR00.C2ST */
            }
            ElseIf (AC3V)
            {
                C2ST [One] = DerefOf (C3ST [One])
                C2ST [0x02] = DerefOf (C3ST [0x03])
                DerefOf (C2ST [0x02]) [One] = 0x02
                Return (C2ST) /* \_PR_.PR00.C2ST */
            }
            Else
            {
                C1ST [One] = DerefOf (C3ST [One])
                Return (C1ST) /* \_PR_.PR00.C1ST */
            }
        }
    }
}



SSDT9
-----
DefinitionBlock ("", "SSDT", 2, "PmRef", "ApCst", 0x00003000)
{
    External (_PR_.PR00._CST, UnknownObj)
    External (_PR_.PR01, DeviceObj)
    External (_PR_.PR02, DeviceObj)
    External (_PR_.PR03, DeviceObj)
    External (_PR_.PR04, DeviceObj)
    External (_PR_.PR05, DeviceObj)
    External (_PR_.PR06, DeviceObj)
    External (_PR_.PR07, DeviceObj)
    External (_PR_.PR08, DeviceObj)
    External (_PR_.PR09, DeviceObj)
    External (_PR_.PR10, DeviceObj)
    External (_PR_.PR11, DeviceObj)
    External (_PR_.PR12, DeviceObj)
    External (_PR_.PR13, DeviceObj)
    External (_PR_.PR14, DeviceObj)
    External (_PR_.PR15, DeviceObj)

    Scope (\_PR.PR01)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.PR00._CST) /* External reference */
        }
    }

    Scope (\_PR.PR02)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.PR00._CST) /* External reference */
        }
    }

    Scope (\_PR.PR03)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.PR00._CST) /* External reference */
        }
    }

    Scope (\_PR.PR04)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.PR00._CST) /* External reference */
        }
    }

    Scope (\_PR.PR05)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.PR00._CST) /* External reference */
        }
    }

    Scope (\_PR.PR06)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.PR00._CST) /* External reference */
        }
    }

    Scope (\_PR.PR07)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.PR00._CST) /* External reference */
        }
    }

    Scope (\_PR.PR08)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.PR00._CST) /* External reference */
        }
    }

    Scope (\_PR.PR09)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.PR00._CST) /* External reference */
        }
    }

    Scope (\_PR.PR10)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.PR00._CST) /* External reference */
        }
    }

    Scope (\_PR.PR11)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.PR00._CST) /* External reference */
        }
    }

    Scope (\_PR.PR12)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.PR00._CST) /* External reference */
        }
    }

    Scope (\_PR.PR13)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.PR00._CST) /* External reference */
        }
    }

    Scope (\_PR.PR14)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.PR00._CST) /* External reference */
        }
    }

    Scope (\_PR.PR15)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.PR00._CST) /* External reference */
        }
    }
}



WSMT
----
[000h 0000   4]                    Signature : "WSMT"    [Windows SMM Security Mitigations Table]
[004h 0004   4]                 Table Length : 00000028
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : B6
[00Ah 0010   6]                       Oem ID : "MSFT  "
[010h 0016   8]                 Oem Table ID : "MSFT    "
[018h 0024   4]                 Oem Revision : 00000002
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 0000005F

[024h 0036   4]             Protection Flags : 00000007
                          FIXED_COMM_BUFFERS : 1
           COMM_BUFFER_NESTED_PTR_PROTECTION : 1
                  SYSTEM_RESOURCE_PROTECTION : 1

Raw Table Data: Length 40 (0x28)

    0000: 57 53 4D 54 28 00 00 00 01 B6 4D 53 46 54 20 20  // WSMT(.....MSFT  
    0010: 4D 53 46 54 20 20 20 20 02 00 00 00 4D 53 46 54  // MSFT    ....MSFT
    0020: 5F 00 00 00 07 00 00 00                          // _.......


