
Intel ACPI Component Architecture
ACPI Binary Table Extraction Utility version 20141107-32 [Feb  8 2017]
Copyright (c) 2000 - 2014 Intel Corporation


Signature  Length      Revision   OemId    OemTableId   OemRevision CompilerId CompilerRevision

   RSDP                          "ACPIAM"
   RSDT   0x00000048     0x01    "ACRSYS"  "RSDT1452"   0x20090722    "MSFT"     0x00000097
   XSDT   0x0000006C     0x01    "ACRSYS"  "XSDT1452"   0x20090722    "MSFT"     0x00000097
   DSDT   0x0000699E     0x01    "R01-  "  "R01-A2L "   0x00000004    "INTL"     0x20051117
   FACS   0x00000040
   FACP   0x000000F4     0x03    "ACRSYS"  "FACP1452"   0x20090722    "MSFT"     0x00000097
   APIC   0x00000080     0x01    "ACRSYS"  "APIC1452"   0x20090722    "MSFT"     0x00000097
   MCFG   0x0000003C     0x01    "ACRSYS"  "OEMMCFG "   0x20090722    "MSFT"     0x00000097
   SLIC   0x00000176     0x01    "ACRSYS"  "SLIC1452"   0x20090722    "MSFT"     0x00000097
   WDRT   0x00000047     0x01    "ACRSYS"  "NV-WDRT "   0x20090722    "MSFT"     0x00000097
   OEMB   0x00000079     0x01    "ACRSYS"  "OEMB1452"   0x20090722    "MSFT"     0x00000097
   HPET   0x00000038     0x01    "ACRSYS"  "OEMHPET0"   0x20090722    "MSFT"     0x00000097
   NVHD   0x00000284     0x01    "ACRSYS"  "NVHDCP  "   0x20090722    "MSFT"     0x00000097
   AWMI   0x0000004E     0x01    "ACRSYS"  "OEMB1452"   0x20090722    "MSFT"     0x00000097

Found 14 ACPI tables

APIC
----
[000h 0000   4]                    Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004   4]                 Table Length : 00000080
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 0A
[00Ah 0010   6]                       Oem ID : "ACRSYS"
[010h 0016   8]                 Oem Table ID : "APIC1452"
[018h 0024   4]                 Oem Revision : 20090722
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00000097

[024h 0036   4]           Local Apic Address : FEE00000
[028h 0040   4]        Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044   1]                Subtable Type : 00 [Processor Local APIC]
[02Dh 0045   1]                       Length : 08
[02Eh 0046   1]                 Processor ID : 01
[02Fh 0047   1]                Local Apic ID : 00
[030h 0048   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[034h 0052   1]                Subtable Type : 00 [Processor Local APIC]
[035h 0053   1]                       Length : 08
[036h 0054   1]                 Processor ID : 02
[037h 0055   1]                Local Apic ID : 02
[038h 0056   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[03Ch 0060   1]                Subtable Type : 00 [Processor Local APIC]
[03Dh 0061   1]                       Length : 08
[03Eh 0062   1]                 Processor ID : 03
[03Fh 0063   1]                Local Apic ID : 01
[040h 0064   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[044h 0068   1]                Subtable Type : 00 [Processor Local APIC]
[045h 0069   1]                       Length : 08
[046h 0070   1]                 Processor ID : 04
[047h 0071   1]                Local Apic ID : 03
[048h 0072   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[04Ch 0076   1]                Subtable Type : 01 [I/O APIC]
[04Dh 0077   1]                       Length : 0C
[04Eh 0078   1]                  I/O Apic ID : 04
[04Fh 0079   1]                     Reserved : 00
[050h 0080   4]                      Address : FEC00000
[054h 0084   4]                    Interrupt : 00000000

[058h 0088   1]                Subtable Type : 02 [Interrupt Source Override]
[059h 0089   1]                       Length : 0A
[05Ah 0090   1]                          Bus : 00
[05Bh 0091   1]                       Source : 00
[05Ch 0092   4]                    Interrupt : 00000002
[060h 0096   2]        Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0

[062h 0098   1]                Subtable Type : 02 [Interrupt Source Override]
[063h 0099   1]                       Length : 0A
[064h 0100   1]                          Bus : 00
[065h 0101   1]                       Source : 09
[066h 0102   4]                    Interrupt : 00000009
[06Ah 0106   2]        Flags (decoded below) : 000D
                                    Polarity : 1
                                Trigger Mode : 3

[06Ch 0108   1]                Subtable Type : 02 [Interrupt Source Override]
[06Dh 0109   1]                       Length : 0A
[06Eh 0110   1]                          Bus : 00
[06Fh 0111   1]                       Source : 0E
[070h 0112   4]                    Interrupt : 0000000E
[074h 0116   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1

[076h 0118   1]                Subtable Type : 02 [Interrupt Source Override]
[077h 0119   1]                       Length : 0A
[078h 0120   1]                          Bus : 00
[079h 0121   1]                       Source : 0F
[07Ah 0122   4]                    Interrupt : 0000000F
[07Eh 0126   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1

Raw Table Data: Length 128 (0x80)

  0000: 41 50 49 43 80 00 00 00 01 0A 41 43 52 53 59 53  APIC......ACRSYS
  0010: 41 50 49 43 31 34 35 32 22 07 09 20 4D 53 46 54  APIC1452".. MSFT
  0020: 97 00 00 00 00 00 E0 FE 01 00 00 00 00 08 01 00  ................
  0030: 01 00 00 00 00 08 02 02 01 00 00 00 00 08 03 01  ................
  0040: 01 00 00 00 00 08 04 03 01 00 00 00 01 0C 04 00  ................
  0050: 00 00 C0 FE 00 00 00 00 02 0A 00 00 02 00 00 00  ................
  0060: 00 00 02 0A 00 09 09 00 00 00 0D 00 02 0A 00 0E  ................
  0070: 0E 00 00 00 05 00 02 0A 00 0F 0F 00 00 00 05 00  ................


AWMI
----
[000h 0000   4]                    Signature : "AWMI"    
[004h 0004   4]                 Table Length : 0000004E
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 9C
[00Ah 0010   6]                       Oem ID : "ACRSYS"
[010h 0016   8]                 Oem Table ID : "OEMB1452"
[018h 0024   4]                 Oem Revision : 20090722
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00000097


**** Unknown ACPI table type [AWMI]


Raw Table Data: Length 78 (0x4E)

  0000: 41 57 4D 49 4E 00 00 00 01 9C 41 43 52 53 59 53  AWMIN.....ACRSYS
  0010: 4F 45 4D 42 31 34 35 32 22 07 09 20 4D 53 46 54  OEMB1452".. MSFT
  0020: 97 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  0040: 00 00 00 00 00 00 00 00 00 00 00 00 00 00        ..............


DSDT
----
DefinitionBlock ("dsdt.aml", "DSDT", 1, "R01-", "R01-A2L", 0x00000004)
{
    Scope (_PR)
    {
        Processor (P001, 0x01, 0x00004010, 0x06) {}
        Alias (P001, CPU1)
        Processor (P002, 0x02, 0x00000000, 0x00) {}
        Alias (P002, CPU2)
        Processor (P003, 0x03, 0x00000000, 0x00) {}
        Alias (P003, CPU3)
        Processor (P004, 0x04, 0x00000000, 0x00) {}
        Alias (P004, CPU4)
    }

    Name (FZTF, Buffer (0x07)
    {
         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF5         /* ....... */
    })
    Name (DP80, 0x80)
    Name (DP90, 0x90)
    Name (SSMI, 0x442E)
    Name (MRN0, 0xFC060000)
    Name (MRN1, 0xFC068000)
    Name (SHPB, 0xFED00000)
    Name (SHPL, 0x1000)
    Name (PMBS, 0x4000)
    Name (PMLN, 0x0100)
    Name (SCBS, 0x4400)
    Name (NVSI, 0x4400)
    Name (SCLN, 0x0100)
    Name (ACBS, 0x4800)
    Name (NVAI, 0x4800)
    Name (ACLN, 0x0100)
    Name (MTAB, 0x4F00)
    Name (MTAL, 0x0100)
    Name (ACA4, 0x40A4)
    Name (SCIO, 0x4400)
    Name (GIOB, 0x44C0)
    Name (SCTL, 0x4090)
    Name (SNAS, One)
    Name (SNAM, 0xFEFE1000)
    Name (SNAL, 0x1000)
    Name (SPAS, One)
    Name (SPAM, 0xFEFE2000)
    Name (SPAL, 0x2000)
    Name (MUAE, Zero)
    Name (APIC, One)
    Name (SLOW, Zero)
    Name (PCIB, 0xFC000000)
    Name (PCIL, 0x02000000)
    Name (WKTP, One)
    Name (NSLB, 0xC0000000)
    Name (SWSM, 0x442E)
    Name (SNUM, 0x91)
    Name (VERT, Zero)
    Name (COBR, 0x74)
    OperationRegion (BIOS, SystemMemory, 0x6FF9E064, 0xFF)
    Field (BIOS, ByteAcc, NoLock, Preserve)
    {
        SS1,    1, 
        SS2,    1, 
        SS3,    1, 
        SS4,    1, 
        Offset (0x01), 
        IOST,   16, 
        TOPM,   32, 
        ROMS,   32, 
        MG1B,   32, 
        MG1L,   32, 
        MG2B,   32, 
        MG2L,   32, 
        Offset (0x1C), 
        DMAX,   8, 
        HPTA,   32, 
        CPB0,   32, 
        CPB1,   32, 
        CPB2,   32, 
        CPB3,   32, 
        ASSB,   8, 
        AOTB,   8, 
        AAXB,   32, 
        SMIF,   8, 
        DTSE,   8, 
        DTS1,   8, 
        DTS2,   8, 
        MPEN,   8, 
        TPMF,   8, 
        MG3B,   32, 
        MG3L,   32, 
        MH1B,   32, 
        MH1L,   32, 
        OSTP,   8, 
        AWYE,   8, 
        HPSP,   8, 
        HBDP,   8, 
        TVCC,   8, 
        TVFC,   8, 
        PPOL,   8, 
        PFLG,   8
    }

    Method (RRIO, 4, NotSerialized)
    {
        Debug = "RRIO"
    }

    Method (RDMA, 3, NotSerialized)
    {
        Debug = "rDMA"
    }

    Name (PICM, Zero)
    Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        If (Arg0)
        {
            DBG8 = 0xAA
        }
        Else
        {
            DBG8 = 0xAC
        }

        PICM = Arg0
    }

    Name (OSVR, Ones)
    Method (OSFL, 0, NotSerialized)
    {
        If ((OSVR != Ones))
        {
            Return (OSVR) /* \OSVR */
        }

        Name (TTT0, Zero)
        TTT0 = OSYS ()
        If ((TTT0 == One))
        {
            OSVR = 0x03
        }
        Else
        {
            If ((TTT0 == 0x10))
            {
                OSVR = One
            }
            Else
            {
                If ((TTT0 == 0x11))
                {
                    OSVR = 0x02
                }
                Else
                {
                    If ((TTT0 == 0x12))
                    {
                        OSVR = 0x04
                    }
                    Else
                    {
                        If ((TTT0 == 0x13))
                        {
                            OSVR = Zero
                        }
                        Else
                        {
                            If ((TTT0 == 0x14))
                            {
                                OSVR = Zero
                            }
                            Else
                            {
                                If ((TTT0 == 0x15))
                                {
                                    OSVR = Zero
                                }
                            }
                        }
                    }
                }
            }
        }

        Return (OSVR) /* \OSVR */
    }

    Method (MCTH, 2, NotSerialized)
    {
        If ((SizeOf (Arg0) < SizeOf (Arg1)))
        {
            Return (Zero)
        }

        Local0 = (SizeOf (Arg0) + One)
        Name (BUF0, Buffer (Local0) {})
        Name (BUF1, Buffer (Local0) {})
        BUF0 = Arg0
        BUF1 = Arg1
        While (Local0)
        {
            Local0--
            If ((DerefOf (Index (BUF0, Local0)) != DerefOf (Index (BUF1, Local0
                ))))
            {
                Return (Zero)
            }
        }

        Return (One)
    }

    Name (PRWP, Package (0x02)
    {
        Zero, 
        Zero
    })
    Method (GPRW, 2, NotSerialized)
    {
        Index (PRWP, Zero) = Arg0
        Local0 = (SS1 << One)
        Local0 |= (SS2 << 0x02)
        Local0 |= (SS3 << 0x03)
        Local0 |= (SS4 << 0x04)
        If (((One << Arg1) & Local0))
        {
            Index (PRWP, One) = Arg1
        }
        Else
        {
            Local0 >>= One
            If (((OSFL () == One) || (OSFL () == 0x02)))
            {
                FindSetLeftBit (Local0, Index (PRWP, One))
            }
            Else
            {
                FindSetRightBit (Local0, Index (PRWP, One))
            }
        }

        Return (PRWP) /* \PRWP */
    }

    Name (WAKP, Package (0x02)
    {
        Zero, 
        Zero
    })
    OperationRegion (DEB0, SystemIO, DP80, One)
    Field (DEB0, ByteAcc, NoLock, Preserve)
    {
        DBG8,   8
    }

    OperationRegion (DEB1, SystemIO, DP90, 0x02)
    Field (DEB1, WordAcc, NoLock, Preserve)
    {
        DBG9,   16
    }

    Method (OSYS, 0, NotSerialized)
    {
        Local0 = 0x10
        If (CondRefOf (_OSI, Local1))
        {
            If (_OSI ("Windows 2000"))
            {
                Local0 = 0x12
            }

            If (_OSI ("Windows 2001"))
            {
                Local0 = 0x13
            }

            If (_OSI ("Windows 2001 SP1"))
            {
                Local0 = 0x13
            }

            If (_OSI ("Windows 2001 SP2"))
            {
                Local0 = 0x13
            }

            If (_OSI ("Windows 2001.1"))
            {
                Local0 = 0x14
            }

            If (_OSI ("Windows 2001.1 SP1"))
            {
                Local0 = 0x14
            }

            If (_OSI ("Windows 2006"))
            {
                Local0 = 0x15
            }
        }
        Else
        {
            If (MCTH (_OS, "Microsoft Windows NT"))
            {
                Local0 = 0x12
            }
            Else
            {
                If (MCTH (_OS, "Microsoft WindowsME: Millennium Edition"))
                {
                    Local0 = 0x11
                }
            }
        }

        Return (Local0)
    }

    Scope (_SB)
    {
        Name (PR00, Package (0x0E)
        {
            Package (0x04)
            {
                0x0003FFFF, 
                Zero, 
                LSMB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                One, 
                LPMU, 
                Zero
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                Zero, 
                LUB0, 
                Zero
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                One, 
                LUB2, 
                Zero
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                Zero, 
                LMAC, 
                Zero
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                Zero, 
                LSA0, 
                Zero
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                Zero, 
                LAZA, 
                Zero
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                Zero, 
                LRP0, 
                Zero
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                Zero, 
                LRP1, 
                Zero
            }, 

            Package (0x04)
            {
                0x000EFFFF, 
                Zero, 
                LRP2, 
                Zero
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                Zero, 
                LRP3, 
                Zero
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                Zero, 
                LRP4, 
                Zero
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                Zero, 
                LRP5, 
                Zero
            }, 

            Package (0x04)
            {
                0x0018FFFF, 
                Zero, 
                LRP6, 
                Zero
            }
        })
        Name (AR00, Package (0x0E)
        {
            Package (0x04)
            {
                0x0003FFFF, 
                Zero, 
                LSMB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                One, 
                LPMU, 
                Zero
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                Zero, 
                LUB0, 
                Zero
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                One, 
                LUB2, 
                Zero
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                Zero, 
                LMAC, 
                Zero
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                Zero, 
                LSA0, 
                Zero
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                Zero, 
                LAZA, 
                Zero
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                Zero, 
                LRP0, 
                Zero
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                Zero, 
                LRP1, 
                Zero
            }, 

            Package (0x04)
            {
                0x000EFFFF, 
                Zero, 
                LRP2, 
                Zero
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                Zero, 
                LRP3, 
                Zero
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                Zero, 
                LRP4, 
                Zero
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                Zero, 
                LRP5, 
                Zero
            }, 

            Package (0x04)
            {
                0x0018FFFF, 
                Zero, 
                LRP6, 
                Zero
            }
        })
        Name (PR02, Package (0x01)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                SGRU, 
                Zero
            }
        })
        Name (AR02, Package (0x01)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                SGRU, 
                Zero
            }
        })
        Name (PR03, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LN0A, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LN0B, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LN0C, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LN0D, 
                Zero
            }
        })
        Name (AR03, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LN0A, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LN0B, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LN0C, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LN0D, 
                Zero
            }
        })
        Name (PR04, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LN1A, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LN1B, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LN1C, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LN1D, 
                Zero
            }
        })
        Name (AR04, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LN1A, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LN1B, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LN1C, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LN1D, 
                Zero
            }
        })
        Name (PR05, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LN2A, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LN2B, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LN2C, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LN2D, 
                Zero
            }
        })
        Name (AR05, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LN2A, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LN2B, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LN2C, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LN2D, 
                Zero
            }
        })
        Name (PR06, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LN3A, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LN3B, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LN3C, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LN3D, 
                Zero
            }
        })
        Name (AR06, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LN3A, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LN3B, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LN3C, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LN3D, 
                Zero
            }
        })
        Name (PR07, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LN4A, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LN4B, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LN4C, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LN4D, 
                Zero
            }
        })
        Name (AR07, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LN4A, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LN4B, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LN4C, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LN4D, 
                Zero
            }
        })
        Name (PR08, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LN5A, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LN5B, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LN5C, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LN5D, 
                Zero
            }
        })
        Name (AR08, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LN5A, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LN5B, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LN5C, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LN5D, 
                Zero
            }
        })
        Name (PR09, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LN6A, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LN6B, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LN6C, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LN6D, 
                Zero
            }
        })
        Name (AR09, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LN6A, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LN6B, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LN6C, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LN6D, 
                Zero
            }
        })
        Name (PR01, Package (0x08)
        {
            Package (0x04)
            {
                0x0006FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                0x03, 
                LNKA, 
                Zero
            }
        })
        Name (AR01, Package (0x08)
        {
            Package (0x04)
            {
                0x0006FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                0x03, 
                LNKA, 
                Zero
            }
        })
        Name (RSA0, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5}
        })
        Name (RSAC, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {7,9,10,11,14,15}
        })
        Alias (RSAC, RSB0)
        Alias (RSAC, RSB2)
        Alias (RSAC, RS11)
        Alias (RSAC, RS12)
        Alias (RSAC, RSMB)
        Alias (RSAC, RSMU)
        Alias (RSAC, RSZA)
        Alias (RSAC, RSRU)
        Alias (RSAC, RSTA)
        Alias (RSAC, PRSA)
        Alias (RSAC, PRSB)
        Alias (RSAC, PRSC)
        Alias (RSAC, PRSD)
        Alias (RSAC, RS0A)
        Alias (RSAC, RS0B)
        Alias (RSAC, RS0C)
        Alias (RSAC, RS0D)
        Alias (RSAC, RS1A)
        Alias (RSAC, RS1B)
        Alias (RSAC, RS1C)
        Alias (RSAC, RS1D)
        Alias (RSAC, RS2A)
        Alias (RSAC, RS2B)
        Alias (RSAC, RS2C)
        Alias (RSAC, RS2D)
        Alias (RSAC, RS3A)
        Alias (RSAC, RS3B)
        Alias (RSAC, RS3C)
        Alias (RSAC, RS3D)
        Alias (RSAC, RS4A)
        Alias (RSAC, RS4B)
        Alias (RSAC, RS4C)
        Alias (RSAC, RS4D)
        Alias (RSAC, RS5A)
        Alias (RSAC, RS5B)
        Alias (RSAC, RS5C)
        Alias (RSAC, RS5D)
        Alias (RSAC, RS6A)
        Alias (RSAC, RS6B)
        Alias (RSAC, RS6C)
        Alias (RSAC, RS6D)
        Alias (RSAC, RS7A)
        Alias (RSAC, RS7B)
        Alias (RSAC, RS7C)
        Alias (RSAC, RS7D)
        Alias (RSAC, RSP0)
        Alias (RSAC, RSP1)
        Alias (RSAC, RSP2)
        Alias (RSAC, RSP3)
        Alias (RSAC, RSP4)
        Alias (RSAC, RSP5)
        Alias (RSAC, RSP6)
        Name (RSIR, ResourceTemplate ()
        {
            Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
            {
                0x00000010,
                0x00000011,
                0x00000012,
                0x00000013,
            }
        })
        Name (RSII, ResourceTemplate ()
        {
            Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
            {
                0x00000014,
                0x00000015,
                0x00000016,
                0x00000017,
            }
        })
        Alias (RSII, RSIG)
        Alias (RSII, RSU1)
        Alias (RSII, RSU2)
        Alias (RSII, RSI1)
        Alias (RSII, RSI2)
        Alias (RSII, RSSA)
        Alias (RSII, RSMA)
        Device (PCI0)
        {
            Name (_HID, EisaId ("PNP0A03") /* PCI Bus */)  // _HID: Hardware ID
            Name (_ADR, Zero)  // _ADR: Address
            Method (^BN00, 0, NotSerialized)
            {
                Return (Zero)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BN00 ())
            }

            Name (_UID, Zero)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR00) /* \_SB_.AR00 */
                }

                Return (PR00) /* \_SB_.PR00 */
            }

            Method (NPTS, 1, NotSerialized)
            {
            }

            Method (NWAK, 1, NotSerialized)
            {
            }

            Device (SBRG)
            {
                Name (_ADR, 0x00030000)  // _ADR: Address
                Method (SPTS, 1, NotSerialized)
                {
                    PS1S = One
                    PS1E = One
                }

                Method (SWAK, 1, NotSerialized)
                {
                    PS1E = Zero
                    S1CT = 0x02
                    S3CT = 0x02
                    S4CT = 0x02
                    S5CT = 0x02
                }

                OperationRegion (SMIE, SystemIO, SCIO, 0x08)
                Field (SMIE, ByteAcc, NoLock, Preserve)
                {
                        ,   15, 
                    PS1S,   1, 
                        ,   31, 
                    PS1E,   1, 
                    Offset (0x08)
                }

                OperationRegion (SXCT, SystemIO, SCTL, 0x10)
                Field (SXCT, ByteAcc, NoLock, Preserve)
                {
                    S1CT,   2, 
                    Offset (0x04), 
                    S3CT,   2, 
                    Offset (0x08), 
                    S4CT,   2, 
                    Offset (0x0C), 
                    S5CT,   2, 
                    Offset (0x10)
                }

                Scope (\_SB)
                {
                    Device (AWY)
                    {
                        Name (_HID, "AWY0001")  // _HID: Hardware ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If ((AWYE == Zero))
                            {
                                Return (0x0B)
                            }
                            Else
                            {
                                Return (0x0F)
                            }
                        }

                        Method (SMOD, 1, NotSerialized)
                        {
                            If ((Arg0 == Zero)) {}
                            If ((Arg0 == One)) {}
                            Return (Zero)
                        }
                    }

                    OperationRegion (\SCPP, SystemIO, SSMI, One)
                    Field (SCPP, ByteAcc, NoLock, Preserve)
                    {
                        SMIP,   8
                    }

                    Scope (PCI0)
                    {
                        Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                        {
                            If ((OSFL () == 0x02))
                            {
                                Return (0x02)
                            }
                            Else
                            {
                                Return (0x03)
                            }
                        }

                        Name (_S1D, One)  // _S1D: S1 Device State
                        Name (NATA, Package (0x01)
                        {
                            0x00100000
                        })
                        Device (NVRB)
                        {
                            Name (_HID, "NVRAID20")  // _HID: Hardware ID
                            Name (FNVR, 0xFF)
                            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                            {
                                FNVR = Zero
                            }

                            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                            {
                                FNVR = 0xFF
                            }

                            Method (_STA, 0, NotSerialized)  // _STA: Status
                            {
                                If ((CPB0 & One))
                                {
                                    If ((FNVR == 0xFF))
                                    {
                                        Return (0x0F)
                                    }
                                    Else
                                    {
                                        Return (0x0D)
                                    }
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                            {
                                IO (Decode16,
                                    0x04D2,             // Range Minimum
                                    0x04D2,             // Range Maximum
                                    0x01,               // Alignment
                                    0x01,               // Length
                                    )
                            })
                        }
                    }
                }

                OperationRegion (UCFG, PCI_Config, 0x78, One)
                Field (UCFG, ByteAcc, NoLock, Preserve)
                {
                    U1CF,   8
                }

                Device (MUAR)
                {
                    Name (_UID, 0xFF)  // _UID: Unique ID
                    Name (_HID, EisaId ("PNP0501") /* 16550A-compatible COM Serial Port */)  // _HID: Hardware ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (MUAE)
                        {
                            Local0 = (U1CF & 0x83)
                            If ((Local0 == 0x82))
                            {
                                Return (0x0F)
                            }
                        }

                        Return (Zero)
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If ((U1CF == 0xC2))
                        {
                            UIO1 = 0x03F8
                            UIRQ = (One << 0x04)
                            _UID = One
                        }

                        If ((U1CF == 0xA6))
                        {
                            UIO1 = 0x02F8
                            UIRQ = (One << 0x03)
                            _UID = 0x02
                        }

                        UIO2 = UIO1 /* \_SB_.PCI0.SBRG.MUAR.UIO1 */
                        Return (UCRS) /* \_SB_.PCI0.SBRG.MUAR.UCRS */
                    }

                    Name (UCRS, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x08,               // Length
                            _Y01)
                        IRQNoFlags (_Y00)
                            {}
                        DMA (Compatibility, NotBusMaster, Transfer8, )
                            {}
                    })
                    CreateWordField (UCRS, \_SB.PCI0.SBRG.MUAR._Y00._INT, UIRQ)  // _INT: Interrupts
                    CreateWordField (UCRS, \_SB.PCI0.SBRG.MUAR._Y01._MIN, UIO1)  // _MIN: Minimum Base Address
                    CreateWordField (UCRS, \_SB.PCI0.SBRG.MUAR._Y01._MAX, UIO2)  // _MAX: Maximum Base Address
                }

                Device (PIC)
                {
                    Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0020,             // Range Minimum
                            0x0020,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A0,             // Range Minimum
                            0x00A0,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {2}
                    })
                }

                Device (DMAD)
                {
                    Name (_HID, EisaId ("PNP0200") /* PC-class DMA Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        DMA (Compatibility, BusMaster, Transfer8, )
                            {4}
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0081,             // Range Minimum
                            0x0081,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0087,             // Range Minimum
                            0x0087,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0089,             // Range Minimum
                            0x0089,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x008F,             // Range Minimum
                            0x008F,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00C0,             // Range Minimum
                            0x00C0,             // Range Maximum
                            0x00,               // Alignment
                            0x20,               // Length
                            )
                    })
                }

                Device (SPKR)
                {
                    Name (_HID, EisaId ("PNP0800") /* Microsoft Sound System Compatible Device */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0061,             // Range Minimum
                            0x0061,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                    })
                }

                Device (COPR)
                {
                    Name (_HID, EisaId ("PNP0C04") /* x87-compatible Floating Point Processing Unit */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x00F0,             // Range Minimum
                            0x00F0,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IRQNoFlags ()
                            {13}
                    })
                }

                Device (RMSC)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x10)  // _UID: Unique ID
                    Name (CRS, ResourceTemplate ()
                    {
                        DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                            0x00000000,         // Granularity
                            0x000D0000,         // Range Minimum
                            0x000D3FFF,         // Range Maximum
                            0x00000000,         // Translation Offset
                            0x00004000,         // Length
                            ,, , AddressRangeMemory, TypeStatic)
                        DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                            0x00000000,         // Granularity
                            0x000D4000,         // Range Minimum
                            0x000D7FFF,         // Range Maximum
                            0x00000000,         // Translation Offset
                            0x00004000,         // Length
                            ,, , AddressRangeMemory, TypeStatic)
                        DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                            0x00000000,         // Granularity
                            0x000DE000,         // Range Minimum
                            0x000DFFFF,         // Range Maximum
                            0x00000000,         // Translation Offset
                            0x00002000,         // Length
                            ,, , AddressRangeMemory, TypeStatic)
                        IO (Decode16,
                            0x0010,             // Range Minimum
                            0x0010,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0022,             // Range Minimum
                            0x0022,             // Range Maximum
                            0x00,               // Alignment
                            0x1E,               // Length
                            )
                        IO (Decode16,
                            0x0044,             // Range Minimum
                            0x0044,             // Range Maximum
                            0x00,               // Alignment
                            0x0A,               // Length
                            )
                        IO (Decode16,
                            0x0050,             // Range Minimum
                            0x0050,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0062,             // Range Minimum
                            0x0062,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0065,             // Range Minimum
                            0x0065,             // Range Maximum
                            0x00,               // Alignment
                            0x0B,               // Length
                            )
                        IO (Decode16,
                            0x0072,             // Range Minimum
                            0x0072,             // Range Maximum
                            0x00,               // Alignment
                            0x0E,               // Length
                            )
                        IO (Decode16,
                            0x0080,             // Range Minimum
                            0x0080,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0084,             // Range Minimum
                            0x0084,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0088,             // Range Minimum
                            0x0088,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x008C,             // Range Minimum
                            0x008C,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0090,             // Range Minimum
                            0x0090,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x00A2,             // Range Minimum
                            0x00A2,             // Range Maximum
                            0x00,               // Alignment
                            0x1E,               // Length
                            )
                        IO (Decode16,
                            0x00E0,             // Range Minimum
                            0x00E0,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x04D0,             // Range Minimum
                            0x04D0,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0800,             // Range Minimum
                            0x0800,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y02)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y03)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y04)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y05)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y06)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y07)
                        Memory32Fixed (ReadOnly,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y0A)
                        Memory32Fixed (ReadOnly,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y08)
                        Memory32Fixed (ReadOnly,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y09)
                        Memory32Fixed (ReadOnly,
                            0xFEE01000,         // Address Base
                            0x000FF000,         // Address Length
                            )
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateWordField (CRS, \_SB.PCI0.SBRG.RMSC._Y02._MIN, GP00)  // _MIN: Minimum Base Address
                        CreateWordField (CRS, \_SB.PCI0.SBRG.RMSC._Y02._MAX, GP01)  // _MAX: Maximum Base Address
                        CreateByteField (CRS, \_SB.PCI0.SBRG.RMSC._Y02._LEN, GP0L)  // _LEN: Length
                        CreateWordField (CRS, \_SB.PCI0.SBRG.RMSC._Y03._MIN, GP10)  // _MIN: Minimum Base Address
                        CreateWordField (CRS, \_SB.PCI0.SBRG.RMSC._Y03._MAX, GP11)  // _MAX: Maximum Base Address
                        CreateByteField (CRS, \_SB.PCI0.SBRG.RMSC._Y03._LEN, GP1L)  // _LEN: Length
                        GP00 = PMBS /* \PMBS */
                        GP01 = PMBS /* \PMBS */
                        If ((PMLN >= 0x0100))
                        {
                            GP0L = (PMLN >> One)
                            GP10 = (GP00 + GP0L) /* \_SB_.PCI0.SBRG.RMSC._CRS.GP0L */
                            GP11 = (GP01 + GP0L) /* \_SB_.PCI0.SBRG.RMSC._CRS.GP0L */
                            GP1L = (PMLN - GP0L) /* \_SB_.PCI0.SBRG.RMSC._CRS.GP0L */
                        }
                        Else
                        {
                            GP0L = PMLN /* \PMLN */
                        }

                        If (SCBS)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.RMSC._Y04._MIN, SC00)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.RMSC._Y04._MAX, SC01)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.RMSC._Y04._LEN, SC0L)  // _LEN: Length
                            CreateWordField (CRS, \_SB.PCI0.SBRG.RMSC._Y05._MIN, SC10)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.RMSC._Y05._MAX, SC11)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.RMSC._Y05._LEN, SC1L)  // _LEN: Length
                            SC00 = SCBS /* \SCBS */
                            SC01 = SCBS /* \SCBS */
                            If ((SCLN >= 0x0100))
                            {
                                SC0L = (SCLN >> One)
                                SC10 = (SC00 + SC0L) /* \_SB_.PCI0.SBRG.RMSC._CRS.SC0L */
                                SC11 = (SC01 + SC0L) /* \_SB_.PCI0.SBRG.RMSC._CRS.SC0L */
                                SC1L = (SCLN - SC0L) /* \_SB_.PCI0.SBRG.RMSC._CRS.SC0L */
                            }
                            Else
                            {
                                SC0L = SCLN /* \SCLN */
                            }
                        }

                        If (ACBS)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.RMSC._Y06._MIN, AC00)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.RMSC._Y06._MAX, AC01)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.RMSC._Y06._LEN, AC0L)  // _LEN: Length
                            CreateWordField (CRS, \_SB.PCI0.SBRG.RMSC._Y07._MIN, AC10)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.RMSC._Y07._MAX, AC11)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.RMSC._Y07._LEN, AC1L)  // _LEN: Length
                            AC00 = ACBS /* \ACBS */
                            AC01 = ACBS /* \ACBS */
                            If ((ACLN >= 0x0100))
                            {
                                AC0L = (ACLN >> One)
                                AC10 = (AC00 + AC0L) /* \_SB_.PCI0.SBRG.RMSC._CRS.AC0L */
                                AC11 = (AC01 + AC0L) /* \_SB_.PCI0.SBRG.RMSC._CRS.AC0L */
                                AC1L = (ACLN - AC0L) /* \_SB_.PCI0.SBRG.RMSC._CRS.AC0L */
                            }
                            Else
                            {
                                AC0L = ACLN /* \ACLN */
                            }
                        }

                        If (SPAS)
                        {
                            CreateDWordField (CRS, \_SB.PCI0.SBRG.RMSC._Y08._BAS, BB01)  // _BAS: Base Address
                            CreateDWordField (CRS, \_SB.PCI0.SBRG.RMSC._Y08._LEN, BL01)  // _LEN: Length
                            BB01 = SPAM /* \SPAM */
                            BL01 = SPAL /* \SPAL */
                        }

                        If (SNAS)
                        {
                            CreateDWordField (CRS, \_SB.PCI0.SBRG.RMSC._Y09._BAS, AB01)  // _BAS: Base Address
                            CreateDWordField (CRS, \_SB.PCI0.SBRG.RMSC._Y09._LEN, AL01)  // _LEN: Length
                            AB01 = SNAM /* \SNAM */
                            AL01 = SNAL /* \SNAL */
                        }

                        CreateDWordField (CRS, \_SB.PCI0.SBRG.RMSC._Y0A._BAS, MB01)  // _BAS: Base Address
                        CreateDWordField (CRS, \_SB.PCI0.SBRG.RMSC._Y0A._LEN, ML01)  // _LEN: Length
                        MB01 = CPB1 /* \CPB1 */
                        ML01 = CPB2 /* \CPB2 */
                        Return (CRS) /* \_SB_.PCI0.SBRG.RMSC.CRS_ */
                    }
                }

                Device (HPET)
                {
                    Name (_HID, EisaId ("PNP0103") /* HPET System Timer */)  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (CRS0, ResourceTemplate ()
                    {
                    })
                    Name (CRS1, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y0B)
                        IRQNoFlags (_Y0C)
                            {0}
                        IRQNoFlags ()
                            {8}
                    })
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((OSFL () == Zero))
                        {
                            If ((NVID == 0x10DE))
                            {
                                Return (0x0F)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (CRS1, \_SB.PCI0.SBRG.HPET._Y0B._BAS, HPX1)  // _BAS: Base Address
                        CreateDWordField (CRS1, \_SB.PCI0.SBRG.HPET._Y0B._LEN, HPX2)  // _LEN: Length
                        CreateWordField (CRS1, \_SB.PCI0.SBRG.HPET._Y0C._INT, TIRQ)  // _INT: Interrupts
                        If ((NVID == 0x10DE))
                        {
                            Local0 = Zero
                            If (P2IR)
                            {
                                Local0 = 0x02
                            }

                            TIRQ = (One << Local0)
                            HPX1 = SHPB /* \SHPB */
                            HPX2 = SHPL /* \SHPL */
                            Return (CRS1) /* \_SB_.PCI0.SBRG.HPET.CRS1 */
                        }
                        Else
                        {
                            Return (CRS0) /* \_SB_.PCI0.SBRG.HPET.CRS0 */
                        }
                    }

                    OperationRegion (CF29, PCI_Config, 0x74, One)
                    Field (CF29, ByteAcc, NoLock, Preserve)
                    {
                            ,   1, 
                            ,   1, 
                        P2IR,   1
                    }

                    OperationRegion (HPTE, SystemMemory, SHPB, 0x04)
                    Field (HPTE, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x02), 
                        NVID,   16
                    }
                }

                OperationRegion (LPDC, PCI_Config, 0xA0, 0x06)
                Field (LPDC, ByteAcc, NoLock, Preserve)
                {
                    S3F8,   1, 
                    S2F8,   1, 
                        ,   3, 
                    S2E8,   1, 
                        ,   1, 
                    S3E8,   1, 
                        ,   4, 
                    M300,   1, 
                        ,   2, 
                    M330,   1, 
                        ,   4, 
                    FDC0,   1, 
                    Offset (0x03), 
                    P378,   1, 
                    P278,   1, 
                    P3BC,   1, 
                    Offset (0x04), 
                    G200,   8, 
                    G208,   8
                }

                Method (RRIO, 4, NotSerialized)
                {
                    If (((Arg0 == Zero) || (Arg0 == One)))
                    {
                        If ((Arg2 == 0x03F8))
                        {
                            S3F8 = Arg1
                        }

                        If ((Arg2 == 0x02F8))
                        {
                            S2F8 = Arg1
                        }

                        If ((Arg2 == 0x03E8))
                        {
                            S3E8 = Arg1
                        }

                        If ((Arg2 == 0x02E8))
                        {
                            S2E8 = Arg1
                        }
                    }

                    If ((Arg0 == 0x02))
                    {
                        If ((Arg2 == 0x0378))
                        {
                            P378 = Arg1
                        }

                        If ((Arg2 == 0x0278))
                        {
                            P278 = Arg1
                        }

                        If ((Arg2 == 0x03BC))
                        {
                            P3BC = Arg1
                        }
                    }

                    If ((Arg0 == 0x03))
                    {
                        FDC0 = Arg1
                    }

                    If ((Arg0 == 0x05))
                    {
                        If ((Arg2 == 0x0330))
                        {
                            M330 = Arg1
                        }

                        If ((Arg2 == 0x0300))
                        {
                            M300 = Arg1
                        }
                    }

                    If ((Arg0 == 0x08))
                    {
                        Local0 = Zero
                        If (Arg1)
                        {
                            Local0 = 0xFF
                        }

                        If ((Arg2 == 0x0200))
                        {
                            G200 = Local0
                        }

                        If ((Arg2 == 0x0208))
                        {
                            G208 = Local0
                        }
                    }
                }

                Method (RDMA, 3, NotSerialized)
                {
                }

                Device (TMR)
                {
                    Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
                    Name (CRS0, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x00,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {0}
                    })
                    Name (CRS1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x00,               // Alignment
                            0x04,               // Length
                            )
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If ((^^HPET.NVID == 0x10DE))
                        {
                            Return (CRS1) /* \_SB_.PCI0.SBRG.TMR_.CRS1 */
                        }

                        Return (CRS0) /* \_SB_.PCI0.SBRG.TMR_.CRS0 */
                    }
                }

                Device (RTC0)
                {
                    Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
                    Name (CRS0, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {8}
                    })
                    Name (CRS1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If ((^^HPET.NVID == 0x10DE))
                        {
                            Return (CRS1) /* \_SB_.PCI0.SBRG.RTC0.CRS1 */
                        }

                        Return (CRS0) /* \_SB_.PCI0.SBRG.RTC0.CRS0 */
                    }
                }

                Device (^PCIE)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x11)  // _UID: Unique ID
                    Name (CRS, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadOnly,
                            0xE0000000,         // Address Base
                            0x10000000,         // Address Length
                            _Y0D)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (CRS, \_SB.PCI0.PCIE._Y0D._BAS, BAS1)  // _BAS: Base Address
                        CreateDWordField (CRS, \_SB.PCI0.PCIE._Y0D._LEN, LEN1)  // _LEN: Length
                        BAS1 = PCIB /* \PCIB */
                        LEN1 = PCIL /* \PCIL */
                        Return (CRS) /* \_SB_.PCI0.PCIE.CRS_ */
                    }
                }

                Scope (\_SB.PCI0.SBRG)
                {
                    Device (PS2K)
                    {
                        Name (_HID, EisaId ("PNP0303") /* IBM Enhanced Keyboard (101/102-key, PS/2 Mouse) */)  // _HID: Hardware ID
                        Name (_CID, EisaId ("PNP030B"))  // _CID: Compatible ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (Zero)
                        }

                        Name (PCRS, ResourceTemplate ()
                        {
                            IO (Decode16,
                                0x0060,             // Range Minimum
                                0x0060,             // Range Maximum
                                0x00,               // Alignment
                                0x01,               // Length
                                )
                            IO (Decode16,
                                0x0064,             // Range Minimum
                                0x0064,             // Range Maximum
                                0x00,               // Alignment
                                0x01,               // Length
                                )
                            IRQNoFlags ()
                                {1}
                        })
                        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                        {
                            Return (PCRS) /* \_SB_.PCI0.SBRG.PS2K.PCRS */
                        }
                    }
                }

                Device (OMSC)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (CRS, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadOnly,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y0E)
                        Memory32Fixed (ReadOnly,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y0F)
                    })
                    Name (CRS1, ResourceTemplate ()
                    {
                        FixedIO (
                            0x0060,             // Address
                            0x01,               // Length
                            )
                        FixedIO (
                            0x0064,             // Address
                            0x01,               // Length
                            )
                        Memory32Fixed (ReadOnly,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y10)
                        Memory32Fixed (ReadOnly,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y11)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If (APIC)
                        {
                            CreateDWordField (CRS, \_SB.PCI0.SBRG.OMSC._Y0E._LEN, ML01)  // _LEN: Length
                            CreateDWordField (CRS, \_SB.PCI0.SBRG.OMSC._Y0E._BAS, MB01)  // _BAS: Base Address
                            CreateDWordField (CRS, \_SB.PCI0.SBRG.OMSC._Y0F._LEN, ML02)  // _LEN: Length
                            CreateDWordField (CRS, \_SB.PCI0.SBRG.OMSC._Y0F._BAS, MB02)  // _BAS: Base Address
                            MB01 = 0xFEC00000
                            ML01 = 0x1000
                            MB02 = 0xFEE00000
                            ML02 = 0x1000
                            CreateDWordField (CRS1, \_SB.PCI0.SBRG.OMSC._Y10._LEN, ML03)  // _LEN: Length
                            CreateDWordField (CRS1, \_SB.PCI0.SBRG.OMSC._Y10._BAS, MB03)  // _BAS: Base Address
                            CreateDWordField (CRS1, \_SB.PCI0.SBRG.OMSC._Y11._LEN, ML04)  // _LEN: Length
                            CreateDWordField (CRS1, \_SB.PCI0.SBRG.OMSC._Y11._BAS, MB04)  // _BAS: Base Address
                            MB03 = 0xFEC00000
                            ML03 = 0x1000
                            MB04 = 0xFEE00000
                            ML04 = 0x1000
                        }

                        Local0 = (0x05 << 0x0A)
                        If ((IOST & Local0))
                        {
                            Return (CRS) /* \_SB_.PCI0.SBRG.OMSC.CRS_ */
                        }
                        Else
                        {
                            Return (CRS1) /* \_SB_.PCI0.SBRG.OMSC.CRS1 */
                        }
                    }
                }

                Device (^^RMEM)
                {
                    Name (_HID, EisaId ("PNP0C01") /* System Board */)  // _HID: Hardware ID
                    Name (_UID, One)  // _UID: Unique ID
                    Name (CRS, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x000A0000,         // Address Length
                            )
                        Memory32Fixed (ReadOnly,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y12)
                        Memory32Fixed (ReadOnly,
                            0x000E0000,         // Address Base
                            0x00020000,         // Address Length
                            _Y13)
                        Memory32Fixed (ReadWrite,
                            0x00100000,         // Address Base
                            0x00000000,         // Address Length
                            _Y14)
                        Memory32Fixed (ReadOnly,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y15)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (CRS, \_SB.RMEM._Y12._BAS, BAS1)  // _BAS: Base Address
                        CreateDWordField (CRS, \_SB.RMEM._Y12._LEN, LEN1)  // _LEN: Length
                        CreateDWordField (CRS, \_SB.RMEM._Y13._BAS, BAS2)  // _BAS: Base Address
                        CreateDWordField (CRS, \_SB.RMEM._Y13._LEN, LEN2)  // _LEN: Length
                        CreateDWordField (CRS, \_SB.RMEM._Y14._LEN, LEN3)  // _LEN: Length
                        CreateDWordField (CRS, \_SB.RMEM._Y15._BAS, BAS4)  // _BAS: Base Address
                        CreateDWordField (CRS, \_SB.RMEM._Y15._LEN, LEN4)  // _LEN: Length
                        If (OSFL ()) {}
                        Else
                        {
                            If (MG1B)
                            {
                                If ((MG1B > 0x000C0000))
                                {
                                    BAS1 = 0x000C0000
                                    LEN1 = (MG1B - BAS1) /* \_SB_.RMEM._CRS.BAS1 */
                                }
                            }
                            Else
                            {
                                BAS1 = 0x000C0000
                                LEN1 = 0x00020000
                            }

                            If (Local0 = (MG1B + MG1L) /* \MG1L */)
                            {
                                BAS2 = Local0
                                LEN2 = (0x00100000 - BAS2) /* \_SB_.RMEM._CRS.BAS2 */
                            }
                        }

                        LEN3 = (MG2B - 0x00100000)
                        BAS4 = MH1B /* \MH1B */
                        LEN4 = (Zero - BAS4) /* \_SB_.RMEM._CRS.BAS4 */
                        Return (CRS) /* \_SB_.RMEM.CRS_ */
                    }
                }
            }

            Device (IMAP)
            {
                Name (_ADR, 0x00030001)  // _ADR: Address
                OperationRegion (PIMC, PCI_Config, 0x60, 0x54)
                Field (PIMC, ByteAcc, NoLock, Preserve)
                {
                    PIID,   8, 
                    Offset (0x04), 
                    PILN,   8, 
                    Offset (0x08), 
                    PIU0,   8, 
                    PIU2,   8, 
                    UBR1,   8, 
                    UBR2,   8, 
                    Offset (0x0D), 
                    Offset (0x0E), 
                    PIRM,   8, 
                    PMUD,   8, 
                    PAZA,   8, 
                    GPUR,   8, 
                    PR0E,   8, 
                    Offset (0x14), 
                    PIRA,   8, 
                    PIRB,   8, 
                    PIRC,   8, 
                    PIRD,   8, 
                    Offset (0x1C), 
                    P0EA,   8, 
                    P0EB,   8, 
                    P0EC,   8, 
                    P0ED,   8, 
                    P1EA,   8, 
                    P1EB,   8, 
                    P1EC,   8, 
                    P1ED,   8, 
                    P2EA,   8, 
                    P2EB,   8, 
                    P2EC,   8, 
                    P2ED,   8, 
                    P3EA,   8, 
                    P3EB,   8, 
                    P3EC,   8, 
                    P3ED,   8, 
                    P4EA,   8, 
                    P4EB,   8, 
                    P4EC,   8, 
                    P4ED,   8, 
                    P5EA,   8, 
                    P5EB,   8, 
                    P5EC,   8, 
                    P5ED,   8, 
                    P6EA,   8, 
                    P6EB,   8, 
                    P6EC,   8, 
                    P6ED,   8, 
                    P7EA,   8, 
                    P7EB,   8, 
                    P7EC,   8, 
                    P7ED,   8, 
                    Offset (0x4C), 
                    XVE0,   8, 
                    XVE1,   8, 
                    XVE2,   8, 
                    XVE3,   8, 
                    XVE4,   8, 
                    XVE5,   8, 
                    XVE6,   8, 
                    XVE7,   8
                }
            }

            Device (SMB0)
            {
                Name (_ADR, 0x00030002)  // _ADR: Address
                OperationRegion (SMAD, PCI_Config, 0x20, 0x08)
                Field (SMAD, DWordAcc, NoLock, Preserve)
                {
                    SB1,    32, 
                    SB2,    32
                }

                OperationRegion (SMCF, PCI_Config, 0x48, 0x10)
                Field (SMCF, DWordAcc, NoLock, Preserve)
                {
                    SMPM,   4, 
                    SMT1,   28, 
                    SMT2,   32
                }

                OperationRegion (SME4, PCI_Config, 0xE4, 0x04)
                Field (SME4, AnyAcc, NoLock, Preserve)
                {
                        ,   17, 
                    XPME,   1
                }

                Method (GPMD, 1, NotSerialized)
                {
                    XPME = Arg0
                }

                Method (SMBB, 0, NotSerialized)
                {
                    Local0 = (SB1 & 0xFFFE)
                    Local0 = (SB2 & 0xFFFE)
                    Return (Local0)
                }

                Scope (^^PCI0)
                {
                    OperationRegion (SM00, SystemIO, SMB0.SMBB (), 0x40)
                    Field (SM00, ByteAcc, NoLock, Preserve)
                    {
                        CTLR,   8, 
                        HSTS,   8, 
                        ADDR,   8, 
                        CMDR,   8, 
                        DAT0,   8, 
                        DAT1,   8, 
                        Offset (0x25), 
                        ALAD,   8, 
                        ALDL,   8, 
                        ALDH,   8
                    }

                    Field (SM00, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x04), 
                        SB32,   256
                    }

                    Method (SWFS, 0, NotSerialized)
                    {
                        Local0 = (HSTS & 0x80)
                        While ((Local0 == Zero))
                        {
                            Stall (One)
                            Local0 = (HSTS & 0x80)
                        }
                    }

                    Method (SMSB, 2, NotSerialized)
                    {
                        SRBY (Arg0, Arg1)
                    }

                    Method (SRBY, 2, NotSerialized)
                    {
                        ADDR = Arg0
                        CMDR = Arg1
                        CTLR = 0x04
                        SWFS ()
                    }

                    Method (SMWB, 3, NotSerialized)
                    {
                        WBYT (Arg0, Arg1, Arg2)
                    }

                    Method (WBYT, 3, NotSerialized)
                    {
                        ADDR = Arg0
                        CMDR = Arg1
                        DAT0 = Arg2
                        CTLR = 0x06
                        SWFS ()
                    }

                    Method (SMWW, 4, NotSerialized)
                    {
                        ADDR = Arg0
                        CMDR = Arg1
                        DAT0 = Arg2
                        DAT1 = Arg3
                        CTLR = 0x08
                        SWFS ()
                    }

                    Method (SMRB, 2, NotSerialized)
                    {
                        Return (RBYT (Arg0, Arg1))
                    }

                    Method (RBYT, 2, NotSerialized)
                    {
                        ADDR = Arg0
                        CMDR = Arg1
                        CTLR = 0x07
                        SWFS ()
                        Return (DAT0) /* \_SB_.PCI0.DAT0 */
                    }

                    Method (SMRW, 2, NotSerialized)
                    {
                        ADDR = Arg0
                        CMDR = Arg1
                        CTLR = 0x09
                        SWFS ()
                        Local0 = DAT0 /* \_SB_.PCI0.DAT0 */
                        Local1 = (DAT1 << 0x08)
                        Local2 = (Local0 | Local1)
                        Return (Local2)
                    }

                    Method (SRBK, 2, NotSerialized)
                    {
                        ADDR = Arg0
                        CMDR = Arg1
                        CTLR = 0x0B
                        SWFS ()
                        Return (SB32) /* \_SB_.PCI0.SB32 */
                    }

                    Method (NVH7, 0, NotSerialized)
                    {
                        If ((SLOW == One))
                        {
                            ^SMB0.SMT2 = 0x966A
                        }

                        Return (Package (0x05)
                        {
                            0xC6, 
                            0xC8, 
                            0xCA, 
                            0xCC, 
                            0xCE
                        })
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (TRM0)
            {
                Name (_ADR, 0x00030004)  // _ADR: Address
            }

            Device (USB0)
            {
                Name (_ADR, 0x00040000)  // _ADR: Address
                Name (_S1D, One)  // _S1D: S1 Device State
                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    If (((OSFL () == One) || (OSFL () == 0x02)))
                    {
                        Return (0x02)
                    }
                    Else
                    {
                        Return (0x03)
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0D, 0x04))
                }
            }

            Device (USB2)
            {
                Name (_ADR, 0x00040001)  // _ADR: Address
                Name (_S1D, One)  // _S1D: S1 Device State
                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    If (((OSFL () == One) || (OSFL () == 0x02)))
                    {
                        Return (0x02)
                    }
                    Else
                    {
                        Return (0x03)
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x05, 0x04))
                }
            }

            Device (NMAC)
            {
                Name (_ADR, 0x000A0000)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x0B, 
                    0x05
                })
                Scope (\_GPE)
                {
                    Method (_L0B, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
                    {
                        Notify (\_SB.PCI0.NMAC, 0x02) // Device Wake
                        Notify (\_SB.PWRB, 0x02) // Device Wake
                    }
                }
            }

            Device (ATA0)
            {
                Name (_ADR, 0x000B0000)  // _ADR: Address
                Device (PRI0)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (SPTM, Buffer (0x14)
                    {
                        /* 0000 */  0x78, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  /* x....... */
                        /* 0008 */  0x78, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  /* x....... */
                        /* 0010 */  0x17, 0x00, 0x00, 0x00                           /* .... */
                    })
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Return (SPTM) /* \_SB_.PCI0.ATA0.PRI0.SPTM */
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        SPTM = Arg0
                    }

                    Device (MAST)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Local0 = Buffer (0x07)
                                {
                                     0x03, 0x46, 0x00, 0x00, 0x00, 0xA0, 0xEF         /* .F..... */
                                }
                            Return (Concatenate (Local0, FZTF))
                        }
                    }

                    Device (SLAV)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Local0 = Buffer (0x07)
                                {
                                     0x03, 0x46, 0x00, 0x00, 0x00, 0xB0, 0xEF         /* .F..... */
                                }
                            Return (Concatenate (Local0, FZTF))
                        }
                    }
                }

                Device (SEC0)
                {
                    Name (_ADR, One)  // _ADR: Address
                    Name (SSTM, Buffer (0x14)
                    {
                        /* 0000 */  0x78, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  /* x....... */
                        /* 0008 */  0x78, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  /* x....... */
                        /* 0010 */  0x17, 0x00, 0x00, 0x00                           /* .... */
                    })
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Return (SSTM) /* \_SB_.PCI0.ATA0.SEC0.SSTM */
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        SSTM = Arg0
                    }

                    Device (MAST)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Local0 = Buffer (0x07)
                                {
                                     0x03, 0x46, 0x00, 0x00, 0x00, 0xA0, 0xEF         /* .F..... */
                                }
                            Return (Concatenate (Local0, FZTF))
                        }
                    }

                    Device (SLAV)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Local0 = Buffer (0x07)
                                {
                                     0x03, 0x46, 0x00, 0x00, 0x00, 0xB0, 0xEF         /* .F..... */
                                }
                            Return (Concatenate (Local0, FZTF))
                        }
                    }
                }

                Method (DRMP, 0, NotSerialized)
                {
                    Local0 = 0x08
                    Local1 = (CPB0 >> Local0)
                    Local0 = (Local1 & 0x3F)
                    Return (Local0)
                }
            }

            Device (PBB0)
            {
                Name (_ADR, 0x00090000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (Zero, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR01) /* \_SB_.AR01 */
                    }

                    Return (PR01) /* \_SB_.PR01 */
                }
            }

            Device (HDAC)
            {
                Name (_ADR, 0x00080000)  // _ADR: Address
                Name (SCID, Zero)
                Name (SACW, Zero)
                Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                {
                    If (SCID)
                    {
                        PMDS = Zero
                        PMEN = Zero
                        CDID = SCID /* \_SB_.PCI0.HDAC.SCID */
                        AOCW = SACW /* \_SB_.PCI0.HDAC.SACW */
                    }
                }

                Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                {
                    SACW = AOCW /* \_SB_.PCI0.HDAC.AOCW */
                    SCID = CDID /* \_SB_.PCI0.HDAC.CDID */
                    PMST = One
                    PMDS = 0x03
                    PMEN = One
                }

                OperationRegion (PMCF, PCI_Config, 0x48, 0x02)
                Field (PMCF, ByteAcc, NoLock, Preserve)
                {
                    PMDS,   2, 
                    Offset (0x01), 
                    PMEN,   1, 
                        ,   6, 
                    PMST,   1
                }

                OperationRegion (DCF2, PCI_Config, 0xE0, 0x08)
                Field (DCF2, ByteAcc, NoLock, Preserve)
                {
                    AOCW,   32, 
                    Offset (0x06), 
                    CDID,   8
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x15, 0x04))
                }
            }

            Device (IXVE)
            {
                Name (_ADR, 0x00100000)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR02) /* \_SB_.AR02 */
                    }

                    Return (PR02) /* \_SB_.PR02 */
                }

                Device (IGPU)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                }
            }

            Device (XVR0)
            {
                Name (_ADR, 0x000C0000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x11, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR03) /* \_SB_.AR03 */
                    }

                    Return (PR03) /* \_SB_.PR03 */
                }

                Device (XVS0)
                {
                    Name (_ADR, 0xFFFF)  // _ADR: Address
                }
            }

            Device (XVR1)
            {
                Name (_ADR, 0x000D0000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x11, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR04) /* \_SB_.AR04 */
                    }

                    Return (PR04) /* \_SB_.PR04 */
                }

                Device (XVS1)
                {
                    Name (_ADR, 0xFFFF)  // _ADR: Address
                }
            }

            Device (P0P5)
            {
                Name (_ADR, 0x000E0000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x11, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR05) /* \_SB_.AR05 */
                    }

                    Return (PR05) /* \_SB_.PR05 */
                }
            }

            Device (P0P6)
            {
                Name (_ADR, 0x00150000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x11, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR06) /* \_SB_.AR06 */
                    }

                    Return (PR06) /* \_SB_.PR06 */
                }
            }

            Device (P0P7)
            {
                Name (_ADR, 0x00160000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x11, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR07) /* \_SB_.AR07 */
                    }

                    Return (PR07) /* \_SB_.PR07 */
                }
            }

            Device (P0P8)
            {
                Name (_ADR, 0x00170000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x11, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR08) /* \_SB_.AR08 */
                    }

                    Return (PR08) /* \_SB_.PR08 */
                }
            }

            Device (P0P9)
            {
                Name (_ADR, 0x00180000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x11, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR09) /* \_SB_.AR09 */
                    }

                    Return (PR09) /* \_SB_.PR09 */
                }
            }
        }

        Scope (\_GPE)
        {
            Method (_L09, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
            {
                Notify (\_SB.PCI0.SMB0, 0x02) // Device Wake
                Notify (\_SB.PWRB, 0x02) // Device Wake
            }

            Method (_L0D, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
            {
                Notify (\_SB.PCI0.USB0, 0x02) // Device Wake
                Notify (\_SB.PWRB, 0x02) // Device Wake
            }

            Method (_L05, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
            {
                Notify (\_SB.PCI0.USB2, 0x02) // Device Wake
                Notify (\_SB.PWRB, 0x02) // Device Wake
            }

            Method (_L00, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
            {
                Notify (\_SB.PCI0.PBB0, 0x02) // Device Wake
                Notify (\_SB.PWRB, 0x02) // Device Wake
            }

            Method (_L15, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
            {
                Notify (\_SB.PCI0.HDAC, 0x02) // Device Wake
                Notify (\_SB.PWRB, 0x02) // Device Wake
            }

            Method (_L11, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
            {
                Notify (\_SB.PCI0.XVR0, 0x02) // Device Wake
                Notify (\_SB.PCI0.XVR1, 0x02) // Device Wake
                Notify (\_SB.PCI0.P0P5, 0x02) // Device Wake
                Notify (\_SB.PCI0.P0P6, 0x02) // Device Wake
                Notify (\_SB.PCI0.P0P7, 0x02) // Device Wake
                Notify (\_SB.PCI0.P0P8, 0x02) // Device Wake
                Notify (\_SB.PCI0.P0P9, 0x02) // Device Wake
                Notify (\_SB.PWRB, 0x02) // Device Wake
            }
        }

        Device (PWRB)
        {
            Name (_HID, EisaId ("PNP0C0C") /* Power Button Device */)  // _HID: Hardware ID
            Name (_UID, 0xAA)  // _UID: Unique ID
            Name (_STA, 0x0B)  // _STA: Status
        }
    }

    Scope (_SB)
    {
        Name (BUFA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {15}
        })
        CreateWordField (BUFA, One, ICRS)
        Method (LSTA, 1, NotSerialized)
        {
            If (Arg0)
            {
                Return (0x0B)
            }
            Else
            {
                Return (0x09)
            }
        }

        Method (LPRS, 2, NotSerialized)
        {
            If (PICM)
            {
                Return (Arg1)
            }
            Else
            {
                Return (Arg0)
            }
        }

        Method (LCRS, 1, NotSerialized)
        {
            If (PICM)
            {
                Name (BUFB, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, _Y16)
                    {
                        0x00000011,
                    }
                })
                CreateByteField (BUFB, \_SB.LCRS._Y16._INT, AIRQ)  // _INT: Interrupts
                AIRQ = Arg0
                If ((Arg0 == One))
                {
                    AIRQ = 0x17
                }

                If ((Arg0 == 0x02))
                {
                    AIRQ = 0x16
                }

                If ((Arg0 == 0x0D))
                {
                    AIRQ = 0x15
                }

                If ((Arg0 == 0x08))
                {
                    AIRQ = 0x14
                }

                If ((Arg0 == 0x0C))
                {
                    AIRQ = 0x13
                }

                If ((Arg0 == 0x06))
                {
                    AIRQ = 0x12
                }

                If ((Arg0 == 0x04))
                {
                    AIRQ = 0x11
                }

                If ((Arg0 == 0x03))
                {
                    AIRQ = 0x10
                }

                If ((Arg0 == 0x0F))
                {
                    AIRQ = 0x0F
                }

                If ((Arg0 == 0x0E))
                {
                    AIRQ = 0x0E
                }

                If ((Arg0 == 0x0B))
                {
                    AIRQ = 0x0B
                }

                If ((Arg0 == 0x0A))
                {
                    AIRQ = 0x0A
                }

                If ((Arg0 == 0x09))
                {
                    AIRQ = 0x09
                }

                If ((Arg0 == 0x07))
                {
                    AIRQ = 0x07
                }

                If ((Arg0 == 0x05))
                {
                    AIRQ = 0x05
                }

                Return (BUFB) /* \_SB_.LCRS.BUFB */
            }
            Else
            {
                ICRS = (One << Arg0)
                Return (BUFA) /* \_SB_.BUFA */
            }
        }

        Method (LCRO, 1, NotSerialized)
        {
            If (PICM)
            {
                Name (BUFB, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, _Y17)
                    {
                        0x00000014,
                    }
                })
                CreateByteField (BUFB, \_SB.LCRO._Y17._INT, AIRQ)  // _INT: Interrupts
                AIRQ = Arg0
                If ((Arg0 == One))
                {
                    AIRQ = 0x17
                }

                If ((Arg0 == 0x02))
                {
                    AIRQ = 0x16
                }

                If ((Arg0 == 0x0D))
                {
                    AIRQ = 0x15
                }

                If ((Arg0 == 0x08))
                {
                    AIRQ = 0x14
                }

                If ((Arg0 == 0x0C))
                {
                    AIRQ = 0x13
                }

                If ((Arg0 == 0x06))
                {
                    AIRQ = 0x12
                }

                If ((Arg0 == 0x04))
                {
                    AIRQ = 0x11
                }

                If ((Arg0 == 0x03))
                {
                    AIRQ = 0x10
                }

                If ((Arg0 == 0x0F))
                {
                    AIRQ = 0x0F
                }

                If ((Arg0 == 0x0E))
                {
                    AIRQ = 0x0E
                }

                If ((Arg0 == 0x0B))
                {
                    AIRQ = 0x0B
                }

                If ((Arg0 == 0x0A))
                {
                    AIRQ = 0x0A
                }

                If ((Arg0 == 0x09))
                {
                    AIRQ = 0x09
                }

                If ((Arg0 == 0x07))
                {
                    AIRQ = 0x07
                }

                If ((Arg0 == 0x05))
                {
                    AIRQ = 0x05
                }

                Return (BUFB) /* \_SB_.LCRO.BUFB */
            }
            Else
            {
                ICRS = (One << Arg0)
                Return (BUFA) /* \_SB_.BUFA */
            }
        }

        Method (LSRS, 1, NotSerialized)
        {
            If (PICM)
            {
                CreateByteField (Arg0, 0x05, SAIR)
                Local0 = SAIR /* \_SB_.LSRS.SAIR */
                If ((Local0 == 0x17))
                {
                    Local0 = One
                }

                If ((Local0 == 0x16))
                {
                    Local0 = 0x02
                }

                If ((Local0 == 0x15))
                {
                    Local0 = 0x0D
                }

                If ((Local0 == 0x14))
                {
                    Local0 = 0x08
                }

                If ((Local0 == 0x13))
                {
                    Local0 = 0x0C
                }

                If ((Local0 == 0x12))
                {
                    Local0 = 0x06
                }

                If ((Local0 == 0x11))
                {
                    Local0 = 0x04
                }

                If ((Local0 == 0x10))
                {
                    Local0 = 0x03
                }

                If ((Local0 == 0x0F))
                {
                    Local0 = 0x0F
                }

                If ((Local0 == 0x0E))
                {
                    Local0 = 0x0E
                }

                If ((Local0 == 0x0B))
                {
                    Local0 = 0x0B
                }

                If ((Local0 == 0x0A))
                {
                    Local0 = 0x0A
                }

                If ((Local0 == 0x09))
                {
                    Local0 = 0x09
                }

                If ((Local0 == 0x07))
                {
                    Local0 = 0x07
                }

                If ((Local0 == 0x05))
                {
                    Local0 = 0x05
                }

                Return (Local0)
            }
            Else
            {
                CreateWordField (Arg0, One, ISRS)
                FindSetRightBit (ISRS, Local0)
                Return (Local0--)
            }
        }

        Method (LSRO, 1, NotSerialized)
        {
            If (PICM)
            {
                CreateByteField (Arg0, 0x05, SAIR)
                Local0 = SAIR /* \_SB_.LSRO.SAIR */
                If ((Local0 == 0x17))
                {
                    Local0 = One
                }

                If ((Local0 == 0x16))
                {
                    Local0 = 0x02
                }

                If ((Local0 == 0x15))
                {
                    Local0 = 0x0D
                }

                If ((Local0 == 0x14))
                {
                    Local0 = 0x08
                }

                If ((Local0 == 0x13))
                {
                    Local0 = 0x0C
                }

                If ((Local0 == 0x12))
                {
                    Local0 = 0x06
                }

                If ((Local0 == 0x11))
                {
                    Local0 = 0x04
                }

                If ((Local0 == 0x10))
                {
                    Local0 = 0x03
                }

                If ((Local0 == 0x0F))
                {
                    Local0 = 0x0F
                }

                If ((Local0 == 0x0E))
                {
                    Local0 = 0x0E
                }

                If ((Local0 == 0x0B))
                {
                    Local0 = 0x0B
                }

                If ((Local0 == 0x0A))
                {
                    Local0 = 0x0A
                }

                If ((Local0 == 0x09))
                {
                    Local0 = 0x09
                }

                If ((Local0 == 0x07))
                {
                    Local0 = 0x07
                }

                If ((Local0 == 0x05))
                {
                    Local0 = 0x05
                }

                Return (Local0)
            }
            Else
            {
                CreateWordField (Arg0, One, ISRS)
                FindSetRightBit (ISRS, Local0)
                Return (Local0--)
            }
        }

        Device (LNKA)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.PIRA))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (PRSA, RSIR))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.PIRA = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRS (^^PCI0.IMAP.PIRA))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.PIRA = LSRS (Arg0)
            }
        }

        Device (LNKB)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.PIRB))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (PRSB, RSIR))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.PIRB = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRS (^^PCI0.IMAP.PIRB))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.PIRB = LSRS (Arg0)
            }
        }

        Device (LNKC)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.PIRC))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (PRSC, RSIR))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.PIRC = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRS (^^PCI0.IMAP.PIRC))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.PIRC = LSRS (Arg0)
            }
        }

        Device (LNKD)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.PIRD))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (PRSD, RSIR))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.PIRD = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRS (^^PCI0.IMAP.PIRD))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.PIRD = LSRS (Arg0)
            }
        }

        Device (LN0A)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x05)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.P0EA))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (PRSA, RSIR))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.P0EA = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRS (^^PCI0.IMAP.P0EA))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.P0EA = LSRS (Arg0)
            }
        }

        Device (LN0B)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x06)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.P0EB))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (PRSB, RSIR))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.P0EB = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRS (^^PCI0.IMAP.P0EB))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.P0EB = LSRS (Arg0)
            }
        }

        Device (LN0C)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x07)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.P0EC))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (PRSC, RSIR))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.P0EC = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRS (^^PCI0.IMAP.P0EC))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.P0EC = LSRS (Arg0)
            }
        }

        Device (LN0D)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x08)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.P0ED))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (PRSD, RSIR))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.P0ED = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRS (^^PCI0.IMAP.P0ED))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.P0ED = LSRS (Arg0)
            }
        }

        Device (LN1A)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x09)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.P1EA))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (PRSA, RSIR))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.P1EA = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRS (^^PCI0.IMAP.P1EA))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.P1EA = LSRS (Arg0)
            }
        }

        Device (LN1B)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x0A)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.P1EB))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (PRSB, RSIR))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.P1EB = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRS (^^PCI0.IMAP.P1EB))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.P1EB = LSRS (Arg0)
            }
        }

        Device (LN1C)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x0B)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.P1EC))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (PRSC, RSIR))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.P1EC = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRS (^^PCI0.IMAP.P1EC))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.P1EC = LSRS (Arg0)
            }
        }

        Device (LN1D)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x0C)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.P1ED))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (PRSD, RSIR))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.P1ED = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRS (^^PCI0.IMAP.P1ED))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.P1ED = LSRS (Arg0)
            }
        }

        Device (LN2A)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x0D)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.P2EA))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (PRSA, RSIR))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.P2EA = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRS (^^PCI0.IMAP.P2EA))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.P2EA = LSRS (Arg0)
            }
        }

        Device (LN2B)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x0E)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.P2EB))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (PRSB, RSIR))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.P2EB = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRS (^^PCI0.IMAP.P2EB))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.P2EB = LSRS (Arg0)
            }
        }

        Device (LN2C)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x0F)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.P2EC))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (PRSC, RSIR))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.P2EC = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRS (^^PCI0.IMAP.P2EC))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.P2EC = LSRS (Arg0)
            }
        }

        Device (LN2D)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x10)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.P2ED))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (PRSD, RSIR))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.P2ED = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRS (^^PCI0.IMAP.P2ED))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.P2ED = LSRS (Arg0)
            }
        }

        Device (LN3A)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x11)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.P3EA))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (PRSA, RSIR))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.P3EA = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRS (^^PCI0.IMAP.P3EA))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.P3EA = LSRS (Arg0)
            }
        }

        Device (LN3B)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x12)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.P3EB))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (PRSB, RSIR))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.P3EB = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRS (^^PCI0.IMAP.P3EB))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.P3EB = LSRS (Arg0)
            }
        }

        Device (LN3C)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x13)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.P3EC))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (PRSC, RSIR))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.P3EC = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRS (^^PCI0.IMAP.P3EC))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.P3EC = LSRS (Arg0)
            }
        }

        Device (LN3D)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x14)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.P3ED))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (PRSD, RSIR))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.P3ED = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRS (^^PCI0.IMAP.P3ED))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.P3ED = LSRS (Arg0)
            }
        }

        Device (LN4A)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x15)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.P4EA))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (PRSA, RSIR))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.P4EA = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRS (^^PCI0.IMAP.P4EA))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.P4EA = LSRS (Arg0)
            }
        }

        Device (LN4B)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x16)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.P4EB))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (PRSB, RSIR))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.P4EB = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRS (^^PCI0.IMAP.P4EB))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.P4EB = LSRS (Arg0)
            }
        }

        Device (LN4C)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x17)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.P4EC))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (PRSC, RSIR))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.P4EC = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRS (^^PCI0.IMAP.P4EC))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.P4EC = LSRS (Arg0)
            }
        }

        Device (LN4D)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x18)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.P4ED))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (PRSD, RSIR))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.P4ED = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRS (^^PCI0.IMAP.P4ED))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.P4ED = LSRS (Arg0)
            }
        }

        Device (LN5A)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x19)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.P5EA))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (PRSA, RSIR))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.P5EA = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRS (^^PCI0.IMAP.P5EA))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.P5EA = LSRS (Arg0)
            }
        }

        Device (LN5B)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x1A)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.P5EB))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (PRSB, RSIR))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.P5EB = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRS (^^PCI0.IMAP.P5EB))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.P5EB = LSRS (Arg0)
            }
        }

        Device (LN5C)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x1B)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.P5EC))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (PRSC, RSIR))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.P5EC = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRS (^^PCI0.IMAP.P5EC))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.P5EC = LSRS (Arg0)
            }
        }

        Device (LN5D)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x1B)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.P5ED))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (PRSD, RSIR))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.P5ED = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRS (^^PCI0.IMAP.P5ED))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.P5ED = LSRS (Arg0)
            }
        }

        Device (LN6A)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x1C)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.P6EA))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (PRSA, RSIR))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.P6EA = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRS (^^PCI0.IMAP.P6EA))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.P6EA = LSRS (Arg0)
            }
        }

        Device (LN6B)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x1D)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.P6EB))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (PRSB, RSIR))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.P6EB = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRS (^^PCI0.IMAP.P6EB))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.P6EB = LSRS (Arg0)
            }
        }

        Device (LN6C)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x1E)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.P6EC))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (PRSC, RSIR))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.P6EC = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRS (^^PCI0.IMAP.P6EC))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.P6EC = LSRS (Arg0)
            }
        }

        Device (LN6D)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x1F)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.P6ED))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (PRSD, RSIR))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.P6ED = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRS (^^PCI0.IMAP.P6ED))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.P6ED = LSRS (Arg0)
            }
        }

        Device (LUB0)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x24)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.PIU0))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (RSB0, RSU1))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.PIU0 = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRO (^^PCI0.IMAP.PIU0))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.PIU0 = LSRO (Arg0)
            }
        }

        Device (LUB2)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x25)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.PIU2))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (RSB2, RSI1))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.PIU2 = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRO (^^PCI0.IMAP.PIU2))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.PIU2 = LSRO (Arg0)
            }
        }

        Device (LMAC)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x26)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.PILN))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (RSAC, RSMA))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.PILN = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRO (^^PCI0.IMAP.PILN))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.PILN = LSRO (Arg0)
            }
        }

        Device (LAZA)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x27)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.PAZA))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (RSZA, RSII))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.PAZA = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRO (^^PCI0.IMAP.PAZA))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.PAZA = LSRO (Arg0)
            }
        }

        Device (SGRU)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x28)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.GPUR))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (RSRU, RSIG))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.GPUR = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRO (^^PCI0.IMAP.GPUR))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.GPUR = LSRO (Arg0)
            }
        }

        Device (LSMB)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x29)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.PIRM))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (RSMB, RSII))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.PIRM = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRO (^^PCI0.IMAP.PIRM))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.PIRM = LSRO (Arg0)
            }
        }

        Device (LPMU)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x2A)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.PMUD))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (RSMU, RSII))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.PMUD = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRO (^^PCI0.IMAP.PMUD))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.PMUD = LSRO (Arg0)
            }
        }

        Device (LSA0)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x2B)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.PIID))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (RSA0, RSSA))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.PIID = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRO (^^PCI0.IMAP.PIID))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.PIID = LSRO (Arg0)
            }
        }

        Device (LATA)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x2C)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.PR0E))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (RSTA, RSII))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.PR0E = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                If (OSFL ())
                {
                    Return (Zero)
                }
                Else
                {
                    Return (LCRO (^^PCI0.IMAP.PR0E))
                }
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.PR0E = LSRO (Arg0)
            }
        }

        Device (UB11)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x2D)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.UBR1))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (RS11, RSU2))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.UBR1 = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRO (^^PCI0.IMAP.UBR1))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.UBR1 = LSRO (Arg0)
            }
        }

        Device (UB12)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x2E)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.UBR2))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (RS12, RSI2))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.UBR2 = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRO (^^PCI0.IMAP.UBR2))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.UBR2 = LSRO (Arg0)
            }
        }

        Device (LRP0)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x2B)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.XVE0))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (RSP0, RSII))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.XVE0 = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRS (^^PCI0.IMAP.XVE0))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.XVE0 = LSRS (Arg0)
            }
        }

        Device (LRP1)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x2C)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.XVE1))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (RSP1, RSII))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.XVE1 = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRS (^^PCI0.IMAP.XVE1))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.XVE1 = LSRS (Arg0)
            }
        }

        Device (LRP2)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x2D)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.XVE2))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (RSP2, RSII))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.XVE2 = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRS (^^PCI0.IMAP.XVE2))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.XVE2 = LSRS (Arg0)
            }
        }

        Device (LRP3)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x2E)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.XVE3))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (RSP3, RSII))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.XVE3 = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRS (^^PCI0.IMAP.XVE3))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.XVE3 = LSRS (Arg0)
            }
        }

        Device (LRP4)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x2F)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.XVE4))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (RSP4, RSII))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.XVE4 = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRS (^^PCI0.IMAP.XVE4))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.XVE4 = LSRS (Arg0)
            }
        }

        Device (LRP5)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x30)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.XVE5))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (RSP5, RSII))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.XVE5 = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRS (^^PCI0.IMAP.XVE5))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.XVE5 = LSRS (Arg0)
            }
        }

        Device (LRP6)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x31)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (LSTA (^^PCI0.IMAP.XVE6))
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (LPRS (RSP6, RSII))
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                ^^PCI0.IMAP.XVE6 = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (LCRS (^^PCI0.IMAP.XVE6))
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                ^^PCI0.IMAP.XVE6 = LSRS (Arg0)
            }
        }
    }

    Scope (_SB.PCI0)
    {
        OperationRegion (HDCP, SystemMemory, 0x6FF9E0E4, 0x0260)
        Field (HDCP, AnyAcc, NoLock, Preserve)
        {
            SIGN,   48, 
            CHKS,   8, 
            RESR,   8, 
            GLOB,   4800
        }

        Alias (GLOB, HDCB)
    }

    Alias (DBG8, DBUG)
    Scope (_SB.PCI0)
    {
        Name (NVVR, "MCP79 NVACPI 2009-02-26 18:00:00")
        OperationRegion (P88R, PCI_Config, 0x88, 0x04)
        Field (P88R, ByteAcc, NoLock, Preserve)
        {
            CCEC,   11
        }

        Method (GPXX, 0, NotSerialized)
        {
            Local0 = (CCEC * 0x02000000)
            Return (Local0)
        }

        Method (CMPB, 2, NotSerialized)
        {
            Local1 = SizeOf (Arg0)
            If ((Local1 != SizeOf (Arg1)))
            {
                Return (Zero)
            }

            Local0 = Zero
            While ((Local0 < Local1))
            {
                If ((DerefOf (Index (Arg0, Local0)) != DerefOf (Index (Arg1, Local0
                    ))))
                {
                    Return (Zero)
                }

                Local0++
            }

            Return (One)
        }

        Method (W2K6, 0, NotSerialized)
        {
            If (CondRefOf (_OSI, Local0))
            {
                If (_OSI ("Windows 2006"))
                {
                    Return (One)
                }
            }

            Return (Zero)
        }

        Scope (\_SB.PCI0)
        {
            Method (GPC0, 0, NotSerialized)
            {
                Local0 = (GPXX () + 0x0001B000)
                Return (Local0)
            }

            Method (GPC1, 0, NotSerialized)
            {
                Local0 = (GPXX () + 0xB000)
                Return (Local0)
            }

            Method (GPC2, 0, NotSerialized)
            {
                Local0 = (GPXX () + 0xC000)
                Return (Local0)
            }

            Method (GPC3, 0, NotSerialized)
            {
                Local0 = (GPXX () + 0xE100)
                Return (Local0)
            }

            OperationRegion (P4MR, SystemMemory, GPC0 (), 0xFF)
            Field (P4MR, ByteAcc, NoLock, Preserve)
            {
                Offset (0x44), 
                BPLM,   8, 
                    ,   1, 
                BPLN,   8, 
                    ,   9, 
                BPLP,   2, 
                Offset (0x74), 
                    ,   18, 
                VCO2,   1, 
                    ,   8, 
                ASYC,   1, 
                Offset (0x78), 
                CPLM,   8, 
                CPLN,   8, 
                Offset (0xC8), 
                MPLM,   4, 
                MPLN,   4
            }

            OperationRegion (OA8D, SystemMemory, GPC1 (), 0xFF)
            Field (OA8D, ByteAcc, NoLock, Preserve)
            {
                Offset (0x50), 
                NIST,   10, 
                    ,   2, 
                NSB1,   4, 
                NSB2,   4, 
                Offset (0x8C), 
                TRFC,   10, 
                Offset (0x8F), 
                TRCD,   4, 
                WRRC,   4, 
                Offset (0x91), 
                TR2P,   4, 
                Offset (0x9C), 
                Offset (0x9D), 
                TRP,    4, 
                Offset (0xA0), 
                Offset (0xA2), 
                TRC,    6, 
                Offset (0xA8), 
                TROE,   1, 
                    ,   3, 
                TROI,   3, 
                Offset (0xF4), 
                BWCP,   7, 
                Offset (0xF5), 
                BWIS,   7, 
                Offset (0xF6), 
                BWWB,   7, 
                Offset (0xF7), 
                BWHP,   7, 
                HPCR,   1
            }

            OperationRegion (O8ER, SystemMemory, GPC2 (), 0xFF)
            Field (O8ER, ByteAcc, NoLock, Preserve)
            {
                Offset (0x70), 
                CDP0,   1, 
                Offset (0x71), 
                CDS0,   8, 
                    ,   4, 
                CDC0,   4, 
                    ,   5, 
                CDB0,   2, 
                Offset (0x74), 
                CDP1,   1, 
                Offset (0x75), 
                CDS1,   8, 
                    ,   4, 
                CDC1,   4, 
                    ,   5, 
                CDB1,   2, 
                Offset (0x78), 
                CDP2,   1, 
                Offset (0x79), 
                CDS2,   8, 
                    ,   4, 
                CDC2,   4, 
                    ,   5, 
                CDB2,   2, 
                Offset (0x7C), 
                CDP3,   1, 
                Offset (0x7D), 
                CDS3,   8, 
                    ,   4, 
                CDC3,   4, 
                    ,   5, 
                CDB3,   2, 
                Offset (0x80), 
                INTL,   2, 
                RCBD,   2, 
                Offset (0x81), 
                PCIH,   5, 
                Offset (0x88), 
                TOM1,   8, 
                TOM2,   9, 
                Offset (0x90), 
                P0P0,   1, 
                P1P0,   1, 
                P0N0,   1, 
                P1N0,   1, 
                PCR0,   1, 
                Offset (0x91), 
                PCB0,   9, 
                Offset (0x93), 
                PCS0,   8, 
                P0P1,   1, 
                P1P1,   1, 
                P0N1,   1, 
                P1N1,   1, 
                PCR1,   1, 
                Offset (0x95), 
                PCB1,   9, 
                Offset (0x97), 
                PCS1,   8, 
                P0P2,   1, 
                P1P2,   1, 
                P0N2,   1, 
                P1N2,   1, 
                PCR2,   1, 
                Offset (0x99), 
                PCB2,   9, 
                Offset (0x9B), 
                PCS2,   8, 
                P0P3,   1, 
                P1P3,   1, 
                P0N3,   1, 
                P1N3,   1, 
                PCR3,   1, 
                Offset (0x9D), 
                PCB3,   9, 
                Offset (0x9F), 
                PCS3,   8, 
                P0P4,   1, 
                P1P4,   1, 
                P0N4,   1, 
                P1N4,   1, 
                PCR4,   1, 
                Offset (0xA1), 
                PCB4,   9, 
                Offset (0xA3), 
                PCS4,   8, 
                Offset (0xC4), 
                REFP,   16, 
                REFB,   4
            }

            OperationRegion (OEER, SystemMemory, GPC3 (), 0xFF)
            Field (OEER, ByteAcc, NoLock, Preserve)
            {
                Offset (0xAA), 
                CKDY,   16
            }

            Method (CIMP, 0, NotSerialized)
            {
                Name (BU2A, Buffer (0x04)
                {
                     0x00                                             /* . */
                })
                CreateField (BU2A, 0x10, 0x04, BF03)
                CreateField (BU2A, 0x14, 0x04, BF04)
                Name (BU2B, Buffer (0x04)
                {
                     0x00                                             /* . */
                })
                CreateField (BU2B, Zero, 0x0B, BF07)
                CreateField (BU2B, 0x0B, 0x0E, BF08)
                Name (BU2C, Buffer (0x0A)
                {
                     0x00                                             /* . */
                })
                CreateField (BU2C, Zero, 0x03, BF0A)
                CreateField (BU2C, 0x03, 0x04, BF0B)
                CreateField (BU2C, 0x07, 0x04, BF0C)
                CreateField (BU2C, 0x0B, 0x04, BF0D)
                CreateField (BU2C, 0x0F, 0x04, BF0E)
                CreateField (BU2C, 0x13, 0x26, BF0F)
                Name (BU2D, Buffer (0x0A)
                {
                     0x00                                             /* . */
                })
                CreateField (BU2D, Zero, 0x10, BF1A)
                CreateField (BU2D, 0x10, 0x0B, TAVN)
                CreateField (BU2D, 0x1B, 0x0A, BASL)
                CreateField (BU2D, 0x25, 0x0B, LBWF)
                CreateField (BU2D, 0x30, 0x0C, ATBW)
                CreateField (BU2D, 0x3C, 0x0A, CLTF)
                CreateField (BU2D, 0x46, 0x0A, PMPF)
                Name (BNKN, Zero)
                Name (BNKX, Zero)
                Name (COLN, Zero)
                Name (COLX, Zero)
                Index (BU2A, Zero) = 0x10
                Index (BU2A, One) = 0x08
                Index (BU2A, 0x02) = 0x12
                Index (BU2A, 0x03) = 0xAA
                BF04 = 0x02
                Name (M2CL, Zero)
                M2CL = GM2C ()
                BF08 = (M2CL * 0x02)
                BF07 = BASM (M2CL)
                Local2 = BU2B /* \_SB_.PCI0.CIMP.BU2B */
                If ((RCBD == Zero))
                {
                    BF03 = One
                    BF0F = (0x08000000 * TOM1) /* \_SB_.PCI0.TOM1 */
                    BF0A = One
                    If (INTL)
                    {
                        BF0A = 0x02
                    }

                    If (CDP0)
                    {
                        BF0D = CDC0 /* \_SB_.PCI0.CDC0 */
                        BF0B = CDB0 /* \_SB_.PCI0.CDB0 */
                    }
                    Else
                    {
                        If (CDP1)
                        {
                            BF0D = CDC1 /* \_SB_.PCI0.CDC1 */
                            BF0B = CDB1 /* \_SB_.PCI0.CDB1 */
                        }
                        Else
                        {
                            If (CDP2)
                            {
                                BF0D = CDC2 /* \_SB_.PCI0.CDC2 */
                                BF0B = CDB2 /* \_SB_.PCI0.CDB2 */
                            }
                            Else
                            {
                                If (CDP3)
                                {
                                    BF0D = CDC3 /* \_SB_.PCI0.CDC3 */
                                    BF0B = CDB3 /* \_SB_.PCI0.CDB3 */
                                }
                            }
                        }
                    }

                    BF0E = BF0D /* \_SB_.PCI0.CIMP.BF0D */
                    BF0C = BF0B /* \_SB_.PCI0.CIMP.BF0B */
                    Local1 = Local2
                    Concatenate (Local1, BU2C, Local2)
                    If (PCIH)
                    {
                        BF03 = 0x02
                        Local1 = (TOM2 - 0x20)
                        BF0F = (0x08000000 * Local1)
                        Local1 = Local2
                        Concatenate (Local1, BU2C, Local2)
                    }
                }
                Else
                {
                    If ((RCBD == 0x02))
                    {
                        Name (NDRE, Zero)
                        BF03 = Zero
                        Local6 = Zero
                        While (One)
                        {
                            If ((Local6 == 0x05))
                            {
                                Break
                            }

                            If ((MP0P (Local6) || MP1P (Local6)))
                            {
                                BF0F = (MCRS (Local6) * 0x08000000)
                                BF0A = One
                                If (MPCR (Local6))
                                {
                                    If (MP0P (Local6))
                                    {
                                        If (MP1P (Local6))
                                        {
                                            BF0A = 0x02
                                        }
                                    }
                                }

                                BNKN = 0x03
                                BNKX = 0x02
                                COLN = 0x0C
                                COLX = 0x08
                                If (MP0P (Local6))
                                {
                                    Local5 = MP0N (Local6)
                                }
                                Else
                                {
                                    If (MP1P (Local6))
                                    {
                                        Local5 = MP1N (Local6)
                                    }
                                }

                                If ((BNKN > MCDB (Local5)))
                                {
                                    BNKN = MCDB (Local5)
                                }

                                If ((BNKX < MCDB (Local5)))
                                {
                                    BNKX = MCDB (Local5)
                                }

                                If ((COLN > MCDC (Local5)))
                                {
                                    COLN = MCDC (Local5)
                                }

                                If ((COLX < MCDC (Local5)))
                                {
                                    COLX = MCDC (Local5)
                                }

                                BF0B = BNKN /* \_SB_.PCI0.CIMP.BNKN */
                                BF0C = BNKX /* \_SB_.PCI0.CIMP.BNKX */
                                BF0D = COLN /* \_SB_.PCI0.CIMP.COLN */
                                BF0E = COLX /* \_SB_.PCI0.CIMP.COLX */
                                NDRE++
                                Local1 = Local2
                                Concatenate (Local1, BU2C, Local2)
                            }

                            Local6++
                        }

                        BF03 = NDRE /* \_SB_.PCI0.CIMP.NDRE */
                    }
                    Else
                    {
                        Local5 = Zero
                    }
                }

                BASL = BASM (M2CL)
                TAVN = BASL /* \_SB_.PCI0.CIMP.BASL */
                PMPF = PMPM (M2CL)
                CLTF = CLTM (M2CL)
                ATBW = ATBM (M2CL)
                LBWF = 0x0FFF
                BF1A = 0x3E
                Local1 = Local2
                Concatenate (Local1, BU2D, Local2)
                BF1A = 0xFFFF
                ATBW = ATBM (M2CL)
                LBWF = 0x0FFF
                Local1 = Local2
                Concatenate (Local1, BU2D, Local2)
                Concatenate (BU2A, Local2, Local0)
                Return (Local0)
            }

            Method (MP0P, 1, NotSerialized)
            {
                If ((Arg0 == Zero))
                {
                    Return (P0P0) /* \_SB_.PCI0.P0P0 */
                }

                If ((Arg0 == One))
                {
                    Return (P0P1) /* \_SB_.PCI0.P0P1 */
                }

                If ((Arg0 == 0x02))
                {
                    Return (P0P2) /* \_SB_.PCI0.P0P2 */
                }

                If ((Arg0 == 0x03))
                {
                    Return (P0P3) /* \_SB_.PCI0.P0P3 */
                }

                If ((Arg0 == 0x04))
                {
                    Return (P0P4) /* \_SB_.PCI0.P0P4 */
                }
            }

            Method (MP1P, 1, NotSerialized)
            {
                If ((Arg0 == Zero))
                {
                    Return (P1P0) /* \_SB_.PCI0.P1P0 */
                }

                If ((Arg0 == One))
                {
                    Return (P1P1) /* \_SB_.PCI0.P1P1 */
                }

                If ((Arg0 == 0x02))
                {
                    Return (P1P2) /* \_SB_.PCI0.P1P2 */
                }

                If ((Arg0 == 0x03))
                {
                    Return (P1P3) /* \_SB_.PCI0.P1P3 */
                }

                If ((Arg0 == 0x04))
                {
                    Return (P1P4) /* \_SB_.PCI0.P1P4 */
                }
            }

            Method (MPCR, 1, NotSerialized)
            {
                If ((Arg0 == Zero))
                {
                    Return (PCR0) /* \_SB_.PCI0.PCR0 */
                }

                If ((Arg0 == One))
                {
                    Return (PCR1) /* \_SB_.PCI0.PCR1 */
                }

                If ((Arg0 == 0x02))
                {
                    Return (PCR2) /* \_SB_.PCI0.PCR2 */
                }

                If ((Arg0 == 0x03))
                {
                    Return (PCR3) /* \_SB_.PCI0.PCR3 */
                }

                If ((Arg0 == 0x04))
                {
                    Return (PCR4) /* \_SB_.PCI0.PCR4 */
                }
            }

            Method (MP0N, 1, NotSerialized)
            {
                If ((Arg0 == Zero))
                {
                    Return (P0N0) /* \_SB_.PCI0.P0N0 */
                }

                If ((Arg0 == One))
                {
                    Return (P0N1) /* \_SB_.PCI0.P0N1 */
                }

                If ((Arg0 == 0x02))
                {
                    Return (P0N2) /* \_SB_.PCI0.P0N2 */
                }

                If ((Arg0 == 0x03))
                {
                    Return (P0N3) /* \_SB_.PCI0.P0N3 */
                }

                If ((Arg0 == 0x04))
                {
                    Return (P0N4) /* \_SB_.PCI0.P0N4 */
                }
            }

            Method (MP1N, 1, NotSerialized)
            {
                If ((Arg0 == Zero))
                {
                    Return (P1N0) /* \_SB_.PCI0.P1N0 */
                }

                If ((Arg0 == One))
                {
                    Return (P1N1) /* \_SB_.PCI0.P1N1 */
                }

                If ((Arg0 == 0x02))
                {
                    Return (P1N2) /* \_SB_.PCI0.P1N2 */
                }

                If ((Arg0 == 0x03))
                {
                    Return (P1N3) /* \_SB_.PCI0.P1N3 */
                }

                If ((Arg0 == 0x04))
                {
                    Return (P1N4) /* \_SB_.PCI0.P1N4 */
                }
            }

            Method (MCRB, 1, NotSerialized)
            {
                If ((Arg0 == Zero))
                {
                    Return (PCB0) /* \_SB_.PCI0.PCB0 */
                }

                If ((Arg0 == One))
                {
                    Return (PCB1) /* \_SB_.PCI0.PCB1 */
                }

                If ((Arg0 == 0x02))
                {
                    Return (PCB2) /* \_SB_.PCI0.PCB2 */
                }

                If ((Arg0 == 0x03))
                {
                    Return (PCB3) /* \_SB_.PCI0.PCB3 */
                }

                If ((Arg0 == 0x04))
                {
                    Return (PCB4) /* \_SB_.PCI0.PCB4 */
                }
            }

            Method (MCRS, 1, NotSerialized)
            {
                If ((Arg0 == Zero))
                {
                    Return (PCS0) /* \_SB_.PCI0.PCS0 */
                }

                If ((Arg0 == One))
                {
                    Return (PCS1) /* \_SB_.PCI0.PCS1 */
                }

                If ((Arg0 == 0x02))
                {
                    Return (PCS2) /* \_SB_.PCI0.PCS2 */
                }

                If ((Arg0 == 0x03))
                {
                    Return (PCS3) /* \_SB_.PCI0.PCS3 */
                }

                If ((Arg0 == 0x04))
                {
                    Return (PCS4) /* \_SB_.PCI0.PCS4 */
                }
            }

            Method (MCDB, 1, NotSerialized)
            {
                If ((Arg0 == Zero))
                {
                    Return (CDB0) /* \_SB_.PCI0.CDB0 */
                }

                If ((Arg0 == One))
                {
                    Return (CDB1) /* \_SB_.PCI0.CDB1 */
                }

                If ((Arg0 == 0x02))
                {
                    Return (CDB2) /* \_SB_.PCI0.CDB2 */
                }

                If ((Arg0 == 0x03))
                {
                    Return (CDB3) /* \_SB_.PCI0.CDB3 */
                }
            }

            Method (MCDC, 1, NotSerialized)
            {
                If ((Arg0 == Zero))
                {
                    Return (CDC0) /* \_SB_.PCI0.CDC0 */
                }

                If ((Arg0 == One))
                {
                    Return (CDC1) /* \_SB_.PCI0.CDC1 */
                }

                If ((Arg0 == 0x02))
                {
                    Return (CDC2) /* \_SB_.PCI0.CDC2 */
                }

                If ((Arg0 == 0x03))
                {
                    Return (CDC3) /* \_SB_.PCI0.CDC3 */
                }
            }

            Method (NOCH, 0, NotSerialized)
            {
                If ((INTL == 0x03))
                {
                    Local6 = 0x02
                }
                Else
                {
                    If ((INTL == Zero))
                    {
                        Local6 = One
                    }
                    Else
                    {
                        If ((INTL == 0x02))
                        {
                            Local0 = (CDP0 * CDS0) /* \_SB_.PCI0.CDS0 */
                            Local1 = (CDP1 * CDS1) /* \_SB_.PCI0.CDS1 */
                            Local2 = (CDP2 * CDS2) /* \_SB_.PCI0.CDS2 */
                            Local3 = (CDP3 * CDS3) /* \_SB_.PCI0.CDS3 */
                            Local0 += Local1
                            Local2 += Local3
                            If ((Local0 == Local2))
                            {
                                Local6 = 0x02
                            }
                            Else
                            {
                                Local6 = One
                            }
                        }
                    }
                }

                Return (Local6)
            }

            Method (ATBM, 1, NotSerialized)
            {
                Local0 = (Arg0 * 0x02)
                Local0 *= NOCH ()
                Local0 *= 0x08
                Local0 *= BWHP /* \_SB_.PCI0.BWHP */
                Local1 = (BWCP + BWIS) /* \_SB_.PCI0.BWIS */
                Local1 += BWWB /* \_SB_.PCI0.BWWB */
                Local1 += BWHP /* \_SB_.PCI0.BWHP */
                Divide (Local0, Local1, Local1, Local0)
                Local0 *= 0x03
                Divide (Local0, 0x28, Local1, Local0)
                Return (Local0)
            }

            Method (GM2C, 0, NotSerialized)
            {
                Local1 = (CPLN * 0x19)
                Local1 *= BPLN
                Local2 = (BPLP + One)
                Local2 *= CPLM /* \_SB_.PCI0.CPLM */
                Local2 *= BPLM /* \_SB_.PCI0.BPLM */
                Local3 = Local1
                Local1 = (Local3 * MPLN) /* \_SB_.PCI0.MPLN */
                Local2 *= MPLM /* \_SB_.PCI0.MPLM */
                Local3 = (Local1 / Local2)
                If ((VCO2 == Zero))
                {
                    Local3 *= 0x02
                }

                Return (Local3)
            }

            Method (PMPM, 1, NotSerialized)
            {
                Local0 = (0x0F * 0x03E8)
                Divide (Local0, Arg0, Local0, Local1)
                Return (Local1)
            }

            Method (CLTM, 1, NotSerialized)
            {
                Divide (0x04, NOCH (), Local0, Local1)
                Local0 = (0x03E8 * Local1)
                Divide (Local0, Arg0, Local0, Local1)
                Return (Local1)
            }

            Method (BASM, 1, NotSerialized)
            {
                Name (M2CK, Zero)
                Name (NPAR, One)
                M2CK = Arg0
                Name (TPAR, 0x04)
                TPAR /= NPAR
                TPAR -= 0x02
                Name (BUCO, Zero)
                BUCO = (TPAR + TRCD) /* \_SB_.PCI0.TRCD */
                BUCO += TR2P /* \_SB_.PCI0.TR2P */
                BUCO += TRP /* \_SB_.PCI0.TRP_ */
                Name (B2CO, Zero)
                B2CO = MAX (TRC, BUCO)
                B2CO = CEIL (B2CO, 0x02)
                Name (TBM2, Zero)
                If ((TROE == One))
                {
                    TBM2 = TROI /* \_SB_.PCI0.TROI */
                }

                Name (TMAX, Zero)
                TMAX += TBM2 /* \_SB_.PCI0.BASM.TBM2 */
                TMAX += BUCO /* \_SB_.PCI0.BASM.BUCO */
                TMAX += TPAR /* \_SB_.PCI0.BASM.TPAR */
                TMAX = MAX (TMAX, B2CO)
                Name (SWBC, Zero)
                SWBC = (TMAX * BWWB) /* \_SB_.PCI0.BWWB */
                SWBC *= NPAR /* \_SB_.PCI0.BASM.NPAR */
                SWBC /= 0x02
                Name (SCPU, Zero)
                SCPU = (TMAX * BWCP) /* \_SB_.PCI0.BWCP */
                SCPU *= NPAR /* \_SB_.PCI0.BASM.NPAR */
                SCPU /= 0x02
                Name (SISO, Zero)
                Local1 = (TBM2 + BUCO) /* \_SB_.PCI0.BASM.BUCO */
                Local1 += NPAR /* \_SB_.PCI0.BASM.NPAR */
                Local1 -= 0x02
                Local1 = MAX (Local1, B2CO)
                SISO = (Local1 * BWIS) /* \_SB_.PCI0.BWIS */
                Name (RCBZ, 0x10)
                Name (CBHP, 0x02)
                Name (SHIS, Zero)
                SHIS = (RCBZ * 0x04)
                SHIS /= NPAR
                SHIS -= 0x02
                SHIS += BUCO /* \_SB_.PCI0.BASM.BUCO */
                SHIS += TBM2 /* \_SB_.PCI0.BASM.TBM2 */
                SHIS = MAX (SHIS, B2CO)
                SHIS *= CBHP /* \_SB_.PCI0.BASM.CBHP */
                Name (BIDH, One)
                Name (BWCO, Zero)
                BWCO = (SWBC + SCPU) /* \_SB_.PCI0.BASM.SCPU */
                BWCO += SISO /* \_SB_.PCI0.BASM.SISO */
                BWCO += SHIS /* \_SB_.PCI0.BASM.SHIS */
                BWCO *= BIDH /* \_SB_.PCI0.BASM.BIDH */
                Name (NISB, Zero)
                NISB = NSB1 /* \_SB_.PCI0.NSB1 */
                Local1 = (NSB2 << 0x04)
                NISB |= Local1 /* \_SB_.PCI0.BASM.NISB */
                Name (NICO, Zero)
                Divide (BWCO, NIST, Local2, Local1)
                If ((Local2 != Zero))
                {
                    Local1 += One
                }

                Local2 = (NISB * NPAR) /* \_SB_.PCI0.BASM.NPAR */
                Local3 = (TBM2 + NPAR) /* \_SB_.PCI0.BASM.NPAR */
                If ((Local3 > 0x02))
                {
                    Local3 -= 0x02
                }
                Else
                {
                    Local3 = Zero
                }

                Local3 = MAX (Local3, B2CO)
                NICO = (Local2 * Local3)
                NICO *= Local1
                NICO /= 0x02
                Name (RECO, Zero)
                RECO = (BWCO + NICO) /* \_SB_.PCI0.BASM.NICO */
                Divide (RECO, REFP, Local2, RECO) /* \_SB_.PCI0.BASM.RECO */
                If ((Local2 != Zero))
                {
                    RECO += One
                }

                RECO *= TRFC /* \_SB_.PCI0.TRFC */
                RECO *= REFB /* \_SB_.PCI0.REFB */
                Name (MELA, Zero)
                MELA = (BWCO + RECO) /* \_SB_.PCI0.BASM.RECO */
                MELA += NICO /* \_SB_.PCI0.BASM.NICO */
                MELA *= 0x03E8
                MELA /= M2CK
                Name (WALA, 0x64)
                WALA += CKDY /* \_SB_.PCI0.CKDY */
                WALA *= 0x07D0
                WALA /= M2CK
                Name (SWLA, Zero)
                Name (M73L, 0x64)
                Name (PADD, Zero)
                Local1 = (MELA + WALA) /* \_SB_.PCI0.BASM.WALA */
                Local1 += SWLA /* \_SB_.PCI0.BASM.SWLA */
                Local1 += M73L /* \_SB_.PCI0.BASM.M73L */
                Local1 += PADD /* \_SB_.PCI0.BASM.PADD */
                Local0 = (Local1 / 0x64)
                Return (Local0)
            }

            Method (MAX, 2, NotSerialized)
            {
                Local0 = Arg0
                If ((Arg1 > Arg0))
                {
                    Local0 = Arg1
                }

                Return (Local0)
            }

            Method (CEIL, 2, NotSerialized)
            {
                Local0 = Arg0
                Divide (Local0, Arg1, Local1, Local3)
                If ((Local1 != Zero))
                {
                    Local0 -= Local1
                    Local0 += Arg1
                }

                Return (Local0)
            }
        }

        Device (WMI0)
        {
            Name (_HID, "pnp0c14")  // _HID: Hardware ID
            Name (_UID, "NVIF")  // _UID: Unique ID
            Name (_WDG, Buffer (0xC8)
            {
                /* 0000 */  0xF2, 0x9A, 0x79, 0xA1, 0x29, 0x94, 0x29, 0x45,  /* ..y.).)E */
                /* 0008 */  0x92, 0x7E, 0xDF, 0xE1, 0x37, 0x36, 0xEE, 0xBA,  /* .~..76.. */
                /* 0010 */  0x4E, 0x56, 0x01, 0x02, 0x85, 0x9A, 0x79, 0xA1,  /* NV....y. */
                /* 0018 */  0x29, 0x94, 0x29, 0x45, 0x92, 0x7E, 0xDF, 0xE1,  /* ).)E.~.. */
                /* 0020 */  0x37, 0x36, 0xEE, 0xBA, 0x85, 0x00, 0x00, 0x08,  /* 76...... */
                /* 0028 */  0x86, 0x9A, 0x79, 0xA1, 0x29, 0x94, 0x29, 0x45,  /* ..y.).)E */
                /* 0030 */  0x92, 0x7E, 0xDF, 0xE1, 0x37, 0x36, 0xEE, 0xBA,  /* .~..76.. */
                /* 0038 */  0x86, 0x00, 0x00, 0x08, 0x87, 0x9A, 0x79, 0xA1,  /* ......y. */
                /* 0040 */  0x29, 0x94, 0x29, 0x45, 0x92, 0x7E, 0xDF, 0xE1,  /* ).)E.~.. */
                /* 0048 */  0x37, 0x36, 0xEE, 0xBA, 0x87, 0x00, 0x00, 0x08,  /* 76...... */
                /* 0050 */  0x88, 0x9A, 0x79, 0xA1, 0x29, 0x94, 0x29, 0x45,  /* ..y.).)E */
                /* 0058 */  0x92, 0x7E, 0xDF, 0xE1, 0x37, 0x36, 0xEE, 0xBA,  /* .~..76.. */
                /* 0060 */  0x88, 0x00, 0x00, 0x08, 0xC3, 0x9A, 0x79, 0xA1,  /* ......y. */
                /* 0068 */  0x29, 0x94, 0x29, 0x45, 0x92, 0x7E, 0xDF, 0xE1,  /* ).)E.~.. */
                /* 0070 */  0x37, 0x36, 0xEE, 0xBA, 0xC3, 0x00, 0x00, 0x08,  /* 76...... */
                /* 0078 */  0xC5, 0x9A, 0x79, 0xA1, 0x29, 0x94, 0x29, 0x45,  /* ..y.).)E */
                /* 0080 */  0x92, 0x7E, 0xDF, 0xE1, 0x37, 0x36, 0xEE, 0xBA,  /* .~..76.. */
                /* 0088 */  0xC5, 0x00, 0x00, 0x08, 0xCA, 0x9A, 0x79, 0xA1,  /* ......y. */
                /* 0090 */  0x29, 0x94, 0x29, 0x45, 0x92, 0x7E, 0xDF, 0xE1,  /* ).)E.~.. */
                /* 0098 */  0x37, 0x36, 0xEE, 0xBA, 0xCA, 0x00, 0x00, 0x08,  /* 76...... */
                /* 00A0 */  0xCB, 0x9A, 0x79, 0xA1, 0x29, 0x94, 0x29, 0x45,  /* ..y.).)E */
                /* 00A8 */  0x92, 0x7E, 0xDF, 0xE1, 0x37, 0x36, 0xEE, 0xBA,  /* .~..76.. */
                /* 00B0 */  0xCB, 0x00, 0x00, 0x08, 0x21, 0x12, 0x90, 0x05,  /* ....!... */
                /* 00B8 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  /* f....... */
                /* 00C0 */  0xC9, 0x06, 0x29, 0x10, 0x42, 0x41, 0x01, 0x00   /* ..).BA.. */
            })
            Method (WMNV, 3, NotSerialized)
            {
                Debug = "WMNV: "
                If ((SizeOf (Arg2) >= 0x08))
                {
                    CreateDWordField (Arg2, Zero, FUNC)
                    CreateDWordField (Arg2, 0x04, SUBF)
                    If ((SizeOf (Arg2) > 0x08))
                    {
                        Local2 = (SizeOf (Arg2) - 0x08)
                        Local2 <<= 0x03
                    }

                    CreateField (Arg2, 0x40, Local2, ARGS)
                    Debug = FUNC /* \_SB_.PCI0.WMI0.WMNV.FUNC */
                    Debug = SUBF /* \_SB_.PCI0.WMI0.WMNV.SUBF */
                    Debug = ARGS /* \_SB_.PCI0.WMI0.WMNV.ARGS */
                    Return (^^IXVE.IGPU.NVIF (FUNC, SUBF, ARGS))
                }
            }

            Name (WQBA, Buffer (0x038C)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  /* FOMB.... */
                /* 0008 */  0x7C, 0x03, 0x00, 0x00, 0x54, 0x24, 0x00, 0x00,  /* |...T$.. */
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  /* DS...}.T */
                /* 0018 */  0x28, 0xDA, 0x91, 0x00, 0x01, 0x06, 0x18, 0x42,  /* (......B */
                /* 0020 */  0x10, 0x13, 0x10, 0x8A, 0xE6, 0x80, 0x42, 0x04,  /* ......B. */
                /* 0028 */  0x92, 0x43, 0xA4, 0x30, 0x30, 0x28, 0x0B, 0x20,  /* .C.00(.  */
                /* 0030 */  0x86, 0x90, 0x0B, 0x26, 0x26, 0x40, 0x04, 0x84,  /* ...&&@.. */
                /* 0038 */  0xBC, 0x0A, 0xB0, 0x29, 0xC0, 0x24, 0x88, 0xFA,  /* ...).$.. */
                /* 0040 */  0xF7, 0x87, 0x28, 0x09, 0x0E, 0x25, 0x04, 0x42,  /* ..(..%.B */
                /* 0048 */  0x12, 0x05, 0x98, 0x17, 0xA0, 0x5B, 0x80, 0x61,  /* .....[.a */
                /* 0050 */  0x01, 0xB6, 0x05, 0x98, 0x16, 0xE0, 0x18, 0x92,  /* ........ */
                /* 0058 */  0x4A, 0x03, 0xA7, 0x04, 0x96, 0x02, 0x21, 0xA1,  /* J.....!. */
                /* 0060 */  0x02, 0x94, 0x0B, 0xF0, 0x2D, 0x40, 0x3B, 0xA2,  /* ....-@;. */
                /* 0068 */  0x24, 0x0B, 0xB0, 0x0C, 0x23, 0x02, 0x8F, 0x82,  /* $...#... */
                /* 0070 */  0xA1, 0x71, 0x68, 0xEC, 0x30, 0x2C, 0x13, 0x4C,  /* .qh.0,.L */
                /* 0078 */  0x83, 0x38, 0x8C, 0xB2, 0x91, 0x45, 0x60, 0xDC,  /* .8...E`. */
                /* 0080 */  0x4E, 0x05, 0xC8, 0x15, 0x20, 0x4C, 0x80, 0x78,  /* N... L.x */
                /* 0088 */  0x54, 0x61, 0x34, 0x07, 0x45, 0xE0, 0x42, 0x63,  /* Ta4.E.Bc */
                /* 0090 */  0x64, 0x40, 0xC8, 0xA3, 0x00, 0xAB, 0xA3, 0xD0,  /* d@...... */
                /* 0098 */  0xA4, 0x12, 0xD8, 0xBD, 0x00, 0x83, 0x02, 0x8C,  /* ........ */
                /* 00A0 */  0x09, 0xF0, 0x86, 0x2A, 0x84, 0x28, 0x35, 0x0A,  /* ...*.(5. */
                /* 00A8 */  0x50, 0x26, 0xC0, 0x16, 0x8A, 0xE0, 0x83, 0xC4,  /* P&...... */
                /* 00B0 */  0x88, 0x12, 0xA4, 0x35, 0x14, 0x0A, 0x11, 0x24,  /* ...5...$ */
                /* 00B8 */  0x66, 0x8B, 0x28, 0x02, 0x8F, 0x19, 0x24, 0x74,  /* f.(...$t */
                /* 00C0 */  0x67, 0x40, 0x82, 0xA8, 0x0D, 0x46, 0x08, 0x15,  /* g@...F.. */
                /* 00C8 */  0xC2, 0xCB, 0xFE, 0x20, 0x88, 0x7C, 0x05, 0xE3,  /* ... .|.. */
                /* 00D0 */  0x66, 0x91, 0x46, 0x83, 0x1A, 0x6B, 0x82, 0x63,  /* f.F..k.c */
                /* 00D8 */  0xF7, 0x68, 0x4E, 0xB8, 0x73, 0x01, 0xD2, 0xE7,  /* .hN.s... */
                /* 00E0 */  0x26, 0x90, 0xA3, 0x3B, 0xB8, 0x3A, 0x07, 0x4D,  /* &..;.:.M */
                /* 00E8 */  0x86, 0xC7, 0xB0, 0x12, 0xFC, 0x07, 0xF8, 0x14,  /* ........ */
                /* 00F0 */  0x80, 0x77, 0x0D, 0xA8, 0xE9, 0x1F, 0x3C, 0x13,  /* .w....<. */
                /* 00F8 */  0x04, 0x87, 0x1A, 0xA2, 0x47, 0x1D, 0xEE, 0x04,  /* ....G... */
                /* 0100 */  0x8E, 0xFD, 0x48, 0x18, 0xC4, 0xC1, 0x1E, 0x37,  /* ..H....7 */
                /* 0108 */  0xD6, 0xE1, 0x64, 0x34, 0xE8, 0x52, 0x05, 0x98,  /* ..d4.R.. */
                /* 0110 */  0x3D, 0x00, 0x68, 0x64, 0x09, 0x4E, 0xFB, 0x4C,  /* =.hd.N.L */
                /* 0118 */  0x42, 0xBF, 0x07, 0x9C, 0x4F, 0xCF, 0x63, 0x63,  /* B...O.cc */
                /* 0120 */  0x83, 0x40, 0x8D, 0xCC, 0xFF, 0x7F, 0x68, 0x0F,  /* .@....h. */
                /* 0128 */  0xF1, 0xB4, 0x62, 0x86, 0x7C, 0x16, 0x38, 0x2C,  /* ..b.|.8, */
                /* 0130 */  0x26, 0x16, 0x42, 0x9B, 0xD4, 0x78, 0x80, 0xC0,  /* &.B..x.. */
                /* 0138 */  0xC4, 0x1F, 0x0D, 0x22, 0xBC, 0x19, 0x78, 0xBE,  /* ..."..x. */
                /* 0140 */  0x26, 0x18, 0x14, 0x42, 0x4E, 0xC6, 0x83, 0x12,  /* &..BN... */
                /* 0148 */  0x03, 0xA2, 0x41, 0xD7, 0x8A, 0xAD, 0x7B, 0x40,  /* ..A...{@ */
                /* 0150 */  0xF0, 0x98, 0x47, 0x54, 0x34, 0xB0, 0x06, 0xC2,  /* ..GT4... */
                /* 0158 */  0xCE, 0x00, 0x1E, 0xB7, 0x65, 0x81, 0x50, 0x02,  /* ....e.P. */
                /* 0160 */  0x03, 0xFB, 0xDC, 0xF0, 0x0E, 0x61, 0x5C, 0x1C,  /* .....a\. */
                /* 0168 */  0x7E, 0x64, 0x9F, 0x2F, 0x2C, 0x70, 0x50, 0x28,  /* ~d./,pP( */
                /* 0170 */  0x58, 0xDF, 0x0E, 0x62, 0x3E, 0x0F, 0x1C, 0xE7,  /* X..b>... */
                /* 0178 */  0x01, 0x5B, 0xF8, 0x44, 0x09, 0xF0, 0x21, 0x79,  /* .[.D..!y */
                /* 0180 */  0x34, 0xF0, 0x06, 0x09, 0xDF, 0xFA, 0x11, 0x80,  /* 4....... */
                /* 0188 */  0x20, 0xBF, 0x30, 0x3C, 0x36, 0x24, 0xB0, 0x3C,  /*  .0<6$.< */
                /* 0190 */  0x60, 0xF4, 0x28, 0xED, 0x57, 0x00, 0x42, 0xF0,  /* `.(.W.B. */
                /* 0198 */  0x17, 0x8B, 0xA7, 0x80, 0xD7, 0x81, 0x08, 0xC7,  /* ........ */
                /* 01A0 */  0x02, 0x53, 0xE4, 0xD8, 0xD0, 0xF0, 0x1C, 0x38,  /* .S.....8 */
                /* 01A8 */  0x7A, 0xD8, 0x73, 0x09, 0x7F, 0x34, 0x51, 0x4E,  /* z.s..4QN */
                /* 01B0 */  0xE1, 0x70, 0x7C, 0xE4, 0x30, 0x42, 0xFC, 0x27,  /* .p|.0B.' */
                /* 01B8 */  0x8D, 0x27, 0x0F, 0x6B, 0xBE, 0x03, 0x68, 0x4A,  /* .'.k..hJ */
                /* 01C0 */  0x6F, 0x01, 0xEF, 0x0F, 0x1E, 0x01, 0x26, 0xFA,  /* o.....&. */
                /* 01C8 */  0xD1, 0x04, 0x15, 0xF6, 0x74, 0x02, 0xAA, 0xFF,  /* ....t... */
                /* 01D0 */  0xFF, 0xE9, 0x04, 0xB0, 0x26, 0xEE, 0x64, 0xA2,  /* ....&.d. */
                /* 01D8 */  0xD3, 0x09, 0xD8, 0xE3, 0x3D, 0x34, 0xA4, 0xE1,  /* ....=4.. */
                /* 01E0 */  0x74, 0x02, 0x50, 0xE0, 0xFF, 0x7F, 0x3A, 0x81,  /* t.P...:. */
                /* 01E8 */  0x1F, 0xF3, 0x74, 0x02, 0x15, 0xF8, 0x7C, 0x7C,  /* ..t...|| */
                /* 01F0 */  0xE9, 0xF0, 0xA1, 0xC0, 0x04, 0x03, 0x8D, 0x9B,  /* ........ */
                /* 01F8 */  0x8A, 0x3A, 0x9D, 0xA0, 0x0E, 0x0F, 0x3E, 0x9D,  /* .:....>. */
                /* 0200 */  0xB0, 0x43, 0xC1, 0x49, 0x3C, 0x05, 0xF8, 0x70,  /* .C.I<..p */
                /* 0208 */  0x02, 0xE6, 0xC1, 0xE0, 0x0F, 0x27, 0xC0, 0x6D,  /* .....'.m */
                /* 0210 */  0x2C, 0xF8, 0xC3, 0x09, 0xF0, 0xB8, 0x63, 0x78,  /* ,.....cx */
                /* 0218 */  0x08, 0xFC, 0x04, 0xE1, 0x21, 0xF0, 0x01, 0x3C,  /* ....!..< */
                /* 0220 */  0x6B, 0x9C, 0x9D, 0x95, 0xCE, 0x09, 0x79, 0x0C,  /* k.....y. */
                /* 0228 */  0xE1, 0x73, 0xC2, 0x9C, 0x56, 0x80, 0xCF, 0xFF,  /* .s..V... */
                /* 0230 */  0xFF, 0xB4, 0x02, 0xB8, 0x3A, 0xA1, 0x3C, 0xAD,  /* ....:.<. */
                /* 0238 */  0x00, 0x8C, 0xFA, 0xFF, 0x9F, 0x56, 0xC0, 0x7D,  /* .....V.} */
                /* 0240 */  0x10, 0x78, 0x5A, 0x01, 0xB6, 0x83, 0xF1, 0x69,  /* .xZ....i */
                /* 0248 */  0x05, 0x78, 0x8E, 0xC5, 0xA7, 0x15, 0xC0, 0xF1,  /* .x...... */
                /* 0250 */  0xFF, 0xFF, 0xB4, 0x02, 0xF8, 0x41, 0x79, 0x5A,  /* .....AyZ */
                /* 0258 */  0x01, 0xD8, 0xF5, 0xFF, 0x3F, 0xAD, 0x80, 0xEF,  /* ....?... */
                /* 0260 */  0x24, 0xF0, 0xB4, 0x02, 0x6C, 0x07, 0xE3, 0xD3,  /* $...l... */
                /* 0268 */  0x0A, 0xF0, 0x1C, 0x8B, 0x4F, 0x2B, 0x80, 0xEF,  /* ....O+.. */
                /* 0270 */  0xFF, 0xFF, 0x69, 0x05, 0x70, 0x82, 0xF0, 0xB4,  /* ..i.p... */
                /* 0278 */  0x02, 0x30, 0xED, 0xFF, 0x7F, 0x5A, 0x01, 0x07,  /* .0...Z.. */
                /* 0280 */  0xC2, 0xD3, 0x0A, 0xB0, 0x1D, 0x8C, 0x4F, 0x2B,  /* ......O+ */
                /* 0288 */  0xC0, 0x73, 0x2C, 0x3E, 0xAD, 0x00, 0xEE, 0xFF,  /* .s,>.... */
                /* 0290 */  0xFF, 0xA7, 0x15, 0xC0, 0xC2, 0xB0, 0x1F, 0x11,  /* ........ */
                /* 0298 */  0x9E, 0x56, 0x00, 0xD6, 0xFD, 0xFF, 0x4F, 0x2B,  /* .V....O+ */
                /* 02A0 */  0xB0, 0x0E, 0x05, 0x3E, 0xAD, 0x00, 0xD7, 0xC1,  /* ...>.... */
                /* 02A8 */  0xB0, 0xD3, 0x0A, 0xB0, 0x1C, 0x0B, 0x3B, 0xAD,  /* ......;. */
                /* 02B0 */  0x00, 0x3C, 0xF8, 0xFF, 0x9F, 0x56, 0x80, 0xFB,  /* .<...V.. */
                /* 02B8 */  0x49, 0xE5, 0x69, 0x05, 0x60, 0xE0, 0xFF, 0xFF,  /* I.i.`... */
                /* 02C0 */  0xD8, 0x81, 0x3B, 0x10, 0x3C, 0xAD, 0x00, 0xDB,  /* ..;.<... */
                /* 02C8 */  0xC1, 0xF8, 0xB4, 0x02, 0x3C, 0xC7, 0xE2, 0xD3,  /* ....<... */
                /* 02D0 */  0x0A, 0xC0, 0x89, 0xFF, 0xFF, 0x69, 0x05, 0xF8,  /* .....i.. */
                /* 02D8 */  0x42, 0x3C, 0xAD, 0x00, 0x6C, 0xFC, 0xFF, 0x0F,  /* B<..l... */
                /* 02E0 */  0xEA, 0x69, 0x05, 0xD8, 0x0E, 0xC6, 0xA7, 0x15,  /* .i...... */
                /* 02E8 */  0xE0, 0x39, 0x16, 0x9F, 0x56, 0x00, 0x7E, 0xFC,  /* .9..V.~. */
                /* 02F0 */  0xFF, 0x4F, 0x2B, 0xC0, 0xF1, 0x5C, 0xF1, 0xB4,  /* .O+..\.. */
                /* 02F8 */  0x02, 0xB0, 0x11, 0xFC, 0x69, 0x05, 0xF3, 0xFF,  /* ....i... */
                /* 0300 */  0x3F, 0xAD, 0x00, 0xC7, 0xC1, 0xF8, 0xB4, 0x02,  /* ?....... */
                /* 0308 */  0x3C, 0xC7, 0xE2, 0xD3, 0x0A, 0xE0, 0x44, 0xA1,  /* <.....D. */
                /* 0310 */  0x4D, 0x9F, 0x1A, 0x8D, 0x5A, 0x35, 0x28, 0x53,  /* M...Z5(S */
                /* 0318 */  0xA3, 0x4C, 0x83, 0x5A, 0x7D, 0x2A, 0x35, 0x66,  /* .L.Z}*5f */
                /* 0320 */  0xCC, 0x0D, 0x94, 0x02, 0x3E, 0x03, 0x74, 0x1E,  /* ....>.t. */
                /* 0328 */  0xB0, 0xBC, 0x37, 0x83, 0x40, 0x2C, 0x83, 0x42,  /* ..7.@,.B */
                /* 0330 */  0x20, 0x96, 0xFE, 0x64, 0x11, 0x88, 0x83, 0x83,  /*  ..d.... */
                /* 0338 */  0xD0, 0x78, 0xEF, 0x0D, 0x81, 0x58, 0xB4, 0x09,  /* .x...X.. */
                /* 0340 */  0x10, 0x16, 0x19, 0x84, 0x06, 0x53, 0x01, 0xC2,  /* .....S.. */
                /* 0348 */  0xE4, 0xDA, 0x00, 0x61, 0x61, 0x41, 0x68, 0x24,  /* ...aaAh$ */
                /* 0350 */  0x1D, 0x20, 0x4C, 0xA8, 0x11, 0x10, 0x16, 0x13,  /* . L..... */
                /* 0358 */  0x84, 0x86, 0x51, 0x02, 0xC2, 0x24, 0x5A, 0x01,  /* ..Q..$Z. */
                /* 0360 */  0x61, 0x01, 0x41, 0xF4, 0xFF, 0x07, 0x71, 0x0C,  /* a.A...q. */
                /* 0368 */  0x2D, 0x20, 0x4C, 0x9C, 0x19, 0x10, 0x16, 0x0D,  /* - L..... */
                /* 0370 */  0x84, 0x06, 0x50, 0x03, 0xC2, 0x64, 0xD9, 0x01,  /* ..P..d.. */
                /* 0378 */  0x61, 0xA1, 0x40, 0xA8, 0x74, 0x3D, 0x20, 0x4C,  /* a.@.t= L */
                /* 0380 */  0x90, 0x21, 0x10, 0x16, 0x07, 0x84, 0x8A, 0x56,  /* .!.....V */
                /* 0388 */  0x04, 0xC2, 0xFE, 0xFF                           /* .... */
            })
        }

        Scope (IXVE.IGPU)
        {
            Scope (^)
            {
                OperationRegion (PE19, PCI_Config, 0x19, One)
                Field (PE19, ByteAcc, NoLock, Preserve)
                {
                    PSBN,   8
                }
            }

            Method (GBUS, 0, NotSerialized)
            {
                Return (PSBN) /* \_SB_.PCI0.IXVE.PSBN */
            }

            Name (ERR0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           /* .... */
            })
            Name (ERR1, Buffer (0x04)
            {
                 0x01, 0x00, 0x00, 0x80                           /* .... */
            })
            Name (ERR2, Buffer (0x04)
            {
                 0x02, 0x00, 0x00, 0x80                           /* .... */
            })
            Name (VER1, Unicode ("\x01"))
            Method (NVIF, 3, NotSerialized)
            {
                Local0 = ERR2 /* \_SB_.PCI0.IXVE.IGPU.ERR2 */
                If ((Arg0 == One))
                {
                    Concatenate (ERR0, VER1, Local0)
                }
                Else
                {
                    If ((Arg0 == 0x0D))
                    {
                        If ((Arg1 == Zero))
                        {
                            Local0 = ERR0 /* \_SB_.PCI0.IXVE.IGPU.ERR0 */
                        }
                        Else
                        {
                            If ((Arg1 == 0x02))
                            {
                                Concatenate (ERR0, CIMP (), Local0)
                            }
                            Else
                            {
                                If ((Arg1 == 0x03))
                                {
                                    Name (BFD1, Buffer (0x06)
                                    {
                                         0x10, 0x06, 0x01, 0x06, 0x00, 0x00               /* ...... */
                                    })
                                    CreateField (BFD1, 0x20, 0x10, SVMS)
                                    SVMS = 0x40
                                    Concatenate (ERR0, BFD1, Local0)
                                }
                            }
                        }
                    }
                    Else
                    {
                        If ((Arg0 == 0x0C))
                        {
                            If ((Arg1 == Zero))
                            {
                                Local0 = ERR0 /* \_SB_.PCI0.IXVE.IGPU.ERR0 */
                            }
                            Else
                            {
                                If ((Arg1 == One))
                                {
                                    If (CondRefOf (HDCB, Local6))
                                    {
                                        Local1 = HDCB /* \_SB_.PCI0.HDCB */
                                        Concatenate (ERR0, Local1, Local0)
                                    }
                                    Else
                                    {
                                        Local0 = ERR1 /* \_SB_.PCI0.IXVE.IGPU.ERR1 */
                                    }
                                }
                            }
                        }
                        Else
                        {
                            If ((Arg0 == 0x08))
                            {
                                If ((Arg1 == Zero))
                                {
                                    Local0 = ERR0 /* \_SB_.PCI0.IXVE.IGPU.ERR0 */
                                }
                                Else
                                {
                                    If ((Arg1 == One))
                                    {
                                        Local1 = Buffer (0x04)
                                            {
                                                 0x37, 0x00, 0x05, 0x00                           /* 7... */
                                            }
                                        Concatenate (ERR0, Local1, Local0)
                                    }
                                    Else
                                    {
                                        If ((Arg1 == 0x02))
                                        {
                                            CreateWordField (Arg2, Zero, TEMP)
                                            DBUG = TEMP /* \_SB_.PCI0.IXVE.IGPU.NVIF.TEMP */
                                            Local0 = ERR0 /* \_SB_.PCI0.IXVE.IGPU.ERR0 */
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                Return (Local0)
            }
        }
    }

    Scope (_SB)
    {
        Name (XCPD, Zero)
        Name (XNPT, One)
        Name (XCAP, 0x02)
        Name (XDCP, 0x04)
        Name (XDCT, 0x08)
        Name (XDST, 0x0A)
        Name (XLCP, 0x0C)
        Name (XLCT, 0x10)
        Name (XLST, 0x12)
        Name (XSCP, 0x14)
        Name (XSCT, 0x18)
        Name (XSST, 0x1A)
        Name (XRCT, 0x1C)
        Mutex (MUTE, 0x00)
        Method (RBPE, 1, NotSerialized)
        {
            Acquire (MUTE, 0x03E8)
            Local0 = (Arg0 + PCIB) /* \PCIB */
            OperationRegion (PCFG, SystemMemory, Local0, One)
            Field (PCFG, ByteAcc, NoLock, Preserve)
            {
                XCFG,   8
            }

            Release (MUTE)
            Return (XCFG) /* \_SB_.RBPE.XCFG */
        }

        Method (RWPE, 1, NotSerialized)
        {
            Acquire (MUTE, 0x03E8)
            Arg0 &= 0xFFFFFFFE
            Local0 = (Arg0 + PCIB) /* \PCIB */
            OperationRegion (PCFG, SystemMemory, Local0, 0x02)
            Field (PCFG, WordAcc, NoLock, Preserve)
            {
                XCFG,   16
            }

            Release (MUTE)
            Return (XCFG) /* \_SB_.RWPE.XCFG */
        }

        Method (RDPE, 1, NotSerialized)
        {
            Acquire (MUTE, 0x03E8)
            Arg0 &= 0xFFFFFFFC
            Local0 = (Arg0 + PCIB) /* \PCIB */
            OperationRegion (PCFG, SystemMemory, Local0, 0x04)
            Field (PCFG, DWordAcc, NoLock, Preserve)
            {
                XCFG,   32
            }

            Release (MUTE)
            Return (XCFG) /* \_SB_.RDPE.XCFG */
        }

        Method (WBPE, 2, NotSerialized)
        {
            Acquire (MUTE, 0x0FFF)
            Local0 = (Arg0 + PCIB) /* \PCIB */
            OperationRegion (PCFG, SystemMemory, Local0, One)
            Field (PCFG, ByteAcc, NoLock, Preserve)
            {
                XCFG,   8
            }

            XCFG = Arg1
            Release (MUTE)
        }

        Method (WWPE, 2, NotSerialized)
        {
            Acquire (MUTE, 0x03E8)
            Arg0 &= 0xFFFFFFFE
            Local0 = (Arg0 + PCIB) /* \PCIB */
            OperationRegion (PCFG, SystemMemory, Local0, 0x02)
            Field (PCFG, WordAcc, NoLock, Preserve)
            {
                XCFG,   16
            }

            XCFG = Arg1
            Release (MUTE)
        }

        Method (WDPE, 2, NotSerialized)
        {
            Acquire (MUTE, 0x03E8)
            Arg0 &= 0xFFFFFFFC
            Local0 = (Arg0 + PCIB) /* \PCIB */
            OperationRegion (PCFG, SystemMemory, Local0, 0x04)
            Field (PCFG, DWordAcc, NoLock, Preserve)
            {
                XCFG,   32
            }

            XCFG = Arg1
            Release (MUTE)
        }

        Method (RWDP, 3, NotSerialized)
        {
            Acquire (MUTE, 0x03E8)
            Arg0 &= 0xFFFFFFFC
            Local0 = (Arg0 + PCIB) /* \PCIB */
            OperationRegion (PCFG, SystemMemory, Local0, 0x04)
            Field (PCFG, DWordAcc, NoLock, Preserve)
            {
                XCFG,   32
            }

            Local1 = (XCFG & Arg2)
            XCFG = (Local1 | Arg1)
            Release (MUTE)
        }

        Method (RPME, 1, NotSerialized)
        {
            Local0 = (Arg0 + 0x84)
            Local1 = RDPE (Local0)
            If ((Local1 == Ones))
            {
                Return (Zero)
            }
            Else
            {
                If ((Local1 && 0x00010000))
                {
                    WDPE (Local0, (Local1 & 0x00010000))
                    Return (One)
                }

                Return (Zero)
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Name (SUPP, Zero)
        Name (CTRL, Zero)
        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
            {
                CreateDWordField (Arg3, Zero, CDW1)
                CreateDWordField (Arg3, 0x04, CDW2)
                CreateDWordField (Arg3, 0x08, CDW3)
                SUPP = CDW2 /* \_SB_.PCI0._OSC.CDW2 */
                CTRL = CDW3 /* \_SB_.PCI0._OSC.CDW3 */
                If (((SUPP & 0x16) != 0x16))
                {
                    CTRL &= 0x0C
                }

                CTRL &= 0x0C
                If (~(CDW1 & One))
                {
                    If ((CTRL & One)) {}
                    If ((CTRL & 0x04))
                    {
                        ^SMB0.GPMD (One)
                        ^SMB0.XPME = One
                    }

                    If ((CTRL & 0x10)) {}
                }

                If ((Arg1 != One))
                {
                    CDW1 |= 0x08
                }

                If ((CDW3 != CTRL))
                {
                    CDW1 |= 0x10
                }

                CDW3 = CTRL /* \_SB_.PCI0.CTRL */
                Return (Arg3)
            }
            Else
            {
                CDW1 |= 0x04
                Return (Arg3)
            }
        }
    }

    Scope (_SB)
    {
        Device (WMID)
        {
            Name (_HID, "PNP0C14" /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Name (_WDG, Buffer (0x28)
            {
                /* 0000 */  0x45, 0xDD, 0x23, 0x59, 0x80, 0x04, 0xD5, 0x4E,  /* E.#Y...N */
                /* 0008 */  0xB6, 0x1A, 0xC9, 0xEC, 0x6C, 0x90, 0xE2, 0x6A,  /* ....l..j */
                /* 0010 */  0x42, 0x48, 0x01, 0x02, 0x9A, 0xBA, 0x73, 0x3A,  /* BH....s: */
                /* 0018 */  0xD0, 0xC9, 0xDF, 0x48, 0x95, 0xAE, 0xF4, 0x8D,  /* ...H.... */
                /* 0020 */  0xE1, 0xFC, 0x29, 0x9C, 0xA0, 0x00, 0x01, 0x08   /* ..)..... */
            })
            Name (OBRF, Zero)
            Name (TSBF, Buffer (0x28) {})
            CreateField (TSBF, Zero, 0x40, BQ00)
            CreateField (TSBF, 0x40, 0x40, BQ08)
            CreateField (TSBF, 0x80, 0x40, BQ16)
            CreateField (TSBF, 0xC0, 0x40, BQ24)
            CreateField (TSBF, 0x0100, 0x40, BQ32)
        }
    }

    Scope (_SB.WMID)
    {
        Method (OBRH, 0, NotSerialized)
        {
            If ((OBRF == One))
            {
                Notify (WMID, 0xA0) // Device-Specific
                CIND = (COBR | 0x80)
                Stall (0x64)
                CDTA = One
                Sleep (0x03E8)
            }

            Noop
        }

        Method (_WED, 1, NotSerialized)  // _Wxx: Wake Event
        {
            Local2 = Zero
            If ((Arg0 == 0xA0))
            {
                Local2 = One
            }

            Return (Local2)
        }

        Method (WMBH, 3, NotSerialized)
        {
            MAR0 = Arg0
            MAR1 = Arg1
            If ((Arg1 == 0x07))
            {
                CPBF (Arg2)
                BTOM ()
            }
            Else
            {
                Local0 = ObjectType (Arg2)
                Name (TTT0, Zero)
                TTT0 = Local0
                If ((TTT0 == One))
                {
                    MD00 = Arg2
                }
                Else
                {
                    If ((TTT0 == 0x02))
                    {
                        TSBF = Arg2
                        BTOM ()
                    }
                    Else
                    {
                        If ((TTT0 == 0x03))
                        {
                            TSBF = Arg2
                            BTOM ()
                        }
                        Else
                        {
                            Noop
                        }
                    }
                }
            }

            Name (TTT1, Zero)
            TTT1 = Arg1
            If ((TTT1 == One))
            {
                PHSR ()
                Local1 = MD00 /* \_SB_.MD00 */
            }
            Else
            {
                If ((TTT1 == 0x02))
                {
                    PHSR ()
                    Local1 = MD00 /* \_SB_.MD00 */
                }
                Else
                {
                    If ((TTT1 == 0x03))
                    {
                        PHSR ()
                        Local1 = MD00 /* \_SB_.MD00 */
                    }
                    Else
                    {
                        If ((TTT1 == 0x04))
                        {
                            PHSR ()
                            Local1 = FRTN (0x14)
                        }
                        Else
                        {
                            If ((TTT1 == 0x05))
                            {
                                PHSR ()
                                Local1 = MD00 /* \_SB_.MD00 */
                            }
                            Else
                            {
                                If ((TTT1 == 0x06))
                                {
                                    PHSR ()
                                    Local1 = FR70 ()
                                }
                                Else
                                {
                                    If ((TTT1 == 0x07))
                                    {
                                        PHSR ()
                                        Local1 = MD00 /* \_SB_.MD00 */
                                    }
                                    Else
                                    {
                                        If ((TTT1 == 0x08))
                                        {
                                            PHSR ()
                                            Local1 = MD00 /* \_SB_.MD00 */
                                        }
                                        Else
                                        {
                                            If ((TTT1 == 0x09))
                                            {
                                                PHSR ()
                                                Local1 = MD00 /* \_SB_.MD00 */
                                            }
                                            Else
                                            {
                                                If ((TTT1 == 0x0A))
                                                {
                                                    Local1 = 0x00010000
                                                }
                                                Else
                                                {
                                                    If ((TTT1 == 0x0B))
                                                    {
                                                        If (((MD00 <= One) && VERT))
                                                        {
                                                            OBRF = MD00 /* \_SB_.MD00 */
                                                            Local1 = Zero
                                                        }
                                                        Else
                                                        {
                                                            Local1 = 0x00010000
                                                        }
                                                    }
                                                    Else
                                                    {
                                                        If ((TTT1 == 0x0C))
                                                        {
                                                            PHSR ()
                                                            Local1 = MD00 /* \_SB_.MD00 */
                                                        }
                                                        Else
                                                        {
                                                            If ((TTT1 == 0x0D))
                                                            {
                                                                PHSR ()
                                                                Local1 = FRTN (0x14)
                                                            }
                                                            Else
                                                            {
                                                                If ((TTT1 == 0x0E))
                                                                {
                                                                    PHSR ()
                                                                    Local1 = MD00 /* \_SB_.MD00 */
                                                                }
                                                                Else
                                                                {
                                                                    Local1 = 0x00010000
                                                                    Noop
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }

            Return (Local1)
        }
    }

    Scope (_SB.WMID)
    {
        Method (FRTN, 1, NotSerialized)
        {
            MTOB ()
            Name (BUFF, Buffer (Arg0) {})
            BUFF = TSBF /* \_SB_.WMID.TSBF */
            Return (BUFF) /* \_SB_.WMID.FRTN.BUFF */
        }

        Method (PHSR, 0, NotSerialized)
        {
            Acquire (PSMX, 0xFFFF)
            SMIC = SNUM /* \SNUM */
            Release (PSMX)
        }

        Method (BTOM, 0, NotSerialized)
        {
            MQ00 = BQ00 /* \_SB_.WMID.BQ00 */
            MQ08 = BQ08 /* \_SB_.WMID.BQ08 */
            MQ16 = BQ16 /* \_SB_.WMID.BQ16 */
            MQ24 = BQ24 /* \_SB_.WMID.BQ24 */
            MQ32 = BQ32 /* \_SB_.WMID.BQ32 */
        }

        Method (MTOB, 0, NotSerialized)
        {
            BQ00 = MQ00 /* \_SB_.MQ00 */
            BQ08 = MQ08 /* \_SB_.MQ08 */
            BQ16 = MQ16 /* \_SB_.MQ16 */
            BQ24 = MQ24 /* \_SB_.MQ24 */
            BQ32 = MQ32 /* \_SB_.MQ32 */
        }

        Method (XALL, 0, NotSerialized)
        {
            TSBF = Zero
            BTOM ()
        }

        Method (CPBF, 1, NotSerialized)
        {
            Name (BUFF, Buffer (0x42) {})
            BUFF = Arg0
            Local0 = 0x21
            Local1 = Zero
            Local2 = Zero
            While (Local0)
            {
                Index (TSBF, Local2) = DerefOf (Index (BUFF, Local1))
                Local1 += 0x02
                Local2 += One
                Local0--
            }
        }

        Method (FR70, 0, NotSerialized)
        {
            MTOB ()
            Name (BUFF, Buffer (0x46)
            {
                 0x00                                             /* . */
            })
            CreateDWordField (TSBF, Zero, TDW0)
            CreateDWordField (BUFF, Zero, TDW1)
            TDW1 = TDW0 /* \_SB_.WMID.FR70.TDW0 */
            Local0 = 0x21
            Local1 = 0x04
            Local2 = 0x04
            While (Local0)
            {
                Index (BUFF, Local2) = DerefOf (Index (TSBF, Local1))
                Local1 += One
                Local2 += 0x02
                Local0--
            }

            Return (BUFF) /* \_SB_.WMID.FR70.BUFF */
        }
    }

    Scope (_SB)
    {
        OperationRegion (AWMI, SystemMemory, 0x6FF9E374, 0x2A)
        Field (AWMI, ByteAcc, NoLock, Preserve)
        {
            Offset (0x02), 
            MD00,   32
        }

        Field (AWMI, ByteAcc, NoLock, Preserve)
        {
            MAR0,   8, 
            MAR1,   8, 
            MQ00,   64, 
            MQ08,   64, 
            MQ16,   64, 
            MQ24,   64, 
            MQ32,   64
        }

        Mutex (PSMX, 0x00)
        OperationRegion (SMI0, SystemIO, SWSM, 0x02)
        Field (SMI0, ByteAcc, NoLock, Preserve)
        {
            SMIC,   8
        }

        OperationRegion (RCMS, SystemIO, 0x70, 0x02)
        Field (RCMS, ByteAcc, NoLock, Preserve)
        {
            CIND,   8, 
            CDTA,   8
        }
    }

    Scope (_SB)
    {
        Scope (PCI0)
        {
            Name (CRS, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0100,             // Length
                    ,, )
                IO (Decode16,
                    0x0CF8,             // Range Minimum
                    0x0CF8,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0CF7,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0CF8,             // Length
                    ,, , TypeStatic)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0D00,             // Range Minimum
                    0xFFFF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0xF300,             // Length
                    ,, , TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000A0000,         // Range Minimum
                    0x000BFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C0000,         // Range Minimum
                    0x000DFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    ,, _Y18, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, _Y19, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, _Y1A, AddressRangeMemory, TypeStatic)
            })
            CreateDWordField (CRS, \_SB.PCI0._Y18._MIN, MIN5)  // _MIN: Minimum Base Address
            CreateDWordField (CRS, \_SB.PCI0._Y18._MAX, MAX5)  // _MAX: Maximum Base Address
            CreateDWordField (CRS, \_SB.PCI0._Y18._LEN, LEN5)  // _LEN: Length
            CreateDWordField (CRS, \_SB.PCI0._Y19._MIN, MIN6)  // _MIN: Minimum Base Address
            CreateDWordField (CRS, \_SB.PCI0._Y19._MAX, MAX6)  // _MAX: Maximum Base Address
            CreateDWordField (CRS, \_SB.PCI0._Y19._LEN, LEN6)  // _LEN: Length
            CreateDWordField (CRS, \_SB.PCI0._Y1A._MIN, MIN7)  // _MIN: Minimum Base Address
            CreateDWordField (CRS, \_SB.PCI0._Y1A._MAX, MAX7)  // _MAX: Maximum Base Address
            CreateDWordField (CRS, \_SB.PCI0._Y1A._LEN, LEN7)  // _LEN: Length
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = MG1L /* \MG1L */
                If (Local0)
                {
                    MIN5 = MG1B /* \MG1B */
                    LEN5 = MG1L /* \MG1L */
                    MAX5 = (MIN5 + Local0--)
                }

                MIN6 = MG2B /* \MG2B */
                LEN6 = MG2L /* \MG2L */
                Local0 = MG2L /* \MG2L */
                MAX6 = (MIN6 + Local0--)
                MIN7 = MG3B /* \MG3B */
                LEN7 = MG3L /* \MG3L */
                Local0 = MG3L /* \MG3L */
                MAX7 = (MIN7 + Local0--)
                Return (CRS) /* \_SB_.PCI0.CRS_ */
            }
        }
    }

    OperationRegion (NVSB, SystemIO, 0x44BA, One)
    Field (NVSB, ByteAcc, NoLock, Preserve)
    {
        SIND,   8
    }

    OperationRegion (SBO1, SystemIO, 0x44BB, One)
    Field (SBO1, ByteAcc, NoLock, Preserve)
    {
        LEDW,   8
    }

    OperationRegion (SBO2, SystemIO, 0x44E1, One)
    Field (SBO2, ByteAcc, NoLock, Preserve)
    {
        BLNK,   8
    }

    OperationRegion (NV3, SystemIO, 0x44B8, One)
    Field (NV3, ByteAcc, NoLock, Preserve)
    {
        SIN3,   8
    }

    OperationRegion (SB3, SystemIO, 0x44B9, One)
    Field (SB3, ByteAcc, NoLock, Preserve)
    {
        LED3,   8
    }

    OperationRegion (SB23, SystemIO, 0x44C0, One)
    Field (SB23, ByteAcc, NoLock, Preserve)
    {
        BLK3,   8
    }

    Name (WOTB, Zero)
    Name (WSSB, Zero)
    Name (WAXB, Zero)
    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        DBG8 = Arg0
        PTS (Arg0)
        Index (WAKP, Zero) = Zero
        Index (WAKP, One) = Zero
        If (((Arg0 == 0x04) && (OSFL () == 0x02)))
        {
            Sleep (0x0BB8)
        }

        WSSB = ASSB /* \ASSB */
        WOTB = AOTB /* \AOTB */
        WAXB = AAXB /* \AAXB */
        ASSB = Arg0
        AOTB = OSFL ()
        OSTP = OSYS ()
        AAXB = Zero
    }

    Method (_WAK, 1, NotSerialized)  // _WAK: Wake
    {
        If ((Arg0 == One))
        {
            SIND = Zero
            LEDW = Zero
            BLNK = 0x44
        }

        If ((Arg0 == 0x03))
        {
            SIN3 = Zero
            LED3 = Zero
            BLK3 = 0x45
        }

        DBG8 = (Arg0 << 0x04)
        WAK (Arg0)
        If (ASSB)
        {
            ASSB = WSSB /* \WSSB */
            AOTB = WOTB /* \WOTB */
            AAXB = WAXB /* \WAXB */
        }

        If (DerefOf (Index (WAKP, Zero)))
        {
            Index (WAKP, One) = Zero
        }
        Else
        {
            Index (WAKP, One) = Arg0
        }

        Return (WAKP) /* \WAKP */
    }

    Name (_S0, Package (0x04)  // _S0_: S0 System State
    {
        Zero, 
        Zero, 
        Zero, 
        Zero
    })
    If (SS1)
    {
        Name (_S1, Package (0x04)  // _S1_: S1 System State
        {
            One, 
            Zero, 
            Zero, 
            Zero
        })
    }

    If (SS3)
    {
        Name (_S3, Package (0x04)  // _S3_: S3 System State
        {
            0x05, 
            Zero, 
            Zero, 
            Zero
        })
    }

    If (SS4)
    {
        Name (_S4, Package (0x04)  // _S4_: S4 System State
        {
            0x06, 
            Zero, 
            Zero, 
            Zero
        })
    }

    Name (_S5, Package (0x04)  // _S5_: S5 System State
    {
        0x07, 
        Zero, 
        Zero, 
        Zero
    })
    Method (PTS, 1, NotSerialized)
    {
        If (Arg0)
        {
            \_SB.PCI0.NPTS (Arg0)
            \_SB.PCI0.SBRG.SPTS (Arg0)
        }
    }

    Method (WAK, 1, NotSerialized)
    {
        \_SB.PCI0.NWAK (Arg0)
        \_SB.PCI0.SBRG.SWAK (Arg0)
    }
}



FACP
----
[000h 0000   4]                    Signature : "FACP"    [Fixed ACPI Description Table (FADT)]
[004h 0004   4]                 Table Length : 000000F4
[008h 0008   1]                     Revision : 03
[009h 0009   1]                     Checksum : 84
[00Ah 0010   6]                       Oem ID : "ACRSYS"
[010h 0016   8]                 Oem Table ID : "FACP1452"
[018h 0024   4]                 Oem Revision : 20090722
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00000097

[024h 0036   4]                 FACS Address : 6FF9E000
[028h 0040   4]                 DSDT Address : 6FF90620
[02Ch 0044   1]                        Model : 01
[02Dh 0045   1]                   PM Profile : 01 [Desktop]
[02Eh 0046   2]                SCI Interrupt : 0009
[030h 0048   4]             SMI Command Port : 0000442E
[034h 0052   1]            ACPI Enable Value : E1
[035h 0053   1]           ACPI Disable Value : 1E
[036h 0054   1]               S4BIOS Command : 00
[037h 0055   1]              P-State Control : E2
[038h 0056   4]     PM1A Event Block Address : 00004000
[03Ch 0060   4]     PM1B Event Block Address : 00000000
[040h 0064   4]   PM1A Control Block Address : 00004004
[044h 0068   4]   PM1B Control Block Address : 00000000
[048h 0072   4]    PM2 Control Block Address : 00004484
[04Ch 0076   4]       PM Timer Block Address : 00004008
[050h 0080   4]           GPE0 Block Address : 00004020
[054h 0084   4]           GPE1 Block Address : 000044A0
[058h 0088   1]       PM1 Event Block Length : 04
[059h 0089   1]     PM1 Control Block Length : 02
[05Ah 0090   1]     PM2 Control Block Length : 01
[05Bh 0091   1]        PM Timer Block Length : 04
[05Ch 0092   1]            GPE0 Block Length : 08
[05Dh 0093   1]            GPE1 Block Length : 10
[05Eh 0094   1]             GPE1 Base Offset : 20
[05Fh 0095   1]                 _CST Support : E3
[060h 0096   2]                   C2 Latency : 0065
[062h 0098   2]                   C3 Latency : 03E9
[064h 0100   2]               CPU Cache Size : 0400
[066h 0102   2]           Cache Flush Stride : 0010
[068h 0104   1]            Duty Cycle Offset : 01
[069h 0105   1]             Duty Cycle Width : 03
[06Ah 0106   1]          RTC Day Alarm Index : 7D
[06Bh 0107   1]        RTC Month Alarm Index : 7E
[06Ch 0108   1]            RTC Century Index : 32
[06Dh 0109   2]   Boot Flags (decoded below) : 0003
               Legacy Devices Supported (V2) : 1
            8042 Present on ports 60/64 (V2) : 1
                        VGA Not Present (V4) : 0
                      MSI Not Supported (V4) : 0
                PCIe ASPM Not Supported (V4) : 0
                   CMOS RTC Not Present (V5) : 0
[06Fh 0111   1]                     Reserved : 00
[070h 0112   4]        Flags (decoded below) : 000001A5
      WBINVD instruction is operational (V1) : 1
              WBINVD flushes all caches (V1) : 0
                    All CPUs support C1 (V1) : 1
                  C2 works on MP system (V1) : 0
            Control Method Power Button (V1) : 0
            Control Method Sleep Button (V1) : 1
        RTC wake not in fixed reg space (V1) : 0
            RTC can wake system from S4 (V1) : 1
                        32-bit PM Timer (V1) : 1
                      Docking Supported (V1) : 0
               Reset Register Supported (V2) : 0
                            Sealed Case (V3) : 0
                    Headless - No Video (V3) : 0
        Use native instr after SLP_TYPx (V3) : 0
              PCIEXP_WAK Bits Supported (V4) : 0
                     Use Platform Timer (V4) : 0
               RTC_STS valid on S4 wake (V4) : 0
                Remote Power-on capable (V4) : 0
                 Use APIC Cluster Model (V4) : 0
     Use APIC Physical Destination Mode (V4) : 0
                       Hardware Reduced (V5) : 0
                      Low Power S0 Idle (V5) : 0

[074h 0116  12]               Reset Register : [Generic Address Structure]
[074h 0116   1]                     Space ID : 00 [SystemMemory]
[075h 0117   1]                    Bit Width : 00
[076h 0118   1]                   Bit Offset : 00
[077h 0119   1]         Encoded Access Width : 00 [Undefined/Legacy]
[078h 0120   8]                      Address : 0000000000000000

[080h 0128   1]         Value to cause reset : 00
[081h 0129   2]    ARM Flags (decoded below) : 0000
                              PSCI Compliant : 0
                       Must use HVC for PSCI : 0

[083h 0131   1]          FADT Minor Revision : 00
[084h 0132   8]                 FACS Address : 000000006FF9E000
[08Ch 0140   8]                 DSDT Address : 000000006FF90620
[094h 0148  12]             PM1A Event Block : [Generic Address Structure]
[094h 0148   1]                     Space ID : 01 [SystemIO]
[095h 0149   1]                    Bit Width : 20
[096h 0150   1]                   Bit Offset : 00
[097h 0151   1]         Encoded Access Width : 00 [Undefined/Legacy]
[098h 0152   8]                      Address : 0000000000004000

[0A0h 0160  12]             PM1B Event Block : [Generic Address Structure]
[0A0h 0160   1]                     Space ID : 01 [SystemIO]
[0A1h 0161   1]                    Bit Width : 20
[0A2h 0162   1]                   Bit Offset : 00
[0A3h 0163   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0A4h 0164   8]                      Address : 0000000000000000

[0ACh 0172  12]           PM1A Control Block : [Generic Address Structure]
[0ACh 0172   1]                     Space ID : 01 [SystemIO]
[0ADh 0173   1]                    Bit Width : 10
[0AEh 0174   1]                   Bit Offset : 00
[0AFh 0175   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0B0h 0176   8]                      Address : 0000000000004004

[0B8h 0184  12]           PM1B Control Block : [Generic Address Structure]
[0B8h 0184   1]                     Space ID : 00 [SystemMemory]
[0B9h 0185   1]                    Bit Width : 00
[0BAh 0186   1]                   Bit Offset : 00
[0BBh 0187   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0BCh 0188   8]                      Address : 0000000000000000

[0C4h 0196  12]            PM2 Control Block : [Generic Address Structure]
[0C4h 0196   1]                     Space ID : 00 [SystemMemory]
[0C5h 0197   1]                    Bit Width : 00
[0C6h 0198   1]                   Bit Offset : 00
[0C7h 0199   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0C8h 0200   8]                      Address : 0000000000000000

[0D0h 0208  12]               PM Timer Block : [Generic Address Structure]
[0D0h 0208   1]                     Space ID : 01 [SystemIO]
[0D1h 0209   1]                    Bit Width : 20
[0D2h 0210   1]                   Bit Offset : 00
[0D3h 0211   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0D4h 0212   8]                      Address : 0000000000004008

[0DCh 0220  12]                   GPE0 Block : [Generic Address Structure]
[0DCh 0220   1]                     Space ID : 01 [SystemIO]
[0DDh 0221   1]                    Bit Width : 40
[0DEh 0222   1]                   Bit Offset : 00
[0DFh 0223   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0E0h 0224   8]                      Address : 0000000000004020

[0E8h 0232  12]                   GPE1 Block : [Generic Address Structure]
[0E8h 0232   1]                     Space ID : 01 [SystemIO]
[0E9h 0233   1]                    Bit Width : 80
[0EAh 0234   1]                   Bit Offset : 00
[0EBh 0235   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0ECh 0236   8]                      Address : 00000000000044A0


Raw Table Data: Length 244 (0xF4)

  0000: 46 41 43 50 F4 00 00 00 03 84 41 43 52 53 59 53  FACP......ACRSYS
  0010: 46 41 43 50 31 34 35 32 22 07 09 20 4D 53 46 54  FACP1452".. MSFT
  0020: 97 00 00 00 00 E0 F9 6F 20 06 F9 6F 01 01 09 00  .......o ..o....
  0030: 2E 44 00 00 E1 1E 00 E2 00 40 00 00 00 00 00 00  .D.......@......
  0040: 04 40 00 00 00 00 00 00 84 44 00 00 08 40 00 00  .@.......D...@..
  0050: 20 40 00 00 A0 44 00 00 04 02 01 04 08 10 20 E3   @...D........ .
  0060: 65 00 E9 03 00 04 10 00 01 03 7D 7E 32 03 00 00  e.........}~2...
  0070: A5 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  0080: 00 00 00 00 00 E0 F9 6F 00 00 00 00 20 06 F9 6F  .......o.... ..o
  0090: 00 00 00 00 01 20 00 00 00 40 00 00 00 00 00 00  ..... ...@......
  00A0: 01 20 00 00 00 00 00 00 00 00 00 00 01 10 00 00  . ..............
  00B0: 04 40 00 00 00 00 00 00 00 00 00 00 00 00 00 00  .@..............
  00C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  00D0: 01 20 00 00 08 40 00 00 00 00 00 00 01 40 00 00  . ...@.......@..
  00E0: 20 40 00 00 00 00 00 00 01 80 00 00 A0 44 00 00   @...........D..
  00F0: 00 00 00 00                                      ....


FACS
----
[000h 0000   4]                    Signature : "FACS"
[004h 0004   4]                       Length : 00000040
[008h 0008   4]           Hardware Signature : 00000000
[00Ch 0012   4]    32 Firmware Waking Vector : 00000000
[010h 0016   4]                  Global Lock : 00000000
[014h 0020   4]        Flags (decoded below) : 00000000
                      S4BIOS Support Present : 0
                  64-bit Wake Supported (V2) : 0
[018h 0024   8]    64 Firmware Waking Vector : 0000000000000000
[020h 0032   1]                      Version : 01
[021h 0033   3]                     Reserved : 000000
[024h 0036   4]    OspmFlags (decoded below) : 00000000
               64-bit Wake Env Required (V2) : 0

Raw Table Data: Length 64 (0x40)

  0000: 46 41 43 53 40 00 00 00 00 00 00 00 00 00 00 00  FACS@...........
  0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  0020: 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................


HPET
----
[000h 0000   4]                    Signature : "HPET"    [High Precision Event Timer table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : F0
[00Ah 0010   6]                       Oem ID : "ACRSYS"
[010h 0016   8]                 Oem Table ID : "OEMHPET0"
[018h 0024   4]                 Oem Revision : 20090722
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00000097

[024h 0036   4]            Hardware Block ID : 10DE8201

[028h 0040  12]         Timer Block Register : [Generic Address Structure]
[028h 0040   1]                     Space ID : 00 [SystemMemory]
[029h 0041   1]                    Bit Width : 08
[02Ah 0042   1]                   Bit Offset : 00
[02Bh 0043   1]         Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044   8]                      Address : 00000000FED00000

[034h 0052   1]              Sequence Number : 00
[035h 0053   2]          Minimum Clock Ticks : 37EE
[037h 0055   1]        Flags (decoded below) : 00
                             4K Page Protect : 0
                            64K Page Protect : 0

Raw Table Data: Length 56 (0x38)

  0000: 48 50 45 54 38 00 00 00 01 F0 41 43 52 53 59 53  HPET8.....ACRSYS
  0010: 4F 45 4D 48 50 45 54 30 22 07 09 20 4D 53 46 54  OEMHPET0".. MSFT
  0020: 97 00 00 00 01 82 DE 10 00 08 00 00 00 00 D0 FE  ................
  0030: 00 00 00 00 00 EE 37 00                          ......7.


MCFG
----
[000h 0000   4]                    Signature : "MCFG"    [Memory Mapped Configuration table]
[004h 0004   4]                 Table Length : 0000003C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 75
[00Ah 0010   6]                       Oem ID : "ACRSYS"
[010h 0016   8]                 Oem Table ID : "OEMMCFG "
[018h 0024   4]                 Oem Revision : 20090722
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00000097

[024h 0036   8]                     Reserved : 0000000000000000

[02Ch 0044   8]                 Base Address : 00000000FC000000
[034h 0052   2]         Segment Group Number : 0000
[036h 0054   1]             Start Bus Number : 00
[037h 0055   1]               End Bus Number : 1F
[038h 0056   4]                     Reserved : 00000000

Raw Table Data: Length 60 (0x3C)

  0000: 4D 43 46 47 3C 00 00 00 01 75 41 43 52 53 59 53  MCFG<....uACRSYS
  0010: 4F 45 4D 4D 43 46 47 20 22 07 09 20 4D 53 46 54  OEMMCFG ".. MSFT
  0020: 97 00 00 00 00 00 00 00 00 00 00 00 00 00 00 FC  ................
  0030: 00 00 00 00 00 00 00 1F 00 00 00 00              ............


NVHD
----
[000h 0000   4]                    Signature : "NVHD"    
[004h 0004   4]                 Table Length : 00000284
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 6E
[00Ah 0010   6]                       Oem ID : "ACRSYS"
[010h 0016   8]                 Oem Table ID : "NVHDCP "
[018h 0024   4]                 Oem Revision : 20090722
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00000097


**** Unknown ACPI table type [NVHD]


Raw Table Data: Length 644 (0x284)

  0000: 4E 56 48 44 84 02 00 00 01 6E 41 43 52 53 59 53  NVHD.....nACRSYS
  0010: 4E 56 48 44 43 50 20 00 22 07 09 20 4D 53 46 54  NVHDCP .".. MSFT
  0020: 97 00 00 00 24 48 44 43 50 24 CF 00 58 02 03 02  ....$HDCP$..X...
  0030: 4E 56 10 4C 03 02 48 02 7F 1C E5 AB 4E AB 69 35  NV.L..H.....N.i5
  0040: 70 CC DC A0 6B 8F CE 99 52 67 46 3E 21 8D 0E 68  p...k...RgF>!..h
  0050: 6F 7E AC 89 70 0F 1D 8C 9B C8 FB C4 8D 41 41 3C  o~..p........AA<
  0060: DF 25 83 42 14 AC 18 06 61 27 DF D6 E7 B6 48 44  .%.B....a'....HD
  0070: 97 69 00 26 51 A3 42 38 25 CF 14 7A C6 A2 95 30  .i.&Q.B8%..z...0
  0080: 26 33 1F E8 3D FE 64 C7 3A A2 C6 43 C6 9B 9C EA  &3..=.d.:..C....
  0090: A2 BC F7 68 42 41 C3 B1 8C F8 6E 0F 6C 50 3F F1  ...hBA....n.lP?.
  00A0: 80 DB 4B 1F A3 98 37 F5 AB A3 51 2C BF 79 C0 D9  ..K...7...Q,.y..
  00B0: E7 D9 58 1D 49 E4 0D 4B D8 59 CD 8C A5 AD 41 A0  ..X.I..K.Y....A.
  00C0: 85 91 DB 47 0B 0A 74 4A 44 36 6C 53 1F EC 97 E2  ...G..tJD6lS....
  00D0: 32 A5 76 65 76 9B 90 AE 81 60 94 F5 94 F4 1A 43  2.vev....`.....C
  00E0: 2A 8E 7D F5 2C 8E AD 23 4C 99 9E 9F EB 8F 8D 4D  *.}.,..#L......M
  00F0: C3 9E E8 2D 6F D1 CD 9A AD CB EC 22 C5 60 56 CB  ...-o......".`V.
  0100: 6A CC 83 AE 2B 2B B9 68 E5 D3 BA 16 67 C3 1D F1  j...++.h....g...
  0110: A1 28 35 FA 7B 5D 94 6C FF 5F 4D 9C 32 40 6B E0  .(5.{].l._M.2@k.
  0120: 44 27 44 71 4F E2 7E B5 CB 32 F4 E2 60 1F 11 AF  D'DqO.~..2..`...
  0130: 86 91 3E 99 F2 DD 33 2B BB D1 66 08 6E A7 E6 E8  ..>...3+..f.n...
  0140: 31 A9 EB 71 73 01 FF 47 60 81 4D 51 D3 AB 1F 7C  1..qs..G`.MQ...|
  0150: D5 63 EC CA CF 10 0B DA 8C F5 73 E1 52 A5 0D E6  .c........s.R...
  0160: 86 78 77 74 4F 12 79 95 0A BB 5C FD 82 3F DD 3F  .xwtO.y...\..?.?
  0170: 6D E8 4C A0 09 8F 1C 96 2C D4 96 12 8C F1 41 7B  m.L.....,.....A{
  0180: D8 56 DC 49 1E 32 2A F5 B0 47 27 34 C3 9C 2A 1B  .V.I.2*..G'4..*.
  0190: B1 0D 92 CA E1 82 E9 A4 E4 43 5C 7A 7C CF FF 34  .........C\z|..4
  01A0: 8C 9D 3E 60 2A 25 5E A1 A5 57 44 42 D4 16 E6 8F  ..>`*%^..WDB....
  01B0: AD 50 99 37 CE 6E 0B 97 77 CD C5 0B 6B 15 6C 38  .P.7.n..w...k.l8
  01C0: 70 F9 36 47 8B 62 8E 3D DA C5 A2 89 9E 25 B8 60  p.6G.b.=.....%.`
  01D0: 70 4A E3 FF 42 C9 1F 38 EB 4C F1 3E E1 DE B1 F5  pJ..B..8.L.>....
  01E0: 24 FA 23 C8 54 E5 DD 6E 3B 01 DA CE 64 F8 CC EA  $.#.T..n;...d...
  01F0: F5 0D 5C 5D B3 1B FE C5 E6 D8 29 10 EB 68 2B BF  ..\]......)..h+.
  0200: 8A C3 B3 3B A8 9A 56 15 42 BD E2 06 B3 12 BC 8B  ...;..V.B.......
  0210: B0 D4 43 DA 10 68 13 61 64 44 F4 0C D1 0C FE B7  ..C..h.adD......
  0220: CA C1 A5 10 3A 62 B5 F9 4D BB 6D C9 91 B3 72 D4  ....:b..M.m...r.
  0230: 43 03 49 EA E3 72 CA 18 BF 7B 37 47 26 33 1B CD  C.I..r...{7G&3..
  0240: 97 28 91 46 6B 14 8B EE D1 94 7D 18 D0 4E EE 19  .(.Fk.....}..N..
  0250: B9 6A 7D A8 CF C2 41 F1 92 9A DB 76 78 10 F0 A9  .j}...A....vx...
  0260: CE 6B 11 59 67 09 03 E7 AC A6 6C 4D 9A C3 A6 24  .k.Yg.....lM...$
  0270: C2 DD 79 8E 13 8B C3 82 92 01 00 00 A1 5C DD 46  ..y..........\.F
  0280: 01 00 00 00                                      ....


OEMB
----
[000h 0000   4]                    Signature : "OEMB"    
[004h 0004   4]                 Table Length : 00000079
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : A8
[00Ah 0010   6]                       Oem ID : "ACRSYS"
[010h 0016   8]                 Oem Table ID : "OEMB1452"
[018h 0024   4]                 Oem Revision : 20090722
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00000097


**** OEM-defined ACPI table [OEMB], unknown contents


Raw Table Data: Length 121 (0x79)

  0000: 4F 45 4D 42 79 00 00 00 01 A8 41 43 52 53 59 53  OEMBy.....ACRSYS
  0010: 4F 45 4D 42 31 34 35 32 22 07 09 20 4D 53 46 54  OEMB1452".. MSFT
  0020: 97 00 00 00 0C 00 00 00 00 00 80 00 00 F0 FF 00  ................
  0030: 00 0D 00 00 00 01 00 00 00 00 80 00 00 00 7C 00  ..............|.
  0040: 87 F0 4E 0E 00 00 00 00 00 00 00 00 00 00 00 00  ..N.............
  0050: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  0060: 00 00 00 00 FE 00 00 C0 00 00 00 C0 FE 00 00 00  ................
  0070: 00 00 00 00 00 00 00 00 00                       .........


RSDP
----
[000h 0000   8]                    Signature : "RSD PTR "
[008h 0008   1]                     Checksum : CC
[009h 0009   6]                       Oem ID : "ACPIAM"
[00Fh 0015   1]                     Revision : 02
[010h 0016   4]                 RSDT Address : 6FF90000
[014h 0020   4]                       Length : 00000024
[018h 0024   8]                 XSDT Address : 000000006FF90100
[020h 0032   1]            Extended Checksum : 73
[021h 0033   3]                     Reserved : 000000

Raw Table Data: Length 36 (0x24)

  0000: 52 53 44 20 50 54 52 20 CC 41 43 50 49 41 4D 02  RSD PTR .ACPIAM.
  0010: 00 00 F9 6F 24 00 00 00 00 01 F9 6F 00 00 00 00  ...o$......o....
  0020: 73 00 00 00                                      s...


RSDT
----
[000h 0000   4]                    Signature : "RSDT"    [Root System Description Table]
[004h 0004   4]                 Table Length : 00000048
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 46
[00Ah 0010   6]                       Oem ID : "ACRSYS"
[010h 0016   8]                 Oem Table ID : "RSDT1452"
[018h 0024   4]                 Oem Revision : 20090722
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00000097

[024h 0036   4]       ACPI Table Address   0 : 6FF90200
[028h 0040   4]       ACPI Table Address   1 : 6FF90390
[02Ch 0044   4]       ACPI Table Address   2 : 6FF90410
[030h 0048   4]       ACPI Table Address   3 : 6FF90450
[034h 0052   4]       ACPI Table Address   4 : 6FF905D0
[038h 0056   4]       ACPI Table Address   5 : 6FF9E040
[03Ch 0060   4]       ACPI Table Address   6 : 6FF9A620
[040h 0064   4]       ACPI Table Address   7 : 6FF9E0C0
[044h 0068   4]       ACPI Table Address   8 : 6FF9E350

Raw Table Data: Length 72 (0x48)

  0000: 52 53 44 54 48 00 00 00 01 46 41 43 52 53 59 53  RSDTH....FACRSYS
  0010: 52 53 44 54 31 34 35 32 22 07 09 20 4D 53 46 54  RSDT1452".. MSFT
  0020: 97 00 00 00 00 02 F9 6F 90 03 F9 6F 10 04 F9 6F  .......o...o...o
  0030: 50 04 F9 6F D0 05 F9 6F 40 E0 F9 6F 20 A6 F9 6F  P..o...o@..o ..o
  0040: C0 E0 F9 6F 50 E3 F9 6F                          ...oP..o


SLIC
----
[000h 0000   4]                    Signature : "SLIC"    [Software Licensing Description Table]
[004h 0004   4]                 Table Length : 00000176
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : B9
[00Ah 0010   6]                       Oem ID : "ACRSYS"
[010h 0016   8]                 Oem Table ID : "SLIC1452"
[018h 0024   4]                 Oem Revision : 20090722
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00000097


[024h 0036   4]                Subtable Type : 00000000 [Public Key Structure]
[028h 0040   4]                       Length : 0000009C

[02Ch 0044   1]                     Key Type : 06
[02Dh 0045   1]                      Version : 02
[02Eh 0046   2]                     Reserved : 0000
[030h 0048   4]                    Algorithm : 00002400
[034h 0052   4]                        Magic : "1ASR"
[038h 0056   4]                    BitLength : 00000400
[03Ch 0060   4]                     Exponent : 00000101
[040h 0064 128]                      Modulus : 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \
                                               00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \
                                               00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \
                                               00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \
                                               00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \
                                               00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \
                                               00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \
                                               00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00

[0C0h 0192   4]                Subtable Type : 00000001 [Windows Marker Structure]
[0C4h 0196   4]                       Length : 000000B6

[0C8h 0200   4]                      Version : 00020000
[0CCh 0204   6]                       Oem ID : "ACRSYS"
[0D2h 0210   8]                 Oem Table ID : "SLIC1452"
[0DAh 0218   8]                 Windows Flag : "WINDOWS "
[0E2h 0226   4]                 SLIC Version : 00000000
[0E6h 0230  16]                     Reserved : 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
[0F6h 0246 128]                    Signature : 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \
                                               00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \
                                               00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \
                                               00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \
                                               00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \
                                               00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \
                                               00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \
                                               00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00

Raw Table Data: Length 374 (0x176)

  0000: 53 4C 49 43 76 01 00 00 01 B9 41 43 52 53 59 53  SLICv.....ACRSYS
  0010: 53 4C 49 43 31 34 35 32 22 07 09 20 4D 53 46 54  SLIC1452".. MSFT
  0020: 97 00 00 00 00 00 00 00 9C 00 00 00 06 02 00 00  ................
  0030: 00 24 00 00 31 41 53 52 00 04 00 00 01 01 00 00  .$..1ASR........
  0040: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  0050: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  0060: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  0070: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  0080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  0090: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  00A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  00B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  00C0: 01 00 00 00 B6 00 00 00 00 00 02 00 41 43 52 53  ............ACRS
  00D0: 59 53 53 4C 49 43 31 34 35 32 57 49 4E 44 4F 57  YSSLIC1452WINDOW
  00E0: 53 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00  S ..............
  00F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  0100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  0110: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  0120: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  0130: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  0140: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  0150: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  0160: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
  0170: 00 00 00 00 00 00                                ......


WDRT
----
[000h 0000   4]                    Signature : "WDRT"    [Watchdog Resource Table]
[004h 0004   4]                 Table Length : 00000047
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 71
[00Ah 0010   6]                       Oem ID : "ACRSYS"
[010h 0016   8]                 Oem Table ID : "NV-WDRT "
[018h 0024   4]                 Oem Revision : 20090722
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00000097


[024h 0036  12]             Control Register : [Generic Address Structure]
[024h 0036   1]                     Space ID : 00 [SystemMemory]
[025h 0037   1]                    Bit Width : 08
[026h 0038   1]                   Bit Offset : 00
[027h 0039   1]         Encoded Access Width : 03 [DWord Access:32]
[028h 0040   8]                      Address : 00000000FED01000

[030h 0048  12]               Count Register : [Generic Address Structure]
[030h 0048   1]                     Space ID : 00 [SystemMemory]
[031h 0049   1]                    Bit Width : 10
[032h 0050   1]                   Bit Offset : 00
[033h 0051   1]         Encoded Access Width : 03 [DWord Access:32]
[034h 0052   8]                      Address : 00000000FED01008

[03Ch 0060   2]                PCI Device ID : FFFF
[03Eh 0062   2]                PCI Vendor ID : FFFF
[040h 0064   1]                      PCI Bus : 00
[041h 0065   1]                   PCI Device : 00
[042h 0066   1]                 PCI Function : 00
[043h 0067   1]                  PCI Segment : 00
[044h 0068   2]                    Max Count : FFFF
[046h 0070   1]                Counter Units : 00

Raw Table Data: Length 71 (0x47)

  0000: 57 44 52 54 47 00 00 00 01 71 41 43 52 53 59 53  WDRTG....qACRSYS
  0010: 4E 56 2D 57 44 52 54 20 22 07 09 20 4D 53 46 54  NV-WDRT ".. MSFT
  0020: 97 00 00 00 00 08 00 03 00 10 D0 FE 00 00 00 00  ................
  0030: 00 10 00 03 08 10 D0 FE 00 00 00 00 FF FF FF FF  ................
  0040: 00 00 00 00 FF FF 00                             .......


XSDT
----
[000h 0000   4]                    Signature : "XSDT"    [Extended System Description Table]
[004h 0004   4]                 Table Length : 0000006C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 86
[00Ah 0010   6]                       Oem ID : "ACRSYS"
[010h 0016   8]                 Oem Table ID : "XSDT1452"
[018h 0024   4]                 Oem Revision : 20090722
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00000097

[024h 0036   8]       ACPI Table Address   0 : 000000006FF90290
[02Ch 0044   8]       ACPI Table Address   1 : 000000006FF90390
[034h 0052   8]       ACPI Table Address   2 : 000000006FF90410
[03Ch 0060   8]       ACPI Table Address   3 : 000000006FF90450
[044h 0068   8]       ACPI Table Address   4 : 000000006FF905D0
[04Ch 0076   8]       ACPI Table Address   5 : 000000006FF9E040
[054h 0084   8]       ACPI Table Address   6 : 000000006FF9A620
[05Ch 0092   8]       ACPI Table Address   7 : 000000006FF9E0C0
[064h 0100   8]       ACPI Table Address   8 : 000000006FF9E350

Raw Table Data: Length 108 (0x6C)

  0000: 58 53 44 54 6C 00 00 00 01 86 41 43 52 53 59 53  XSDTl.....ACRSYS
  0010: 58 53 44 54 31 34 35 32 22 07 09 20 4D 53 46 54  XSDT1452".. MSFT
  0020: 97 00 00 00 90 02 F9 6F 00 00 00 00 90 03 F9 6F  .......o.......o
  0030: 00 00 00 00 10 04 F9 6F 00 00 00 00 50 04 F9 6F  .......o....P..o
  0040: 00 00 00 00 D0 05 F9 6F 00 00 00 00 40 E0 F9 6F  .......o....@..o
  0050: 00 00 00 00 20 A6 F9 6F 00 00 00 00 C0 E0 F9 6F  .... ..o.......o
  0060: 00 00 00 00 50 E3 F9 6F 00 00 00 00              ....P..o....


