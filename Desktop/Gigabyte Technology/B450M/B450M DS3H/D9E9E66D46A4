
Intel ACPI Component Architecture
ACPI Binary Table Extraction Utility version 20180629
Copyright (c) 2000 - 2018 Intel Corporation


 Signature  Length    Version Oem       Oem         Oem         Compiler Compiler
                              Id        TableId     RevisionId  Name     Revision
 _________  __________  ____  ________  __________  __________  _______  __________

 01)  SSDT  0x0000627E  0x01  "ALASKA"  "A M I   "  0x00000001  "INTL"   0x20160930
 02)  MCFG  0x0000003C  0x01  "ALASKA"  "A M I   "  0x01072009  "MSFT"   0x00010013
 03)  APIC  0x0000015E  0x03  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00010013
 04)  CRAT  0x00000810  0x01  "ALASKA"  "A M I   "  0x00000001  "AMD "   0x00000001
 05)  SSDT  0x00005419  0x02  "ALASKA"  "A M I   "  0x00000002  "MSFT"   0x02000002
 06)  CDIT  0x00000029  0x01  "ALASKA"  "A M I   "  0x00000001  "AMD "   0x00000001
 07)  UEFI  0x00000042  0x01  "ALASKA"  "A M I   "  0x00000002  "    "   0x01000013
 08)  IVRS  0x000000D0  0x02  "ALASKA"  "A M I   "  0x00000001  "AMD "   0x00000000
 09)  DSDT  0x00006605  0x02  "ALASKA"  "A M I   "  0x01072009  "INTL"   0x20160930
 10)  SSDT  0x000000BF  0x01  "ALASKA"  "A M I   "  0x00001000  "INTL"   0x20160930
 11)  WSMT  0x00000028  0x01  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00010013
 12)  SSDT  0x000007DC  0x01  "ALASKA"  "A M I   "  0x00000001  "AMD "   0x00000001
 13)  SSDT  0x00003096  0x01  "ALASKA"  "A M I   "  0x00000001  "INTL"   0x20160930
 14)  FACP  0x00000114  0x06  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00010013
 15)  FPDT  0x00000044  0x01  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00010013
 16)  SSDT  0x00000060  0x02  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x01072009
 17)  SSDT  0x000013F0  0x01  "ALASKA"  "A M I   "  0x00000001  "INTL"   0x20160930
 18)  HPET  0x00000038  0x01  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00000005
 19)  SSDT  0x00001E5E  0x01  "ALASKA"  "A M I   "  0x00000001  "INTL"   0x20160930
 20)  FIDT  0x0000009C  0x01  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00010013
 21)  FACS  0x00000040  0x02
 22)  BGRT  0x00000038  0x01  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00010013

Found 22 ACPI tables in /root/snap/hw-probe/common/HW_PROBE/LATEST/hw.info/logs/acpidump

APIC
----
[000h 0000   4]                    Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004   4]                 Table Length : 0000015E
[008h 0008   1]                     Revision : 03
[009h 0009   1]                     Checksum : 95
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   4]           Local Apic Address : FEE00000
[028h 0040   4]        Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044   1]                Subtable Type : 00 [Processor Local APIC]
[02Dh 0045   1]                       Length : 08
[02Eh 0046   1]                 Processor ID : 00
[02Fh 0047   1]                Local Apic ID : 00
[030h 0048   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[034h 0052   1]                Subtable Type : 00 [Processor Local APIC]
[035h 0053   1]                       Length : 08
[036h 0054   1]                 Processor ID : 02
[037h 0055   1]                Local Apic ID : 02
[038h 0056   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[03Ch 0060   1]                Subtable Type : 00 [Processor Local APIC]
[03Dh 0061   1]                       Length : 08
[03Eh 0062   1]                 Processor ID : 01
[03Fh 0063   1]                Local Apic ID : 01
[040h 0064   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[044h 0068   1]                Subtable Type : 00 [Processor Local APIC]
[045h 0069   1]                       Length : 08
[046h 0070   1]                 Processor ID : 03
[047h 0071   1]                Local Apic ID : 03
[048h 0072   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[04Ch 0076   1]                Subtable Type : 00 [Processor Local APIC]
[04Dh 0077   1]                       Length : 08
[04Eh 0078   1]                 Processor ID : 04
[04Fh 0079   1]                Local Apic ID : 00
[050h 0080   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0

[054h 0084   1]                Subtable Type : 00 [Processor Local APIC]
[055h 0085   1]                       Length : 08
[056h 0086   1]                 Processor ID : 05
[057h 0087   1]                Local Apic ID : 00
[058h 0088   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0

[05Ch 0092   1]                Subtable Type : 00 [Processor Local APIC]
[05Dh 0093   1]                       Length : 08
[05Eh 0094   1]                 Processor ID : 06
[05Fh 0095   1]                Local Apic ID : 00
[060h 0096   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0

[064h 0100   1]                Subtable Type : 00 [Processor Local APIC]
[065h 0101   1]                       Length : 08
[066h 0102   1]                 Processor ID : 07
[067h 0103   1]                Local Apic ID : 00
[068h 0104   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0

[06Ch 0108   1]                Subtable Type : 00 [Processor Local APIC]
[06Dh 0109   1]                       Length : 08
[06Eh 0110   1]                 Processor ID : 08
[06Fh 0111   1]                Local Apic ID : 00
[070h 0112   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0

[074h 0116   1]                Subtable Type : 00 [Processor Local APIC]
[075h 0117   1]                       Length : 08
[076h 0118   1]                 Processor ID : 09
[077h 0119   1]                Local Apic ID : 00
[078h 0120   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0

[07Ch 0124   1]                Subtable Type : 00 [Processor Local APIC]
[07Dh 0125   1]                       Length : 08
[07Eh 0126   1]                 Processor ID : 0A
[07Fh 0127   1]                Local Apic ID : 00
[080h 0128   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0

[084h 0132   1]                Subtable Type : 00 [Processor Local APIC]
[085h 0133   1]                       Length : 08
[086h 0134   1]                 Processor ID : 0B
[087h 0135   1]                Local Apic ID : 00
[088h 0136   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0

[08Ch 0140   1]                Subtable Type : 00 [Processor Local APIC]
[08Dh 0141   1]                       Length : 08
[08Eh 0142   1]                 Processor ID : 0C
[08Fh 0143   1]                Local Apic ID : 00
[090h 0144   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0

[094h 0148   1]                Subtable Type : 00 [Processor Local APIC]
[095h 0149   1]                       Length : 08
[096h 0150   1]                 Processor ID : 0D
[097h 0151   1]                Local Apic ID : 00
[098h 0152   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0

[09Ch 0156   1]                Subtable Type : 00 [Processor Local APIC]
[09Dh 0157   1]                       Length : 08
[09Eh 0158   1]                 Processor ID : 0E
[09Fh 0159   1]                Local Apic ID : 00
[0A0h 0160   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0

[0A4h 0164   1]                Subtable Type : 00 [Processor Local APIC]
[0A5h 0165   1]                       Length : 08
[0A6h 0166   1]                 Processor ID : 0F
[0A7h 0167   1]                Local Apic ID : 00
[0A8h 0168   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0

[0ACh 0172   1]                Subtable Type : 00 [Processor Local APIC]
[0ADh 0173   1]                       Length : 08
[0AEh 0174   1]                 Processor ID : 10
[0AFh 0175   1]                Local Apic ID : 00
[0B0h 0176   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0

[0B4h 0180   1]                Subtable Type : 00 [Processor Local APIC]
[0B5h 0181   1]                       Length : 08
[0B6h 0182   1]                 Processor ID : 11
[0B7h 0183   1]                Local Apic ID : 00
[0B8h 0184   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0

[0BCh 0188   1]                Subtable Type : 00 [Processor Local APIC]
[0BDh 0189   1]                       Length : 08
[0BEh 0190   1]                 Processor ID : 12
[0BFh 0191   1]                Local Apic ID : 00
[0C0h 0192   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0

[0C4h 0196   1]                Subtable Type : 00 [Processor Local APIC]
[0C5h 0197   1]                       Length : 08
[0C6h 0198   1]                 Processor ID : 13
[0C7h 0199   1]                Local Apic ID : 00
[0C8h 0200   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0

[0CCh 0204   1]                Subtable Type : 00 [Processor Local APIC]
[0CDh 0205   1]                       Length : 08
[0CEh 0206   1]                 Processor ID : 14
[0CFh 0207   1]                Local Apic ID : 00
[0D0h 0208   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0

[0D4h 0212   1]                Subtable Type : 00 [Processor Local APIC]
[0D5h 0213   1]                       Length : 08
[0D6h 0214   1]                 Processor ID : 15
[0D7h 0215   1]                Local Apic ID : 00
[0D8h 0216   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0

[0DCh 0220   1]                Subtable Type : 00 [Processor Local APIC]
[0DDh 0221   1]                       Length : 08
[0DEh 0222   1]                 Processor ID : 16
[0DFh 0223   1]                Local Apic ID : 00
[0E0h 0224   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0

[0E4h 0228   1]                Subtable Type : 00 [Processor Local APIC]
[0E5h 0229   1]                       Length : 08
[0E6h 0230   1]                 Processor ID : 17
[0E7h 0231   1]                Local Apic ID : 00
[0E8h 0232   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0

[0ECh 0236   1]                Subtable Type : 00 [Processor Local APIC]
[0EDh 0237   1]                       Length : 08
[0EEh 0238   1]                 Processor ID : 18
[0EFh 0239   1]                Local Apic ID : 00
[0F0h 0240   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0

[0F4h 0244   1]                Subtable Type : 00 [Processor Local APIC]
[0F5h 0245   1]                       Length : 08
[0F6h 0246   1]                 Processor ID : 19
[0F7h 0247   1]                Local Apic ID : 00
[0F8h 0248   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0

[0FCh 0252   1]                Subtable Type : 00 [Processor Local APIC]
[0FDh 0253   1]                       Length : 08
[0FEh 0254   1]                 Processor ID : 1A
[0FFh 0255   1]                Local Apic ID : 00
[100h 0256   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0

[104h 0260   1]                Subtable Type : 00 [Processor Local APIC]
[105h 0261   1]                       Length : 08
[106h 0262   1]                 Processor ID : 1B
[107h 0263   1]                Local Apic ID : 00
[108h 0264   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0

[10Ch 0268   1]                Subtable Type : 00 [Processor Local APIC]
[10Dh 0269   1]                       Length : 08
[10Eh 0270   1]                 Processor ID : 1C
[10Fh 0271   1]                Local Apic ID : 00
[110h 0272   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0

[114h 0276   1]                Subtable Type : 00 [Processor Local APIC]
[115h 0277   1]                       Length : 08
[116h 0278   1]                 Processor ID : 1D
[117h 0279   1]                Local Apic ID : 00
[118h 0280   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0

[11Ch 0284   1]                Subtable Type : 00 [Processor Local APIC]
[11Dh 0285   1]                       Length : 08
[11Eh 0286   1]                 Processor ID : 1E
[11Fh 0287   1]                Local Apic ID : 00
[120h 0288   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0

[124h 0292   1]                Subtable Type : 00 [Processor Local APIC]
[125h 0293   1]                       Length : 08
[126h 0294   1]                 Processor ID : 1F
[127h 0295   1]                Local Apic ID : 00
[128h 0296   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0

[12Ch 0300   1]                Subtable Type : 04 [Local APIC NMI]
[12Dh 0301   1]                       Length : 06
[12Eh 0302   1]                 Processor ID : FF
[12Fh 0303   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[131h 0305   1]         Interrupt Input LINT : 01

[132h 0306   1]                Subtable Type : 01 [I/O APIC]
[133h 0307   1]                       Length : 0C
[134h 0308   1]                  I/O Apic ID : 05
[135h 0309   1]                     Reserved : 00
[136h 0310   4]                      Address : FEC00000
[13Ah 0314   4]                    Interrupt : 00000000

[13Eh 0318   1]                Subtable Type : 01 [I/O APIC]
[13Fh 0319   1]                       Length : 0C
[140h 0320   1]                  I/O Apic ID : 06
[141h 0321   1]                     Reserved : 00
[142h 0322   4]                      Address : FEC01000
[146h 0326   4]                    Interrupt : 00000018

[14Ah 0330   1]                Subtable Type : 02 [Interrupt Source Override]
[14Bh 0331   1]                       Length : 0A
[14Ch 0332   1]                          Bus : 00
[14Dh 0333   1]                       Source : 00
[14Eh 0334   4]                    Interrupt : 00000002
[152h 0338   2]        Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0

[154h 0340   1]                Subtable Type : 02 [Interrupt Source Override]
[155h 0341   1]                       Length : 0A
[156h 0342   1]                          Bus : 00
[157h 0343   1]                       Source : 09
[158h 0344   4]                    Interrupt : 00000009
[15Ch 0348   2]        Flags (decoded below) : 000F
                                    Polarity : 3
                                Trigger Mode : 3

Raw Table Data: Length 350 (0x15E)

    0000: 41 50 49 43 5E 01 00 00 03 95 41 4C 41 53 4B 41  // APIC^.....ALASKA
    0010: 41 20 4D 20 49 00 00 00 09 20 07 01 41 4D 49 20  // A M I.... ..AMI 
    0020: 13 00 01 00 00 00 E0 FE 01 00 00 00 00 08 00 00  // ................
    0030: 01 00 00 00 00 08 02 02 01 00 00 00 00 08 01 01  // ................
    0040: 01 00 00 00 00 08 03 03 01 00 00 00 00 08 04 00  // ................
    0050: 00 00 00 00 00 08 05 00 00 00 00 00 00 08 06 00  // ................
    0060: 00 00 00 00 00 08 07 00 00 00 00 00 00 08 08 00  // ................
    0070: 00 00 00 00 00 08 09 00 00 00 00 00 00 08 0A 00  // ................
    0080: 00 00 00 00 00 08 0B 00 00 00 00 00 00 08 0C 00  // ................
    0090: 00 00 00 00 00 08 0D 00 00 00 00 00 00 08 0E 00  // ................
    00A0: 00 00 00 00 00 08 0F 00 00 00 00 00 00 08 10 00  // ................
    00B0: 00 00 00 00 00 08 11 00 00 00 00 00 00 08 12 00  // ................
    00C0: 00 00 00 00 00 08 13 00 00 00 00 00 00 08 14 00  // ................
    00D0: 00 00 00 00 00 08 15 00 00 00 00 00 00 08 16 00  // ................
    00E0: 00 00 00 00 00 08 17 00 00 00 00 00 00 08 18 00  // ................
    00F0: 00 00 00 00 00 08 19 00 00 00 00 00 00 08 1A 00  // ................
    0100: 00 00 00 00 00 08 1B 00 00 00 00 00 00 08 1C 00  // ................
    0110: 00 00 00 00 00 08 1D 00 00 00 00 00 00 08 1E 00  // ................
    0120: 00 00 00 00 00 08 1F 00 00 00 00 00 04 06 FF 05  // ................
    0130: 00 01 01 0C 05 00 00 00 C0 FE 00 00 00 00 01 0C  // ................
    0140: 06 00 00 10 C0 FE 18 00 00 00 02 0A 00 00 02 00  // ................
    0150: 00 00 00 00 02 0A 00 09 09 00 00 00 0F 00        // ..............


BGRT
----
[000h 0000   4]                    Signature : "BGRT"    [Boot Graphics Resource Table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 3E
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   2]                      Version : 0001
[026h 0038   1]       Status (decoded below) : 01
                                   Displayed : 1
                          Orientation Offset : 0
[027h 0039   1]                   Image Type : 00
[028h 0040   8]                Image Address : 00000000D7A71018
[030h 0048   4]                Image OffsetX : 0000006B
[034h 0052   4]                Image OffsetY : 00000146

Raw Table Data: Length 56 (0x38)

    0000: 42 47 52 54 38 00 00 00 01 3E 41 4C 41 53 4B 41  // BGRT8....>ALASKA
    0010: 41 20 4D 20 49 00 00 00 09 20 07 01 41 4D 49 20  // A M I.... ..AMI 
    0020: 13 00 01 00 01 00 01 00 18 10 A7 D7 00 00 00 00  // ................
    0030: 6B 00 00 00 46 01 00 00                          // k...F...


CDIT
----
[000h 0000   4]                    Signature : "CDIT"    
[004h 0004   4]                 Table Length : 00000029
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : EF
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "AMD "
[020h 0032   4]        Asl Compiler Revision : 00000001


**** Unknown ACPI table signature [CDIT]


Raw Table Data: Length 41 (0x29)

    0000: 43 44 49 54 29 00 00 00 01 EF 41 4C 41 53 4B 41  // CDIT).....ALASKA
    0010: 41 20 4D 20 49 00 00 00 01 00 00 00 41 4D 44 20  // A M I.......AMD 
    0020: 01 00 00 00 01 00 00 00 0A                       // .........


CRAT
----
[000h 0000   4]                    Signature : "CRAT"    
[004h 0004   4]                 Table Length : 00000810
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 29
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "AMD "
[020h 0032   4]        Asl Compiler Revision : 00000001


**** Unknown ACPI table signature [CRAT]


Raw Table Data: Length 2064 (0x810)

    0000: 43 52 41 54 10 08 00 00 01 29 41 4C 41 53 4B 41  // CRAT.....)ALASKA
    0010: 41 20 4D 20 49 00 00 00 01 00 00 00 41 4D 44 20  // A M I.......AMD 
    0020: 01 00 00 00 21 00 00 00 01 00 00 00 00 00 00 00  // ....!...........
    0030: 00 28 00 00 05 00 00 00 00 00 00 00 00 00 00 00  // .(..............
    0040: 04 00 00 00 00 00 00 00 00 00 00 00 04 00 00 00  // ................
    0050: 00 00 00 00 00 00 00 00 01 28 00 00 01 00 00 00  // .........(......
    0060: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0A 00  // ................
    0070: 00 00 00 00 40 00 00 00 00 00 00 00 00 00 00 00  // ....@...........
    0080: 01 28 00 00 01 00 00 00 00 00 00 00 00 00 10 00  // .(..............
    0090: 00 00 00 00 00 00 F0 DF 00 00 00 00 40 00 00 00  // ............@...
    00A0: 00 00 00 00 00 00 00 00 01 28 00 00 01 00 00 00  // .........(......
    00B0: 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 20  // ............... 
    00C0: 01 00 00 00 40 00 00 00 00 00 00 00 00 00 00 00  // ....@...........
    00D0: 02 40 00 00 0B 00 00 00 00 00 00 00 01 00 00 00  // .@..............
    00E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00F0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0100: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0110: 02 40 00 00 0D 00 00 00 00 00 00 00 01 00 00 00  // .@..............
    0120: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0130: 00 00 00 00 00 00 00 00 00 00 00 00 40 00 00 00  // ............@...
    0140: 01 01 40 00 04 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0150: 02 40 00 00 0F 00 00 00 00 00 00 00 01 00 00 00  // .@..............
    0160: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0170: 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00  // ................
    0180: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0190: 02 40 00 00 0F 00 00 00 00 00 00 00 0F 00 00 00  // .@..............
    01A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    01B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 10 00 00  // ................
    01C0: 03 01 40 00 10 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    01D0: 02 40 00 00 0B 00 00 00 01 00 00 00 02 00 00 00  // .@..............
    01E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    01F0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0200: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0210: 02 40 00 00 0D 00 00 00 01 00 00 00 02 00 00 00  // .@..............
    0220: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0230: 00 00 00 00 00 00 00 00 00 00 00 00 40 00 00 00  // ............@...
    0240: 01 01 40 00 04 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0250: 02 40 00 00 0F 00 00 00 01 00 00 00 02 00 00 00  // .@..............
    0260: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0270: 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00  // ................
    0280: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0290: 02 40 00 00 0B 00 00 00 02 00 00 00 04 00 00 00  // .@..............
    02A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    02B0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    02C0: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    02D0: 02 40 00 00 0D 00 00 00 02 00 00 00 04 00 00 00  // .@..............
    02E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    02F0: 00 00 00 00 00 00 00 00 00 00 00 00 40 00 00 00  // ............@...
    0300: 01 01 40 00 04 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0310: 02 40 00 00 0F 00 00 00 02 00 00 00 04 00 00 00  // .@..............
    0320: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0330: 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00  // ................
    0340: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0350: 02 40 00 00 0B 00 00 00 03 00 00 00 08 00 00 00  // .@..............
    0360: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0370: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0380: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0390: 02 40 00 00 0D 00 00 00 03 00 00 00 08 00 00 00  // .@..............
    03A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    03B0: 00 00 00 00 00 00 00 00 00 00 00 00 40 00 00 00  // ............@...
    03C0: 01 01 40 00 04 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    03D0: 02 40 00 00 0F 00 00 00 03 00 00 00 08 00 00 00  // .@..............
    03E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    03F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00  // ................
    0400: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0410: 03 40 00 00 0B 00 00 00 00 00 00 00 01 00 00 00  // .@..............
    0420: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0430: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0440: FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00 00 00  // .@...@...@......
    0450: 03 40 00 00 0D 00 00 00 00 00 00 00 01 00 00 00  // .@..............
    0460: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0470: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0480: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    0490: 03 40 00 00 AB 00 00 00 00 00 00 00 01 00 00 00  // .@..............
    04A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    04B0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    04C0: 02 06 00 00 08 06 00 00 00 40 00 00 00 00 00 00  // .........@......
    04D0: 03 40 00 00 AD 00 00 00 00 00 00 00 01 00 00 00  // .@..............
    04E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    04F0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0500: 00 00 08 04 00 00 08 04 00 00 00 00 00 00 00 00  // ................
    0510: 03 40 00 00 0B 00 00 00 01 00 00 00 02 00 00 00  // .@..............
    0520: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0530: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0540: FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00 00 00  // .@...@...@......
    0550: 03 40 00 00 0D 00 00 00 01 00 00 00 02 00 00 00  // .@..............
    0560: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0570: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0580: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    0590: 03 40 00 00 AB 00 00 00 01 00 00 00 02 00 00 00  // .@..............
    05A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    05B0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    05C0: 02 06 00 00 08 06 00 00 00 40 00 00 00 00 00 00  // .........@......
    05D0: 03 40 00 00 AD 00 00 00 01 00 00 00 02 00 00 00  // .@..............
    05E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    05F0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0600: 00 00 08 04 00 00 08 04 00 00 00 00 00 00 00 00  // ................
    0610: 03 40 00 00 0B 00 00 00 02 00 00 00 04 00 00 00  // .@..............
    0620: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0630: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0640: FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00 00 00  // .@...@...@......
    0650: 03 40 00 00 0D 00 00 00 02 00 00 00 04 00 00 00  // .@..............
    0660: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0670: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0680: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    0690: 03 40 00 00 AB 00 00 00 02 00 00 00 04 00 00 00  // .@..............
    06A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    06B0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    06C0: 02 06 00 00 08 06 00 00 00 40 00 00 00 00 00 00  // .........@......
    06D0: 03 40 00 00 AD 00 00 00 02 00 00 00 04 00 00 00  // .@..............
    06E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    06F0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0700: 00 00 08 04 00 00 08 04 00 00 00 00 00 00 00 00  // ................
    0710: 03 40 00 00 0B 00 00 00 03 00 00 00 08 00 00 00  // .@..............
    0720: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0730: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0740: FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00 00 00  // .@...@...@......
    0750: 03 40 00 00 0D 00 00 00 03 00 00 00 08 00 00 00  // .@..............
    0760: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0770: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0780: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    0790: 03 40 00 00 AB 00 00 00 03 00 00 00 08 00 00 00  // .@..............
    07A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    07B0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    07C0: 02 06 00 00 08 06 00 00 00 40 00 00 00 00 00 00  // .........@......
    07D0: 03 40 00 00 AD 00 00 00 03 00 00 00 08 00 00 00  // .@..............
    07E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    07F0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0800: 00 00 08 04 00 00 08 04 00 00 00 00 00 00 00 00  // ................


DSDT
----
DefinitionBlock ("", "DSDT", 2, "ALASKA", "A M I", 0x01072009)
{
    External (_SB_.APTS, MethodObj)    // 1 Arguments
    External (_SB_.AWAK, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFN7, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GPP0.AFN7, MethodObj)    // 1 Arguments
    External (CRBI, UnknownObj)
    External (GSA1.MPTS, MethodObj)    // 1 Arguments
    External (GSA1.MWAK, MethodObj)    // 1 Arguments
    External (MPTS, MethodObj)    // 1 Arguments
    External (MWAK, MethodObj)    // 1 Arguments

    Name (IO1B, 0x0A00)
    Name (IO1L, 0x30)
    Name (IO2B, 0x0A30)
    Name (IO2L, 0x10)
    Name (IO3B, 0x0A40)
    Name (IO3L, 0x10)
    Name (SP1O, 0x2E)
    Name (IOES, Zero)
    Name (HMIO, 0x0A45)
    Name (PEBL, 0x04000000)
    Name (ACPM, One)
    Name (NBTS, 0x5000)
    Name (CPVD, One)
    Name (SMBB, 0x0B20)
    Name (SMBL, 0x20)
    Name (SMB0, 0x0B00)
    Name (SMBM, 0x10)
    Name (PMBS, 0x0800)
    Name (PMLN, 0xA0)
    Name (SMIO, 0xB2)
    Name (GPBS, Zero)
    Name (GPLN, Zero)
    Name (APCB, 0xFEC00000)
    Name (APCL, 0x1000)
    Name (HPTB, 0xFED00000)
    Name (WDTB, Zero)
    Name (WDTL, Zero)
    Name (SSMB, 0xFED80200)
    Name (CAFS, 0xBB)
    Name (UTDB, Zero)
    Name (ASSB, Zero)
    Name (AOTB, Zero)
    Name (AAXB, Zero)
    Name (PEHP, One)
    Name (SHPC, Zero)
    Name (PEPM, One)
    Name (PEER, One)
    Name (PECS, One)
    Name (ITKE, Zero)
    Name (PEBS, 0xF8000000)
    Name (PELN, 0x04000000)
    Name (CSMI, 0x61)
    Name (SMIA, 0xB2)
    Name (SMIB, 0xB3)
    Name (OFST, 0x35)
    Name (TRST, 0x02)
    Name (TCMF, Zero)
    Name (TMF1, Zero)
    Name (TMF2, Zero)
    Name (TMF3, Zero)
    Name (TTPF, One)
    Name (DTPT, Zero)
    Name (TTDP, Zero)
    Name (TPMB, 0xFFFFFFFF)
    Name (TPMC, 0xFFFFFFFF)
    Name (TPMM, 0xFED40000)
    Name (FTPM, 0xFFFFFFFF)
    Name (PPIM, 0xDBE58D18)
    Name (PPIL, 0x1C)
    Name (AMDT, Zero)
    Name (TPMF, Zero)
    Name (PPIV, Zero)
    Name (HIDK, "MSFT0001")
    Name (HIDM, "MSFT0003")
    Name (CIDK, 0x0303D041)
    Name (CIDM, 0x030FD041)
    Name (ATIS, 0xB0)
    Name (MBEC, Zero)
    Name (THPN, Zero)
    Name (ALST, Zero)
    Name (NBTP, 0xFEC30000)
    Name (GIOB, 0xFED81500)
    Name (IOMB, 0xFED80D00)
    Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        If (Arg0)
        {
            \_SB.DSPI ()
            \_SB.PCI0.NAPE ()
        }

        PXXX (Arg0)
    }

    Name (PICM, Zero)
    Method (PXXX, 1, NotSerialized)
    {
        If (Arg0)
        {
            DBG8 = 0xAA
        }
        Else
        {
            DBG8 = 0xAC
        }

        PICM = Arg0
    }

    Name (OSVR, Ones)
    Method (OSFL, 0, NotSerialized)
    {
        If ((OSVR != Ones))
        {
            Return (OSVR) /* \OSVR */
        }

        If ((PICM == Zero))
        {
            DBG8 = 0xAC
        }

        OSVR = 0x03
        If (CondRefOf (\_OSI, Local0))
        {
            If (_OSI ("Windows 2001"))
            {
                OSVR = 0x04
            }

            If (_OSI ("Windows 2001.1"))
            {
                OSVR = 0x05
            }

            If (_OSI ("FreeBSD"))
            {
                OSVR = 0x06
            }

            If (_OSI ("HP-UX"))
            {
                OSVR = 0x07
            }

            If (_OSI ("OpenVMS"))
            {
                OSVR = 0x08
            }

            If (_OSI ("Windows 2001 SP1"))
            {
                OSVR = 0x09
            }

            If (_OSI ("Windows 2001 SP2"))
            {
                OSVR = 0x0A
            }

            If (_OSI ("Windows 2001 SP3"))
            {
                OSVR = 0x0B
            }

            If (_OSI ("Windows 2006"))
            {
                OSVR = 0x0C
            }

            If (_OSI ("Windows 2006 SP1"))
            {
                OSVR = 0x0D
            }

            If (_OSI ("Windows 2009"))
            {
                OSVR = 0x0E
            }

            If (_OSI ("Windows 2012"))
            {
                OSVR = 0x0F
            }

            If (_OSI ("Windows 2013"))
            {
                OSVR = 0x10
            }
        }
        Else
        {
            If (MCTH (_OS, "Microsoft Windows NT"))
            {
                OSVR = Zero
            }

            If (MCTH (_OS, "Microsoft Windows"))
            {
                OSVR = One
            }

            If (MCTH (_OS, "Microsoft WindowsME: Millennium Edition"))
            {
                OSVR = 0x02
            }

            If (MCTH (_OS, "Linux"))
            {
                OSVR = 0x03
            }

            If (MCTH (_OS, "FreeBSD"))
            {
                OSVR = 0x06
            }

            If (MCTH (_OS, "HP-UX"))
            {
                OSVR = 0x07
            }

            If (MCTH (_OS, "OpenVMS"))
            {
                OSVR = 0x08
            }
        }

        Return (OSVR) /* \OSVR */
    }

    Method (MCTH, 2, NotSerialized)
    {
        If ((SizeOf (Arg0) < SizeOf (Arg1)))
        {
            Return (Zero)
        }

        Local0 = (SizeOf (Arg0) + One)
        Name (BUF0, Buffer (Local0){})
        Name (BUF1, Buffer (Local0){})
        BUF0 = Arg0
        BUF1 = Arg1
        While (Local0)
        {
            Local0--
            If ((DerefOf (BUF0 [Local0]) != DerefOf (BUF1 [Local0]
                )))
            {
                Return (Zero)
            }
        }

        Return (One)
    }

    Name (PRWP, Package (0x02)
    {
        Zero, 
        Zero
    })
    Method (GPRW, 2, NotSerialized)
    {
        PRWP [Zero] = Arg0
        Local0 = (SS1 << One)
        Local0 |= (SS2 << 0x02)
        Local0 |= (SS3 << 0x03)
        Local0 |= (SS4 << 0x04)
        If (((One << Arg1) & Local0))
        {
            PRWP [One] = Arg1
        }
        Else
        {
            Local0 >>= One
            If (((OSFL () == One) || (OSFL () == 0x02)))
            {
                FindSetLeftBit (Local0, PRWP [One])
            }
            Else
            {
                FindSetRightBit (Local0, PRWP [One])
            }
        }

        Return (PRWP) /* \PRWP */
    }

    Name (WAKP, Package (0x02)
    {
        Zero, 
        Zero
    })
    Method (UPWP, 1, NotSerialized)
    {
        If (DerefOf (WAKP [Zero]))
        {
            WAKP [One] = Zero
        }
        Else
        {
            WAKP [One] = Arg0
        }
    }

    OperationRegion (DEB0, SystemIO, 0x80, One)
    Field (DEB0, ByteAcc, NoLock, Preserve)
    {
        DBG8,   8
    }

    OperationRegion (DEB1, SystemIO, 0x90, 0x02)
    Field (DEB1, WordAcc, NoLock, Preserve)
    {
        DBG9,   16
    }

    Name (SS1, Zero)
    Name (SS2, Zero)
    Name (SS3, One)
    Name (SS4, One)
    Name (IOST, 0x0001)
    Name (TOPM, 0x00000000)
    Name (ROMS, 0xFFE00000)
    Name (VGAF, One)
    OperationRegion (DEB2, SystemIO, 0x80, 0x02)
    Field (DEB2, WordAcc, NoLock, Preserve)
    {
        P80H,   16
    }

    Name (OSTY, Ones)
    OperationRegion (ACMS, SystemIO, 0x72, 0x02)
    Field (ACMS, ByteAcc, NoLock, Preserve)
    {
        ACMX,   8, 
        ACMA,   8
    }

    IndexField (ACMX, ACMA, ByteAcc, NoLock, Preserve)
    {
        Offset (0xB9), 
        IMEN,   8
    }

    OperationRegion (PSMI, SystemIO, SMIO, 0x02)
    Field (PSMI, ByteAcc, NoLock, Preserve)
    {
        APMC,   8, 
        APMD,   8
    }

    OperationRegion (PMRG, SystemIO, 0x0CD6, 0x02)
    Field (PMRG, ByteAcc, NoLock, Preserve)
    {
        PMRI,   8, 
        PMRD,   8
    }

    IndexField (PMRI, PMRD, ByteAcc, NoLock, Preserve)
    {
            ,   6, 
        HPEN,   1, 
        Offset (0x60), 
        P1EB,   16, 
        Offset (0xF0), 
            ,   3, 
        RSTU,   1
    }

    OperationRegion (GSMM, SystemMemory, 0xFED80000, 0x1000)
    Field (GSMM, AnyAcc, NoLock, Preserve)
    {
        Offset (0x288), 
            ,   1, 
        CLPS,   1, 
        Offset (0x296), 
            ,   7, 
        TMSE,   1, 
        Offset (0x2B0), 
            ,   2, 
        SLPS,   2, 
        Offset (0x3BB), 
            ,   6, 
        PWDE,   1, 
        Offset (0x3E4), 
        BLNK,   2
    }

    OperationRegion (P1E0, SystemIO, P1EB, 0x04)
    Field (P1E0, ByteAcc, NoLock, Preserve)
    {
        Offset (0x01), 
            ,   6, 
        PEWS,   1, 
        WSTA,   1, 
        Offset (0x03), 
            ,   6, 
        PEWD,   1
    }

    OperationRegion (IOCC, SystemIO, PMBS, 0x80)
    Field (IOCC, ByteAcc, NoLock, Preserve)
    {
        Offset (0x01), 
            ,   2, 
        RTCS,   1
    }

    Method (SPTS, 1, NotSerialized)
    {
        P80H = Arg0
        If ((Arg0 == 0x03))
        {
            BLNK = One
        }

        If (((Arg0 == 0x04) || (Arg0 == 0x05)))
        {
            BLNK = Zero
        }

        If ((Arg0 == 0x03))
        {
            RSTU = Zero
        }

        CLPS = One
        SLPS = One
        PEWS = PEWS /* \PEWS */
        If ((Arg0 == 0x03))
        {
            SLPS = One
        }

        If ((Arg0 == 0x04))
        {
            SLPS = One
            RSTU = One
        }

        If ((Arg0 == 0x05))
        {
            PWDE = One
        }
    }

    Method (SWAK, 1, NotSerialized)
    {
        BLNK = 0x03
        If ((Arg0 == 0x03))
        {
            RSTU = One
        }

        PEWS = PEWS /* \PEWS */
        PEWD = Zero
        If (PICM)
        {
            \_SB.DSPI ()
        }

        If (TMSE)
        {
            TMSE = Zero
        }

        Notify (\_SB.PWRB, 0x02) // Device Wake
        If ((Arg0 == 0x03))
        {
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        If ((Arg0 == 0x04))
        {
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }
    }

    Scope (_GPE)
    {
    }

    Scope (_SB)
    {
        Name (PRSA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {4,5,7,10,11,14,15}
        })
        Alias (PRSA, PRSB)
        Alias (PRSA, PRSC)
        Alias (PRSA, PRSD)
        Alias (PRSA, PRSE)
        Alias (PRSA, PRSF)
        Alias (PRSA, PRSG)
        Alias (PRSA, PRSH)
        Name (PD10, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR10, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x18
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x19
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x1A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x1B
            }
        })
        Name (PD1F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR1F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x20
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x21
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x22
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x23
            }
        })
        Name (PD24, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKH, 
                Zero
            }
        })
        Name (AR24, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x24
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x25
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x26
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x27
            }
        })
        Name (PD29, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR29, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x28
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x29
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x2B
            }
        })
        Name (PD2E, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKH, 
                Zero
            }
        })
        Name (AR2E, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x2C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2D
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x2F
            }
        })
        Name (PD33, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR33, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x30
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x31
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x32
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x33
            }
        })
        Name (PD38, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKH, 
                Zero
            }
        })
        Name (AR38, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x34
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x35
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x36
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x37
            }
        })
        Name (PD39, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AR39, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x36
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x37
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x34
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x35
            }
        })
        Name (PD00, Package (0x0A)
        {
            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                One, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR00, Package (0x0A)
        {
            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                Zero, 
                0x28
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                Zero, 
                0x29
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                Zero, 
                0x2A
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                Zero, 
                0x2B
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                Zero, 
                Zero, 
                0x2B
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                One, 
                Zero, 
                0x24
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PG29, Package (0x00){})
        Name (AG29, Package (0x00){})
        Name (PG2A, Package (0x00){})
        Name (AG2A, Package (0x00){})
        Name (PG2B, Package (0x00){})
        Name (AG2B, Package (0x00){})
        Name (PG2C, Package (0x00){})
        Name (AG2C, Package (0x00){})
        Name (PG2D, Package (0x00){})
        Name (AG2D, Package (0x00){})
        Name (PG2E, Package (0x00){})
        Name (AG2E, Package (0x00){})
        Name (PD15, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKH, 
                Zero
            }
        })
        Name (AR15, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x1C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x1D
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x1E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x1F
            }
        })
    }

    Scope (_SB)
    {
        Device (PCI0)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, Zero)  // _ADR: Address
            Method (^BN00, 0, NotSerialized)
            {
                Return (Zero)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BN00 ())
            }

            Name (_UID, Zero)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR00) /* \_SB_.AR00 */
                }

                Return (PD00) /* \_SB_.PD00 */
            }

            Device (AMDN)
            {
                Name (_HID, EisaId ("PNP0C01") /* System Board */)  // _HID: Hardware ID
                Name (_UID, 0xC8)  // _UID: Unique ID
                Name (_STA, 0x0F)  // _STA: Status
                Name (NPTR, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y00)
                })
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    CreateDWordField (NPTR, \_SB.PCI0.AMDN._Y00._LEN, PL)  // _LEN: Length
                    CreateDWordField (NPTR, \_SB.PCI0.AMDN._Y00._BAS, PB)  // _BAS: Base Address
                    PB = PEBS /* \PEBS */
                    PL = PEBL /* \PEBL */
                    Return (NPTR) /* \_SB_.PCI0.AMDN.NPTR */
                }
            }

            Method (NPTS, 1, NotSerialized)
            {
                APTS (Arg0)
            }

            Method (NWAK, 1, NotSerialized)
            {
                AWAK (Arg0)
            }

            Name (CPRB, One)
            Name (LVGA, 0x01)
            Name (STAV, 0x0F)
            Name (BRB, 0x0000)
            Name (BRL, 0x0100)
            Name (IOB, 0x1000)
            Name (IOL, 0xF000)
            Name (MBB, 0xE0000000)
            Name (MBL, 0x20000000)
            Name (MAB, 0x0000000000000000)
            Name (MAL, 0x0000000000000000)
            Name (MAM, 0x0000000000000000)
            Name (CRS1, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x007F,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0080,             // Length
                    ,, _Y01)
                IO (Decode16,
                    0x0CF8,             // Range Minimum
                    0x0CF8,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x03AF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x03B0,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x03E0,             // Range Minimum
                    0x0CF7,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0918,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, _Y03, TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0D00,             // Range Minimum
                    0x0FFF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0300,             // Length
                    ,, _Y02, TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, _Y04, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C0000,         // Range Minimum
                    0x000DFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x02000000,         // Range Minimum
                    0xFFDFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0xFDE00000,         // Length
                    ,, _Y05, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x02000000,         // Range Minimum
                    0xFFDFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0xFDE00000,         // Length
                    ,, _Y06, AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, _Y07, AddressRangeMemory, TypeStatic)
            })
            Name (CRS2, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0080,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0080,             // Length
                    ,, _Y08)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, _Y0A, TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, _Y09, TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, _Y0B, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x80000000,         // Range Minimum
                    0xFFFFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x80000000,         // Length
                    ,, _Y0C, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x80000000,         // Range Minimum
                    0xFFFFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x80000000,         // Length
                    ,, _Y0D, AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, _Y0E, AddressRangeMemory, TypeStatic)
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (STAV) /* \_SB_.PCI0.STAV */
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                If (CPRB)
                {
                    CreateWordField (CRS1, \_SB.PCI0._Y01._MIN, MIN0)  // _MIN: Minimum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y01._MAX, MAX0)  // _MAX: Maximum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y01._LEN, LEN0)  // _LEN: Length
                    MIN0 = BRB /* \_SB_.PCI0.BRB_ */
                    LEN0 = BRL /* \_SB_.PCI0.BRL_ */
                    Local0 = LEN0 /* \_SB_.PCI0._CRS.LEN0 */
                    MAX0 = (MIN0 + Local0--)
                    CreateWordField (CRS1, \_SB.PCI0._Y02._MIN, MIN1)  // _MIN: Minimum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y02._MAX, MAX1)  // _MAX: Maximum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y02._LEN, LEN1)  // _LEN: Length
                    If ((IOB == 0x1000))
                    {
                        Local0 = IOL /* \_SB_.PCI0.IOL_ */
                        MAX1 = (IOB + Local0--)
                        Local0 = (MAX1 - MIN1) /* \_SB_.PCI0._CRS.MIN1 */
                        LEN1 = (Local0 + One)
                    }
                    Else
                    {
                        MIN1 = IOB /* \_SB_.PCI0.IOB_ */
                        LEN1 = IOL /* \_SB_.PCI0.IOL_ */
                        Local0 = LEN1 /* \_SB_.PCI0._CRS.LEN1 */
                        MAX1 = (MIN1 + Local0--)
                    }

                    If (((LVGA == One) || (LVGA == 0x55)))
                    {
                        If (VGAF)
                        {
                            CreateWordField (CRS1, \_SB.PCI0._Y03._MIN, IMN1)  // _MIN: Minimum Base Address
                            CreateWordField (CRS1, \_SB.PCI0._Y03._MAX, IMX1)  // _MAX: Maximum Base Address
                            CreateWordField (CRS1, \_SB.PCI0._Y03._LEN, ILN1)  // _LEN: Length
                            IMN1 = 0x03B0
                            IMX1 = 0x03DF
                            ILN1 = 0x30
                            CreateDWordField (CRS1, \_SB.PCI0._Y04._MIN, VMN1)  // _MIN: Minimum Base Address
                            CreateDWordField (CRS1, \_SB.PCI0._Y04._MAX, VMX1)  // _MAX: Maximum Base Address
                            CreateDWordField (CRS1, \_SB.PCI0._Y04._LEN, VLN1)  // _LEN: Length
                            VMN1 = 0x000A0000
                            VMX1 = 0x000BFFFF
                            VLN1 = 0x00020000
                            VGAF = Zero
                        }
                    }

                    CreateDWordField (CRS1, \_SB.PCI0._Y05._MIN, MIN3)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y05._MAX, MAX3)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y05._LEN, LEN3)  // _LEN: Length
                    CreateDWordField (CRS1, \_SB.PCI0._Y06._MIN, MIN7)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y06._MAX, MAX7)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y06._LEN, LEN7)  // _LEN: Length
                    Local0 = (MBB + MBL) /* \_SB_.PCI0.MBL_ */
                    If ((Local0 < NBTP))
                    {
                        MIN3 = MBB /* \_SB_.PCI0.MBB_ */
                        LEN3 = MBL /* \_SB_.PCI0.MBL_ */
                        Local0 = LEN3 /* \_SB_.PCI0._CRS.LEN3 */
                        MAX3 = (MIN3 + Local0--)
                        MIN7 = Zero
                        MAX7 = Zero
                        LEN7 = Zero
                    }
                    Else
                    {
                        MIN3 = MBB /* \_SB_.PCI0.MBB_ */
                        LEN3 = (NBTP - MBB)
                        Local0 = LEN3 /* \_SB_.PCI0._CRS.LEN3 */
                        MAX3 = (MIN3 + Local0--)
                        MIN7 = 0xFEE00000
                        Local0 = (0xFEE00000 - NBTP)
                        LEN7 = (MBL - Local0)
                        LEN7 = (LEN7 - LEN3)
                        Local0 = LEN7 /* \_SB_.PCI0._CRS.LEN7 */
                        MAX7 = (MIN7 + Local0--)
                    }

                    If (MAL)
                    {
                        CreateQWordField (CRS1, \_SB.PCI0._Y07._MIN, MN8)  // _MIN: Minimum Base Address
                        CreateQWordField (CRS1, \_SB.PCI0._Y07._MAX, MX8)  // _MAX: Maximum Base Address
                        CreateQWordField (CRS1, \_SB.PCI0._Y07._LEN, LN8)  // _LEN: Length
                        MN8 = MAB /* \_SB_.PCI0.MAB_ */
                        LN8 = MAL /* \_SB_.PCI0.MAL_ */
                        MX8 = MAM /* \_SB_.PCI0.MAM_ */
                    }

                    Return (CRS1) /* \_SB_.PCI0.CRS1 */
                }
                Else
                {
                    CreateWordField (CRS2, \_SB.PCI0._Y08._MIN, MIN2)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y08._MAX, MAX2)  // _MAX: Maximum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y08._LEN, LEN2)  // _LEN: Length
                    MIN2 = BRB /* \_SB_.PCI0.BRB_ */
                    LEN2 = BRL /* \_SB_.PCI0.BRL_ */
                    Local1 = LEN2 /* \_SB_.PCI0._CRS.LEN2 */
                    MAX2 = (MIN2 + Local1--)
                    CreateWordField (CRS2, \_SB.PCI0._Y09._MIN, MIN4)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y09._MAX, MAX4)  // _MAX: Maximum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y09._LEN, LEN4)  // _LEN: Length
                    MIN4 = IOB /* \_SB_.PCI0.IOB_ */
                    LEN4 = IOL /* \_SB_.PCI0.IOL_ */
                    Local1 = LEN4 /* \_SB_.PCI0._CRS.LEN4 */
                    MAX4 = (MIN4 + Local1--)
                    If (LVGA)
                    {
                        CreateWordField (CRS2, \_SB.PCI0._Y0A._MIN, IMN2)  // _MIN: Minimum Base Address
                        CreateWordField (CRS2, \_SB.PCI0._Y0A._MAX, IMX2)  // _MAX: Maximum Base Address
                        CreateWordField (CRS2, \_SB.PCI0._Y0A._LEN, ILN2)  // _LEN: Length
                        IMN2 = 0x03B0
                        IMX2 = 0x03DF
                        ILN2 = 0x30
                        CreateDWordField (CRS2, \_SB.PCI0._Y0B._MIN, VMN2)  // _MIN: Minimum Base Address
                        CreateDWordField (CRS2, \_SB.PCI0._Y0B._MAX, VMX2)  // _MAX: Maximum Base Address
                        CreateDWordField (CRS2, \_SB.PCI0._Y0B._LEN, VLN2)  // _LEN: Length
                        VMN2 = 0x000A0000
                        VMX2 = 0x000BFFFF
                        VLN2 = 0x00020000
                    }

                    CreateDWordField (CRS2, \_SB.PCI0._Y0C._MIN, MIN5)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0C._MAX, MAX5)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0C._LEN, LEN5)  // _LEN: Length
                    MIN5 = MBB /* \_SB_.PCI0.MBB_ */
                    LEN5 = (NBTP - MBB)
                    Local1 = LEN5 /* \_SB_.PCI0._CRS.LEN5 */
                    MAX5 = (MIN5 + Local1--)
                    CreateDWordField (CRS2, \_SB.PCI0._Y0D._MIN, MIN6)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0D._MAX, MAX6)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0D._LEN, LEN6)  // _LEN: Length
                    MIN6 = (NBTP + NBTS) /* \NBTS */
                    LEN6 = (MBL - NBTS)
                    LEN6 = (LEN6 - LEN5)
                    Local0 = LEN6 /* \_SB_.PCI0._CRS.LEN6 */
                    MAX6 = (MIN6 + Local0--)
                    If (MAL)
                    {
                        CreateQWordField (CRS2, \_SB.PCI0._Y0E._MIN, MN9)  // _MIN: Minimum Base Address
                        CreateQWordField (CRS2, \_SB.PCI0._Y0E._MAX, MX9)  // _MAX: Maximum Base Address
                        CreateQWordField (CRS2, \_SB.PCI0._Y0E._LEN, LN9)  // _LEN: Length
                        MN9 = MAB /* \_SB_.PCI0.MAB_ */
                        LN9 = MAL /* \_SB_.PCI0.MAL_ */
                        MX9 = MAM /* \_SB_.PCI0.MAM_ */
                    }

                    Return (CRS2) /* \_SB_.PCI0.CRS2 */
                }
            }

            Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
            {
                Name (SUPP, Zero)
                Name (CTRL, Zero)
                CreateDWordField (Arg3, Zero, CDW1)
                CreateDWordField (Arg3, 0x04, CDW2)
                CreateDWordField (Arg3, 0x08, CDW3)
                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    SUPP = CDW2 /* \_SB_.PCI0._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.PCI0._OSC.CDW3 */
                    If (((SUPP & 0x16) != 0x16))
                    {
                        CTRL &= 0x1E
                    }

                    If (!PEHP)
                    {
                        CTRL &= 0x1E
                    }

                    If (!SHPC)
                    {
                        CTRL &= 0x1D
                    }

                    If (!PEPM)
                    {
                        CTRL &= 0x1B
                    }

                    If (!PEER)
                    {
                        CTRL &= 0x15
                    }

                    If (!PECS)
                    {
                        CTRL &= 0x0F
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.PCI0._OSC.CTRL */
                    Return (Arg3)
                }
                Else
                {
                    CDW1 |= 0x04
                    Return (Arg3)
                }
            }

            OperationRegion (NAPC, PCI_Config, 0xB8, 0x08)
            Field (NAPC, DWordAcc, NoLock, Preserve)
            {
                NAPX,   32, 
                NAPD,   32
            }

            Mutex (NAPM, 0x00)
            Method (NAPE, 0, NotSerialized)
            {
                Acquire (NAPM, 0xFFFF)
                NAPX = 0x14300000
                Local0 = NAPD /* \_SB_.PCI0.NAPD */
                Local0 &= 0xFFFFFFEF
                NAPD = Local0
                Release (NAPM)
            }

            Method (GPTS, 1, NotSerialized)
            {
            }

            Method (GWAK, 1, NotSerialized)
            {
                If (PICM)
                {
                    NAPE ()
                }
            }

            Device (IOMA)
            {
                Name (_ADR, 0x02)  // _ADR: Address
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x15)  // _UID: Unique ID
                Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                {
                    Memory32Fixed (ReadOnly,
                        0xFEB80000,         // Address Base
                        0x00080000,         // Address Length
                        )
                })
            }

            Device (GNBD)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Device (BROD)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x14)  // _UID: Unique ID
                    Name (UMAS, 0x0001000000000000)
                    Name (UMAB, 0x0001000000000000)
                    Name (UMAM, 0x0001000000000000)
                    Name (CRS, ResourceTemplate ()
                    {
                        QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                            0x0000000000000000, // Granularity
                            0x0000000000000000, // Range Minimum
                            0x0000000000000000, // Range Maximum
                            0x0000000000000000, // Translation Offset
                            0x0000000000000000, // Length
                            ,, _Y0F, AddressRangeMemory, TypeStatic)
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        CreateQWordField (CRS, \_SB.PCI0.GNBD.BROD._Y0F._MIN, UMIN)  // _MIN: Minimum Base Address
                        CreateQWordField (CRS, \_SB.PCI0.GNBD.BROD._Y0F._MAX, UMAX)  // _MAX: Maximum Base Address
                        CreateQWordField (CRS, \_SB.PCI0.GNBD.BROD._Y0F._LEN, ULEN)  // _LEN: Length
                        UMIN = UMAB /* \_SB_.PCI0.GNBD.BROD.UMAB */
                        ULEN = UMAS /* \_SB_.PCI0.GNBD.BROD.UMAS */
                        UMAX = UMAM /* \_SB_.PCI0.GNBD.BROD.UMAM */
                        Return (CRS) /* \_SB_.PCI0.GNBD.BROD.CRS_ */
                    }
                }
            }

            Device (GPP0)
            {
                Name (_ADR, 0x00010001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Device (VGA)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (DOSA, Zero)
                    Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
                    {
                        DOSA = Arg0
                    }

                    Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
                    {
                        Return (Package (0x05)
                        {
                            0x00010110, 
                            0x00010210, 
                            0x00010220, 
                            0x00010230, 
                            0x00010240
                        })
                    }

                    Device (LCD)
                    {
                        Name (_ADR, 0x0110)  // _ADR: Address
                        Name (BCLB, Package (0x34)
                        {
                            0x5A, 
                            0x3C, 
                            0x02, 
                            0x04, 
                            0x06, 
                            0x08, 
                            0x0A, 
                            0x0C, 
                            0x0E, 
                            0x10, 
                            0x12, 
                            0x14, 
                            0x16, 
                            0x18, 
                            0x1A, 
                            0x1C, 
                            0x1E, 
                            0x20, 
                            0x22, 
                            0x24, 
                            0x26, 
                            0x28, 
                            0x2A, 
                            0x2C, 
                            0x2E, 
                            0x30, 
                            0x32, 
                            0x34, 
                            0x36, 
                            0x38, 
                            0x3A, 
                            0x3C, 
                            0x3E, 
                            0x40, 
                            0x42, 
                            0x44, 
                            0x46, 
                            0x48, 
                            0x4A, 
                            0x4C, 
                            0x4E, 
                            0x50, 
                            0x52, 
                            0x54, 
                            0x56, 
                            0x58, 
                            0x5A, 
                            0x5C, 
                            0x5E, 
                            0x60, 
                            0x62, 
                            0x64
                        })
                        Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
                        {
                            Return (BCLB) /* \_SB_.PCI0.GPP0.VGA_.LCD_.BCLB */
                        }

                        Method (_BCM, 1, NotSerialized)  // _BCM: Brightness Control Method
                        {
                            Divide ((Arg0 * 0xFF), 0x64, Local1, Local0)
                            AFN7 (Local0)
                        }
                    }

                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (Zero)
                    }
                }

                Device (HDAU)
                {
                    Name (_ADR, One)  // _ADR: Address
                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (Zero)
                    }
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (MAL)
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Switch (ToInteger (Arg1))
                                    {
                                        Case (One)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x01                                             // .
                                            })
                                        }
                                        Case (0x02)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x01                                             // .
                                            })
                                        }
                                        Case (0x03)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x01                                             // .
                                            })
                                        }
                                        Default
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x01                                             // .
                                            })
                                        }

                                    }
                                }
                                Case (0x05)
                                {
                                    Return (Zero)
                                }
                                Default
                                {
                                    Return (Zero)
                                }

                            }
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR10) /* \_SB_.AR10 */
                    }

                    Return (PD10) /* \_SB_.PD10 */
                }

                Device (D004)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP2)
            {
                Name (_ADR, 0x00010003)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (MAL)
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Switch (ToInteger (Arg1))
                                    {
                                        Case (One)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x01                                             // .
                                            })
                                        }
                                        Case (0x02)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x01                                             // .
                                            })
                                        }
                                        Case (0x03)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x01                                             // .
                                            })
                                        }
                                        Default
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x01                                             // .
                                            })
                                        }

                                    }
                                }
                                Case (0x05)
                                {
                                    Return (Zero)
                                }
                                Default
                                {
                                    Return (Zero)
                                }

                            }
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR1F) /* \_SB_.AR1F */
                    }

                    Return (PD1F) /* \_SB_.PD1F */
                }

                Device (D006)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP3)
            {
                Name (_ADR, 0x00010004)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (MAL)
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Switch (ToInteger (Arg1))
                                    {
                                        Case (One)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x01                                             // .
                                            })
                                        }
                                        Case (0x02)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x01                                             // .
                                            })
                                        }
                                        Case (0x03)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x01                                             // .
                                            })
                                        }
                                        Default
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x01                                             // .
                                            })
                                        }

                                    }
                                }
                                Case (0x05)
                                {
                                    Return (Zero)
                                }
                                Default
                                {
                                    Return (Zero)
                                }

                            }
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR24) /* \_SB_.AR24 */
                    }

                    Return (PD24) /* \_SB_.PD24 */
                }

                Device (D008)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP4)
            {
                Name (_ADR, 0x00010005)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (MAL)
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Switch (ToInteger (Arg1))
                                    {
                                        Case (One)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x01                                             // .
                                            })
                                        }
                                        Case (0x02)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x01                                             // .
                                            })
                                        }
                                        Case (0x03)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x01                                             // .
                                            })
                                        }
                                        Default
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x01                                             // .
                                            })
                                        }

                                    }
                                }
                                Case (0x05)
                                {
                                    Return (Zero)
                                }
                                Default
                                {
                                    Return (Zero)
                                }

                            }
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR29) /* \_SB_.AR29 */
                    }

                    Return (PD29) /* \_SB_.PD29 */
                }

                Device (D00A)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP5)
            {
                Name (_ADR, 0x00010006)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (MAL)
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Switch (ToInteger (Arg1))
                                    {
                                        Case (One)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x01                                             // .
                                            })
                                        }
                                        Case (0x02)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x01                                             // .
                                            })
                                        }
                                        Case (0x03)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x01                                             // .
                                            })
                                        }
                                        Default
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x01                                             // .
                                            })
                                        }

                                    }
                                }
                                Case (0x05)
                                {
                                    Return (Zero)
                                }
                                Default
                                {
                                    Return (Zero)
                                }

                            }
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR2E) /* \_SB_.AR2E */
                    }

                    Return (PD2E) /* \_SB_.PD2E */
                }

                Device (D00C)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP6)
            {
                Name (_ADR, 0x00010007)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (MAL)
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Switch (ToInteger (Arg1))
                                    {
                                        Case (One)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x01                                             // .
                                            })
                                        }
                                        Case (0x02)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x01                                             // .
                                            })
                                        }
                                        Case (0x03)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x01                                             // .
                                            })
                                        }
                                        Default
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x01                                             // .
                                            })
                                        }

                                    }
                                }
                                Case (0x05)
                                {
                                    Return (Zero)
                                }
                                Default
                                {
                                    Return (Zero)
                                }

                            }
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR33) /* \_SB_.AR33 */
                    }

                    Return (PD33) /* \_SB_.PD33 */
                }

                Device (D00E)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GP17)
            {
                Name (_ADR, 0x00080001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x19, 0x04))
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (MAL)
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Switch (ToInteger (Arg1))
                                    {
                                        Case (One)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x01                                             // .
                                            })
                                        }
                                        Case (0x02)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x01                                             // .
                                            })
                                        }
                                        Case (0x03)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x01                                             // .
                                            })
                                        }
                                        Default
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x01                                             // .
                                            })
                                        }

                                    }
                                }
                                Case (0x05)
                                {
                                    Return (Zero)
                                }
                                Default
                                {
                                    Return (Zero)
                                }

                            }
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR38) /* \_SB_.AR38 */
                    }

                    Return (PD38) /* \_SB_.PD38 */
                }

                Device (VGA)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (AF7E, 0x80000001)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0F)
                    }

                    Name (DOSA, Zero)
                    Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
                    {
                        DOSA = Arg0
                    }

                    Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
                    {
                        Return (Package (0x05)
                        {
                            0x00010100, 
                            0x00010110, 
                            0x0200, 
                            0x00010210, 
                            0x00010220
                        })
                    }

                    Scope (\)
                    {
                        Mutex (PXPX, 0x00)
                    }

                    Device (LCD)
                    {
                        Name (_ADR, 0x0110)  // _ADR: Address
                        Name (BCLB, Package (0x34)
                        {
                            0x5A, 
                            0x3C, 
                            0x02, 
                            0x04, 
                            0x06, 
                            0x08, 
                            0x0A, 
                            0x0C, 
                            0x0E, 
                            0x10, 
                            0x12, 
                            0x14, 
                            0x16, 
                            0x18, 
                            0x1A, 
                            0x1C, 
                            0x1E, 
                            0x20, 
                            0x22, 
                            0x24, 
                            0x26, 
                            0x28, 
                            0x2A, 
                            0x2C, 
                            0x2E, 
                            0x30, 
                            0x32, 
                            0x34, 
                            0x36, 
                            0x38, 
                            0x3A, 
                            0x3C, 
                            0x3E, 
                            0x40, 
                            0x42, 
                            0x44, 
                            0x46, 
                            0x48, 
                            0x4A, 
                            0x4C, 
                            0x4E, 
                            0x50, 
                            0x52, 
                            0x54, 
                            0x56, 
                            0x58, 
                            0x5A, 
                            0x5C, 
                            0x5E, 
                            0x60, 
                            0x62, 
                            0x64
                        })
                        Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
                        {
                            Return (BCLB) /* \_SB_.PCI0.GP17.VGA_.LCD_.BCLB */
                        }

                        Method (_BCM, 1, NotSerialized)  // _BCM: Brightness Control Method
                        {
                            If ((AF7E == 0x80000001))
                            {
                                Divide ((Arg0 * 0xFF), 0x64, Local1, Local0)
                                AFN7 (Local0)
                            }
                        }
                    }

                    Device (I2SC)
                    {
                        Name (_HID, "I2SC1002")  // _HID: Hardware ID
                        Name (_CID, "AMD1234")  // _CID: Compatible ID
                        Name (_UID, One)  // _UID: Unique ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If (ACPM)
                            {
                                Return (Zero)
                            }
                            Else
                            {
                                Return (0x0F)
                            }
                        }

                        Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                        {
                        }
                    }
                }

                Device (D015)
                {
                    Name (_ADR, One)  // _ADR: Address
                }

                Device (ACP)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                }

                Device (AZAL)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                }

                Device (MP2C)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                }

                Device (XHC0)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x19, 0x04))
                    }
                }

                Device (XHC1)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x19, 0x04))
                    }
                }

                Device (APSP)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (PSPB, 0xFD100000)
                    Name (_STA, 0x0F)  // _STA: Status
                    Name (CRS, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y10)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (CRS, \_SB.PCI0.GP17.APSP._Y10._BAS, PBAS)  // _BAS: Base Address
                        CreateDWordField (CRS, \_SB.PCI0.GP17.APSP._Y10._LEN, PLEN)  // _LEN: Length
                        PBAS = PSPB /* \_SB_.PCI0.GP17.APSP.PSPB */
                        PLEN = 0x00100000
                        Return (CRS) /* \_SB_.PCI0.GP17.APSP.CRS_ */
                    }
                }
            }

            Device (GP18)
            {
                Name (_ADR, 0x00080002)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (MAL)
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Switch (ToInteger (Arg1))
                                    {
                                        Case (One)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x01                                             // .
                                            })
                                        }
                                        Case (0x02)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x01                                             // .
                                            })
                                        }
                                        Case (0x03)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x01                                             // .
                                            })
                                        }
                                        Default
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x01                                             // .
                                            })
                                        }

                                    }
                                }
                                Case (0x05)
                                {
                                    Return (Zero)
                                }
                                Default
                                {
                                    Return (Zero)
                                }

                            }
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR39) /* \_SB_.AR39 */
                    }

                    Return (PD39) /* \_SB_.PD39 */
                }

                Device (SATA)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                }

                Device (D025)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                }

                Device (D026)
                {
                    Name (_ADR, One)  // _ADR: Address
                }

                Device (D027)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                }
            }

            Device (D01D)
            {
                Name (_ADR, 0x00140000)  // _ADR: Address
            }

            Device (SBRG)
            {
                Name (_ADR, 0x00140003)  // _ADR: Address
                Device (PIC)
                {
                    Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0020,             // Range Minimum
                            0x0020,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A0,             // Range Minimum
                            0x00A0,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {2}
                    })
                }

                Device (DMAD)
                {
                    Name (_HID, EisaId ("PNP0200") /* PC-class DMA Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        DMA (Compatibility, BusMaster, Transfer8, )
                            {4}
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0081,             // Range Minimum
                            0x0081,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0087,             // Range Minimum
                            0x0087,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0089,             // Range Minimum
                            0x0089,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x008F,             // Range Minimum
                            0x008F,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00C0,             // Range Minimum
                            0x00C0,             // Range Maximum
                            0x00,               // Alignment
                            0x20,               // Length
                            )
                    })
                }

                Device (TMR)
                {
                    Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x00,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {0}
                    })
                }

                Device (RTC0)
                {
                    Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
                    Name (BUF0, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                    })
                    Name (BUF1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {8}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        If ((HPEN == One))
                        {
                            Return (BUF0) /* \_SB_.PCI0.SBRG.RTC0.BUF0 */
                        }

                        Return (BUF1) /* \_SB_.PCI0.SBRG.RTC0.BUF1 */
                    }
                }

                Device (SPKR)
                {
                    Name (_HID, EisaId ("PNP0800") /* Microsoft Sound System Compatible Device */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0061,             // Range Minimum
                            0x0061,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                    })
                }

                OperationRegion (SMI0, SystemIO, SMIO, One)
                Field (SMI0, ByteAcc, NoLock, Preserve)
                {
                    SMIC,   8
                }

                Scope (\_SB)
                {
                    Scope (PCI0)
                    {
                        Device (S900)
                        {
                            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                            Name (_UID, 0x0700)  // _UID: Unique ID
                            Name (_STA, 0x0F)  // _STA: Status
                            Name (CRS, ResourceTemplate ()
                            {
                                IO (Decode16,
                                    0x0010,             // Range Minimum
                                    0x0010,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x0022,             // Range Minimum
                                    0x0022,             // Range Maximum
                                    0x00,               // Alignment
                                    0x1E,               // Length
                                    )
                                IO (Decode16,
                                    0x0063,             // Range Minimum
                                    0x0063,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0065,             // Range Minimum
                                    0x0065,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0067,             // Range Minimum
                                    0x0067,             // Range Maximum
                                    0x00,               // Alignment
                                    0x09,               // Length
                                    )
                                IO (Decode16,
                                    0x0072,             // Range Minimum
                                    0x0072,             // Range Maximum
                                    0x00,               // Alignment
                                    0x0E,               // Length
                                    )
                                IO (Decode16,
                                    0x0080,             // Range Minimum
                                    0x0080,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0084,             // Range Minimum
                                    0x0084,             // Range Maximum
                                    0x00,               // Alignment
                                    0x03,               // Length
                                    )
                                IO (Decode16,
                                    0x0088,             // Range Minimum
                                    0x0088,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x008C,             // Range Minimum
                                    0x008C,             // Range Maximum
                                    0x00,               // Alignment
                                    0x03,               // Length
                                    )
                                IO (Decode16,
                                    0x0090,             // Range Minimum
                                    0x0090,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x00A2,             // Range Minimum
                                    0x00A2,             // Range Maximum
                                    0x00,               // Alignment
                                    0x1E,               // Length
                                    )
                                IO (Decode16,
                                    0x00B1,             // Range Minimum
                                    0x00B1,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x00E0,             // Range Minimum
                                    0x00E0,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x04D0,             // Range Minimum
                                    0x04D0,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x040B,             // Range Minimum
                                    0x040B,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x04D6,             // Range Minimum
                                    0x04D6,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0C00,             // Range Minimum
                                    0x0C00,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x0C14,             // Range Minimum
                                    0x0C14,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0C50,             // Range Minimum
                                    0x0C50,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x0C52,             // Range Minimum
                                    0x0C52,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0C6C,             // Range Minimum
                                    0x0C6C,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0C6F,             // Range Minimum
                                    0x0C6F,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0CD0,             // Range Minimum
                                    0x0CD0,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x0CD2,             // Range Minimum
                                    0x0CD2,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x0CD4,             // Range Minimum
                                    0x0CD4,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x0CD6,             // Range Minimum
                                    0x0CD6,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x0CD8,             // Range Minimum
                                    0x0CD8,             // Range Maximum
                                    0x00,               // Alignment
                                    0x08,               // Length
                                    )
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    _Y11)
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    _Y13)
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    _Y12)
                                IO (Decode16,
                                    0x0900,             // Range Minimum
                                    0x0900,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x0910,             // Range Minimum
                                    0x0910,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x0060,             // Range Minimum
                                    0x0060,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    )
                                IO (Decode16,
                                    0x0064,             // Range Minimum
                                    0x0064,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000000,         // Address Length
                                    _Y14)
                                Memory32Fixed (ReadWrite,
                                    0xFEC01000,         // Address Base
                                    0x00001000,         // Address Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0xFEDC0000,         // Address Base
                                    0x00001000,         // Address Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0xFEE00000,         // Address Base
                                    0x00001000,         // Address Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0xFED80000,         // Address Base
                                    0x00010000,         // Address Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000000,         // Address Length
                                    _Y15)
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000000,         // Address Length
                                    _Y16)
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000000,         // Address Length
                                    _Y17)
                            })
                            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                            {
                                CreateWordField (CRS, \_SB.PCI0.S900._Y11._MIN, PBB)  // _MIN: Minimum Base Address
                                CreateWordField (CRS, \_SB.PCI0.S900._Y11._MAX, PBH)  // _MAX: Maximum Base Address
                                CreateByteField (CRS, \_SB.PCI0.S900._Y11._LEN, PML)  // _LEN: Length
                                PBB = PMBS /* \PMBS */
                                PBH = PMBS /* \PMBS */
                                PML = PMLN /* \PMLN */
                                If (SMBB)
                                {
                                    CreateWordField (CRS, \_SB.PCI0.S900._Y12._MIN, SMB1)  // _MIN: Minimum Base Address
                                    CreateWordField (CRS, \_SB.PCI0.S900._Y12._MAX, SMH1)  // _MAX: Maximum Base Address
                                    CreateByteField (CRS, \_SB.PCI0.S900._Y12._LEN, SML1)  // _LEN: Length
                                    SMB1 = SMBB /* \SMBB */
                                    SMH1 = SMBB /* \SMBB */
                                    SML1 = SMBL /* \SMBL */
                                    CreateWordField (CRS, \_SB.PCI0.S900._Y13._MIN, SMBZ)  // _MIN: Minimum Base Address
                                    CreateWordField (CRS, \_SB.PCI0.S900._Y13._MAX, SMH0)  // _MAX: Maximum Base Address
                                    CreateByteField (CRS, \_SB.PCI0.S900._Y13._LEN, SML0)  // _LEN: Length
                                    SMBZ = SMB0 /* \SMB0 */
                                    SMH0 = SMB0 /* \SMB0 */
                                    SML0 = SMBM /* \SMBM */
                                }

                                If (APCB)
                                {
                                    CreateDWordField (CRS, \_SB.PCI0.S900._Y14._BAS, APB)  // _BAS: Base Address
                                    CreateDWordField (CRS, \_SB.PCI0.S900._Y14._LEN, APL)  // _LEN: Length
                                    APB = APCB /* \APCB */
                                    APL = APCL /* \APCL */
                                }

                                CreateDWordField (CRS, \_SB.PCI0.S900._Y15._BAS, SPIB)  // _BAS: Base Address
                                CreateDWordField (CRS, \_SB.PCI0.S900._Y15._LEN, SPIL)  // _LEN: Length
                                SPIB = 0xFEC10000
                                SPIL = 0x1000
                                If (WDTB)
                                {
                                    CreateDWordField (CRS, \_SB.PCI0.S900._Y16._BAS, WDTB)  // _BAS: Base Address
                                    CreateDWordField (CRS, \_SB.PCI0.S900._Y16._LEN, WDTL)  // _LEN: Length
                                    WDTB = \WDTB
                                    WDTL = \WDTL
                                }

                                CreateDWordField (CRS, \_SB.PCI0.S900._Y17._BAS, ROMB)  // _BAS: Base Address
                                CreateDWordField (CRS, \_SB.PCI0.S900._Y17._LEN, ROML)  // _LEN: Length
                                ROMB = 0xFF000000
                                ROML = 0x01000000
                                Return (CRS) /* \_SB_.PCI0.S900.CRS_ */
                            }
                        }
                    }
                }

                Scope (\_SB)
                {
                    Scope (PCI0)
                    {
                        Scope (SBRG)
                        {
                            Method (RRIO, 4, NotSerialized)
                            {
                                Debug = "RRIO"
                            }

                            Method (RDMA, 3, NotSerialized)
                            {
                                Debug = "rDMA"
                            }
                        }
                    }
                }

                Device (SIO1)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (CRS, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y18)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y19)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y1A)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y1B)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If (((SP1O < 0x03F0) && (SP1O > 0xF0)))
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y18._MIN, GPI0)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y18._MAX, GPI1)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIO1._Y18._LEN, GPIL)  // _LEN: Length
                            GPI0 = SP1O /* \SP1O */
                            GPI1 = SP1O /* \SP1O */
                            GPIL = 0x02
                        }

                        If (IO1B)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y19._MIN, GP10)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y19._MAX, GP11)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIO1._Y19._LEN, GPL1)  // _LEN: Length
                            GP10 = IO1B /* \IO1B */
                            GP11 = IO1B /* \IO1B */
                            GPL1 = IO1L /* \IO1L */
                        }

                        If (IO2B)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y1A._MIN, GP20)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y1A._MAX, GP21)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIO1._Y1A._LEN, GPL2)  // _LEN: Length
                            GP20 = IO2B /* \IO2B */
                            GP21 = IO2B /* \IO2B */
                            GPL2 = IO2L /* \IO2L */
                        }

                        If (IO3B)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y1B._MIN, GP30)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y1B._MAX, GP31)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIO1._Y1B._LEN, GPL3)  // _LEN: Length
                            GP30 = IO3B /* \IO3B */
                            GP31 = IO3B /* \IO3B */
                            GPL3 = IO3L /* \IO3L */
                        }

                        Return (CRS) /* \_SB_.PCI0.SBRG.SIO1.CRS_ */
                    }

                    Name (DCAT, Package (0x15)
                    {
                        One, 
                        0x02, 
                        0x03, 
                        Zero, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0x05, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0x06, 
                        0xFF, 
                        0x0A, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF
                    })
                    Mutex (MUT0, 0x00)
                    Method (ENFG, 1, NotSerialized)
                    {
                        Acquire (MUT0, 0x0FFF)
                        INDX = 0x87
                        INDX = One
                        INDX = 0x55
                        If ((SP1O == 0x2E))
                        {
                            INDX = 0x55
                        }
                        Else
                        {
                            INDX = 0xAA
                        }

                        LDN = Arg0
                    }

                    Method (EXFG, 0, NotSerialized)
                    {
                        INDX = 0x02
                        DATA = 0x02
                        Release (MUT0)
                    }

                    Method (LPTM, 1, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        Local0 = (OPT0 & 0x02)
                        EXFG ()
                        Return (Local0)
                    }

                    OperationRegion (IOID, SystemIO, SP1O, 0x02)
                    Field (IOID, ByteAcc, NoLock, Preserve)
                    {
                        INDX,   8, 
                        DATA,   8
                    }

                    IndexField (INDX, DATA, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x07), 
                        LDN,    8, 
                        Offset (0x21), 
                        SCF1,   8, 
                        SCF2,   8, 
                        SCF3,   8, 
                        SCF4,   8, 
                        SCF5,   8, 
                        SCF6,   8, 
                        Offset (0x29), 
                        CKCF,   8, 
                        Offset (0x2D), 
                        CR2D,   8, 
                        Offset (0x30), 
                        ACTR,   8, 
                        Offset (0x60), 
                        IOAH,   8, 
                        IOAL,   8, 
                        IOH2,   8, 
                        IOL2,   8, 
                        Offset (0x70), 
                        INTR,   4, 
                        INTT,   4, 
                        Offset (0x74), 
                        DMCH,   8, 
                        Offset (0xE0), 
                        RGE0,   8, 
                        RGE1,   8, 
                        RGE2,   8, 
                        RGE3,   8, 
                        RGE4,   8, 
                        RGE5,   8, 
                        RGE6,   8, 
                        RGE7,   8, 
                        RGE8,   8, 
                        RGE9,   8, 
                        Offset (0xF0), 
                        OPT0,   8, 
                        OPT1,   8, 
                        OPT2,   8, 
                        OPT3,   8, 
                        OPT4,   8, 
                        OPT5,   8, 
                        OPT6,   8, 
                        OPT7,   8, 
                        OPT8,   8, 
                        OPT9,   8
                    }

                    OperationRegion (RNTR, SystemIO, IO2B, IO2L)
                    Field (RNTR, ByteAcc, NoLock, Preserve)
                    {
                        PMES,   8, 
                        Offset (0x04), 
                        PMEE,   1, 
                        Offset (0x05), 
                        Offset (0x08), 
                        PMS3,   8, 
                        PMS2,   8, 
                        PMS1,   8, 
                        Offset (0x0C), 
                        PME3,   8, 
                        PME2,   8, 
                        PME1,   8
                    }

                    Method (CGLD, 1, NotSerialized)
                    {
                        Return (DerefOf (DCAT [Arg0]))
                    }

                    Method (DSTA, 1, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        Local0 = ACTR /* \_SB_.PCI0.SBRG.SIO1.ACTR */
                        Local1 = ((IOAH << 0x08) | IOAL) /* \_SB_.PCI0.SBRG.SIO1.IOAL */
                        EXFG ()
                        If ((Local0 == 0xFF))
                        {
                            Return (Zero)
                        }

                        Local0 &= One
                        If ((Arg0 < 0x10))
                        {
                            IOST |= (Local0 << Arg0)
                        }

                        If (Local0)
                        {
                            Return (0x0F)
                        }
                        ElseIf ((Arg0 < 0x10))
                        {
                            If (((One << Arg0) & IOST))
                            {
                                Return (0x0D)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }
                        Else
                        {
                            If (Local1)
                            {
                                Return (0x0D)
                            }

                            Return (Zero)
                        }
                    }

                    Method (DCNT, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        If (((DMCH < 0x04) && ((Local1 = (DMCH & 0x03)) != Zero)))
                        {
                            RDMA (Arg0, Arg1, Local1++)
                        }

                        ACTR = Arg1
                        Local1 = (IOAH << 0x08)
                        Local1 |= IOAL
                        RRIO (Arg0, Arg1, Local1, 0x08)
                        EXFG ()
                    }

                    Name (CRS1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y1E)
                        IRQNoFlags (_Y1C)
                            {}
                        DMA (Compatibility, NotBusMaster, Transfer8, _Y1D)
                            {}
                    })
                    CreateWordField (CRS1, \_SB.PCI0.SBRG.SIO1._Y1C._INT, IRQM)  // _INT: Interrupts
                    CreateByteField (CRS1, \_SB.PCI0.SBRG.SIO1._Y1D._DMA, DMAM)  // _DMA: Direct Memory Access
                    CreateWordField (CRS1, \_SB.PCI0.SBRG.SIO1._Y1E._MIN, IO11)  // _MIN: Minimum Base Address
                    CreateWordField (CRS1, \_SB.PCI0.SBRG.SIO1._Y1E._MAX, IO12)  // _MAX: Maximum Base Address
                    CreateByteField (CRS1, \_SB.PCI0.SBRG.SIO1._Y1E._LEN, LEN1)  // _LEN: Length
                    Name (CRS2, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y21)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y22)
                        IRQNoFlags (_Y1F)
                            {}
                        DMA (Compatibility, NotBusMaster, Transfer8, _Y20)
                            {}
                    })
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y1F._INT, IRQE)  // _INT: Interrupts
                    CreateByteField (CRS2, \_SB.PCI0.SBRG.SIO1._Y20._DMA, DMAE)  // _DMA: Direct Memory Access
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y21._MIN, IO21)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y21._MAX, IO22)  // _MAX: Maximum Base Address
                    CreateByteField (CRS2, \_SB.PCI0.SBRG.SIO1._Y21._LEN, LEN2)  // _LEN: Length
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y22._MIN, IO31)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y22._MAX, IO32)  // _MAX: Maximum Base Address
                    CreateByteField (CRS2, \_SB.PCI0.SBRG.SIO1._Y22._LEN, LEN3)  // _LEN: Length
                    Method (DCRS, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        IO11 = (IOAH << 0x08)
                        IO11 |= IOAL /* \_SB_.PCI0.SBRG.SIO1.IO11 */
                        IO12 = IO11 /* \_SB_.PCI0.SBRG.SIO1.IO11 */
                        LEN1 = 0x08
                        If (INTR)
                        {
                            IRQM = (One << INTR) /* \_SB_.PCI0.SBRG.SIO1.INTR */
                        }
                        Else
                        {
                            IRQM = Zero
                        }

                        If (((DMCH > 0x03) || (Arg1 == Zero)))
                        {
                            DMAM = Zero
                        }
                        Else
                        {
                            Local1 = (DMCH & 0x03)
                            DMAM = (One << Local1)
                        }

                        EXFG ()
                        Return (CRS1) /* \_SB_.PCI0.SBRG.SIO1.CRS1 */
                    }

                    Method (DCR2, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        IO21 = (IOAH << 0x08)
                        IO21 |= IOAL /* \_SB_.PCI0.SBRG.SIO1.IO21 */
                        IO22 = IO21 /* \_SB_.PCI0.SBRG.SIO1.IO21 */
                        LEN2 = 0x08
                        IO31 = (IOH2 << 0x08)
                        IO31 |= IOL2 /* \_SB_.PCI0.SBRG.SIO1.IO31 */
                        IO32 = IO31 /* \_SB_.PCI0.SBRG.SIO1.IO31 */
                        LEN3 = 0x08
                        If (INTR)
                        {
                            IRQE = (One << INTR) /* \_SB_.PCI0.SBRG.SIO1.INTR */
                        }
                        Else
                        {
                            IRQE = Zero
                        }

                        If (((DMCH > 0x03) || (Arg1 == Zero)))
                        {
                            DMAE = Zero
                        }
                        Else
                        {
                            Local1 = (DMCH & 0x03)
                            DMAE = (One << Local1)
                        }

                        EXFG ()
                        Return (CRS2) /* \_SB_.PCI0.SBRG.SIO1.CRS2 */
                    }

                    Method (DSRS, 2, NotSerialized)
                    {
                        If (((Arg1 == 0x02) & LPTM (Arg1)))
                        {
                            DSR2 (Arg0, Arg1)
                        }
                        Else
                        {
                            CreateWordField (Arg0, 0x09, IRQM)
                            CreateByteField (Arg0, 0x0C, DMAM)
                            CreateWordField (Arg0, 0x02, IO11)
                            ENFG (CGLD (Arg1))
                            IOAL = (IO11 & 0xFF)
                            IOAH = (IO11 >> 0x08)
                            If (IRQM)
                            {
                                FindSetRightBit (IRQM, Local0)
                                INTR = (Local0 - One)
                            }
                            Else
                            {
                                INTR = Zero
                            }

                            If (DMAM)
                            {
                                FindSetRightBit (DMAM, Local0)
                                DMCH = (Local0 - One)
                            }
                            Else
                            {
                                DMCH = 0x04
                            }

                            EXFG ()
                            DCNT (Arg1, One)
                            Local2 = Arg1
                            If ((Local2 > Zero))
                            {
                                Local2 -= One
                            }
                        }
                    }

                    Method (DSR2, 2, NotSerialized)
                    {
                        CreateWordField (Arg0, 0x11, IRQE)
                        CreateByteField (Arg0, 0x14, DMAE)
                        CreateWordField (Arg0, 0x02, IO21)
                        CreateWordField (Arg0, 0x0A, IO31)
                        ENFG (CGLD (Arg1))
                        IOAL = (IO21 & 0xFF)
                        IOAH = (IO21 >> 0x08)
                        IOL2 = (IO31 & 0xFF)
                        IOH2 = (IO31 >> 0x08)
                        If (IRQE)
                        {
                            FindSetRightBit (IRQE, Local0)
                            INTR = (Local0 - One)
                        }
                        Else
                        {
                            INTR = Zero
                        }

                        If (DMAE)
                        {
                            FindSetRightBit (DMAE, Local0)
                            DMCH = (Local0 - One)
                        }
                        Else
                        {
                            DMCH = 0x04
                        }

                        EXFG ()
                        DCNT (Arg1, One)
                        Local2 = Arg1
                        If ((Local2 > Zero))
                        {
                            Local2 -= One
                        }
                    }

                    Name (PMFG, Zero)
                    Method (SIOS, 1, NotSerialized)
                    {
                        Debug = "SIOS"
                        If ((0x05 != Arg0))
                        {
                            ENFG (0x04)
                            OPT1 = 0xFF
                            If (KBFG)
                            {
                                OPT0 |= 0x08
                            }
                            Else
                            {
                                OPT0 &= 0xF7
                            }

                            If (MSFG)
                            {
                                OPT0 |= 0x10
                            }
                            Else
                            {
                                OPT0 &= 0xEF
                            }

                            Local0 = (0xBF & OPT2) /* \_SB_.PCI0.SBRG.SIO1.OPT2 */
                            OPT2 = Local0
                            LDN = 0x06
                            ACTR = Zero
                            LDN = 0x05
                            ACTR = Zero
                            EXFG ()
                        }
                    }

                    Method (SIOW, 1, NotSerialized)
                    {
                        Debug = "SIOW"
                        ENFG (0x04)
                        PMFG = OPT1 /* \_SB_.PCI0.SBRG.SIO1.OPT1 */
                        OPT1 = 0xFF
                        OPT0 &= 0xE7
                        Local0 = (0x40 | OPT2) /* \_SB_.PCI0.SBRG.SIO1.OPT2 */
                        OPT2 = Local0
                        LDN = 0x06
                        ACTR = One
                        LDN = 0x05
                        ACTR = One
                        EXFG ()
                    }

                    Method (SIOH, 0, NotSerialized)
                    {
                        If ((PMFG & 0x08)){}
                        If ((PMFG & 0x10)){}
                    }
                }

                Device (PS2K)
                {
                    Name (_HID, EisaId ("PNP0303") /* IBM Enhanced Keyboard (101/102-key, PS/2 Mouse) */)  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (LDN, 0x05)
                    Name (_CID, EisaId ("PNP030B"))  // _CID: Compatible ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((IOST & 0x0400))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {1}
                    })
                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        StartDependentFn (0x00, 0x00)
                        {
                            IO (Decode16,
                                0x0060,             // Range Minimum
                                0x0060,             // Range Maximum
                                0x00,               // Alignment
                                0x01,               // Length
                                )
                            IO (Decode16,
                                0x0064,             // Range Minimum
                                0x0064,             // Range Maximum
                                0x00,               // Alignment
                                0x01,               // Length
                                )
                            IRQNoFlags ()
                                {1}
                        }
                        EndDependentFn ()
                    })
                    Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                    {
                        KBFG = Arg0
                    }

                    Scope (\)
                    {
                        Name (KBFG, One)
                    }

                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x1D, 0x03))
                    }
                }

                Device (PS2M)
                {
                    Name (_HID, EisaId ("PNP0F03") /* Microsoft PS/2-style Mouse */)  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (LDN, 0x06)
                    Name (_CID, EisaId ("PNP0F13") /* PS/2 Mouse */)  // _CID: Compatible ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((IOST & 0x4000))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Name (CRS1, ResourceTemplate ()
                    {
                        IRQNoFlags ()
                            {12}
                    })
                    Name (CRS2, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {12}
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If ((IOST & 0x0400))
                        {
                            Return (CRS1) /* \_SB_.PCI0.SBRG.PS2M.CRS1 */
                        }
                        Else
                        {
                            Return (CRS2) /* \_SB_.PCI0.SBRG.PS2M.CRS2 */
                        }
                    }

                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        StartDependentFn (0x00, 0x00)
                        {
                            IRQNoFlags ()
                                {12}
                        }
                        EndDependentFn ()
                    })
                    Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                    {
                        MSFG = Arg0
                    }

                    Scope (\)
                    {
                        Name (MSFG, One)
                    }

                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x1D, 0x03))
                    }
                }

                Device (UAR1)
                {
                    Name (_HID, EisaId ("PNP0501") /* 16550A-compatible COM Serial Port */)  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (LDN, One)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (^^SIO1.DSTA (Zero))
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        ^^SIO1.DCNT (Zero, Zero)
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Return (^^SIO1.DCRS (Zero, Zero))
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        ^^SIO1.DSRS (Arg0, Zero)
                    }

                    Name (_DDN, "COM1")  // _DDN: DOS Device Name
                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        StartDependentFn (0x00, 0x00)
                        {
                            IO (Decode16,
                                0x03F8,             // Range Minimum
                                0x03F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {4}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03F8,             // Range Minimum
                                0x03F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3,4,5,7,9,10,11,12}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x02F8,             // Range Minimum
                                0x02F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3,4,5,7,9,10,11,12}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03E8,             // Range Minimum
                                0x03E8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3,4,5,7,9,10,11,12}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x02E8,             // Range Minimum
                                0x02E8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3,4,5,7,9,10,11,12}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        EndDependentFn ()
                    })
                }

                Device (HHMD)
                {
                    Name (_HID, EisaId ("PNP0C08") /* ACPI Core Hardware */)  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (LDN, 0x04)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (Zero)
                    }
                }

                Device (SGPI)
                {
                    Name (_HID, EisaId ("PNP0C08") /* ACPI Core Hardware */)  // _HID: Hardware ID
                    Name (_UID, One)  // _UID: Unique ID
                    Name (LDN, 0x07)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (Zero)
                    }
                }
            }

            Device (SDIO)
            {
                Name (_ADR, 0x00140007)  // _ADR: Address
            }

            Device (GPP1)
            {
                Name (_ADR, 0x00010002)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (MAL)
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Switch (ToInteger (Arg1))
                                    {
                                        Case (One)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x01                                             // .
                                            })
                                        }
                                        Case (0x02)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x01                                             // .
                                            })
                                        }
                                        Case (0x03)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x01                                             // .
                                            })
                                        }
                                        Default
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x01                                             // .
                                            })
                                        }

                                    }
                                }
                                Case (0x05)
                                {
                                    Return (Zero)
                                }
                                Default
                                {
                                    Return (Zero)
                                }

                            }
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR15) /* \_SB_.AR15 */
                    }

                    Return (PD15) /* \_SB_.PD15 */
                }

                Device (PT01)
                {
                    Name (_ADR, One)  // _ADR: Address
                }

                Device (PT02)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Device (PT20)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Device (D039)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                        }
                    }

                    Device (PT21)
                    {
                        Name (_ADR, 0x00010000)  // _ADR: Address
                        Device (D03A)
                        {
                            Name (_ADR, 0xFF)  // _ADR: Address
                        }
                    }

                    Device (PT22)
                    {
                        Name (_ADR, 0x00020000)  // _ADR: Address
                        Device (D03B)
                        {
                            Name (_ADR, 0xFF)  // _ADR: Address
                        }
                    }

                    Device (PT23)
                    {
                        Name (_ADR, 0x00030000)  // _ADR: Address
                        Device (D03C)
                        {
                            Name (_ADR, 0xFF)  // _ADR: Address
                        }
                    }

                    Device (PT24)
                    {
                        Name (_ADR, 0x00040000)  // _ADR: Address
                        Device (D03D)
                        {
                            Name (_ADR, 0xFF)  // _ADR: Address
                        }
                    }

                    Device (PT25)
                    {
                        Name (_ADR, 0x00050000)  // _ADR: Address
                    }

                    Device (PT26)
                    {
                        Name (_ADR, 0x00060000)  // _ADR: Address
                    }

                    Device (PT27)
                    {
                        Name (_ADR, 0x00070000)  // _ADR: Address
                    }
                }

                Device (PTXH)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x19, 0x04))
                    }

                    Device (RHUB)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Device (POT3)
                        {
                            Name (_ADR, 0x03)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x0A, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "LEFT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "CENTER",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x3,
                                    PLD_GroupPosition      = 0x3,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (PO11)
                        {
                            Name (_ADR, 0x0B)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x0A, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "LEFT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "CENTER",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x3,
                                    PLD_GroupPosition      = 0x3,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (POT4)
                        {
                            Name (_ADR, 0x04)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x0A, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "LEFT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "CENTER",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x3,
                                    PLD_GroupPosition      = 0x3,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (PO12)
                        {
                            Name (_ADR, 0x0C)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                Zero, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                        }

                        Device (POT5)
                        {
                            Name (_ADR, 0x05)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "LEFT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "LEFT",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x1,
                                    PLD_GroupPosition      = 0x5,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (PO13)
                        {
                            Name (_ADR, 0x0D)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "LEFT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "LEFT",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x1,
                                    PLD_GroupPosition      = 0x5,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (POT6)
                        {
                            Name (_ADR, 0x06)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "LEFT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "CENTER",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x1,
                                    PLD_GroupPosition      = 0x6,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (PO14)
                        {
                            Name (_ADR, 0x0E)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "LEFT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "CENTER",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x1,
                                    PLD_GroupPosition      = 0x6,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (POT1)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "RIGHT",
                                    PLD_VerticalPosition   = "UPPER",
                                    PLD_HorizontalPosition = "LEFT",
                                    PLD_Shape              = "VERTICALRECTANGLE",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x1,
                                    PLD_GroupPosition      = 0x1,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (POT9)
                        {
                            Name (_ADR, 0x09)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "RIGHT",
                                    PLD_VerticalPosition   = "UPPER",
                                    PLD_HorizontalPosition = "LEFT",
                                    PLD_Shape              = "VERTICALRECTANGLE",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x1,
                                    PLD_GroupPosition      = 0x1,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (POT2)
                        {
                            Name (_ADR, 0x02)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "RIGHT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "LEFT",
                                    PLD_Shape              = "VERTICALRECTANGLE",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x1,
                                    PLD_GroupPosition      = 0x2,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (PO10)
                        {
                            Name (_ADR, 0x0A)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "RIGHT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "LEFT",
                                    PLD_Shape              = "VERTICALRECTANGLE",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x1,
                                    PLD_GroupPosition      = 0x2,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (POT7)
                        {
                            Name (_ADR, 0x07)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "RIGHT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "LEFT",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x1,
                                    PLD_GroupPosition      = 0x7,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (PO15)
                        {
                            Name (_ADR, 0x0F)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "RIGHT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "LEFT",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x1,
                                    PLD_GroupPosition      = 0x7,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (POT8)
                        {
                            Name (_ADR, 0x08)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "RIGHT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "CENTER",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x1,
                                    PLD_GroupPosition      = 0x8,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (PO16)
                        {
                            Name (_ADR, 0x10)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "RIGHT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "CENTER",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x1,
                                    PLD_GroupPosition      = 0x8,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (PO17)
                        {
                            Name (_ADR, 0x11)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                Zero, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                        }

                        Device (PO18)
                        {
                            Name (_ADR, 0x12)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                Zero, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                        }

                        Device (PO19)
                        {
                            Name (_ADR, 0x13)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                Zero, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                        }

                        Device (PO20)
                        {
                            Name (_ADR, 0x14)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                Zero, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                        }

                        Device (PO21)
                        {
                            Name (_ADR, 0x15)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                Zero, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                        }

                        Device (PO22)
                        {
                            Name (_ADR, 0x16)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                Zero, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                        }
                    }
                }
            }
        }
    }

    Scope (_GPE)
    {
        Method (_L08, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            Notify (\_SB.PCI0.GPP0, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP2, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP3, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP4, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP5, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP6, 0x02) // Device Wake
            Notify (\_SB.PCI0.GP18, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP1, 0x02) // Device Wake
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        Method (_L19, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            Notify (\_SB.PCI0.GP17, 0x02) // Device Wake
            Notify (\_SB.PCI0.GP17.XHC0, 0x02) // Device Wake
            Notify (\_SB.PCI0.GP17.XHC1, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP1.PTXH, 0x02) // Device Wake
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }
    }

    Scope (_SB)
    {
        Device (PWRB)
        {
            Name (_HID, EisaId ("PNP0C0C") /* Power Button Device */)  // _HID: Hardware ID
            Name (_UID, 0xAA)  // _UID: Unique ID
            Name (_STA, 0x0B)  // _STA: Status
        }
    }

    Name (_S0, Package (0x04)  // _S0_: S0 System State
    {
        Zero, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S3, Package (0x04)  // _S3_: S3 System State
    {
        0x03, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S4, Package (0x04)  // _S4_: S4 System State
    {
        0x04, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S5, Package (0x04)  // _S5_: S5 System State
    {
        0x05, 
        Zero, 
        Zero, 
        Zero
    })
    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        If (Arg0)
        {
            \_SB.MPTS (Arg0)
            \_SB.TPM.TPTS (Arg0)
            SPTS (Arg0)
            MPTS (Arg0)
            \_SB.PCI0.SBRG.SIO1.SIOS (Arg0)
            \_SB.PCI0.GPTS (Arg0)
            \_SB.PCI0.NPTS (Arg0)
        }
    }

    Method (_WAK, 1, NotSerialized)  // _WAK: Wake
    {
        DBG8 = (Arg0 << 0x04)
        \_SB.PCI0.NWAK (Arg0)
        \_SB.PCI0.GWAK (Arg0)
        \_SB.PCI0.SBRG.SIO1.SIOW (Arg0)
        MWAK (Arg0)
        DBG8 = (Arg0 << 0x04)
        SWAK (Arg0)
        \_SB.MWAK (Arg0)
        Return (WAKP) /* \WAKP */
    }

    Scope (_SB)
    {
        OperationRegion (PIRQ, SystemIO, 0x0C00, 0x02)
        Field (PIRQ, ByteAcc, NoLock, Preserve)
        {
            PIDX,   8, 
            PDAT,   8
        }

        IndexField (PIDX, PDAT, ByteAcc, NoLock, Preserve)
        {
            PIRA,   8, 
            PIRB,   8, 
            PIRC,   8, 
            PIRD,   8, 
            PIRE,   8, 
            PIRF,   8, 
            PIRG,   8, 
            PIRH,   8, 
            Offset (0x0C), 
            SIRA,   8, 
            SIRB,   8, 
            SIRC,   8, 
            SIRD,   8, 
            PIRS,   8, 
            Offset (0x13), 
            HDAD,   8, 
            Offset (0x17), 
            SDCL,   8, 
            Offset (0x1A), 
            SDIO,   8, 
            Offset (0x30), 
            USB1,   8, 
            Offset (0x34), 
            USB3,   8, 
            Offset (0x41), 
            SATA,   8, 
            Offset (0x62), 
            GIOC,   8, 
            Offset (0x70), 
            I2C0,   8, 
            I2C1,   8, 
            I2C2,   8, 
            I2C3,   8, 
            URT0,   8, 
            URT1,   8, 
            Offset (0x80), 
            AIRA,   8, 
            AIRB,   8, 
            AIRC,   8, 
            AIRD,   8, 
            AIRE,   8, 
            AIRF,   8, 
            AIRG,   8, 
            AIRH,   8
        }

        OperationRegion (KBDD, SystemIO, 0x64, One)
        Field (KBDD, ByteAcc, NoLock, Preserve)
        {
            PD64,   8
        }

        Method (DSPI, 0, NotSerialized)
        {
            INTA (0x1F)
            INTB (0x1F)
            INTC (0x1F)
            INTD (0x1F)
            Local1 = PD64 /* \_SB_.PD64 */
            PIRE = 0x1F
            PIRF = 0x1F
            PIRG = 0x1F
            PIRH = 0x1F
            Local1 = PD64 /* \_SB_.PD64 */
            AIRA = 0x10
            AIRB = 0x11
            AIRC = 0x12
            AIRD = 0x13
            AIRE = 0x14
            AIRF = 0x15
            AIRG = 0x16
            AIRH = 0x17
        }

        Method (INTA, 1, NotSerialized)
        {
            PIRA = Arg0
            HDAD = Arg0
        }

        Method (INTB, 1, NotSerialized)
        {
            PIRB = Arg0
        }

        Method (INTC, 1, NotSerialized)
        {
            PIRC = Arg0
            USB1 = Arg0
            USB3 = Arg0
        }

        Method (INTD, 1, NotSerialized)
        {
            PIRD = Arg0
            SATA = Arg0
        }

        Name (BUFA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {15}
        })
        Name (IPRA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRB, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRC, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRD, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Device (LNKA)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRA)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSA) /* \_SB_.PRSA */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTA (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRA) /* \_SB_.PIRA */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTA (Local0)
            }
        }

        Device (LNKB)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRB)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSB) /* \_SB_.PRSB */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTB (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRB) /* \_SB_.PIRB */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTB (Local0)
            }
        }

        Device (LNKC)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRC)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSC) /* \_SB_.PRSC */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTC (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRC) /* \_SB_.PIRC */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTC (Local0)
            }
        }

        Device (LNKD)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRD)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSD) /* \_SB_.PRSD */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTD (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRD) /* \_SB_.PIRD */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTD (Local0)
            }
        }

        Device (LNKE)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x05)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRE)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSE) /* \_SB_.PRSE */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRE = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRE) /* \_SB_.PIRE */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (PIRE, Local0)
                Local0--
                PIRE = Local0
            }
        }

        Device (LNKF)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x06)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRF)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSF) /* \_SB_.PRSF */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRF = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRF) /* \_SB_.PIRF */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRF = Local0
            }
        }

        Device (LNKG)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x07)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRG)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSG) /* \_SB_.PRSG */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRG = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRG) /* \_SB_.PIRG */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRG = Local0
            }
        }

        Device (LNKH)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x08)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRH)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSH) /* \_SB_.PRSH */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRH = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRH) /* \_SB_.PIRH */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRH = Local0
            }
        }
    }

    Device (HPET)
    {
        Name (_HID, EisaId ("PNP0103") /* HPET System Timer */)  // _HID: Hardware ID
        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((HPEN == One))
            {
                If ((OSVR >= 0x0C))
                {
                    Return (0x0F)
                }

                HPEN = Zero
                Return (One)
            }

            Return (One)
        }

        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
        {
            Name (BUF0, ResourceTemplate ()
            {
                IRQNoFlags ()
                    {0}
                IRQNoFlags ()
                    {8}
                Memory32Fixed (ReadOnly,
                    0xFED00000,         // Address Base
                    0x00000400,         // Address Length
                    )
            })
            Return (BUF0) /* \HPET._CRS.BUF0 */
        }
    }

    Name (OSTB, Ones)
    Name (TPOS, Zero)
    Name (LINX, Zero)
    Name (OSSP, Zero)
    Method (SEQL, 2, Serialized)
    {
        Local0 = SizeOf (Arg0)
        Local1 = SizeOf (Arg1)
        If ((Local0 != Local1))
        {
            Return (Zero)
        }

        Name (BUF0, Buffer (Local0){})
        BUF0 = Arg0
        Name (BUF1, Buffer (Local0){})
        BUF1 = Arg1
        Local2 = Zero
        While ((Local2 < Local0))
        {
            Local3 = DerefOf (BUF0 [Local2])
            Local4 = DerefOf (BUF1 [Local2])
            If ((Local3 != Local4))
            {
                Return (Zero)
            }

            Local2++
        }

        Return (One)
    }

    Method (OSTP, 0, NotSerialized)
    {
        If ((OSTB == Ones))
        {
            If (CondRefOf (\_OSI, Local0))
            {
                OSTB = Zero
                TPOS = Zero
                If (_OSI ("Windows 2001"))
                {
                    OSTB = 0x08
                    TPOS = 0x08
                }

                If (_OSI ("Windows 2001.1"))
                {
                    OSTB = 0x20
                    TPOS = 0x20
                }

                If (_OSI ("Windows 2001 SP1"))
                {
                    OSTB = 0x10
                    TPOS = 0x10
                }

                If (_OSI ("Windows 2001 SP2"))
                {
                    OSTB = 0x11
                    TPOS = 0x11
                }

                If (_OSI ("Windows 2001 SP3"))
                {
                    OSTB = 0x12
                    TPOS = 0x12
                }

                If (_OSI ("Windows 2006"))
                {
                    OSTB = 0x40
                    TPOS = 0x40
                }

                If (_OSI ("Windows 2006 SP1"))
                {
                    OSTB = 0x41
                    TPOS = 0x41
                    OSSP = One
                }

                If (_OSI ("Windows 2009"))
                {
                    OSSP = One
                    OSTB = 0x50
                    TPOS = 0x50
                }

                If (_OSI ("Windows 2012"))
                {
                    OSSP = One
                    OSTB = 0x60
                    TPOS = 0x60
                }

                If (_OSI ("Windows 2013"))
                {
                    OSSP = One
                    OSTB = 0x61
                    TPOS = 0x61
                }

                If (_OSI ("Windows 2015"))
                {
                    OSSP = One
                    OSTB = 0x70
                    TPOS = 0x70
                }

                If (_OSI ("Linux"))
                {
                    LINX = One
                    OSTB = 0x80
                    TPOS = 0x80
                }
            }
            ElseIf (CondRefOf (\_OS, Local0))
            {
                If (SEQL (_OS, "Microsoft Windows"))
                {
                    OSTB = One
                    TPOS = One
                }
                ElseIf (SEQL (_OS, "Microsoft WindowsME: Millennium Edition"))
                {
                    OSTB = 0x02
                    TPOS = 0x02
                }
                ElseIf (SEQL (_OS, "Microsoft Windows NT"))
                {
                    OSTB = 0x04
                    TPOS = 0x04
                }
                Else
                {
                    OSTB = Zero
                    TPOS = Zero
                }
            }
            Else
            {
                OSTB = Zero
                TPOS = Zero
            }
        }

        Return (OSTB) /* \OSTB */
    }

    Scope (_SB.PCI0)
    {
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            If ((PICM != Zero))
            {
                DSPI ()
                NAPE ()
            }

            OSTP ()
            OSFL ()
        }
    }

    OperationRegion (DBGB, SystemIO, 0x80, One)
    Field (DBGB, ByteAcc, NoLock, Preserve)
    {
        P80B,   8
    }

    OperationRegion (DBGW, SystemIO, 0x80, 0x02)
    Field (DBGW, WordAcc, NoLock, Preserve)
    {
        P80W,   16
    }

    OperationRegion (DBGD, SystemIO, 0x80, 0x04)
    Field (DBGD, DWordAcc, NoLock, Preserve)
    {
        P80D,   32
    }

    Name (TSOS, 0x75)
    If (CondRefOf (\_OSI))
    {
        If (_OSI ("Windows 2009"))
        {
            TSOS = 0x50
        }

        If (_OSI ("Windows 2015"))
        {
            TSOS = 0x70
        }
    }

    Scope (_SB)
    {
        OperationRegion (SMIC, SystemMemory, 0xFED80000, 0x00800000)
        Field (SMIC, ByteAcc, NoLock, Preserve)
        {
            Offset (0x36A), 
            SMIB,   8
        }

        OperationRegion (SSMI, SystemIO, SMIB, 0x02)
        Field (SSMI, AnyAcc, NoLock, Preserve)
        {
            SMIW,   16
        }

        OperationRegion (ECMC, SystemIO, 0x72, 0x02)
        Field (ECMC, AnyAcc, NoLock, Preserve)
        {
            ECMI,   8, 
            ECMD,   8
        }

        IndexField (ECMI, ECMD, ByteAcc, NoLock, Preserve)
        {
            Offset (0x08), 
            FRTB,   32
        }

        OperationRegion (FRTP, SystemMemory, FRTB, 0x0100)
        Field (FRTP, AnyAcc, NoLock, Preserve)
        {
            PEBA,   32, 
            SPIE,   1, 
            P80E,   1, 
                ,   2, 
            NI2C,   1, 
            IC0E,   1, 
            IC1E,   1, 
            IC2E,   1, 
            IC3E,   1, 
            IC4E,   1, 
            IC5E,   1, 
            UT0E,   1, 
            UT1E,   1, 
                ,   1, 
                ,   1, 
            ST_E,   1, 
            UT2E,   1, 
                ,   1, 
            EMMD,   2, 
                ,   3, 
            XHCE,   1, 
                ,   1, 
                ,   1, 
            UT3E,   1, 
            ESPI,   1, 
            EMME,   1, 
            Offset (0x08), 
            PCEF,   1, 
                ,   4, 
            IC0D,   1, 
            IC1D,   1, 
            IC2D,   1, 
            IC3D,   1, 
            IC4D,   1, 
            IC5D,   1, 
            UT0D,   1, 
            UT1D,   1, 
                ,   1, 
                ,   1, 
            ST_D,   1, 
            UT2D,   1, 
                ,   1, 
            EHCD,   1, 
                ,   4, 
            XHCD,   1, 
            SD_D,   1, 
                ,   1, 
            UT3D,   1, 
                ,   1, 
            EMD3,   1, 
                ,   2, 
            S03D,   1, 
            FW00,   16, 
            FW01,   32, 
            FW02,   16, 
            FW03,   32, 
            SDS0,   8, 
            SDS1,   8, 
            CZFG,   1, 
            Offset (0x20), 
            SD10,   32, 
            EH10,   32, 
            XH10,   32, 
            STBA,   32
        }

        OperationRegion (FCFG, SystemMemory, PEBA, 0x01000000)
        Field (FCFG, DWordAcc, NoLock, Preserve)
        {
            Offset (0xA3044), 
            IPDE,   32, 
            IMPE,   32, 
            Offset (0xA306C), 
            RAR2,   32, 
            Offset (0xA3078), 
                ,   2, 
            LDQ0,   1, 
            Offset (0xA30CB), 
                ,   7, 
            AUSS,   1, 
            Offset (0xA30D0), 
                ,   13, 
            LCLK,   2
        }

        OperationRegion (IOMX, SystemMemory, 0xFED80D00, 0x0100)
        Field (IOMX, AnyAcc, NoLock, Preserve)
        {
            Offset (0x15), 
            IM15,   8, 
            IM16,   8, 
            IM17,   8, 
            Offset (0x1F), 
            IM1F,   8, 
            IM20,   8, 
            Offset (0x44), 
            IM44,   8, 
            Offset (0x46), 
            IM46,   8, 
            Offset (0x4A), 
            IM4A,   8, 
            IM4B,   8, 
            Offset (0x57), 
            IM57,   8, 
            IM58,   8, 
            Offset (0x68), 
            IM68,   8, 
            IM69,   8, 
            IM6A,   8, 
            IM6B,   8, 
            Offset (0x6D), 
            IM6D,   8
        }

        OperationRegion (FMIS, SystemMemory, 0xFED80E00, 0x0100)
        Field (FMIS, AnyAcc, NoLock, Preserve)
        {
            Offset (0x40), 
                ,   13, 
            I24M,   1
        }

        OperationRegion (FGIO, SystemMemory, 0xFED81500, 0x0300)
        Field (FGIO, AnyAcc, NoLock, Preserve)
        {
            Offset (0xA8), 
                ,   22, 
            O042,   1, 
            Offset (0x164), 
                ,   22, 
            O089,   1
        }

        OperationRegion (FACR, SystemMemory, 0xFED81E00, 0x0100)
        Field (FACR, AnyAcc, NoLock, Preserve)
        {
            Offset (0x62), 
            AMTD,   2, 
            Offset (0x80), 
                ,   28, 
            RD28,   1, 
                ,   1, 
            RQTY,   1, 
            Offset (0x84), 
                ,   28, 
            SD28,   1, 
                ,   1, 
            Offset (0xA0), 
            PG1A,   1
        }

        OperationRegion (EMMX, SystemMemory, 0xFEDD5800, 0x0130)
        Field (EMMX, AnyAcc, NoLock, Preserve)
        {
            Offset (0xD0), 
                ,   17, 
            FC18,   1, 
            FC33,   1, 
                ,   7, 
            CD_T,   1, 
            WP_T,   1
        }

        OperationRegion (EMMB, SystemMemory, 0xFEDD5800, 0x0130)
        Field (EMMB, AnyAcc, NoLock, Preserve)
        {
            Offset (0xA4), 
            E0A4,   32, 
            E0A8,   32, 
            Offset (0xB0), 
            E0B0,   32, 
            Offset (0xD0), 
            E0D0,   32, 
            Offset (0x116), 
            E116,   32
        }

        OperationRegion (SPIM, SystemMemory, 0xFEC10000, 0x0100)
        Field (SPIM, AnyAcc, NoLock, Preserve)
        {
            Offset (0x1D), 
            ASCE,   2, 
            Offset (0x22), 
            SSSC,   16, 
            Offset (0xFC), 
            STRN,   1, 
                ,   2, 
            BOWS,   1, 
            DOWS,   1
        }

        Mutex (ASSM, 0x00)
        Name (SVBF, Buffer (0x0100)
        {
             0x00                                             // .
        })
        CreateDWordField (SVBF, Zero, S0A4)
        CreateDWordField (SVBF, 0x04, S0A8)
        CreateDWordField (SVBF, 0x08, S0B0)
        CreateDWordField (SVBF, 0x0C, S0D0)
        CreateDWordField (SVBF, 0x10, S116)
        CreateWordField (SVBF, 0x14, RG22)
        CreateDWordField (SVBF, 0x18, SAR2)
        Method (SECR, 0, Serialized)
        {
            S116 = E116 /* \_SB_.E116 */
            RQTY = Zero
            RD28 = One
            Local0 = SD28 /* \_SB_.SD28 */
            While (Local0)
            {
                Local0 = SD28 /* \_SB_.SD28 */
            }
        }

        Method (RECR, 0, Serialized)
        {
            E116 = S116 /* \_SB_.S116 */
        }

        OperationRegion (LUIE, SystemMemory, 0xFEDC0020, 0x04)
        Field (LUIE, AnyAcc, NoLock, Preserve)
        {
            IER0,   1, 
            IER1,   1, 
            IER2,   1, 
            IER3,   1, 
            UOL0,   1, 
            UOL1,   1, 
            UOL2,   1, 
            UOL3,   1, 
            WUR0,   2, 
            WUR1,   2, 
            WUR2,   2, 
            WUR3,   2
        }

        Method (FRUI, 1, Serialized)
        {
            If ((Arg0 == Zero))
            {
                Return (IUA0) /* \_SB_.IUA0 */
            }

            If ((Arg0 == One))
            {
                Return (IUA1) /* \_SB_.IUA1 */
            }

            If ((Arg0 == 0x02))
            {
                Return (IUA2) /* \_SB_.IUA2 */
            }

            If ((Arg0 == 0x03))
            {
                Return (IUA3) /* \_SB_.IUA3 */
            }

            Return (Zero)
        }

        Method (OP80, 1, Serialized)
        {
            If (P80E)
            {
                P80D = Arg0
            }
        }

        Method (SRAD, 2, Serialized)
        {
            Local1 = (Arg1 << 0x05)
            Local1 += 0xB000AF80
            Local1 += Arg0
            OP80 (Local1)
            Local0 = (Arg0 << One)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            ADIS = One
            ADSR = Zero
            Stall (Arg1)
            ADSR = One
            ADIS = Zero
            Stall (Arg1)
        }

        Method (DSAD, 2, Serialized)
        {
            Local1 = (Arg1 << 0x05)
            Local1 += 0xB000AF80
            Local1 += Arg0
            OP80 (Local1)
            Local0 = (Arg0 << One)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            If ((Arg1 != ADTD))
            {
                If ((Arg1 == Zero))
                {
                    ADTD = Zero
                    ADPD = One
                    Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    While ((Local0 != 0x07))
                    {
                        Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    }
                }

                If ((Arg1 == 0x03))
                {
                    ADPD = Zero
                    Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    While ((Local0 != Zero))
                    {
                        Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    }

                    ADTD = 0x03
                }
            }
        }

        Method (HSAD, 2, Serialized)
        {
            Local0 = (Arg0 << One)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            If ((Arg1 != ADTD))
            {
                If ((Arg1 == Zero))
                {
                    ADTD = Zero
                    ADPD = One
                    Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    While ((Local0 != 0x07))
                    {
                        Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    }

                    RQTY = One
                    RD28 = One
                    Local0 = SD28 /* \_SB_.SD28 */
                    While (!Local0)
                    {
                        Local0 = SD28 /* \_SB_.SD28 */
                    }
                }

                If ((Arg1 == 0x03))
                {
                    RQTY = Zero
                    RD28 = One
                    Local0 = SD28 /* \_SB_.SD28 */
                    While (Local0)
                    {
                        Local0 = SD28 /* \_SB_.SD28 */
                    }

                    ADPD = Zero
                    Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    While ((Local0 != Zero))
                    {
                        Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    }

                    ADTD = 0x03
                }
            }
        }

        OperationRegion (FPIC, SystemIO, 0x0C00, 0x02)
        Field (FPIC, AnyAcc, NoLock, Preserve)
        {
            FPII,   8, 
            FPID,   8
        }

        IndexField (FPII, FPID, ByteAcc, NoLock, Preserve)
        {
            Offset (0xF4), 
            IUA0,   8, 
            IUA1,   8, 
            Offset (0xF8), 
            IUA2,   8, 
            IUA3,   8
        }

        Device (SPI1)
        {
            Name (_HID, "AMDI0060")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (SPIE)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0xFEC10000,         // Address Base
                        0x00000100,         // Address Length
                        )
                })
                Return (RBUF) /* \_SB_.SPI1._CRS.RBUF */
            }

            Method (ASSC, 2, Serialized)
            {
                Acquire (ASSM, 0xFFFF)
                Local0 = Arg1
                Switch (ToInteger (Arg0))
                {
                    Case (0x03)
                    {
                        DOWS = One
                        STRN = One
                        While ((BOWS && STRN))
                        {
                            If (Arg1)
                            {
                                Stall (One)
                                Local0 -= One
                                If ((Local0 == Zero))
                                {
                                    Break
                                }
                            }
                        }

                        SAR2 = RAR2 /* \_SB_.RAR2 */
                        RAR2 = Zero
                        ASCE = 0x02
                        RG22 = SSSC /* \_SB_.SSSC */
                    }
                    Case (0x04)
                    {
                        SSSC = RG22 /* \_SB_.RG22 */
                        ASCE = Zero
                        RAR2 = SAR2 /* \_SB_.SAR2 */
                        Local0 = One
                        DOWS = Zero
                    }

                }

                Release (ASSM)
                Return (Local0)
            }
        }

        Device (GPIO)
        {
            Name (_HID, "AMDI0030")  // _HID: Hardware ID
            Name (_CID, "AMDI0030")  // _CID: Compatible ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
                    {
                        0x00000007,
                    }
                    Memory32Fixed (ReadWrite,
                        0xFED81500,         // Address Base
                        0x00000400,         // Address Length
                        )
                })
                Return (RBUF) /* \_SB_.GPIO._CRS.RBUF */
            }

            Method (RST, 0, NotSerialized)
            {
                Notify (GPIO, Zero) // Bus Check
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (FUR0)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {3}
                Memory32Fixed (ReadWrite,
                    0xFEDC9000,         // Address Base
                    0x00001000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xFEDC7000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT0E == One))
                    {
                        If (UOL0)
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((UT0D && UT0E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((UT0D && UT0E))
                {
                    DSAD (0x0B, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((UT0D && UT0E))
                {
                    DSAD (0x0B, 0x03)
                }
            }
        }

        Device (FUR1)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {4}
                Memory32Fixed (ReadWrite,
                    0xFEDCA000,         // Address Base
                    0x00001000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xFEDC8000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT1E == One))
                    {
                        If (UOL1)
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((UT1D && UT1E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((UT1D && UT1E))
                {
                    DSAD (0x0C, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((UT1D && UT1E))
                {
                    DSAD (0x0C, 0x03)
                }
            }
        }

        Device (FUR2)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {15}
                Memory32Fixed (ReadWrite,
                    0xFEDCE000,         // Address Base
                    0x00001000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xFEDCC000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT2E == One))
                    {
                        If (UOL2)
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((UT2D && UT2E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((UT2D && UT2E))
                {
                    DSAD (0x10, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((UT2D && UT2E))
                {
                    DSAD (0x10, 0x03)
                }
            }
        }

        Device (FUR3)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {5}
                Memory32Fixed (ReadWrite,
                    0xFEDCF000,         // Address Base
                    0x00001000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xFEDCD000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT3E == One))
                    {
                        If (UOL3)
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((UT3D && UT3E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((UT3D && UT3E))
                {
                    DSAD (0x1A, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((UT3D && UT3E))
                {
                    DSAD (0x1A, 0x03)
                }
            }
        }

        Device (I2CA)
        {
            Name (_HID, "AMDI0011")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Name (_ADR, Zero)  // _ADR: Address
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {10}
                Memory32Fixed (ReadWrite,
                    0xFEDC2000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                ^PCI0.GP17.MP2C
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC0E == One))
                    {
                        If ((NI2C == Zero))
                        {
                            Return (0x0F)
                        }
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x05, 0xC8)
            }
        }

        Device (I2CB)
        {
            Name (_HID, "AMDI0011")  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (_ADR, One)  // _ADR: Address
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {11}
                Memory32Fixed (ReadWrite,
                    0xFEDC3000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                ^PCI0.GP17.MP2C
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC1E == One))
                    {
                        If ((NI2C == Zero))
                        {
                            Return (0x0F)
                        }
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x06, 0xC8)
            }
        }

        Device (I2CC)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {14}
                Memory32Fixed (ReadWrite,
                    0xFEDC4000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC2E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x07, 0xC8)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((IC2D && IC2E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((IC2D && IC2E))
                {
                    DSAD (0x07, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((IC2D && IC2E))
                {
                    DSAD (0x07, 0x03)
                }
            }
        }

        Device (I2CD)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {6}
                Memory32Fixed (ReadWrite,
                    0xFEDC5000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC3E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x08, 0xC8)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((IC3D && IC3E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((IC3D && IC3E))
                {
                    DSAD (0x08, Zero)
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((IC3D && IC3E))
                {
                    DSAD (0x08, 0x03)
                }
            }
        }

        Device (I2CE)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {10}
                Memory32Fixed (ReadWrite,
                    0xFEDC2000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC0E == One))
                    {
                        If ((NI2C == One))
                        {
                            Return (0x0F)
                        }
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x09, 0xC8)
            }
        }

        Device (I2CF)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {11}
                Memory32Fixed (ReadWrite,
                    0xFEDC3000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC1E == One))
                    {
                        If ((NI2C == One))
                        {
                            Return (0x0F)
                        }
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x0A, 0xC8)
            }
        }

        Method (EPIN, 0, NotSerialized)
        {
            IPDE = Zero
            IMPE = 0xFF00
            IM15 = One
            IM16 = One
            IM20 = One
            IM44 = One
            IM46 = One
            IM68 = One
            IM69 = One
            IM6A = One
            IM6B = One
            IM1F = One
            If ((EMMD != One))
            {
                IM4A = One
                IM58 = One
                IM4B = One
                IM57 = One
                IM6D = One
            }

            SECR ()
        }

        Name (NCRS, ResourceTemplate ()
        {
            Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
            {
                0x00000005,
            }
            Memory32Fixed (ReadWrite,
                0xFEDD5000,         // Address Base
                0x00001000,         // Address Length
                )
        })
        Name (DCRS, ResourceTemplate ()
        {
            Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
            {
                0x00000005,
            }
            Memory32Fixed (ReadWrite,
                0xFEDD5000,         // Address Base
                0x00001000,         // Address Length
                )
            GpioInt (Edge, ActiveBoth, SharedAndWake, PullUp, 0x0BB8,
                "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                )
                {   // Pin list
                    0x0044
                }
            GpioIo (Shared, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                )
                {   // Pin list
                    0x0044
                }
        })
        Name (ECRS, ResourceTemplate ()
        {
            Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
            {
                0x00000005,
            }
            Memory32Fixed (ReadWrite,
                0xFEDD5000,         // Address Base
                0x00001000,         // Address Length
                )
            GpioInt (Edge, ActiveLow, SharedAndWake, PullUp, 0x0BB8,
                "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                )
                {   // Pin list
                    0x0044
                }
        })
        Name (AHID, "AMDI0040")
        Name (ACID, "AMDI0040")
        Name (MHID, "AMDI0041")
        Name (MCID, "AMDI0041")
        Name (SHID, 0x400DD041)
        Name (SCID, "PCI\\CC_080501")
        Device (EMM0)
        {
            Method (_HID, 0, Serialized)  // _HID: Hardware ID
            {
                If ((EMMD == Zero))
                {
                    Return (AHID) /* \_SB_.AHID */
                }

                If ((EMMD == One))
                {
                    Return (SHID) /* \_SB_.SHID */
                }

                If ((EMMD == 0x02))
                {
                    Return (MHID) /* \_SB_.MHID */
                }

                Return (Zero)
            }

            Method (_CID, 0, Serialized)  // _CID: Compatible ID
            {
                If ((EMMD == Zero))
                {
                    Return (ACID) /* \_SB_.ACID */
                }

                If ((EMMD == One))
                {
                    Return (SCID) /* \_SB_.SCID */
                }

                If ((EMMD == 0x02))
                {
                    Return (MCID) /* \_SB_.MCID */
                }

                Return (Zero)
            }

            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                If (EMD3)
                {
                    If ((EMMD == One))
                    {
                        Return (DCRS) /* \_SB_.DCRS */
                    }

                    Return (ECRS) /* \_SB_.ECRS */
                }
                Else
                {
                    Return (NCRS) /* \_SB_.NCRS */
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If (EMME)
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If (EMME)
                {
                    EPIN ()
                }
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((EMD3 && EMME))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((EMD3 && EMME))
                {
                    HSAD (0x1C, Zero)
                    RECR ()
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((EMD3 && EMME))
                {
                    HSAD (0x1C, 0x03)
                }
            }

            Device (CARD)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                {
                    If ((EMMD == One))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (UAR1)
        {
            Name (_HID, EisaId ("PNP0501") /* 16550A-compatible COM Serial Port */)  // _HID: Hardware ID
            Name (_DDN, "COM4")  // _DDN: DOS Device Name
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((IER0 && (AMTD != 0x03)))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x02E8,             // Range Minimum
                        0x02E8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y23)
                    IRQNoFlags (_Y24)
                        {3}
                })
                CreateByteField (BUF0, \_SB.PCI0.UAR1._CRS._Y23._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.PCI0.UAR1._CRS._Y23._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.PCI0.UAR1._CRS._Y24._INT, IRQL)  // _INT: Interrupts
                IRQL = (One << FRUI (WUR0))
                Return (BUF0) /* \_SB_.PCI0.UAR1._CRS.BUF0 */
            }
        }

        Device (UAR2)
        {
            Name (_HID, EisaId ("PNP0501") /* 16550A-compatible COM Serial Port */)  // _HID: Hardware ID
            Name (_DDN, "COM2")  // _DDN: DOS Device Name
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((IER1 && (AMTD != 0x03)))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x02F8,             // Range Minimum
                        0x02F8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y25)
                    IRQNoFlags (_Y26)
                        {4}
                })
                CreateByteField (BUF0, \_SB.PCI0.UAR2._CRS._Y25._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.PCI0.UAR2._CRS._Y25._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.PCI0.UAR2._CRS._Y26._INT, IRQL)  // _INT: Interrupts
                IRQL = (One << FRUI (WUR1))
                Return (BUF0) /* \_SB_.PCI0.UAR2._CRS.BUF0 */
            }
        }

        Device (UAR3)
        {
            Name (_HID, EisaId ("PNP0501") /* 16550A-compatible COM Serial Port */)  // _HID: Hardware ID
            Name (_DDN, "COM3")  // _DDN: DOS Device Name
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((IER2 && (AMTD != 0x03)))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x03E8,             // Range Minimum
                        0x03E8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y27)
                    IRQNoFlags (_Y28)
                        {3}
                })
                CreateByteField (BUF0, \_SB.PCI0.UAR3._CRS._Y27._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.PCI0.UAR3._CRS._Y27._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.PCI0.UAR3._CRS._Y28._INT, IRQL)  // _INT: Interrupts
                IRQL = (One << FRUI (WUR2))
                Return (BUF0) /* \_SB_.PCI0.UAR3._CRS.BUF0 */
            }
        }

        Device (UAR4)
        {
            Name (_HID, EisaId ("PNP0501") /* 16550A-compatible COM Serial Port */)  // _HID: Hardware ID
            Name (_DDN, "COM1")  // _DDN: DOS Device Name
            Name (_UID, One)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((IER3 && (AMTD != 0x03)))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x03F8,             // Range Minimum
                        0x03F8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y29)
                    IRQNoFlags (_Y2A)
                        {4}
                })
                CreateByteField (BUF0, \_SB.PCI0.UAR4._CRS._Y29._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.PCI0.UAR4._CRS._Y29._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.PCI0.UAR4._CRS._Y2A._INT, IRQL)  // _INT: Interrupts
                IRQL = (One << FRUI (WUR3))
                Return (BUF0) /* \_SB_.PCI0.UAR4._CRS.BUF0 */
            }
        }
    }

    Scope (_SB.PCI0.GP17.VGA)
    {
        Device (CAMF)
        {
            Name (_ADR, 0x1000)  // _ADR: Address
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((O042 == One))
                {
                    Return (0x0F)
                }

                Return (0x0B)
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                O042 = One
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                O042 = Zero
            }
        }

        Device (CAMR)
        {
            Name (_ADR, 0x2000)  // _ADR: Address
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((O089 == One))
                {
                    Return (0x0F)
                }

                Return (0x0B)
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                O089 = One
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                O089 = Zero
            }
        }

        Method (RCPU, 0, NotSerialized)
        {
            O089 = One
        }

        Method (RCPD, 0, NotSerialized)
        {
            O089 = Zero
        }

        Method (FCPU, 0, NotSerialized)
        {
            O042 = One
        }

        Method (FCPD, 0, NotSerialized)
        {
            O042 = Zero
        }

        Method (ICLE, 0, NotSerialized)
        {
            I24M = Zero
        }

        Method (ICLD, 0, NotSerialized)
        {
            I24M = One
        }
    }

    Device (_SB.TPM)
    {
        Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
        {
            If (TCMF)
            {
                Return (0x01013469)
            }
            ElseIf ((TTDP == Zero))
            {
                Return (0x310CD041)
            }
            Else
            {
                Return ("MSFT0101")
            }
        }

        Method (_STR, 0, NotSerialized)  // _STR: Description String
        {
            If ((TTDP == Zero))
            {
                Return (Unicode ("TPM 1.2 Device"))
            }
            Else
            {
                Return (Unicode ("TPM 2.0 Device"))
            }
        }

        Name (_UID, One)  // _UID: Unique ID
        Name (CRST, ResourceTemplate ()
        {
            Memory32Fixed (ReadOnly,
                0x00000000,         // Address Base
                0x00001000,         // Address Length
                _Y2B)
            Memory32Fixed (ReadOnly,
                0xFED70000,         // Address Base
                0x00001000,         // Address Length
                _Y2C)
        })
        Name (CRSD, ResourceTemplate ()
        {
            Memory32Fixed (ReadWrite,
                0xFED40000,         // Address Base
                0x00005000,         // Address Length
                _Y2D)
        })
        Name (CRSI, ResourceTemplate ()
        {
            Memory32Fixed (ReadWrite,
                0xFED40000,         // Address Base
                0x00005000,         // Address Length
                _Y2E)
        })
        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
        {
            If ((AMDT == One))
            {
                CreateDWordField (CRST, \_SB.TPM._Y2B._BAS, MTFB)  // _BAS: Base Address
                CreateDWordField (CRST, \_SB.TPM._Y2B._LEN, LTFB)  // _LEN: Length
                MTFB = TPMB /* \TPMB */
                LTFB = 0x1000
                CreateDWordField (CRST, \_SB.TPM._Y2C._BAS, MTFC)  // _BAS: Base Address
                CreateDWordField (CRST, \_SB.TPM._Y2C._LEN, LTFC)  // _LEN: Length
                MTFC = TPMC /* \TPMC */
                LTFC = 0x1000
                Return (CRST) /* \_SB_.TPM_.CRST */
            }
            Else
            {
                If ((DTPT == One))
                {
                    CreateDWordField (CRSD, \_SB.TPM._Y2D._BAS, MTFE)  // _BAS: Base Address
                    CreateDWordField (CRSD, \_SB.TPM._Y2D._LEN, LTFE)  // _LEN: Length
                    MTFE = 0xFED40000
                    LTFE = 0x5000
                    Return (CRSD) /* \_SB_.TPM_.CRSD */
                }
                ElseIf ((TTPF == One))
                {
                    CreateDWordField (CRSI, \_SB.TPM._Y2E._BAS, MTFD)  // _BAS: Base Address
                    CreateDWordField (CRSI, \_SB.TPM._Y2E._LEN, LTFD)  // _LEN: Length
                    MTFD = 0xFED40000
                    LTFD = 0x5000
                    Return (CRSI) /* \_SB_.TPM_.CRSI */
                }
                ElseIf ((TTPF == Zero))
                {
                    CreateDWordField (CRST, \_SB.TPM._Y2B._BAS, MTFF)  // _BAS: Base Address
                    MTFF = FTPM /* \FTPM */
                    Return (CRST) /* \_SB_.TPM_.CRST */
                }

                MTFE = Zero
                LTFE = Zero
                Return (CRSI) /* \_SB_.TPM_.CRSI */
            }

            Return (CRSI) /* \_SB_.TPM_.CRSI */
        }

        OperationRegion (TMMB, SystemMemory, 0xFED40000, 0x5000)
        Field (TMMB, ByteAcc, Lock, Preserve)
        {
            Offset (0x04), 
            LCST,   32, 
            Offset (0x40), 
            CREQ,   32, 
            CSTS,   32, 
            Offset (0x4C), 
            SCMD,   32
        }

        OperationRegion (CRBD, SystemMemory, TPMM, 0x48)
        Field (CRBD, AnyAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            HERR,   32, 
            Offset (0x40), 
            HCMD,   32, 
            HSTS,   32
        }

        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((TTDP == Zero))
            {
                If (TPMF)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }
            ElseIf ((TTDP == One))
            {
                If (TPMF)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Return (Zero)
        }

        Method (STRT, 3, Serialized)
        {
            OperationRegion (TPMR, SystemMemory, FTPM, 0x1000)
            Field (TPMR, AnyAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                FERR,   32, 
                Offset (0x0C), 
                BEGN,   32
            }

            Name (TIMR, Zero)
            If ((ToInteger (Arg0) != Zero)){}
            Switch (ToInteger (Arg1))
            {
                Case (Zero)
                {
                    Return (Buffer (One)
                    {
                         0x03                                             // .
                    })
                }
                Case (One)
                {
                    TIMR = Zero
                    If ((AMDT == One))
                    {
                        While (((BEGN == One) && (TIMR < 0x0200)))
                        {
                            If ((BEGN == One))
                            {
                                Sleep (One)
                                TIMR++
                            }
                        }
                    }
                    ElseIf ((((HSTS & 0x02) | (HSTS & One)
                        ) == 0x03))
                    {
                        HCMD = One
                    }
                    Else
                    {
                        FERR = One
                        BEGN = Zero
                    }

                    Return (Zero)
                }

            }

            Return (One)
        }

        Method (CRYF, 3, Serialized)
        {
            If ((ToInteger (Arg0) != One)){}
            Switch (ToInteger (Arg1))
            {
                Case (Zero)
                {
                    Return (Buffer (One)
                    {
                         0x03                                             // .
                    })
                }
                Case (One)
                {
                    Name (TPMV, Package (0x02)
                    {
                        One, 
                        Package (0x02)
                        {
                            One, 
                            0x20
                        }
                    })
                    If ((_STA () == Zero))
                    {
                        Return (Package (0x01)
                        {
                            Zero
                        })
                    }

                    Return (TPMV) /* \_SB_.TPM_.CRYF.TPMV */
                }

            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }
    }

    Scope (_SB.TPM)
    {
        OperationRegion (TSMI, SystemIO, SMIA, 0x02)
        Field (TSMI, WordAcc, NoLock, Preserve)
        {
            SMI,    16
        }

        OperationRegion (ATNV, SystemMemory, PPIM, PPIL)
        Field (ATNV, AnyAcc, NoLock, Preserve)
        {
            RQST,   32, 
            RCNT,   32, 
            ERRO,   32, 
            FLAG,   32, 
            MISC,   32, 
            OPTN,   32, 
            SRSP,   32
        }

        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("3dddfaa6-361b-4eb4-a424-8d10089d1653") /* Physical Presence Interface */))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Return (Buffer (0x02)
                        {
                             0xFF, 0x01                                       // ..
                        })
                    }
                    Case (One)
                    {
                        If ((PPIV == Zero))
                        {
                            Return ("1.2")
                        }
                        Else
                        {
                            Return ("1.3")
                        }
                    }
                    Case (0x02)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        SRSP = Zero
                        FLAG = 0x02
                        TMF1 = OFST /* \OFST */
                        SRSP = Zero
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Case (0x03)
                    {
                        Name (PPI1, Package (0x02)
                        {
                            Zero, 
                            Zero
                        })
                        PPI1 [One] = RQST /* \_SB_.TPM_.RQST */
                        Return (PPI1) /* \_SB_.TPM_._DSM.PPI1 */
                    }
                    Case (0x04)
                    {
                        Return (TRST) /* \TRST */
                    }
                    Case (0x05)
                    {
                        Name (PPI2, Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        })
                        SRSP = Zero
                        FLAG = 0x05
                        SMI = OFST /* \OFST */
                        PPI2 [One] = RCNT /* \_SB_.TPM_.RCNT */
                        PPI2 [0x02] = ERRO /* \_SB_.TPM_.ERRO */
                        Return (PPI2) /* \_SB_.TPM_._DSM.PPI2 */
                    }
                    Case (0x06)
                    {
                        Return (0x03)
                    }
                    Case (0x07)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        FLAG = 0x07
                        OPTN = Zero
                        If ((RQST == 0x17))
                        {
                            ToInteger (DerefOf (Arg3 [One]), OPTN) /* \_SB_.TPM_.OPTN */
                        }

                        TMF1 = OFST /* \OFST */
                        SRSP = Zero
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Case (0x08)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        FLAG = 0x08
                        TMF1 = OFST /* \OFST */
                        SRSP = Zero
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Default
                    {
                    }

                }
            }
            ElseIf ((Arg0 == ToUUID ("376054ed-cc13-4675-901c-4756d7f2d45d")))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Return (Buffer (One)
                        {
                             0x03                                             // .
                        })
                    }
                    Case (One)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        FLAG = 0x09
                        TMF1 = OFST /* \OFST */
                        SRSP = Zero
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Default
                    {
                    }

                }
            }

            If ((Arg0 == ToUUID ("cf8e16a5-c1e8-4e25-b712-4f54a96702c8")))
            {
                Return (CRYF (Arg1, Arg2, Arg3))
            }

            If ((Arg0 == ToUUID ("6bbf6cab-5463-4714-b7cd-f0203c0368d4")))
            {
                Return (STRT (Arg1, Arg2, Arg3))
            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }

        Method (TPTS, 1, Serialized)
        {
            Switch (ToInteger (Arg0))
            {
                Case (0x04)
                {
                    RQST = Zero
                    FLAG = 0x09
                    SRSP = Zero
                    SMI = OFST /* \OFST */
                }
                Case (0x05)
                {
                    RQST = Zero
                    FLAG = 0x09
                    SRSP = Zero
                    SMI = OFST /* \OFST */
                }

            }

            Sleep (0x012C)
        }
    }

    Scope (_SB)
    {
        Method (TEST, 1, NotSerialized)
        {
        }

        Method (MPTS, 1, NotSerialized)
        {
            \GSA1.MPTS (Arg0)
        }

        Method (MWAK, 1, NotSerialized)
        {
            \GSA1.MWAK (Arg0)
        }
    }

    Scope (_SB.PCI0.GP17.XHC0)
    {
        Device (RHUB)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Device (PRT1)
            {
                Name (_ADR, One)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    0xFF, 
                    Zero, 
                    Zero
                })
                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                {
                    ToPLD (
                        PLD_Revision           = 0x2,
                        PLD_IgnoreColor        = 0x1,
                        PLD_Red                = 0x0,
                        PLD_Green              = 0x0,
                        PLD_Blue               = 0x0,
                        PLD_Width              = 0x0,
                        PLD_Height             = 0x0,
                        PLD_UserVisible        = 0x0,
                        PLD_Dock               = 0x0,
                        PLD_Lid                = 0x0,
                        PLD_Panel              = "LEFT",
                        PLD_VerticalPosition   = "UPPER",
                        PLD_HorizontalPosition = "LEFT",
                        PLD_Shape              = "VERTICALRECTANGLE",
                        PLD_GroupOrientation   = 0x0,
                        PLD_GroupToken         = 0x0,
                        PLD_GroupPosition      = 0x1,
                        PLD_Bay                = 0x0,
                        PLD_Ejectable          = 0x1,
                        PLD_EjectRequired      = 0x0,
                        PLD_CabinetNumber      = 0x0,
                        PLD_CardCageNumber     = 0x0,
                        PLD_Reference          = 0x0,
                        PLD_Rotation           = 0x0,
                        PLD_Order              = 0x0,
                        PLD_VerticalOffset     = 0xFFFF,
                        PLD_HorizontalOffset   = 0xFFFF)

                })
            }

            Device (PRT2)
            {
                Name (_ADR, 0x02)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                {
                    ToPLD (
                        PLD_Revision           = 0x2,
                        PLD_IgnoreColor        = 0x1,
                        PLD_Red                = 0x0,
                        PLD_Green              = 0x0,
                        PLD_Blue               = 0x0,
                        PLD_Width              = 0x0,
                        PLD_Height             = 0x0,
                        PLD_UserVisible        = 0x1,
                        PLD_Dock               = 0x0,
                        PLD_Lid                = 0x0,
                        PLD_Panel              = "LEFT",
                        PLD_VerticalPosition   = "LOWER",
                        PLD_HorizontalPosition = "LEFT",
                        PLD_Shape              = "VERTICALRECTANGLE",
                        PLD_GroupOrientation   = 0x0,
                        PLD_GroupToken         = 0x0,
                        PLD_GroupPosition      = 0x2,
                        PLD_Bay                = 0x0,
                        PLD_Ejectable          = 0x1,
                        PLD_EjectRequired      = 0x0,
                        PLD_CabinetNumber      = 0x0,
                        PLD_CardCageNumber     = 0x0,
                        PLD_Reference          = 0x0,
                        PLD_Rotation           = 0x0,
                        PLD_Order              = 0x0,
                        PLD_VerticalOffset     = 0xFFFF,
                        PLD_HorizontalOffset   = 0xFFFF)

                })
            }

            Device (PRT3)
            {
                Name (_ADR, 0x03)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                {
                    ToPLD (
                        PLD_Revision           = 0x2,
                        PLD_IgnoreColor        = 0x1,
                        PLD_Red                = 0x0,
                        PLD_Green              = 0x0,
                        PLD_Blue               = 0x0,
                        PLD_Width              = 0x0,
                        PLD_Height             = 0x0,
                        PLD_UserVisible        = 0x1,
                        PLD_Dock               = 0x0,
                        PLD_Lid                = 0x0,
                        PLD_Panel              = "LEFT",
                        PLD_VerticalPosition   = "LOWER",
                        PLD_HorizontalPosition = "LEFT",
                        PLD_Shape              = "UNKNOWN",
                        PLD_GroupOrientation   = 0x0,
                        PLD_GroupToken         = 0x0,
                        PLD_GroupPosition      = 0x3,
                        PLD_Bay                = 0x0,
                        PLD_Ejectable          = 0x1,
                        PLD_EjectRequired      = 0x0,
                        PLD_CabinetNumber      = 0x0,
                        PLD_CardCageNumber     = 0x0,
                        PLD_Reference          = 0x0,
                        PLD_Rotation           = 0x0,
                        PLD_Order              = 0x0,
                        PLD_VerticalOffset     = 0xFFFF,
                        PLD_HorizontalOffset   = 0xFFFF)

                })
            }

            Device (PRT4)
            {
                Name (_ADR, 0x04)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                {
                    ToPLD (
                        PLD_Revision           = 0x2,
                        PLD_IgnoreColor        = 0x1,
                        PLD_Red                = 0x0,
                        PLD_Green              = 0x0,
                        PLD_Blue               = 0x0,
                        PLD_Width              = 0x0,
                        PLD_Height             = 0x0,
                        PLD_UserVisible        = 0x1,
                        PLD_Dock               = 0x0,
                        PLD_Lid                = 0x0,
                        PLD_Panel              = "LEFT",
                        PLD_VerticalPosition   = "LOWER",
                        PLD_HorizontalPosition = "CENTER",
                        PLD_Shape              = "UNKNOWN",
                        PLD_GroupOrientation   = 0x0,
                        PLD_GroupToken         = 0x0,
                        PLD_GroupPosition      = 0x4,
                        PLD_Bay                = 0x0,
                        PLD_Ejectable          = 0x1,
                        PLD_EjectRequired      = 0x0,
                        PLD_CabinetNumber      = 0x0,
                        PLD_CardCageNumber     = 0x0,
                        PLD_Reference          = 0x0,
                        PLD_Rotation           = 0x0,
                        PLD_Order              = 0x0,
                        PLD_VerticalOffset     = 0xFFFF,
                        PLD_HorizontalOffset   = 0xFFFF)

                })
            }

            Device (PRT5)
            {
                Name (_ADR, 0x05)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    0xFF, 
                    Zero, 
                    Zero
                })
                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                {
                    ToPLD (
                        PLD_Revision           = 0x2,
                        PLD_IgnoreColor        = 0x1,
                        PLD_Red                = 0x0,
                        PLD_Green              = 0x0,
                        PLD_Blue               = 0x0,
                        PLD_Width              = 0x0,
                        PLD_Height             = 0x0,
                        PLD_UserVisible        = 0x0,
                        PLD_Dock               = 0x0,
                        PLD_Lid                = 0x0,
                        PLD_Panel              = "LEFT",
                        PLD_VerticalPosition   = "UPPER",
                        PLD_HorizontalPosition = "LEFT",
                        PLD_Shape              = "VERTICALRECTANGLE",
                        PLD_GroupOrientation   = 0x0,
                        PLD_GroupToken         = 0x0,
                        PLD_GroupPosition      = 0x1,
                        PLD_Bay                = 0x0,
                        PLD_Ejectable          = 0x1,
                        PLD_EjectRequired      = 0x0,
                        PLD_CabinetNumber      = 0x0,
                        PLD_CardCageNumber     = 0x0,
                        PLD_Reference          = 0x0,
                        PLD_Rotation           = 0x0,
                        PLD_Order              = 0x0,
                        PLD_VerticalOffset     = 0xFFFF,
                        PLD_HorizontalOffset   = 0xFFFF)

                })
            }

            Device (PRT6)
            {
                Name (_ADR, 0x06)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                {
                    ToPLD (
                        PLD_Revision           = 0x2,
                        PLD_IgnoreColor        = 0x1,
                        PLD_Red                = 0x0,
                        PLD_Green              = 0x0,
                        PLD_Blue               = 0x0,
                        PLD_Width              = 0x0,
                        PLD_Height             = 0x0,
                        PLD_UserVisible        = 0x1,
                        PLD_Dock               = 0x0,
                        PLD_Lid                = 0x0,
                        PLD_Panel              = "LEFT",
                        PLD_VerticalPosition   = "LOWER",
                        PLD_HorizontalPosition = "LEFT",
                        PLD_Shape              = "VERTICALRECTANGLE",
                        PLD_GroupOrientation   = 0x0,
                        PLD_GroupToken         = 0x0,
                        PLD_GroupPosition      = 0x2,
                        PLD_Bay                = 0x0,
                        PLD_Ejectable          = 0x1,
                        PLD_EjectRequired      = 0x0,
                        PLD_CabinetNumber      = 0x0,
                        PLD_CardCageNumber     = 0x0,
                        PLD_Reference          = 0x0,
                        PLD_Rotation           = 0x0,
                        PLD_Order              = 0x0,
                        PLD_VerticalOffset     = 0xFFFF,
                        PLD_HorizontalOffset   = 0xFFFF)

                })
            }

            Device (PRT7)
            {
                Name (_ADR, 0x07)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                {
                    ToPLD (
                        PLD_Revision           = 0x2,
                        PLD_IgnoreColor        = 0x1,
                        PLD_Red                = 0x0,
                        PLD_Green              = 0x0,
                        PLD_Blue               = 0x0,
                        PLD_Width              = 0x0,
                        PLD_Height             = 0x0,
                        PLD_UserVisible        = 0x1,
                        PLD_Dock               = 0x0,
                        PLD_Lid                = 0x0,
                        PLD_Panel              = "LEFT",
                        PLD_VerticalPosition   = "LOWER",
                        PLD_HorizontalPosition = "LEFT",
                        PLD_Shape              = "UNKNOWN",
                        PLD_GroupOrientation   = 0x0,
                        PLD_GroupToken         = 0x0,
                        PLD_GroupPosition      = 0x3,
                        PLD_Bay                = 0x0,
                        PLD_Ejectable          = 0x1,
                        PLD_EjectRequired      = 0x0,
                        PLD_CabinetNumber      = 0x0,
                        PLD_CardCageNumber     = 0x0,
                        PLD_Reference          = 0x0,
                        PLD_Rotation           = 0x0,
                        PLD_Order              = 0x0,
                        PLD_VerticalOffset     = 0xFFFF,
                        PLD_HorizontalOffset   = 0xFFFF)

                })
            }

            Device (PRT8)
            {
                Name (_ADR, 0x08)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                {
                    ToPLD (
                        PLD_Revision           = 0x2,
                        PLD_IgnoreColor        = 0x1,
                        PLD_Red                = 0x0,
                        PLD_Green              = 0x0,
                        PLD_Blue               = 0x0,
                        PLD_Width              = 0x0,
                        PLD_Height             = 0x0,
                        PLD_UserVisible        = 0x1,
                        PLD_Dock               = 0x0,
                        PLD_Lid                = 0x0,
                        PLD_Panel              = "LEFT",
                        PLD_VerticalPosition   = "LOWER",
                        PLD_HorizontalPosition = "CENTER",
                        PLD_Shape              = "UNKNOWN",
                        PLD_GroupOrientation   = 0x0,
                        PLD_GroupToken         = 0x0,
                        PLD_GroupPosition      = 0x4,
                        PLD_Bay                = 0x0,
                        PLD_Ejectable          = 0x1,
                        PLD_EjectRequired      = 0x0,
                        PLD_CabinetNumber      = 0x0,
                        PLD_CardCageNumber     = 0x0,
                        PLD_Reference          = 0x0,
                        PLD_Rotation           = 0x0,
                        PLD_Order              = 0x0,
                        PLD_VerticalOffset     = 0xFFFF,
                        PLD_HorizontalOffset   = 0xFFFF)

                })
            }
        }
    }

    Scope (_SB.PCI0.GP17.XHC1)
    {
        Device (RHUB)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Device (PRT1)
            {
                Name (_ADR, One)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                {
                    ToPLD (
                        PLD_Revision           = 0x2,
                        PLD_IgnoreColor        = 0x1,
                        PLD_Red                = 0x0,
                        PLD_Green              = 0x0,
                        PLD_Blue               = 0x0,
                        PLD_Width              = 0x0,
                        PLD_Height             = 0x0,
                        PLD_UserVisible        = 0x1,
                        PLD_Dock               = 0x0,
                        PLD_Lid                = 0x0,
                        PLD_Panel              = "LEFT",
                        PLD_VerticalPosition   = "UPPER",
                        PLD_HorizontalPosition = "LEFT",
                        PLD_Shape              = "VERTICALRECTANGLE",
                        PLD_GroupOrientation   = 0x0,
                        PLD_GroupToken         = 0x0,
                        PLD_GroupPosition      = 0x1,
                        PLD_Bay                = 0x0,
                        PLD_Ejectable          = 0x1,
                        PLD_EjectRequired      = 0x0,
                        PLD_CabinetNumber      = 0x0,
                        PLD_CardCageNumber     = 0x0,
                        PLD_Reference          = 0x0,
                        PLD_Rotation           = 0x0,
                        PLD_Order              = 0x0,
                        PLD_VerticalOffset     = 0xFFFF,
                        PLD_HorizontalOffset   = 0xFFFF)

                })
            }

            Device (PRT2)
            {
                Name (_ADR, 0x02)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    Zero, 
                    0xFF, 
                    Zero, 
                    Zero
                })
                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                {
                    ToPLD (
                        PLD_Revision           = 0x2,
                        PLD_IgnoreColor        = 0x1,
                        PLD_Red                = 0x0,
                        PLD_Green              = 0x0,
                        PLD_Blue               = 0x0,
                        PLD_Width              = 0x0,
                        PLD_Height             = 0x0,
                        PLD_UserVisible        = 0x0,
                        PLD_Dock               = 0x0,
                        PLD_Lid                = 0x0,
                        PLD_Panel              = "LEFT",
                        PLD_VerticalPosition   = "UPPER",
                        PLD_HorizontalPosition = "LEFT",
                        PLD_Shape              = "VERTICALRECTANGLE",
                        PLD_GroupOrientation   = 0x0,
                        PLD_GroupToken         = 0x0,
                        PLD_GroupPosition      = 0x2,
                        PLD_Bay                = 0x0,
                        PLD_Ejectable          = 0x1,
                        PLD_EjectRequired      = 0x0,
                        PLD_CabinetNumber      = 0x0,
                        PLD_CardCageNumber     = 0x0,
                        PLD_Reference          = 0x0,
                        PLD_Rotation           = 0x0,
                        PLD_Order              = 0x0,
                        PLD_VerticalOffset     = 0xFFFF,
                        PLD_HorizontalOffset   = 0xFFFF)

                })
            }

            Device (PRT3)
            {
                Name (_ADR, 0x03)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                {
                    ToPLD (
                        PLD_Revision           = 0x2,
                        PLD_IgnoreColor        = 0x1,
                        PLD_Red                = 0x0,
                        PLD_Green              = 0x0,
                        PLD_Blue               = 0x0,
                        PLD_Width              = 0x0,
                        PLD_Height             = 0x0,
                        PLD_UserVisible        = 0x1,
                        PLD_Dock               = 0x0,
                        PLD_Lid                = 0x0,
                        PLD_Panel              = "LEFT",
                        PLD_VerticalPosition   = "UPPER",
                        PLD_HorizontalPosition = "LEFT",
                        PLD_Shape              = "VERTICALRECTANGLE",
                        PLD_GroupOrientation   = 0x0,
                        PLD_GroupToken         = 0x0,
                        PLD_GroupPosition      = 0x1,
                        PLD_Bay                = 0x0,
                        PLD_Ejectable          = 0x1,
                        PLD_EjectRequired      = 0x0,
                        PLD_CabinetNumber      = 0x0,
                        PLD_CardCageNumber     = 0x0,
                        PLD_Reference          = 0x0,
                        PLD_Rotation           = 0x0,
                        PLD_Order              = 0x0,
                        PLD_VerticalOffset     = 0xFFFF,
                        PLD_HorizontalOffset   = 0xFFFF)

                })
            }
        }
    }
}



FACP
----
[000h 0000   4]                    Signature : "FACP"    [Fixed ACPI Description Table (FADT)]
[004h 0004   4]                 Table Length : 00000114
[008h 0008   1]                     Revision : 06
[009h 0009   1]                     Checksum : AC
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   4]                 FACS Address : DBE58E00
[028h 0040   4]                 DSDT Address : DBDEC200
[02Ch 0044   1]                        Model : 00
[02Dh 0045   1]                   PM Profile : 01 [Desktop]
[02Eh 0046   2]                SCI Interrupt : 0009
[030h 0048   4]             SMI Command Port : 000000B2
[034h 0052   1]            ACPI Enable Value : A0
[035h 0053   1]           ACPI Disable Value : A1
[036h 0054   1]               S4BIOS Command : 00
[037h 0055   1]              P-State Control : 00
[038h 0056   4]     PM1A Event Block Address : 00000800
[03Ch 0060   4]     PM1B Event Block Address : 00000000
[040h 0064   4]   PM1A Control Block Address : 00000804
[044h 0068   4]   PM1B Control Block Address : 00000000
[048h 0072   4]    PM2 Control Block Address : 00000000
[04Ch 0076   4]       PM Timer Block Address : 00000808
[050h 0080   4]           GPE0 Block Address : 00000820
[054h 0084   4]           GPE1 Block Address : 00000000
[058h 0088   1]       PM1 Event Block Length : 04
[059h 0089   1]     PM1 Control Block Length : 02
[05Ah 0090   1]     PM2 Control Block Length : 00
[05Bh 0091   1]        PM Timer Block Length : 04
[05Ch 0092   1]            GPE0 Block Length : 08
[05Dh 0093   1]            GPE1 Block Length : 00
[05Eh 0094   1]             GPE1 Base Offset : 00
[05Fh 0095   1]                 _CST Support : 00
[060h 0096   2]                   C2 Latency : 0065
[062h 0098   2]                   C3 Latency : 03E9
[064h 0100   2]               CPU Cache Size : 0400
[066h 0102   2]           Cache Flush Stride : 0010
[068h 0104   1]            Duty Cycle Offset : 01
[069h 0105   1]             Duty Cycle Width : 03
[06Ah 0106   1]          RTC Day Alarm Index : 0D
[06Bh 0107   1]        RTC Month Alarm Index : 00
[06Ch 0108   1]            RTC Century Index : 32
[06Dh 0109   2]   Boot Flags (decoded below) : 0001
               Legacy Devices Supported (V2) : 1
            8042 Present on ports 60/64 (V2) : 0
                        VGA Not Present (V4) : 0
                      MSI Not Supported (V4) : 0
                PCIe ASPM Not Supported (V4) : 0
                   CMOS RTC Not Present (V5) : 0
[06Fh 0111   1]                     Reserved : 00
[070h 0112   4]        Flags (decoded below) : 0003C5A5
      WBINVD instruction is operational (V1) : 1
              WBINVD flushes all caches (V1) : 0
                    All CPUs support C1 (V1) : 1
                  C2 works on MP system (V1) : 0
            Control Method Power Button (V1) : 0
            Control Method Sleep Button (V1) : 1
        RTC wake not in fixed reg space (V1) : 0
            RTC can wake system from S4 (V1) : 1
                        32-bit PM Timer (V1) : 1
                      Docking Supported (V1) : 0
               Reset Register Supported (V2) : 1
                            Sealed Case (V3) : 0
                    Headless - No Video (V3) : 0
        Use native instr after SLP_TYPx (V3) : 0
              PCIEXP_WAK Bits Supported (V4) : 1
                     Use Platform Timer (V4) : 1
               RTC_STS valid on S4 wake (V4) : 1
                Remote Power-on capable (V4) : 1
                 Use APIC Cluster Model (V4) : 0
     Use APIC Physical Destination Mode (V4) : 0
                       Hardware Reduced (V5) : 0
                      Low Power S0 Idle (V5) : 0

[074h 0116  12]               Reset Register : [Generic Address Structure]
[074h 0116   1]                     Space ID : 01 [SystemIO]
[075h 0117   1]                    Bit Width : 08
[076h 0118   1]                   Bit Offset : 00
[077h 0119   1]         Encoded Access Width : 00 [Undefined/Legacy]
[078h 0120   8]                      Address : 00000000000000B2

[080h 0128   1]         Value to cause reset : BE
[081h 0129   2]    ARM Flags (decoded below) : 0000
                              PSCI Compliant : 0
                       Must use HVC for PSCI : 0

[083h 0131   1]          FADT Minor Revision : 00
[084h 0132   8]                 FACS Address : 0000000000000000
[08Ch 0140   8]                 DSDT Address : 00000000DBDEC200
[094h 0148  12]             PM1A Event Block : [Generic Address Structure]
[094h 0148   1]                     Space ID : 01 [SystemIO]
[095h 0149   1]                    Bit Width : 20
[096h 0150   1]                   Bit Offset : 00
[097h 0151   1]         Encoded Access Width : 02 [Word Access:16]
[098h 0152   8]                      Address : 0000000000000800

[0A0h 0160  12]             PM1B Event Block : [Generic Address Structure]
[0A0h 0160   1]                     Space ID : 01 [SystemIO]
[0A1h 0161   1]                    Bit Width : 00
[0A2h 0162   1]                   Bit Offset : 00
[0A3h 0163   1]         Encoded Access Width : 02 [Word Access:16]
[0A4h 0164   8]                      Address : 0000000000000000

[0ACh 0172  12]           PM1A Control Block : [Generic Address Structure]
[0ACh 0172   1]                     Space ID : 01 [SystemIO]
[0ADh 0173   1]                    Bit Width : 10
[0AEh 0174   1]                   Bit Offset : 00
[0AFh 0175   1]         Encoded Access Width : 02 [Word Access:16]
[0B0h 0176   8]                      Address : 0000000000000804

[0B8h 0184  12]           PM1B Control Block : [Generic Address Structure]
[0B8h 0184   1]                     Space ID : 01 [SystemIO]
[0B9h 0185   1]                    Bit Width : 00
[0BAh 0186   1]                   Bit Offset : 00
[0BBh 0187   1]         Encoded Access Width : 02 [Word Access:16]
[0BCh 0188   8]                      Address : 0000000000000000

[0C4h 0196  12]            PM2 Control Block : [Generic Address Structure]
[0C4h 0196   1]                     Space ID : 00 [SystemMemory]
[0C5h 0197   1]                    Bit Width : 00
[0C6h 0198   1]                   Bit Offset : 00
[0C7h 0199   1]         Encoded Access Width : 01 [Byte Access:8]
[0C8h 0200   8]                      Address : 0000000000000000

[0D0h 0208  12]               PM Timer Block : [Generic Address Structure]
[0D0h 0208   1]                     Space ID : 01 [SystemIO]
[0D1h 0209   1]                    Bit Width : 20
[0D2h 0210   1]                   Bit Offset : 00
[0D3h 0211   1]         Encoded Access Width : 03 [DWord Access:32]
[0D4h 0212   8]                      Address : 0000000000000808

[0DCh 0220  12]                   GPE0 Block : [Generic Address Structure]
[0DCh 0220   1]                     Space ID : 01 [SystemIO]
[0DDh 0221   1]                    Bit Width : 40
[0DEh 0222   1]                   Bit Offset : 00
[0DFh 0223   1]         Encoded Access Width : 01 [Byte Access:8]
[0E0h 0224   8]                      Address : 0000000000000820

[0E8h 0232  12]                   GPE1 Block : [Generic Address Structure]
[0E8h 0232   1]                     Space ID : 01 [SystemIO]
[0E9h 0233   1]                    Bit Width : 00
[0EAh 0234   1]                   Bit Offset : 00
[0EBh 0235   1]         Encoded Access Width : 01 [Byte Access:8]
[0ECh 0236   8]                      Address : 0000000000000000


[0F4h 0244  12]       Sleep Control Register : [Generic Address Structure]
[0F4h 0244   1]                     Space ID : 00 [SystemMemory]
[0F5h 0245   1]                    Bit Width : 00
[0F6h 0246   1]                   Bit Offset : 00
[0F7h 0247   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0F8h 0248   8]                      Address : 0000000000000000

[100h 0256  12]        Sleep Status Register : [Generic Address Structure]
[100h 0256   1]                     Space ID : 00 [SystemMemory]
[101h 0257   1]                    Bit Width : 00
[102h 0258   1]                   Bit Offset : 00
[103h 0259   1]         Encoded Access Width : 00 [Undefined/Legacy]
[104h 0260   8]                      Address : 0000000000000000

[10Ch 0268   8]                Hypervisor ID : 0000000000000000

Raw Table Data: Length 276 (0x114)

    0000: 46 41 43 50 14 01 00 00 06 AC 41 4C 41 53 4B 41  // FACP......ALASKA
    0010: 41 20 4D 20 49 00 00 00 09 20 07 01 41 4D 49 20  // A M I.... ..AMI 
    0020: 13 00 01 00 00 8E E5 DB 00 C2 DE DB 00 01 09 00  // ................
    0030: B2 00 00 00 A0 A1 00 00 00 08 00 00 00 00 00 00  // ................
    0040: 04 08 00 00 00 00 00 00 00 00 00 00 08 08 00 00  // ................
    0050: 20 08 00 00 00 00 00 00 04 02 00 04 08 00 00 00  //  ...............
    0060: 65 00 E9 03 00 04 10 00 01 03 0D 00 32 01 00 00  // e...........2...
    0070: A5 C5 03 00 01 08 00 00 B2 00 00 00 00 00 00 00  // ................
    0080: BE 00 00 00 00 00 00 00 00 00 00 00 00 C2 DE DB  // ................
    0090: 00 00 00 00 01 20 00 02 00 08 00 00 00 00 00 00  // ..... ..........
    00A0: 01 00 00 02 00 00 00 00 00 00 00 00 01 10 00 02  // ................
    00B0: 04 08 00 00 00 00 00 00 01 00 00 02 00 00 00 00  // ................
    00C0: 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00  // ................
    00D0: 01 20 00 03 08 08 00 00 00 00 00 00 01 40 00 01  // . ...........@..
    00E0: 20 08 00 00 00 00 00 00 01 00 00 01 00 00 00 00  //  ...............
    00F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0110: 00 00 00 00                                      // ....


FACS
----
[000h 0000   4]                    Signature : "FACS"
[004h 0004   4]                       Length : 00000040
[008h 0008   4]           Hardware Signature : 5904DCDB
[00Ch 0012   4]    32 Firmware Waking Vector : 00000000
[010h 0016   4]                  Global Lock : 00000000
[014h 0020   4]        Flags (decoded below) : 00000000
                      S4BIOS Support Present : 0
                  64-bit Wake Supported (V2) : 0
[018h 0024   8]    64 Firmware Waking Vector : 0000000000000000
[020h 0032   1]                      Version : 02
[021h 0033   3]                     Reserved : 000000
[024h 0036   4]    OspmFlags (decoded below) : 00000000
               64-bit Wake Env Required (V2) : 0

Raw Table Data: Length 64 (0x40)

    0000: 46 41 43 53 40 00 00 00 DB DC 04 59 00 00 00 00  // FACS@......Y....
    0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0020: 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


FIDT
----
[000h 0000   4]                    Signature : "FIDT"    
[004h 0004   4]                 Table Length : 0000009C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : CC
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013


**** Unknown ACPI table signature [FIDT]


Raw Table Data: Length 156 (0x9C)

    0000: 46 49 44 54 9C 00 00 00 01 CC 41 4C 41 53 4B 41  // FIDT......ALASKA
    0010: 41 20 4D 20 49 00 00 00 09 20 07 01 41 4D 49 20  // A M I.... ..AMI 
    0020: 13 00 01 00 24 46 49 44 04 78 00 38 41 31 36 42  // ....$FID.x.8A16B
    0030: 47 30 35 00 5C 29 17 40 24 DB 36 82 AE 12 84 BE  // G05.\).@$.6.....
    0040: 97 26 6E D5 30 35 00 31 34 00 47 31 00 34 30 00  // .&n.05.14.G1.40.
    0050: E3 07 04 0F 0E 09 1E FF FF 41 4C 41 53 4B 41 41  // .........ALASKAA
    0060: 20 4D 20 49 00 00 00 31 00 00 00 FF FF FF FF FF  //  M I...1........
    0070: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0080: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0090: FF FF FF FF FF FF FF FF FF FF FF FF              // ............


FPDT
----
[000h 0000   4]                    Signature : "FPDT"    [Firmware Performance Data Table]
[004h 0004   4]                 Table Length : 00000044
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 02
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013


[024h 0036   2]                Subtable Type : 0001
[026h 0038   1]                       Length : 10
[027h 0039   1]                     Revision : 01
[028h 0040   4]                     Reserved : 00000000
[02Ch 0044   8]          S3PT Record Address : 00000000DCBADE30

[034h 0052   2]                Subtable Type : 0000
[036h 0054   1]                       Length : 10
[037h 0055   1]                     Revision : 01
[038h 0056   4]                     Reserved : 00000000
[03Ch 0060   8]     FPDT Boot Record Address : 00000000DCBADE50

Raw Table Data: Length 68 (0x44)

    0000: 46 50 44 54 44 00 00 00 01 02 41 4C 41 53 4B 41  // FPDTD.....ALASKA
    0010: 41 20 4D 20 49 00 00 00 09 20 07 01 41 4D 49 20  // A M I.... ..AMI 
    0020: 13 00 01 00 01 00 10 01 00 00 00 00 30 DE BA DC  // ............0...
    0030: 00 00 00 00 00 00 10 01 00 00 00 00 50 DE BA DC  // ............P...
    0040: 00 00 00 00                                      // ....


HPET
----
[000h 0000   4]                    Signature : "HPET"    [High Precision Event Timer table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : BD
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00000005

[024h 0036   4]            Hardware Block ID : 10228201

[028h 0040  12]         Timer Block Register : [Generic Address Structure]
[028h 0040   1]                     Space ID : 00 [SystemMemory]
[029h 0041   1]                    Bit Width : 40
[02Ah 0042   1]                   Bit Offset : 00
[02Bh 0043   1]         Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044   8]                      Address : 00000000FED00000

[034h 0052   1]              Sequence Number : 00
[035h 0053   2]          Minimum Clock Ticks : 37EE
[037h 0055   1]        Flags (decoded below) : 00
                             4K Page Protect : 0
                            64K Page Protect : 0

Raw Table Data: Length 56 (0x38)

    0000: 48 50 45 54 38 00 00 00 01 BD 41 4C 41 53 4B 41  // HPET8.....ALASKA
    0010: 41 20 4D 20 49 00 00 00 09 20 07 01 41 4D 49 20  // A M I.... ..AMI 
    0020: 05 00 00 00 01 82 22 10 00 40 00 00 00 00 D0 FE  // ......"..@......
    0030: 00 00 00 00 00 EE 37 00                          // ......7.


IVRS
----
[000h 0000   4]                    Signature : "IVRS"    [I/O Virtualization Reporting Structure]
[004h 0004   4]                 Table Length : 000000D0
[008h 0008   1]                     Revision : 02
[009h 0009   1]                     Checksum : 00
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "AMD "
[020h 0032   4]        Asl Compiler Revision : 00000000

[024h 0036   4]          Virtualization Info : 00203041
[028h 0040   8]                     Reserved : 0000000000000000

[030h 0048   1]                Subtable Type : 10 [Hardware Definition Block]
[031h 0049   1]                        Flags : B0
[032h 0050   2]                       Length : 0048
[034h 0052   2]                     DeviceId : 0002

[036h 0054   2]            Capability Offset : 0040
[038h 0056   8]                 Base Address : 00000000FEB80000
[040h 0064   2]            PCI Segment Group : 0000
[042h 0066   2]          Virtualization Info : 0000
[044h 0068   4]                     Reserved : 80048F6E

[048h 0072   1]                   Entry Type : 03
[049h 0073   2]                    Device ID : 0008
[04Bh 0075   1]                 Data Setting : 00

[04Ch 0076   1]                   Entry Type : 04
[04Dh 0077   2]                    Device ID : FFFE
[04Fh 0079   1]                 Data Setting : 00

[050h 0080   1]                   Entry Type : 43
[051h 0081   2]                    Device ID : FF00
[053h 0083   1]                 Data Setting : 00
[054h 0084   1]                     Reserved : 00
[055h 0085   2]        Source Used Device ID : 00A4
[057h 0087   1]                     Reserved : 00

[058h 0088   1]                   Entry Type : 04
[059h 0089   2]                    Device ID : FFFF
[05Bh 0091   1]                 Data Setting : 00

[05Ch 0092   1]                   Entry Type : 00
[05Dh 0093   2]                    Device ID : 0000
[05Fh 0095   1]                 Data Setting : 00

[060h 0096   1]                   Entry Type : 48
[061h 0097   2]                    Device ID : 0000
[063h 0099   1]                 Data Setting : 00
[064h 0100   1]                       Handle : 00
[065h 0101   2]        Source Used Device ID : 00A0
[067h 0103   1]                      Variety : 02

[068h 0104   1]                   Entry Type : 48
[069h 0105   2]                    Device ID : 0000
[06Bh 0107   1]                 Data Setting : D7
[06Ch 0108   1]                       Handle : 05
[06Dh 0109   2]        Source Used Device ID : 00A0
[06Fh 0111   1]                      Variety : 01

[070h 0112   1]                   Entry Type : 48
[071h 0113   2]                    Device ID : 0000
[073h 0115   1]                 Data Setting : 00
[074h 0116   1]                       Handle : 06
[075h 0117   2]        Source Used Device ID : 0001
[077h 0119   1]                      Variety : 01

[078h 0120   1]                Subtable Type : 11 [Unknown Subtable Type]
[079h 0121   1]                        Flags : B0
[07Ah 0122   2]                       Length : 0058
[07Ch 0124   2]                     DeviceId : 0002

**** Unknown IVRS subtable type 0x11

Raw Table Data: Length 208 (0xD0)

    0000: 49 56 52 53 D0 00 00 00 02 00 41 4C 41 53 4B 41  // IVRS......ALASKA
    0010: 41 20 4D 20 49 00 00 00 01 00 00 00 41 4D 44 20  // A M I.......AMD 
    0020: 00 00 00 00 41 30 20 00 00 00 00 00 00 00 00 00  // ....A0 .........
    0030: 10 B0 48 00 02 00 40 00 00 00 B8 FE 00 00 00 00  // ..H...@.........
    0040: 00 00 00 00 6E 8F 04 80 03 08 00 00 04 FE FF 00  // ....n...........
    0050: 43 00 FF 00 00 A4 00 00 04 FF FF 00 00 00 00 00  // C...............
    0060: 48 00 00 00 00 A0 00 02 48 00 00 D7 05 A0 00 01  // H.......H.......
    0070: 48 00 00 00 06 01 00 01 11 B0 58 00 02 00 40 00  // H.........X...@.
    0080: 00 00 B8 FE 00 00 00 00 00 00 00 00 00 02 04 00  // ................
    0090: DA 4A 29 22 EF 77 4F 00 00 00 00 00 00 00 00 00  // .J)".wO.........
    00A0: 03 08 00 00 04 FE FF 00 43 00 FF 00 00 A4 00 00  // ........C.......
    00B0: 04 FF FF 00 00 00 00 00 48 00 00 00 00 A0 00 02  // ........H.......
    00C0: 48 00 00 D7 05 A0 00 01 48 00 00 00 06 01 00 01  // H.......H.......


MCFG
----
[000h 0000   4]                    Signature : "MCFG"    [Memory Mapped Configuration table]
[004h 0004   4]                 Table Length : 0000003C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 2C
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   8]                     Reserved : 0000000000000000

[02Ch 0044   8]                 Base Address : 00000000F8000000
[034h 0052   2]         Segment Group Number : 0000
[036h 0054   1]             Start Bus Number : 00
[037h 0055   1]               End Bus Number : 3F
[038h 0056   4]                     Reserved : 00000000

Raw Table Data: Length 60 (0x3C)

    0000: 4D 43 46 47 3C 00 00 00 01 2C 41 4C 41 53 4B 41  // MCFG<....,ALASKA
    0010: 41 20 4D 20 49 00 00 00 09 20 07 01 4D 53 46 54  // A M I.... ..MSFT
    0020: 13 00 01 00 00 00 00 00 00 00 00 00 00 00 00 F8  // ................
    0030: 00 00 00 00 00 00 00 3F 00 00 00 00              // .......?....


SSDT1
-----
DefinitionBlock ("", "SSDT", 1, "ALASKA", "A M I", 0x00000001)
{
    External (GSA1.M009, MethodObj)    // 1 Arguments
    External (GSA1.M010, MethodObj)    // 2 Arguments
    External (GSA1.M011, MethodObj)    // 4 Arguments
    External (GSA1.M012, MethodObj)    // 5 Arguments
    External (M037, DeviceObj)
    External (M046, DeviceObj)
    External (M047, DeviceObj)
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)

    Scope (\)
    {
        Device (GSA1)
        {
            Method (GIO2, 0, Serialized)
            {
            }

            Method (GIO0, 1, Serialized)
            {
                Return (M009 (Arg0))
            }

            Method (GIO1, 2, Serialized)
            {
                M010 (Arg0, Arg1)
            }

            Method (PIOD, 1, Serialized)
            {
                Local0 = (Arg0 + Zero)
                OperationRegion (VARM, SystemIO, 0x80, 0x04)
                Field (VARM, DWordAcc, NoLock, Preserve)
                {
                    VARR,   32
                }

                VARR = Local0
            }

            Method (PIO0, 3, Serialized)
            {
                Local0 = (Arg0 + Zero)
                OperationRegion (VARM, SystemIO, Local0, 0x04)
                Field (VARM, DWordAcc, NoLock, Preserve)
                {
                    VARR,   32
                }

                Local1 = VARR /* \GSA1.PIO0.VARR */
                Local5 = 0x7FFFFFFF
                Local5 |= 0x80000000
                Local2 = ((Local1 >> Arg1) & (Local5 >> (0x20 - Arg2)
                    ))
                Return (Local2)
            }

            Method (PIO1, 4, Serialized)
            {
                Local0 = (Arg0 + Zero)
                OperationRegion (VARM, SystemIO, Local0, 0x04)
                Field (VARM, DWordAcc, NoLock, Preserve)
                {
                    VARR,   32
                }

                Local1 = VARR /* \GSA1.PIO1.VARR */
                Local5 = 0x7FFFFFFF
                Local5 |= 0x80000000
                Local2 = (Arg1 + Arg2)
                Local2 = (0x20 - Local2)
                Local2 = (((Local5 << Local2) & Local5) >> Local2)
                Local2 = ((Local2 >> Arg1) << Arg1)
                Local3 = (Arg3 << Arg1)
                Local4 = ((Local1 & (Local5 ^ Local2)) | Local3)
                VARR = Local4
            }

            Method (PIO6, 2, Serialized)
            {
                Local0 = Arg0
                OperationRegion (VARM, SystemIO, Local0, 0x04)
                Field (VARM, ByteAcc, NoLock, Preserve)
                {
                    VARP,   8
                }

                Field (VARM, WordAcc, NoLock, Preserve)
                {
                    VARQ,   16
                }

                Field (VARM, DWordAcc, NoLock, Preserve)
                {
                    VARR,   32
                }

                Switch (Arg1)
                {
                    Case (Zero)
                    {
                        Return (VARP) /* \GSA1.PIO6.VARP */
                    }
                    Case (One)
                    {
                        Return (VARQ) /* \GSA1.PIO6.VARQ */
                    }
                    Case (0x02)
                    {
                        Return (VARR) /* \GSA1.PIO6.VARR */
                    }

                }

                Return (Zero)
            }

            Method (PIO7, 3, Serialized)
            {
                Local0 = Arg0
                OperationRegion (VARM, SystemIO, Local0, 0x04)
                Field (VARM, ByteAcc, NoLock, Preserve)
                {
                    VARP,   8
                }

                Field (VARM, WordAcc, NoLock, Preserve)
                {
                    VARQ,   16
                }

                Field (VARM, DWordAcc, NoLock, Preserve)
                {
                    VARR,   32
                }

                Switch (Arg1)
                {
                    Case (Zero)
                    {
                        VARP = Arg2
                    }
                    Case (One)
                    {
                        VARQ = Arg2
                    }
                    Case (0x02)
                    {
                        VARR = Arg2
                    }

                }
            }

            Method (PFM8, 4, Serialized)
            {
                Local1 = Arg0
                Local5 = 0x7FFFFFFF
                Local5 |= 0x80000000
                Local2 = (Arg1 + Arg2)
                Local2 = (0x20 - Local2)
                Local2 = (((Local5 << Local2) & Local5) >> Local2)
                Local2 = ((Local2 >> Arg1) << Arg1)
                Local3 = (Arg3 << Arg1)
                Local4 = ((Local1 & (Local5 ^ Local2)) | Local3)
                Return (Local4)
            }

            Method (PFM9, 3, Serialized)
            {
                Local1 = Arg0
                Local5 = 0x7FFFFFFF
                Local5 |= 0x80000000
                Local2 = ((Local1 >> Arg1) & (Local5 >> (0x20 - Arg2)
                    ))
                Return (Local2)
            }

            Name (GGGD, "AM4:X470/X570")
            Method (PFM0, 0, Serialized)
            {
            }

            Method (PFM1, 1, Serialized)
            {
                PFM0 ()
            }

            Method (PFM2, 1, Serialized)
            {
            }

            Name (PFMH, Package (0x04)
            {
                Buffer (0x03)
                {
                     0x02, 0xA0, 0x00                                 // ...
                }, 

                Buffer (0x03)
                {
                     0x02, 0xA2, 0x00                                 // ...
                }, 

                Buffer (0x03)
                {
                     0x02, 0xA4, 0x00                                 // ...
                }, 

                Buffer (0x03)
                {
                     0x02, 0xA6, 0x00                                 // ...
                }
            })
            Method (PFM7, 0, Serialized)
            {
                Return (RefOf (PFMH))
            }

            Mutex (MEMB, 0x00)
            Method (MEM8, 0, Serialized)
            {
            }

            Method (MEM9, 1, Serialized)
            {
                MEM8 ()
            }

            Method (MEMA, 1, Serialized)
            {
            }

            Method (MEM0, 3, Serialized)
            {
                Local0 = Arg0
                OperationRegion (VARM, SystemMemory, Local0, 0x04)
                Field (VARM, DWordAcc, NoLock, Preserve)
                {
                    VARR,   32
                }

                Local1 = VARR /* \GSA1.MEM0.VARR */
                Local5 = 0x7FFFFFFF
                Local5 |= 0x80000000
                Local2 = ((Local1 >> Arg1) & (Local5 >> (0x20 - Arg2)
                    ))
                Return (Local2)
            }

            Method (MEM1, 4, Serialized)
            {
                Local0 = Arg0
                OperationRegion (VARM, SystemMemory, Local0, 0x04)
                Field (VARM, DWordAcc, NoLock, Preserve)
                {
                    VARR,   32
                }

                Local1 = VARR /* \GSA1.MEM1.VARR */
                Local5 = 0x7FFFFFFF
                Local5 |= 0x80000000
                Local2 = (Arg1 + Arg2)
                Local2 = (0x20 - Local2)
                Local2 = (((Local5 << Local2) & Local5) >> Local2)
                Local2 = ((Local2 >> Arg1) << Arg1)
                Local3 = (Arg3 << Arg1)
                Local4 = ((Local1 & (Local5 ^ Local2)) | Local3)
                VARR = Local4
            }

            Method (MEM4, 2, Serialized)
            {
                Local0 = Arg0
                OperationRegion (VARM, SystemMemory, Local0, 0x04)
                Field (VARM, DWordAcc, NoLock, Preserve)
                {
                    VARR,   32
                }

                Field (VARM, WordAcc, NoLock, Preserve)
                {
                    VARQ,   16
                }

                Field (VARM, ByteAcc, NoLock, Preserve)
                {
                    VARP,   8
                }

                Switch (Arg1)
                {
                    Case (Zero)
                    {
                        Return (VARP) /* \GSA1.MEM4.VARP */
                    }
                    Case (One)
                    {
                        Return (VARQ) /* \GSA1.MEM4.VARQ */
                    }
                    Case (0x02)
                    {
                        Return (VARR) /* \GSA1.MEM4.VARR */
                    }

                }

                Return (Zero)
            }

            Method (MEM5, 3, Serialized)
            {
                Local0 = Arg0
                OperationRegion (VARM, SystemMemory, Local0, 0x04)
                Field (VARM, DWordAcc, NoLock, Preserve)
                {
                    VARR,   32
                }

                Field (VARM, WordAcc, NoLock, Preserve)
                {
                    VARQ,   16
                }

                Field (VARM, ByteAcc, NoLock, Preserve)
                {
                    VARP,   8
                }

                Switch (Arg1)
                {
                    Case (Zero)
                    {
                        VARP = Arg2
                    }
                    Case (One)
                    {
                        VARQ = Arg2
                    }
                    Case (0x02)
                    {
                        VARR = Arg2
                    }

                }
            }

            Method (PCI0, 0, Serialized)
            {
            }

            Method (PCI1, 1, Serialized)
            {
                PCI0 ()
            }

            Method (PCI2, 1, Serialized)
            {
            }

            Method (PCI4, 0, Serialized)
            {
                Return (PCIB) /* \GSA1.PCIB */
            }

            Name (PCIB, 0xF8000000)
            Method (PCI9, 5, Serialized)
            {
                Local0 = PCIB /* \GSA1.PCIB */
                Local0 += (Arg0 << 0x14)
                Local0 += (Arg1 << 0x0F)
                Local0 += (Arg2 << 0x0C)
                Local0 += Arg3
                Return (MEM4 (Local0, Arg4))
            }

            Method (PCIA, 6, Serialized)
            {
                Local0 = PCIB /* \GSA1.PCIB */
                Local0 += (Arg0 << 0x14)
                Local0 += (Arg1 << 0x0F)
                Local0 += (Arg2 << 0x0C)
                Local0 += Arg3
                MEM5 (Local0, Arg4, Arg5)
            }

            Method (PCIE, 4, Serialized)
            {
                Return (PCI9 (Arg0, Arg1, Arg2, Arg3, Zero))
            }

            Method (PCIF, 5, Serialized)
            {
                PCIA (Arg0, Arg1, Arg2, Arg3, Zero, Arg4)
            }

            Method (PCIG, 4, Serialized)
            {
                Return (PCI9 (Arg0, Arg1, Arg2, Arg3, One))
            }

            Method (PCIH, 5, Serialized)
            {
                PCIA (Arg0, Arg1, Arg2, Arg3, One, Arg4)
            }

            Method (PCI7, 4, Serialized)
            {
                Return (PCI9 (Arg0, Arg1, Arg2, Arg3, 0x02))
            }

            Method (PCI8, 5, Serialized)
            {
                PCIA (Arg0, Arg1, Arg2, Arg3, 0x02, Arg4)
            }

            Method (PCI5, 6, Serialized)
            {
                Local0 = PCIB /* \GSA1.PCIB */
                Local0 += (Arg0 << 0x14)
                Local0 += (Arg1 << 0x0F)
                Local0 += (Arg2 << 0x0C)
                Return (MEM0 ((Local0 + Arg3), Arg4, Arg5))
            }

            Method (PCI6, 7, Serialized)
            {
                Local0 = PCIB /* \GSA1.PCIB */
                Local0 += (Arg0 << 0x14)
                Local0 += (Arg1 << 0x0F)
                Local0 += (Arg2 << 0x0C)
                If ((MEM0 (Local0, Zero, 0x20) != Ones))
                {
                    MEM1 ((Local0 + Arg3), Arg4, Arg5, Arg6)
                }
            }

            Method (SMBB, 0, Serialized)
            {
                Return (0x0B00)
            }

            Method (SMB8, 0, Serialized)
            {
            }

            Mutex (SMMB, 0x00)
            OperationRegion (SMBI, SystemIO, 0x0B00, 0x10)
            Field (SMBI, ByteAcc, NoLock, Preserve)
            {
                HSTS,   8, 
                Offset (0x02), 
                HCNT,   8, 
                HCMD,   8, 
                TXSA,   8, 
                DAT0,   8, 
                DAT1,   8, 
                HBDR,   8
            }

            Method (SMBG, 1, Serialized)
            {
                SMB8 ()
            }

            Method (SMBH, 1, Serialized)
            {
            }

            Method (KILL, 0, Serialized)
            {
                HCNT |= 0x02
                HSTS |= 0xFF
            }

            Method (CMPL, 0, Serialized)
            {
                Local0 = 0x0FA0
                While (Local0)
                {
                    If ((HSTS & 0x02))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Stall (0x32)
                        Local0--
                        If ((Local0 == Zero))
                        {
                            KILL ()
                        }
                    }
                }

                Return (Zero)
            }

            Method (SRDY, 0, Serialized)
            {
                Local0 = 0xC8
                While (Local0)
                {
                    If ((HSTS & 0x40))
                    {
                        Sleep (One)
                        Local0--
                        If ((Local0 == Zero))
                        {
                            HSTS = 0xBF
                        }
                    }
                    Else
                    {
                        Local0 = Zero
                    }
                }

                Local0 = 0x0FA0
                While (Local0)
                {
                    If ((HSTS & One))
                    {
                        Stall (0x32)
                        Local0--
                        If ((Local0 == Zero))
                        {
                            KILL ()
                        }
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Return (One)
            }

            Method (SMB0, 2, Serialized)
            {
                If (SRDY ())
                {
                    Return (Zero)
                }

                HSTS = 0xBF
                TXSA = Arg0
                HCMD = Arg1
                HCNT = 0x44
                If (CMPL ())
                {
                    HSTS |= 0xFF
                    Return (One)
                }

                Return (Zero)
            }

            Method (SMB1, 1, Serialized)
            {
                If (SRDY ())
                {
                    Return (0xFFFF)
                }

                HSTS = 0xBF
                TXSA = (Arg0 | One)
                HCNT = 0x44
                If (CMPL ())
                {
                    HSTS |= 0xFF
                    Return (DAT0) /* \GSA1.DAT0 */
                }

                Return (0xFFFF)
            }

            Method (SMB2, 3, Serialized)
            {
                If (SRDY ())
                {
                    Return (Zero)
                }

                HSTS = 0xBF
                TXSA = Arg0
                HCMD = Arg1
                DAT0 = Arg2
                HCNT = 0x48
                If (CMPL ())
                {
                    If ((HSTS & 0x0C))
                    {
                        HSTS |= 0xFF
                        Return (Zero)
                    }
                    Else
                    {
                        HSTS |= 0xFF
                        Return (One)
                    }
                }

                Return (Zero)
            }

            Method (SMB3, 2, Serialized)
            {
                If (SRDY ())
                {
                    Return (0xFFFF)
                }

                HSTS = 0xBF
                TXSA = (Arg0 | One)
                HCMD = Arg1
                HCNT = 0x48
                If (CMPL ())
                {
                    If ((HSTS & 0x0C))
                    {
                        HSTS |= 0xFF
                        Return (0xFFFF)
                    }
                    Else
                    {
                        HSTS |= 0xFF
                        Return (DAT0) /* \GSA1.DAT0 */
                    }
                }

                Return (0xFFFF)
            }

            Method (SMB4, 3, Serialized)
            {
                If (SRDY ())
                {
                    Return (Zero)
                }

                HSTS = 0xBF
                TXSA = Arg0
                HCMD = Arg1
                DAT0 = (Arg2 & 0xFF)
                DAT1 = ((Arg2 >> 0x08) & 0xFF)
                HCNT = 0x4C
                If (CMPL ())
                {
                    If ((HSTS & 0x0C))
                    {
                        HSTS |= 0xFF
                        Return (Zero)
                    }
                    Else
                    {
                        HSTS |= 0xFF
                        Return (One)
                    }
                }

                Return (Zero)
            }

            Method (SMB5, 2, Serialized)
            {
                If (SRDY ())
                {
                    Return (Ones)
                }

                HSTS = 0xBF
                TXSA = (Arg0 | One)
                HCMD = Arg1
                HCNT = 0x4C
                If (CMPL ())
                {
                    If ((HSTS & 0x0C))
                    {
                        HSTS |= 0xFF
                        Return (Ones)
                    }
                    Else
                    {
                        HSTS |= 0xFF
                        Return (((DAT1 << 0x08) | DAT0))
                    }
                }

                Return (Ones)
            }

            Method (SMB9, 4, Serialized)
            {
                If (SRDY ())
                {
                    Return (Zero)
                }

                HSTS = 0xBF
                TXSA = Arg0
                HCMD = Arg1
                DAT0 = SizeOf (Arg2)
                Local1 = Zero
                HBDR = DerefOf (Arg2 [Zero])
                HCNT = 0x54
                While ((SizeOf (Arg2) > Local1))
                {
                    Local0 = 0x0FA0
                    While ((!(HSTS & 0x80) && Local0))
                    {
                        Local0--
                        Stall (0x32)
                    }

                    If (!Local0)
                    {
                        KILL ()
                        Return (Zero)
                    }

                    HSTS = 0x80
                    Local1++
                    If ((SizeOf (Arg2) > Local1))
                    {
                        HBDR = DerefOf (Arg2 [Local1])
                    }
                }

                If (CMPL ())
                {
                    HSTS |= 0xFF
                    Return (One)
                }

                Return (Zero)
            }

            Method (SMBA, 3, Serialized)
            {
                Name (TBUF, Buffer (0x0100){})
                If (SRDY ())
                {
                    Return (Zero)
                }

                HSTS = 0xBF
                TXSA = (Arg0 | One)
                HCMD = Arg1
                HCNT = 0x54
                Local0 = 0x0FA0
                While ((!(HSTS & 0x80) && Local0))
                {
                    Local0--
                    Stall (0x32)
                }

                If (!Local0)
                {
                    KILL ()
                    Return (Zero)
                }

                TBUF [Zero] = DAT0 /* \GSA1.DAT0 */
                HSTS = 0x80
                Local1 = One
                While ((Local1 < DerefOf (TBUF [Zero])))
                {
                    Local0 = 0x0FA0
                    While ((!(HSTS & 0x80) && Local0))
                    {
                        Local0--
                        Stall (0x32)
                    }

                    If (!Local0)
                    {
                        KILL ()
                        Return (Zero)
                    }

                    TBUF [Local1] = HBDR /* \GSA1.HBDR */
                    HSTS = 0x80
                    Local1++
                }

                If (CMPL ())
                {
                    HSTS |= 0xFF
                    Return (TBUF) /* \GSA1.SMBA.TBUF */
                }

                HSTS |= 0xFF
                Return (Zero)
            }

            Method (SMBF, 1, Serialized)
            {
                If ((Arg0 == Zero))
                {
                    SMB2 (0x6C, Zero, Zero)
                }
                Else
                {
                    SMB2 (0x6E, Zero, Zero)
                }
            }

            Method (SMBE, 2, Serialized)
            {
                Local0 = Zero
                While ((Local0 < 0x0200))
                {
                    If ((Local0 == Zero))
                    {
                        SMBF (Zero)
                    }

                    If ((Local0 == 0x0100))
                    {
                        SMBF (One)
                    }

                    Local1 = SMB3 (Arg0, (Local0 % 0x0100))
                    If ((Local1 == 0xFFFF))
                    {
                        Return (0xFFFF)
                    }
                    Else
                    {
                        Arg1 [Local0] = Local1
                        Local0++
                    }
                }

                SMBF (Zero)
                Return (Zero)
            }

            Method (SMM9, 1, Serialized)
            {
                If ((Arg0 == 0x02))
                {
                    Acquire (SMMB, 0xFFFF)
                    Local0 = Zero
                    Return (Local0)
                }

                Return (Zero)
            }

            Method (SMMA, 1, Serialized)
            {
                If ((Arg0 == 0x02))
                {
                    Local0 = Zero
                    Release (SMMB)
                    Return (Local0)
                }

                Return (Zero)
            }

            Method (SMM0, 3, Serialized)
            {
                If ((Arg0 == 0x02))
                {
                    Acquire (SMMB, 0xFFFF)
                    Local0 = SMB0 (Arg1, Arg2)
                    Release (SMMB)
                    Return (Local0)
                }
            }

            Method (SMM1, 2, Serialized)
            {
                If ((Arg0 == 0x02))
                {
                    Local0 = Zero
                    Acquire (SMMB, 0xFFFF)
                    Local0 = SMB1 (Arg1)
                    Release (SMMB)
                    Return (Local0)
                }
            }

            Method (SMM2, 4, Serialized)
            {
                If ((Arg0 == 0x02))
                {
                    Acquire (SMMB, 0xFFFF)
                    Local0 = SMB2 (Arg1, Arg2, Arg3)
                    Release (SMMB)
                    Return (Local0)
                }
            }

            Method (SMM3, 3, Serialized)
            {
                If ((Arg0 == 0x02))
                {
                    Acquire (SMMB, 0xFFFF)
                    Local0 = SMB3 (Arg1, Arg2)
                    Release (SMMB)
                    Return (Local0)
                }
            }

            Method (SMM4, 4, Serialized)
            {
                If ((Arg0 == 0x02))
                {
                    Acquire (SMMB, 0xFFFF)
                    Local0 = SMB4 (Arg1, Arg2, Arg3)
                    Release (SMMB)
                    Return (Local0)
                }
            }

            Method (SMM5, 3, Serialized)
            {
                If ((Arg0 == 0x02))
                {
                    Acquire (SMMB, 0xFFFF)
                    Local0 = SMB5 (Arg1, Arg2)
                    Release (SMMB)
                    Return (Local0)
                }
            }

            Method (SMM6, 5, Serialized)
            {
                If ((Arg0 == 0x02))
                {
                    Local0 = Zero
                    Acquire (SMMB, 0xFFFF)
                    Release (SMMB)
                    Return (Local0)
                }
            }

            Method (SMM7, 4, Serialized)
            {
                If ((Arg0 == 0x02))
                {
                    Local0 = Zero
                    Acquire (SMMB, 0xFFFF)
                    Release (SMMB)
                    Return (Local0)
                }
            }

            Method (SMM8, 3, Serialized)
            {
                If ((Arg0 == 0x02))
                {
                    Acquire (SMMB, 0xFFFF)
                    Local0 = SMBE (Arg1, Arg2)
                    Release (SMMB)
                    Return (Local0)
                }
            }

            Method (XDP8, 1, Serialized)
            {
                Acquire (SMMB, 0xFFFF)
                Local0 = (((SMB3 (Arg0, 0xFD) | (SMB3 (Arg0, 0xFC) << 0x08
                    )) | (SMB3 (Arg0, 0x6E) << 0x10)) | (SMB3 (Arg0, 0x6F) << 
                    0x18))
                Release (SMMB)
                Return (Local0)
            }

            Method (XDPV, 1, Serialized)
            {
                Acquire (SMMB, 0xFFFF)
                Local0 = SMB3 (Arg0, 0x6E)
                Local1 = SMB3 (Arg0, 0x6F)
                Local2 = SMB3 (Arg0, 0xFC)
                Release (SMMB)
                If ((((Local0 == 0x52) && (Local1 == 0x49)) && (Local2 == 0x7C)))
                {
                    Return (One)
                }

                Return (Zero)
            }

            Method (XDPU, 1, Serialized)
            {
                Acquire (SMMB, 0xFFFF)
                Local0 = SMB3 (Arg0, 0x74)
                Release (SMMB)
                Return (Local0)
            }

            Method (XDPE, 2, Serialized)
            {
                If ((Arg1 == Zero))
                {
                    Local1 = 0x06100050
                }
                Else
                {
                    Local1 = 0x0A100050
                }

                Acquire (SMMB, 0xFFFF)
                SMB2 (Arg0, 0xFF, (Local1 >> 0x18))
                Local3 = SMB5 (Arg0, (Local1 & 0xFF))
                Release (SMMB)
                Return (Local3)
            }

            Method (XDPF, 3, Serialized)
            {
                If ((Arg1 == Zero))
                {
                    Local1 = 0x06100050
                }
                Else
                {
                    Local1 = 0x0A100050
                }

                Acquire (SMMB, 0xFFFF)
                SMB2 (Arg0, 0xFF, (Local1 >> 0x18))
                Local5 = Arg2
                SMB4 (Arg0, (Local1 & 0xFF), Local5)
                Release (SMMB)
                Return (Zero)
            }

            Method (XDP9, 2, Serialized)
            {
                If ((Arg1 == Zero))
                {
                    Local0 = 0x04090082
                }
                Else
                {
                    Local0 = 0x08090082
                }

                Acquire (SMMB, 0xFFFF)
                SMB2 (Arg0, 0xFF, (Local0 >> 0x18))
                Local5 = SMB5 (Arg0, (Local0 & 0xFF))
                Release (SMMB)
                Return (Local5)
            }

            Method (XDPA, 3, Serialized)
            {
                If ((Arg1 == Zero))
                {
                    Local0 = 0x04090082
                    Local1 = 0x001000EC
                    Local2 = 0x000101E6
                }
                Else
                {
                    Local0 = 0x08090082
                    Local1 = 0x001000EC
                    Local2 = 0x000101E6
                }

                Acquire (SMMB, 0xFFFF)
                SMB2 (Arg0, 0xFF, (Local2 >> 0x18))
                Local5 = SMB3 (Arg0, (Local2 & 0xFF))
                Local5 = PFM8 (Local5, ((Local2 >> 0x08) & 0xFF), (
                    (Local2 >> 0x10) & 0xFF), Zero)
                SMB2 (Arg0, (Local2 & 0xFF), Local5)
                SMB2 (Arg0, 0xFF, (Local1 >> 0x18))
                Local5 = SMB2 (Arg0, 0xFF, (Local1 >> 0x18))
                SMB4 (Arg0, (Local1 & 0xFF), 0xA55A)
                SMB2 (Arg0, 0xFF, (Local0 >> 0x18))
                SMB4 (Arg0, (Local0 & 0xFF), Arg2)
                SMB2 (Arg0, 0xFF, (Local1 >> 0x18))
                SMB4 (Arg0, (Local1 & 0xFF), Zero)
                SMB2 (Arg0, 0xFF, (Local2 >> 0x18))
                Local5 = SMB3 (Arg0, (Local2 & 0xFF))
                Local5 = PFM8 (Local5, ((Local2 >> 0x08) & 0xFF), (
                    (Local2 >> 0x10) & 0xFF), One)
                SMB2 (Arg0, (Local2 & 0xFF), Local5)
                Release (SMMB)
                Return (Zero)
            }

            Method (XDPW, 2, Serialized)
            {
                If ((Arg1 == Zero))
                {
                    Local0 = 0x04020C82
                }
                Else
                {
                    Local0 = 0x08020C82
                }

                Acquire (SMMB, 0xFFFF)
                SMB2 (Arg0, 0xFF, (Local0 >> 0x18))
                Local3 = SMB5 (Arg0, (Local0 & 0xFF))
                Local2 = PFM9 (Local3, ((Local0 >> 0x08) & 0xFF), (
                    (Local0 >> 0x10) & 0xFF))
                Release (SMMB)
                Return (Local2)
            }

            Method (XDPX, 3, Serialized)
            {
                If ((Arg1 == Zero))
                {
                    Local0 = 0x04020C82
                }
                Else
                {
                    Local0 = 0x08020C82
                }

                Acquire (SMMB, 0xFFFF)
                SMB2 (Arg0, 0xFF, (Local0 >> 0x18))
                Local4 = SMB5 (Arg0, (Local0 & 0xFF))
                Local4 = PFM8 (Local4, ((Local0 >> 0x08) & 0xFF), (
                    (Local0 >> 0x10) & 0xFF), (Arg2 & One))
                SMB4 (Arg0, (Local0 & 0xFF), Local4)
                Release (SMMB)
                Return (Zero)
            }

            Method (XDPC, 2, Serialized)
            {
                If ((Arg1 == Zero))
                {
                    Local0 = 0x04080054
                }
                Else
                {
                    Local0 = 0x08080054
                }

                Acquire (SMMB, 0xFFFF)
                SMB2 (Arg0, 0xFF, (Local0 >> 0x18))
                Local2 = SMB3 (Arg0, (Local0 & 0xFF))
                Release (SMMB)
                Return (Local2)
            }

            Method (XDPB, 3, Serialized)
            {
                If ((Arg1 == Zero))
                {
                    Local0 = 0x04080054
                }
                Else
                {
                    Local0 = 0x08080054
                }

                Acquire (SMMB, 0xFFFF)
                SMB2 (Arg0, 0xFF, (Local0 >> 0x18))
                SMB2 (Arg0, (Local0 & 0xFF), Arg2)
                Release (SMMB)
                Return (Zero)
            }

            Method (XDPD, 2, Serialized)
            {
                If ((Arg1 == Zero))
                {
                    Local0 = 0x040800B0
                }
                Else
                {
                    Local0 = 0x080800B1
                }

                Acquire (SMMB, 0xFFFF)
                SMB2 (Arg0, 0xFF, (Local0 >> 0x18))
                Local1 = SMB3 (Arg0, (Local0 & 0xFF))
                Release (SMMB)
                Return (Local1)
            }

            Method (XDPM, 2, Serialized)
            {
                If ((Arg1 == Zero))
                {
                    Local0 = 0x04040C22
                }
                Else
                {
                    Local0 = 0x08040C22
                }

                Acquire (SMMB, 0xFFFF)
                SMB2 (Arg0, 0xFF, (Local0 >> 0x18))
                Local3 = SMB5 (Arg0, (Local0 & 0xFF))
                Local4 = PFM9 (Local3, ((Local0 >> 0x08) & 0xFF), (
                    (Local0 >> 0x10) & 0xFF))
                Release (SMMB)
                If ((Local4 & 0x08))
                {
                    Return (Local4)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (XDPN, 3, Serialized)
            {
                If ((Arg1 == Zero))
                {
                    Local0 = 0x04040C22
                }
                Else
                {
                    Local0 = 0x08040C22
                }

                Acquire (SMMB, 0xFFFF)
                SMB2 (Arg0, 0xFF, (Local0 >> 0x18))
                Local4 = SMB5 (Arg0, (Local0 & 0xFF))
                If ((Arg2 == Zero))
                {
                    Local4 = PFM8 (Local4, 0x0F, One, Zero)
                }
                Else
                {
                    Local4 = PFM8 (Local4, ((Local0 >> 0x08) & 0xFF), (
                        (Local0 >> 0x10) & 0xFF), Arg2)
                }

                SMB4 (Arg0, (Local0 & 0xFF), Local4)
                Release (SMMB)
                Return (Zero)
            }

            Method (XDPJ, 2, Serialized)
            {
                If ((Arg1 == Zero))
                {
                    Local0 = 0x04040822
                }
                Else
                {
                    Local0 = 0x08040822
                }

                Acquire (SMMB, 0xFFFF)
                SMB2 (Arg0, 0xFF, (Local0 >> 0x18))
                Local3 = SMB5 (Arg0, (Local0 & 0xFF))
                Local4 = PFM9 (Local3, ((Local0 >> 0x08) & 0xFF), (
                    (Local0 >> 0x10) & 0xFF))
                Release (SMMB)
                If ((Local4 & 0x08))
                {
                    Return (Local4)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (XDPK, 3, Serialized)
            {
                If ((Arg1 == Zero))
                {
                    Local0 = 0x04040822
                }
                Else
                {
                    Local0 = 0x08040822
                }

                Acquire (SMMB, 0xFFFF)
                SMB2 (Arg0, 0xFF, (Local0 >> 0x18))
                Local4 = SMB5 (Arg0, (Local0 & 0xFF))
                If ((Arg2 == Zero))
                {
                    Local4 = PFM8 (Local4, 0x0F, One, Zero)
                }
                Else
                {
                    Local4 = PFM8 (Local4, ((Local0 >> 0x08) & 0xFF), (
                        (Local0 >> 0x10) & 0xFF), Arg2)
                }

                SMB4 (Arg0, (Local0 & 0xFF), Local4)
                Release (SMMB)
                Return (Zero)
            }

            Method (XDPO, 2, Serialized)
            {
                If ((Arg1 == Zero))
                {
                    Local0 = 0x04080024
                }
                Else
                {
                    Local0 = 0x08080024
                }

                Acquire (SMMB, 0xFFFF)
                SMB2 (Arg0, 0xFF, (Local0 >> 0x18))
                Local3 = SMB3 (Arg0, (Local0 & 0xFF))
                Release (SMMB)
                Return (Local3)
            }

            Method (XDPP, 3, Serialized)
            {
                If ((Arg1 == Zero))
                {
                    Local0 = 0x04080024
                }
                Else
                {
                    Local0 = 0x08080024
                }

                Acquire (SMMB, 0xFFFF)
                SMB2 (Arg0, 0xFF, (Local0 >> 0x18))
                Local4 = Arg2
                SMB2 (Arg0, (Local0 & 0xFF), Local4)
                Release (SMMB)
                Return (Zero)
            }

            Method (XDPY, 2, Serialized)
            {
                If ((Arg1 == Zero))
                {
                    Local0 = 0x0610009E
                }
                Else
                {
                    Local0 = 0x0A10009E
                }

                Acquire (SMMB, 0xFFFF)
                SMB2 (Arg0, 0xFF, (Local0 >> 0x18))
                Local3 = SMB5 (Arg0, (Local0 & 0xFF))
                Release (SMMB)
                Return (Local3)
            }

            Method (XDPZ, 3, Serialized)
            {
                If ((Arg1 == Zero))
                {
                    Local0 = 0x0610009E
                }
                Else
                {
                    Local0 = 0x0A10009E
                }

                Acquire (SMMB, 0xFFFF)
                SMB2 (Arg0, 0xFF, (Local0 >> 0x18))
                Local4 = Arg2
                SMB4 (Arg0, (Local0 & 0xFF), Local4)
                Release (SMMB)
                Return (Zero)
            }

            Method (XDPQ, 2, Serialized)
            {
                If ((Arg1 == Zero))
                {
                    Local0 = 0x06100066
                }
                Else
                {
                    Local0 = 0x0A100066
                }

                Acquire (SMMB, 0xFFFF)
                SMB2 (Arg0, 0xFF, (Local0 >> 0x18))
                Local3 = SMB5 (Arg0, (Local0 & 0xFF))
                Release (SMMB)
                Return (Local3)
            }

            Method (XDPR, 3, Serialized)
            {
                If ((Arg1 == Zero))
                {
                    Local0 = 0x06100066
                }
                Else
                {
                    Local0 = 0x0A100066
                }

                Acquire (SMMB, 0xFFFF)
                SMB2 (Arg0, 0xFF, (Local0 >> 0x18))
                Local4 = Arg2
                SMB4 (Arg0, (Local0 & 0xFF), Local4)
                Release (SMMB)
                Return (Zero)
            }

            Method (XDPS, 2, Serialized)
            {
                If ((Arg1 == Zero))
                {
                    Local0 = 0x0004044B
                    Acquire (SMMB, 0xFFFF)
                    SMB2 (Arg0, 0xFF, (Local0 >> 0x18))
                    Local0 = SMB3 (Arg0, 0x4D)
                    Local1 = SMB3 (Arg0, 0x4A)
                    Local2 = SMB3 (Arg0, 0x4B)
                    Local4 = ((Local0 + (Local1 << 0x08)) + (Local2 << 0x10
                        ))
                    Release (SMMB)
                }
                Else
                {
                    Local0 = 0x0004044C
                    Acquire (SMMB, 0xFFFF)
                    SMB2 (Arg0, 0xFF, (Local0 >> 0x18))
                    Local0 = SMB3 (Arg0, 0x4C)
                    Local4 = Local0
                    Release (SMMB)
                }

                Return (Local4)
            }

            Method (XDPT, 3, Serialized)
            {
                If ((Arg1 == Zero))
                {
                    Local0 = 0x0004044B
                    Acquire (SMMB, 0xFFFF)
                    SMB2 (Arg0, 0xFF, (Local0 >> 0x18))
                    SMB2 (Arg0, 0x4D, (Arg2 & 0xFF))
                    SMB2 (Arg0, 0x4A, ((Arg2 >> 0x08) & 0xFF))
                    SMB2 (Arg0, 0x4B, ((Arg2 >> 0x10) & 0xFF))
                    Release (SMMB)
                }
                Else
                {
                    Local0 = 0x0004044C
                    Acquire (SMMB, 0xFFFF)
                    SMB2 (Arg0, 0xFF, (Local0 >> 0x18))
                    SMB2 (Arg0, 0x4C, (Arg2 & 0xFF))
                    Release (SMMB)
                }

                Return (Zero)
            }

            Method (IRCU, 1, Serialized)
            {
                Return (Ones)
            }

            Method (IRCE, 2, Serialized)
            {
                Local0 = IRCU (Arg0)
                If (Zero){}
                Return (Ones)
            }

            Method (IRCF, 3, Serialized)
            {
                Local0 = IRCU (Arg0)
                If (Zero){}
                Return (Zero)
            }

            Method (IRC9, 2, Serialized)
            {
                Local0 = IRCU (Arg0)
                If (Zero){}
                Return (Ones)
            }

            Method (IRCA, 3, Serialized)
            {
                Local0 = IRCU (Arg0)
                If (Zero){}
                Return (Zero)
            }

            Method (IRCC, 2, Serialized)
            {
                Local0 = IRCU (Arg0)
                If (Zero){}
                Return (Ones)
            }

            Method (IRCB, 3, Serialized)
            {
                Local0 = IRCU (Arg0)
                If (Zero){}
                Return (Zero)
            }

            Method (IRCD, 2, Serialized)
            {
                Local0 = IRCU (Arg0)
                If (Zero){}
                Return (Ones)
            }

            Method (IRCM, 2, Serialized)
            {
                Local0 = IRCU (Arg0)
                If (Zero){}
                Return (Ones)
            }

            Method (IRCN, 3, Serialized)
            {
                Local0 = IRCU (Arg0)
                If (Zero){}
                Return (Zero)
            }

            Method (IRCO, 2, Serialized)
            {
                Local0 = IRCU (Arg0)
                If (Zero){}
                Return (Ones)
            }

            Method (IRCP, 3, Serialized)
            {
                Local0 = IRCU (Arg0)
                If (Zero){}
                Return (Zero)
            }

            Method (IRCQ, 2, Serialized)
            {
                Local0 = IRCU (Arg0)
                If (Zero){}
                Return (Ones)
            }

            Method (IRCR, 3, Serialized)
            {
                Local0 = IRCU (Arg0)
                If (Zero){}
                Return (Zero)
            }

            Method (IRCS, 2, Serialized)
            {
                Local0 = IRCU (Arg0)
                If (Zero){}
                Return (Ones)
            }

            Method (IRCT, 3, Serialized)
            {
                Local0 = IRCU (Arg0)
                If (Zero){}
                Return (Zero)
            }

            Method (ISM0, 1, Serialized)
            {
                Return (Zero)
            }

            Method (ISMD, 1, Serialized)
            {
                Return (Zero)
            }

            Method (ISMF, 2, Serialized)
            {
                Local0 = 0x00080000
                Local1 = 0x000204F0
                SMM2 (0x02, Arg0, (Local0 & 0xFF), Arg1)
                Local2 = SMM5 (0x02, Arg0, (Local1 & 0xFF))
                Local2 = PFM9 (Local2, ((Local1 >> 0x08) & 0xFF), (
                    (Local1 >> 0x10) & 0xFF))
                Return (Local2)
            }

            Method (ISMG, 3, Serialized)
            {
                Local0 = 0x00080000
                Local1 = 0x000204F0
                SMM2 (0x02, Arg0, (Local0 & 0xFF), Arg1)
                Local2 = SMM5 (0x02, Arg0, (Local1 & 0xFF))
                Local2 = PFM8 (Local2, ((Local1 >> 0x08) & 0xFF), (
                    (Local1 >> 0x10) & 0xFF), Arg2)
                SMM4 (0x02, Arg0, (Local1 & 0xFF), Local2)
                Return (Zero)
            }

            Method (ISM5, 2, Serialized)
            {
                Local0 = 0x00080000
                Local1 = 0x00100028
                SMM2 (0x02, Arg0, (Local0 & 0xFF), Arg1)
                Local3 = SMM5 (0x02, Arg0, (Local1 & 0xFF))
                Return (Local3)
            }

            Method (ISM6, 3, Serialized)
            {
                Local0 = 0x00080000
                Local1 = 0x00100028
                Local2 = 0x000800E7
                SMM2 (0x02, Arg0, (Local0 & 0xFF), Arg1)
                SMM4 (0x02, Arg0, (Local1 & 0xFF), (Arg2 & 0xFFFF))
                SMM2 (0x02, Arg0, (Local2 & 0xFF), One)
                Return (Zero)
            }

            Method (ISME, 2, Serialized)
            {
                Local0 = 0x00080000
                Local1 = 0x0010008B
                SMM2 (0x02, Arg0, (Local0 & 0xFF), Arg1)
                Return (SMM5 (0x02, Arg0, (Local1 & 0xFF)))
            }

            Method (ISM4, 2, Serialized)
            {
                Local0 = 0x00080000
                Local1 = 0x00100023
                SMM2 (0x02, Arg0, (Local0 & 0xFF), Arg1)
                Return (SMM5 (0x02, Arg0, (Local1 & 0xFF)))
            }

            Method (ISM3, 3, Serialized)
            {
                Local0 = 0x00080000
                Local1 = 0x00100023
                SMM2 (0x02, Arg0, (Local0 & 0xFF), Arg1)
                SMM4 (0x02, Arg0, (Local1 & 0xFF), (Arg2 & 0xFFFF))
                Return (Zero)
            }

            Method (ISM2, 2, Serialized)
            {
                Local0 = 0x00080000
                Local1 = 0x00100021
                SMM2 (0x02, Arg0, (Local0 & 0xFF), Arg1)
                Return (SMM5 (0x02, Arg0, (Local1 & 0xFF)))
            }

            Method (ISM1, 3, Serialized)
            {
                Local0 = 0x00080000
                Local1 = 0x00100021
                SMM2 (0x02, Arg0, (Local0 & 0xFF), Arg1)
                SMM4 (0x02, Arg0, (Local1 & 0xFF), (Arg2 & 0xFFFF))
                Return (Zero)
            }

            Method (ISM7, 2, Serialized)
            {
                Local0 = 0x00080000
                Local1 = 0x00100055
                SMM2 (0x02, Arg0, (Local0 & 0xFF), Arg1)
                Local3 = SMM5 (0x02, Arg0, (Local1 & 0xFF))
                Return (Local3)
            }

            Method (ISM8, 3, Serialized)
            {
                Local0 = 0x00080000
                Local1 = 0x00100055
                SMM2 (0x02, Arg0, (Local0 & 0xFF), Arg1)
                SMM4 (0x02, Arg0, (Local1 & 0xFF), (Arg2 & 0xFFFF))
                Return (Zero)
            }

            Method (ISM9, 2, Serialized)
            {
                Local0 = 0x00080000
                Local1 = 0x0010005B
                SMM2 (0x02, Arg0, (Local0 & 0xFF), Arg1)
                Local3 = SMM5 (0x02, Arg0, (Local1 & 0xFF))
                Return (Local3)
            }

            Method (ISMA, 3, Serialized)
            {
                Local0 = 0x00080000
                Local1 = 0x0010005B
                SMM2 (0x02, Arg0, (Local0 & 0xFF), Arg1)
                SMM2 (0x02, Arg0, (Local1 & 0xFF), (Arg2 & 0xFFFF))
                Return (Zero)
            }

            Method (ISK0, 1, Serialized)
            {
                If (ISMD (Arg0))
                {
                    Return (Zero)
                }

                Return (Ones)
            }

            Method (ISK5, 2, Serialized)
            {
                Local0 = ISK0 (Arg0)
                If (Zero){}
                ElseIf ((Local0 == Zero))
                {
                    Return (ISM5 (Arg0, Arg1))
                }

                Return (Ones)
            }

            Method (ISK6, 3, Serialized)
            {
                Local0 = ISK0 (Arg0)
                If (Zero){}
                ElseIf ((Local0 == Zero))
                {
                    ISM6 (Arg0, Arg1, Arg2)
                }

                Return (Zero)
            }

            Method (ISK4, 2, Serialized)
            {
                Local0 = ISK0 (Arg0)
                If (Zero){}
                ElseIf ((Local0 == Zero))
                {
                    Return (ISM4 (Arg0, Arg1))
                }

                Return (Ones)
            }

            Method (ISK3, 3, Serialized)
            {
                Local0 = ISK0 (Arg0)
                If (Zero){}
                ElseIf ((Local0 == Zero))
                {
                    ISM3 (Arg0, Arg1, Arg2)
                }

                Return (Zero)
            }

            Method (ISK2, 2, Serialized)
            {
                Local0 = ISK0 (Arg0)
                If (Zero){}
                ElseIf ((Local0 == Zero))
                {
                    Return (ISM2 (Arg0, Arg1))
                }

                Return (Ones)
            }

            Method (ISK1, 3, Serialized)
            {
                Local0 = ISK0 (Arg0)
                If (Zero){}
                ElseIf ((Local0 == Zero))
                {
                    ISM1 (Arg0, Arg1, Arg2)
                }

                Return (Zero)
            }

            Method (ISK7, 2, Serialized)
            {
                Local0 = ISK0 (Arg0)
                If (Zero){}
                ElseIf ((Local0 == Zero))
                {
                    Return (ISM7 (Arg0, Arg1))
                }

                Return (Ones)
            }

            Method (ISK8, 3, Serialized)
            {
                Local0 = ISK0 (Arg0)
                If (Zero){}
                ElseIf ((Local0 == Zero))
                {
                    ISM8 (Arg0, Arg1, Arg2)
                }

                Return (Zero)
            }

            Method (ISK9, 2, Serialized)
            {
                Local0 = ISK0 (Arg0)
                If (Zero){}
                ElseIf ((Local0 == Zero))
                {
                    Return (ISM9 (Arg0, Arg1))
                }

                Return (Ones)
            }

            Method (ISKA, 3, Serialized)
            {
                Local0 = ISK0 (Arg0)
                If (Zero){}
                ElseIf ((Local0 == Zero))
                {
                    ISMA (Arg0, Arg1, Arg2)
                }

                Return (Zero)
            }

            Method (NCT0, 1, Serialized)
            {
                Return ((SMM3 (0x02, Arg0, 0x5D) | (SMM3 (0x02, Arg0, 0x5E) << 0x08
                    )))
            }

            Method (NCT1, 2, Serialized)
            {
                Return (SMM3 (0x02, Arg0, Arg1))
            }

            Method (NCT2, 3, Serialized)
            {
                Local1 = SMM2 (0x02, Arg0, Arg1, Arg2)
                Return (Local1)
            }

            Name (SIOG, 0x0A45)
            OperationRegion (SIO1, SystemIO, SIOG, 0x02)
            Field (SIO1, ByteAcc, NoLock, WriteAsZeros)
            {
                SIO2,   8, 
                SIO3,   8
            }

            IndexField (SIO2, SIO3, ByteAcc, NoLock, Preserve)
            {
                Offset (0x0B), 
                FTD1,   3, 
                FTD2,   3, 
                Offset (0x0D), 
                FTA1,   8, 
                FTA2,   8, 
                FTA3,   8, 
                Offset (0x13), 
                FAE1,   1, 
                FAE2,   1, 
                FAE3,   1, 
                REV1,   1, 
                FTE1,   1, 
                FTE2,   1, 
                FTE3,   1, 
                Offset (0x14), 
                FBE1,   1, 
                FBE2,   1, 
                FBE3,   1, 
                REV2,   4, 
                Offset (0x15), 
                FP10,   7, 
                FP17,   1, 
                FP20,   7, 
                FP27,   1, 
                FP30,   7, 
                FP37,   1, 
                FTB1,   8, 
                FTB2,   8, 
                FTB3,   8, 
                Offset (0x29), 
                FET1,   8, 
                FET2,   8, 
                FET3,   8, 
                FET4,   8, 
                FET5,   8, 
                FET6,   8, 
                Offset (0x4C), 
                FTA6,   8, 
                FTB6,   8, 
                Offset (0x5C), 
                FBEC,   3, 
                Offset (0x60), 
                FC10,   8, 
                FC11,   8, 
                FC12,   8, 
                FC13,   8, 
                FC14,   8, 
                FC15,   8, 
                FC16,   8, 
                FC17,   8, 
                FC20,   8, 
                FC21,   8, 
                FC22,   8, 
                FC23,   8, 
                FC24,   8, 
                FC25,   8, 
                FC26,   8, 
                FC27,   8, 
                FC30,   8, 
                FC31,   8, 
                FC32,   8, 
                FC33,   8, 
                FC34,   8, 
                FC35,   8, 
                FC36,   8, 
                FC37,   8, 
                FC40,   8, 
                FC41,   8, 
                FC42,   8, 
                FC43,   8, 
                FC44,   8, 
                FC45,   8, 
                FC46,   8, 
                FC47,   8, 
                FTA4,   8, 
                FTB4,   8, 
                FTA5,   8, 
                FTB5,   8, 
                Offset (0xA0), 
                FC50,   8, 
                FC51,   8, 
                FC52,   8, 
                FC53,   8, 
                FC54,   8, 
                FC55,   8, 
                FC56,   8, 
                FC57,   8, 
                FC60,   8, 
                FC61,   8, 
                FC62,   8, 
                FC63,   8, 
                FC64,   8, 
                FC65,   8, 
                FC66,   8, 
                FC67,   8
            }

            Method (SIOE, 0, NotSerialized)
            {
                Return (FBEC) /* \GSA1.FBEC */
            }

            Method (SIOF, 1, NotSerialized)
            {
                FBEC = Arg0
            }

            Method (SIOA, 1, Serialized)
            {
                Switch (Arg0)
                {
                    Case (Zero)
                    {
                        FBE1 = Zero
                        FAE1 = Zero
                    }
                    Case (One)
                    {
                        FBE2 = Zero
                        FAE2 = Zero
                    }
                    Case (0x02)
                    {
                        FBE3 = Zero
                        FAE3 = Zero
                    }

                }
            }

            Method (SIO9, 1, Serialized)
            {
                Switch (Arg0)
                {
                    Case (Zero)
                    {
                        FBE1 = Zero
                        FAE1 = One
                    }
                    Case (One)
                    {
                        FBE2 = Zero
                        FAE2 = One
                    }
                    Case (0x02)
                    {
                        FBE3 = Zero
                        FAE3 = One
                    }

                }
            }

            Method (SIOD, 1, Serialized)
            {
                Local1 = Zero
                Switch (Arg0)
                {
                    Case (Zero)
                    {
                        If (((FBE1 == Zero) && (FAE1 == Zero)))
                        {
                            Local1 = One
                        }
                    }
                    Case (One)
                    {
                        If (((FBE2 == Zero) && (FAE2 == Zero)))
                        {
                            Local1 = One
                        }
                    }
                    Case (0x02)
                    {
                        If (((FBE3 == Zero) && (FAE3 == Zero)))
                        {
                            Local1 = One
                        }
                    }

                }

                Return (Local1)
            }

            Method (SIO0, 1, Serialized)
            {
                Switch (Arg0)
                {
                    Case (Zero)
                    {
                        Return (FET1) /* \GSA1.FET1 */
                    }
                    Case (One)
                    {
                        Return (FET2) /* \GSA1.FET2 */
                    }
                    Case (0x02)
                    {
                        Return (FET3) /* \GSA1.FET3 */
                    }
                    Case (0x03)
                    {
                        Return (FET4) /* \GSA1.FET4 */
                    }
                    Case (0x04)
                    {
                        Return (FET5) /* \GSA1.FET5 */
                    }
                    Case (0x05)
                    {
                        Return (FET6) /* \GSA1.FET6 */
                    }

                }
            }

            Method (SIO4, 1, Serialized)
            {
                Switch (Arg0)
                {
                    Case (Zero)
                    {
                        Return (((FTB1 << 0x08) | FTA1))
                    }
                    Case (One)
                    {
                        Return (((FTB2 << 0x08) | FTA2))
                    }
                    Case (0x02)
                    {
                        Return (((FTB3 << 0x08) | FTA3))
                    }
                    Case (0x03)
                    {
                        Return (((FTB4 << 0x08) | FTA4))
                    }
                    Case (0x04)
                    {
                        Return (((FTB5 << 0x08) | FTA5))
                    }
                    Case (0x05)
                    {
                        Return (((FTB6 >> 0x08) | FTA6))
                    }

                }
            }

            Method (SIOC, 2, Serialized)
            {
                Switch (Arg0)
                {
                    Case (Zero)
                    {
                        FP10 = Arg1
                    }
                    Case (One)
                    {
                        FP20 = Arg1
                    }
                    Case (0x02)
                    {
                        FP30 = Arg1
                    }

                }
            }

            Method (SIOB, 1, Serialized)
            {
                Switch (Arg0)
                {
                    Case (Zero)
                    {
                        Return (FP10) /* \GSA1.FP10 */
                    }
                    Case (One)
                    {
                        Return (FP20) /* \GSA1.FP20 */
                    }
                    Case (0x02)
                    {
                        Return (FP30) /* \GSA1.FP30 */
                    }

                }

                Return (Zero)
            }

            Method (SIO7, 1, Serialized)
            {
                Switch (Arg0)
                {
                    Case (Zero)
                    {
                        Return (FC10) /* \GSA1.FC10 */
                    }
                    Case (One)
                    {
                        Return (FC20) /* \GSA1.FC20 */
                    }
                    Case (0x02)
                    {
                        Return (FC30) /* \GSA1.FC30 */
                    }
                    Case (0x03)
                    {
                        Return (FC40) /* \GSA1.FC40 */
                    }
                    Case (0x04)
                    {
                        Return (FC50) /* \GSA1.FC50 */
                    }
                    Case (0x05)
                    {
                        Return (FC60) /* \GSA1.FC60 */
                    }

                }

                Return (Zero)
            }

            Method (SIO5, 1, Serialized)
            {
                Switch (Arg0)
                {
                    Case (Zero)
                    {
                        Return (FC11) /* \GSA1.FC11 */
                    }
                    Case (One)
                    {
                        Return (FC21) /* \GSA1.FC21 */
                    }
                    Case (0x02)
                    {
                        Return (FC31) /* \GSA1.FC31 */
                    }
                    Case (0x03)
                    {
                        Return (FC41) /* \GSA1.FC41 */
                    }
                    Case (0x04)
                    {
                        Return (FC51) /* \GSA1.FC51 */
                    }
                    Case (0x05)
                    {
                        Return (FC61) /* \GSA1.FC61 */
                    }

                }

                Return (Zero)
            }

            Method (SIO8, 2, Serialized)
            {
                Switch (Arg0)
                {
                    Case (Zero)
                    {
                        FC10 = Arg1
                    }
                    Case (One)
                    {
                        FC20 = Arg1
                    }
                    Case (0x02)
                    {
                        FC30 = Arg1
                    }
                    Case (0x03)
                    {
                        FC40 = Arg1
                    }
                    Case (0x04)
                    {
                        FC50 = Arg1
                    }
                    Case (0x05)
                    {
                        FC60 = Arg1
                    }

                }
            }

            Method (SIO6, 2, Serialized)
            {
                Switch (Arg0)
                {
                    Case (Zero)
                    {
                        FC11 = Arg1
                    }
                    Case (One)
                    {
                        FC21 = Arg1
                    }
                    Case (0x02)
                    {
                        FC31 = Arg1
                    }
                    Case (0x03)
                    {
                        FC41 = Arg1
                    }
                    Case (0x04)
                    {
                        FC51 = Arg1
                    }
                    Case (0x05)
                    {
                        FC61 = Arg1
                    }

                }
            }

            Scope (\_TZ)
            {
                ThermalZone (TZ10)
                {
                    Method (_INI, 0, NotSerialized)  // _INI: Initialize
                    {
                        \GSA1.ZRC0 ()
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (\_OSI ("Windows 2001"))
                        {
                            Local0 = 0x04
                        }

                        If (\_OSI ("Windows 2001.1"))
                        {
                            Local0 = 0x05
                        }

                        If (\_OSI ("FreeBSD"))
                        {
                            Local0 = 0x06
                        }

                        If (\_OSI ("HP-UX"))
                        {
                            Local0 = 0x07
                        }

                        If (\_OSI ("OpenVMS"))
                        {
                            Local0 = 0x08
                        }

                        If (\_OSI ("Windows 2001 SP1"))
                        {
                            Local0 = 0x09
                        }

                        If (\_OSI ("Windows 2001 SP2"))
                        {
                            Local0 = 0x0A
                        }

                        If (\_OSI ("Windows 2001 SP3"))
                        {
                            Local0 = 0x0B
                        }

                        If (\_OSI ("Windows 2006"))
                        {
                            Local0 = 0x0C
                        }

                        If (\_OSI ("Windows 2006 SP1"))
                        {
                            Local0 = 0x0D
                        }

                        If (\_OSI ("Windows 2009"))
                        {
                            Local0 = 0x0E
                        }

                        If (\_OSI ("Windows 2012"))
                        {
                            Local0 = 0x0F
                        }

                        If (\_OSI ("Windows 2013"))
                        {
                            Local0 = 0x10
                        }

                        If (\_OSI ("Windows 2015"))
                        {
                            Local0 = 0x11
                        }

                        If (\_OSI ("Windows 2016"))
                        {
                            Local0 = 0x12
                        }

                        If (\_OSI ("Windows 2017"))
                        {
                            Local0 = 0x13
                        }

                        If (\_OSI ("Windows 2017.2"))
                        {
                            Local0 = 0x14
                        }

                        If (\_OSI ("Windows 2018"))
                        {
                            Local0 = 0x15
                        }

                        If (\_OSI ("Windows 2018.2"))
                        {
                            Local0 = 0x16
                        }

                        If ((Local0 <= 0x0E))
                        {
                            \GSA1.ZRD2 = One
                        }

                        Return (0x0B)
                    }

                    Name (TZD, Package (0x00){})
                    Method (_TZD, 0, Serialized)  // _TZD: Thermal Zone Devices
                    {
                        Return (TZD) /* \_TZ_.TZ10.TZD_ */
                    }

                    Name (PSL, Package (0x00){})
                    Method (_PSL, 0, Serialized)  // _PSL: Passive List
                    {
                        Return (PSL) /* \_TZ_.TZ10.PSL_ */
                    }

                    Method (_PSV, 0, Serialized)  // _PSV: Passive Temperature
                    {
                        Return (0x0B68)
                    }

                    Method (_HOT, 0, Serialized)  // _HOT: Hot Temperature
                    {
                        Return (0x0B72)
                    }

                    Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
                    {
                        Return (0x0B7C)
                    }

                    Method (_TC1, 0, Serialized)  // _TC1: Thermal Constant 1
                    {
                        Return (Zero)
                    }

                    Method (_TC2, 0, Serialized)  // _TC2: Thermal Constant 2
                    {
                        Return (Zero)
                    }

                    Method (_TSP, 0, Serialized)  // _TSP: Thermal Sampling Period
                    {
                        Return (0x0A)
                    }

                    Method (_TZP, 0, Serialized)  // _TZP: Thermal Zone Polling
                    {
                        Return (0x0A)
                    }

                    Method (_TMP, 0, Serialized)  // _TMP: Temperature
                    {
                        \GSA1.ZRC3 ()
                        If ((\GSA1.ZRD1 == One))
                        {
                            Sleep (0x03E8)
                            Notify (\_TZ.TZ10, 0x81) // Thermal Trip Point Change
                        }

                        Return (0x0B54)
                    }

                    Method (_SCP, 1, Serialized)  // _SCP: Set Cooling Policy
                    {
                    }
                }
            }

            Name (ZRC8, Package (0x02)
            {
                Package (0x02)
                {
                    Zero, 
                    0x5F
                }, 

                Package (0x02)
                {
                    One, 
                    0x60
                }
            })
            Name (ZRCL, Buffer (0x0E)
            {
                /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x02, 0x00               // ......
            })
            Name (ZRCT, Zero)
            Name (ZRCF, Zero)
            Name (ZRCG, 0x1E)
            Method (ZRCQ, 0, NotSerialized)
            {
                ZRCU (Zero)
                Local0 = SIOE ()
                SIOF (Zero)
                Local6 = Zero
                Local5 = SizeOf (ZRC8)
                While ((Local6 < Local5))
                {
                    Local7 = ZRCJ (Local6)
                    If ((ObjectType (Local7) == 0x04))
                    {
                        Local1 = DerefOf (Local7 [Zero])
                        ZRCL [((Local6 * 0x07) + 0x02)] = ZRC1 (
                            Local1)
                        ZRC2 (Local1, 0x02)
                        If ((SIO4 (Local1) != 0xFFFF))
                        {
                            ZRCL [((Local6 * 0x07) + 0x03)] = 0xFF
                        }
                        Else
                        {
                            ZRCL [((Local6 * 0x07) + 0x03)] = Zero
                        }

                        If ((Local1 == 0x02))
                        {
                            ZRCL [((Local6 * 0x07) + 0x03)] = 0xFF
                        }
                    }

                    Local6++
                }

                Local6 = Zero
                Local5 = SizeOf (ZRC8)
                While ((Local6 < Local5))
                {
                    Local7 = ZRCJ (Local6)
                    If ((ObjectType (Local7) == 0x04))
                    {
                        Local1 = DerefOf (Local7 [Zero])
                        If (DerefOf (ZRCL [((Local6 * 0x07) + 0x03)]))
                        {
                            ZRC2 (Local1, 0x02)
                            SIOA (Local1)
                        }
                    }

                    Local6++
                }

                Sleep (0x1770)
                Local6 = Zero
                Local5 = SizeOf (ZRC8)
                While ((Local6 < Local5))
                {
                    Local7 = ZRCJ (Local6)
                    If ((ObjectType (Local7) == 0x04))
                    {
                        Local1 = DerefOf (Local7 [Zero])
                        If (DerefOf (ZRCL [((Local6 * 0x07) + 0x03)]))
                        {
                            Local3 = SIO4 (Local1)
                            If (((Local3 == 0xFFFF) && (Local1 != 0x02)))
                            {
                                ZRC2 (Local1, DerefOf (ZRCL [((Local6 * 0x07) + 0x02)]
                                    ))
                                ZRCL [((Local6 * 0x07) + 0x04)] = 0x03
                            }
                            Else
                            {
                                ZRC2 (Local1, DerefOf (ZRCL [((Local6 * 0x07) + 0x02)]
                                    ))
                                ZRCL [((Local6 * 0x07) + 0x04)] = 0x04
                            }

                            SIO9 (Local1)
                        }
                    }

                    Local6++
                }

                SIOF (Local0)
                ZRCU (One)
            }

            Method (ZRCB, 1, Serialized)
            {
                ZRCU (Zero)
            }

            Method (ZRCP, 1, Serialized)
            {
                ZRC0 ()
            }

            Name (ZRD0, Zero)
            Method (ZRC0, 0, NotSerialized)
            {
                ZRCU (Zero)
                ZRCV ()
                ZRD0 = One
                ZRCU (One)
            }

            Method (ZRCU, 1, Serialized)
            {
                If (Arg0)
                {
                    ZRCT = One
                }
                Else
                {
                    ZRCT = Zero
                }
            }

            Method (ZRC9, 0, Serialized)
            {
                Return (0x15)
            }

            Method (ZRCW, 1, NotSerialized)
            {
                Return (DerefOf (ZRCL [((Arg0 * 0x07) + 0x05)]))
            }

            Method (ZRCX, 2, NotSerialized)
            {
                ZRCL [((Arg0 * 0x07) + 0x05)] = Arg1
            }

            Method (ZRCY, 1, NotSerialized)
            {
                Return (DerefOf (ZRCL [((Arg0 * 0x07) + 0x06)]))
            }

            Method (ZRCZ, 2, NotSerialized)
            {
                If (((ZRD1 == Zero) && (ZRD2 == One)))
                {
                    ZRD1 = One
                    Notify (\_TZ.TZ10, 0x81) // Thermal Trip Point Change
                }

                If ((Arg1 == Zero))
                {
                    ZRCM (Arg0, One)
                }

                ZRCL [((Arg0 * 0x07) + 0x06)] = Arg1
            }

            Method (ZRC5, 1, NotSerialized)
            {
                Return (SIO4 (Arg0))
            }

            Method (ZRCD, 1, NotSerialized)
            {
                If (ZRCF)
                {
                    Return (ZRCG) /* \GSA1.ZRCG */
                }
                ElseIf ((Arg0 == 0x0A))
                {
                    Return (ZRCG) /* \GSA1.ZRCG */
                }
                Else
                {
                    Return (SIO0 (Arg0))
                }
            }

            Method (ZRCE, 1, NotSerialized)
            {
                ZRCG = Arg0
            }

            Method (ZRCJ, 1, NotSerialized)
            {
                Local0 = Zero
                Local1 = SizeOf (ZRC8)
                While ((Local0 < Local1))
                {
                    If ((DerefOf (DerefOf (ZRC8 [Local0]) [Zero]) == Arg0))
                    {
                        Return (DerefOf (ZRC8 [Local0]))
                    }

                    Local0++
                }

                Return (Ones)
            }

            Method (ZRCK, 1, NotSerialized)
            {
                Local0 = Zero
                Local1 = SizeOf (ZRC8)
                While ((Local0 < Local1))
                {
                    If ((DerefOf (DerefOf (ZRC8 [Local0]) [Zero]) == Arg0))
                    {
                        Return (Local0)
                    }

                    Local0++
                }

                Return (Ones)
            }

            Method (ZRCV, 0, NotSerialized)
            {
                If ((M085 == 0x0C))
                {
                    DerefOf (ZRC8 [Zero]) [One] = 0x88
                    DerefOf (ZRC8 [One]) [One] = 0x87
                }
                Else
                {
                }
            }

            Method (ZRC1, 1, NotSerialized)
            {
                Local7 = ZRCJ (Arg0)
                If ((ObjectType (Local7) == 0x04))
                {
                    Local1 = DerefOf (Local7 [One])
                    If ((M011 ((M084 + 0x1502), (Local1 * 0x04), 0x07, 
                        One) == Zero))
                    {
                        Return (0x02)
                    }
                    ElseIf ((M011 ((M084 + 0x1502), (Local1 * 0x04), 
                        0x06, One) == Zero))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Return (Ones)
            }

            Method (ZRC2, 2, NotSerialized)
            {
                Local7 = ZRCJ (Arg0)
                If ((ObjectType (Local7) == 0x04))
                {
                    Local1 = DerefOf (Local7 [One])
                    If ((Arg1 == Zero))
                    {
                        M012 ((M084 + 0x1502), (Local1 * 0x04), 0x06, 0x02, 0x02)
                    }
                    ElseIf ((Arg1 == One))
                    {
                        M012 ((M084 + 0x1502), (Local1 * 0x04), 0x06, 0x02, 0x03)
                    }
                    Else
                    {
                        M012 ((M084 + 0x1502), (Local1 * 0x04), 0x06, 0x02, Zero)
                    }
                }
            }

            Method (ZRC7, 3, NotSerialized)
            {
                Local7 = ZRCJ (Arg0)
                If ((ObjectType (Local7) == 0x04))
                {
                    ZRCL [((Arg0 * 0x07) + Zero)] = Arg1
                    ZRCL [((Arg0 * 0x07) + One)] = Arg2
                }
            }

            Method (ZRCA, 1, NotSerialized)
            {
                Local7 = ZRCJ (Arg0)
                If ((ObjectType (Local7) == 0x04))
                {
                    Local0 = DerefOf (ZRCL [((Arg0 * 0x07) + Zero)]
                        )
                    Local1 = DerefOf (ZRCL [((Arg0 * 0x07) + One)]
                        )
                    Return ((Local0 | (Local1 << 0x08)))
                }

                Return (Ones)
            }

            Method (ZRCR, 1, NotSerialized)
            {
                Return (DerefOf (ZRCL [((Arg0 * 0x07) + 0x04)]))
            }

            Method (ZRCM, 2, NotSerialized)
            {
                Local7 = ZRCK (Arg0)
                If ((Local7 != Ones))
                {
                    If (Arg1)
                    {
                        If ((ZRCR (Arg0) == 0x04))
                        {
                            ZRC2 (Arg0, One)
                            SIO9 (Arg0)
                            Sleep (0x01F4)
                            ZRC2 (Arg0, DerefOf (ZRCL [((Arg0 * 0x07) + 0x02)]
                                ))
                        }
                        Else
                        {
                            ZRC2 (Arg0, One)
                            SIO9 (Arg0)
                            Sleep (0x01F4)
                            ZRC2 (Arg0, DerefOf (ZRCL [((Arg0 * 0x07) + 0x02)]
                                ))
                        }
                    }
                    Else
                    {
                        ZRC2 (Arg0, Zero)
                        SIOA (Arg0)
                    }
                }
            }

            Name (ZRD1, Zero)
            Name (ZRD2, Zero)
            Method (ZRC3, 0, NotSerialized)
            {
                If ((ZRCT == One))
                {
                    If ((ZRD0 == One))
                    {
                        ZRCU (Zero)
                        ZRCQ ()
                        ZRD0 = Zero
                        ZRCU (One)
                    }

                    Local6 = Zero
                    Local5 = SizeOf (ZRC8)
                    While ((Local6 < Local5))
                    {
                        If (DerefOf (ZRCL [((Local6 * 0x07) + 0x06)]))
                        {
                            Local0 = ZRCD (DerefOf (ZRCL [((Local6 * 0x07) + 0x05
                                )]))
                            Local7 = ZRCJ (Local6)
                            If ((ObjectType (Local7) == 0x04))
                            {
                                Local1 = DerefOf (Local7 [Zero])
                                If (DerefOf (ZRCL [((Local6 * 0x07) + 0x03)]))
                                {
                                    Local2 = DerefOf (ZRCL [((Local1 * 0x07) + One)]
                                        )
                                    Local3 = DerefOf (ZRCL [((Local1 * 0x07) + Zero)]
                                        )
                                    Local4 = SIO4 (Local1)
                                    If ((Local1 == 0x02))
                                    {
                                        If ((Local4 == 0xFFFF))
                                        {
                                            If (SIOD (Local1))
                                            {
                                                Local4 = 0xFFFF
                                            }
                                            Else
                                            {
                                                Local4 = 0x0BB8
                                            }
                                        }
                                    }

                                    If ((Local4 != 0xFFFF))
                                    {
                                        If ((Local0 <= Local3))
                                        {
                                            ZRCM (Local1, Zero)
                                        }
                                    }
                                    ElseIf ((Local0 >= Local2))
                                    {
                                        ZRCM (Local1, One)
                                    }
                                }
                            }
                        }

                        Local6++
                    }
                }
            }

            Name (DIC3, Package (0x04)
            {
                Buffer (0x04)
                {
                     0x09, 0x09, 0x01, 0x07                           // ....
                }, 

                Buffer (0x04)
                {
                     0x04, 0x04, 0x02, 0x07                           // ....
                }, 

                Buffer (0x04)
                {
                     0x01, 0x01, 0x02, 0x01                           // ....
                }, 

                Buffer (0x04)
                {
                     0x00, 0x01, 0x02, 0x01                           // ....
                }
            })
            Method (DIM0, 0, Serialized)
            {
                Local2 = PFM7 ()
                Local7 = DerefOf (Local2)
                Local0 = SizeOf (Local7)
                Local1 = Zero
                While ((Local1 < Local0))
                {
                    Local5 = DerefOf (DerefOf (Local7 [Local1]) [Zero])
                    Local6 = DerefOf (DerefOf (Local7 [Local1]) [One])
                    Local4 = Zero
                    If ((SMM3 (Local5, Local6, Zero) != 0xFFFF))
                    {
                        Local4 = One
                        If ((SMM3 (Local5, ((Local6 & 0x0F) | 0x30), 
                            Zero) != 0xFFFF))
                        {
                            Local4 |= 0x04
                        }
                    }

                    DerefOf (DerefOf (Local2) [Local1]) [0x02] = Local4
                    Local1++
                }
            }

            Method (DIM6, 1, Serialized)
            {
                Return ("KingStone")
            }

            Method (DIMC, 0, Serialized)
            {
                Name (DIMG, Buffer (0x03){})
                Local2 = PFM7 ()
                Local7 = DerefOf (Local2)
                Local0 = SizeOf (Local7)
                Local1 = Zero
                While ((Local1 < Local0))
                {
                    Local4 = DerefOf (DerefOf (Local7 [Local1]) [0x02])
                    Local5 = (One << Local1)
                    If ((Local4 & One))
                    {
                        DIMG [Zero] = (DerefOf (DIMG [Zero]) | Local5
                            )
                    }

                    If ((Local4 & 0x02))
                    {
                        DIMG [One] = (DerefOf (DIMG [One]) | Local5
                            )
                    }

                    If ((Local4 & 0x04))
                    {
                        DIMG [0x02] = (DerefOf (DIMG [0x02]) | Local5
                            )
                    }

                    Local1++
                }

                Return (DIMG) /* \GSA1.DIMC.DIMG */
            }

            Method (DIMD, 1, Serialized)
            {
                Local2 = PFM7 ()
                Local7 = DerefOf (Local2)
                If ((Arg0 < SizeOf (Local7)))
                {
                    Local5 = DerefOf (DerefOf (Local7 [Arg0]) [Zero])
                    Local6 = ((DerefOf (DerefOf (Local7 [Arg0]) [One]) & 
                        0x0F) | 0x30)
                    Local4 = DerefOf (DerefOf (Local7 [Arg0]) [0x02])
                    If ((Local4 & 0x04))
                    {
                        Return ((SMM5 (Local5, Local6, 0x05) & 0x1FFF))
                    }
                }

                Return (Ones)
            }

            Method (DIM1, 1, Serialized)
            {
                Name (DATB, Buffer (0x0200){})
                Name (DATC, Buffer (0x04){})
                CreateWordField (DATC, Zero, DIM8)
                CreateWordField (DATC, 0x02, DIM9)
                Local2 = PFM7 ()
                Local7 = DerefOf (Local2)
                If ((Arg0 < SizeOf (Local7)))
                {
                    Local0 = SMM8 (DerefOf (DerefOf (Local7 [Arg0]) [Zero]), 
                        DerefOf (DerefOf (Local7 [Arg0]) [One]), DATB)
                    If ((Local0 == Zero))
                    {
                        DIM8 = Zero
                        DIM9 = 0x0200
                        Concatenate (DATC, DATB, Local1)
                        Return (Local1)
                    }
                }

                DIM8 = 0xFFFF
                DIM9 = Zero
                Concatenate (DATC, DATB, Local1)
                Return (Local1)
            }

            Name (EVT1, Zero)
            Method (EVT0, 0, Serialized)
            {
            }

            Method (EVT2, 1, Serialized)
            {
                EVT1 = Arg0
                Notify (\GSA1, 0xE2) // Hardware-Specific
            }

            Name (GGGA, Package (0x05)
            {
                "F31", 
                "B450M DS3H", 
                "B450MDS3H", 
                "8A16BG05", 
                0x01000000
            })
            Name (GGGB, "20190412")
            Name (GGGC, Zero)
            Method (GGG1, 0, Serialized)
            {
                Return (GGGB) /* \GSA1.GGGB */
            }

            Method (GGG2, 0, Serialized)
            {
                Return (GGGD) /* \GSA1.GGGD */
            }

            Method (GGG3, 0, Serialized)
            {
                Return (DerefOf (GGGA [0x03]))
            }

            Method (GGG4, 0, Serialized)
            {
                Return (DerefOf (GGGA [Zero]))
            }

            Method (GGG5, 0, Serialized)
            {
                Return (DerefOf (GGGA [One]))
            }

            Method (GGG6, 0, Serialized)
            {
                Return (DerefOf (GGGA [0x04]))
            }

            Method (GGG7, 0, Serialized)
            {
                Return (GGG9 (Zero))
            }

            Method (GGG8, 0, Serialized)
            {
                Return (GGGB) /* \GSA1.GGGB */
            }

            Method (GGG9, 1, Serialized)
            {
                Local0 = Zero
                Switch (ToInteger (Arg0))
                {
                    Case (Zero)
                    {
                        Local0 = GGGC /* \GSA1.GGGC */
                    }
                    Case (0x04)
                    {
                        Local0 = 0x30020507
                    }
                    Case (0x08)
                    {
                        Local0 = 0x08210001
                    }

                }

                Return (Local0)
            }

            Name (GGGK, Package (0x16)
            {
                0x23A1, 
                0x1FBE, 
                0x1C48, 
                0x1AB1, 
                0x17C8, 
                0x1530, 
                0x12E0, 
                0x11D1, 
                0x0FDF, 
                0x0E24, 
                0x0D59, 
                0x0BE4, 
                0x0A98, 
                0x0970, 
                0x08E8, 
                0x07F0, 
                0x0712, 
                0x06AC, 
                0x05F2, 
                0x054C, 
                0x04B8, 
                0x0474
            })
            Method (GGGH, 3, Serialized)
            {
                Local0 = 0x11D1
                If ((Arg0 == 0x03))
                {
                    Local5 = SizeOf (GGGK)
                    Local0 = Zero
                    If (((Arg1 > Zero) && (Arg1 <= Local5)))
                    {
                        Local0 = DerefOf (GGGK [(Arg1 - One)])
                    }

                    Local1 = Arg2
                }
                ElseIf ((Arg0 == 0x02))
                {
                    Local0 = Arg1
                    Local1 = Arg2
                }
                ElseIf ((Arg0 == 0x04))
                {
                    Local0 = ((0x001234DE + (Arg1 >> One)) / Arg1)
                    Local1 = Arg2
                }
                ElseIf ((Arg0 == One))
                {
                    Local0 = 0x11D1
                    Local1 = 0x03E8
                }
                ElseIf ((Arg0 == Zero))
                {
                    Local0 = 0x11D1
                    Local1 = 0x03E8
                }

                If (Local0)
                {
                    PIO7 (0x53, Zero, 0xB6)
                    PIO7 (0x52, Zero, (Local0 & 0xFF))
                    PIO7 (0x52, Zero, ((Local0 >> 0x08) & 0xFF))
                    PIO7 (0x61, Zero, (PIO6 (0x61, Zero) | 0x03))
                    Sleep (Local1)
                    PIO7 (0x61, Zero, (PIO6 (0x61, Zero) & 0xFC))
                }
                Else
                {
                    Sleep (Local1)
                }
            }

            Method (MPTS, 1, NotSerialized)
            {
            }

            Method (MWAK, 1, NotSerialized)
            {
                PFM1 (Arg0)
            }

            OperationRegion (GGGT, SystemMemory, 0xDBE6BB18, 0x0100)
            Field (GGGT, DWordAcc, Lock, Preserve)
            {
                Offset (0x09), 
                CCNT,   8, 
                E8CV,   8, 
                EVIH,   8
            }

            Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "GSADEV0")  // _UID: Unique ID
            Name (MARK, "Mark Tsai<mark@gigabyte.com><marktsai0316@gmail.com>")
            Method (_INI, 0, Serialized)  // _INI: Initialize
            {
                PFM0 ()
                GGGC = (GGGC | 0x10)
                GGGC = (GGGC | 0x20)
                GGGC = (GGGC | 0x40)
                GGGC = (GGGC | 0x80)
                GGGC = (GGGC | 0x0800)
                EVT0 ()
                DIM0 ()
                GGGC = (GGGC | 0x4000)
            }

            Method (_WDG, 0, Serialized)
            {
                Return (QWDG) /* \GSA1.QWDG */
            }

            Name (QWDG, Buffer (0x50)
            {
                /* 0000 */  0x21, 0x12, 0x90, 0x05, 0x66, 0xD5, 0xD1, 0x11,  // !...f...
                /* 0008 */  0xB2, 0xF0, 0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10,  // ......).
                /* 0010 */  0x43, 0x43, 0x01, 0x00, 0xEF, 0xBE, 0xAD, 0xDE,  // CC......
                /* 0018 */  0x00, 0x10, 0x00, 0x00, 0x00, 0xA0, 0xC9, 0x06,  // ........
                /* 0020 */  0x29, 0x10, 0x00, 0x00, 0x41, 0x41, 0x01, 0x01,  // )...AA..
                /* 0028 */  0xEF, 0xBE, 0xAD, 0xDE, 0x01, 0x20, 0x00, 0x00,  // ..... ..
                /* 0030 */  0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10, 0x00, 0x00,  // ....)...
                /* 0038 */  0x42, 0x42, 0x01, 0x02, 0xEF, 0xBE, 0xAD, 0xDE,  // BB......
                /* 0040 */  0x02, 0x40, 0x00, 0x00, 0x00, 0xA0, 0xC9, 0x06,  // .@......
                /* 0048 */  0x29, 0x10, 0x00, 0x00, 0xE2, 0x00, 0x01, 0x08   // ).......
            })
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                Return (0x0B)
            }

            Name (WQCC, Buffer (0x2776)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0x66, 0x27, 0x00, 0x00, 0x92, 0xB2, 0x01, 0x00,  // f'......
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0xA8, 0xAF, 0x90, 0x01, 0x01, 0x08, 0x09, 0x42,  // .......B
                /* 0020 */  0xD8, 0x06, 0x84, 0xC4, 0x39, 0xA0, 0x10, 0x81,  // ....9...
                /* 0028 */  0xE4, 0x13, 0x49, 0x0E, 0x0C, 0x4A, 0x02, 0x88,  // ..I..J..
                /* 0030 */  0xE4, 0x40, 0xC8, 0x05, 0x13, 0x13, 0x20, 0x02,  // .@.... .
                /* 0038 */  0x42, 0x5E, 0x05, 0xD8, 0x14, 0x60, 0x12, 0x44,  // B^...`.D
                /* 0040 */  0xFD, 0xFB, 0x43, 0x94, 0x06, 0x45, 0x09, 0x2C,  // ..C..E.,
                /* 0048 */  0x04, 0x42, 0x32, 0x05, 0xF8, 0x16, 0xE0, 0x58,  // .B2....X
                /* 0050 */  0x80, 0x61, 0x01, 0xB2, 0x05, 0x58, 0x86, 0x22,  // .a...X."
                /* 0058 */  0xA8, 0x9D, 0x0A, 0x90, 0x2B, 0x40, 0x98, 0x00,  // ....+@..
                /* 0060 */  0xF1, 0xA8, 0xC2, 0x68, 0x0E, 0x8A, 0x84, 0x83,  // ...h....
                /* 0068 */  0x46, 0x89, 0x81, 0x90, 0x44, 0x58, 0x39, 0xC7,  // F...DX9.
                /* 0070 */  0x96, 0x72, 0x01, 0xA6, 0x05, 0x08, 0x17, 0x20,  // .r..... 
                /* 0078 */  0x1D, 0x43, 0x23, 0xA8, 0x1B, 0x4C, 0x52, 0x05,  // .C#..LR.
                /* 0080 */  0x88, 0x86, 0x11, 0x5A, 0x41, 0x70, 0x1A, 0xC4,  // ...ZAp..
                /* 0088 */  0x51, 0x44, 0x09, 0xC3, 0xF0, 0x8C, 0x19, 0x28,  // QD.....(
                /* 0090 */  0x5C, 0x90, 0x48, 0x86, 0x09, 0x7A, 0x02, 0x41,  // \.H..z.A
                /* 0098 */  0x4A, 0xC6, 0x90, 0x66, 0x2C, 0x02, 0x71, 0x06,  // J..f,.q.
                /* 00A0 */  0x1C, 0x2B, 0x46, 0xA8, 0x90, 0x98, 0x81, 0x04,  // .+F.....
                /* 00A8 */  0x3F, 0x81, 0xAE, 0x31, 0xE4, 0x19, 0x88, 0x58,  // ?..1...X
                /* 00B0 */  0x9F, 0x80, 0x40, 0xA2, 0x47, 0x09, 0x6E, 0x5C,  // ..@.G.n\
                /* 00B8 */  0xA3, 0xB2, 0x31, 0x9D, 0x0D, 0x6E, 0x60, 0x26,  // ..1..n`&
                /* 00C0 */  0x88, 0x73, 0x78, 0x18, 0x19, 0x10, 0x9A, 0x40,  // .sx....@
                /* 00C8 */  0xFC, 0xD8, 0xE1, 0x13, 0xD8, 0xFD, 0x0C, 0x65,  // .......e
                /* 00D0 */  0x51, 0x80, 0x41, 0x0C, 0x29, 0x04, 0x11, 0x42,  // Q.A.)..B
                /* 00D8 */  0x8D, 0x02, 0x6C, 0x0D, 0x56, 0xC6, 0x20, 0x84,  // ..l.V. .
                /* 00E0 */  0x10, 0xC5, 0x08, 0x0C, 0x85, 0x61, 0x46, 0xB1,  // .....aF.
                /* 00E8 */  0xC3, 0x39, 0x0B, 0xA4, 0x36, 0x01, 0xCA, 0x40,  // .9..6..@
                /* 00F0 */  0x04, 0xCA, 0x10, 0x98, 0xFD, 0x41, 0x90, 0x40,  // .....A.@
                /* 00F8 */  0xE7, 0x01, 0xFD, 0x08, 0x2C, 0x09, 0x44, 0x46,  // ....,.DF
                /* 0100 */  0xB6, 0x94, 0x80, 0x1C, 0x06, 0x12, 0x1C, 0x8E,  // ........
                /* 0108 */  0x27, 0xD2, 0xFC, 0xCC, 0x34, 0x2A, 0x26, 0x01,  // '...4*&.
                /* 0110 */  0x50, 0x1A, 0x40, 0x24, 0x0A, 0x42, 0xBF, 0x03,  // P.@$.B..
                /* 0118 */  0x2A, 0x40, 0xCA, 0xC9, 0x80, 0xD8, 0x1E, 0x97,  // *@......
                /* 0120 */  0xE6, 0x74, 0x80, 0xA7, 0xEE, 0xBB, 0xC1, 0x99,  // .t......
                /* 0128 */  0xF9, 0xAC, 0xE0, 0x2D, 0xF8, 0xFF, 0x7F, 0x46,  // ...-...F
                /* 0130 */  0xE0, 0x63, 0xF0, 0x50, 0x0F, 0x21, 0xE0, 0x11,  // .c.P.!..
                /* 0138 */  0xB2, 0x43, 0x82, 0x01, 0xF1, 0xDE, 0x6F, 0x05,  // .C....o.
                /* 0140 */  0x64, 0x2E, 0x06, 0x64, 0x07, 0x85, 0xE7, 0x03,  // d..d....
                /* 0148 */  0xB0, 0x4C, 0xF2, 0x34, 0x8F, 0xA1, 0xE2, 0xA9,  // .L.4....
                /* 0150 */  0x21, 0x8E, 0x04, 0x7C, 0x2A, 0x27, 0xC5, 0x08,  // !..|*'..
                /* 0158 */  0x7C, 0x8C, 0xF0, 0xE8, 0xF8, 0x28, 0x7C, 0x76,  // |....(|v
                /* 0160 */  0x38, 0xED, 0x62, 0x8F, 0x10, 0x54, 0xD6, 0x31,  // 8.b..T.1
                /* 0168 */  0x02, 0x3D, 0xF7, 0x23, 0x0C, 0xF8, 0xD2, 0xD0,  // .=.#....
                /* 0170 */  0xAC, 0x00, 0xA1, 0xF7, 0x00, 0x11, 0xBC, 0x0E,  // ........
                /* 0178 */  0xF8, 0xC6, 0x60, 0x71, 0x30, 0x3A, 0x51, 0xE0,  // ..`q0:Q.
                /* 0180 */  0x87, 0x6E, 0xBF, 0x02, 0x10, 0x42, 0x9F, 0xDB,  // .n...B..
                /* 0188 */  0x49, 0x3C, 0x50, 0x44, 0x48, 0xD0, 0x23, 0x86,  // I<PDH.#.
                /* 0190 */  0x60, 0xCE, 0x2A, 0xD6, 0x01, 0x3C, 0x09, 0x24,  // `.*..<.$
                /* 0198 */  0x28, 0x70, 0x88, 0x68, 0x68, 0xAE, 0x13, 0x53,  // (p.hh..S
                /* 01A0 */  0x43, 0x39, 0x91, 0xB8, 0x41, 0xA3, 0x9C, 0xC0,  // C9..A...
                /* 01A8 */  0xB1, 0x78, 0x9C, 0xC7, 0xF7, 0xD8, 0xE0, 0x23,  // .x.....#
                /* 01B0 */  0xC6, 0x39, 0xBF, 0x05, 0x78, 0x70, 0x9C, 0xC0,  // .9..xp..
                /* 01B8 */  0x12, 0x1F, 0x1E, 0x3E, 0x7B, 0x50, 0x51, 0x30,  // ...>{PQ0
                /* 01C0 */  0xA8, 0xE3, 0x07, 0xE0, 0xE6, 0xFF, 0x7F, 0xFC,  // ........
                /* 01C8 */  0x00, 0x2C, 0x41, 0x3C, 0x7E, 0x80, 0x33, 0x96,  // .,A<~.3.
                /* 01D0 */  0x82, 0xF3, 0x00, 0x3B, 0x7E, 0x00, 0xDC, 0xF8,  // ...;~...
                /* 01D8 */  0xFF, 0x1F, 0x3F, 0xB8, 0x8C, 0x91, 0x1B, 0x96,  // ..?.....
                /* 01E0 */  0x8E, 0xDC, 0xC0, 0xBE, 0x4D, 0x9C, 0x89, 0x21,  // ....M..!
                /* 01E8 */  0x1E, 0x14, 0x4C, 0xE0, 0xD0, 0x10, 0xB2, 0x30,  // ..L....0
                /* 01F0 */  0x74, 0xD0, 0x7C, 0x07, 0x34, 0x74, 0x40, 0xC6,  // t.|.4t@.
                /* 01F8 */  0x09, 0x06, 0xB8, 0x61, 0x3C, 0xC1, 0x00, 0x93,  // ...a<...
                /* 0200 */  0xF0, 0x67, 0x04, 0x54, 0x5C, 0x18, 0x14, 0x81,  // .g.T\...
                /* 0208 */  0xA3, 0x1E, 0x07, 0xE8, 0xC8, 0x3C, 0x30, 0xF8,  // .....<0.
                /* 0210 */  0x07, 0x19, 0x36, 0x97, 0xDA, 0x27, 0xAD, 0x61,  // ..6..'.a
                /* 0218 */  0x9A, 0xC0, 0x23, 0x83, 0xF3, 0xFF, 0x1F, 0x19,  // ..#.....
                /* 0220 */  0xB8, 0xE6, 0x7E, 0x00, 0x98, 0xE3, 0x84, 0x07,  // ..~.....
                /* 0228 */  0xC0, 0xC1, 0x5B, 0xBD, 0x01, 0x10, 0xA5, 0x13,  // ..[.....
                /* 0230 */  0x42, 0x12, 0x84, 0x33, 0xD6, 0xDB, 0xCD, 0x19,  // B..3....
                /* 0238 */  0xBC, 0x1C, 0xF8, 0x28, 0x63, 0x8C, 0xF7, 0x83,  // ...(c...
                /* 0240 */  0xA3, 0xC2, 0x9E, 0x7F, 0x10, 0x47, 0x39, 0x94,  // .....G9.
                /* 0248 */  0xA8, 0xD3, 0x1C, 0x40, 0xA4, 0xCB, 0x0F, 0xEE,  // ...@....
                /* 0250 */  0xFC, 0x03, 0xEB, 0xFF, 0x7F, 0xFE, 0x81, 0x78,  // .......x
                /* 0258 */  0x9A, 0x03, 0xA8, 0x72, 0x0C, 0xC1, 0x1D, 0x5E,  // ...r...^
                /* 0260 */  0xC0, 0x71, 0x61, 0xC0, 0x1D, 0x4B, 0x80, 0x03,  // .qa..K..
                /* 0268 */  0x3C, 0x17, 0x78, 0xFC, 0x40, 0x49, 0x3A, 0x81,  // <.x.@I:.
                /* 0270 */  0x80, 0xE6, 0xFF, 0x7F, 0x02, 0x01, 0x58, 0x72,  // ......Xr
                /* 0278 */  0xA0, 0x03, 0x6B, 0xA8, 0x13, 0x08, 0x15, 0x74,  // ..k....t
                /* 0280 */  0x02, 0x81, 0xFE, 0xEC, 0xF0, 0x09, 0x04, 0xB8,  // ........
                /* 0288 */  0x8A, 0x1C, 0x31, 0xEA, 0xFF, 0x7F, 0x3E, 0x80,  // ..1...>.
                /* 0290 */  0x6B, 0x6D, 0x94, 0x9A, 0xE6, 0x1B, 0x08, 0xF6,  // km......
                /* 0298 */  0x00, 0x02, 0x8E, 0xF7, 0x9A, 0x0F, 0x20, 0xC0,  // ...... .
                /* 02A0 */  0x0C, 0xE4, 0xC8, 0xCE, 0xE8, 0xAC, 0xF9, 0x01,  // ........
                /* 02A8 */  0x04, 0xB8, 0x08, 0x7A, 0xE7, 0xF9, 0xF4, 0xC1,  // ...z....
                /* 02B0 */  0x61, 0x70, 0x07, 0x10, 0x40, 0xED, 0xFF, 0xFF,  // ap..@...
                /* 02B8 */  0x00, 0x02, 0x2C, 0x6F, 0x10, 0x0F, 0x20, 0xE0,  // ..,o.. .
                /* 02C0 */  0x0C, 0xF1, 0x8E, 0xD0, 0x8F, 0xC0, 0xC1, 0x21,  // .......!
                /* 02C8 */  0xA4, 0xE4, 0x5C, 0x09, 0x3D, 0xE6, 0xB9, 0x12,  // ..\.=...
                /* 02D0 */  0x54, 0x27, 0x10, 0xE0, 0x70, 0xD0, 0xC0, 0x1D,  // T'..p...
                /* 02D8 */  0x10, 0xE0, 0x12, 0xF8, 0x24, 0xED, 0x33, 0x07,  // ....$.3.
                /* 02E0 */  0x38, 0x4E, 0x57, 0x26, 0xF0, 0x60, 0xE1, 0x9C,  // 8NW&.`..
                /* 02E8 */  0x22, 0x9E, 0xFE, 0x7C, 0x17, 0x78, 0x2D, 0xF0,  // "..|.x-.
                /* 02F0 */  0x60, 0xC1, 0x77, 0x26, 0x85, 0xFB, 0xFF, 0x1F,  // `.w&....
                /* 02F8 */  0x2C, 0xE0, 0xE0, 0xE0, 0x03, 0x5C, 0x0E, 0x43,  // ,....\.C
                /* 0300 */  0xE4, 0xE0, 0x03, 0xC8, 0x9F, 0x7E, 0xF8, 0x77,  // .....~.w
                /* 0308 */  0x95, 0x08, 0xE7, 0xE5, 0x83, 0x00, 0x3B, 0xF8,  // ......;.
                /* 0310 */  0xC0, 0xFD, 0xFF, 0x1F, 0x7C, 0x00, 0x16, 0x3A,  // ....|..:
                /* 0318 */  0x3B, 0xF8, 0x00, 0xF1, 0xFF, 0xFF, 0xC1, 0x07,  // ;.......
                /* 0320 */  0xE0, 0xFF, 0xFF, 0xFF, 0xE0, 0x03, 0xDC, 0x2E,  // ........
                /* 0328 */  0x17, 0xBE, 0x5E, 0x3C, 0xA5, 0xBC, 0xF8, 0xC0,  // ..^<....
                /* 0330 */  0x3B, 0xF8, 0x40, 0x7C, 0xC4, 0xE8, 0xE0, 0x03,  // ;.@|....
                /* 0338 */  0x0C, 0xE7, 0xC5, 0x06, 0x80, 0x3F, 0xF8, 0x00,  // .....?..
                /* 0340 */  0xBE, 0xFF, 0xFF, 0x07, 0x1F, 0xC0, 0xD2, 0x70,  // .......p
                /* 0348 */  0x1F, 0x7C, 0x00, 0x5E, 0xFD, 0xFF, 0x0F, 0x3E,  // .|.^...>
                /* 0350 */  0x00, 0xF7, 0xEE, 0x28, 0x6C, 0x84, 0x0F, 0x3E,  // ...(l..>
                /* 0358 */  0x20, 0x5C, 0xB5, 0x0E, 0x3E, 0xC0, 0xE3, 0xFF,  //  \..>...
                /* 0360 */  0x7F, 0xF0, 0x81, 0x39, 0xAF, 0x97, 0x10, 0x76,  // ...9...v
                /* 0368 */  0xF0, 0x01, 0x26, 0xA9, 0x7D, 0x5F, 0x3F, 0x4C,  // ..&.}_?L
                /* 0370 */  0x30, 0x06, 0x87, 0xC4, 0x2D, 0x93, 0xC2, 0xF8,  // 0...-...
                /* 0378 */  0x5C, 0xE0, 0x83, 0x0F, 0x5C, 0x49, 0x70, 0xA8,  // \...\Ip.
                /* 0380 */  0x01, 0xFA, 0x10, 0x70, 0xEE, 0xC7, 0x79, 0xE2,  // ...p..y.
                /* 0388 */  0x07, 0xE2, 0x5B, 0xC0, 0x13, 0x10, 0x8C, 0x73,  // ..[....s
                /* 0390 */  0x82, 0x27, 0x75, 0x4A, 0xD6, 0x7E, 0x8E, 0x21,  // .'uJ.~.!
                /* 0398 */  0x57, 0x1A, 0x13, 0xF8, 0xB0, 0xC0, 0xD0, 0xF8,  // W.......
                /* 03A0 */  0x71, 0x08, 0xAC, 0x07, 0x84, 0xE7, 0x04, 0xB0,  // q.......
                /* 03A8 */  0xCC, 0xF9, 0x5D, 0x08, 0x73, 0xF0, 0xC1, 0x00,  // ..].s...
                /* 03B0 */  0xC6, 0x7B, 0xF0, 0x31, 0xEA, 0x51, 0xF9, 0xA8,  // .{.1.Q..
                /* 03B8 */  0xE0, 0x03, 0x90, 0xC7, 0x1F, 0x36, 0x42, 0x90,  // .....6B.
                /* 03C0 */  0xF3, 0x8A, 0xF3, 0x60, 0x62, 0xC0, 0xB0, 0xC1,  // ...`b...
                /* 03C8 */  0x4D, 0xE0, 0xC3, 0x0F, 0xF8, 0xAE, 0x3C, 0x4F,  // M.....<O
                /* 03D0 */  0x07, 0xBE, 0x1E, 0x3C, 0xFC, 0x80, 0xE7, 0xFF,  // ...<....
                /* 03D8 */  0x7F, 0xF8, 0xC1, 0xC5, 0x3A, 0x5B, 0xD1, 0x48,  // ....:[.H
                /* 03E0 */  0xA3, 0x41, 0x9D, 0x15, 0x7C, 0x2E, 0xF0, 0x99,  // .A..|...
                /* 03E8 */  0xE0, 0xD1, 0xC9, 0xC7, 0x0A, 0x83, 0x9C, 0xEB,  // ........
                /* 03F0 */  0xA1, 0x3D, 0x2F, 0x3C, 0x10, 0x78, 0xE8, 0x0C,  // .=/<.x..
                /* 03F8 */  0xEB, 0xD1, 0x82, 0x9D, 0x10, 0xF0, 0x17, 0xA7,  // ........
                /* 0400 */  0x80, 0xAF, 0x06, 0x4F, 0x1F, 0xB0, 0x4E, 0x21,  // ...O..N!
                /* 0408 */  0xF8, 0xD3, 0x0A, 0xFC, 0xF1, 0xF8, 0x24, 0xE0,  // ......$.
                /* 0410 */  0x13, 0x8E, 0x8F, 0x61, 0x64, 0x10, 0xA8, 0x93,  // ...ad...
                /* 0418 */  0x0E, 0x1F, 0xE9, 0x69, 0xBD, 0x10, 0xF8, 0x9C,  // ...i....
                /* 0420 */  0x70, 0x58, 0xEC, 0xEC, 0xE1, 0xF3, 0x0D, 0x38,  // pX.....8
                /* 0428 */  0xC6, 0x03, 0xFF, 0x5E, 0xF2, 0x94, 0xE1, 0x5B,  // ...^...[
                /* 0430 */  0x83, 0xE7, 0xEB, 0xD3, 0x82, 0x0F, 0x21, 0xE0,  // ......!.
                /* 0438 */  0xBA, 0x76, 0x78, 0x08, 0x27, 0xE1, 0x7B, 0x02,  // .vx.'.{.
                /* 0440 */  0xE6, 0x14, 0x02, 0x0C, 0xF2, 0xC8, 0x7E, 0x1B,  // ......~.
                /* 0448 */  0x84, 0x7A, 0x04, 0xD1, 0x42, 0x65, 0xE3, 0xBC,  // .z..Be..
                /* 0450 */  0x43, 0xC7, 0x64, 0xB1, 0x27, 0x04, 0x8D, 0xE7,  // C.d.'...
                /* 0458 */  0xDC, 0x4F, 0xED, 0x00, 0x5F, 0x2B, 0x7C, 0x2E,  // .O.._+|.
                /* 0460 */  0xB0, 0x48, 0x28, 0x5D, 0x47, 0x0C, 0x61, 0x79,  // .H(]G.ay
                /* 0468 */  0xE7, 0x11, 0x43, 0x68, 0x30, 0x86, 0xF6, 0xFF,  // ..Ch0...
                /* 0470 */  0x5F, 0x0E, 0x1C, 0x05, 0xF1, 0xD8, 0x1D, 0x15,  // _.......
                /* 0478 */  0x42, 0x36, 0x8E, 0x01, 0xA8, 0xC1, 0xFB, 0xE2,  // B6......
                /* 0480 */  0xC3, 0x09, 0x1C, 0xED, 0x5F, 0xC8, 0xCE, 0x0A,  // ...._...
                /* 0488 */  0x10, 0xC6, 0xF4, 0x58, 0x71, 0x2C, 0x3E, 0x2B,  // ...Xq,>+
                /* 0490 */  0x81, 0xEF, 0xA4, 0x83, 0x1F, 0xFA, 0x7B, 0x80,  // ......{.
                /* 0498 */  0x09, 0xD8, 0x11, 0x08, 0x77, 0x2C, 0x80, 0x33,  // ....w,.3
                /* 04A0 */  0x83, 0xD7, 0x82, 0xAA, 0xC7, 0xA1, 0xDB, 0x82,  // ........
                /* 04A8 */  0xD5, 0x5D, 0x06, 0x50, 0x78, 0x0F, 0x76, 0xB8,  // .].Px.v.
                /* 04B0 */  0x03, 0x0F, 0x58, 0x80, 0x7C, 0x19, 0xB0, 0xD2,  // ..X.|...
                /* 04B8 */  0x03, 0x01, 0x9D, 0x49, 0x88, 0x30, 0xD1, 0x0C,  // ...I.0..
                /* 04C0 */  0x8F, 0x39, 0x7D, 0xF1, 0x81, 0x7A, 0x74, 0x7C,  // .9}..zt|
                /* 04C8 */  0xA0, 0x3E, 0xC6, 0xB0, 0x83, 0x02, 0xEE, 0xE8,  // .>......
                /* 04D0 */  0x86, 0x81, 0xF5, 0xD0, 0x39, 0xAC, 0xD1, 0xC2,  // ....9...
                /* 04D8 */  0x1E, 0xF1, 0x33, 0x84, 0xEF, 0x1F, 0xBE, 0x18,  // ..3.....
                /* 04E0 */  0xF9, 0xDA, 0xE2, 0x93, 0x07, 0x58, 0x4E, 0x62,  // .....XNb
                /* 04E8 */  0xC0, 0x45, 0xDA, 0xF1, 0x81, 0xFE, 0xFF, 0x09,  // .E......
                /* 04F0 */  0x7C, 0x10, 0xB2, 0xD4, 0xE3, 0x03, 0x02, 0xE3,  // |.......
                /* 04F8 */  0x10, 0x7D, 0x1E, 0x38, 0xCB, 0x67, 0x02, 0x1F,  // .}.8.g..
                /* 0500 */  0xFD, 0x7C, 0x1C, 0xC1, 0x09, 0x3B, 0x43, 0xA0,  // .|...;C.
                /* 0508 */  0x24, 0x51, 0xE8, 0x3C, 0xE6, 0x33, 0x04, 0x97,  // $Q.<.3..
                /* 0510 */  0x00, 0x47, 0x41, 0x7C, 0x86, 0x70, 0xBC, 0x23,  // .GA|.p.#
                /* 0518 */  0x0C, 0x7A, 0x74, 0xD6, 0x7A, 0x10, 0x22, 0x67,  // .zt.z."g
                /* 0520 */  0x87, 0xA3, 0x73, 0x9C, 0x33, 0x04, 0x50, 0x3D,  // ..s.3.P=
                /* 0528 */  0xC8, 0x80, 0xEF, 0xF4, 0x00, 0xBC, 0x87, 0xEF,  // ........
                /* 0530 */  0xD3, 0x03, 0x70, 0xFD, 0xFF, 0x9F, 0x1E, 0x80,  // ..p.....
                /* 0538 */  0xCB, 0x81, 0xEA, 0x2C, 0x8F, 0xF8, 0x6D, 0xC4,  // ...,..m.
                /* 0540 */  0xB7, 0x07, 0xEC, 0xE9, 0x01, 0xE0, 0x17, 0xA4,  // ........
                /* 0548 */  0x4F, 0x0F, 0xE0, 0xFD, 0xFF, 0x9F, 0x1E, 0x00,  // O.......
                /* 0550 */  0x07, 0x07, 0x85, 0x77, 0x3E, 0x9F, 0x1E, 0x00,  // ...w>...
                /* 0558 */  0xB6, 0x0D, 0xDA, 0xB0, 0xFE, 0xFF, 0x9F, 0x1E,  // ........
                /* 0560 */  0x00, 0x6F, 0x37, 0x54, 0x9F, 0xD7, 0x9E, 0x1E,  // .o7T....
                /* 0568 */  0x00, 0x06, 0xFD, 0xFF, 0x4F, 0x0F, 0xE0, 0x82,  // ....O...
                /* 0570 */  0xE5, 0xA7, 0x07, 0xC0, 0x89, 0xB0, 0xD3, 0x03,  // ........
                /* 0578 */  0x8A, 0xC3, 0x42, 0x4F, 0x0F, 0x10, 0x0E, 0xC5,  // ..BO....
                /* 0580 */  0x6C, 0x90, 0x47, 0x1C, 0xBC, 0xFA, 0x91, 0x90,  // l.G.....
                /* 0588 */  0xC3, 0x03, 0xF8, 0x9C, 0x1C, 0x1E, 0x00, 0x4D,  // .......M
                /* 0590 */  0xE7, 0x75, 0xEE, 0xEC, 0xA8, 0xAC, 0xC3, 0x03,  // .u......
                /* 0598 */  0xFC, 0xFF, 0xFF, 0xE1, 0x01, 0xB8, 0x1D, 0xD3,  // ........
                /* 05A0 */  0x7D, 0x78, 0x00, 0xBC, 0x1C, 0x7F, 0x71, 0xA2,  // }x....q.
                /* 05A8 */  0x8E, 0xBF, 0xC8, 0xC3, 0x03, 0x1B, 0x77, 0x94,  // ......w.
                /* 05B0 */  0xD0, 0x21, 0x5E, 0x64, 0x63, 0x9F, 0xDB, 0x99,  // .!^dc...
                /* 05B8 */  0xF8, 0x8A, 0x7D, 0x10, 0xAF, 0x03, 0x3E, 0x3E,  // ..}...>>
                /* 05C0 */  0x00, 0x36, 0xFF, 0xFF, 0xC7, 0x07, 0xC0, 0x89,  // .6......
                /* 05C8 */  0x87, 0x73, 0x15, 0xA0, 0xEE, 0x46, 0xCD, 0x2E,  // .s...F..
                /* 05D0 */  0x79, 0x0C, 0x2B, 0x3A, 0xE6, 0x5C, 0x05, 0x78,  // y.+:.\.x
                /* 05D8 */  0xF9, 0xFF, 0x9F, 0xAB, 0x00, 0x8F, 0xE0, 0x3E,  // .......>
                /* 05E0 */  0x3D, 0x00, 0x5E, 0x64, 0x9D, 0x1E, 0x50, 0x67,  // =.^d..Pg
                /* 05E8 */  0x01, 0xCB, 0x3C, 0x2A, 0x68, 0xB2, 0xD5, 0x9E,  // ..<*h...
                /* 05F0 */  0x12, 0x74, 0x7A, 0x60, 0x77, 0x07, 0xFC, 0xD9,  // .tz`w...
                /* 05F8 */  0x01, 0xB8, 0xFE, 0xFF, 0xCF, 0x0E, 0x80, 0x73,  // .......s
                /* 0600 */  0x13, 0x67, 0x07, 0x40, 0x8D, 0xBE, 0x05, 0xEA,  // .g.@....
                /* 0608 */  0x88, 0x87, 0xD3, 0xFB, 0x52, 0xD0, 0x41, 0x06,  // ....R.A.
                /* 0610 */  0x27, 0x72, 0x96, 0x1A, 0x78, 0x60, 0x6B, 0x06,  // 'r..x`k.
                /* 0618 */  0xD7, 0x11, 0x80, 0xE9, 0x83, 0xD4, 0xA9, 0xC1,  // ........
                /* 0620 */  0x87, 0x06, 0x2B, 0xA3, 0x90, 0x8E, 0xC3, 0x03,  // ..+.....
                /* 0628 */  0x2A, 0xF9, 0x11, 0x82, 0x82, 0x18, 0xD0, 0xB1,  // *.......
                /* 0630 */  0x0E, 0x55, 0xE8, 0xFF, 0xFF, 0xC9, 0xCC, 0x43,  // .U.....C
                /* 0638 */  0x38, 0x46, 0x27, 0xB9, 0x3A, 0xD0, 0x89, 0x79,  // 8F'.:..y
                /* 0640 */  0x8E, 0x1C, 0x8F, 0x8D, 0xCB, 0xA8, 0x55, 0xCD,  // ......U.
                /* 0648 */  0x10, 0x44, 0x6A, 0x8E, 0x04, 0xA8, 0x09, 0xF8,  // .Dj.....
                /* 0650 */  0xE4, 0x80, 0xD1, 0x75, 0xA1, 0x02, 0x99, 0xBE,  // ...u....
                /* 0658 */  0x83, 0x03, 0xC8, 0xD1, 0xF9, 0xBD, 0x0C, 0x70,  // .......p
                /* 0660 */  0x34, 0x2A, 0xDF, 0xCB, 0x80, 0xF5, 0xFF, 0xFF,  // 4*......
                /* 0668 */  0xFE, 0x01, 0x46, 0x15, 0x37, 0x56, 0x40, 0x1D,  // ..F.7V@.
                /* 0670 */  0x7C, 0x85, 0xF3, 0x16, 0x70, 0xFC, 0x48, 0x27,  // |...p.H'
                /* 0678 */  0xC2, 0xEE, 0x88, 0x80, 0xFF, 0xFF, 0xFF, 0xE1,  // ........
                /* 0680 */  0x01, 0x18, 0x0E, 0xD9, 0x77, 0x21, 0xC0, 0xD8,  // ....w!..
                /* 0688 */  0x68, 0x1F, 0x1E, 0xE0, 0xDD, 0x85, 0x80, 0xC1,  // h.......
                /* 0690 */  0x7C, 0x7C, 0x17, 0x02, 0x3C, 0xFC, 0xFF, 0xEF,  // ||..<...
                /* 0698 */  0x42, 0x00, 0x3F, 0x47, 0xEE, 0xFB, 0x07, 0x70,  // B.?G...p
                /* 06A0 */  0xFB, 0xFF, 0xDF, 0x3F, 0xC0, 0x1D, 0xEB, 0xFE,  // ...?....
                /* 06A8 */  0x81, 0x8E, 0x79, 0xFF, 0x20, 0x07, 0x5E, 0x43,  // ..y. .^C
                /* 06B0 */  0x84, 0x3D, 0x1C, 0xBB, 0xBE, 0x66, 0x92, 0x13,  // .=...f..
                /* 06B8 */  0x48, 0x8C, 0x08, 0x91, 0x42, 0x93, 0xFB, 0x07,  // H...B...
                /* 06C0 */  0x85, 0x70, 0x20, 0x18, 0xC5, 0x81, 0xD0, 0xE1,  // .p .....
                /* 06C8 */  0x81, 0x07, 0x80, 0xA3, 0x20, 0x3E, 0x32, 0xF8,  // .... >2.
                /* 06D0 */  0xF0, 0x60, 0x25, 0x87, 0x07, 0xF4, 0x94, 0x8E,  // .`%.....
                /* 06D8 */  0xDB, 0x57, 0x12, 0x76, 0x78, 0x80, 0x77, 0x02,  // .W.vx.w.
                /* 06E0 */  0x61, 0x77, 0x21, 0x60, 0x6D, 0x4C, 0x80, 0x36,  // aw!`mL.6
                /* 06E8 */  0x48, 0x32, 0x3E, 0x38, 0xDA, 0xCF, 0x1A, 0xA0,  // H2>8....
                /* 06F0 */  0x18, 0x1F, 0xF0, 0x39, 0x6B, 0xC0, 0xFF, 0xFF,  // ...9k...
                /* 06F8 */  0x8F, 0x0F, 0x4E, 0xC0, 0xF1, 0xA1, 0xA1, 0x7D,  // ..N....}
                /* 0700 */  0x1A, 0x88, 0x79, 0x38, 0x47, 0x83, 0x19, 0x20,  // ..y8G.. 
                /* 0708 */  0xF0, 0x3C, 0xBE, 0x78, 0x80, 0xE0, 0x3B, 0x9B,  // .<.x..;.
                /* 0710 */  0x00, 0x6F, 0x1B, 0x67, 0x13, 0x40, 0x8D, 0xA0,  // .o.g.@..
                /* 0718 */  0x6B, 0x1F, 0x6A, 0xD4, 0x16, 0xF8, 0x6C, 0xD0,  // k.j...l.
                /* 0720 */  0x04, 0x9B, 0x17, 0xF0, 0xFF, 0x9F, 0x83, 0x8F,  // ........
                /* 0728 */  0xC5, 0x1E, 0xFF, 0xE3, 0x34, 0xC0, 0xB0, 0x41,  // ....4..A
                /* 0730 */  0x3C, 0x38, 0x00, 0x46, 0xFE, 0xFF, 0x07, 0x07,  // <8.F....
                /* 0738 */  0xF0, 0xDC, 0xB8, 0x7C, 0x70, 0x00, 0xF8, 0x65,  // ...|p..e
                /* 0740 */  0xF4, 0xE0, 0x00, 0x94, 0xFF, 0xFF, 0x07, 0x07,  // ........
                /* 0748 */  0xE0, 0x71, 0xF4, 0x7B, 0x70, 0x00, 0x18, 0x36,  // .q.{p..6
                /* 0750 */  0x80, 0x07, 0x07, 0x60, 0xF4, 0xFF, 0x3F, 0x38,  // ...`..?8
                /* 0758 */  0x00, 0x0F, 0x59, 0x07, 0x07, 0xD4, 0x59, 0xC0,  // ..Y...Y.
                /* 0760 */  0x32, 0x8F, 0x0A, 0x9A, 0xEB, 0x11, 0x3E, 0x2F,  // 2.....>/
                /* 0768 */  0x9E, 0x58, 0xCC, 0x18, 0x87, 0x13, 0x3D, 0xFE,  // .X....=.
                /* 0770 */  0x31, 0x9F, 0x4F, 0x84, 0x03, 0x78, 0x76, 0x00,  // 1.O..xv.
                /* 0778 */  0xE3, 0x19, 0x10, 0x3F, 0x83, 0x97, 0x62, 0x43,  // ...?..bC
                /* 0780 */  0x3C, 0x32, 0xC2, 0xBD, 0x8D, 0x03, 0xF7, 0x33,  // <2.....3
                /* 0788 */  0x1D, 0xF0, 0x87, 0xF0, 0xD9, 0x01, 0x1C, 0xFF,  // ........
                /* 0790 */  0xFF, 0xB3, 0x03, 0x70, 0x4E, 0xF2, 0x36, 0xD0,  // ...pN.6.
                /* 0798 */  0xD9, 0x81, 0xC3, 0x3A, 0xD9, 0x22, 0x75, 0x76,  // ...:."uv
                /* 07A0 */  0x60, 0xB7, 0x71, 0x63, 0x9E, 0x4D, 0x94, 0xD7,  // `.qc.M..
                /* 07A8 */  0x18, 0x46, 0x30, 0x0D, 0x9C, 0xEE, 0xE2, 0x3C,  // .F0....<
                /* 07B0 */  0x07, 0x8C, 0x54, 0x1F, 0x5E, 0x51, 0x3A, 0x0F,  // ..T.^Q:.
                /* 07B8 */  0xAF, 0x14, 0xC4, 0x07, 0x06, 0xDF, 0xC5, 0x6D,  // .......m
                /* 07C0 */  0xE4, 0xE8, 0x80, 0x1A, 0x94, 0x15, 0x5F, 0x0A,  // ......_.
                /* 07C8 */  0x34, 0xA4, 0x04, 0x83, 0x1C, 0xC6, 0x81, 0xE2,  // 4.......
                /* 07D0 */  0x88, 0x71, 0xE7, 0x06, 0xB8, 0xE2, 0x60, 0x94,  // .q....`.
                /* 07D8 */  0x6B, 0x6C, 0x68, 0x15, 0x20, 0x3A, 0x0C, 0xF8,  // klh. :..
                /* 07E0 */  0xDE, 0xC1, 0xE6, 0x06, 0xFC, 0x66, 0xEF, 0xB9,  // .....f..
                /* 07E8 */  0xB1, 0xFF, 0xFF, 0xDC, 0xC0, 0x7C, 0x21, 0xC1,  // .....|!.
                /* 07F0 */  0xCC, 0x0D, 0xF8, 0x9D, 0x17, 0x3C, 0x37, 0x70,  // .....<7p
                /* 07F8 */  0x5D, 0xF1, 0x81, 0xE5, 0xA0, 0x71, 0x33, 0xF1,  // ]....q3.
                /* 0800 */  0xCD, 0xC9, 0x93, 0xF6, 0x61, 0x82, 0x11, 0x0C,  // ....a...
                /* 0808 */  0x73, 0xAB, 0x01, 0x9A, 0x50, 0x9E, 0x37, 0xB8,  // s...P.7.
                /* 0810 */  0x2E, 0x35, 0xD8, 0xFF, 0xFF, 0xA5, 0x06, 0x98,  // .5......
                /* 0818 */  0xDE, 0x51, 0x7C, 0xA9, 0x01, 0xBC, 0x44, 0xBA,  // .Q|...D.
                /* 0820 */  0xD4, 0xA0, 0x38, 0x1C, 0xF1, 0x52, 0x83, 0x98,  // ..8..R..
                /* 0828 */  0x6D, 0xEC, 0xD0, 0x21, 0xE2, 0xBE, 0x9F, 0xC7,  // m..!....
                /* 0830 */  0x78, 0xAC, 0xC1, 0x40, 0xEB, 0x5A, 0x83, 0x0A,  // x..@.Z..
                /* 0838 */  0x03, 0xA3, 0x78, 0x87, 0x07, 0x54, 0xA0, 0xC3,  // ..x..T..
                /* 0840 */  0x03, 0x05, 0xF1, 0xB8, 0x7D, 0xAD, 0x01, 0xCC,  // ....}...
                /* 0848 */  0xFC, 0xFF, 0xAF, 0x35, 0x80, 0xBF, 0xB3, 0x0A,  // ...5....
                /* 0850 */  0xB0, 0x08, 0x7B, 0x3E, 0x40, 0x1D, 0x11, 0x3C,  // ..{>@..<
                /* 0858 */  0x23, 0x83, 0x78, 0x60, 0x0E, 0x37, 0x68, 0xF4,  // #.x`.7h.
                /* 0860 */  0x7D, 0x0E, 0x7F, 0x54, 0x01, 0x9E, 0x37, 0x1E,  // }..T..7.
                /* 0868 */  0xF0, 0x9D, 0x6C, 0xC0, 0xF2, 0xFF, 0x3F, 0xD9,  // ..l...?.
                /* 0870 */  0x00, 0x6C, 0xD0, 0x7C, 0xB2, 0x01, 0xD4, 0x28,  // .l.|...(
                /* 0878 */  0x5C, 0xA2, 0x2E, 0xA2, 0x38, 0xC5, 0xCF, 0x03,  // \...8...
                /* 0880 */  0x9D, 0x6C, 0xD8, 0x1C, 0xCF, 0x82, 0x1F, 0x6C,  // .l.....l
                /* 0888 */  0x70, 0x1A, 0x01, 0x75, 0xB0, 0xE1, 0xEA, 0x60,  // p..u...`
                /* 0890 */  0xA4, 0x65, 0xC1, 0x3A, 0x69, 0xF0, 0xF4, 0xD7,  // .e.:i...
                /* 0898 */  0x3F, 0x0A, 0xF2, 0xFF, 0x3F, 0x70, 0x76, 0xB0,  // ?...?pv.
                /* 08A0 */  0x01, 0x98, 0x75, 0x0D, 0x80, 0x33, 0x97, 0x57,  // ..u..3.W
                /* 08A8 */  0x88, 0x27, 0x07, 0x1F, 0xFF, 0x00, 0x07, 0xFF,  // .'......
                /* 08B0 */  0xFF, 0x9B, 0x22, 0x60, 0xE2, 0xE4, 0x02, 0xBE,  // .."`....
                /* 08B8 */  0x9B, 0x22, 0x60, 0x7B, 0x24, 0xBE, 0x00, 0x01,  // ."`{$...
                /* 08C0 */  0xA7, 0xFF, 0xFF, 0x05, 0x08, 0xF8, 0x5C, 0xFC,  // ......\.
                /* 08C8 */  0x7D, 0x01, 0x02, 0xBC, 0x88, 0xBC, 0x00, 0xA1,  // }.......
                /* 08D0 */  0x60, 0x2D, 0xFA, 0x02, 0x84, 0xB8, 0x29, 0x7A,  // `-....)z
                /* 08D8 */  0x36, 0x3E, 0x00, 0x61, 0x84, 0xDE, 0x7F, 0x50,  // 6>.a...P
                /* 08E0 */  0x12, 0x61, 0x24, 0xFA, 0x38, 0x8D, 0x92, 0x79,  // .a$.8..y
                /* 08E8 */  0xFF, 0xA1, 0x20, 0x3E, 0x4E, 0x03, 0xFE, 0xFE,  // .. >N...
                /* 08F0 */  0xFF, 0xF7, 0x1F, 0x80, 0x49, 0x57, 0x4A, 0xC0,  // ....IWJ.
                /* 08F8 */  0xDA, 0xFF, 0xFF, 0x8E, 0x08, 0x1C, 0x8F, 0x40,  // .......@
                /* 0900 */  0x00, 0x67, 0x60, 0x1E, 0x81, 0x80, 0xE5, 0xFF,  // .g`.....
                /* 0908 */  0xFF, 0x08, 0x04, 0xFE, 0xA3, 0x80, 0x8F, 0x40,  // .......@
                /* 0910 */  0x98, 0x2B, 0x25, 0x06, 0x25, 0x70, 0x98, 0x03,  // .+%.%p..
                /* 0918 */  0x62, 0x32, 0xCF, 0x40, 0x28, 0x81, 0x30, 0x12,  // b2.@(.0.
                /* 0920 */  0x73, 0xA5, 0x44, 0xC5, 0x3F, 0x03, 0x51, 0x10,  // s.D.?.Q.
                /* 0928 */  0x5F, 0x29, 0x01, 0xCE, 0xFD, 0xFF, 0xCF, 0x40,  // _).....@
                /* 0930 */  0x80, 0x95, 0x60, 0x10, 0x52, 0x72, 0xA5, 0x84,  // ..`.Rr..
                /* 0938 */  0x98, 0xE4, 0x4A, 0x09, 0x14, 0x75, 0xCD, 0x0D,  // ..J..u..
                /* 0940 */  0x34, 0xC6, 0x04, 0x68, 0x3B, 0x2F, 0x01, 0x11,  // 4..h;/..
                /* 0948 */  0x49, 0xE7, 0x25, 0x94, 0x88, 0xF3, 0x12, 0x05,  // I.%.....
                /* 0950 */  0xF1, 0xFC, 0x1D, 0x70, 0xD2, 0xE8, 0x13, 0x10,  // ...p....
                /* 0958 */  0x9C, 0x38, 0x27, 0x20, 0x50, 0xFE, 0xFF, 0x4F,  // .8' P..O
                /* 0960 */  0x40, 0xE0, 0x15, 0x36, 0x70, 0x90, 0x1D, 0x81,  // @..6p...
                /* 0968 */  0x80, 0x39, 0xD4, 0x23, 0x10, 0x60, 0x46, 0xE8,  // .9.#.`F.
                /* 0970 */  0xA1, 0x12, 0x2D, 0xFC, 0x50, 0x09, 0xE1, 0x06,  // ..-.P...
                /* 0978 */  0x84, 0x11, 0x7B, 0x02, 0x42, 0x1D, 0x82, 0x7C,  // ..{.B..|
                /* 0980 */  0xA8, 0x04, 0x1E, 0xFF, 0xFF, 0x43, 0x25, 0xC0,  // .....C%.
                /* 0988 */  0xFF, 0xFF, 0xFF, 0xA9, 0x06, 0x7E, 0xE0, 0x53,  // .....~.S
                /* 0990 */  0x0D, 0x2A, 0xE2, 0xA9, 0x86, 0x82, 0x78, 0x60,  // .*....x`
                /* 0998 */  0x3E, 0x26, 0xFA, 0x54, 0x83, 0x3B, 0x54, 0xE2,  // >&.T.;T.
                /* 09A0 */  0x0F, 0x35, 0xC0, 0x13, 0xCA, 0x87, 0x1A, 0xF0,  // .5......
                /* 09A8 */  0x1D, 0x82, 0x00, 0x1E, 0xFC, 0xFF, 0x0F, 0x41,  // .......A
                /* 09B0 */  0xE0, 0x53, 0x7D, 0x08, 0x02, 0xD4, 0x28, 0x5B,  // .S}...([
                /* 09B8 */  0xA0, 0x0E, 0x41, 0x5C, 0x0A, 0x84, 0x94, 0x7E,  // ..A\...~
                /* 09C0 */  0x3E, 0x34, 0xE0, 0xF3, 0xEA, 0xF3, 0x10, 0x84,  // >4......
                /* 09C8 */  0x38, 0x76, 0xF8, 0xDA, 0xA1, 0xC3, 0x0F, 0xBD,  // 8v......
                /* 09D0 */  0x84, 0x58, 0x19, 0x85, 0x94, 0x9C, 0x34, 0x50,  // .X....4P
                /* 09D8 */  0xD9, 0x6F, 0x2D, 0x14, 0xC4, 0x80, 0xBE, 0xD2,  // .o-.....
                /* 09E0 */  0xC1, 0x19, 0xCE, 0x5B, 0x91, 0x2F, 0x0C, 0xBE,  // ...[./..
                /* 09E8 */  0xD2, 0x01, 0x3F, 0x02, 0x5F, 0xE9, 0x80, 0xDD,  // ..?._...
                /* 09F0 */  0xFF, 0xFF, 0xB6, 0x02, 0x4B, 0xCE, 0xA4, 0x51,  // ....K..Q
                /* 09F8 */  0x7B, 0xF6, 0xA4, 0x4D, 0xE1, 0x49, 0xFB, 0x46,  // {..M.I.F
                /* 0A00 */  0x0D, 0x78, 0x38, 0x1F, 0x81, 0xEF, 0xF2, 0x01,  // .x8.....
                /* 0A08 */  0xBC, 0x87, 0xE8, 0xCB, 0x07, 0xE0, 0x25, 0xAE,  // ......%.
                /* 0A10 */  0x82, 0xFF, 0xFF, 0xE5, 0x03, 0x1B, 0xFF, 0x15,  // ........
                /* 0A18 */  0xA0, 0xCB, 0x07, 0xBB, 0x22, 0x63, 0xC6, 0xEF,  // ...."c..
                /* 0A20 */  0xD0, 0x27, 0x06, 0x0A, 0xE1, 0xB8, 0x14, 0xBA,  // .'......
                /* 0A28 */  0xD9, 0xC3, 0xBD, 0x35, 0xC1, 0xB9, 0x7C, 0x60,  // ...5..|`
                /* 0A30 */  0x6E, 0x41, 0x30, 0x4F, 0x1F, 0xEC, 0xE0, 0x00,  // nA0O....
                /* 0A38 */  0x4C, 0x08, 0x7C, 0x0B, 0x02, 0xDF, 0x39, 0x03,  // L.|...9.
                /* 0A40 */  0xBC, 0xE3, 0x03, 0x3E, 0xE7, 0x0C, 0x60, 0xFA,  // ...>..`.
                /* 0A48 */  0xFF, 0x3F, 0x67, 0x80, 0x1D, 0xE5, 0x39, 0x03,  // .?g...9.
                /* 0A50 */  0x30, 0xA3, 0xED, 0xCE, 0x84, 0xD6, 0x7A, 0x67,  // 0.....zg
                /* 0A58 */  0x82, 0x70, 0x5B, 0x60, 0x0A, 0xEF, 0x4C, 0x28,  // .p[`..L(
                /* 0A60 */  0x6D, 0x77, 0x26, 0x40, 0xF8, 0xFF, 0xFF, 0xCE,  // mw&@....
                /* 0A68 */  0x04, 0x0E, 0x41, 0x93, 0x46, 0x49, 0xB8, 0xAB,  // ..A.FI..
                /* 0A70 */  0x50, 0x10, 0x4F, 0xDA, 0x27, 0x46, 0xC0, 0xC3,  // P.O.'F..
                /* 0A78 */  0xA8, 0x7C, 0x02, 0x04, 0x3C, 0x8D, 0xF2, 0xED,  // .|..<...
                /* 0A80 */  0x03, 0x30, 0xF1, 0xFF, 0x3F, 0x08, 0xE0, 0x23,  // .0..?..#
                /* 0A88 */  0x5F, 0x9A, 0x50, 0xB0, 0x96, 0x70, 0xFB, 0x40,  // _.P..p.@
                /* 0A90 */  0x5C, 0x9A, 0x30, 0x07, 0x00, 0x1E, 0xFB, 0xD6,  // \.0.....
                /* 0A98 */  0x84, 0x3A, 0xBA, 0xFA, 0xDA, 0xE4, 0xA3, 0x03,  // .:......
                /* 0AA0 */  0x0F, 0x08, 0x47, 0x41, 0x7C, 0x6B, 0x02, 0xFC,  // ..GA|k..
                /* 0AA8 */  0x9D, 0x34, 0xC0, 0x7B, 0x6B, 0x02, 0x4E, 0x27,  // .4.{k.N'
                /* 0AB0 */  0x0D, 0xE0, 0xF3, 0xFF, 0x3F, 0x69, 0x00, 0x2F,  // ....?i./
                /* 0AB8 */  0xE3, 0xD7, 0x26, 0x40, 0x9E, 0xB3, 0x63, 0xEB,  // ..&@..c.
                /* 0AC0 */  0x6B, 0x13, 0xA0, 0xF9, 0xFF, 0x7F, 0x6D, 0x02,  // k.....m.
                /* 0AC8 */  0x76, 0x4E, 0xAE, 0x4D, 0x80, 0xAE, 0xE3, 0x02,  // vN.M....
                /* 0AD0 */  0xBB, 0x7D, 0x00, 0xF3, 0x61, 0xBE, 0x7D, 0x00,  // .}..a.}.
                /* 0AD8 */  0xDF, 0xFF, 0xFF, 0xB5, 0x09, 0xD8, 0x1C, 0x00,  // ........
                /* 0AE0 */  0xF8, 0xB5, 0x09, 0x70, 0x7D, 0xD2, 0x00, 0xE7,  // ...p}...
                /* 0AE8 */  0xB5, 0x09, 0xB8, 0x9F, 0x34, 0xB0, 0xFF, 0xFF,  // ....4...
                /* 0AF0 */  0x93, 0x06, 0x30, 0x1E, 0xE7, 0x93, 0x06, 0x60,  // ..0....`
                /* 0AF8 */  0x46, 0xE0, 0x49, 0x03, 0x75, 0x08, 0xB0, 0xE0,  // F.I.u...
                /* 0B00 */  0x43, 0x37, 0xB9, 0x02, 0xD8, 0xE3, 0x10, 0x09,  // C7......
                /* 0B08 */  0x4C, 0xF0, 0xC0, 0x51, 0xCE, 0xF2, 0x38, 0x0D,  // L..Q..8.
                /* 0B10 */  0x5E, 0xE1, 0x94, 0x34, 0x86, 0x40, 0xE7, 0x7D,  // ^..4.@.}
                /* 0B18 */  0x50, 0x11, 0xDE, 0x4F, 0x0C, 0xAE, 0xF3, 0x06,  // P..O....
                /* 0B20 */  0x4A, 0x12, 0x85, 0x4E, 0x3E, 0x80, 0x9D, 0xFF,  // J..N>...
                /* 0B28 */  0xFF, 0x79, 0x03, 0x8C, 0x07, 0x08, 0xE0, 0x2F,  // .y...../
                /* 0B30 */  0xFE, 0x00, 0x01, 0xA8, 0x51, 0xB9, 0x44, 0x5D,  // ....Q.D]
                /* 0B38 */  0xE3, 0x70, 0xAA, 0xDF, 0x07, 0x3A, 0x40, 0xB0,  // .p...:@.
                /* 0B40 */  0x6B, 0x1C, 0xBF, 0x9B, 0xFB, 0x32, 0x27, 0x30,  // k....2'0
                /* 0B48 */  0x5D, 0xE3, 0xB8, 0x4A, 0x18, 0xA9, 0x5A, 0xAE,  // ]..J..Z.
                /* 0B50 */  0x4E, 0x0E, 0x5C, 0x07, 0x8C, 0xE0, 0x0C, 0xE2,  // N.\.....
                /* 0B58 */  0x61, 0x3B, 0xD6, 0xA9, 0x1E, 0x3D, 0x26, 0x2B,  // a;...=&+
                /* 0B60 */  0xBE, 0x13, 0xE8, 0x08, 0xE2, 0x20, 0xC7, 0x38,  // ..... .8
                /* 0B68 */  0x20, 0xF0, 0xFF, 0x3F, 0xC6, 0x81, 0xE1, 0x48,  //  ..?...H
                /* 0B70 */  0x0F, 0xAE, 0x6C, 0x63, 0x43, 0x1F, 0x93, 0xAC,  // ..lcC...
                /* 0B78 */  0x19, 0x51, 0x80, 0x47, 0x73, 0x2E, 0x98, 0xD9,  // .Q.Gs...
                /* 0B80 */  0x01, 0xBF, 0xFB, 0x3F, 0xF8, 0x92, 0xCD, 0x0E,  // ...?....
                /* 0B88 */  0xAD, 0xE3, 0x46, 0x42, 0x46, 0x53, 0x3B, 0xA4,  // ..FBFS;.
                /* 0B90 */  0x66, 0xF3, 0xC8, 0xE0, 0xC9, 0x01, 0xBF, 0x23,  // f......#
                /* 0B98 */  0x83, 0x27, 0x07, 0xAE, 0x68, 0xA7, 0x2F, 0xF4,  // .'..h./.
                /* 0BA0 */  0xE4, 0x3C, 0x91, 0x57, 0x81, 0x08, 0xEF, 0x34,  // .<.W...4
                /* 0BA8 */  0xBE, 0x4C, 0x82, 0xEB, 0xFF, 0x3F, 0x39, 0xF0,  // .L...?9.
                /* 0BB0 */  0x22, 0xF9, 0x32, 0x09, 0x9C, 0xE5, 0xDC, 0x81,  // ".2.....
                /* 0BB8 */  0x50, 0x4F, 0x05, 0x9F, 0x15, 0x4C, 0xE1, 0x0B,  // PO...L..
                /* 0BC0 */  0x80, 0xC3, 0x1D, 0x11, 0xD0, 0x77, 0x20, 0x7C,  // .....w |
                /* 0BC8 */  0x98, 0x3B, 0x10, 0xD0, 0x1C, 0x89, 0xEF, 0x08,  // .;......
                /* 0BD0 */  0xE0, 0xBA, 0x02, 0x01, 0x6F, 0xF3, 0x10, 0xFA,  // ....o...
                /* 0BD8 */  0xFF, 0x5F, 0x81, 0x00, 0x2F, 0x42, 0xAE, 0x40,  // ._../B.@
                /* 0BE0 */  0x68, 0x61, 0x57, 0x20, 0xC4, 0x5D, 0x12, 0x33,  // haW .].3
                /* 0BE8 */  0x7E, 0xCB, 0xB9, 0x02, 0x51, 0x08, 0x0B, 0x81,  // ~...Q...
                /* 0BF0 */  0x91, 0x0C, 0x08, 0x1D, 0x1C, 0x78, 0xF0, 0x2B,  // .....x.+
                /* 0BF8 */  0x10, 0x05, 0xF1, 0xF5, 0xC2, 0xB7, 0x0F, 0x5F,  // ......._
                /* 0C00 */  0x81, 0xE0, 0x9D, 0x1B, 0xE0, 0xDD, 0x24, 0x81,  // ......$.
                /* 0C08 */  0xD3, 0xB9, 0x01, 0x5C, 0x01, 0x47, 0x87, 0x1E,  // ...\.G..
                /* 0C10 */  0xB3, 0x2F, 0x41, 0x30, 0x06, 0x08, 0xE6, 0xFF,  // ./A0....
                /* 0C18 */  0xFF, 0x55, 0x12, 0x9C, 0x03, 0x04, 0xD7, 0x45,  // .U.....E
                /* 0C20 */  0xCF, 0x03, 0xC4, 0x01, 0xFB, 0x1C, 0x84, 0x1D,  // ........
                /* 0C28 */  0x1F, 0x30, 0xBD, 0x09, 0x81, 0xEF, 0x3C, 0xE0,  // .0....<.
                /* 0C30 */  0x9B, 0x10, 0x0E, 0xD8, 0x37, 0x21, 0xEC, 0x45,  // ....7!.E
                /* 0C38 */  0x15, 0x98, 0x42, 0xF9, 0x5E, 0x0B, 0xBE, 0x43,  // ..B.^..C
                /* 0C40 */  0x0F, 0x38, 0xFE, 0xFF, 0xE3, 0x03, 0x8E, 0x87,  // .8......
                /* 0C48 */  0x1E, 0xC0, 0x93, 0xFA, 0x43, 0x0F, 0xA0, 0x46,  // ....C..F
                /* 0C50 */  0xE7, 0xA1, 0x07, 0xAD, 0xFB, 0x1A, 0x09, 0xE1,  // ........
                /* 0C58 */  0xB6, 0xC0, 0xD4, 0x5E, 0x23, 0x51, 0x3A, 0xAF,  // ...^#Q:.
                /* 0C60 */  0x91, 0xA0, 0xF8, 0xFF, 0x5F, 0x23, 0x01, 0xFE,  // ...._#..
                /* 0C68 */  0xFF, 0xFF, 0xAF, 0x91, 0x00, 0x13, 0x8E, 0xE6,  // ........
                /* 0C70 */  0xF0, 0x67, 0x8D, 0x3B, 0x9A, 0x03, 0xEF, 0x91,  // .g.;....
                /* 0C78 */  0xF8, 0xC6, 0x04, 0xBE, 0x3B, 0x10, 0xEC, 0xFF,  // ....;...
                /* 0C80 */  0xFF, 0x1D, 0x08, 0x98, 0xB9, 0xBF, 0x03, 0x01,  // ........
                /* 0C88 */  0x6A, 0xC4, 0xDC, 0x81, 0x50, 0xB0, 0x16, 0x77,  // j...P..w
                /* 0C90 */  0x8F, 0x84, 0x72, 0x00, 0xE0, 0x82, 0x2E, 0x92,  // ..r.....
                /* 0C98 */  0x28, 0x29, 0x30, 0xBA, 0x49, 0xFA, 0xE8, 0xC0,  // ()0.I...
                /* 0CA0 */  0xA3, 0x5F, 0x82, 0x28, 0x88, 0x2F, 0x92, 0x80,  // ._.(./..
                /* 0CA8 */  0xB5, 0xFF, 0xFF, 0x45, 0x12, 0xE0, 0xFF, 0xFF,  // ...E....
                /* 0CB0 */  0xFF, 0x22, 0x09, 0xF6, 0x63, 0x0F, 0x78, 0x2F,  // ."..c.x/
                /* 0CB8 */  0x92, 0xC0, 0xE9, 0xD8, 0x03, 0x78, 0x92, 0x7F,  // .....x..
                /* 0CC0 */  0xEC, 0x01, 0x64, 0xFC, 0xFF, 0x6F, 0x92, 0xE0,  // ..d..o..
                /* 0CC8 */  0x73, 0x26, 0x40, 0xD9, 0x4D, 0x12, 0x20, 0xF3,  // s&@.M. .
                /* 0CD0 */  0xFF, 0xFF, 0x26, 0x09, 0xF0, 0xD1, 0xC9, 0x4D,  // ..&....M
                /* 0CD8 */  0x12, 0xE8, 0xFE, 0xFF, 0xEF, 0x40, 0xE0, 0x3F,  // .....@.?
                /* 0CE0 */  0xB4, 0xB0, 0x3B, 0x10, 0x30, 0xB7, 0x7F, 0x93,  // ..;.0...
                /* 0CE8 */  0x04, 0xF4, 0x1D, 0x00, 0xF8, 0x4D, 0x12, 0x78,  // .....M.x
                /* 0CF0 */  0xFF, 0xFF, 0x6F, 0x92, 0x00, 0xFF, 0xFF, 0xFF,  // ..o.....
                /* 0CF8 */  0x37, 0x49, 0xC0, 0xD3, 0xB1, 0x07, 0x9C, 0x37,  // 7I.....7
                /* 0D00 */  0x49, 0xE0, 0x7E, 0xEC, 0x01, 0xFE, 0xFA, 0x8F,  // I.~.....
                /* 0D08 */  0x3D, 0xA0, 0xF9, 0xFF, 0x1F, 0x7B, 0x80, 0x73,  // =....{.s
                /* 0D10 */  0xB6, 0x17, 0x8E, 0x8E, 0x3D, 0xFC, 0x2C, 0xE0,  // ....=.,.
                /* 0D18 */  0xAC, 0xCB, 0xD4, 0x4D, 0x12, 0x86, 0xC2, 0x81,  // ...M....
                /* 0D20 */  0x90, 0x53, 0x8E, 0xD3, 0x01, 0xEA, 0x2E, 0xC9,  // .S......
                /* 0D28 */  0x73, 0xC1, 0x28, 0xC5, 0xB9, 0x07, 0x75, 0xB1,  // s.(...u.
                /* 0D30 */  0x34, 0x9C, 0x41, 0xEC, 0xE1, 0x2E, 0x09, 0x50,  // 4.A....P
                /* 0D38 */  0xE6, 0xFF, 0x7F, 0x97, 0x04, 0x78, 0x19, 0xEC,  // .....x..
                /* 0D40 */  0x26, 0x80, 0x3E, 0x8D, 0x78, 0x32, 0x2F, 0x3B,  // &.>.x2/;
                /* 0D48 */  0x1E, 0xCD, 0xC9, 0xF9, 0x24, 0x00, 0x3C, 0xFE,  // ....$.<.
                /* 0D50 */  0xFF, 0x93, 0x83, 0x37, 0x0E, 0x9F, 0x04, 0xC0,  // ...7....
                /* 0D58 */  0x35, 0x38, 0x38, 0x27, 0x97, 0x80, 0xAF, 0x0D,  // 588'....
                /* 0D60 */  0x8F, 0x35, 0x1E, 0x1C, 0x30, 0x3C, 0xF7, 0xF0,  // .5..0<..
                /* 0D68 */  0xC1, 0x81, 0xE7, 0x8E, 0x0A, 0x98, 0x1E, 0xB9,  // ........
                /* 0D70 */  0x6F, 0x57, 0x30, 0xFF, 0xFF, 0xB7, 0x2B, 0xC0,  // oW0...+.
                /* 0D78 */  0x86, 0xFF, 0xDB, 0x15, 0xA0, 0x26, 0xC8, 0xED,  // .....&..
                /* 0D80 */  0x0A, 0xC5, 0xE1, 0x60, 0xB7, 0x2B, 0xC4, 0x1D,  // ...`.+..
                /* 0D88 */  0x15, 0x7B, 0xBC, 0xC2, 0x40, 0xEB, 0x7A, 0x45,  // .{..@.zE
                /* 0D90 */  0x21, 0x1C, 0x01, 0x46, 0x01, 0x20, 0x74, 0x78,  // !..F. tx
                /* 0D98 */  0xE0, 0x92, 0xE1, 0x28, 0x88, 0x47, 0xE4, 0x5B,  // ...(.G.[
                /* 0DA0 */  0x2A, 0xB0, 0xFE, 0xFF, 0xDF, 0x52, 0x01, 0xFE,  // *....R..
                /* 0DA8 */  0xFF, 0xFF, 0x6F, 0xA9, 0xC0, 0x3C, 0xDC, 0x45,  // ..o..<.E
                /* 0DB0 */  0x0B, 0xFA, 0x71, 0x00, 0x78, 0x5E, 0xB5, 0xC0,  // ..q.x^..
                /* 0DB8 */  0x37, 0x3C, 0x38, 0x57, 0x2D, 0xDC, 0xF0, 0x80,  // 7<8W-...
                /* 0DC0 */  0xE7, 0x65, 0x0B, 0x7C, 0x87, 0x2A, 0x58, 0xFF,  // .e.|.*X.
                /* 0DC8 */  0xFF, 0x1B, 0x30, 0x30, 0x3E, 0x54, 0x01, 0xAE,  // ..00>T..
                /* 0DD0 */  0x02, 0x1C, 0xAA, 0x00, 0x35, 0xCA, 0x16, 0xA8,  // ....5...
                /* 0DD8 */  0x43, 0x15, 0x3F, 0x0E, 0x59, 0xE9, 0x03, 0x46,  // C.?.Y..F
                /* 0DE0 */  0xC3, 0x35, 0xC4, 0x1B, 0x30, 0xBF, 0x2D, 0xF8,  // .5..0.-.
                /* 0DE8 */  0xAA, 0x27, 0x30, 0xDD, 0x7F, 0xB9, 0x32, 0x0A,  // .'0...2.
                /* 0DF0 */  0x29, 0x39, 0xDD, 0xA1, 0xB2, 0x0B, 0xF8, 0xFF,  // )9......
                /* 0DF8 */  0xC3, 0x31, 0x10, 0x03, 0xFA, 0x86, 0xE8, 0x93,  // .1......
                /* 0E00 */  0x03, 0x4E, 0x05, 0x88, 0xA6, 0x60, 0x84, 0x13,  // .N...`..
                /* 0E08 */  0x7A, 0xF3, 0x04, 0x86, 0x04, 0xBE, 0x79, 0x82,  // z.....y.
                /* 0E10 */  0xE7, 0xDA, 0xC0, 0x6E, 0x88, 0xC0, 0x42, 0xCE,  // ...n..B.
                /* 0E18 */  0xA4, 0x51, 0x7B, 0xF6, 0xA4, 0x4D, 0xE1, 0x49,  // .Q{..M.I
                /* 0E20 */  0xFB, 0xAE, 0x02, 0xE7, 0xF6, 0x81, 0xBB, 0xAB,  // ........
                /* 0E28 */  0xC0, 0xBB, 0x21, 0x02, 0x9F, 0x6B, 0x16, 0xF8,  // ..!..k..
                /* 0E30 */  0x2E, 0x1F, 0xE0, 0xF9, 0xFF, 0x5F, 0x3E, 0x80,  // ....._>.
                /* 0E38 */  0x4F, 0x82, 0xCB, 0x07, 0xA0, 0x26, 0xEE, 0x23,  // O....&.#
                /* 0E40 */  0x41, 0x97, 0x0F, 0x5C, 0xFC, 0x57, 0x80, 0x2E,  // A..\.W..
                /* 0E48 */  0x1F, 0xEC, 0x82, 0x88, 0x19, 0xBF, 0x43, 0x9F,  // ......C.
                /* 0E50 */  0x18, 0x28, 0x84, 0xE3, 0x52, 0x28, 0xEC, 0xC1,  // .(..R(..
                /* 0E58 */  0x01, 0x15, 0x0F, 0x8E, 0x82, 0x78, 0xD0, 0xBE,  // .....x..
                /* 0E60 */  0x05, 0xC1, 0xB9, 0x7C, 0x60, 0x6E, 0x41, 0xC0,  // ...|`nA.
                /* 0E68 */  0x94, 0xC0, 0xB7, 0x20, 0xF0, 0x9D, 0x33, 0xFC,  // ... ..3.
                /* 0E70 */  0xFF, 0x3F, 0x67, 0x80, 0xF3, 0x76, 0x08, 0xFC,  // .?g..v..
                /* 0E78 */  0xCF, 0x19, 0xC0, 0xBB, 0xC1, 0x39, 0x03, 0x50,  // .....9.P
                /* 0E80 */  0xA3, 0xED, 0xCE, 0x84, 0xD6, 0x7A, 0x67, 0x82,  // .....zg.
                /* 0E88 */  0x70, 0x1C, 0x64, 0x0A, 0xEF, 0x4C, 0x28, 0x6D,  // p.d..L(m
                /* 0E90 */  0x14, 0xFA, 0xFF, 0xDF, 0x99, 0x00, 0x46, 0x9C,  // ......F.
                /* 0E98 */  0xD2, 0xE1, 0x9F, 0x46, 0x71, 0xA7, 0x74, 0xE0,  // ...Fq.t.
                /* 0EA0 */  0x3D, 0x2A, 0x1F, 0x46, 0xC1, 0x77, 0xFB, 0x80,  // =*.F.w..
                /* 0EA8 */  0xF5, 0xFF, 0xBF, 0x7D, 0x00, 0xC3, 0x08, 0xB7,  // ...}....
                /* 0EB0 */  0x0F, 0x40, 0x4D, 0xE4, 0x4B, 0x13, 0x0A, 0xD6,  // .@M.K...
                /* 0EB8 */  0x12, 0x6E, 0x1F, 0x88, 0x4B, 0x13, 0xE6, 0x00,  // .n..K...
                /* 0EC0 */  0xC0, 0x63, 0xDF, 0x9A, 0x50, 0x81, 0x29, 0x74,  // .c..P.)t
                /* 0EC8 */  0x6D, 0xF2, 0xD1, 0x81, 0x07, 0x84, 0xA3, 0x20,  // m...... 
                /* 0ED0 */  0xBE, 0x35, 0x01, 0xB6, 0xFE, 0xFF, 0xB7, 0x26,  // .5.....&
                /* 0ED8 */  0x18, 0x27, 0x0D, 0xF0, 0xDE, 0x9A, 0x80, 0xD3,  // .'......
                /* 0EE0 */  0x49, 0x03, 0xF0, 0x54, 0xE1, 0xDA, 0x04, 0x88,  // I..T....
                /* 0EE8 */  0xFB, 0xFF, 0xCF, 0xC6, 0xD7, 0x05, 0x76, 0x6D,  // ......vm
                /* 0EF0 */  0x02, 0x18, 0x74, 0x0F, 0x07, 0xE7, 0xB5, 0x09,  // ..t.....
                /* 0EF8 */  0xB8, 0x8F, 0xDB, 0xFF, 0xFF, 0xDB, 0x07, 0x70,  // .......p
                /* 0F00 */  0xCF, 0x70, 0x6D, 0x02, 0xF4, 0x1D, 0x00, 0xF8,  // .pm.....
                /* 0F08 */  0xB5, 0x09, 0x70, 0xF7, 0xFF, 0xBF, 0x36, 0x81,  // ..p...6.
                /* 0F10 */  0xEF, 0xA4, 0x01, 0xCE, 0x6B, 0x13, 0x70, 0x3F,  // ....k.p?
                /* 0F18 */  0x69, 0x00, 0xFF, 0x0E, 0x27, 0x0D, 0x40, 0x4D,  // i...'.@M
                /* 0F20 */  0x9E, 0xB7, 0x81, 0xFE, 0xFF, 0x27, 0x0D, 0x7E,  // .....'.~
                /* 0F28 */  0x16, 0x70, 0xBE, 0x45, 0xEA, 0xDA, 0x04, 0x43,  // .p.E...C
                /* 0F30 */  0xE1, 0x40, 0xC8, 0x08, 0x12, 0x4C, 0x04, 0xA8,  // .@...L..
                /* 0F38 */  0x8B, 0x13, 0xCF, 0x02, 0x23, 0xE5, 0x24, 0x3A,  // ....#.$:
                /* 0F40 */  0x6A, 0xF0, 0x5B, 0x94, 0xE1, 0x0C, 0xE2, 0x13,  // j.[.....
                /* 0F48 */  0x83, 0x2F, 0x4E, 0x80, 0xAF, 0xC1, 0xF9, 0xCC,  // ./N.....
                /* 0F50 */  0x8D, 0x9F, 0xCC, 0x6B, 0x86, 0x47, 0xF3, 0x60,  // ...k.G.`
                /* 0F58 */  0xE4, 0x20, 0x93, 0x03, 0x7A, 0x27, 0x6E, 0xF0,  // . ..z'n.
                /* 0F60 */  0x0D, 0x0E, 0xCE, 0x99, 0x21, 0xE0, 0x83, 0xC0,  // ....!...
                /* 0F68 */  0x03, 0x85, 0x07, 0x07, 0xA6, 0xFF, 0xFF, 0xE0,  // ........
                /* 0F70 */  0xC0, 0x7B, 0x62, 0xF0, 0xE0, 0xC0, 0x75, 0x21,  // .{b...u!
                /* 0F78 */  0x03, 0x4C, 0x43, 0xF9, 0x5E, 0x03, 0x78, 0x0A,  // .LC.^.x.
                /* 0F80 */  0x21, 0xE0, 0xFF, 0x7F, 0xAF, 0x01, 0xCC, 0xC8,  // !.......
                /* 0F88 */  0xBD, 0xD7, 0xA0, 0x38, 0x2C, 0xFF, 0x5E, 0x83,  // ...8,.^.
                /* 0F90 */  0xB8, 0x90, 0x61, 0x0F, 0x36, 0x18, 0x68, 0x5D,  // ..a.6.h]
                /* 0F98 */  0x6C, 0x28, 0x84, 0x85, 0xC2, 0x48, 0x26, 0x84,  // l(...H&.
                /* 0FA0 */  0x0E, 0x0F, 0x5C, 0x18, 0x1C, 0x05, 0xF1, 0xC8,  // ..\.....
                /* 0FA8 */  0x7D, 0x25, 0x03, 0xDC, 0x85, 0xBB, 0xDB, 0x40,  // }%.....@
                /* 0FB0 */  0x0F, 0x33, 0x3E, 0x10, 0xFD, 0xFF, 0xAF, 0x64,  // .3>....d
                /* 0FB8 */  0xC0, 0xE0, 0xC6, 0x02, 0xAE, 0xE1, 0xC1, 0xB9,  // ........
                /* 0FC0 */  0xDD, 0xE0, 0x86, 0x07, 0x3C, 0xEF, 0x37, 0xE0,  // ....<.7.
                /* 0FC8 */  0xBB, 0xEE, 0x01, 0x1E, 0xCE, 0x31, 0xC0, 0xE8,  // .....1..
                /* 0FD0 */  0xFF, 0x7F, 0x8E, 0x01, 0x66, 0x25, 0xCE, 0x31,  // ....f%.1
                /* 0FD8 */  0x80, 0x1A, 0x71, 0xF7, 0x54, 0x94, 0x28, 0x08,  // ..q.T.(.
                /* 0FE0 */  0x89, 0x7D, 0x62, 0xE8, 0x08, 0x73, 0xB2, 0x7D,  // .}b..s.}
                /* 0FE8 */  0x0E, 0x58, 0xE0, 0xA7, 0x7D, 0xD8, 0x1E, 0xF1,  // .X..}...
                /* 0FF0 */  0x51, 0xC7, 0x38, 0x33, 0x8F, 0xE8, 0x9C, 0x6B,  // Q.83...k
                /* 0FF8 */  0x1F, 0x1C, 0x3D, 0x10, 0xE8, 0xAE, 0x8A, 0x92,  // ..=.....
                /* 1000 */  0x44, 0xA1, 0x53, 0x15, 0xF8, 0xA6, 0x70, 0x96,  // D.S...p.
                /* 1008 */  0x27, 0xFC, 0x66, 0x70, 0x78, 0x3E, 0x55, 0x01,  // '.fpx>U.
                /* 1010 */  0xCF, 0x93, 0x0C, 0xCC, 0xFF, 0xFF, 0xF1, 0x01,  // ........
                /* 1018 */  0x30, 0x92, 0xEF, 0xF8, 0x00, 0xA8, 0x11, 0x75,  // 0......u
                /* 1020 */  0x6B, 0x46, 0x8B, 0x3C, 0x2A, 0xE8, 0xF2, 0x60,  // kF.<*..`
                /* 1028 */  0x95, 0x02, 0x3C, 0x0E, 0x91, 0x4C, 0xF7, 0xA5,  // ..<..L..
                /* 1030 */  0xC5, 0x9E, 0xC7, 0x41, 0x8E, 0x0E, 0xE0, 0x53,  // ...A...S
                /* 1038 */  0x72, 0x74, 0x00, 0xD2, 0xFF, 0xFF, 0xA3, 0x03,  // rt......
                /* 1040 */  0x98, 0x8D, 0x09, 0xD0, 0x76, 0x74, 0x00, 0xF2,  // ....vt..
                /* 1048 */  0x71, 0x8F, 0x0E, 0x80, 0x1A, 0x49, 0x47, 0x07,  // q....IG.
                /* 1050 */  0xB4, 0xC4, 0xA3, 0x03, 0x5A, 0xE4, 0x3C, 0x34,  // ....Z.<4
                /* 1058 */  0x43, 0x36, 0x0C, 0x1D, 0x1D, 0x50, 0x27, 0x07,  // C6...P'.
                /* 1060 */  0xCB, 0x39, 0x3A, 0xA0, 0xA8, 0x0C, 0x66, 0x0A,  // .9:...f.
                /* 1068 */  0x1F, 0x1D, 0x7C, 0x00, 0x83, 0x73, 0x74, 0xC0,  // ..|..st.
                /* 1070 */  0x1D, 0xC0, 0xE0, 0x1D, 0x1D, 0x60, 0xFE, 0xFF,  // .....`..
                /* 1078 */  0x8F, 0x0E, 0x60, 0x3E, 0x80, 0x81, 0xEB, 0xE4,  // ..`>....
                /* 1080 */  0x00, 0xBC, 0xEB, 0x9E, 0x1C, 0x00, 0x35, 0x82,  // ......5.
                /* 1088 */  0x4E, 0x0E, 0x28, 0x29, 0x23, 0xF7, 0x49, 0x41,  // N.()#.IA
                /* 1090 */  0xB3, 0xF5, 0x91, 0x2A, 0x46, 0xC8, 0xB3, 0xA9,  // ...*F...
                /* 1098 */  0x78, 0x64, 0xE4, 0xE0, 0x00, 0xFC, 0xFE, 0xFF,  // xd......
                /* 10A0 */  0xA7, 0x4C, 0x60, 0x76, 0x70, 0x00, 0x1C, 0x65,  // .L`vp..e
                /* 10A8 */  0x3E, 0xC1, 0x00, 0xBA, 0x0E, 0x0E, 0xEC, 0x04,  // >.......
                /* 10B0 */  0xC3, 0xE6, 0x78, 0x88, 0x9E, 0x86, 0x4F, 0x0E,  // ..x...O.
                /* 10B8 */  0xE0, 0xFE, 0xFF, 0x9F, 0x60, 0x00, 0x86, 0x74,  // ....`..t
                /* 10C0 */  0x3E, 0x39, 0x00, 0xD2, 0xAE, 0x97, 0x3E, 0x39,  // >9....>9
                /* 10C8 */  0x80, 0xE3, 0xFF, 0x7F, 0x84, 0x01, 0x58, 0x14,  // ......X.
                /* 10D0 */  0xFA, 0x08, 0x03, 0x88, 0xFB, 0xFF, 0x9F, 0xE9,  // ........
                /* 10D8 */  0x00, 0xA6, 0x95, 0x3E, 0x39, 0x00, 0x52, 0xFE,  // ...>9.R.
                /* 10E0 */  0xFF, 0xC7, 0x5C, 0x18, 0x47, 0x01, 0x1F, 0x73,  // ..\.G..s
                /* 10E8 */  0x6D, 0x75, 0xB0, 0x1A, 0xE3, 0x63, 0x2E, 0x0E,  // mu...c..
                /* 10F0 */  0xE2, 0x11, 0xE0, 0x04, 0x1E, 0x1D, 0x00, 0x7E,  // .......~
                /* 10F8 */  0x05, 0x3F, 0x3A, 0x00, 0xD9, 0xFF, 0xFF, 0xD1,  // .?:.....
                /* 1100 */  0x01, 0x78, 0x1C, 0xA6, 0xD8, 0xD1, 0x01, 0x38,  // .x.....8
                /* 1108 */  0x9F, 0xA6, 0x00, 0xEF, 0xC5, 0x8F, 0x0E, 0x40,  // .......@
                /* 1110 */  0xE2, 0xFF, 0x7F, 0x9A, 0x02, 0xA6, 0x87, 0x18,  // ........
                /* 1118 */  0xDC, 0x69, 0x0A, 0xE0, 0x59, 0xF2, 0x93, 0x03,  // .i..Y...
                /* 1120 */  0x08, 0xFE, 0xFF, 0x27, 0x07, 0x60, 0x2E, 0x70,  // ...'.`.p
                /* 1128 */  0x81, 0x3A, 0x39, 0x70, 0x0E, 0x0B, 0x7E, 0x28,  // .:9p..~(
                /* 1130 */  0x48, 0xE7, 0xA4, 0x35, 0xDC, 0x27, 0x07, 0x86,  // H..5.'..
                /* 1138 */  0x72, 0x8A, 0xB1, 0x3D, 0xB8, 0xC8, 0x35, 0x83,  // r..=..5.
                /* 1140 */  0x0B, 0x9A, 0x40, 0xEA, 0xD0, 0xE0, 0x33, 0x83,  // ..@...3.
                /* 1148 */  0xA5, 0x51, 0x48, 0xC8, 0xD9, 0x01, 0x15, 0xFD,  // .QH.....
                /* 1150 */  0x04, 0x41, 0x41, 0x0C, 0xE8, 0x5C, 0x67, 0x07,  // .AA..\g.
                /* 1158 */  0xB4, 0x0A, 0x10, 0x5D, 0x03, 0x8E, 0x31, 0xC2,  // ...]..1.
                /* 1160 */  0x39, 0x25, 0x18, 0xE4, 0xEA, 0x40, 0x67, 0xE6,  // 9%...@g.
                /* 1168 */  0x49, 0x72, 0x0D, 0x77, 0x18, 0x04, 0x6E, 0x55,  // Ir.w..nU
                /* 1170 */  0x53, 0x04, 0x91, 0x9A, 0x33, 0x01, 0x6A, 0x02,  // S...3.j.
                /* 1178 */  0x3E, 0x39, 0x60, 0x2E, 0x0E, 0xE0, 0xD2, 0x77,  // >9`....w
                /* 1180 */  0x71, 0x00, 0x39, 0x3A, 0x3F, 0x80, 0x78, 0xD0,  // q.9:?.x.
                /* 1188 */  0x5C, 0xC2, 0xF9, 0x83, 0x82, 0x78, 0xD0, 0x8E,  // \....x..
                /* 1190 */  0x07, 0x21, 0x25, 0xE7, 0x0F, 0x08, 0xFF, 0xFF,  // .!%.....
                /* 1198 */  0xF3, 0x07, 0x26, 0xCE, 0xF9, 0x03, 0x68, 0x8E,  // ..&...h.
                /* 11A0 */  0xCA, 0xC2, 0xA6, 0x0D, 0x1A, 0x63, 0x02, 0xB4,  // .....c..
                /* 11A8 */  0x1D, 0x17, 0xD8, 0x01, 0x04, 0x68, 0xA7, 0x3F,  // .....h.?
                /* 11B0 */  0x80, 0x00, 0x6A, 0xA4, 0xBC, 0x0D, 0x74, 0x26,  // ..j...t&
                /* 11B8 */  0xC3, 0x89, 0x58, 0xA4, 0x0E, 0x20, 0x38, 0xAD,  // ..X.. 8.
                /* 11C0 */  0xF3, 0x95, 0x46, 0x08, 0xC1, 0xF4, 0x0C, 0x49,  // ..F....I
                /* 11C8 */  0x62, 0x9F, 0x3F, 0x50, 0x81, 0x29, 0x14, 0xF0,  // b.?P.)..
                /* 11D0 */  0xEC, 0x40, 0xFE, 0xFF, 0x67, 0x07, 0x16, 0xE9,  // .@..g...
                /* 11D8 */  0xEC, 0x40, 0x41, 0x3C, 0x6C, 0x9F, 0x3F, 0x00,  // .@A<l.?.
                /* 11E0 */  0x5B, 0xC1, 0x6E, 0x4D, 0x50, 0x6E, 0x2F, 0xBE,  // [.nMPn/.
                /* 11E8 */  0x6E, 0x5B, 0xFC, 0xE0, 0x80, 0xE2, 0xF4, 0x7D,  // n[.....}
                /* 11F0 */  0x56, 0x01, 0xC6, 0x47, 0x2F, 0xF0, 0x1D, 0x1A,  // V..G/...
                /* 11F8 */  0x1E, 0xBD, 0xE0, 0xFC, 0xFF, 0xCF, 0x2A, 0xC0,  // ......*.
                /* 1200 */  0x6E, 0x4C, 0x3E, 0x7A, 0x01, 0xE7, 0xF0, 0x47,  // nL>z...G
                /* 1208 */  0x15, 0xD0, 0xB5, 0x3F, 0xAA, 0x00, 0x5D, 0xB1,  // ...?..].
                /* 1210 */  0xE7, 0x00, 0xD0, 0x60, 0xBC, 0x6E, 0x45, 0x38,  // ...`.nE8
                /* 1218 */  0xAD, 0x50, 0x67, 0x7E, 0x4A, 0x11, 0x63, 0x86,  // .Pg~J.c.
                /* 1220 */  0x39, 0xE6, 0x58, 0x61, 0x42, 0x84, 0x3D, 0x93,  // 9.XaB.=.
                /* 1228 */  0x30, 0xCD, 0x63, 0x6B, 0x64, 0x9E, 0x9F, 0x8F,  // 0.ckd...
                /* 1230 */  0x09, 0x3A, 0x85, 0xA1, 0x4E, 0x05, 0x0E, 0x77,  // .:..N..w
                /* 1238 */  0x0A, 0x43, 0x1C, 0x4C, 0xD9, 0xA9, 0x05, 0x1F,  // .C.L....
                /* 1240 */  0x47, 0xC1, 0xFF, 0xFF, 0x3C, 0x88, 0x09, 0x02,  // G...<...
                /* 1248 */  0xA3, 0x18, 0x10, 0x3A, 0x45, 0x70, 0xE1, 0x70,  // ...:Ep.p
                /* 1250 */  0x14, 0xC4, 0x67, 0x07, 0x9F, 0x22, 0xE0, 0x9C,  // ..g.."..
                /* 1258 */  0x5A, 0x30, 0x07, 0x53, 0xC0, 0xCC, 0xF0, 0xE0,  // Z0.S....
                /* 1260 */  0xDC, 0x5B, 0x70, 0xC3, 0x03, 0x9E, 0x37, 0x17,  // .[p...7.
                /* 1268 */  0xF0, 0x9D, 0x50, 0xC0, 0x3B, 0x3C, 0xB0, 0xFD,  // ..P.;<..
                /* 1270 */  0xFF, 0x4F, 0x28, 0x80, 0x99, 0xB3, 0x19, 0xF8,  // .O(.....
                /* 1278 */  0xE2, 0x9F, 0x35, 0x01, 0x5D, 0xE3, 0x3A, 0xD9,  // ..5.].:.
                /* 1280 */  0x33, 0x7E, 0xD6, 0x04, 0xFE, 0xFF, 0xFF, 0xB3,  // 3~......
                /* 1288 */  0x26, 0x60, 0xD6, 0xC9, 0x59, 0x13, 0xD0, 0xE5,  // &`..Y...
                /* 1290 */  0x4C, 0x80, 0xB2, 0xB3, 0x26, 0x50, 0xFE, 0xFF,  // L...&P..
                /* 1298 */  0x1F, 0x40, 0x30, 0xE3, 0xF7, 0x01, 0x04, 0xF0,  // .@0.....
                /* 12A0 */  0x12, 0xFE, 0x00, 0x82, 0x12, 0x05, 0x6C, 0x20,  // ......l 
                /* 12A8 */  0x1D, 0x40, 0x70, 0x73, 0x3C, 0x9D, 0xB0, 0xAF,  // .@ps<...
                /* 12B0 */  0x00, 0x2F, 0x0A, 0x3E, 0xF9, 0x44, 0x3F, 0xA3,  // ./.>.D?.
                /* 12B8 */  0x27, 0x2D, 0x4C, 0xF0, 0x23, 0x08, 0x2A, 0xF2,  // '-L.#.*.
                /* 12C0 */  0x71, 0x13, 0x20, 0xC4, 0xFF, 0xFF, 0xB8, 0x09,  // q. .....
                /* 12C8 */  0x18, 0x3B, 0x69, 0x83, 0xEF, 0xF4, 0x85, 0x3B,  // .;i....;
                /* 12D0 */  0xAE, 0x00, 0xCF, 0x31, 0xF9, 0xA4, 0x0D, 0x58,  // ...1...X
                /* 12D8 */  0xFA, 0xFF, 0xC3, 0xEA, 0xB8, 0x02, 0xA8, 0x09,  // ........
                /* 12E0 */  0x75, 0x5C, 0x41, 0x87, 0x3C, 0x7E, 0x21, 0x0E,  // u\A.<~!.
                /* 12E8 */  0x99, 0xEC, 0xB8, 0x02, 0x37, 0xD0, 0x39, 0x13,  // ....7.9.
                /* 12F0 */  0x15, 0x05, 0x46, 0x07, 0x4D, 0x1F, 0x1F, 0xB8,  // ..F.M...
                /* 12F8 */  0x74, 0x38, 0x0A, 0xE2, 0x73, 0x26, 0x60, 0xFF,  // t8..s&`.
                /* 1300 */  0xFF, 0x7F, 0xCE, 0x04, 0xD6, 0x47, 0x13, 0xF0,  // .....G..
                /* 1308 */  0x9E, 0x33, 0x81, 0xD3, 0xD1, 0x04, 0xF0, 0xA4,  // .3......
                /* 1310 */  0xE1, 0x68, 0x02, 0xA4, 0xFE, 0xFF, 0x47, 0x13,  // .h....G.
                /* 1318 */  0x60, 0x11, 0xFD, 0x68, 0x82, 0x92, 0x04, 0x21,  // `..h...!
                /* 1320 */  0x29, 0x07, 0x33, 0xF4, 0xB4, 0xC3, 0x1E, 0x8F,  // ).3.....
                /* 1328 */  0x41, 0x9E, 0x01, 0x8C, 0xF4, 0x66, 0xC2, 0xCF,  // A....f..
                /* 1330 */  0x65, 0x00, 0x03, 0xFF, 0xFF, 0xE7, 0x32, 0x80,  // e.....2.
                /* 1338 */  0x9D, 0x1E, 0x4E, 0x2B, 0x40, 0xF0, 0xFF, 0x7F,  // ..N+@...
                /* 1340 */  0x5A, 0x01, 0x73, 0xA4, 0xD3, 0x0A, 0x3A, 0xE2,  // Z.s...:.
                /* 1348 */  0xB9, 0x0C, 0x7D, 0x5A, 0x81, 0x77, 0x2C, 0x03,  // ..}Z.w,.
                /* 1350 */  0xD8, 0xF8, 0xFF, 0x3F, 0x96, 0x01, 0x0C, 0x12,  // ...?....
                /* 1358 */  0x71, 0xFC, 0x06, 0xD4, 0x9D, 0x13, 0xFE, 0xFF,  // q.......
                /* 1360 */  0xEF, 0x41, 0xCC, 0xA7, 0x00, 0xCD, 0x08, 0x9A,  // .A......
                /* 1368 */  0x41, 0x28, 0x9F, 0xCB, 0x00, 0xB6, 0xFF, 0xFF,  // A(......
                /* 1370 */  0xCF, 0x65, 0x00, 0x73, 0x4C, 0x1C, 0xBF, 0x01,  // .e.sL...
                /* 1378 */  0x75, 0xC7, 0x15, 0xCC, 0xFF, 0xFF, 0xB8, 0x02,  // u.......
                /* 1380 */  0xE3, 0x60, 0x06, 0xB0, 0xFD, 0xFF, 0x7F, 0x34,  // .`.....4
                /* 1388 */  0x01, 0x0C, 0xAB, 0x38, 0x9A, 0x00, 0x6A, 0x42,  // ...8..jB
                /* 1390 */  0x1F, 0x4D, 0x50, 0x67, 0x01, 0x8B, 0x38, 0x98,  // .MPg..8.
                /* 1398 */  0xA1, 0xA7, 0x5B, 0x3B, 0xB0, 0xC6, 0xF3, 0x5C,  // ..[;...\
                /* 13A0 */  0xC2, 0x63, 0x9F, 0xCA, 0x50, 0x81, 0x4F, 0x65,  // .c..P.Oe
                /* 13A8 */  0x40, 0xE2, 0xFF, 0x7F, 0x2A, 0x03, 0xD8, 0x27,  // @...*..'
                /* 13B0 */  0xE7, 0x80, 0x80, 0xDA, 0x90, 0x67, 0x64, 0x0A,  // .....gd.
                /* 13B8 */  0x1F, 0x14, 0x7C, 0xB2, 0x81, 0x73, 0x56, 0xC1,  // ..|..sV.
                /* 13C0 */  0x9D, 0x6C, 0xE0, 0x9D, 0xCA, 0xC0, 0xF6, 0xFF,  // .l......
                /* 13C8 */  0x3F, 0xAB, 0x80, 0x65, 0xDA, 0xE0, 0x3A, 0xAA,  // ?..e..:.
                /* 13D0 */  0x00, 0x6F, 0x17, 0x47, 0x15, 0x40, 0xDD, 0x91,  // .o.G.@..
                /* 13D8 */  0xEC, 0x51, 0x25, 0xF4, 0x9B, 0x0A, 0x3F, 0xAA,  // .Q%...?.
                /* 13E0 */  0x00, 0xD7, 0xFF, 0xFF, 0x51, 0x05, 0xE0, 0xFF,  // ....Q...
                /* 13E8 */  0xFF, 0xFF, 0xA8, 0x02, 0x18, 0x93, 0x71, 0x54,  // ......qT
                /* 13F0 */  0x01, 0xD4, 0x84, 0x39, 0xAA, 0xA0, 0xC3, 0x1D,  // ...9....
                /* 13F8 */  0x47, 0xD1, 0x47, 0x15, 0x7C, 0x9C, 0xB3, 0x28,  // G.G.|..(
                /* 1400 */  0xEA, 0x28, 0xEA, 0x18, 0x67, 0x51, 0x94, 0x70,  // .(..gQ.p
                /* 1408 */  0x38, 0x0A, 0xE2, 0xB3, 0x28, 0x30, 0xFB, 0xFF,  // 8...(0..
                /* 1410 */  0x9F, 0x45, 0x01, 0x66, 0x1C, 0x4B, 0xC0, 0x7B,  // .E.f.K.{
                /* 1418 */  0x16, 0x05, 0x4E, 0xC7, 0x12, 0x60, 0xF6, 0xFF,  // ..N..`..
                /* 1420 */  0x3F, 0x96, 0x00, 0x13, 0x1B, 0x07, 0x32, 0x40,  // ?.....2@
                /* 1428 */  0x1E, 0xF8, 0x03, 0x19, 0x60, 0xFD, 0xFF, 0x7F,  // ....`...
                /* 1430 */  0x20, 0x03, 0xF8, 0xFF, 0xFF, 0x3F, 0xAA, 0x80,  //  ....?..
                /* 1438 */  0x51, 0xC7, 0x81, 0x0C, 0x90, 0x77, 0x54, 0xC1,  // Q....wT.
                /* 1440 */  0x1E, 0xC8, 0x00, 0x06, 0xFC, 0xFF, 0x0F, 0x64,  // .......d
                /* 1448 */  0x00, 0x93, 0x7D, 0x1C, 0x4B, 0x40, 0xFA, 0xFF,  // ..}.K@..
                /* 1450 */  0x3F, 0x96, 0x00, 0xCB, 0xE0, 0xC7, 0x12, 0x94,  // ?.......
                /* 1458 */  0xA4, 0x61, 0xFB, 0x40, 0x86, 0x9E, 0xEE, 0x79,  // .a.@...y
                /* 1460 */  0x1C, 0x74, 0x94, 0xF0, 0x9E, 0xA4, 0x2F, 0x26,  // .t..../&
                /* 1468 */  0xFC, 0x48, 0x06, 0x30, 0xEC, 0xFF, 0x7F, 0x24,  // .H.0...$
                /* 1470 */  0x03, 0x98, 0x2B, 0xE4, 0xB0, 0x02, 0x24, 0xFE,  // ..+...$.
                /* 1478 */  0xFF, 0x87, 0x15, 0x60, 0x15, 0xE8, 0xB0, 0x82,  // ...`....
                /* 1480 */  0x0E, 0x78, 0x24, 0x43, 0x1F, 0x56, 0xE0, 0x1D,  // .x$C.V..
                /* 1488 */  0xCA, 0x00, 0xC6, 0xFD, 0xFF, 0x0F, 0x65, 0x00,  // ......e.
                /* 1490 */  0xB3, 0x8C, 0x1C, 0x4C, 0x00, 0x35, 0xE1, 0x0F,  // ...L.5..
                /* 1498 */  0x26, 0x88, 0xFF, 0x3F, 0x38, 0x13, 0x73, 0x28,  // &..?8.s(
                /* 14A0 */  0x43, 0x8F, 0xF9, 0x14, 0x8F, 0x27, 0x7E, 0x98,  // C....'~.
                /* 14A8 */  0x33, 0x8F, 0x6D, 0xA4, 0x33, 0x08, 0x72, 0x78,  // 3.m.3.rx
                /* 14B0 */  0x8F, 0x65, 0x00, 0xA3, 0xFF, 0xFF, 0xC7, 0x32,  // .e.....2
                /* 14B8 */  0x80, 0x51, 0x4A, 0x8E, 0x2B, 0x80, 0x9A, 0x50,  // .QJ.+..P
                /* 14C0 */  0xC7, 0x15, 0x74, 0x48, 0x05, 0xFF, 0xFF, 0x63,  // ..tH...c
                /* 14C8 */  0x19, 0xF6, 0xB8, 0x02, 0xFF, 0x60, 0x06, 0x30,  // .....`.0
                /* 14D0 */  0xFA, 0xFF, 0x7F, 0x30, 0x03, 0xCC, 0x3B, 0x39,  // ...0..;9
                /* 14D8 */  0x9A, 0x00, 0x6A, 0xD4, 0x1D, 0x4D, 0x50, 0x47,  // ..j..MPG
                /* 14E0 */  0x01, 0xAB, 0x7D, 0x05, 0x68, 0xB2, 0xD5, 0x1E,  // ..}.h...
                /* 14E8 */  0x12, 0x74, 0x30, 0x63, 0x20, 0x6F, 0x25, 0x06,  // .t0c o%.
                /* 14F0 */  0x39, 0xA0, 0xB7, 0x92, 0x03, 0xB1, 0xBE, 0x43,  // 9......C
                /* 14F8 */  0x19, 0x4A, 0x19, 0x85, 0x74, 0x1C, 0x92, 0x50,  // .J..t..P
                /* 1500 */  0xC9, 0xCF, 0x10, 0x14, 0xC4, 0x80, 0x8E, 0x35,  // .......5
                /* 1508 */  0x70, 0x14, 0xE2, 0xFF, 0x3F, 0xC1, 0xF3, 0x14,  // p...?...
                /* 1510 */  0x1B, 0xA2, 0x93, 0x9C, 0xC9, 0x80, 0xA2, 0xAE,  // ........
                /* 1518 */  0x6B, 0x03, 0xF4, 0x41, 0xBC, 0x36, 0x30, 0x67,  // k..A.60g
                /* 1520 */  0x43, 0x7C, 0xCF, 0x02, 0x22, 0x82, 0xE6, 0x8C,  // C|.."...
                /* 1528 */  0x92, 0x70, 0xCF, 0xA2, 0x20, 0x9E, 0xB3, 0xE3,  // .p.. ...
                /* 1530 */  0xCD, 0x19, 0x7D, 0xFB, 0xC0, 0xC7, 0xB9, 0x67,  // ..}....g
                /* 1538 */  0x01, 0xCD, 0x51, 0x59, 0xD8, 0xB8, 0x41, 0x76,  // ..QY..Av
                /* 1540 */  0xFD, 0x00, 0x16, 0xFF, 0xFF, 0xEB, 0x07, 0x38,  // .......8
                /* 1548 */  0xC5, 0x5C, 0x3F, 0x00, 0x35, 0x91, 0x5F, 0x09,  // .\?.5._.
                /* 1550 */  0xBA, 0x7E, 0xE0, 0x24, 0x5C, 0x3F, 0x10, 0x17,  // .~.$\?..
                /* 1558 */  0x2D, 0x76, 0xFD, 0xC0, 0x87, 0x3E, 0x34, 0x50,  // -v...>4P
                /* 1560 */  0x08, 0xC7, 0xA5, 0x50, 0xD8, 0xB3, 0x03, 0x2A,  // ...P...*
                /* 1568 */  0x1E, 0x1C, 0x05, 0xF1, 0xB0, 0x7D, 0x11, 0xF2,  // .....}..
                /* 1570 */  0xD9, 0x01, 0x77, 0x40, 0x60, 0x43, 0x64, 0x47,  // ..w@`CdG
                /* 1578 */  0x07, 0x78, 0x77, 0x2C, 0xE0, 0x74, 0x74, 0x00,  // .xw,.tt.
                /* 1580 */  0xDF, 0x49, 0x03, 0xEE, 0xFF, 0xFF, 0xA4, 0x01,  // .I......
                /* 1588 */  0xF7, 0x92, 0x05, 0x9C, 0x4E, 0x1A, 0x80, 0x27,  // ....N..'
                /* 1590 */  0x33, 0x27, 0x0D, 0x40, 0x8D, 0xA4, 0x93, 0x06,  // 3'.@....
                /* 1598 */  0x0A, 0x96, 0x8C, 0x4D, 0xF7, 0x26, 0x9C, 0xC8,  // ...M.&..
                /* 15A0 */  0x79, 0xE8, 0x58, 0xC1, 0x65, 0x1D, 0x34, 0x50,  // y.X.e.4P
                /* 15A8 */  0x47, 0x1E, 0x5F, 0x55, 0xF1, 0xFF, 0xFF, 0xAB,  // G._U....
                /* 15B0 */  0x2A, 0x7C, 0xED, 0x57, 0x55, 0xA0, 0x7C, 0x39,  // *|.WU.|9
                /* 15B8 */  0x04, 0xDF, 0xC9, 0x01, 0x78, 0xAB, 0xB9, 0xA8,  // ....x...
                /* 15C0 */  0x03, 0xBA, 0x4E, 0x0E, 0xEC, 0xDE, 0xE0, 0xFB,  // ..N.....
                /* 15C8 */  0x0A, 0xE6, 0xFF, 0x7F, 0x13, 0x39, 0xB9, 0x13,  // .....9..
                /* 15D0 */  0xF1, 0xDC, 0x5E, 0x5A, 0x70, 0x17, 0x75, 0x18,  // ..^Zp.u.
                /* 15D8 */  0x27, 0x1E, 0x1F, 0x1F, 0x78, 0xA0, 0xE3, 0x03,  // '...x...
                /* 15E0 */  0x05, 0xF1, 0xD0, 0x7D, 0x89, 0x03, 0x5C, 0xDD,  // ...}..\.
                /* 15E8 */  0xE9, 0x7D, 0x42, 0x82, 0x01, 0x78, 0xBE, 0xE7,  // .}B..x..
                /* 15F0 */  0x06, 0x0C, 0x47, 0xEF, 0x03, 0x1F, 0xE0, 0xE3,  // ..G.....
                /* 15F8 */  0xFF, 0x7F, 0x6E, 0xB2, 0x93, 0xD3, 0x0A, 0xD4,  // ..n.....
                /* 1600 */  0x03, 0x1F, 0xF0, 0x1C, 0x93, 0xCF, 0x4D, 0xF0,  // ......M.
                /* 1608 */  0x4F, 0x2B, 0xFC, 0xDC, 0x04, 0xFC, 0xDD, 0x1C,  // O+......
                /* 1610 */  0x57, 0x00, 0x69, 0x47, 0x15, 0x18, 0x37, 0x80,  // W.iG..7.
                /* 1618 */  0x67, 0x96, 0xFF, 0xFF, 0x33, 0x0B, 0xEE, 0xB8,  // g...3...
                /* 1620 */  0x02, 0x70, 0xFE, 0xFF, 0x7F, 0x5C, 0x01, 0xB8,  // .p...\..
                /* 1628 */  0x72, 0xFE, 0xF3, 0xE5, 0x1D, 0xF0, 0x66, 0x75,  // r.....fu
                /* 1630 */  0x6A, 0x3A, 0x6C, 0x58, 0x33, 0xB4, 0x08, 0x7C,  // j:lX3..|
                /* 1638 */  0x79, 0xE7, 0xFF, 0xFF, 0xCB, 0x3B, 0xC0, 0x1A,  // y....;..
                /* 1640 */  0x50, 0x7E, 0xFD, 0x00, 0xEE, 0x77, 0x60, 0xB0,  // P~...w`.
                /* 1648 */  0x8C, 0xE1, 0x28, 0x3C, 0x86, 0x77, 0xED, 0xD7,  // ..(<.w..
                /* 1650 */  0x0F, 0x58, 0xFF, 0xFF, 0xEB, 0x07, 0xB0, 0xB4,  // .X......
                /* 1658 */  0x73, 0xFD, 0x00, 0xD4, 0x44, 0xBF, 0x7E, 0xA0,  // s...D.~.
                /* 1660 */  0x44, 0x41, 0x48, 0xCA, 0xD5, 0x13, 0x04, 0x63,  // DAH....c
                /* 1668 */  0x7E, 0x0B, 0xF0, 0xDD, 0x0B, 0xB0, 0xF8, 0xFF,  // ~.......
                /* 1670 */  0xBF, 0x7B, 0xC1, 0xBC, 0x37, 0xE1, 0xEE, 0x5E,  // .{..7..^
                /* 1678 */  0x80, 0x8F, 0x4B, 0x13, 0xF6, 0xB4, 0x02, 0x98,  // ..K.....
                /* 1680 */  0xBE, 0x7B, 0x81, 0xE3, 0xB4, 0x02, 0xB6, 0xFF,  // .{......
                /* 1688 */  0xFF, 0x69, 0x05, 0x98, 0xE9, 0x39, 0xAD, 0x00,  // .i...9..
                /* 1690 */  0xD2, 0x4E, 0x2A, 0xD8, 0x8B, 0x27, 0x60, 0xF8,  // .N*..'`.
                /* 1698 */  0xFF, 0x7F, 0x5A, 0xC1, 0x9E, 0x34, 0x70, 0x17,  // ..Z..4p.
                /* 16A0 */  0x4F, 0xC0, 0xC8, 0x31, 0x03, 0x77, 0xF1, 0x04,  // O..1.w..
                /* 16A8 */  0x78, 0xF4, 0xFF, 0x3F, 0xAD, 0x00, 0x1B, 0x3F,  // x..?...?
                /* 16B0 */  0xA7, 0x15, 0x40, 0x8D, 0xB6, 0xD3, 0x0A, 0x0A,  // ..@.....
                /* 16B8 */  0xD6, 0x5A, 0x2F, 0x9E, 0xE8, 0xEB, 0x0A, 0xBF,  // .Z/.....
                /* 16C0 */  0x77, 0x02, 0xB6, 0xFF, 0xFF, 0x57, 0x2F, 0xE0,  // w....W/.
                /* 16C8 */  0x78, 0x00, 0xC2, 0xDD, 0x3B, 0x01, 0x4E, 0x1C,  // x...;.N.
                /* 16D0 */  0x02, 0x7C, 0xFB, 0x00, 0xDE, 0xFF, 0xFF, 0x83,  // .|......
                /* 16D8 */  0x00, 0xFC, 0x8B, 0x96, 0x6F, 0x1F, 0xB8, 0x97,  // ....o...
                /* 16E0 */  0x82, 0x6F, 0x1F, 0x6C, 0xB4, 0x6F, 0x1F, 0xF8,  // .o.l.o..
                /* 16E8 */  0xD0, 0x67, 0x06, 0x0A, 0xE1, 0xB8, 0x14, 0x0A,  // .g......
                /* 16F0 */  0x7B, 0x74, 0x40, 0xDD, 0xBC, 0x0C, 0x66, 0x10,  // {t@...f.
                /* 16F8 */  0x8F, 0xDA, 0xE1, 0x6E, 0x1F, 0xE8, 0xF3, 0x01,  // ...n....
                /* 1700 */  0x1B, 0x21, 0x3B, 0x39, 0xC0, 0x3B, 0x7E, 0xB0,  // .!;9.;~.
                /* 1708 */  0x93, 0x03, 0x30, 0x21, 0xF0, 0xC9, 0x01, 0x0C,  // ..0!....
                /* 1710 */  0xD7, 0x20, 0xEC, 0x41, 0x03, 0xBC, 0xE3, 0x03,  // . .A....
                /* 1718 */  0x3E, 0x07, 0x0D, 0xE0, 0xF1, 0xFF, 0x3F, 0x68,  // >.....?h
                /* 1720 */  0x00, 0x47, 0x43, 0x07, 0x0D, 0x40, 0x8D, 0xB4,  // .GC..@..
                /* 1728 */  0x83, 0x06, 0x4A, 0x12, 0x84, 0xA4, 0x8E, 0x4D,  // ..J....M
                /* 1730 */  0x07, 0x0D, 0xE6, 0xF3, 0x52, 0x43, 0x8E, 0x8C,  // ....RC..
                /* 1738 */  0xEC, 0x04, 0xC0, 0x8C, 0x5D, 0x06, 0x84, 0xE0,  // ....]...
                /* 1740 */  0xE3, 0x03, 0x39, 0x6B, 0xA0, 0x24, 0x51, 0xE8,  // ..9k.$Q.
                /* 1748 */  0xFE, 0x0A, 0x38, 0x3A, 0x6C, 0xC0, 0xF9, 0xFF,  // ..8:l...
                /* 1750 */  0x9F, 0x1E, 0x00, 0x2F, 0xA1, 0x29, 0x75, 0x7A,  // .../.)uz
                /* 1758 */  0x00, 0xBC, 0x48, 0x3A, 0xF5, 0xA0, 0x25, 0x1E,  // ..H:..%.
                /* 1760 */  0x15, 0x74, 0x79, 0xA8, 0x71, 0xD4, 0xBA, 0xC2,  // .ty.q...
                /* 1768 */  0xB1, 0xD3, 0xAB, 0xCF, 0x38, 0x5C, 0xD6, 0xD1,  // ....8\..
                /* 1770 */  0x01, 0x75, 0x72, 0xB0, 0x9C, 0xA3, 0x03, 0x8A,  // .ur.....
                /* 1778 */  0xCA, 0x60, 0xA6, 0xF0, 0xD1, 0xC1, 0xA7, 0x1E,  // .`......
                /* 1780 */  0x1B, 0x39, 0x3A, 0x40, 0x0D, 0x73, 0x74, 0x00,  // .9:@.st.
                /* 1788 */  0x4A, 0xFF, 0xFF, 0xA3, 0x03, 0xBC, 0x21, 0xE0,  // J.....!.
                /* 1790 */  0x2E, 0x93, 0x70, 0xC5, 0x9D, 0x1C, 0x80, 0xBA,  // ..p.....
                /* 1798 */  0xA2, 0x63, 0x0C, 0xA0, 0x46, 0xE0, 0x45, 0x1A,  // .c..F.E.
                /* 17A0 */  0x2D, 0xF8, 0xA1, 0xA0, 0x93, 0x03, 0x0E, 0xE5,  // -.......
                /* 17A8 */  0x74, 0xC2, 0xBE, 0xC7, 0x18, 0x3A, 0x7C, 0x10,  // t....:|.
                /* 17B0 */  0x03, 0x85, 0x78, 0x0B, 0x38, 0x88, 0x04, 0xC5,  // ..x.8...
                /* 17B8 */  0xDD, 0x27, 0x51, 0xB2, 0x28, 0x24, 0xE3, 0xF4,  // .'Q.($..
                /* 17C0 */  0x80, 0x0A, 0x7E, 0x86, 0xA0, 0x20, 0x06, 0x74,  // ..~.. .t
                /* 17C8 */  0xAA, 0xD3, 0x03, 0xFA, 0x20, 0xC9, 0x46, 0xE9,  // .... .F.
                /* 17D0 */  0x20, 0xF7, 0x49, 0x90, 0xFC, 0xFF, 0xEF, 0x93,  //  .I.....
                /* 17D8 */  0x60, 0xBF, 0x39, 0x80, 0xEB, 0x3C, 0x09, 0x2C,  // `.9..<.,
                /* 17E0 */  0x0E, 0x20, 0xE0, 0x1B, 0xD0, 0x51, 0x1E, 0x22,  // . ...Q."
                /* 17E8 */  0x3F, 0x80, 0x00, 0xCF, 0x51, 0xF9, 0x00, 0x02,  // ?...Q...
                /* 17F0 */  0x38, 0x72, 0xB4, 0x34, 0xFD, 0xFF, 0x0F, 0x20,  // 8r.4... 
                /* 17F8 */  0x80, 0x97, 0xD0, 0x27, 0x21, 0xD4, 0x01, 0xC4,  // ...'!...
                /* 1800 */  0x22, 0x0E, 0x20, 0x88, 0xE3, 0x24, 0x3B, 0x80,  // ". ..$;.
                /* 1808 */  0xC0, 0x0D, 0x7C, 0x1A, 0x42, 0x45, 0xA5, 0x50,  // ..|.BE.P
                /* 1810 */  0xD0, 0xD3, 0x03, 0x2A, 0x1A, 0x1C, 0x05, 0xF1,  // ...*....
                /* 1818 */  0xC8, 0x1D, 0xED, 0xF4, 0x80, 0x3E, 0x1B, 0xB2,  // .....>..
                /* 1820 */  0x51, 0xB2, 0xC3, 0x03, 0xBC, 0x23, 0x25, 0x70,  // Q....#%p
                /* 1828 */  0x3A, 0x3C, 0x80, 0xEB, 0xA8, 0x01, 0xDE, 0xE1,  // :<......
                /* 1830 */  0xC1, 0xF9, 0xFF, 0x1F, 0x35, 0x00, 0xC7, 0x07,  // ....5...
                /* 1838 */  0x43, 0x1F, 0x35, 0x00, 0x2F, 0xF2, 0x8E, 0x4E,  // C.5./..N
                /* 1840 */  0xA8, 0x03, 0xA5, 0xE5, 0x1E, 0x9D, 0xD0, 0x20,  // ....... 
                /* 1848 */  0x2F, 0x00, 0xC1, 0x4F, 0xC8, 0x23, 0xF3, 0x9C,  // /..O.#..
                /* 1850 */  0x0F, 0xCE, 0x23, 0x78, 0x72, 0x02, 0x26, 0xFF,  // ..#xr.&.
                /* 1858 */  0xFF, 0x93, 0x13, 0xC0, 0x81, 0x93, 0x20, 0x70,  // ...... p
                /* 1860 */  0x3E, 0x7F, 0x00, 0x1E, 0xFE, 0xFF, 0xE7, 0x0F,  // >.......
                /* 1868 */  0xF8, 0x96, 0xCE, 0x1F, 0x80, 0x1A, 0x61, 0xE7,  // ......a.
                /* 1870 */  0x63, 0xB4, 0xD0, 0x23, 0x29, 0xE2, 0xE4, 0xC4,  // c..#)...
                /* 1878 */  0x4E, 0xC8, 0x71, 0x83, 0xBF, 0x35, 0xF9, 0xA0,  // N.q..5..
                /* 1880 */  0xE0, 0xF3, 0x07, 0xE6, 0x54, 0x0A, 0x1C, 0x4F,  // ....T..O
                /* 1888 */  0x4E, 0xC0, 0xFF, 0xF0, 0x00, 0x9E, 0xFF, 0xFF,  // N.......
                /* 1890 */  0xE1, 0x01, 0xF8, 0x68, 0x3A, 0x3C, 0x00, 0x6A,  // ...h:<.j
                /* 1898 */  0x24, 0x9E, 0x4A, 0xD1, 0x92, 0x4F, 0xA5, 0x90,  // $.J..O..
                /* 18A0 */  0x66, 0x1C, 0x23, 0xFE, 0xFB, 0x76, 0x24, 0x9F,  // f.#..v$.
                /* 18A8 */  0x1E, 0x30, 0xF2, 0x0E, 0x43, 0xA8, 0xE3, 0x84,  // .0..C...
                /* 18B0 */  0x0F, 0x43, 0x80, 0xC7, 0xFF, 0xFF, 0x61, 0x08,  // .C....a.
                /* 18B8 */  0x38, 0x9C, 0xF7, 0xE1, 0x8F, 0x19, 0x37, 0x13,  // 8.....7.
                /* 18C0 */  0xDF, 0x0F, 0x7C, 0x0B, 0xF0, 0x51, 0x10, 0xFE,  // ..|..Q..
                /* 18C8 */  0x69, 0x08, 0xF0, 0xEE, 0xE9, 0x04, 0x02, 0x54,  // i......T
                /* 18D0 */  0xFF, 0xFF, 0xE7, 0x00, 0xF0, 0xC5, 0x3E, 0x96,  // ......>.
                /* 18D8 */  0xA2, 0x65, 0x1C, 0x4B, 0x21, 0x9D, 0x40, 0x60,  // .e.K!.@`
                /* 18E0 */  0x45, 0x3E, 0x0E, 0xA1, 0xC2, 0x52, 0xE8, 0x5C,  // E>...R.\
                /* 18E8 */  0xEA, 0xE3, 0x03, 0x0F, 0x07, 0x47, 0x41, 0x7C,  // .....GA|
                /* 18F0 */  0x2C, 0x05, 0xBC, 0x9D, 0x35, 0xC0, 0x7D, 0x2E,  // ,...5.}.
                /* 18F8 */  0x05, 0xDE, 0xFF, 0xFF, 0xB3, 0x06, 0xF0, 0x17,  // ........
                /* 1900 */  0x75, 0xD6, 0x00, 0xD4, 0x04, 0x3F, 0x3C, 0xA1,  // u....?<.
                /* 1908 */  0x85, 0x00, 0xE9, 0xF0, 0x04, 0xE7, 0xA2, 0xC0,  // ........
                /* 1910 */  0x86, 0x1E, 0xFE, 0x48, 0x7D, 0xB9, 0xF1, 0x01,  // ...H}...
                /* 1918 */  0x9B, 0x1D, 0x9E, 0x78, 0xDC, 0xC3, 0x13, 0xA0,  // ...x....
                /* 1920 */  0xE6, 0xFF, 0x7F, 0x78, 0x02, 0xCE, 0x31, 0xC7,  // ...x..1.
                /* 1928 */  0x8C, 0x0A, 0x76, 0x5C, 0xA1, 0x20, 0x3E, 0xAE,  // ..v\. >.
                /* 1930 */  0xC0, 0x1B, 0x61, 0xCD, 0x08, 0x3A, 0x3A, 0x01,  // ..a..::.
                /* 1938 */  0x66, 0x46, 0x07, 0xEB, 0x4C, 0x0E, 0x7B, 0x74,  // fF..L.{t
                /* 1940 */  0xC0, 0xE7, 0xC8, 0x4C, 0x0E, 0x2B, 0xA0, 0xFC,  // ...L.+..
                /* 1948 */  0xFF, 0x1F, 0x56, 0x80, 0xAF, 0xA9, 0xC3, 0x0A,  // ..V.....
                /* 1950 */  0xA0, 0x26, 0xCD, 0xD3, 0x40, 0x87, 0x15, 0x5C,  // .&..@..\
                /* 1958 */  0xBA, 0xC3, 0x0A, 0xE2, 0x9C, 0x85, 0x3D, 0xAC,  // ......=.
                /* 1960 */  0xC0, 0x49, 0x02, 0xAB, 0xC3, 0x0A, 0xCF, 0x00,  // .I......
                /* 1968 */  0x23, 0xC5, 0x24, 0x3A, 0x69, 0x70, 0x8D, 0x67,  // #.$:ip.g
                /* 1970 */  0x16, 0x0A, 0xE2, 0x33, 0x83, 0x0F, 0x2B, 0x80,  // ...3..+.
                /* 1978 */  0x8B, 0xFF, 0xFF, 0xCD, 0x01, 0x76, 0xAC, 0x3B,  // .....v.;
                /* 1980 */  0x09, 0xD4, 0xB1, 0x01, 0xBF, 0x1B, 0x09, 0xF8,  // ........
                /* 1988 */  0x6E, 0x01, 0x70, 0x26, 0xC2, 0xA6, 0x06, 0xFC,  // n.p&....
                /* 1990 */  0xCE, 0x23, 0xE0, 0xBB, 0x8D, 0x02, 0x4B, 0x50,  // .#....KP
                /* 1998 */  0x7E, 0xBB, 0x86, 0x13, 0xE7, 0x56, 0x83, 0xF8,  // ~....V..
                /* 19A0 */  0xFF, 0xDF, 0x6A, 0x80, 0x1D, 0x94, 0x85, 0x4D,  // ..j....M
                /* 19A8 */  0x1B, 0xFA, 0x28, 0x8E, 0xE1, 0x28, 0x3C, 0x86,  // ..(..(<.
                /* 19B0 */  0x87, 0xC7, 0x04, 0xBE, 0xD6, 0x00, 0x6F, 0x55,  // ......oU
                /* 19B8 */  0xD7, 0x1A, 0x40, 0x4D, 0xD8, 0xDB, 0x28, 0x0A,  // ..@M..(.
                /* 19C0 */  0xD6, 0xE1, 0xAF, 0xFA, 0x88, 0x53, 0x0D, 0xF3,  // .....S..
                /* 19C8 */  0x09, 0x41, 0x8E, 0x25, 0x2C, 0xF0, 0x4D, 0x14,  // .A.%,.M.
                /* 19D0 */  0x75, 0x11, 0x75, 0xD0, 0xA3, 0x03, 0x2A, 0x1A,  // u.u...*.
                /* 19D8 */  0x1C, 0x05, 0xF1, 0x5D, 0x8C, 0xFD, 0xFF, 0x6F,  // ...]...o
                /* 19E0 */  0xA2, 0x80, 0xB1, 0x70, 0xA3, 0x43, 0x9F, 0x03,  // ...p.C..
                /* 19E8 */  0x3C, 0xDC, 0x27, 0x83, 0x43, 0x7E, 0x80, 0x60,  // <.'.C~.`
                /* 19F0 */  0x17, 0x51, 0x80, 0x0F, 0xAE, 0x8E, 0x19, 0x90,  // .Q......
                /* 19F8 */  0xFF, 0xFF, 0xC7, 0x0C, 0x60, 0x1F, 0xE4, 0x22,  // ....`.."
                /* 1A00 */  0x8A, 0x3A, 0x0A, 0x38, 0xD8, 0x51, 0x43, 0xC0,  // .:.8.QC.
                /* 1A08 */  0x11, 0x8E, 0xF6, 0x45, 0x94, 0x8D, 0xFB, 0x74,  // ...E...t
                /* 1A10 */  0x42, 0x87, 0xA8, 0x78, 0x6C, 0x84, 0x60, 0x94,  // B..xl.`.
                /* 1A18 */  0x2B, 0x18, 0x85, 0x70, 0x08, 0x18, 0x45, 0xB8,  // +..p..E.
                /* 1A20 */  0x89, 0xA1, 0x44, 0xC3, 0x51, 0x10, 0x1F, 0x18,  // ..D.Q...
                /* 1A28 */  0x7C, 0xCE, 0x80, 0x33, 0xA4, 0x73, 0x38, 0x45,  // |..3.s8E
                /* 1A30 */  0xDF, 0x0A, 0x81, 0xE7, 0x39, 0x03, 0x7C, 0xA3,  // ....9.|.
                /* 1A38 */  0x83, 0x73, 0x04, 0xF7, 0x80, 0x8F, 0x0E, 0x78,  // .s.....x
                /* 1A40 */  0xFD, 0xFF, 0x8F, 0x19, 0xC0, 0xE0, 0x50, 0x02,  // ......P.
                /* 1A48 */  0xE7, 0xB6, 0xCD, 0x2F, 0x9C, 0x00, 0x27, 0x64,  // .../..'d
                /* 1A50 */  0x1D, 0x4A, 0x00, 0x19, 0xFF, 0xFF, 0x73, 0x00,  // .J....s.
                /* 1A58 */  0x56, 0xEB, 0xA1, 0x04, 0xAD, 0xFD, 0x50, 0x82,  // V.....P.
                /* 1A60 */  0x9E, 0xEE, 0x03, 0x88, 0x81, 0x0E, 0x28, 0x4C,  // ......(L
                /* 1A68 */  0x88, 0x27, 0x2A, 0xDD, 0xB4, 0x51, 0x3A, 0x29,  // .'*..Q:)
                /* 1A70 */  0xA4, 0xE4, 0x2C, 0x85, 0xCA, 0x7E, 0x86, 0xA0,  // ..,..~..
                /* 1A78 */  0x20, 0x06, 0x74, 0xB0, 0xA3, 0x03, 0x94, 0xE1,  //  .t.....
                /* 1A80 */  0x9E, 0xCE, 0x41, 0x9C, 0x46, 0xF1, 0x67, 0x6D,  // ..A.F.gm
                /* 1A88 */  0x40, 0xAC, 0xB8, 0x49, 0xA3, 0xE4, 0xDC, 0xC7,  // @..I....
                /* 1A90 */  0x28, 0x88, 0x27, 0xED, 0xA8, 0x10, 0xB2, 0x31,  // (.'....1
                /* 1A98 */  0x69, 0xF4, 0x9C, 0x9F, 0x03, 0xF8, 0x9D, 0x85,  // i.......
                /* 1AA0 */  0x5D, 0x3F, 0x80, 0xDF, 0xFF, 0xFF, 0xB2, 0xC2,  // ]?......
                /* 1AA8 */  0x45, 0x4E, 0x1B, 0xFA, 0x0C, 0x9E, 0x68, 0xAA,  // EN....h.
                /* 1AB0 */  0x1E, 0x87, 0xA6, 0x71, 0x14, 0xD5, 0xDD, 0x19,  // ...q....
                /* 1AB8 */  0x34, 0xD2, 0x93, 0x6D, 0x6C, 0xBE, 0x52, 0x38,  // 4..ml.R8
                /* 1AC0 */  0x26, 0x1D, 0xE7, 0x6C, 0x0D, 0x47, 0xDA, 0x6E,  // &..l.G.n
                /* 1AC8 */  0x21, 0x40, 0x5D, 0xDB, 0xFD, 0x10, 0xD0, 0x35,  // !@]....5
                /* 1AD0 */  0xAE, 0x80, 0x31, 0xCF, 0xF8, 0x61, 0xC2, 0x73,  // ..1..a.s
                /* 1AD8 */  0x3C, 0x44, 0x4F, 0xC3, 0xF7, 0x43, 0x60, 0x30,  // <DO..C`0
                /* 1AE0 */  0x9E, 0x87, 0x0F, 0x76, 0xE3, 0x03, 0xCF, 0xFF,  // ...v....
                /* 1AE8 */  0xFF, 0x7E, 0x08, 0x38, 0xB8, 0x17, 0x1C, 0x30,  // .~.8...0
                /* 1AF0 */  0xE6, 0x7E, 0x08, 0xF0, 0x41, 0xE0, 0x31, 0x03,  // .~..A.1.
                /* 1AF8 */  0xE8, 0xFD, 0xFF, 0x8F, 0x19, 0xE0, 0x0E, 0x7C,  // .......|
                /* 1B00 */  0xCC, 0x40, 0x71, 0x10, 0x20, 0x1D, 0x33, 0x18,  // .@q. .3.
                /* 1B08 */  0x76, 0xD0, 0xB7, 0xBB, 0xC3, 0xF0, 0x69, 0xDA,  // v.....i.
                /* 1B10 */  0xE3, 0x3C, 0x12, 0xCC, 0x41, 0x03, 0x70, 0x7E,  // .<..A.p~
                /* 1B18 */  0x1D, 0xC7, 0x1D, 0x34, 0x00, 0x1F, 0xFF, 0xFF,  // ...4....
                /* 1B20 */  0x83, 0x06, 0xF0, 0x37, 0x78, 0xD0, 0x00, 0xD4,  // ...7x...
                /* 1B28 */  0xA8, 0xBB, 0xF3, 0xA1, 0x38, 0x7C, 0xD7, 0xF3,  // ....8|..
                /* 1B30 */  0x41, 0x03, 0xCE, 0x88, 0x8F, 0x08, 0xA3, 0xEE,  // A.......
                /* 1B38 */  0xD2, 0x87, 0xD2, 0x45, 0x21, 0x1D, 0x07, 0x0D,  // ...E!...
                /* 1B40 */  0x54, 0xF2, 0x63, 0x01, 0x05, 0x31, 0xA0, 0x63,  // T.c..1.c
                /* 1B48 */  0x1D, 0x34, 0xA0, 0xDE, 0xF9, 0x80, 0xE7, 0xFF,  // .4......
                /* 1B50 */  0xFF, 0xCE, 0x07, 0x6C, 0xAF, 0x7B, 0x9E, 0x33,  // ...l.{.3
                /* 1B58 */  0xDF, 0xB2, 0xE7, 0x6C, 0x0A, 0xCF, 0xD9, 0xD7,  // ...l....
                /* 1B60 */  0x0F, 0xF0, 0x1E, 0x78, 0x81, 0xFF, 0xF5, 0x03,  // ...x....
                /* 1B68 */  0x78, 0x2B, 0xBC, 0x7E, 0x00, 0x89, 0xFF, 0xFF,  // x+.~....
                /* 1B70 */  0xF5, 0x03, 0x58, 0x49, 0xBB, 0x7E, 0xA0, 0x60,  // ..XI.~.`
                /* 1B78 */  0x2D, 0xF5, 0xA1, 0xA0, 0x01, 0x47, 0x7E, 0x83,  // -....G~.
                /* 1B80 */  0xE5, 0xC7, 0x0F, 0x43, 0xBC, 0x01, 0x1C, 0x40,  // ...C...@
                /* 1B88 */  0x82, 0xF2, 0x2E, 0x1F, 0x28, 0x61, 0x14, 0x12,  // ....(a..
                /* 1B90 */  0x72, 0x72, 0x40, 0x45, 0x3F, 0x14, 0x50, 0x10,  // rr@E?.P.
                /* 1B98 */  0x03, 0x3A, 0xD7, 0xC9, 0x01, 0xAD, 0xE2, 0xF2,  // .:......
                /* 1BA0 */  0x41, 0x86, 0x73, 0x44, 0x2F, 0x0C, 0x3E, 0x7D,  // A.sD/.>}
                /* 1BA8 */  0x00, 0x9C, 0xF9, 0xFF, 0x9F, 0x3E, 0x00, 0xDB,  // .....>..
                /* 1BB0 */  0x16, 0x4F, 0x1F, 0x80, 0x9A, 0xB8, 0x37, 0x57,  // .O....7W
                /* 1BB8 */  0x74, 0xFC, 0xB1, 0xE9, 0xF4, 0xE1, 0xC9, 0x3E,  // t......>
                /* 1BC0 */  0x7D, 0xC0, 0x88, 0x7C, 0x03, 0x44, 0x85, 0xA5,  // }..|.D..
                /* 1BC8 */  0xD0, 0x15, 0xD0, 0x27, 0x07, 0x1E, 0x0E, 0x8E,  // ...'....
                /* 1BD0 */  0x82, 0x78, 0xD4, 0x3E, 0x39, 0xC0, 0x39, 0x7D,  // .x.>9.9}
                /* 1BD8 */  0x60, 0xFE, 0xFF, 0x57, 0x40, 0x80, 0xC9, 0x1A,  // `..W@...
                /* 1BE0 */  0xCF, 0x19, 0x20, 0xFD, 0xFF, 0x9F, 0x33, 0x80,  // .. ...3.
                /* 1BE8 */  0xA5, 0xA0, 0x73, 0x06, 0x4A, 0xCA, 0x2D, 0x97,  // ..s.J.-.
                /* 1BF0 */  0x1E, 0x9A, 0x30, 0xE7, 0xF9, 0xE3, 0x38, 0x42,  // ..0...8B
                /* 1BF8 */  0x26, 0xEB, 0x98, 0x81, 0x12, 0x44, 0xA1, 0xF3,  // &....D..
                /* 1C00 */  0x0E, 0xE0, 0xE8, 0x98, 0x01, 0xBE, 0x83, 0x03,  // ........
                /* 1C08 */  0xF0, 0xF6, 0x78, 0x70, 0x80, 0xF4, 0xFF, 0x3F,  // ..xp...?
                /* 1C10 */  0x38, 0x00, 0x16, 0xE4, 0x1D, 0xDE, 0x50, 0x47,  // 8.....PG
                /* 1C18 */  0x01, 0xCB, 0x3D, 0xBC, 0x21, 0x51, 0xDE, 0x6D,  // ..=.!Q.m
                /* 1C20 */  0xD8, 0xDC, 0x02, 0xD7, 0x0C, 0xA3, 0x13, 0x80,  // ........
                /* 1C28 */  0x4E, 0x6F, 0x28, 0x69, 0xA7, 0x37, 0x80, 0x12,  // No(i.7..
                /* 1C30 */  0xE7, 0x0F, 0x0F, 0x9A, 0x4B, 0x38, 0x7E, 0x50,  // ....K8~P
                /* 1C38 */  0x10, 0x0F, 0xDA, 0xF1, 0x40, 0x51, 0x88, 0xFF,  // ....@Q..
                /* 1C40 */  0xFF, 0xC7, 0x0F, 0x18, 0x71, 0x4E, 0x6F, 0x40,  // ....qNo@
                /* 1C48 */  0x55, 0xD8, 0xB4, 0xA1, 0x8F, 0xE2, 0x18, 0x8E,  // U.......
                /* 1C50 */  0xC2, 0x63, 0x78, 0x17, 0x4E, 0xE0, 0xF3, 0x07,  // .cx.N...
                /* 1C58 */  0xF0, 0x16, 0x79, 0xFE, 0x00, 0xD4, 0xC8, 0x3A,  // ..y....:
                /* 1C60 */  0x07, 0xA1, 0x38, 0x2C, 0xF3, 0x1C, 0x84, 0x3C,  // ..8,...<
                /* 1C68 */  0x7F, 0xF0, 0x89, 0x3F, 0x20, 0x78, 0x66, 0x86,  // ...? xf.
                /* 1C70 */  0x26, 0x47, 0x21, 0xC4, 0xFF, 0xFF, 0x28, 0x04,  // &G!...(.
                /* 1C78 */  0x30, 0xCA, 0xE4, 0xD9, 0x01, 0x50, 0x13, 0xF6,  // 0....P..
                /* 1C80 */  0x48, 0x86, 0x0E, 0x6F, 0xE0, 0xFF, 0x7F, 0x92,  // H..o....
                /* 1C88 */  0xC4, 0x8D, 0xF1, 0x0C, 0x3D, 0x0C, 0x1F, 0x24,  // ....=..$
                /* 1C90 */  0x01, 0xA6, 0xFF, 0xFF, 0x8F, 0x19, 0x60, 0x52,  // ......`R
                /* 1C98 */  0x79, 0xCC, 0x00, 0xD4, 0x08, 0x3B, 0xC0, 0xA1,  // y....;..
                /* 1CA0 */  0x8E, 0x19, 0x16, 0x7A, 0x80, 0x43, 0x1E, 0x33,  // ...z.C.3
                /* 1CA8 */  0x30, 0x67, 0x79, 0x80, 0x11, 0xFF, 0xFF, 0xB3,  // 0gy.....
                /* 1CB0 */  0x3C, 0xC0, 0x2C, 0x97, 0x87, 0x0F, 0x40, 0x8D,  // <.,...@.
                /* 1CB8 */  0x9C, 0x23, 0x13, 0xE2, 0xFF, 0x3F, 0x6A, 0x26,  // .#...?j&
                /* 1CC0 */  0xEF, 0xC8, 0x44, 0x7D, 0x1E, 0x44, 0x85, 0x10,  // ..D}.D..
                /* 1CC8 */  0x23, 0xA8, 0x4F, 0x6E, 0xE0, 0x3F, 0x31, 0x01,  // #.On.?1.
                /* 1CD0 */  0x8E, 0xCE, 0x0D, 0xC0, 0xFB, 0x64, 0xE8, 0x73,  // .....d.s
                /* 1CD8 */  0x03, 0x60, 0xE1, 0xFF, 0x7F, 0x36, 0x07, 0xCB,  // .`...6..
                /* 1CE0 */  0xA5, 0xE1, 0x84, 0x2B, 0x1C, 0xAE, 0x20, 0xCF,  // ...+.. .
                /* 1CE8 */  0xA6, 0xE2, 0x91, 0x91, 0x13, 0x24, 0xB0, 0x3C,  // .....$.<
                /* 1CF0 */  0x38, 0x00, 0xDE, 0x7D, 0x1E, 0x1C, 0x80, 0xE8,  // 8..}....
                /* 1CF8 */  0xFF, 0xFF, 0x1C, 0x00, 0x46, 0x49, 0x07, 0x07,  // ....FI..
                /* 1D00 */  0x14, 0x2C, 0x39, 0x38, 0x20, 0xEE, 0x62, 0x4C,  // .,98 .bL
                /* 1D08 */  0xE4, 0x3C, 0x34, 0x43, 0x76, 0x94, 0x05, 0xD8,  // .<4Cv...
                /* 1D10 */  0x25, 0xF4, 0xE4, 0x00, 0x24, 0xFE, 0xFF, 0x27,  // %...$..'
                /* 1D18 */  0x07, 0x60, 0x15, 0xEF, 0x69, 0xE0, 0x33, 0xBC,  // .`..i.3.
                /* 1D20 */  0x47, 0xA6, 0x40, 0x30, 0xA8, 0x83, 0x9E, 0x0F,  // G.@0....
                /* 1D28 */  0x08, 0xF8, 0x81, 0x1E, 0xE7, 0xE1, 0x1D, 0x09,  // ........
                /* 1D30 */  0x93, 0x04, 0x87, 0x3A, 0x03, 0x78, 0x24, 0xCD,  // ...:.x$.
                /* 1D38 */  0x9F, 0x66, 0xC8, 0x84, 0x3D, 0x95, 0x90, 0x4C,  // .f..=..L
                /* 1D40 */  0xDA, 0x90, 0x50, 0x67, 0x45, 0x32, 0x21, 0x4D,  // ..PgE2!M
                /* 1D48 */  0xE7, 0xD5, 0x21, 0xE2, 0x93, 0xA2, 0x61, 0x12,  // ..!...a.
                /* 1D50 */  0x78, 0xF4, 0x0C, 0x8D, 0x13, 0x0C, 0x30, 0x3E,  // x.....0>
                /* 1D58 */  0xD0, 0x9C, 0x0E, 0x8E, 0xFF, 0x5C, 0xA2, 0x45,  // .....\.E
                /* 1D60 */  0x38, 0xE7, 0x78, 0xA1, 0x0C, 0x17, 0xE8, 0x59,  // 8.x....Y
                /* 1D68 */  0xC1, 0x27, 0x7A, 0x86, 0x15, 0xFC, 0x20, 0x5E,  // .'z... ^
                /* 1D70 */  0x03, 0x18, 0x4C, 0xA0, 0x28, 0x1E, 0x8D, 0x21,  // ..L.(..!
                /* 1D78 */  0x5F, 0x05, 0x18, 0x54, 0xAB, 0xB7, 0x05, 0x81,  // _..T....
                /* 1D80 */  0x1B, 0xD6, 0x40, 0xC1, 0x0C, 0x71, 0x74, 0xD8,  // ..@..qt.
                /* 1D88 */  0x61, 0x1A, 0xD2, 0x03, 0x79, 0xCE, 0xF0, 0x3D,  // a...y..=
                /* 1D90 */  0xC0, 0x04, 0x27, 0xFC, 0xCC, 0x50, 0xEE, 0x9D,  // ..'..P..
                /* 1D98 */  0x5F, 0xE2, 0x51, 0x85, 0xD1, 0x1C, 0x14, 0x81,  // _.Q.....
                /* 1DA0 */  0x0B, 0x8D, 0x39, 0x14, 0x78, 0x12, 0x6F, 0x13,  // ..9.x.o.
                /* 1DA8 */  0x3E, 0x1C, 0x30, 0xF7, 0x13, 0xD4, 0x05, 0xE2,  // >.0.....
                /* 1DB0 */  0x19, 0x22, 0xC6, 0x5B, 0x91, 0x11, 0x6A, 0x14,  // .".[..j.
                /* 1DB8 */  0x60, 0x0B, 0x9D, 0x20, 0x18, 0x25, 0x08, 0x43,  // `.. .%.C
                /* 1DC0 */  0xE1, 0x98, 0x51, 0x3C, 0xCD, 0xB3, 0x08, 0x52,  // ..Q<...R
                /* 1DC8 */  0x9B, 0x00, 0x65, 0x20, 0x32, 0x86, 0x88, 0x40,  // ..e 2..@
                /* 1DD0 */  0xF8, 0xFF, 0xB7, 0x3F, 0x08, 0x22, 0xE1, 0x31,  // ...?.".1
                /* 1DD8 */  0xA1, 0x73, 0x81, 0x23, 0x8D, 0x06, 0x75, 0xC4,  // .s.#..u.
                /* 1DE0 */  0xF0, 0xD9, 0xC0, 0xE7, 0x82, 0x73, 0x3C, 0xE8,  // .....s<.
                /* 1DE8 */  0x43, 0x34, 0xC8, 0xD1, 0x1D, 0x5C, 0x9D, 0x87,  // C4...\..
                /* 1DF0 */  0x02, 0x32, 0x3C, 0x76, 0x1C, 0xF1, 0xD9, 0xC2,  // .2<v....
                /* 1DF8 */  0xA7, 0x04, 0xBC, 0x6B, 0x40, 0x5D, 0x0F, 0x1E,  // ...k@]..
                /* 1E00 */  0x27, 0xC0, 0x32, 0xA2, 0x67, 0x11, 0xD8, 0xE3,  // '.2.g...
                /* 1E08 */  0xF1, 0xD1, 0xC0, 0xA7, 0x00, 0x13, 0x58, 0xFE,  // ......X.
                /* 1E10 */  0x20, 0x50, 0x23, 0x33, 0xB4, 0x47, 0x7A, 0x5A,  //  P#3.GzZ
                /* 1E18 */  0x6F, 0x08, 0x3E, 0x17, 0x98, 0xC0, 0x62, 0x4F,  // o.>...bO
                /* 1E20 */  0xA8, 0x74, 0x3C, 0xE0, 0x3F, 0x6B, 0x3D, 0x1A,  // .t<.?k=.
                /* 1E28 */  0x44, 0x78, 0x33, 0xF0, 0x7C, 0x7D, 0xB6, 0x61,  // Dx3.|}.a
                /* 1E30 */  0x4E, 0x4E, 0x36, 0xE8, 0xCB, 0x02, 0x86, 0x60,  // NN6....`
                /* 1E38 */  0xE0, 0x13, 0x0A, 0x15, 0x75, 0x42, 0x41, 0x9D,  // ....uBA.
                /* 1E40 */  0x2C, 0x7C, 0xA8, 0x60, 0x77, 0x83, 0x87, 0x06,  // ,|.`w...
                /* 1E48 */  0x76, 0x40, 0x61, 0xA7, 0x1E, 0x72, 0x2A, 0x01,  // v@a..r*.
                /* 1E50 */  0xFD, 0x79, 0x06, 0x77, 0xCC, 0x80, 0x7B, 0xAB,  // .y.w..{.
                /* 1E58 */  0xC0, 0xCD, 0x88, 0x1F, 0x7F, 0x89, 0x80, 0xFF,  // ........
                /* 1E60 */  0xFF, 0x51, 0x07, 0x2C, 0xCE, 0x8E, 0x0F, 0x3A,  // .Q.,...:
                /* 1E68 */  0x06, 0xF0, 0xB3, 0x0E, 0xFC, 0x1B, 0x53, 0x8C,  // ......S.
                /* 1E70 */  0x30, 0x4F, 0x12, 0xB1, 0x62, 0x1C, 0xCE, 0xB9,  // 0O..b...
                /* 1E78 */  0x9C, 0xC4, 0x7B, 0x53, 0x95, 0x30, 0x82, 0xEC,  // ..{S.0..
                /* 1E80 */  0xF2, 0xC6, 0x43, 0x0E, 0x49, 0x1E, 0xD2, 0x79,  // ..C.I..y
                /* 1E88 */  0x3C, 0x82, 0x70, 0x02, 0x0F, 0x11, 0x3F, 0x0C,  // <.p...?.
                /* 1E90 */  0x7E, 0x96, 0x78, 0xF8, 0x61, 0x93, 0x78, 0xFF,  // ~.x.a.x.
                /* 1E98 */  0xF1, 0x04, 0x8E, 0xCA, 0xA7, 0x14, 0x23, 0x04,  // ......#.
                /* 1EA0 */  0x7F, 0xF8, 0x38, 0xE7, 0xB7, 0x00, 0x13, 0xF8,  // ..8.....
                /* 1EA8 */  0x7A, 0xE4, 0x13, 0x2E, 0x62, 0x00, 0x28, 0xF0,  // z...b.(.
                /* 1EB0 */  0x13, 0x3A, 0x45, 0x9F, 0x85, 0x4E, 0x0C, 0x77,  // .:E..N.w
                /* 1EB8 */  0x28, 0xE0, 0x23, 0xC2, 0x0E, 0x80, 0x9F, 0x6F,  // (.#....o
                /* 1EC0 */  0x00, 0xDB, 0xFF, 0xFF, 0xF3, 0x0D, 0xE0, 0xE2,  // ........
                /* 1EC8 */  0xF4, 0xF0, 0x7C, 0x03, 0x30, 0xEE, 0xFF, 0x7F,  // ..|.0...
                /* 1ED0 */  0xBE, 0x01, 0x78, 0x31, 0x81, 0x60, 0x8F, 0x37,  // ..x1.`.7
                /* 1ED8 */  0xE7, 0x70, 0x3E, 0xCF, 0x2F, 0x8F, 0x16, 0x51,  // .p>./..Q
                /* 1EE0 */  0x42, 0x44, 0x89, 0x13, 0x21, 0xCA, 0x13, 0x44,  // BD..!..D
                /* 1EE8 */  0x3C, 0x5F, 0x5F, 0x30, 0xE7, 0x1B, 0xC0, 0x45,  // <__0...E
                /* 1EF0 */  0xB4, 0xC3, 0x0D, 0x2A, 0xCC, 0xF9, 0x06, 0x24,  // ...*...$
                /* 1EF8 */  0xFF, 0xFF, 0xF3, 0x0D, 0xC0, 0xA3, 0x93, 0xC4,  // ........
                /* 1F00 */  0xF3, 0x0D, 0x38, 0xE3, 0x3F, 0x55, 0x74, 0xBE,  // ..8.?Ut.
                /* 1F08 */  0x01, 0xF6, 0xFF, 0xFF, 0xF3, 0x0D, 0xC0, 0x52,  // .......R
                /* 1F10 */  0xAC, 0xE7, 0x1B, 0x70, 0x9D, 0x2B, 0x9E, 0x5E,  // ...p.+.^
                /* 1F18 */  0x1E, 0x6D, 0xDE, 0x2C, 0x0C, 0x18, 0xCF, 0xC3,  // .m.,....
                /* 1F20 */  0x78, 0xB9, 0xC1, 0x0E, 0x10, 0xF7, 0xFF, 0x3F,  // x......?
                /* 1F28 */  0x0C, 0x02, 0xDC, 0xBF, 0x47, 0x44, 0xF9, 0xFF,  // ....GD..
                /* 1F30 */  0x3F, 0x0C, 0x02, 0xFC, 0xFF, 0xFF, 0x1F, 0x06,  // ?.......
                /* 1F38 */  0x01, 0x0F, 0x87, 0x9B, 0x60, 0x4F, 0x33, 0xBE,  // ....`O3.
                /* 1F40 */  0x3C, 0x1C, 0x43, 0xC0, 0x77, 0x41, 0x98, 0xE7,  // <.C.wA..
                /* 1F48 */  0x1B, 0xC0, 0x86, 0x42, 0x9B, 0x3E, 0x35, 0x1A,  // ...B.>5.
                /* 1F50 */  0xB5, 0x6A, 0x50, 0xA6, 0x46, 0x99, 0x06, 0xB5,  // .jP.F...
                /* 1F58 */  0xFA, 0x54, 0x6A, 0xCC, 0x98, 0xA8, 0x27, 0x84,  // .Tj...'.
                /* 1F60 */  0x22, 0x41, 0xE8, 0x90, 0xE0, 0xB8, 0xEF, 0x04,  // "A......
                /* 1F68 */  0x81, 0x38, 0xF4, 0xDB, 0x43, 0x20, 0x16, 0xF3,  // .8..C ..
                /* 1F70 */  0x2E, 0x10, 0x88, 0xC5, 0xEA, 0x00, 0x61, 0x92,  // ......a.
                /* 1F78 */  0x8D, 0x80, 0x30, 0xA9, 0x4A, 0x40, 0x98, 0xF8,  // ..0.J@..
                /* 1F80 */  0xB7, 0x83, 0x40, 0x1C, 0x41, 0x0B, 0x08, 0x93,  // ..@.A...
                /* 1F88 */  0xEE, 0x05, 0x84, 0x85, 0x59, 0xA9, 0x40, 0x1C,  // ....Y.@.
                /* 1F90 */  0xC9, 0x0D, 0x08, 0x8B, 0xB2, 0x3A, 0x81, 0x38,  // .....:.8
                /* 1F98 */  0x9C, 0x1D, 0x10, 0x16, 0xE2, 0xB9, 0x20, 0x10,  // ...... .
                /* 1FA0 */  0x4B, 0x30, 0x04, 0xC2, 0x02, 0x28, 0x82, 0xB8,  // K0...(..
                /* 1FA8 */  0x0D, 0x9D, 0x80, 0x82, 0x08, 0xC8, 0x31, 0x9F,  // ......1.
                /* 1FB0 */  0x3E, 0x02, 0x72, 0x68, 0x10, 0x1D, 0x25, 0x88,  // >.rh..%.
                /* 1FB8 */  0x27, 0x20, 0x26, 0x07, 0x44, 0x40, 0xFF, 0xFF,  // ' &.D@..
                /* 1FC0 */  0x87, 0x19, 0x99, 0x02, 0x62, 0x42, 0x41, 0x04,  // ....bBA.
                /* 1FC8 */  0x64, 0xD1, 0xAE, 0x80, 0x58, 0x04, 0x10, 0x0D,  // d...X...
                /* 1FD0 */  0x88, 0x3C, 0x5A, 0x02, 0x91, 0x68, 0x20, 0x02,  // .<Z..h .
                /* 1FD8 */  0x72, 0x50, 0x5F, 0x40, 0x2C, 0x36, 0x88, 0x86,  // rP_@,6..
                /* 1FE0 */  0x43, 0xFE, 0x0A, 0x02, 0xB2, 0x20, 0x10, 0x01,  // C.... ..
                /* 1FE8 */  0x59, 0xD8, 0x03, 0x47, 0x40, 0x96, 0x09, 0xA2,  // Y..G@...
                /* 1FF0 */  0x81, 0x92, 0x27, 0x4C, 0x20, 0xA2, 0x1B, 0x44,  // ..'L ..D
                /* 1FF8 */  0x40, 0xD6, 0xED, 0x0D, 0x88, 0xA5, 0x00, 0x11,  // @.......
                /* 2000 */  0x90, 0xF3, 0x7C, 0x70, 0x04, 0xE4, 0x74, 0x20,  // ..|p..t 
                /* 2008 */  0x02, 0x72, 0x42, 0x77, 0x40, 0x2C, 0x2E, 0x88,  // .rBw@,..
                /* 2010 */  0x8E, 0x00, 0x44, 0x1E, 0x10, 0x0B, 0x0F, 0x22,  // ..D...."
                /* 2018 */  0x20, 0xCB, 0xF0, 0x07, 0xC4, 0x44, 0x81, 0x08,  //  ....D..
                /* 2020 */  0xC8, 0x21, 0x81, 0x68, 0x64, 0x20, 0x1A, 0xE2,  // .!.hd ..
                /* 2028 */  0xE1, 0x20, 0x20, 0x47, 0x02, 0x11, 0x90, 0x43,  // .  G...C
                /* 2030 */  0xBD, 0x21, 0x02, 0x91, 0x88, 0x20, 0x02, 0x26,  // .!... .&
                /* 2038 */  0x0F, 0x06, 0x01, 0x13, 0x10, 0x1D, 0x0C, 0xC8,  // ........
                /* 2040 */  0xA3, 0x27, 0x10, 0x91, 0xF0, 0xA6, 0x08, 0x44,  // .'.....D
                /* 2048 */  0xA4, 0x3C, 0xA4, 0x04, 0x64, 0x61, 0x20, 0x02,  // .<..da .
                /* 2050 */  0xB2, 0xB2, 0xDF, 0xFD, 0x41, 0x32, 0x10, 0x01,  // ....A2..
                /* 2058 */  0x39, 0x30, 0x10, 0x4D, 0x0F, 0x44, 0x73, 0xBC,  // 90.M.Ds.
                /* 2060 */  0x1D, 0x02, 0x91, 0x50, 0x20, 0x02, 0x72, 0xAA,  // ...P .r.
                /* 2068 */  0x17, 0x45, 0x20, 0x92, 0x11, 0x44, 0x07, 0x02,  // .E ..D..
                /* 2070 */  0xF2, 0xC2, 0x08, 0x44, 0x32, 0x83, 0x08, 0xC8,  // ...D2...
                /* 2078 */  0xEA, 0xDF, 0x68, 0x02, 0x72, 0x14, 0x10, 0x01,  // ..h.r...
                /* 2080 */  0x39, 0x89, 0x51, 0x20, 0x96, 0x0B, 0x44, 0x40,  // 9.Q ..D@
                /* 2088 */  0xD6, 0xF9, 0xA0, 0x08, 0x44, 0x54, 0x83, 0x08,  // ....DT..
                /* 2090 */  0xC8, 0xB2, 0x7F, 0x1C, 0x81, 0x48, 0x06, 0x10,  // .....H..
                /* 2098 */  0x01, 0x59, 0xCD, 0xCF, 0x22, 0x10, 0x91, 0x06,  // .Y.."...
                /* 20A0 */  0x22, 0x20, 0x67, 0x04, 0xA2, 0x81, 0x81, 0xA8,  // " g.....
                /* 20A8 */  0x74, 0xAD, 0x40, 0x2C, 0x07, 0x88, 0x80, 0x1C,  // t.@,....
                /* 20B0 */  0xE4, 0x81, 0x11, 0x88, 0xC4, 0x02, 0xD1, 0xC0,  // ........
                /* 20B8 */  0xC8, 0xE3, 0xE4, 0xA0, 0x19, 0x88, 0x80, 0xFE,  // ........
                /* 20C0 */  0xFF, 0x0F, 0x15, 0x52, 0x0B, 0xC4, 0x94, 0x83,  // ...R....
                /* 20C8 */  0xE8, 0x90, 0x40, 0xDC, 0x02, 0x31, 0x3D, 0x20,  // ..@..1= 
                /* 20D0 */  0x3A, 0x1C, 0x91, 0xF7, 0x47, 0x20, 0x22, 0x0E,  // :...G ".
                /* 20D8 */  0x44, 0x40, 0x0E, 0x0B, 0x44, 0xA3, 0x03, 0xD1,  // D@..D...
                /* 20E0 */  0xEC, 0x7A, 0x81, 0x98, 0x90, 0x0F, 0xC8, 0xA3,  // .z......
                /* 20E8 */  0x05, 0x03, 0x11, 0x90, 0xF3, 0x01, 0x51, 0xA1,  // ......Q.
                /* 20F0 */  0x82, 0x07, 0x49, 0x41, 0x04, 0xE4, 0xFC, 0x40,  // ..IA...@
                /* 20F8 */  0x54, 0xCC, 0x2F, 0x46, 0x03, 0x21, 0xCF, 0x9F,  // T./F.!..
                /* 2100 */  0x03, 0x61, 0x20, 0x02, 0xB2, 0xBA, 0x4F, 0x8E,  // .a ...O.
                /* 2108 */  0x80, 0x2C, 0x15, 0x44, 0x07, 0x03, 0x02, 0x44,  // .,.D...D
                /* 2110 */  0x15, 0x3C, 0x71, 0x74, 0xE0, 0x20, 0x20, 0x1A,  // .<qt.  .
                /* 2118 */  0x3C, 0x01, 0xA2, 0xB1, 0x34, 0x03, 0xB1, 0x90,  // <...4...
                /* 2120 */  0x20, 0x1A, 0x3C, 0x79, 0x07, 0x09, 0xC8, 0x21,  //  .<y...!
                /* 2128 */  0x40, 0x74, 0x68, 0x20, 0xBF, 0x15, 0x01, 0x39,  // @th ...9
                /* 2130 */  0x11, 0x88, 0x80, 0x9C, 0x48, 0xF5, 0xC0, 0x28,  // ....H..(
                /* 2138 */  0x88, 0x0E, 0x13, 0xE4, 0xFD, 0x25, 0x20, 0xE7,  // .....% .
                /* 2140 */  0x05, 0x11, 0x90, 0xF5, 0xFF, 0x55, 0x02, 0x91,  // .....U..
                /* 2148 */  0x34, 0x20, 0x02, 0x72, 0x96, 0x07, 0x4C, 0x20,  // 4 .r..L 
                /* 2150 */  0x12, 0x0C, 0x44, 0x40, 0x0E, 0xF6, 0xF6, 0x09,  // ..D@....
                /* 2158 */  0x44, 0x62, 0x82, 0x68, 0xD0, 0xE4, 0x07, 0xA7,  // Db.h....
                /* 2160 */  0x41, 0x13, 0x10, 0x0D, 0x8C, 0xBC, 0x82, 0x02,  // A.......
                /* 2168 */  0x33, 0x10, 0x01, 0x93, 0x67, 0x4F, 0x20, 0x92,  // 3...gO .
                /* 2170 */  0x12, 0x44, 0x40, 0x4E, 0xF9, 0x92, 0xD3, 0xA1,  // .D@N....
                /* 2178 */  0x81, 0x80, 0x08, 0xC8, 0xC9, 0x9F, 0x68, 0x81,  // ......h.
                /* 2180 */  0x88, 0x8E, 0x17, 0x97, 0x80, 0x9C, 0x0B, 0x44,  // .......D
                /* 2188 */  0xC0, 0x04, 0x88, 0xE6, 0x7E, 0xA0, 0x05, 0x22,  // ....~.."
                /* 2190 */  0x2A, 0xDE, 0x58, 0x02, 0xB2, 0x08, 0xFD, 0x40,  // *.X....@
                /* 2198 */  0x4C, 0x11, 0x88, 0x80, 0x9C, 0x0F, 0x88, 0x86,  // L.......
                /* 21A0 */  0x05, 0xA2, 0xC2, 0xFD, 0x1F, 0x44, 0x28, 0x88,  // .....D(.
                /* 21A8 */  0x80, 0xAC, 0xE8, 0x91, 0x27, 0x20, 0xCB, 0x03,  // ....' ..
                /* 21B0 */  0x11, 0x90, 0xE5, 0x15, 0x00, 0x62, 0x62, 0x41,  // .....bbA
                /* 21B8 */  0x04, 0xF4, 0xFF, 0x0F, 0xA2, 0x06, 0x40, 0x4C,  // ......@L
                /* 21C0 */  0x3A, 0x88, 0x8E, 0x36, 0x24, 0xC2, 0x41, 0x82,  // :..6$.A.
                /* 21C8 */  0x82, 0x08, 0xC8, 0x51, 0x81, 0x68, 0x70, 0x20,  // ...Q.hp 
                /* 21D0 */  0x1A, 0xA4, 0xC2, 0x21, 0x82, 0x82, 0x08, 0xC8,  // ...!....
                /* 21D8 */  0x32, 0x33, 0x00, 0x31, 0xD1, 0x20, 0x02, 0xB2,  // 23.1. ..
                /* 21E0 */  0xE2, 0x10, 0x40, 0x4C, 0x3E, 0x88, 0x06, 0x41,  // ..@L>..A
                /* 21E8 */  0x4A, 0x00, 0x31, 0x65, 0x20, 0x1A, 0x30, 0x01,  // J.1e .0.
                /* 21F0 */  0xA2, 0x91, 0x81, 0xA8, 0xFC, 0x14, 0x40, 0x2C,  // ......@,
                /* 21F8 */  0x0B, 0x88, 0x0E, 0x03, 0xA4, 0x05, 0x10, 0x4B,  // .......K
                /* 2200 */  0x06, 0x22, 0x20, 0xA7, 0xAB, 0x01, 0xC4, 0xB2,  // ." .....
                /* 2208 */  0x82, 0xE8, 0x00, 0x42, 0x72, 0x00, 0x53, 0x10,  // ...Br.S.
                /* 2210 */  0x01, 0x59, 0x5B, 0x0F, 0x20, 0xA6, 0x14, 0x44,  // .Y[. ..D
                /* 2218 */  0x87, 0x00, 0x02, 0x44, 0x75, 0x04, 0x39, 0x04,  // ...Du.9.
                /* 2220 */  0x50, 0x10, 0x1D, 0x02, 0x08, 0x10, 0x0D, 0x99,  // P.......
                /* 2228 */  0x04, 0x88, 0x25, 0x06, 0xD1, 0x61, 0x81, 0x34,  // ..%..a.4
                /* 2230 */  0x01, 0x62, 0x61, 0x40, 0x74, 0xC0, 0x21, 0x51,  // .ba@t.!Q
                /* 2238 */  0x80, 0x98, 0x4A, 0x10, 0x01, 0x39, 0x31, 0x10,  // ..J..91.
                /* 2240 */  0x8D, 0x0F, 0x44, 0xE3, 0x57, 0x39, 0x60, 0xD0,  // ..D.W9`.
                /* 2248 */  0x2C, 0x40, 0x4C, 0x50, 0x98, 0x83, 0x00, 0x05,  // ,@LP....
                /* 2250 */  0xD1, 0xC1, 0x85, 0x00, 0xD1, 0xF8, 0x40, 0x34,  // ......@4
                /* 2258 */  0x4E, 0x19, 0x20, 0x16, 0x0E, 0x44, 0x87, 0x01,  // N. ..D..
                /* 2260 */  0x92, 0xE6, 0x30, 0x40, 0x41, 0x74, 0x98, 0x21,  // ..0@At.!
                /* 2268 */  0x6D, 0x0E, 0x33, 0x14, 0x44, 0x83, 0x24, 0x75,  // m.3.D.$u
                /* 2270 */  0x0E, 0x45, 0x14, 0x44, 0x40, 0x8E, 0x0D, 0x44,  // .E.D@..D
                /* 2278 */  0x35, 0xE4, 0x39, 0xFC, 0x50, 0x10, 0x0D, 0x82,  // 5.9.P...
                /* 2280 */  0x00, 0x51, 0xA1, 0x7D, 0x0E, 0x22, 0x14, 0x44,  // .Q.}.".D
                /* 2288 */  0x40, 0x56, 0x10, 0xE8, 0xA0, 0x44, 0x41, 0x04,  // @V...DA.
                /* 2290 */  0xE4, 0x64, 0x40, 0x34, 0x26, 0x10, 0x4D, 0x59,  // .d@4&.MY
                /* 2298 */  0xE8, 0x40, 0x41, 0x41, 0x04, 0xF4, 0xFF, 0x7F,  // .@AA....
                /* 22A0 */  0x40, 0x51, 0x23, 0x20, 0xA6, 0xE4, 0x91, 0x28,  // @Q# ...(
                /* 22A8 */  0x20, 0x67, 0x03, 0x11, 0x90, 0x93, 0x02, 0x51,  //  g.....Q
                /* 22B0 */  0xE5, 0x95, 0x0E, 0x31, 0x14, 0x44, 0x40, 0xD6,  // ...1.D@.
                /* 22B8 */  0x95, 0x69, 0xE0, 0x14, 0x44, 0x40, 0x4E, 0x0D,  // .i..D@N.
                /* 22C0 */  0x44, 0x35, 0x74, 0x3A, 0x88, 0x50, 0x10, 0x1D,  // D5t:.P..
                /* 22C8 */  0x44, 0x08, 0x10, 0x55, 0x1B, 0x0A, 0x88, 0x69,  // D..U...i
                /* 22D0 */  0x07, 0x11, 0x90, 0xB5, 0xA7, 0x02, 0x62, 0x41,  // ......bA
                /* 22D8 */  0x40, 0x74, 0x88, 0x20, 0xAD, 0x0E, 0x11, 0x14,  // @t. ....
                /* 22E0 */  0x44, 0x87, 0x0F, 0x52, 0x6B, 0x70, 0x14, 0x44,  // D..Rkp.D
                /* 22E8 */  0x87, 0x14, 0x92, 0xEB, 0x90, 0x42, 0x41, 0x74,  // .....BAt
                /* 22F0 */  0xF0, 0x22, 0xC1, 0x80, 0x58, 0x1E, 0x10, 0x0D,  // ."..X...
                /* 22F8 */  0x9A, 0x14, 0x3B, 0x40, 0x51, 0x10, 0x1D, 0x7A,  // ..;@Q..z
                /* 2300 */  0x48, 0xB3, 0x83, 0x02, 0x05, 0x11, 0x90, 0x13,  // H.......
                /* 2308 */  0x44, 0x03, 0xA6, 0x20, 0x02, 0x26, 0xD9, 0x0E,  // D.. .&..
                /* 2310 */  0x00, 0x14, 0x44, 0x47, 0x30, 0xD2, 0x0D, 0x88,  // ..DG0...
                /* 2318 */  0x45, 0x05, 0xD1, 0x01, 0x81, 0x94, 0x3B, 0x20,  // E.....; 
                /* 2320 */  0x50, 0x10, 0x1D, 0x10, 0x48, 0x3A, 0x60, 0x0A,  // P...H:`.
                /* 2328 */  0x22, 0x20, 0x07, 0x8C, 0x07, 0xC4, 0xD2, 0x82,  // " ......
                /* 2330 */  0x68, 0xE0, 0xA4, 0x1E, 0x10, 0x8B, 0x01, 0xA2,  // h.......
                /* 2338 */  0xC3, 0x08, 0xC9, 0x77, 0x68, 0xA0, 0x20, 0x3A,  // ...wh. :
                /* 2340 */  0xE4, 0x90, 0x7E, 0x40, 0x4C, 0x2B, 0x88, 0x80,  // ..~@L+..
                /* 2348 */  0xAC, 0xBA, 0xE0, 0x21, 0x89, 0x82, 0x08, 0xC8,  // ...!....
                /* 2350 */  0x9A, 0x12, 0x02, 0x31, 0x85, 0x20, 0x02, 0x72,  // ...1. .r
                /* 2358 */  0x5E, 0x20, 0x9A, 0x1E, 0x88, 0x66, 0x69, 0x78,  // ^ ...fix
                /* 2360 */  0xE8, 0xA0, 0x20, 0x02, 0x72, 0xCE, 0x8A, 0x40,  // .. .r..@
                /* 2368 */  0x2C, 0x35, 0x88, 0x0E, 0x08, 0xA4, 0xE3, 0x01,  // ,5......
                /* 2370 */  0x81, 0x86, 0x04, 0x62, 0x7A, 0x52, 0x02, 0x31,  // ...bzR.1
                /* 2378 */  0x75, 0x20, 0x02, 0xB2, 0xBE, 0x98, 0x40, 0x4C,  // u ....@L
                /* 2380 */  0x2D, 0x88, 0x0E, 0x26, 0x24, 0x27, 0x10, 0xD3,  // -..&$'..
                /* 2388 */  0x0F, 0x22, 0xA0, 0xFF, 0xFF, 0x21, 0x29, 0xE8,  // ."...!).
                /* 2390 */  0xC1, 0x87, 0x82, 0xE8, 0xE0, 0x44, 0x92, 0x1E,  // .....D..
                /* 2398 */  0xB0, 0x28, 0x88, 0x80, 0x9C, 0x34, 0x2A, 0x10,  // .(...4*.
                /* 23A0 */  0xCB, 0x0D, 0x22, 0x20, 0xA7, 0xCF, 0x0A, 0xC4,  // .." ....
                /* 23A8 */  0xB4, 0x74, 0x1D, 0x0C, 0x2D, 0x3B, 0x18, 0x0A,  // .t..-;..
                /* 23B0 */  0x22, 0x20, 0x2B, 0x6C, 0x0B, 0xC4, 0xE4, 0x82,  // " +l....
                /* 23B8 */  0xE8, 0xC0, 0x40, 0xE2, 0x1E, 0x18, 0x28, 0x88,  // ..@...(.
                /* 23C0 */  0x0E, 0x23, 0x24, 0xEF, 0x61, 0x84, 0x82, 0xE8,  // .#$.a...
                /* 23C8 */  0x10, 0x41, 0xFA, 0x02, 0x31, 0x91, 0x20, 0x02,  // .A..1. .
                /* 23D0 */  0xB2, 0xC6, 0x67, 0xA7, 0x80, 0xAC, 0x18, 0x44,  // ..g....D
                /* 23D8 */  0x40, 0x4E, 0x93, 0x18, 0x88, 0x65, 0x03, 0x11,  // @N...e..
                /* 23E0 */  0x90, 0x95, 0x36, 0x3E, 0xC4, 0x51, 0x10, 0x01,  // ..6>.Q..
                /* 23E8 */  0x59, 0x45, 0x64, 0x20, 0xA6, 0x09, 0x44, 0x83,  // YEd ..D.
                /* 23F0 */  0x20, 0x99, 0x07, 0x41, 0x41, 0x34, 0x08, 0xD2,  //  ..AA4..
                /* 23F8 */  0x79, 0x10, 0x14, 0x44, 0x07, 0x0A, 0x52, 0xFA,  // y..D..R.
                /* 2400 */  0x40, 0x41, 0x41, 0x74, 0x20, 0x20, 0xA9, 0x81,  // @AAt  ..
                /* 2408 */  0x98, 0x40, 0x10, 0x0D, 0x9E, 0xB4, 0x1E, 0x3C,  // .@.....<
                /* 2410 */  0x05, 0x11, 0x30, 0xA9, 0x0D, 0xC4, 0x92, 0x80,  // ..0.....
                /* 2418 */  0x68, 0x20, 0x24, 0xF7, 0x81, 0x83, 0x82, 0x08,  // h $.....
                /* 2420 */  0xC8, 0x99, 0x81, 0xA8, 0x82, 0xDE, 0x40, 0x4C,  // ......@L
                /* 2428 */  0x49, 0x71, 0x20, 0x26, 0x0B, 0x44, 0x07, 0x29,  // Iq &.D.)
                /* 2430 */  0x02, 0x44, 0xE3, 0x02, 0xD1, 0xB4, 0xC9, 0x81,  // .D......
                /* 2438 */  0x58, 0x76, 0x10, 0x01, 0x59, 0x47, 0x75, 0x20,  // Xv..YGu 
                /* 2440 */  0xA6, 0x0A, 0x44, 0x07, 0x0C, 0x02, 0x44, 0x13,  // ..D...D.
                /* 2448 */  0x03, 0x51, 0xFD, 0xD9, 0x0F, 0x55, 0x14, 0x44,  // .Q...U.D
                /* 2450 */  0x87, 0x1C, 0x12, 0xFE, 0xB0, 0x45, 0x41, 0x04,  // .....EA.
                /* 2458 */  0x64, 0xBD, 0xE5, 0x81, 0x98, 0x78, 0x10, 0x0D,  // d....x..
                /* 2460 */  0x8E, 0xA4, 0x1F, 0x1C, 0x05, 0x11, 0x30, 0x89,  // ......0.
                /* 2468 */  0x7F, 0xE0, 0xA1, 0x20, 0x02, 0xB2, 0xE6, 0xFA,  // ... ....
                /* 2470 */  0x40, 0x2C, 0x01, 0x88, 0x80, 0xFE, 0xFF, 0x0F,  // @,......
                /* 2478 */  0x08, 0xCA, 0x7F, 0x40, 0xA0, 0x20, 0x3A, 0x20,  // ...@. : 
                /* 2480 */  0x90, 0xBB, 0xAC, 0x0E, 0x08, 0x04, 0x44, 0x87,  // ......D.
                /* 2488 */  0x20, 0x02, 0x44, 0x65, 0x18, 0x00, 0x62, 0x2A,  //  .De..b*
                /* 2490 */  0x14, 0x00, 0x31, 0x4D, 0x20, 0x02, 0xB2, 0x2A,  // ..1M ..*
                /* 2498 */  0x09, 0x40, 0x4C, 0x22, 0x88, 0x06, 0x4A, 0x80,  // .@L"..J.
                /* 24A0 */  0x68, 0x74, 0x20, 0x9A, 0xDC, 0x02, 0x10, 0xD3,  // ht .....
                /* 24A8 */  0xA1, 0x01, 0x88, 0xA9, 0x11, 0x01, 0xC4, 0xB4,  // ........
                /* 24B0 */  0x81, 0xE8, 0x20, 0x41, 0x80, 0x68, 0x6E, 0x20,  // .. A.hn 
                /* 24B8 */  0x9A, 0xC2, 0x04, 0x10, 0xCB, 0x04, 0xA2, 0x43,  // .......C
                /* 24C0 */  0x05, 0x71, 0x01, 0xC4, 0x22, 0x82, 0xE8, 0x10,  // .q.."...
                /* 24C8 */  0x41, 0x96, 0xF4, 0x00, 0xC4, 0x40, 0x74, 0x20,  // A....@t 
                /* 24D0 */  0x21, 0x36, 0x80, 0x58, 0x0E, 0x10, 0x1D, 0x1E,  // !6.X....
                /* 24D8 */  0x88, 0x0F, 0x20, 0x96, 0x0D, 0x44, 0x87, 0x07,  // .. ..D..
                /* 24E0 */  0x22, 0x04, 0x88, 0xE9, 0x06, 0xD1, 0x00, 0x89,  // ".......
                /* 24E8 */  0x91, 0x01, 0x52, 0x10, 0x1D, 0x14, 0x89, 0x13,  // ..R.....
                /* 24F0 */  0x20, 0x26, 0x13, 0x44, 0x87, 0x25, 0x02, 0x44,  //  &.D.%.D
                /* 24F8 */  0xE3, 0x03, 0xD1, 0xF4, 0x52, 0x80, 0x98, 0x16,  // ....R...
                /* 2500 */  0x2B, 0x83, 0xA5, 0x5E, 0x80, 0x98, 0x46, 0x10,  // +..^..F.
                /* 2508 */  0x01, 0x13, 0x20, 0x9A, 0x1F, 0x88, 0xA6, 0x11,  // .. .....
                /* 2510 */  0x33, 0x20, 0x0A, 0xA2, 0xC3, 0x10, 0x51, 0x03,  // 3 ....Q.
                /* 2518 */  0xC4, 0x22, 0x83, 0xE8, 0x80, 0x45, 0xDC, 0x00,  // ."...E..
                /* 2520 */  0xB1, 0x28, 0x20, 0x3A, 0x30, 0x12, 0x39, 0x40,  // .( :0.9@
                /* 2528 */  0x2C, 0x17, 0x88, 0x80, 0x89, 0x1E, 0x20, 0x96,  // ,..... .
                /* 2530 */  0x19, 0x44, 0x07, 0x1C, 0xE2, 0x07, 0x88, 0xE5,  // .D......
                /* 2538 */  0x01, 0xD1, 0x21, 0x86, 0x08, 0x02, 0x62, 0x5A,  // ..!...bZ
                /* 2540 */  0x41, 0x04, 0x64, 0xAD, 0x8A, 0x80, 0x98, 0x70,  // A.d....p
                /* 2548 */  0x10, 0x1D, 0xD8, 0x88, 0x23, 0x20, 0x16, 0x03,  // ....# ..
                /* 2550 */  0x44, 0x07, 0x54, 0x62, 0x09, 0x88, 0x45, 0x03,  // D.Tb..E.
                /* 2558 */  0xD1, 0xA1, 0x94, 0x68, 0x02, 0xA6, 0x20, 0x02,  // ...h.. .
                /* 2560 */  0xFA, 0xFF, 0x3F, 0x90, 0x49, 0x14, 0x10, 0x0B,  // ..?.I...
                /* 2568 */  0x03, 0xA2, 0xC3, 0x27, 0x51, 0x05, 0xC4, 0x12,  // ...'Q...
                /* 2570 */  0x82, 0x68, 0x20, 0xC4, 0x15, 0x30, 0x05, 0xD1,  // .h ..0..
                /* 2578 */  0x40, 0x88, 0xAC, 0x81, 0x50, 0x10, 0x01, 0x39,  // @...P..9
                /* 2580 */  0x90, 0x2E, 0x20, 0x96, 0x0E, 0x44, 0x07, 0x4C,  // .. ..D.L
                /* 2588 */  0xE2, 0x0B, 0x88, 0x89, 0x06, 0xD1, 0x21, 0x96,  // ......!.
                /* 2590 */  0x08, 0x03, 0x62, 0x11, 0x40, 0x74, 0x28, 0x24,  // ..b.@t($
                /* 2598 */  0xCA, 0x80, 0x58, 0x22, 0x10, 0x1D, 0x9E, 0x88,  // ..X"....
                /* 25A0 */  0x33, 0x20, 0x96, 0x0F, 0x44, 0x07, 0x1D, 0x62,  // 3 ..D..b
                /* 25A8 */  0x0D, 0x88, 0x85, 0x06, 0xD1, 0xC0, 0x88, 0x36,  // .......6
                /* 25B0 */  0x20, 0x96, 0x05, 0x44, 0x87, 0x1E, 0xE2, 0x0D,  //  ..D....
                /* 25B8 */  0x88, 0x25, 0x03, 0xD1, 0x41, 0x84, 0x98, 0x03,  // .%..A...
                /* 25C0 */  0x62, 0x71, 0x41, 0x34, 0x30, 0xA2, 0x0E, 0x88,  // bqA40...
                /* 25C8 */  0xA5, 0x00, 0xD1, 0x21, 0x82, 0xB8, 0x3B, 0x44,  // ...!..;D
                /* 25D0 */  0x50, 0x10, 0x01, 0x39, 0x93, 0x3D, 0x20, 0x16,  // P..9.= .
                /* 25D8 */  0x10, 0x44, 0x87, 0x24, 0xA2, 0x6F, 0x00, 0x14,  // .D.$.o..
                /* 25E0 */  0x44, 0x40, 0x8E, 0x2C, 0x10, 0x88, 0x7D, 0x98,  // D@.,..}.
                /* 25E8 */  0x0F, 0x94, 0x82, 0x08, 0xC8, 0xF1, 0x80, 0x68,  // .......h
                /* 25F0 */  0x54, 0x87, 0x40, 0x2C, 0x38, 0x88, 0x0E, 0x6D,  // T.@,8..m
                /* 25F8 */  0xC4, 0x22, 0x10, 0x13, 0xA3, 0x11, 0x88, 0x49,  // .".....I
                /* 2600 */  0x12, 0x09, 0xC4, 0xF4, 0x81, 0xE8, 0x30, 0x48,  // ......0H
                /* 2608 */  0x4C, 0x02, 0x31, 0xB1, 0x20, 0x3A, 0x64, 0x11,  // L.1. :d.
                /* 2610 */  0x97, 0x40, 0x2C, 0x04, 0x88, 0x80, 0x89, 0x4C,  // .@,....L
                /* 2618 */  0x20, 0x26, 0x10, 0x44, 0x40, 0x16, 0xA9, 0x13,  //  &.D@...
                /* 2620 */  0x88, 0x29, 0x06, 0x11, 0x90, 0x05, 0xFB, 0x04,  // .)......
                /* 2628 */  0x62, 0xF2, 0x41, 0x74, 0xF8, 0x22, 0x46, 0x81,  // b.At."F.
                /* 2630 */  0x58, 0x2C, 0x10, 0x1D, 0xB0, 0x88, 0x53, 0x20,  // X,....S 
                /* 2638 */  0x96, 0x14, 0x44, 0x03, 0x23, 0x52, 0x07, 0x46,  // ..D.#R.F
                /* 2640 */  0x41, 0x74, 0x48, 0x25, 0x5E, 0x81, 0x98, 0x20,  // AtH%^.. 
                /* 2648 */  0x10, 0x0D, 0x96, 0x00, 0xD1, 0xB8, 0x40, 0xE4,  // ......@.
                /* 2650 */  0xFF, 0x7F, 0x14, 0x90, 0x59, 0x20, 0xA6, 0x40,  // ....Y .@
                /* 2658 */  0xED, 0x20, 0x29, 0x88, 0x06, 0x49, 0xDC, 0x02,  // . )..I..
                /* 2660 */  0xB1, 0x60, 0x20, 0x3A, 0x94, 0x11, 0x20, 0x1A,  // .` :.. .
                /* 2668 */  0xD6, 0x2E, 0x10, 0x4B, 0x0E, 0xA2, 0x43, 0x19,  // ...K..C.
                /* 2670 */  0xD1, 0x7B, 0xB0, 0xA0, 0x20, 0x3A, 0xF8, 0x10,  // .{.. :..
                /* 2678 */  0xBF, 0x40, 0x4C, 0x24, 0x88, 0x0E, 0x44, 0x44,  // .@L$..DD
                /* 2680 */  0xF0, 0x20, 0x29, 0x88, 0x0E, 0x5C, 0x44, 0x31,  // . )..\D1
                /* 2688 */  0x10, 0xCB, 0x00, 0xA2, 0xC3, 0x17, 0x71, 0x3C,  // ......q<
                /* 2690 */  0x78, 0x0A, 0x22, 0x60, 0x62, 0x19, 0x98, 0x82,  // x."`b...
                /* 2698 */  0xE8, 0x40, 0x42, 0x80, 0xA8, 0x16, 0xCD, 0x40,  // .@B....@
                /* 26A0 */  0x2C, 0x19, 0x88, 0x80, 0x9C, 0x13, 0x88, 0x46,  // ,......F
                /* 26A8 */  0x15, 0x7D, 0x80, 0xA1, 0x20, 0x3A, 0xFC, 0x11,  // .}.. :..
                /* 26B0 */  0xD3, 0x40, 0x4C, 0x84, 0x6A, 0x20, 0x26, 0x4A,  // .@L.j &J
                /* 26B8 */  0xF6, 0xC1, 0x86, 0x82, 0xE8, 0xA0, 0x46, 0x80,  // ......F.
                /* 26C0 */  0x68, 0x7C, 0x20, 0x2A, 0xC2, 0x37, 0x10, 0x93,  // h| *.7..
                /* 26C8 */  0x04, 0xA2, 0x81, 0x13, 0x20, 0x1A, 0x17, 0x88,  // .... ...
                /* 26D0 */  0x26, 0x36, 0x0E, 0x4C, 0x41, 0x34, 0x28, 0xA2,  // &6.LA4(.
                /* 26D8 */  0x7C, 0x50, 0xD4, 0x39, 0x10, 0xD3, 0x62, 0x1D,  // |P.9..b.
                /* 26E0 */  0x88, 0x09, 0x03, 0xD1, 0x80, 0x89, 0x76, 0x20,  // ......v 
                /* 26E8 */  0xA6, 0x12, 0x44, 0x07, 0x1A, 0x22, 0xFE, 0x40,  // ..D..".@
                /* 26F0 */  0x43, 0x41, 0x74, 0xA0, 0x21, 0xE6, 0x0F, 0x34,  // CAt.!..4
                /* 26F8 */  0x14, 0x44, 0x87, 0x18, 0xE2, 0xFE, 0x10, 0x43,  // .D.....C
                /* 2700 */  0x41, 0x04, 0x64, 0x95, 0xF6, 0x81, 0x98, 0x64,  // A.d....d
                /* 2708 */  0x10, 0x1D, 0xCE, 0x88, 0x7E, 0x20, 0xA6, 0x1F,  // ....~ ..
                /* 2710 */  0x44, 0x87, 0x17, 0x12, 0xE0, 0xF0, 0x42, 0x41,  // D.....BA
                /* 2718 */  0x34, 0x68, 0x92, 0x60, 0xD0, 0x14, 0x44, 0x07,  // 4h.`..D.
                /* 2720 */  0x01, 0xD2, 0xE0, 0x20, 0x40, 0x41, 0x74, 0x80,  // ... @At.
                /* 2728 */  0x21, 0x15, 0x80, 0x58, 0x1C, 0x10, 0x1D, 0x6C,  // !..X...l
                /* 2730 */  0x48, 0x86, 0x83, 0x0D, 0x05, 0x11, 0xD0, 0xFF,  // H.......
                /* 2738 */  0x3F, 0x88, 0x42, 0x1C, 0x20, 0x28, 0x88, 0x80,  // ?.B. (..
                /* 2740 */  0x9C, 0x35, 0xC5, 0x41, 0x81, 0x82, 0x68, 0xB0,  // .5.A..h.
                /* 2748 */  0x24, 0xC6, 0x60, 0x69, 0x8D, 0x41, 0xD0, 0x20,  // $.`i.A. 
                /* 2750 */  0x20, 0x2C, 0x3F, 0x08, 0x2F, 0x02, 0xC2, 0xF4,  //  ,?./...
                /* 2758 */  0x55, 0x01, 0x61, 0xE9, 0x40, 0x78, 0x96, 0x01,  // U.a.@x..
                /* 2760 */  0xD0, 0x32, 0x20, 0x4C, 0x7B, 0x1A, 0x10, 0xDA,  // .2 L{...
                /* 2768 */  0x06, 0x84, 0xE5, 0xCA, 0x33, 0x60, 0xDA, 0x07,  // ....3`..
                /* 2770 */  0x84, 0x06, 0x02, 0x61, 0xFF, 0x7F               // ...a..
            })
            Method (_WED, 1, NotSerialized)  // _Wxx: Wake Event
            {
                If (Zero){}
                ElseIf ((Arg0 == 0xE2))
                {
                    Return (EVT1) /* \GSA1.EVT1 */
                }

                Return (Zero)
            }

            Name (SAA0, Buffer (0x10)
            {
                /* 0000 */  0xF0, 0xFF, 0xFF, 0xFF, 0x02, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00   // ........
            })
            Name (CCAA, Zero)
            Name (CCAB, Zero)
            Name (CCAC, Zero)
            Name (ECD0, Zero)
            Name (ECD1, Zero)
            Name (ECD2, Zero)
            Method (WCAA, 1, NotSerialized)
            {
                If ((Arg0 == Zero))
                {
                    If ((CCAA == Zero)){}
                }
                ElseIf ((CCAA != Zero)){}
                CCAA = Arg0
            }

            Method (WED0, 1, NotSerialized)
            {
                If ((Arg0 == Zero))
                {
                    If ((ECD0 == Zero)){}
                }
                ElseIf ((ECD0 != Zero)){}
                ECD0 = Arg0
            }

            Method (WED1, 1, NotSerialized)
            {
                If ((Arg0 == Zero))
                {
                    If ((ECD1 == Zero)){}
                }
                ElseIf ((ECD1 != Zero)){}
                ECD1 = Arg0
            }

            Method (WED2, 1, NotSerialized)
            {
                If ((Arg0 == Zero))
                {
                    If ((ECD2 == Zero)){}
                }
                ElseIf ((ECD2 != Zero)){}
                ECD2 = Arg0
            }

            Method (GETA, 1, NotSerialized)
            {
                Return (SAA0) /* \GSA1.SAA0 */
            }

            Method (WQAA, 1, NotSerialized)
            {
                Return (GETA (Arg0))
            }

            Method (SETA, 2, NotSerialized)
            {
                SAA0 = Arg1
                Return (SAA0) /* \GSA1.SAA0 */
            }

            Method (WSAA, 2, NotSerialized)
            {
                Return (SETA (Arg0, Arg1))
            }

            Method (WMBB, 3, Serialized)
            {
                If ((Arg1 == One))
                {
                    Return (GGG1 ())
                }
                ElseIf ((Arg1 == 0x02))
                {
                    Return (GGG2 ())
                }
                ElseIf ((Arg1 == 0x03))
                {
                    Return (GGG3 ())
                }
                ElseIf ((Arg1 == 0x04))
                {
                    Return (GGG4 ())
                }
                ElseIf ((Arg1 == 0x05))
                {
                    Return (GGG5 ())
                }
                ElseIf ((Arg1 == 0x06))
                {
                    Return (GGG6 ())
                }
                ElseIf ((Arg1 == 0x07))
                {
                    Return (GGG7 ())
                }
                ElseIf ((Arg1 == 0x08))
                {
                    Return (GGG8 ())
                }
                ElseIf ((Arg1 == 0x0A))
                {
                    Return (GGG9 (Arg2))
                }
                ElseIf ((Arg1 == 0x0D))
                {
                    CreateWordField (Arg2, Zero, GGGI)
                    CreateWordField (Arg2, 0x02, GGGJ)
                    CreateWordField (Arg2, 0x04, GGGK)
                    GGGH (GGGI, GGGJ, GGGK)
                }
                ElseIf (((Arg1 >= 0x64) && (Arg1 <= 0x6C)))
                {
                    CreateByteField (Arg2, Zero, SMDP)
                    CreateByteField (Arg2, One, SMDK)
                    CreateByteField (Arg2, 0x02, SMDL)
                    CreateByteField (Arg2, 0x03, SMDM)
                    CreateWordField (Arg2, 0x04, SMDN)
                    CreateByteField (Arg2, 0x03, SMDO)
                    If ((Arg1 == 0x64))
                    {
                        Local0 = SMBB ()
                        Return (Local0)
                    }
                    ElseIf ((Arg1 == 0x65))
                    {
                        Local0 = SMM0 (SMDP, SMDK, SMDL)
                        Return (Local0)
                    }
                    ElseIf ((Arg1 == 0x66))
                    {
                        Local0 = SMM1 (SMDP, SMDK)
                        Return (Local0)
                    }
                    ElseIf ((Arg1 == 0x67))
                    {
                        Local0 = SMM2 (SMDP, SMDK, SMDL, SMDM)
                        Return (Local0)
                    }
                    ElseIf ((Arg1 == 0x68))
                    {
                        Local0 = SMM3 (SMDP, SMDK, SMDL)
                        Return (Local0)
                    }
                    ElseIf ((Arg1 == 0x69))
                    {
                        Local0 = SMM4 (SMDP, SMDK, SMDL, SMDN)
                        Return (Local0)
                    }
                    ElseIf ((Arg1 == 0x6A))
                    {
                        Local0 = SMM5 (SMDP, SMDK, SMDL)
                        Return (Local0)
                    }
                    ElseIf ((Arg1 == 0x6B))
                    {
                        Return (Local0)
                    }
                    ElseIf ((Arg1 == 0x6C))
                    {
                        Return (Local0)
                    }
                }
                ElseIf (((Arg1 >= 0x6E) && (Arg1 <= 0x75)))
                {
                    CreateWordField (Arg2, Zero, PID0)
                    CreateByteField (Arg2, 0x02, PID1)
                    CreateWordField (Arg2, 0x02, PID2)
                    CreateDWordField (Arg2, 0x02, PID3)
                    If ((Arg1 == 0x6E))
                    {
                        Local0 = PIO6 (PID0, Zero)
                        Return (Local0)
                    }
                    ElseIf ((Arg1 == 0x6F))
                    {
                        PIO7 (PID0, Zero, PID1)
                    }
                    ElseIf ((Arg1 == 0x70))
                    {
                        Local0 = PIO6 (PID0, One)
                        Return (Local0)
                    }
                    ElseIf ((Arg1 == 0x71))
                    {
                        PIO7 (PID0, One, PID2)
                    }
                    ElseIf ((Arg1 == 0x72))
                    {
                        Local0 = PIO6 (PID0, 0x02)
                        Return (Local0)
                    }
                    ElseIf ((Arg1 == 0x73))
                    {
                        PIO7 (PID0, 0x02, PID3)
                    }
                }
                ElseIf ((Arg1 == 0x76)){}
                ElseIf ((Arg1 == 0x77)){}
                ElseIf (((Arg1 >= 0x78) && (Arg1 <= 0x80)))
                {
                    CreateByteField (Arg2, Zero, PCE0)
                    CreateByteField (Arg2, One, PCE1)
                    CreateByteField (Arg2, 0x02, PCE2)
                    CreateWordField (Arg2, 0x04, PCE3)
                    CreateByteField (Arg2, 0x06, PCE6)
                    CreateWordField (Arg2, 0x06, PCE4)
                    CreateDWordField (Arg2, 0x06, PCE5)
                    If ((Arg1 == 0x78))
                    {
                        Local0 = PCI4 ()
                        Return (Local0)
                    }
                    ElseIf ((Arg1 == 0x79))
                    {
                        Return (PCI9 (PCE0, PCE1, PCE2, PCE3, Zero))
                    }
                    ElseIf ((Arg1 == 0x7A))
                    {
                        PCIA (PCE0, PCE1, PCE2, PCE3, Zero, PCE6)
                    }
                    ElseIf ((Arg1 == 0x7B))
                    {
                        Return (PCI9 (PCE0, PCE1, PCE2, PCE3, One))
                    }
                    ElseIf ((Arg1 == 0x7C))
                    {
                        PCIA (PCE0, PCE1, PCE2, PCE3, One, PCE4)
                    }
                    ElseIf ((Arg1 == 0x7D))
                    {
                        Return (PCI9 (PCE0, PCE1, PCE2, PCE3, 0x02))
                    }
                    ElseIf ((Arg1 == 0x7E))
                    {
                        PCIA (PCE0, PCE1, PCE2, PCE3, 0x02, PCE5)
                    }

                    CreateByteField (Arg2, 0x06, PCE7)
                    CreateByteField (Arg2, 0x07, PCE8)
                    CreateDWordField (Arg2, 0x08, PCE9)
                    If ((Arg1 == 0x7F))
                    {
                        Return (PCI5 (PCE0, PCE1, PCE2, PCE3, PCE7, PCE8))
                    }
                    ElseIf ((Arg1 == 0x80))
                    {
                        PCI6 (PCE0, PCE1, PCE2, PCE3, PCE7, PCE8, PCE9)
                    }
                }
                ElseIf (((Arg1 >= 0x82) && (Arg1 <= 0x89)))
                {
                    CreateDWordField (Arg2, Zero, MED0)
                    CreateByteField (Arg2, 0x04, MED1)
                    CreateWordField (Arg2, 0x04, MED2)
                    CreateDWordField (Arg2, 0x04, MED3)
                    CreateByteField (Arg2, 0x04, MED4)
                    CreateByteField (Arg2, 0x05, MED5)
                    CreateDWordField (Arg2, 0x06, MED6)
                    If ((Arg1 == 0x82))
                    {
                        Return (MEM4 (MED0, Zero))
                    }
                    ElseIf ((Arg1 == 0x83))
                    {
                        MEM5 (MED0, Zero, MED1)
                    }
                    ElseIf ((Arg1 == 0x84))
                    {
                        Return (MEM4 (MED0, One))
                    }
                    ElseIf ((Arg1 == 0x85))
                    {
                        MEM5 (MED0, One, MED2)
                    }
                    ElseIf ((Arg1 == 0x86))
                    {
                        Return (MEM4 (MED0, 0x02))
                    }
                    ElseIf ((Arg1 == 0x87))
                    {
                        MEM5 (MED0, 0x02, MED3)
                    }
                    ElseIf ((Arg1 == 0x88))
                    {
                        Return (MEM0 (MED0, MED4, MED5))
                    }
                    ElseIf ((Arg1 == 0x89))
                    {
                        MEM1 (MED0, MED4, MED5, MED6)
                    }
                }
                ElseIf ((Arg1 == 0xBE))
                {
                    EVT2 (Arg2)
                }
                ElseIf (((Arg1 >= 0xFA) && (Arg1 <= 0xFC)))
                {
                    CreateByteField (Arg2, Zero, NCT3)
                    CreateByteField (Arg2, One, NCT4)
                    CreateByteField (Arg2, 0x02, NCT5)
                    If ((Arg1 == 0xFA))
                    {
                        Return (NCT0 (NCT3))
                    }
                    ElseIf ((Arg1 == 0xFB))
                    {
                        Return (NCT1 (NCT3, NCT4))
                    }
                    ElseIf ((Arg1 == 0xFC))
                    {
                        NCT2 (NCT3, NCT4, NCT5)
                    }
                }
                ElseIf ((Arg1 == 0x0122))
                {
                    Return (ZRC9 ())
                }
                ElseIf ((Arg1 == 0x0123))
                {
                    Return (ZRCY (DerefOf (Arg2 [Zero])))
                }
                ElseIf ((Arg1 == 0x0124))
                {
                    ZRCZ (DerefOf (Arg2 [Zero]), DerefOf (Arg2 [One]))
                }
                ElseIf ((Arg1 == 0x0125))
                {
                    Return (ZRCD (DerefOf (Arg2 [Zero])))
                }
                ElseIf ((Arg1 == 0x0126))
                {
                    ZRCE (DerefOf (Arg2 [Zero]))
                }
                ElseIf ((Arg1 == 0x0127))
                {
                    Return (ZRCW (DerefOf (Arg2 [Zero])))
                }
                ElseIf ((Arg1 == 0x0128))
                {
                    ZRCX (DerefOf (Arg2 [Zero]), DerefOf (Arg2 [One]))
                }
                ElseIf ((Arg1 == 0x0129))
                {
                    Return (ZRCA (DerefOf (Arg2 [Zero])))
                }
                ElseIf ((Arg1 == 0x012A))
                {
                    ZRC7 (DerefOf (Arg2 [Zero]), DerefOf (Arg2 [One]), DerefOf (
                        Arg2 [0x02]))
                    Return (ToHexString (ZRCL, Local1))
                }
                ElseIf ((Arg1 == 0x012B))
                {
                    ZRCM (DerefOf (Arg2 [Zero]), DerefOf (Arg2 [One]))
                }
                ElseIf ((Arg1 == 0x012C))
                {
                    Return (DIMC ())
                }
                ElseIf ((Arg1 == 0x0130))
                {
                    Return (DIMD (DerefOf (Arg2 [Zero])))
                }
                ElseIf ((Arg1 == 0x0136))
                {
                    Return (DIM1 (DerefOf (Arg2 [Zero])))
                }
            }

            Method (WMBC, 3, NotSerialized)
            {
            }
        }
    }

    Scope (\)
    {
    }
}



SSDT2
-----
DefinitionBlock ("", "SSDT", 2, "ALASKA", "A M I", 0x00000002)
{
    Scope (\_SB)
    {
        Name (AGRB, 0xF8000000)
        Name (ADBG, Buffer (0x0100){})
        Name (ADAT, Buffer (0x0520)
        {
            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0020 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x08,  // ........
            /* 0028 */  0x0F, 0x00, 0x03, 0x00, 0x00, 0x01, 0x01, 0x00,  // ........
            /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0038 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0040 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0048 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x04,  // ........
            /* 0050 */  0x07, 0xFF, 0xFF, 0x02, 0x00, 0x01, 0x02, 0x00,  // ........
            /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0060 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0068 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0070 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0078 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0080 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0088 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0090 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0098 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 00A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00A8 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 00B0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0100 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0108 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0110 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0118 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0120 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0128 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0130 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0138 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0140 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0148 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0150 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0158 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0160 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0168 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0170 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0178 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0180 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0188 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0190 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0198 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0200 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0208 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0210 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0218 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0220 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0228 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0230 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0238 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0240 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0248 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0250 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0258 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0260 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0268 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0270 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0278 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0280 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0288 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0290 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0298 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0300 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0308 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0310 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0318 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0320 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0328 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0330 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0338 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0340 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0348 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0350 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0358 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0360 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0368 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0370 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0378 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0380 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0388 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0390 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0398 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0400 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0408 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0410 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0418 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0420 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0428 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0430 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0438 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0440 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0448 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0450 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0458 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0460 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0468 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0470 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0478 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0480 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0488 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0490 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0498 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0500 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0508 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0510 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0518 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
        })
        Method (ALIB, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                CreateWordField (Arg1, 0x00, A014)
                CreateWordField (Arg1, 0x02, A015)
                CreateDWordField (Arg1, 0x04, A016)
                Local0 = Buffer (0x0100){}
                CreateWordField (Local0, 0x00, A017)
                A017 = A014 /* \_SB_.ALIB.A014 */
                CreateWordField (Local0, 0x02, A018)
                A018 = A015 /* \_SB_.ALIB.A015 */
                CreateDWordField (Local0, 0x04, A019)
                A019 = A016 /* \_SB_.ALIB.A016 */
                A019 &= ~0x0F
                If ((DerefOf (\_SB.ADAT [0x00]) > 0x00))
                {
                    Local1 = 0x0F
                }
                Else
                {
                    Local1 = 0x01
                }

                A019 |= Local1
                Return (Local0)
            }

            If ((Arg0 == 0x01))
            {
                Local0 = DerefOf (Arg1 [0x02])
                Return (A020 (Local0))
            }

            If ((Arg0 == 0x02))
            {
                Local0 = Buffer (0x0100)
                    {
                         0x03, 0x00, 0x00                                 // ...
                    }
                Return (Local0)
            }

            If ((Arg0 == 0x03))
            {
                Local0 = Buffer (0x0100)
                    {
                         0x03, 0x00, 0x00                                 // ...
                    }
                Return (Local0)
            }

            If ((Arg0 == 0x06))
            {
                Local0 = DerefOf (Arg1 [0x04])
                Local1 = DerefOf (Arg1 [0x02])
                Return (A023 (Local0, Local1))
            }

            If ((Arg0 == 0x0A))
            {
                Local0 = DerefOf (Arg1 [0x02])
                Return (A024 (Local0))
            }

            If ((Arg0 == 0x0B))
            {
                Local0 = DerefOf (Arg1 [0x02])
                Local1 = DerefOf (Arg1 [0x03])
                Local2 = DerefOf (Arg1 [0x04])
                Local2 |= (DerefOf (Arg1 [0x05]) << 0x08)
                Local2 |= (DerefOf (Arg1 [0x06]) << 0x10)
                Local2 |= (DerefOf (Arg1 [0x07]) << 0x18)
                Local3 = DerefOf (Arg1 [0x08])
                Local3 |= (DerefOf (Arg1 [0x09]) << 0x08)
                Local3 |= (DerefOf (Arg1 [0x0A]) << 0x10)
                Local3 |= (DerefOf (Arg1 [0x0B]) << 0x18)
                Local4 = DerefOf (Arg1 [0x0C])
                Local4 |= (DerefOf (Arg1 [0x0D]) << 0x08)
                Local4 |= (DerefOf (Arg1 [0x0E]) << 0x10)
                Local4 |= (DerefOf (Arg1 [0x0F]) << 0x18)
                Return (A025 (Local0, Local1, Local2, Local3, Local4))
            }

            If ((Arg0 == 0x0C))
            {
                A026 (Arg1)
            }

            If ((Arg0 == 0x10))
            {
                Local7 = Buffer (0x18){}
                CreateDWordField (Local7, 0x00, A027)
                CreateDWordField (Local7, 0x04, A028)
                CreateDWordField (Local7, 0x08, A029)
                CreateDWordField (Local7, 0x0C, A030)
                CreateDWordField (Local7, 0x10, A031)
                CreateDWordField (Local7, 0x14, A032)
                A027 = 0x00
                A028 = 0x00
                A029 = 0x00
                A030 = 0x00
                A031 = 0x00
                A032 = 0x00
                A012 (0x51, Local7)
            }

            If ((Arg0 == 0x11))
            {
                Local6 = Buffer (0x18){}
                CreateDWordField (Local6, 0x00, A006)
                CreateDWordField (Local6, 0x04, A007)
                CreateDWordField (Local6, 0x08, A008)
                CreateDWordField (Local6, 0x0C, A009)
                CreateDWordField (Local6, 0x10, A010)
                CreateDWordField (Local6, 0x14, A011)
                A006 = 0x00
                A007 = 0x00
                A008 = 0x00
                A009 = 0x00
                A010 = 0x00
                A011 = 0x00
                A012 (0x52, Local6)
            }

            Return (0x00)
        }

        Method (A023, 2, NotSerialized)
        {
            Local0 = 0x00
            While ((Local0 < 0x07))
            {
                Local1 = A084 (Local0, Arg1)
                If ((Local1 == 0x01))
                {
                    Local2 = A085 (Local0, Arg0)
                    Break
                }

                Local0++
            }

            Local7 = Buffer (0x0A){}
            CreateWordField (Local7, 0x00, A017)
            CreateByteField (Local7, 0x02, A034)
            CreateByteField (Local7, 0x03, A086)
            A017 = 0x04
            A034 = 0x00
            If ((Local2 == 0x00))
            {
                A086 = 0x00
            }
            Else
            {
                A086 = 0x01
            }

            Return (Local7)
        }

        Method (A084, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A079 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A079 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A079 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A079 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A079 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A079 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A079 (Arg1))
            }
        }

        Method (A085, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A080 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A080 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A080 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A080 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A080 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A080 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A080 (Arg1))
            }
        }

        Name (AD00, 0x00)
        Name (DK00, 0x00)
        Method (A020, 1, NotSerialized)
        {
            AD00 = Arg0
            A005 ()
        }

        Method (A024, 1, NotSerialized)
        {
            DK00 = Arg0
        }

        Method (A025, 5, NotSerialized)
        {
        }

        Name (AP01, 0x00)
        Name (AP02, 0x00)
        Name (AP03, 0x00)
        Name (AP05, 0x00)
        Name (AP0B, 0xFF)
        Name (AP10, 0x00)
        Method (A033, 1, NotSerialized)
        {
            Local7 = Buffer (0x0100){}
            CreateWordField (Local7, 0x00, A017)
            A017 = 0x03
            CreateByteField (Local7, 0x02, A034)
            A034 = 0x01
            If ((DerefOf (\_SB.ADAT [0x00]) == 0x01))
            {
                A034 = 0x02
                Return (Local7)
            }

            If ((DerefOf (\_SB.ADAT [0x00]) == 0x00))
            {
                A034 = 0x01
                Return (Local7)
            }

            A035 (Arg0)
            If ((AP05 != 0x01))
            {
                Return (Local7)
            }

            A036 ()
            A034 = 0x02
            Return (Local7)
        }

        Method (A037, 0, NotSerialized)
        {
            If ((DerefOf (\_SB.ADAT [0x00]) <= 0x01))
            {
                Return (0x00)
            }

            If ((AP05 != 0x01))
            {
                Return (0x00)
            }

            A036 ()
        }

        Method (A038, 1, NotSerialized)
        {
            If ((Arg0 == 0x03))
            {
                AP01 = 0x00
            }
        }

        Method (A039, 1, NotSerialized)
        {
            AP10 = 0x01
        }

        Method (A040, 1, NotSerialized)
        {
            AP05 = Arg0
            If ((DerefOf (\_SB.ADAT [0x00]) <= 0x01))
            {
                Return (0x00)
            }

            Local1 = AP0B /* \_SB_.AP0B */
            If ((AP05 == 0x00))
            {
                Local0 = 0x00
                While ((Local0 < 0x07))
                {
                    A041 (Local0)
                    Local0++
                }

                AP0B = 0x00
            }

            A036 ()
            AP0B = Local1
            Local7 = Buffer (0x0100){}
            Local7 [0x00] = 0x03
            Local7 [0x01] = 0x00
            Local7 [0x02] = 0x00
            Return (Local7)
        }

        Method (A042, 0, NotSerialized)
        {
            If ((AP0B != 0xFF))
            {
                Return (AP0B) /* \_SB_.AP0B */
            }

            Return (AD00) /* \_SB_.AD00 */
        }

        Method (A035, 1, NotSerialized)
        {
            CreateWordField (Arg0, 0x02, AP06)
            CreateWordField (Arg0, 0x04, AP07)
            CreateWordField (Arg0, 0x06, AP08)
            CreateByteField (Arg0, 0x08, AP09)
            CreateByteField (Arg0, 0x09, AP0A)
            Local0 = 0x00
            While ((Local0 < 0x07))
            {
                If ((A043 (Local0, AP06) == 0x01))
                {
                    If (((AP07 & AP08) == 0x01))
                    {
                        Local1 = A044 (Local0)
                        A045 (Local0, Local1)
                    }
                    Else
                    {
                        A045 (Local0, AP0A)
                    }

                    Break
                }

                Local0++
            }
        }

        Method (A046, 0, NotSerialized)
        {
            AP02 = 0x01
            Local0 = 0x00
            While ((Local0 < 0x07))
            {
                Local1 = A047 (Local0)
                If ((Local1 > AP02))
                {
                    AP02 = Local1
                }

                Local0++
            }
        }

        Method (A048, 0, NotSerialized)
        {
            AP03 = 0x00
            Local0 = 0x00
            While ((Local0 < 0x07))
            {
                Local1 = A049 (Local0)
                If ((Local1 > AP03))
                {
                    AP03 = Local1
                }

                Local0++
            }
        }

        Method (A036, 0, NotSerialized)
        {
            A048 ()
            A046 ()
            If ((AP02 != AP01))
            {
                A013 (AP02, AP01)
            }

            If ((AP02 > AP01))
            {
                AP01 = AP02 /* \_SB_.AP02 */
            }

            Local0 = 0x00
            While ((Local0 < 0x07))
            {
                Local1 = A047 (Local0)
                Local2 = A050 (Local0)
                If ((Local1 != Local2))
                {
                    A051 (Local0, Local1)
                }
                ElseIf ((AP10 == 0x01))
                {
                    A051 (Local0, Local1)
                }

                Local0++
            }

            If ((AP02 < AP01))
            {
                AP01 = AP02 /* \_SB_.AP02 */
            }
            ElseIf ((AP10 == 0x01))
            {
                AP01 = AP02 /* \_SB_.AP02 */
            }

            AP10 = 0x00
        }

        Method (A051, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A052 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A052 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A052 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A052 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A052 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A052 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A052 (Arg1))
            }
        }

        Method (A050, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A053 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A053 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A053 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A053 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A053 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A053 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A053 ())
            }
        }

        Method (A047, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A054 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A054 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A054 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A054 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A054 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A054 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A054 ())
            }
        }

        Method (A049, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A055 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A055 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A055 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A055 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A055 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A055 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A055 ())
            }
        }

        Method (A044, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A056 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A056 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A056 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A056 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A056 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A056 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A056 ())
            }
        }

        Method (A045, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A057 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A057 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A057 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A057 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A057 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A057 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A057 (Arg1))
            }
        }

        Method (A043, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A058 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A058 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A058 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A058 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A058 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A058 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A058 (Arg1))
            }
        }

        Method (A041, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A059 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A059 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A059 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A059 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A059 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A059 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A059 ())
            }
        }

        OperationRegion (A111, SystemMemory, AGRB, 0x1000)
        Field (A111, DWordAcc, Lock, Preserve)
        {
            Offset (0xB8), 
            A112,   32
        }

        BankField (A111, A112, 0x03B10528, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A109,   32
        }

        BankField (A111, A112, 0x03B10564, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A103,   32
        }

        BankField (A111, A112, 0x03B10998, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A071,   32
        }

        BankField (A111, A112, 0x03B1099C, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A104,   32
        }

        BankField (A111, A112, 0x03B109A0, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A105,   32
        }

        BankField (A111, A112, 0x03B109A4, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A106,   32
        }

        BankField (A111, A112, 0x03B109A8, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A107,   32
        }

        BankField (A111, A112, 0x03B109AC, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A108,   32
        }

        BankField (A111, A112, 0x13B00084, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A089,   32
        }

        BankField (A111, A112, 0x11140280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A090,   32
        }

        BankField (A111, A112, 0x11141280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A091,   32
        }

        BankField (A111, A112, 0x11142280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A092,   32
        }

        BankField (A111, A112, 0x11143280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A093,   32
        }

        BankField (A111, A112, 0x11144280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A094,   32
        }

        BankField (A111, A112, 0x11145280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A095,   32
        }

        BankField (A111, A112, 0x11146280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A096,   32
        }

        Method (A087, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A067 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A067 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A067 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A067 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A067 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A067 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A067 (Arg1))
            }
        }

        Method (A088, 2, NotSerialized)
        {
            If ((Arg1 == 0x01))
            {
                If ((Arg0 == 0x00))
                {
                    Local0 = 0x00090300
                }

                If ((Arg0 == 0x01))
                {
                    Local0 = 0x000A0300
                }

                If ((Arg0 == 0x02))
                {
                    Local0 = 0x000B0300
                }

                If ((Arg0 == 0x03))
                {
                    Local0 = 0x000C0300
                }

                If ((Arg0 == 0x04))
                {
                    Local0 = 0x000D0300
                }

                If ((Arg0 == 0x05))
                {
                    Local0 = 0x000E0300
                }

                If ((Arg0 == 0x06))
                {
                    Local0 = 0x000F0300
                }

                Local1 = A089 /* \_SB_.A089 */
                Local1 &= 0xFF00FCFF
                A089 = (Local0 | Local1)
                Local1 = A089 /* \_SB_.A089 */
                A089 = (0xFFFFFDFF & Local1)
            }
            ElseIf ((Arg1 == 0x00))
            {
                If ((Arg0 == 0x00))
                {
                    Local1 = A090 /* \_SB_.A090 */
                    A090 = (0x00400000 | Local1)
                    Local1 = A090 /* \_SB_.A090 */
                    A090 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x01))
                {
                    Local1 = A091 /* \_SB_.A091 */
                    A091 = (0x00400000 | Local1)
                    Local1 = A091 /* \_SB_.A091 */
                    A091 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x02))
                {
                    Local1 = A092 /* \_SB_.A092 */
                    A092 = (0x00400000 | Local1)
                    Local1 = A092 /* \_SB_.A092 */
                    A092 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x03))
                {
                    Local1 = A093 /* \_SB_.A093 */
                    A093 = (0x00400000 | Local1)
                    Local1 = A093 /* \_SB_.A093 */
                    A093 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x04))
                {
                    Local1 = A094 /* \_SB_.A094 */
                    A094 = (0x00400000 | Local1)
                    Local1 = A094 /* \_SB_.A094 */
                    A094 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x05))
                {
                    Local1 = A095 /* \_SB_.A095 */
                    A095 = (0x00400000 | Local1)
                    Local1 = A095 /* \_SB_.A095 */
                    A095 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x06))
                {
                    Local1 = A096 /* \_SB_.A096 */
                    A096 = (0x00400000 | Local1)
                    Local1 = A096 /* \_SB_.A096 */
                    A096 = (0xFFBFFFFF & Local1)
                }
            }
        }

        Method (A004, 2, NotSerialized)
        {
            Local0 = 0x00
            While ((Local0 < 0x07))
            {
                Local1 = A087 (Local0, Arg1)
                If ((Local1 == 0x01))
                {
                    A088 (Local0, Arg1)
                    Break
                }

                Local0++
            }
        }

        Method (A012, 2, Serialized)
        {
            CreateDWordField (Arg1, 0x00, A097)
            CreateDWordField (Arg1, 0x04, A098)
            CreateDWordField (Arg1, 0x08, A099)
            CreateDWordField (Arg1, 0x0C, A100)
            CreateDWordField (Arg1, 0x10, A101)
            CreateDWordField (Arg1, 0x14, A102)
            A103 = 0x00
            While ((A103 != 0x00)){}
            A071 = A097 /* \_SB_.A012.A097 */
            A104 = A098 /* \_SB_.A012.A098 */
            A105 = A099 /* \_SB_.A012.A099 */
            A106 = A100 /* \_SB_.A012.A100 */
            A107 = A101 /* \_SB_.A012.A101 */
            A108 = A102 /* \_SB_.A012.A102 */
            A109 = Arg0
            While ((A103 == 0x00)){}
        }

        Method (A082, 5, NotSerialized)
        {
            Local7 = Buffer (0x18){}
            CreateDWordField (Local7, 0x00, A006)
            CreateDWordField (Local7, 0x04, A007)
            CreateDWordField (Local7, 0x08, A008)
            CreateDWordField (Local7, 0x0C, A009)
            CreateDWordField (Local7, 0x10, A010)
            CreateDWordField (Local7, 0x14, A011)
            A006 = Arg0
            A007 = Arg1
            A008 = Arg2
            A009 = Arg3
            A012 (0x0A, Local7)
        }

        Method (A026, 1, Serialized)
        {
            CreateWordField (Arg0, 0x00, A110)
            Local7 = Buffer (0x18){}
            CreateDWordField (Local7, 0x00, A006)
            CreateDWordField (Local7, 0x04, A007)
            CreateDWordField (Local7, 0x08, A008)
            CreateDWordField (Local7, 0x0C, A009)
            CreateDWordField (Local7, 0x10, A010)
            CreateDWordField (Local7, 0x14, A011)
            Local0 = 0x02
            While ((Local0 < A110))
            {
                Local1 = DerefOf (Arg0 [Local0])
                Local0++
                Local2 = DerefOf (Arg0 [Local0])
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x08)
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x10)
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x18)
                Local0++
                A006 = 0x00
                A007 = 0x00
                A008 = 0x00
                A009 = 0x00
                A010 = 0x00
                A011 = 0x00
                If ((Local1 == 0x01))
                {
                    A006 = Local2
                    A012 (0x1E, Local7)
                }

                If ((Local1 == 0x03))
                {
                    A006 = Local2
                    A012 (0x1F, Local7)
                }

                If ((Local1 == 0x05))
                {
                    A006 = Local2
                    A012 (0x1A, Local7)
                }

                If ((Local1 == 0x06))
                {
                    A006 = Local2
                    A012 (0x1B, Local7)
                }

                If ((Local1 == 0x07))
                {
                    A006 = Local2
                    A012 (0x1C, Local7)
                }

                If ((Local1 == 0x08))
                {
                    A006 = Local2
                    A012 (0x1D, Local7)
                }

                If ((Local1 == 0x09))
                {
                    A006 = Local2
                    A012 (0x26, Local7)
                }

                If ((Local1 == 0x0A))
                {
                    A006 = Local2
                    A012 (0x27, Local7)
                }

                If ((Local1 == 0x0B))
                {
                    A006 = Local2
                    A012 (0x20, Local7)
                }

                If ((Local1 == 0x0C))
                {
                    A006 = Local2
                    A012 (0x22, Local7)
                }

                If ((Local1 == 0x0D))
                {
                    A006 = Local2
                    A012 (0x24, Local7)
                }

                If ((Local1 == 0x0F))
                {
                    A006 = Local2
                    A012 (0x25, Local7)
                }

                If ((DerefOf (\_SB.ADAT [0x08]) == 0x01))
                {
                    If ((Local1 == 0x10))
                    {
                        If ((Local2 == 0x00))
                        {
                            A012 (0x2B, Local7)
                        }
                        Else
                        {
                            A012 (0x2A, Local7)
                        }
                    }
                }
            }
        }

        Device (AWR0)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, 0x90)  // _UID: Unique ID
            Device (ABR0)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x80)  // _UID: Unique ID
                Name (AB12, 0x20)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A072, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A072, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A065,   8, 
                    A066,   8, 
                    Offset (0x68), 
                    A073,   2, 
                        ,   2, 
                    A074,   1, 
                    A075,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A076,   1, 
                    Offset (0x88), 
                    A077,   4, 
                        ,   1, 
                    A078,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A060, 0, NotSerialized)
                {
                    Local0 = A042 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR0.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR0.AB0E */
                    }
                }

                Method (A055, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A061, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR0.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A054, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR0.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR0.AB0E */
                    }

                    Local0 = A061 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR0.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A060 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A053, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR0.AB02 */
                }

                Method (A056, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR0.AB00 */
                }

                Method (A052, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A062 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A063 (0x00)
                    Name (A064, 0x00)
                    A063 (0x01)
                }

                Method (A057, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A058, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A065) && (Local0 <= A066)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A067, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A059, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A062, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A068, 0, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A069 (Local0, 0x00)
                    Local2 = A069 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A069 (0x00, Local0)
                                    Local5 = 0x00
                                    If (((Local4 && 0x09) == 0x00))
                                    {
                                        If (((Local4 && 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A069 (0x00, Local0)
                                        }

                                        A070 (0x34, Local3, 0x00)
                                        Local6 = A071 /* \_SB_.A071 */
                                        If ((Local6 == 0x01))
                                        {
                                            A070 (0x28, (Local4 & 0xFFFFFFF0), 0x00)
                                            A070 (0x29, Local5, 0x00)
                                            A070 (0x05, 0x00, (0x01 << 0x0A))
                                            A070 (0x2A, 0x00, 0x00)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A083, 2, NotSerialized)
                {
                    If ((A069 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A069 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A069 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A063, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A069 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A069 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A083 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A069 (Local0, (Local1 + 0x10))
                                A081 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A081 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A081, 3, Serialized)
                {
                    Local0 = (AGRB + (A065 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A069, 2, Serialized)
                {
                    Local0 = (AGRB + (A065 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR0.A069.ADRR */
                }

                Method (A079, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A067 (Arg0))
                }

                Method (A080, 1, NotSerialized)
                {
                    Name (A064, 0x00)
                    Local2 = 0x00
                    A064 = A073 /* \_SB_.AWR0.ABR0.A073 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A074 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A063 (0x00)
                        Local0 = A069 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A081 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A069 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A081 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A074 = 0x01
                        Local0 = 0x05
                    }

                    A073 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A082 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A069 (0x00, 0x00)
                            A082 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A073 = A064 /* \_SB_.AWR0.ABR0.A080.A064 */
                    If ((A064 != 0x00))
                    {
                        A063 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR1)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x81)  // _UID: Unique ID
                Name (AB12, 0x34)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A072, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A072, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A065,   8, 
                    A066,   8, 
                    Offset (0x68), 
                    A073,   2, 
                        ,   2, 
                    A074,   1, 
                    A075,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A076,   1, 
                    Offset (0x88), 
                    A077,   4, 
                        ,   1, 
                    A078,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A060, 0, NotSerialized)
                {
                    Local0 = A042 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR1.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR1.AB0E */
                    }
                }

                Method (A055, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A061, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR1.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A054, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR1.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR1.AB0E */
                    }

                    Local0 = A061 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR1.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A060 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A053, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR1.AB02 */
                }

                Method (A056, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR1.AB00 */
                }

                Method (A052, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A062 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A063 (0x00)
                    Name (A064, 0x00)
                    A063 (0x01)
                }

                Method (A057, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A058, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A065) && (Local0 <= A066)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A067, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A059, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A062, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A068, 0, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A069 (Local0, 0x00)
                    Local2 = A069 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A069 (0x00, Local0)
                                    Local5 = 0x00
                                    If (((Local4 && 0x09) == 0x00))
                                    {
                                        If (((Local4 && 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A069 (0x00, Local0)
                                        }

                                        A070 (0x34, Local3, 0x00)
                                        Local6 = A071 /* \_SB_.A071 */
                                        If ((Local6 == 0x01))
                                        {
                                            A070 (0x28, (Local4 & 0xFFFFFFF0), 0x00)
                                            A070 (0x29, Local5, 0x00)
                                            A070 (0x05, 0x00, (0x01 << 0x0A))
                                            A070 (0x2A, 0x00, 0x00)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A083, 2, NotSerialized)
                {
                    If ((A069 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A069 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A069 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A063, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A069 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A069 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A083 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A069 (Local0, (Local1 + 0x10))
                                A081 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A081 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A081, 3, Serialized)
                {
                    Local0 = (AGRB + (A065 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A069, 2, Serialized)
                {
                    Local0 = (AGRB + (A065 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR1.A069.ADRR */
                }

                Method (A079, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A067 (Arg0))
                }

                Method (A080, 1, NotSerialized)
                {
                    Name (A064, 0x00)
                    Local2 = 0x00
                    A064 = A073 /* \_SB_.AWR0.ABR1.A073 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A074 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A063 (0x00)
                        Local0 = A069 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A081 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A069 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A081 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A074 = 0x01
                        Local0 = 0x05
                    }

                    A073 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A082 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A069 (0x00, 0x00)
                            A082 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A073 = A064 /* \_SB_.AWR0.ABR1.A080.A064 */
                    If ((A064 != 0x00))
                    {
                        A063 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR2)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x82)  // _UID: Unique ID
                Name (AB12, 0x48)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A072, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A072, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A065,   8, 
                    A066,   8, 
                    Offset (0x68), 
                    A073,   2, 
                        ,   2, 
                    A074,   1, 
                    A075,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A076,   1, 
                    Offset (0x88), 
                    A077,   4, 
                        ,   1, 
                    A078,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A060, 0, NotSerialized)
                {
                    Local0 = A042 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR2.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR2.AB0E */
                    }
                }

                Method (A055, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A061, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR2.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A054, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR2.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR2.AB0E */
                    }

                    Local0 = A061 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR2.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A060 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A053, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR2.AB02 */
                }

                Method (A056, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR2.AB00 */
                }

                Method (A052, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A062 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A063 (0x00)
                    Name (A064, 0x00)
                    A063 (0x01)
                }

                Method (A057, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A058, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A065) && (Local0 <= A066)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A067, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A059, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A062, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A068, 0, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A069 (Local0, 0x00)
                    Local2 = A069 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A069 (0x00, Local0)
                                    Local5 = 0x00
                                    If (((Local4 && 0x09) == 0x00))
                                    {
                                        If (((Local4 && 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A069 (0x00, Local0)
                                        }

                                        A070 (0x34, Local3, 0x00)
                                        Local6 = A071 /* \_SB_.A071 */
                                        If ((Local6 == 0x01))
                                        {
                                            A070 (0x28, (Local4 & 0xFFFFFFF0), 0x00)
                                            A070 (0x29, Local5, 0x00)
                                            A070 (0x05, 0x00, (0x01 << 0x0A))
                                            A070 (0x2A, 0x00, 0x00)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A083, 2, NotSerialized)
                {
                    If ((A069 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A069 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A069 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A063, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A069 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A069 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A083 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A069 (Local0, (Local1 + 0x10))
                                A081 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A081 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A081, 3, Serialized)
                {
                    Local0 = (AGRB + (A065 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A069, 2, Serialized)
                {
                    Local0 = (AGRB + (A065 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR2.A069.ADRR */
                }

                Method (A079, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A067 (Arg0))
                }

                Method (A080, 1, NotSerialized)
                {
                    Name (A064, 0x00)
                    Local2 = 0x00
                    A064 = A073 /* \_SB_.AWR0.ABR2.A073 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A074 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A063 (0x00)
                        Local0 = A069 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A081 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A069 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A081 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A074 = 0x01
                        Local0 = 0x05
                    }

                    A073 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A082 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A069 (0x00, 0x00)
                            A082 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A073 = A064 /* \_SB_.AWR0.ABR2.A080.A064 */
                    If ((A064 != 0x00))
                    {
                        A063 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR3)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x83)  // _UID: Unique ID
                Name (AB12, 0x5C)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A072, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A072, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A065,   8, 
                    A066,   8, 
                    Offset (0x68), 
                    A073,   2, 
                        ,   2, 
                    A074,   1, 
                    A075,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A076,   1, 
                    Offset (0x88), 
                    A077,   4, 
                        ,   1, 
                    A078,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A060, 0, NotSerialized)
                {
                    Local0 = A042 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR3.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR3.AB0E */
                    }
                }

                Method (A055, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A061, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR3.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A054, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR3.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR3.AB0E */
                    }

                    Local0 = A061 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR3.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A060 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A053, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR3.AB02 */
                }

                Method (A056, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR3.AB00 */
                }

                Method (A052, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A062 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A063 (0x00)
                    Name (A064, 0x00)
                    A063 (0x01)
                }

                Method (A057, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A058, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A065) && (Local0 <= A066)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A067, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A059, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A062, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A068, 0, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A069 (Local0, 0x00)
                    Local2 = A069 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A069 (0x00, Local0)
                                    Local5 = 0x00
                                    If (((Local4 && 0x09) == 0x00))
                                    {
                                        If (((Local4 && 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A069 (0x00, Local0)
                                        }

                                        A070 (0x34, Local3, 0x00)
                                        Local6 = A071 /* \_SB_.A071 */
                                        If ((Local6 == 0x01))
                                        {
                                            A070 (0x28, (Local4 & 0xFFFFFFF0), 0x00)
                                            A070 (0x29, Local5, 0x00)
                                            A070 (0x05, 0x00, (0x01 << 0x0A))
                                            A070 (0x2A, 0x00, 0x00)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A083, 2, NotSerialized)
                {
                    If ((A069 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A069 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A069 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A063, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A069 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A069 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A083 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A069 (Local0, (Local1 + 0x10))
                                A081 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A081 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A081, 3, Serialized)
                {
                    Local0 = (AGRB + (A065 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A069, 2, Serialized)
                {
                    Local0 = (AGRB + (A065 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR3.A069.ADRR */
                }

                Method (A079, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A067 (Arg0))
                }

                Method (A080, 1, NotSerialized)
                {
                    Name (A064, 0x00)
                    Local2 = 0x00
                    A064 = A073 /* \_SB_.AWR0.ABR3.A073 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A074 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A063 (0x00)
                        Local0 = A069 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A081 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A069 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A081 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A074 = 0x01
                        Local0 = 0x05
                    }

                    A073 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A082 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A069 (0x00, 0x00)
                            A082 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A073 = A064 /* \_SB_.AWR0.ABR3.A080.A064 */
                    If ((A064 != 0x00))
                    {
                        A063 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR4)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x84)  // _UID: Unique ID
                Name (AB12, 0x70)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A072, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A072, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A065,   8, 
                    A066,   8, 
                    Offset (0x68), 
                    A073,   2, 
                        ,   2, 
                    A074,   1, 
                    A075,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A076,   1, 
                    Offset (0x88), 
                    A077,   4, 
                        ,   1, 
                    A078,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A060, 0, NotSerialized)
                {
                    Local0 = A042 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR4.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR4.AB0E */
                    }
                }

                Method (A055, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A061, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR4.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A054, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR4.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR4.AB0E */
                    }

                    Local0 = A061 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR4.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A060 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A053, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR4.AB02 */
                }

                Method (A056, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR4.AB00 */
                }

                Method (A052, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A062 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A063 (0x00)
                    Name (A064, 0x00)
                    A063 (0x01)
                }

                Method (A057, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A058, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A065) && (Local0 <= A066)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A067, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A059, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A062, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A068, 0, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A069 (Local0, 0x00)
                    Local2 = A069 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A069 (0x00, Local0)
                                    Local5 = 0x00
                                    If (((Local4 && 0x09) == 0x00))
                                    {
                                        If (((Local4 && 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A069 (0x00, Local0)
                                        }

                                        A070 (0x34, Local3, 0x00)
                                        Local6 = A071 /* \_SB_.A071 */
                                        If ((Local6 == 0x01))
                                        {
                                            A070 (0x28, (Local4 & 0xFFFFFFF0), 0x00)
                                            A070 (0x29, Local5, 0x00)
                                            A070 (0x05, 0x00, (0x01 << 0x0A))
                                            A070 (0x2A, 0x00, 0x00)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A083, 2, NotSerialized)
                {
                    If ((A069 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A069 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A069 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A063, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A069 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A069 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A083 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A069 (Local0, (Local1 + 0x10))
                                A081 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A081 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A081, 3, Serialized)
                {
                    Local0 = (AGRB + (A065 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A069, 2, Serialized)
                {
                    Local0 = (AGRB + (A065 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR4.A069.ADRR */
                }

                Method (A079, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A067 (Arg0))
                }

                Method (A080, 1, NotSerialized)
                {
                    Name (A064, 0x00)
                    Local2 = 0x00
                    A064 = A073 /* \_SB_.AWR0.ABR4.A073 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A074 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A063 (0x00)
                        Local0 = A069 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A081 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A069 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A081 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A074 = 0x01
                        Local0 = 0x05
                    }

                    A073 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A082 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A069 (0x00, 0x00)
                            A082 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A073 = A064 /* \_SB_.AWR0.ABR4.A080.A064 */
                    If ((A064 != 0x00))
                    {
                        A063 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR5)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x85)  // _UID: Unique ID
                Name (AB12, 0x84)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A072, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A072, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A065,   8, 
                    A066,   8, 
                    Offset (0x68), 
                    A073,   2, 
                        ,   2, 
                    A074,   1, 
                    A075,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A076,   1, 
                    Offset (0x88), 
                    A077,   4, 
                        ,   1, 
                    A078,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A060, 0, NotSerialized)
                {
                    Local0 = A042 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR5.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR5.AB0E */
                    }
                }

                Method (A055, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A061, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR5.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A054, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR5.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR5.AB0E */
                    }

                    Local0 = A061 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR5.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A060 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A053, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR5.AB02 */
                }

                Method (A056, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR5.AB00 */
                }

                Method (A052, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A062 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A063 (0x00)
                    Name (A064, 0x00)
                    A063 (0x01)
                }

                Method (A057, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A058, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A065) && (Local0 <= A066)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A067, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A059, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A062, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A068, 0, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A069 (Local0, 0x00)
                    Local2 = A069 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A069 (0x00, Local0)
                                    Local5 = 0x00
                                    If (((Local4 && 0x09) == 0x00))
                                    {
                                        If (((Local4 && 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A069 (0x00, Local0)
                                        }

                                        A070 (0x34, Local3, 0x00)
                                        Local6 = A071 /* \_SB_.A071 */
                                        If ((Local6 == 0x01))
                                        {
                                            A070 (0x28, (Local4 & 0xFFFFFFF0), 0x00)
                                            A070 (0x29, Local5, 0x00)
                                            A070 (0x05, 0x00, (0x01 << 0x0A))
                                            A070 (0x2A, 0x00, 0x00)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A083, 2, NotSerialized)
                {
                    If ((A069 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A069 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A069 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A063, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A069 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A069 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A083 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A069 (Local0, (Local1 + 0x10))
                                A081 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A081 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A081, 3, Serialized)
                {
                    Local0 = (AGRB + (A065 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A069, 2, Serialized)
                {
                    Local0 = (AGRB + (A065 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR5.A069.ADRR */
                }

                Method (A079, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A067 (Arg0))
                }

                Method (A080, 1, NotSerialized)
                {
                    Name (A064, 0x00)
                    Local2 = 0x00
                    A064 = A073 /* \_SB_.AWR0.ABR5.A073 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A074 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A063 (0x00)
                        Local0 = A069 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A081 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A069 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A081 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A074 = 0x01
                        Local0 = 0x05
                    }

                    A073 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A082 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A069 (0x00, 0x00)
                            A082 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A073 = A064 /* \_SB_.AWR0.ABR5.A080.A064 */
                    If ((A064 != 0x00))
                    {
                        A063 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR6)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x86)  // _UID: Unique ID
                Name (AB12, 0x98)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A072, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A072, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A065,   8, 
                    A066,   8, 
                    Offset (0x68), 
                    A073,   2, 
                        ,   2, 
                    A074,   1, 
                    A075,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A076,   1, 
                    Offset (0x88), 
                    A077,   4, 
                        ,   1, 
                    A078,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A060, 0, NotSerialized)
                {
                    Local0 = A042 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR6.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR6.AB0E */
                    }
                }

                Method (A055, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A061, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR6.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A054, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR6.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR6.AB0E */
                    }

                    Local0 = A061 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR6.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A060 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A053, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR6.AB02 */
                }

                Method (A056, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR6.AB00 */
                }

                Method (A052, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A062 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A063 (0x00)
                    Name (A064, 0x00)
                    A063 (0x01)
                }

                Method (A057, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A058, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A065) && (Local0 <= A066)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A067, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A059, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A062, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A068, 0, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A069 (Local0, 0x00)
                    Local2 = A069 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A069 (0x00, Local0)
                                    Local5 = 0x00
                                    If (((Local4 && 0x09) == 0x00))
                                    {
                                        If (((Local4 && 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A069 (0x00, Local0)
                                        }

                                        A070 (0x34, Local3, 0x00)
                                        Local6 = A071 /* \_SB_.A071 */
                                        If ((Local6 == 0x01))
                                        {
                                            A070 (0x28, (Local4 & 0xFFFFFFF0), 0x00)
                                            A070 (0x29, Local5, 0x00)
                                            A070 (0x05, 0x00, (0x01 << 0x0A))
                                            A070 (0x2A, 0x00, 0x00)
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A083, 2, NotSerialized)
                {
                    If ((A069 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A069 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A069 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A063, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A069 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A069 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A083 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A069 (Local0, (Local1 + 0x10))
                                A081 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A081 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A081, 3, Serialized)
                {
                    Local0 = (AGRB + (A065 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A069, 2, Serialized)
                {
                    Local0 = (AGRB + (A065 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR6.A069.ADRR */
                }

                Method (A079, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A067 (Arg0))
                }

                Method (A080, 1, NotSerialized)
                {
                    Name (A064, 0x00)
                    Local2 = 0x00
                    A064 = A073 /* \_SB_.AWR0.ABR6.A073 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A074 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A063 (0x00)
                        Local0 = A069 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A081 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A069 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A081 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A074 = 0x01
                        Local0 = 0x05
                    }

                    A073 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A082 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A069 (0x00, 0x00)
                            A082 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A073 = A064 /* \_SB_.AWR0.ABR6.A080.A064 */
                    If ((A064 != 0x00))
                    {
                        A063 (0x01)
                    }

                    Return (Local2)
                }
            }
        }

        Method (A003, 0, Serialized)
        {
            If ((DerefOf (\_SB.ADAT [0x08]) == 0x01))
            {
                Local0 = 0x00
                While ((Local0 < 0x07))
                {
                    A113 (Local0)
                    Local0++
                }
            }
        }

        Method (A070, 3, NotSerialized)
        {
            Local7 = Buffer (0x18){}
            CreateDWordField (Local7, 0x00, A006)
            CreateDWordField (Local7, 0x04, A007)
            CreateDWordField (Local7, 0x08, A008)
            CreateDWordField (Local7, 0x0C, A009)
            CreateDWordField (Local7, 0x10, A010)
            CreateDWordField (Local7, 0x14, A011)
            A006 = Arg1
            A007 = Arg2
            A012 (Arg0, Local7)
        }

        Method (A113, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A068 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A068 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A068 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A068 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A068 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A068 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A068 ())
            }
        }

        Name (A001, 0x01)
        Name (A002, 0x00)
        Method (APTS, 1, NotSerialized)
        {
            If ((Arg0 == 0x03)){}
        }

        Method (AWAK, 1, NotSerialized)
        {
            A003 ()
            If ((Arg0 == 0x03)){}
        }

        Method (APPM, 1, NotSerialized)
        {
            Local0 = DerefOf (Arg0 [0x04])
            Local1 = DerefOf (Arg0 [0x02])
            A004 (Local0, Local1)
        }

        Method (A005, 0, NotSerialized)
        {
            Local7 = Buffer (0x18){}
            CreateDWordField (Local7, 0x00, A006)
            CreateDWordField (Local7, 0x04, A007)
            CreateDWordField (Local7, 0x08, A008)
            CreateDWordField (Local7, 0x0C, A009)
            CreateDWordField (Local7, 0x10, A010)
            CreateDWordField (Local7, 0x14, A011)
            A006 = 0x00
            A007 = 0x00
            A008 = 0x00
            A009 = 0x00
            A010 = 0x00
            A011 = 0x00
            If ((AD00 == 0x00))
            {
                A012 (0x18, Local7)
            }
            Else
            {
                A012 (0x19, Local7)
            }
        }

        Method (A013, 2, NotSerialized)
        {
        }
    }
}



SSDT3
-----
DefinitionBlock ("", "SSDT", 1, "ALASKA", "A M I", 0x00001000)
{
    Name (PTOS, Zero)
    If (CondRefOf (\_OSI))
    {
        If (\_OSI ("Windows 2015"))
        {
            PTOS = 0x70
        }
    }

    Scope (\_SB)
    {
        Device (PTIO)
        {
            Name (_HID, "AMDIF030")  // _HID: Hardware ID
            Name (_CID, "AMDIF030")  // _CID: Compatible ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0xFEC30000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                Return (RBUF) /* \_SB_.PTIO._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((PTOS >= 0x70))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }
}



SSDT4
-----
DefinitionBlock ("", "SSDT", 1, "ALASKA", "A M I", 0x00000001)
{
    External (_PR_.C000, DeviceObj)
    External (_PR_.C001, DeviceObj)
    External (_PR_.C002, DeviceObj)
    External (_PR_.C003, DeviceObj)

    Scope (\_PR.C000)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000DAC, 
                0x00001324, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000008FC, 
                0x000008C2, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00000578, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000DAC, 
                0x00001324, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000008FC, 
                0x000008C2, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x00000578, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C000.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
    }

    Scope (\_PR.C001)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000DAC, 
                0x00001324, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000008FC, 
                0x000008C2, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00000578, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000DAC, 
                0x00001324, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000008FC, 
                0x000008C2, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x00000578, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C001.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
    }

    Scope (\_PR.C002)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000DAC, 
                0x00001324, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000008FC, 
                0x000008C2, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00000578, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000DAC, 
                0x00001324, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000008FC, 
                0x000008C2, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x00000578, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C002.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
    }

    Scope (\_PR.C003)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000DAC, 
                0x00001324, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000008FC, 
                0x000008C2, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00000578, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000DAC, 
                0x00001324, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000008FC, 
                0x000008C2, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000640, 
                0x00000578, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C003.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
    }
}



SSDT5
-----
DefinitionBlock ("", "SSDT", 1, "ALASKA", "A M I", 0x00000001)
{
    Scope (\)
    {
        Device (AOD)
        {
            Name (DBG, Zero)
            Name (GDBG, Zero)
            Name (CDBG, Zero)
            Name (VDBG, Zero)
            Name (RDBG, Zero)
            OperationRegion (PMRG, SystemIO, 0x0CD6, 0x02)
            Field (PMRG, ByteAcc, NoLock, Preserve)
            {
                PMRI,   8, 
                PMRD,   8
            }

            OperationRegion (PSMI, SystemIO, 0xB2, 0x02)
            Field (PSMI, ByteAcc, NoLock, Preserve)
            {
                APMC,   8, 
                APMD,   8
            }

            Method (ASMI, 1, NotSerialized)
            {
                APMC = Arg0
                Sleep (0x0A)
            }

            Name (OBID, Package (0xC1)
            {
                0x40, 
                0x00010001, 
                0x00010002, 
                0x00020001, 
                0x00020002, 
                0x00020003, 
                0x00020004, 
                0x00020005, 
                0x00020006, 
                0x00020007, 
                0x00020008, 
                0x00020009, 
                0x0002000A, 
                0x0002000B, 
                0x0002000C, 
                0x0002000D, 
                0x0002000E, 
                0x0002000F, 
                0x00020010, 
                0x00020011, 
                0x00020012, 
                0x00020013, 
                0x00020014, 
                0x00020015, 
                0x00020016, 
                0x00020017, 
                0x00020018, 
                0x00020019, 
                0x0002001A, 
                0x0002001B, 
                0x0002001C, 
                0x0002001D, 
                0x0002001E, 
                0x0002001F, 
                0x00020020, 
                0x00020021, 
                0x00020022, 
                0x00020023, 
                0x00020024, 
                0x00020025, 
                0x00020026, 
                0x00020027, 
                0x00020028, 
                0x00020029, 
                0x0002002A, 
                0x0002002B, 
                0x0002002C, 
                0x0002002D, 
                0x0002002E, 
                0x0002002F, 
                0x00020030, 
                0x00020031, 
                0x00020032, 
                0x00020033, 
                0x00020034, 
                0x00020035, 
                0x00030001, 
                0x00030002, 
                0x00040001, 
                0x00040002, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                "Get APCB Config", 
                "Get memory voltages", 
                "Set memory clock frequency", 
                "Set Tcl", 
                "Set Trcdrd", 
                "Set Trcdwr", 
                "Set Tras", 
                "Set Trp", 
                "Set ProcODT", 
                "Set Trcpage", 
                "Set Trc", 
                "Set Trfc", 
                "Set Trfc2", 
                "Set Trfc4", 
                "Set Tfaw", 
                "Set TrrdS", 
                "Set TrrdL", 
                "Set Twr", 
                "Set TwtrS", 
                "Set TwtrL", 
                "Set TCke", 
                "Set Tcwl", 
                "Set Trtp", 
                "Set TrdrdSc", 
                "Set TrdrdScL", 
                "Set TrdrdSd", 
                "Set TrdrdDd", 
                "Set TwrwrSc", 
                "Set TwrwrScL", 
                "Set TwrwrSd", 
                "Set TwrwrDd", 
                "Set Trdwr", 
                "Set Twrrd", 
                "Set GearDownEn", 
                "Set Cmd2t", 
                "Set RttNom", 
                "Set RttWR", 
                "Set RttPark", 
                "Set PowerDownEn", 
                "Set SMT EN", 
                "Software Downcore Config", 
                "Set EDC Throttler Control", 
                "Set VDDIO", 
                "Set VTT", 
                "Set AddrCmdSetup", 
                "Set CsOdtSetup", 
                "Set CkeSetup", 
                "Set CadBusClkDrvStren", 
                "Set CadBusAddrCmdDrvStren", 
                "Set CadBusCsOdtCmdDrvStren", 
                "Set CadBusCkeDrvStren", 
                "Set CLDO_VDDP", 
                "Set Interleave Mode", 
                "Set Interleave Size", 
                "Set FCLK OC Mode", 
                "Set SOC VID", 
                "Set FCLK Frequency", 
                "Command Buffer Start", 
                "Command Buffer End", 
                "", 
                "", 
                "", 
                "", 
                ""
            })
            Name (OBIT, Package (0xDD)
            {
                0x00020001, 
                0x029B, 
                0x0898, 
                0x21, 
                0x00020002, 
                0x08, 
                0x21, 
                One, 
                0x00020003, 
                0x08, 
                0x1B, 
                One, 
                0x00020004, 
                0x08, 
                0x1B, 
                One, 
                0x00020005, 
                0x15, 
                0x3A, 
                One, 
                0x00020006, 
                0x08, 
                0x1B, 
                One, 
                0x00020007, 
                Zero, 
                0x3F, 
                One, 
                0x00020008, 
                Zero, 
                0x03FF, 
                One, 
                0x00020009, 
                0x1D, 
                0x87, 
                One, 
                0x0002000A, 
                0x3C, 
                0x03DE, 
                One, 
                0x0002000B, 
                0x3C, 
                0x03DE, 
                One, 
                0x0002000C, 
                0x3C, 
                0x03DE, 
                One, 
                0x0002000D, 
                0x06, 
                0x36, 
                One, 
                0x0002000E, 
                0x04, 
                0x0C, 
                One, 
                0x0002000F, 
                0x04, 
                0x0C, 
                One, 
                0x00020010, 
                0x0A, 
                0x51, 
                One, 
                0x00020011, 
                0x02, 
                0x0E, 
                One, 
                0x00020012, 
                0x02, 
                0x0E, 
                One, 
                0x00020013, 
                One, 
                0x1F, 
                One, 
                0x00020014, 
                0x09, 
                0x16, 
                One, 
                0x00020015, 
                0x05, 
                0x0E, 
                One, 
                0x00020016, 
                One, 
                0x0F, 
                One, 
                0x00020017, 
                One, 
                0x0F, 
                One, 
                0x00020018, 
                One, 
                0x0F, 
                One, 
                0x00020019, 
                One, 
                0x0F, 
                One, 
                0x0002001A, 
                One, 
                0x0F, 
                One, 
                0x0002001B, 
                One, 
                0x3F, 
                One, 
                0x0002001C, 
                One, 
                0x0F, 
                One, 
                0x0002001D, 
                One, 
                0x0F, 
                One, 
                0x0002001E, 
                One, 
                0x1F, 
                One, 
                0x0002001F, 
                One, 
                0x0F, 
                One, 
                0x00020020, 
                Zero, 
                One, 
                One, 
                0x00020021, 
                Zero, 
                One, 
                One, 
                0x00020022, 
                Zero, 
                0x07, 
                One, 
                0x00020023, 
                Zero, 
                0x04, 
                One, 
                0x00020024, 
                Zero, 
                0x07, 
                One, 
                0x00020025, 
                Zero, 
                One, 
                One, 
                0x00020026, 
                Zero, 
                One, 
                One, 
                0x00020027, 
                Zero, 
                Ones, 
                One, 
                0x00020028, 
                Zero, 
                0x0F, 
                One, 
                0x00020029, 
                Zero, 
                0x3F, 
                One, 
                0x0002002A, 
                Zero, 
                0x3F, 
                One, 
                0x0002002B, 
                Zero, 
                0x3F, 
                One, 
                0x0002002C, 
                Zero, 
                0x1F, 
                One, 
                0x0002002D, 
                Zero, 
                0x1F, 
                One, 
                0x0002002E, 
                Zero, 
                0x1F, 
                One, 
                0x0002002F, 
                Zero, 
                0x1F, 
                One, 
                0x00020030, 
                Zero, 
                0x05DC, 
                One, 
                0x00020031, 
                Zero, 
                Ones, 
                One, 
                0x00020032, 
                Zero, 
                0x07, 
                One, 
                0x00020033, 
                Zero, 
                One, 
                One, 
                0x00020034, 
                Zero, 
                0xFF, 
                One, 
                0x00020035, 
                0x014D, 
                0x09C4, 
                0x21, 
                0x00030001, 
                0x031D, 
                0x0643, 
                0x0D, 
                0x00030002, 
                0x01F4, 
                0x02EE, 
                0x05, 
                Zero
            })
            Name (OBD1, Package (0xE7)
            {
                0x00020001, 
                0x20, 
                0x029B, 
                0x0320, 
                0x03A5, 
                0x042B, 
                0x04B0, 
                0x0535, 
                0x0557, 
                0x0578, 
                0x0599, 
                0x05BB, 
                0x05DC, 
                0x05FD, 
                0x061F, 
                0x0640, 
                0x0661, 
                0x0683, 
                0x06A4, 
                0x06C5, 
                0x06E7, 
                0x0708, 
                0x0729, 
                0x074B, 
                0x076C, 
                0x078D, 
                0x07AF, 
                0x07D0, 
                0x07F1, 
                0x0813, 
                0x0834, 
                0x0855, 
                0x0877, 
                0x0898, 
                0x00020002, 
                0x1A, 
                0x08, 
                0x09, 
                0x0A, 
                0x0B, 
                0x0C, 
                0x0D, 
                0x0E, 
                0x0F, 
                0x10, 
                0x11, 
                0x12, 
                0x13, 
                0x14, 
                0x15, 
                0x16, 
                0x17, 
                0x18, 
                0x19, 
                0x1A, 
                0x1B, 
                0x1C, 
                0x1D, 
                0x1E, 
                0x1F, 
                0x20, 
                0x21, 
                0x00020003, 
                0x14, 
                0x08, 
                0x09, 
                0x0A, 
                0x0B, 
                0x0C, 
                0x0D, 
                0x0E, 
                0x0F, 
                0x10, 
                0x11, 
                0x12, 
                0x13, 
                0x14, 
                0x15, 
                0x16, 
                0x17, 
                0x18, 
                0x19, 
                0x1A, 
                0x1B, 
                0x00020004, 
                0x14, 
                0x08, 
                0x09, 
                0x0A, 
                0x0B, 
                0x0C, 
                0x0D, 
                0x0E, 
                0x0F, 
                0x10, 
                0x11, 
                0x12, 
                0x13, 
                0x14, 
                0x15, 
                0x16, 
                0x17, 
                0x18, 
                0x19, 
                0x1A, 
                0x1B, 
                0x00020005, 
                0x26, 
                0x15, 
                0x16, 
                0x17, 
                0x18, 
                0x19, 
                0x1A, 
                0x1B, 
                0x1C, 
                0x1D, 
                0x1E, 
                0x1F, 
                0x20, 
                0x21, 
                0x22, 
                0x23, 
                0x24, 
                0x25, 
                0x26, 
                0x27, 
                0x28, 
                0x29, 
                0x2A, 
                0x2B, 
                0x2C, 
                0x2D, 
                0x2E, 
                0x2F, 
                0x30, 
                0x31, 
                0x32, 
                0x33, 
                0x34, 
                0x35, 
                0x36, 
                0x37, 
                0x38, 
                0x39, 
                0x3A, 
                0x00020006, 
                0x14, 
                0x08, 
                0x09, 
                0x0A, 
                0x0B, 
                0x0C, 
                0x0D, 
                0x0E, 
                0x0F, 
                0x10, 
                0x11, 
                0x12, 
                0x13, 
                0x14, 
                0x15, 
                0x16, 
                0x17, 
                0x18, 
                0x19, 
                0x1A, 
                0x1B, 
                0x00020007, 
                0x12, 
                Zero, 
                One, 
                0x02, 
                0x03, 
                0x08, 
                0x09, 
                0x0A, 
                0x0B, 
                0x18, 
                0x19, 
                0x1A, 
                0x1B, 
                0x38, 
                0x39, 
                0x3A, 
                0x3B, 
                0x3E, 
                0x3F, 
                0x00020014, 
                0x08, 
                0x09, 
                0x0A, 
                0x0B, 
                0x0C, 
                0x0E, 
                0x10, 
                0x12, 
                0x14, 
                0x0002002C, 
                0x06, 
                Zero, 
                One, 
                0x03, 
                0x07, 
                0x0F, 
                0x1F, 
                0x0002002D, 
                0x06, 
                Zero, 
                One, 
                0x03, 
                0x07, 
                0x0F, 
                0x1F, 
                0x0002002E, 
                0x06, 
                Zero, 
                One, 
                0x03, 
                0x07, 
                0x0F, 
                0x1F, 
                0x0002002F, 
                0x06, 
                Zero, 
                One, 
                0x03, 
                0x07, 
                0x0F, 
                0x1F, 
                Zero
            })
            Name (OBD2, Package (0x9B)
            {
                0x00020035, 
                0x2E, 
                0x029B, 
                0x0320, 
                0x03A5, 
                0x042B, 
                0x04B0, 
                0x0535, 
                0x0557, 
                0x0578, 
                0x0599, 
                0x05BB, 
                0x05DC, 
                0x05FD, 
                0x061F, 
                0x0640, 
                0x0661, 
                0x0683, 
                0x06A4, 
                0x06C5, 
                0x06E7, 
                0x0708, 
                0x0729, 
                0x074B, 
                0x076C, 
                0x078D, 
                0x07AF, 
                0x07D0, 
                0x07F1, 
                0x0813, 
                0x0834, 
                0x0855, 
                0x0877, 
                0x0898, 
                0x08B9, 
                0x08DB, 
                0x08FC, 
                0x091D, 
                0x093F, 
                0x0960, 
                0x0981, 
                0x09A3, 
                0x09C4, 
                0x014D, 
                0x0190, 
                0x0215, 
                0x041A, 
                0x042A, 
                0x00030001, 
                0x33, 
                0x03E8, 
                0x03F2, 
                0x03FC, 
                0x0406, 
                0x0410, 
                0x041A, 
                0x0424, 
                0x042E, 
                0x0438, 
                0x0442, 
                0x044C, 
                0x0456, 
                0x0460, 
                0x046A, 
                0x0474, 
                0x047E, 
                0x0488, 
                0x0492, 
                0x049C, 
                0x04A6, 
                0x04B0, 
                0x04BA, 
                0x04C4, 
                0x04CE, 
                0x04D8, 
                0x04E2, 
                0x04EC, 
                0x04F6, 
                0x0500, 
                0x050A, 
                0x0514, 
                0x051E, 
                0x0528, 
                0x0532, 
                0x053C, 
                0x0546, 
                0x0550, 
                0x055A, 
                0x0564, 
                0x056E, 
                0x0578, 
                0x0582, 
                0x058C, 
                0x0596, 
                0x05A0, 
                0x05AA, 
                0x05B4, 
                0x05BE, 
                0x05C8, 
                0x05D2, 
                0x05DC, 
                0x00030002, 
                0x33, 
                0x01F4, 
                0x01F9, 
                0x01FE, 
                0x0203, 
                0x0208, 
                0x020D, 
                0x0212, 
                0x0217, 
                0x021C, 
                0x0221, 
                0x0226, 
                0x022B, 
                0x0230, 
                0x0235, 
                0x023A, 
                0x023F, 
                0x0244, 
                0x0249, 
                0x024E, 
                0x0253, 
                0x0258, 
                0x025D, 
                0x0262, 
                0x0267, 
                0x026C, 
                0x0271, 
                0x0276, 
                0x027B, 
                0x0280, 
                0x0285, 
                0x028A, 
                0x028F, 
                0x0294, 
                0x0299, 
                0x029E, 
                0x02A3, 
                0x02A8, 
                0x02AD, 
                0x02B2, 
                0x02B7, 
                0x02BC, 
                0x02C1, 
                0x02C6, 
                0x02CB, 
                0x02D0, 
                0x02D5, 
                0x02DA, 
                0x02DF, 
                0x02E4, 
                0x02E9, 
                0x02EE, 
                Zero
            })
            Method (BM01, 0, NotSerialized)
            {
            }

            Method (XINI, 0, NotSerialized)
            {
            }

            Method (EM01, 0, NotSerialized)
            {
            }

            Method (BM05, 1, NotSerialized)
            {
            }

            Method (EM05, 1, NotSerialized)
            {
            }

            Method (HM06, 0, NotSerialized)
            {
            }

            Method (HM07, 1, NotSerialized)
            {
            }

            Method (SBSL, 1, NotSerialized)
            {
                IndexField (PMRI, PMRD, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x2E), 
                    SBSL,   8
                }

                Local0 = (Arg0 | One)
                SBSL = Local0
            }

            Method (SETV, 2, NotSerialized)
            {
            }

            Method (GETV, 1, NotSerialized)
            {
            }

            Method (CPTB, 2, NotSerialized)
            {
                Name (LOID, Zero)
                CreateDWordField (Arg1, Zero, BUF0)
                CreateDWordField (Arg1, 0x04, BUF1)
                CreateDWordField (Arg1, 0x08, BUF2)
                CreateDWordField (Arg1, 0x0C, BUF3)
                Local0 = Zero
                LOID = DerefOf (OBIT [Local0])
                While (LOID)
                {
                    If ((LOID == Arg0))
                    {
                        BUF0 = DerefOf (OBIT [(Local0 + Zero)])
                        BUF1 = DerefOf (OBIT [(Local0 + One)])
                        BUF2 = DerefOf (OBIT [(Local0 + 0x02)])
                        BUF3 = DerefOf (OBIT [(Local0 + 0x03)])
                        Break
                    }

                    Local0 += 0x04
                    LOID = DerefOf (OBIT [Local0])
                }

                If ((LOID == Zero))
                {
                    Return (0xFF)
                }

                Return (Zero)
            }

            Name (GF01, Zero)
            Name (GVBF, Buffer (0x05)
            {
                 0x00, 0x00, 0x00, 0x00, 0x00                     // .....
            })
            CreateDWordField (GVBF, Zero, GVB1)
            CreateByteField (GVBF, 0x04, GVB2)
            Method (AM01, 0, NotSerialized)
            {
                Return (CMDV) /* \AOD_.CMDV */
            }

            Method (AM02, 0, NotSerialized)
            {
                If (!GF01)
                {
                    BM01 ()
                    XINI ()
                    EM01 ()
                    GF01 = One
                }

                Return (Zero)
            }

            Method (AM03, 0, NotSerialized)
            {
                Return (OBID) /* \AOD_.OBID */
            }

            Method (AM04, 1, NotSerialized)
            {
                Name (LODT, Package (0x66)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Local0 = Zero
                While (One)
                {
                    If ((DerefOf (OBD1 [Local0]) == Arg0))
                    {
                        Local4 = Zero
                        Break
                    }

                    If ((DerefOf (OBD1 [Local0]) == Zero))
                    {
                        Local4 = 0x04
                        Break
                    }

                    Local0 += DerefOf (OBD1 [(Local0 + One)])
                    Local0 += 0x02
                }

                If ((Local4 == Zero))
                {
                    Local1 = DerefOf (OBD1 [(Local0 + One)])
                    Local1 += 0x02
                    Local2 = Zero
                    While (Local1)
                    {
                        LODT [Local2] = DerefOf (OBD1 [Local0])
                        Local1--
                        Local0++
                        Local2++
                    }

                    Return (LODT) /* \AOD_.AM04.LODT */
                }

                Local0 = Zero
                While (One)
                {
                    If ((DerefOf (OBD2 [Local0]) == Arg0))
                    {
                        Local4 = Zero
                        Break
                    }

                    If ((DerefOf (OBD2 [Local0]) == Zero))
                    {
                        Local4 = 0x04
                        Break
                    }

                    Local0 += DerefOf (OBD2 [(Local0 + One)])
                    Local0 += 0x02
                }

                If ((Local4 == Zero))
                {
                    Local1 = DerefOf (OBD2 [(Local0 + One)])
                    Local1 += 0x02
                    Local2 = Zero
                    While (Local1)
                    {
                        LODT [Local2] = DerefOf (OBD2 [Local0])
                        Local1--
                        Local0++
                        Local2++
                    }

                    Return (LODT) /* \AOD_.AM04.LODT */
                }

                Return (LODT) /* \AOD_.AM04.LODT */
            }

            Method (AM05, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ACMD)
                CreateField (OBUF, Zero, (SizeOf (OBUF) * 0x08), TEMP)
                TEMP = Zero
                CreateWordField (OBUF, Zero, BSCD)
                CreateDWordField (OBUF, 0x02, BSTS)
                CreateWordField (OBUF, 0x06, BSD1)
                CreateDWordField (OBUF, 0x08, BBSN)
                CreateDWordField (OBUF, 0x0C, BBVS)
                CreateDWordField (OBUF, 0x10, BBCB)
                CreateWordField (OBUF, 0x14, BBMC)
                CreateByteField (OBUF, 0x16, BTCL)
                CreateByteField (OBUF, 0x17, BTRR)
                CreateByteField (OBUF, 0x18, BTRW)
                CreateByteField (OBUF, 0x19, BRAS)
                CreateByteField (OBUF, 0x1A, BTRP)
                CreateWordField (OBUF, 0x1B, BVIO)
                CreateWordField (OBUF, 0x1D, BVTT)
                CreateWordField (OBUF, 0x1F, BVPP)
                CreateWordField (OBUF, 0x21, BODT)
                CreateWordField (OBUF, 0x23, BRPG)
                CreateByteField (OBUF, 0x25, BTRC)
                CreateWordField (OBUF, 0x26, BRFC)
                CreateWordField (OBUF, 0x28, BRF2)
                CreateWordField (OBUF, 0x2A, BRF4)
                CreateByteField (OBUF, 0x2C, BFAW)
                CreateByteField (OBUF, 0x2D, BRRS)
                CreateByteField (OBUF, 0x2E, BRRL)
                CreateByteField (OBUF, 0x2F, BTWR)
                CreateByteField (OBUF, 0x30, BWTS)
                CreateByteField (OBUF, 0x31, BWTL)
                CreateByteField (OBUF, 0x32, BCKE)
                CreateByteField (OBUF, 0x33, BCWL)
                CreateByteField (OBUF, 0x34, BRTP)
                CreateByteField (OBUF, 0x35, BRSC)
                CreateByteField (OBUF, 0x36, BRSL)
                CreateByteField (OBUF, 0x37, BRSD)
                CreateByteField (OBUF, 0x38, BRDD)
                CreateByteField (OBUF, 0x39, BWSC)
                CreateByteField (OBUF, 0x3A, BWSL)
                CreateByteField (OBUF, 0x3B, BWSD)
                CreateByteField (OBUF, 0x3C, BWDD)
                CreateByteField (OBUF, 0x3D, BRWR)
                CreateByteField (OBUF, 0x3E, BWRD)
                CreateByteField (OBUF, 0x3F, BRDN)
                CreateByteField (OBUF, 0x40, BM2T)
                CreateByteField (OBUF, 0x41, RBNM)
                CreateByteField (OBUF, 0x42, RBWR)
                CreateByteField (OBUF, 0x43, RBPK)
                CreateByteField (OBUF, 0x44, BPWD)
                CreateByteField (OBUF, 0x45, BOCD)
                CreateDWordField (OBUF, 0x46, BOCV)
                CreateDWordField (OBUF, 0x4A, BOCF)
                CreateByteField (OBUF, 0x4E, BSMT)
                CreateDWordField (OBUF, 0x4F, BTOF)
                CreateByteField (OBUF, 0x53, BEDC)
                CreateWordField (OBUF, 0x54, BCNT)
                CreateByteField (OBUF, 0x56, BACS)
                CreateByteField (OBUF, 0x57, BCOS)
                CreateByteField (OBUF, 0x58, BCES)
                CreateByteField (OBUF, 0x59, BCBC)
                CreateByteField (OBUF, 0x5A, BCBA)
                CreateByteField (OBUF, 0x5B, BCBO)
                CreateByteField (OBUF, 0x5C, BCBE)
                CreateDWordField (OBUF, 0x5D, BCVP)
                CreateByteField (OBUF, 0x5F, BEDO)
                CreateDWordField (OBUF, 0x60, BNLC)
                CreateDWordField (OBUF, 0x64, BNLM)
                CreateDWordField (OBUF, 0x68, BNLS)
                CreateDWordField (OBUF, 0x6C, BPPL)
                CreateDWordField (OBUF, 0x70, BTDL)
                CreateDWordField (OBUF, 0x74, BEDL)
                CreateByteField (OBUF, 0x78, BFOC)
                CreateByteField (OBUF, 0x79, BSVD)
                CreateDWordField (OBUF, 0x7A, BFCK)
                CreateByteField (OBUF, 0x7C, BDPC)
                CreateByteField (OBUF, 0x7D, BCPS)
                If ((ACMD == 0x00010001))
                {
                    R101 (Arg0)
                }
                ElseIf ((ACMD == 0x00010002))
                {
                    R102 (Arg0)
                }
                ElseIf ((ACMD == 0x00020001))
                {
                    R201 (Arg0)
                }
                ElseIf ((ACMD == 0x00020002))
                {
                    R202 (Arg0)
                }
                ElseIf ((ACMD == 0x00020003))
                {
                    R203 (Arg0)
                }
                ElseIf ((ACMD == 0x00020004))
                {
                    R204 (Arg0)
                }
                ElseIf ((ACMD == 0x00020005))
                {
                    R205 (Arg0)
                }
                ElseIf ((ACMD == 0x00020006))
                {
                    R206 (Arg0)
                }
                ElseIf ((ACMD == 0x00020007))
                {
                    R207 (Arg0)
                }
                ElseIf ((ACMD == 0x00020008))
                {
                    R208 (Arg0)
                }
                ElseIf ((ACMD == 0x00020009))
                {
                    R209 (Arg0)
                }
                ElseIf ((ACMD == 0x0002000A))
                {
                    R20A (Arg0)
                }
                ElseIf ((ACMD == 0x0002000B))
                {
                    R20B (Arg0)
                }
                ElseIf ((ACMD == 0x0002000C))
                {
                    R20C (Arg0)
                }
                ElseIf ((ACMD == 0x0002000D))
                {
                    R20D (Arg0)
                }
                ElseIf ((ACMD == 0x0002000E))
                {
                    R20E (Arg0)
                }
                ElseIf ((ACMD == 0x0002000F))
                {
                    R20F (Arg0)
                }
                ElseIf ((ACMD == 0x00020010))
                {
                    R210 (Arg0)
                }
                ElseIf ((ACMD == 0x00020011))
                {
                    R211 (Arg0)
                }
                ElseIf ((ACMD == 0x00020012))
                {
                    R212 (Arg0)
                }
                ElseIf ((ACMD == 0x00020013))
                {
                    R213 (Arg0)
                }
                ElseIf ((ACMD == 0x00020014))
                {
                    R214 (Arg0)
                }
                ElseIf ((ACMD == 0x00020015))
                {
                    R215 (Arg0)
                }
                ElseIf ((ACMD == 0x00020016))
                {
                    R216 (Arg0)
                }
                ElseIf ((ACMD == 0x00020017))
                {
                    R217 (Arg0)
                }
                ElseIf ((ACMD == 0x00020018))
                {
                    R218 (Arg0)
                }
                ElseIf ((ACMD == 0x00020019))
                {
                    R219 (Arg0)
                }
                ElseIf ((ACMD == 0x0002001A))
                {
                    R21A (Arg0)
                }
                ElseIf ((ACMD == 0x0002001B))
                {
                    R21B (Arg0)
                }
                ElseIf ((ACMD == 0x0002001C))
                {
                    R21C (Arg0)
                }
                ElseIf ((ACMD == 0x0002001D))
                {
                    R21D (Arg0)
                }
                ElseIf ((ACMD == 0x0002001E))
                {
                    R21E (Arg0)
                }
                ElseIf ((ACMD == 0x0002001F))
                {
                    R21F (Arg0)
                }
                ElseIf ((ACMD == 0x00020020))
                {
                    R220 (Arg0)
                }
                ElseIf ((ACMD == 0x00020021))
                {
                    R221 (Arg0)
                }
                ElseIf ((ACMD == 0x00020022))
                {
                    R222 (Arg0)
                }
                ElseIf ((ACMD == 0x00020023))
                {
                    R223 (Arg0)
                }
                ElseIf ((ACMD == 0x00020024))
                {
                    R224 (Arg0)
                }
                ElseIf ((ACMD == 0x00020025))
                {
                    R225 (Arg0)
                }
                ElseIf ((ACMD == 0x00020026))
                {
                    R226 (Arg0)
                }
                ElseIf ((ACMD == 0x00020027))
                {
                    R227 (Arg0)
                }
                ElseIf ((ACMD == 0x00020028))
                {
                    R228 (Arg0)
                }
                ElseIf ((ACMD == 0x00020029))
                {
                    R229 (Arg0)
                }
                ElseIf ((ACMD == 0x0002002A))
                {
                    R22A (Arg0)
                }
                ElseIf ((ACMD == 0x0002002B))
                {
                    R22B (Arg0)
                }
                ElseIf ((ACMD == 0x0002002C))
                {
                    R22C (Arg0)
                }
                ElseIf ((ACMD == 0x0002002D))
                {
                    R22D (Arg0)
                }
                ElseIf ((ACMD == 0x0002002E))
                {
                    R22E (Arg0)
                }
                ElseIf ((ACMD == 0x0002002F))
                {
                    R22F (Arg0)
                }
                ElseIf ((ACMD == 0x00020030))
                {
                    R230 (Arg0)
                }
                ElseIf ((ACMD == 0x00020031))
                {
                    R231 (Arg0)
                }
                ElseIf ((ACMD == 0x00020032))
                {
                    R232 (Arg0)
                }
                ElseIf ((ACMD == 0x00020033))
                {
                    R233 (Arg0)
                }
                ElseIf ((ACMD == 0x00020034))
                {
                    R234 (Arg0)
                }
                ElseIf ((ACMD == 0x00020035))
                {
                    R235 (Arg0)
                }
                ElseIf ((ACMD == 0x00030001))
                {
                    R301 (Arg0)
                }
                ElseIf ((ACMD == 0x00030002))
                {
                    R302 (Arg0)
                }
                ElseIf ((ACMD == 0x00030003))
                {
                    R303 (Arg0)
                }
                ElseIf ((ACMD == 0x00040001))
                {
                    R401 (Arg0)
                }
                ElseIf ((ACMD == 0x00040002))
                {
                    R402 (Arg0)
                }
                Else
                {
                }

                BSCD = ASCD /* \AOD_.ASCD */
                BSTS = ASTS /* \AOD_.ASTS */
                BSD1 = RSD1 /* \AOD_.RSD1 */
                BBSN = MBSN /* \AOD_.MBSN */
                BBVS = MBVS /* \AOD_.MBVS */
                BBCB = MBCB /* \AOD_.MBCB */
                BBMC = MBMC /* \AOD_.MBMC */
                BTCL = TTCL /* \AOD_.TTCL */
                BTRR = TRCR /* \AOD_.TRCR */
                BTRW = TRCW /* \AOD_.TRCW */
                BRAS = TRAS /* \AOD_.TRAS */
                BTRP = TTRP /* \AOD_.TTRP */
                BVIO = VDIO /* \AOD_.VDIO */
                BVTT = VMTT /* \AOD_.VMTT */
                BVPP = VMPP /* \AOD_.VMPP */
                BODT = PODT /* \AOD_.PODT */
                BRPG = TRPG /* \AOD_.TRPG */
                BTRC = TTRC /* \AOD_.TTRC */
                BRFC = TRFC /* \AOD_.TRFC */
                BRF2 = TRF2 /* \AOD_.TRF2 */
                BRF4 = TRF4 /* \AOD_.TRF4 */
                BFAW = TFAW /* \AOD_.TFAW */
                BRRS = TRRS /* \AOD_.TRRS */
                BRRL = TRRL /* \AOD_.TRRL */
                BTWR = TTWR /* \AOD_.TTWR */
                BWTS = TWTS /* \AOD_.TWTS */
                BWTL = TWTL /* \AOD_.TWTL */
                BCKE = TCKE /* \AOD_.TCKE */
                BCWL = TCWL /* \AOD_.TCWL */
                BRTP = TRTP /* \AOD_.TRTP */
                BRSC = TRSC /* \AOD_.TRSC */
                BRSL = TRSL /* \AOD_.TRSL */
                BRSD = TRSD /* \AOD_.TRSD */
                BRDD = TRDD /* \AOD_.TRDD */
                BWSC = TWSC /* \AOD_.TWSC */
                BWSL = TWSL /* \AOD_.TWSL */
                BWSD = TWSD /* \AOD_.TWSD */
                BWDD = TWDD /* \AOD_.TWDD */
                BRWR = TRWR /* \AOD_.TRWR */
                BWRD = TWRD /* \AOD_.TWRD */
                BRDN = GRDN /* \AOD_.GRDN */
                BM2T = CM2T /* \AOD_.CM2T */
                RBNM = RTNM /* \AOD_.RTNM */
                RBWR = RTWR /* \AOD_.RTWR */
                RBPK = RTPK /* \AOD_.RTPK */
                BPWD = PWDE /* \AOD_.PWDE */
                BOCD = OCDS /* \AOD_.OCDS */
                BOCV = OCVM /* \AOD_.OCVM */
                BOCF = OCFM /* \AOD_.OCFM */
                BSMT = SMTE /* \AOD_.SMTE */
                BTOF = TOFF /* \AOD_.TOFF */
                BEDC = EDCT /* \AOD_.EDCT */
                BCNT = ACNT /* \AOD_.ACNT */
                BACS = ACSP /* \AOD_.ACSP */
                BCOS = COSP /* \AOD_.COSP */
                BCES = CESP /* \AOD_.CESP */
                BCBC = CBCK /* \AOD_.CBCK */
                BCBA = CBAC /* \AOD_.CBAC */
                BCBO = CBCO /* \AOD_.CBCO */
                BCBE = CBCE /* \AOD_.CBCE */
                BCVP = CDVP /* \AOD_.CDVP */
                BEDO = EDCO /* \AOD_.EDCO */
                BNLC = INLC /* \AOD_.INLC */
                BNLM = INLM /* \AOD_.INLM */
                BNLS = INLS /* \AOD_.INLS */
                BPPL = PPTL /* \AOD_.PPTL */
                BTDL = TDCL /* \AOD_.TDCL */
                BEDL = EDCL /* \AOD_.EDCL */
                BFOC = FCOC /* \AOD_.FCOC */
                BSVD = SVID /* \AOD_.SVID */
                BFCK = FCLK /* \AOD_.FCLK */
                BDPC = MDPC /* \AOD_.MDPC */
                BCPS = MCPS /* \AOD_.MCPS */
                Return (OBUF) /* \AOD_.OBUF */
            }

            Method (AM06, 1, NotSerialized)
            {
                Name (INFO, Buffer (0x10)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                })
                CPTB (Arg0, INFO)
                Return (INFO) /* \AOD_.AM06.INFO */
            }

            Method (AM07, 1, NotSerialized)
            {
                Name (BSPD, Buffer (0x0214){})
                If ((Arg0 > 0x0F))
                {
                    Return (BSPD) /* \AOD_.AM07.BSPD */
                }

                If ((Arg0 == Zero))
                {
                    BSPD = DSPD /* \AOD_.DSPD */
                    Return (BSPD) /* \AOD_.AM07.BSPD */
                }

                Local0 = Zero
                Local0 += (Arg0 * 0x0214)
                Local1 = 0x0214
                Local2 = Zero
                While (Local1)
                {
                    BSPD [Local2] = DerefOf (DSPD [Local0])
                    Local1--
                    Local0++
                    Local2++
                }

                Return (BSPD) /* \AOD_.AM07.BSPD */
            }

            Name (CMDV, 0x04)
            Name (OBUF, Buffer (0xC8){})
            OperationRegion (AODT, SystemMemory, 0xDBE50018, 0x220C)
            Field (AODT, AnyAcc, NoLock, Preserve)
            {
                ASCD,   16, 
                ASTS,   32, 
                RSD1,   16, 
                MBSN,   32, 
                MBVS,   32, 
                MBCB,   32, 
                MBMC,   16, 
                TTCL,   8, 
                TRCR,   8, 
                TRCW,   8, 
                TRAS,   8, 
                TTRP,   8, 
                VDIO,   16, 
                VMTT,   16, 
                VMPP,   16, 
                PODT,   16, 
                TRPG,   16, 
                TTRC,   8, 
                TRFC,   16, 
                TRF2,   16, 
                TRF4,   16, 
                TFAW,   8, 
                TRRS,   8, 
                TRRL,   8, 
                TTWR,   8, 
                TWTS,   8, 
                TWTL,   8, 
                TCKE,   8, 
                TCWL,   8, 
                TRTP,   8, 
                TRSC,   8, 
                TRSL,   8, 
                TRSD,   8, 
                TRDD,   8, 
                TWSC,   8, 
                TWSL,   8, 
                TWSD,   8, 
                TWDD,   8, 
                TRWR,   8, 
                TWRD,   8, 
                GRDN,   8, 
                CM2T,   8, 
                RTNM,   8, 
                RTWR,   8, 
                RTPK,   8, 
                PWDE,   8, 
                OCDS,   8, 
                OCVM,   32, 
                OCFM,   32, 
                SMTE,   8, 
                TOFF,   32, 
                EDCT,   8, 
                ACNT,   16, 
                ACSP,   8, 
                COSP,   8, 
                CESP,   8, 
                CBCK,   8, 
                CBAC,   8, 
                CBCO,   8, 
                CBCE,   8, 
                CDVP,   16, 
                EDCO,   8, 
                INLC,   32, 
                INLM,   32, 
                INLS,   32, 
                PPTL,   32, 
                TDCL,   32, 
                EDCL,   32, 
                FCOC,   8, 
                SVID,   8, 
                FCLK,   16, 
                MDPC,   8, 
                MCPS,   8, 
                MRSD,   528, 
                RSD2,   64, 
                NDPC,   8, 
                NCPS,   8, 
                RSD3,   16, 
                DSPD,   68096
            }

            Method (R101, 1, NotSerialized)
            {
                MBVS = 0x04
                MBCB = 0x80000000
                ASMI (0x9D)
            }

            Method (R102, 1, NotSerialized)
            {
                MBVS = 0x04
                Local0 = 0x40000000
                MBCB = Local0
                ASMI (0x9E)
            }

            Method (R201, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MCLK)
                MBVS = 0x04
                MBMC = MCLK /* \AOD_.R201.MCLK */
                MBCB = One
                ASMI (0x9D)
            }

            Method (R202, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, MTCL)
                MBVS = 0x04
                TTCL = MTCL /* \AOD_.R202.MTCL */
                MBCB = 0x02
                ASMI (0x9D)
            }

            Method (R203, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, MRDD)
                MBVS = 0x04
                TRCR = MRDD /* \AOD_.R203.MRDD */
                MBCB = 0x04
                ASMI (0x9D)
            }

            Method (R204, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, MRDW)
                MBVS = 0x04
                TRCW = MRDW /* \AOD_.R204.MRDW */
                MBCB = 0x08
                ASMI (0x9D)
            }

            Method (R205, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, MTRS)
                MBVS = 0x04
                TRAS = MTRS /* \AOD_.R205.MTRS */
                MBCB = 0x20
                ASMI (0x9D)
            }

            Method (R206, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, MTRP)
                MBVS = 0x04
                TTRP = MTRP /* \AOD_.R206.MTRP */
                MBCB = 0x10
                ASMI (0x9D)
            }

            Method (R207, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MPOT)
                MBVS = 0x04
                PODT = MPOT /* \AOD_.R207.MPOT */
                MBCB = 0x3000
                ASMI (0x9D)
            }

            Method (R208, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MRPG)
                MBVS = 0x04
                TRPG = MRPG /* \AOD_.R208.MRPG */
                MBCB = 0x4000
                ASMI (0x9D)
            }

            Method (R209, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                TTRC = SVAL /* \AOD_.R209.SVAL */
                MBCB = 0x5000
                ASMI (0x9D)
            }

            Method (R20A, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                TRFC = SVAL /* \AOD_.R20A.SVAL */
                MBCB = 0x6000
                ASMI (0x9D)
            }

            Method (R20B, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                TRF2 = SVAL /* \AOD_.R20B.SVAL */
                MBCB = 0x7000
                ASMI (0x9D)
            }

            Method (R20C, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                TRF4 = SVAL /* \AOD_.R20C.SVAL */
                MBCB = 0x8000
                ASMI (0x9D)
            }

            Method (R20D, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                TFAW = SVAL /* \AOD_.R20D.SVAL */
                MBCB = 0x9000
                ASMI (0x9D)
            }

            Method (R20E, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                TRRS = SVAL /* \AOD_.R20E.SVAL */
                MBCB = 0xA000
                ASMI (0x9D)
            }

            Method (R20F, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                TRRL = SVAL /* \AOD_.R20F.SVAL */
                MBCB = 0xB000
                ASMI (0x9D)
            }

            Method (R210, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                TTWR = SVAL /* \AOD_.R210.SVAL */
                MBCB = 0xC000
                ASMI (0x9D)
            }

            Method (R211, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                TWTS = SVAL /* \AOD_.R211.SVAL */
                MBCB = 0xD000
                ASMI (0x9D)
            }

            Method (R212, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                TWTL = SVAL /* \AOD_.R212.SVAL */
                MBCB = 0xE000
                ASMI (0x9D)
            }

            Method (R213, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                TCKE = SVAL /* \AOD_.R213.SVAL */
                MBCB = 0xF000
                ASMI (0x9D)
            }

            Method (R214, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                TCWL = SVAL /* \AOD_.R214.SVAL */
                MBCB = 0x00010000
                ASMI (0x9D)
            }

            Method (R215, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                TRTP = SVAL /* \AOD_.R215.SVAL */
                MBCB = 0x00020000
                ASMI (0x9D)
            }

            Method (R216, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                TRSC = SVAL /* \AOD_.R216.SVAL */
                MBCB = 0x00030000
                ASMI (0x9D)
            }

            Method (R217, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                TRSL = SVAL /* \AOD_.R217.SVAL */
                MBCB = 0x00040000
                ASMI (0x9D)
            }

            Method (R218, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                TRSD = SVAL /* \AOD_.R218.SVAL */
                MBCB = 0x00050000
                ASMI (0x9D)
            }

            Method (R219, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                TRDD = SVAL /* \AOD_.R219.SVAL */
                MBCB = 0x00060000
                ASMI (0x9D)
            }

            Method (R21A, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                TWSC = SVAL /* \AOD_.R21A.SVAL */
                MBCB = 0x00070000
                ASMI (0x9D)
            }

            Method (R21B, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                TWSL = SVAL /* \AOD_.R21B.SVAL */
                MBCB = 0x00080000
                ASMI (0x9D)
            }

            Method (R21C, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                TWSD = SVAL /* \AOD_.R21C.SVAL */
                MBCB = 0x00090000
                ASMI (0x9D)
            }

            Method (R21D, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                TWDD = SVAL /* \AOD_.R21D.SVAL */
                MBCB = 0x000A0000
                ASMI (0x9D)
            }

            Method (R21E, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                TRWR = SVAL /* \AOD_.R21E.SVAL */
                MBCB = 0x000B0000
                ASMI (0x9D)
            }

            Method (R21F, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                TWRD = SVAL /* \AOD_.R21F.SVAL */
                MBCB = 0x000C0000
                ASMI (0x9D)
            }

            Method (R220, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                GRDN = SVAL /* \AOD_.R220.SVAL */
                MBCB = 0x000D0000
                ASMI (0x9D)
            }

            Method (R221, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                CM2T = SVAL /* \AOD_.R221.SVAL */
                MBCB = 0x000E0000
                ASMI (0x9D)
            }

            Method (R222, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                RTNM = SVAL /* \AOD_.R222.SVAL */
                MBCB = 0x000F0000
                ASMI (0x9D)
            }

            Method (R223, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                RTWR = SVAL /* \AOD_.R223.SVAL */
                MBCB = 0x00100000
                ASMI (0x9D)
            }

            Method (R224, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                RTPK = SVAL /* \AOD_.R224.SVAL */
                MBCB = 0x00200000
                ASMI (0x9D)
            }

            Method (R225, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                PWDE = SVAL /* \AOD_.R225.SVAL */
                MBCB = 0x00300000
                ASMI (0x9D)
            }

            Method (R226, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                SMTE = SVAL /* \AOD_.R226.SVAL */
                MBCB = 0x00400000
                ASMI (0x9D)
            }

            Method (R227, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                ACNT = SVAL /* \AOD_.R227.SVAL */
                MBCB = 0x00500000
                ASMI (0x9D)
            }

            Method (R228, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                EDCT = SVAL /* \AOD_.R228.SVAL */
                MBCB = 0x00600000
                ASMI (0x9D)
            }

            Method (R229, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                ACSP = SVAL /* \AOD_.R229.SVAL */
                MBCB = 0x00800000
                ASMI (0x9D)
            }

            Method (R22A, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                COSP = SVAL /* \AOD_.R22A.SVAL */
                MBCB = 0x00900000
                ASMI (0x9D)
            }

            Method (R22B, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                CESP = SVAL /* \AOD_.R22B.SVAL */
                MBCB = 0x00A00000
                ASMI (0x9D)
            }

            Method (R22C, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                CBCK = SVAL /* \AOD_.R22C.SVAL */
                MBCB = 0x00B00000
                ASMI (0x9D)
            }

            Method (R22D, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                CBAC = SVAL /* \AOD_.R22D.SVAL */
                MBCB = 0x00C00000
                ASMI (0x9D)
            }

            Method (R22E, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                CBCO = SVAL /* \AOD_.R22E.SVAL */
                MBCB = 0x00D00000
                ASMI (0x9D)
            }

            Method (R22F, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                CBCE = SVAL /* \AOD_.R22F.SVAL */
                MBCB = 0x00E00000
                ASMI (0x9D)
            }

            Method (R230, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                CDVP = SVAL /* \AOD_.R230.SVAL */
                MBCB = 0x00700000
                ASMI (0x9D)
            }

            Method (R231, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                INLM = SVAL /* \AOD_.R231.SVAL */
                MBCB = 0x00100001
                ASMI (0x9D)
            }

            Method (R232, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                INLS = SVAL /* \AOD_.R232.SVAL */
                MBCB = 0x00100002
                ASMI (0x9D)
            }

            Method (R233, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                FCOC = SVAL /* \AOD_.R233.SVAL */
                MBCB = 0x00100003
                ASMI (0x9D)
            }

            Method (R234, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                SVID = SVAL /* \AOD_.R234.SVAL */
                MBCB = 0x00100004
                ASMI (0x9D)
            }

            Method (R235, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                FCLK = SVAL /* \AOD_.R235.SVAL */
                MBCB = 0x00100005
                ASMI (0x9D)
            }

            Method (R301, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MVIO)
                MBVS = 0x04
                VDIO = MVIO /* \AOD_.R301.MVIO */
                MBCB = 0x0100
                ASMI (0x9E)
            }

            Method (R302, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MVTT)
                MBVS = 0x04
                VMTT = MVTT /* \AOD_.R302.MVTT */
                MBCB = 0x0200
                ASMI (0x9E)
            }

            Method (R303, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MVPP)
                MBVS = 0x04
                VMPP = MVPP /* \AOD_.R303.MVPP */
                MBCB = 0x2000
                ASMI (0x9E)
            }

            Method (R401, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MVPP)
                MBVS = 0x04
                MBCB = 0x01000000
                ASMI (0x9E)
            }

            Method (R402, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MVPP)
                MBVS = 0x04
                MBCB = 0x02000000
                ASMI (0x9E)
            }

            Method (R505, 1, NotSerialized)
            {
                MBVS = 0x04
            }

            Name (WQBA, Buffer (0x09D4)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0xC4, 0x09, 0x00, 0x00, 0x5C, 0x34, 0x00, 0x00,  // ....\4..
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0x28, 0xC8, 0x99, 0x00, 0x01, 0x06, 0x18, 0x42,  // (......B
                /* 0020 */  0x10, 0x0F, 0x10, 0x22, 0x21, 0x04, 0x12, 0x01,  // ..."!...
                /* 0028 */  0xA1, 0xC8, 0x2C, 0x0C, 0x86, 0x10, 0x38, 0x2E,  // ..,...8.
                /* 0030 */  0x84, 0x1C, 0x40, 0x48, 0x1C, 0x14, 0x4A, 0x08,  // ..@H..J.
                /* 0038 */  0x84, 0xFA, 0x13, 0xC8, 0xAF, 0x00, 0x84, 0x0E,  // ........
                /* 0040 */  0x05, 0xC8, 0x14, 0x60, 0x50, 0x80, 0x53, 0x04,  // ...`P.S.
                /* 0048 */  0x11, 0xF4, 0x2A, 0xC0, 0xA6, 0x00, 0x93, 0x02,  // ..*.....
                /* 0050 */  0x2C, 0x0A, 0xD0, 0x2E, 0xC0, 0xB2, 0x00, 0xDD,  // ,.......
                /* 0058 */  0x02, 0xA4, 0xC3, 0x12, 0x91, 0xE0, 0x28, 0x31,  // ......(1
                /* 0060 */  0xE0, 0x28, 0x9D, 0xD8, 0xC2, 0x0D, 0x1B, 0xBC,  // .(......
                /* 0068 */  0x50, 0x14, 0xCD, 0x20, 0x4A, 0x82, 0xCA, 0x05,  // P.. J...
                /* 0070 */  0xF8, 0x46, 0x10, 0x78, 0xB9, 0x02, 0x24, 0x4F,  // .F.x..$O
                /* 0078 */  0x40, 0x9A, 0x05, 0x18, 0x16, 0x60, 0x5D, 0x80,  // @....`].
                /* 0080 */  0xEC, 0x21, 0x50, 0xA9, 0x43, 0x40, 0xC9, 0x19,  // .!P.C@..
                /* 0088 */  0x02, 0x6A, 0x00, 0xAD, 0x4E, 0x40, 0xF8, 0x95,  // .j..N@..
                /* 0090 */  0x4E, 0x09, 0x49, 0x10, 0xCE, 0x58, 0xC5, 0xE3,  // N.I..X..
                /* 0098 */  0x6B, 0x16, 0x4D, 0xCF, 0x49, 0xCE, 0x31, 0xE4,  // k.M.I.1.
                /* 00A0 */  0x78, 0x5C, 0xE8, 0x41, 0xF0, 0x50, 0x1A, 0x40,  // x\.A.P.@
                /* 00A8 */  0x98, 0xFC, 0x21, 0x2B, 0x06, 0x0C, 0x4A, 0xC2,  // ..!+..J.
                /* 00B0 */  0x58, 0xA8, 0x8B, 0x51, 0xA3, 0x46, 0xCA, 0x06,  // X..Q.F..
                /* 00B8 */  0x64, 0x88, 0xD2, 0x46, 0x8D, 0x1E, 0xD0, 0xF9,  // d..F....
                /* 00C0 */  0x1D, 0xC9, 0xD9, 0x1D, 0xDD, 0x91, 0x24, 0x30,  // ......$0
                /* 00C8 */  0xEA, 0x31, 0x1D, 0x63, 0x61, 0x33, 0x12, 0x6A,  // .1.ca3.j
                /* 00D0 */  0x8C, 0xE6, 0xA0, 0x48, 0xB8, 0x41, 0xA3, 0x25,  // ...H.A.%
                /* 00D8 */  0xC2, 0x6A, 0x5C, 0xB1, 0xCF, 0xCC, 0xC2, 0x87,  // .j\.....
                /* 00E0 */  0x25, 0x8C, 0x23, 0x38, 0xB0, 0x83, 0xB5, 0x68,  // %.#8...h
                /* 00E8 */  0x18, 0xA1, 0x15, 0x04, 0xA7, 0x41, 0x1C, 0x45,  // .....A.E
                /* 00F0 */  0x94, 0x30, 0x0C, 0xCF, 0x98, 0x81, 0x8E, 0x92,  // .0......
                /* 00F8 */  0x21, 0x85, 0x09, 0x7A, 0x02, 0x41, 0x4E, 0x9E,  // !..z.AN.
                /* 0100 */  0x61, 0x19, 0xE2, 0x0C, 0x38, 0x56, 0x8C, 0x50,  // a...8V.P
                /* 0108 */  0x21, 0x31, 0x03, 0x09, 0xFE, 0xFF, 0x3F, 0x81,  // !1....?.
                /* 0110 */  0xAE, 0x31, 0xE4, 0x19, 0x88, 0xDC, 0x03, 0x4E,  // .1.....N
                /* 0118 */  0x20, 0x48, 0xF4, 0x28, 0xC1, 0x8D, 0x6B, 0x54,  //  H.(..kT
                /* 0120 */  0x36, 0xA6, 0xB3, 0xC1, 0x0D, 0xCC, 0x04, 0x71,  // 6......q
                /* 0128 */  0x0E, 0x0F, 0x23, 0x03, 0x42, 0x13, 0x88, 0x1F,  // ..#.B...
                /* 0130 */  0x3B, 0x7C, 0x02, 0xBB, 0x3F, 0x0E, 0x48, 0x21,  // ;|..?.H!
                /* 0138 */  0x82, 0x2E, 0x04, 0x67, 0x5A, 0xA3, 0x00, 0x6B,  // ...gZ..k
                /* 0140 */  0x67, 0x07, 0xD9, 0x82, 0xD0, 0x59, 0x20, 0x56,  // g....Y V
                /* 0148 */  0x63, 0x28, 0x82, 0x88, 0x10, 0x34, 0x8A, 0xF1,  // c(...4..
                /* 0150 */  0x22, 0x84, 0x0A, 0x11, 0x25, 0xEA, 0x39, 0x07,  // "...%.9.
                /* 0158 */  0xA9, 0x4D, 0x80, 0x32, 0x10, 0xA1, 0x05, 0x33,  // .M.2...3
                /* 0160 */  0x02, 0xB3, 0x7F, 0x06, 0x60, 0x16, 0x20, 0xFE,  // ....`. .
                /* 0168 */  0x08, 0x2C, 0xE1, 0x44, 0x20, 0x23, 0xA3, 0xA1,  // .,.D #..
                /* 0170 */  0x87, 0x05, 0x9F, 0x04, 0xD8, 0x01, 0xC1, 0xF3,  // ........
                /* 0178 */  0x39, 0x35, 0x13, 0x38, 0x30, 0x84, 0x78, 0x25,  // 95.80.x%
                /* 0180 */  0x40, 0xD4, 0xD1, 0x82, 0x12, 0x58, 0xCA, 0xD1,  // @....X..
                /* 0188 */  0x80, 0xD8, 0x1E, 0x98, 0xEE, 0x01, 0x47, 0x78,  // ......Gx
                /* 0190 */  0xEE, 0xBE, 0x1C, 0x9C, 0x9A, 0x7F, 0x1A, 0x9E,  // ........
                /* 0198 */  0xE6, 0x43, 0x02, 0x66, 0x88, 0x1E, 0xEB, 0x41,  // .C.f...A
                /* 01A0 */  0x04, 0x3C, 0x44, 0x76, 0x4A, 0x30, 0x20, 0xDE,  // .<DvJ0 .
                /* 01A8 */  0xFB, 0xB5, 0x80, 0x8C, 0xE0, 0x25, 0xC1, 0x80,  // .....%..
                /* 01B0 */  0x9E, 0xC4, 0x03, 0x02, 0x58, 0x0E, 0x1A, 0x07,  // ....X...
                /* 01B8 */  0x7E, 0x42, 0x15, 0xDF, 0x01, 0xE8, 0x91, 0x80,  // ~B......
                /* 01C0 */  0xCD, 0x28, 0xBE, 0x09, 0xCA, 0x3A, 0x3E, 0xA0,  // .(...:>.
                /* 01C8 */  0xE7, 0x1C, 0xED, 0xD9, 0xE1, 0x65, 0xA1, 0xD9,  // .....e..
                /* 01D0 */  0x2B, 0x06, 0x21, 0x78, 0x0D, 0xF0, 0x4D, 0xC1,  // +.!x..M.
                /* 01D8 */  0xA7, 0x11, 0x8B, 0x5A, 0x9D, 0x9C, 0xAC, 0xCA,  // ...Z....
                /* 01E0 */  0x23, 0xA6, 0xE0, 0x1E, 0x02, 0x97, 0x01, 0xA7,  // #.......
                /* 01E8 */  0xA1, 0x7B, 0xBC, 0xE0, 0x50, 0x30, 0x5E, 0xFA,  // .{..P0^.
                /* 01F0 */  0xFF, 0x1F, 0x2F, 0xB8, 0xE7, 0x75, 0xBC, 0x60,  // ../..u.`
                /* 01F8 */  0x39, 0x26, 0x3C, 0x6C, 0x54, 0x05, 0xA1, 0x41,  // 9&<lT..A
                /* 0200 */  0x1C, 0x70, 0xF3, 0x03, 0x20, 0x57, 0x0B, 0x8F,  // .p.. W..
                /* 0208 */  0x98, 0xCD, 0xE5, 0xAC, 0xD8, 0x11, 0x85, 0x0F,  // ........
                /* 0210 */  0x8F, 0x0F, 0xC3, 0x23, 0x7E, 0x6F, 0x28, 0x16,  // ...#~o(.
                /* 0218 */  0x44, 0x02, 0x21, 0x74, 0x66, 0x38, 0x72, 0xB0,  // D.!tf8r.
                /* 0220 */  0x7C, 0x71, 0x9E, 0x20, 0x12, 0x58, 0xDA, 0xD0,  // |q. .X..
                /* 0228 */  0xD1, 0x43, 0xF6, 0xA8, 0x5E, 0x62, 0x8C, 0xF1,  // .C..^b..
                /* 0230 */  0x44, 0x60, 0xD4, 0x53, 0x3A, 0x7A, 0xF0, 0x01,  // D`.S:z..
                /* 0238 */  0x7A, 0xF4, 0x80, 0xCF, 0xFF, 0xFF, 0xE8, 0x71,  // z......q
                /* 0240 */  0x92, 0xC6, 0x2C, 0x11, 0xA3, 0x47, 0x9F, 0x23,  // ..,..G.#
                /* 0248 */  0x3C, 0x9D, 0xB7, 0x1F, 0x7E, 0x14, 0x49, 0xE0,  // <...~.I.
                /* 0250 */  0xF8, 0x10, 0x1A, 0x3D, 0x78, 0x4E, 0x3F, 0x1E,  // ...=xN?.
                /* 0258 */  0x3D, 0xF8, 0xC7, 0xE8, 0xD1, 0x83, 0x67, 0x0C,  // =.....g.
                /* 0260 */  0xE7, 0x86, 0xBB, 0xDA, 0x78, 0xE4, 0x60, 0x1F,  // ....x.`.
                /* 0268 */  0x2F, 0x5E, 0xDE, 0x71, 0x0B, 0x14, 0x3E, 0x67,  // /^.q..>g
                /* 0270 */  0x4F, 0x06, 0xF0, 0x1E, 0x84, 0x3B, 0x6F, 0x01,  // O....;o.
                /* 0278 */  0x97, 0x11, 0x70, 0xC1, 0x4F, 0x1D, 0x9F, 0xAB,  // ..p.O...
                /* 0280 */  0xA8, 0x44, 0x18, 0xD4, 0xD1, 0x0A, 0x5C, 0xFF,  // .D....\.
                /* 0288 */  0xFF, 0xA3, 0x15, 0xC0, 0x84, 0xFB, 0xC3, 0xAB,  // ........
                /* 0290 */  0xD5, 0xA3, 0x15, 0xD8, 0x43, 0xBE, 0x24, 0xF4,  // ....C.$.
                /* 0298 */  0x23, 0x70, 0x6C, 0x08, 0x39, 0x39, 0x5A, 0xA1,  // #pl.99Z.
                /* 02A0 */  0x4E, 0x46, 0xB8, 0xA0, 0x07, 0x2B, 0xA0, 0x7B,  // NF...+.{
                /* 02A8 */  0xD0, 0xC0, 0x1D, 0x0F, 0xE0, 0xFC, 0xFF, 0x8F,  // ........
                /* 02B0 */  0x07, 0x7C, 0x60, 0xFC, 0xF4, 0x02, 0x3E, 0x11,  // .|`...>.
                /* 02B8 */  0x47, 0x21, 0x9F, 0xCA, 0xA0, 0x9F, 0x20, 0x3D,  // G!.... =
                /* 02C0 */  0x5A, 0xF0, 0x1C, 0xAB, 0x80, 0xC3, 0xA9, 0x0C,  // Z.......
                /* 02C8 */  0x38, 0x0C, 0x19, 0x7C, 0xF2, 0x0E, 0x53, 0xE8,  // 8..|..S.
                /* 02D0 */  0x03, 0x89, 0xA7, 0x50, 0xEB, 0x2D, 0x84, 0xC0,  // ...P.-..
                /* 02D8 */  0x1E, 0x90, 0x8F, 0x12, 0x41, 0x4E, 0x24, 0xC2,  // ....AN$.
                /* 02E0 */  0xB9, 0xF8, 0x38, 0x05, 0x98, 0xF8, 0xFF, 0x8F,  // ..8.....
                /* 02E8 */  0x1A, 0x7F, 0xCB, 0x60, 0xD7, 0x29, 0x30, 0x9C,  // ...`.)0.
                /* 02F0 */  0x82, 0xE0, 0x4D, 0xCA, 0xE3, 0x07, 0xDF, 0xB1,  // ..M.....
                /* 02F8 */  0x07, 0x77, 0x0A, 0x82, 0xE7, 0x71, 0x48, 0x42,  // .w...qHB
                /* 0300 */  0x3E, 0x8F, 0x97, 0x00, 0xDC, 0x45, 0x08, 0x7F,  // >....E..
                /* 0308 */  0x10, 0x02, 0x3E, 0xB2, 0x16, 0x4A, 0x4F, 0x41,  // ..>..JOA
                /* 0310 */  0x16, 0x02, 0x83, 0x3A, 0x08, 0x01, 0x2E, 0xFF,  // ...:....
                /* 0318 */  0xFF, 0x07, 0x21, 0x60, 0xE7, 0xED, 0xB6, 0xA1,  // ..!`....
                /* 0320 */  0x6B, 0x90, 0x6F, 0x03, 0x4F, 0x03, 0xAF, 0x11,  // k.o.O...
                /* 0328 */  0x51, 0x1E, 0x84, 0x7C, 0x13, 0x7A, 0x21, 0x88,  // Q..|.z!.
                /* 0330 */  0x10, 0xE5, 0x78, 0x4F, 0x20, 0xC2, 0xD3, 0x90,  // ..xO ...
                /* 0338 */  0x27, 0x1C, 0x26, 0xDC, 0xC9, 0x46, 0x79, 0x69,  // '.&..Fyi
                /* 0340 */  0x08, 0x63, 0xE8, 0x58, 0x81, 0x22, 0xC7, 0x0F,  // .c.X."..
                /* 0348 */  0xE1, 0x4B, 0x85, 0x0F, 0x42, 0x2C, 0xCA, 0x79,  // .K..B,.y
                /* 0350 */  0x40, 0x3F, 0x02, 0x9F, 0x3F, 0x6C, 0xE4, 0x2C,  // @?..?l.,
                /* 0358 */  0x82, 0x3A, 0x09, 0xF8, 0xD0, 0xE1, 0x41, 0x3D,  // .:....A=
                /* 0360 */  0x21, 0x60, 0x42, 0x9F, 0xEC, 0x40, 0x75, 0x14,  // !`B..@u.
                /* 0368 */  0x02, 0xCE, 0x07, 0x10, 0x78, 0x21, 0x0F, 0xAD,  // ....x!..
                /* 0370 */  0xA0, 0x3B, 0x92, 0x83, 0xE3, 0x50, 0x17, 0x39,  // .;...P.9
                /* 0378 */  0xEE, 0x03, 0x0D, 0xF6, 0xEC, 0xC1, 0xFF, 0xFF,  // ........
                /* 0380 */  0x67, 0x0F, 0xE0, 0x21, 0xED, 0xE0, 0x81, 0x12,  // g..!....
                /* 0388 */  0x73, 0xF6, 0x00, 0x48, 0x73, 0xD9, 0x78, 0xF7,  // s..Hs.x.
                /* 0390 */  0xF0, 0xA5, 0xE7, 0x4C, 0x9F, 0x3D, 0x3C, 0xD7,  // ...L.=<.
                /* 0398 */  0x77, 0x0E, 0x1F, 0xEB, 0x8C, 0x62, 0x88, 0xF7,  // w....b..
                /* 03A0 */  0x0F, 0x1F, 0x0A, 0xA2, 0x44, 0x3C, 0xD7, 0x28,  // ....D<.(
                /* 03A8 */  0x87, 0x1C, 0x25, 0x6E, 0x84, 0x30, 0xCF, 0x77,  // ..%n.0.w
                /* 03B0 */  0xC6, 0x89, 0x11, 0x2A, 0x02, 0x03, 0x7D, 0xF6,  // ...*..}.
                /* 03B8 */  0x60, 0x71, 0xCE, 0x1E, 0x50, 0xB1, 0xCF, 0xE6,  // `q..P...
                /* 03C0 */  0x8D, 0x23, 0xC2, 0x6B, 0xC0, 0x39, 0xFE, 0xFF,  // .#.k.9..
                /* 03C8 */  0xCF, 0xC7, 0x67, 0x0F, 0xC0, 0x9B, 0x94, 0xB7,  // ..g.....
                /* 03D0 */  0x9B, 0xCE, 0x1E, 0xE0, 0x3A, 0xC2, 0xE2, 0xCE,  // ....:...
                /* 03D8 */  0x1E, 0xF0, 0xC6, 0x8D, 0x3D, 0x7D, 0x00, 0x3B,  // ....=}.;
                /* 03E0 */  0x19, 0xAF, 0x01, 0x1F, 0x3D, 0x68, 0xF0, 0x03,  // ....=h..
                /* 03E8 */  0x2A, 0xD0, 0xFE, 0xFF, 0x1F, 0x50, 0x01, 0x97,  // *....P..
                /* 03F0 */  0x87, 0x8F, 0x07, 0x54, 0xB0, 0x4B, 0x7F, 0x0E,  // ...T.K..
                /* 03F8 */  0xE8, 0x53, 0xE0, 0xE0, 0x07, 0x54, 0xF4, 0x70,  // .S...T.p
                /* 0400 */  0x7C, 0x9C, 0xC3, 0x9C, 0x50, 0x01, 0x9B, 0xFF,  // |...P...
                /* 0408 */  0x7F, 0x02, 0x1F, 0x6E, 0xE1, 0x00, 0x87, 0xF4,  // ...n....
                /* 0410 */  0x58, 0xC1, 0x76, 0x3E, 0x05, 0x0E, 0x63, 0x05,  // X.v>..c.
                /* 0418 */  0xCF, 0xC0, 0xF8, 0x58, 0x81, 0xC5, 0xC4, 0x9E,  // ...X....
                /* 0420 */  0x3D, 0x8E, 0x15, 0x6C, 0xA7, 0x52, 0xE0, 0x30,  // =..l.R.0
                /* 0428 */  0x56, 0x30, 0x0D, 0x8C, 0x8D, 0x15, 0x7C, 0x12,  // V0....|.
                /* 0430 */  0xCE, 0xC5, 0xE8, 0x31, 0xFA, 0xDA, 0x72, 0x40,  // ...1..r@
                /* 0438 */  0x9E, 0x47, 0x84, 0xA7, 0x7C, 0xF6, 0xFF, 0x27,  // .G..|..'
                /* 0440 */  0x70, 0xDC, 0xE1, 0x82, 0xEA, 0x5C, 0xE3, 0xE1,  // p....\..
                /* 0448 */  0x82, 0x5F, 0xDE, 0x70, 0x41, 0x33, 0x36, 0x38,  // ._.pA368
                /* 0450 */  0x23, 0x06, 0xDF, 0xD1, 0xC9, 0xE7, 0x58, 0xB0,  // #.....X.
                /* 0458 */  0x5C, 0x22, 0xD8, 0x59, 0x80, 0x4D, 0x07, 0x7F,  // \".Y.M..
                /* 0460 */  0x95, 0xC5, 0x9F, 0x99, 0x80, 0x51, 0x18, 0x33,  // .....Q.3
                /* 0468 */  0x20, 0x2C, 0xC0, 0xE9, 0x40, 0xA2, 0x5E, 0x04,  //  ,..@.^.
                /* 0470 */  0x14, 0xC6, 0x87, 0x1A, 0x9F, 0x99, 0xE0, 0x4A,  // .......J
                /* 0478 */  0x82, 0x43, 0x9D, 0xD3, 0xD8, 0xE9, 0xF8, 0xE4,  // .C......
                /* 0480 */  0x4E, 0xE4, 0xF5, 0xC0, 0x93, 0x7B, 0x78, 0x82,  // N....{x.
                /* 0488 */  0x71, 0x4C, 0xF0, 0xB4, 0x4E, 0xCA, 0xDA, 0x8F,  // qL..N...
                /* 0490 */  0x40, 0xE4, 0xFF, 0x7F, 0xCD, 0x62, 0x67, 0x05,  // @....bg.
                /* 0498 */  0x8E, 0xC6, 0x4F, 0x52, 0x60, 0xBD, 0x30, 0xF8,  // ..OR`.0.
                /* 04A0 */  0x98, 0x00, 0x8E, 0x59, 0xBF, 0x46, 0x61, 0xB0,  // ...Y.Fa.
                /* 04A8 */  0x42, 0xC5, 0x68, 0xF4, 0x1A, 0x44, 0x40, 0x8F,  // B.h..D@.
                /* 04B0 */  0xAF, 0xAF, 0x61, 0xE8, 0x4E, 0x60, 0xA8, 0x88,  // ..a.N`..
                /* 04B8 */  0x21, 0xDE, 0x0C, 0xEC, 0xF2, 0x3C, 0x84, 0x3C,  // !....<.<
                /* 04C0 */  0x34, 0x81, 0x0B, 0xFB, 0xA1, 0x09, 0xEC, 0xA1,  // 4.......
                /* 04C8 */  0xCE, 0x64, 0x34, 0xD2, 0x68, 0x50, 0xE7, 0x74,  // .d4.hP.t
                /* 04D0 */  0x7E, 0x20, 0x78, 0xE4, 0xF2, 0xB1, 0xC3, 0x20,  // ~ x.... 
                /* 04D8 */  0x27, 0x7A, 0x5A, 0x8F, 0x0B, 0x4F, 0x03, 0x1E,  // 'zZ..O..
                /* 04E0 */  0x37, 0xBB, 0x26, 0xF8, 0x83, 0xE0, 0xE3, 0x01,  // 7.&.....
                /* 04E8 */  0xFE, 0x00, 0x11, 0xF0, 0x44, 0x9F, 0x3C, 0x60,  // ....D.<`
                /* 04F0 */  0x9D, 0x40, 0xF0, 0x47, 0x0D, 0xF8, 0xE3, 0xF1,  // .@.G....
                /* 04F8 */  0x31, 0xC0, 0xC7, 0x0E, 0x2E, 0x7F, 0x10, 0xA8,  // 1.......
                /* 0500 */  0xA3, 0x22, 0x1F, 0xE9, 0x69, 0xBD, 0x0D, 0xF8,  // ."..i...
                /* 0508 */  0x90, 0x70, 0x58, 0xEC, 0xCC, 0xE1, 0x93, 0x11,  // .pX.....
                /* 0510 */  0xFE, 0xFF, 0x3F, 0x1E, 0x70, 0x1E, 0xDB, 0x1F,  // ..?.p...
                /* 0518 */  0x32, 0x7C, 0x65, 0xF0, 0x7C, 0x7D, 0xA2, 0x05,  // 2|e.|}..
                /* 0520 */  0xCB, 0xAD, 0xC3, 0x87, 0x86, 0x50, 0x4F, 0x1D,  // .....PO.
                /* 0528 */  0x9E, 0xC1, 0xFB, 0x85, 0x4F, 0x20, 0xC0, 0x44,  // ....O .D
                /* 0530 */  0xAE, 0x16, 0x88, 0x1E, 0x8E, 0x19, 0x5E, 0xA7,  // ......^.
                /* 0538 */  0x6C, 0x9C, 0x35, 0xE9, 0x79, 0xC0, 0x72, 0x0F,  // l.5.y.r.
                /* 0540 */  0x08, 0xBA, 0x46, 0x60, 0x6E, 0x10, 0x41, 0x3C,  // ..F`n.A<
                /* 0548 */  0xFC, 0x37, 0x0A, 0x7E, 0x68, 0x14, 0xA0, 0x0E,  // .7.~h...
                /* 0550 */  0x66, 0x86, 0xB0, 0x34, 0x0A, 0x09, 0x83, 0xD0,  // f..4....
                /* 0558 */  0x88, 0x7C, 0xF4, 0x20, 0x70, 0x14, 0xC4, 0xA3,  // .|. p...
                /* 0560 */  0x77, 0xCC, 0xE3, 0x13, 0x7A, 0xA8, 0x3E, 0x06,  // w...z.>.
                /* 0568 */  0x78, 0x12, 0xB8, 0x50, 0x07, 0x1F, 0x7A, 0x5C,  // x..P..z\
                /* 0570 */  0xC0, 0xE3, 0x3D, 0x10, 0xFB, 0x1C, 0xC0, 0xC6,  // ..=.....
                /* 0578 */  0x8E, 0x3B, 0x79, 0xC0, 0x1D, 0x07, 0xFE, 0xC4,  // .;y.....
                /* 0580 */  0x89, 0x3F, 0xAB, 0xF1, 0x53, 0x0F, 0x38, 0x8F,  // .?..S.8.
                /* 0588 */  0x9C, 0xB8, 0xFF, 0xFF, 0xE1, 0x00, 0x1E, 0x90,  // ........
                /* 0590 */  0xEF, 0x03, 0x56, 0x7A, 0x26, 0xA0, 0x73, 0x08,  // ..Vz&.s.
                /* 0598 */  0x11, 0x26, 0x9A, 0xE1, 0x31, 0x81, 0x8F, 0x4F,  // .&..1..O
                /* 05A0 */  0xF4, 0x44, 0xEA, 0x71, 0xF1, 0x51, 0xFA, 0x0C,  // .D.q.Q..
                /* 05A8 */  0xC3, 0xB0, 0x1F, 0x51, 0x7C, 0x4C, 0x3C, 0xC0,  // ...Q|L<.
                /* 05B0 */  0x97, 0x83, 0x67, 0x3E, 0x0C, 0xAC, 0xC7, 0xCD,  // ..g>....
                /* 05B8 */  0x61, 0x8D, 0x16, 0xF6, 0x70, 0x9F, 0x21, 0x7C,  // a...p.!|
                /* 05C0 */  0xFF, 0xF0, 0xCC, 0x7C, 0x6D, 0xF4, 0xC9, 0x03,  // ...|m...
                /* 05C8 */  0x2C, 0x47, 0x29, 0xF8, 0x43, 0xC5, 0x9D, 0x05,  // ,G).C...
                /* 05D0 */  0xE0, 0x1E, 0x98, 0xD8, 0x1C, 0x9E, 0x06, 0xF0,  // ........
                /* 05D8 */  0x32, 0x0F, 0x11, 0xA8, 0x81, 0x58, 0xE4, 0x02,  // 2....X..
                /* 05E0 */  0x75, 0x5C, 0xF1, 0x48, 0x4C, 0x60, 0x79, 0x07,  // u\.HL`y.
                /* 05E8 */  0x08, 0xD4, 0xF9, 0xC1, 0xB2, 0x0E, 0x10, 0x28,  // .......(
                /* 05F0 */  0x21, 0x70, 0x14, 0xC4, 0x07, 0x08, 0x1F, 0xD3,  // !p......
                /* 05F8 */  0x6D, 0xE4, 0x00, 0x81, 0x3E, 0xC0, 0x30, 0x88,  // m...>.0.
                /* 0600 */  0x87, 0x4E, 0x13, 0xF8, 0x28, 0xE3, 0x03, 0x04,  // .N..(...
                /* 0608 */  0xF0, 0x18, 0x07, 0xFE, 0x00, 0x01, 0xEF, 0xFF,  // ........
                /* 0610 */  0x4F, 0xE0, 0x13, 0x30, 0xF0, 0x39, 0x3F, 0x80,  // O..0.9?.
                /* 0618 */  0xE3, 0x24, 0xEA, 0xF3, 0x03, 0xB8, 0x4E, 0x00,  // .$....N.
                /* 0620 */  0x3E, 0x3F, 0x00, 0xD7, 0x01, 0x3E, 0x0A, 0x80,  // >?...>..
                /* 0628 */  0xE5, 0x4C, 0xC6, 0xE6, 0xF0, 0x52, 0x73, 0xE6,  // .L...Rs.
                /* 0630 */  0xAF, 0x4C, 0x3E, 0xF1, 0x62, 0x4E, 0xBD, 0x5C,  // .L>.bN.\
                /* 0638 */  0xD7, 0x08, 0x48, 0xC4, 0x33, 0x04, 0x6A, 0x10,  // ..H.3.j.
                /* 0640 */  0x3E, 0x98, 0xFB, 0x38, 0xC1, 0x7C, 0x1E, 0x82,  // >..8.|..
                /* 0648 */  0xA4, 0x1A, 0x45, 0xF0, 0xBE, 0x15, 0xB0, 0x08,  // ..E.....
                /* 0650 */  0xC7, 0x08, 0x94, 0x78, 0x0A, 0x49, 0x3F, 0x46,  // ...x.I?F
                /* 0658 */  0xA0, 0xC4, 0xC2, 0x51, 0x10, 0x8F, 0xDA, 0x07,  // ...Q....
                /* 0660 */  0x09, 0xDB, 0x38, 0xDB, 0xA2, 0x0F, 0xC3, 0xFC,  // ..8.....
                /* 0668 */  0x28, 0xC0, 0x4F, 0x11, 0x70, 0xFF, 0xFF, 0xB3,  // (.O.p...
                /* 0670 */  0xF0, 0x29, 0x0C, 0x77, 0xF4, 0x00, 0xC7, 0x45,  // .).w...E
                /* 0678 */  0xEC, 0xD0, 0xCE, 0xEE, 0x21, 0x21, 0x4A, 0xCC,  // ....!!J.
                /* 0680 */  0x33, 0x78, 0xF3, 0x33, 0x60, 0xD8, 0x68, 0x1E,  // 3x.3`.h.
                /* 0688 */  0x23, 0x0E, 0xE7, 0x1C, 0x7D, 0x51, 0xF3, 0x9C,  // #...}Q..
                /* 0690 */  0x62, 0x3D, 0xBE, 0xF1, 0x23, 0x05, 0x5C, 0x14,  // b=..#.\.
                /* 0698 */  0x1F, 0x29, 0xE0, 0xCE, 0xE4, 0x3C, 0x30, 0xEA,  // .)...<0.
                /* 06A0 */  0xC6, 0x22, 0x78, 0x5F, 0x0B, 0xF1, 0x07, 0x0B,  // ."x_....
                /* 06A8 */  0xE0, 0x71, 0x5C, 0xF2, 0xC1, 0x02, 0x5C, 0x90,  // .q\...\.
                /* 06B0 */  0x3E, 0x58, 0x00, 0xD7, 0xF3, 0x81, 0x4F, 0x07,  // >X....O.
                /* 06B8 */  0x60, 0xBD, 0x90, 0xF1, 0xFB, 0x01, 0xFB, 0xFF,  // `.......
                /* 06C0 */  0xDF, 0x0F, 0x70, 0x27, 0x0C, 0x18, 0xE7, 0x03,  // ..p'....
                /* 06C8 */  0xCC, 0x0D, 0xC3, 0xB1, 0x56, 0xAA, 0x13, 0x06,  // ....V...
                /* 06D0 */  0x2E, 0xD6, 0x83, 0x42, 0x03, 0x61, 0xC3, 0x7B,  // ...B.a.{
                /* 06D8 */  0xFE, 0x79, 0x32, 0xE4, 0x87, 0x19, 0x16, 0x05,  // .y2.....
                /* 06E0 */  0x4E, 0x47, 0x0B, 0x9F, 0x2C, 0x1C, 0x82, 0x42,  // NG..,..B
                /* 06E8 */  0x07, 0x31, 0x9F, 0x30, 0xB8, 0x98, 0x13, 0x06,  // .1.0....
                /* 06F0 */  0x05, 0x31, 0xA0, 0x93, 0x9E, 0xC3, 0xD0, 0xA7,  // .1......
                /* 06F8 */  0x4D, 0x1F, 0x1B, 0xD8, 0xED, 0xDE, 0xF7, 0x0B,  // M.......
                /* 0700 */  0xCF, 0xC5, 0x73, 0xE6, 0x78, 0x3E, 0x2F, 0x33,  // ..s.x>/3
                /* 0708 */  0xD4, 0x37, 0x13, 0xF0, 0x5C, 0x29, 0xD8, 0x71,  // .7..\).q
                /* 0710 */  0x1E, 0x73, 0x9B, 0x64, 0x07, 0x4E, 0x76, 0x2C,  // .s.d.Nv,
                /* 0718 */  0x30, 0xCA, 0xF1, 0xBE, 0x16, 0x5A, 0xCD, 0x5D,  // 0....Z.]
                /* 0720 */  0x01, 0x35, 0x23, 0x0C, 0x81, 0x07, 0xEC, 0x93,  // .5#.....
                /* 0728 */  0x18, 0x98, 0xF4, 0xDD, 0x28, 0x40, 0x8E, 0xCE,  // ....(@..
                /* 0730 */  0x85, 0x8E, 0x1E, 0x75, 0x00, 0xF0, 0xD1, 0x8E,  // ...u....
                /* 0738 */  0x8F, 0xDE, 0x47, 0x6C, 0x1F, 0x57, 0xE0, 0x1E,  // ..Gl.W..
                /* 0740 */  0xEE, 0x7C, 0x86, 0x02, 0xC7, 0xFF, 0xFF, 0x0C,  // .|......
                /* 0748 */  0x05, 0x5C, 0x06, 0xE6, 0x19, 0x3E, 0xA1, 0x80,  // .\...>..
                /* 0750 */  0xEB, 0xFE, 0xC0, 0x2F, 0xAA, 0x98, 0x89, 0x3C,  // .../...<
                /* 0758 */  0x0B, 0xC3, 0x38, 0xA5, 0x00, 0x8F, 0xD1, 0xFB,  // ..8.....
                /* 0760 */  0x94, 0x02, 0xAE, 0x03, 0x80, 0x4F, 0x29, 0xC0,  // .....O).
                /* 0768 */  0x75, 0x8E, 0x0F, 0x05, 0x60, 0x39, 0xA3, 0x44,  // u...`9.D
                /* 0770 */  0xF1, 0xFD, 0xD7, 0x13, 0xB1, 0xF1, 0xE1, 0xD3,  // ........
                /* 0778 */  0x0B, 0x8A, 0xC7, 0xF2, 0x6C, 0xCE, 0xCE, 0x94,  // ....l...
                /* 0780 */  0x3A, 0x9B, 0xA0, 0xA3, 0xBD, 0x1E, 0x34, 0xE8,  // :.....4.
                /* 0788 */  0x07, 0x15, 0xCF, 0x3E, 0xFC, 0xF1, 0x45, 0x78,  // ...>..Ex
                /* 0790 */  0x3E, 0x35, 0xF0, 0xFF, 0x3F, 0x81, 0xE3, 0x9C,  // >5..?...
                /* 0798 */  0x4D, 0x50, 0x41, 0x28, 0x74, 0xEC, 0xF4, 0x71,  // MPA(t..q
                /* 07A0 */  0x82, 0x4B, 0x3A, 0x4E, 0x50, 0x10, 0x03, 0x3A,  // .K:NP..:
                /* 07A8 */  0xEF, 0x11, 0xCF, 0xC3, 0xA0, 0xC7, 0x09, 0x7E,  // .......~
                /* 07B0 */  0xEA, 0xF3, 0x2D, 0xE1, 0x38, 0x9E, 0x40, 0x12,  // ..-.8.@.
                /* 07B8 */  0xCC, 0x77, 0x12, 0xA0, 0x97, 0x13, 0x78, 0xE7,  // .w....x.
                /* 07C0 */  0x75, 0xF0, 0x8C, 0xC2, 0x3B, 0x39, 0x0B, 0x86,  // u...;9..
                /* 07C8 */  0xF0, 0x66, 0xCD, 0x8E, 0x13, 0xF8, 0xCB, 0xC1,  // .f......
                /* 07D0 */  0xB3, 0xC2, 0x83, 0x3A, 0xBF, 0x9E, 0xC0, 0xBC,  // ...:....
                /* 07D8 */  0xE7, 0x81, 0xEB, 0x78, 0x02, 0x2C, 0x64, 0x1E,  // ...x.,d.
                /* 07E0 */  0x00, 0x50, 0xC7, 0x46, 0x1F, 0x1C, 0xF9, 0x01,  // .P.F....
                /* 07E8 */  0xC0, 0xA1, 0x8F, 0x27, 0xE8, 0x99, 0xF8, 0x58,  // ...'...X
                /* 07F0 */  0xF4, 0x54, 0xE2, 0x0B, 0x00, 0x3F, 0xBB, 0xE9,  // .T...?..
                /* 07F8 */  0x7C, 0x02, 0x8A, 0x73, 0x26, 0x78, 0xC6, 0xC1,  // |..s&x..
                /* 0800 */  0xAE, 0x00, 0xF8, 0x33, 0x00, 0xE6, 0xFF, 0x7F,  // ...3....
                /* 0808 */  0x42, 0x81, 0x73, 0x24, 0x03, 0xDF, 0x44, 0x7C,  // B.s$..D|
                /* 0810 */  0xAA, 0x38, 0x10, 0xEC, 0x49, 0x16, 0x78, 0xC3,  // .8..I.x.
                /* 0818 */  0xF2, 0x93, 0x2C, 0xE0, 0xE3, 0x36, 0x82, 0x9D,  // ..,..6..
                /* 0820 */  0xC5, 0x33, 0x09, 0x23, 0x18, 0xF9, 0x68, 0x82,  // .3.#..h.
                /* 0828 */  0x3A, 0x22, 0x3B, 0xE8, 0x29, 0x0C, 0x31, 0xCE,  // :";.).1.
                /* 0830 */  0xC7, 0x0A, 0x63, 0x44, 0x2E, 0x7E, 0xD4, 0x9A,  // ..cD.~..
                /* 0838 */  0x8C, 0xCF, 0x66, 0xBE, 0xAC, 0xB3, 0xC3, 0x0F,  // ..f.....
                /* 0840 */  0x8E, 0x60, 0xA0, 0x03, 0x0A, 0xEA, 0x38, 0xE6,  // .`....8.
                /* 0848 */  0xB3, 0x18, 0xB8, 0xFE, 0xFF, 0x67, 0x31, 0x80,  // .....g1.
                /* 0850 */  0x07, 0x67, 0x77, 0x8F, 0x9E, 0x1F, 0xDB, 0x39,  // .gw....9
                /* 0858 */  0x88, 0x47, 0xEF, 0xF0, 0x67, 0x31, 0xE8, 0x61,  // .G..g1.a
                /* 0860 */  0xCF, 0x62, 0x40, 0x5B, 0xF0, 0x59, 0x0C, 0x94,  // .b@[.Y..
                /* 0868 */  0xB7, 0x08, 0xFC, 0xFF, 0xFF, 0x16, 0x81, 0x3B,  // .......;
                /* 0870 */  0x83, 0x02, 0xAF, 0xB5, 0xF9, 0x84, 0x02, 0xAE,  // ........
                /* 0878 */  0x3B, 0x83, 0x4F, 0x28, 0xC0, 0xF5, 0x08, 0x80,  // ;.O(....
                /* 0880 */  0x3B, 0x83, 0x82, 0xE3, 0x04, 0xC0, 0x7C, 0xDD,  // ;.....|.
                /* 0888 */  0x00, 0x28, 0xC8, 0x23, 0x00, 0xFE, 0x0A, 0xEF,  // .(.#....
                /* 0890 */  0x83, 0x09, 0x2E, 0xDE, 0x49, 0x05, 0xC5, 0xE1,  // ....I...
                /* 0898 */  0x78, 0x27, 0x15, 0xC4, 0x54, 0x22, 0xBF, 0xB5,  // x'..T"..
                /* 08A0 */  0x78, 0x02, 0xE1, 0x0F, 0x2E, 0xCE, 0xFB, 0x19,  // x.......
                /* 08A8 */  0x3F, 0x95, 0xC1, 0x10, 0x75, 0xB0, 0x40, 0xC9,  // ?...u.@.
                /* 08B0 */  0x38, 0x58, 0x50, 0x10, 0x03, 0x3A, 0xE3, 0x29,  // 8XP..:.)
                /* 08B8 */  0x05, 0x7D, 0x2A, 0xE3, 0x97, 0x11, 0x0F, 0x2C,  // .}*....,
                /* 08C0 */  0xC1, 0x4C, 0xD7, 0x14, 0xA8, 0xFF, 0x7F, 0x64,  // .L.....d
                /* 08C8 */  0x5F, 0x40, 0x70, 0x03, 0x86, 0x0B, 0xF6, 0x20,  // _@p.... 
                /* 08D0 */  0x61, 0x84, 0xD7, 0x64, 0xCF, 0x03, 0x73, 0x44,  // a..d..sD
                /* 08D8 */  0x01, 0x6C, 0x48, 0x1E, 0x3A, 0x4A, 0xE4, 0xD0,  // .lH.:J..
                /* 08E0 */  0x29, 0x88, 0x87, 0x6E, 0x1A, 0x1F, 0x51, 0x70,  // )..n..Qp
                /* 08E8 */  0x63, 0x65, 0x17, 0x02, 0x58, 0x51, 0x4F, 0x29,  // ce..XQO)
                /* 08F0 */  0xA0, 0x10, 0x39, 0x7C, 0xD0, 0x8C, 0xE3, 0xE8,  // ..9|....
                /* 08F8 */  0x9E, 0x7A, 0x3C, 0x0F, 0x7E, 0x27, 0xF6, 0x31,  // .z<.~'.1
                /* 0900 */  0x0F, 0xEE, 0x49, 0x05, 0x77, 0x6A, 0xC4, 0x9D,  // ..I.wj..
                /* 0908 */  0x54, 0xC0, 0x30, 0x47, 0xEC, 0xA9, 0x0C, 0x1C,  // T.0G....
                /* 0910 */  0xFF, 0xFF, 0x23, 0x28, 0x70, 0xF4, 0x70, 0x04,  // ..#(p.p.
                /* 0918 */  0x05, 0xB4, 0x1C, 0x52, 0xF8, 0x31, 0x03, 0x73,  // ...R.1.s
                /* 0920 */  0x35, 0xE0, 0x47, 0x50, 0x8C, 0x42, 0x9B, 0x3E,  // 5.GP.B.>
                /* 0928 */  0x35, 0x1A, 0xB5, 0x6A, 0x50, 0xA6, 0x46, 0x99,  // 5..jP.F.
                /* 0930 */  0x06, 0xB5, 0xFA, 0x54, 0x6A, 0xCC, 0x98, 0x25,  // ...Tj..%
                /* 0938 */  0x28, 0x45, 0x58, 0xAD, 0x86, 0xEB, 0x50, 0x0F,  // (EX...P.
                /* 0940 */  0x07, 0x81, 0x38, 0xEE, 0x9A, 0x35, 0x64, 0xB2,  // ..8..5d.
                /* 0948 */  0x54, 0x81, 0x58, 0x88, 0x0A, 0x10, 0x26, 0x66,  // T.X...&f
                /* 0950 */  0x65, 0x02, 0xB1, 0xD4, 0x95, 0x09, 0xC4, 0x51,  // e......Q
                /* 0958 */  0x7C, 0x80, 0xB0, 0x80, 0x4A, 0x40, 0x58, 0x54,  // |...J@XT
                /* 0960 */  0x2B, 0x40, 0x54, 0x0B, 0x08, 0x8B, 0xE5, 0x05,  // +@T.....
                /* 0968 */  0x84, 0x05, 0x5B, 0x9D, 0x40, 0x1C, 0xC6, 0x0D,  // ..[.@...
                /* 0970 */  0x08, 0x93, 0xF2, 0x70, 0xD0, 0x60, 0x88, 0x9D,  // ...p.`..
                /* 0978 */  0xF3, 0xA8, 0x0E, 0x8E, 0x06, 0x11, 0x90, 0x43,  // .......C
                /* 0980 */  0xFB, 0x01, 0x62, 0x12, 0x16, 0x2D, 0x20, 0x0B,  // ..b..- .
                /* 0988 */  0x57, 0x04, 0xC4, 0x62, 0x80, 0x08, 0xC8, 0x3A,  // W..b...:
                /* 0990 */  0xD6, 0x26, 0x20, 0x8B, 0x02, 0x11, 0x90, 0xA5,  // .& .....
                /* 0998 */  0x69, 0x02, 0x62, 0x42, 0x41, 0x04, 0xE4, 0x90,  // i.bBA...
                /* 09A0 */  0xA2, 0x20, 0xFE, 0xFF, 0x81, 0x9C, 0x18, 0x44,  // . .....D
                /* 09A8 */  0x40, 0x0E, 0x6F, 0x0A, 0x88, 0x49, 0x51, 0x05,  // @.o..IQ.
                /* 09B0 */  0xC4, 0xD4, 0xBF, 0x0E, 0x04, 0xE4, 0x28, 0x20,  // ......( 
                /* 09B8 */  0x02, 0x72, 0x20, 0x5B, 0x40, 0x2C, 0x1E, 0x88,  // .r [@,..
                /* 09C0 */  0x80, 0xAC, 0xF0, 0x71, 0x27, 0x20, 0xCB, 0x05,  // ...q' ..
                /* 09C8 */  0x11, 0x90, 0x23, 0x18, 0x03, 0x62, 0x81, 0x40,  // ..#..b.@
                /* 09D0 */  0x04, 0xE4, 0xFF, 0x3F                           // ...?
            })
            Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "AOD")  // _UID: Unique ID
            Name (_WDG, Buffer (0x28)
            {
                /* 0000 */  0x6A, 0x0F, 0xBC, 0xAB, 0xA1, 0x8E, 0xD1, 0x11,  // j.......
                /* 0008 */  0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10, 0x00, 0x00,  // ....)...
                /* 0010 */  0x41, 0x41, 0x01, 0x02, 0x21, 0x12, 0x90, 0x05,  // AA..!...
                /* 0018 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  // f.......
                /* 0020 */  0xC9, 0x06, 0x29, 0x10, 0x42, 0x41, 0x01, 0x00   // ..).BA..
            })
            Method (WMAA, 3, NotSerialized)
            {
                If ((Arg0 == Zero))
                {
                    If ((((Arg1 != One) || (Arg1 != 0x02)) || 
                        (Arg1 != 0x06)))
                    {
                        CreateDWordField (Arg2, Zero, WIID)
                    }

                    If ((Arg1 == One))
                    {
                        Return (AM01 ())
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        Return (AM02 ())
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        Return (AM03 ())
                    }
                    ElseIf ((Arg1 == 0x04))
                    {
                        Return (AM04 (WIID))
                    }
                    ElseIf ((Arg1 == 0x05))
                    {
                        Return (AM05 (Arg2))
                    }
                    ElseIf ((Arg1 == 0x06))
                    {
                        Return (AM06 (WIID))
                    }
                    ElseIf ((Arg1 == 0x07))
                    {
                        Return (AM07 (WIID))
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }
        }
    }
}



SSDT6
-----
DefinitionBlock ("", "SSDT", 2, "ALASKA", "A M I", 0x01072009)
{
    Scope (\_PR)
    {
        Processor (C000, 0x00, 0x00000810, 0x06){}
        Processor (C001, 0x01, 0x00000810, 0x06){}
        Processor (C002, 0x02, 0x00000810, 0x06){}
        Processor (C003, 0x03, 0x00000810, 0x06){}
    }
}



SSDT7
-----
DefinitionBlock ("", "SSDT", 1, "ALASKA", "A M I", 0x00000001)
{
    External (_SB_.I2CA, DeviceObj)
    External (_SB_.I2CB, DeviceObj)
    External (_SB_.I2CC, DeviceObj)
    External (_SB_.I2CD, DeviceObj)
    External (M037, DeviceObj)
    External (M046, DeviceObj)
    External (M047, DeviceObj)
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M251, FieldUnitObj)
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)

    Name (MWTT, 0xFF)
    Scope (\_SB.I2CA)
    {
        Device (WT1A)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK0001A")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDFA")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x007F, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB.I2CA",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CA.WT1A._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT1A)
        {
            Name (_HID, "STK0001A")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0011, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB_.I2CA",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CA.MT1A._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT2A)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK0002A")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDFA")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0011, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB.I2CA",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CA.WT2A._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT2A)
        {
            Name (_HID, "STK0002A")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0012, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB_.I2CA",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CA.MT2A._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT3A)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK0003A")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDFA")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0012, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.I2CA",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CA.WT3A._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT3A)
        {
            Name (_HID, "STK0003A")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0013, ControllerInitiated, 0x000F4240,
                        AddressingMode7Bit, "\\_SB_.I2CA",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CA.MT3A._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT4A)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK0004A")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDFA")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0013, ControllerInitiated, 0x000F4240,
                        AddressingMode7Bit, "\\_SB.I2CA",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CA.WT4A._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT4A)
        {
            Name (_HID, "STK0004A")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0014, ControllerInitiated, 0x000222E0,
                        AddressingMode7Bit, "\\_SB_.I2CA",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CA.MT4A._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT5A)
        {
            Name (_HID, "STK0005A")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0015, ControllerInitiated, 0x00053020,
                        AddressingMode7Bit, "\\_SB_.I2CA",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CA.MT5A._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (\_SB.I2CB)
    {
        Device (WT1B)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK0001B")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDFB")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x007F, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB.I2CB",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CB.WT1B._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT1B)
        {
            Name (_HID, "STK0001B")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0011, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB_.I2CB",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CB.MT1B._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT2B)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK0002B")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDFB")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0011, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB.I2CB",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CB.WT2B._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT2B)
        {
            Name (_HID, "STK0002B")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0012, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB_.I2CB",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CB.MT2B._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT3B)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK0003B")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDFB")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0012, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.I2CB",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CB.WT3B._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT3B)
        {
            Name (_HID, "STK0003B")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0013, ControllerInitiated, 0x000F4240,
                        AddressingMode7Bit, "\\_SB_.I2CB",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CB.MT3B._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT4B)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK0004B")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDFB")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0013, ControllerInitiated, 0x000F4240,
                        AddressingMode7Bit, "\\_SB.I2CB",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CB.WT4B._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT4B)
        {
            Name (_HID, "STK0004B")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0014, ControllerInitiated, 0x000222E0,
                        AddressingMode7Bit, "\\_SB_.I2CB",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CB.MT4B._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT5B)
        {
            Name (_HID, "STK0005B")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0015, ControllerInitiated, 0x00053020,
                        AddressingMode7Bit, "\\_SB_.I2CB",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CB.MT5B._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (\_SB.I2CC)
    {
        Device (WT1C)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK0001C")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDFC")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x007F, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB.I2CC",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CC.WT1C._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT1C)
        {
            Name (_HID, "STK0001C")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0011, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB_.I2CC",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CC.MT1C._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT2C)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK0002C")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDFC")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0011, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB.I2CC",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CC.WT2C._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT2C)
        {
            Name (_HID, "STK0002C")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0012, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB_.I2CC",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CC.MT2C._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT3C)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK0003C")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDFC")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0012, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.I2CC",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CC.WT3C._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT3C)
        {
            Name (_HID, "STK0003C")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0013, ControllerInitiated, 0x000F4240,
                        AddressingMode7Bit, "\\_SB_.I2CC",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CC.MT3C._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT4C)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK0004C")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDFC")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0013, ControllerInitiated, 0x000F4240,
                        AddressingMode7Bit, "\\_SB.I2CC",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CC.WT4C._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT4C)
        {
            Name (_HID, "STK0004C")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0014, ControllerInitiated, 0x000222E0,
                        AddressingMode7Bit, "\\_SB_.I2CC",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CC.MT4C._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT5C)
        {
            Name (_HID, "STK0005C")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0015, ControllerInitiated, 0x00053020,
                        AddressingMode7Bit, "\\_SB_.I2CC",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CC.MT5C._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (\_SB.I2CD)
    {
        Device (WT1D)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK0001D")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDFD")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x007F, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB.I2CD",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CD.WT1D._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT1D)
        {
            Name (_HID, "STK0001D")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0011, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB_.I2CD",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CD.MT1D._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT2D)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK0002D")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDFD")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0011, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB.I2CD",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CD.WT2D._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT2D)
        {
            Name (_HID, "STK0002D")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0012, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB_.I2CD",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CD.MT2D._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT3D)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK0003D")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDFD")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0012, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.I2CD",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CD.WT3D._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT3D)
        {
            Name (_HID, "STK0003D")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0013, ControllerInitiated, 0x000F4240,
                        AddressingMode7Bit, "\\_SB_.I2CD",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CD.MT3D._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT4D)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK0004D")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDFD")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0013, ControllerInitiated, 0x000F4240,
                        AddressingMode7Bit, "\\_SB.I2CD",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CD.WT4D._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT4D)
        {
            Name (_HID, "STK0004D")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0014, ControllerInitiated, 0x000222E0,
                        AddressingMode7Bit, "\\_SB_.I2CD",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CD.MT4D._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT5D)
        {
            Name (_HID, "STK0005D")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0015, ControllerInitiated, 0x00053020,
                        AddressingMode7Bit, "\\_SB_.I2CD",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CD.MT5D._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }
}



SSDT8
-----
DefinitionBlock ("", "SSDT", 1, "ALASKA", "A M I", 0x00000001)
{
    External (_SB_.ALIB, MethodObj)    // 2 Arguments
    External (_SB_.IPTS, MethodObj)    // 1 Arguments
    External (_SB_.IWAK, MethodObj)    // 1 Arguments
    External (_SB_.M263, MethodObj)    // 1 Arguments
    External (_SB_.M264, MethodObj)    // 1 Arguments
    External (_SB_.M284, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GP18.SATA.TPTS, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GP18.SATA.TWAK, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.SATA.TPTS, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.SATA.TWAK, MethodObj)    // 1 Arguments
    External (M038, MethodObj)    // 1 Arguments
    External (M039, MethodObj)    // 2 Arguments
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M127, DeviceObj)
    External (MOEM, MethodObj)    // 3 Arguments

    OperationRegion (CPNV, SystemMemory, 0xDBE5A018, 0x000100CD)
    Field (CPNV, AnyAcc, Lock, Preserve)
    {
        M082,   32, 
        M083,   32, 
        M084,   32, 
        M085,   8, 
        M221,   8, 
        M086,   16, 
        M229,   8, 
        M231,   16, 
        M235,   8, 
        M233,   32, 
            ,   1, 
            ,   2, 
            ,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
        Offset (0x19), 
        M087,   1, 
            ,   1, 
        Offset (0x1C), 
        M088,   16, 
        M089,   16, 
        M090,   3, 
        M091,   5, 
        M092,   8, 
        M093,   3, 
        M094,   5, 
        M095,   8, 
        M096,   8, 
        M097,   8, 
        M098,   32, 
        M099,   32, 
        M100,   32, 
        M101,   32, 
        M102,   32, 
        M103,   32, 
        M104,   224, 
        M105,   32, 
        M106,   32768, 
        M378,   32768, 
        M379,   32768, 
        M380,   32768, 
        M381,   32768, 
        M382,   32768, 
        M383,   32768, 
        M384,   32768, 
        M385,   32768, 
        M386,   32768, 
        M387,   32768, 
        M388,   32768, 
        M389,   32768, 
        M390,   32768, 
        M391,   32768, 
        M392,   32768, 
        M107,   64, 
        M320,   32, 
        M321,   32, 
        M322,   32, 
        M323,   32, 
        M324,   32, 
        M325,   32, 
        M326,   32, 
        M327,   16, 
        M328,   8, 
        M128,   32, 
        M108,   32, 
        M109,   32, 
        M110,   32, 
        M122,   32, 
        M131,   32, 
        M132,   32, 
        M133,   32, 
        M134,   32, 
        M135,   32, 
        M136,   32, 
        M220,   32, 
        M226,   32, 
        M251,   32, 
        M310,   32, 
        M280,   32, 
        M290,   32, 
        M331,   32
    }

    Method (M000, 1, Serialized)
    {
        Name (M285, Buffer (0x04)
        {
             0x01, 0x03, 0x80, 0x00                           // ....
        })
        CreateByteField (M285, Zero, M286)
        CreateByteField (M285, One, M287)
        CreateWordField (M285, 0x02, M288)
        If ((ToInteger (M286) == One))
        {
            Local0 = (Arg0 + 0xB0000C00)
            Local1 = ToInteger (M288)
            If ((ToInteger (M287) == 0x03))
            {
                OperationRegion (VARM, SystemIO, Local1, 0x04)
                Field (VARM, DWordAcc, NoLock, Preserve)
                {
                    VARR,   32
                }

                VARR = Local0
            }
            ElseIf ((ToInteger (M287) == 0x02))
            {
                OperationRegion (VARN, SystemIO, Local1, 0x02)
                Field (VARN, WordAcc, NoLock, Preserve)
                {
                    VARS,   16
                }

                VARS = (Local0 & 0xFFFF)
            }
            ElseIf ((ToInteger (M287) == One))
            {
                OperationRegion (VARO, SystemIO, Local1, One)
                Field (VARO, ByteAcc, NoLock, Preserve)
                {
                    VART,   8
                }

                VART = (Local0 & 0xFF)
            }
        }
    }

    Method (M019, 4, Serialized)
    {
        Return (M017 (Arg0, Arg1, Arg2, Arg3, Zero, 0x20))
    }

    Method (M020, 5, Serialized)
    {
        M018 (Arg0, Arg1, Arg2, Arg3, Zero, 0x20, Arg4)
    }

    Mutex (M253, 0x00)
    Method (M249, 3, Serialized)
    {
        If (((Arg0 == Zero) && (Arg1 == Zero)))
        {
            Local0 = Zero
        }
        Else
        {
            Local0 = M252 (Arg0, Arg1)
        }

        If ((Local0 == Ones))
        {
            Return (Ones)
        }

        Local0 = (M083 + (Local0 << 0x14))
        Local0 += 0xB8
        Acquire (M253, 0xFFFF)
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg2, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local1 = VAR1 /* \M249.VAR1 */
        Local2 = VAR2 /* \M249.VAR2 */
        VAR1 = Local1
        Release (M253)
        Return (Local2)
    }

    Method (M250, 4, Serialized)
    {
        If (((Arg0 == Zero) && (Arg1 == Zero)))
        {
            Local0 = Zero
        }
        Else
        {
            Local0 = M252 (Arg0, Arg1)
        }

        If ((Local0 != Ones))
        {
            Local0 = (M083 + (Local0 << 0x14))
            Local0 += 0xB8
            Acquire (M253, 0xFFFF)
            OperationRegion (VARM, SystemMemory, Local0, 0x08)
            Field (VARM, DWordAcc, NoLock, Preserve)
            {
                VAR1,   32
            }

            BankField (VARM, VAR1, Arg2, DWordAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                VAR2,   32
            }

            Local1 = VAR1 /* \M250.VAR1 */
            VAR2 = Arg3
            VAR1 = Local1
            Release (M253)
        }
    }

    Method (M021, 4, Serialized)
    {
        Local0 = (M083 + (Arg0 << 0x14))
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Local0 += 0xE0
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local0 = VAR2 /* \M021.VAR2 */
        Return (Local0)
    }

    Method (M022, 5, Serialized)
    {
        Local0 = (M083 + (Arg0 << 0x14))
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Local0 += 0xE0
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        VAR2 = Arg4
    }

    Method (M023, 3, Serialized)
    {
        M018 (Arg0, Arg1, Arg2, 0x70, 0x03, One, Zero)
        M018 (Arg0, Arg1, Arg2, 0x70, 0x13, One, One)
    }

    Method (M024, 3, Serialized)
    {
        Local0 = M019 (Arg0, Arg1, Arg2, 0x0128)
        If ((Local0 & 0x00020000))
        {
            Return (Ones)
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (M026, 3, Serialized)
    {
        Local0 = M021 (Arg0, Arg1, Arg2, 0xA2)
        Local0 &= 0xFFFFFFF8
        Local1 = (Local0 >> 0x04)
        Local1 &= 0x07
        Local0 |= Local1
        Local0 |= 0x0100
        M022 (Arg0, Arg1, Arg2, 0xA2, Local0)
    }

    Method (M025, 3, Serialized)
    {
        Local0 = M019 (Arg0, Arg1, Arg2, 0x68)
        Local0 &= 0xFFFFFFDF
        M020 (Arg0, Arg1, Arg2, 0x68, Local0)
        Local0 |= 0x20
        M020 (Arg0, Arg1, Arg2, 0x68, Local0)
        Local1 = 0x64
        Local2 = One
        While ((Local1 && Local2))
        {
            Sleep (One)
            Local3 = M019 (Arg0, Arg1, Arg2, 0x68)
            If ((Local3 & 0x08000000))
            {
                Local1--
            }
            Else
            {
                Local2 = Zero
            }
        }

        Local0 &= 0xFFFFFFDF
        M020 (Arg0, Arg1, Arg2, 0x68, Local0)
        If (!Local2)
        {
            Return (Ones)
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (M009, 1, Serialized)
    {
        Local0 = (Arg0 >> 0x08)
        Local1 = (Arg0 & 0xFF)
        Local2 = Zero
        If ((Local0 == Zero))
        {
            If ((M085 >= 0x02))
            {
                Local2 = M011 ((M084 + 0x1502), (Local1 * 0x04), Zero, 
                    One)
            }
            Else
            {
                Local2 = M011 ((M084 + 0x0100), Local1, 0x07, One)
            }
        }
        ElseIf ((Local0 == One))
        {
            Local2 = M038 (Local1)
        }
        ElseIf ((Local0 == 0x02))
        {
            Local2 = M038 ((Local1 + 0x08))
        }

        Return (Local2)
    }

    Method (M010, 2, Serialized)
    {
        Local0 = (Arg0 >> 0x08)
        Local1 = (Arg0 & 0xFF)
        If ((Local0 == Zero))
        {
            If ((M085 >= 0x02))
            {
                M012 ((M084 + 0x1502), (Local1 * 0x04), 0x06, 0x02, (
                    0x02 | Arg1))
            }
            Else
            {
                M012 ((M084 + 0x0100), Local1, 0x06, One, Arg1)
                M012 ((M084 + 0x0100), Local1, 0x05, One, Zero)
            }
        }
        ElseIf ((Local0 == One))
        {
            M039 (Local1, Arg1)
        }
        ElseIf ((Local0 == 0x02))
        {
            M039 ((Local1 + 0x08), Arg1)
        }
    }

    Name (M037, Buffer (0x17)
    {
        /* 0000 */  0x7E, 0x81, 0x03, 0x16, 0x04, 0x15, 0x0E, 0x05,  // ~.......
        /* 0008 */  0x02, 0x20, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // . ......
        /* 0010 */  0x17, 0x19, 0x0B, 0x01, 0x0F, 0x0D, 0x09         // .......
    })
    Name (M227, Buffer (0x18)
    {
        /* 0000 */  0x41, 0x42, 0x03, 0x16, 0x04, 0x15, 0x0E, 0x05,  // AB......
        /* 0008 */  0x02, 0x44, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // .D......
        /* 0010 */  0x17, 0x45, 0x0B, 0x01, 0x0F, 0x0D, 0x09, 0x08   // .E......
    })
    Name (M329, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x4C, 0x10, 0x11, 0x12, 0x18,  // .V.L....
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Name (M32A, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x4C, 0x10, 0x11, 0x1D, 0x1E,  // .V.L....
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Name (M330, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // .V......
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Method (M029, 1, Serialized)
    {
        If ((M085 == 0x02))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M037 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 >= 0x09))
        {
            If ((M085 >= 0x0B))
            {
                Return (M011 ((M084 + 0x1502), (DerefOf (M32A [Arg0]) * 
                    0x04), Zero, One))
            }
            Else
            {
                Return (M011 ((M084 + 0x1502), (DerefOf (M330 [Arg0]) * 
                    0x04), Zero, One))
            }
        }
        ElseIf ((M085 == 0x08))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M329 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 >= 0x03))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M227 [Arg0]) * 
                0x04), Zero, One))
        }
        Else
        {
            Return (M011 ((M084 + 0x0160), Arg0, 0x07, One))
        }
    }

    Method (M031, 1, Serialized)
    {
        Local0 = M011 ((M084 + 0x0240), Arg0, Zero, 0x05)
        Return (M011 ((M084 + 0x0208), (Local0 / 0x08), (Local0 & 
            0x07), One))
    }

    Method (M032, 2, Serialized)
    {
        Local0 = M011 ((M084 + 0x0240), Arg0, Zero, 0x05)
        M012 ((M084 + 0x0208), (Local0 / 0x08), (Local0 & 0x07
            ), One, Arg1)
    }

    Method (M013, 4, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, 0x04)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VARR,   32
        }

        Local1 = VARR /* \M013.VARR */
        Local5 = 0x7FFFFFFF
        Local5 |= 0x80000000
        Local2 = ((Local1 >> Arg2) & (Local5 >> (0x20 - Arg3)
            ))
        Return (Local2)
    }

    Method (M014, 5, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, 0x04)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VARR,   32
        }

        Local1 = VARR /* \M014.VARR */
        Local5 = 0x7FFFFFFF
        Local5 |= 0x80000000
        Local2 = (Arg2 + Arg3)
        Local2 = (0x20 - Local2)
        Local2 = (((Local5 << Local2) & Local5) >> Local2)
        Local2 = ((Local2 >> Arg2) << Arg2)
        Local3 = (Arg4 << Arg2)
        Local4 = ((Local1 & (Local5 ^ Local2)) | Local3)
        VARR = Local4
    }

    Method (M011, 4, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, One)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            VARR,   8
        }

        Local1 = VARR /* \M011.VARR */
        Local2 = ((Local1 >> Arg2) & (0xFF >> (0x08 - Arg3)
            ))
        Return (Local2)
    }

    Method (M012, 5, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, One)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            VARR,   8
        }

        Local1 = VARR /* \M012.VARR */
        Local2 = (Arg2 + Arg3)
        Local2 = (0x08 - Local2)
        Local2 = (((0xFF << Local2) & 0xFF) >> Local2)
        Local2 = ((Local2 >> Arg2) << Arg2)
        Local3 = (Arg4 << Arg2)
        Local4 = ((Local1 & (0xFF ^ Local2)) | Local3)
        VARR = Local4
    }

    Method (M017, 6, Serialized)
    {
        Local0 = M083 /* \M083 */
        Local1 = (M083 >> 0x14)
        Local2 = (Local1 & 0x0F00)
        Local2 += 0x0100
        If (((Local1 + Arg0) >= Local2))
        {
            Local3 = 0x7FFFFFFF
            Local3 |= 0x80000000
            Local4 = ((Local3 >> Arg4) & (Local3 >> (0x20 - Arg5)
                ))
            Return (Local4)
        }

        Local0 += (Arg0 << 0x14)
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Return (M013 (Local0, Arg3, Arg4, Arg5))
    }

    Method (M018, 7, Serialized)
    {
        Local0 = M083 /* \M083 */
        Local1 = (M083 >> 0x14)
        Local2 = (Local1 & 0x0F00)
        Local2 += 0x0100
        If (((Local1 + Arg0) < Local2))
        {
            Local0 += (Arg0 << 0x14)
            Local0 += (Arg1 << 0x0F)
            Local0 += (Arg2 << 0x0C)
            If ((M013 (Local0, Zero, Zero, 0x20) != Ones))
            {
                M014 (Local0, Arg3, Arg4, Arg5, Arg6)
            }
        }
    }

    Method (M265, 3, Serialized)
    {
        Local0 = Zero
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
        While ((Local1 != Zero))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                Local3 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x0C), 0x12, One)
                Local4 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x10), 0x08, One)
                If (((Local3 == One) && (Local4 == One)))
                {
                    Local0 = One
                }

                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
        }

        Return (Local0)
    }

    Method (M033, 3, Serialized)
    {
        Local0 = Zero
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
        While ((Local1 != Zero))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                Local0 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x0C), 0x0A, 0x02)
                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
        }

        Return (Local0)
    }

    Method (M027, 3, Serialized)
    {
        Local0 = Zero
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
        While ((Local1 != Zero))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                Local0 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x10), Zero, 0x02)
                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
        }

        Return (Local0)
    }

    Method (M028, 4, Serialized)
    {
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
        While (((Local1 != Zero) && (Local1 < 0xFF)))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                M018 (Arg0, Arg1, Arg2, (Local1 + 0x10), Zero, 0x02, Arg3)
                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
        }
    }

    Method (M034, 1, Serialized)
    {
        Return (M011 ((M084 + 0x0700), Arg0, Zero, 0x08))
    }

    Method (M015, 1, Serialized)
    {
        Return (M011 ((M084 + 0x0400), Arg0, Zero, 0x08))
    }

    Method (M016, 2, Serialized)
    {
        M012 ((M084 + 0x0400), Arg0, Zero, 0x08, Arg1)
    }

    Method (M035, 1, Serialized)
    {
        Return (M011 (M084, Arg0, Zero, 0x08))
    }

    Method (M036, 2, Serialized)
    {
        M012 (M084, Arg0, Zero, 0x08, Arg1)
    }

    Method (M001, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 == 0x15))
        {
            Local0 = One
        }

        Return (Local0)
    }

    Method (M003, 3, Serialized)
    {
        Local0 = (Arg0 << 0x05)
        Local1 = (Local0 + Arg1)
        Local2 = (Local1 << 0x18)
        Local3 = (Local2 + Arg2)
        Return (Local3)
    }

    Method (M004, 1, Serialized)
    {
        OperationRegion (VARM, SystemIO, 0x0CD8, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg0, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local0 = VAR2 /* \M004.VAR2 */
        Return (Local0)
    }

    Method (M005, 2, Serialized)
    {
        OperationRegion (VARM, SystemIO, 0x0CD8, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg0, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        VAR2 = Arg1
    }

    Method (M006, 3, Serialized)
    {
        Local0 = (M004 (Arg0) & Arg1)
        Local1 = (Local0 | Arg2)
        M005 (Arg0, Local1)
    }

    Method (M002, 2, Serialized)
    {
        If ((Arg0 == Zero))
        {
            If ((Arg1 == Zero))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFEFFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFEFE, Zero)
            }

            If ((Arg1 == One))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFDFFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFDFD, Zero)
            }

            If ((Arg1 == 0x02))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFBFFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFBFB, Zero)
            }

            If ((Arg1 == 0x03))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFF7FFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFF7F7, Zero)
            }

            Sleep (One)
        }

        If ((Arg0 == One))
        {
            If ((Arg1 == Zero))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFEFFF, 0x1000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFEFE, 0x0101)
            }

            If ((Arg1 == One))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFDFFF, 0x2000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFDFD, 0x0202)
            }

            If ((Arg1 == 0x02))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFBFFF, 0x4000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFBFB, 0x0404)
            }

            If ((Arg1 == 0x03))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFF7FFF, 0x8000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFF7F7, 0x0808)
            }

            Sleep (One)
        }

        If ((Arg0 == Zero))
        {
            M008 (Arg1)
            Local0 = M004 (M003 (0x03, Arg1, 0xA5))
            Local0 &= 0xFF
            Local1 = 0x01F4
            While (((Local1 > Zero) && (Local0 != 0x10)))
            {
                Local0 = M004 (M003 (0x03, Arg1, 0xA5))
                Local0 &= 0xFF
                Local1--
                Sleep (One)
            }

            If ((Local0 != 0x10))
            {
                M007 (Arg1)
            }
        }
    }

    Method (M008, 1, Serialized)
    {
        Local0 = M019 (Zero, 0x15, Arg0, 0x88)
        Local1 = ((Local0 & 0xFFFFFFF0) | 0x02)
        M020 (Zero, 0x15, Arg0, 0x88, Local1)
        M006 (M003 (0x03, Arg0, 0xA4), 0xFFFFFFFE, One)
        M006 (M003 (0x03, Arg0, 0xA2), 0xFFFFDFFF, 0x2000)
        M006 (M003 (0x03, Arg0, 0xC0), 0xFFFF7FFF, 0x8000)
        M006 (M003 (0x03, Arg0, 0xA4), 0xDFFFFFFF, 0x20000000)
        Sleep (One)
    }

    Method (M007, 1, Serialized)
    {
        Local0 = M019 (Zero, 0x15, Arg0, 0x88)
        Local1 = ((Local0 & 0xFFFFFFF0) | One)
        M020 (Zero, 0x15, Arg0, 0x88, Local1)
        M006 (M003 (0x03, Arg0, 0xA4), 0xFFFFFFFE, Zero)
        M006 (M003 (0x03, Arg0, 0xA2), 0xFFFFDFFF, 0x2000)
        Sleep (One)
    }

    Method (M111, 2, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = M110 /* \M110 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        Local3 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                        If ((Local3 != Zero))
                        {
                            Local4 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                            If ((Local4 == Zero))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                M010 (Local5, Local6)
                            }

                            If ((Local4 == One))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                While ((M009 (Local5) != Local6)){}
                            }

                            If ((Local4 == 0x02))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                                Sleep (((Local5 + 0x03E7) / 0x03E8))
                            }
                        }
                    }

                    Local1 += 0x08
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                }
            }
        }
    }

    Method (M228, 1, Serialized)
    {
        If ((Arg0 > 0x03))
        {
            Local0 = M110 /* \M110 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local3 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                    If ((Local3 == Arg0))
                    {
                        Local4 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                        If ((Local4 == Zero))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            M010 (Local5, Local6)
                        }

                        If ((Local4 == One))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            While ((M009 (Local5) != Local6)){}
                        }

                        If ((Local4 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Sleep (((Local5 + 0x03E7) / 0x03E8))
                        }
                    }

                    Local1 += 0x08
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                }
            }
        }
    }

    Method (M219, 2, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = M221 /* \M221 */
            If ((Local0 & 0x02))
            {
                Local0 = M220 /* \M220 */
                If (Local0)
                {
                    Local0 += 0x10
                    Local1 = Zero
                    Local2 = One
                    While ((Local2 != 0xFF))
                    {
                        Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                        Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                        Local4 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                        Local5 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                        If ((Local4 == Arg0))
                        {
                            If (((Local2 < 0x0A) && (Local5 & 0x80)))
                            {
                                If ((Arg1 == Zero))
                                {
                                    If ((M085 >= 0x04))
                                    {
                                        M012 ((M084 + 0x0E00), Zero, (Local2 * 0x02), 0x02, Zero)
                                    }
                                    Else
                                    {
                                        M012 ((M084 + 0x0E00), (Local2 / 0x02), ((Local2 & 
                                            One) * 0x04), 0x04, Zero)
                                    }
                                }
                                ElseIf ((Local5 & 0x04))
                                {
                                    If ((Arg1 == One))
                                    {
                                        If ((M085 >= 0x04))
                                        {
                                            M012 ((M084 + 0x0E00), Zero, (Local2 * 0x02), 0x02, 0x03)
                                        }
                                        Else
                                        {
                                            M012 ((M084 + 0x0E00), (Local2 / 0x02), ((Local2 & 
                                                One) * 0x04), 0x04, 0x0F)
                                        }
                                    }

                                    If ((Arg1 == 0x02))
                                    {
                                        Local6 = M017 (Zero, M013 ((Local0 + Local1), 0x05, Zero, 0x08), 
                                            M013 ((Local0 + Local1), 0x06, Zero, 0x08), 0x19, Zero, 0x08)
                                        If ((M265 (Local6, Zero, Zero) == One))
                                        {
                                            If ((M085 >= 0x04))
                                            {
                                                M012 ((M084 + 0x0E00), Zero, (Local2 * 0x02), 0x02, One)
                                            }
                                            Else
                                            {
                                                M012 ((M084 + 0x0E00), (Local2 / 0x02), ((Local2 & 
                                                    One) * 0x04), 0x04, Local3)
                                            }
                                        }
                                    }
                                }
                                ElseIf ((M085 >= 0x04))
                                {
                                    M012 ((M084 + 0x0E00), Zero, (Local2 * 0x02), 0x02, 0x03)
                                }
                                Else
                                {
                                    M012 ((M084 + 0x0E00), (Local2 / 0x02), ((Local2 & 
                                        One) * 0x04), 0x04, Local3)
                                }

                                Local2 = 0xFF
                            }
                        }

                        Local1 += 0x0C
                    }
                }
            }
        }
    }

    Method (M112, 2, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = M109 /* \M109 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = One
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                    Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        If ((Local3 < 0x02))
                        {
                            Local4 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                            If ((Local4 == Zero))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                M010 (Local5, Local6)
                            }
                        }

                        If ((Local3 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Sleep (((Local5 + 0x03E7) / 0x03E8))
                        }
                    }

                    Local1 += 0x08
                }
            }
        }
    }

    Method (M275, 2, Serialized)
    {
        Local7 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = M109 /* \M109 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = One
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                    Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        If ((Local3 < 0x02))
                        {
                            Local4 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                            If ((Local4 == Zero))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                If ((M009 (Local5) == Local6))
                                {
                                    Local7 = One
                                }
                            }
                        }
                    }

                    Local1 += 0x08
                }
            }
        }

        Return (Local7)
    }

    Method (M113, 1, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = M108 /* \M108 */
            Local7 = One
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = One
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                    If ((Local2 == Arg0))
                    {
                        Local2 = 0xFF
                        Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                        If ((Local3 == Zero))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                        }

                        If ((Local3 == One))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x05, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                            Local7 &= (M009 (Local5) == Local6)
                        }

                        If ((Local3 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x05, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                            Local7 &= (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x08, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x0A, Zero, 0x08)
                            Local7 &= (M009 (Local5) == Local6)
                        }

                        If ((Local3 == 0x03))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x05, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                            Local7 |= (M009 (Local5) == Local6)
                        }

                        If ((Local3 == 0x04))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x05, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                            Local7 |= (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x08, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x0A, Zero, 0x08)
                            Local7 |= (M009 (Local5) == Local6)
                        }
                    }
                    Else
                    {
                        Local1 += 0x0B
                    }
                }
            }
        }
        Else
        {
            Local7 = Zero
        }

        If (Local7)
        {
            Local7 = One
        }

        Return (Local7)
    }

    Method (M114, 4, Serialized)
    {
        Local7 = Zero
        If (!M001 (Arg0, Arg1))
        {
            Name (M115, Buffer (0x05){})
            CreateWordField (M115, Zero, M116)
            CreateField (M115, 0x10, 0x03, M117)
            CreateField (M115, 0x13, 0x05, M118)
            CreateByteField (M115, 0x03, M119)
            CreateByteField (M115, 0x04, M120)
            M116 = 0x05
            M119 = Zero
            M118 = Arg0
            M117 = Arg1
            If ((Arg2 == Zero))
            {
                If ((Arg3 != One))
                {
                    M120 = Zero
                    \_SB.ALIB (0x06, M115)
                }
            }
            Else
            {
                If ((Arg3 != One))
                {
                    M120 = One
                    \_SB.ALIB (0x06, M115)
                }

                Local0 = M017 (Zero, Arg0, Arg1, 0x19, Zero, 0x08)
                If (((Local0 != Zero) && (Local0 != 0xFF)))
                {
                    Local1 = M019 (Local0, Zero, Zero, Zero)
                    Local2 = 0x7FFFFFFF
                    Local2 |= 0x80000000
                    If (((Local1 != Zero) && (Local1 != Local2)))
                    {
                        Local7 = One
                    }
                }
            }
        }
        ElseIf ((Arg2 == Zero))
        {
            M002 (One, Arg1)
        }
        Else
        {
            M002 (Zero, Arg1)
            Local0 = M017 (Zero, Arg0, Arg1, 0x19, Zero, 0x08)
            If (((Local0 != Zero) && (Local0 != 0xFF)))
            {
                Local1 = M019 (Local0, Zero, Zero, Zero)
                Local2 = 0x7FFFFFFF
                Local2 |= 0x80000000
                If (((Local1 != Zero) && (Local1 != Local2)))
                {
                    Local7 = One
                }
            }
        }

        Return (Local7)
    }

    Method (M252, 2, Serialized)
    {
        If ((M085 >= 0x08))
        {
            Local0 = M251 /* \M251 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = Zero
                While ((Local2 != 0xFF))
                {
                    Local2 = M011 ((Local0 + Local1), Zero, Zero, 0x08)
                    Local3 = M011 ((Local0 + Local1), One, Zero, 0x08)
                    Local4 = M011 ((Local0 + Local1), 0x02, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        Return (Local4)
                    }

                    Local1 += 0x03
                }
            }
        }

        Return (Ones)
    }

    Name (M046, Zero)
    Name (M047, Ones)
    Method (M045, 0, Serialized)
    {
        Local0 = Zero
        If ((M047 == Ones))
        {
            M047 = Zero
            M046 = Zero
            If (CondRefOf (\_OSI))
            {
                If (\_OSI ("Windows 2012"))
                {
                    M046 = One
                }

                If (\_OSI ("Windows 2013"))
                {
                    M046 = One
                }

                If (\_OSI ("Windows 2015"))
                {
                    M046 = One
                }

                If (\_OSI ("Windows 2016"))
                {
                    M046 = One
                }

                If (\_OSI ("Windows 2017"))
                {
                    M046 = One
                }
            }
        }

        If ((M046 == One))
        {
            Local0 = One
        }

        Return (Local0)
    }

    Method (M049, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = M011 (Arg0, Arg1, Zero, 0x08)
        }

        Return (Local0)
    }

    Mutex (M230, 0x00)
    Method (M232, 3, Serialized)
    {
        Local0 = Arg0
        Local1 = Arg1
        Local2 = Arg2
        Acquire (M230, 0xFFFF)
        Local0 = Arg0
        OperationRegion (VARM, SystemIO, M231, 0x02)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            VAR1,   8, 
            VAR2,   8
        }

        VAR2 = Local1
        VAR1 = Local0
        Sleep (Local2)
        Release (M230)
    }

    Method (M043, 3, Serialized)
    {
        If (CondRefOf (MOEM))
        {
            Return (MOEM (Arg0, Arg1, Arg2))
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (MLIB, 2, Serialized)
    {
        Switch (ToInteger (Arg0))
        {
            Case (Zero)
            {
                Local0 = DerefOf (Arg1 [0x02])
                Switch (ToInteger (Local0))
                {
                    Case (0x03)
                    {
                        M228 (0x04)
                        M228 (0x05)
                    }
                    Case (0x04)
                    {
                        M228 (0x04)
                        M228 (0x06)
                    }
                    Case (0x03)
                    {
                        M228 (0x04)
                        M228 (0x07)
                    }

                }
            }

        }
    }

    Method (M248, 1, Serialized)
    {
        If ((M085 == 0x08))
        {
            If ((Arg0 == Zero))
            {
                Return (M017 (Zero, 0x07, One, 0x19, Zero, 0x08))
            }
            Else
            {
                Return (M017 (Zero, 0x08, One, 0x19, Zero, 0x08))
            }
        }
        ElseIf ((M085 >= 0x0B))
        {
            If ((Arg0 == Zero))
            {
                Return (M017 (Zero, 0x07, One, 0x19, Zero, 0x08))
            }
            Else
            {
                Return (M017 (Zero, 0x08, Arg0, 0x19, Zero, 0x08))
            }
        }
        ElseIf ((M085 >= 0x09))
        {
            If ((Arg0 == Zero))
            {
                Return (M017 (Zero, 0x08, One, 0x19, Zero, 0x08))
            }
            Else
            {
                Return (M017 (Zero, 0x08, 0x02, 0x19, Zero, 0x08))
            }
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (MPTS, 1, NotSerialized)
    {
        Local0 = M049 (M128, 0x67)
        If (((Local0 & 0x03) == 0x03))
        {
            If ((M085 >= 0x08))
            {
                \_SB.PCI0.GP18.SATA.TPTS (Arg0)
            }
            Else
            {
                \_SB.PCI0.SATA.TPTS (Arg0)
            }
        }

        If ((M226 != Zero))
        {
            \_SB.M263 (Arg0)
        }

        If ((M331 != Zero))
        {
            If ((M049 (M331, 0x12) && M049 (M331, 0x13)))
            {
                \_SB.IPTS (Arg0)
            }
        }
    }

    Method (MWAK, 1, NotSerialized)
    {
        Local0 = M049 (M128, 0x67)
        If (((Local0 & 0x03) == 0x03))
        {
            If ((M085 >= 0x08))
            {
                \_SB.PCI0.GP18.SATA.TWAK (Arg0)
            }
            Else
            {
                \_SB.PCI0.SATA.TWAK (Arg0)
            }
        }

        If ((M226 != Zero))
        {
            \_SB.M264 (Arg0)
        }

        If ((M280 != Zero))
        {
            \_SB.M284 (Arg0)
        }

        If ((M331 != Zero))
        {
            If ((M049 (M331, 0x12) && M049 (M331, 0x13)))
            {
                \_SB.IWAK (Arg0)
            }
        }
    }
}



UEFI
----
[000h 0000   4]                    Signature : "UEFI"    [UEFI Boot Optimization Table]
[004h 0004   4]                 Table Length : 00000042
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 21
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I"
[018h 0024   4]                 Oem Revision : 00000002
[01Ch 0028   4]              Asl Compiler ID : "    "
[020h 0032   4]        Asl Compiler Revision : 01000013

[024h 0036  16]              UUID Identifier : C68ED8E2-9DC6-4CBD-9D94-DB65ACC5C332
[034h 0052   2]                  Data Offset : 0036

Raw Table Data: Length 66 (0x42)

    0000: 55 45 46 49 42 00 00 00 01 21 41 4C 41 53 4B 41  // UEFIB....!ALASKA
    0010: 41 20 4D 20 49 00 00 00 02 00 00 00 20 20 20 20  // A M I.......    
    0020: 13 00 00 01 E2 D8 8E C6 C6 9D BD 4C 9D 94 DB 65  // ...........L...e
    0030: AC C5 C3 32 36 00 01 00 00 00 00 10 A6 DB 00 00  // ...26...........
    0040: 00 00                                            // ..


WSMT
----
[000h 0000   4]                    Signature : "WSMT"    [Windows SMM Security Migrations Table]
[004h 0004   4]                 Table Length : 00000028
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 88
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   4]             Protection Flags : 00000004
                          FIXED_COMM_BUFFERS : 0
           COMM_BUFFER_NESTED_PTR_PROTECTION : 0
                  SYSTEM_RESOURCE_PROTECTION : 1

Raw Table Data: Length 40 (0x28)

    0000: 57 53 4D 54 28 00 00 00 01 88 41 4C 41 53 4B 41  // WSMT(.....ALASKA
    0010: 41 20 4D 20 49 00 00 00 09 20 07 01 41 4D 49 20  // A M I.... ..AMI 
    0020: 13 00 01 00 04 00 00 00                          // ........


